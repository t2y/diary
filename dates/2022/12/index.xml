<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2022/12 on forest nook</title><link>/diary/dates/2022/12/</link><description>Recent content in 2022/12 on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/dates/2022/12/index.xml" rel="self" type="application/rss+xml"/><item><title>父の通夜</title><link>/diary/posts/2022/1227/</link><pubDate>Tue, 27 Dec 2022 09:53:38 +0900</pubDate><guid>/diary/posts/2022/1227/</guid><description>私は0時ぐらいから横になっていたものの、2時に母が家に帰って4時過ぎに戻ってきたり、わりと周りでバタバタしていたのであまり寝ている雰囲気ではなかった。また3時頃に石油ファンヒーターの灯油がきれて、そこから冷え込みがずっと大きくなって、一番寒い時間帯に部屋がぐっと寒い状況になって、斎場のスタッフが帰る前に灯油を補充しておくことを学んだ。それでも5時から7時までの2時間ほどはこたつにくるまってよく眠れたと思う。2-3時間しか寝てないが、わりと1日を通して平気だった。
8時からお寺へ訪問し、住職に故人の説明を行い仏具を借りる。実は住職の父も昨日亡くなっていて、今日が告別式になる。9時をまわると告別式の準備に忙しいだろうと見通して8時から伺ってみた。快く応対してくれて8時からお茶を飲みながら故人のお話などをした。うちの地元の住職は地域から追い出されていなくなっている。そのため、隣の地区の住職にお願いするようにしている。うちは祖母と祖父の頃からずっとお世話になっているので父のことも覚えていてくれて、いくつかお話をした。
斎場に戻り、生花・乾物・果物の発注と金額の確認し、10時30分から入棺をしてもらう。故人を棺に納めていただく際、かるくお湯で流し、散髪してもらい、服などを着せ替えてもらって見た目を整える。これはいくつか追加料金で行ってもらうことだけど、顔がとてもきれいになって、訪れた弔問客にも評判がよかった。なるべくよい状態で故人を見送るという意図で追加料金を支払ってやった方がよいと私は思った。
1時間ほどで入棺も済み、13時に成年後見人の弁護士さんが来られた。通夜は参加できないものの、今後の手続きのために死亡届のコピーを手渡す。死亡届を提出すると、故人の名義の銀行口座は凍結して一切の入出金が出来なくなるらしい。私が訃報を聞いてすぐに弁護士さんにメールで一報を入れていたのが功を奏して、弁護士さんはすぐに裁判所の確認をとって、緊急で200万円を父の口座から出金しておいてくれた。このお金を使って葬儀にかかる必要の支払いができる。これをしていないと、一旦身内ですべて支払うしかなくなる。父の口座が凍結されると、相続しない限り出金出来なくなくなっていた。なるべく相続前に父のお金を減らすことは節税につながるので大きな違いになる。ちょっとした tips のようなもので銀行員は口座を凍結するので名義人が亡くなったことを知ることができる。父は銀行員だったので、連絡していないにも関わらず、通夜に勤め先だった銀行から生花が届いていた。その後、相続の話と 任意後見制度 の話を伺う。
弁護士さんとの話が終わり、斎場のスタッフと家に戻って遺骨を安置する祭壇を作ってもらい、今朝に住職から借りた祭壇の仏具も設置してもらう。なぜお寺から仏具を借りないといけないかというと、宗派が異なると祭壇の作り方は異なるため、宗派ごとの専用の仏具でないといけないらしい。大雑把にいえば、ISO で標準化されていないので祭壇に対して宗派独自拡張を追加するみたいな話だと理解した。飾りが終わったら後でお寺に返す。祭壇の設置前、同時に 神棚封じ もしていただいた。
斎場に戻り、早めに来られた親戚に挨拶しつつ、提灯を選択してもらう。これも親族ではなく、親戚が選択して告別式に飾られる。ややこしいのがグレードとオプションがあって価格差もあって、親戚の思いもあるので、一概に親族で決められず、親戚間の調整をしてもらう必要がある。支払いも親戚になるため、割り勘にするにしろ、ある親戚が購入するにしろ、調整が必要になる。
17時になって通夜が開始された。住職がお経を読んでいる間に焼香を順番にしていく。私は喪主なので一番最初に行い、焼香台の横で立って弔問客の焼香を見守る。他人の焼香を間近でみる機会がこれまでなかった。焼香を眺めていると、人それぞれ焼香のやり方がバラバラで様々なスタイルがある。途中から焼香スタイルの観察にわりと関心をもってみていた。
お経が終わり、住職の法話を聞く。
人は2度死ぬ。1度目は亡くなったとき。2度目は人々の記憶からなくなったとき。
素晴らしい法話であった。この話しは過去に聞いた記憶があるなぁとか、既視感かもしれないが、思い返していた。
最後に喪主の挨拶。通夜の挨拶は簡単でよいとのことで御礼と明日の告別式の案内で締めた。通夜はそれで終わり、弔問客によってはお膳を持って帰る人、その場で一緒に食べて帰る人、いろいろな事情でこれも様々。弔問客に小学校の同級生がいた。市役所で働いているので死亡届から訃報を知ったのでわざわざ来てくれた。感謝。私が逆の立場だったら数年会ってもいない小学校の同級生の父の通夜に弔問するだろうかと考えさせられた。私自身あまり社会性のない人間なのでそういうところをできる範囲で正していった方がよいのかもしれない。
その後、残った親戚と一緒にお膳を食べて控え室でゆっくり過ごしていた。そういった親族も21時頃で全員帰った。私はそれから記録を整理して、明日の告別式に備える。明日は告別式と初七日の2つの葬儀がある</description><content>&lt;p>私は0時ぐらいから横になっていたものの、2時に母が家に帰って4時過ぎに戻ってきたり、わりと周りでバタバタしていたのであまり寝ている雰囲気ではなかった。また3時頃に石油ファンヒーターの灯油がきれて、そこから冷え込みがずっと大きくなって、一番寒い時間帯に部屋がぐっと寒い状況になって、斎場のスタッフが帰る前に灯油を補充しておくことを学んだ。それでも5時から7時までの2時間ほどはこたつにくるまってよく眠れたと思う。2-3時間しか寝てないが、わりと1日を通して平気だった。&lt;/p>
&lt;p>8時からお寺へ訪問し、住職に故人の説明を行い仏具を借りる。実は住職の父も昨日亡くなっていて、今日が告別式になる。9時をまわると告別式の準備に忙しいだろうと見通して8時から伺ってみた。快く応対してくれて8時からお茶を飲みながら故人のお話などをした。うちの地元の住職は地域から追い出されていなくなっている。そのため、隣の地区の住職にお願いするようにしている。うちは祖母と祖父の頃からずっとお世話になっているので父のことも覚えていてくれて、いくつかお話をした。&lt;/p>
&lt;p>斎場に戻り、生花・乾物・果物の発注と金額の確認し、10時30分から入棺をしてもらう。故人を棺に納めていただく際、かるくお湯で流し、散髪してもらい、服などを着せ替えてもらって見た目を整える。これはいくつか追加料金で行ってもらうことだけど、顔がとてもきれいになって、訪れた弔問客にも評判がよかった。なるべくよい状態で故人を見送るという意図で追加料金を支払ってやった方がよいと私は思った。&lt;/p>
&lt;p>1時間ほどで入棺も済み、13時に成年後見人の弁護士さんが来られた。通夜は参加できないものの、今後の手続きのために死亡届のコピーを手渡す。死亡届を提出すると、故人の名義の銀行口座は凍結して一切の入出金が出来なくなるらしい。私が訃報を聞いてすぐに弁護士さんにメールで一報を入れていたのが功を奏して、弁護士さんはすぐに裁判所の確認をとって、緊急で200万円を父の口座から出金しておいてくれた。このお金を使って葬儀にかかる必要の支払いができる。これをしていないと、一旦身内ですべて支払うしかなくなる。父の口座が凍結されると、相続しない限り出金出来なくなくなっていた。なるべく相続前に父のお金を減らすことは節税につながるので大きな違いになる。ちょっとした tips のようなもので銀行員は口座を凍結するので名義人が亡くなったことを知ることができる。父は銀行員だったので、連絡していないにも関わらず、通夜に勤め先だった銀行から生花が届いていた。その後、相続の話と &lt;a href="https://guardianship.mhlw.go.jp/personal/type/optional_guardianship/">任意後見制度&lt;/a> の話を伺う。&lt;/p>
&lt;p>弁護士さんとの話が終わり、斎場のスタッフと家に戻って遺骨を安置する祭壇を作ってもらい、今朝に住職から借りた祭壇の仏具も設置してもらう。なぜお寺から仏具を借りないといけないかというと、宗派が異なると祭壇の作り方は異なるため、宗派ごとの専用の仏具でないといけないらしい。大雑把にいえば、ISO で標準化されていないので祭壇に対して宗派独自拡張を追加するみたいな話だと理解した。飾りが終わったら後でお寺に返す。祭壇の設置前、同時に &lt;a href="https://www.e-sogi.com/guide/876/">神棚封じ&lt;/a> もしていただいた。&lt;/p>
&lt;p>斎場に戻り、早めに来られた親戚に挨拶しつつ、提灯を選択してもらう。これも親族ではなく、親戚が選択して告別式に飾られる。ややこしいのがグレードとオプションがあって価格差もあって、親戚の思いもあるので、一概に親族で決められず、親戚間の調整をしてもらう必要がある。支払いも親戚になるため、割り勘にするにしろ、ある親戚が購入するにしろ、調整が必要になる。&lt;/p>
&lt;p>17時になって通夜が開始された。住職がお経を読んでいる間に焼香を順番にしていく。私は喪主なので一番最初に行い、焼香台の横で立って弔問客の焼香を見守る。他人の焼香を間近でみる機会がこれまでなかった。焼香を眺めていると、人それぞれ焼香のやり方がバラバラで様々なスタイルがある。途中から焼香スタイルの観察にわりと関心をもってみていた。&lt;/p>
&lt;p>お経が終わり、住職の法話を聞く。&lt;/p>
&lt;blockquote>
&lt;p>人は2度死ぬ。1度目は亡くなったとき。2度目は人々の記憶からなくなったとき。&lt;/p>
&lt;/blockquote>
&lt;p>素晴らしい法話であった。この話しは過去に聞いた記憶があるなぁとか、既視感かもしれないが、思い返していた。&lt;/p>
&lt;p>最後に喪主の挨拶。通夜の挨拶は簡単でよいとのことで御礼と明日の告別式の案内で締めた。通夜はそれで終わり、弔問客によってはお膳を持って帰る人、その場で一緒に食べて帰る人、いろいろな事情でこれも様々。弔問客に小学校の同級生がいた。市役所で働いているので死亡届から訃報を知ったのでわざわざ来てくれた。感謝。私が逆の立場だったら数年会ってもいない小学校の同級生の父の通夜に弔問するだろうかと考えさせられた。私自身あまり社会性のない人間なのでそういうところをできる範囲で正していった方がよいのかもしれない。&lt;/p>
&lt;p>その後、残った親戚と一緒にお膳を食べて控え室でゆっくり過ごしていた。そういった親族も21時頃で全員帰った。私はそれから記録を整理して、明日の告別式に備える。明日は告別式と初七日の2つの葬儀がある&lt;/p></content></item><item><title>訃報</title><link>/diary/posts/2022/1226/</link><pubDate>Mon, 26 Dec 2022 09:53:07 +0900</pubDate><guid>/diary/posts/2022/1226/</guid><description>0時前に母から父が亡くなったという連絡があった。たまたまオフィスで作業をしていて電話を受け取った。以前 母の入院の連絡 をもらったときも日曜日の夜にオフィスで作業をしていたときだった。2回続いたので日曜日の夜のオフィスで受ける連絡は悪い知らせというジンクスができた。
話を聞く分には、看護師さんが20時に見回りしたときはとくに異変なく、23時に見回りしたときはすでに呼吸もなく、蘇生措置をとる暇もなかったとのこと。その後、母が病院へ移動して死亡確認し0時34分が死亡日時となった。私は6時35分始発の高速バスで帰ることにした。2時から4時の2時間ほど寝て準備して帰る。平日の始発で下りのバスに乗ることがなかったので知らなかったが、高速舞子のバス停で淡路島へ行くために乗車する人たちが30人ほどいて驚いた。平日なのでおそらく本州側から淡路島へ通勤している人たちもいるんだということがわかった。
その後、斎場に着いてからスタッフの方々と通夜と告別式の段取りを組む。私はこれまでにこういったことの経験がないので言葉も段取りもわからなくて今回は学びの機会となる。いうても、いまは斎場で行うのが定着したため、家で行うよりはずっと負担が少ない。またコロナによって家族葬を行う本音としても建前としても適正な理由ができた。うちも家族葬で行うので親戚や隣保の関係者がかなり減る分の調整コストを下げられた。
そして、私はそのまま葬儀場の控室で2泊3日で過ごすことにした。わりと部屋は暖かくてトイレも近くてキレイなのでお風呂のないホテル暮らしのような感覚で快適ではある。本当は今日に、通夜をするのがよいのではないかと段取りを始めたのだけど、いくつか調整がつかず、翌日に伸ばすことにした。逆にその分、今日は打ち合わせだけのお仕事ができて、それはそれでうまくはまったピースもあった。死亡届けを市役所へ提出し (これだけで待ち時間を入れて2時間半かかった) 、火葬場の許可証を入手し、喪服を購入し、母の通院など、余裕をもってタスクを消化できた。夕方に斎場へ戻ってきてそのまま守りの役目についた。もともとあまり眠れないので座布団とこたつで寝ててもとくになんの問題もなかった。</description><content>&lt;p>0時前に母から父が亡くなったという連絡があった。たまたまオフィスで作業をしていて電話を受け取った。以前 &lt;a href="/diary/diary/posts/2022/1121/#母の入院">母の入院の連絡&lt;/a> をもらったときも日曜日の夜にオフィスで作業をしていたときだった。2回続いたので日曜日の夜のオフィスで受ける連絡は悪い知らせというジンクスができた。&lt;/p>
&lt;p>話を聞く分には、看護師さんが20時に見回りしたときはとくに異変なく、23時に見回りしたときはすでに呼吸もなく、蘇生措置をとる暇もなかったとのこと。その後、母が病院へ移動して死亡確認し0時34分が死亡日時となった。私は6時35分始発の高速バスで帰ることにした。2時から4時の2時間ほど寝て準備して帰る。平日の始発で下りのバスに乗ることがなかったので知らなかったが、高速舞子のバス停で淡路島へ行くために乗車する人たちが30人ほどいて驚いた。平日なのでおそらく本州側から淡路島へ通勤している人たちもいるんだということがわかった。&lt;/p>
&lt;p>その後、斎場に着いてからスタッフの方々と通夜と告別式の段取りを組む。私はこれまでにこういったことの経験がないので言葉も段取りもわからなくて今回は学びの機会となる。いうても、いまは斎場で行うのが定着したため、家で行うよりはずっと負担が少ない。またコロナによって家族葬を行う本音としても建前としても適正な理由ができた。うちも家族葬で行うので親戚や隣保の関係者がかなり減る分の調整コストを下げられた。&lt;/p>
&lt;p>そして、私はそのまま葬儀場の控室で2泊3日で過ごすことにした。わりと部屋は暖かくてトイレも近くてキレイなのでお風呂のないホテル暮らしのような感覚で快適ではある。本当は今日に、通夜をするのがよいのではないかと段取りを始めたのだけど、いくつか調整がつかず、翌日に伸ばすことにした。逆にその分、今日は打ち合わせだけのお仕事ができて、それはそれでうまくはまったピースもあった。死亡届けを市役所へ提出し (これだけで待ち時間を入れて2時間半かかった) 、火葬場の許可証を入手し、喪服を購入し、母の通院など、余裕をもってタスクを消化できた。夕方に斎場へ戻ってきてそのまま守りの役目についた。もともとあまり眠れないので座布団とこたつで寝ててもとくになんの問題もなかった。&lt;/p></content></item><item><title>日本酒を嗜む</title><link>/diary/posts/2022/1225/</link><pubDate>Sun, 25 Dec 2022 10:46:57 +0900</pubDate><guid>/diary/posts/2022/1225/</guid><description>22時から寝て2時に起きて5時に起きて7時に起きた。久しぶりに吐き気もなくよく眠れた。
雑多な整理 本当はやりかけて途中の svelte 入門をしようとオフィスに来たものの、課題管理システムの整理や週明け2日間のお仕事の準備などをやっていた。あと毎年そうなんだけど、うちの会社は交際費として年間で30万円の予算を計上している。現時点で7万円しか使っていない。放っておくと私は交際費を使わない。交際費を使わないというのは情報収集を疎かにしていると同義である。これから3ヶ月かけて交際費を使いつつオンラインで雑談してくれる人を探していく。この調整作業そのものにも時間と意識をとられる。人とやり取りして予定を調整する作業だけは効率化できない。過去に話したことのある人が徐々に増えていくと、また毎年のアレやりましょうと言えるのでコミュニケーションコストは下がっていく。一方で新しい人とも話していかないと視野が狭くなっていくのでバランスをとっていく必要がある。
忘年会のお酒選び カフーツさんの忘年会 へ参加するときにもっていく飲みものを探してきた。ビールは用意してあるということなので灘五郷の日本酒をもっていくことにした。以前 灘五郷酒所 へ行ったときに飲んだ琥泉というお酒がおいしかったからそれを購入しようと調べていたら、同じ 泉酒造 では仙介という有名なお酒もある。実は2019年に近所の公園で灘の酒フェスティバルをやっていてそのときに仙介を飲んでおいしかったと記憶に残っていた。仙介は山田錦を100%使っていて琥泉が国産米となっていてこの素材の差が主な価格差 (720mlで2,050円と1,500円) になっていると推測される。イベントにもっていくならブランディング的に上等な方がよいかなと考えて仙介を忘年会に、琥泉を実家へもって帰ることにした。それぞれ次のお酒を購入した。どちらも生酒を選んだ。
琥泉 純米吟醸おりがらみ無濾過生酒原酒 仙介 純米大吟醸無濾過生酒原酒 おりがらみ とは、にごり酒の一種とみなすこともできるそうで「おり」と呼ばれる、米のかけらや酵母などの細かな固形物を少し残した日本酒を言うらしい。それによる風味の違いを楽しむといったものにみえる。たまたま灘五郷酒所で飲んだのがおりがらみだったので同じものを選択してみた。
初夏に 開発合宿 (ワーケーション) へ行く前のレンタカー運転リハーサル で 白鶴酒造資料館 へ行ったときにお土産に Hakutsuru Blanc を購入した。そのときにいくらか飲んでその後ずっと冷蔵庫に残っていたお酒を飲み終えた。灘五郷を学ぶよい機会だと思うのでこれから飲んだ灘五郷の酒造のお酒を課題管理してそれぞれの特徴や所感を溜めていこうと思う。
エピック名は BE KOBE にした。なんかうまくはまった。</description><content>&lt;p>22時から寝て2時に起きて5時に起きて7時に起きた。久しぶりに吐き気もなくよく眠れた。&lt;/p>
&lt;h2 id="雑多な整理">雑多な整理&lt;/h2>
&lt;p>本当はやりかけて途中の svelte 入門をしようとオフィスに来たものの、課題管理システムの整理や週明け2日間のお仕事の準備などをやっていた。あと毎年そうなんだけど、うちの会社は交際費として年間で30万円の予算を計上している。現時点で7万円しか使っていない。放っておくと私は交際費を使わない。交際費を使わないというのは情報収集を疎かにしていると同義である。これから3ヶ月かけて交際費を使いつつオンラインで雑談してくれる人を探していく。この調整作業そのものにも時間と意識をとられる。人とやり取りして予定を調整する作業だけは効率化できない。過去に話したことのある人が徐々に増えていくと、また毎年のアレやりましょうと言えるのでコミュニケーションコストは下がっていく。一方で新しい人とも話していかないと視野が狭くなっていくのでバランスをとっていく必要がある。&lt;/p>
&lt;h2 id="忘年会のお酒選び">忘年会のお酒選び&lt;/h2>
&lt;p>&lt;a href="https://fb.me/e/47tgUIW7N">カフーツさんの忘年会&lt;/a> へ参加するときにもっていく飲みものを探してきた。ビールは用意してあるということなので灘五郷の日本酒をもっていくことにした。以前 &lt;a href="/diary/diary/posts/2022/0707/#灘五郷酒所イベント">灘五郷酒所&lt;/a> へ行ったときに飲んだ琥泉というお酒がおいしかったからそれを購入しようと調べていたら、同じ &lt;a href="https://izumisyuzou.co.jp/">泉酒造&lt;/a> では仙介という有名なお酒もある。実は2019年に近所の公園で灘の酒フェスティバルをやっていてそのときに仙介を飲んでおいしかったと記憶に残っていた。仙介は山田錦を100%使っていて琥泉が国産米となっていてこの素材の差が主な価格差 (720mlで2,050円と1,500円) になっていると推測される。イベントにもっていくならブランディング的に上等な方がよいかなと考えて仙介を忘年会に、琥泉を実家へもって帰ることにした。それぞれ次のお酒を購入した。どちらも生酒を選んだ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://izumisyuzou.co.jp/publics/index/66/">琥泉 純米吟醸おりがらみ無濾過生酒原酒&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://izumisyuzou.co.jp/publics/index/46/">仙介 純米大吟醸無濾過生酒原酒&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://tanoshiiosake.jp/10049">おりがらみ&lt;/a> とは、にごり酒の一種とみなすこともできるそうで「おり」と呼ばれる、米のかけらや酵母などの細かな固形物を少し残した日本酒を言うらしい。それによる風味の違いを楽しむといったものにみえる。たまたま灘五郷酒所で飲んだのがおりがらみだったので同じものを選択してみた。&lt;/p>
&lt;p>初夏に &lt;a href="/diary/diary/posts/2022/0529/#レンタカーで運転の練習">開発合宿 (ワーケーション) へ行く前のレンタカー運転リハーサル&lt;/a> で &lt;a href="https://www.hakutsuru.co.jp/community/shiryo/">白鶴酒造資料館&lt;/a> へ行ったときにお土産に &lt;a href="https://www.hakutsuru.co.jp/blanc/">Hakutsuru Blanc&lt;/a> を購入した。そのときにいくらか飲んでその後ずっと冷蔵庫に残っていたお酒を飲み終えた。灘五郷を学ぶよい機会だと思うのでこれから飲んだ灘五郷の酒造のお酒を課題管理してそれぞれの特徴や所感を溜めていこうと思う。&lt;/p>
&lt;p>エピック名は &lt;a href="https://bekobe.jp/">BE KOBE&lt;/a> にした。なんかうまくはまった。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/1225_bekobe.png"/>
&lt;/figure></content></item><item><title>50歳の壁に備えて</title><link>/diary/posts/2022/1224/</link><pubDate>Sat, 24 Dec 2022 12:31:43 +0900</pubDate><guid>/diary/posts/2022/1224/</guid><description>昨日は寒さに耐えかねて今冬で初めて暖房を入れて寝た。お腹を冷やさなかったので効果はあったように思う。寒過ぎる。22時頃から寝て2時に起きて5時ぐらいまでだらだらして7時に起きた。最近気になるのは寝ていたら吐き気がして苦しむ日が多い。朝と昼は平気なのに眠るのが大変。
ストレッチ 今日の開脚幅は開始前153cmで、ストレッチ後156cmだった。やはり先週とほぼ変わらず。急に寒くなって体調を落としているのもある。筋肉の状態も右太もも周りの張りや違和感と右腰の張りが依然として強い。よい・わるいで言ったら明らかに状態はわるい。今週はそんなにハードには働いていないし早く帰って休む時間も多めに取ろうと努めたものの、夜に吐き気で眠れないという苦しみがそのまま筋肉に表れているのではないかとすら思えてくる。それぐらい眠れない。歳とるとそんなもんなのかなぁ。
フリーランス、４０歳の壁 はらさんがお勧めしていたので フリーランス、４０歳の壁 を読み始めた。「序章 フリーランスは自由という名の業である。」を読んだ。
本書で取り扱う「自由業」は、著述作家業を中心とした「表現業者」のことです。
プログラマーは「モノ作り」よりも「モノ書き」に近いという言葉もあるように、大きな枠組みでは表現と呼べるかもしれないけど、どうやら本書の著者はフリーライターという職業らしい。
自由業者には2種類あると思います。 自由業に「なる」人と、「ならざるを得ない」人 です。
前者は会社員をやりながら余暇で作品を創り、十分な経験を積んでフリーになる人。後者は、さしたる経験も実績もなくフリーに「なってしまう」人。
序章を読み始めた冒頭では私は自由業にならざるを得ない方の人かなと思って読み進めていた。しかし、序章全体を読み終えると、普通の会社勤めの働き方にあわせられない人を「ならざるを得ない」人と表現しているようにみえる。そこまでのアンマッチはないという視点から言うと、私は前者になってしまう。けれども、なにか引っ掛かっているところもある。40歳のとき働いていた会社で早期退職制度が設けられ、私も50歳になったらそれで辞めてくださいと言われる未来がリアルにみえた。周りに疎まれながら会社にしがみついて養ってもらうといった生き方は私には向いていない気がする。それはプライドがどうこうではなく、私にとってそんな人生を楽しめるようには思えなかった。だから私は辞めるしかなかったし、自分で仕事を創っていくしかないと決めた。もちろん社会人として20年ほど働いた実績はあったけれど、会社経営の経験はなかったし、会社をやっていく展望も準備もなにもなかった。まさに無計画にいきなりフリーにならざるを得なかったという表現が腑に落ちた。
私は、なんとなくなれてしまう自由業者は気楽な仕事、と言いたいのではありません。その反対で、こういう人は年とともに「壁」にぶつかる率が高いと言いたいのです。30歳・40歳・50歳の節目ごとに壁は襲ってきます。10年経るごとに、壁は大きく、厚くなります。それでも人間は生きていかねばなりません。
50歳という節目に私はどんなお仕事をしているのか、現時点ではまったく想像がつかない。一方で著者は自由業にならざるを得なかった人には大きな壁があると説いている。はらさんと話していても50代は単価を下げられるという話しはよく聞く。今後の働き方への戒めとして読んでおくのもよさそうに思える。</description><content>&lt;p>昨日は寒さに耐えかねて今冬で初めて暖房を入れて寝た。お腹を冷やさなかったので効果はあったように思う。寒過ぎる。22時頃から寝て2時に起きて5時ぐらいまでだらだらして7時に起きた。最近気になるのは寝ていたら吐き気がして苦しむ日が多い。朝と昼は平気なのに眠るのが大変。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前153cmで、ストレッチ後156cmだった。やはり先週とほぼ変わらず。急に寒くなって体調を落としているのもある。筋肉の状態も右太もも周りの張りや違和感と右腰の張りが依然として強い。よい・わるいで言ったら明らかに状態はわるい。今週はそんなにハードには働いていないし早く帰って休む時間も多めに取ろうと努めたものの、夜に吐き気で眠れないという苦しみがそのまま筋肉に表れているのではないかとすら思えてくる。それぐらい眠れない。歳とるとそんなもんなのかなぁ。&lt;/p>
&lt;h2 id="フリーランス４０歳の壁">フリーランス、４０歳の壁&lt;/h2>
&lt;p>はらさんがお勧めしていたので &lt;a href="https://www.diamond.co.jp/book/9784478065723.html">フリーランス、４０歳の壁&lt;/a> を読み始めた。「序章 フリーランスは自由という名の業である。」を読んだ。&lt;/p>
&lt;blockquote>
&lt;p>本書で取り扱う「自由業」は、著述作家業を中心とした「表現業者」のことです。&lt;/p>
&lt;/blockquote>
&lt;p>プログラマーは「モノ作り」よりも「モノ書き」に近いという言葉もあるように、大きな枠組みでは表現と呼べるかもしれないけど、どうやら本書の著者はフリーライターという職業らしい。&lt;/p>
&lt;blockquote>
&lt;p>自由業者には2種類あると思います。 &lt;strong>自由業に「なる」人と、「ならざるを得ない」人&lt;/strong> です。&lt;/p>
&lt;p>前者は会社員をやりながら余暇で作品を創り、十分な経験を積んでフリーになる人。後者は、さしたる経験も実績もなくフリーに「なってしまう」人。&lt;/p>
&lt;/blockquote>
&lt;p>序章を読み始めた冒頭では私は自由業にならざるを得ない方の人かなと思って読み進めていた。しかし、序章全体を読み終えると、普通の会社勤めの働き方にあわせられない人を「ならざるを得ない」人と表現しているようにみえる。そこまでのアンマッチはないという視点から言うと、私は前者になってしまう。けれども、なにか引っ掛かっているところもある。40歳のとき働いていた会社で早期退職制度が設けられ、私も50歳になったらそれで辞めてくださいと言われる未来がリアルにみえた。周りに疎まれながら会社にしがみついて養ってもらうといった生き方は私には向いていない気がする。それはプライドがどうこうではなく、私にとってそんな人生を楽しめるようには思えなかった。だから私は辞めるしかなかったし、自分で仕事を創っていくしかないと決めた。もちろん社会人として20年ほど働いた実績はあったけれど、会社経営の経験はなかったし、会社をやっていく展望も準備もなにもなかった。まさに無計画にいきなりフリーにならざるを得なかったという表現が腑に落ちた。&lt;/p>
&lt;blockquote>
&lt;p>私は、なんとなくなれてしまう自由業者は気楽な仕事、と言いたいのではありません。その反対で、こういう人は年とともに「壁」にぶつかる率が高いと言いたいのです。30歳・40歳・50歳の節目ごとに壁は襲ってきます。10年経るごとに、壁は大きく、厚くなります。それでも人間は生きていかねばなりません。&lt;/p>
&lt;/blockquote>
&lt;p>50歳という節目に私はどんなお仕事をしているのか、現時点ではまったく想像がつかない。一方で著者は自由業にならざるを得なかった人には大きな壁があると説いている。はらさんと話していても50代は単価を下げられるという話しはよく聞く。今後の働き方への戒めとして読んでおくのもよさそうに思える。&lt;/p></content></item><item><title>svelte のチュートリアルで学ぶ</title><link>/diary/posts/2022/1223/</link><pubDate>Fri, 23 Dec 2022 14:25:19 +0900</pubDate><guid>/diary/posts/2022/1223/</guid><description>22時頃から寝てたものの、また2時頃に吐き気で苦しんで何度か起きて7時過ぎに起きた。なかなか体調が悪い。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今週はてんやわんやで議題を整理する余裕すらなかったので近況を軽く共有した。
フロントエンドの技術選定の状況 next.js と svelte kit の違いとか オンラインイベントで話した課題管理の話題 課題管理を it 業界や開発プロジェクトだけでなく、もっと様々な分野や業界で応用できるようにしたい。最初は私がノウハウをもっている業界や業務のみに特化したものになるだろうけど、いずれはスコープを拡げていきたい。その先に 地域おこし協力隊 のようなところにいって社会貢献ができればおもしろいのではないかといった話しをした。地域おこし協力隊の内容はおもしろそうだけど、1人あたりの経費の上限が480万円に設定されていて、ググって調べると余裕のない自治体では満額支給されていないケースもあるみたい。行政がやらないといけない業務をアウトソーシングする予算が低過ぎて、適切な実績やスキルをもった人が経済的に参加しにくい状況にある。採用の目利きができないから単価を低くして失敗を許容しやすくなっているようにもみえる。行政の予算が低い問題は専門家が入って採用も含めて改善していく必要がある。
svelte 入門 昨日の続きで svelte のチュートリアル を始めた。このチュートリアルはファイル操作とオンラインエディタもついていて、ソースコードを変更するとすぐビルドされて結果も確認できる。フロントエンドのチュートリアル自体がフロントエンド技術のデモになっている。よく作られているよなと感心しながら取り組んでいる。svelte でスクリプトを書くときの、マジックコード的な変な構文がある。simple is not easy の文脈で言うところの easy であり、私のような simple 派からみるとやや気持ち悪い。わりと分量があるので途中にコードレビューや勉強会の講師をやっていたら1日では終わらなかった。
let count = 0; $: doubled = count * 2; &amp;lt;script&amp;gt; export let answer; &amp;lt;/script&amp;gt;</description><content>&lt;p>22時頃から寝てたものの、また2時頃に吐き気で苦しんで何度か起きて7時過ぎに起きた。なかなか体調が悪い。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今週はてんやわんやで議題を整理する余裕すらなかったので近況を軽く共有した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="/diary/diary/posts/2022/1214/">フロントエンドの技術選定の状況&lt;/a>
&lt;ul>
&lt;li>next.js と svelte kit の違いとか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2022/1221/">オンラインイベントで話した課題管理の話題&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>課題管理を it 業界や開発プロジェクトだけでなく、もっと様々な分野や業界で応用できるようにしたい。最初は私がノウハウをもっている業界や業務のみに特化したものになるだろうけど、いずれはスコープを拡げていきたい。その先に &lt;a href="https://www.soumu.go.jp/main_sosiki/jichi_gyousei/c-gyousei/02gyosei08_03000066.html">地域おこし協力隊&lt;/a> のようなところにいって社会貢献ができればおもしろいのではないかといった話しをした。地域おこし協力隊の内容はおもしろそうだけど、1人あたりの経費の上限が480万円に設定されていて、ググって調べると余裕のない自治体では満額支給されていないケースもあるみたい。行政がやらないといけない業務をアウトソーシングする予算が低過ぎて、適切な実績やスキルをもった人が経済的に参加しにくい状況にある。採用の目利きができないから単価を低くして失敗を許容しやすくなっているようにもみえる。行政の予算が低い問題は専門家が入って採用も含めて改善していく必要がある。&lt;/p>
&lt;h2 id="svelte-入門">svelte 入門&lt;/h2>
&lt;p>昨日の続きで &lt;a href="https://learn.svelte.dev/tutorial/welcome-to-svelte">svelte のチュートリアル&lt;/a> を始めた。このチュートリアルはファイル操作とオンラインエディタもついていて、ソースコードを変更するとすぐビルドされて結果も確認できる。フロントエンドのチュートリアル自体がフロントエンド技術のデモになっている。よく作られているよなと感心しながら取り組んでいる。svelte でスクリプトを書くときの、マジックコード的な変な構文がある。&lt;a href="https://ohbarye.hatenablog.jp/entry/2017/11/30/012726">simple is not easy&lt;/a> の文脈で言うところの &lt;em>easy&lt;/em> であり、私のような &lt;em>simple&lt;/em> 派からみるとやや気持ち悪い。わりと分量があるので途中にコードレビューや勉強会の講師をやっていたら1日では終わらなかった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">doubled&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">answer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>next.js のチュートリアルで学ぶ</title><link>/diary/posts/2022/1222/</link><pubDate>Thu, 22 Dec 2022 09:12:40 +0900</pubDate><guid>/diary/posts/2022/1222/</guid><description>2時に寝て5時に起きて7時半に起きた。疲れてからわりと眠れた方かも。いまの働き方だと木曜日がもっともストレスの低い日になっている。定例会議がない。今週やらないといけないお仕事も次の金曜日があることでまだ時間があるから安心みたいな話し。
next.js 入門 next.js のチュートリアル を一通りやってみた。2年ほど前にちょっとだけ next.js で開発していたプロジェクトのソースを読んだことがあったので雰囲気は少し覚えていた。チュートリアルは react のことを何もわからなくても next.js の機能や特徴を理解できるような構成になっていて感心した。チュートリアルから学んだことはこれら。関連ドキュメントを読みながらでも1日もあれば終わると思う。
コードは分割されてコンパイルや pre-fetch が行われる Image コンポーネントを使えば画像の最適化を自動で行う CSS Modules を使えばコンポーネントレベルのスタイルを定義できる ページ単位に pre-rendering できる 静的生成 (ssg) サーバーサイドレンダリング (ssr) pre-rendering が不要ならクライアントサイドレンダリングすればよい (csr) 動的ルーティングや bff のための api エンドポイントは動的に振る舞う デプロイは基本的に node.js を必要とする</description><content>&lt;p>2時に寝て5時に起きて7時半に起きた。疲れてからわりと眠れた方かも。いまの働き方だと木曜日がもっともストレスの低い日になっている。定例会議がない。今週やらないといけないお仕事も次の金曜日があることでまだ時間があるから安心みたいな話し。&lt;/p>
&lt;h2 id="nextjs-入門">next.js 入門&lt;/h2>
&lt;p>&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app">next.js のチュートリアル&lt;/a> を一通りやってみた。2年ほど前にちょっとだけ next.js で開発していたプロジェクトのソースを読んだことがあったので雰囲気は少し覚えていた。チュートリアルは react のことを何もわからなくても next.js の機能や特徴を理解できるような構成になっていて感心した。チュートリアルから学んだことはこれら。関連ドキュメントを読みながらでも1日もあれば終わると思う。&lt;/p>
&lt;ul>
&lt;li>コードは分割されてコンパイルや pre-fetch が行われる&lt;/li>
&lt;li>Image コンポーネントを使えば画像の最適化を自動で行う&lt;/li>
&lt;li>CSS Modules を使えばコンポーネントレベルのスタイルを定義できる&lt;/li>
&lt;li>ページ単位に pre-rendering できる
&lt;ul>
&lt;li>静的生成 (ssg)&lt;/li>
&lt;li>サーバーサイドレンダリング (ssr)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>pre-rendering が不要ならクライアントサイドレンダリングすればよい (csr)&lt;/li>
&lt;li>動的ルーティングや bff のための api エンドポイントは動的に振る舞う&lt;/li>
&lt;li>デプロイは基本的に node.js を必要とする&lt;/li>
&lt;/ul></content></item><item><title>課題管理の話題で発散</title><link>/diary/posts/2022/1221/</link><pubDate>Wed, 21 Dec 2022 08:10:53 +0900</pubDate><guid>/diary/posts/2022/1221/</guid><description>0時に寝て何度か起きて7時に起きた。だいぶ眠れるようになってきた。
コワーキングのオンラインイベント 月例のカフーツさんのオンラインイベントに参加した。先月の所感はここ 。来年やりたいことというテーマだった。来年の抱負というほど堅苦しいわけではないが、それぞれの参加者別にやりたいことをわーっと話すようなイベントだった。私は課題管理について軽く話し始めたらいとうさんが深堀りしてくれて、参加者からも共感を得られてそれなりに盛り上がった。自分が参加したイベントの録画を見返すことを私は滅多にしないのだけど、今回は話した内容を整理するために見返した。
課題管理という分野の体系化、ならびにプラクティスの整備をしたい ざっくり話した内容はこんな感じ。
課題管理を追求していくにはメンバーに強制・指示できるだけの権限が必要となる
ボトムアップで課題管理を実践するのは難しい 課題管理の実践のために人の運用を変えないといけない場面が出てくる 私は it 業界のプロダクト開発における課題管理のノウハウしかない
複数の組織・チームで働く過程で課題管理ができていない、または課題管理システムを使いこなせていない開発者やチームがたくさんあることを知ったのが背景になる 本質的には、課題管理自体は業界・業種を問わない分野だと思うので広く応用できるプラクティスとして体系化したい
課題管理とは、ハウツー本を読んだり、ツールを導入すれば解決する類のものではない
それぞれの目的のためにメンバーが日々の業務において運用していく必要がある メンバー全員が運用しなかったら効果もその度合いに応じて減っていく 権限が必要というのは、やらない人に対してある程度はやってもらう必要があるから 課題管理をうまくやろうとすると、組織論や組織の文化、マネジメントの分野とも密接に紐づく
課題管理と密接な分野の1つに情報共有がある
情報の一元管理は組織において重要なのに疎かになっている組織やチームは多い 一元管理できると情報共有のためのコミュニケーションコストを削減できる このためには組織レベルで使うツールや情報共有のやり方を統一しないといけない 自分の好きなツールを使って自由に情報共有するといったものをいくらか制限する必要がある 課題管理において重要なことの1つに文章を書けない人たちが一定数いることを受け入れないといけない
情報共有の文脈で言えば、テキスト化は検索できるという大きなメリットをもたらす 一定数の文章を書けない人たちをどう対応するかは難しい課題の1つ 文章を書くための練習をすればよいのではないか 新人やキャリアの浅いメンバーには有効となる 文章を書かなくても情報共有できる手段と組み合わせるとよいのではないか it 業界ではスクラム開発という開発方法論が流行っている 大雑把に言えば、対話を重視して会議をたくさん設けることで情報共有を密にする開発方法論と言える 文章を書けない人であっても話せない人はほぼいない 対話を促されれば話すことで情報共有できる デメリットとしてはコミュニケーションコストがとても高い このコミュニケーションコストは開発における生産性とトレードオフになる 課題管理において重要なことのもう1つに文章を読めない人たちも一定数いる
日本人の1/3は日本語が読めない？PIAAC (国際成人力調査) の調査結果 文章を書いてメンバーに読んでおいてと伝えても1/3は理解できていない可能性を示唆している 情報共有において文章を書いても伝わっていない可能性を考慮して対策する必要がある 仮に情報共有できていない状態でメンバー「わからない」と言えることはすごく重要になる
この文脈で心理的安全性が重要になる 「わからない」と声をあげてくれることで文章や伝え方を改善していける可能性がある 実は一昔前と比べて、いまの方がメンバー間の情報共有を疎遠にしている背景がある
いまは情報共有にクラウドサービスを使う組織が増えている 基本的にクラウドサービスはユーザー単位/従量制で課金される あまりサービスを使わないユーザーアカウントを減らすことでコストダウンできるインセンティブが働く 情報共有という視点からコストダウンしてはいけないコストを削ってしまっている 例) 課題管理システムのアカウントは開発者しかもっていないとか 中小規模の会社ほどクラウドサービスを多用するのでこの傾向がある 昔はオンプレで社内システムを管理していたため、システムのユーザーを減らすインセンティブはなかった 要否に関わらず、社員は全員アカウントをもっていることが当たり前だった 念のため、クラウドサービスのアカウントをメンバー全員がもつことは目的ではない アカウントをもった上でそのメンバーがそのサービスを使うように運用を変えていく必要がある システム投資とメンバーの運用を変える取り組みがセットでないとうまくいかない コワーキングスペースは課題が持ち込まれるところではある
課題管理のプラクティスが応用できるなら使いたい 課題をどう整理して、優先順位を付け、情報共有していくかは難しい 様々なメンバー、様々なツール、様々な課題を同じツールで一元管理することは非常に難しい どうやって情報の一元管理をするかはコワーキングスペースの運営において難しい課題でもある 複数のサービスを連携するサービスなどを使って一元管理する方法もある 海外ではコワーキングスペース向けの sns も含めたプラットフォームサービスなども出始めている 日本ではまだまだあまりシステム化されておらず、導入もされていないのではないか コワーキングの分野では女性がとても活躍しているように、いとうさんから見えている</description><content>&lt;p>0時に寝て何度か起きて7時に起きた。だいぶ眠れるようになってきた。&lt;/p>
&lt;h2 id="コワーキングのオンラインイベント">コワーキングのオンラインイベント&lt;/h2>
&lt;p>月例のカフーツさんのオンラインイベントに参加した。&lt;a href="/diary/diary/posts/2022/1116/#コワーキングのオンラインイベント">先月の所感はここ&lt;/a> 。来年やりたいことというテーマだった。来年の抱負というほど堅苦しいわけではないが、それぞれの参加者別にやりたいことをわーっと話すようなイベントだった。私は課題管理について軽く話し始めたらいとうさんが深堀りしてくれて、参加者からも共感を得られてそれなりに盛り上がった。自分が参加したイベントの録画を見返すことを私は滅多にしないのだけど、今回は話した内容を整理するために見返した。&lt;/p>
&lt;h3 id="課題管理という分野の体系化ならびにプラクティスの整備をしたい">課題管理という分野の体系化、ならびにプラクティスの整備をしたい&lt;/h3>
&lt;p>ざっくり話した内容はこんな感じ。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>課題管理を追求していくにはメンバーに強制・指示できるだけの権限が必要となる&lt;/p>
&lt;ul>
&lt;li>ボトムアップで課題管理を実践するのは難しい&lt;/li>
&lt;li>課題管理の実践のために人の運用を変えないといけない場面が出てくる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>私は it 業界のプロダクト開発における課題管理のノウハウしかない&lt;/p>
&lt;ul>
&lt;li>複数の組織・チームで働く過程で課題管理ができていない、または課題管理システムを使いこなせていない開発者やチームがたくさんあることを知ったのが背景になる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>本質的には、課題管理自体は業界・業種を問わない分野だと思うので広く応用できるプラクティスとして体系化したい&lt;/p>
&lt;/li>
&lt;li>
&lt;p>課題管理とは、ハウツー本を読んだり、ツールを導入すれば解決する類のものではない&lt;/p>
&lt;ul>
&lt;li>それぞれの目的のためにメンバーが日々の業務において運用していく必要がある&lt;/li>
&lt;li>メンバー全員が運用しなかったら効果もその度合いに応じて減っていく
&lt;ul>
&lt;li>権限が必要というのは、やらない人に対してある程度はやってもらう必要があるから&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>課題管理をうまくやろうとすると、組織論や組織の文化、マネジメントの分野とも密接に紐づく&lt;/p>
&lt;/li>
&lt;li>
&lt;p>課題管理と密接な分野の1つに情報共有がある&lt;/p>
&lt;ul>
&lt;li>情報の一元管理は組織において重要なのに疎かになっている組織やチームは多い
&lt;ul>
&lt;li>一元管理できると情報共有のためのコミュニケーションコストを削減できる&lt;/li>
&lt;li>このためには組織レベルで使うツールや情報共有のやり方を統一しないといけない
&lt;ul>
&lt;li>自分の好きなツールを使って自由に情報共有するといったものをいくらか制限する必要がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>課題管理において重要なことの1つに文章を書けない人たちが一定数いることを受け入れないといけない&lt;/p>
&lt;ul>
&lt;li>情報共有の文脈で言えば、テキスト化は検索できるという大きなメリットをもたらす&lt;/li>
&lt;li>一定数の文章を書けない人たちをどう対応するかは難しい課題の1つ
&lt;ul>
&lt;li>文章を書くための練習をすればよいのではないか
&lt;ul>
&lt;li>新人やキャリアの浅いメンバーには有効となる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文章を書かなくても情報共有できる手段と組み合わせるとよいのではないか
&lt;ul>
&lt;li>it 業界ではスクラム開発という開発方法論が流行っている
&lt;ul>
&lt;li>大雑把に言えば、対話を重視して会議をたくさん設けることで情報共有を密にする開発方法論と言える
&lt;ul>
&lt;li>文章を書けない人であっても話せない人はほぼいない&lt;/li>
&lt;li>対話を促されれば話すことで情報共有できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>デメリットとしてはコミュニケーションコストがとても高い
&lt;ul>
&lt;li>このコミュニケーションコストは開発における生産性とトレードオフになる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>課題管理において重要なことのもう1つに文章を読めない人たちも一定数いる&lt;/p>
&lt;ul>
&lt;li>日本人の1/3は日本語が読めない？&lt;a href="https://research.lightworks.co.jp/piaac">PIAAC (国際成人力調査) の調査結果&lt;/a>&lt;/li>
&lt;li>文章を書いてメンバーに読んでおいてと伝えても1/3は理解できていない可能性を示唆している
&lt;ul>
&lt;li>情報共有において文章を書いても伝わっていない可能性を考慮して対策する必要がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>仮に情報共有できていない状態でメンバー「わからない」と言えることはすごく重要になる&lt;/p>
&lt;ul>
&lt;li>この文脈で心理的安全性が重要になる&lt;/li>
&lt;li>「わからない」と声をあげてくれることで文章や伝え方を改善していける可能性がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>実は一昔前と比べて、いまの方がメンバー間の情報共有を疎遠にしている背景がある&lt;/p>
&lt;ul>
&lt;li>いまは情報共有にクラウドサービスを使う組織が増えている
&lt;ul>
&lt;li>基本的にクラウドサービスはユーザー単位/従量制で課金される
&lt;ul>
&lt;li>あまりサービスを使わないユーザーアカウントを減らすことでコストダウンできるインセンティブが働く
&lt;ul>
&lt;li>情報共有という視点からコストダウンしてはいけないコストを削ってしまっている
&lt;ul>
&lt;li>例) 課題管理システムのアカウントは開発者しかもっていないとか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>中小規模の会社ほどクラウドサービスを多用するのでこの傾向がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>昔はオンプレで社内システムを管理していたため、システムのユーザーを減らすインセンティブはなかった
&lt;ul>
&lt;li>要否に関わらず、社員は全員アカウントをもっていることが当たり前だった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>念のため、クラウドサービスのアカウントをメンバー全員がもつことは目的ではない
&lt;ul>
&lt;li>アカウントをもった上でそのメンバーがそのサービスを使うように運用を変えていく必要がある&lt;/li>
&lt;li>システム投資とメンバーの運用を変える取り組みがセットでないとうまくいかない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>コワーキングスペースは課題が持ち込まれるところではある&lt;/p>
&lt;ul>
&lt;li>課題管理のプラクティスが応用できるなら使いたい&lt;/li>
&lt;li>課題をどう整理して、優先順位を付け、情報共有していくかは難しい&lt;/li>
&lt;li>様々なメンバー、様々なツール、様々な課題を同じツールで一元管理することは非常に難しい
&lt;ul>
&lt;li>どうやって情報の一元管理をするかはコワーキングスペースの運営において難しい課題でもある
&lt;ul>
&lt;li>複数のサービスを連携するサービスなどを使って一元管理する方法もある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>海外ではコワーキングスペース向けの sns も含めたプラットフォームサービスなども出始めている
&lt;ul>
&lt;li>日本ではまだまだあまりシステム化されておらず、導入もされていないのではないか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>コワーキングの分野では女性がとても活躍しているように、いとうさんから見えている&lt;/p>
&lt;ul>
&lt;li>今後もこの分野を盛り上げていくのは女性ではないか？
&lt;ul>
&lt;li>男性は変なプライドが邪魔して行動力を抑制してしまうところがあるのではないか&lt;/li>
&lt;li>女性は損得勘定から行動力を発揮しているのではないか
&lt;ul>
&lt;li>男性の方が感情的な動機でコワーキングをしているようにみえる？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>コワーキングに課題管理の理論やシステム化はあってよいのではないかと、いとうさんはみている&lt;/p>
&lt;/li>
&lt;/ul></content></item><item><title>ケーブル配線トレー気に入った</title><link>/diary/posts/2022/1220/</link><pubDate>Tue, 20 Dec 2022 19:56:29 +0900</pubDate><guid>/diary/posts/2022/1220/</guid><description>20時に寝て22時に起きて、24時ぐらいまでだらだらやって6時まで寝た。本当は晩ご飯食べてオフィスに戻るつもりが疲れて寝てた。
ケーブル配線トレー たいちさんの記事 を参考に購入した ケーブルトレー (CB-CT4) が届いたのですぐ机に取り付けてみた。ちょうど机のサイズやオフィスの空間にもマッチしていてケーブルの配線をよい感じに収納できた。新しいオフィスには幅広な棚がついていてその棚もそうなんだけど、縦の空間を分割して使えると効率がよい。普段プログラミングや ci/cd で効率のことばかり考えているから日常生活でも効率のよいことがあると嬉しい気持ちになる。ケーブルトレーはオフィス空間の効率化に寄与する。物理的なメリット以上に、私にとっては精神的に作用した気がする。
rabbitmq の management api rabbitmq には Management Plugin という拡張があって、これをインストールすると管理画面と HTTP API が付いてくる。docker image だと、たぶん management のタグが付いているものを選べばよいと思う。exchange や queue の初期設定を go のアプリケーションからできるようにしようと思って rabbit-hole というライブラリを使ってすぐに実装できた。最低限の必要な機能をもつサブコマンドな cli からも呼べるようにした。本番環境でもこの cli を使って rabbitmq の初期設定や確認をする運用ツールにしようと思う。管理画面でもできるけど、cli でできた方がマニュアルを作る上でも簡単だし作業ログも管理しやすい。</description><content>&lt;p>20時に寝て22時に起きて、24時ぐらいまでだらだらやって6時まで寝た。本当は晩ご飯食べてオフィスに戻るつもりが疲れて寝てた。&lt;/p>
&lt;h2 id="ケーブル配線トレー">ケーブル配線トレー&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/1218/#リモートワークの道具">たいちさんの記事&lt;/a> を参考に購入した &lt;a href="https://www.sanwa.co.jp/product/syohin?code=CB-CT4">ケーブルトレー (CB-CT4)&lt;/a> が届いたのですぐ机に取り付けてみた。ちょうど机のサイズやオフィスの空間にもマッチしていてケーブルの配線をよい感じに収納できた。新しいオフィスには幅広な棚がついていてその棚もそうなんだけど、縦の空間を分割して使えると効率がよい。普段プログラミングや ci/cd で効率のことばかり考えているから日常生活でも効率のよいことがあると嬉しい気持ちになる。ケーブルトレーはオフィス空間の効率化に寄与する。物理的なメリット以上に、私にとっては精神的に作用した気がする。&lt;/p>
&lt;h2 id="rabbitmq-の-management-api">rabbitmq の management api&lt;/h2>
&lt;p>rabbitmq には &lt;a href="https://www.rabbitmq.com/management.html">Management Plugin&lt;/a> という拡張があって、これをインストールすると管理画面と &lt;a href="https://www.rabbitmq.com/management.html#http-api">HTTP API&lt;/a> が付いてくる。&lt;a href="https://hub.docker.com/_/rabbitmq">docker image&lt;/a> だと、たぶん &lt;code>management&lt;/code> のタグが付いているものを選べばよいと思う。exchange や queue の初期設定を go のアプリケーションからできるようにしようと思って &lt;a href="https://github.com/michaelklishin/rabbit-hole">rabbit-hole&lt;/a> というライブラリを使ってすぐに実装できた。最低限の必要な機能をもつサブコマンドな cli からも呼べるようにした。本番環境でもこの cli を使って rabbitmq の初期設定や確認をする運用ツールにしようと思う。管理画面でもできるけど、cli でできた方がマニュアルを作る上でも簡単だし作業ログも管理しやすい。&lt;/p></content></item><item><title>dind をやってみた</title><link>/diary/posts/2022/1219/</link><pubDate>Mon, 19 Dec 2022 11:28:33 +0900</pubDate><guid>/diary/posts/2022/1219/</guid><description>3時に寝て7時半に起きた。最後なのでワールドカップの決勝戦をみてた。接戦で試合もおもしろかったしよかったと思う。
gitlab ci/cd で docker in docker ミドルウェアを伴う結合テストは dockertest というツールを使って docker でミドルウェアを起動して実行している。デフォルトで作成した gitlab runner で docker を使おうとすると失敗する。これは gitlab runner が ci/cd ジョブを docker で動かすため docker in docker (これを dind と呼ぶらしい) のための設定が必要になる。大雑把に言えば gitlab runner にそのための権限を設定する必要がある。gitlab の次のドキュメントに詳細が書いてある。
Use Docker-in-Docker gitlab runner に権限を設定したら次のような job が動けば docker in docker は成功と言える。
hello-dind: stage: test image: docker:20.10.21 variables: DOCKER_HOST: tcp://docker:2375 DOCKER_TLS_CERTDIR: &amp;#34;&amp;#34; services: - docker:20.10.21-dind allow_failure: true before_script: - docker info script: - docker run hello-world あとになって気付いたことだけど、dockertest の README にも Running dockertest in Gitlab CI としていくつか tips が紹介されている。dockertest で作成したリソースからホスト名とポート番号を取得するには次のようなユーティリティを使う必要がある。</description><content>&lt;p>3時に寝て7時半に起きた。最後なのでワールドカップの決勝戦をみてた。接戦で試合もおもしろかったしよかったと思う。&lt;/p>
&lt;h2 id="gitlab-cicd-で-docker-in-docker">gitlab ci/cd で docker in docker&lt;/h2>
&lt;p>ミドルウェアを伴う結合テストは &lt;a href="https://github.com/ory/dockertest">dockertest&lt;/a> というツールを使って docker でミドルウェアを起動して実行している。デフォルトで作成した gitlab runner で docker を使おうとすると失敗する。これは gitlab runner が ci/cd ジョブを docker で動かすため docker in docker (これを &lt;em>dind&lt;/em> と呼ぶらしい) のための設定が必要になる。大雑把に言えば gitlab runner にそのための権限を設定する必要がある。gitlab の次のドキュメントに詳細が書いてある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker">Use Docker-in-Docker&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>gitlab runner に権限を設定したら次のような job が動けば docker in docker は成功と言える。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">hello-dind&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">stage&lt;/span>: &lt;span style="color:#ae81ff">test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">docker:20.10.21&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">variables&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">DOCKER_HOST&lt;/span>: &lt;span style="color:#ae81ff">tcp://docker:2375&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">DOCKER_TLS_CERTDIR&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">docker:20.10.21-dind&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">allow_failure&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">before_script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">docker info&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">docker run hello-world&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>あとになって気付いたことだけど、dockertest の README にも &lt;a href="https://github.com/ory/dockertest#running-dockertest-in-gitlab-ci">Running dockertest in Gitlab CI&lt;/a> としていくつか tips が紹介されている。dockertest で作成したリソースからホスト名とポート番号を取得するには次のようなユーティリティを使う必要がある。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">getHostPort&lt;/span>(&lt;span style="color:#a6e22e">resource&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">dockertest&lt;/span>.&lt;span style="color:#a6e22e">Resource&lt;/span>, &lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dockerURL&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;DOCKER_HOST&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">dockerURL&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">resource&lt;/span>.&lt;span style="color:#a6e22e">GetHostPort&lt;/span>(&lt;span style="color:#a6e22e">id&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">u&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">Parse&lt;/span>(&lt;span style="color:#a6e22e">dockerURL&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">Hostname&lt;/span>() &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">resource&lt;/span>.&lt;span style="color:#a6e22e">GetPort&lt;/span>(&lt;span style="color:#a6e22e">id&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>オフィスでのんびり過ごす</title><link>/diary/posts/2022/1218/</link><pubDate>Sun, 18 Dec 2022 15:56:42 +0900</pubDate><guid>/diary/posts/2022/1218/</guid><description>21時に寝て何度も夜起きながら頭痛の機嫌をとりつつ8時に起きた。頭痛はほとんどなくなったもののお腹が痛かったりして微妙な体調。お仕事は断念してブログの記事を読んだりみかん食べたり買いものしたりしてのんびりしていた。
リモートワークの道具 たいちさんが 二年以上のリモートワークを生き残っている道具を紹介する という記事を書いていて同じマウスを使っているなと親近感をもって読んでいた。引っ越したばかりのオフィスでケーブル周りがあまりしっくりこないと思っていたので ケーブルトレー (CB-CT4) を購入してみることにした。机の上にわさわさしているケーブルや電源タップの取り回しをすっきりできそう。
マイナポータルへの登録 親が マイナポイントのキャンペーン がどうこうと、マイナンバーカードを取得して申し込みなどをしていた話しを聞いた。うちの親が手続きしているぐらいなのでそれなりに一般の人たちがマイナンバーカードを取得して申し込みしているのではないかと思う。私もよくわかっていなかったけど、12月中に手続きをすれば20,000ポイントをもらえるとあるので paypay 経由で手続きをしてみた。次の2つに登録するとよいみたい。
健康保険証としての利用申し込み 公金受取口座の登録 どちらも行政手続きの簡略化が期待される。システムに関わっている私は受け入れて申し込みした。手続きがうまくいけば paypay でマイナポイントをチャージして使えるらしい。paypay はふるさと納税とも連携するし、こういった行政との連携も抜群で便利な決済アプリになったなぁという印象。また以前はボーナス運用と呼ばれていた paypay を使ったときに還元されるポイントを資産運用している。それがパワーアップして paypay証券 になったみたい。paypay はイケイケやね。積立もできるらしいので投資信託の代わりのようなものだと思う。いままでのポイント運用プラス積立を気軽にできる資産運用としてよさそうに思えたので申し込みしてみた。</description><content>&lt;p>21時に寝て何度も夜起きながら頭痛の機嫌をとりつつ8時に起きた。頭痛はほとんどなくなったもののお腹が痛かったりして微妙な体調。お仕事は断念してブログの記事を読んだりみかん食べたり買いものしたりしてのんびりしていた。&lt;/p>
&lt;h2 id="リモートワークの道具">リモートワークの道具&lt;/h2>
&lt;p>たいちさんが &lt;a href="https://blog.satotaichi.info/working-area/">二年以上のリモートワークを生き残っている道具を紹介する&lt;/a> という記事を書いていて同じマウスを使っているなと親近感をもって読んでいた。引っ越したばかりのオフィスでケーブル周りがあまりしっくりこないと思っていたので &lt;a href="https://www.sanwa.co.jp/product/syohin?code=CB-CT4">ケーブルトレー (CB-CT4)&lt;/a> を購入してみることにした。机の上にわさわさしているケーブルや電源タップの取り回しをすっきりできそう。&lt;/p>
&lt;h2 id="マイナポータルへの登録">マイナポータルへの登録&lt;/h2>
&lt;p>親が &lt;a href="https://mynumbercard.point.soumu.go.jp/">マイナポイントのキャンペーン&lt;/a> がどうこうと、マイナンバーカードを取得して申し込みなどをしていた話しを聞いた。うちの親が手続きしているぐらいなのでそれなりに一般の人たちがマイナンバーカードを取得して申し込みしているのではないかと思う。私もよくわかっていなかったけど、12月中に手続きをすれば20,000ポイントをもらえるとあるので paypay 経由で手続きをしてみた。次の2つに登録するとよいみたい。&lt;/p>
&lt;ul>
&lt;li>健康保険証としての利用申し込み&lt;/li>
&lt;li>公金受取口座の登録&lt;/li>
&lt;/ul>
&lt;p>どちらも行政手続きの簡略化が期待される。システムに関わっている私は受け入れて申し込みした。手続きがうまくいけば paypay でマイナポイントをチャージして使えるらしい。paypay はふるさと納税とも連携するし、こういった行政との連携も抜群で便利な決済アプリになったなぁという印象。また以前はボーナス運用と呼ばれていた paypay を使ったときに還元されるポイントを資産運用している。それがパワーアップして &lt;a href="https://www.paypay-sec.co.jp/">paypay証券&lt;/a> になったみたい。paypay はイケイケやね。積立もできるらしいので投資信託の代わりのようなものだと思う。いままでのポイント運用プラス積立を気軽にできる資産運用としてよさそうに思えたので申し込みしてみた。&lt;/p></content></item><item><title>コミュニティ忘年会</title><link>/diary/posts/2022/1217/</link><pubDate>Sat, 17 Dec 2022 16:21:00 +0900</pubDate><guid>/diary/posts/2022/1217/</guid><description>22時に寝て0時に起きて、4時5時と起きて7時に起きた。昨日の夜ぐらいからずっと頭痛がする。体調悪い。
ストレッチ 今日の開脚幅は開始前153cmで、ストレッチ後157cmだった。先週とほぼ変わらず疲弊と疲労が抜けきっていない。右太もも周りの張りや違和感が依然として強い。腰も自覚症状はなかったもののストレッチを受けていると張りが強いことに気付いた。トレーナーさんからも調子悪そうみたいなコメントもあった。田んぼ・出張を経てのオフィス移転から引っ越しに伴う行政手続きと、この3週間のバタバタした負荷が残っているみたい。土日もずっと作業を継続しているのもよくないのかもしれない。とはいえ、お仕事も引っ越しの行政手続きも一段落はついたので徐々に復調していくはず。
もくもく会 &amp;amp; 忘年会 ストレッチを終えたら普段はオフィスで調べものをしているところ、頭痛でしんどいから家に帰って寝てた。そして14時から 【三宮.dev】今年を〆るもくもく会 に参加した。2022年7月頃に移転したばかりの中央区の区役所の上に 中央区文化センター がある。そこで開催されて初めて施設に入った。新設した施設なのできれいで設備も充実していてよさそうにみえた。うちのオフィスからも近い。うちの会社にお客さんが来ることはないのだけど、大人数の打ち合わせにも使えそう。
オフィスへ行かなかった日は day off というタグで記録している。オフィスへ行ったからといった必ずしもお仕事しているわけではないけれど、役員は考えること・為すことすべてが事業に関連するという考えからオフィスへ行く・行かないという基準で day off という概念を私の中で切り替えている。家で寝てても頭痛はおさまらなかったものの、気合を入れてもくもく会へ行って日記を書いたり調べものをしたりしていた。17時にもくもく会が終わって忘年会へ続く。頭痛はまだ残っていたものの、お昼よりは少しましになった。忘年会も休もうかどうか迷ったんだけど、普段来られない方々もいたのでせっかくの機会だと思って、本気出して忘年会へ行ってきた。体調悪いからお酒は控えた。忘年会でいろいろな話しを聞けたので行って楽しかった。
体調悪いから2次会は控えて家に帰ってきてそのまますぐ寝てた。</description><content>&lt;p>22時に寝て0時に起きて、4時5時と起きて7時に起きた。昨日の夜ぐらいからずっと頭痛がする。体調悪い。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前153cmで、ストレッチ後157cmだった。先週とほぼ変わらず疲弊と疲労が抜けきっていない。右太もも周りの張りや違和感が依然として強い。腰も自覚症状はなかったもののストレッチを受けていると張りが強いことに気付いた。トレーナーさんからも調子悪そうみたいなコメントもあった。田んぼ・出張を経てのオフィス移転から引っ越しに伴う行政手続きと、この3週間のバタバタした負荷が残っているみたい。土日もずっと作業を継続しているのもよくないのかもしれない。とはいえ、お仕事も引っ越しの行政手続きも一段落はついたので徐々に復調していくはず。&lt;/p>
&lt;h2 id="もくもく会--忘年会">もくもく会 &amp;amp; 忘年会&lt;/h2>
&lt;p>ストレッチを終えたら普段はオフィスで調べものをしているところ、頭痛でしんどいから家に帰って寝てた。そして14時から &lt;a href="https://kobe-sannomiya-dev.connpass.com/event/265510/">【三宮.dev】今年を〆るもくもく会&lt;/a> に参加した。2022年7月頃に移転したばかりの中央区の区役所の上に &lt;a href="https://www.kobe-bunka.jp/facilities/chuo/">中央区文化センター&lt;/a> がある。そこで開催されて初めて施設に入った。新設した施設なのできれいで設備も充実していてよさそうにみえた。うちのオフィスからも近い。うちの会社にお客さんが来ることはないのだけど、大人数の打ち合わせにも使えそう。&lt;/p>
&lt;p>オフィスへ行かなかった日は &lt;a href="/diary/diary/tags/day-off/">day off&lt;/a> というタグで記録している。オフィスへ行ったからといった必ずしもお仕事しているわけではないけれど、役員は考えること・為すことすべてが事業に関連するという考えからオフィスへ行く・行かないという基準で &lt;em>day off&lt;/em> という概念を私の中で切り替えている。家で寝てても頭痛はおさまらなかったものの、気合を入れてもくもく会へ行って日記を書いたり調べものをしたりしていた。17時にもくもく会が終わって忘年会へ続く。頭痛はまだ残っていたものの、お昼よりは少しましになった。忘年会も休もうかどうか迷ったんだけど、普段来られない方々もいたのでせっかくの機会だと思って、本気出して忘年会へ行ってきた。体調悪いからお酒は控えた。忘年会でいろいろな話しを聞けたので行って楽しかった。&lt;/p>
&lt;p>体調悪いから2次会は控えて家に帰ってきてそのまますぐ寝てた。&lt;/p></content></item><item><title>openapi 勉強会</title><link>/diary/posts/2022/1216/</link><pubDate>Fri, 16 Dec 2022 11:18:04 +0900</pubDate><guid>/diary/posts/2022/1216/</guid><description>1時に寝て7時に起きた。昨日はたまたま遅くなって0時頃に帰ってきたが、最近は22時前後に帰ってくることが多い。疲労困憊。
nginx でつくるリバースプロキシ ちょっとググってみつかる記事を参考にして設定したらすぐにできた。私は tls 周りの設定に詳しくないのでこういうまとめ記事はとても助かる。インターネットって便利。
Docker with SSL and an nginx reverse proxy NGINX Docker with SSL Encryption (Self-signed) openapi 勉強会 昨日の続き。openapi についてチーム勉強会を開催した。wiki に次の目次で説明を書いてその内容を勉強会で話した。ちょうど1時間におさまって内容もわかりやすいものができたのではないかと自画自賛。毎週のチーム勉強会のネタとしてちょうどよい粒度だった。
code generator が fork した背景 スキーマ駆動開発 メリット デメリット OpenAPI スキーマからドキュメント生成 OpenAPI スキーマからコード生成 リファレンス 余談だけど、過去に働いていた会社の発表資料が slideshare から docswell というサービスに移管されてた。slideshare は広告が鬱陶しいサービスになってしまってひどいユーザー体験だからこれは適切な判断だと思う。
https://www.docswell.com/s/ydnjp/Z3YQV5-2019-11-21-120351</description><content>&lt;p>1時に寝て7時に起きた。昨日はたまたま遅くなって0時頃に帰ってきたが、最近は22時前後に帰ってくることが多い。疲労困憊。&lt;/p>
&lt;h2 id="nginx-でつくるリバースプロキシ">nginx でつくるリバースプロキシ&lt;/h2>
&lt;p>ちょっとググってみつかる記事を参考にして設定したらすぐにできた。私は tls 周りの設定に詳しくないのでこういうまとめ記事はとても助かる。インターネットって便利。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/dahlsailrunner/679e6dec5fd769f30bce90447ae80081">Docker with SSL and an nginx reverse proxy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mpolinowski.github.io/docs/DevOps/NGINX/2020-08-27--nginx-docker-ssl-certs-self-signed/2020-08-27/">NGINX Docker with SSL Encryption (Self-signed)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="openapi-勉強会">openapi 勉強会&lt;/h2>
&lt;p>昨日の続き。openapi についてチーム勉強会を開催した。wiki に次の目次で説明を書いてその内容を勉強会で話した。ちょうど1時間におさまって内容もわかりやすいものができたのではないかと自画自賛。毎週のチーム勉強会のネタとしてちょうどよい粒度だった。&lt;/p>
&lt;ul>
&lt;li>code generator が fork した背景&lt;/li>
&lt;li>スキーマ駆動開発
&lt;ul>
&lt;li>メリット&lt;/li>
&lt;li>デメリット&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>OpenAPI スキーマからドキュメント生成&lt;/li>
&lt;li>OpenAPI スキーマからコード生成&lt;/li>
&lt;li>リファレンス&lt;/li>
&lt;/ul>
&lt;p>余談だけど、過去に働いていた会社の発表資料が slideshare から docswell というサービスに移管されてた。slideshare は広告が鬱陶しいサービスになってしまってひどいユーザー体験だからこれは適切な判断だと思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.docswell.com/s/ydnjp/Z3YQV5-2019-11-21-120351">https://www.docswell.com/s/ydnjp/Z3YQV5-2019-11-21-120351&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>openapi 再び</title><link>/diary/posts/2022/1215/</link><pubDate>Thu, 15 Dec 2022 08:16:29 +0900</pubDate><guid>/diary/posts/2022/1215/</guid><description>1時に寝て何度か起きて7時に起きた。1-2時頃に吐き気がして苦しむ割に後半はなにもなかったかのように眠れることがある。
openapi-generator の調査 毎週の勉強会に向けて最新の openapi-generator を使って出力した go client のコードを読んだりしていた。openapi-generator を簡単に試すためのチュートリアルのようなものとして、過去にリポジトリに整理しておいた。このリポジトリを使うとコード生成とドキュメント生成の両方を試してスキーマがあることのメリットを体験できるようになっている。
https://github.com/kazamori/try-openapi-generator-cli chatgpt で遊ぶ 【おあそぶ会】GPT3と遊ぶ に参加した。gpt3 についてちょうさんが調べたメモにも目を通して参考になった。
20221215【おあそぶ会】GPT3と遊ぶ ちょうさんの gpt3 の説明を聞きながら chatgpt で葬送のフリーレンについてチャットしてた。今日の成果はこれかな。</description><content>&lt;p>1時に寝て何度か起きて7時に起きた。1-2時頃に吐き気がして苦しむ割に後半はなにもなかったかのように眠れることがある。&lt;/p>
&lt;h2 id="openapi-generator-の調査">openapi-generator の調査&lt;/h2>
&lt;p>毎週の勉強会に向けて最新の &lt;a href="https://github.com/OpenAPITools/openapi-generator">openapi-generator&lt;/a> を使って出力した go client のコードを読んだりしていた。openapi-generator を簡単に試すためのチュートリアルのようなものとして、過去にリポジトリに整理しておいた。このリポジトリを使うとコード生成とドキュメント生成の両方を試してスキーマがあることのメリットを体験できるようになっている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/try-openapi-generator-cli">https://github.com/kazamori/try-openapi-generator-cli&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="chatgpt-で遊ぶ">chatgpt で遊ぶ&lt;/h2>
&lt;p>&lt;a href="https://play2learn.connpass.com/event/268391/">【おあそぶ会】GPT3と遊ぶ&lt;/a> に参加した。gpt3 についてちょうさんが調べたメモにも目を通して参考になった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://peridot-balmoral-923.notion.site/20221215-GPT3-31a50d35e2b14c38a73693d1cf1d339a">20221215【おあそぶ会】GPT3と遊ぶ&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ちょうさんの gpt3 の説明を聞きながら chatgpt で葬送のフリーレンについてチャットしてた。今日の成果はこれかな。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/1215_chatgpt1.png"/>
&lt;/figure></content></item><item><title>技術選定の調査開始</title><link>/diary/posts/2022/1214/</link><pubDate>Wed, 14 Dec 2022 08:02:27 +0900</pubDate><guid>/diary/posts/2022/1214/</guid><description>1時に寝て2時に起きて吐き気に苦しんで6時に起きた。後半はよく眠れた気がする。
フロントエンドの技術選定の調査 はらさんにお願いした フロントエンド勉強会 の内容を踏まえて技術選定を行う。次の3つを候補とした。
react svelte solid 客観的な指標で3つの技術を調査して比較した時点で solid はうちのチームにはあわないと候補から除外することにした。なので react vs svelte の一騎討ちとなる。なにか理由がない (デファクトスタンダード) なら react だし、うちのチームにとって有効だと判断できる項目があるなら svelte になる。ここで next.js と svelte kit でちょっとコードを書いてみて自分なりの感触も探ろうと考えている。
Svelte vs React: Which framework to learn in 2023? インフレ勉強会 エンジニアのためのインフレ研究会 #1 に参加した。お仕事の調べものをしながら聞いてた。私はもう常連で前々から同じような話を聞いているものの、発表者の資料も説明もわかりやすいものだったと思う。</description><content>&lt;p>1時に寝て2時に起きて吐き気に苦しんで6時に起きた。後半はよく眠れた気がする。&lt;/p>
&lt;h2 id="フロントエンドの技術選定の調査">フロントエンドの技術選定の調査&lt;/h2>
&lt;p>はらさんにお願いした &lt;a href="/diary/diary/posts/2022/1209/#フロントエンド勉強会">フロントエンド勉強会&lt;/a> の内容を踏まえて技術選定を行う。次の3つを候補とした。&lt;/p>
&lt;ul>
&lt;li>react&lt;/li>
&lt;li>svelte&lt;/li>
&lt;li>solid&lt;/li>
&lt;/ul>
&lt;p>客観的な指標で3つの技術を調査して比較した時点で solid はうちのチームにはあわないと候補から除外することにした。なので react vs svelte の一騎討ちとなる。なにか理由がない (デファクトスタンダード) なら react だし、うちのチームにとって有効だと判断できる項目があるなら svelte になる。ここで next.js と svelte kit でちょっとコードを書いてみて自分なりの感触も探ろうと考えている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://scrimba.com/articles/svelte-vs-react/">Svelte vs React: Which framework to learn in 2023?&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="インフレ勉強会">インフレ勉強会&lt;/h2>
&lt;p>&lt;a href="https://inflation.connpass.com/event/266172/">エンジニアのためのインフレ研究会 #1&lt;/a> に参加した。お仕事の調べものをしながら聞いてた。私はもう常連で前々から同じような話を聞いているものの、発表者の資料も説明もわかりやすいものだったと思う。&lt;/p></content></item><item><title>eltax で異動届を申請してみた</title><link>/diary/posts/2022/1213/</link><pubDate>Tue, 13 Dec 2022 23:08:06 +0900</pubDate><guid>/diary/posts/2022/1213/</guid><description>0時に寝て5時に起きて7時に起きた。変哲のない普通の朝だった気がする。
三菱 UFJ 銀行の住所変更手続き 先週来店予約をとったので登記事項証明書をもって来店した。手続き自体はすんなりと進み10分で完了した。わざわざ対面で行うのは最早これセキュリティ。とりあえずセキュリティと言っておけば多少の不便さなんか吹っ飛ぶ。担当者が次の項目をチェックしていた。
免許証の写真と同じ人物かどうか 住所が書類とあっているかどうか 通帳が正しいかどうか 銀行の届け印が正しいかどうか eltax の住所変更手続き オフィスのプリンタを調べたらスキャナの機能もあることがわかった。夜に登記事項証明書をスキャナで取り込み pdf 変換できたのでそれを使って eltax で地方自治体 (県と市) の異動届も提出することにした。どうやら申請・届出は pc 版ではなく web 版を使うらしい。初めて行う申請だったので書類の在り処や段取りがわからなくて2時間ぐらいかかった。ざっくり次の手順でできる。
県向けに異動届を作成 登記事項証明書の pdf 添付 作成した異動届をマイナンバーカードを使った公的個人認証サービスで署名して送信 eltax の利用者情報の変更届けを送信 住所が旧住所になっているので更新 県と市のどちらかを選択すると両方に通知される？ 県向けに送付した異動届を複製 登記事項証明書の pdf 添付も複製される 同じ異動届を使って市向けに作成 作成した異動届をマイナンバーカードを使った公的個人認証サービスで署名して送信 メッセージ照会や受付状況照会で内容を確認 翌日には受付状況照会で手続きを完了したというステータスになっていたので問題はなかったみたい。同じ異動届を複製できたのが便利だった。
eltax で異動届を県と市の2つへ提出した。2時間ぐらいかかったけど、手続きを理解した (はず) 。最初に作った異動届をコピーして別の自治体向け申請ができた。入力の手間を省けるので便利な機能にみえる。この次に1つの申請を2つの自治体へ送るといった改善が期待される。
&amp;mdash; Tetsuya Morimoto (@t2y) December 13, 2022</description><content>&lt;p>0時に寝て5時に起きて7時に起きた。変哲のない普通の朝だった気がする。&lt;/p>
&lt;h2 id="三菱-ufj-銀行の住所変更手続き">三菱 UFJ 銀行の住所変更手続き&lt;/h2>
&lt;p>先週来店予約をとったので登記事項証明書をもって来店した。手続き自体はすんなりと進み10分で完了した。わざわざ対面で行うのは最早これセキュリティ。とりあえずセキュリティと言っておけば多少の不便さなんか吹っ飛ぶ。担当者が次の項目をチェックしていた。&lt;/p>
&lt;ul>
&lt;li>免許証の写真と同じ人物かどうか&lt;/li>
&lt;li>住所が書類とあっているかどうか&lt;/li>
&lt;li>通帳が正しいかどうか&lt;/li>
&lt;li>銀行の届け印が正しいかどうか&lt;/li>
&lt;/ul>
&lt;h2 id="eltax-の住所変更手続き">eltax の住所変更手続き&lt;/h2>
&lt;p>オフィスのプリンタを調べたらスキャナの機能もあることがわかった。夜に登記事項証明書をスキャナで取り込み pdf 変換できたのでそれを使って eltax で地方自治体 (県と市) の異動届も提出することにした。どうやら申請・届出は pc 版ではなく web 版を使うらしい。初めて行う申請だったので書類の在り処や段取りがわからなくて2時間ぐらいかかった。ざっくり次の手順でできる。&lt;/p>
&lt;ol>
&lt;li>県向けに異動届を作成
&lt;ol>
&lt;li>登記事項証明書の pdf 添付&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>作成した異動届をマイナンバーカードを使った公的個人認証サービスで署名して送信&lt;/li>
&lt;li>eltax の利用者情報の変更届けを送信
&lt;ol>
&lt;li>住所が旧住所になっているので更新&lt;/li>
&lt;li>県と市のどちらかを選択すると両方に通知される？&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>県向けに送付した異動届を複製
&lt;ol>
&lt;li>登記事項証明書の pdf 添付も複製される&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>同じ異動届を使って市向けに作成&lt;/li>
&lt;li>作成した異動届をマイナンバーカードを使った公的個人認証サービスで署名して送信&lt;/li>
&lt;li>メッセージ照会や受付状況照会で内容を確認&lt;/li>
&lt;/ol>
&lt;p>翌日には受付状況照会で手続きを完了したというステータスになっていたので問題はなかったみたい。同じ異動届を複製できたのが便利だった。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">eltax で異動届を県と市の2つへ提出した。2時間ぐらいかかったけど、手続きを理解した (はず) 。最初に作った異動届をコピーして別の自治体向け申請ができた。入力の手間を省けるので便利な機能にみえる。この次に1つの申請を2つの自治体へ送るといった改善が期待される。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1602658819368456192?ref_src=twsrc%5Etfw">December 13, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item><item><title>docker compose に期待しない</title><link>/diary/posts/2022/1212/</link><pubDate>Mon, 12 Dec 2022 12:52:27 +0900</pubDate><guid>/diary/posts/2022/1212/</guid><description>0時に寝て5時に起きて7時に起きた。起きたら冷やしたのかお腹痛かったが、まぁまぁ眠れたと思う。
テスト環境の構築 GitLab CI/CD にだいぶ慣れてきてジョブを追加したり改善したりしながらようやくアプリケーションの docker image もコンテナレジストリに push されるようになった。それを pull してきて、テスト環境を docker compose で構築する。Use Compose in production とドキュメントでは威勢がよいが、これが全然イケてない。複数の compose.yml で項目によっては変更したいところを置き換えるといった振る舞いになっていない。例えば、ポート番号などを dev と prod で置き換えたいといった運用の要件を考える。
dev.yml services: myapp: ports: - 18080:8080 prod.yml services: myapp: ports: - 8080:8080 これを次のように指定すると、
$ docker compose -f dev.yml -f prod.yml up -d 実際のサービスは次のように振る舞う。全然あかん。
services: myapp: ports: - 18080:8080 - 8080:8080 他にもそれぞれの yml ファイルで読み込む environment file のマージなどもよくわからない振る舞いをしていて複数の compose.yml で制御するのは断念した。dry の原則に反して設定は重複するけど、それぞれの環境を個別に compose.yml として管理した方が保守コストは小さくなると私は判断した。複数の compose.yml の使い分けのデバッグを1-2日やった後に諦めてテスト環境の構築は完了した。
年金事務所の住所変更手続き 先週 法務局で法人登記の変更申請 をしていて、そのときに問題がなければ今日から登記事項証明書を取得できると案内をもらっていた。決定書が漏れていて再提出というトラブルはあったものの、最小限の損失で留めたせいか、問題なく登記事項証明書を発行できた。住所の変更だけわかればよいので履歴事項証明書ではなく現在事項証明書を発行してみた。この書類もおもしろくて1つ前の住所といまの住所の2つを確認できる。法務局へ行った帰りに年金事務所へ立ち寄って社会保険の住所変更の手続きを行った。次の3つの書類をもって窓口へ。</description><content>&lt;p>0時に寝て5時に起きて7時に起きた。起きたら冷やしたのかお腹痛かったが、まぁまぁ眠れたと思う。&lt;/p>
&lt;h2 id="テスト環境の構築">テスト環境の構築&lt;/h2>
&lt;p>&lt;a href="https://docs.gitlab.com/ee/ci/">GitLab CI/CD&lt;/a> にだいぶ慣れてきてジョブを追加したり改善したりしながらようやくアプリケーションの docker image もコンテナレジストリに push されるようになった。それを pull してきて、テスト環境を &lt;a href="https://docs.docker.com/compose/">docker compose&lt;/a> で構築する。&lt;a href="https://docs.docker.com/compose/production/">Use Compose in production&lt;/a> とドキュメントでは威勢がよいが、これが全然イケてない。複数の compose.yml で項目によっては変更したいところを置き換えるといった振る舞いになっていない。例えば、ポート番号などを dev と prod で置き換えたいといった運用の要件を考える。&lt;/p>
&lt;ul>
&lt;li>dev.yml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">myapp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">18080&lt;/span>:&lt;span style="color:#ae81ff">8080&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>prod.yml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">myapp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">8080&lt;/span>:&lt;span style="color:#ae81ff">8080&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これを次のように指定すると、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker compose -f dev.yml -f prod.yml up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>実際のサービスは次のように振る舞う。全然あかん。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">myapp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">18080&lt;/span>:&lt;span style="color:#ae81ff">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">8080&lt;/span>:&lt;span style="color:#ae81ff">8080&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>他にもそれぞれの yml ファイルで読み込む environment file のマージなどもよくわからない振る舞いをしていて複数の compose.yml で制御するのは断念した。dry の原則に反して設定は重複するけど、それぞれの環境を個別に compose.yml として管理した方が保守コストは小さくなると私は判断した。複数の compose.yml の使い分けのデバッグを1-2日やった後に諦めてテスト環境の構築は完了した。&lt;/p>
&lt;h2 id="年金事務所の住所変更手続き">年金事務所の住所変更手続き&lt;/h2>
&lt;p>先週 &lt;a href="/diary/diary/posts/2022/1205/#法務局で法人登記の変更申請">法務局で法人登記の変更申請&lt;/a> をしていて、そのときに問題がなければ今日から登記事項証明書を取得できると案内をもらっていた。決定書が漏れていて再提出というトラブルはあったものの、最小限の損失で留めたせいか、問題なく登記事項証明書を発行できた。住所の変更だけわかればよいので履歴事項証明書ではなく現在事項証明書を発行してみた。この書類もおもしろくて1つ前の住所といまの住所の2つを確認できる。法務局へ行った帰りに年金事務所へ立ち寄って社会保険の住所変更の手続きを行った。次の3つの書類をもって窓口へ。&lt;/p>
&lt;ul>
&lt;li>登記事項証明書: 番地まで記載されている&lt;/li>
&lt;li>オフィスの一時使用契約書: ビル名はあるがこのビル名は来月に改名&lt;/li>
&lt;li>ビル名変更の証明書類: ビル名の変更のみが記載されている&lt;/li>
&lt;/ul>
&lt;p>この3つの書類で完全に指定された住所 (Fully Qualified Address: 造語) を丁寧に説明したところ担当者に納得してもらえて事なきを得た。&lt;/p></content></item><item><title>休日のオンライン学習</title><link>/diary/posts/2022/1211/</link><pubDate>Sun, 11 Dec 2022 10:12:21 +0900</pubDate><guid>/diary/posts/2022/1211/</guid><description>0時に寝て夜中に吐き気がして2回ほど起きて3時と5時に起きて8時に起きた。なかなか苦しい寝方をした。
ヤフートラベルと一休.comのシステム統合 アーカイブ公開されたらみようと思いつつ忘れてたので見返した。
雑なめも。また機をみて見返すこともあるかも。
バックエンドは完全に一休側に寄せるという大きな意志決定を2016年に行った この意志決定はフロントエンド統合にも大きな影響を与えた ふじもんさんの意志決定がよかった？ 今日の話しはマルチブランドデザインシステム統合がメイン 開発者が50-60人程度で半年ぐらいで launch できた nuxt/vuejs で開発している スタイルは tailwindcss を使っている 実は launch した後にこのシステムが必要だとわかった 開発者とデザイナー間の細かい意思疎通が困難 外部からデザインシステムに詳しい人にも来てもらっていろんな議論をした ガイドラインを言語化するところから始め、最終的にソースコードの共有ができるようになった 終わってからデザインシステムそのものは重要ではないと気付いた この過程で開発者とデザイナー間のどのように共通化するか、あるいはしないかと議論を繰り返し行ったことが重要だったと当事者がインタビューで語っていた デザインシステムの開発を通じてデザインの共通認識をもてたことがよかった 波及効果 同じソースコードから少し異なる体験の開発のノウハウができた ふるさと納税に特化した宿泊予約サイトを作った 統合は終わりではない、lauch したところが始まり 統合後にいろいろな施策をすることで課題がみえてくることがある 全国旅行支援は1つの開発で2つの体験をつくることができた Q. デザイナーと開発者はわりと仲が悪いのでは？価値観や考え方が異なるのですり合わせるのは難しいのでは？ 過去の一休でも起きていた 一休のチームはデザイナーと PM と開発者で構成されている このチームが一緒に働いていてチームでなるべく意志決定している 普段から一緒に働いていると仲が悪いということはなかった とはいえ、仕事のプロセスが異なるので課題はあった 地道に丁寧にすり合わせを行った 外部から講師を読んで中立的な立場でワークショップを何度も行った デザイナーと開発者を別の組織にしているとコミュニケーションの壁ができてしまうかもしれない go の学び直し テストの学び直し に引き続き、Gopher塾 #2 - Goらしいコードの書き方 - DAY 1 に参加した。
テストの次のプログラミングの話しだったので内容そのものは難しくはなかったけど、改めて重要な項目を選抜しているのだと考えると学びはあったと思う。参考になったことをいくつか覚えている範囲でまとめる。名前の付け方について感覚的に理解していたし、実際に私はそうしているけど、コードレビューしていて自然になっていないコードを指摘する機会も多いので一定の習熟を要するのかもしれない。いま毎週勉強会をやっていて私が講師として話している。ネタがなくなってきたり大変になったきたら準備の少ないコードリーディング会もやってみたいと思った。
google Go Style derrors.Wrap 名前に文脈を与えるという概念 相対的な名前をつける 準備の少ないコードリーディング会 お題（読むパッケージ）を決める 選んだお題に期待することを当日話す 時間を決めてみんなでそれぞれ読む（20分とか） 読みながらSlackのスレッドにメモをしていく 残りの時間で気になったところを議論する 自分が気づけなかった点を知ることができる</description><content>&lt;p>0時に寝て夜中に吐き気がして2回ほど起きて3時と5時に起きて8時に起きた。なかなか苦しい寝方をした。&lt;/p>
&lt;h2 id="ヤフートラベルと一休comのシステム統合">ヤフートラベルと一休.comのシステム統合&lt;/h2>
&lt;p>アーカイブ公開されたらみようと思いつつ忘れてたので見返した。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/JN4kGYbQMJ8" allowfullscreen title="ヤフートラベルのシステムリニューアル 一休 com とのシステム統合 -日本語版-">&lt;/iframe>
&lt;/div>
&lt;p>雑なめも。また機をみて見返すこともあるかも。&lt;/p>
&lt;ul>
&lt;li>バックエンドは完全に一休側に寄せるという大きな意志決定を2016年に行った
&lt;ul>
&lt;li>この意志決定はフロントエンド統合にも大きな影響を与えた&lt;/li>
&lt;li>ふじもんさんの意志決定がよかった？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>今日の話しはマルチブランドデザインシステム統合がメイン
&lt;ul>
&lt;li>開発者が50-60人程度で半年ぐらいで launch できた&lt;/li>
&lt;li>nuxt/vuejs で開発している&lt;/li>
&lt;li>スタイルは tailwindcss を使っている&lt;/li>
&lt;li>実は launch した後にこのシステムが必要だとわかった
&lt;ul>
&lt;li>開発者とデザイナー間の細かい意思疎通が困難&lt;/li>
&lt;li>外部からデザインシステムに詳しい人にも来てもらっていろんな議論をした&lt;/li>
&lt;li>ガイドラインを言語化するところから始め、最終的にソースコードの共有ができるようになった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>終わってからデザインシステムそのものは重要ではないと気付いた
&lt;ul>
&lt;li>この過程で開発者とデザイナー間のどのように共通化するか、あるいはしないかと議論を繰り返し行ったことが重要だったと当事者がインタビューで語っていた&lt;/li>
&lt;li>デザインシステムの開発を通じてデザインの共通認識をもてたことがよかった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>波及効果
&lt;ul>
&lt;li>同じソースコードから少し異なる体験の開発のノウハウができた&lt;/li>
&lt;li>ふるさと納税に特化した宿泊予約サイトを作った&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>統合は終わりではない、lauch したところが始まり
&lt;ul>
&lt;li>統合後にいろいろな施策をすることで課題がみえてくることがある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>全国旅行支援は1つの開発で2つの体験をつくることができた&lt;/li>
&lt;li>Q. デザイナーと開発者はわりと仲が悪いのでは？価値観や考え方が異なるのですり合わせるのは難しいのでは？
&lt;ul>
&lt;li>過去の一休でも起きていた&lt;/li>
&lt;li>一休のチームはデザイナーと PM と開発者で構成されている
&lt;ul>
&lt;li>このチームが一緒に働いていてチームでなるべく意志決定している&lt;/li>
&lt;li>普段から一緒に働いていると仲が悪いということはなかった&lt;/li>
&lt;li>とはいえ、仕事のプロセスが異なるので課題はあった
&lt;ul>
&lt;li>地道に丁寧にすり合わせを行った&lt;/li>
&lt;li>外部から講師を読んで中立的な立場でワークショップを何度も行った&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>デザイナーと開発者を別の組織にしているとコミュニケーションの壁ができてしまうかもしれない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="go-の学び直し">go の学び直し&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/1123/#go-の学び直し">テストの学び直し&lt;/a> に引き続き、&lt;a href="https://tenntenn.connpass.com/event/267564/">Gopher塾 #2 - Goらしいコードの書き方 - DAY 1&lt;/a> に参加した。&lt;/p>
&lt;p>テストの次のプログラミングの話しだったので内容そのものは難しくはなかったけど、改めて重要な項目を選抜しているのだと考えると学びはあったと思う。参考になったことをいくつか覚えている範囲でまとめる。名前の付け方について感覚的に理解していたし、実際に私はそうしているけど、コードレビューしていて自然になっていないコードを指摘する機会も多いので一定の習熟を要するのかもしれない。いま毎週勉強会をやっていて私が講師として話している。ネタがなくなってきたり大変になったきたら準備の少ないコードリーディング会もやってみたいと思った。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://google.github.io/styleguide/go/">google Go Style&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cs.opensource.google/go/x/pkgsite/+/master:internal/derrors/derrors.go;l=237">derrors.Wrap&lt;/a>&lt;/li>
&lt;li>名前に文脈を与えるという概念
&lt;ul>
&lt;li>相対的な名前をつける&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>準備の少ないコードリーディング会
&lt;ul>
&lt;li>お題（読むパッケージ）を決める&lt;/li>
&lt;li>選んだお題に期待することを当日話す&lt;/li>
&lt;li>時間を決めてみんなでそれぞれ読む（20分とか）&lt;/li>
&lt;li>読みながらSlackのスレッドにメモをしていく&lt;/li>
&lt;li>残りの時間で気になったところを議論する&lt;/li>
&lt;li>自分が気づけなかった点を知ることができる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content></item><item><title>openapi-ext-tools をまた使う日がきた</title><link>/diary/posts/2022/1210/</link><pubDate>Sat, 10 Dec 2022 12:03:13 +0900</pubDate><guid>/diary/posts/2022/1210/</guid><description>0時に寝て4時に起きて7時に起きた。わりとよく眠れた。
ストレッチ トレーナーさんと月曜日の日本対クロアチア戦の感想を話したりしていた。今日の開脚幅は開始前153cmで、ストレッチ後156cmだった。先週は疲弊と疲労で散々な数値になっていたものが復調してきつつある。今週も毎日8-22時はオフィスで缶詰め状態だった。たくさん座っている (同じ体勢でいる) 時間が増えると筋肉にはよくない。まだまだ右腰と右太もも周りの張りは強く復調にはもう少し時間がかかるようにみえる。一方で忙しさのピークを越したと思うので今週以降は少しペースダウンしながら体作りをしていく。いまお手伝いしている開発は12月にすべての集中力を費やしてもよいと考えている。残りは期間はメンバーに委譲するような体制になるとベストかもしれない。そのための体力づくりは重要。
openapi-ext-tools 再び github pages ならぬ gitlab pages がある。ふと web api のドキュメントを作るために openapi のスキーマを定義したら gitlab の ci/cd と連携できていいんじゃないかと思い付いた。スキーマがあればフロントエンドのクライアント生成や e2e テストコードの自動生成などに使えるかもしれないし。過去に作った openapi-ext-tools を oss にしておいたからいまも使える。oss 万歳。先のことはわからない。redoc を使ってちゃっちゃと実装した。
pages: only: changes: - schema/* stage: deploy image: alpine:latest before_script: - apk --no-cache add python3 nodejs npm - python --version - python -m ensurepip - pip3 --version - node --version - npm --version - npm install --global redoc-cli - redoc-cli --version - pip3 install openapi-ext-tools - pip3 freeze openapi-ext-tools | grep openapi script: - openapi-spec-cli --spec-path schema/openapi.</description><content>&lt;p>0時に寝て4時に起きて7時に起きた。わりとよく眠れた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>トレーナーさんと月曜日の日本対クロアチア戦の感想を話したりしていた。今日の開脚幅は開始前153cmで、ストレッチ後156cmだった。先週は疲弊と疲労で散々な数値になっていたものが復調してきつつある。今週も毎日8-22時はオフィスで缶詰め状態だった。たくさん座っている (同じ体勢でいる) 時間が増えると筋肉にはよくない。まだまだ右腰と右太もも周りの張りは強く復調にはもう少し時間がかかるようにみえる。一方で忙しさのピークを越したと思うので今週以降は少しペースダウンしながら体作りをしていく。いまお手伝いしている開発は12月にすべての集中力を費やしてもよいと考えている。残りは期間はメンバーに委譲するような体制になるとベストかもしれない。そのための体力づくりは重要。&lt;/p>
&lt;h2 id="openapi-ext-tools-再び">openapi-ext-tools 再び&lt;/h2>
&lt;p>github pages ならぬ &lt;a href="https://docs.gitlab.com/ee/user/project/pages/">gitlab pages&lt;/a> がある。ふと web api のドキュメントを作るために openapi のスキーマを定義したら gitlab の ci/cd と連携できていいんじゃないかと思い付いた。スキーマがあればフロントエンドのクライアント生成や e2e テストコードの自動生成などに使えるかもしれないし。過去に作った &lt;a href="https://pypi.org/project/openapi-ext-tools/">openapi-ext-tools&lt;/a> を oss にしておいたからいまも使える。oss 万歳。先のことはわからない。&lt;a href="https://github.com/Redocly/redoc">redoc&lt;/a> を使ってちゃっちゃと実装した。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">pages&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">only&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">changes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">schema/*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">stage&lt;/span>: &lt;span style="color:#ae81ff">deploy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">alpine:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">before_script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">apk --no-cache add python3 nodejs npm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">python --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">python -m ensurepip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">pip3 --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">node --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">npm --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">npm install --global redoc-cli&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">redoc-cli --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">pip3 install openapi-ext-tools&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">pip3 freeze openapi-ext-tools | grep openapi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">openapi-spec-cli --spec-path schema/openapi.yml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - |+&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> redoc-cli bundle bundled_openapi.yaml \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --output index.html \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --options.expandResponses=all \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --options.requiredPropsFirst=true \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --options.jsonSampleExpandLevel=10 \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --options.hideLoading=true \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --options.pathInMiddlePanel=true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">mkdir -p public&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">mv index.html public/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">artifacts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">paths&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">public&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>久しぶりに触ったら openapi-ext-tools が依存ライブラリの変更で動かなくなっていたので直した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/openapi-ext-tools/issues/1">cannot import name &amp;lsquo;ValidationError&amp;rsquo; from &amp;lsquo;openapi_spec_validator.exceptions&amp;rsquo; #1&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>3年目の創立記念日</title><link>/diary/posts/2022/1209/</link><pubDate>Fri, 09 Dec 2022 20:43:28 +0900</pubDate><guid>/diary/posts/2022/1209/</guid><description>0時に寝て何度か起きて7時に起きた。金曜日は普通の週でも疲れているが、今週はハードだったからさらにバテバテ。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。オフィス移転に伴う諸々を雑談したり、おもには夕方から講師をしてもらうフロントエンド勉強会の最終確認のようなことをしていた。
フロントエンド勉強会 私がマネージャーとなって今月決めないといけない大きな意志決定の1つにフロントエンドの技術選定がある。とはいえ、私はフロントエンドに関して素人なのでなにかしら取っ掛かりがほしい。その参考の1つとして、はらさんにお願いして技術選定というテーマでフロントエンド勉強会を開催してもらった。感謝。いまお手伝い先では私が毎週チーム勉強会を行っている。これも1ヶ月以上続けている。そろそろ定着しつつあってチーム外からも毎週数人が参加してくれるようになってきた。勉強会という開発文化の取り組みとしてもちょうどよいように思ったのでお手伝い先も巻き込んで講師だけ社外の人が務める勉強会となった。結果は15人以上参加してくれて質疑応答も盛り上がってよかったと思う。
State of JS アンケート (ここは翻訳されたサイト) という、主にはフロントエンドの開発者の調査結果がある。これはフロントエンドの開発者のみのアンケートなので偏りはあるだろうというのも考慮しつつ、最近のトレンドを理解する上でよさそうに思えた。React をデファクトスタンダードとして、対抗する候補に Svelte のみを私は考えていたが、もう1つ Solid を加えてもよいのではないかとアンケート調査をみていて思うようになった。
私にとってもっとも参考になった技術選定の考え方としてリニューアルを前提にフロントエンドを作るというもの。技術選定で難しいことの1つは、いま流行っている技術が未来もそうかどうか誰にもわからない。未来に人気がなくなって保守されなくなって開発中止となり、フロントエンドの作り直しを強いられることを避けたいという心理や懸念は一般的だと思われる。その懸念を逆転の発想をもって、例えば、作ってから3年経ったら既存のフロントエンドはすべて捨てて作り直すと決めておけば多くの悩みは解消される。こういう言い方をすると多くのフロントエンド開発者は怒るかもしれない。私にとってはプロダクトのコアはバックエンドであってフロントエンドはそうではない。だからフロントエンドはそのときの流行りの技術で動けば何でもよいという考え方は納得感が高い。
創立記念日 今日が会社の創立記念日。無事に3周年を迎えた。いつか創立記念日をお休みにしたいが、未だそのときではない。
2年目は大きな失敗も経験して経営やキャリアの両方で反省する機会にもなった。その過程でうちの会社はなにをやるのかという基本方針とプロダクトの種のようなものができた。3年目はプロダクト開発の前段階としての実証実験のようなことを実際のお客さんの業務を通じて行っている。しかもそれがいま2社目。会社を作ったときに最初の10年間のステージを3つに分けた。そしてそのステージにおけるフェーズ1の終わりが近づいていて、目標としていたことも達成の見込みがたっている。うまくいけば来年の中旬以降から実証実験の結果を踏まえたプロダクト開発に移っていけるかもしれない。そうなればフェーズ2に移行する。起業してから3年経ってもありがたいことにお仕事はあるし応援してくれる人たちもいる。周りの人たちに恵まれていて感謝することも多い。過去の自分がやってきたことに自信をもっているからその人脈も継続できているし、少しずつ新しい関係性を作っていくことにも注意を払っている。あと何年働けるだろうかと考えることもしばしばある。もうそんなに長くないこともわかっているので悔いのないよう挑戦していきたい。</description><content>&lt;p>0時に寝て何度か起きて7時に起きた。金曜日は普通の週でも疲れているが、今週はハードだったからさらにバテバテ。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。オフィス移転に伴う諸々を雑談したり、おもには夕方から講師をしてもらうフロントエンド勉強会の最終確認のようなことをしていた。&lt;/p>
&lt;h2 id="フロントエンド勉強会">フロントエンド勉強会&lt;/h2>
&lt;p>私がマネージャーとなって今月決めないといけない大きな意志決定の1つにフロントエンドの技術選定がある。とはいえ、私はフロントエンドに関して素人なのでなにかしら取っ掛かりがほしい。その参考の1つとして、はらさんにお願いして技術選定というテーマでフロントエンド勉強会を開催してもらった。感謝。いまお手伝い先では私が毎週チーム勉強会を行っている。これも1ヶ月以上続けている。そろそろ定着しつつあってチーム外からも毎週数人が参加してくれるようになってきた。勉強会という開発文化の取り組みとしてもちょうどよいように思ったのでお手伝い先も巻き込んで講師だけ社外の人が務める勉強会となった。結果は15人以上参加してくれて質疑応答も盛り上がってよかったと思う。&lt;/p>
&lt;p>&lt;a href="https://2021.stateofjs.com/ja-JP/">State of JS アンケート&lt;/a> (ここは翻訳されたサイト) という、主にはフロントエンドの開発者の調査結果がある。これはフロントエンドの開発者のみのアンケートなので偏りはあるだろうというのも考慮しつつ、最近のトレンドを理解する上でよさそうに思えた。&lt;a href="https://reactjs.org/">React&lt;/a> をデファクトスタンダードとして、対抗する候補に &lt;a href="https://svelte.dev/">Svelte&lt;/a> のみを私は考えていたが、もう1つ &lt;a href="https://www.solidjs.com/">Solid&lt;/a> を加えてもよいのではないかとアンケート調査をみていて思うようになった。&lt;/p>
&lt;p>私にとってもっとも参考になった技術選定の考え方としてリニューアルを前提にフロントエンドを作るというもの。技術選定で難しいことの1つは、いま流行っている技術が未来もそうかどうか誰にもわからない。未来に人気がなくなって保守されなくなって開発中止となり、フロントエンドの作り直しを強いられることを避けたいという心理や懸念は一般的だと思われる。その懸念を逆転の発想をもって、例えば、作ってから3年経ったら既存のフロントエンドはすべて捨てて作り直すと決めておけば多くの悩みは解消される。こういう言い方をすると多くのフロントエンド開発者は怒るかもしれない。私にとってはプロダクトのコアはバックエンドであってフロントエンドはそうではない。だからフロントエンドはそのときの流行りの技術で動けば何でもよいという考え方は納得感が高い。&lt;/p>
&lt;h2 id="創立記念日">創立記念日&lt;/h2>
&lt;p>今日が会社の創立記念日。無事に3周年を迎えた。いつか創立記念日をお休みにしたいが、未だそのときではない。&lt;/p>
&lt;p>2年目は大きな失敗も経験して経営やキャリアの両方で反省する機会にもなった。その過程でうちの会社はなにをやるのかという基本方針とプロダクトの種のようなものができた。3年目はプロダクト開発の前段階としての実証実験のようなことを実際のお客さんの業務を通じて行っている。しかもそれがいま2社目。会社を作ったときに最初の10年間のステージを3つに分けた。そしてそのステージにおけるフェーズ1の終わりが近づいていて、目標としていたことも達成の見込みがたっている。うまくいけば来年の中旬以降から実証実験の結果を踏まえたプロダクト開発に移っていけるかもしれない。そうなればフェーズ2に移行する。起業してから3年経ってもありがたいことにお仕事はあるし応援してくれる人たちもいる。周りの人たちに恵まれていて感謝することも多い。過去の自分がやってきたことに自信をもっているからその人脈も継続できているし、少しずつ新しい関係性を作っていくことにも注意を払っている。あと何年働けるだろうかと考えることもしばしばある。もうそんなに長くないこともわかっているので悔いのないよう挑戦していきたい。&lt;/p></content></item><item><title>rabbitmq 再び</title><link>/diary/posts/2022/1208/</link><pubDate>Thu, 08 Dec 2022 08:18:34 +0900</pubDate><guid>/diary/posts/2022/1208/</guid><description>0時に寝て3時に起きて6時半に起きた。前日あまり寝てなかったから普段よりよく眠れた。
rabbitmq の認証 たまたまなのだけど、前のお仕事でも rabbitmq を使っていて、いまのお仕事でも rabbitmq を使っている。私の中では kafka のエコシステムに感銘を受けたので私が技術選定してよいなら kafka を使っていきたいところだけど、rabbitmq も人気があってすごいなと思う。インフラを触っていて rabbitmq の認証をしていないことに気付いた。rabbitmq の docker image を使うとデフォルトで guest/guest のユーザーが作られる。
If you wish to change the default username and password of guest / guest, you can do so with the RABBITMQ_DEFAULT_USER and RABBITMQ_DEFAULT_PASS environmental variables. These variables were available previously in the docker-specific entrypoint shell script but are now available in RabbitMQ directly.
おそらくメッセージのやり取りを通信するときも何も指定しなかったら guest ユーザーとして扱っているのかな？通信するときの RabbitMQ URI Specification によると、amqp://user:pass@host:10000/vhost のような、昔ながらの uri にユーザー／パスワードを埋め込むような認証になる。このやり方だと uri 自体が credentials になってしまって運用の使い勝手が悪くなってしまうものの、アプリケーションの変更は必要ないというメリットもある。おそらく歴史的に認証は後付けで追加されたのかな？ともかく実際の運用だとユーザー／パスワードでアクセス制御を行うだろうと想定されるので気付いたタイミングで開発環境の docker image の設定と uri の変更を行った。</description><content>&lt;p>0時に寝て3時に起きて6時半に起きた。前日あまり寝てなかったから普段よりよく眠れた。&lt;/p>
&lt;h2 id="rabbitmq-の認証">rabbitmq の認証&lt;/h2>
&lt;p>たまたまなのだけど、前のお仕事でも rabbitmq を使っていて、いまのお仕事でも rabbitmq を使っている。私の中では &lt;a href="https://kafka.apache.org/">kafka&lt;/a> のエコシステムに感銘を受けたので私が技術選定してよいなら kafka を使っていきたいところだけど、rabbitmq も人気があってすごいなと思う。インフラを触っていて rabbitmq の認証をしていないことに気付いた。&lt;a href="https://hub.docker.com/_/rabbitmq">rabbitmq の docker image&lt;/a> を使うとデフォルトで guest/guest のユーザーが作られる。&lt;/p>
&lt;blockquote>
&lt;p>If you wish to change the default username and password of guest / guest, you can do so with the RABBITMQ_DEFAULT_USER and RABBITMQ_DEFAULT_PASS environmental variables. These variables were available previously in the docker-specific entrypoint shell script but are now available in RabbitMQ directly.&lt;/p>
&lt;/blockquote>
&lt;p>おそらくメッセージのやり取りを通信するときも何も指定しなかったら guest ユーザーとして扱っているのかな？通信するときの &lt;a href="https://www.rabbitmq.com/uri-spec.html">RabbitMQ URI Specification&lt;/a> によると、&lt;code>amqp://user:pass@host:10000/vhost&lt;/code> のような、昔ながらの uri にユーザー／パスワードを埋め込むような認証になる。このやり方だと uri 自体が credentials になってしまって運用の使い勝手が悪くなってしまうものの、アプリケーションの変更は必要ないというメリットもある。おそらく歴史的に認証は後付けで追加されたのかな？ともかく実際の運用だとユーザー／パスワードでアクセス制御を行うだろうと想定されるので気付いたタイミングで開発環境の docker image の設定と uri の変更を行った。&lt;/p>
&lt;h2 id="時事ネタの気軽な雑談会">時事ネタの気軽な雑談会&lt;/h2>
&lt;p>&lt;a href="https://play2learn.connpass.com/event/267936/">【おはなし会】CEXだって安全にできるもん&lt;/a> に参加した。ちょうさんは fin-py のイベントで何度か発表を聞いたことがある。データサイエンス系のお仕事をされているのかな？&lt;a href="/diary/diary/posts/2022/1113/">ftx 事件&lt;/a> をうけて ethereum の創始者である vitalik buterin 氏がブログに投稿したアルゴリズムの解説をされていた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vitalik.ca/general/2022/11/19/proof_of_solvency.html">Having a safe CEX: proof of solvency and beyond&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>取引所の不正を防ぐための仕組みとして、それぞれの口座の残高を公開しなくても merkle tree とハッシュ関数をうまく使って、取引所が実際に管理している残高とユーザーの残高が一致しているかをチェックできるような、そんなアルゴリズムだったと思う。ちゃんとブログの記事を読んでないけど、ちょうさんの解説を聞く分にはアルゴリズムはそう難しくないように思えた。そんなすごい仕組みじゃなくて、簡易的に大きな計算コストもなく全体の残高があっていることのおおよそのチェックはできますよといったもの。&lt;/p>
&lt;p>イベントが始まる前にちょうさんが大学の研究室にいた頃、研究室へ行くと同僚がいて気軽に新しい技術の話しができたけど、社会人になるとそういう機会が減ってしまったという。時事ネタを気軽に雑談できるイベントがあればという話しをされていて私も共感できた。&lt;/p></content></item><item><title>gitlab の ci/cd 入門</title><link>/diary/posts/2022/1207/</link><pubDate>Wed, 07 Dec 2022 19:52:19 +0900</pubDate><guid>/diary/posts/2022/1207/</guid><description>0時に寝て3時に起きてそのまま眠れずにいたら6時になって7時過ぎから準備してオフィス行ってお仕事を始めた。
gitlab の ci/cd の調査 初めて GitLab CI/CD を触っている。まだ触り始めたばかりだが、感覚的には github actions 相当の機能はあるようにみえる。ソースコードリポジトリやパッケージリポジトリ／コンテナレジストリと ci/cd がセットになっているととても便利だ。これはすごいことだと最近思うようになってきた。もはやソースコードリポジトリのみのホスティングビジネスは成り立たない。なぜなら github や gitlab のような ci/cd が当たり前になってしまうと、その機能がない場合、デメリットを上回るメリットがないとそんなソースコードリポジトリを選択しない。
docker image をビルドして push する仕組みは既にメンバーが作ってくれていたのでその後始末の処理を作った。Container Registry API を使うと、不要な docker image を削除できる。
Delete registry repository tags in bulk 削除向けに便利な api 設計になっている。こういう細かい配慮は嬉しい。keep_n で最低限残すイメージ数を指定して older_than で過去何日より古いイメージを削除対象とするといったよくある運用の設定ができる。
curl -s -H &amp;#34;PRIVATE-TOKEN: $PROJECT_ACCESS_TOKEN&amp;#34; -X DELETE &amp;#34;${endpoint}&amp;#34; \ --data &amp;#34;name_regex_delete=.*&amp;#34; \ --data &amp;#34;keep_n=${KEEP_N}&amp;#34; \ --data &amp;#34;older_than=${OLDER_THAN}&amp;#34; あとは認証のトークンを指定する方法として私が調べた限りだと2通りある。
(ci_job_token_scope の feature flag を有効にして) $CI_JOB_TOKEN を使う こっちの方が一時トークンなのでよりセキュアなはず この場合はヘッダーに JOB-TOKEN を指定する プロジェクトレベルのアクセストークン を発行して ci/cd の variables に登録する トークンが漏洩したときにプロジェクトレベルで被害が発生する この場合はヘッダーに PRIVATE-TOKEN を指定する 使うトークンによってヘッダーが変わるというのがちょっと変な認証の設計にもみえるけど、まぁそれぐらいしか気にはならない。</description><content>&lt;p>0時に寝て3時に起きてそのまま眠れずにいたら6時になって7時過ぎから準備してオフィス行ってお仕事を始めた。&lt;/p>
&lt;h2 id="gitlab-の-cicd-の調査">gitlab の ci/cd の調査&lt;/h2>
&lt;p>初めて &lt;a href="https://docs.gitlab.com/ee/ci/">GitLab CI/CD&lt;/a> を触っている。まだ触り始めたばかりだが、感覚的には github actions 相当の機能はあるようにみえる。ソースコードリポジトリやパッケージリポジトリ／コンテナレジストリと ci/cd がセットになっているととても便利だ。これはすごいことだと最近思うようになってきた。もはやソースコードリポジトリのみのホスティングビジネスは成り立たない。なぜなら github や gitlab のような ci/cd が当たり前になってしまうと、その機能がない場合、デメリットを上回るメリットがないとそんなソースコードリポジトリを選択しない。&lt;/p>
&lt;p>docker image をビルドして push する仕組みは既にメンバーが作ってくれていたのでその後始末の処理を作った。&lt;a href="https://docs.gitlab.com/ee/api/container_registry.html">Container Registry API&lt;/a> を使うと、不要な docker image を削除できる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.gitlab.com/ee/api/container_registry.html#delete-registry-repository-tags-in-bulk">Delete registry repository tags in bulk&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>削除向けに便利な api 設計になっている。こういう細かい配慮は嬉しい。&lt;code>keep_n&lt;/code> で最低限残すイメージ数を指定して &lt;code>older_than&lt;/code> で過去何日より古いイメージを削除対象とするといったよくある運用の設定ができる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -s -H &lt;span style="color:#e6db74">&amp;#34;PRIVATE-TOKEN: &lt;/span>$PROJECT_ACCESS_TOKEN&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -X DELETE &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>endpoint&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --data &lt;span style="color:#e6db74">&amp;#34;name_regex_delete=.*&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --data &lt;span style="color:#e6db74">&amp;#34;keep_n=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>KEEP_N&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --data &lt;span style="color:#e6db74">&amp;#34;older_than=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>OLDER_THAN&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>あとは認証のトークンを指定する方法として私が調べた限りだと2通りある。&lt;/p>
&lt;ul>
&lt;li>(&lt;code>ci_job_token_scope&lt;/code> の feature flag を有効にして) &lt;code>$CI_JOB_TOKEN&lt;/code> を使う
&lt;ul>
&lt;li>こっちの方が一時トークンなのでよりセキュアなはず&lt;/li>
&lt;li>この場合はヘッダーに JOB-TOKEN を指定する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html">プロジェクトレベルのアクセストークン&lt;/a> を発行して ci/cd の variables に登録する
&lt;ul>
&lt;li>トークンが漏洩したときにプロジェクトレベルで被害が発生する&lt;/li>
&lt;li>この場合はヘッダーに PRIVATE-TOKEN を指定する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>使うトークンによってヘッダーが変わるというのがちょっと変な認証の設計にもみえるけど、まぁそれぐらいしか気にはならない。&lt;/p></content></item><item><title>echo のよさの1つはテストがやりやすい</title><link>/diary/posts/2022/1206/</link><pubDate>Tue, 06 Dec 2022 08:58:19 +0900</pubDate><guid>/diary/posts/2022/1206/</guid><description>にわかサッカーファンになって、20時頃に1-2時間寝て24時からワールドカップのクロアチア戦をみて3時に寝て8時に起きた。睡眠のリズムが完全に狂ってしまった。
echo のテストのやりやすさ うちのチームでは http フレームワークに echo を採用 している。その後、開発を継続していていくつか http ハンドラーも実装されてきた。そろそろ http ハンドラーのテストを書いていこうと参照実装を私が書いてみた。メンバーが知らないことは、マネージャーの私が参照実装して教えるといったやり方をしている。echo.HandlerFunc に echo.Context を渡すシンプルなインターフェースはテストを書くときに http ハンドラー以外の依存関係 (例えば db とのコネクションなど) を context を介することでモックと差し替えるのが容易になる。
tests := []struct { name string ctx echo.Context err *echo.HTTPError } { ... func() echo.Context { data := `{...}` c := newEchoContext(http.MethodPost, &amp;#34;/endpoint&amp;#34;, data) c.Set(&amp;#34;db&amp;#34;, &amp;amp;myMockDB{}) return c }(), ... } if err := myHTTPHandler(ctx); err != nil { ... } こんな感じで context にモックを入れてしまえば http ハンドラーそのものの単体テストを簡単に書ける。そんなことをツィートした。</description><content>&lt;p>にわかサッカーファンになって、20時頃に1-2時間寝て24時からワールドカップのクロアチア戦をみて3時に寝て8時に起きた。睡眠のリズムが完全に狂ってしまった。&lt;/p>
&lt;h2 id="echo-のテストのやりやすさ">echo のテストのやりやすさ&lt;/h2>
&lt;p>うちのチームでは http フレームワークに &lt;a href="/diary/diary/posts/2022/1122/#echo-を採用">echo を採用&lt;/a> している。その後、開発を継続していていくつか http ハンドラーも実装されてきた。そろそろ http ハンドラーのテストを書いていこうと参照実装を私が書いてみた。メンバーが知らないことは、マネージャーの私が参照実装して教えるといったやり方をしている。echo.HandlerFunc に echo.Context を渡すシンプルなインターフェースはテストを書くときに http ハンドラー以外の依存関係 (例えば db とのコネクションなど) を context を介することでモックと差し替えるのが容易になる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">tests&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">HTTPError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span>() &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">`{...}`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">newEchoContext&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">MethodPost&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/endpoint&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;db&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">myMockDB&lt;/span>{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">myHTTPHandler&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>こんな感じで context にモックを入れてしまえば http ハンドラーそのものの単体テストを簡単に書ける。そんなことをツィートした。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">その後 echo を採用して echo のよいところに1つ気付いた。echo.HandlerFunc に echo.Context を渡すインターフェースはテストがやりやすい。例えば、コンテキストで db のコネクションを保持しておけば、テストのときにモックに差し替えて http ハンドラーの単体テストを実装しやすい。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1600337204286746624?ref_src=twsrc%5Etfw">December 7, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>そしたら podhmo からレスをもらったので go のリクエストコンテキストの扱いについても議論した。&lt;/p>
&lt;ul>
&lt;li>リクエストスコープのものを context に入れるのは同意&lt;/li>
&lt;li>それ以外のスコープのものを context に入れるのは懸念がある
&lt;ul>
&lt;li>http ハンドラーのレイヤーとアプリケーションのレイヤーが明確に分かれているならまだ理解できる&lt;/li>
&lt;li>アプリケーションのレイヤーで context を自由に使うと依存関係や統制が取れなくなる
&lt;ul>
&lt;li>これは私も同意するところでアプリケーションのレイヤーにリクエストコンテキストを渡す必要はない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">&lt;a href="https://t.co/Yomdbyh1H0">https://t.co/Yomdbyh1H0&lt;/a>&lt;br>&lt;br>昔にこういう記事を書いてた。&lt;br>chiはルーティングライブラリと考えるとスムーズ。&lt;br>&lt;br>あとはnet/httpのミドルウェアを使いたいかechoなど専用のものを書くかの違いくらいかな。 &lt;a href="https://t.co/9LtoanpY0c">https://t.co/9LtoanpY0c&lt;/a>&lt;/p>&amp;mdash; po (@podhmo) &lt;a href="https://twitter.com/podhmo/status/1600338082242646016?ref_src=twsrc%5Etfw">December 7, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="オフィス住所の更新">オフィス住所の更新&lt;/h2>
&lt;p>引き続き、住所変更の手続きを時間をみつけてやっている。同じ銀行の住所変更の手続きでも PayPay 銀行と三菱 UFJ 銀行ではまったく異なる。前者はオンラインでアカウント情報を変更するだけで済んだ。簡単。一方で後者はオンラインではできず、来店予約をとって対面で行う。当日に登記事項証明書の原本をもってこいと。なんという面倒臭さ。よくよく考えたら法人の登記事項証明書は誰でも取得できる。行政のシステムがどうなっているか知らないが、銀行が法人の住所変更を自分たちで調べることもやろうと思えばできるはず。登記事項証明書をオンラインで取得する手数料は500円になる。来店予約すると応対する人の人件費を考えたらシステムの手数料を支払った方が安いのではないか。&lt;/p>
&lt;p>国税庁の管轄ではあるが、&lt;a href="https://www.houjin-bangou.nta.go.jp/">国税庁法人番号公表サイト&lt;/a> から法人の住所変更そのものは確認できる。これは e-tax で次の2つの書類を申請した。登記事項証明書がなくても申請はできた。なにも言ってこなければ問題ないのかな？&lt;/p>
&lt;ul>
&lt;li>異動届&lt;/li>
&lt;li>給与支払事務所等の開設・移転・廃止の届出&lt;/li>
&lt;/ul>
&lt;p>有償にはなるが &lt;a href="https://www1.touki.or.jp/night.html">登記情報提供サービス&lt;/a> というのがあって登記情報をオンラインで確認できる。このサービスを会社で契約していればいつでも確認できるはず？&lt;/p></content></item><item><title>法人登記変更申請にもの思い</title><link>/diary/posts/2022/1205/</link><pubDate>Mon, 05 Dec 2022 14:29:09 +0900</pubDate><guid>/diary/posts/2022/1205/</guid><description>4時に寝て8時に起きた。3時過ぎまでオフィスの片付けなどをやっていた。貧乏暇なし。
年金事務所でヒアリング 8時半から住所変更のために年金事務所に立ち寄る。会社の住所変更をすると行政機関にその申請をしないといけないが、年金事務所がもっとも短くて移転後5日以内となっている。行ってみたら登記事項証明書のコピーがないと手続きをできないという。すべてに先立って法人登記の変更申請が必要なことがわかった。法人登記の変更申請に1週間かかるのでその時点でこの手続きは無理だとわかった。行政のバグの1つかもしれない。
法務局で法人登記の変更申請 以前、電子公告の変更で法人登記の変更申請をやったことがあったので手続きの雰囲気を理解していた。お昼休みを兼ねて法務局へ住所変更の申請に行く。合同会社の法人登記の変更申請は次のリンクにある。
３　商号・目的の変更，本店移転 しかし、このリンクを辿ると、3つの記載例がある。
3-4 合同会社変更登記申請書（商号の変更及び目的の変更）【R4.11.11更新】
3-5 合同会社本店移転登記申請書（管轄内移転）【R4.9.20更新】
3-6 合同会社本店移転登記申請書（管轄外移転）【R4.9.20更新】
ここで私が慌てていて 3-4 の「商号の変更及び目的の変更」の記載例しか目に入ってなくてその内容を確認して申請書類を作って提出してきた。後日、担当者から決定書が必要ですと電話がかかってきた。私が参考にしないといけない記載例は 3-5 の「管轄内移転」の方だった。たしかにその書類には決定書が含まれていた。3-4 にはそれが不要だったので申請書類から漏れた。後日、決定書を再作成して法務局へ再申請に行ってきた。申請自体は15分もあれば終わる作業だけど、1度で終わらせる手続きを済ませられなかったという自分の不甲斐なさにショックを受けた。余裕をもって周りの観察が大事という話し。
初めての会社のオフィス移転で学ぶことも多かった。申請には「原因年月日」を記述できるので予め前もって登記変更の申請を行うことはできないのだろうか？移転後2週間以内に申請する必要があると書かれた記事を読んでいたので私は引っ越し後にしか申請できないと思い込んでいた。
また定款の記載内容によってはオフィス移転で定款変更も必要になる可能性がある。定款の変更には同意書が必要なため、さらに申請書類が増える。うちの会社の定款の条項は次になる。
(本店所在地) 第3条 当会社は、本店を神戸市に置く。
定款の本店所在地は市町村まで構わない。神戸市内で引っ越しする分にはうちの会社は定款変更を必要としない。おそらく会社を設立するときにオフィスがまだ決まっていなかったからそうしたのかもしれない。私が意図して定款の本店所在地を決めたわけではない気もする。freee 経由で定款作成代理人がよしなに作ってくれたようだ。感謝。
さらにたまたま申請する直前にオフィスの掲示板で来月からビル名が変わりますという掲示をみつけた。登記変更の申請を知らない人向けにこの手続きはどんな内容であろうが申請に手数料が3万円かかる。ビル名が変わったらその都度3万円支払う必要がある。少し調べてみると、新しいオフィスのビル名が変わるのは3度目でどうもそういう傾向のあるビルにみえる。これは4度目もありそうだ。登記の住所についてさらに調べてみると、法律上は番地まで記載すればよくてビル名を登記に含める義務はないという。今回の登記変更の申請にはビル名を含めず番地までとした。これで未来に4度目のビル名の変更があっても登記変更を申請しなくて済む。たまたま申請前にオフィスの掲示板を眺めて気付いたことで登記の住所の仕様を学ぶことができた。周りの観察は大事という話し。</description><content>&lt;p>4時に寝て8時に起きた。3時過ぎまでオフィスの片付けなどをやっていた。貧乏暇なし。&lt;/p>
&lt;h2 id="年金事務所でヒアリング">年金事務所でヒアリング&lt;/h2>
&lt;p>8時半から住所変更のために年金事務所に立ち寄る。会社の住所変更をすると行政機関にその申請をしないといけないが、年金事務所がもっとも短くて移転後5日以内となっている。行ってみたら登記事項証明書のコピーがないと手続きをできないという。すべてに先立って法人登記の変更申請が必要なことがわかった。法人登記の変更申請に1週間かかるのでその時点でこの手続きは無理だとわかった。行政のバグの1つかもしれない。&lt;/p>
&lt;h2 id="法務局で法人登記の変更申請">法務局で法人登記の変更申請&lt;/h2>
&lt;p>以前、電子公告の変更で法人登記の変更申請をやったことがあったので手続きの雰囲気を理解していた。お昼休みを兼ねて法務局へ住所変更の申請に行く。合同会社の法人登記の変更申請は次のリンクにある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://houmukyoku.moj.go.jp/homu/COMMERCE_11-1.html#3-3">３　商号・目的の変更，本店移転&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>しかし、このリンクを辿ると、3つの記載例がある。&lt;/p>
&lt;blockquote>
&lt;p>3-4 合同会社変更登記申請書（商号の変更及び目的の変更）【R4.11.11更新】&lt;/p>
&lt;p>3-5 合同会社本店移転登記申請書（管轄内移転）【R4.9.20更新】&lt;/p>
&lt;p>3-6 合同会社本店移転登記申請書（管轄外移転）【R4.9.20更新】&lt;/p>
&lt;/blockquote>
&lt;p>ここで私が慌てていて 3-4 の「商号の変更及び目的の変更」の記載例しか目に入ってなくてその内容を確認して申請書類を作って提出してきた。後日、担当者から決定書が必要ですと電話がかかってきた。私が参考にしないといけない記載例は 3-5 の「管轄内移転」の方だった。たしかにその書類には決定書が含まれていた。3-4 にはそれが不要だったので申請書類から漏れた。後日、決定書を再作成して法務局へ再申請に行ってきた。申請自体は15分もあれば終わる作業だけど、1度で終わらせる手続きを済ませられなかったという自分の不甲斐なさにショックを受けた。余裕をもって周りの観察が大事という話し。&lt;/p>
&lt;p>初めての会社のオフィス移転で学ぶことも多かった。申請には「原因年月日」を記述できるので予め前もって登記変更の申請を行うことはできないのだろうか？移転後2週間以内に申請する必要があると書かれた記事を読んでいたので私は引っ越し後にしか申請できないと思い込んでいた。&lt;/p>
&lt;p>また定款の記載内容によってはオフィス移転で定款変更も必要になる可能性がある。定款の変更には同意書が必要なため、さらに申請書類が増える。うちの会社の定款の条項は次になる。&lt;/p>
&lt;blockquote>
&lt;p>(本店所在地)
第3条 当会社は、本店を神戸市に置く。&lt;/p>
&lt;/blockquote>
&lt;p>定款の本店所在地は市町村まで構わない。神戸市内で引っ越しする分にはうちの会社は定款変更を必要としない。おそらく会社を設立するときにオフィスがまだ決まっていなかったからそうしたのかもしれない。私が意図して定款の本店所在地を決めたわけではない気もする。freee 経由で定款作成代理人がよしなに作ってくれたようだ。感謝。&lt;/p>
&lt;p>さらにたまたま申請する直前にオフィスの掲示板で来月からビル名が変わりますという掲示をみつけた。登記変更の申請を知らない人向けにこの手続きはどんな内容であろうが申請に手数料が3万円かかる。ビル名が変わったらその都度3万円支払う必要がある。少し調べてみると、新しいオフィスのビル名が変わるのは3度目でどうもそういう傾向のあるビルにみえる。これは4度目もありそうだ。登記の住所についてさらに調べてみると、法律上は番地まで記載すればよくてビル名を登記に含める義務はないという。今回の登記変更の申請にはビル名を含めず番地までとした。これで未来に4度目のビル名の変更があっても登記変更を申請しなくて済む。たまたま申請前にオフィスの掲示板を眺めて気付いたことで登記の住所の仕様を学ぶことができた。周りの観察は大事という話し。&lt;/p></content></item><item><title>掃除は respect を表現している</title><link>/diary/posts/2022/1204/</link><pubDate>Sun, 04 Dec 2022 13:51:59 +0900</pubDate><guid>/diary/posts/2022/1204/</guid><description>22時に寝て1時に起きて吐き気がして苦しんでた。その後、寝て1度起きて7時半に起きた。寒くなってきたせいか、疲労のせいか、なんとなく体調が悪い。今日も掃除したり荷解きの片付けやったりしていた。
退去するオフィスの掃除 ワールドカップが盛り上がっているので関連するニュースを読んでいるうちにサポーターだけじゃなく、選手もロッカールームをきれいに掃除して退出しているニュースをみかけた。
FIFA公式が日本代表のマナーを絶賛　ピカピカ更衣室に「ドウモ アリガトウ」 日本では小学校の頃から自分たちの活動の場を自分たちで掃除するという習慣が当たり前のように教育されている。その延長で自分たちが使った場所は掃除して帰るといった価値観が一般的に定着しているように思う。掃除するお仕事を奪っているという批判も、掃除はボランティアがやっている、ボランティアと言っても有償ではある、有償といっても歩合制でお金をもらっているわけではないでしょうとか。さまざまな意見がある。批判を認めないわけではないが、私も掃除をすることは正義の1つだと最近思うようになってきた。12月3日に引っ越しするのに12月4日 (予備日) まで借りていた理由はとくになかったのだけど、オフィスを掃除するためだったんだなと後付けの理由ができた。朝から掃除機をオフィスへ運んで掃除してきた。
This isn&amp;rsquo;t just a clean dressing room, it&amp;rsquo;s a clear demonstration of values.
It&amp;rsquo;s a statement about respect, gratitude and attention to detail.
The small things are the biggest indicator of the big things - your values.
https://www.linkedin.com/posts/stevenbartlett-123_this-is-how-the-japanese-mens-team-left-activity-7001499750009044992-qpeU/
たまたまねとらぼの記事を読んだ後に linkedin の投稿もみかけた。日本人は掃除に respect なんか感じたことはないかもしれないけど、外からみるとそういった振る舞いの1つにみえるんだという気付きにはなった。やっぱり掃除は正義やね。</description><content>&lt;p>22時に寝て1時に起きて吐き気がして苦しんでた。その後、寝て1度起きて7時半に起きた。寒くなってきたせいか、疲労のせいか、なんとなく体調が悪い。今日も掃除したり荷解きの片付けやったりしていた。&lt;/p>
&lt;h2 id="退去するオフィスの掃除">退去するオフィスの掃除&lt;/h2>
&lt;p>ワールドカップが盛り上がっているので関連するニュースを読んでいるうちにサポーターだけじゃなく、選手もロッカールームをきれいに掃除して退出しているニュースをみかけた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://nlab.itmedia.co.jp/nl/articles/2211/24/news123.html">FIFA公式が日本代表のマナーを絶賛　ピカピカ更衣室に「ドウモ アリガトウ」&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>日本では小学校の頃から自分たちの活動の場を自分たちで掃除するという習慣が当たり前のように教育されている。その延長で自分たちが使った場所は掃除して帰るといった価値観が一般的に定着しているように思う。掃除するお仕事を奪っているという批判も、掃除はボランティアがやっている、ボランティアと言っても有償ではある、有償といっても歩合制でお金をもらっているわけではないでしょうとか。さまざまな意見がある。批判を認めないわけではないが、私も掃除をすることは正義の1つだと最近思うようになってきた。12月3日に引っ越しするのに12月4日 (予備日) まで借りていた理由はとくになかったのだけど、オフィスを掃除するためだったんだなと後付けの理由ができた。朝から掃除機をオフィスへ運んで掃除してきた。&lt;/p>
&lt;blockquote>
&lt;p>This isn&amp;rsquo;t just a clean dressing room, it&amp;rsquo;s a clear demonstration of values.&lt;/p>
&lt;p>It&amp;rsquo;s a statement about respect, gratitude and attention to detail.&lt;/p>
&lt;p>The small things are the biggest indicator of the big things - your values.&lt;/p>
&lt;p>&lt;a href="https://www.linkedin.com/posts/stevenbartlett-123_this-is-how-the-japanese-mens-team-left-activity-7001499750009044992-qpeU/">https://www.linkedin.com/posts/stevenbartlett-123_this-is-how-the-japanese-mens-team-left-activity-7001499750009044992-qpeU/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>たまたまねとらぼの記事を読んだ後に linkedin の投稿もみかけた。日本人は掃除に respect なんか感じたことはないかもしれないけど、外からみるとそういった振る舞いの1つにみえるんだという気付きにはなった。やっぱり掃除は正義やね。&lt;/p></content></item><item><title>オフィスの引っ越し</title><link>/diary/posts/2022/1203/</link><pubDate>Sat, 03 Dec 2022 12:42:40 +0900</pubDate><guid>/diary/posts/2022/1203/</guid><description>3時に寝て8時に起きた。疲労困憊だけど、今日を乗り切ればよい。9時から荷造りの続き。昨日の深夜に大半の荷造りを終えていたので2時間ほどで終えて軽く掃除したりしていた。
引っ越し 14時から レントラ便 さんにお願いしていた。13時25分にレントラ便の担当者から電話がかかってきてオフィスに到着したとのこと。私もすでに準備出来ていたのですぐやりましょうということで搬出作業が始まった。作業員として1名しかお願いしてなかったが、先方の担当者は2名いたので荷物の搬出がその分楽になった。だいたい30分ぐらいで搬出作業が終わった。新しいオフィスに移動して14時から搬入作業を開始した。搬入作業はだいたい20分ぐらいで終わった。出すよりも入れる方が速かったのは、バンに荷物を積み込むときにスペース効率を考えながら配置する必要がないからだろう。時間に余裕があったので追加で新しいオフィスにある椅子を保管するために家まで運んでもらった。オフィスの椅子はアーロンチェアを使っているので備え付けの椅子はいらない。それが終わったのが14時25分だった。そこで事務手続きして完了とした。荷物の移動も含めて約1時間で引っ越し作業を終えた。本当は14-16時で依頼していたが、早く始めて想定したよりも早く完了していいこと尽くめだった。また次回があればレントラ便さんにしようと思う。その後、荷解きしながらぼちぼち片付けをしていた。
ストレッチ 19時半からストレッチ。先週の田んぼ作業 でスクワットに近い運動をたくさんやったので月曜日や火曜日はひどい筋肉痛になっていた。水曜日以降はましになったが、若干の違和感も残っていた。今日の開脚幅は開始前144cmで、ストレッチ後150cmだった。疲労と筋肉痛でまったくいつも通りにはいかなかった。お腹つったり足裏つったりしてた。トレーナーさんが言うには筋肉痛のときは普段のストレッチをあまりやるよりも筋肉をほぐすようなストレッチをした方が早く回復するみたいな話しをされていた気がする。あとはワールドカップの話などをしていた。</description><content>&lt;p>3時に寝て8時に起きた。疲労困憊だけど、今日を乗り切ればよい。9時から荷造りの続き。昨日の深夜に大半の荷造りを終えていたので2時間ほどで終えて軽く掃除したりしていた。&lt;/p>
&lt;h2 id="引っ越し">引っ越し&lt;/h2>
&lt;p>14時から &lt;a href="https://rentora.com/">レントラ便&lt;/a> さんにお願いしていた。13時25分にレントラ便の担当者から電話がかかってきてオフィスに到着したとのこと。私もすでに準備出来ていたのですぐやりましょうということで搬出作業が始まった。作業員として1名しかお願いしてなかったが、先方の担当者は2名いたので荷物の搬出がその分楽になった。だいたい30分ぐらいで搬出作業が終わった。新しいオフィスに移動して14時から搬入作業を開始した。搬入作業はだいたい20分ぐらいで終わった。出すよりも入れる方が速かったのは、バンに荷物を積み込むときにスペース効率を考えながら配置する必要がないからだろう。時間に余裕があったので追加で新しいオフィスにある椅子を保管するために家まで運んでもらった。オフィスの椅子はアーロンチェアを使っているので備え付けの椅子はいらない。それが終わったのが14時25分だった。そこで事務手続きして完了とした。荷物の移動も含めて約1時間で引っ越し作業を終えた。本当は14-16時で依頼していたが、早く始めて想定したよりも早く完了していいこと尽くめだった。また次回があればレントラ便さんにしようと思う。その後、荷解きしながらぼちぼち片付けをしていた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>19時半からストレッチ。&lt;a href="/diary/diary/posts/2022/1127/#玉ねぎを植える準備">先週の田んぼ作業&lt;/a> でスクワットに近い運動をたくさんやったので月曜日や火曜日はひどい筋肉痛になっていた。水曜日以降はましになったが、若干の違和感も残っていた。今日の開脚幅は開始前144cmで、ストレッチ後150cmだった。疲労と筋肉痛でまったくいつも通りにはいかなかった。お腹つったり足裏つったりしてた。トレーナーさんが言うには筋肉痛のときは普段のストレッチをあまりやるよりも筋肉をほぐすようなストレッチをした方が早く回復するみたいな話しをされていた気がする。あとはワールドカップの話などをしていた。&lt;/p></content></item><item><title>クリーンアーキテクチャを勉強し直したい</title><link>/diary/posts/2022/1202/</link><pubDate>Fri, 02 Dec 2022 10:59:23 +0900</pubDate><guid>/diary/posts/2022/1202/</guid><description>0時に寝て5時前に起きたらサッカーやってて最後の10分ほどみた。まさかスペインに勝つと思ってなかったから驚いた。
アーキテクチャと設計 退職したメンバー がドメイン駆動開発 (DDD) とクリーンアーキテクチャから既存のアーキテクチャを構成したというドキュメントを残してくれた。そのドキュメントを読みながら、説明の粗いところや足りないところを私が補って加筆し、既存のコードを読みながら誤っているところなどをリファクタリングしたりしていた。あとアーキテクチャや設計のドキュメントを書く上で図がないのはよくない。現代の開発は分割統治の概念で設計されていて、そこで扱う本質的複雑さは依存関係になる。誤解を恐れずに言えば、現代の開発のアーキテクチャは依存関係をどう管理するかの基本的な考え方に過ぎない。依存関係の向きが分かるので図があった方が圧倒的にわかりやすい。一方で私自身もクリーンアーキテクチャにそう明るくない。もう少し勉強し直す必要があることは感じた。クリーンアーキテクチャ勉強会もやっていいようにも思う。
課題管理 + イテレーション開発とスクラム開発の勉強会 今週ずっと朝起きたら2-3時間かけて資料を作り続けてきた。前回は時間が余ったので今回は余らないよう、最終的には43枚のスライドになった。
スクラム事前知識 スクラムガイド 課題管理+イテレーション開発とスクラム開発との比較 スクラムマスター 会議体とツール 分析・計測 スクラムの是非 まとめ 話してみたら1時間を10分ほどオーバーした。勉強会で1時間話すネタを調整をするのは難しい。毎月出張でオフィスへ行くときは課題管理に関する勉強会を行う。課題管理や開発方法論の話しを聞いてくれる人たちがいるというだけでありがたい。5日前から準備を始めて資料作りの時間が少なかったので細部の調査はあまりできていないし、構成も荒くて練れていない。もう2-3ヶ月かけて細部の調査や理論武装をしたらよいコンテンツになるかもしれない。イテレーション開発とスクラム開発を比較するときの叩き台として寝かしておく。
オフィスの引越しの荷造り 神戸に戻ってきて一旦家に帰って晩ご飯を食べて一息ついて、23時過ぎから引越しのための荷造りを始めた。大きい家電や電子機器は購入時の箱を置いておくと引越しのときの荷造りが楽になる。言うても一部屋の荷物なんで本気出せばすぐ終わる程度の量。3時間ほど荷造りやって8割ぐらいできたところで今日の作業は終えた。出張と移動で疲労は積み重なってきた。</description><content>&lt;p>0時に寝て5時前に起きたらサッカーやってて最後の10分ほどみた。まさかスペインに勝つと思ってなかったから驚いた。&lt;/p>
&lt;h2 id="アーキテクチャと設計">アーキテクチャと設計&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/1130/#メンバーの送別会">退職したメンバー&lt;/a> がドメイン駆動開発 (DDD) とクリーンアーキテクチャから既存のアーキテクチャを構成したというドキュメントを残してくれた。そのドキュメントを読みながら、説明の粗いところや足りないところを私が補って加筆し、既存のコードを読みながら誤っているところなどをリファクタリングしたりしていた。あとアーキテクチャや設計のドキュメントを書く上で図がないのはよくない。現代の開発は分割統治の概念で設計されていて、そこで扱う本質的複雑さは依存関係になる。誤解を恐れずに言えば、現代の開発のアーキテクチャは依存関係をどう管理するかの基本的な考え方に過ぎない。依存関係の向きが分かるので図があった方が圧倒的にわかりやすい。一方で私自身もクリーンアーキテクチャにそう明るくない。もう少し勉強し直す必要があることは感じた。クリーンアーキテクチャ勉強会もやっていいようにも思う。&lt;/p>
&lt;h2 id="課題管理--イテレーション開発とスクラム開発の勉強会">課題管理 + イテレーション開発とスクラム開発の勉強会&lt;/h2>
&lt;p>今週ずっと朝起きたら2-3時間かけて資料を作り続けてきた。前回は時間が余ったので今回は余らないよう、最終的には43枚のスライドになった。&lt;/p>
&lt;ul>
&lt;li>スクラム事前知識&lt;/li>
&lt;li>スクラムガイド&lt;/li>
&lt;li>課題管理+イテレーション開発とスクラム開発との比較&lt;/li>
&lt;li>スクラムマスター&lt;/li>
&lt;li>会議体とツール&lt;/li>
&lt;li>分析・計測&lt;/li>
&lt;li>スクラムの是非&lt;/li>
&lt;li>まとめ&lt;/li>
&lt;/ul>
&lt;p>話してみたら1時間を10分ほどオーバーした。勉強会で1時間話すネタを調整をするのは難しい。毎月出張でオフィスへ行くときは課題管理に関する勉強会を行う。課題管理や開発方法論の話しを聞いてくれる人たちがいるというだけでありがたい。5日前から準備を始めて資料作りの時間が少なかったので細部の調査はあまりできていないし、構成も荒くて練れていない。もう2-3ヶ月かけて細部の調査や理論武装をしたらよいコンテンツになるかもしれない。イテレーション開発とスクラム開発を比較するときの叩き台として寝かしておく。&lt;/p>
&lt;h2 id="オフィスの引越しの荷造り">オフィスの引越しの荷造り&lt;/h2>
&lt;p>神戸に戻ってきて一旦家に帰って晩ご飯を食べて一息ついて、23時過ぎから引越しのための荷造りを始めた。大きい家電や電子機器は購入時の箱を置いておくと引越しのときの荷造りが楽になる。言うても一部屋の荷物なんで本気出せばすぐ終わる程度の量。3時間ほど荷造りやって8割ぐらいできたところで今日の作業は終えた。出張と移動で疲労は積み重なってきた。&lt;/p></content></item><item><title>近況報告</title><link>/diary/posts/2022/1201/</link><pubDate>Thu, 01 Dec 2022 11:00:05 +0900</pubDate><guid>/diary/posts/2022/1201/</guid><description>23時に寝て何度か起きて7時に起きた。朝から近況報告のための資料を作ってた。
プロジェクトの近況報告 お手伝い先の経営者の方々と、この1ヶ月で私がやったこと、開発の進捗、今後の展望などを打ち合わせした。組織のことも業務のこともわかっていないマネージャーがやってきて開発プロジェクトを仕切ることになったのが1ヶ月前。そんな簡単に成果を出せるわけがないがないと考えているため、私の所感としてはぎりぎりの及第点といったところかな。開発体制を構築し、4つのイテレーションから成る1ヶ月というマイルストーンを設け、その最初のサイクルがまわって、メンバーもどういった働き方を私が求めているか理解できたと思う。毎週の勉強会を設けて知識やスキルをチームで共有することの大切さも啓蒙している。嬉しいことにチーム外からも参加者がいる。ここからはこのワークフローを最適化していくだけ。その下地を作った1ヶ月だった。先方からも開発のプロがやるマネジメントから学ぶことも多いといったコメントをもらえた。1on1 も節目のタイミングでしかやっていなかったらしく毎週1on1をやっているのはよさそうといった話題も出た。一方で目標としている時期にこのプロダクトは何ができるのかわからないから次回はそれを明確にしてほしいといった要望もいただいた。この1ヶ月の私の課題として対応していきたい。</description><content>&lt;p>23時に寝て何度か起きて7時に起きた。朝から近況報告のための資料を作ってた。&lt;/p>
&lt;h2 id="プロジェクトの近況報告">プロジェクトの近況報告&lt;/h2>
&lt;p>お手伝い先の経営者の方々と、この1ヶ月で私がやったこと、開発の進捗、今後の展望などを打ち合わせした。組織のことも業務のこともわかっていないマネージャーがやってきて開発プロジェクトを仕切ることになったのが1ヶ月前。そんな簡単に成果を出せるわけがないがないと考えているため、私の所感としてはぎりぎりの及第点といったところかな。開発体制を構築し、4つのイテレーションから成る1ヶ月というマイルストーンを設け、その最初のサイクルがまわって、メンバーもどういった働き方を私が求めているか理解できたと思う。毎週の勉強会を設けて知識やスキルをチームで共有することの大切さも啓蒙している。嬉しいことにチーム外からも参加者がいる。ここからはこのワークフローを最適化していくだけ。その下地を作った1ヶ月だった。先方からも開発のプロがやるマネジメントから学ぶことも多いといったコメントをもらえた。1on1 も節目のタイミングでしかやっていなかったらしく毎週1on1をやっているのはよさそうといった話題も出た。一方で目標としている時期にこのプロダクトは何ができるのかわからないから次回はそれを明確にしてほしいといった要望もいただいた。この1ヶ月の私の課題として対応していきたい。&lt;/p></content></item></channel></rss>