<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2022/08 on forest nook</title><link>/diary/dates/2022/08/</link><description>Recent content in 2022/08 on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/dates/2022/08/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes Clients のサンプル実装</title><link>/diary/posts/2022/0806/</link><pubDate>Sat, 06 Aug 2022 09:48:41 +0900</pubDate><guid>/diary/posts/2022/0806/</guid><description>23時に寝て7時半に起きた。夜中も2回ぐらい起きる。暑さでまいってきた。
ストレッチ 今日の開脚幅は開始前159cmで、ストレッチ後162cmだった。数字は悪くない。いつもはストレッチを受けていると疲労しているところが伸びることで体が軽くなっていく感覚があるのだけど、今日は体全体がだるくてストレッチを受けていてもなんかしんどいなぁとだるさを感じていた。コロナに感染してないと思うけど、夏バテの状態をそのままストレッチにも持ち込んだような感覚があった。腰の張りや肩甲骨の硬さなどが少し気になったかな。トレーナーさんには立ったときの姿勢が少し前よりで重心のバランスがよくないといったアドバイスをされた。とくにどこが悪いというわけでもないのになんかしんどい。
Kubernetes Clients のサンプル実装 Kubernetes Clients の調査 の続き。java クライアントを使って minikube でいくつか動かしてみた。openapi で生成した rest api クライントが提供されている。デフォルト設定でも minikube で普通に動いたのでおそらく裏で $HOME/.kube/config をみたり /var/run/secrets/kubernetes.io/serviceaccount/token を読み込んで認証ヘッダーに設定してくれたりするのだと推測する。
public ApiClient getKubernetesClient() throws IOException { var client = Config.defaultClient(); io.kubernetes.client.openapi.Configuration.setDefaultApiClient(client); return client; } このクライアントを使って java/kubernetes/docs/ 配下にある api インスタンスを生成する。例えば、cronjob や job を扱うならば BatchV1Api というドキュメントがある。BatchApi だけでも3つのドキュメントがあるのでちょっとやり過ぎな気もする。
BatchApi.md BatchV1Api.md BatchV1beta1Api.md kubectl コマンドで使う cronjob から手動で job を設定するのを実装してみる。
$ kubectl create job --from=cronjob/my-schedule-job my-manual-job 細かい設定はちゃんと調べないといけないけど、一応はこれで動いた。cronjob のオブジェクトを取得して job のオブジェクトを生成して create するだけ。
var api = new BatchV1Api(this.</description><content>&lt;p>23時に寝て7時半に起きた。夜中も2回ぐらい起きる。暑さでまいってきた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前159cmで、ストレッチ後162cmだった。数字は悪くない。いつもはストレッチを受けていると疲労しているところが伸びることで体が軽くなっていく感覚があるのだけど、今日は体全体がだるくてストレッチを受けていてもなんかしんどいなぁとだるさを感じていた。コロナに感染してないと思うけど、夏バテの状態をそのままストレッチにも持ち込んだような感覚があった。腰の張りや肩甲骨の硬さなどが少し気になったかな。トレーナーさんには立ったときの姿勢が少し前よりで重心のバランスがよくないといったアドバイスをされた。とくにどこが悪いというわけでもないのになんかしんどい。&lt;/p>
&lt;h2 id="kubernetes-clients-のサンプル実装">Kubernetes Clients のサンプル実装&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0804/">Kubernetes Clients の調査&lt;/a> の続き。java クライアントを使って minikube でいくつか動かしてみた。openapi で生成した rest api クライントが提供されている。デフォルト設定でも minikube で普通に動いたのでおそらく裏で &lt;code>$HOME/.kube/config&lt;/code> をみたり &lt;code>/var/run/secrets/kubernetes.io/serviceaccount/token&lt;/code> を読み込んで認証ヘッダーに設定してくれたりするのだと推測する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> ApiClient &lt;span style="color:#a6e22e">getKubernetesClient&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#66d9ef">throws&lt;/span> IOException &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var client &lt;span style="color:#f92672">=&lt;/span> Config&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">defaultClient&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">kubernetes&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">client&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">openapi&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Configuration&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setDefaultApiClient&lt;/span>&lt;span style="color:#f92672">(&lt;/span>client&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> client&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このクライアントを使って &lt;a href="https://github.com/kubernetes-client/java/tree/master/kubernetes/docs">java/kubernetes/docs/&lt;/a> 配下にある api インスタンスを生成する。例えば、cronjob や job を扱うならば &lt;code>BatchV1Api&lt;/code> というドキュメントがある。BatchApi だけでも3つのドキュメントがあるのでちょっとやり過ぎな気もする。&lt;/p>
&lt;ul>
&lt;li>BatchApi.md&lt;/li>
&lt;li>BatchV1Api.md&lt;/li>
&lt;li>BatchV1beta1Api.md&lt;/li>
&lt;/ul>
&lt;p>kubectl コマンドで使う cronjob から手動で job を設定するのを実装してみる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kubectl create job --from&lt;span style="color:#f92672">=&lt;/span>cronjob/my-schedule-job my-manual-job
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>細かい設定はちゃんと調べないといけないけど、一応はこれで動いた。cronjob のオブジェクトを取得して job のオブジェクトを生成して create するだけ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>var api &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> BatchV1Api&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getKubernetesClient&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var cronJob &lt;span style="color:#f92672">=&lt;/span> api&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">readNamespacedCronJob&lt;/span>&lt;span style="color:#f92672">(&lt;/span>cronJobName&lt;span style="color:#f92672">,&lt;/span> NAMESPACE_DEFAULT&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var ann &lt;span style="color:#f92672">=&lt;/span> Map&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">of&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;cronjob.kubernetes.io/instantiate&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;manual&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var metadata &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> V1ObjectMeta&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">(&lt;/span>newJobName&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">annotations&lt;/span>&lt;span style="color:#f92672">(&lt;/span>ann&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var spec &lt;span style="color:#f92672">=&lt;/span> cronJob&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getSpec&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">getJobTemplate&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">getSpec&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setTtlSecondsAfterFinished&lt;/span>&lt;span style="color:#f92672">(&lt;/span>10&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var job &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> V1Job&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">apiVersion&lt;/span>&lt;span style="color:#f92672">(&lt;/span>cronJob&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getApiVersion&lt;/span>&lt;span style="color:#f92672">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">kind&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Job&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">spec&lt;/span>&lt;span style="color:#f92672">(&lt;/span>cronJob&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getSpec&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">getJobTemplate&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">getSpec&lt;/span>&lt;span style="color:#f92672">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">metadata&lt;/span>&lt;span style="color:#f92672">(&lt;/span>metadata&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var result &lt;span style="color:#f92672">=&lt;/span> api&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">createNamespacedJob&lt;/span>&lt;span style="color:#f92672">(&lt;/span>NAMESPACE_DEFAULT&lt;span style="color:#f92672">,&lt;/span> job&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>手動で作成した job の pod は終了後にゴミとして残ってしまうので ttl を設定すれば自動的に削除できることに気付いた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>spec&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setTtlSecondsAfterFinished&lt;/span>&lt;span style="color:#f92672">(&lt;/span>10&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>k8s クラスターの内部、つまり pod 内からリクエストするには &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#service-account-permissions">ServiceAccount permissions&lt;/a> を適切に設定しないといけない。ひとまずローカルの minikube で super user 権限にしたらリクエストはできた。実運用では適切なロールを定義して適切に権限設定しないといけない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl create clusterrolebinding serviceaccounts-cluster-admin &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --clusterrole&lt;span style="color:#f92672">=&lt;/span>cluster-admin &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --group&lt;span style="color:#f92672">=&lt;/span>system:serviceaccounts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>会議だらけの1日</title><link>/diary/posts/2022/0805/</link><pubDate>Fri, 05 Aug 2022 08:09:38 +0900</pubDate><guid>/diary/posts/2022/0805/</guid><description>0時に寝て6時に起きた。夜中に暑さと気分の悪さで起きるのが常態化してきた。今日は珍しく4つの会議が重なって喋りつくして後半バテた。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。前隔週を1回飛ばしたので話題がたくさんあった。
スクラムの話題 もてなしだけではもう食えない -ホテル経営学の本質と実践- 起業プラザひょうごさんの内覧 もう1年近くスクラムをやっているのでスクラムの弱点や欠点なども少しずつみえてきた。しかし、はらさんと話していると、はらさんが実践してきたスクラムと私がやっているスクラムにはいくつか違いがある。同じスクラムというガイドに沿っていても、実際は組織やプロジェクトの内容によって大きな乖離が生じるというのも事実のように思える。プロジェクトのサービスインに伴い、大きなふりかえりやストーリーポイント運用の見直しを経てわかったことを雑談しながら理解を深めた。主には次の3つにまとめられる。
スクラムマスターの限界 スクラムと心理的安全性 ストーリーポイントという信仰 PO でも開発者でもないスクラムマスターはプロジェクトが経過する時間とともに貢献度が減っていく。ヒト・モノ・カネ・情報というプロジェクトのリソースのうち、もっとも変動するのは間違いなくヒトである。プロジェクトの初期とマイルストーンの区切りにおいてヒトだけが経験を経て大きく成長する。成長しないヒトがいるとすれば、それはそのヒトがさぼっているか、プロジェクトにマッチングしていないと言える。普通のプロジェクトマネジメントにおいて成長しないメンバーなど存在しない。大きなふりかえりによって、驚いたことにスクラムマスターだけがそうじゃなかった。安西先生の言葉を借りるとこうだった。
まるで成長していない ………
PO も開発者も日々の業務からドメイン知識を深めていき、大きく成長しているのに「ただ観ていただけ」のスクラムマスターは全くメンバーの話しについてこれていない。それが上辺だけの浅いふりかえりで終わり、総括はおろか、今後の改善の施策もまとめられないという結果になった。ファシリテーションをスクラムマスターが担っているからそうなってしまう。また過度に感情に配慮したふりかえりをするとネガティブな事実や結果を直視しようとしない。関係する誰かが責任を感じたり嫌な思いをさせる可能性はあるが、それらを認めないと次の改善の施策をたてられない。これは日本の会社ではよく起こることに思える。うちのチームは仲が良いだけのぬるま湯チームになっていてゾンビスクラムにも近付きつつある。
もう1つ、スクラムをやらなくてもよい背景の1つとして、チケット駆動開発と業務のワークフロー最適化の話題をつぶやいてみた。
チケット駆動開発の優れているところの1つとして、課題管理システムを中核にして業務のワークフローを明確化できるところにある。業務の始まりから終わりまではどんな会社でも何らかのワークフローがあって、その手順をメンバーが理解することで業務というものが成立する。
&amp;mdash; Tetsuya Morimoto (@t2y) August 5, 2022 神戸市さんと雑談 Kobe x Engineer&amp;rsquo;s Lab という取り組みを担当されている職員さんとその運営会社の担当者と面談した。前から三宮.devのすみよしさんから話しを聞いていたので、そのつてで面談の依頼がきたと思っていたら、全然違う知人からの紹介だったので驚いた。ざっくばらんにエンジニア不足の社会問題の解決のために「神戸市として」どんな施策があるか、コミュニティはどう運営すればいいか、これまでに彼らがやってきたことの成果などを聞きながら雑談していた。エンジニア不足という社会問題と地域性は相性が悪い。私から意見したことはこれらかな。
コミュニティはコントロールできない (個人や有志の) コミュニティとお金は相性が悪い 前者について、私自身、プログラマーのコミュニティと深く関わってきたことから、彼らがこの1-2年やってきたことの課題感はいくつか類推できる。コミュニティを中核に、自分たちの意図した目的を達成するのは相当に難しい。コミュニティに人を集めるにはコンテンツが必要になる。コンテンツのないコミュニティに人が集まることはない。多くのケースでコンテンツは主催が提供する。主催がコンテンツを作れなければ人を集められない。そして、コミュニティに人を集めるのも大変な労力だが、集まったとしても多様な集団の行動やモチベーションなどを、他人がコントロールして導くのは難しい。個人や有志のコミュニティは、主催が負担のないレベルで長く続けているうちになにか起きるかもしれないといったふわっとした願望で取り組むのがよい。コンテンツを提供し続ける主催の熱意は不可欠だが、必要以上にがんばり過ぎると燃え尽きてしまってやはり続かない。コンテンツと持続性の2つが優れたコミュニティを運営する上で最初にぶつかる課題かなと私は思う。
エージェント会社と雑談 次のお仕事探しに新しいフリーランス向けのキャリアエージェントの会社と面談してみた。11月開始だと9月中旬ぐらいに出てくる案件になり、いまから探していても時期があわないといった話だった。職務経歴書をまだ提出していなかったせいか、なんとなくマッチングしていない雰囲気がした。そのキャリアエージェントの会社が扱っている案件と法人としての私の働き方があっていないのかもしれない。手応えがなかったので別のキャリアエージェントの会社とも話しつつ次のお仕事を開拓していくことに決めた。</description><content>&lt;p>0時に寝て6時に起きた。夜中に暑さと気分の悪さで起きるのが常態化してきた。今日は珍しく4つの会議が重なって喋りつくして後半バテた。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。前隔週を1回飛ばしたので話題がたくさんあった。&lt;/p>
&lt;ul>
&lt;li>スクラムの話題&lt;/li>
&lt;li>&lt;a href="https://note.com/t2y1979/n/nc5c156ae529e">もてなしだけではもう食えない -ホテル経営学の本質と実践-&lt;/a>&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2022/0730/#スモールオフィスの内覧">起業プラザひょうごさんの内覧&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>もう1年近くスクラムをやっているのでスクラムの弱点や欠点なども少しずつみえてきた。しかし、はらさんと話していると、はらさんが実践してきたスクラムと私がやっているスクラムにはいくつか違いがある。同じスクラムというガイドに沿っていても、実際は組織やプロジェクトの内容によって大きな乖離が生じるというのも事実のように思える。プロジェクトのサービスインに伴い、大きなふりかえりやストーリーポイント運用の見直しを経てわかったことを雑談しながら理解を深めた。主には次の3つにまとめられる。&lt;/p>
&lt;ul>
&lt;li>スクラムマスターの限界&lt;/li>
&lt;li>スクラムと心理的安全性&lt;/li>
&lt;li>ストーリーポイントという信仰&lt;/li>
&lt;/ul>
&lt;p>PO でも開発者でもないスクラムマスターはプロジェクトが経過する時間とともに貢献度が減っていく。ヒト・モノ・カネ・情報というプロジェクトのリソースのうち、もっとも変動するのは間違いなくヒトである。プロジェクトの初期とマイルストーンの区切りにおいてヒトだけが経験を経て大きく成長する。成長しないヒトがいるとすれば、それはそのヒトがさぼっているか、プロジェクトにマッチングしていないと言える。普通のプロジェクトマネジメントにおいて成長しないメンバーなど存在しない。大きなふりかえりによって、驚いたことにスクラムマスターだけがそうじゃなかった。安西先生の言葉を借りるとこうだった。&lt;/p>
&lt;blockquote>
&lt;p>まるで成長していない ………&lt;/p>
&lt;/blockquote>
&lt;p>PO も開発者も日々の業務からドメイン知識を深めていき、大きく成長しているのに「ただ観ていただけ」のスクラムマスターは全くメンバーの話しについてこれていない。それが上辺だけの浅いふりかえりで終わり、総括はおろか、今後の改善の施策もまとめられないという結果になった。ファシリテーションをスクラムマスターが担っているからそうなってしまう。また過度に感情に配慮したふりかえりをするとネガティブな事実や結果を直視しようとしない。関係する誰かが責任を感じたり嫌な思いをさせる可能性はあるが、それらを認めないと次の改善の施策をたてられない。これは日本の会社ではよく起こることに思える。うちのチームは仲が良いだけのぬるま湯チームになっていてゾンビスクラムにも近付きつつある。&lt;/p>
&lt;p>もう1つ、スクラムをやらなくてもよい背景の1つとして、チケット駆動開発と業務のワークフロー最適化の話題をつぶやいてみた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">チケット駆動開発の優れているところの1つとして、課題管理システムを中核にして業務のワークフローを明確化できるところにある。業務の始まりから終わりまではどんな会社でも何らかのワークフローがあって、その手順をメンバーが理解することで業務というものが成立する。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1555453188475858944?ref_src=twsrc%5Etfw">August 5, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="神戸市さんと雑談">神戸市さんと雑談&lt;/h2>
&lt;p>&lt;a href="https://kobe-engr-lab.studio.site/">Kobe x Engineer&amp;rsquo;s Lab&lt;/a> という取り組みを担当されている職員さんとその運営会社の担当者と面談した。前から三宮.devのすみよしさんから話しを聞いていたので、そのつてで面談の依頼がきたと思っていたら、全然違う知人からの紹介だったので驚いた。ざっくばらんにエンジニア不足の社会問題の解決のために「神戸市として」どんな施策があるか、コミュニティはどう運営すればいいか、これまでに彼らがやってきたことの成果などを聞きながら雑談していた。エンジニア不足という社会問題と地域性は相性が悪い。私から意見したことはこれらかな。&lt;/p>
&lt;ul>
&lt;li>コミュニティはコントロールできない&lt;/li>
&lt;li>(個人や有志の) コミュニティとお金は相性が悪い&lt;/li>
&lt;/ul>
&lt;p>前者について、私自身、プログラマーのコミュニティと深く関わってきたことから、彼らがこの1-2年やってきたことの課題感はいくつか類推できる。コミュニティを中核に、自分たちの意図した目的を達成するのは相当に難しい。コミュニティに人を集めるにはコンテンツが必要になる。コンテンツのないコミュニティに人が集まることはない。多くのケースでコンテンツは主催が提供する。主催がコンテンツを作れなければ人を集められない。そして、コミュニティに人を集めるのも大変な労力だが、集まったとしても多様な集団の行動やモチベーションなどを、他人がコントロールして導くのは難しい。個人や有志のコミュニティは、主催が負担のないレベルで長く続けているうちになにか起きるかもしれないといったふわっとした願望で取り組むのがよい。コンテンツを提供し続ける主催の熱意は不可欠だが、必要以上にがんばり過ぎると燃え尽きてしまってやはり続かない。コンテンツと持続性の2つが優れたコミュニティを運営する上で最初にぶつかる課題かなと私は思う。&lt;/p>
&lt;h2 id="エージェント会社と雑談">エージェント会社と雑談&lt;/h2>
&lt;p>次のお仕事探しに新しいフリーランス向けのキャリアエージェントの会社と面談してみた。11月開始だと9月中旬ぐらいに出てくる案件になり、いまから探していても時期があわないといった話だった。職務経歴書をまだ提出していなかったせいか、なんとなくマッチングしていない雰囲気がした。そのキャリアエージェントの会社が扱っている案件と法人としての私の働き方があっていないのかもしれない。手応えがなかったので別のキャリアエージェントの会社とも話しつつ次のお仕事を開拓していくことに決めた。&lt;/p></content></item><item><title>Kubernetes Clients の調査</title><link>/diary/posts/2022/0804/</link><pubDate>Thu, 04 Aug 2022 10:21:17 +0900</pubDate><guid>/diary/posts/2022/0804/</guid><description>23時に寝て6時に起きた。
k8s cronjob の手動実行 いろんな定期／バッチ処理を k8s の cronjob に置き換えつつある。これまでアプリケーションサーバーでスケジュール実行していたものも本来サーバーである必要はないのでサーバーアプリケーションから cli アプリケーションに移行したりしている。そうやって定期実行ジョブが増えてくると、今度は調査やデバッグ目的で任意のタイミングで実行したくなる。kubectl を使って次のように実行できる。
$ kubectl create job --from=cronjob/my-schedule-job my-manual-job この cli を実行すると、cronjob のマニフェストから my-manual-job というジョブの pod が生成されて実行される。開発者ならこれでよいのだけど、非開発者も調査や検証目的で実行したい。そのためには非開発者向けのインターフェースを作らないといけない。本当は chatops のように slack apps によるコマンド実行ができるとカッコよいのだけど、k8s クラスターと slack 間の認証やセキュリティの仕組みを作る必要があって、既存の仕組みがないならそこはセキュリティリスクにも成り得るのでちょっと控えたい。そうすると、既存のサーバーアプリケーションの web api のインターフェースで提供できるようにしたい。複数の言語向けに Kubernetes Clients が提供されている。これを使って cronjob の手動実行を実装できそうな気がする。時間があれば週末に軽く調べてみようと思う。
python c# javascript java c haskel go ruby</description><content>&lt;p>23時に寝て6時に起きた。&lt;/p>
&lt;h2 id="k8s-cronjob-の手動実行">k8s cronjob の手動実行&lt;/h2>
&lt;p>いろんな定期／バッチ処理を k8s の cronjob に置き換えつつある。これまでアプリケーションサーバーでスケジュール実行していたものも本来サーバーである必要はないのでサーバーアプリケーションから cli アプリケーションに移行したりしている。そうやって定期実行ジョブが増えてくると、今度は調査やデバッグ目的で任意のタイミングで実行したくなる。kubectl を使って次のように実行できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kubectl create job --from&lt;span style="color:#f92672">=&lt;/span>cronjob/my-schedule-job my-manual-job
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この cli を実行すると、cronjob のマニフェストから &lt;code>my-manual-job&lt;/code> というジョブの pod が生成されて実行される。開発者ならこれでよいのだけど、非開発者も調査や検証目的で実行したい。そのためには非開発者向けのインターフェースを作らないといけない。本当は chatops のように slack apps によるコマンド実行ができるとカッコよいのだけど、k8s クラスターと slack 間の認証やセキュリティの仕組みを作る必要があって、既存の仕組みがないならそこはセキュリティリスクにも成り得るのでちょっと控えたい。そうすると、既存のサーバーアプリケーションの web api のインターフェースで提供できるようにしたい。複数の言語向けに &lt;a href="https://github.com/kubernetes-client">Kubernetes Clients&lt;/a> が提供されている。これを使って cronjob の手動実行を実装できそうな気がする。時間があれば週末に軽く調べてみようと思う。&lt;/p>
&lt;ul>
&lt;li>python&lt;/li>
&lt;li>c#&lt;/li>
&lt;li>javascript&lt;/li>
&lt;li>java&lt;/li>
&lt;li>c&lt;/li>
&lt;li>haskel&lt;/li>
&lt;li>go&lt;/li>
&lt;li>ruby&lt;/li>
&lt;/ul></content></item><item><title>暑い日が続く</title><link>/diary/posts/2022/0803/</link><pubDate>Wed, 03 Aug 2022 08:19:41 +0900</pubDate><guid>/diary/posts/2022/0803/</guid><description>0時に寝て6時に起きた。今日は業務時間の大半が打ち合わせだった。
正史 諸葛亮孔明 「第十章 蜀の再建と出師表」を読んだ。
孔明の話し相手になっている 蔣琬 (しょうえん) のプロフィール情報がある。孔明の死後、後継者として内政を取り仕切ったらしい。孔明の後を継ぐ人物は相対比較されることから低い評価になりがちだが、蔣琬はそれでも評価が低くないことから時代が異なればもっと高い評価を得た政治家だったのかもしれない。むしろ孔明が北伐を5回もできた背景は留守中の内政を蔣琬始め、出師表で取り上げられた人物たちがうまく運営していたといった話しも出てくる。軍事は国庫を大いに逼迫し、蜀は魏や呉と比べて国力が劣る国家であったことから内政の負担も大きかったと思われる。
出師表 (すいしのひょう) という言葉を知らなかった。出師表とは臣下が出陣するときに君主に奉る文章のことを指す。孔明が君主の劉禅に奉った文章がとても有名らしい。2つあるので前出師表と後出師表と区別する場合もある。後出師表は孔明が書いたものではないという説もあるらしい。一般に出師表と言えば前出師表のことを指す。この出師表のどういったところがその時代の他の文章と異なるのか、また優れているのかが説明されている。孔明の人格者としての振る舞いや忠義が表れていると言える。時代が大きく違うせいか、出師表の内容を読んで私はどうとは感じなかったものの、これは私が提唱するよい開発文化の1つ「書く」ということの重要性ではないかとも思えてきた。当時、孔明と直接話せる人はせいぜい数十人から百数十人程度であろうから、出師表のような文章で多くの兵士や国民に影響を与えた事例の1つと言えるのかもしれない。</description><content>&lt;p>0時に寝て6時に起きた。今日は業務時間の大半が打ち合わせだった。&lt;/p>
&lt;h2 id="正史-諸葛亮孔明">正史 諸葛亮孔明&lt;/h2>
&lt;p>「第十章 蜀の再建と出師表」を読んだ。&lt;/p>
&lt;p>孔明の話し相手になっている &lt;a href="https://ja.wikipedia.org/wiki/%E8%94%A3%E7%90%AC">蔣琬 (しょうえん)&lt;/a> のプロフィール情報がある。孔明の死後、後継者として内政を取り仕切ったらしい。孔明の後を継ぐ人物は相対比較されることから低い評価になりがちだが、蔣琬はそれでも評価が低くないことから時代が異なればもっと高い評価を得た政治家だったのかもしれない。むしろ孔明が北伐を5回もできた背景は留守中の内政を蔣琬始め、出師表で取り上げられた人物たちがうまく運営していたといった話しも出てくる。軍事は国庫を大いに逼迫し、蜀は魏や呉と比べて国力が劣る国家であったことから内政の負担も大きかったと思われる。&lt;/p>
&lt;p>&lt;a href="https://ja.wikipedia.org/wiki/%E5%87%BA%E5%B8%AB%E8%A1%A8">出師表 (すいしのひょう)&lt;/a> という言葉を知らなかった。出師表とは臣下が出陣するときに君主に奉る文章のことを指す。孔明が君主の劉禅に奉った文章がとても有名らしい。2つあるので前出師表と後出師表と区別する場合もある。後出師表は孔明が書いたものではないという説もあるらしい。一般に出師表と言えば前出師表のことを指す。この出師表のどういったところがその時代の他の文章と異なるのか、また優れているのかが説明されている。孔明の人格者としての振る舞いや忠義が表れていると言える。時代が大きく違うせいか、出師表の内容を読んで私はどうとは感じなかったものの、これは私が提唱するよい開発文化の1つ「書く」ということの重要性ではないかとも思えてきた。当時、孔明と直接話せる人はせいぜい数十人から百数十人程度であろうから、出師表のような文章で多くの兵士や国民に影響を与えた事例の1つと言えるのかもしれない。&lt;/p></content></item><item><title>ふりかえりとむきなおり</title><link>/diary/posts/2022/0802/</link><pubDate>Tue, 02 Aug 2022 08:49:17 +0900</pubDate><guid>/diary/posts/2022/0802/</guid><description>23時に寝て何度か起きながら7時に起きた。なんか体調が悪い。
ふりかえりとむきなおり 毎週火曜日はふりかえりの日。今週もスプリントゴールは未達に終わったわけだけど、未達が普通で稀に達成できるのが常態化しつつある。悪く言えば ゾンビスクラム 状態と言えるのかもしれない。サービスインのゴタゴタも解消したので PO からもツッコミがあってスプリントゴール達成できない問題が再燃した。私からみたらこんなところか。
スプリント初期は前スプリントの残タスクをやるのが常態化している メンバーにやる気と実力がない コミュニケーションコストが高くてオーバーヘッドが大きい (スクラムイベント、確認や待ち時間など) フルタイムで働いていないメンバーがいる (ちょくちょくメンバーも休暇をとる) スプリントが1週間と短過ぎる その議論をしている中でスクラムマスターが むきなおり をしようといった結論になった。私は用語を知らなかったので調べてみた。
この3点を満たしながら、事業をふりかえって、行きたい方向へとむきなおることが今回の合宿の狙いでした。ただふりかえるだけではなく、あるべき姿との差から、今後の方向性を決めることを、特に「むきなおり」と名前付けしています。ふりかえり、むきなおる。今回の合宿はギルドワークスの今後の方針と向き合うための機会としました。
事業をふりかえって、行きたい方向へむきなおる
ふりかえりの結果から方向性を変えることを呼ぶらしい。私はまったく理解できていないのだけど、普通のふりかえりをして改善するときは何と呼ぶのだろうか。ただの言葉遊びじゃない？という気もする。また後日、そのためのイベントをするそうなのでそのときに理解を深めてみる。</description><content>&lt;p>23時に寝て何度か起きながら7時に起きた。なんか体調が悪い。&lt;/p>
&lt;h2 id="ふりかえりとむきなおり">ふりかえりとむきなおり&lt;/h2>
&lt;p>毎週火曜日はふりかえりの日。今週もスプリントゴールは未達に終わったわけだけど、未達が普通で稀に達成できるのが常態化しつつある。悪く言えば &lt;a href="/diary/diary/posts/2022/0708/#ゾンビスクラム">ゾンビスクラム&lt;/a> 状態と言えるのかもしれない。サービスインのゴタゴタも解消したので PO からもツッコミがあってスプリントゴール達成できない問題が再燃した。私からみたらこんなところか。&lt;/p>
&lt;ul>
&lt;li>スプリント初期は前スプリントの残タスクをやるのが常態化している&lt;/li>
&lt;li>メンバーにやる気と実力がない&lt;/li>
&lt;li>コミュニケーションコストが高くてオーバーヘッドが大きい (スクラムイベント、確認や待ち時間など)&lt;/li>
&lt;li>フルタイムで働いていないメンバーがいる (ちょくちょくメンバーも休暇をとる)&lt;/li>
&lt;li>スプリントが1週間と短過ぎる&lt;/li>
&lt;/ul>
&lt;p>その議論をしている中でスクラムマスターが &lt;strong>むきなおり&lt;/strong> をしようといった結論になった。私は用語を知らなかったので調べてみた。&lt;/p>
&lt;blockquote>
&lt;p>この3点を満たしながら、事業をふりかえって、行きたい方向へとむきなおることが今回の合宿の狙いでした。ただふりかえるだけではなく、あるべき姿との差から、今後の方向性を決めることを、特に「むきなおり」と名前付けしています。ふりかえり、むきなおる。今回の合宿はギルドワークスの今後の方針と向き合うための機会としました。&lt;/p>
&lt;p>&lt;a href="https://devtab.jp/entry/internal/18">事業をふりかえって、行きたい方向へむきなおる&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>ふりかえりの結果から方向性を変えることを呼ぶらしい。私はまったく理解できていないのだけど、普通のふりかえりをして改善するときは何と呼ぶのだろうか。ただの言葉遊びじゃない？という気もする。また後日、そのためのイベントをするそうなのでそのときに理解を深めてみる。&lt;/p></content></item><item><title>孔明の史実を読み始めた</title><link>/diary/posts/2022/0801/</link><pubDate>Mon, 01 Aug 2022 08:50:04 +0900</pubDate><guid>/diary/posts/2022/0801/</guid><description>0時に寝て7時に起きた。
正史 諸葛亮孔明 パリピ孔明 がおもしろかったので孔明の記事などを読んだりしていた。
私、姓は諸葛、名は亮、字を孔明と申します。
作品中のこの挨拶が印象に残っている。キャッチフレーズのようなものが挨拶というのも珍しい？そんなこんなもふくめて孔明の本も読んでみることにした。
正史 諸葛亮孔明 - 三国志の英雄たちが語らう 「第十一章 第一次北伐」を読んだ。
孔明が軍事で手腕を振るうようになるのは劉備の死後になる。北伐は第一次から第五次まである。そのうちの第一次北伐の失敗は 泣いて馬謖を斬る の故事で有名である。wikipedia の説明では正史と演義でこの故事に関する記述は異なっていることが書かれている。本書では、馬謖が副将の王平の諫言に従わず、山頂に布陣したことそのものは悪い策ではなかったと擁護されている。山頂から地の利をとって一刻も早く要衝を通過したい敵の張郃の軍にとって厄介な配置と考えることもできる。馬謖の失敗は実戦経験が乏しかったことで水源の確保を怠っていたことだという。かたや敵将の張郃は歴戦の名将であることから水源の確保ができていないことを看破して馬謖が布陣する近くの川や水源を確保してしまった。水源を確保することなど軍事に限らず当たり前の話しであり、戦術書に「水源を断て」などと記述しているものはないという。馬謖軍の布陣をみただけでそのことを見抜いた張郃の応用戦術を褒めている。さらに戦争に敗れただけであればまだよかったが、馬謖は敗北の責任を逃れるために逃亡したらしい。その承認欲求とプライドのために自分が負けた事実を受け入れられなかった。本書では、孔明の任命責任も大きいと締め括られている。馬謖が孔明の愛弟子であるから、実績のある諸将よりも私情を優先して実績をつけさせてあげようと抜擢した。その結果、馬謖もより大きな実績を挙げようと行動して失敗してしまった。どういう思いで涙を流したかは本書では書かれていなかった。</description><content>&lt;p>0時に寝て7時に起きた。&lt;/p>
&lt;h2 id="正史-諸葛亮孔明">正史 諸葛亮孔明&lt;/h2>
&lt;p>&lt;a href="https://paripikoumei-anime.com/">パリピ孔明&lt;/a> がおもしろかったので孔明の記事などを読んだりしていた。&lt;/p>
&lt;blockquote>
&lt;p>私、姓は諸葛、名は亮、字を孔明と申します。&lt;/p>
&lt;/blockquote>
&lt;p>作品中のこの挨拶が印象に残っている。キャッチフレーズのようなものが挨拶というのも珍しい？そんなこんなもふくめて孔明の本も読んでみることにした。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.wani.co.jp/event.php?id=7293">正史 諸葛亮孔明 - 三国志の英雄たちが語らう&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>「第十一章 第一次北伐」を読んだ。&lt;/p>
&lt;p>孔明が軍事で手腕を振るうようになるのは劉備の死後になる。北伐は第一次から第五次まである。そのうちの第一次北伐の失敗は &lt;a href="https://ja.wikipedia.org/wiki/%E6%B3%A3%E3%81%84%E3%81%A6%E9%A6%AC%E8%AC%96%E3%82%92%E6%96%AC%E3%82%8B">泣いて馬謖を斬る&lt;/a> の故事で有名である。wikipedia の説明では正史と演義でこの故事に関する記述は異なっていることが書かれている。本書では、馬謖が副将の王平の諫言に従わず、山頂に布陣したことそのものは悪い策ではなかったと擁護されている。山頂から地の利をとって一刻も早く要衝を通過したい敵の張郃の軍にとって厄介な配置と考えることもできる。馬謖の失敗は実戦経験が乏しかったことで水源の確保を怠っていたことだという。かたや敵将の張郃は歴戦の名将であることから水源の確保ができていないことを看破して馬謖が布陣する近くの川や水源を確保してしまった。水源を確保することなど軍事に限らず当たり前の話しであり、戦術書に「水源を断て」などと記述しているものはないという。馬謖軍の布陣をみただけでそのことを見抜いた張郃の応用戦術を褒めている。さらに戦争に敗れただけであればまだよかったが、馬謖は敗北の責任を逃れるために逃亡したらしい。その承認欲求とプライドのために自分が負けた事実を受け入れられなかった。本書では、孔明の任命責任も大きいと締め括られている。馬謖が孔明の愛弟子であるから、実績のある諸将よりも私情を優先して実績をつけさせてあげようと抜擢した。その結果、馬謖もより大きな実績を挙げようと行動して失敗してしまった。どういう思いで涙を流したかは本書では書かれていなかった。&lt;/p></content></item></channel></rss>