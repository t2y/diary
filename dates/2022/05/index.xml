<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2022/05 on forest nook</title><link>/diary/dates/2022/05/</link><description>Recent content in 2022/05 on forest nook</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Tue, 31 May 2022 08:22:54 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/dates/2022/05/index.xml" rel="self" type="application/rss+xml"/><item><title>締め切りの45分前</title><link>/diary/posts/2022/0531/</link><pubDate>Tue, 31 May 2022 08:22:54 +0900</pubDate><guid>/diary/posts/2022/0531/</guid><description>0時に寝て4時に起きて7時に起きた。最近は4時に一回起きることも多くなってきた。ちょっとゲームしていつの間にか、寝たりもするけど。
法人決算の間違い 5月の最終日なのでお昼休みに社会保険の引き落としの明細を手動で入力していた。ufj 銀行 (法人口座) の api 連携は有償サービスで、主に社会保険や経営セーフティ共済の引き落としにしか使っていないのでうちの会社は有償サービスを使っていない。通帳もしくは当日残高の明細をみて、それを手入力で freee の口座に登録する。そこで稀に利息がつくというのを失念していた。2月の利息15円の明細登録が漏れていることに気付いた。freee には登録残高という自動計算された口座残高をもっているので、それと明細の残高を見比べれば気付けるようになっているのだけど、たった15円の差異だったのでこれまで私が見落としていた。
法人決算の確定申告をすでに終えているのに15円の受取利息が漏れていることに気付いてしまった。ひとまず税務署に電話してどうしたらいいかを相談した。今日中に訂正するなら上書き更新、明日以降なら修正申告と言われた。所得や税引き前純利益の金額に15円の差異があり、3つか4つぐらいの帳票の項目の値が変わる。法人税の金額計算には影響しない。欠損金の繰り戻し還付の申請でも15円の違いから2円の差額になった。銀行の受け取り利息の消費税は非課税なので消費税の申告には影響しない。
e-tax で送信したデータをコピーして、元データがある状態で誤り箇所を修正して再送信するのはすぐできて30分ぐらいで訂正送信できた。電子申告の良さを実感した。紙だとこうはいかなかったかもしれない。財務諸表は紙で提出しないといけないので、e-tax の修正送信後に慌てて税務署へ行って再提出してきた。それが16時15分。法人決算締め切りの45分前。オフィスから税務署まで自転車で5分の距離だから間に合った。思いの他、最終日に落とし穴にはまったものの、ちゃちゃっと訂正できたので行政の事務手続きスキルは上がってきたなと自信ももてた。こんな失敗をしておけば今後は登録残高と明細残高のチェックも忘れることはないだろう。</description><content>&lt;p>0時に寝て4時に起きて7時に起きた。最近は4時に一回起きることも多くなってきた。ちょっとゲームしていつの間にか、寝たりもするけど。&lt;/p>
&lt;h2 id="法人決算の間違い">法人決算の間違い&lt;/h2>
&lt;p>5月の最終日なのでお昼休みに社会保険の引き落としの明細を手動で入力していた。ufj 銀行 (法人口座) の api 連携は有償サービスで、主に社会保険や経営セーフティ共済の引き落としにしか使っていないのでうちの会社は有償サービスを使っていない。通帳もしくは当日残高の明細をみて、それを手入力で freee の口座に登録する。そこで稀に利息がつくというのを失念していた。2月の利息15円の明細登録が漏れていることに気付いた。freee には登録残高という自動計算された口座残高をもっているので、それと明細の残高を見比べれば気付けるようになっているのだけど、たった15円の差異だったのでこれまで私が見落としていた。&lt;/p>
&lt;p>法人決算の確定申告をすでに終えているのに15円の受取利息が漏れていることに気付いてしまった。ひとまず税務署に電話してどうしたらいいかを相談した。今日中に訂正するなら上書き更新、明日以降なら修正申告と言われた。所得や税引き前純利益の金額に15円の差異があり、3つか4つぐらいの帳票の項目の値が変わる。法人税の金額計算には影響しない。欠損金の繰り戻し還付の申請でも15円の違いから2円の差額になった。銀行の受け取り利息の消費税は非課税なので消費税の申告には影響しない。&lt;/p>
&lt;p>e-tax で送信したデータをコピーして、元データがある状態で誤り箇所を修正して再送信するのはすぐできて30分ぐらいで訂正送信できた。電子申告の良さを実感した。紙だとこうはいかなかったかもしれない。財務諸表は紙で提出しないといけないので、e-tax の修正送信後に慌てて税務署へ行って再提出してきた。それが16時15分。法人決算締め切りの45分前。オフィスから税務署まで自転車で5分の距離だから間に合った。思いの他、最終日に落とし穴にはまったものの、ちゃちゃっと訂正できたので行政の事務手続きスキルは上がってきたなと自信ももてた。こんな失敗をしておけば今後は登録残高と明細残高のチェックも忘れることはないだろう。&lt;/p></content></item><item><title>aws サービスと ipv6</title><link>/diary/posts/2022/0530/</link><pubDate>Mon, 30 May 2022 08:22:52 +0900</pubDate><guid>/diary/posts/2022/0530/</guid><description>0時に寝て6時頃に起きて7時半に起きた。
cloudfront と waf と s3 と ipv6 と aws サービスについて ipv6 について調べると、少しずつ対応してきた経緯があって、ipv4 と ipv6 の両対応のことを aws は dualstack と読んでいる。エンドポイントのサブドメインに dualstack があれば、ipv6 対応していると考えてよいと思う。リモートワークしている開発者がテスト環境に接続するときに、その開発者の IP アドレスを登録する aws lambda 関数がある。その lambda 関数にリクスとすると、リクエストしたクライアントの IP アドレスを waf の IP sets に登録することで、パケットフィルタリングのルールを更新している。たまたま、そのインフラを cdk 移行したところ、ある開発者は ipv6 で登録しようとしてエラーになるということがわかった。移行のときに api gateway を使わずに直接 lambda の fuction url を使うようにしたところ、lambda は ipv6 対応しているのでそのまま ipv6 の IP アドレスを登録しようとして waf の設定が ipv4 しか対応していなかったためにエラーになっていた。
AWS Lambda がインバウンド接続用のインターネットプロトコルバージョン 6 (IPv6) エンドポイントのサポートを開始 cloudfront, waf, s3 の ipv6 対応は2016年頃に対応していて、この3つのサービスに対して一緒にブログ記事を書いているのは、これらのサービスを一緒に使うことを想定しているとみなすべきだろう。</description><content>&lt;p>0時に寝て6時頃に起きて7時半に起きた。&lt;/p>
&lt;h2 id="cloudfront-と-waf-と-s3-と-ipv6-と">cloudfront と waf と s3 と ipv6 と&lt;/h2>
&lt;p>aws サービスについて ipv6 について調べると、少しずつ対応してきた経緯があって、ipv4 と ipv6 の両対応のことを aws は dualstack と読んでいる。エンドポイントのサブドメインに dualstack があれば、ipv6 対応していると考えてよいと思う。リモートワークしている開発者がテスト環境に接続するときに、その開発者の IP アドレスを登録する aws lambda 関数がある。その lambda 関数にリクスとすると、リクエストしたクライアントの IP アドレスを waf の IP sets に登録することで、パケットフィルタリングのルールを更新している。たまたま、そのインフラを cdk 移行したところ、ある開発者は ipv6 で登録しようとしてエラーになるということがわかった。移行のときに api gateway を使わずに直接 lambda の fuction url を使うようにしたところ、lambda は ipv6 対応しているのでそのまま ipv6 の IP アドレスを登録しようとして waf の設定が ipv4 しか対応していなかったためにエラーになっていた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://aws.amazon.com/jp/about-aws/whats-new/2021/12/aws-lambda-ipv6-endpoints-inbound-connections/">AWS Lambda がインバウンド接続用のインターネットプロトコルバージョン 6 (IPv6) エンドポイントのサポートを開始&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>cloudfront, waf, s3 の ipv6 対応は2016年頃に対応していて、この3つのサービスに対して一緒にブログ記事を書いているのは、これらのサービスを一緒に使うことを想定しているとみなすべきだろう。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://aws.amazon.com/jp/blogs/news/ipv6-support-update-cloudfront-waf-and-s3-transfer-acceleration/">IPv6 サポートの更新 – CloudFront、WAF、S3 Transfer Acceleration&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>cdk のコードで cloudfront, waf は ipv6 対応したのだけど、cloudfront のオリジンに当たる s3 の ipv6 対応を cdk からどうやって設定していいかわからなかった。&lt;a href="https://github.com/aws/aws-cdk/tree/master/packages/%40aws-cdk/aws-cloudfront-origins">aws-cloudfront-origins&lt;/a> の &lt;code>S3Origin&lt;/code> のコードを読むと、どうも s3 の ipv6 対応のエンドポイント (dualstack) を考慮して制御しているようにはみえない。バグではないけど、設定方法がわからないので feature request として issue 登録してみた。aws-cdk に issue 登録するのは初めて。余談だけど、&lt;a href="https://github.com/aws/aws-cdk/tree/master/.github/ISSUE_TEMPLATE">ISSUE_TEMPLATE&lt;/a> もよく出来ていて、これを参考にして自分たちのリポジトリにも取り入れてもよさそう。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/aws/aws-cdk/issues/20550">(aws-cloudfront-origins): Support dualstack domain name (ipv6) for S3 origin #20550&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>レンタカーで気分転換</title><link>/diary/posts/2022/0529/</link><pubDate>Sun, 29 May 2022 08:21:14 +0900</pubDate><guid>/diary/posts/2022/0529/</guid><description>0時に寝て7時に起きた。
レンタカーで運転の練習 ふと思い立って8時からレンタカーを借りて運転の練習をしてきた。今週末に ワーケーション を予定しているが、城崎温泉との往復を私が参加者を乗せて車で運転しないといけない。たまに実家に帰ったときに家にある車を運転する程度なので私の運転スキルには不安しかない。言うても田舎の交通量の少ないところを走る分には問題ないはずだけど、それでも準備しておくに越したことはない。レンタカーの慣れない車だと予期しないことで失敗することもあるだろう。そういうリハーサルも兼ねてレンタカーを借りて六甲山、六甲アイランド、灘五郷と50kmぐらい、5時間ほど走って、時間貸駐車場での駐車して料金支払いをやってみた。普段は週末を自社のお仕事で過ごしているし、今月は法人決算に時間をとられていて、その鬱屈した気持ちの気分転換にもなってよかった。
資料作成の準備 ワーケーションでは、参加者の親睦も兼ねて内容自由のプレゼン大会を企画している。その準備で資料を作り始めた。なんの話しをしようかなぁと考えて、私は会社紹介をすることに決めた。営業さんと一緒に初めて訪問する会社へ行ったり、ピッチなどに参加すると、発表者が会社紹介をしているのを過去にもよくみかけていた。うちにお仕事を依頼してくれる会社は基本的に知人なので会社に依頼しているというよりも、私個人に仕事を依頼している。だからこれまで会社紹介を必要とされなかった。今後のマーケティングやプロダクト開発をしていくにあたり、いずれ様々な場面で知らない人たちに会社紹介をしなければいけなくなることが想定される。直近で必要はないけど、いまから数ヶ月かけて少しずつ会社紹介を作っていって「ぼくのかんがえたさいきょうのかいしゃしょうかい」ができればいいかなといったところ。その最初の叩き台をつくって、参加者にレビューしてもらおうと考えた。ちょうど スライドマスターのデザイン もできたばかりなのでスライドに熟れる必要もあった。3時間ほど資料作りして続きはまた翌日に持ち越し。</description><content>&lt;p>0時に寝て7時に起きた。&lt;/p>
&lt;h2 id="レンタカーで運転の練習">レンタカーで運転の練習&lt;/h2>
&lt;p>ふと思い立って8時からレンタカーを借りて運転の練習をしてきた。今週末に &lt;a href="/diary/diary/posts/2022/0515/#ワーケーションの打ち合わせ">ワーケーション&lt;/a> を予定しているが、城崎温泉との往復を私が参加者を乗せて車で運転しないといけない。たまに実家に帰ったときに家にある車を運転する程度なので私の運転スキルには不安しかない。言うても田舎の交通量の少ないところを走る分には問題ないはずだけど、それでも準備しておくに越したことはない。レンタカーの慣れない車だと予期しないことで失敗することもあるだろう。そういうリハーサルも兼ねてレンタカーを借りて六甲山、六甲アイランド、灘五郷と50kmぐらい、5時間ほど走って、時間貸駐車場での駐車して料金支払いをやってみた。普段は週末を自社のお仕事で過ごしているし、今月は法人決算に時間をとられていて、その鬱屈した気持ちの気分転換にもなってよかった。&lt;/p>
&lt;h2 id="資料作成の準備">資料作成の準備&lt;/h2>
&lt;p>ワーケーションでは、参加者の親睦も兼ねて内容自由のプレゼン大会を企画している。その準備で資料を作り始めた。なんの話しをしようかなぁと考えて、私は会社紹介をすることに決めた。営業さんと一緒に初めて訪問する会社へ行ったり、ピッチなどに参加すると、発表者が会社紹介をしているのを過去にもよくみかけていた。うちにお仕事を依頼してくれる会社は基本的に知人なので会社に依頼しているというよりも、私個人に仕事を依頼している。だからこれまで会社紹介を必要とされなかった。今後のマーケティングやプロダクト開発をしていくにあたり、いずれ様々な場面で知らない人たちに会社紹介をしなければいけなくなることが想定される。直近で必要はないけど、いまから数ヶ月かけて少しずつ会社紹介を作っていって「ぼくのかんがえたさいきょうのかいしゃしょうかい」ができればいいかなといったところ。その最初の叩き台をつくって、参加者にレビューしてもらおうと考えた。ちょうど &lt;a href="/diary/diary/posts/2022/0509/#スライドマスターのデザイン作成">スライドマスターのデザイン&lt;/a> もできたばかりなのでスライドに熟れる必要もあった。3時間ほど資料作りして続きはまた翌日に持ち越し。&lt;/p></content></item><item><title>法人決算をほぼ完了</title><link>/diary/posts/2022/0528/</link><pubDate>Sat, 28 May 2022 11:58:58 +0900</pubDate><guid>/diary/posts/2022/0528/</guid><description>0時に寝て6時に起きた。
ストレッチ 今日の開脚幅は開始前160cmで、ストレッチ後162cmだった。先週とほぼ変わらないので現状維持といったところ。右腰に張りがあって今週は椅子に座って後ろに寄りかかっていてもやや右腰が張るなぁと自覚症状もあった。ストレッチを受けていても効くなぁって感じだった。新しいトレーナーさんに代わってから1ヶ月のストレッチを受けてだいぶ打ち解けた感はある。
法人決算をほぼ完了 法人決算の e-tax 申請 の続き。前に消費税の申告をしたときに別表五以外はすべて作成していた。別表五はどこに何の数字を入力するのかが難しくて、過去の書類と数字を見返しながらやらないと詳細を覚えていなかったりする。その作業をするのが面倒でずっと先送りしていた。本気出してやれば1-2時間もあれば完了した。なんやらかんやらで eltax も e-tax の電子申告も自分でできるようになった。できることが増えていくことそのものが楽しい。
今回の法人決算で申告・申請したのは次の3つ。
e-tax の画面は基本的に帳票そのものなので数値を入力した後で紙に印刷することで帳票を保管することもできる。例えば、法人税・地方法人税の申告に必要な帳票がこれらになる。過去2年は手書きで作成していたけど、ほぼ同じの内容を画面で作成してデータで送付するだけの違いしかない。紙なら2時間で終えられる作業を、(使いにくい) アプリケーションの画面で入力すると余分に数時間かかってしまうものの、システムだと差し引きや合計値の計算は自動でやってくれるので記入ミスは起こりにくい。とはいえ、システムの自動計算が間違っていることもあるので強制入力が必要になるときもある。
税務署へ電話で問い合わせたときに財務諸表を pdf 添付でよいと話していたけど、いざやろうとしたら財務諸表は xml または xbrl 形式でないとダメだと説明が出てきた。仕方ないので月曜日に税務署へ行って紙で提出してくる。電子申告と紙を組み合わせて法人決算やることは構わないとのこと。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前160cmで、ストレッチ後162cmだった。先週とほぼ変わらないので現状維持といったところ。右腰に張りがあって今週は椅子に座って後ろに寄りかかっていてもやや右腰が張るなぁと自覚症状もあった。ストレッチを受けていても効くなぁって感じだった。新しいトレーナーさんに代わってから1ヶ月のストレッチを受けてだいぶ打ち解けた感はある。&lt;/p>
&lt;h2 id="法人決算をほぼ完了">法人決算をほぼ完了&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0524/#消費税と地方消費税の申告">法人決算の e-tax 申請&lt;/a> の続き。前に消費税の申告をしたときに別表五以外はすべて作成していた。別表五はどこに何の数字を入力するのかが難しくて、過去の書類と数字を見返しながらやらないと詳細を覚えていなかったりする。その作業をするのが面倒でずっと先送りしていた。本気出してやれば1-2時間もあれば完了した。なんやらかんやらで eltax も e-tax の電子申告も自分でできるようになった。できることが増えていくことそのものが楽しい。&lt;/p>
&lt;p>今回の法人決算で申告・申請したのは次の3つ。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0528_e-tax-list1.png"/>
&lt;/figure>
&lt;p>e-tax の画面は基本的に帳票そのものなので数値を入力した後で紙に印刷することで帳票を保管することもできる。例えば、法人税・地方法人税の申告に必要な帳票がこれらになる。過去2年は手書きで作成していたけど、ほぼ同じの内容を画面で作成してデータで送付するだけの違いしかない。紙なら2時間で終えられる作業を、(使いにくい) アプリケーションの画面で入力すると余分に数時間かかってしまうものの、システムだと差し引きや合計値の計算は自動でやってくれるので記入ミスは起こりにくい。とはいえ、システムの自動計算が間違っていることもあるので強制入力が必要になるときもある。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0528_e-tax-list2.png"/>
&lt;/figure>
&lt;p>税務署へ電話で問い合わせたときに財務諸表を pdf 添付でよいと話していたけど、いざやろうとしたら財務諸表は xml または xbrl 形式でないとダメだと説明が出てきた。仕方ないので月曜日に税務署へ行って紙で提出してくる。電子申告と紙を組み合わせて法人決算やることは構わないとのこと。&lt;/p></content></item><item><title>スクラムマスターは超人か</title><link>/diary/posts/2022/0527/</link><pubDate>Fri, 27 May 2022 16:31:02 +0900</pubDate><guid>/diary/posts/2022/0527/</guid><description>0時に寝て6時に起きた。調子よくて7時からオフィスで作業してた。なんだかんだで今日は主にお手伝い先のお仕事をしてた。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今日の話題はたくさんあった。
スライドマスター作成のふりかえり 課題管理のためのメンタルモデルづくり スクラムの悪いところの共有 住民税の変遷について 会社としての発表のスライドを管理するために speakerdeck の会社アカウントを作成した。jjug の主催者のスライドチェックが完了したらアップロードしようと思う。google docs をそのまま公開するのと speakerdeck のどちらがいいかを検討した。google docs だと、スライド資料のノートまで公開されてしまうのでスライドだけなら speakerdeck の方がよさそうかなと判断した。
https://speakerdeck.com/kazamori スクラムの悪いところの1つとして、スクラムマスターが現状認識を誤っているときの是正方法がないという話題をした。スクラムマスターは po や開発者にアドバイスするのだけど、アドバイス自体が誤っているのではなく、アドバイスしている内容がプロジェクトの置かれている状況にあっていないというギャップに対しての、ふりかえりや是正の仕組みがスクラムに包含されていない。ある知人によると、スクラムマスターは超人でなければ務まらないという前提になっているのではないかという意見もあった。現時点でとくに結論はないのだけど、難しい課題だなぁと議論していた。</description><content>&lt;p>0時に寝て6時に起きた。調子よくて7時からオフィスで作業してた。なんだかんだで今日は主にお手伝い先のお仕事をしてた。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今日の話題はたくさんあった。&lt;/p>
&lt;ul>
&lt;li>スライドマスター作成のふりかえり&lt;/li>
&lt;li>課題管理のためのメンタルモデルづくり&lt;/li>
&lt;li>スクラムの悪いところの共有&lt;/li>
&lt;li>住民税の変遷について&lt;/li>
&lt;/ul>
&lt;p>会社としての発表のスライドを管理するために speakerdeck の会社アカウントを作成した。jjug の主催者のスライドチェックが完了したらアップロードしようと思う。google docs をそのまま公開するのと speakerdeck のどちらがいいかを検討した。google docs だと、スライド資料のノートまで公開されてしまうのでスライドだけなら speakerdeck の方がよさそうかなと判断した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://speakerdeck.com/kazamori">https://speakerdeck.com/kazamori&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>スクラムの悪いところの1つとして、スクラムマスターが現状認識を誤っているときの是正方法がないという話題をした。スクラムマスターは po や開発者にアドバイスするのだけど、アドバイス自体が誤っているのではなく、アドバイスしている内容がプロジェクトの置かれている状況にあっていないというギャップに対しての、ふりかえりや是正の仕組みがスクラムに包含されていない。ある知人によると、スクラムマスターは超人でなければ務まらないという前提になっているのではないかという意見もあった。現時点でとくに結論はないのだけど、難しい課題だなぁと議論していた。&lt;/p></content></item><item><title>aws-lambda-python-alpha を使っておけばいい</title><link>/diary/posts/2022/0526/</link><pubDate>Thu, 26 May 2022 09:55:16 +0900</pubDate><guid>/diary/posts/2022/0526/</guid><description>0時に寝て6時に起きて7時半に起きた。なんかバテバテ。
aws-lambda-python-alpha cdk 標準の lambda モジュールで python スクリプトをデプロイすることはもちろんできるが、その python スクリプト内でサードパーティのライブラリを使いたい場合、layer という機能を使って複数の lambda 関数で再利用するというのがもともとのやり方っぽい。とはいえ、サードパーティの依存ライブラリも python スクリプトによって使うものが違ったりするので lambda 関数単位に管理したいという場合もある。その要件を考慮した場合、python のパッケージングを lambda 関数のデプロイ時に再利用できるのが望ましくて、そのためのモジュールが aws-lambda-python-alpha になる。説明が長い。
@aws-cdk/aws-lambda-python-alpha Amazon Lambda Python Library - Packaging JJUG CCC 2022 Spring のタイムテーブル タイムテーブルが公開された。
タイムテーブルが公開されたみたい。2022/06/19 10:25〜 Track C #jjug_ccc_c でカスタム github actions の話しをします。よかったらご覧ください。スライド資料も主催のチェック完了後に公開予定です。https://t.co/AjP1aLt9EM
&amp;mdash; Tetsuya Morimoto (@t2y) May 26, 2022 私の前の発表が大橋さんという、一緒のチームでお仕事している方で github actions で運用している開発のワークフロー全般を改善したという話しをされる。その大半は私が設計して既存のワークフローを作り直したものなので応援している。改善の前後におけるワークフローの実行時間の比較や資料のレビューなども手伝っていて、私が主導してやったんだから内容についての責任は私にあると考えていろいろサポートしていた。おそらく github actions つながりで連続しているのかなと推測する。当初はお互いに送客すればいいかなと考えていたけど、普通のセッションの規定が厳しくて、スポンサーじゃなければ会社や製品の宣伝はダメという話しなので送客は断念した。</description><content>&lt;p>0時に寝て6時に起きて7時半に起きた。なんかバテバテ。&lt;/p>
&lt;h2 id="aws-lambda-python-alpha">aws-lambda-python-alpha&lt;/h2>
&lt;p>cdk 標準の lambda モジュールで python スクリプトをデプロイすることはもちろんできるが、その python スクリプト内でサードパーティのライブラリを使いたい場合、layer という機能を使って複数の lambda 関数で再利用するというのがもともとのやり方っぽい。とはいえ、サードパーティの依存ライブラリも python スクリプトによって使うものが違ったりするので lambda 関数単位に管理したいという場合もある。その要件を考慮した場合、python のパッケージングを lambda 関数のデプロイ時に再利用できるのが望ましくて、そのためのモジュールが aws-lambda-python-alpha になる。説明が長い。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.npmjs.com/package/@aws-cdk/aws-lambda-python-alpha">@aws-cdk/aws-lambda-python-alpha&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-lambda-python-alpha-readme.html#packaging">Amazon Lambda Python Library - Packaging&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="jjug-ccc-2022-spring-のタイムテーブル">JJUG CCC 2022 Spring のタイムテーブル&lt;/h2>
&lt;p>タイムテーブルが公開された。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">タイムテーブルが公開されたみたい。2022/06/19 10:25〜 Track C &lt;a href="https://twitter.com/hashtag/jjug_ccc_c?src=hash&amp;amp;ref_src=twsrc%5Etfw">#jjug_ccc_c&lt;/a> でカスタム github actions の話しをします。よかったらご覧ください。スライド資料も主催のチェック完了後に公開予定です。&lt;a href="https://t.co/AjP1aLt9EM">https://t.co/AjP1aLt9EM&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1529788493895188480?ref_src=twsrc%5Etfw">May 26, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>私の前の発表が大橋さんという、一緒のチームでお仕事している方で github actions で運用している開発のワークフロー全般を改善したという話しをされる。その大半は私が設計して既存のワークフローを作り直したものなので応援している。改善の前後におけるワークフローの実行時間の比較や資料のレビューなども手伝っていて、私が主導してやったんだから内容についての責任は私にあると考えていろいろサポートしていた。おそらく github actions つながりで連続しているのかなと推測する。当初はお互いに送客すればいいかなと考えていたけど、普通のセッションの規定が厳しくて、スポンサーじゃなければ会社や製品の宣伝はダメという話しなので送客は断念した。&lt;/p></content></item><item><title>severless framework vs cdk</title><link>/diary/posts/2022/0525/</link><pubDate>Wed, 25 May 2022 08:11:17 +0900</pubDate><guid>/diary/posts/2022/0525/</guid><description>22時に寝て1時に起きて5時半に起きた。前日はあまり寝てなかったので知らないうちに寝てしまった。
severless framework と cdk の比較 serverless framework というツールがある。マルチクラウド対応で aws で言えば lambda のような、サーバーレスのアプリケーションを簡単にデプロイするためのツール。よく使われているようで、私がお手伝いしている会社でも lambda 関数のデプロイにこのツールを使っている。いろいろ調べていたら、serverless framework は cdk と真正面から競合になるツールで、cdk をすでに使っているなら cdk に一元管理した方が保守コストが下がっていいだろうと考え、新たに lambda 関数を作る作業を cdk でやってみた。私はほとんど serverless framework を使ったことがないので正しく理解できていない可能性は高いが、ざっくり比較すると次になる。
serverless framework メリット
cdk より学習コストが低い yaml 設定だけで簡単にデプロイできる デメリット
リソース管理のための s3 バケットを必要とする lambda に関連するリソースしかデプロイできない 開発者が明示的に設定しなくても裏でリソースを勝手に生成するので意図せず適切に管理されていないインフラを作ってしまう懸念がある 大半の実務レベルのアプリケーションでは cf テンプレートの dsl を yaml に設定する必要があり、設定が煩雑になったり見通しが悪くなる cdk メリット
任意の aws インフラのリソースを管理できる プログラミング言語で記述できるので動的なリソースの依存関係を定義できる cf は裏に隠蔽されているが、serverless framework のような dsl を記述する必要はない デメリット
学習コストが高い リファレンス
AWS CDK vs Serverless Framework Serverless Framework vs SAM vs AWS CDK 結論から言うと、将来的に cdk を使うならまず cdk を使った方がよい。本当にシンプルな要件で lambda 関数のインフラしか扱わないなら serverless framework でもいいかもしれない。serverless framework は cdk がない時代に作られたツールだろうからいまから新規に導入する場合は、多少の学習コストを払っても cdk を学んでおけば、将来的に役に立つ場面が多いと思う。</description><content>&lt;p>22時に寝て1時に起きて5時半に起きた。前日はあまり寝てなかったので知らないうちに寝てしまった。&lt;/p>
&lt;h2 id="severless-framework-と-cdk-の比較">severless framework と cdk の比較&lt;/h2>
&lt;p>&lt;a href="https://www.serverless.com/">serverless framework&lt;/a> というツールがある。マルチクラウド対応で aws で言えば lambda のような、サーバーレスのアプリケーションを簡単にデプロイするためのツール。よく使われているようで、私がお手伝いしている会社でも lambda 関数のデプロイにこのツールを使っている。いろいろ調べていたら、serverless framework は cdk と真正面から競合になるツールで、cdk をすでに使っているなら cdk に一元管理した方が保守コストが下がっていいだろうと考え、新たに lambda 関数を作る作業を cdk でやってみた。私はほとんど serverless framework を使ったことがないので正しく理解できていない可能性は高いが、ざっくり比較すると次になる。&lt;/p>
&lt;h4 id="serverless-framework">serverless framework&lt;/h4>
&lt;p>メリット&lt;/p>
&lt;ul>
&lt;li>cdk より学習コストが低い&lt;/li>
&lt;li>yaml 設定だけで簡単にデプロイできる&lt;/li>
&lt;/ul>
&lt;p>デメリット&lt;/p>
&lt;ul>
&lt;li>リソース管理のための s3 バケットを必要とする&lt;/li>
&lt;li>lambda に関連するリソースしかデプロイできない&lt;/li>
&lt;li>開発者が明示的に設定しなくても裏でリソースを勝手に生成するので意図せず適切に管理されていないインフラを作ってしまう懸念がある&lt;/li>
&lt;li>大半の実務レベルのアプリケーションでは cf テンプレートの dsl を yaml に設定する必要があり、設定が煩雑になったり見通しが悪くなる&lt;/li>
&lt;/ul>
&lt;h4 id="cdk">cdk&lt;/h4>
&lt;p>メリット&lt;/p>
&lt;ul>
&lt;li>任意の aws インフラのリソースを管理できる&lt;/li>
&lt;li>プログラミング言語で記述できるので動的なリソースの依存関係を定義できる&lt;/li>
&lt;li>cf は裏に隠蔽されているが、serverless framework のような dsl を記述する必要はない&lt;/li>
&lt;/ul>
&lt;p>デメリット&lt;/p>
&lt;ul>
&lt;li>学習コストが高い&lt;/li>
&lt;/ul>
&lt;p>リファレンス&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.secjuice.com/aws-cdk-vs-serverless-framework/">AWS CDK vs Serverless Framework&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dev.to/tastefulelk/serverless-framework-vs-sam-vs-aws-cdk-1g9g">Serverless Framework vs SAM vs AWS CDK&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>結論から言うと、将来的に cdk を使うならまず cdk を使った方がよい。本当にシンプルな要件で lambda 関数のインフラしか扱わないなら serverless framework でもいいかもしれない。serverless framework は cdk がない時代に作られたツールだろうからいまから新規に導入する場合は、多少の学習コストを払っても cdk を学んでおけば、将来的に役に立つ場面が多いと思う。&lt;/p></content></item><item><title>法人として消費税を納めた</title><link>/diary/posts/2022/0524/</link><pubDate>Tue, 24 May 2022 01:14:51 +0900</pubDate><guid>/diary/posts/2022/0524/</guid><description>5時に寝て7時過ぎに起きた。前日の夜から法人決算の電子申告に取り組み始めた。本当は紙でやるつもりだったんだけど、eltax が快適だったので e-tax も衝動的にやってみたくなった。
消費税と地方消費税の申告 法人決算 の一部。今回が初めての消費税と地方消費税の申告になる。簡易課税で支払う。
消費税は、国税（国に納付する税金）であり消費税の納税義務がある事業者が納付します。地方消費税とは、 消費税と同様で商品の販売やサービスの提供などの取引にかかる税金 です。消費税との違いは、 地方消費税は国税ではなく地方税（都道府県や市町村に納付する税金）という点です。 しかし実際に納付するときは消費税と分けて納付はせずに、 消費税と一緒に地方消費税を所管税務署へ納付します。
消費税と地方消費税の違いは？納付対象者や納付方法、計算の仕方まで徹底解説！
freee で出力した書類をみながら e-tax の画面で同じ書類の項目を埋めていくだけの作業。1つだけバリデーションエラーが発生して、何度やり直しても数値は正しいようにみえるので無視して処理を継続することにした。メッセージにも値が正しければ継続してくださいと書いてあるのでバリデーションがバグっているのだろうと推測する。書類を作成して、署名して、送信して、納付情報が返ってきて、pay-easy で納付額を振り込む。1時間ほどで完了できた。
eks (k8s) から alb の管理 eks (k8s) に aws-load-balancer-controller をインストールすると k8s 上のリソースとして alb を管理できるようになる。
AWS Load Balancer Controller アドオンのインストール 具体的には k8s の Ingress と Nodepoint リソースから次の3つのリソースを生成してくれる。
application load balancer http listener target groups alb からのヘルスチェックは次のようにエンドポイントを記述する。spring boot だと Actuator という web api がヘルスチェックの機能を提供している。
alb.ingress.kubernetes.io/healthcheck-path: /actuator/health alb.ingress.kubernetes.io/scheme の設定で alb を配置するサブネットを指定できる。デフォルトは internal になる。
private subnet に配置するとき</description><content>&lt;p>5時に寝て7時過ぎに起きた。前日の夜から法人決算の電子申告に取り組み始めた。本当は紙でやるつもりだったんだけど、eltax が快適だったので e-tax も衝動的にやってみたくなった。&lt;/p>
&lt;h2 id="消費税と地方消費税の申告">消費税と地方消費税の申告&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0505/#法人決算">法人決算&lt;/a> の一部。今回が初めての消費税と地方消費税の申告になる。簡易課税で支払う。&lt;/p>
&lt;blockquote>
&lt;p>消費税は、国税（国に納付する税金）であり消費税の納税義務がある事業者が納付します。地方消費税とは、 &lt;strong>消費税と同様で商品の販売やサービスの提供などの取引にかかる税金&lt;/strong> です。消費税との違いは、 &lt;strong>地方消費税は国税ではなく地方税（都道府県や市町村に納付する税金）という点です。&lt;/strong> しかし実際に納付するときは消費税と分けて納付はせずに、 &lt;strong>消費税と一緒に地方消費税を所管税務署へ納付します。&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://biz.moneyforward.com/tax_return/basic/70/#i">消費税と地方消費税の違いは？納付対象者や納付方法、計算の仕方まで徹底解説！&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>freee で出力した書類をみながら e-tax の画面で同じ書類の項目を埋めていくだけの作業。1つだけバリデーションエラーが発生して、何度やり直しても数値は正しいようにみえるので無視して処理を継続することにした。メッセージにも値が正しければ継続してくださいと書いてあるのでバリデーションがバグっているのだろうと推測する。書類を作成して、署名して、送信して、納付情報が返ってきて、pay-easy で納付額を振り込む。1時間ほどで完了できた。&lt;/p>
&lt;h2 id="eks-k8s-から-alb-の管理">eks (k8s) から alb の管理&lt;/h2>
&lt;p>eks (k8s) に aws-load-balancer-controller をインストールすると k8s 上のリソースとして alb を管理できるようになる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.aws.amazon.com/ja_jp/eks/latest/userguide/aws-load-balancer-controller.html">AWS Load Balancer Controller アドオンのインストール&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>具体的には k8s の Ingress と Nodepoint リソースから次の3つのリソースを生成してくれる。&lt;/p>
&lt;ul>
&lt;li>application load balancer&lt;/li>
&lt;li>http listener&lt;/li>
&lt;li>target groups&lt;/li>
&lt;/ul>
&lt;p>alb からのヘルスチェックは次のようにエンドポイントを記述する。spring boot だと &lt;a href="https://docs.spring.io/spring-boot/docs/current/actuator-api/htmlsingle/">Actuator&lt;/a> という web api がヘルスチェックの機能を提供している。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">alb.ingress.kubernetes.io/healthcheck-path&lt;/span>: &lt;span style="color:#ae81ff">/actuator/health&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>alb.ingress.kubernetes.io/scheme&lt;/code> の設定で alb を配置するサブネットを指定できる。デフォルトは &lt;code>internal&lt;/code> になる。&lt;/p>
&lt;p>private subnet に配置するとき&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">alb.ingress.kubernetes.io/scheme&lt;/span>: &lt;span style="color:#ae81ff">internal&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>public subnet に配置するとき&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">alb.ingress.kubernetes.io/scheme&lt;/span>: &lt;span style="color:#ae81ff">internet-facing&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>aws のシステム構成図に挑戦</title><link>/diary/posts/2022/0523/</link><pubDate>Mon, 23 May 2022 23:15:10 +0900</pubDate><guid>/diary/posts/2022/0523/</guid><description>0時に寝て5時半に起きた。
draw.io を触ってみた 先週末から着手している インフラのドキュメント作成 の続き。aws のシステム構成図を書こうと思ったものの、書いたことがないので次の記事を読み始めた。
AWS のアーキテクチャ図を描きたい ! でもどうすれば良いの ? そこから AWS アーキテクチャアイコン のダイアグラム作成ツールとして紹介されているツールを一通りみてみた。書いたことがないのでどのツールを使えばいいのかすらわかっていない。見た目だけ比べればどれも似たり寄ったりで何でもいいやと思えた。既存の cdk コードからインポートして自動生成できるツールもあったけど、なんか出力結果がいまいちでそれよりは手で書いた方がいいように思えた。前任者は draw.io で書いていたので、それでいいかと思って draw.io を触り始めた。前任者はリポジトリに svg ファイルのみをコミットしていた。なぜ draw.io の web サイトのリンクがないのだろう？と不思議に思いつつ、draw.io でユーザーアカウントをどうやって作るのかを調べていて気付いた。draw.io って ui ですべて作図していてサーバー側に情報をもってないみたい。だからユーザーアカウントを作る必要もなくて、ブラウザを単なる gui のインターフェースにしているだけみたい。有償プランもユーザーが管理しているストレージに対するアクセス管理機能のようなものを提供している。先入観から web ベースのツールだと思い込んでいたので新鮮な気持ちになった。
前任者は web ブラウザも使っていなくて vscode の Draw.io Integration で書いたらしい。ui 側のロジックが再利用できるなら vscode でもブラウザで書くのと同じ品質レベルの操作ができるのだろうと推測する。vscode の方がローカルで書いている実感がわくかもしれない。svg ファイルをコミットしていたのも github の rich diff を使うと svg ファイルの画像差分も表示してくれるから。当初は xml でバージョン管理しようと思っていたんだけど、差分表示ができるなら svg ファイルでもいいと思えた。今日のところは draw.io を使おうということだけ決定した。
Draw.io（diagrams.net）で作成したインフラ構成図をコードで管理する、GitHubで編集差分を確認する</description><content>&lt;p>0時に寝て5時半に起きた。&lt;/p>
&lt;h2 id="drawio-を触ってみた">draw.io を触ってみた&lt;/h2>
&lt;p>先週末から着手している &lt;a href="/diary/diary/posts/2022/0519/#インフラのドキュメント作成">インフラのドキュメント作成&lt;/a> の続き。aws のシステム構成図を書こうと思ったものの、書いたことがないので次の記事を読み始めた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://aws.amazon.com/jp/builders-flash/202204/way-to-draw-architecture/">AWS のアーキテクチャ図を描きたい ! でもどうすれば良いの ?&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>そこから &lt;a href="https://aws.amazon.com/jp/architecture/icons/">AWS アーキテクチャアイコン&lt;/a> のダイアグラム作成ツールとして紹介されているツールを一通りみてみた。書いたことがないのでどのツールを使えばいいのかすらわかっていない。見た目だけ比べればどれも似たり寄ったりで何でもいいやと思えた。既存の cdk コードからインポートして自動生成できるツールもあったけど、なんか出力結果がいまいちでそれよりは手で書いた方がいいように思えた。前任者は &lt;a href="https://drawio-app.com/">draw.io&lt;/a> で書いていたので、それでいいかと思って draw.io を触り始めた。前任者はリポジトリに svg ファイルのみをコミットしていた。なぜ draw.io の web サイトのリンクがないのだろう？と不思議に思いつつ、draw.io でユーザーアカウントをどうやって作るのかを調べていて気付いた。draw.io って ui ですべて作図していてサーバー側に情報をもってないみたい。だからユーザーアカウントを作る必要もなくて、ブラウザを単なる gui のインターフェースにしているだけみたい。有償プランもユーザーが管理しているストレージに対するアクセス管理機能のようなものを提供している。先入観から web ベースのツールだと思い込んでいたので新鮮な気持ちになった。&lt;/p>
&lt;p>前任者は web ブラウザも使っていなくて vscode の &lt;a href="https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio">Draw.io Integration&lt;/a> で書いたらしい。ui 側のロジックが再利用できるなら vscode でもブラウザで書くのと同じ品質レベルの操作ができるのだろうと推測する。vscode の方がローカルで書いている実感がわくかもしれない。svg ファイルをコミットしていたのも github の rich diff を使うと svg ファイルの画像差分も表示してくれるから。当初は xml でバージョン管理しようと思っていたんだけど、差分表示ができるなら svg ファイルでもいいと思えた。今日のところは draw.io を使おうということだけ決定した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dev.classmethod.jp/articles/create-infrastructure-diagrams-in-drawio-diactamsnet-manage-them-in-code-and-github/">Draw.io（diagrams.net）で作成したインフラ構成図をコードで管理する、GitHubで編集差分を確認する&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>発表ビデオ提出</title><link>/diary/posts/2022/0522/</link><pubDate>Sun, 22 May 2022 10:48:35 +0900</pubDate><guid>/diary/posts/2022/0522/</guid><description>1時に寝て8時に起きた。疲れてだらだらしてた。
ビデオセッションの撮影 Widnows マシンで撮るか、Ubuntu で撮るかを迷ったあげく、Kazam Screencaster というツールを使って Ubuntu で撮ることにした。google docs のスライドをプレゼンター表示にして、メニューから全画面モードを選択すれば、プレゼン資料のノートをみながらフルスクリーンで画面に表示できる。そのフルスクリーン画面を kazam でキャプチャーする。kazam はシンプルなツールなので私の要件にも合致していてよかった。うちのシェアオフィスは壁が薄いので話し声などが隣に聞こえてしまう。発表のビデオ撮影をしていると、お隣さんからするとうるさくて迷惑をかけてしまうのでお隣さんが帰るのを待っていたら19時ぐらいになってしまった。19時から撮影を始めて内容を手直ししたり、失敗したりしながら3回ぐらい撮り直しをして完成させた。ビデオ撮影を1度やったので次にやるときはもっと要領よくできそうな気がする。ビデオ登壇は準備が楽そうだというのがわかってきたので今後も挑戦してみたい。
小規模企業共済と住民税 住民税は原則として原則として所属している会社が給与天引きで徴収して納めないといけない。これを特別徴収と呼ぶ。住民税の区切りは6月始まりなので、年に1回、5月に翌年の社員の住民税の通知が会社宛に届く。その通知には毎月徴収する住民税の金額が書いてある。2021年度は小規模企業共済による所得減額 が48万円ある。所得税も減るし住民税も減る。昨年から総所得金額は変わっていないので小規模企業共済の掛け金によって所得金額が少なくなっている。おそらくその分で37,300円の住民税が安くなった。現状は4万円/月で運用しているが、将来的に余裕ができてくれば掛け金を増やしてもいいのかもしれない。</description><content>&lt;p>1時に寝て8時に起きた。疲れてだらだらしてた。&lt;/p>
&lt;h2 id="ビデオセッションの撮影">ビデオセッションの撮影&lt;/h2>
&lt;p>Widnows マシンで撮るか、Ubuntu で撮るかを迷ったあげく、&lt;a href="https://launchpad.net/kazam">Kazam Screencaster&lt;/a> というツールを使って Ubuntu で撮ることにした。google docs のスライドをプレゼンター表示にして、メニューから全画面モードを選択すれば、プレゼン資料のノートをみながらフルスクリーンで画面に表示できる。そのフルスクリーン画面を kazam でキャプチャーする。kazam はシンプルなツールなので私の要件にも合致していてよかった。うちのシェアオフィスは壁が薄いので話し声などが隣に聞こえてしまう。発表のビデオ撮影をしていると、お隣さんからするとうるさくて迷惑をかけてしまうのでお隣さんが帰るのを待っていたら19時ぐらいになってしまった。19時から撮影を始めて内容を手直ししたり、失敗したりしながら3回ぐらい撮り直しをして完成させた。ビデオ撮影を1度やったので次にやるときはもっと要領よくできそうな気がする。ビデオ登壇は準備が楽そうだというのがわかってきたので今後も挑戦してみたい。&lt;/p>
&lt;h2 id="小規模企業共済と住民税">小規模企業共済と住民税&lt;/h2>
&lt;p>住民税は原則として原則として所属している会社が給与天引きで徴収して納めないといけない。これを特別徴収と呼ぶ。住民税の区切りは6月始まりなので、年に1回、5月に翌年の社員の住民税の通知が会社宛に届く。その通知には毎月徴収する住民税の金額が書いてある。&lt;a href="/diary/diary/posts/2022/0206/#2021年度の個人の確定申告">2021年度は小規模企業共済による所得減額&lt;/a> が48万円ある。所得税も減るし住民税も減る。昨年から総所得金額は変わっていないので小規模企業共済の掛け金によって所得金額が少なくなっている。おそらくその分で37,300円の住民税が安くなった。現状は4万円/月で運用しているが、将来的に余裕ができてくれば掛け金を増やしてもいいのかもしれない。&lt;/p></content></item><item><title>はっくばーに行ってきた</title><link>/diary/posts/2022/0521/</link><pubDate>Sat, 21 May 2022 09:42:53 +0900</pubDate><guid>/diary/posts/2022/0521/</guid><description>4時に寝て8時に起きた。昨日は遅くまで資料作りをしていてやや眠い。
ストレッチ トレーナーさんが代わってから3週目。だいぶ新しいトレーナーさんのストレッチにも慣れてきた。7割ぐらいは同じストレッチだけど、3割ぐらいは似て非なるもので指圧の掛け方や伸ばしている部位が微妙に違う。あとやり方も違う。トレーナーさんが代わったばかりのときはその微妙の違いに耐性がなくて調子が出なかったけど、少しずつ慣れてきたみたい。今日の開脚幅は開始前160cmで、ストレッチ後163cmだった。腰も右股関節もそれほど悪い状態でもなかった。トレーナーさんが言うには肩甲骨と骨盤周りがあまりよくないといった話だった。3月ぐらいから怠惰な日々が続いているのでそろそろ運動やストレッチも再開したい。
jjug のビデオ録画 昨日の続き。資料はできたのでその発表ビデオを撮らないといけない。イベントで発表するのにビデオを提出するのは私にとって初めての試み。まずビデオを撮ったことがないのでツールの使い方から分からない。リハーサルをやぎさんに手伝ってもらって Windows マシンで試しにやってみた。感謝。Windows の標準機能だとゲームバーという録画ツールが使える。ショートカットは Windows キー + G で起動する。ゲームのプレイ動画などを録画して sns にアップロードするようなツールみたい。撮ってみたら録画時間は21分だった。発表時間は15分なのでここから6分削ればよい。
はっくばー 近所にはっくばーが出来たのでそのプレオープンイベントに行ってきた。内装は普通のバーで4人席が4卓、カウンター席が5席ぐらいかな。こじんまりとした可もなく不可もなくな装いだった。2時間弱ほどいてビールとレモンサワーを飲んで支払いは2,000円だったので料金は普通と言えるだろう。プレオープンだからなんかイベント的なことやるのかな？と期待して行ったんだけど、とくに何もなくて、参加者同士がお酒を飲みながらわいわい話すだけのイベントだった。オーナーが挨拶するといったこともなかったし、どういった展望をもってはっくばーをやっているのかもわからなかった。参加者の中にはオーナーやその所属組織の関係者のコネで来ましたという人もちらほらいたので、どこかしらの技術コミュニティで盛り上がっているのかもしれない。
私は7人の参加者と話した。相対的に若い人が多かったようにみえた。youtuberのサロンでプログラミング勉強してますというフリーターの人とか、ベンチャー企業やってますみたいな人とか、普通の会社員の人とか、マイクロソフト社にお勤めの人とか、大学生でプログラミングの勉強してますとか、いろんな人がいて、話しを聞いてみて、私が普段関わっている業界の内容ではなかったのでそれはそれで楽しかった。若い人たちは twitter をフォローしてくださいと qr コードで相互フォローをお願いしていた。twitter に qr コードを表示する機能があったんだと初めて知った。しかし、私だけ鉄の意志でやらなかった。スマホに twitter アプリ入れてないし。私が普段参加している 三宮.dev というコミュニティがある。少し前にそこに参加された方がたまたまその場にいて、少し話してみて、その人は技術の話しをしたいのではなく、インフルエンサーになりたい人なんだなと感じた。twitter のフォロワーを集めるためにイベントやコミュニティに参加しているようにみえた。別にそれも悪いことではないけれど。
あと、たまたま私が話した人がそうだっただけかもしれないが、あるベンチャー企業の社長が2つの目的、仕事をもらうのと採用のためにここに来てますと話していて、それ自体は悪くないと思うのだけど、そういう人が来るところに私は行かないなと率直に感じた。プレオープンイベントに参加した雰囲気だと、異業種交流会のような性格が強かった。オーナーの関係者で〇〇の会社をやっていて協業できれば嬉しいですみたいな紹介があったりしたし、卓を囲む人同士で名刺交換しているのもみかけた。バーというのはそういう特性もあわせもっているのかもしれないけど、コミュニティではないなという印象を受けた。
神戸に IT 系の有名な会社やコミュニティはないよねというのは、私も感じている共通認識で、はっくばーがそういったコミュニティの役割になればいいんじゃないかと話す人もいた。一方で私はそうはならないだろうと思っている。相互協力のコミュニティというのはもちろん存在するけど、それはどちらかというとそうせざるを得ない事情があって成り立つ。神戸はまだまだ余裕のある都市なのでそんな様相にはならない。じゃあ、コミュニティはなにをもって形成されるかというとコンテンツ (そして、その先にある文化) だと私は考えている。コンテンツのないコミュニティに人は集まらない。
はっくばーが今後どういった活動をしていくのかはわからないけど、単なるビジネス出会い系の場だとしたら三ノ宮みたいな地方都市ではなく、東京や大阪のような大都市でやった方がうまくいく可能性は高いだろうと思う。東京の Hackers Bar がうまくいっているかどうかは知らないけど、東京ですらうまくいくかどうかわからないものを三ノ宮で成功させるのは難しいだろうという印象を私はもっている。</description><content>&lt;p>4時に寝て8時に起きた。昨日は遅くまで資料作りをしていてやや眠い。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>トレーナーさんが代わってから3週目。だいぶ新しいトレーナーさんのストレッチにも慣れてきた。7割ぐらいは同じストレッチだけど、3割ぐらいは似て非なるもので指圧の掛け方や伸ばしている部位が微妙に違う。あとやり方も違う。トレーナーさんが代わったばかりのときはその微妙の違いに耐性がなくて調子が出なかったけど、少しずつ慣れてきたみたい。今日の開脚幅は開始前160cmで、ストレッチ後163cmだった。腰も右股関節もそれほど悪い状態でもなかった。トレーナーさんが言うには肩甲骨と骨盤周りがあまりよくないといった話だった。3月ぐらいから怠惰な日々が続いているのでそろそろ運動やストレッチも再開したい。&lt;/p>
&lt;h2 id="jjug-のビデオ録画">jjug のビデオ録画&lt;/h2>
&lt;p>昨日の続き。資料はできたのでその発表ビデオを撮らないといけない。イベントで発表するのにビデオを提出するのは私にとって初めての試み。まずビデオを撮ったことがないのでツールの使い方から分からない。リハーサルをやぎさんに手伝ってもらって Windows マシンで試しにやってみた。感謝。Windows の標準機能だとゲームバーという録画ツールが使える。ショートカットは Windows キー + G で起動する。ゲームのプレイ動画などを録画して sns にアップロードするようなツールみたい。撮ってみたら録画時間は21分だった。発表時間は15分なのでここから6分削ればよい。&lt;/p>
&lt;h2 id="はっくばー">はっくばー&lt;/h2>
&lt;p>近所にはっくばーが出来たのでそのプレオープンイベントに行ってきた。内装は普通のバーで4人席が4卓、カウンター席が5席ぐらいかな。こじんまりとした可もなく不可もなくな装いだった。2時間弱ほどいてビールとレモンサワーを飲んで支払いは2,000円だったので料金は普通と言えるだろう。プレオープンだからなんかイベント的なことやるのかな？と期待して行ったんだけど、とくに何もなくて、参加者同士がお酒を飲みながらわいわい話すだけのイベントだった。オーナーが挨拶するといったこともなかったし、どういった展望をもってはっくばーをやっているのかもわからなかった。参加者の中にはオーナーやその所属組織の関係者のコネで来ましたという人もちらほらいたので、どこかしらの技術コミュニティで盛り上がっているのかもしれない。&lt;/p>
&lt;p>私は7人の参加者と話した。相対的に若い人が多かったようにみえた。youtuberのサロンでプログラミング勉強してますというフリーターの人とか、ベンチャー企業やってますみたいな人とか、普通の会社員の人とか、マイクロソフト社にお勤めの人とか、大学生でプログラミングの勉強してますとか、いろんな人がいて、話しを聞いてみて、私が普段関わっている業界の内容ではなかったのでそれはそれで楽しかった。若い人たちは twitter をフォローしてくださいと qr コードで相互フォローをお願いしていた。twitter に qr コードを表示する機能があったんだと初めて知った。しかし、私だけ鉄の意志でやらなかった。スマホに twitter アプリ入れてないし。私が普段参加している &lt;a href="https://sannomiya.dev/">三宮.dev&lt;/a> というコミュニティがある。少し前にそこに参加された方がたまたまその場にいて、少し話してみて、その人は技術の話しをしたいのではなく、インフルエンサーになりたい人なんだなと感じた。twitter のフォロワーを集めるためにイベントやコミュニティに参加しているようにみえた。別にそれも悪いことではないけれど。&lt;/p>
&lt;p>あと、たまたま私が話した人がそうだっただけかもしれないが、あるベンチャー企業の社長が2つの目的、仕事をもらうのと採用のためにここに来てますと話していて、それ自体は悪くないと思うのだけど、そういう人が来るところに私は行かないなと率直に感じた。プレオープンイベントに参加した雰囲気だと、異業種交流会のような性格が強かった。オーナーの関係者で〇〇の会社をやっていて協業できれば嬉しいですみたいな紹介があったりしたし、卓を囲む人同士で名刺交換しているのもみかけた。バーというのはそういう特性もあわせもっているのかもしれないけど、コミュニティではないなという印象を受けた。&lt;/p>
&lt;p>神戸に IT 系の有名な会社やコミュニティはないよねというのは、私も感じている共通認識で、はっくばーがそういったコミュニティの役割になればいいんじゃないかと話す人もいた。一方で私はそうはならないだろうと思っている。相互協力のコミュニティというのはもちろん存在するけど、それはどちらかというとそうせざるを得ない事情があって成り立つ。神戸はまだまだ余裕のある都市なのでそんな様相にはならない。じゃあ、コミュニティはなにをもって形成されるかというとコンテンツ (そして、その先にある文化) だと私は考えている。コンテンツのないコミュニティに人は集まらない。&lt;/p>
&lt;p>はっくばーが今後どういった活動をしていくのかはわからないけど、単なるビジネス出会い系の場だとしたら三ノ宮みたいな地方都市ではなく、東京や大阪のような大都市でやった方がうまくいく可能性は高いだろうと思う。東京の &lt;a href="https://hackers.bar/">Hackers Bar&lt;/a> がうまくいっているかどうかは知らないけど、東京ですらうまくいくかどうかわからないものを三ノ宮で成功させるのは難しいだろうという印象を私はもっている。&lt;/p></content></item><item><title>他社のお仕事半分、自社のお仕事半分</title><link>/diary/posts/2022/0520/</link><pubDate>Fri, 20 May 2022 15:23:55 +0900</pubDate><guid>/diary/posts/2022/0520/</guid><description>なんか22時ぐらいから寝たり起きたりを繰り返して7時に起きた。午前中はお手伝い先のドキュメント作成やレビューを行い、午後から自社の事務手続きなどをしていた。
法人決算の手続き 決算そのものはすでに完了しているのだけど、申告手続きをまだ終えていない。本気を出せば1日で終わるのがわかっているのでだらだら先延ばししていた。今回は地方自治体への納税手続きを eltax でやってみることに決めていた。先延ばしにしていた理由の1つとして eltax が土日祝は運用していない。平日は24時まで運用しているので、平日にお仕事を終えてからやればいいのだけど、なんか気乗りしなくて先送りしていた。神戸市に対して法人市民税を、兵庫県に対して法人県民税、法人事業税、特別法人事業税の申告を行う。eltax の画面は実際の書類様式とまったく同じ画面で入力するため、書類作成を知っている人には何も難しくない。前回の書類をみながら必要な入力欄に今回の値を入力していくだけの作業。作成後にプリンターで印刷すれば書類も手に入る。今回の納税手続きは eltax で初めて触る画面を操作したのだけど、2時間もあれば2つの申告手続きを終えられた。1度誤った内容で申告したので再申告もした。後優先になってくれることを願う。言うても簡単ではある。昨年まではこれらの申告のために電車で3駅離れた庁舎へ出向いていたが、今後はそうする必要はなさそうだ。一方で申告手続きを含めてもオフィスからの庁舎の往復に2時間もかからないのも事実ではあるが。
jjug の発表資料作り Ševarika™ というデザイナーさんに スライドマスターの作成 を4月30日に依頼して5月19日に納品された。納期は1ヶ月程度を見込んでいたのに早く仕上げてくれた。こちらから急かしたわけではない。ちょうど JJUG CCC 2022 Spring の発表ビデオの提出期限が5月19日で間に合えばいいなぁぐらいの感覚で静観していて、ちょうど同じ時期に納品できそうだったので、jjug のスタッフさんに発表ビデオの提出期限を週末まで待ってもらうようにお願いしていた。私は自社のロゴをめちゃくちゃ気に入っているんだけど、同じデザイナーさんに作ってもらったスライドマスターのデザインもやはりめちゃくちゃ気に入っている。今後うちの会社が儲かってお金に余裕ができたら Ševarika™ さんにもっと色んなものをデザインしてもらおうと思うようになった。いつになるかはわからんが。
発表のコンテンツのアウトラインは八割ほどは事前に作っていた。新しいスライドデザインに配置したり、レイアウトを調整したり、デザインとのバランスを考えたりすることに主に時間を費やした。20時ぐらいから始めて2時ぐらいまでやっていた。ここ1-2週間、19時以降にオフィスで居残り作業みたいなことをやってなくて、なんかだらだらしていた。コンテキストスイッチを切り替えてやるぞとなったら集中して6時間ほど作業できた。それで気付いたんだけど、私は毎日大量のお仕事をすることがあまり得意ではない。平均ぐらいに毎日コツコツ積み重ねるのはできるけど、それ以上のパフォーマンスを出す爆発力にはメリハリがいる。いまは構想1ヶ月、実装2日みたいな作業のやり方になる。そのうちの2日は18時間/日ぐらい没頭しているみたいな。昔からそうだったのか、加齢で体力が落ちたせいかわからないけど、メリハリのある働き方が自分には向いていることを再認識した。</description><content>&lt;p>なんか22時ぐらいから寝たり起きたりを繰り返して7時に起きた。午前中はお手伝い先のドキュメント作成やレビューを行い、午後から自社の事務手続きなどをしていた。&lt;/p>
&lt;h2 id="法人決算の手続き">法人決算の手続き&lt;/h2>
&lt;p>決算そのものはすでに完了しているのだけど、申告手続きをまだ終えていない。本気を出せば1日で終わるのがわかっているのでだらだら先延ばししていた。今回は地方自治体への納税手続きを &lt;a href="https://www.eltax.lta.go.jp/">eltax&lt;/a> でやってみることに決めていた。先延ばしにしていた理由の1つとして eltax が土日祝は運用していない。平日は24時まで運用しているので、平日にお仕事を終えてからやればいいのだけど、なんか気乗りしなくて先送りしていた。神戸市に対して法人市民税を、兵庫県に対して法人県民税、法人事業税、特別法人事業税の申告を行う。eltax の画面は実際の書類様式とまったく同じ画面で入力するため、書類作成を知っている人には何も難しくない。前回の書類をみながら必要な入力欄に今回の値を入力していくだけの作業。作成後にプリンターで印刷すれば書類も手に入る。今回の納税手続きは eltax で初めて触る画面を操作したのだけど、2時間もあれば2つの申告手続きを終えられた。1度誤った内容で申告したので再申告もした。後優先になってくれることを願う。言うても簡単ではある。昨年まではこれらの申告のために電車で3駅離れた庁舎へ出向いていたが、今後はそうする必要はなさそうだ。一方で申告手続きを含めてもオフィスからの庁舎の往復に2時間もかからないのも事実ではあるが。&lt;/p>
&lt;h2 id="jjug-の発表資料作り">jjug の発表資料作り&lt;/h2>
&lt;p>&lt;a href="https://99designs.jp/profiles/dsevarika">Ševarika™&lt;/a> というデザイナーさんに &lt;a href="/diary/diary/posts/2022/0509/#スライドマスターのデザイン作成">スライドマスターの作成&lt;/a> を4月30日に依頼して5月19日に納品された。納期は1ヶ月程度を見込んでいたのに早く仕上げてくれた。こちらから急かしたわけではない。ちょうど &lt;a href="/diary/diary/posts/2022/0402/#jjug-ccc-2022-spring-の-cfp-応募">JJUG CCC 2022 Spring&lt;/a> の発表ビデオの提出期限が5月19日で間に合えばいいなぁぐらいの感覚で静観していて、ちょうど同じ時期に納品できそうだったので、jjug のスタッフさんに発表ビデオの提出期限を週末まで待ってもらうようにお願いしていた。私は自社のロゴをめちゃくちゃ気に入っているんだけど、同じデザイナーさんに作ってもらったスライドマスターのデザインもやはりめちゃくちゃ気に入っている。今後うちの会社が儲かってお金に余裕ができたら Ševarika™ さんにもっと色んなものをデザインしてもらおうと思うようになった。いつになるかはわからんが。&lt;/p>
&lt;p>発表のコンテンツのアウトラインは八割ほどは事前に作っていた。新しいスライドデザインに配置したり、レイアウトを調整したり、デザインとのバランスを考えたりすることに主に時間を費やした。20時ぐらいから始めて2時ぐらいまでやっていた。ここ1-2週間、19時以降にオフィスで居残り作業みたいなことをやってなくて、なんかだらだらしていた。コンテキストスイッチを切り替えてやるぞとなったら集中して6時間ほど作業できた。それで気付いたんだけど、私は毎日大量のお仕事をすることがあまり得意ではない。平均ぐらいに毎日コツコツ積み重ねるのはできるけど、それ以上のパフォーマンスを出す爆発力にはメリハリがいる。いまは構想1ヶ月、実装2日みたいな作業のやり方になる。そのうちの2日は18時間/日ぐらい没頭しているみたいな。昔からそうだったのか、加齢で体力が落ちたせいかわからないけど、メリハリのある働き方が自分には向いていることを再認識した。&lt;/p></content></item><item><title>ドキュメントをちゃんと書く</title><link>/diary/posts/2022/0519/</link><pubDate>Thu, 19 May 2022 13:33:49 +0900</pubDate><guid>/diary/posts/2022/0519/</guid><description>20時に寝て22時に起きて、それから作業して3時に寝て6時に起きた。
インフラのドキュメント作成 今日からインフラのドキュメント作成に着手した。4月から1ヶ月以上に渡って インフラエンジニア のようなお仕事をしていた。具体的には新しい環境のインフラ構築、ならびに既存インフラのリファクタリングというよりは再構築といった作業をしていた。約1ヶ月で大きなインフラのタスクは完了して、その後もこれまで cdk 管理していなかったインフラリソースの管理なども含め、より再現可能な管理されたインフラとなるように改善してきた。それもだいたい終えてきたので、そろそろ他の開発者にも引き継げるようにドキュメントを書くことにした。私以外は若い開発者が多いせいか、cdk/cf の知識というよりもインフラそのもののやネットワークの知識が少ないメンバーが多い。そういった運用経験の浅い開発者にも適切な教育が行えるよう、ドキュメントやチュートリアルなどを書いていく。数日ぐらいかけてしっかり書いてから勉強会を開催する。それをもって引き継ぎしていくかなぁ。
私が前任者から引き継いだ README に helm の説明が次のように書かれてた。
まず helm がわかってない人はググってくること。
こんな README を私はみたことなくて書いている人が訳分からず作業しているんだなという印象を受けた。私が書くドキュメントには cdk とは何か？から説明している。もちろん aws のドキュメントをすべて読めばよいのだが、それはコストがかかる。私の経験と私が理解した cdk の概念を簡潔に、なるべく自分たちの業務にとって大事なことを要約して書くことに意義があると私は考えている。README にググれみたいなことを書いて誰もなにも言わない開発文化を改善していきたい。</description><content>&lt;p>20時に寝て22時に起きて、それから作業して3時に寝て6時に起きた。&lt;/p>
&lt;h2 id="インフラのドキュメント作成">インフラのドキュメント作成&lt;/h2>
&lt;p>今日からインフラのドキュメント作成に着手した。4月から1ヶ月以上に渡って &lt;a href="/diary/diary/posts/2022/0405/">インフラエンジニア&lt;/a> のようなお仕事をしていた。具体的には新しい環境のインフラ構築、ならびに既存インフラのリファクタリングというよりは再構築といった作業をしていた。約1ヶ月で大きなインフラのタスクは完了して、その後もこれまで cdk 管理していなかったインフラリソースの管理なども含め、より再現可能な管理されたインフラとなるように改善してきた。それもだいたい終えてきたので、そろそろ他の開発者にも引き継げるようにドキュメントを書くことにした。私以外は若い開発者が多いせいか、cdk/cf の知識というよりもインフラそのもののやネットワークの知識が少ないメンバーが多い。そういった運用経験の浅い開発者にも適切な教育が行えるよう、ドキュメントやチュートリアルなどを書いていく。数日ぐらいかけてしっかり書いてから勉強会を開催する。それをもって引き継ぎしていくかなぁ。&lt;/p>
&lt;p>私が前任者から引き継いだ README に helm の説明が次のように書かれてた。&lt;/p>
&lt;blockquote>
&lt;p>まず helm がわかってない人はググってくること。&lt;/p>
&lt;/blockquote>
&lt;p>こんな README を私はみたことなくて書いている人が訳分からず作業しているんだなという印象を受けた。私が書くドキュメントには cdk とは何か？から説明している。もちろん aws のドキュメントをすべて読めばよいのだが、それはコストがかかる。私の経験と私が理解した cdk の概念を簡潔に、なるべく自分たちの業務にとって大事なことを要約して書くことに意義があると私は考えている。README にググれみたいなことを書いて誰もなにも言わない開発文化を改善していきたい。&lt;/p></content></item><item><title>cdk のビルドが難しい話し</title><link>/diary/posts/2022/0518/</link><pubDate>Wed, 18 May 2022 09:55:29 +0900</pubDate><guid>/diary/posts/2022/0518/</guid><description>0時に寝て6時半に起きた。暑くなってきたせいかバテ気味。水曜日は本番リリースの日。3つほど本場環境のインフラ移行作業があったので社員さんの実作業をリモートから指示しながらサポートしていた。私に本番環境の操作権限があれば、この工数はほぼ半分に削減できる。
cdk のパッチ検証 先日 cdk による eks クラスターの helm 管理の調査中断 について書いた。バグっているから適切な設定が反映されないという話しで一時中断していたんだけど、そのときにクラスメソッドの担当者さんとも相談していた。そしたら、その担当者さんが問題を修正して pr を送ってくれた。感謝。
fix(eks): Cluster.FromClusterAttributes ignores KubectlLambdaRole #20373 そこまでやってくれると思ってなかったのですごいなぁと感心しながら、せっかくなのでパッチを当てた cdk で検証してみようと、Contributing to the AWS Cloud Development Kit をみながらローカルでのビルドを試みた。ビルド自体はできたんだけど、パッケージを作るのがうまくいかなくて、cdk はツール自体が大きいので実行時間がかかる。だいたいビルドやパッケージングのそれぞれに20-30分ぐらいかかる。エラーの原因がよく分からなくて面倒になって断念した。私が javascript のパッケージングに疎いせいもあると思うけど、ドキュメントに書いてある通りにうまくいかなかったので早々に諦めた。</description><content>&lt;p>0時に寝て6時半に起きた。暑くなってきたせいかバテ気味。水曜日は本番リリースの日。3つほど本場環境のインフラ移行作業があったので社員さんの実作業をリモートから指示しながらサポートしていた。私に本番環境の操作権限があれば、この工数はほぼ半分に削減できる。&lt;/p>
&lt;h2 id="cdk-のパッチ検証">cdk のパッチ検証&lt;/h2>
&lt;p>先日 &lt;a href="/diary/diary/posts/2022/0516/#eks-クラスターの-helm-管理の調査">cdk による eks クラスターの helm 管理の調査中断&lt;/a> について書いた。バグっているから適切な設定が反映されないという話しで一時中断していたんだけど、そのときにクラスメソッドの担当者さんとも相談していた。そしたら、その担当者さんが問題を修正して pr を送ってくれた。感謝。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/aws/aws-cdk/pull/20373">fix(eks): Cluster.FromClusterAttributes ignores KubectlLambdaRole #20373&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>そこまでやってくれると思ってなかったのですごいなぁと感心しながら、せっかくなのでパッチを当てた cdk で検証してみようと、&lt;a href="https://github.com/aws/aws-cdk/blob/master/CONTRIBUTING.md">Contributing to the AWS Cloud Development Kit&lt;/a> をみながらローカルでのビルドを試みた。ビルド自体はできたんだけど、パッケージを作るのがうまくいかなくて、cdk はツール自体が大きいので実行時間がかかる。だいたいビルドやパッケージングのそれぞれに20-30分ぐらいかかる。エラーの原因がよく分からなくて面倒になって断念した。私が javascript のパッケージングに疎いせいもあると思うけど、ドキュメントに書いてある通りにうまくいかなかったので早々に諦めた。&lt;/p></content></item><item><title>datadog のログアーカイブ</title><link>/diary/posts/2022/0517/</link><pubDate>Tue, 17 May 2022 11:11:11 +0900</pubDate><guid>/diary/posts/2022/0517/</guid><description>1時に寝て5時半に起きた。
datadog のログアーカイブ datadog には Log Archives という機能があって、datadog 経由でログをどこかのストレージに永続化できる。datadog プラットフォーム上では設定した期間内のログしか検索できず、おそらく料金の予算にあわせて期間を設定して、それが過ぎたら消えていくのだと思う。aws なら s3 に datadog に連携されたログをパイプライン処理してそのまま永続化できる。そのための s3 バケットの作成、s3 バケットへの datadog からのアクセス権限ロールの設定、datadog の aws インテグレーションの設定などをした。ドキュメントを読みながら1日あれば設定できたので難しくはない。もう cdk の設定にも慣れた感じで必要な権限を cdk の Stack としてコードで管理できるようにした。保守もばっちり。永続化されるログは gzip 圧縮されて時系列に s3 に永続化されるみたい。</description><content>&lt;p>1時に寝て5時半に起きた。&lt;/p>
&lt;h2 id="datadog-のログアーカイブ">datadog のログアーカイブ&lt;/h2>
&lt;p>datadog には &lt;a href="https://docs.datadoghq.com/logs/log_configuration/archives/?tab=awss3">Log Archives&lt;/a> という機能があって、datadog 経由でログをどこかのストレージに永続化できる。datadog プラットフォーム上では設定した期間内のログしか検索できず、おそらく料金の予算にあわせて期間を設定して、それが過ぎたら消えていくのだと思う。aws なら s3 に datadog に連携されたログをパイプライン処理してそのまま永続化できる。そのための s3 バケットの作成、s3 バケットへの datadog からのアクセス権限ロールの設定、datadog の aws インテグレーションの設定などをした。ドキュメントを読みながら1日あれば設定できたので難しくはない。もう cdk の設定にも慣れた感じで必要な権限を cdk の Stack としてコードで管理できるようにした。保守もばっちり。永続化されるログは gzip 圧縮されて時系列に s3 に永続化されるみたい。&lt;/p></content></item><item><title>helm 調査の一時中断</title><link>/diary/posts/2022/0516/</link><pubDate>Mon, 16 May 2022 08:31:44 +0900</pubDate><guid>/diary/posts/2022/0516/</guid><description>0時に寝て6時半に起きた。
eks クラスターの helm 管理の調査 先週から調査 していて、調査結果から kubectlRoleArn を生成してデプロイを実行してみた。以前発生していた権限エラーは解消したものの、lambda 内からの kubectl と k8s クラスターの認証に失敗する。もう1つ kubectlLambdaRole という設定もあるので、ここに system:masters 権限をもつ iam ロールを設定してみたものの、エラー結果は変わらない。お手上げかなと思ってたら aws-eks: Cluster.FromClusterAttributes ignores KubectlLambdaRole #20008 という issue があって、まさにいま起こっている現象と合致するのでこのせいかもしれない。cdk のバグならそれが解消しないと検証を進められないため、この調査は一旦打ち切って、cdk のバグが修正されて新しいバージョンがリリースされてから再試行することに決めた。
backlog のいろいろ たまたまタイムラインでスライドをみかけて、backlog の開発をしている方の記事をみつけた。scala と play framework で実装されているらしい。もう10年以上開発しているプロダクトなのかな。それ自体はすごいなぁと感心しながらスライドを眺めてた。
ヌーラボ入社後に書いたブログ記事＆プレゼン資料まとめ</description><content>&lt;p>0時に寝て6時半に起きた。&lt;/p>
&lt;h2 id="eks-クラスターの-helm-管理の調査">eks クラスターの helm 管理の調査&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0513/#eks-クラスターの-helm-管理の調査">先週から調査&lt;/a> していて、調査結果から &lt;code>kubectlRoleArn&lt;/code> を生成してデプロイを実行してみた。以前発生していた権限エラーは解消したものの、lambda 内からの kubectl と k8s クラスターの認証に失敗する。もう1つ &lt;code>kubectlLambdaRole&lt;/code> という設定もあるので、ここに &lt;code>system:masters&lt;/code> 権限をもつ iam ロールを設定してみたものの、エラー結果は変わらない。お手上げかなと思ってたら &lt;a href="https://github.com/aws/aws-cdk/issues/20008">aws-eks: Cluster.FromClusterAttributes ignores KubectlLambdaRole #20008&lt;/a> という issue があって、まさにいま起こっている現象と合致するのでこのせいかもしれない。cdk のバグならそれが解消しないと検証を進められないため、この調査は一旦打ち切って、cdk のバグが修正されて新しいバージョンがリリースされてから再試行することに決めた。&lt;/p>
&lt;h2 id="backlog-のいろいろ">backlog のいろいろ&lt;/h2>
&lt;p>たまたまタイムラインでスライドをみかけて、backlog の開発をしている方の記事をみつけた。scala と play framework で実装されているらしい。もう10年以上開発しているプロダクトなのかな。それ自体はすごいなぁと感心しながらスライドを眺めてた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://muziyoshiz.hatenablog.com/entry/2021/08/28/154859">ヌーラボ入社後に書いたブログ記事＆プレゼン資料まとめ&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>オフラインのもくもく会</title><link>/diary/posts/2022/0515/</link><pubDate>Sun, 15 May 2022 08:15:01 +0900</pubDate><guid>/diary/posts/2022/0515/</guid><description>6時半に起きて漫画読んで8時に起きた。
ワーケーションの打ち合わせ 参加者で ワーケーションのリトライ の最終確認ならびに共有事項の打ち合わせをした。今回は3回目のワクチン接種をし終えたばかりだし、オミクロン株も一応は収束したみたいな雰囲気になっているので延期することはないはず。旅程の確認を一通りしつつ、少し雑談していた。今後の開発合宿のような取り組みをコミュニティでやるのか、会社でやるのかはまだわからないけど、そういう取り組みも非日常の刺激を受ける機会だったり、普段やらないことでなにか新しい価値を見い出す行動だったりにつなげられればと考えている。今回はそのためのリハーサルなのでたくさん失敗しつつノウハウを溜めていきたい。
もくもく会 【三宮.dev】もくもく会 に参加した。オフライン開催で参加者は6人。他者と雑談しながら作業するというのを、久しぶりにやった感じだった。私は jjug ccc 2022 spring の資料作りをしていた。骨子レベルの内容はだいたいできたので後はスライド資料を作り込むだけ。今回はビデオ撮影を事前しないといけないのが初めての試み。でも、当日は質疑応答だけでよいから楽になってこれはこれで有りだとは思う。終わってからワーケーションの参加者3人で軽く飲みに行ってきた。勉強会へ行って飲み会でわいわいやって帰るみたいな昔の勉強会の雰囲気に戻った感じがして懐かしかった。地域コミュニティはこういうつながりもあっていいと思う。バックエンド周りのバッチ処理の最適化で話題になったときに「私を雇え、値段は高いけど」と宣伝したりもしてた。自分の会社をやっていると、こういうノリでお仕事がきてもまぁいっかみたいな気持ちになれるからそれも含めて楽しい。</description><content>&lt;p>6時半に起きて漫画読んで8時に起きた。&lt;/p>
&lt;h2 id="ワーケーションの打ち合わせ">ワーケーションの打ち合わせ&lt;/h2>
&lt;p>参加者で &lt;a href="/diary/diary/posts/2022/0422/#ワーケーションのリトライ">ワーケーションのリトライ&lt;/a> の最終確認ならびに共有事項の打ち合わせをした。今回は3回目のワクチン接種をし終えたばかりだし、オミクロン株も一応は収束したみたいな雰囲気になっているので延期することはないはず。旅程の確認を一通りしつつ、少し雑談していた。今後の開発合宿のような取り組みをコミュニティでやるのか、会社でやるのかはまだわからないけど、そういう取り組みも非日常の刺激を受ける機会だったり、普段やらないことでなにか新しい価値を見い出す行動だったりにつなげられればと考えている。今回はそのためのリハーサルなのでたくさん失敗しつつノウハウを溜めていきたい。&lt;/p>
&lt;h2 id="もくもく会">もくもく会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/246658/">【三宮.dev】もくもく会&lt;/a> に参加した。オフライン開催で参加者は6人。他者と雑談しながら作業するというのを、久しぶりにやった感じだった。私は jjug ccc 2022 spring の資料作りをしていた。骨子レベルの内容はだいたいできたので後はスライド資料を作り込むだけ。今回はビデオ撮影を事前しないといけないのが初めての試み。でも、当日は質疑応答だけでよいから楽になってこれはこれで有りだとは思う。終わってからワーケーションの参加者3人で軽く飲みに行ってきた。勉強会へ行って飲み会でわいわいやって帰るみたいな昔の勉強会の雰囲気に戻った感じがして懐かしかった。地域コミュニティはこういうつながりもあっていいと思う。バックエンド周りのバッチ処理の最適化で話題になったときに「私を雇え、値段は高いけど」と宣伝したりもしてた。自分の会社をやっていると、こういうノリでお仕事がきてもまぁいっかみたいな気持ちになれるからそれも含めて楽しい。&lt;/p></content></item><item><title>漫画ばかり読んでる</title><link>/diary/posts/2022/0514/</link><pubDate>Sat, 14 May 2022 12:11:35 +0900</pubDate><guid>/diary/posts/2022/0514/</guid><description>漫画を読みながら寝て5時半に起きて漫画読んで8時に起きた。今日はほとんど漫画読んでた。
ストレッチ 今週は漫画ばかり読んでいたせいか、体が硬くなってしまっていた。今日の開脚幅は開始前153cmで、ストレッチ後158cmだった。今週は雨降りの日が多くて徒歩通勤する機会が多かった。普段よりは運動したような気はしていたけど、ストレッチの数値はよくなかった。疲労度は腰がもっとも蓄積していて、肩甲骨周りも相変わらず硬い。ベッドで漫画ばかり読んでたから不健康になってしまったのかもしれない。
神之塔 先週ぐらいから 神之塔 を読み始めた。少し前 (と言っても2年前) に アニメ化 されていて、当時たまたまみたらおもしろかったので印象に残っていた。一言でこの作品を表すと「基本的に訳がわからないのだけど、おもしろい」といったところ。私は普段 LINE を使っていないので LINE と密接なアプリやプラットフォームも使っていない。神之塔は LINE マンガでしか読めないみたいなのでこの漫画を読むために仕方なくインストールした。通常は1日1話しか無料で読めないけど、なにかのキャンペーン期間中は100話ぐらい無料で読めたりする。数日前からキャンペーン期間になっているので読んでいて疲れたら寝て起きたら読むみたいな生活をしている。300話まで読んだ。50話から100話ぐらいで1つのエピソードが終わるのでテンポもいい。おもしろい。</description><content>&lt;p>漫画を読みながら寝て5時半に起きて漫画読んで8時に起きた。今日はほとんど漫画読んでた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週は漫画ばかり読んでいたせいか、体が硬くなってしまっていた。今日の開脚幅は開始前153cmで、ストレッチ後158cmだった。今週は雨降りの日が多くて徒歩通勤する機会が多かった。普段よりは運動したような気はしていたけど、ストレッチの数値はよくなかった。疲労度は腰がもっとも蓄積していて、肩甲骨周りも相変わらず硬い。ベッドで漫画ばかり読んでたから不健康になってしまったのかもしれない。&lt;/p>
&lt;h2 id="神之塔">神之塔&lt;/h2>
&lt;p>先週ぐらいから &lt;a href="https://manga.line.me/product/periodic?id=Z0000197">神之塔&lt;/a> を読み始めた。少し前 (と言っても2年前) に &lt;a href="https://tog-anime.com/">アニメ化&lt;/a> されていて、当時たまたまみたらおもしろかったので印象に残っていた。一言でこの作品を表すと「基本的に訳がわからないのだけど、おもしろい」といったところ。私は普段 LINE を使っていないので LINE と密接なアプリやプラットフォームも使っていない。神之塔は LINE マンガでしか読めないみたいなのでこの漫画を読むために仕方なくインストールした。通常は1日1話しか無料で読めないけど、なにかのキャンペーン期間中は100話ぐらい無料で読めたりする。数日前からキャンペーン期間になっているので読んでいて疲れたら寝て起きたら読むみたいな生活をしている。300話まで読んだ。50話から100話ぐらいで1つのエピソードが終わるのでテンポもいい。おもしろい。&lt;/p></content></item><item><title>マーケティング施策の取り組み開始</title><link>/diary/posts/2022/0513/</link><pubDate>Fri, 13 May 2022 08:42:18 +0900</pubDate><guid>/diary/posts/2022/0513/</guid><description>23時に寝て1時に起きて漫画を読んで6時に起きて漫画読んでた。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今日の議題は 先日作成した第4期の展望 について雑談した。あまり深く考えずに起業して初期の頃に作った10ヶ年計画に対してわりとその通りに推移している。来期ぐらいで業務委託のお仕事は終える予定。来期か再来期ぐらいからプロダクト開発の期間に入る。自社プロダクトを作る前から徐々にマーケティングもしていかないといけない。そのため、今期からマーケティング施策を少しずつ増やしていて、まずは会社の信頼度を上げるところからやっていく。売上を上げるためのマーケティングではなく信頼度を上げるためのマーケティングを行う。金森氏が言うようにどんなに優れたプロダクトを作ったとしても売れるかどうかは別問題だ。
eks クラスターの helm 管理の調査 昨日の続き。権限設定がなんもわからんみたいな様相になったので調査のやり方を変えることにした。検証用の eks クラスターを cdk から新規に作成して helm をインストールするときのリソースや権限設定がどうなるのかを調査した。lambda 関数が5個ぐらい、ロールは10個ぐらい作成された。lambda の生成に時間がかかるのか？新規作成するのに25分、削除するときは30分ぐらいかかった。rds もそうだけど、eks のような複雑なインフラを cdk で管理すると実行するのにけっこう時間がかかる。設定が難しくなければ別によいけど、eks のような権限やリソースの設定が複雑なインフラはトライ&amp;amp;エラーで何度も実行する必要があるから、こういうものは cdk で管理するのには向かないインフラだと言えると思う。一定の設定のプラクティスが溜まるまでは eks は cdk で管理しない方がよいかもしれない。
CreationRole というのが設定されて trust relationships に次のような設定が追加される。
{ &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;, &amp;#34;Statement&amp;#34;: [ { &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;, &amp;#34;Principal&amp;#34;: { &amp;#34;AWS&amp;#34;: &amp;#34;arn:aws:iam::${accountId}:root&amp;#34; }, &amp;#34;Action&amp;#34;: &amp;#34;sts:AssumeRole&amp;#34; } ] } このロールに含まれるカスタムポリシーには次のような設定がある。たぶんこんな感じのロールを新規に作成して kubectlRoleArn として指定してやればいいんじゃないかと思う。
{ &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;, &amp;#34;Statement&amp;#34;: [ { &amp;#34;Action&amp;#34;: &amp;#34;iam:PassRole&amp;#34;, &amp;#34;Resource&amp;#34;: &amp;#34;arn:aws:iam::${accountId}:role/${EksClusterIamRole}&amp;#34;, &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34; }, { &amp;#34;Action&amp;#34;: [ &amp;#34;eks:CreateCluster&amp;#34;, &amp;#34;eks:DescribeCluster&amp;#34;, &amp;#34;eks:DescribeUpdate&amp;#34;, &amp;#34;eks:DeleteCluster&amp;#34;, &amp;#34;eks:UpdateClusterVersion&amp;#34;, &amp;#34;eks:UpdateClusterConfig&amp;#34;, &amp;#34;eks:CreateFargateProfile&amp;#34;, &amp;#34;eks:TagResource&amp;#34;, &amp;#34;eks:UntagResource&amp;#34; ], &amp;#34;Resource&amp;#34;: [ &amp;#34;arn:aws:eks:ap-northeast-1:${accountId}:cluster/tmp-test-eks-cluster-by-morimoto&amp;#34;, &amp;#34;arn:aws:eks:ap-northeast-1:${accountId}:cluster/tmp-test-eks-cluster-by-morimoto/*&amp;#34; ], &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34; }, { &amp;#34;Action&amp;#34;: [ &amp;#34;eks:DescribeFargateProfile&amp;#34;, &amp;#34;eks:DeleteFargateProfile&amp;#34; ], &amp;#34;Resource&amp;#34;: &amp;#34;arn:aws:eks:ap-northeast-1:${accountId}:fargateprofile/tmp-test-eks-cluster-by-morimoto/*&amp;#34;, &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34; }, { &amp;#34;Action&amp;#34;: [ &amp;#34;iam:GetRole&amp;#34;, &amp;#34;iam:listAttachedRolePolicies&amp;#34; ], &amp;#34;Resource&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34; }, { &amp;#34;Action&amp;#34;: &amp;#34;iam:CreateServiceLinkedRole&amp;#34;, &amp;#34;Resource&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34; }, { &amp;#34;Action&amp;#34;: [ &amp;#34;ec2:DescribeInstances&amp;#34;, &amp;#34;ec2:DescribeNetworkInterfaces&amp;#34;, &amp;#34;ec2:DescribeSecurityGroups&amp;#34;, &amp;#34;ec2:DescribeSubnets&amp;#34;, &amp;#34;ec2:DescribeRouteTables&amp;#34;, &amp;#34;ec2:DescribeDhcpOptions&amp;#34;, &amp;#34;ec2:DescribeVpcs&amp;#34; ], &amp;#34;Resource&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34; } ] }</description><content>&lt;p>23時に寝て1時に起きて漫画を読んで6時に起きて漫画読んでた。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今日の議題は &lt;a href="/diary/diary/posts/2022/0503/#打ち合わせ資料の作成">先日作成した第4期の展望&lt;/a> について雑談した。あまり深く考えずに起業して初期の頃に作った10ヶ年計画に対してわりとその通りに推移している。来期ぐらいで業務委託のお仕事は終える予定。来期か再来期ぐらいからプロダクト開発の期間に入る。自社プロダクトを作る前から徐々にマーケティングもしていかないといけない。そのため、今期からマーケティング施策を少しずつ増やしていて、まずは会社の信頼度を上げるところからやっていく。売上を上げるためのマーケティングではなく信頼度を上げるためのマーケティングを行う。金森氏が言うようにどんなに優れたプロダクトを作ったとしても売れるかどうかは別問題だ。&lt;/p>
&lt;iframe width="500" height="250" scrolling="no" src="https://alu.jp/series/%E6%98%A0%E5%83%8F%E7%A0%94%E3%81%AB%E3%81%AF%E6%89%8B%E3%82%92%E5%87%BA%E3%81%99%E3%81%AA%EF%BC%81/crop/embed/X8MNLWdDgPeZ5RIF25sD/0?referer=oembed" style="margin: auto;">&lt;/iframe>
&lt;h2 id="eks-クラスターの-helm-管理の調査">eks クラスターの helm 管理の調査&lt;/h2>
&lt;p>昨日の続き。権限設定がなんもわからんみたいな様相になったので調査のやり方を変えることにした。検証用の eks クラスターを cdk から新規に作成して helm をインストールするときのリソースや権限設定がどうなるのかを調査した。lambda 関数が5個ぐらい、ロールは10個ぐらい作成された。lambda の生成に時間がかかるのか？新規作成するのに25分、削除するときは30分ぐらいかかった。rds もそうだけど、eks のような複雑なインフラを cdk で管理すると実行するのにけっこう時間がかかる。設定が難しくなければ別によいけど、eks のような権限やリソースの設定が複雑なインフラはトライ&amp;amp;エラーで何度も実行する必要があるから、こういうものは cdk で管理するのには向かないインフラだと言えると思う。一定の設定のプラクティスが溜まるまでは eks は cdk で管理しない方がよいかもしれない。&lt;/p>
&lt;p>CreationRole というのが設定されて trust relationships に次のような設定が追加される。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2012-10-17&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Statement&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Effect&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Allow&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Principal&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;AWS&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;arn:aws:iam::${accountId}:root&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sts:AssumeRole&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このロールに含まれるカスタムポリシーには次のような設定がある。たぶんこんな感じのロールを新規に作成して &lt;code>kubectlRoleArn&lt;/code> として指定してやればいいんじゃないかと思う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2012-10-17&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Statement&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;iam:PassRole&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Resource&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;arn:aws:iam::${accountId}:role/${EksClusterIamRole}&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Effect&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Allow&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;eks:CreateCluster&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;eks:DescribeCluster&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;eks:DescribeUpdate&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;eks:DeleteCluster&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;eks:UpdateClusterVersion&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;eks:UpdateClusterConfig&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;eks:CreateFargateProfile&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;eks:TagResource&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;eks:UntagResource&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Resource&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;arn:aws:eks:ap-northeast-1:${accountId}:cluster/tmp-test-eks-cluster-by-morimoto&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;arn:aws:eks:ap-northeast-1:${accountId}:cluster/tmp-test-eks-cluster-by-morimoto/*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Effect&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Allow&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;eks:DescribeFargateProfile&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;eks:DeleteFargateProfile&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Resource&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;arn:aws:eks:ap-northeast-1:${accountId}:fargateprofile/tmp-test-eks-cluster-by-morimoto/*&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Effect&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Allow&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;iam:GetRole&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;iam:listAttachedRolePolicies&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Resource&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Effect&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Allow&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;iam:CreateServiceLinkedRole&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Resource&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Effect&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Allow&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ec2:DescribeInstances&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ec2:DescribeNetworkInterfaces&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ec2:DescribeSecurityGroups&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ec2:DescribeSubnets&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ec2:DescribeRouteTables&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ec2:DescribeDhcpOptions&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ec2:DescribeVpcs&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Resource&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Effect&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Allow&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>cdk と eks と lambda と iam がわからん</title><link>/diary/posts/2022/0512/</link><pubDate>Thu, 12 May 2022 11:42:54 +0900</pubDate><guid>/diary/posts/2022/0512/</guid><description>0時に寝て3時に起きて漫画読んで5時に寝て8時に起きた。
eks クラスターの helm 管理 昨日の続き。helm のよさはわかったので dapr を helm で管理しようとしている。その際になるべく cdk で管理できた方がよい。eks は cdk の外部で管理しているのだけど、既存の eks クラスターをインポートする機能も提供されていることに気付いた。
Using existing clusters それなら既存の eks クラスターをインポートして cdk で helm だけ管理しようと思って始めたものの、これがとても難しくて丸1日作業してわからなかった。設定項目は少ないけど、権限の問題で動かない。1回あたりの実行に15分ぐらいかかるのでトライ&amp;amp;エラーするのもなかなか大変。
kubectlRoleArn - the ARN of an IAM role mapped to the system:masters RBAC role. If the cluster you are importing was created using the AWS CDK, the CloudFormation stack has an output that includes an IAM role that can be used. Otherwise, you can create an IAM role and map it to system:masters manually.</description><content>&lt;p>0時に寝て3時に起きて漫画読んで5時に寝て8時に起きた。&lt;/p>
&lt;h2 id="eks-クラスターの-helm-管理">eks クラスターの helm 管理&lt;/h2>
&lt;p>昨日の続き。helm のよさはわかったので dapr を helm で管理しようとしている。その際になるべく cdk で管理できた方がよい。eks は cdk の外部で管理しているのだけど、既存の eks クラスターをインポートする機能も提供されていることに気付いた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_eks-readme.html#using-existing-clusters">Using existing clusters&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>それなら既存の eks クラスターをインポートして cdk で helm だけ管理しようと思って始めたものの、これがとても難しくて丸1日作業してわからなかった。設定項目は少ないけど、権限の問題で動かない。1回あたりの実行に15分ぐらいかかるのでトライ&amp;amp;エラーするのもなかなか大変。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>kubectlRoleArn&lt;/code> - the ARN of an IAM role mapped to the system:masters RBAC role. If the cluster you are importing was created using the AWS CDK, the CloudFormation stack has an output that includes an IAM role that can be used. Otherwise, you can create an IAM role and map it to system:masters manually. The trust policy of this role should include the the arn:aws::iam::${accountId}:root principal in order to allow the execution role of the kubectl resource to assume it.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>kubectlRoleArn&lt;/code> の設定をどうするかだけなんだが、この説明でどう設定していいか理解できなかった。cdk で新規に eks クラスターを作成するなら自動で作ってくれるけど、既存の eks クラスターの場合は自分で設定しないといけない。ややこしいことに cdk は kubectl の実行を lambda 経由で実行するので eks と lambda と iam のロールやポリシーを適切に設定する必要がある。lambda にどういう権限を設定するのが適切なのかは本当に難しい。サーバーレスはよいアイディアだとは思うけど、lambda は難し過ぎて私はなるべく使いたくないサービスではある。結局わからなくて翌日に持ち越し。&lt;/p></content></item><item><title>helm を調べた</title><link>/diary/posts/2022/0511/</link><pubDate>Wed, 11 May 2022 08:31:36 +0900</pubDate><guid>/diary/posts/2022/0511/</guid><description>1時に寝て6時半に起きて8時に起きた。前日は資料づくりで遅くまでオフィスに残っていたせいか、なんか寝坊した。
helm 調査 k8s 上の datadog-agent が helm で管理されていて、あるバージョンから dapr も helm 管理できる ようになった。dapr は cli からもインストールできるけど、helm のことをよくわかってなかったので調べることにした。そんなたくさん記事をみたわけではないけど、いくつか記事を読んで quora のやり取りが一番よかった。
When should you use Kubernetes Helm and not use it? ざっくりまとめるとこうかな。
helm は oss 且つ cncf の公式プロジェクトだからまぁ安心 helm はサードパーティのパッケージのインストールや設定の利便性を高める k8s はテンプレート機能が弱いので共通設定と特定環境向けの設定を管理するのがあまり得意ではない セキュリティを考慮した k8s 設定は自分でやるよりコミュニティに任せた方がよい場合もある パッケージなのでバージョン管理は得意 helm は k8s 向けのパッケージマネージャとレポジトリマネージャーとマーケットプレイスを組み合わせたみたいなもの k8s 上でサードパーティのパッケージを自分で設定したい特別な理由がない限りは helm を使うのがよさそうという結論になった。</description><content>&lt;p>1時に寝て6時半に起きて8時に起きた。前日は資料づくりで遅くまでオフィスに残っていたせいか、なんか寝坊した。&lt;/p>
&lt;h2 id="helm-調査">helm 調査&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0201/#kubernetes-のログ管理と-datadog-agent-のログ連携不具合">k8s 上の datadog-agent&lt;/a> が &lt;a href="https://helm.sh/">helm&lt;/a> で管理されていて、あるバージョンから &lt;a href="https://docs.dapr.io/operations/hosting/kubernetes/kubernetes-deploy/#install-with-helm-advanced">dapr も helm 管理できる&lt;/a> ようになった。dapr は cli からもインストールできるけど、helm のことをよくわかってなかったので調べることにした。そんなたくさん記事をみたわけではないけど、いくつか記事を読んで quora のやり取りが一番よかった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.quora.com/When-should-you-use-Kubernetes-Helm-and-not-use-it">When should you use Kubernetes Helm and not use it?&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ざっくりまとめるとこうかな。&lt;/p>
&lt;ul>
&lt;li>helm は oss 且つ cncf の公式プロジェクトだからまぁ安心&lt;/li>
&lt;li>helm はサードパーティのパッケージのインストールや設定の利便性を高める
&lt;ul>
&lt;li>k8s はテンプレート機能が弱いので共通設定と特定環境向けの設定を管理するのがあまり得意ではない&lt;/li>
&lt;li>セキュリティを考慮した k8s 設定は自分でやるよりコミュニティに任せた方がよい場合もある&lt;/li>
&lt;li>パッケージなのでバージョン管理は得意&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>helm は k8s 向けのパッケージマネージャとレポジトリマネージャーとマーケットプレイスを組み合わせたみたいなもの&lt;/li>
&lt;/ul>
&lt;p>k8s 上でサードパーティのパッケージを自分で設定したい特別な理由がない限りは helm を使うのがよさそうという結論になった。&lt;/p></content></item><item><title>スライドデザインのレビュー</title><link>/diary/posts/2022/0510/</link><pubDate>Tue, 10 May 2022 07:34:55 +0900</pubDate><guid>/diary/posts/2022/0510/</guid><description>1時に寝て6時半に起きた。
スライドマスターのデザインレビュー はらさんと一緒にレビューした。私とは全然視点が違うので参考になった。自分が得意ではない分野の相談相手がいると本当に助かる。いくつか取り上げる。あれこれ、私が気になったところもヒアリングしながら意見をもらった。あとでデザイナーさんにフィードバックする。
外国人が作ると文字のレイアウトが日本語と異なることを考慮する必要がある 日本語には y や q のような下にはみ出る文字がない スライド全体の色使いで目立たせるときの注目色を作ってもらった方がよい インジケーターのようなデザインがあると聴衆がいま発表のどの辺りかわかって嬉しい 会社の自己主張が強過ぎない方がよさそう</description><content>&lt;p>1時に寝て6時半に起きた。&lt;/p>
&lt;h2 id="スライドマスターのデザインレビュー">スライドマスターのデザインレビュー&lt;/h2>
&lt;p>はらさんと一緒にレビューした。私とは全然視点が違うので参考になった。自分が得意ではない分野の相談相手がいると本当に助かる。いくつか取り上げる。あれこれ、私が気になったところもヒアリングしながら意見をもらった。あとでデザイナーさんにフィードバックする。&lt;/p>
&lt;ul>
&lt;li>外国人が作ると文字のレイアウトが日本語と異なることを考慮する必要がある
&lt;ul>
&lt;li>日本語には y や q のような下にはみ出る文字がない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>スライド全体の色使いで目立たせるときの注目色を作ってもらった方がよい&lt;/li>
&lt;li>インジケーターのようなデザインがあると聴衆がいま発表のどの辺りかわかって嬉しい&lt;/li>
&lt;li>会社の自己主張が強過ぎない方がよさそう&lt;/li>
&lt;/ul></content></item><item><title>スライドデザインの作成</title><link>/diary/posts/2022/0509/</link><pubDate>Mon, 09 May 2022 12:49:34 +0900</pubDate><guid>/diary/posts/2022/0509/</guid><description>0時に寝て4時に起きて6時半に起きたつもりが、なんか3度寝して8時に起きた。
スライドマスターのデザイン作成 うちの会社のロゴは Ševarika™ というデザイナーさんに作ってもらった。言語にセルビア語とあるので旧ユーゴスラビア地域の国の出身なのかなと推測する。このご時世なので NATO 加盟国なのだろうか？とか調べてみたけど、旧ユーゴスラビア地域の国々の歴史は複雑ですぐにわかるものではなかった。閑話休題。私は会社のロゴをとても気に入っているし、ロゴを作ってもらうときの取り引きも円滑にできたのでそのデザイナーさんを信頼している。今回も2年半ぶりに連絡をとったら快くスライドマスターの作成を引き受けてくれた。4月30日に契約して、とくに急いでいないのでデザイナーの都合がついたらでという緩い依頼をしたんだけど、昨日さっそく最初の草稿が届いた。いくつか私の好みのスライドデザインのサンプルを渡したりしていたので、私の好みのスタイルは外していない。ただ私はデザインのことは何もわからないので、今回は顧問のはらさんにもレビューしてもらってご意見をもらうことにした。
ベースライン移行 先日の flyway のデータベース移行 の続き。管理しているマイクロサービスが4つあるのでそれぞれのサービスごとに設定していかないといけない。サーバーサイドって共通化できるのが大きなメリットなのに、同じサーバーサイドの仕組みを複数導入しないといけないというのはマイクロサービスのデメリットと言えばそうだし、アーキテクチャとしても正しいんやろか？という気持ちも出てくる。おそらく1つのチームが複数のマイクロサービスを開発する体制がよくない。変更作業と検証で約1日を費やした。</description><content>&lt;p>0時に寝て4時に起きて6時半に起きたつもりが、なんか3度寝して8時に起きた。&lt;/p>
&lt;h2 id="スライドマスターのデザイン作成">スライドマスターのデザイン作成&lt;/h2>
&lt;p>うちの会社のロゴは &lt;a href="https://99designs.jp/profiles/dsevarika">Ševarika™&lt;/a> というデザイナーさんに作ってもらった。言語にセルビア語とあるので旧ユーゴスラビア地域の国の出身なのかなと推測する。このご時世なので NATO 加盟国なのだろうか？とか調べてみたけど、旧ユーゴスラビア地域の国々の歴史は複雑ですぐにわかるものではなかった。閑話休題。私は会社のロゴをとても気に入っているし、ロゴを作ってもらうときの取り引きも円滑にできたのでそのデザイナーさんを信頼している。今回も2年半ぶりに連絡をとったら快くスライドマスターの作成を引き受けてくれた。4月30日に契約して、とくに急いでいないのでデザイナーの都合がついたらでという緩い依頼をしたんだけど、昨日さっそく最初の草稿が届いた。いくつか私の好みのスライドデザインのサンプルを渡したりしていたので、私の好みのスタイルは外していない。ただ私はデザインのことは何もわからないので、今回は顧問のはらさんにもレビューしてもらってご意見をもらうことにした。&lt;/p>
&lt;h2 id="ベースライン移行">ベースライン移行&lt;/h2>
&lt;p>先日の &lt;a href="/diary/diary/posts/2022/0506/#データベースの移行処理">flyway のデータベース移行&lt;/a> の続き。管理しているマイクロサービスが4つあるのでそれぞれのサービスごとに設定していかないといけない。サーバーサイドって共通化できるのが大きなメリットなのに、同じサーバーサイドの仕組みを複数導入しないといけないというのはマイクロサービスのデメリットと言えばそうだし、アーキテクチャとしても正しいんやろか？という気持ちも出てくる。おそらく1つのチームが複数のマイクロサービスを開発する体制がよくない。変更作業と検証で約1日を費やした。&lt;/p></content></item><item><title>法人決算の続き</title><link>/diary/posts/2022/0508/</link><pubDate>Sun, 08 May 2022 21:12:43 +0900</pubDate><guid>/diary/posts/2022/0508/</guid><description>0時に寝て5時半に起きた。実家にいると、親が5時ぐらいから起き始めるのでつられて早めに起きている。親が8時からアルバイトなのでそのタイミングでバス停に送ってもらって9時半には戻ってきた。
消費税申告書と欠損金の還付請求書の作成 先日から 法人決算に着手 していた。
まずは消費税の申告書と未払い消費税の振替伝票の起票をしていた。初めての会計処理でいろいろ調べてた。No.6610 法人に係る消費税の確定申告書の提出期限について によると、消費税の申告期限も法人決算と同様、課税期間 (事業年度) の終了の日から2ヶ月以内に行う必要がある。厳密には消費税にも2種類あって国税と地方税にわけられる。地方消費税は国税ではなく地方税であるため、本来は都道府県に納税すべきものではあるが、手続きの利便性のため？なのか、国税と一緒に所管税務署へ納付するのでよいらしい。
消費税とは？地方消費税とは？ つぎに前期は赤字なので前々期に支払った法人税と地方法人税の一部を還付してもらう。前々期の所得と支払った法人税、前期の欠損金 (マイナスの所得に対する法人税法上の用語) の3つの数字があれば算出できる。計算してみたら支払った法人税のうち26.4%を還付できることがわかった。算出後に請求書をダウンロードして書類に数字を記入した。
ストレッチ いつもは土曜日の10時に通っているが、実家に帰っていたので予定変更。今日から新しいトレーナーさんに師事することになる。今日の開脚幅は開始前160cmで、ストレッチ後162cmだった。昨日、草刈りをして筋肉痛になっていたのでそんなもんかな。腕と腰に張りがあった。新しいトレーナーさんも初めてなのでまずはどこの筋が張っていて、どこの関節が詰まっているかを確認しながら進めていくといった感じだった。話しを聞いていたら、新しいトレーナーさんも前のトレーナーさん同様、筋トレをしていて、週3日ぐらいはやっているらしい。やっぱりトレーナー業をする人は筋トレに興味をもつ人が多いのかもしれない。</description><content>&lt;p>0時に寝て5時半に起きた。実家にいると、親が5時ぐらいから起き始めるのでつられて早めに起きている。親が8時からアルバイトなのでそのタイミングでバス停に送ってもらって9時半には戻ってきた。&lt;/p>
&lt;h2 id="消費税申告書と欠損金の還付請求書の作成">消費税申告書と欠損金の還付請求書の作成&lt;/h2>
&lt;p>先日から &lt;a href="/diary/diary/posts/2022/0505/#法人決算">法人決算に着手&lt;/a> していた。&lt;/p>
&lt;p>まずは消費税の申告書と未払い消費税の振替伝票の起票をしていた。初めての会計処理でいろいろ調べてた。&lt;a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/shohi/6610.htm">No.6610 法人に係る消費税の確定申告書の提出期限について&lt;/a> によると、消費税の申告期限も法人決算と同様、課税期間 (事業年度) の終了の日から2ヶ月以内に行う必要がある。厳密には消費税にも2種類あって国税と地方税にわけられる。地方消費税は国税ではなく地方税であるため、本来は都道府県に納税すべきものではあるが、手続きの利便性のため？なのか、国税と一緒に所管税務署へ納付するのでよいらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://biz.moneyforward.com/tax_return/basic/70/#i">消費税とは？地方消費税とは？&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>つぎに前期は赤字なので前々期に支払った法人税と地方法人税の一部を還付してもらう。前々期の所得と支払った法人税、前期の欠損金 (マイナスの所得に対する法人税法上の用語) の3つの数字があれば算出できる。計算してみたら支払った法人税のうち26.4%を還付できることがわかった。算出後に請求書をダウンロードして書類に数字を記入した。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>いつもは土曜日の10時に通っているが、実家に帰っていたので予定変更。今日から新しいトレーナーさんに師事することになる。今日の開脚幅は開始前160cmで、ストレッチ後162cmだった。昨日、草刈りをして筋肉痛になっていたのでそんなもんかな。腕と腰に張りがあった。新しいトレーナーさんも初めてなのでまずはどこの筋が張っていて、どこの関節が詰まっているかを確認しながら進めていくといった感じだった。話しを聞いていたら、新しいトレーナーさんも前のトレーナーさん同様、筋トレをしていて、週3日ぐらいはやっているらしい。やっぱりトレーナー業をする人は筋トレに興味をもつ人が多いのかもしれない。&lt;/p></content></item><item><title>アボカドを植えた</title><link>/diary/posts/2022/0507/</link><pubDate>Sat, 07 May 2022 10:15:30 +0900</pubDate><guid>/diary/posts/2022/0507/</guid><description>1時に寝て4時に起きて6時半に起きた。なんか寝付けない。とくに用事があるわけでもないのだけど、たまに実家に帰らないといけないので帰る。病院へお見舞い行って、草刈りして、焼肉食べて、温泉入って実家でくつろいでた。
アボカドを植える 1ヶ月半前から水耕栽培を始めたアボカドの種から根が出始めた。いくつか持って帰って土に植えてもらうことにした。ライフ に売っているアボカドは他のスーパーよりも100円ぐらい高いけれど、ハズレがなくておいしい。アボカドはライフでしか買わなくなった。そのアボカドの種なのできっとおいしいアボカドの木になるはず。種から育てると実をつけるには10年ぐらいかかるという。さらに1年おきしか実をつけないみたい。実をつけなくても観葉植物として育てるという趣もあるみたい。
アボカド栽培に挑戦！種から収穫までの上手な育て方をご紹介！剪定方法のコツも！</description><content>&lt;p>1時に寝て4時に起きて6時半に起きた。なんか寝付けない。とくに用事があるわけでもないのだけど、たまに実家に帰らないといけないので帰る。病院へお見舞い行って、草刈りして、焼肉食べて、温泉入って実家でくつろいでた。&lt;/p>
&lt;h2 id="アボカドを植える">アボカドを植える&lt;/h2>
&lt;p>1ヶ月半前から水耕栽培を始めたアボカドの種から根が出始めた。いくつか持って帰って土に植えてもらうことにした。&lt;a href="http://www.lifecorp.jp/">ライフ&lt;/a> に売っているアボカドは他のスーパーよりも100円ぐらい高いけれど、ハズレがなくておいしい。アボカドはライフでしか買わなくなった。そのアボカドの種なのできっとおいしいアボカドの木になるはず。種から育てると実をつけるには10年ぐらいかかるという。さらに1年おきしか実をつけないみたい。実をつけなくても観葉植物として育てるという趣もあるみたい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kurashi-no.jp/I0026458">アボカド栽培に挑戦！種から収穫までの上手な育て方をご紹介！剪定方法のコツも！&lt;/a>&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="/diary/diary/img/2022/0507_avocado.jpg"/>
&lt;/figure></content></item><item><title>flyway を触ってみた</title><link>/diary/posts/2022/0506/</link><pubDate>Fri, 06 May 2022 09:08:02 +0900</pubDate><guid>/diary/posts/2022/0506/</guid><description>0時に寝て4時に起きてタイムライン眺めながらだらだらして6時半に起き上がった。
データベースの移行処理 半年前から導入したいという話しは聞いていたものの、先送りになっていたライブラリに flyway がある。データベースの移行処理のためのスクリプト (sql) を管理するツールでどの移行スクリプトを実行したかを記録したり、未適用の処理を自動で適用してくれたりする。spring boot だとすぐ組み込める状態になっていて Community Plugins and Integrations: Spring Boot をみながら設定したらすぐに動いた。flyway 自体の設定も Common Application Properties を参考に spring boot の設定ファイルで行える。
例えば、こんな感じ。
spring: flyway: ￼ enabled: true ￼ schemas: public ￼ locations: classpath:db/migration ￼ baseline-version: 0 ￼ baseline-on-migrate: true 移行処理の履歴情報は flyway_schema_history テーブルに保持される。既存のテーブルが存在して flyway の履歴データがない場合 (初回起動時) に移行処理を実行するかどうかを baseline-on-migrate で決める。実行するなら baseline-version でどのバージョンをベースラインとするかも設定できる。ゼロにすることで V1 からの sql ファイルを適用してくれる。ベースラインの考え方は実際に何度かデータベースの初期状態を変えて実行しないとわかりにくいかもしれない。
Tutorial: Baseline Migrations</description><content>&lt;p>0時に寝て4時に起きてタイムライン眺めながらだらだらして6時半に起き上がった。&lt;/p>
&lt;h2 id="データベースの移行処理">データベースの移行処理&lt;/h2>
&lt;p>半年前から導入したいという話しは聞いていたものの、先送りになっていたライブラリに &lt;a href="https://flywaydb.org/">flyway&lt;/a> がある。データベースの移行処理のためのスクリプト (sql) を管理するツールでどの移行スクリプトを実行したかを記録したり、未適用の処理を自動で適用してくれたりする。spring boot だとすぐ組み込める状態になっていて &lt;a href="https://flywaydb.org/documentation/usage/plugins/springboot">Community Plugins and Integrations: Spring Boot&lt;/a> をみながら設定したらすぐに動いた。flyway 自体の設定も &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html">Common Application Properties&lt;/a> を参考に spring boot の設定ファイルで行える。&lt;/p>
&lt;p>例えば、こんな感じ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">flyway&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">￼ enabled&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">￼ schemas&lt;/span>: &lt;span style="color:#ae81ff">public&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">￼ locations&lt;/span>: &lt;span style="color:#ae81ff">classpath:db/migration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">￼ baseline-version&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">￼ baseline-on-migrate&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>移行処理の履歴情報は &lt;code>flyway_schema_history&lt;/code> テーブルに保持される。既存のテーブルが存在して flyway の履歴データがない場合 (初回起動時) に移行処理を実行するかどうかを baseline-on-migrate で決める。実行するなら baseline-version でどのバージョンをベースラインとするかも設定できる。ゼロにすることで &lt;code>V1&lt;/code> からの sql ファイルを適用してくれる。ベースラインの考え方は実際に何度かデータベースの初期状態を変えて実行しないとわかりにくいかもしれない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://flywaydb.org/documentation/tutorials/baselineMigrations">Tutorial: Baseline Migrations&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>第3期の法人決算に着手</title><link>/diary/posts/2022/0505/</link><pubDate>Thu, 05 May 2022 17:39:28 +0900</pubDate><guid>/diary/posts/2022/0505/</guid><description>夜眠れなくてだらだらして朝もだらだらしてからお昼前ぐらいにオフィスに行った。
法人決算 ようやく着手した。今日のところは前期の所得を求めて各種法人税の算出をした。所得を算出し終えて初めて決算書を作成できる。と言っても、前期は当社初の赤字となった。そのため、均等割以外の法人税はすべてゼロになる。法人県民税と法人市民税の均等割を合計すると7万2千円を納める必要がある。この税金は会社が赤字であろうと必ず支払う必要がある。他の法人税、地方法人税、法人事業税、特別法人事業税、法人県民税と法人市民税の法人税割は所得に対して税率を課すものなので赤字 = 所得がマイナスならゼロになる。ないに越したことはないけど、今後も赤字決算はあるかもしれないので今回は赤字決算のときの税制や会計処理について学ぶ機会となる。その1つとして前々期に納めた法人税を還付する仕組みがある。
No.5763 欠損金の繰戻しによる還付 あと赤字でも支払う必要のある税金として消費税がある。これも3期目から支払う必要があるため、今回が初めてとなる。算はすべて会計システムがやってくれるので私がやることは書類を作ったり、実際の手続きをするだけだとは思う。ちなみにうちは簡易課税で消費税を支払う。その方が節税になることは インボイス制度を調べていた ときにも書いた。</description><content>&lt;p>夜眠れなくてだらだらして朝もだらだらしてからお昼前ぐらいにオフィスに行った。&lt;/p>
&lt;h2 id="法人決算">法人決算&lt;/h2>
&lt;p>ようやく着手した。今日のところは前期の所得を求めて各種法人税の算出をした。所得を算出し終えて初めて決算書を作成できる。と言っても、前期は当社初の赤字となった。そのため、均等割以外の法人税はすべてゼロになる。法人県民税と法人市民税の均等割を合計すると7万2千円を納める必要がある。この税金は会社が赤字であろうと必ず支払う必要がある。他の法人税、地方法人税、法人事業税、特別法人事業税、法人県民税と法人市民税の法人税割は所得に対して税率を課すものなので赤字 = 所得がマイナスならゼロになる。ないに越したことはないけど、今後も赤字決算はあるかもしれないので今回は赤字決算のときの税制や会計処理について学ぶ機会となる。その1つとして前々期に納めた法人税を還付する仕組みがある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/hojin/5763.htm">No.5763 欠損金の繰戻しによる還付&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>あと赤字でも支払う必要のある税金として消費税がある。これも3期目から支払う必要があるため、今回が初めてとなる。算はすべて会計システムがやってくれるので私がやることは書類を作ったり、実際の手続きをするだけだとは思う。ちなみにうちは簡易課税で消費税を支払う。その方が節税になることは &lt;a href="/diary/diary/posts/2021/1001/#インボイス制度の準備">インボイス制度を調べていた&lt;/a> ときにも書いた。&lt;/p></content></item><item><title>ずっと考え続けること</title><link>/diary/posts/2022/0504/</link><pubDate>Wed, 04 May 2022 13:22:22 +0900</pubDate><guid>/diary/posts/2022/0504/</guid><description>0時に寝て7時に起きた。祝日なので朝は掃除したり洗濯したりしてた。
yuga labs は未来の gafa かもしれないらしい 中島聡氏が voicy を始められたのでたまに聴いている。とくに web3 関連の信頼できる情報源として聴いている。
僕らはweb3時代のGAFAの誕生を目撃しているのか？ 氏は yuga labs は技術というよりはマーケティングの会社だと言いながら、どういうマーケティング施策でいまのような人気企業になったかを簡潔に説明されていた。yuga labs という会社名だけは知っていたが、どういう会社かはまったく知らなかったので私は勉強になった。yuga labs のやっていることは中長期でみればポンジ・スキームだと指摘しつつも、その胡散臭さを上回る優れたマーケティング施策で注目を集めているという。yuga labs が手がける nft やメタバースや暗号資産なども高騰していて、実際にそのマーケティング施策で億り人になった人たちも数千人規模で出ていて、今後の動向に期待が集まっているらしい。シリコンバレーのトップレベルの vc も資金を投入しているので vc の思惑からも次の gafa のような期待感があると受け取ることもできるらしい。yuga labs が手がけるメタバースプロジェクトの土地売買で起こった事件なども紹介されていた。あとは2-3年はこういったバブルが続くのかなぁ。
Yuga Labs、仮想不動産NFT販売で3.2億ドル相当獲得　“ガス代急騰”の影響に謝罪 頭の中の最上位にあるアイデア たまたまタイムラインでポール・グレアムの 頭の中の最上位にあるアイデア というエッセイを知った。ざっと斜め読みして、私の経験や価値観にも合致する内容だったので印象に残って後から精読した。
学生の頃、原付きの整備士のアルバイトをしていた。そのバイク屋の社長はアウトローな人生を歩んできた方で、私は破天荒な社長の生き様が好きでよく話を聞いて感心していた。あるとき草津から彦根までバイクを届ける遠出の運搬作業があって、トラックで社長と2人で出掛けたことがあった。雨降りの日だった。私は助手席で社長の話し相手をしていただけだったんだが、こんな話しをされた。
若い頃に5年働いてようやく100万円の貯金ができた。すでに妻子もいた。そのときに友だちに騙されて1500万円の借金を背負った。5年働いて100万円しか貯金できなかったのだから、もう人生終わりだと思って、自分を騙したその友だちを殺して自殺しようと思った。しかし、母親に諭されてその友だちを殺すことは思い留め、それから死ぬ気で働いたら2年で1500万円の借金をすべて返すことができた。
社長がどうやって借金を返したかの詳細は知らないし、相当の苦労や無理をしたことには変わらないだろう。そのときに続けて社長が言ったことはこんなことだった。
24時間365日、お金儲けのことばかり考え続けていたらなんか思いつくものなんや
ポール・グレアムのエッセイを読んで社長はこのことを言ってたんだなといま思い返した。私も何度かそういう機会を経験していて、全くわからない難しい問題に直面したとき、納期や品質を担保できそうにないプロジェクトを担当しているとき、課題に着手し始めたときの本音は無理やと思いつつも、どうやったらうまくいくかというのをずっと考え続けているうちに、難しい問題の解決方法がわかってしまったり、トラブルプロジェクトでもそれなりにうまくまわったりした。
いまは課題管理をどうやってビジネスとしてマネタイズ化するかを常に考えている。たまにアイディアがふっと湧いて、その内容を課題管理システムに起票したり、既存チケットのコメントに書き込んだりする。平均すると、1-2週間に1回ぐらいのコメントなんだけど、これを1年ほど続けているというのがいまの状態だ。これを2年3年と続ければ、ビジネスのアイディアが溜まることを経験的に理解しているからいまもずっと課題管理について考え続けている。</description><content>&lt;p>0時に寝て7時に起きた。祝日なので朝は掃除したり洗濯したりしてた。&lt;/p>
&lt;h2 id="yuga-labs-は未来の-gafa-かもしれないらしい">yuga labs は未来の gafa かもしれないらしい&lt;/h2>
&lt;p>中島聡氏が voicy を始められたのでたまに聴いている。とくに web3 関連の信頼できる情報源として聴いている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://voicy.jp/channel/2627/318702">僕らはweb3時代のGAFAの誕生を目撃しているのか？&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>氏は yuga labs は技術というよりはマーケティングの会社だと言いながら、どういうマーケティング施策でいまのような人気企業になったかを簡潔に説明されていた。yuga labs という会社名だけは知っていたが、どういう会社かはまったく知らなかったので私は勉強になった。yuga labs のやっていることは中長期でみればポンジ・スキームだと指摘しつつも、その胡散臭さを上回る優れたマーケティング施策で注目を集めているという。yuga labs が手がける nft やメタバースや暗号資産なども高騰していて、実際にそのマーケティング施策で億り人になった人たちも数千人規模で出ていて、今後の動向に期待が集まっているらしい。シリコンバレーのトップレベルの vc も資金を投入しているので vc の思惑からも次の gafa のような期待感があると受け取ることもできるらしい。yuga labs が手がけるメタバースプロジェクトの土地売買で起こった事件なども紹介されていた。あとは2-3年はこういったバブルが続くのかなぁ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.itmedia.co.jp/news/articles/2205/02/news051.html">Yuga Labs、仮想不動産NFT販売で3.2億ドル相当獲得　“ガス代急騰”の影響に謝罪&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="頭の中の最上位にあるアイデア">頭の中の最上位にあるアイデア&lt;/h2>
&lt;p>たまたまタイムラインでポール・グレアムの &lt;a href="https://note.com/tokyojack/n/n26ab9f6cfab3">頭の中の最上位にあるアイデア&lt;/a> というエッセイを知った。ざっと斜め読みして、私の経験や価値観にも合致する内容だったので印象に残って後から精読した。&lt;/p>
&lt;p>学生の頃、原付きの整備士のアルバイトをしていた。そのバイク屋の社長はアウトローな人生を歩んできた方で、私は破天荒な社長の生き様が好きでよく話を聞いて感心していた。あるとき草津から彦根までバイクを届ける遠出の運搬作業があって、トラックで社長と2人で出掛けたことがあった。雨降りの日だった。私は助手席で社長の話し相手をしていただけだったんだが、こんな話しをされた。&lt;/p>
&lt;blockquote>
&lt;p>若い頃に5年働いてようやく100万円の貯金ができた。すでに妻子もいた。そのときに友だちに騙されて1500万円の借金を背負った。5年働いて100万円しか貯金できなかったのだから、もう人生終わりだと思って、自分を騙したその友だちを殺して自殺しようと思った。しかし、母親に諭されてその友だちを殺すことは思い留め、それから死ぬ気で働いたら2年で1500万円の借金をすべて返すことができた。&lt;/p>
&lt;/blockquote>
&lt;p>社長がどうやって借金を返したかの詳細は知らないし、相当の苦労や無理をしたことには変わらないだろう。そのときに続けて社長が言ったことはこんなことだった。&lt;/p>
&lt;blockquote>
&lt;p>24時間365日、お金儲けのことばかり考え続けていたらなんか思いつくものなんや&lt;/p>
&lt;/blockquote>
&lt;p>ポール・グレアムのエッセイを読んで社長はこのことを言ってたんだなといま思い返した。私も何度かそういう機会を経験していて、全くわからない難しい問題に直面したとき、納期や品質を担保できそうにないプロジェクトを担当しているとき、課題に着手し始めたときの本音は無理やと思いつつも、どうやったらうまくいくかというのをずっと考え続けているうちに、難しい問題の解決方法がわかってしまったり、トラブルプロジェクトでもそれなりにうまくまわったりした。&lt;/p>
&lt;p>いまは課題管理をどうやってビジネスとしてマネタイズ化するかを常に考えている。たまにアイディアがふっと湧いて、その内容を課題管理システムに起票したり、既存チケットのコメントに書き込んだりする。平均すると、1-2週間に1回ぐらいのコメントなんだけど、これを1年ほど続けているというのがいまの状態だ。これを2年3年と続ければ、ビジネスのアイディアが溜まることを経験的に理解しているからいまもずっと課題管理について考え続けている。&lt;/p></content></item><item><title>資料作りと抜け・漏れ防止</title><link>/diary/posts/2022/0503/</link><pubDate>Tue, 03 May 2022 18:45:57 +0900</pubDate><guid>/diary/posts/2022/0503/</guid><description>marketplace への公開 pull request と push イベントに対応して基本機能は実装できたとみなし、v1 のタグ/ブランチを作成して marketplace に公開した。backlog と連携するカスタム action はすでにいくつかあるのだけど、pull request か push イベントのどちらかしか対応していなかったり、説明が日本語で書かれていて日本人向けしか対象としていないものしかない。グローバル向けの今後も要件次第で拡張可能なカスタム action はこれしかないと、ポジショントークも含めて言っておこう。ちょうどこみやさんも関心をもっているのでまた機会があれば使い方の説明とかやりますよと伝えた。まずは会社のメンバーに紹介してくれるらしい。使ってくれる人が増えると嬉しいなぁ。
https://github.com/marketplace/actions/backlog-github-integration-action リリース作業をしていてその内容について mermaid 記法を使って簡単なフローチャート図やシーケンス図も書いてみた。感覚的には plantuml で書くのと大差ないので github がサポートしているネットワーク効果を考えると、今後は mermaid を積極的に活用していくのもよいかもしれない。
打ち合わせ資料の作成 先日 第3期のふりかえり は行ったが、第4期の展望はできなかったので次回の打ち合わせのための資料を作った。今期も普通に業務委託をするだけではあるものの、今後のキャリアのために grpc の開発/運用経験を積む必要があることに気付いた。他人に話す機会があって、そのための資料を作ってみて、当たり前の抜け・漏れに自分自身で気付けるというのが思考の外在化のよいところと言える。誰かに指摘されればすぐ気付くことを自分自身で気付くのは意外と難しかったりする。特定技術を狙って案件を探すのはあまりうまくいかない。本来はビジネスがあって、それを実現するために技術を選ぶのであって、その逆ではないから。周りの友だちや知人に聞いてみるかなぁ。</description><content>&lt;h2 id="marketplace-への公開">marketplace への公開&lt;/h2>
&lt;p>pull request と push イベントに対応して基本機能は実装できたとみなし、v1 のタグ/ブランチを作成して marketplace に公開した。backlog と連携するカスタム action はすでにいくつかあるのだけど、pull request か push イベントのどちらかしか対応していなかったり、説明が日本語で書かれていて日本人向けしか対象としていないものしかない。グローバル向けの今後も要件次第で拡張可能なカスタム action はこれしかないと、ポジショントークも含めて言っておこう。ちょうどこみやさんも関心をもっているのでまた機会があれば使い方の説明とかやりますよと伝えた。まずは会社のメンバーに紹介してくれるらしい。使ってくれる人が増えると嬉しいなぁ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/marketplace/actions/backlog-github-integration-action">https://github.com/marketplace/actions/backlog-github-integration-action&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>リリース作業をしていてその内容について &lt;a href="https://github.com/mermaid-js/mermaid">mermaid&lt;/a> 記法を使って簡単なフローチャート図やシーケンス図も書いてみた。感覚的には plantuml で書くのと大差ないので github がサポートしているネットワーク効果を考えると、今後は mermaid を積極的に活用していくのもよいかもしれない。&lt;/p>
&lt;h2 id="打ち合わせ資料の作成">打ち合わせ資料の作成&lt;/h2>
&lt;p>先日 &lt;a href="/diary/diary/posts/2022/0429/#隔週の雑談">第3期のふりかえり&lt;/a> は行ったが、第4期の展望はできなかったので次回の打ち合わせのための資料を作った。今期も普通に業務委託をするだけではあるものの、今後のキャリアのために &lt;a href="https://grpc.io/">grpc&lt;/a> の開発/運用経験を積む必要があることに気付いた。他人に話す機会があって、そのための資料を作ってみて、当たり前の抜け・漏れに自分自身で気付けるというのが思考の外在化のよいところと言える。誰かに指摘されればすぐ気付くことを自分自身で気付くのは意外と難しかったりする。特定技術を狙って案件を探すのはあまりうまくいかない。本来はビジネスがあって、それを実現するために技術を選ぶのであって、その逆ではないから。周りの友だちや知人に聞いてみるかなぁ。&lt;/p></content></item><item><title>新規メンバー</title><link>/diary/posts/2022/0502/</link><pubDate>Mon, 02 May 2022 07:29:34 +0900</pubDate><guid>/diary/posts/2022/0502/</guid><description>23時に寝て5時に起きて2度寝して6時に起きた。今年の連休はカレンダー通りに過ごすので月曜日と金曜日の飛び石のお仕事。
開発メンバーの加入 今日から開発者が新たに加わった。6月から正社員になるそうだけど、手続きの問題なのか、5月から1ヶ月間は業務委託として働くという。正社員の開発者がいないために要件定義がうまく進まず、外部の協力会社の開発者が遊休するといった状況があったのだけど、それが改善されていくかもしれない。聞くところによると、シニア開発者らしいのでこれからバリバリ活躍されるはず。一方で1つのチームの開発者が6人というのは中途半端なサイズにもみえる。2チームに分割した方が実際の作業はやりやすいかもしれない。</description><content>&lt;p>23時に寝て5時に起きて2度寝して6時に起きた。今年の連休はカレンダー通りに過ごすので月曜日と金曜日の飛び石のお仕事。&lt;/p>
&lt;h2 id="開発メンバーの加入">開発メンバーの加入&lt;/h2>
&lt;p>今日から開発者が新たに加わった。6月から正社員になるそうだけど、手続きの問題なのか、5月から1ヶ月間は業務委託として働くという。正社員の開発者がいないために要件定義がうまく進まず、外部の協力会社の開発者が遊休するといった状況があったのだけど、それが改善されていくかもしれない。聞くところによると、シニア開発者らしいのでこれからバリバリ活躍されるはず。一方で1つのチームの開発者が6人というのは中途半端なサイズにもみえる。2チームに分割した方が実際の作業はやりやすいかもしれない。&lt;/p></content></item><item><title>chatbot やめて slack apps</title><link>/diary/posts/2022/0501/</link><pubDate>Sun, 01 May 2022 09:51:50 +0900</pubDate><guid>/diary/posts/2022/0501/</guid><description>slack と backlog の連携 backlog の rest api を使って課題一覧に定型的なフィルター処理を実行してその結果を slack に通知したい。日々のスクラムイベントで画面をぽちぽちしながらチェックするのにそろそろ飽きてきた。運用が熟れて、みないといけない課題のフィルター条件が明確になったとも言える。こういうのを人間が手作業でフィルターするのをやめて誰でも操作できて、頻繁に目に付くようにすることでメンバーの運用に変化をもたらす。人間の行動や運用を変えるのは並大抵のことではないので、こういった小さな気づきを絶え間なく与え続けることが大事だと私は考えている。気付く人はすぐに気付く。もちろんそうじゃない人もいるが。
backlog 公式 slack app は backlog で発生したイベントに対するデータを通知することしかできない。たぶん機能拡張されることもなさそうなので足りない機能は自分で作るしかない。当初は知人が働いている会社の次の記事を読んで aws chatbot を使おうと考えていた。
プロジェクトにChatOpsを導入してみる いろいろ調べてみると、chatbot は基本的に aws とのサービス連携を前提としたものだとわかった。もちろん lambda と連携することで backlog の rest api を呼び出すことはできるだろうけど、backlog にアクセスしたいだけなら最初から slack apps を自前で作ってそこから backlog の rest api を使った方が構成がシンプルでカスタマイズもしやすいのではないかと思えてきた。slack apps をどこにどうやってデプロイするかは検討課題と言える。lambda にデプロイすることもできるし、専用に ec2 インスタンスを設けてもいいかもしれない。すぐには結論が出ないのでデプロイは作った後で考えることにする。
次にサードパーティの slack apps のセキュリティはどうやって担保するのだろう？と調べてみた。slack 社もレビューはするけど、セキュリティを保証するものではない。適当にググってみつかった記事を読んでみても、基本的に悪意のない slack apps かどうかを検証する方法はなさそう。slack のメッセージを不正な用途に使われる可能性があるというリスクを受け入れつつ、サードパーティの slack apps をインストールするときに権限が適切かどうかを確認するぐらいしかできない。
Slack App Security Review Third-Party Apps on Slack: Lurking Data Security Threat 従って、サードパーティ製の backlog slack apps を作ろうと思ったらソースコードを公開して悪意がないことを訴求するぐらいしかできることはなさそうにみえる。ソースコードを公開しておけば、それぞれの組織内でデプロイする手段も取れる。当社のプロダクトとしてクラウド上にパブリックに公開するかどうかはある程度、作り込んでから後で考えることにする。github のカスタム action は java で作ったけど、今回は go で作ろうと思う。</description><content>&lt;h2 id="slack-と-backlog-の連携">slack と backlog の連携&lt;/h2>
&lt;p>backlog の rest api を使って課題一覧に定型的なフィルター処理を実行してその結果を slack に通知したい。日々のスクラムイベントで画面をぽちぽちしながらチェックするのにそろそろ飽きてきた。運用が熟れて、みないといけない課題のフィルター条件が明確になったとも言える。こういうのを人間が手作業でフィルターするのをやめて誰でも操作できて、頻繁に目に付くようにすることでメンバーの運用に変化をもたらす。人間の行動や運用を変えるのは並大抵のことではないので、こういった小さな気づきを絶え間なく与え続けることが大事だと私は考えている。気付く人はすぐに気付く。もちろんそうじゃない人もいるが。&lt;/p>
&lt;p>&lt;a href="https://backlog.com/integrations/slack/">backlog 公式 slack app&lt;/a> は backlog で発生したイベントに対するデータを通知することしかできない。たぶん機能拡張されることもなさそうなので足りない機能は自分で作るしかない。当初は知人が働いている会社の次の記事を読んで &lt;a href="https://aws.amazon.com/jp/chatbot/">aws chatbot&lt;/a> を使おうと考えていた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://note.com/nissan_nkm_blog/n/na30a8150ac5d">プロジェクトにChatOpsを導入してみる&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>いろいろ調べてみると、chatbot は基本的に aws とのサービス連携を前提としたものだとわかった。もちろん lambda と連携することで backlog の rest api を呼び出すことはできるだろうけど、backlog にアクセスしたいだけなら最初から slack apps を自前で作ってそこから backlog の rest api を使った方が構成がシンプルでカスタマイズもしやすいのではないかと思えてきた。slack apps をどこにどうやってデプロイするかは検討課題と言える。lambda にデプロイすることもできるし、専用に ec2 インスタンスを設けてもいいかもしれない。すぐには結論が出ないのでデプロイは作った後で考えることにする。&lt;/p>
&lt;p>次にサードパーティの slack apps のセキュリティはどうやって担保するのだろう？と調べてみた。slack 社もレビューはするけど、セキュリティを保証するものではない。適当にググってみつかった記事を読んでみても、基本的に悪意のない slack apps かどうかを検証する方法はなさそう。slack のメッセージを不正な用途に使われる可能性があるというリスクを受け入れつつ、サードパーティの slack apps をインストールするときに権限が適切かどうかを確認するぐらいしかできない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://api.slack.com/security-review">Slack App Security Review&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.polymerhq.io/blog/third-party-apps-on-slack-lurking-data-security-threat/">Third-Party Apps on Slack: Lurking Data Security Threat&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>従って、サードパーティ製の backlog slack apps を作ろうと思ったらソースコードを公開して悪意がないことを訴求するぐらいしかできることはなさそうにみえる。ソースコードを公開しておけば、それぞれの組織内でデプロイする手段も取れる。当社のプロダクトとしてクラウド上にパブリックに公開するかどうかはある程度、作り込んでから後で考えることにする。github のカスタム action は java で作ったけど、今回は go で作ろうと思う。&lt;/p></content></item></channel></rss>