<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2022/02 on forest nook</title><link>/diary/dates/2022/02/</link><description>Recent content in 2022/02 on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/dates/2022/02/index.xml" rel="self" type="application/rss+xml"/><item><title>確定申告書類の印刷</title><link>/diary/posts/2022/0207/</link><pubDate>Mon, 07 Feb 2022 09:04:45 +0900</pubDate><guid>/diary/posts/2022/0207/</guid><description>1時に寝て7時に起きた。
確定申告書類の印刷 最近は遅くても8時、速かったら7時過ぎからお仕事している。ちょうど仕事の谷間で手持ちのタスクを終えてしまっていて、今日から別のタスクに着手する予定が、昨日から障害が発生していたらしく、朝忙しそうだったから11時まで確定申告の作業をしていた。昨日、データ入力は終えていたので総勘定元帳をみながら変な数字になっていないかをチェックしたり、源泉徴収税の還付金の計算があうかどうかを検算したりしていた。あとすでに廃棄した固定資産が残っていることに気付いた。耐用年数が過ぎた固定資産の価値は1円として管理される。これを備忘価格と呼ぶらしい。除却の手続きもした。ついでに 固定資産売却益（損）とは の会計手続きも調べたりしていた。
オフィスのプリンタで一通り書類を印刷した。あとは提出するだけ。昨年から住んでいるところの徒歩圏内に申告できる場所ができて、散歩のついでに確定申告する程度の手間しかかからない。このまま電子申告してもよいのだけど、寄付金控除のための領収書を写真か PDF ファイルなどで取り込む必要があって、それだけ面倒なので放置している。このまま今年も紙で提出してくるかなぁ。
業務システムの開発 twitter のタイムラインで業務システムの開発者は「業務系エンジニア」と呼ぶとか言っている人をみかけた。そっか、私は web エンジニアから業務系エンジニアになったんだー、web アプリケーション開発しているけどな、とか思いながら、今週からいよいよお手伝い先の業務システムの開発に着手する。いままでインフラやサーバーサイドのシステム寄りの保守や機能開発のみをしていた。さっそく DB スキーマの定義やドキュメントの書き方、作業の進め方などを確認していた。ひとまず1週間のスプリントで終えられそうなタスクなのでがんばってやりたい。</description><content>&lt;p>1時に寝て7時に起きた。&lt;/p>
&lt;h2 id="確定申告書類の印刷">確定申告書類の印刷&lt;/h2>
&lt;p>最近は遅くても8時、速かったら7時過ぎからお仕事している。ちょうど仕事の谷間で手持ちのタスクを終えてしまっていて、今日から別のタスクに着手する予定が、昨日から障害が発生していたらしく、朝忙しそうだったから11時まで確定申告の作業をしていた。昨日、データ入力は終えていたので総勘定元帳をみながら変な数字になっていないかをチェックしたり、源泉徴収税の還付金の計算があうかどうかを検算したりしていた。あとすでに廃棄した固定資産が残っていることに気付いた。耐用年数が過ぎた固定資産の価値は1円として管理される。これを備忘価格と呼ぶらしい。除却の手続きもした。ついでに &lt;a href="https://advisors-freee.jp/article/category/cat-big-03/cat-small-06/12956/">固定資産売却益（損）とは&lt;/a> の会計手続きも調べたりしていた。&lt;/p>
&lt;p>オフィスのプリンタで一通り書類を印刷した。あとは提出するだけ。昨年から住んでいるところの徒歩圏内に申告できる場所ができて、散歩のついでに確定申告する程度の手間しかかからない。このまま電子申告してもよいのだけど、寄付金控除のための領収書を写真か PDF ファイルなどで取り込む必要があって、それだけ面倒なので放置している。このまま今年も紙で提出してくるかなぁ。&lt;/p>
&lt;h2 id="業務システムの開発">業務システムの開発&lt;/h2>
&lt;p>twitter のタイムラインで業務システムの開発者は「業務系エンジニア」と呼ぶとか言っている人をみかけた。そっか、私は web エンジニアから業務系エンジニアになったんだー、web アプリケーション開発しているけどな、とか思いながら、今週からいよいよお手伝い先の業務システムの開発に着手する。いままでインフラやサーバーサイドのシステム寄りの保守や機能開発のみをしていた。さっそく DB スキーマの定義やドキュメントの書き方、作業の進め方などを確認していた。ひとまず1週間のスプリントで終えられそうなタスクなのでがんばってやりたい。&lt;/p></content></item><item><title>確定申告の準備</title><link>/diary/posts/2022/0206/</link><pubDate>Sun, 06 Feb 2022 10:06:06 +0900</pubDate><guid>/diary/posts/2022/0206/</guid><description>1時に寝て8時に起きた。朝から洗濯と掃除をしてた。姪の大学進学で下宿先を探しに来ると姉が言うからなんか手伝う必要あるのかなと午後は時間をあけてたけど、そうでもなかった。
2021年度の個人の確定申告 夕方から確定申告の作業を始めた。毎年 freee で1ヶ月だけ契約して確定申告の書類を作っている。データ入力の作業は次の2つだけ。
印税の源泉徴収税の明細作成 寄付金の明細作成 書籍の印税収入が定期的に振り込まれる。印税収入は源泉徴収済みとなる。銀行 (出版社) からの明細取り込みに対して、印税と源泉徴収税の明細に分割する必要がある。今年は3社から印税があって、それぞれ数件程度の明細を作成した。クレジットカードで寄付金を支払っているものは明細連携できていないので12ヶ月分の明細を手入力することになる。言うても、それは1団体だけなので12個の明細だけ。会社を作る前は技術書の購入や勉強会の参加費や交通費 (新幹線とか) などにかかった経費なども明細登録していたけど、いまは会社の経費ですべて計上しているので個人で計上するものはなくなった。会社の経費はクレジットカード連携できているし、日々のお仕事で会計処理しているから、確定申告のタイミングでまとめて作業する必要はなくなった。
あと2021年度から 小規模企業共済 に入った。最小1000円/月から最大7万円/月の掛け金を選択する。いくらぐらいが妥当かわからなかったのでひとまず4万円/月で運用している。もちろん掛け金は変更できるが、基本的に20年とか掛け続けるもので、支払った金額は戻ってこないので、あるとき大きなお金が必要となっても融通できない貯金があるみたいものになってしまう。その分のメリットとして、所得控除の対象となる。加入シミュレーション があるので、自分の条件にあわせてやってみるとおもしろい。例えば、納付月数240ヶ月、掛け金7万円/月、課税所得400万円で算出すると24万円/年の節税となる。課税所得が減るので所得税だけでなく住民税も節税となる。</description><content>&lt;p>1時に寝て8時に起きた。朝から洗濯と掃除をしてた。姪の大学進学で下宿先を探しに来ると姉が言うからなんか手伝う必要あるのかなと午後は時間をあけてたけど、そうでもなかった。&lt;/p>
&lt;h2 id="2021年度の個人の確定申告">2021年度の個人の確定申告&lt;/h2>
&lt;p>夕方から確定申告の作業を始めた。毎年 freee で1ヶ月だけ契約して確定申告の書類を作っている。データ入力の作業は次の2つだけ。&lt;/p>
&lt;ul>
&lt;li>印税の源泉徴収税の明細作成&lt;/li>
&lt;li>寄付金の明細作成&lt;/li>
&lt;/ul>
&lt;p>書籍の印税収入が定期的に振り込まれる。印税収入は源泉徴収済みとなる。銀行 (出版社) からの明細取り込みに対して、印税と源泉徴収税の明細に分割する必要がある。今年は3社から印税があって、それぞれ数件程度の明細を作成した。クレジットカードで寄付金を支払っているものは明細連携できていないので12ヶ月分の明細を手入力することになる。言うても、それは1団体だけなので12個の明細だけ。会社を作る前は技術書の購入や勉強会の参加費や交通費 (新幹線とか) などにかかった経費なども明細登録していたけど、いまは会社の経費ですべて計上しているので個人で計上するものはなくなった。会社の経費はクレジットカード連携できているし、日々のお仕事で会計処理しているから、確定申告のタイミングでまとめて作業する必要はなくなった。&lt;/p>
&lt;p>あと2021年度から &lt;a href="https://www.smrj.go.jp/kyosai/skyosai/">小規模企業共済&lt;/a> に入った。最小1000円/月から最大7万円/月の掛け金を選択する。いくらぐらいが妥当かわからなかったのでひとまず4万円/月で運用している。もちろん掛け金は変更できるが、基本的に20年とか掛け続けるもので、支払った金額は戻ってこないので、あるとき大きなお金が必要となっても融通できない貯金があるみたいものになってしまう。その分のメリットとして、所得控除の対象となる。&lt;a href="https://www.smrj.go.jp/kyosai/skyosai/entry/simulation/index.html">加入シミュレーション&lt;/a> があるので、自分の条件にあわせてやってみるとおもしろい。例えば、納付月数240ヶ月、掛け金7万円/月、課税所得400万円で算出すると24万円/年の節税となる。課税所得が減るので所得税だけでなく住民税も節税となる。&lt;/p></content></item><item><title>見積もりの考察</title><link>/diary/posts/2022/0205/</link><pubDate>Sat, 05 Feb 2022 13:03:48 +0900</pubDate><guid>/diary/posts/2022/0205/</guid><description>23時に寝て8時半に起きた。夜中に胃酸が逆流してむせてしんどかった。
ストレッチ 先週の日曜日に自転車でこけて胸を強打してまだ治りきっていない。トレーナーさんに伝えたら主に足のストレッチを重点にしてくれた。今週は2日間ストレッチをやったんだけど、今日の開脚幅は開始前166cmで、ストレッチ後169cmだった。先週と同じなので現状維持といったところ。悪くない数字ではある。今日は左のお尻の後ろの筋肉の張りと右太ももの後ろの筋肉の張りが強かった。
見積もりとは 昨日の バーンダウンしないチャート に関連して「見積もりとはなにか」というタイトルでつらつらと書き始めたら6000文字ほど書いてた。当初はお手伝い先の wiki に書こうと思って書き始めたものの、アウトラインと言いたいことをまとめたら、とくに機密情報はほとんどないことに気付いて、自分のブログのどこかにまとめ直そうと思った。社内向けに書こうとすると、実務の具体例をベースにして自分の論理や考察を展開し、最終的には提案の説得力を高めようと構成する。一方で社外向けに書こうとすると、社内の関係者に対してハラスメントにならないように配慮して書くのをやめた内容を一般論という立て付けで構成できる。文章を書くときに誰向けに書くかは、内容が同じでも話の展開や構成に影響を与えるということにふと気付いた。また数日以内にはどこかのブログに書き直す。</description><content>&lt;p>23時に寝て8時半に起きた。夜中に胃酸が逆流してむせてしんどかった。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>先週の日曜日に自転車でこけて胸を強打してまだ治りきっていない。トレーナーさんに伝えたら主に足のストレッチを重点にしてくれた。今週は2日間ストレッチをやったんだけど、今日の開脚幅は開始前166cmで、ストレッチ後169cmだった。先週と同じなので現状維持といったところ。悪くない数字ではある。今日は左のお尻の後ろの筋肉の張りと右太ももの後ろの筋肉の張りが強かった。&lt;/p>
&lt;h2 id="見積もりとは">見積もりとは&lt;/h2>
&lt;p>昨日の &lt;a href="/diary/diary/posts/2022/0204/">バーンダウンしないチャート&lt;/a> に関連して「見積もりとはなにか」というタイトルでつらつらと書き始めたら6000文字ほど書いてた。当初はお手伝い先の wiki に書こうと思って書き始めたものの、アウトラインと言いたいことをまとめたら、とくに機密情報はほとんどないことに気付いて、自分のブログのどこかにまとめ直そうと思った。社内向けに書こうとすると、実務の具体例をベースにして自分の論理や考察を展開し、最終的には提案の説得力を高めようと構成する。一方で社外向けに書こうとすると、社内の関係者に対してハラスメントにならないように配慮して書くのをやめた内容を一般論という立て付けで構成できる。文章を書くときに誰向けに書くかは、内容が同じでも話の展開や構成に影響を与えるということにふと気付いた。また数日以内にはどこかのブログに書き直す。&lt;/p></content></item><item><title>バーンダウンしないチャート</title><link>/diary/posts/2022/0204/</link><pubDate>Fri, 04 Feb 2022 08:27:32 +0900</pubDate><guid>/diary/posts/2022/0204/</guid><description>0時に寝て4時に起きてドラクエタクトしたり twtter 眺めたりして金朝ツメトギで DX 実践手引書 を読んでた。
スプリントの残チケット スクラム開発でバックログのバーンダウンチャートを表示させるために、スプリントに対して、同じ期間のマイルストーンを設定するように運用が変わった。運用変更に伴い、バーンダウンチャートも表示されるようになり、スプリントの進捗状況の見える化が進められた。そのバーンダウンチャートの運用について SM と話していて、私の過去の開発とスプリントの考え方の大きな違いを発見した。
私がこれまでやってきた開発はマイルストーンの日には残チケットがゼロになるように開発していた。開発が遅延してそのマイルストーンで完了しそうにないチケットはどこかのタイミングで次のマイルストーンに先送りさせることで、いまやっているマイルストーンの開発が計画通りに完了するよう調整していた。作業が期限までに間に合わないチケットは早めに検知して報告して対応を検討する。一般論として、遅延したときは期限を延期するか、次のマイルストーンに先送りするかのどちらかしかない。
スクラムの場合、PO はスプリントを中止する権限をもっているが、基本的にスプリントの計画は変更しない。スプリント内でマイルストーンに間に合わないチケットがわかっていても、マイルストーンは変更せず、次のスプリントプランニングまで放置して、次のスプリントプランニングで遅れたチケットの作業を中止するか、引き続きやるかを検討するという。このやり方だと、スプリント終了日 (マイルストーンの日) に遅延して完了できないとわかっているチケットがすべて残ってしまう。当然バーンダウンチャートはバーンダウンしない。
一方でこれまでマイルストーンこそ設定していなかったものの、様々な理由でスプリントでやる予定だったチケットが遅延することは度々あった。それはデイリースクラムで遅れますとか、予想外のタスクが出てきましたとか、そういう報告をもって実運用では次のスプリントに持ち越ししていた。実運用では持ち越ししているのに、マイルストーンを変えるのは計画の変更だからやってはいけないという話しになって、見える化したのにバーンダウンしないチャートがあって、この運用に何の意味があるのだろう？わからなくなった。</description><content>&lt;p>0時に寝て4時に起きてドラクエタクトしたり twtter 眺めたりして金朝ツメトギで &lt;a href="https://www.ipa.go.jp/files/000094497.pdf">DX 実践手引書&lt;/a> を読んでた。&lt;/p>
&lt;h2 id="スプリントの残チケット">スプリントの残チケット&lt;/h2>
&lt;p>スクラム開発でバックログのバーンダウンチャートを表示させるために、スプリントに対して、同じ期間のマイルストーンを設定するように運用が変わった。運用変更に伴い、バーンダウンチャートも表示されるようになり、スプリントの進捗状況の見える化が進められた。そのバーンダウンチャートの運用について SM と話していて、私の過去の開発とスプリントの考え方の大きな違いを発見した。&lt;/p>
&lt;p>私がこれまでやってきた開発はマイルストーンの日には残チケットがゼロになるように開発していた。開発が遅延してそのマイルストーンで完了しそうにないチケットはどこかのタイミングで次のマイルストーンに先送りさせることで、いまやっているマイルストーンの開発が計画通りに完了するよう調整していた。作業が期限までに間に合わないチケットは早めに検知して報告して対応を検討する。一般論として、遅延したときは期限を延期するか、次のマイルストーンに先送りするかのどちらかしかない。&lt;/p>
&lt;p>スクラムの場合、PO はスプリントを中止する権限をもっているが、基本的にスプリントの計画は変更しない。スプリント内でマイルストーンに間に合わないチケットがわかっていても、マイルストーンは変更せず、次のスプリントプランニングまで放置して、次のスプリントプランニングで遅れたチケットの作業を中止するか、引き続きやるかを検討するという。このやり方だと、スプリント終了日 (マイルストーンの日) に遅延して完了できないとわかっているチケットがすべて残ってしまう。当然バーンダウンチャートはバーンダウンしない。&lt;/p>
&lt;p>一方でこれまでマイルストーンこそ設定していなかったものの、様々な理由でスプリントでやる予定だったチケットが遅延することは度々あった。それはデイリースクラムで遅れますとか、予想外のタスクが出てきましたとか、そういう報告をもって実運用では次のスプリントに持ち越ししていた。実運用では持ち越ししているのに、マイルストーンを変えるのは計画の変更だからやってはいけないという話しになって、見える化したのにバーンダウンしないチャートがあって、この運用に何の意味があるのだろう？わからなくなった。&lt;/p></content></item><item><title>開発の谷間</title><link>/diary/posts/2022/0203/</link><pubDate>Thu, 03 Feb 2022 07:58:53 +0900</pubDate><guid>/diary/posts/2022/0203/</guid><description>0時に寝て6時半に起きた。
ドキュメント作成 今週はあまり開発せず、バックログの wiki にドキュメントを書いてた。バックログの wiki は慣れると書きやすいし、Backlog Power Ups の chrome 拡張をインストールすると PlantUML で UML もレンダリングできる。ドキュメントの階層化はタイトルに / で区切ってグルーピングするというちょっと変なやり方。wiki のタグはフィルター条件として使いやすいように思えた。添付画像のサイズ指定ができないか調べてたら、ヌーラボコミュニティがあることに気付いた。せっかくなので 改善要望 を投稿しておいたけど、過疎っててあまり意味がないかもしれない。</description><content>&lt;p>0時に寝て6時半に起きた。&lt;/p>
&lt;h2 id="ドキュメント作成">ドキュメント作成&lt;/h2>
&lt;p>今週はあまり開発せず、バックログの wiki にドキュメントを書いてた。バックログの wiki は慣れると書きやすいし、&lt;a href="https://chrome.google.com/webstore/detail/backlog-power-ups/oknjgkbkglfeeobjojelkbhfpjkgcndb?hl=ja">Backlog Power Ups&lt;/a> の chrome 拡張をインストールすると &lt;a href="https://plantuml.com/ja/">PlantUML&lt;/a> で UML もレンダリングできる。ドキュメントの階層化はタイトルに &lt;code>/&lt;/code> で区切ってグルーピングするというちょっと変なやり方。wiki のタグはフィルター条件として使いやすいように思えた。添付画像のサイズ指定ができないか調べてたら、ヌーラボコミュニティがあることに気付いた。せっかくなので &lt;a href="https://ja.community.nulab.com/u/tetsuyamorimoto-5hx/activity">改善要望&lt;/a> を投稿しておいたけど、過疎っててあまり意味がないかもしれない。&lt;/p></content></item><item><title>情熱の考察</title><link>/diary/posts/2022/0202/</link><pubDate>Wed, 02 Feb 2022 08:14:55 +0900</pubDate><guid>/diary/posts/2022/0202/</guid><description>0時に寝て4時半に起きてドラクエタクトを1時間ほどやって寝て7時半に起きた。
課題管理の情熱 先日、行った 3ヶ月フィードバック はスクラムマスターには好評だったらしく、他にも3人ほど読んでくれた人たちがいたようだ。いま課題管理のボードの整理をしたり、wiki のドキュメント階層を整理したり、情報共有や書く文化の重要性を説いたり、チームに私のやり方を見本のように示している。チームにも、私のチケットはコメントの量が大幅に違うということは認識され、それを見様見真似でやり始める開発者も現れ始めている。誰もが最初はお手本を模倣しながら学ぶ。いままで課題管理と情報共有というコンテキストで見本を示せる開発者がいなかっただけという話だ。
ふと、なぜ私はここまで課題管理やドキュメントなどを整理したがるのか、自分で考えてもよくわからない。強いて言うと、自分が働く環境やツールに関心をもっていて、それをいまよりもより良く改善したいという気持ちが他人よりも強いのかもしれない。働くからにはよいものを作りたい、ひいてはよい環境があればよいものを作れる、よい環境を作るための投資は惜しまないという姿勢から、課題管理のワークフローと情報共有の最適化を常に考えながら実践している気がする。もっと端的には言えば、仕事がどうこうというのは全く関係なく、日々の活動に関心をもっていると言えるのかもしれないなと思ったりした。採用における特性をみるときの1つの指標として生きていることに関心をもっているか、どういう行動を取っているかとかをヒアリングしてもおもしろいのかもしれない。</description><content>&lt;p>0時に寝て4時半に起きてドラクエタクトを1時間ほどやって寝て7時半に起きた。&lt;/p>
&lt;h2 id="課題管理の情熱">課題管理の情熱&lt;/h2>
&lt;p>先日、行った &lt;a href="/diary/diary/posts/2022/0130/#3ヶ月フィードバック完了">3ヶ月フィードバック&lt;/a> はスクラムマスターには好評だったらしく、他にも3人ほど読んでくれた人たちがいたようだ。いま課題管理のボードの整理をしたり、wiki のドキュメント階層を整理したり、情報共有や書く文化の重要性を説いたり、チームに私のやり方を見本のように示している。チームにも、私のチケットはコメントの量が大幅に違うということは認識され、それを見様見真似でやり始める開発者も現れ始めている。誰もが最初はお手本を模倣しながら学ぶ。いままで課題管理と情報共有というコンテキストで見本を示せる開発者がいなかっただけという話だ。&lt;/p>
&lt;p>ふと、なぜ私はここまで課題管理やドキュメントなどを整理したがるのか、自分で考えてもよくわからない。強いて言うと、自分が働く環境やツールに関心をもっていて、それをいまよりもより良く改善したいという気持ちが他人よりも強いのかもしれない。働くからにはよいものを作りたい、ひいてはよい環境があればよいものを作れる、よい環境を作るための投資は惜しまないという姿勢から、課題管理のワークフローと情報共有の最適化を常に考えながら実践している気がする。もっと端的には言えば、仕事がどうこうというのは全く関係なく、日々の活動に関心をもっていると言えるのかもしれないなと思ったりした。採用における特性をみるときの1つの指標として生きていることに関心をもっているか、どういう行動を取っているかとかをヒアリングしてもおもしろいのかもしれない。&lt;/p></content></item><item><title>wiki のドキュメント整理</title><link>/diary/posts/2022/0201/</link><pubDate>Tue, 01 Feb 2022 07:28:46 +0900</pubDate><guid>/diary/posts/2022/0201/</guid><description>23時に寝て4時半に起きた。昨日の帰りに自転車でこけて胸を強打してひたすら痛い。起き上がるのも痛い。安静にしてた。
kubernetes のログ管理と datadog-agent のログ連携不具合 先日、datadog にログ連携されていない不具合 が発生していて、その1次調査を終えたことについて書いた。緊急対応としては datadog-agent を再起動することで改善することはわかっていたので、その後、kubernetes のログ管理と datadog-agent がどうやって kubernetes クラスター上で実行されているアプリケーションのログを収集しているかを調査していた。今日は wiki に調査してわかったことなどをまとめていた。
kubernetes クラスターはコンテナランタイムに docker を使っていて、アプリケーションの stdout/stderr を docker の logging driver にリダイレクトし、JSON Lines に設定された logging driver が kubernetes ノード上にログファイルとして出力する。datadog-agent は autodiscovery 機能で pod の情報を常にポーリングしていて、pod が新たにデプロイされたらログファイルを pod 内にマウントして、そのマウントしたログファイルを読み込んでログ収集していると思われる。datadog-agent から pod の情報を取得するには kubernetes のサービスアカウントを使っていて、その credential が projected volume としてマウントされて pod 内から利用できる。その credential を使って kubelet api にリクエストすることで pod の情報を取得している。
文章で書けばたったこれだけのことなんだけど、たったこれだけのことを理解するのに次のドキュメントを読んだ。実際の調査のときはわからなかったのでもっと多くのドキュメントを読んでいる。いま書いたことを理解するならこのドキュメントを読めば理解できるはず。
https://kubernetes.io/docs/concepts/overview/components/ https://kubernetes.io/docs/concepts/architecture/control-plane-node-communication/ https://kubernetes.io/docs/concepts/cluster-administration/logging/ https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/ https://kubernetes.io/docs/concepts/storage/projected-volumes/ https://docs.datadoghq.com/agent/kubernetes/log/?tab=helm https://docs.</description><content>&lt;p>23時に寝て4時半に起きた。昨日の帰りに自転車でこけて胸を強打してひたすら痛い。起き上がるのも痛い。安静にしてた。&lt;/p>
&lt;h2 id="kubernetes-のログ管理と-datadog-agent-のログ連携不具合">kubernetes のログ管理と datadog-agent のログ連携不具合&lt;/h2>
&lt;p>先日、&lt;a href="/diary/diary/posts/2022/0127/#ログ連携の不具合調査">datadog にログ連携されていない不具合&lt;/a> が発生していて、その1次調査を終えたことについて書いた。緊急対応としては datadog-agent を再起動することで改善することはわかっていたので、その後、kubernetes のログ管理と datadog-agent がどうやって kubernetes クラスター上で実行されているアプリケーションのログを収集しているかを調査していた。今日は wiki に調査してわかったことなどをまとめていた。&lt;/p>
&lt;p>kubernetes クラスターはコンテナランタイムに docker を使っていて、アプリケーションの stdout/stderr を docker の logging driver にリダイレクトし、JSON Lines に設定された logging driver が kubernetes ノード上にログファイルとして出力する。datadog-agent は autodiscovery 機能で pod の情報を常にポーリングしていて、pod が新たにデプロイされたらログファイルを pod 内にマウントして、そのマウントしたログファイルを読み込んでログ収集していると思われる。datadog-agent から pod の情報を取得するには kubernetes のサービスアカウントを使っていて、その credential が projected volume としてマウントされて pod 内から利用できる。その credential を使って kubelet api にリクエストすることで pod の情報を取得している。&lt;/p>
&lt;p>文章で書けばたったこれだけのことなんだけど、たったこれだけのことを理解するのに次のドキュメントを読んだ。実際の調査のときはわからなかったのでもっと多くのドキュメントを読んでいる。いま書いたことを理解するならこのドキュメントを読めば理解できるはず。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/overview/components/">https://kubernetes.io/docs/concepts/overview/components/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/architecture/control-plane-node-communication/">https://kubernetes.io/docs/concepts/architecture/control-plane-node-communication/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/cluster-administration/logging/">https://kubernetes.io/docs/concepts/cluster-administration/logging/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/">https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/storage/projected-volumes/">https://kubernetes.io/docs/concepts/storage/projected-volumes/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.datadoghq.com/agent/kubernetes/log/?tab=helm">https://docs.datadoghq.com/agent/kubernetes/log/?tab=helm&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.datadoghq.com/getting_started/agent/autodiscovery/?tab=kubernetes">https://docs.datadoghq.com/getting_started/agent/autodiscovery/?tab=kubernetes&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>当然、ドキュメントに書いてあることがソース上で確認するため、kubernetes と datadog-agent のソースコードも読んだ。どちらも go 言語で実装されている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubernetes/kubernetes">https://github.com/kubernetes/kubernetes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/DataDog/datadog-agent">https://github.com/DataDog/datadog-agent&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>kubectl logs&lt;/code> の振る舞いを確認するだけでも、ソースコードからは実際のログファイルを open してストリームを返しているところはわからなかった。api 呼び出しが連携されて抽象化されていて、コンポーネントの役割分担があって、何も知らずにコードを読んでいてもわからなかった。Kubernetes の低レイヤーのところは Container Runtime Interface (CRI) という標準化を行い、1.20 から docker は非推奨となり、将来的に CRI を提供する実装に置き換わるらしい。ログファイルを open する役割は CRI の実装が担うんじゃないかと思うけど、そこまでは調べきれなかった。また機会があれば CRI の実装も読んでみる。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0201_kubectl-logs.png"/>
&lt;/figure></content></item></channel></rss>