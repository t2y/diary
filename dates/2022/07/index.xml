<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2022/07 on forest nook</title><link>/diary/dates/2022/07/</link><description>Recent content in 2022/07 on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/dates/2022/07/index.xml" rel="self" type="application/rss+xml"/><item><title>cdk で既存の eks クラスターを管理すべきか</title><link>/diary/posts/2022/0629/</link><pubDate>Wed, 29 Jun 2022 08:19:59 +0900</pubDate><guid>/diary/posts/2022/0629/</guid><description>0時に寝て6時に起きた。
cdk から既存の eks クラスターを制御する 1ヶ月ほど前に検証していた cdk による eks クラスターの helm 管理 を再検証した。kubectlRoleArn にどういった権限をもつ iam role を設定したらよいかがよくわからなくて苦労していた。最終的にそれが理解できて helm 管理もできるようになったのでまとめておく。
kubectlRoleArn - the ARN of an IAM role mapped to the system:masters RBAC role. If the cluster you are importing was created using the AWS CDK, the CloudFormation stack has an output that includes an IAM role that can be used. Otherwise, you can create an IAM role and map it to system:masters manually.</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="cdk-から既存の-eks-クラスターを制御する">cdk から既存の eks クラスターを制御する&lt;/h2>
&lt;p>1ヶ月ほど前に検証していた &lt;a href="/diary/diary/posts/2022/0518/#cdk-のパッチ検証">cdk による eks クラスターの helm 管理&lt;/a> を再検証した。kubectlRoleArn にどういった権限をもつ iam role を設定したらよいかがよくわからなくて苦労していた。最終的にそれが理解できて helm 管理もできるようになったのでまとめておく。&lt;/p>
&lt;blockquote>
&lt;p>kubectlRoleArn - the ARN of an IAM role mapped to the system:masters RBAC role. If the cluster you are importing was created using the AWS CDK, the CloudFormation stack has an output that includes an IAM role that can be used. Otherwise, you can create an IAM role and map it to system:masters manually. The trust policy of this role should include the the arn:aws::iam::${accountId}:root principal in order to allow the execution role of the kubectl resource to assume it.&lt;/p>
&lt;p>&lt;a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_eks-readme.html#using-existing-clusters">https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_eks-readme.html#using-existing-clusters&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>aws-auth の configmap に設定されている system:masters に所属している iam role を調べる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kubectl describe configmap -n kube-system aws-auth
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この iam role には &lt;code>sts:AssumeRole&lt;/code> 権限を与え、trust relationships に &lt;code>arn:aws:iam::${accountId}:root&lt;/code> といった root ユーザーを含める必要がある。この root ユーザーの設定がないと次のような権限エラーが発生する。この権限エラーの修正方法がわからなくて苦労していた。結果的には関係なかった kubectlLambdaRole の設定も必要なんじゃないかと検証していたのが前回の作業の中心だった。&lt;/p>
&lt;pre tabindex="0">&lt;code>An error occurred (AccessDenied) when calling the AssumeRole operation:
User: arn:aws:sts::${accountId}:assumed-role/xxx is not authorized to perform: sts:AssumeRole on resource: arn:aws:iam::${accountId}:role/myrole
Error: Kubernetes cluster unreachable: Get &amp;#34;https://xxx.gr7.ap-northeast-1.eks.amazonaws.com/version
&lt;/code>&lt;/pre>&lt;p>ようやく cdk で既存の eks クラスターをインポートして helm パッケージを管理できるようになった。とはいえ、cdk/cf の実行時間を測ってみると次のようになった。&lt;/p>
&lt;ul>
&lt;li>helm パッケージの新規インストール: 約5分&lt;/li>
&lt;li>helm パッケージのアンインストール: 約25分&lt;/li>
&lt;/ul>
&lt;p>これは cdk が helm パッケージを管理するための lambda 環境を構築/削除するときの時間になる。cdk はアプリケーションの stack から nested stack を作成して、そこに lambda や iam role などをまとめて作成する。一度作成してしまえば、バージョンのアップグレードは30秒ほどで完了した。&lt;/p>
&lt;p>この振る舞いを検証した上で、cdk で eks クラスターをインポートする管理はやめようとチームに提案した。正しい設定を作ってしまえば運用は楽になると言える一面もあるが、新規に helm パッケージを追加するときのちょっとした typo や設定ミスなどがあると、1回の試行に30分かかる。私がこの検証に1週間以上のデバッグ時間を割いている理由がそれに相当する。お手伝い先の運用ではテスト/本番環境ともにローカルから接続できる状態なので helm コマンドを直接実行した方が遥かに管理コストや保守コストを下げると言える。cdk を使って嬉しいことは helm コマンドでわかるバージョン情報と設定内容が cdk のコードとして管理されているぐらいでしかない。ドキュメントと helm コマンドで管理する方が現状ではよいだろうと私は結論付けた。同じような理由で eks クラスターも cdk ではなく eksctl コマンドで管理されている。&lt;/p>
&lt;p>1週間以上の労力と時間を費やしてやらない方がよいとわかったという、一般的には失敗と呼ばれる作業に終わったわけだけど、eks/cdk の勉強にはなった。&lt;/p></content></item></channel></rss>