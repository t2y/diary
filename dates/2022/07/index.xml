<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2022/07 on forest nook</title><link>/diary/dates/2022/07/</link><description>Recent content in 2022/07 on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/dates/2022/07/index.xml" rel="self" type="application/rss+xml"/><item><title>意図がわかる設計とリファクタリング</title><link>/diary/posts/2022/0714/</link><pubDate>Thu, 14 Jul 2022 08:14:28 +0900</pubDate><guid>/diary/posts/2022/0714/</guid><description>1時に寝て7時に起きた。久しぶりに HELLSING をみてた。アレクサンド・アンデルセンの狂信者ノリが好き。
煩雑な保守 昨日から着手した s3 とやり取りするアプリケーションの保守をしている。一通り機能は実装できたが、このアプリケーションの保守を今後どうやっていけばいいのかが私からはみえない。要件が変わる度に継ぎ接ぎで拡張してきて、意図をもった設計があるわけではないようにみえる。このまま保守することはできるかもしれないが、このロジックの説明もテストも検証もすべてが難しい。私がみても難しいのだから、経験の浅い開発者がみるともっと難しいのではないかと思う。
これを直すにはまず単体テストを直さないといけない。単体テストの大半がモックベースなので実際の振る舞いと異なる可能性がある。とくに s3 とやり取りするところの検証ができない。testcontainers の localstack があるので単体テストはモックからこのモジュールを使うように代替できそう。まずはそこからやるべきだが、2-3日はかかると見込まれるのでチームで承認を得られるかどうか、ちょっと聞いてみてから考える。
Job Summary を使ってみた ちょっと前に github actions のワークフローの実行画面にサマリを出力できるようになったという記事をみた。
Supercharging GitHub Actions with Job Summaries 自動でよさげなサマリを出力してくれるわけではなく、自分でサマリを作らないといけないので面倒だなと思ってそのまま放置していた。先週末に モジュール別のビルド・デプロイのワークフロー改善 を行った。ふとワークフローの実行結果をみていて、選択したモジュール名が表示されているとわかりやすくていいなと思えた。それを出力する手段としてサマリがちょうどいいやということに気付いた。inputs などで動的に変更するパラメーターをワークフローの実行画面で確認できるといちいちログ確認する手間が省けてよいという場面が他の用途でもある気がしてきた。もっと積極的にサマリを使っていこうと思えた瞬間だった。</description><content>&lt;p>1時に寝て7時に起きた。久しぶりに &lt;a href="https://www.nbcuni.co.jp/rondorobe/anime/hellsing/">HELLSING&lt;/a> をみてた。アレクサンド・アンデルセンの狂信者ノリが好き。&lt;/p>
&lt;h2 id="煩雑な保守">煩雑な保守&lt;/h2>
&lt;p>昨日から着手した s3 とやり取りするアプリケーションの保守をしている。一通り機能は実装できたが、このアプリケーションの保守を今後どうやっていけばいいのかが私からはみえない。要件が変わる度に継ぎ接ぎで拡張してきて、意図をもった設計があるわけではないようにみえる。このまま保守することはできるかもしれないが、このロジックの説明もテストも検証もすべてが難しい。私がみても難しいのだから、経験の浅い開発者がみるともっと難しいのではないかと思う。&lt;/p>
&lt;p>これを直すにはまず単体テストを直さないといけない。単体テストの大半がモックベースなので実際の振る舞いと異なる可能性がある。とくに s3 とやり取りするところの検証ができない。&lt;a href="https://www.testcontainers.org/modules/localstack/">testcontainers の localstack&lt;/a> があるので単体テストはモックからこのモジュールを使うように代替できそう。まずはそこからやるべきだが、2-3日はかかると見込まれるのでチームで承認を得られるかどうか、ちょっと聞いてみてから考える。&lt;/p>
&lt;h2 id="job-summary-を使ってみた">Job Summary を使ってみた&lt;/h2>
&lt;p>ちょっと前に github actions のワークフローの実行画面にサマリを出力できるようになったという記事をみた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.blog/2022-05-09-supercharging-github-actions-with-job-summaries/">Supercharging GitHub Actions with Job Summaries&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>自動でよさげなサマリを出力してくれるわけではなく、自分でサマリを作らないといけないので面倒だなと思ってそのまま放置していた。先週末に &lt;a href="/diary/diary/posts/2022/0709/#github-actions-の-push-イベントワークフロー改善">モジュール別のビルド・デプロイのワークフロー改善&lt;/a> を行った。ふとワークフローの実行結果をみていて、選択したモジュール名が表示されているとわかりやすくていいなと思えた。それを出力する手段としてサマリがちょうどいいやということに気付いた。inputs などで動的に変更するパラメーターをワークフローの実行画面で確認できるといちいちログ確認する手間が省けてよいという場面が他の用途でもある気がしてきた。もっと積極的にサマリを使っていこうと思えた瞬間だった。&lt;/p></content></item><item><title>localstack s3 想像以上に難しかった</title><link>/diary/posts/2022/0713/</link><pubDate>Wed, 13 Jul 2022 08:22:55 +0900</pubDate><guid>/diary/posts/2022/0713/</guid><description>1時に寝て5時半に起きて7時に起きた。夏バテなのか朝起きれなくなってきた。
localstack 入門 s3 とやり取りするアプリケーションの保守を手伝うことになった。いま開発環境向けに minio を使っていて、そのためだけにトリッキーな DI を実装している。そのコードがトリッキーなだけに知らない人がコードをコピペしてトラブルを起こす火種になってた。minio 使う必要性はまったくなく localstack を使えば解決できるのを、誰もその保守してなくて、仕方ないからこの機に私がやることにした。すぐにできるやろと思ったら意外にはまって2-3時間デバッグに時間を取られたので書いておく。
簡潔に言うと、(おそらく歴史的経緯で) minio は基本的に path style で s3 api を扱う。virtual hosted style でリクエストするとアクセスできなくてどうやって解決するのかが分からなかった。ググって出てきたどこかの開発者の言っている通りで path style は deprecated していて、aws も削除するとまで宣言していて、いつなくなるかもわからないのに未だにそれがデフォルトというのはどうなの？っていうお気持ちを表明している。
Beware accessing @_localstack using an AWS S3 client configured with virtual hosted style access: GET my-bucket.localhost:4566/prefix/my-object.txt wrongly 404 errors, but a path-style GET localhost:4566 /my-bucket/prefix/my-object.txt succeeds!
&amp;mdash; James Shaw (@hertzsprrrung) October 27, 2020 私も同意見で issue をよくよく調べてみると次のエンドポイントに対しては virtual hosted style でアクセスできた。localhost に対しては path style で動いていて、virutual hosted style は localhost.</description><content>&lt;p>1時に寝て5時半に起きて7時に起きた。夏バテなのか朝起きれなくなってきた。&lt;/p>
&lt;h2 id="localstack-入門">localstack 入門&lt;/h2>
&lt;p>s3 とやり取りするアプリケーションの保守を手伝うことになった。いま開発環境向けに &lt;a href="https://min.io/">minio&lt;/a> を使っていて、そのためだけにトリッキーな DI を実装している。そのコードがトリッキーなだけに知らない人がコードをコピペしてトラブルを起こす火種になってた。minio 使う必要性はまったくなく &lt;a href="https://localstack.cloud/">localstack&lt;/a> を使えば解決できるのを、誰もその保守してなくて、仕方ないからこの機に私がやることにした。すぐにできるやろと思ったら意外にはまって2-3時間デバッグに時間を取られたので書いておく。&lt;/p>
&lt;p>簡潔に言うと、(おそらく歴史的経緯で) minio は基本的に path style で s3 api を扱う。virtual hosted style でリクエストするとアクセスできなくてどうやって解決するのかが分からなかった。ググって出てきたどこかの開発者の言っている通りで path style は deprecated していて、aws も削除するとまで宣言していて、いつなくなるかもわからないのに未だにそれがデフォルトというのはどうなの？っていうお気持ちを表明している。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">Beware accessing &lt;a href="https://twitter.com/_localstack?ref_src=twsrc%5Etfw">@_localstack&lt;/a> using an AWS S3 client configured with virtual hosted style access: GET my-bucket.localhost:4566/prefix/my-object.txt wrongly 404 errors, but a path-style GET localhost:4566 /my-bucket/prefix/my-object.txt succeeds!&lt;/p>&amp;mdash; James Shaw (@hertzsprrrung) &lt;a href="https://twitter.com/hertzsprrrung/status/1321134520389767175?ref_src=twsrc%5Etfw">October 27, 2020&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>私も同意見で issue をよくよく調べてみると次のエンドポイントに対しては virtual hosted style でアクセスできた。localhost に対しては path style で動いていて、virutual hosted style は localhost.localstack.cloud という、よくわからんドメインを使わないといけない。ドキュメントには書いてなくてググって辿り着く issue のコメントをみてたら気付いた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/localstack/localstack/issues/2631">Support for s3 bucket subdomains #2631&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>mybuket.localhost.localstack.cloud
&lt;/code>&lt;/pre>&lt;p>aws-sdk-java v1 のコード例だと次のようになる。バケット名は実際にリクエストするときのパラメーターから s3 client がセットしてくれるのでこんな感じ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>var endpoint &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> AwsClientBuilder&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">EndpointConfiguration&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;localhost.localstack.cloud:4566&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ap-northeast-1&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var client &lt;span style="color:#f92672">=&lt;/span> AmazonS3ClientBuilder&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">standard&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">withEndpointConfiguration&lt;/span>&lt;span style="color:#f92672">(&lt;/span>endpoint&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">build&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> client&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>こんな初期設定でつまづくと、このライブラリを使うのをやめようかという気持ちになる。ちゃんとドキュメントに書いておいてほしい。&lt;/p>
&lt;h2 id="窓付きオフィスの空きをみつけた">窓付きオフィスの空きをみつけた&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0211/#オフィス内覧">エリンサーブさんの内覧&lt;/a> に行ってきてから縁があればという感じでオフィス引っ越しは待ち状態になっていた。いま契約しているところの別オフィスで &lt;a href="https://bizcircle.jp/kobe-kyoryuchi/">神戸旧居留地&lt;/a> のサイトを、たまたま今日みたら窓付きの部屋が空き予定だと書いてあった。&lt;/p>
&lt;blockquote>
&lt;p>7F-07 7月末空き予定 ￥69,300 ￥6,600 2名 6.22㎡ 完全個室/窓付き/棚付き&lt;/p>
&lt;/blockquote>
&lt;p>家賃はいまより 31,900 円増える。年間にすると 382,800 円のコスト増になる。高くはないけど、いまの環境でもう少し続けたら？と言われたらそれでもいっかと思えるぐらいのコスト感。優先度は高くないが、縁があるなら見逃す手もないといったスタンスで臨む。ひとまず明日、電話してまだ空いているなら内覧できるかを聞いてみるところから始める。内覧してよさそうな場所だったら引っ越しを検討する。7月末って急な話だけど、小さいオフィスなので本気出せば &lt;a href="https://rentora.com/">レントラ便&lt;/a> で2時間もあれば引っ越しできるはず。荷造りの準備に1時間、搬送に1時間といったところかな。&lt;/p></content></item><item><title>カンバンの弊害</title><link>/diary/posts/2022/0712/</link><pubDate>Tue, 12 Jul 2022 08:52:22 +0900</pubDate><guid>/diary/posts/2022/0712/</guid><description>0時に寝て8時に起きた。起きたら豪雨だった。梅雨明けが早かったから水不足の土地には恵みの雨だなとか思った。
「緊急対応」という種別 先週のリリースに際して発生した問題に「リリース時緊急対応」という種別が設けられた。当時、私はその種別を設けることそのものに否定的なコメントを発したのだけど、誰かがすでにその種別を作ってしまっていて、いくつかのチケットに設定されていたので成り行きで使うことになった。そして、もうリリースしてから1週間も経つのに未だに「緊急対応」というチケットがいくつも作られている。1週間も運用しているのに緊急もへったくれもないだろうと指摘して、明日から新しいスプリントが始めるので「緊急対応」という種別を付けるのはやめようと提案した。一般的な課題管理システムは緊急度と重要度の2つをもっているけど、backlog は優先度しかない。それでも優先度があるのだからそれを設定すればいいだけなのに優先度を使った運用をしていないのと、課題一覧をフィルターするのではなく、大半のメンバーがカンバンしか使えないといったスキル不足もあって、なくてもよい無駄な種別をまた増やしてしまった。
カンバンはシンプルな要件に使うならよいけど、一定以上の複雑さをもつ普通の会社の開発プロジェクトに使えるようなキャパシティをもっていない。それなら最初から使わない方がよいのではないかと考えるようになってきた。というのは、非開発者にとってカンバンは簡単に使い始められる分、そこからさらに高度な検索フィルターを使いこなすスキルアップを阻んでしまう。複雑な要件をカンバンで実現しようと考えてしまってバッドノウハウ的なアプローチをしていく。その典型例が「緊急対応」という種別作ればいいやんみたいな考え方。
クレジットカードの有効期限の更新 前に yj カードが paypay カードに置き換わったときに有効期限が更新されてクレジットカードの設定更新が必要になると書いてあった気がする。4月8日に paypay カードが届いたみたい。クレジットカードの引き落としタイミングのせいか、しばらくは有効期限が異なっていても paypay カード側で決済を許可していたのか、いずれにしても最近あちこちでクレジットカードの引き落としに失敗するという通知がくるようになった。気付いたら、クレジットカードによる セカンドハーベスト・ジャパン さんの寄付の引き落としも止まっていた。通常、有効期限前にクレジットカードが更新されることはないからサービス側で有効期限が近づいてきたときに更新依頼通知を送っているのだと推測する。寄付みたいなところは引き落とし失敗になると督促しないのかもしれない。もう1つ 国境なき医師団 さんにも寄付しているが、こっちは銀行口座からの引き落としだった。クレジットカードと銀行口座の違いとして有効期限の有無が違う。どちらもメリット・デメリットがあるからずっと払い続けるつもりなら銀行口座、自分が死んだ後にいずれ停止してほしいならクレジットカードを使った方がよいといった考え方もできると気付いた。</description><content>&lt;p>0時に寝て8時に起きた。起きたら豪雨だった。梅雨明けが早かったから水不足の土地には恵みの雨だなとか思った。&lt;/p>
&lt;h2 id="緊急対応という種別">「緊急対応」という種別&lt;/h2>
&lt;p>先週のリリースに際して発生した問題に「リリース時緊急対応」という種別が設けられた。当時、私はその種別を設けることそのものに否定的なコメントを発したのだけど、誰かがすでにその種別を作ってしまっていて、いくつかのチケットに設定されていたので成り行きで使うことになった。そして、もうリリースしてから1週間も経つのに未だに「緊急対応」というチケットがいくつも作られている。1週間も運用しているのに緊急もへったくれもないだろうと指摘して、明日から新しいスプリントが始めるので「緊急対応」という種別を付けるのはやめようと提案した。一般的な課題管理システムは緊急度と重要度の2つをもっているけど、backlog は優先度しかない。それでも優先度があるのだからそれを設定すればいいだけなのに優先度を使った運用をしていないのと、課題一覧をフィルターするのではなく、大半のメンバーがカンバンしか使えないといったスキル不足もあって、なくてもよい無駄な種別をまた増やしてしまった。&lt;/p>
&lt;p>カンバンはシンプルな要件に使うならよいけど、一定以上の複雑さをもつ普通の会社の開発プロジェクトに使えるようなキャパシティをもっていない。それなら最初から使わない方がよいのではないかと考えるようになってきた。というのは、非開発者にとってカンバンは簡単に使い始められる分、そこからさらに高度な検索フィルターを使いこなすスキルアップを阻んでしまう。複雑な要件をカンバンで実現しようと考えてしまってバッドノウハウ的なアプローチをしていく。その典型例が「緊急対応」という種別作ればいいやんみたいな考え方。&lt;/p>
&lt;h2 id="クレジットカードの有効期限の更新">クレジットカードの有効期限の更新&lt;/h2>
&lt;p>前に yj カードが paypay カードに置き換わったときに有効期限が更新されてクレジットカードの設定更新が必要になると書いてあった気がする。4月8日に paypay カードが届いたみたい。クレジットカードの引き落としタイミングのせいか、しばらくは有効期限が異なっていても paypay カード側で決済を許可していたのか、いずれにしても最近あちこちでクレジットカードの引き落としに失敗するという通知がくるようになった。気付いたら、クレジットカードによる &lt;a href="https://2hj.org/">セカンドハーベスト・ジャパン&lt;/a> さんの寄付の引き落としも止まっていた。通常、有効期限前にクレジットカードが更新されることはないからサービス側で有効期限が近づいてきたときに更新依頼通知を送っているのだと推測する。寄付みたいなところは引き落とし失敗になると督促しないのかもしれない。もう1つ &lt;a href="https://www.msf.or.jp/">国境なき医師団&lt;/a> さんにも寄付しているが、こっちは銀行口座からの引き落としだった。クレジットカードと銀行口座の違いとして有効期限の有無が違う。どちらもメリット・デメリットがあるからずっと払い続けるつもりなら銀行口座、自分が死んだ後にいずれ停止してほしいならクレジットカードを使った方がよいといった考え方もできると気付いた。&lt;/p></content></item><item><title>nodeSelector を試す</title><link>/diary/posts/2022/0711/</link><pubDate>Mon, 11 Jul 2022 08:45:04 +0900</pubDate><guid>/diary/posts/2022/0711/</guid><description>4時に寝て8時に起きた。久しぶりに寝坊した。
k8s の nodeSelector 先日 定期/バッチ処理を k8s の cronjob にすべて移行 した。すでに本番運用もしていて調子もよさそうにみえる。あと残課題としてバッチ処理とアプリケーションサーバーの pod がデプロイされる k8s ノードを分割したい。現時点では、バッチ処理の負荷は小さいから同じスペックのインスタンスの k8s ノード上で混在させて運用している。しかし、いずれ運用上の問題になる懸念がある。そのため、バッチ処理のみを実行する k8s ノードを管理したい。次のドキュメントに書いてある。
Assigning Pods to Nodes k8s のドキュメントによると、大きく分けて nodeSelector と Affinity という2つのやり方がある。前者はラベルでフィルターするシンプルな仕組み、後者はさらに複雑な要件に対応するもの。いまのところ、ただ分割できればよいのでシンプルな nodeSelector で実装してみることにした。
nodeSelector Affinity and anti-affinity 余談だが、nodeSelector はいずれ Affinity に置き換わるので deprecated だと一時期ドキュメントに書かれていたらしい。具体的に決まっていることでもないため、nodeSelector: when will it be deprecated? #82184 によると deprecated という文言を含む文章がその後に削除された。Affinity は高機能且つ高コストであることから、(現時点では) nodeSelector はシンプルで推奨すべき方法とまで書いてあるのですぐになくなるわけではなさそう。
minikube で nodeSelector の検証を始めたんだけど、いくつかうまくいかないことがあって断念した。multi-node 機能を使って controll plane と worker ノードの2つを起動できたけど、worker ノードから docker host にアクセスできなかった。何かしら設定が必要なのか、別途レジストリが必要になるのかよくわからなかった。あと node にラベル設定したときに worker ノードにラベル設定しても minikube を再起動するとそのラベルが消えてしまっていて保持されないようだった。ちょっと調べてローカルの環境を作るのが面倒になったので早々に断念した。</description><content>&lt;p>4時に寝て8時に起きた。久しぶりに寝坊した。&lt;/p>
&lt;h2 id="k8s-の-nodeselector">k8s の nodeSelector&lt;/h2>
&lt;p>先日 &lt;a href="/diary/diary/posts/2022/0706/">定期/バッチ処理を k8s の cronjob にすべて移行&lt;/a> した。すでに本番運用もしていて調子もよさそうにみえる。あと残課題としてバッチ処理とアプリケーションサーバーの pod がデプロイされる k8s ノードを分割したい。現時点では、バッチ処理の負荷は小さいから同じスペックのインスタンスの k8s ノード上で混在させて運用している。しかし、いずれ運用上の問題になる懸念がある。そのため、バッチ処理のみを実行する k8s ノードを管理したい。次のドキュメントに書いてある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/">Assigning Pods to Nodes&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>k8s のドキュメントによると、大きく分けて nodeSelector と Affinity という2つのやり方がある。前者はラベルでフィルターするシンプルな仕組み、後者はさらに複雑な要件に対応するもの。いまのところ、ただ分割できればよいのでシンプルな nodeSelector で実装してみることにした。&lt;/p>
&lt;ul>
&lt;li>nodeSelector&lt;/li>
&lt;li>Affinity and anti-affinity&lt;/li>
&lt;/ul>
&lt;p>余談だが、nodeSelector はいずれ Affinity に置き換わるので deprecated だと一時期ドキュメントに書かれていたらしい。具体的に決まっていることでもないため、&lt;a href="https://github.com/kubernetes/kubernetes/issues/82184">nodeSelector: when will it be deprecated? #82184&lt;/a> によると deprecated という文言を含む文章がその後に削除された。Affinity は高機能且つ高コストであることから、(現時点では) nodeSelector はシンプルで推奨すべき方法とまで書いてあるのですぐになくなるわけではなさそう。&lt;/p>
&lt;p>minikube で nodeSelector の検証を始めたんだけど、いくつかうまくいかないことがあって断念した。multi-node 機能を使って controll plane と worker ノードの2つを起動できたけど、worker ノードから docker host にアクセスできなかった。何かしら設定が必要なのか、別途レジストリが必要になるのかよくわからなかった。あと node にラベル設定したときに worker ノードにラベル設定しても minikube を再起動するとそのラベルが消えてしまっていて保持されないようだった。ちょっと調べてローカルの環境を作るのが面倒になったので早々に断念した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://minikube.sigs.k8s.io/docs/tutorials/multi_node/">Using Multi-Node Clusters&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>放置していたバグを直した</title><link>/diary/posts/2022/0710/</link><pubDate>Sun, 10 Jul 2022 11:51:06 +0900</pubDate><guid>/diary/posts/2022/0710/</guid><description>1時に寝て7時に起きた。寝ていて夜中に吐き気して眠れなくて上体を起こすしかなかった。たまにある 胃食道逆流症 のひどいやつ。
参議院選挙 普段は期日前投票で済ませるのだけど、今週は他のことに注意を取られていたせいか、当日行ってきた。場所が期日前と違ったので勝手がわからなかったけど、とくに混雑もしてなかったのですぐに完了できた。タイムラインを眺めると、私のタイムライン上では投票したと発言する人が増えてきたように思う。投票率が50%程度で半分ぐらいの人が投票していない状況に懸念をもつ人たちの可視化がされている。
ふと父の選挙はどうなるんだろう？と思って検索してみた。意思表示できない状態だと選挙はできないみたい。
選挙人本人が投票所に行き自らの意思で投票することが原則であることから、意思表示が困難である場合には投票することはできません。これは投票所の係員が選挙人の投票を補助する代理投票においても同様です。したがって、家族の方が本人に代わって投票することはできません。
神戸市 FAQ &amp;gt; 市政情報 &amp;gt; 選挙
70歳以上は傷病で選挙権を行使できない人たちもいるだろうから減るのかな？と、総務省の 年代別投票率 のグラフを確認してみた。直近だと、70歳以上が61.96, 60歳代が71.43、50歳代が62.96だった。60歳代と比べて減ってはいるけど、50歳代とそう変わらないのをみると、元気な人たちに選挙へ行こうと呼びかけるのは正しい気がした。
backlog-github-integration-action のバグ修正 運用してすぐにコミットメッセージ中にシングルクォートやダブルクォートが含まれると引数を正しくパースできなくてエラーになることがわかっていた。いま運用している環境の用途だと、それほど重要ではないので後回しにしているうちに面倒になって放置していた。晩ご飯を食べてからデバッグしていたら7時間ぐらいやってた。
push subcommand is failed when a commit message includes single quote or double quote #6 bash 上の文字列の扱いと action.yml の inputs の args に引数渡しするときの振る舞いの勘違いもあって、issue の見た目以上に複雑な振る舞いをしていることがわかった。github actions 上のコンテキストに依存したくなかったため、github.event.commits の json をそのまま cli パラメーターとして渡している。bash 上の json 文字列と cli パラメーターとしての扱いが煩雑になるのでこのやり方は失敗だったかもしれない。ローカルでのテストもやりにくい。私はそのことをよく理解していたはずなのに github actoins 上のアンチパターンにはまってしまった。カスタムアクションのユーザーが簡単に使えるように cli パラメーターの設定を簡単にする意図で json 渡しにしたんだけど、エスケープの振る舞いが想像以上にややこしくなって、エスケープしたいユーザーには簡単ではなくなってしまった。それでもデバッグをがんばったおかげでシングルクォートは完全に使えるように実装できた。ダブルクォートは制限付きでエラーにならなくできるが、事実上は使わないでくださいといった仕様制限にしてしまおうと思う。引用するときはダブルクォートじゃなくてシングルクォートを使ってくださいと啓蒙することに決めた。</description><content>&lt;p>1時に寝て7時に起きた。寝ていて夜中に吐き気して眠れなくて上体を起こすしかなかった。たまにある &lt;a href="/diary/diary/posts/2021/1114/#傾斜枕">胃食道逆流症&lt;/a> のひどいやつ。&lt;/p>
&lt;h2 id="参議院選挙">参議院選挙&lt;/h2>
&lt;p>普段は期日前投票で済ませるのだけど、今週は他のことに注意を取られていたせいか、当日行ってきた。場所が期日前と違ったので勝手がわからなかったけど、とくに混雑もしてなかったのですぐに完了できた。タイムラインを眺めると、私のタイムライン上では投票したと発言する人が増えてきたように思う。投票率が50%程度で半分ぐらいの人が投票していない状況に懸念をもつ人たちの可視化がされている。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0710_voted.jpg"/>
&lt;/figure>
&lt;p>ふと父の選挙はどうなるんだろう？と思って検索してみた。意思表示できない状態だと選挙はできないみたい。&lt;/p>
&lt;blockquote>
&lt;p>選挙人本人が投票所に行き自らの意思で投票することが原則であることから、意思表示が困難である場合には投票することはできません。これは投票所の係員が選挙人の投票を補助する代理投票においても同様です。したがって、家族の方が本人に代わって投票することはできません。&lt;/p>
&lt;p>&lt;a href="https://help.city.kobe.lg.jp/hc/ja/articles/4488187002767-%E6%84%8F%E6%80%9D%E8%A1%A8%E7%A4%BA%E3%81%8C%E5%9B%B0%E9%9B%A3%E3%81%AA%E9%81%B8%E6%8C%99%E4%BA%BA%E3%81%AB%E4%BB%A3%E3%82%8F%E3%81%A3%E3%81%A6-%E5%AE%B6%E6%97%8F%E3%81%8C%E6%8A%95%E7%A5%A8%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95%E3%81%AF%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%81%8B-">神戸市 FAQ &amp;gt; 市政情報 &amp;gt; 選挙&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>70歳以上は傷病で選挙権を行使できない人たちもいるだろうから減るのかな？と、総務省の &lt;a href="https://www.soumu.go.jp/senkyo/senkyo_s/news/sonota/nendaibetu/">年代別投票率&lt;/a> のグラフを確認してみた。直近だと、70歳以上が61.96, 60歳代が71.43、50歳代が62.96だった。60歳代と比べて減ってはいるけど、50歳代とそう変わらないのをみると、元気な人たちに選挙へ行こうと呼びかけるのは正しい気がした。&lt;/p>
&lt;h2 id="backlog-github-integration-action-のバグ修正">backlog-github-integration-action のバグ修正&lt;/h2>
&lt;p>運用してすぐにコミットメッセージ中にシングルクォートやダブルクォートが含まれると引数を正しくパースできなくてエラーになることがわかっていた。いま運用している環境の用途だと、それほど重要ではないので後回しにしているうちに面倒になって放置していた。晩ご飯を食べてからデバッグしていたら7時間ぐらいやってた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/backlog-github-integration-action/issues/6">push subcommand is failed when a commit message includes single quote or double quote #6&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>bash 上の文字列の扱いと action.yml の inputs の args に引数渡しするときの振る舞いの勘違いもあって、issue の見た目以上に複雑な振る舞いをしていることがわかった。github actions 上のコンテキストに依存したくなかったため、&lt;code>github.event.commits&lt;/code> の json をそのまま cli パラメーターとして渡している。bash 上の json 文字列と cli パラメーターとしての扱いが煩雑になるのでこのやり方は失敗だったかもしれない。ローカルでのテストもやりにくい。私はそのことをよく理解していたはずなのに github actoins 上のアンチパターンにはまってしまった。カスタムアクションのユーザーが簡単に使えるように cli パラメーターの設定を簡単にする意図で json 渡しにしたんだけど、エスケープの振る舞いが想像以上にややこしくなって、エスケープしたいユーザーには簡単ではなくなってしまった。それでもデバッグをがんばったおかげでシングルクォートは完全に使えるように実装できた。ダブルクォートは制限付きでエラーにならなくできるが、事実上は使わないでくださいといった仕様制限にしてしまおうと思う。引用するときはダブルクォートじゃなくてシングルクォートを使ってくださいと啓蒙することに決めた。&lt;/p></content></item><item><title>github actions の push イベントワークフロー改善</title><link>/diary/posts/2022/0709/</link><pubDate>Sat, 09 Jul 2022 09:09:46 +0900</pubDate><guid>/diary/posts/2022/0709/</guid><description>23時に寝て6時に起きた。今週はサービスインで凸凹していて疲れた。
ストレッチ 今日の開脚幅は開始前161cmで、ストレッチ後164cmだった。ちょっと数値がよくなった。一昨日の日本酒イベントで4時間ほど立ち呑みをしていた疲労で腰に張りが少しあった。それ以外はとくに問題はなくて調子がよかった。右股関節の詰まりも2-3週間前よりもよくなっている気がする。これはトレーナーさんも注意を払って詰まりを取り除くようにストレッチのメニューを組んでくれているのでその成果が徐々に出始めている気がする。以前よりも可動領域が広がってきている気がして安心感を得た。
github actions の push イベントワークフロー改善 午後からビルド・デプロイの最適化のために github actions のワークフローを改善作業をしていた。
今週はサービスインにより、本番環境への緊急リリースを何回もやっているのを傍からみていて、ビルド・デプロイが速くなればなるほど、その回数を増やせるし、修正後の検証に時間を多く割ける。あるリポジトリが7つのモジュールをまとめてビルド・デプロイしている。これはあるモジュールの微修正の反映には向かないので改善することにした。結果として最大で50%ぐらいのビルド時間の削減、モジュールに依っては、具体的には10分かかっていたものを4分台でビルドできるようにした。
ワークフロー改善のためのデバッグしている間はビルド・デプロイが出来なくなることから開発者が使っていない時間帯が望ましい。必然的にサービス休日出勤して github actions のワークフローを改善していた。デバッグと動作の検証も兼ねて午後から半日以上やっていたので休日にやったのは正解だと言えるだろう。
push イベントの github コンテキストの github.event.commits にコミット情報が入っていて、そこにコミットのリビジョンがある。例えば、次のようなオブジェクトで id がコミットのリビジョンに相当する。
[ { &amp;#34;author&amp;#34;: { &amp;#34;email&amp;#34;: &amp;#34;...&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;...&amp;#34;, &amp;#34;username&amp;#34;: &amp;#34;t2y&amp;#34; }, &amp;#34;committer&amp;#34;: { &amp;#34;email&amp;#34;: &amp;#34;...&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;...&amp;#34;, &amp;#34;username&amp;#34;: &amp;#34;t2y&amp;#34; }, &amp;#34;distinct&amp;#34;: true, &amp;#34;id&amp;#34;: &amp;#34;f8df1f77ffec9ef234e7321b2e237b663256b01c&amp;#34;, &amp;#34;message&amp;#34;: &amp;#34;コミットログのメッセージ&amp;#34;, &amp;#34;timestamp&amp;#34;: &amp;#34;2022-07-08T12:32:33+09:00&amp;#34;, &amp;#34;tree_id&amp;#34;: &amp;#34;37b066734e58779c5d2c687d40b4cc43af177cb2&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;https://github.com/OWNER/REPO/commit/f8df1f77ffec9ef234e7321b2e237b663256b01c&amp;#34; }, ... ] このリビジョンを使って github rest api からファイル情報を取得できる。
$ gh api -H &amp;#34;Accept: application/vnd.</description><content>&lt;p>23時に寝て6時に起きた。今週はサービスインで凸凹していて疲れた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前161cmで、ストレッチ後164cmだった。ちょっと数値がよくなった。一昨日の日本酒イベントで4時間ほど立ち呑みをしていた疲労で腰に張りが少しあった。それ以外はとくに問題はなくて調子がよかった。右股関節の詰まりも2-3週間前よりもよくなっている気がする。これはトレーナーさんも注意を払って詰まりを取り除くようにストレッチのメニューを組んでくれているのでその成果が徐々に出始めている気がする。以前よりも可動領域が広がってきている気がして安心感を得た。&lt;/p>
&lt;h2 id="github-actions-の-push-イベントワークフロー改善">github actions の push イベントワークフロー改善&lt;/h2>
&lt;p>午後からビルド・デプロイの最適化のために github actions のワークフローを改善作業をしていた。&lt;/p>
&lt;p>今週はサービスインにより、本番環境への緊急リリースを何回もやっているのを傍からみていて、ビルド・デプロイが速くなればなるほど、その回数を増やせるし、修正後の検証に時間を多く割ける。あるリポジトリが7つのモジュールをまとめてビルド・デプロイしている。これはあるモジュールの微修正の反映には向かないので改善することにした。結果として最大で50%ぐらいのビルド時間の削減、モジュールに依っては、具体的には10分かかっていたものを4分台でビルドできるようにした。&lt;/p>
&lt;p>ワークフロー改善のためのデバッグしている間はビルド・デプロイが出来なくなることから開発者が使っていない時間帯が望ましい。必然的にサービス休日出勤して github actions のワークフローを改善していた。デバッグと動作の検証も兼ねて午後から半日以上やっていたので休日にやったのは正解だと言えるだろう。&lt;/p>
&lt;p>push イベントの github コンテキストの &lt;code>github.event.commits&lt;/code> にコミット情報が入っていて、そこにコミットのリビジョンがある。例えば、次のようなオブジェクトで &lt;code>id&lt;/code> がコミットのリビジョンに相当する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;author&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;email&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;username&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;t2y&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;committer&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;email&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;username&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;t2y&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;distinct&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;f8df1f77ffec9ef234e7321b2e237b663256b01c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;コミットログのメッセージ&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;timestamp&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2022-07-08T12:32:33+09:00&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;tree_id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;37b066734e58779c5d2c687d40b4cc43af177cb2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://github.com/OWNER/REPO/commit/f8df1f77ffec9ef234e7321b2e237b663256b01c&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このリビジョンを使って &lt;a href="https://docs.github.com/en/rest/commits/commits#get-a-commit">github rest api&lt;/a> からファイル情報を取得できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ gh api -H &lt;span style="color:#e6db74">&amp;#34;Accept: application/vnd.github+json&amp;#34;&lt;/span> /repos/OWNER/REPO/commits/f8df1f77ffec9ef234e7321b2e237b663256b01c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>いろんなデータが返ってくるけど、ここでは変更したファイルのパスを知りたい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;sha&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;node_id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;commit&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;files&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;sha&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;filename&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;module1/path/to/src&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;sha&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;filename&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;module2/path/to/src&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この &lt;code>filename&lt;/code> のトップディレクトリがモジュール名と同じなのでここだけ取り出して、管理対象のモジュールかどうかを比較する。bash でも &lt;code>=~&lt;/code> をサブ文字列のマッチングができる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ targets&lt;span style="color:#f92672">=(&lt;/span>mymodule1 mymodule2&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#e6db74">&amp;#34; &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>targets[@]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mymodule1 mymodule2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#f92672">[[&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>targets[@]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span>~ &lt;span style="color:#e6db74">&amp;#34; mymodule1 &amp;#34;&lt;/span> &lt;span style="color:#f92672">]]&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> echo &lt;span style="color:#e6db74">&amp;#34;match&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>match
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#f92672">[[&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>targets[@]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span>~ &lt;span style="color:#e6db74">&amp;#34; mymodule2 &amp;#34;&lt;/span> &lt;span style="color:#f92672">]]&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> echo &lt;span style="color:#e6db74">&amp;#34;match&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>match
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>さらにマッチしたモジュールを &lt;a href="https://docs.github.com/en/actions/learn-github-actions/expressions">github actions の expressions&lt;/a> で制御しやすいように json の array に変換する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ jq --compact-output --null-input &lt;span style="color:#e6db74">&amp;#39;$ARGS.positional&amp;#39;&lt;/span> --args -- &lt;span style="color:#e6db74">${&lt;/span>targets[@]&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;mymodule1&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;mymodule2&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これを step の outputs として格納する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;::set-output name=modules::&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>json_array&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例えば、後続の job で実行条件としてモジュールの有無を調べたいときは expressions を使って次のように記述できる。if 文は &lt;code>${{ ... }}&lt;/code> のブラケットを省略できるようだけど、ここだけ省略すると返って混乱するかなと思って私は記述するようにしている。その方が統合性があってコードが読みやすいように私は考えている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> mymodule1-job:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>: &lt;span style="color:#e6db74">${&lt;/span>{ contains(fromJSON(needs.build.outputs.mymodule_target.modules), &lt;span style="color:#e6db74">&amp;#39;mymodule1&amp;#39;&lt;/span>) &lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> needs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ちなみに workflow レベルの env は job の if 文には使えない。outputs を使って動的な値を扱うようにしている。どうも workflow レベルの env はいろいろ問題があるみたいでなかなか issue がクローズされないのをみると取り扱い注意なのかもしれない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/actions/runner/issues/480">Workflow level env does not work properly in all fields. #480&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/actions/runner/issues/1661">workflow level env. is unrecognised on job level&amp;rsquo;s &amp;lsquo;if&amp;rsquo;-expression when calling reusable workflow #1661&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>最終的なモジュールを判別するための step は次のようなものになった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">build&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">outputs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mymodule_target&lt;/span>: &lt;span style="color:#ae81ff">${{ steps.mymodule-target.outputs.modules }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">コミットログからビルド対象のモジュールを設定&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">mymodule-target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> declare -A modules
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> target_modules=${{ env.TARGET_MODULES }}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> revisions=$(jq --raw-output &amp;#39;.[].id&amp;#39; &amp;lt;&amp;lt;&amp;lt; &amp;#39;${{ env.COMMITS }}&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> for revision in ${revisions}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> do
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> names=$(gh api -H &amp;#34;${{ env.ACCEPT_HEADER }}&amp;#34; ${{ env.COMMITS_PATH }}/${revision} | jq --raw-output &amp;#39;.files[].filename&amp;#39; | cut -d&amp;#34;/&amp;#34; -f1 | sort -u)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> for name in $names
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> do
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> if [[ &amp;#34; ${target_modules[@]} &amp;#34; =~ &amp;#34; ${name} &amp;#34; ]]; then
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> modules[${name}]=true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> fi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> done
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> done
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> targets=$(jq --compact-output --null-input &amp;#39;$ARGS.positional&amp;#39; --args -- &amp;#34;${!modules[@]}&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;::set-output name=modules::${targets}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">TARGET_MODULES&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> (
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#39;mymodule1&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#39;mymodule2&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> )&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ACCEPT_HEADER&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Accept: application/vnd.github+json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">COMMITS_PATH&lt;/span>: &lt;span style="color:#ae81ff">/repos/${{ github.repository }}/commits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">COMMITS&lt;/span>: &lt;span style="color:#ae81ff">${{ toJSON(github.event.commits) }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>処理も理屈も簡単なんだけど、実際の運用コードはもう少しだけ複雑なものの、デバッグは github actions を実行しないといけない。ちょっとした typo のために実は2時間ほどはまっていたのは内緒。シェルの配列や連想配列を使うと、記号が多くてわかりにくい。配列の閉じブラケットを忘れていたがために EOF のエラーが発生していた。閉じブラケットのミスだけにエラーが発生しているところと実際のコードがズレていて、それに気付くのに少しずつコードを足したり消したりしてデバッグするみたいな原始的なやり方で些細な typo を気付くのに時間がかかった。&lt;/p>
&lt;pre tabindex="0">&lt;code>xxx.sh: line 47: unexpected EOF while looking for matching `&amp;#34;&amp;#39;
&lt;/code>&lt;/pre></content></item><item><title>ゾンビスクラムを教えてもらった</title><link>/diary/posts/2022/0708/</link><pubDate>Fri, 08 Jul 2022 08:31:35 +0900</pubDate><guid>/diary/posts/2022/0708/</guid><description>2時に寝て7時に起きた。今週はバテた。金曜日は非稼働日だけど、バタバタしているから普通に働いていた。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今週はお手伝い先がサービスインでバタバタしていて議題の準備がほとんどできなかった。少し前に参加したアトラシアンさんのウェブセミナーのスライド資料が公開されたのでそれを眺めながら雑談していた。
jira の有料プランのサービスに jsm chat という halp の技術を活かした新機能が追加されたらしい。既存プランの延長上で使えるらしい。質疑応答のときに halp とは別プロダクトだと明確に回答していたので halp が今後どうなっていくのかの将来にはかなり懸念がある。チャットと課題管理システムの双方向連携という、slack や teams といったチャットサービスがよく使われるようになった昨今のビジネス事情にあわせたサービスと言えるだろう。
私も以前からその領域に課題意識をもっていたし、ベンチャーでは workstreams.ai も同様のサービスを提供している。満を持してというのか、(私にとっての) 課題管理システムのベースラインとなる jira にその機能が入ったことで競合製品も同様に機能拡張を提供していく気がする。1-2年後にはチャットと課題管理システムが双方向連携しているのが当たり前の開発スタイルになるのかもしれない。非開発者にとってはチケットを扱うよりも敷居が下がるのでそれは適切な世の中の変化だと私は考えている。
ゾンビスクラム jsm chat と課題管理の話しをしているうちにスクラムの話題になった。Zombie Scrum Survival Guide という書籍があって形骸化したスクラムの特徴をまとめているらしい。ある記事で2021年から翻訳していると書いてあったので翻訳版が出版されたら読んでみようと思う。
「ゾンビスクラムサバイバルガイド」読んだ飼育係の日記 ゾンビスクラムの4つの症状 ゾンビスクラムを解決するための10の成功要因 ブログ記事の所感を読んだ感じだと、私がいま関わっているスクラムにも一部通じるところがあるなと思って関心がある。
うちのチームは1週間スプリントをもう1年近く続けているのだけど、これは検査が早い段階でできるというメリットがあるものの、開発のメリハリがないなぁとずっと思ってた。それはただ与えられたタスクを無理なくこなすだけというルーチンになってしまっているのと、昨今の労務管理を徹底する働き方改革？のせいか、残業・休出を一切やらない開発スタイルが開発者の自律性や意欲を削いでしまっているのではないかとも思う。もちろん「余白」があれば、業務時間内に好きなことをやったらよいと思うけれど、うちの場合は半分ぐらいのスプリントゴールが未達で、スプリントに達成できないタスクを盛り込むからスプリントゴール未達の状態で他のことをやるのが憚られる空気がある。もっとも好き勝手やっている私がそれを感じるのだから、若い開発者には相応のプレッシャーになっていると思う。結果として、指示されたタスク (プランニングで決めたこと) 以外のことはやらない雰囲気になってしまっている。試しに直近3ヶ月のスプリントバックログアイテムの種別のみで開発者のチケット登録した数をカウントすると次のようになった。
私: 66件 開発リーダー: 17件 開発者1: 14件 開発者2: 12件 開発者3: 1件 開発者4: 6件 これは課題管理システムに慣れていて、業務をタスク分解しながら作業していくというワークフローに私が最も習熟しているから、適度な粒度のチケットをいくつも作りながら作業をやっているという背景もある。しかし、いまやらなくてもいずれ必要なタスクも、業務をやりながら気付いたときに私は随時登録している。憚られる空気を感じている私が週4日労働で控えめにやっても3ヶ月でもこれだけの数が開く。要はゾンビスクラムだと開発者の自律性は期待できないという話し。</description><content>&lt;p>2時に寝て7時に起きた。今週はバテた。金曜日は非稼働日だけど、バタバタしているから普通に働いていた。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今週はお手伝い先がサービスインでバタバタしていて議題の準備がほとんどできなかった。少し前に参加したアトラシアンさんのウェブセミナーのスライド資料が公開されたのでそれを眺めながら雑談していた。&lt;/p>
&lt;iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/18fafd386a534aa3b8cab2807af37b68" title="チャット連携で問い合わせ対応にスピードと透明性を ー Jira Service Managementで実現する対話型チケット管理/JSM-Chat-Webinar-20220629" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;" data-ratio="1.78343949044586">&lt;/iframe>
&lt;p>jira の有料プランのサービスに jsm chat という &lt;a href="https://www.atlassian.com/software/halp/jira">halp&lt;/a> の技術を活かした新機能が追加されたらしい。既存プランの延長上で使えるらしい。質疑応答のときに halp とは別プロダクトだと明確に回答していたので halp が今後どうなっていくのかの将来にはかなり懸念がある。チャットと課題管理システムの双方向連携という、slack や teams といったチャットサービスがよく使われるようになった昨今のビジネス事情にあわせたサービスと言えるだろう。&lt;/p>
&lt;p>私も以前からその領域に課題意識をもっていたし、ベンチャーでは &lt;a href="https://www.workstreams.ai/">workstreams.ai&lt;/a> も同様のサービスを提供している。満を持してというのか、(私にとっての) 課題管理システムのベースラインとなる jira にその機能が入ったことで競合製品も同様に機能拡張を提供していく気がする。1-2年後にはチャットと課題管理システムが双方向連携しているのが当たり前の開発スタイルになるのかもしれない。非開発者にとってはチケットを扱うよりも敷居が下がるのでそれは適切な世の中の変化だと私は考えている。&lt;/p>
&lt;h2 id="ゾンビスクラム">ゾンビスクラム&lt;/h2>
&lt;p>jsm chat と課題管理の話しをしているうちにスクラムの話題になった。Zombie Scrum Survival Guide という書籍があって形骸化したスクラムの特徴をまとめているらしい。ある記事で2021年から翻訳していると書いてあったので翻訳版が出版されたら読んでみようと思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://agnozingdays.hatenablog.com/entry/2020/11/17/183803">「ゾンビスクラムサバイバルガイド」読んだ飼育係の日記&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://takaokimura.medium.com/%E3%82%BE%E3%83%B3%E3%83%93%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%A0%E3%81%AE4%E3%81%A4%E3%81%AE%E7%97%87%E7%8A%B6-45efd6e9c655">ゾンビスクラムの4つの症状&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.servantworks.co.jp/posts/10-success-factors-to-resolve-zombie-scrum/">ゾンビスクラムを解決するための10の成功要因&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ブログ記事の所感を読んだ感じだと、私がいま関わっているスクラムにも一部通じるところがあるなと思って関心がある。&lt;/p>
&lt;p>うちのチームは1週間スプリントをもう1年近く続けているのだけど、これは検査が早い段階でできるというメリットがあるものの、開発のメリハリがないなぁとずっと思ってた。それはただ与えられたタスクを無理なくこなすだけというルーチンになってしまっているのと、昨今の労務管理を徹底する働き方改革？のせいか、残業・休出を一切やらない開発スタイルが開発者の自律性や意欲を削いでしまっているのではないかとも思う。もちろん「余白」があれば、業務時間内に好きなことをやったらよいと思うけれど、うちの場合は半分ぐらいのスプリントゴールが未達で、スプリントに達成できないタスクを盛り込むからスプリントゴール未達の状態で他のことをやるのが憚られる空気がある。もっとも好き勝手やっている私がそれを感じるのだから、若い開発者には相応のプレッシャーになっていると思う。結果として、指示されたタスク (プランニングで決めたこと) 以外のことはやらない雰囲気になってしまっている。試しに直近3ヶ月のスプリントバックログアイテムの種別のみで開発者のチケット登録した数をカウントすると次のようになった。&lt;/p>
&lt;ul>
&lt;li>私: 66件&lt;/li>
&lt;li>開発リーダー: 17件&lt;/li>
&lt;li>開発者1: 14件&lt;/li>
&lt;li>開発者2: 12件&lt;/li>
&lt;li>開発者3: 1件&lt;/li>
&lt;li>開発者4: 6件&lt;/li>
&lt;/ul>
&lt;p>これは課題管理システムに慣れていて、業務をタスク分解しながら作業していくというワークフローに私が最も習熟しているから、適度な粒度のチケットをいくつも作りながら作業をやっているという背景もある。しかし、いまやらなくてもいずれ必要なタスクも、業務をやりながら気付いたときに私は随時登録している。憚られる空気を感じている私が週4日労働で控えめにやっても3ヶ月でもこれだけの数が開く。要はゾンビスクラムだと開発者の自律性は期待できないという話し。&lt;/p></content></item><item><title>七夕と日本酒</title><link>/diary/posts/2022/0707/</link><pubDate>Thu, 07 Jul 2022 08:14:37 +0900</pubDate><guid>/diary/posts/2022/0707/</guid><description>1時に寝て7時に起きた。
障害対応の手伝い 昨日の続きで定期処理を k8s の cronjob へすべて移行した。その後、チケット整理したり、他メンバーの手がまわっていない作業を手伝ったりしてた。バッチ処理の在庫チェックの数字があわなくて「俺たちは雰囲気で在庫チェックをやっている」みたいな状況に陥っていた。とはいえ、サービスイン3日目でも致命的な運用の問題は発生していないということでこのリリースはもう完了したと断言してしまってもよいだろう。今後、数ヶ月かけてさらに他施設へのサービスインが続いていくわけだけど、見通しはみえてきた感じはする。まぁ大丈夫そう。
灘五郷酒所イベント なにかのきっかけで クラウドファンディングの灘五郷酒所 をみつけた。地元の応援をしとくかと思って5,000円を支援した。いまみたら271人の支援者から1,472,900円の支援金が集まったみたい。その支援金のお礼イベントがあって、せっかくの機会なので行ってきた。5,000円ってちょっとよい居酒屋さんで使うぐらいの金額だけど、その場で飲める2,000円分の金券とお腹いっぱい食べられたビッフェ形式で十分に飲み食いできた。写真にある料理をもう1皿もらってきてお腹いっぱいになった。料理はなくなっても補充されていたので十分に用意されていた。支払った支援金を考慮すると十分に良心的なイベントだった。小耳に聞いた話だと80人ほど参加者がいたらしい。
飲んだお酒はこれら。あと竹酒と呼ばれる竹の筒に入れて主催者がついでまわっていたのを2杯ほど飲んだ。
福寿 純米酒「御影郷」 (神戸酒心館) 琥泉 純米吟醸おりがらみ無濾過生酒原酒 (泉酒造) 黒松剣菱 (剣菱酒造) 浜福鶴 生酛純米辛口 (小山本家酒造 灘浜福鶴蔵) 1人で行ったのでぼっちだったらどうしよう？みたいな不安もあったんだけど、たまたま隣り合わせた人が プライズ日本酒会 というコミュニティのメンバーで4人組で参加していた。その人たちと雑談してた。ご近所さんでとてもよい人たちだった。三ノ宮でお酒イベントをやっているそうで、また機会があればそちらにも参加してみようと思う。私は地元の人たちとのコネがほとんどない。今後会社のマーケティングをやっていく上でも地元の人たちともなにかしら繋がりをもてるとよいなとは考えている。お仕事がバタバタしてたから朝の時点では行くのをやめようかと考えていたけど、午後から落ち着いていたのもあって行ってよかった。</description><content>&lt;p>1時に寝て7時に起きた。&lt;/p>
&lt;h2 id="障害対応の手伝い">障害対応の手伝い&lt;/h2>
&lt;p>昨日の続きで定期処理を k8s の cronjob へすべて移行した。その後、チケット整理したり、他メンバーの手がまわっていない作業を手伝ったりしてた。バッチ処理の在庫チェックの数字があわなくて「俺たちは雰囲気で在庫チェックをやっている」みたいな状況に陥っていた。とはいえ、サービスイン3日目でも致命的な運用の問題は発生していないということでこのリリースはもう完了したと断言してしまってもよいだろう。今後、数ヶ月かけてさらに他施設へのサービスインが続いていくわけだけど、見通しはみえてきた感じはする。まぁ大丈夫そう。&lt;/p>
&lt;h2 id="灘五郷酒所イベント">灘五郷酒所イベント&lt;/h2>
&lt;p>なにかのきっかけで &lt;a href="https://camp-fire.jp/projects/view/585844">クラウドファンディングの灘五郷酒所&lt;/a> をみつけた。地元の応援をしとくかと思って5,000円を支援した。いまみたら271人の支援者から1,472,900円の支援金が集まったみたい。その支援金のお礼イベントがあって、せっかくの機会なので行ってきた。5,000円ってちょっとよい居酒屋さんで使うぐらいの金額だけど、その場で飲める2,000円分の金券とお腹いっぱい食べられたビッフェ形式で十分に飲み食いできた。写真にある料理をもう1皿もらってきてお腹いっぱいになった。料理はなくなっても補充されていたので十分に用意されていた。支払った支援金を考慮すると十分に良心的なイベントだった。小耳に聞いた話だと80人ほど参加者がいたらしい。&lt;/p>
&lt;p>飲んだお酒はこれら。あと竹酒と呼ばれる竹の筒に入れて主催者がついでまわっていたのを2杯ほど飲んだ。&lt;/p>
&lt;ul>
&lt;li>福寿 純米酒「御影郷」 (神戸酒心館)&lt;/li>
&lt;li>琥泉 純米吟醸おりがらみ無濾過生酒原酒 (泉酒造)&lt;/li>
&lt;li>黒松剣菱 (剣菱酒造)&lt;/li>
&lt;li>浜福鶴 生酛純米辛口 (小山本家酒造 灘浜福鶴蔵)&lt;/li>
&lt;/ul>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2022/0707_sake1.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2022/0707_sake2.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2022/0707_sake3.jpg"/>
&lt;/figure>
&lt;/p>
&lt;p>1人で行ったのでぼっちだったらどうしよう？みたいな不安もあったんだけど、たまたま隣り合わせた人が &lt;a href="https://www.instagram.com/nihonsyu_kai/">プライズ日本酒会&lt;/a> というコミュニティのメンバーで4人組で参加していた。その人たちと雑談してた。ご近所さんでとてもよい人たちだった。三ノ宮でお酒イベントをやっているそうで、また機会があればそちらにも参加してみようと思う。私は地元の人たちとのコネがほとんどない。今後会社のマーケティングをやっていく上でも地元の人たちともなにかしら繋がりをもてるとよいなとは考えている。お仕事がバタバタしてたから朝の時点では行くのをやめようかと考えていたけど、午後から落ち着いていたのもあって行ってよかった。&lt;/p></content></item><item><title>lambda から cronjob へ</title><link>/diary/posts/2022/0706/</link><pubDate>Wed, 06 Jul 2022 19:27:28 +0900</pubDate><guid>/diary/posts/2022/0706/</guid><description>0時に6時に起きた。今日は晴れたので自転車通勤。
優雅にドキュメントを書きながら障害対応 昨日は凸凹しながら乗り切ってサービスイン2日目。今日から外部システムとの連携なども絡んでくる。昨日の今日なんで何か起こるだろうと思いつつ、暇だったらドキュメント書くタスクがいくつも溜まっているのでそれを片付けるかと業務を始めた。私ぐらいの人間になると、いつ凸凹が発生してもよいように、この日のために取っておいたようなドキュメントタスクがいくつも溜まっている。午前中に私の出番はなく、優雅にドキュメントの1つを完成させた。
以前から定期実行やバッチ処理は lambda 関数をトリガーに作られていた。それらを serverless framework から cdk へ移行した んだけど、その後にバッチ処理を k8s の cronjob で実装した 。この cronjob が思いの外、うまくいって、私がフルスクラッチで cli を作っているのだから、私からみてさいきょうのばっちしょりの土台を実装している。定期実行もすべて cronjob でやればいいやんと気付いて、過去に lambda 関数 (cdk/python) で実装したものをすべて移行することに決めた。昨日の流れからわかるように過去に作成済みの一連の lambda 関数はまだ本番環境にデプロイされていない。m1 chip macbook 問題 で同僚のマシンからデプロイできないという不運もあったんだけど、もうデプロイしなくていいよ、すべて cronjob で置き換えるからと伝えて2つ移行した。あと半日もあれば完了できそうな見通し。
lambda 関数から cronjob への移行作業をしていると、本番環境でのバッチ処理の一部のロジックが誤っているとわかってそれを修正したり、当然のようにテスト環境のデータも誤っているので正しいかどうかは本番環境にデプロイするしかないみたいな凸凹した状況を横切りながら本日の作業を終えた。いくつか残課題は残っているものの、明日中には平常業務に戻れるぐらいの状況にはなりつつあるのかもしれない。サービスイン2日目を終えて致命的な問題は起こっていないようにみえる。ひとまずはよかったという感じ。</description><content>&lt;p>0時に6時に起きた。今日は晴れたので自転車通勤。&lt;/p>
&lt;h2 id="優雅にドキュメントを書きながら障害対応">優雅にドキュメントを書きながら障害対応&lt;/h2>
&lt;p>昨日は凸凹しながら乗り切ってサービスイン2日目。今日から外部システムとの連携なども絡んでくる。昨日の今日なんで何か起こるだろうと思いつつ、暇だったらドキュメント書くタスクがいくつも溜まっているのでそれを片付けるかと業務を始めた。私ぐらいの人間になると、いつ凸凹が発生してもよいように、この日のために取っておいたようなドキュメントタスクがいくつも溜まっている。午前中に私の出番はなく、優雅にドキュメントの1つを完成させた。&lt;/p>
&lt;p>以前から定期実行やバッチ処理は lambda 関数をトリガーに作られていた。それらを &lt;a href="/diary/diary/posts/2022/0609/#serverless-framework-から-cdk-移行の背景">serverless framework から cdk へ移行した&lt;/a> んだけど、その後にバッチ処理を &lt;a href="/diary/diary/posts/2022/0622/">k8s の cronjob で実装した&lt;/a> 。この cronjob が思いの外、うまくいって、私がフルスクラッチで cli を作っているのだから、私からみてさいきょうのばっちしょりの土台を実装している。定期実行もすべて cronjob でやればいいやんと気付いて、過去に lambda 関数 (cdk/python) で実装したものをすべて移行することに決めた。昨日の流れからわかるように過去に作成済みの一連の lambda 関数はまだ本番環境にデプロイされていない。&lt;a href="/diary/diary/posts/2022/0704/">m1 chip macbook 問題&lt;/a> で同僚のマシンからデプロイできないという不運もあったんだけど、もうデプロイしなくていいよ、すべて cronjob で置き換えるからと伝えて2つ移行した。あと半日もあれば完了できそうな見通し。&lt;/p>
&lt;p>lambda 関数から cronjob への移行作業をしていると、本番環境でのバッチ処理の一部のロジックが誤っているとわかってそれを修正したり、当然のようにテスト環境のデータも誤っているので正しいかどうかは本番環境にデプロイするしかないみたいな凸凹した状況を横切りながら本日の作業を終えた。いくつか残課題は残っているものの、明日中には平常業務に戻れるぐらいの状況にはなりつつあるのかもしれない。サービスイン2日目を終えて致命的な問題は起こっていないようにみえる。ひとまずはよかったという感じ。&lt;/p></content></item><item><title>サービスインは突然に</title><link>/diary/posts/2022/0705/</link><pubDate>Tue, 05 Jul 2022 08:26:22 +0900</pubDate><guid>/diary/posts/2022/0705/</guid><description>1時に寝て6時に起きた。暑くてあまり眠れない。今朝も雨降りで徒歩通勤。
cdk の ECS サービスに紐づくセキュリティグループの設定 明日がサービスイン初日だと思っていたら、私の勘違いで今日だった。私が直近でやっている作業はアプリケーションの直接的な機能ではなく、インフラやバッチ処理などの間接的な機能を作っているわけだけど、それでも1日調整を間違えていて、あれーって感じでサービスインが始まった。とはいえ、私は本番環境にアクセスできなければ、ログすらもみれないので同僚ががんばっているのを傍から応援しつつ、平常通りタスクをこなしていくだけのはずであった。
のほほんと通常通りのタスクをやっていたら、本番環境の ecs サービスと通信できないという連絡がくる。私が前任者から引き継いで構築したインフラなので何だろう？と調査していて、本番環境でセキュリティグループの設定が漏れていることがわかった。これはわかりにくい問題で cdk の FargateService で ecs サービスを構築している。このプロパティは securityGroups のパラメーターをもっている。このパラメーターを指定しない場合、新規にセキュリティグループそのものは作成してくれるけれど、その ecs サービスへ通信するポートへのインバウンドルールは作ってくれない。
securityGroups?
Type: ISecurityGroup[] (optional, default: A new security group is created.)
The security groups to associate with the service. If you do not specify a security group, a new security group is created.
https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ecs.FargateService.html#securitygroups
テスト環境はセキュリティグループに対して、インバウンドルールを管理画面から手動で追加していたために疎通できていた。セキュリティグループは ecs サービスに紐付いているものだから、ecs サービスを再作成しない限りはインバウンドルールが消えることもなくてこの作業漏れに気付けなかったという落ちだった。さらに、そのセキュリティグループのインバウンドルールを設定したのは私ではない。その説明欄に次のコメントが書かれていた。
atode-kesu
今すぐ消してやろうかという気持ちを抑えつつ、cdk でインバウンドルールを設定したセキュリティグループを紐付けるようにして解決した。疎通ができないと、ロードバランサーのヘルスチェックが通らず、ecs のタスクが延々と再起動を繰り返すというわかりにくい障害となっていた。1時間ぐらい唸っていた。
未検証の本番環境 前節で障害の原因自体はわかりにくいものだが、なぜサービスインの初日にこんなことが起こるのだろうか？という当然の疑問。そう。これまでこのインフラの本番環境は一切検証されていなかった。4月から5月にかけて構築されたインフラだった。この後にデータを格納するための s3 bucket がない、一部の設定はテスト環境の設定しかない、アプリケーションのコード中にテスト環境の設定がハードコードされているとか。追加であちこち直してデプロイしていた。私は本番環境に一切アクセスできないので過去にこれらの検証をすることはできなかったわけではあるけど、いろいろ思うところはあるなぁと感慨に浸っていた。</description><content>&lt;p>1時に寝て6時に起きた。暑くてあまり眠れない。今朝も雨降りで徒歩通勤。&lt;/p>
&lt;h2 id="cdk-の-ecs-サービスに紐づくセキュリティグループの設定">cdk の ECS サービスに紐づくセキュリティグループの設定&lt;/h2>
&lt;p>明日がサービスイン初日だと思っていたら、私の勘違いで今日だった。私が直近でやっている作業はアプリケーションの直接的な機能ではなく、インフラやバッチ処理などの間接的な機能を作っているわけだけど、それでも1日調整を間違えていて、あれーって感じでサービスインが始まった。とはいえ、私は本番環境にアクセスできなければ、ログすらもみれないので同僚ががんばっているのを傍から応援しつつ、平常通りタスクをこなしていくだけのはずであった。&lt;/p>
&lt;p>のほほんと通常通りのタスクをやっていたら、本番環境の ecs サービスと通信できないという連絡がくる。私が前任者から引き継いで構築したインフラなので何だろう？と調査していて、本番環境でセキュリティグループの設定が漏れていることがわかった。これはわかりにくい問題で cdk の FargateService で ecs サービスを構築している。このプロパティは securityGroups のパラメーターをもっている。このパラメーターを指定しない場合、新規にセキュリティグループそのものは作成してくれるけれど、その ecs サービスへ通信するポートへのインバウンドルールは作ってくれない。&lt;/p>
&lt;blockquote>
&lt;p>securityGroups?&lt;/p>
&lt;p>Type: ISecurityGroup[] (optional, default: A new security group is created.)&lt;/p>
&lt;p>The security groups to associate with the service.
If you do not specify a security group, a new security group is created.&lt;/p>
&lt;p>&lt;a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ecs.FargateService.html#securitygroups">https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ecs.FargateService.html#securitygroups&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>テスト環境はセキュリティグループに対して、インバウンドルールを管理画面から手動で追加していたために疎通できていた。セキュリティグループは ecs サービスに紐付いているものだから、ecs サービスを再作成しない限りはインバウンドルールが消えることもなくてこの作業漏れに気付けなかったという落ちだった。さらに、そのセキュリティグループのインバウンドルールを設定したのは私ではない。その説明欄に次のコメントが書かれていた。&lt;/p>
&lt;blockquote>
&lt;p>atode-kesu&lt;/p>
&lt;/blockquote>
&lt;p>今すぐ消してやろうかという気持ちを抑えつつ、cdk でインバウンドルールを設定したセキュリティグループを紐付けるようにして解決した。疎通ができないと、ロードバランサーのヘルスチェックが通らず、ecs のタスクが延々と再起動を繰り返すというわかりにくい障害となっていた。1時間ぐらい唸っていた。&lt;/p>
&lt;h2 id="未検証の本番環境">未検証の本番環境&lt;/h2>
&lt;p>前節で障害の原因自体はわかりにくいものだが、なぜサービスインの初日にこんなことが起こるのだろうか？という当然の疑問。そう。これまでこのインフラの本番環境は一切検証されていなかった。4月から5月にかけて構築されたインフラだった。この後にデータを格納するための s3 bucket がない、一部の設定はテスト環境の設定しかない、アプリケーションのコード中にテスト環境の設定がハードコードされているとか。追加であちこち直してデプロイしていた。私は本番環境に一切アクセスできないので過去にこれらの検証をすることはできなかったわけではあるけど、いろいろ思うところはあるなぁと感慨に浸っていた。&lt;/p></content></item><item><title>m1 chip macbook と cdk の追加調査</title><link>/diary/posts/2022/0704/</link><pubDate>Mon, 04 Jul 2022 08:11:50 +0900</pubDate><guid>/diary/posts/2022/0704/</guid><description>0時に寝て7時に起きた。昨日はずっと寝てて、今朝は雨降りで徒歩通勤。週始めからしんどい。
デバッグ調査を断念 以前 m1 chip macbook で aws-lambda-python-alpha のデプロイができない ことについて書いた。同僚がそのためにデプロイできないと運用上の不都合があるので調査してみることにした。ワークアラウンドの1つとして、ビルドに使う Docker イメージを任意のものに置き換える仕組みを使えば、arm64 アーキテクチャでビルド処理のプロセス自体は通ることを確認していた。しかし、その後の python distribution が生成されていなかった。同僚にデバッグを手伝ってもらってログをみていると、python distribution をバンドルする処理のログが出ていない。
おそらく docker イメージのビルド処理ではなく、aws-cdk の core 側の bundling のところに原因がありそうに思える。core のライブラリをみると、たしかにいくつか条件次第で bundling をスキップする実装はあったし、ログが出力されていないことからも意図したステップが実行されていないことだけはわかった。その周辺から当たりをつけて aws-cdk の issues なども検索してみたけど、それっぽい issue をみつけることはできなかった。何よりも私がもっていないマシン環境の、様々な環境設定を調べることもできず、aws-cdk の core をデバッグするのも大変かなと午前中いっぱい調べて断念することに決めた。もしかしたら同僚のホスト環境に特化した問題が発生している可能性もある。
アプリケーションレベルで再現できた問題を解決できないというのは情けないけど、自分でデバッグできないものは仕方ないかと諦めることにした。本当に悔しいけれど。</description><content>&lt;p>0時に寝て7時に起きた。昨日はずっと寝てて、今朝は雨降りで徒歩通勤。週始めからしんどい。&lt;/p>
&lt;h2 id="デバッグ調査を断念">デバッグ調査を断念&lt;/h2>
&lt;p>以前 &lt;a href="/diary/diary/posts/2022/0630/#m1-chip-macbook-で-aws-lambda-python-alpha-のデプロイができない">m1 chip macbook で aws-lambda-python-alpha のデプロイができない&lt;/a> ことについて書いた。同僚がそのためにデプロイできないと運用上の不都合があるので調査してみることにした。ワークアラウンドの1つとして、ビルドに使う Docker イメージを任意のものに置き換える仕組みを使えば、arm64 アーキテクチャでビルド処理のプロセス自体は通ることを確認していた。しかし、その後の python distribution が生成されていなかった。同僚にデバッグを手伝ってもらってログをみていると、python distribution をバンドルする処理のログが出ていない。&lt;/p>
&lt;p>おそらく docker イメージのビルド処理ではなく、aws-cdk の core 側の bundling のところに原因がありそうに思える。core のライブラリをみると、たしかにいくつか条件次第で bundling をスキップする実装はあったし、ログが出力されていないことからも意図したステップが実行されていないことだけはわかった。その周辺から当たりをつけて aws-cdk の issues なども検索してみたけど、それっぽい issue をみつけることはできなかった。何よりも私がもっていないマシン環境の、様々な環境設定を調べることもできず、aws-cdk の core をデバッグするのも大変かなと午前中いっぱい調べて断念することに決めた。もしかしたら同僚のホスト環境に特化した問題が発生している可能性もある。&lt;/p>
&lt;p>アプリケーションレベルで再現できた問題を解決できないというのは情けないけど、自分でデバッグできないものは仕方ないかと諦めることにした。本当に悔しいけれど。&lt;/p></content></item><item><title>夏休み</title><link>/diary/posts/2022/0703/</link><pubDate>Sun, 03 Jul 2022 08:11:52 +0900</pubDate><guid>/diary/posts/2022/0703/</guid><description>0時に寝て7時に起きたけど、昨日から体調よくなくてしんどくて寝てた。
開発やら決算の事務手続きやらのタスクが一段落して余裕時間ができたことでぼーっとしてた。まぁたまにはそういう日もあるか。何も作業せず休んだ日は day off というタグを付ける。あとで何日ぐらい休んだか、どのぐらいの期間で休んだかの確認にもなるかもしれない。</description><content>&lt;p>0時に寝て7時に起きたけど、昨日から体調よくなくてしんどくて寝てた。&lt;/p>
&lt;p>開発やら決算の事務手続きやらのタスクが一段落して余裕時間ができたことでぼーっとしてた。まぁたまにはそういう日もあるか。何も作業せず休んだ日は &lt;a href="/diary/diary/tags/day-off/">day off&lt;/a> というタグを付ける。あとで何日ぐらい休んだか、どのぐらいの期間で休んだかの確認にもなるかもしれない。&lt;/p></content></item><item><title>夏バテ</title><link>/diary/posts/2022/0702/</link><pubDate>Sat, 02 Jul 2022 11:48:13 +0900</pubDate><guid>/diary/posts/2022/0702/</guid><description>0時に寝て7時に起きた。途中で吐き気がして何度も起きた。夜うまく眠れない。
ストレッチ 今日の開脚幅は開始前160cmで、ストレッチ後163cmだった。先週とほぼ同じでよい状態を維持できている。外が暑くなってその比較から dr.stretch さんの事務所はエアコンがよくきいていて涼しい。うちのオフィスはエアコンの設定温度を上げる人がいて気付くと26.5℃とかに設定されていて私にとっては暑い。とくにどこか張りの強い部位や痛いところはなかった。夜にあまり眠れないわりには身体的には負荷がかかっているところはなさそう。
ストレッチを終えてからオフィスに戻って軽く調べものして、眠くなって仮眠して、そのまま家に帰って寝てた。とくに急ぎでやるタスクがなかったせいか、なんか一気にバテた。</description><content>&lt;p>0時に寝て7時に起きた。途中で吐き気がして何度も起きた。夜うまく眠れない。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前160cmで、ストレッチ後163cmだった。先週とほぼ同じでよい状態を維持できている。外が暑くなってその比較から dr.stretch さんの事務所はエアコンがよくきいていて涼しい。うちのオフィスはエアコンの設定温度を上げる人がいて気付くと26.5℃とかに設定されていて私にとっては暑い。とくにどこか張りの強い部位や痛いところはなかった。夜にあまり眠れないわりには身体的には負荷がかかっているところはなさそう。&lt;/p>
&lt;p>ストレッチを終えてからオフィスに戻って軽く調べものして、眠くなって仮眠して、そのまま家に帰って寝てた。とくに急ぎでやるタスクがなかったせいか、なんか一気にバテた。&lt;/p></content></item><item><title>法人決算の会計処理を終えた</title><link>/diary/posts/2022/0701/</link><pubDate>Fri, 01 Jul 2022 08:20:30 +0900</pubDate><guid>/diary/posts/2022/0701/</guid><description>0時に寝て6時に起きた。夜あまり眠れない。
算定基礎届 e-gov電子申請 を使って初めて電子申請してみた。昨年もやろうと挑戦したけど、macos からだと不具合があってエラーになるから断念してた。今年は windows マシンがあるので windows アプリケーションをインストールして問題なく申請できた。うちは社員1人なので csv 取り込みを使わず、手入力で申請した。申請した書類は pdf 出力できるし、申請後に送信したデータは xml で控えとして保持できる。本当に紙でやっていたものを文書データと数値データに置き換えたようなアプリケーションになっている。紙の書類と比べて、アプリケーションがよいところは申請の進捗状況がわかるところ。算定基礎届で問題が発生することは過去にないけど、審査開始、審査終了、手続終了のステータスをアプリケーションから確認できる。それはそれで申請者にとって状況の追跡ができて安心感になる。
振替伝票の使い方 前期は赤字決算だったので中間申告で支払った税金が還付される。中間申告というのは、前年度の納税金額から翌年の税金の半分を納めるという仕組み。前年度の法人税額が20万円を超えると中間申告が必要となる。前年度と同じ法人税が今年度もあるという前提で半分納めるけれど、その納めた金額よりも確定申告のタイミングで実際の納税金額が少ない場合は還付金という形で返ってくる。今回は赤字決算となったものの、それも初めてだったので税務署からの還付金をどう会計処理するのかも初めての機会でよくわからなくて調べながら作業した。
会計システムとして普通に行う処理ではないので freee のドキュメントも断片的にしか説明されていない。基本的な操作の考え方を理解した上で自分がやりたい会計処理に変更しないといけない。
取引を預り金や仮払金で決済するには、どうすればいいですか？ 還付を受ける場合の処理 まず中間申告のタイミングで振込した納付金額は「仮払金」として登録される。本来は確定申告のタイミングで確定した納付額に対して「仮払金」を相殺するような会計処理を行う必要がある。freee では取引データの決済欄に「+更新」というボタンがあってそこから仮払金から引き落とすようなデータ登録が可能となる。今回は赤字決算ですでに支払った「仮払金」が還付金として戻ってくるときの会計処理をしなければいけない。その手続きのために使うのが「振替伝票」になる。例として金額を10万円とすると次のような振替伝票を作成する。
借方 勘定科目: 未収入金 税区分: 対象外 金額: 10万円 貸方 勘定科目: 仮払金 税区分: 対象外 金額: 10万円 「仮払金」を相殺するための勘定科目は「未収入金」になる。この「未収入金」を還付金の取引 (税務署から銀行口座に振り込まれた金額) で消し込むことで会計システム上の辻褄があう。一般的に還付金の勘定科目は「雑収入」として扱うらしい。還付金は消費税がかからない取引であるので不課税取引となる。ややこしいのは還付金が振り込まれる際に還付加算金というお金も一緒に振り込みされる場合がある。還付加算金というのは、納め過ぎた税金に対する金利のようなものになる。試しに計算してみると金利が 0.46% になった。ある銀行の定期が 0.002% だったので税務署に税金を納め過ぎるとめちゃくちゃ金利のよい貯金みたいな扱いになる。話しを元に戻すと、還付加算金は課税対象になるので「雑収入」の課税売上として会計処理する。
うちの会社では、振替伝票は決算のタイミングでしか使わない。振替伝票の使い方を忘れていてたまに使うときに右往左往する。
はんなりDAO はんなりDAOをはじめてみます に参加した。イベントで話した内容は notion で公開されている。
hannali-dao まだ全然、計画段階で段取りの計画も目処もたっていない。dao が良いものかどうか、私はまだよくわかっていないが、実際に自分で試してみることには肯定的である。そして組織の取り組みは実際に複数人いないとあまり実用的ではないことからコミュニティのような、一定以上の信頼のある実際の人間が関わってくれるならそれはそれで実証実験の場としてはおもしろい取り組みになるかもしれない。初回だったので dao とは何かとか、dao や web3 を取り巻く世の中の状況はどうかとか、はんなり dao の目的をどうするかとか、計画段階の雑談が主だった。最初はそんなもんかもしれない。私もスマートコントラクトとか、何が嬉しいのかよくわかってないので dao を運営する中で実際に実装してみる機会があれば、それはそれで学びの機会としてよいかもしれないと考えている。
aragon という dao を作るためのプラットフォームがあって、これを使うと dao そのものはすぐに準備できるらしい。あとは組織運営のルールやスマートコントラクトを実装していくだけみたいな話し。ethereum で動かすと手数料がかかる。しばらくは testnet であーでもないこーでもないみたいなやり取りをしながら dao の運営を学んでいこうみたいな話しをしていた。</description><content>&lt;p>0時に寝て6時に起きた。夜あまり眠れない。&lt;/p>
&lt;h2 id="算定基礎届">算定基礎届&lt;/h2>
&lt;p>&lt;a href="https://shinsei.e-gov.go.jp/">e-gov電子申請&lt;/a> を使って初めて電子申請してみた。昨年もやろうと挑戦したけど、macos からだと不具合があってエラーになるから断念してた。今年は windows マシンがあるので windows アプリケーションをインストールして問題なく申請できた。うちは社員1人なので csv 取り込みを使わず、手入力で申請した。申請した書類は pdf 出力できるし、申請後に送信したデータは xml で控えとして保持できる。本当に紙でやっていたものを文書データと数値データに置き換えたようなアプリケーションになっている。紙の書類と比べて、アプリケーションがよいところは申請の進捗状況がわかるところ。算定基礎届で問題が発生することは過去にないけど、審査開始、審査終了、手続終了のステータスをアプリケーションから確認できる。それはそれで申請者にとって状況の追跡ができて安心感になる。&lt;/p>
&lt;h2 id="振替伝票の使い方">振替伝票の使い方&lt;/h2>
&lt;p>前期は赤字決算だったので中間申告で支払った税金が還付される。中間申告というのは、前年度の納税金額から翌年の税金の半分を納めるという仕組み。前年度の法人税額が20万円を超えると中間申告が必要となる。前年度と同じ法人税が今年度もあるという前提で半分納めるけれど、その納めた金額よりも確定申告のタイミングで実際の納税金額が少ない場合は還付金という形で返ってくる。今回は赤字決算となったものの、それも初めてだったので税務署からの還付金をどう会計処理するのかも初めての機会でよくわからなくて調べながら作業した。&lt;/p>
&lt;p>会計システムとして普通に行う処理ではないので freee のドキュメントも断片的にしか説明されていない。基本的な操作の考え方を理解した上で自分がやりたい会計処理に変更しないといけない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://support.freee.co.jp/hc/ja/articles/360000917903-%E5%8F%96%E5%BC%95%E3%82%92%E9%A0%90%E3%82%8A%E9%87%91%E3%82%84%E4%BB%AE%E6%89%95%E9%87%91%E3%81%A7%E6%B1%BA%E6%B8%88%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF-%E3%81%A9%E3%81%86%E3%81%99%E3%82%8C%E3%81%B0%E3%81%84%E3%81%84%E3%81%A7%E3%81%99%E3%81%8B-">取引を預り金や仮払金で決済するには、どうすればいいですか？&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://support.freee.co.jp/hc/ja/articles/204614754#4">還付を受ける場合の処理&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>まず中間申告のタイミングで振込した納付金額は「仮払金」として登録される。本来は確定申告のタイミングで確定した納付額に対して「仮払金」を相殺するような会計処理を行う必要がある。freee では取引データの決済欄に「+更新」というボタンがあってそこから仮払金から引き落とすようなデータ登録が可能となる。今回は赤字決算ですでに支払った「仮払金」が還付金として戻ってくるときの会計処理をしなければいけない。その手続きのために使うのが「振替伝票」になる。例として金額を10万円とすると次のような振替伝票を作成する。&lt;/p>
&lt;ul>
&lt;li>借方
&lt;ul>
&lt;li>勘定科目: 未収入金&lt;/li>
&lt;li>税区分: 対象外&lt;/li>
&lt;li>金額: 10万円&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>貸方
&lt;ul>
&lt;li>勘定科目: 仮払金&lt;/li>
&lt;li>税区分: 対象外&lt;/li>
&lt;li>金額: 10万円&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>「仮払金」を相殺するための勘定科目は「未収入金」になる。この「未収入金」を還付金の取引 (税務署から銀行口座に振り込まれた金額) で消し込むことで会計システム上の辻褄があう。一般的に還付金の勘定科目は「雑収入」として扱うらしい。還付金は消費税がかからない取引であるので不課税取引となる。ややこしいのは還付金が振り込まれる際に還付加算金というお金も一緒に振り込みされる場合がある。還付加算金というのは、納め過ぎた税金に対する金利のようなものになる。試しに計算してみると金利が 0.46% になった。ある銀行の定期が 0.002% だったので税務署に税金を納め過ぎるとめちゃくちゃ金利のよい貯金みたいな扱いになる。話しを元に戻すと、還付加算金は課税対象になるので「雑収入」の課税売上として会計処理する。&lt;/p>
&lt;p>うちの会社では、振替伝票は決算のタイミングでしか使わない。振替伝票の使い方を忘れていてたまに使うときに右往左往する。&lt;/p>
&lt;h2 id="はんなりdao">はんなりDAO&lt;/h2>
&lt;p>&lt;a href="https://hannari-python.connpass.com/event/251671/">はんなりDAOをはじめてみます&lt;/a> に参加した。イベントで話した内容は notion で公開されている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://chomoku.notion.site/chomoku/hannali-dao-080626065e614df89beb15c4b1272762">hannali-dao&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>まだ全然、計画段階で段取りの計画も目処もたっていない。dao が良いものかどうか、私はまだよくわかっていないが、実際に自分で試してみることには肯定的である。そして組織の取り組みは実際に複数人いないとあまり実用的ではないことからコミュニティのような、一定以上の信頼のある実際の人間が関わってくれるならそれはそれで実証実験の場としてはおもしろい取り組みになるかもしれない。初回だったので dao とは何かとか、dao や web3 を取り巻く世の中の状況はどうかとか、はんなり dao の目的をどうするかとか、計画段階の雑談が主だった。最初はそんなもんかもしれない。私もスマートコントラクトとか、何が嬉しいのかよくわかってないので dao を運営する中で実際に実装してみる機会があれば、それはそれで学びの機会としてよいかもしれないと考えている。&lt;/p>
&lt;p>&lt;a href="https://aragon.org/">aragon&lt;/a> という dao を作るためのプラットフォームがあって、これを使うと dao そのものはすぐに準備できるらしい。あとは組織運営のルールやスマートコントラクトを実装していくだけみたいな話し。ethereum で動かすと手数料がかかる。しばらくは testnet であーでもないこーでもないみたいなやり取りをしながら dao の運営を学んでいこうみたいな話しをしていた。&lt;/p></content></item></channel></rss>