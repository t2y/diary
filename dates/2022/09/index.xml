<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2022/09 on forest nook</title><link>/diary/dates/2022/09/</link><description>Recent content in 2022/09 on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/dates/2022/09/index.xml" rel="self" type="application/rss+xml"/><item><title>quarkus のアプリ開発が楽しくなってきた</title><link>/diary/posts/2022/0925/</link><pubDate>Sun, 25 Sep 2022 13:14:22 +0900</pubDate><guid>/diary/posts/2022/0925/</guid><description>4時に寝て8時に起きた。昨日は久しぶりに夜更しして quarkus の調べものをしてた。新しいものを学ぶのはおもしろい。
ストレッチ 今週末は本当は実家に帰る予定だったのが、台風による雨で田んぼのコンディションがよくないので断念した。日曜日の夜、田んぼ仕事を終えて筋肉痛のところにストレッチしてもらう予定は変わってしまった。今日の開脚幅は開始前155cmで、ストレッチ後160cmだった。いつもは朝測っているのが夜になるので数値はよくなかった。とはいえ、あまり規則正しく寝てないわりには体調がよい。気候が涼しいせいかな。トレーナーさんに来週はもう10月ですよと言われて9月は過ぎさるのが早いと改めて思った。
quarkus アプリケーションと認可フロー 昨日の続き。お昼前ぐらいからずっと quarkus のアプリケーション開発をしていた。なんやらかんやらで3日間ずっと bolt や quarkus のソースやドキュメントを読んでいた。徐々に理解度が増えてきて、できることも増えてきて楽しくなってきた。web 系だと di に google/guice を使うものも多いけど、エンタープライズ系だと cdi なのかなぁとか思ってた。わからんけど。以前にも cdi のドキュメントを読んで関心があった。cdi は本当によく出来ていると思う。一方で難し過ぎて、そこまでコンテキストを厳密に管理する必要があるアプリケーションもそうないのかもなぁとは思ってた。今日 quarkus でアプリケーション開発していてドキュメントを読みながらやってみたところが次になる。
CONTEXTS AND DEPENDENCY INJECTION USING THE REST CLIENT WRITING JSON REST SERVICES だいたい雰囲気は理解できてきたので backlog の Authentication &amp;amp; Authorization に書いてある oauth2 の Authorization Code Grant のフローを実装していた。access token の取得と refresh はできたのでこれを db に保存するのを明日以降にやってみる。</description><content>&lt;p>4時に寝て8時に起きた。昨日は久しぶりに夜更しして quarkus の調べものをしてた。新しいものを学ぶのはおもしろい。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週末は本当は実家に帰る予定だったのが、台風による雨で田んぼのコンディションがよくないので断念した。日曜日の夜、田んぼ仕事を終えて筋肉痛のところにストレッチしてもらう予定は変わってしまった。今日の開脚幅は開始前155cmで、ストレッチ後160cmだった。いつもは朝測っているのが夜になるので数値はよくなかった。とはいえ、あまり規則正しく寝てないわりには体調がよい。気候が涼しいせいかな。トレーナーさんに来週はもう10月ですよと言われて9月は過ぎさるのが早いと改めて思った。&lt;/p>
&lt;h2 id="quarkus-アプリケーションと認可フロー">quarkus アプリケーションと認可フロー&lt;/h2>
&lt;p>昨日の続き。お昼前ぐらいからずっと quarkus のアプリケーション開発をしていた。なんやらかんやらで3日間ずっと bolt や quarkus のソースやドキュメントを読んでいた。徐々に理解度が増えてきて、できることも増えてきて楽しくなってきた。web 系だと di に &lt;a href="https://github.com/google/guice">google/guice&lt;/a> を使うものも多いけど、エンタープライズ系だと &lt;a href="https://quarkus.io/guides/cdi">cdi&lt;/a> なのかなぁとか思ってた。わからんけど。以前にも cdi のドキュメントを読んで関心があった。cdi は本当によく出来ていると思う。一方で難し過ぎて、そこまでコンテキストを厳密に管理する必要があるアプリケーションもそうないのかもなぁとは思ってた。今日 quarkus でアプリケーション開発していてドキュメントを読みながらやってみたところが次になる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://quarkus.io/guides/cdi-reference">CONTEXTS AND DEPENDENCY INJECTION&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://quarkus.io/guides/rest-client">USING THE REST CLIENT&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://quarkus.io/guides/rest-json">WRITING JSON REST SERVICES&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>だいたい雰囲気は理解できてきたので backlog の &lt;a href="https://developer.nulab.com/docs/backlog/auth/">Authentication &amp;amp; Authorization&lt;/a> に書いてある oauth2 の &lt;em>Authorization Code Grant&lt;/em> のフローを実装していた。access token の取得と refresh はできたのでこれを db に保存するのを明日以降にやってみる。&lt;/p></content></item><item><title>quarkus のビルド環境に手間取った</title><link>/diary/posts/2022/0924/</link><pubDate>Sat, 24 Sep 2022 12:36:28 +0900</pubDate><guid>/diary/posts/2022/0924/</guid><description>1時に寝て7時に起きた。休みだとやっぱりだらだらしてしまうな。
bolt for java on quarkus 昨日の続き。スクラッチから quarkus のアプリケーションの設定を gradle で行う。quarkus の上で slack apps としてのコマンドとイベントの振る舞いだけ確認した。
https://github.com/t2y/bolt-java-sample 私は新規に開発する java アプリケーションは gradle を使うようにしている。これは java のよくないところだろうけれど、言語コミュニティが提供するパッケージマネージャやビルドツールがないから複数のツールが乱立している。maven から gradle に緩やかに移行していくのかな？と私は考えていたけれど、昔からあるライブラリのビルドツールを変更するのは労力に見合うメリットがないのか、maven も依然としてずっと使われ続けていくのかもしれない。maven と gradle の両対応という保守コストは、この先しばらく java コミュニティが抱えていく保守コストと言えるのかもしれない。quarkus はさらに独自の Quarkus CLI というビルドツールを提供している。そのため、ビルドのための設定だけで quarkus cli, maven, gradle の3つの方法があり、ドキュメントにもそれぞれの設定方法が書いてある。これを保守する方も使う方もややこしくて大変だなぁという印象を受けた。
BUILDING QUARKUS APPS WITH GRADLE をみながら次の maven cli で作った gradle プロジェクトのテンプレートをみながら build.gradle の設定をした。
$ mvn io.quarkus.platform:quarkus-maven-plugin:2.12.3.Final:create \ -DprojectGroupId=my-groupId \ -DprojectArtifactId=my-artifactId \ -Dextensions=&amp;#34;resteasy-reactive,resteasy-reactive-jackson&amp;#34; \ -DbuildTool=gradle あと私は設定ファイルを yaml で管理したいので次の拡張も追加した。gradle タスクでも定義されていて次のように実行する。
./gradlew addExtension --extensions=&amp;#34;quarkus-config-yaml&amp;#34; この cli がやっていることは基本的に dependencies に次の1行を追加するだけ。</description><content>&lt;p>1時に寝て7時に起きた。休みだとやっぱりだらだらしてしまうな。&lt;/p>
&lt;h2 id="bolt-for-java-on-quarkus">bolt for java on quarkus&lt;/h2>
&lt;p>昨日の続き。スクラッチから quarkus のアプリケーションの設定を gradle で行う。quarkus の上で slack apps としてのコマンドとイベントの振る舞いだけ確認した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/bolt-java-sample">https://github.com/t2y/bolt-java-sample&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>私は新規に開発する java アプリケーションは &lt;a href="https://gradle.org/">gradle&lt;/a> を使うようにしている。これは java のよくないところだろうけれど、言語コミュニティが提供するパッケージマネージャやビルドツールがないから複数のツールが乱立している。maven から gradle に緩やかに移行していくのかな？と私は考えていたけれど、昔からあるライブラリのビルドツールを変更するのは労力に見合うメリットがないのか、maven も依然としてずっと使われ続けていくのかもしれない。maven と gradle の両対応という保守コストは、この先しばらく java コミュニティが抱えていく保守コストと言えるのかもしれない。quarkus はさらに独自の &lt;a href="https://quarkus.io/guides/cli-tooling">Quarkus CLI&lt;/a> というビルドツールを提供している。そのため、ビルドのための設定だけで quarkus cli, maven, gradle の3つの方法があり、ドキュメントにもそれぞれの設定方法が書いてある。これを保守する方も使う方もややこしくて大変だなぁという印象を受けた。&lt;/p>
&lt;p>&lt;a href="https://quarkus.io/guides/gradle-tooling">BUILDING QUARKUS APPS WITH GRADLE&lt;/a> をみながら次の maven cli で作った gradle プロジェクトのテンプレートをみながら build.gradle の設定をした。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ mvn io.quarkus.platform:quarkus-maven-plugin:2.12.3.Final:create &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -DprojectGroupId&lt;span style="color:#f92672">=&lt;/span>my-groupId &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -DprojectArtifactId&lt;span style="color:#f92672">=&lt;/span>my-artifactId &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -Dextensions&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;resteasy-reactive,resteasy-reactive-jackson&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -DbuildTool&lt;span style="color:#f92672">=&lt;/span>gradle
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>あと私は設定ファイルを yaml で管理したいので次の拡張も追加した。gradle タスクでも定義されていて次のように実行する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./gradlew addExtension --extensions&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;quarkus-config-yaml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この cli がやっていることは基本的に dependencies に次の1行を追加するだけ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>dependencies &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation &lt;span style="color:#e6db74">&amp;#39;io.quarkus:quarkus-config-yaml&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>設定ファイルを yaml から読み込めるようになると初期設定は次のようになる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ vi app/src/main/resources/application.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>quarkus:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> http:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> port: &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> level: INFO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> category:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;com.slack.api&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> level: DEBUG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;tutorial.bolt.sample&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> level: DEBUG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> package:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: uber-jar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>開発サーバーは次のようにして起動する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ./gradlew quarkusDev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>quarkusDev enables hot deployment with background compilation, which means that when you modify your Java files or your resource files and refresh your browser these changes will automatically take effect. This works too for resource files like the configuration property file. The act of refreshing the browser triggers a scan of the workspace, and if any changes are detected the Java files are compiled, and the application is redeployed, then your request is serviced by the redeployed application. If there are any issues with compilation or deployment an error page will let you know.&lt;/p>
&lt;p>&lt;a href="https://quarkus.io/guides/gradle-tooling#dev-mode">https://quarkus.io/guides/gradle-tooling#dev-mode&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>hot deployment 機能のおかげでソースや設定ファイルを変更すると自動的に反映される。他の言語なら普通の機能かもしれないけど、java でもそういう仕組みが普通になったんだなと思って感心した。変化に付いていけない開発者のような気持ちになった。&lt;/p></content></item><item><title>slack apps 開発に着手</title><link>/diary/posts/2022/0923/</link><pubDate>Fri, 23 Sep 2022 10:17:02 +0900</pubDate><guid>/diary/posts/2022/0923/</guid><description>0時に寝て6時に起きた。あまりうまく眠れなかった。
bolt for java slack apps を開発するためのフレームワークとして bolt と呼ばれる高レベルのフレームワークが提供されている。このフレームワークは slack sdk を使って作られていて、slack apps の開発が簡単になるようにユーティリティが提供されている。The Bolt family of SDKs によると、javascript, python, java 向けに提供されている。以前 bizpy でも slack アプリ開発のチュートリアルの勉強会をしたことがある。そのときは bolot for python を使っていた。
python-study/BizPy/slack 一度触ったことがあったので bolt がどういうものかはすでに知っている。その java 版を使って slack apps を作ってみようと取り組み始めた。まずはチュートリアルを一通りやってみようと次のリポジトリでやってみた。
https://github.com/t2y/bolt-java-sample チュートリアルの内容を動かすだけならすぐできた。次に java の waf は何を使おうかを調べてた。Supported Web Frameworks によると、次の4つがある。
spring boot micronaut quarkus undertow helidon se さらに slackapi/java-slack-sdk#modules をみると、次の2つも追加されている。どちらも kotlin 向けのフレームワークらしい。
http4k ktor それぞれのフレームワークの説明を読んだり、この機に kotlin をやってみることも検討してみた。長期間の保守を前提にすると、一時的に触るだけの言語を使うのもどうかな？と思うところはあってやはり java でやることにした。spring boot はお仕事でよく使っていてどういうものかを理解しているので選択するなら他の3つのどれか。
Quarkus was created to enable Java developers to create applications for a modern, cloud-native world.</description><content>&lt;p>0時に寝て6時に起きた。あまりうまく眠れなかった。&lt;/p>
&lt;h2 id="bolt-for-java">bolt for java&lt;/h2>
&lt;p>slack apps を開発するためのフレームワークとして &lt;em>bolt&lt;/em> と呼ばれる高レベルのフレームワークが提供されている。このフレームワークは &lt;em>slack sdk&lt;/em> を使って作られていて、slack apps の開発が簡単になるようにユーティリティが提供されている。&lt;a href="https://api.slack.com/tools/bolt">The Bolt family of SDKs&lt;/a> によると、javascript, python, java 向けに提供されている。以前 bizpy でも slack アプリ開発のチュートリアルの勉強会をしたことがある。そのときは bolot for python を使っていた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/python-study/tree/master/BizPy/slack">python-study/BizPy/slack&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>一度触ったことがあったので &lt;em>bolt&lt;/em> がどういうものかはすでに知っている。その java 版を使って slack apps を作ってみようと取り組み始めた。まずはチュートリアルを一通りやってみようと次のリポジトリでやってみた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/bolt-java-sample">https://github.com/t2y/bolt-java-sample&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>チュートリアルの内容を動かすだけならすぐできた。次に java の waf は何を使おうかを調べてた。&lt;a href="https://slack.dev/java-slack-sdk/guides/supported-web-frameworks">Supported Web Frameworks&lt;/a> によると、次の4つがある。&lt;/p>
&lt;ul>
&lt;li>spring boot&lt;/li>
&lt;li>micronaut&lt;/li>
&lt;li>quarkus undertow&lt;/li>
&lt;li>helidon se&lt;/li>
&lt;/ul>
&lt;p>さらに &lt;a href="https://github.com/slackapi/java-slack-sdk#modules">slackapi/java-slack-sdk#modules&lt;/a> をみると、次の2つも追加されている。どちらも kotlin 向けのフレームワークらしい。&lt;/p>
&lt;ul>
&lt;li>http4k&lt;/li>
&lt;li>ktor&lt;/li>
&lt;/ul>
&lt;p>それぞれのフレームワークの説明を読んだり、この機に kotlin をやってみることも検討してみた。長期間の保守を前提にすると、一時的に触るだけの言語を使うのもどうかな？と思うところはあってやはり java でやることにした。spring boot はお仕事でよく使っていてどういうものかを理解しているので選択するなら他の3つのどれか。&lt;/p>
&lt;blockquote>
&lt;p>Quarkus was created to enable Java developers to create applications for a modern, cloud-native world. Quarkus is a Kubernetes-native Java framework tailored for GraalVM and HotSpot, crafted from best-of-breed Java libraries and standards. The goal is to make Java the leading platform in Kubernetes and serverless environments while offering developers a framework to address a wider range of distributed application architectures.&lt;/p>
&lt;p>&lt;a href="https://quarkus.io/about/">https://quarkus.io/about/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>いま kubernetes に好印象をもっていることもあり、この説明を読んで &lt;a href="https://quarkus.io/">quarkus&lt;/a> を選択することに決めた。そんなことをつぶやいていたら、せらさんからいくつかアドバイスをいただけた。slack について何かをつぶやくと100%返信がくる (ソースは私の経験) 。感謝。&lt;/p>
&lt;p>&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">そうですね。App クラス側は servlet やその他のライタイム含め、何にも依存していないので標準でアダプターがない場合にも自分で書けば任意の Web フレークワークで動かせます。 &lt;a href="https://twitter.com/hashtag/SlackDevJP?src=hash&amp;amp;ref_src=twsrc%5Etfw">#SlackDevJP&lt;/a>&lt;/p>&amp;mdash; Kazuhiro Sera (瀬良) (@seratch_ja) &lt;a href="https://twitter.com/seratch_ja/status/1573205191071240192?ref_src=twsrc%5Etfw">September 23, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">Quarkus いいですよ！ただ、GraalVM については少なくとも短期的にはサポート予定ありません。 &lt;a href="https://t.co/0cVGgohLez">https://t.co/0cVGgohLez&lt;/a> &lt;a href="https://twitter.com/hashtag/SlackDevJP?src=hash&amp;amp;ref_src=twsrc%5Etfw">#SlackDevJP&lt;/a>&lt;/p>&amp;mdash; Kazuhiro Sera (瀬良) (@seratch_ja) &lt;a href="https://twitter.com/seratch_ja/status/1573205502808686598?ref_src=twsrc%5Etfw">September 23, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;/p>
&lt;p>java アプリケーションを実行可能なバイナリにコンパイルする機能を &lt;a href="https://www.graalvm.org/">graalvm&lt;/a> が提供している。graalvm ではこのバイナリのことを &lt;a href="https://www.graalvm.org/22.1/reference-manual/native-image/">native image&lt;/a> と呼んでいる。quarkus は java の web アプリケーションフレームワークであり、graalvm を使って native image を作ることも考慮して設計されている。コンテナでデプロイすることを想定したフレームワークと言える。残念ながら slack sdk が使っているライブラリである gson はリフレクションを多用していて、それが graalvm とは相性が悪いだろうという話しで現時点では native image 化は難しいみたい。たしか native image でリフレクションを使うには使っている箇所を設定にすべて列挙しないといけなかった気がする。リフレクションのような動的に用いるものと静的な設定は相性が悪く、がんばれば特定のバージョンで動くものは設定できるかもしれないけど、ライブラリのようなものでバージョンアップに追随するのはしんどいという話しなのかなと思う。&lt;/p></content></item><item><title>勉強会が2つ</title><link>/diary/posts/2022/0922/</link><pubDate>Thu, 22 Sep 2022 08:54:56 +0900</pubDate><guid>/diary/posts/2022/0922/</guid><description>0時に寝て6時に起きた。涼しくて体調は抜群。
インフラ引き継ぎ勉強会 先週引き継ぎのためのインフラドキュメントを書いていたものをチームの開発者に共有した。今日は開発者向けの話しなので 5日以上かけた非開発者向けのインフラドキュメント は使わないが、社員さんによると、(私が参加していない社員さんだけの) 別の開発者チャンネルで読まれているとのこと。時間をかけたので多くの人に読んでもらえるに越したことはない。但し、そのフィードバックは私には一切ないので役に立っているのかどうかの判断しようがない。業務委託にそういう外様感を与えるかどうかは組織によって大きく異なる。過去に働いたある会社では自由に勉強会に参加したり他チームのメンバーとも技術の議論をできたりした。私は技術の話題に対しては真摯なので当たり前のように感じていたが、あの会社のあの文化は特別だったのだとそれから別の数社で働いてみて気付いた。
書いたインフラドキュメントに沿って一通り説明して、ほとんど実務をやっていないメンバーではあまりイメージができないと思うので質問もそれほどなかった。次回は実際にどうやってインフラのデプロイをするかの作業をみんなで確認しながら cdk の使い方などの話しをしようと思う。
インフレ勉強会 fin-py の月例のインフレ勉強会に参加した。背景はわかってないが、connpass イベントではない。市場調査や金融の勉強のために最近は毎月出席している。
明日9/22(木)19:00-20:00にインフレ研究会をやりますhttps://t.co/b6gabjIRYY
研究会といっても物価に関連する雑談です、どなたでも参加できます
Twitterのコミュニティはこちらですhttps://t.co/jBBn07Ahtg
&amp;mdash; driller/どりらん (@patraqushe) September 21, 2022 直前に政府の円買いの為替介入あったのが話題になってた。政府が本気？出せばこんな勢いで5円も動くらしい。為替介入はサプライズが大事らしくて、サプライズという側面ではみんなびっくりしたので効果はあったのかもしれない。
きょうの外国為替市場では、政府・日銀が市場介入を行ったことで、それまで1ドル＝145円台後半の円安ドル高水準で推移していた円相場が、一時、一気に140円台前半まで円高方向に。
夕方の円相場の動きです。https://t.co/2PZ8BqzH00#nhk_video pic.twitter.com/FPg9Ydvihw
&amp;mdash; NHKニュース (@nhk_news) September 22, 2022 fin-py の中の人もこんな勢いで動くのは珍しいと話していた。日本が為替介入するときは米国にお伺いを立てないといけないらしく、米国がうんと言わないと実弾の為替介入はできないことが多いらしい。中の人によれば、いまも米国は日本の為替介入をよくは思ってないだろうと推測されるので、こんなことをずっと続けられるかどうかは懐疑的だという。さらに世の中のトレンドはドル高なので為替介入しても一時的なもので意味がないという考え方もあるとのこと。今回の介入の意味があったかどうかは今後の為替が安定するかどうかで判断される。日本は世界でトップクラスに外貨準備のドルをもっている国なのも事実なので為替介入の実弾もたくさんあるから今後も介入する可能性はある。</description><content>&lt;p>0時に寝て6時に起きた。涼しくて体調は抜群。&lt;/p>
&lt;h2 id="インフラ引き継ぎ勉強会">インフラ引き継ぎ勉強会&lt;/h2>
&lt;p>先週引き継ぎのためのインフラドキュメントを書いていたものをチームの開発者に共有した。今日は開発者向けの話しなので &lt;a href="/diary/diary/posts/2022/0919/#ドキュメントを書き終えた">5日以上かけた非開発者向けのインフラドキュメント&lt;/a> は使わないが、社員さんによると、(私が参加していない社員さんだけの) 別の開発者チャンネルで読まれているとのこと。時間をかけたので多くの人に読んでもらえるに越したことはない。但し、そのフィードバックは私には一切ないので役に立っているのかどうかの判断しようがない。業務委託にそういう外様感を与えるかどうかは組織によって大きく異なる。過去に働いたある会社では自由に勉強会に参加したり他チームのメンバーとも技術の議論をできたりした。私は技術の話題に対しては真摯なので当たり前のように感じていたが、あの会社のあの文化は特別だったのだとそれから別の数社で働いてみて気付いた。&lt;/p>
&lt;p>書いたインフラドキュメントに沿って一通り説明して、ほとんど実務をやっていないメンバーではあまりイメージができないと思うので質問もそれほどなかった。次回は実際にどうやってインフラのデプロイをするかの作業をみんなで確認しながら cdk の使い方などの話しをしようと思う。&lt;/p>
&lt;h2 id="インフレ勉強会">インフレ勉強会&lt;/h2>
&lt;p>&lt;a href="https://fin-py.connpass.com/">fin-py&lt;/a> の月例のインフレ勉強会に参加した。背景はわかってないが、connpass イベントではない。市場調査や金融の勉強のために最近は毎月出席している。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">明日9/22(木)19:00-20:00にインフレ研究会をやります&lt;a href="https://t.co/b6gabjIRYY">https://t.co/b6gabjIRYY&lt;/a>&lt;br>研究会といっても物価に関連する雑談です、どなたでも参加できます&lt;br>Twitterのコミュニティはこちらです&lt;a href="https://t.co/jBBn07Ahtg">https://t.co/jBBn07Ahtg&lt;/a>&lt;/p>&amp;mdash; driller/どりらん (@patraqushe) &lt;a href="https://twitter.com/patraqushe/status/1572558645837320193?ref_src=twsrc%5Etfw">September 21, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>直前に政府の円買いの為替介入あったのが話題になってた。政府が本気？出せばこんな勢いで5円も動くらしい。為替介入はサプライズが大事らしくて、サプライズという側面ではみんなびっくりしたので効果はあったのかもしれない。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">きょうの外国為替市場では、政府・日銀が市場介入を行ったことで、それまで1ドル＝145円台後半の円安ドル高水準で推移していた円相場が、一時、一気に140円台前半まで円高方向に。&lt;br>夕方の円相場の動きです。&lt;a href="https://t.co/2PZ8BqzH00">https://t.co/2PZ8BqzH00&lt;/a>&lt;a href="https://twitter.com/hashtag/nhk_video?src=hash&amp;amp;ref_src=twsrc%5Etfw">#nhk_video&lt;/a> &lt;a href="https://t.co/FPg9Ydvihw">pic.twitter.com/FPg9Ydvihw&lt;/a>&lt;/p>&amp;mdash; NHKニュース (@nhk_news) &lt;a href="https://twitter.com/nhk_news/status/1572880709274181632?ref_src=twsrc%5Etfw">September 22, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>fin-py の中の人もこんな勢いで動くのは珍しいと話していた。日本が為替介入するときは米国にお伺いを立てないといけないらしく、米国がうんと言わないと実弾の為替介入はできないことが多いらしい。中の人によれば、いまも米国は日本の為替介入をよくは思ってないだろうと推測されるので、こんなことをずっと続けられるかどうかは懐疑的だという。さらに世の中のトレンドはドル高なので為替介入しても一時的なもので意味がないという考え方もあるとのこと。今回の介入の意味があったかどうかは今後の為替が安定するかどうかで判断される。日本は世界でトップクラスに外貨準備のドルをもっている国なのも事実なので為替介入の実弾もたくさんあるから今後も介入する可能性はある。&lt;/p></content></item><item><title>最近の java の勉強</title><link>/diary/posts/2022/0921/</link><pubDate>Wed, 21 Sep 2022 11:33:13 +0900</pubDate><guid>/diary/posts/2022/0921/</guid><description>0時に寝て7時に起きた。
運用対応 ある施設のサービスインのシステム切り替えでほぼ1日を終えた。昨日のロガーの要件を詰めようと思っていたけど、なんの話しもできないまま1日が過ぎた。トラブルの運用対応に開発リーダーが忙しくて、他の外部開発者は遊休中。自分の時間を無駄遣いしているようで辛い。あと1ヶ月の辛抱。
java 勉強会 たまたま Java 19が正式リリース。より軽量な仮想スレッド、RISC-Vへの移植など新機能。1年後のJava 21が次のLTS版に をみかけた。今後は java の lts リリースが3年から2年に変わるらしい。他の言語では軽量プロセスと呼ばれる仕組みを java では Virtual Threads (仮想スレッド：JEP 425) と呼ぶらしい。まだプレビュー版だけど、次の lts には使えるようになっていると思う。サーバー用途で言えば仮想スレッドを使ったサーバーが主流になれば java の運用時のメモリ使用量がいくらか減ることになって嬉しい状況はあるのかもしれない。
その記事と同時にタイムラインで Java仕様勉強会「Java SEの動向 2022夏」 をみかけたので気付いたタイミングで参加した。現在の java の機能拡張をしている様々なプロジェクトの紹介がされていた。半分は知ってたけど、半分ぐらいは知らないものもあって勉強にはなった。プロジェクトが多過ぎてだんだん聞いていて飽きてくるのもあったので勉強会のやり方を見直してもいいかもしれないとも思った。
その後にきしださんが java 19 の紹介をされていたのでそのまま視聴した。switch 式やパターンマッチングとの親和性あたりは私も期待していた内容の通りに拡張されているようにみえてよさそうの思う。次の lts はまだ先だけど、そのときに java を書くのが楽しみになるぐらいの機能拡張だとは思う。仮想スレッドの説明もデモしていた。他の言語で軽量プロセスを扱っている人にとっては意図した内容なので目新しくはないが、java でフレームワークを作っている開発者にとってはパフォーマンスを向上できる可能性があるので関心の高い機能だとも思う。</description><content>&lt;p>0時に寝て7時に起きた。&lt;/p>
&lt;h2 id="運用対応">運用対応&lt;/h2>
&lt;p>ある施設のサービスインのシステム切り替えでほぼ1日を終えた。昨日のロガーの要件を詰めようと思っていたけど、なんの話しもできないまま1日が過ぎた。トラブルの運用対応に開発リーダーが忙しくて、他の外部開発者は遊休中。自分の時間を無駄遣いしているようで辛い。あと1ヶ月の辛抱。&lt;/p>
&lt;h2 id="java-勉強会">java 勉強会&lt;/h2>
&lt;p>たまたま &lt;a href="https://www.publickey1.jp/blog/22/java_19risc-v1java_21lts.html">Java 19が正式リリース。より軽量な仮想スレッド、RISC-Vへの移植など新機能。1年後のJava 21が次のLTS版に&lt;/a> をみかけた。今後は java の lts リリースが3年から2年に変わるらしい。他の言語では軽量プロセスと呼ばれる仕組みを java では Virtual Threads (仮想スレッド：&lt;a href="https://openjdk.org/jeps/425">JEP 425&lt;/a>) と呼ぶらしい。まだプレビュー版だけど、次の lts には使えるようになっていると思う。サーバー用途で言えば仮想スレッドを使ったサーバーが主流になれば java の運用時のメモリ使用量がいくらか減ることになって嬉しい状況はあるのかもしれない。&lt;/p>
&lt;p>その記事と同時にタイムラインで &lt;a href="https://jjug.doorkeeper.jp/events/142958">Java仕様勉強会「Java SEの動向 2022夏」&lt;/a> をみかけたので気付いたタイミングで参加した。現在の java の機能拡張をしている様々なプロジェクトの紹介がされていた。半分は知ってたけど、半分ぐらいは知らないものもあって勉強にはなった。プロジェクトが多過ぎてだんだん聞いていて飽きてくるのもあったので勉強会のやり方を見直してもいいかもしれないとも思った。&lt;/p>
&lt;iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/5174987a33c3400091288cfc1ed598e0" title="Java SEの動向 2022夏版" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;" data-ratio="1.78343949044586">&lt;/iframe>
&lt;p>その後にきしださんが java 19 の紹介をされていたのでそのまま視聴した。switch 式やパターンマッチングとの親和性あたりは私も期待していた内容の通りに拡張されているようにみえてよさそうの思う。次の lts はまだ先だけど、そのときに java を書くのが楽しみになるぐらいの機能拡張だとは思う。仮想スレッドの説明もデモしていた。他の言語で軽量プロセスを扱っている人にとっては意図した内容なので目新しくはないが、java でフレームワークを作っている開発者にとってはパフォーマンスを向上できる可能性があるので関心の高い機能だとも思う。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/-5zlmBnxmCU" allowfullscreen title="Java 19新機能まとめ">&lt;/iframe>
&lt;/div></content></item><item><title>台風の過ぎた連休明け</title><link>/diary/posts/2022/0920/</link><pubDate>Tue, 20 Sep 2022 08:59:27 +0900</pubDate><guid>/diary/posts/2022/0920/</guid><description>0時に寝て7時に起きた。朝には台風は過ぎ去っていた。
ロガーとデータベースとの境界 ちょっと前にバッチ処理の履歴をデータベースに保持して履歴情報を使って運用対応がやりやすいような機能を一通り構築した。その延長上でロガーが任意のログをデータベースに保存できるようになれば、開発者からみてロガーを使ってログ出力するだけでデータベース保存もできてよいのではないかと考え始めた。既存の処理を見直しながらその移行ができそうかどうかを考えていたら、既存の処理をすべて捨ててもう一度スクラッチから作り直した方がよい気がしてきた。また明日そのアイディアの是非を確認してみようと思う。
ブロックチェーンのお仕事の面談 ある会社から lapras さん経由でスカウトをもらってカジュアル面談をした。ブロックチェーン界隈の事業のミドルウェアに位置するサービスのようで、ブロックチェーンからみたらアプリケーションだけど、web3 や nft のようなアプリケーション側からみたらインフラ側といった業務内容だった。ブロックチェーンや web3 関連は昨年ぐらいから情報収集していて関心のある業界ではある。私自身バックエンドのスキルやキャリアを高めたいという考えもあり、流行りと詐欺のみわけがつかない上モノのアプリケーションよりも基盤の方が向く。話しを聞いていて真っ当なビジネスであることは確認できた。ブロックチェーンの予備知識はまったくないが、先方も基本的な技術は web2 でも使われているものを使って構築されており、一般的なコンピューターサイエンス、データ処理やアルゴリズムの知識があればよいとのこと。話しを聞いていてそれはよく理解できた。先方は基本的に正社員で採用を考えていて、私は業務委託でしかお手伝いできない。いまのところ、自社プロダクトの開発に着手するまであと1-2年しか時間がない。この職場に私が参加しても1-2年後には辞めないといけないとしたら申し訳ないというところだけが懸念に思えた。カジュアル面談だったので選考の候補の1つとして一旦は保留しておく。</description><content>&lt;p>0時に寝て7時に起きた。朝には台風は過ぎ去っていた。&lt;/p>
&lt;h2 id="ロガーとデータベースとの境界">ロガーとデータベースとの境界&lt;/h2>
&lt;p>ちょっと前にバッチ処理の履歴をデータベースに保持して履歴情報を使って運用対応がやりやすいような機能を一通り構築した。その延長上でロガーが任意のログをデータベースに保存できるようになれば、開発者からみてロガーを使ってログ出力するだけでデータベース保存もできてよいのではないかと考え始めた。既存の処理を見直しながらその移行ができそうかどうかを考えていたら、既存の処理をすべて捨ててもう一度スクラッチから作り直した方がよい気がしてきた。また明日そのアイディアの是非を確認してみようと思う。&lt;/p>
&lt;h2 id="ブロックチェーンのお仕事の面談">ブロックチェーンのお仕事の面談&lt;/h2>
&lt;p>ある会社から &lt;a href="https://lapras.com">lapras&lt;/a> さん経由でスカウトをもらってカジュアル面談をした。ブロックチェーン界隈の事業のミドルウェアに位置するサービスのようで、ブロックチェーンからみたらアプリケーションだけど、web3 や nft のようなアプリケーション側からみたらインフラ側といった業務内容だった。ブロックチェーンや web3 関連は昨年ぐらいから情報収集していて関心のある業界ではある。私自身バックエンドのスキルやキャリアを高めたいという考えもあり、流行りと詐欺のみわけがつかない上モノのアプリケーションよりも基盤の方が向く。話しを聞いていて真っ当なビジネスであることは確認できた。ブロックチェーンの予備知識はまったくないが、先方も基本的な技術は web2 でも使われているものを使って構築されており、一般的なコンピューターサイエンス、データ処理やアルゴリズムの知識があればよいとのこと。話しを聞いていてそれはよく理解できた。先方は基本的に正社員で採用を考えていて、私は業務委託でしかお手伝いできない。いまのところ、自社プロダクトの開発に着手するまであと1-2年しか時間がない。この職場に私が参加しても1-2年後には辞めないといけないとしたら申し訳ないというところだけが懸念に思えた。カジュアル面談だったので選考の候補の1つとして一旦は保留しておく。&lt;/p></content></item><item><title>台風待ち</title><link>/diary/posts/2022/0919/</link><pubDate>Mon, 19 Sep 2022 09:27:53 +0900</pubDate><guid>/diary/posts/2022/0919/</guid><description>0時に寝て7時に起きた。台風がやってきそうでなかなか来ない。2日前から警戒して備えているのに今朝時点ではまったく平気。朝起きて雨だったら休もうと思っていたものの、雨がやんでたからオフィスきて一仕事してきた。
ドキュメントを書き終えた 5日以上に及んだ 非開発者向けのインフラドキュメント を書き終えた。他にもいくつかインフラのドキュメントの加筆や推敲もしていた。叩き台としてそれなりに伝えたいことは書けた。あとは勉強会をしながら出てきた話題や質問などを参考にしながら推敲していくだけ。</description><content>&lt;p>0時に寝て7時に起きた。台風がやってきそうでなかなか来ない。2日前から警戒して備えているのに今朝時点ではまったく平気。朝起きて雨だったら休もうと思っていたものの、雨がやんでたからオフィスきて一仕事してきた。&lt;/p>
&lt;h2 id="ドキュメントを書き終えた">ドキュメントを書き終えた&lt;/h2>
&lt;p>5日以上に及んだ &lt;a href="/diary/diary/posts/2022/0917/#まだドキュメントを書いている">非開発者向けのインフラドキュメント&lt;/a> を書き終えた。他にもいくつかインフラのドキュメントの加筆や推敲もしていた。叩き台としてそれなりに伝えたいことは書けた。あとは勉強会をしながら出てきた話題や質問などを参考にしながら推敲していくだけ。&lt;/p></content></item><item><title>一日中議論してた</title><link>/diary/posts/2022/0918/</link><pubDate>Sun, 18 Sep 2022 12:40:10 +0900</pubDate><guid>/diary/posts/2022/0918/</guid><description>1時に寝て7時に起きた。
会計監査と数字の着眼点 note で300円で販売している記事をみかけた。監査法人に勤めていた公認会計士が勝手にレビューしてみた的な記事になる。
Colabo3期間会計報告レビュー タイムラインでみかけたことをきっかけに私も過去3年分の会計報告を眺めたり、社内コミュニティで時事問題として取り上げていたので関心があった。経営者として他社の財務諸表をみる機会は私もあるので、会計士さんがどういった数字の見方をするのかの視点はとても勉強になった。現時点で不正をしているという話ではなく、会計報告からみえる数字だけを追いかけても経費の数字のいくつかに不可思議なところがあるという会計士からの指摘だった。ヒアリングすれば解決するかもしれないしそうじゃないかもしれない。一方で国や都からの少なくない金額の助成金 (税金) を受け取っているので会計報告に不明瞭なところがあるのであれば、精査して説明責任を果たす必要はあるだろうというのは一般的な共通認識ではないかと思う。
スクラム雑談 【三宮.dev オンライン】語り合おう！スクラム開発雑談会！ に参加した。常連のメンバー3人で話し始め、途中から主催者の先輩が加わって、sier のマネジメントのしんどい話しみたいものになって、最後はフロント／バックエンドの技術談義とかハックバーどうよみたいな話しになって、まさに雑談イベントみたいなものになった。ニフティのスクラム という本があるよと教えてもらって無料なので読んでみた所感をつぶやいたりもしてみた。あるイベントでも スクラム雑談 をしていて気付いたことの1つに、スクラムうまくいかない話しの大半は、スクラムというガイドライン上に洗い出された組織の課題を議論するようになるのではないかと思う。組織の課題の洗い出しにスクラムは使えるが、スクラムをやれば組織の課題を改善できるわけではないとわかってきた。
教えてもらったので斜め読みで目を通した / ニフティ | ニフティのスクラム #技術書典 https://t.co/Jh8QlGX4aX
&amp;mdash; Tetsuya Morimoto (@t2y) September 18, 2022</description><content>&lt;p>1時に寝て7時に起きた。&lt;/p>
&lt;h2 id="会計監査と数字の着眼点">会計監査と数字の着眼点&lt;/h2>
&lt;p>note で300円で販売している記事をみかけた。監査法人に勤めていた公認会計士が勝手にレビューしてみた的な記事になる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://note.com/2003zgf/n/n9a53015b551c">Colabo3期間会計報告レビュー&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>タイムラインでみかけたことをきっかけに私も過去3年分の会計報告を眺めたり、社内コミュニティで時事問題として取り上げていたので関心があった。経営者として他社の財務諸表をみる機会は私もあるので、会計士さんがどういった数字の見方をするのかの視点はとても勉強になった。現時点で不正をしているという話ではなく、会計報告からみえる数字だけを追いかけても経費の数字のいくつかに不可思議なところがあるという会計士からの指摘だった。ヒアリングすれば解決するかもしれないしそうじゃないかもしれない。一方で国や都からの少なくない金額の助成金 (税金) を受け取っているので会計報告に不明瞭なところがあるのであれば、精査して説明責任を果たす必要はあるだろうというのは一般的な共通認識ではないかと思う。&lt;/p>
&lt;h2 id="スクラム雑談">スクラム雑談&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/251000/">【三宮.dev オンライン】語り合おう！スクラム開発雑談会！&lt;/a> に参加した。常連のメンバー3人で話し始め、途中から主催者の先輩が加わって、sier のマネジメントのしんどい話しみたいものになって、最後はフロント／バックエンドの技術談義とかハックバーどうよみたいな話しになって、まさに雑談イベントみたいなものになった。&lt;a href="https://techbookfest.org/product/i99SVfgSGa1uSTwcez6H4Y?productVariantID=e3ivMhH8PXCWbtj3VdpiEi">ニフティのスクラム&lt;/a> という本があるよと教えてもらって無料なので読んでみた所感をつぶやいたりもしてみた。あるイベントでも &lt;a href="/diary/diary/posts/2022/0906/#スクラムイベント">スクラム雑談&lt;/a> をしていて気付いたことの1つに、スクラムうまくいかない話しの大半は、スクラムというガイドライン上に洗い出された組織の課題を議論するようになるのではないかと思う。組織の課題の洗い出しにスクラムは使えるが、スクラムをやれば組織の課題を改善できるわけではないとわかってきた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">教えてもらったので斜め読みで目を通した / ニフティ | ニフティのスクラム &lt;a href="https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8?src=hash&amp;amp;ref_src=twsrc%5Etfw">#技術書典&lt;/a> &lt;a href="https://t.co/Jh8QlGX4aX">https://t.co/Jh8QlGX4aX&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1571434558620598273?ref_src=twsrc%5Etfw">September 18, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item><item><title>ドキュメントを書いてマンガを読んで</title><link>/diary/posts/2022/0917/</link><pubDate>Sat, 17 Sep 2022 12:25:56 +0900</pubDate><guid>/diary/posts/2022/0917/</guid><description>0時に寝て7時に起きた。
ストレッチ 今日の開脚幅は開始前160cmで、ストレッチ後163cmだった。今週も調子がよい。やはり涼しくなって日々の生活の快適度があがって体調もよくなっている気がする。ストレッチを受けていてもあちこち調子よくていい感じにストレッチできているように思う。これで少しジョギングや運動をするといいんだろなという気持ちになってくる。これまでも暑い夏はあったと思うが、今年ほど夏の暑さにまいって集中力を欠いた年はなかったと思う。というのは、日記を1年近くも毎日書いたことがなかったからその変化に気付けたことも過去になかった。日記を書く過程で環境や状況の変化に敏感に気付けるようになったという背景もある。他の要因としては歳をとって体力が落ちているのだろうと推測する。落ちた体力をカバーするだけの取り組み (運動するとか摂生するとか) が必要なのだろうけれど、私は昔と比べて生活の姿勢をとくに変えていない。もうそろそろ不摂生がダメなんだろうなという自覚は出てきた。昨年からストレッチを始めたのは本当に僥倖で健康度はいくらか上がっていると思う。
まだドキュメントを書いている 非開発者向けのインフラドキュメント がなかなか完成に至らない。厳密に書くわけでもなく、嘘を書くわけでもなく、重要なことのみを専門用語を使わずに技術知識がない人たち向けに書くドキュメントは相当に難しい。どういう構成にするかも何度も試行錯誤しているし、説明のための文章量も増えてしまうところがある。インフラを知らない開発者向けに引き継ぎのドキュメントを書くよりもずっと大変だと3日も書いているのに書き終わらない (自分で納得がいかない) 事実から認識できた。書いて読まれるのかどうかもわからないけど、それは読み手の自由であって書き手は自分が伝えたいことを自分の言葉で書くことに意味があるだろうと考えて、いまの自分ができる精一杯のドキュメントを書こうと思う。
葬送のフリーレン 夕方から 葬送のフリーレン を7巻ぐらいまで読んだ。これまで1巻を無料キャンペーンで読んだことはあったし、人気があることも知ってはいたけどいつか読もうぐらいの感覚だった。毎日 LINE マンガで 神之塔 を読んでいるのだけど、たまたま2巻も無料化されたようで読んでみたらおもしろかったので、いつかはいまだと認識して電子版を購入して読み進めた。
葬送 という言葉も私は知らなかった。「死者と最後の別れをし、火葬場、墓地に送り出すこと。」を指す言葉らしい。マンガのタイトルして「葬送のフリーレン」という物語だよというのは内容からして妥当だと思うものの、これは物語の世界の中でもフリーレンの異名として魔族が呼んでいる。私はてっきりヒンメルとの思い出を辿る旅全体を葬送に見立てているのだと思って読み進めていたのに、途中で魔族からそう呼ばれていて、魔族を殺しまくる忌み名的なものだったの？というところで、それまで読み進めていた自分の中の世界観とバグが生じた。もしかしたら今後の物語の展開によってまた違った意味になってくるのかもしれないけど。
歴史上で最も多くの魔族を葬り去った魔法使いとして「葬送のフリーレン」の異名を持ち、魔族から忌み恐れられている。
ja.wikipedia.org/wiki/葬送のフリーレン
あと思い出を辿るという物語は、ほのぼのしている話しもあれば、魔族との戦いを話しもあり、資格を取るための競技会の話しもある。話しの展開を何とでも創生できる想像力の源になっている。このマンガは旅の終わりが来なくてもよいし、強い敵を倒さなくてもよいし、思い出さえあれば物語を展開できるのでその幅の広さに感心した。内容はまったく違うけれど、蟲師 を読んだときと同じような感銘を受けた。葬送のフリーレンもアニメ化が決定しているらしい。</description><content>&lt;p>0時に寝て7時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前160cmで、ストレッチ後163cmだった。今週も調子がよい。やはり涼しくなって日々の生活の快適度があがって体調もよくなっている気がする。ストレッチを受けていてもあちこち調子よくていい感じにストレッチできているように思う。これで少しジョギングや運動をするといいんだろなという気持ちになってくる。これまでも暑い夏はあったと思うが、今年ほど夏の暑さにまいって集中力を欠いた年はなかったと思う。というのは、日記を1年近くも毎日書いたことがなかったからその変化に気付けたことも過去になかった。日記を書く過程で環境や状況の変化に敏感に気付けるようになったという背景もある。他の要因としては歳をとって体力が落ちているのだろうと推測する。落ちた体力をカバーするだけの取り組み (運動するとか摂生するとか) が必要なのだろうけれど、私は昔と比べて生活の姿勢をとくに変えていない。もうそろそろ不摂生がダメなんだろうなという自覚は出てきた。昨年からストレッチを始めたのは本当に僥倖で健康度はいくらか上がっていると思う。&lt;/p>
&lt;h2 id="まだドキュメントを書いている">まだドキュメントを書いている&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0915/#インフラのドキュメント作成の続き">非開発者向けのインフラドキュメント&lt;/a> がなかなか完成に至らない。厳密に書くわけでもなく、嘘を書くわけでもなく、重要なことのみを専門用語を使わずに技術知識がない人たち向けに書くドキュメントは相当に難しい。どういう構成にするかも何度も試行錯誤しているし、説明のための文章量も増えてしまうところがある。インフラを知らない開発者向けに引き継ぎのドキュメントを書くよりもずっと大変だと3日も書いているのに書き終わらない (自分で納得がいかない) 事実から認識できた。書いて読まれるのかどうかもわからないけど、それは読み手の自由であって書き手は自分が伝えたいことを自分の言葉で書くことに意味があるだろうと考えて、いまの自分ができる精一杯のドキュメントを書こうと思う。&lt;/p>
&lt;h2 id="葬送のフリーレン">葬送のフリーレン&lt;/h2>
&lt;p>夕方から &lt;a href="https://websunday.net/work/708/">葬送のフリーレン&lt;/a> を7巻ぐらいまで読んだ。これまで1巻を無料キャンペーンで読んだことはあったし、人気があることも知ってはいたけどいつか読もうぐらいの感覚だった。毎日 LINE マンガで &lt;a href="/diary/diary/posts/2022/0514/#神之塔">神之塔&lt;/a> を読んでいるのだけど、たまたま2巻も無料化されたようで読んでみたらおもしろかったので、いつかはいまだと認識して電子版を購入して読み進めた。&lt;/p>
&lt;p>&lt;a href="https://ja.wikipedia.org/wiki/%E8%91%AC%E9%80%81">葬送&lt;/a> という言葉も私は知らなかった。「死者と最後の別れをし、火葬場、墓地に送り出すこと。」を指す言葉らしい。マンガのタイトルして「葬送のフリーレン」という物語だよというのは内容からして妥当だと思うものの、これは物語の世界の中でもフリーレンの異名として魔族が呼んでいる。私はてっきりヒンメルとの思い出を辿る旅全体を葬送に見立てているのだと思って読み進めていたのに、途中で魔族からそう呼ばれていて、魔族を殺しまくる忌み名的なものだったの？というところで、それまで読み進めていた自分の中の世界観とバグが生じた。もしかしたら今後の物語の展開によってまた違った意味になってくるのかもしれないけど。&lt;/p>
&lt;blockquote>
&lt;p>歴史上で最も多くの魔族を葬り去った魔法使いとして「葬送のフリーレン」の異名を持ち、魔族から忌み恐れられている。&lt;/p>
&lt;p>&lt;a href="https://ja.wikipedia.org/wiki/%E8%91%AC%E9%80%81%E3%81%AE%E3%83%95%E3%83%AA%E3%83%BC%E3%83%AC%E3%83%B3">ja.wikipedia.org/wiki/葬送のフリーレン&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>あと思い出を辿るという物語は、ほのぼのしている話しもあれば、魔族との戦いを話しもあり、資格を取るための競技会の話しもある。話しの展開を何とでも創生できる想像力の源になっている。このマンガは旅の終わりが来なくてもよいし、強い敵を倒さなくてもよいし、思い出さえあれば物語を展開できるのでその幅の広さに感心した。内容はまったく違うけれど、&lt;a href="https://www.mushishi-anime.com/">蟲師&lt;/a> を読んだときと同じような感銘を受けた。葬送のフリーレンもアニメ化が決定しているらしい。&lt;/p></content></item><item><title>これから面談が増えていく</title><link>/diary/posts/2022/0916/</link><pubDate>Fri, 16 Sep 2022 15:57:45 +0900</pubDate><guid>/diary/posts/2022/0916/</guid><description>23時に寝て5時過ぎに起きた。7時にはオフィスに着いて9時までプロダクトオーナーのためのインフラ入門のドキュメントの続きを書いてた。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。前隔週を1回飛ばしたので話題はたくさんあった。エージェント経由のお仕事探しはまったくうまくいってないという状況を相談していたら、私のような開発者が匿名の職務経歴書で選別されるのは難しいのではないかとのこと。まさにその通りだと私も思う。逆に個人のパブリックなリソース (github, qiita, blog, slide など) からスコア算出するサービスは相手から面談のオファーがくる。長く生きている分だけパブリックなリソースがあってスコアがよくなるという理屈だが、そういったお仕事探しをしないと私の実績や経験では職務経歴書の見栄えが足りないということを学んだ。はらさんからのアドバイスとして、勉強会やイベントに登壇して発表者だけのレセプションパーティーに参加するのがよいと教えてもらった。懇親会とは異なる。懇親会はどちらかという参加している開発者のためのパーティーだが、レセプションパーティーは関係者のためのパーティーなのでスポンサーや著名人と話しやすい。そこでコネができるとカジュアルによいポジションのお仕事の紹介/斡旋が起きるとのこと。
お仕事探し 知人の働く会社で面談してもらった。たまたまやり取りするきっかけがあったので開発者を探していれば声をかけてくださいと言ったらまさにそういう状況だったみたい。経営者の方々とも、私からは面識があって10年以上前に1度だけご挨拶したことがあった。先方が覚えてくれていたかどうかはわからない。「いま何歳？」と聞かれて、あのとき20代だった人間がもう40代か、歳とったなとみんなで笑っていた。そりゃ16年も経っているのだからそうだよねって感じでおもしろかった。業界内ではトップレベルのパッケージベンダーだし、私自身も大先輩の方々だと認識しているし、技術的にも私などがお手伝いできるのだろうか？という懸念はあったものの、先方がやってほしいと考えている業務内容だけをみたらマッチングは問題なさそうに思えた。うちの会社のビジネスにしたい課題管理のノウハウを実践したり体系化したりする現実の職場としてもよさそうに思う。詳細な契約の条件や先方の要件などをこれから摺り合わせていく。うまくいくといいな。</description><content>&lt;p>23時に寝て5時過ぎに起きた。7時にはオフィスに着いて9時までプロダクトオーナーのためのインフラ入門のドキュメントの続きを書いてた。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。前隔週を1回飛ばしたので話題はたくさんあった。エージェント経由のお仕事探しはまったくうまくいってないという状況を相談していたら、私のような開発者が匿名の職務経歴書で選別されるのは難しいのではないかとのこと。まさにその通りだと私も思う。逆に個人のパブリックなリソース (github, qiita, blog, slide など) からスコア算出するサービスは相手から面談のオファーがくる。長く生きている分だけパブリックなリソースがあってスコアがよくなるという理屈だが、そういったお仕事探しをしないと私の実績や経験では職務経歴書の見栄えが足りないということを学んだ。はらさんからのアドバイスとして、勉強会やイベントに登壇して発表者だけのレセプションパーティーに参加するのがよいと教えてもらった。懇親会とは異なる。懇親会はどちらかという参加している開発者のためのパーティーだが、レセプションパーティーは関係者のためのパーティーなのでスポンサーや著名人と話しやすい。そこでコネができるとカジュアルによいポジションのお仕事の紹介/斡旋が起きるとのこと。&lt;/p>
&lt;h2 id="お仕事探し">お仕事探し&lt;/h2>
&lt;p>知人の働く会社で面談してもらった。たまたまやり取りするきっかけがあったので開発者を探していれば声をかけてくださいと言ったらまさにそういう状況だったみたい。経営者の方々とも、私からは面識があって10年以上前に1度だけご挨拶したことがあった。先方が覚えてくれていたかどうかはわからない。「いま何歳？」と聞かれて、あのとき20代だった人間がもう40代か、歳とったなとみんなで笑っていた。そりゃ16年も経っているのだからそうだよねって感じでおもしろかった。業界内ではトップレベルのパッケージベンダーだし、私自身も大先輩の方々だと認識しているし、技術的にも私などがお手伝いできるのだろうか？という懸念はあったものの、先方がやってほしいと考えている業務内容だけをみたらマッチングは問題なさそうに思えた。うちの会社のビジネスにしたい課題管理のノウハウを実践したり体系化したりする現実の職場としてもよさそうに思う。詳細な契約の条件や先方の要件などをこれから摺り合わせていく。うまくいくといいな。&lt;/p></content></item><item><title>インフラと非開発者</title><link>/diary/posts/2022/0915/</link><pubDate>Thu, 15 Sep 2022 08:37:44 +0900</pubDate><guid>/diary/posts/2022/0915/</guid><description>0時に寝て5時に起きて7時に起きた。
インフラのドキュメント作成の続き 昨日はインフラ構成図を主に書いていたが、今日は引き継ぎのために wiki に概要を書いて補足事項なども肉付けしながら、私がやったことや今後運用していく上で知っておくべきことなどをまとめていた。それと同時に backlog の wiki の階層構造なども見直していた。backlog の wiki はタイトルに / を含めることで階層構造を表す。実際の url はエイリアスリンクが使われていて、タイトルとは無関係なので wiki のタイトルを変更することで階層構造が変わる。これはこれでお手軽とも言えるけれど、この階層以下のドキュメントをすべて移動したいといったときは1つずつタイトルを変えないといけないので面倒になる。デイリースクラムのときに来週のインフラ勉強会の時間もスケジュールを抑えてもらった。おそらく1回では終わらないのではないかと推測するが、説明してみて開発者の反応もみながら2回目の有無を決める。
さらに「プロダクトオーナーのためのインフラ入門」というタイトルで別のドキュメントも書き始めた。他の重要な業務がなくて暇だと言ってしまえばそうなのだけど、非開発者向けにクラウドのインフラや自分たちの web システムをどう理解してもらうのがよいか、私自身、試行錯誤で答えをもっているわけではないが、難しいからプロダクトオーナーはインフラを理解しなくてよいというつもりもない。以前からプロダクトオーナーが「自分たちもインフラがどうなっているのかを理解したい」というコメントを何度か聞いていたので筆を取った次第だ。技術的な詳細は理解できないだろうが、いまどきのインフラにおいてどういった概念や考え方が重要なのか、なぜこのような複雑なインフラになってしまっているのか、そうした背景を理解してもらおうと考えている。初めての試みなので、後日やってみて反応をみてふりかえりしようと思う。</description><content>&lt;p>0時に寝て5時に起きて7時に起きた。&lt;/p>
&lt;h2 id="インフラのドキュメント作成の続き">インフラのドキュメント作成の続き&lt;/h2>
&lt;p>昨日はインフラ構成図を主に書いていたが、今日は引き継ぎのために wiki に概要を書いて補足事項なども肉付けしながら、私がやったことや今後運用していく上で知っておくべきことなどをまとめていた。それと同時に backlog の wiki の階層構造なども見直していた。backlog の wiki はタイトルに &lt;code>/&lt;/code> を含めることで階層構造を表す。実際の url はエイリアスリンクが使われていて、タイトルとは無関係なので wiki のタイトルを変更することで階層構造が変わる。これはこれでお手軽とも言えるけれど、この階層以下のドキュメントをすべて移動したいといったときは1つずつタイトルを変えないといけないので面倒になる。デイリースクラムのときに来週のインフラ勉強会の時間もスケジュールを抑えてもらった。おそらく1回では終わらないのではないかと推測するが、説明してみて開発者の反応もみながら2回目の有無を決める。&lt;/p>
&lt;p>さらに「プロダクトオーナーのためのインフラ入門」というタイトルで別のドキュメントも書き始めた。他の重要な業務がなくて暇だと言ってしまえばそうなのだけど、非開発者向けにクラウドのインフラや自分たちの web システムをどう理解してもらうのがよいか、私自身、試行錯誤で答えをもっているわけではないが、難しいからプロダクトオーナーはインフラを理解しなくてよいというつもりもない。以前からプロダクトオーナーが「自分たちもインフラがどうなっているのかを理解したい」というコメントを何度か聞いていたので筆を取った次第だ。技術的な詳細は理解できないだろうが、いまどきのインフラにおいてどういった概念や考え方が重要なのか、なぜこのような複雑なインフラになってしまっているのか、そうした背景を理解してもらおうと考えている。初めての試みなので、後日やってみて反応をみてふりかえりしようと思う。&lt;/p></content></item><item><title>インフラと引き継ぎ</title><link>/diary/posts/2022/0914/</link><pubDate>Wed, 14 Sep 2022 09:35:51 +0900</pubDate><guid>/diary/posts/2022/0914/</guid><description>0時に寝て6時に起きた。
インフラのドキュメント作成 契約終了まであと1ヶ月半。私が唯一引き継ぎしないといけないものにインフラがある。
引き継ぐ前のインフラは本当にひどい状態だった。手抜き工事のまま放置されたような状態だった。cdk のコードから実際のインフラを構築することはできなくて、コード化されていないところを aws のマネジメントコンソールから手作業で設定していた上、どこを手作業で設定していたかの情報は一切残されていなかった。新しいインフラが追加されるときに cdk のコードと乖離があるからデプロイできなくて、それを前任者は直せなくて私が引き継いだという経緯がある。私が1ヶ月ほどかけて30以上の pr を作ってコードと実際のインフラをほぼ完全に同期させた。その過程で3回ほど (テスト環境ではあるが) 障害も発生させている。デプロイしたら手動設定が消えて壊れてしまう。何が手動設定で何がコード管理なのかの情報が何もないのだからデプロイしてみないと動くかどうかわからないという状況だった。そのため、現在のインフラは私が作り直したと言っても過言ではない。cdk のバージョンも v1 から v2 にアップグレードした。半分以上の cdk のコードは私が書いたと思う。その引き継ぎならびにドキュメント化の作業にようやく着手した。これまで書いてなかったのはインフラを管理しているのは私だけだったのでドキュメントなくても運用上の問題はなく、ドキュメントタスクの優先順位が低かったから。今日は draw.io で aws のシステム構成図を書き上げて、wiki のインフラドキュメントの再構築に着手したところ。
今週中に引き継ぎのドキュメントを書いて、来週ぐらいからインフラ勉強会やって引き継ぎを完了させる予定。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="インフラのドキュメント作成">インフラのドキュメント作成&lt;/h2>
&lt;p>契約終了まであと1ヶ月半。私が唯一引き継ぎしないといけないものにインフラがある。&lt;/p>
&lt;p>引き継ぐ前のインフラは本当にひどい状態だった。手抜き工事のまま放置されたような状態だった。cdk のコードから実際のインフラを構築することはできなくて、コード化されていないところを aws のマネジメントコンソールから手作業で設定していた上、どこを手作業で設定していたかの情報は一切残されていなかった。新しいインフラが追加されるときに cdk のコードと乖離があるからデプロイできなくて、それを前任者は直せなくて私が引き継いだという経緯がある。私が1ヶ月ほどかけて30以上の pr を作ってコードと実際のインフラをほぼ完全に同期させた。その過程で3回ほど (テスト環境ではあるが) 障害も発生させている。デプロイしたら手動設定が消えて壊れてしまう。何が手動設定で何がコード管理なのかの情報が何もないのだからデプロイしてみないと動くかどうかわからないという状況だった。そのため、現在のインフラは私が作り直したと言っても過言ではない。cdk のバージョンも v1 から v2 にアップグレードした。半分以上の cdk のコードは私が書いたと思う。その引き継ぎならびにドキュメント化の作業にようやく着手した。これまで書いてなかったのはインフラを管理しているのは私だけだったのでドキュメントなくても運用上の問題はなく、ドキュメントタスクの優先順位が低かったから。今日は draw.io で aws のシステム構成図を書き上げて、wiki のインフラドキュメントの再構築に着手したところ。&lt;/p>
&lt;p>今週中に引き継ぎのドキュメントを書いて、来週ぐらいからインフラ勉強会やって引き継ぎを完了させる予定。&lt;/p></content></item><item><title>コワーキングから学ぶコミュニティ</title><link>/diary/posts/2022/0913/</link><pubDate>Tue, 13 Sep 2022 08:24:10 +0900</pubDate><guid>/diary/posts/2022/0913/</guid><description>0時に寝て2時に起きて5時前ぐらいまで本を読んでまた寝て8時に起きた。昨日の続きでちょっとした画面の改修をやって、小さいタスクを2つほど片付けて、それでもやることなくて暇だなぁ。
backlog-github-integration-action のアップデート backlog のライブラリのバージョンが上がっていたのを少し前にみかけていたので更新してリリースした。
https://github.com/kazamori/backlog-github-integration-action/releases/tag/v1.0.2 コワーキングのオンラインイベント 先日のカフーツさんのトークイベント 同様、9月のイベントに参加した。前回は急遽スケジュール調整をしたせいか私1人だったけど、今日は6人の参加者がいた。私以外はコワーキングスペースを運営している人みたい。コワーキングと街づくりといった内容が今日のテーマだったみたい。その事例の1つとして オトナリ［島根県雲南市］ を教えてもらった。成功事例の話しを聞いていると共通点の1つとして主催者が地元の人ではなくても、その地域に移住して運営しているという。オトナリも東京のコンサル会社が受注してコワーキングのビジネスを始めたものの、その会社の社員が東京から移住してまでその地域の街づくりに参画しているという。その熱意の違いが正否をわける要因の1つであろうと私は感じた。以前、神戸市さんとコミュニティについて雑談した ときも、あえて言わなかったけど、職員自らではなく業者に委託して運営しているようなコミュニティではまったく運営の取り組みは異なるだろうと思う。他にも コミュニティ財団 という財団法人を作って運営している 愛媛県 西条市 の事例なども教えていただいた。
その後、参加者個々のコワーキングスペースの運営者のお悩み相談みたいなやり取りをしていた。私だけ運営者じゃないのでちょっと浮いてた。お前何ものやねん的なw あと箇条書きで書いたものをマインドマップに変換する Transno というエディターがあるらしい。私は手書きでマインドマップを描くのでこういったツールは使わないけれど、ツールでマインドマップを書くのが好きな人には向くのかもしれない。</description><content>&lt;p>0時に寝て2時に起きて5時前ぐらいまで本を読んでまた寝て8時に起きた。昨日の続きでちょっとした画面の改修をやって、小さいタスクを2つほど片付けて、それでもやることなくて暇だなぁ。&lt;/p>
&lt;h2 id="backlog-github-integration-action-のアップデート">backlog-github-integration-action のアップデート&lt;/h2>
&lt;p>backlog のライブラリのバージョンが上がっていたのを少し前にみかけていたので更新してリリースした。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/backlog-github-integration-action/releases/tag/v1.0.2">https://github.com/kazamori/backlog-github-integration-action/releases/tag/v1.0.2&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="コワーキングのオンラインイベント">コワーキングのオンラインイベント&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0831/#コワーキングのオンラインイベント">先日のカフーツさんのトークイベント&lt;/a> 同様、9月のイベントに参加した。前回は急遽スケジュール調整をしたせいか私1人だったけど、今日は6人の参加者がいた。私以外はコワーキングスペースを運営している人みたい。コワーキングと街づくりといった内容が今日のテーマだったみたい。その事例の1つとして &lt;a href="https://coworkingpress.com/archives/457">オトナリ［島根県雲南市］&lt;/a> を教えてもらった。成功事例の話しを聞いていると共通点の1つとして主催者が地元の人ではなくても、その地域に移住して運営しているという。オトナリも東京のコンサル会社が受注してコワーキングのビジネスを始めたものの、その会社の社員が東京から移住してまでその地域の街づくりに参画しているという。その熱意の違いが正否をわける要因の1つであろうと私は感じた。&lt;a href="/diary/diary/posts/2022/0805/##神戸市さんと雑談">以前、神戸市さんとコミュニティについて雑談した&lt;/a> ときも、あえて言わなかったけど、職員自らではなく業者に委託して運営しているようなコミュニティではまったく運営の取り組みは異なるだろうと思う。他にも &lt;a href="https://www.cf-japan.org/about-cf/">コミュニティ財団&lt;/a> という財団法人を作って運営している &lt;a href="https://escf.jp/">愛媛県 西条市&lt;/a> の事例なども教えていただいた。&lt;/p>
&lt;p>その後、参加者個々のコワーキングスペースの運営者のお悩み相談みたいなやり取りをしていた。私だけ運営者じゃないのでちょっと浮いてた。お前何ものやねん的なw あと箇条書きで書いたものをマインドマップに変換する &lt;a href="https://transno.com/">Transno&lt;/a> というエディターがあるらしい。私は手書きでマインドマップを描くのでこういったツールは使わないけれど、ツールでマインドマップを書くのが好きな人には向くのかもしれない。&lt;/p></content></item><item><title>蓋然性という言葉がよくわからなかった</title><link>/diary/posts/2022/0912/</link><pubDate>Mon, 12 Sep 2022 08:06:42 +0900</pubDate><guid>/diary/posts/2022/0912/</guid><description>0時に寝て7時に起きた。朝からタスクの詳細をヒアリングして web api と画面を作るだけの簡単な作業。しばらく (1-2週間ぐらい？) は暇な日々が続きそう。
蓋然性 (probability) と可能性 (possibility) の違い わかりやすかった。
夏目漱石が授業で言った例では、「教壇で喋る講師が逆立ちする可能性はあるが、蓋然性はない。」というものがあります。
「判例の用いる確率の用語」～元公務員講師のコラム～
なんとなく稼ぐ 4 Passive Income Streams for a Programmer 次の4つの手法による収入を passive income (受動的な収入) と定義している。
ソフトウェアとデジタル資産を売る ブログを始める 自分の youtube チャンネルを始める フリーランスオンライン それぞれみていくと、ソフトウェアを売るというのはアプリストアに代表されるようなマーケットプレイスで販売すること。デジタル資産とは電子書籍など。ブログは medium のようなサブスクリプションを使う。youtube はコンテンツを作って広告収入を得るかな。オンラインでフリーランスとして副収入を稼ぐという方法。どれもよく知られた当たり前の手法だけど、簡潔にまとまっていてわかりやすかった。</description><content>&lt;p>0時に寝て7時に起きた。朝からタスクの詳細をヒアリングして web api と画面を作るだけの簡単な作業。しばらく (1-2週間ぐらい？) は暇な日々が続きそう。&lt;/p>
&lt;h2 id="蓋然性-probability-と可能性-possibility-の違い">蓋然性 (probability) と可能性 (possibility) の違い&lt;/h2>
&lt;p>わかりやすかった。&lt;/p>
&lt;blockquote>
&lt;p>夏目漱石が授業で言った例では、「教壇で喋る講師が逆立ちする可能性はあるが、蓋然性はない。」というものがあります。&lt;/p>
&lt;p>&lt;a href="https://komuin.umedai.jp/introduce/k20210614/">「判例の用いる確率の用語」～元公務員講師のコラム～&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="なんとなく稼ぐ">なんとなく稼ぐ&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://javascript.plainenglish.io/4-passive-income-streams-for-a-programmer-2fe593ac2df9">4 Passive Income Streams for a Programmer&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>次の4つの手法による収入を &lt;em>passive income&lt;/em> (受動的な収入) と定義している。&lt;/p>
&lt;ol>
&lt;li>ソフトウェアとデジタル資産を売る&lt;/li>
&lt;li>ブログを始める&lt;/li>
&lt;li>自分の youtube チャンネルを始める&lt;/li>
&lt;li>フリーランスオンライン&lt;/li>
&lt;/ol>
&lt;p>それぞれみていくと、ソフトウェアを売るというのはアプリストアに代表されるようなマーケットプレイスで販売すること。デジタル資産とは電子書籍など。ブログは medium のようなサブスクリプションを使う。youtube はコンテンツを作って広告収入を得るかな。オンラインでフリーランスとして副収入を稼ぐという方法。どれもよく知られた当たり前の手法だけど、簡潔にまとまっていてわかりやすかった。&lt;/p></content></item><item><title>スキルの定量化とお仕事探し</title><link>/diary/posts/2022/0911/</link><pubDate>Sun, 11 Sep 2022 15:07:06 +0900</pubDate><guid>/diary/posts/2022/0911/</guid><description>0時に寝て7時に起きた。直近は日曜日はだらだらしてたんだけど、すんなり起きれた。
お仕事探し offers さんのカジュアル面談 の雰囲気から企業に直接応募するプラットフォームの方が、私の経歴や実績の詳細を確認しやすいので面談に進みやすいのではないかとみている。そこで findy と lapras のプロフィールを作成してみた。これまで oss 活動やブログなどでアウトプットしていた資産がたくさんあるのでレベルはしょぼいにも関わらず、これらのプラットフォーム上ではそこそこよい数値がアルゴリズム的には算出される。プラットフォーム側としては転職やエンゲージメントを高めたいという意図があるから、ゴーストアカウントのようなものも含めて算出すると普通の人は高めの数字が算出されるのではないかと推測する。
やってみた / 【スキル偏差値v2の診断結果】
エンジニア向けスキル偏差値の診断結果は、Total 81.0、Python 81.0、HTML 80.0、Java 78.0でした。あなたもスキル偏差値をチェックしよう！ https://t.co/4E4ibyevz0 #findy #スキル偏差値v2
&amp;mdash; Tetsuya Morimoto (@t2y) September 11, 2022 findy さんのスキル偏差値によると、想定年収予測は1060-1160万円らしい。この数値は起業する前のサラリーマン時代の年収に近いのでそんなにずれてはいない。lapras さんの公開プロフィール によると、技術力が4.01で約170万人中668位だというのは上位 0.04% に属することになってしまう。んな、あほなという思いはある。とはいえ、自己申告の経歴をいくらでも盛れる職務経歴書よりも、客観的なアルゴリズムで評価できる指標の方が絶対値が適切かは置いておいても、相対評価において他の候補者と比較できるのを好む採用担当者もいるだろう。匿名の一般的な職務経歴書を用いる remogu さんの選考 は書類選考でばんばん落ちまくる。それに比べたら、アルゴリズムで相対的によい数値が出ているプラットフォームの方が面談に進みやすいのではないかという話し。本当にそうかどうかの仮説はこれから検証する。
google の従業員が働いていないという発言の真意 昨日たまたま medium のダイジェストでみかけた記事を読んだらおもしろかったので、なるべく余裕のある日は medium の記事を1つ読むようにしてみようかと思う。言うても deepl を使って斜め読みして大意を掴む程度なので日本語の記事を読むのとそんなに時間が取られるわけではないと思う。今日は次の記事を読んだ。
Why Google Employees Don’t Work プログラミングにおける生産性とはどういうものかを説明しつつ、google の ceo がいう生産性が十分ではないという発言の真意は、従業員が業務時間にさぼっているとか怠慢だとかいう意味ではなく、google のビジネス全体がこれまで達成してきたのと同じ業務時間では期待した成果を達成できなくなってきているのではないかと考察している。
At some point, productivity measurement becomes Schrödinger’s cat.
また著者の引用？では生産性の計測とはシュレディンガーの猫のようなものだという話題もおもしろい。どんな会社もある時点での生産性の測定はシュレディンガーの猫のようなものになる。セグメントを分割し過ぎると返ってストレスとなり、余計な混乱を招き、計測そのものが生産性を低下させる。生産性の測定はマクロレベルでやるのが理に適っていて、工場時代のマネジメントをもつ amazon は大量の人員削減をしつつも成し遂げた。google のようなワークカルチャーをもつ会社ならその気になればスマートにできるだろう。一方で google という会社はすでにリベラルな極みにある企業文化をもっているため、生産性を測るような試みは組織全体に大きな感情的ダメージを与えるだろう。その結果として amazon と同じような道を歩むのではないかと。</description><content>&lt;p>0時に寝て7時に起きた。直近は日曜日はだらだらしてたんだけど、すんなり起きれた。&lt;/p>
&lt;h2 id="お仕事探し">お仕事探し&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0909/#カジュアル面談">offers さんのカジュアル面談&lt;/a> の雰囲気から企業に直接応募するプラットフォームの方が、私の経歴や実績の詳細を確認しやすいので面談に進みやすいのではないかとみている。そこで &lt;a href="https://findy-code.io/">findy&lt;/a> と &lt;a href="https://lapras.com/person">lapras&lt;/a> のプロフィールを作成してみた。これまで oss 活動やブログなどでアウトプットしていた資産がたくさんあるのでレベルはしょぼいにも関わらず、これらのプラットフォーム上ではそこそこよい数値がアルゴリズム的には算出される。プラットフォーム側としては転職やエンゲージメントを高めたいという意図があるから、ゴーストアカウントのようなものも含めて算出すると普通の人は高めの数字が算出されるのではないかと推測する。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">やってみた / 【スキル偏差値v2の診断結果】&lt;br>&lt;br>エンジニア向けスキル偏差値の診断結果は、Total 81.0、Python 81.0、HTML 80.0、Java 78.0でした。あなたもスキル偏差値をチェックしよう！ &lt;a href="https://t.co/4E4ibyevz0">https://t.co/4E4ibyevz0&lt;/a> &lt;a href="https://twitter.com/hashtag/findy?src=hash&amp;amp;ref_src=twsrc%5Etfw">#findy&lt;/a> &lt;a href="https://twitter.com/hashtag/%E3%82%B9%E3%82%AD%E3%83%AB%E5%81%8F%E5%B7%AE%E5%80%A4v2?src=hash&amp;amp;ref_src=twsrc%5Etfw">#スキル偏差値v2&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1568809397673152512?ref_src=twsrc%5Etfw">September 11, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>findy さんのスキル偏差値によると、想定年収予測は1060-1160万円らしい。この数値は起業する前のサラリーマン時代の年収に近いのでそんなにずれてはいない。&lt;a href="https://lapras.com/public/t2y">lapras さんの公開プロフィール&lt;/a> によると、技術力が4.01で約170万人中668位だというのは上位 0.04% に属することになってしまう。んな、あほなという思いはある。とはいえ、自己申告の経歴をいくらでも盛れる職務経歴書よりも、客観的なアルゴリズムで評価できる指標の方が絶対値が適切かは置いておいても、相対評価において他の候補者と比較できるのを好む採用担当者もいるだろう。&lt;a href="/diary/diary/posts/2022/0811/##リモートワーク前提のお仕事">匿名の一般的な職務経歴書を用いる remogu さんの選考&lt;/a> は書類選考でばんばん落ちまくる。それに比べたら、アルゴリズムで相対的によい数値が出ているプラットフォームの方が面談に進みやすいのではないかという話し。本当にそうかどうかの仮説はこれから検証する。&lt;/p>
&lt;h2 id="google-の従業員が働いていないという発言の真意">google の従業員が働いていないという発言の真意&lt;/h2>
&lt;p>昨日たまたま medium のダイジェストでみかけた記事を読んだらおもしろかったので、なるべく余裕のある日は medium の記事を1つ読むようにしてみようかと思う。言うても deepl を使って斜め読みして大意を掴む程度なので日本語の記事を読むのとそんなに時間が取られるわけではないと思う。今日は次の記事を読んだ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://levelup.gitconnected.com/why-google-employees-dont-work-f6a7521a6ed6">Why Google Employees Don’t Work&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>プログラミングにおける生産性とはどういうものかを説明しつつ、google の ceo がいう生産性が十分ではないという発言の真意は、従業員が業務時間にさぼっているとか怠慢だとかいう意味ではなく、google のビジネス全体がこれまで達成してきたのと同じ業務時間では期待した成果を達成できなくなってきているのではないかと考察している。&lt;/p>
&lt;blockquote>
&lt;p>At some point, productivity measurement becomes Schrödinger’s cat.&lt;/p>
&lt;/blockquote>
&lt;p>また著者の引用？では生産性の計測とはシュレディンガーの猫のようなものだという話題もおもしろい。どんな会社もある時点での生産性の測定はシュレディンガーの猫のようなものになる。セグメントを分割し過ぎると返ってストレスとなり、余計な混乱を招き、計測そのものが生産性を低下させる。生産性の測定はマクロレベルでやるのが理に適っていて、工場時代のマネジメントをもつ amazon は大量の人員削減をしつつも成し遂げた。google のようなワークカルチャーをもつ会社ならその気になればスマートにできるだろう。一方で google という会社はすでにリベラルな極みにある企業文化をもっているため、生産性を測るような試みは組織全体に大きな感情的ダメージを与えるだろう。その結果として amazon と同じような道を歩むのではないかと。&lt;/p>
&lt;p>シュレディンガーの猫がどういう意味かもわからなくてそれも読んでた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://nazology.net/archives/107875">「シュレーディンガーの猫」って結局どういう話なの？モヤモヤする部分を解説！&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>キャリアは知識と経験の差分でわかる</title><link>/diary/posts/2022/0910/</link><pubDate>Sat, 10 Sep 2022 11:36:32 +0900</pubDate><guid>/diary/posts/2022/0910/</guid><description>23時に寝て2時に起きてその後どうしていたかあまり覚えていないが気付いたら8時だった。
ストレッチ 今日の開脚幅は開始前160cmで、ストレッチ後163cmだった。今週も全然ストレッチできなかったのになぜか数値はよくなっていた。ストレッチを受けていて調子の悪さも感じなかったので気候が過ごしやすくなってきて体調がよくなった結果として普段の生活における活動量や新陳代謝などにも影響を与えているのかもしれない。トレーナーさんからは涼しくなったのだから運動をしてくださいと言われた。ほんとその通り。
知識と経験 You’re Not a Senior Software Engineer たまたま目を通した medium のおすすめ記事に出ていて、タイトルにひかれて斜め読みしたらおもしろかったので後で deepl を使って精読した。最近は英語の記事を deepl で訳して読んでいる。まず deepl で全訳した後に文脈から訳文の意味をとれなかったり、明らかにおかしいところだけを手直しする。著作権的に機械翻訳を公開はできないため、その翻訳内容は課題管理システムのイシューで管理している。この記事だと手直し数回ぐらいで大意を読める。普段、英語の記事を日本語アカウントで紹介することはないんだけど、これは素晴らしい内容だったのでそのまま共有することにした。軽く所感も書いてあるが、課題管理システムのイシューにはさらに詳細な分析やコメントも残している。
知識とはやり方を知っていることで、経験とはやってはいけないことを知っていること。素晴らしい記事だった。 / You’re Not a Senior Software Engineer by @repsofsunshine https://t.co/3qitFOFTJp
&amp;mdash; Tetsuya Morimoto (@t2y) September 10, 2022 多くの若いチームでは課題管理の重要性を理解していない。その無理解の原因の1つとして、ものごとを検討したり判断したりした時点では正しかったことが未来のある時点で誤りになってしまう可能性を想像できないからだと私は考えている。記憶と忘却の仕組みから前日のことですら半分以上忘れてしまうので数ヶ月前の詳細など、ほとんどの人は覚えていない。にも関わらず、日々の小さい判断の積み重ねや意思決定の履歴を記録として残さないのはなぜだろうか？それはその詳細があとで重要になるかどうか、多くのケースでその発生時点ではわからないからだ。例えば、システムのアーキテクチャに関して言えば Architectural Decision Records (ADRs) というドキュメントが提唱されている。アーキテクチャのような大きなものでさえ、明示的に残さないと経緯がわからなくなるのに、もっと小さい粒度である日々の開発や運用の誤りを、一般の (普通の) 開発者がその発生時点から数ヶ月や数年経ってふりかえって見直すことができるだろうか？いやできないというのが、多くのチームやメンバーをみてきた私の所感だ。多くのメンバーは過去のある時点の見逃しや判断ミスをなかったことにしようとする。それは無意識にしろ意識的にしろ起きやすい。客観的に詳細を確認できればなかったことになってしまうのは仕方のないことでもある。
私は課題管理システムのコメントに、こういう状況からこう判断したとか、誰それと相談してこういう事情でそうしたとか、自身の感覚からとくに意味もなく決めたとか、常々なぜに相当する内容を残している。そして、あるとき過去の経緯を見返して、そのときの判断は適切だったか、過去のある時点で気付けたはずのことを見逃してなかったか、見逃していたとすればどうすればその時に気付きを得られたか、というふりかえりを日常的なチケット整理の一環として実践している。件の medium の記事にはなぜそれが重要なのかの概念を書いてあるように私には受け取れた。課題管理 + 情報共有の需要な概念の1つだと認識して寝かせておこうと思う。</description><content>&lt;p>23時に寝て2時に起きてその後どうしていたかあまり覚えていないが気付いたら8時だった。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前160cmで、ストレッチ後163cmだった。今週も全然ストレッチできなかったのになぜか数値はよくなっていた。ストレッチを受けていて調子の悪さも感じなかったので気候が過ごしやすくなってきて体調がよくなった結果として普段の生活における活動量や新陳代謝などにも影響を与えているのかもしれない。トレーナーさんからは涼しくなったのだから運動をしてくださいと言われた。ほんとその通り。&lt;/p>
&lt;h2 id="知識と経験">知識と経験&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/vanguards-of-code/youre-not-a-senior-software-engineer-9056ef9ffb96">You’re Not a Senior Software Engineer&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>たまたま目を通した medium のおすすめ記事に出ていて、タイトルにひかれて斜め読みしたらおもしろかったので後で deepl を使って精読した。最近は英語の記事を deepl で訳して読んでいる。まず deepl で全訳した後に文脈から訳文の意味をとれなかったり、明らかにおかしいところだけを手直しする。著作権的に機械翻訳を公開はできないため、その翻訳内容は課題管理システムのイシューで管理している。この記事だと手直し数回ぐらいで大意を読める。普段、英語の記事を日本語アカウントで紹介することはないんだけど、これは素晴らしい内容だったのでそのまま共有することにした。軽く所感も書いてあるが、課題管理システムのイシューにはさらに詳細な分析やコメントも残している。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">知識とはやり方を知っていることで、経験とはやってはいけないことを知っていること。素晴らしい記事だった。 / You’re Not a Senior Software Engineer by &lt;a href="https://twitter.com/repsofsunshine?ref_src=twsrc%5Etfw">@repsofsunshine&lt;/a> &lt;a href="https://t.co/3qitFOFTJp">https://t.co/3qitFOFTJp&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1568471581961388034?ref_src=twsrc%5Etfw">September 10, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>多くの若いチームでは課題管理の重要性を理解していない。その無理解の原因の1つとして、ものごとを検討したり判断したりした時点では正しかったことが未来のある時点で誤りになってしまう可能性を想像できないからだと私は考えている。記憶と忘却の仕組みから前日のことですら半分以上忘れてしまうので数ヶ月前の詳細など、ほとんどの人は覚えていない。にも関わらず、日々の小さい判断の積み重ねや意思決定の履歴を記録として残さないのはなぜだろうか？それはその詳細があとで重要になるかどうか、多くのケースでその発生時点ではわからないからだ。例えば、システムのアーキテクチャに関して言えば &lt;a href="https://adr.github.io/">Architectural Decision Records (ADRs)&lt;/a> というドキュメントが提唱されている。アーキテクチャのような大きなものでさえ、明示的に残さないと経緯がわからなくなるのに、もっと小さい粒度である日々の開発や運用の誤りを、一般の (普通の) 開発者がその発生時点から数ヶ月や数年経ってふりかえって見直すことができるだろうか？いやできないというのが、多くのチームやメンバーをみてきた私の所感だ。多くのメンバーは過去のある時点の見逃しや判断ミスをなかったことにしようとする。それは無意識にしろ意識的にしろ起きやすい。客観的に詳細を確認できればなかったことになってしまうのは仕方のないことでもある。&lt;/p>
&lt;p>私は課題管理システムのコメントに、こういう状況からこう判断したとか、誰それと相談してこういう事情でそうしたとか、自身の感覚からとくに意味もなく決めたとか、常々なぜに相当する内容を残している。そして、あるとき過去の経緯を見返して、そのときの判断は適切だったか、過去のある時点で気付けたはずのことを見逃してなかったか、見逃していたとすればどうすればその時に気付きを得られたか、というふりかえりを日常的なチケット整理の一環として実践している。件の medium の記事にはなぜそれが重要なのかの概念を書いてあるように私には受け取れた。課題管理 + 情報共有の需要な概念の1つだと認識して寝かせておこうと思う。&lt;/p></content></item><item><title>若い会社とのエンゲージメントを図る</title><link>/diary/posts/2022/0909/</link><pubDate>Fri, 09 Sep 2022 06:53:43 +0900</pubDate><guid>/diary/posts/2022/0909/</guid><description>23時に寝て5時だと思って3時に起きてそのまま家事をやって5時から働いてた。早起きすると暇つぶしのように溜まっているタスクをこなし始めるので早起きは三文の得というのは本当だ。非稼働日だけど、午前中に次のタスクの要件のヒアリングだけやっといて、月曜日の朝一から作業できるように調整しておこうと考えたが、今日は開発リーダーが休みだったので何もしなかった。
カジュアル面談 Offers というサービス でみつけた会社にカジュアル面談を申し込んでいた。エンジニアリングマネージャーを業務委託で募集しているのは珍しかったのでその背景などを聞いてた。面談してくれた方はテックリードと言っていたが、この人も副業で手伝っているらしい。雰囲気的に若い会社のようで正社員はほとんどいなくてチームのメンバーが10人ぐらいのうち正社員が1-2名だという。基本的に外部の寄せ集めメンバーがそれぞれ副業や業務委託で空き時間を使って開発しているといった話らしい。8時間/週といった契約のメンバーもいるとのこと。どんな人を採用するにしてもまず業務委託から始めるというのがその会社の方針らしい。信頼関係という視点からみると、このような経営者にとって都合がよい労使関係を嫌う人もいるのではないかと思う。一方で私は雇う側も働く側もお互いにマッチングしないときの不幸を防ぐには1-3ヶ月ぐらい働いてからお互いに望むときに採用するといったやり方の方がよいと考えている。実際にマッチングしない人の場合は1週間で見切りをつけるとかあるらしい。私自身、初めてお手伝いする会社は最初の3ヶ月とかは1ヶ月契約でも構わないと伝えることがよくある。その後、お互いにマッチングするなら3-6ヶ月の契約期間に延長したいと交渉する。20年働いてきて、過去に試用期間で解雇されたことや1ヶ月で即解約になったことはないので一定の自信もある。
テックリードが若かったので組織もチームもメンバーも若いのだろうという印象を受けた。業務的にはお互いにマッチングしているように私からは思えた。あとは単純にテックリードが話してみた感覚や相性で私のようなベテランを求めているかどうかで次の選考の有無が決まるのではないかと推測する。次があったら正社員の人とも話してみたい。</description><content>&lt;p>23時に寝て5時だと思って3時に起きてそのまま家事をやって5時から働いてた。早起きすると暇つぶしのように溜まっているタスクをこなし始めるので早起きは三文の得というのは本当だ。非稼働日だけど、午前中に次のタスクの要件のヒアリングだけやっといて、月曜日の朝一から作業できるように調整しておこうと考えたが、今日は開発リーダーが休みだったので何もしなかった。&lt;/p>
&lt;h2 id="カジュアル面談">カジュアル面談&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0901/#次のお仕事探し">Offers というサービス&lt;/a> でみつけた会社にカジュアル面談を申し込んでいた。エンジニアリングマネージャーを業務委託で募集しているのは珍しかったのでその背景などを聞いてた。面談してくれた方はテックリードと言っていたが、この人も副業で手伝っているらしい。雰囲気的に若い会社のようで正社員はほとんどいなくてチームのメンバーが10人ぐらいのうち正社員が1-2名だという。基本的に外部の寄せ集めメンバーがそれぞれ副業や業務委託で空き時間を使って開発しているといった話らしい。8時間/週といった契約のメンバーもいるとのこと。どんな人を採用するにしてもまず業務委託から始めるというのがその会社の方針らしい。信頼関係という視点からみると、このような経営者にとって都合がよい労使関係を嫌う人もいるのではないかと思う。一方で私は雇う側も働く側もお互いにマッチングしないときの不幸を防ぐには1-3ヶ月ぐらい働いてからお互いに望むときに採用するといったやり方の方がよいと考えている。実際にマッチングしない人の場合は1週間で見切りをつけるとかあるらしい。私自身、初めてお手伝いする会社は最初の3ヶ月とかは1ヶ月契約でも構わないと伝えることがよくある。その後、お互いにマッチングするなら3-6ヶ月の契約期間に延長したいと交渉する。20年働いてきて、過去に試用期間で解雇されたことや1ヶ月で即解約になったことはないので一定の自信もある。&lt;/p>
&lt;p>テックリードが若かったので組織もチームもメンバーも若いのだろうという印象を受けた。業務的にはお互いにマッチングしているように私からは思えた。あとは単純にテックリードが話してみた感覚や相性で私のようなベテランを求めているかどうかで次の選考の有無が決まるのではないかと推測する。次があったら正社員の人とも話してみたい。&lt;/p></content></item><item><title>v-data-table のカラムのソートがよくわからない</title><link>/diary/posts/2022/0908/</link><pubDate>Thu, 08 Sep 2022 19:00:19 +0900</pubDate><guid>/diary/posts/2022/0908/</guid><description>23時に寝て3時に起きて軽く apple イベントをみて寝て6時に起きた。
画面周りのリファクタリング 週明けに私が作った画面が本番環境にリリースされて運用を経てフィードバックが返ってきた。主には使い勝手の改善や要望だけど、何にしても実際に使ってもらってフォードバックがくるのは楽しい。丸1日リファクタリングしていて要望があったものはすべて改善できた。インフラ・バッチ処理、サーバーサイド、フロントエンドのすべてを担当しているから私が関わっているところなら適材適所にリファクタリングできる。システム全体を通してやりたいことを独力でできると楽しい。これは人間の独占欲や支配欲を刺激する。おそらくマズローの欲求でも高次の欲求に属するのだと思う。
v-data-table の props headers でカラムの値に対してソートができる。ソート可能に設定すればあとは自動的にやってくれるのかと思いきや、自分で key function を実装しないとソートはされるけど正しい並び順にはならない。key functoin の返り値が number なので -1, 0, 1 の値でソートの入れ替えを実現しているようにみえる。javascript は true =&amp;gt; 1, false =&amp;gt; 0 と評価されるので単純な比較演算の結果からは意図したソートにならないからではないかと推測する。このやり方が正しい実装かはわからないけど、次のような key function を定義してあげることでソートを実行したときに意図した並び順になることを確認した。すべてのカラムにこんな実装書くの？というところに懸念はある。
{ value: &amp;#39;date&amp;#39;, sortable: true, sort: (x: Date, y: Date) =&amp;gt; { return x &amp;lt; y ? -1 : 1; }, },</description><content>&lt;p>23時に寝て3時に起きて軽く apple イベントをみて寝て6時に起きた。&lt;/p>
&lt;h2 id="画面周りのリファクタリング">画面周りのリファクタリング&lt;/h2>
&lt;p>週明けに私が作った画面が本番環境にリリースされて運用を経てフィードバックが返ってきた。主には使い勝手の改善や要望だけど、何にしても実際に使ってもらってフォードバックがくるのは楽しい。丸1日リファクタリングしていて要望があったものはすべて改善できた。インフラ・バッチ処理、サーバーサイド、フロントエンドのすべてを担当しているから私が関わっているところなら適材適所にリファクタリングできる。システム全体を通してやりたいことを独力でできると楽しい。これは人間の独占欲や支配欲を刺激する。おそらくマズローの欲求でも高次の欲求に属するのだと思う。&lt;/p>
&lt;p>v-data-table の &lt;a href="https://vuetifyjs.com/en/api/v-data-table/#props-headers">props headers&lt;/a> でカラムの値に対してソートができる。ソート可能に設定すればあとは自動的にやってくれるのかと思いきや、自分で key function を実装しないとソートはされるけど正しい並び順にはならない。key functoin の返り値が number なので -1, 0, 1 の値でソートの入れ替えを実現しているようにみえる。javascript は true =&amp;gt; 1, false =&amp;gt; 0 と評価されるので単純な比較演算の結果からは意図したソートにならないからではないかと推測する。このやり方が正しい実装かはわからないけど、次のような key function を定義してあげることでソートを実行したときに意図した並び順になることを確認した。すべてのカラムにこんな実装書くの？というところに懸念はある。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;date&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sortable&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sort&lt;/span>&lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#a6e22e">x&lt;/span>: &lt;span style="color:#66d9ef">Date&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span>: &lt;span style="color:#66d9ef">Date&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">1&lt;/span> : &lt;span style="color:#66d9ef">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>},
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>ドキュメントを書きながら思うこと</title><link>/diary/posts/2022/0907/</link><pubDate>Wed, 07 Sep 2022 08:15:06 +0900</pubDate><guid>/diary/posts/2022/0907/</guid><description>3時に寝て7時に起きた。眠れない。
github リポジトリとシステム間連携 社員さんが運用対応に忙しくてスプリントタスクがなくなって暇なのでドキュメントを書いてた。github に新規リポジトリを作成したときに行う初期設定の作業が増えてきた。大半は私が導入した仕組みや機能のための初期設定になるが、私はリポジトリの管理権限をもっていないので、社員さんにお願いして、この設定して、あの設定してとお願いして対応してきた。もうすぐ辞めるので引き継ぎできるようにやっていることのドキュメントを整理した。
slack 連携 backlog 連携 github pull requests テンプレート github actions github apps github environments リポジトリと他システムとの連携を効率化しようとすればするほど設定や背景が煩雑になる。とくに認証や権限周りのセキュリティを考慮した仕組みはサービスとのトレードオフになるので設定が面倒になりがちではある。とくに github actions のワークフローは 【登壇報告】JJUG CCC 2022 Spring で語りきれなかった技術的なお話 にあるように、世の中のプラクティスに依らず、私が設計して整備したものなので他メンバーにとって身近ではない。
backlog の wiki にプロジェクトのドキュメントを書いている。開発メンバーでドキュメントを定期的に書くのはほぼ私だけで、他メンバーはほとんど書かない。なぜそうなるのかな？と考えたときに思いつくことの1つとして、開発全般の業務としてやることを、誰でもできる汎用的な仕組みに落とし込むことを考慮して設計していないからではないかと思う。あるアプリケーションが内製／外部システム／外部ライブラリに関わらず、こういう機能や仕組みを使って、こんな課題を解決して、こんな機能を実現していますという構成にはなっていない。発生している問題に対して動けばいいといったレベルでしか開発していないから、本来どう在るべきなのか、どういった設計思想なのか、今後はどうやって保守していけばいいのかの指針を提供できない。これは私の言葉だと設計ができないということと同義だと思う。他に思いつくこととしては、既存アプリケーションにない新規の仕組みを定期的に設計しているのは私しかいないのかもしれない。言い換えれば、言われたことしかやらない人しかいない。</description><content>&lt;p>3時に寝て7時に起きた。眠れない。&lt;/p>
&lt;h2 id="github-リポジトリとシステム間連携">github リポジトリとシステム間連携&lt;/h2>
&lt;p>社員さんが運用対応に忙しくてスプリントタスクがなくなって暇なのでドキュメントを書いてた。github に新規リポジトリを作成したときに行う初期設定の作業が増えてきた。大半は私が導入した仕組みや機能のための初期設定になるが、私はリポジトリの管理権限をもっていないので、社員さんにお願いして、この設定して、あの設定してとお願いして対応してきた。もうすぐ辞めるので引き継ぎできるようにやっていることのドキュメントを整理した。&lt;/p>
&lt;ul>
&lt;li>slack 連携&lt;/li>
&lt;li>backlog 連携&lt;/li>
&lt;li>github
&lt;ul>
&lt;li>pull requests テンプレート&lt;/li>
&lt;li>github actions
&lt;ul>
&lt;li>github apps&lt;/li>
&lt;li>github environments&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>リポジトリと他システムとの連携を効率化しようとすればするほど設定や背景が煩雑になる。とくに認証や権限周りのセキュリティを考慮した仕組みはサービスとのトレードオフになるので設定が面倒になりがちではある。とくに github actions のワークフローは &lt;a href="https://note.com/hoshino_technote/n/n6afff42aeee0">【登壇報告】JJUG CCC 2022 Spring で語りきれなかった技術的なお話&lt;/a> にあるように、世の中のプラクティスに依らず、私が設計して整備したものなので他メンバーにとって身近ではない。&lt;/p>
&lt;p>backlog の wiki にプロジェクトのドキュメントを書いている。開発メンバーでドキュメントを定期的に書くのはほぼ私だけで、他メンバーはほとんど書かない。なぜそうなるのかな？と考えたときに思いつくことの1つとして、開発全般の業務としてやることを、誰でもできる汎用的な仕組みに落とし込むことを考慮して設計していないからではないかと思う。あるアプリケーションが内製／外部システム／外部ライブラリに関わらず、こういう機能や仕組みを使って、こんな課題を解決して、こんな機能を実現していますという構成にはなっていない。発生している問題に対して動けばいいといったレベルでしか開発していないから、本来どう在るべきなのか、どういった設計思想なのか、今後はどうやって保守していけばいいのかの指針を提供できない。これは私の言葉だと設計ができないということと同義だと思う。他に思いつくこととしては、既存アプリケーションにない新規の仕組みを定期的に設計しているのは私しかいないのかもしれない。言い換えれば、言われたことしかやらない人しかいない。&lt;/p></content></item><item><title>スクラムやっている人たちと雑談</title><link>/diary/posts/2022/0906/</link><pubDate>Tue, 06 Sep 2022 08:30:40 +0900</pubDate><guid>/diary/posts/2022/0906/</guid><description>0時に寝て7時に起きた。あまりよく眠れない。新しい施設のサービスインで社員さんは忙しそうなので画面のバグ修正をしたりレビューの検証をしたりしていた。
スクラムイベント Scrum Developers Night! Online #11 に参加した。過去にストーリーポイント運用がうまくいってないという話題を書いてきたけど、他の組織やチームだとうまくいっているのか、どんな感じなのかを聞いてみようという意図で参加した。他のスクラムやっている人たちの話しを聞いてみたかったんだけど、割とこっちのやり方や運用を聞かれるような展開になったのでこちら側の話しが主になってしまった。相談してわかったことなどをざっくりまとめる。
ストーリーポイント運用の方法自体は間違っていない ストーリーポイント運用とは別のところに課題があるようにみえる スプリントで決めたことをできないのは問題 1週間の見積もりすら合わないのだからそれ以上の期間の見積もりはあわないのは自明 プランニングやリファイメントなどでタスク分割や見積もりの精度をあげないといけない 大きな機能の見積もり後にタスクが増えるような精度が問題 スプリントがある週の実稼働時間を考慮して見積もりしていないのは問題 休みがあったり社内イベントがあったり実稼働時間によってベロシティはブレるはず 全体として総括すると、ストーリーポイント運用以前に、チームの問題が大きいのだろうと他の人たちと話していて実感した。スクラムの実践についての細かい改善点はあるものの、それ以上にチーム事情によるものや体制の問題の方が大きいということに気付いた。</description><content>&lt;p>0時に寝て7時に起きた。あまりよく眠れない。新しい施設のサービスインで社員さんは忙しそうなので画面のバグ修正をしたりレビューの検証をしたりしていた。&lt;/p>
&lt;h2 id="スクラムイベント">スクラムイベント&lt;/h2>
&lt;p>&lt;a href="https://smn.connpass.com/event/258253/">Scrum Developers Night! Online #11&lt;/a> に参加した。過去にストーリーポイント運用がうまくいってないという話題を書いてきたけど、他の組織やチームだとうまくいっているのか、どんな感じなのかを聞いてみようという意図で参加した。他のスクラムやっている人たちの話しを聞いてみたかったんだけど、割とこっちのやり方や運用を聞かれるような展開になったのでこちら側の話しが主になってしまった。相談してわかったことなどをざっくりまとめる。&lt;/p>
&lt;ul>
&lt;li>ストーリーポイント運用の方法自体は間違っていない
&lt;ul>
&lt;li>ストーリーポイント運用とは別のところに課題があるようにみえる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>スプリントで決めたことをできないのは問題
&lt;ul>
&lt;li>1週間の見積もりすら合わないのだからそれ以上の期間の見積もりはあわないのは自明&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>プランニングやリファイメントなどでタスク分割や見積もりの精度をあげないといけない
&lt;ul>
&lt;li>大きな機能の見積もり後にタスクが増えるような精度が問題&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>スプリントがある週の実稼働時間を考慮して見積もりしていないのは問題
&lt;ul>
&lt;li>休みがあったり社内イベントがあったり実稼働時間によってベロシティはブレるはず&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>全体として総括すると、ストーリーポイント運用以前に、チームの問題が大きいのだろうと他の人たちと話していて実感した。スクラムの実践についての細かい改善点はあるものの、それ以上にチーム事情によるものや体制の問題の方が大きいということに気付いた。&lt;/p></content></item><item><title>レンダリングの致命的なバグ</title><link>/diary/posts/2022/0905/</link><pubDate>Mon, 05 Sep 2022 13:10:09 +0900</pubDate><guid>/diary/posts/2022/0905/</guid><description>0時に寝て6時に起きた。
vuejs のライフサイクル 先日 vuejs で 画面作り に挑戦して出来たと喜んでいたが、検索して一覧画面のデータを更新した際に、フォームも再レンダリングされないといけないところがそうなっておらず、データは置き換わっているが画面に表示される値は変わっていないという致命的なバグがあることに気付いた。普通に開発していたら気付きそうなものだが、ローカルの dev server で動かしているとコードを更新すると再レンダリングが実行されるので検索後に画面の一覧が更新されないということを見逃したんだと思う。Lifecycle Diagram もみながら適切なフックポイントの振る舞いを確認したりしていた。setup 後、初期化されてその後に mounted が動いて、その後パラメーターが更新されたときに watch して再更新をかけるといった次のコードでも意図した振る舞いになることは確認した。
setup(props, context) { const data: { [key: string]: any } = {}; return { _data: ref(data), loading: false }; }, mounted() { this._data = JSON.parse(this.item.data); }, watch: { item(value: any) { this._data = JSON.parse(value.data); }, }, レビューしてもらったら、それよりもパラメーターをリアクティブにした方がよいのではないかと教えてもらって次のようにした。本当は setter は不要なんだけど、なぜか初期化のタイミングで setter が呼ばれるので設けた。私の作ったコンポーネントの設計が悪いせいかもしれない。
setup(props, context) { const _item = toRef(props, &amp;#39;item&amp;#39;); return { _item }; }, computed: { ￼ _data: { ￼ get(): { [key: string]: any } { ￼ return JSON.</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="vuejs-のライフサイクル">vuejs のライフサイクル&lt;/h2>
&lt;p>先日 vuejs で &lt;a href="/diary/diary/posts/2022/0831/#バッチ処理一覧と手動実行">画面作り&lt;/a> に挑戦して出来たと喜んでいたが、検索して一覧画面のデータを更新した際に、フォームも再レンダリングされないといけないところがそうなっておらず、データは置き換わっているが画面に表示される値は変わっていないという致命的なバグがあることに気付いた。普通に開発していたら気付きそうなものだが、ローカルの dev server で動かしているとコードを更新すると再レンダリングが実行されるので検索後に画面の一覧が更新されないということを見逃したんだと思う。&lt;a href="https://v2.vuejs.org/v2/guide/instance.html#Lifecycle-Diagram">Lifecycle Diagram&lt;/a> もみながら適切なフックポイントの振る舞いを確認したりしていた。setup 後、初期化されてその後に &lt;em>mounted&lt;/em> が動いて、その後パラメーターが更新されたときに watch して再更新をかけるといった次のコードでも意図した振る舞いになることは確認した。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setup&lt;/span>(&lt;span style="color:#a6e22e">props&lt;/span>, &lt;span style="color:#a6e22e">context&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { [&lt;span style="color:#a6e22e">key&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">any&lt;/span> } &lt;span style="color:#f92672">=&lt;/span> {};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> { &lt;span style="color:#a6e22e">_data&lt;/span>: &lt;span style="color:#66d9ef">ref&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>), &lt;span style="color:#a6e22e">loading&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mounted() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">_data&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">JSON&lt;/span>.&lt;span style="color:#a6e22e">parse&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">data&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">watch&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">item&lt;/span>(&lt;span style="color:#a6e22e">value&lt;/span>: &lt;span style="color:#66d9ef">any&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">_data&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">JSON&lt;/span>.&lt;span style="color:#a6e22e">parse&lt;/span>(&lt;span style="color:#a6e22e">value&lt;/span>.&lt;span style="color:#a6e22e">data&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>レビューしてもらったら、それよりもパラメーターをリアクティブにした方がよいのではないかと教えてもらって次のようにした。本当は setter は不要なんだけど、なぜか初期化のタイミングで setter が呼ばれるので設けた。私の作ったコンポーネントの設計が悪いせいかもしれない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setup&lt;/span>(&lt;span style="color:#a6e22e">props&lt;/span>, &lt;span style="color:#a6e22e">context&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">_item&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">toRef&lt;/span>(&lt;span style="color:#a6e22e">props&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;item&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> { &lt;span style="color:#a6e22e">_item&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">computed&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">￼&lt;/span> &lt;span style="color:#a6e22e">_data&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">￼&lt;/span> &lt;span style="color:#66d9ef">get&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> { [&lt;span style="color:#a6e22e">key&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">any&lt;/span> } {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">￼&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">JSON&lt;/span>.&lt;span style="color:#a6e22e">parse&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">_item&lt;/span>.&lt;span style="color:#a6e22e">data&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">￼&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">￼&lt;/span> &lt;span style="color:#66d9ef">set&lt;/span>(&lt;span style="color:#a6e22e">value&lt;/span>: &lt;span style="color:#66d9ef">any&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">￼&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">$emit&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;update:_data&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">￼&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これは vue2 の &lt;strong>Options API&lt;/strong> と呼ばれる記法で、vue3 だと &lt;strong>Composition API&lt;/strong> を使って次のような書き方ができるというのも教えてもらった。getter だけなら Composition API でもよさそうだけど、setter もあるとこのコードはまったく簡潔じゃないなと思って Options API を使うことにした。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setup&lt;/span>(&lt;span style="color:#a6e22e">props&lt;/span>, &lt;span style="color:#a6e22e">context&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">_item&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">toRef&lt;/span>(&lt;span style="color:#a6e22e">props&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;item&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">_data&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">computed&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span>&lt;span style="color:#f92672">:&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">JSON&lt;/span>.&lt;span style="color:#a6e22e">parse&lt;/span>(&lt;span style="color:#a6e22e">_item&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>.&lt;span style="color:#a6e22e">data&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">set&lt;/span>&lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#a6e22e">value&lt;/span>: &lt;span style="color:#66d9ef">any&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">$emit&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;update:_data&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> { &lt;span style="color:#a6e22e">_item&lt;/span>, &lt;span style="color:#a6e22e">_data&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>改革と革命</title><link>/diary/posts/2022/0904/</link><pubDate>Sun, 04 Sep 2022 13:09:07 +0900</pubDate><guid>/diary/posts/2022/0904/</guid><description>0時に寝て6時に起きた。たまたま見かけた記事から昔読んだ本を思い出した。
40代は改革と革命 たまたまタイムラインでこんな記事をみかけた。
30代のころは「改善」でいいと思うのです。30代のうちに仕事の基礎をガッチリ身につけ、40代以降は改革と革命に取り組む。私はいつも、40代以上の社員に「改善をするな」と言っているんですよ。
ニトリ会長が斎藤佑樹にアツく語る、「30代にするべきこと」「40代にやるべきこと」
私の生き方に近い考え方だったので印象に残った。私はもともと sier 出身なので働き始めた頃からマネージャー側にいた。たまたまトラブルプロジェクトに参加してひたむきに1年半ほど働き通したら大きな成果が出て、組織からプロジェクトマネージャーになることを嘱望されるようになってしまった。私はただの議事録係だったが、結果的に事実上のプロジェクトを仕切るようになった。それはそれで誇らしかったのはあるけど、それと同時にマネージャーはだいたい分かったという気持ちにもなった。そしてマネージャーの働き方は自分の意思ともあわなかったので潔く辞めた。おそらく自分がやったことのないことに挑戦するという生き方の基礎が最初の退職と同時に出来た。転職じゃなくて退職なのは辞めることを決めてから次のお仕事を探したから。閑話休題。30代のときにひたすらコードを読んで、ひたすらコードを書いてきた動機づけの1つとして、昔読んだ本の１つに リーダーの易経 がある。著者によると、易経とは時の変化の原理原則が書かれていて、時を読むための専門書と言えるらしい。時の第三段階として次の言葉がある。
君子終日乾乾 (けんけん) し、夕べに惕若 (てきじゃく) たり。厲 (あや) うけれども咎なし。
(要約) 朝から晩まで、繰り返し邁進して努力する。そして、夜、独りになったときに、1日を恐懼 (きょうく) して省みる。そのようであれば、危うい時ではあるが、咎めはない
「乾乾 (けんけん) す」とは高揚感、充実感をもって進む、「厲 (あや) うけれども咎なし。」とは省みることを怠らなければ、危うい立場ではあるが、大きな失敗はないという意味になるらしい。
自分の力、自分でないとできないことを創出するためには、なかったものを創り出すわけです。そのために必要なものは、毎日朝から晩まで同じことを繰り返すことです。継続は力なりというのは、この段階です。
同じことを繰り返すことが創出につながるというのはおもしろい話しで、同じことを繰り返すうちにちょっとしたミスや失敗が創意工夫や技を磨くきっかけになるという。失敗したで終わらせずに省みることで気付きを蓄積していくことがオリジナリティを育てる。乾乾 (けんけん) という言葉の響きを気に入ったのか、おそらく2007年頃に読んだ本なのに15年経ってもいまも記憶に残っているというのは人生において影響を受けたと言っていいだろう。
若い頃からマネージャーをやってくれという依頼を断り続けて、いま満を持して次のお仕事ではマネージャーをやろうと考えている。メンバーとして経験を得た上でマネージャーとして自分が何をできるかを確認したい。一方でマネージャーの仕事を未経験／業務委託で探すのがなかなか難しくて苦戦している。私には課題管理というたった1つの武器しかないが、それをマネージャーとしてどう活用できるのか。組織で働く人は言われたことをやる人が多い。私は課題管理を用いて然るべきことをやることに重きを置いている。課題管理で業務を改革や革命のレベルまで昇華できるかどうかを実践の場で確かめたい。</description><content>&lt;p>0時に寝て6時に起きた。たまたま見かけた記事から昔読んだ本を思い出した。&lt;/p>
&lt;h2 id="40代は改革と革命">40代は改革と革命&lt;/h2>
&lt;p>たまたまタイムラインでこんな記事をみかけた。&lt;/p>
&lt;blockquote>
&lt;p>30代のころは「改善」でいいと思うのです。30代のうちに仕事の基礎をガッチリ身につけ、40代以降は改革と革命に取り組む。私はいつも、40代以上の社員に「改善をするな」と言っているんですよ。&lt;/p>
&lt;p>&lt;a href="https://gendai.media/articles/-/99207?page=4">ニトリ会長が斎藤佑樹にアツく語る、「30代にするべきこと」「40代にやるべきこと」&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>私の生き方に近い考え方だったので印象に残った。私はもともと sier 出身なので働き始めた頃からマネージャー側にいた。たまたまトラブルプロジェクトに参加してひたむきに1年半ほど働き通したら大きな成果が出て、組織からプロジェクトマネージャーになることを嘱望されるようになってしまった。私はただの議事録係だったが、結果的に事実上のプロジェクトを仕切るようになった。それはそれで誇らしかったのはあるけど、それと同時にマネージャーはだいたい分かったという気持ちにもなった。そしてマネージャーの働き方は自分の意思ともあわなかったので潔く辞めた。おそらく自分がやったことのないことに挑戦するという生き方の基礎が最初の退職と同時に出来た。転職じゃなくて退職なのは辞めることを決めてから次のお仕事を探したから。閑話休題。30代のときにひたすらコードを読んで、ひたすらコードを書いてきた動機づけの1つとして、昔読んだ本の１つに &lt;a href="https://www.php.co.jp/books/detail.php?isbn=4-569-64499-6">リーダーの易経&lt;/a> がある。著者によると、易経とは時の変化の原理原則が書かれていて、時を読むための専門書と言えるらしい。時の第三段階として次の言葉がある。&lt;/p>
&lt;blockquote>
&lt;p>君子終日乾乾 (けんけん) し、夕べに惕若 (てきじゃく) たり。厲 (あや) うけれども咎なし。&lt;/p>
&lt;p>(要約)
朝から晩まで、繰り返し邁進して努力する。そして、夜、独りになったときに、1日を恐懼 (きょうく) して省みる。そのようであれば、危うい時ではあるが、咎めはない&lt;/p>
&lt;/blockquote>
&lt;p>「乾乾 (けんけん) す」とは高揚感、充実感をもって進む、「厲 (あや) うけれども咎なし。」とは省みることを怠らなければ、危うい立場ではあるが、大きな失敗はないという意味になるらしい。&lt;/p>
&lt;blockquote>
&lt;p>自分の力、自分でないとできないことを創出するためには、なかったものを創り出すわけです。そのために必要なものは、毎日朝から晩まで同じことを繰り返すことです。継続は力なりというのは、この段階です。&lt;/p>
&lt;/blockquote>
&lt;p>同じことを繰り返すことが創出につながるというのはおもしろい話しで、同じことを繰り返すうちにちょっとしたミスや失敗が創意工夫や技を磨くきっかけになるという。失敗したで終わらせずに省みることで気付きを蓄積していくことがオリジナリティを育てる。&lt;em>乾乾 (けんけん)&lt;/em> という言葉の響きを気に入ったのか、おそらく2007年頃に読んだ本なのに15年経ってもいまも記憶に残っているというのは人生において影響を受けたと言っていいだろう。&lt;/p>
&lt;p>若い頃からマネージャーをやってくれという依頼を断り続けて、いま満を持して次のお仕事ではマネージャーをやろうと考えている。メンバーとして経験を得た上でマネージャーとして自分が何をできるかを確認したい。一方でマネージャーの仕事を未経験／業務委託で探すのがなかなか難しくて苦戦している。私には課題管理というたった1つの武器しかないが、それをマネージャーとしてどう活用できるのか。組織で働く人は言われたことをやる人が多い。私は課題管理を用いて然るべきことをやることに重きを置いている。課題管理で業務を改革や革命のレベルまで昇華できるかどうかを実践の場で確かめたい。&lt;/p></content></item><item><title>夏バテは解消しつつある</title><link>/diary/posts/2022/0903/</link><pubDate>Sat, 03 Sep 2022 09:44:22 +0900</pubDate><guid>/diary/posts/2022/0903/</guid><description>1時に寝て7時に起きた。開発の作業しようかと思っていたけど、なんか気分が乗らなくて本を読んでただけだった。
ストレッチ 今日の開脚幅は開始前158cmで、ストレッチ後162cmだった。まずまずの数値でストレッチを受けていても調子がよかった。気温が下がって暑さが和らいできて体調もよくなってきた感じがある。以前から姿勢があまりよくないといったアドバイスを受けていて、前側の筋肉に比べて後側の方が相対的に強いから後側の筋肉を多用しようとして腰に負担がきているといった話しがある。姿勢を保つときに腹筋を使うように意識した方がよいといったアドバイスをトレーナーさんからもらった。
正史 諸葛亮孔明 「第四章 赤壁の戦い」を読んだ。
孔明が軍事の指揮をとるのは劉備の死後になるので、劉備の生前に起こった赤壁の戦いで伝えられる孔明の逸話は基本的にすべて嘘になる。演義では十万本の矢、東南の風、龐統による連環の計までもが創作らしい。赤壁の戦いの功労者は呉の都督だった周瑜の戦略によるもので戦う前から結果がみえていた。周瑜が用意周到に準備した戦略通りに魏軍がはまり、そこに周瑜の部下である黄蓋が提案した火計が成功をおさめたという。これはこれでおもしろくて戦いとはその前の準備の段階で決着がついているという見方ができる。周瑜は都督で全体の戦略を描くものの、実際の戦場における戦術は積極的に部下に任せるというスタンスをとっていた。また実際にはこれは大きな戦ではなく、小競り合いと決定打だとなった火計はあったものの、魏軍で流行した疫病による撤退というのが史実だと言えるらしい。演義における赤壁の戦いが大創作になっている背景として、三国志演義が編纂された時代 (実際の赤壁の戦いから千年後) にあった 鄱陽湖の戦い がモデルになっているのではないか。また孔明の神算鬼謀も朱元璋に仕えた 劉基 からきているのではないかという話しでもあるらしい。</description><content>&lt;p>1時に寝て7時に起きた。開発の作業しようかと思っていたけど、なんか気分が乗らなくて本を読んでただけだった。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前158cmで、ストレッチ後162cmだった。まずまずの数値でストレッチを受けていても調子がよかった。気温が下がって暑さが和らいできて体調もよくなってきた感じがある。以前から姿勢があまりよくないといったアドバイスを受けていて、前側の筋肉に比べて後側の方が相対的に強いから後側の筋肉を多用しようとして腰に負担がきているといった話しがある。姿勢を保つときに腹筋を使うように意識した方がよいといったアドバイスをトレーナーさんからもらった。&lt;/p>
&lt;h2 id="正史-諸葛亮孔明">正史 諸葛亮孔明&lt;/h2>
&lt;p>「第四章 赤壁の戦い」を読んだ。&lt;/p>
&lt;p>孔明が軍事の指揮をとるのは劉備の死後になるので、劉備の生前に起こった赤壁の戦いで伝えられる孔明の逸話は基本的にすべて嘘になる。演義では十万本の矢、東南の風、龐統による連環の計までもが創作らしい。赤壁の戦いの功労者は呉の都督だった周瑜の戦略によるもので戦う前から結果がみえていた。周瑜が用意周到に準備した戦略通りに魏軍がはまり、そこに周瑜の部下である黄蓋が提案した火計が成功をおさめたという。これはこれでおもしろくて戦いとはその前の準備の段階で決着がついているという見方ができる。周瑜は都督で全体の戦略を描くものの、実際の戦場における戦術は積極的に部下に任せるというスタンスをとっていた。また実際にはこれは大きな戦ではなく、小競り合いと決定打だとなった火計はあったものの、魏軍で流行した疫病による撤退というのが史実だと言えるらしい。演義における赤壁の戦いが大創作になっている背景として、三国志演義が編纂された時代 (実際の赤壁の戦いから千年後) にあった &lt;a href="https://ja.wikipedia.org/wiki/%E9%84%B1%E9%99%BD%E6%B9%96%E3%81%AE%E6%88%A6%E3%81%84">鄱陽湖の戦い&lt;/a> がモデルになっているのではないか。また孔明の神算鬼謀も朱元璋に仕えた &lt;a href="https://ja.wikipedia.org/wiki/%E5%8A%89%E5%9F%BA">劉基&lt;/a> からきているのではないかという話しでもあるらしい。&lt;/p></content></item><item><title>非稼働日のお仕事探し</title><link>/diary/posts/2022/0902/</link><pubDate>Fri, 02 Sep 2022 08:49:10 +0900</pubDate><guid>/diary/posts/2022/0902/</guid><description>0時に寝て3時に起きて2時間だらだらしていて6時に寝て7時半に起きた。ここ1週間ほどこういう寝方が続く。
運用対応の続き 昨日からまだトラブルが続いているらしく運用対応がてんやわんやになっている。私は本番環境のログもデータもみれないから社員さんから伝え聞く分しか状況がわからない。そのため、現状の運用でうまくいっているのかと思ってたら、たまたま他の要因が重なって発生しているのかもしれないけど、大きな障害に発展しているのかもしれない。従来の正しいと思われていた運用ツールにも誤りがあったらしく、これまでの運用は正しかったんやろか？という懸念も出てきた。スクラムマスターからも、既知の課題を放置してトラブルが常態化して運用対応に工数を割いて他の仕事ができなくなっているのではないか、仮説の検証をちゃんとやってないんじゃないかとかツッコミが入ってた。PO が未熟と言ってしまえばそうなのだけど、スクラムの悪いところは問題が起こっても責任の所在を曖昧に終わらせることがうちのチームでは多々ある。責任の所在をちゃんとふりかえらないと、再発防止やその対応に誰も責任をもたないという状況が発生する。今回のふりかえりがどうなるのかは来週にならないとわからない。ちゃんと反省してチームとしてふりかえりできるかどうかも観察してみようと思う。
次のお仕事探し 以前から勝手に私が応援している地元の会社の求人情報をみかけた。それは正社員しか募集していないのだけど、ダメ元で業務委託を雇っていないか問い合わせてみるかを迷っていた。そこで地元のコミュニティの知人が、地元の会社の中の人を知っていると話していたことを思い出して、その知人に業務委託で雇っているかどうかを試しに聞いてもらえるかを尋ねた。快く聞いてくれて、直接つながって問い合わせてくれて本当にありがたい。そしたら業務委託は採用していないらしいのだけど、一応は経歴はみるかも？といった返事だった。じゃあ、ダメ元で採用情報のページから応募しようかと考えていたら、その知人経由で経歴がわかるものがあったらそれでいいという話しになって linkedin と会社の事例紹介の url を転送してもらった。普通に応募するなら履歴書と職務経歴書をファイルで送らないといけない。仮に不採用になっても url を送るだけの手間しかかかっていない。わずか1時間ほどのやり取り。そう思うと人材求人プラットフォームに登録して、定型的な資料を用意して、手続きをとって、先方からの返信を待つといったワークフローはなんと無駄の多いことかとか考えたりしていた。</description><content>&lt;p>0時に寝て3時に起きて2時間だらだらしていて6時に寝て7時半に起きた。ここ1週間ほどこういう寝方が続く。&lt;/p>
&lt;h2 id="運用対応の続き">運用対応の続き&lt;/h2>
&lt;p>昨日からまだトラブルが続いているらしく運用対応がてんやわんやになっている。私は本番環境のログもデータもみれないから社員さんから伝え聞く分しか状況がわからない。そのため、現状の運用でうまくいっているのかと思ってたら、たまたま他の要因が重なって発生しているのかもしれないけど、大きな障害に発展しているのかもしれない。従来の正しいと思われていた運用ツールにも誤りがあったらしく、これまでの運用は正しかったんやろか？という懸念も出てきた。スクラムマスターからも、既知の課題を放置してトラブルが常態化して運用対応に工数を割いて他の仕事ができなくなっているのではないか、仮説の検証をちゃんとやってないんじゃないかとかツッコミが入ってた。PO が未熟と言ってしまえばそうなのだけど、スクラムの悪いところは問題が起こっても責任の所在を曖昧に終わらせることがうちのチームでは多々ある。責任の所在をちゃんとふりかえらないと、再発防止やその対応に誰も責任をもたないという状況が発生する。今回のふりかえりがどうなるのかは来週にならないとわからない。ちゃんと反省してチームとしてふりかえりできるかどうかも観察してみようと思う。&lt;/p>
&lt;h2 id="次のお仕事探し">次のお仕事探し&lt;/h2>
&lt;p>以前から勝手に私が応援している地元の会社の求人情報をみかけた。それは正社員しか募集していないのだけど、ダメ元で業務委託を雇っていないか問い合わせてみるかを迷っていた。そこで地元のコミュニティの知人が、地元の会社の中の人を知っていると話していたことを思い出して、その知人に業務委託で雇っているかどうかを試しに聞いてもらえるかを尋ねた。快く聞いてくれて、直接つながって問い合わせてくれて本当にありがたい。そしたら業務委託は採用していないらしいのだけど、一応は経歴はみるかも？といった返事だった。じゃあ、ダメ元で採用情報のページから応募しようかと考えていたら、その知人経由で経歴がわかるものがあったらそれでいいという話しになって linkedin と会社の事例紹介の url を転送してもらった。普通に応募するなら履歴書と職務経歴書をファイルで送らないといけない。仮に不採用になっても url を送るだけの手間しかかかっていない。わずか1時間ほどのやり取り。そう思うと人材求人プラットフォームに登録して、定型的な資料を用意して、手続きをとって、先方からの返信を待つといったワークフローはなんと無駄の多いことかとか考えたりしていた。&lt;/p></content></item><item><title>遊休の日々</title><link>/diary/posts/2022/0901/</link><pubDate>Thu, 01 Sep 2022 08:38:43 +0900</pubDate><guid>/diary/posts/2022/0901/</guid><description>0時に寝て4時に起きた。5時からドラクエタクトしてた。
運用対応と遊休 今日も本番環境でトラブルがあったらしく、その対応で開発リーダーが忙しくて、お昼にあるチケットの仕様を決める小さい打ち合わせ (15分程度) を経て対応しようと思っていたのに、最終的にそれができたのは19時半になった。当然、実作業もやってない。昼間の3時間を休憩時間として別のお仕事をしていた。9月から新たにフロントエンド開発者が入って、チームの開発者が7人になって開発者が遊休する状態に拍車がかかった。本当はチームを分割すればいいけど、チーム事情でできず混乱している状態。権限委譲もできてないのでチームを任せられる開発者が他にいないのだと思う。人を教育せずに人数だけ採用して開発チームを拡充してきたのが垣間見える。古いプラットフォームの仕様を知っている人が1人しかいないといった状況は大変そう。そういう開発や組織を是としてきた先駆者の責任でもある。そんな組織の開発者が外部でいいことばかりを言っているのをみると、よい開発者が入ってきても騙されたと思って定着しないのではないかと思う。私がみえる範囲でもよい開発者がいないので組織における開発リーダーの重要性を実感する。
次のお仕事探し たまたま求人検索していて Offers「オファーズ」 - エンジニア・デザイナーのための副業・複業・転職サービス というサービスをみつけた。ちょっと前に求人プラットフォームを開発していたのでいくつかの求人サイトに登録して調査したりしていた。その中でもこのサイトは上位に入る優れた品質だと思う。一番嬉しいのが職務経歴を linkedin からインポートしてくれる。求人プラットフォームでもっとも嫌なことは、それぞれのサイトごとに職務経歴書を作らないといけないところ。プログラマー的に同じ作業を何度も繰り返すことに苦痛を感じる。比較的新しいサイトなのでどういったものか、わかっていないけど、サイトの使い勝手がよかったので縁があれば面談もやってみようと思う。</description><content>&lt;p>0時に寝て4時に起きた。5時からドラクエタクトしてた。&lt;/p>
&lt;h2 id="運用対応と遊休">運用対応と遊休&lt;/h2>
&lt;p>今日も本番環境でトラブルがあったらしく、その対応で開発リーダーが忙しくて、お昼にあるチケットの仕様を決める小さい打ち合わせ (15分程度) を経て対応しようと思っていたのに、最終的にそれができたのは19時半になった。当然、実作業もやってない。昼間の3時間を休憩時間として別のお仕事をしていた。9月から新たにフロントエンド開発者が入って、チームの開発者が7人になって開発者が遊休する状態に拍車がかかった。本当はチームを分割すればいいけど、チーム事情でできず混乱している状態。権限委譲もできてないのでチームを任せられる開発者が他にいないのだと思う。人を教育せずに人数だけ採用して開発チームを拡充してきたのが垣間見える。古いプラットフォームの仕様を知っている人が1人しかいないといった状況は大変そう。そういう開発や組織を是としてきた先駆者の責任でもある。そんな組織の開発者が外部でいいことばかりを言っているのをみると、よい開発者が入ってきても騙されたと思って定着しないのではないかと思う。私がみえる範囲でもよい開発者がいないので組織における開発リーダーの重要性を実感する。&lt;/p>
&lt;h2 id="次のお仕事探し">次のお仕事探し&lt;/h2>
&lt;p>たまたま求人検索していて &lt;a href="https://offers.jp/lp">Offers「オファーズ」 - エンジニア・デザイナーのための副業・複業・転職サービス&lt;/a> というサービスをみつけた。ちょっと前に求人プラットフォームを開発していたのでいくつかの求人サイトに登録して調査したりしていた。その中でもこのサイトは上位に入る優れた品質だと思う。一番嬉しいのが職務経歴を linkedin からインポートしてくれる。求人プラットフォームでもっとも嫌なことは、それぞれのサイトごとに職務経歴書を作らないといけないところ。プログラマー的に同じ作業を何度も繰り返すことに苦痛を感じる。比較的新しいサイトなのでどういったものか、わかっていないけど、サイトの使い勝手がよかったので縁があれば面談もやってみようと思う。&lt;/p></content></item></channel></rss>