<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2022/06 on forest nook</title><link>/diary/dates/2022/06/</link><description>Recent content in 2022/06 on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/dates/2022/06/index.xml" rel="self" type="application/rss+xml"/><item><title>法人税の修正申告</title><link>/diary/posts/2022/0626/</link><pubDate>Sun, 26 Jun 2022 10:51:10 +0900</pubDate><guid>/diary/posts/2022/0626/</guid><description>1時に寝て7時に起きた。
源泉所得税の納付 ちょうど給料日を過ぎたので所得税徴収高計算書 (納期特例分) の申請を行った。これまでも e-tax で電子申請して振り込みしていたのだけれど、e-tax ソフト (web版) でブラウザから申請していた。今回は windows マシンにインストールされている e-tax ソフトから申請してみることにした。e-tax ソフトは起動時に「追加インストール」という機能があって、申請に必要なモジュールのみをダウンロードしてインストールできるようになっている。20年前で言うところの saas はこうだった。「源泉所得税関係」というモジュールをインストールしないと、所得税徴収高計算書の申請ができない (e-tax ソフトに帳票がインストールされない) 。モジュールを追加インストールすれば、「源泉所得税」という税目から「所得税徴収高計算書 (納期特例分) 」という帳票を選択して、あとは数字を記入して送信するだけ。この申請に電子署名は不要。
法人税の修正申告と欠損金の繰り戻し還付の訂正依頼 国税局の職員さんからの指摘 で提出した書類が誤っていることに気付いた。いくつか訂正箇所を書いておく。
欠損金額とは 正: 税引き後の欠損金額 = 別表1の1の数字をそのまま使えばよい 誤: 税引き前の所得 (税務上は負の所得を欠損金と呼ぶ) を使っていた 法人税と地方法人税の計算は別 欠損金の繰り戻し還付の申請は法人税のみの還付金を算出 ↑で求めた還付金に対して(令和元年以降は)10.3%を地方法人税の還付金とする この手続きは不要で別表一に算出した数字を記載すればよい まずこの申請書の誤りを修正して訂正依頼とする。
さらにこの欠損金の繰り戻し還付の申請の数字を別表1に記載しなければならない。それらが漏れているのと還付申請のためには別表七も提出しないといけない。あと細かい数字の記入漏れの指摘もあった。法人税の確定申告に対して次の5つの書類を修正申告として提出する。
別表一 別表一 次葉 別表四 別表五 (一) 別表七 (一) 税務署の職員さんが訂正する数字を書いてくれていたので、それをみながら e-tax ソフトで数字を修正して紙に印刷してそれを再提出する。おかげで赤字のときの別表書類の書き方もわかった。大半は欠損金の繰り返し還付に関する数字の記入漏れなので今後も赤字の年度があったときにこの内容を踏襲しながら申告すればよい。また1つ行政手続きのノウハウを得ることができた。税務署の職員さんに感謝。
企業サイトの更新 企業サイトを作成してから3年近く経つのでそろそろ初期の頃に書いた内容が現状とあわなくなってきた。あちこち現状とあっていない内容を更新した。本当はデザインを刷新したいと思っている。デザイン刷新のためのチケットを作ったのが2021年7月28日 20:04なのでもうすぐ1年経とうとしている。どんどん時間が過ぎるな。今日のところは、主には 企業情報 の構成を作り直した。それと同時に過去に働いていた会社での業務外発表を除去した。今後は自社の発表のみを掲載する。これには会社としてマーケティング活動をやっていくという意気込みと過去との決別の意味合いもある。トップページに news を5件表示しているところがビルドするタイミングによってそうならないときがあって、実行タイミングによってページングがされたりされなかったりする現象に悩まされている。ワークアラウンドとしては、何回かビルドをやり直せばページングされるときもあるのでそれを待つみたいな、どうしようもないやり方でこの場は凌いでいる。</description><content>&lt;p>1時に寝て7時に起きた。&lt;/p>
&lt;h2 id="源泉所得税の納付">源泉所得税の納付&lt;/h2>
&lt;p>ちょうど給料日を過ぎたので所得税徴収高計算書 (納期特例分) の申請を行った。これまでも e-tax で電子申請して振り込みしていたのだけれど、e-tax ソフト (web版) でブラウザから申請していた。今回は windows マシンにインストールされている e-tax ソフトから申請してみることにした。e-tax ソフトは起動時に「追加インストール」という機能があって、申請に必要なモジュールのみをダウンロードしてインストールできるようになっている。20年前で言うところの saas はこうだった。「源泉所得税関係」というモジュールをインストールしないと、所得税徴収高計算書の申請ができない (e-tax ソフトに帳票がインストールされない) 。モジュールを追加インストールすれば、「源泉所得税」という税目から「所得税徴収高計算書 (納期特例分) 」という帳票を選択して、あとは数字を記入して送信するだけ。この申請に電子署名は不要。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0626_e-tax.png"/>
&lt;/figure>
&lt;h2 id="法人税の修正申告と欠損金の繰り戻し還付の訂正依頼">法人税の修正申告と欠損金の繰り戻し還付の訂正依頼&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0620/#欠損金の繰り戻し還付の申請の誤り">国税局の職員さんからの指摘&lt;/a> で提出した書類が誤っていることに気付いた。いくつか訂正箇所を書いておく。&lt;/p>
&lt;ul>
&lt;li>欠損金額とは
&lt;ul>
&lt;li>正: 税引き後の欠損金額 = 別表1の1の数字をそのまま使えばよい&lt;/li>
&lt;li>誤: 税引き前の所得 (税務上は負の所得を欠損金と呼ぶ) を使っていた&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>法人税と地方法人税の計算は別
&lt;ul>
&lt;li>欠損金の繰り戻し還付の申請は法人税のみの還付金を算出&lt;/li>
&lt;li>↑で求めた還付金に対して(令和元年以降は)10.3%を地方法人税の還付金とする
&lt;ul>
&lt;li>この手続きは不要で別表一に算出した数字を記載すればよい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>まずこの申請書の誤りを修正して訂正依頼とする。&lt;/p>
&lt;p>さらにこの欠損金の繰り戻し還付の申請の数字を別表1に記載しなければならない。それらが漏れているのと還付申請のためには別表七も提出しないといけない。あと細かい数字の記入漏れの指摘もあった。法人税の確定申告に対して次の5つの書類を修正申告として提出する。&lt;/p>
&lt;ul>
&lt;li>別表一&lt;/li>
&lt;li>別表一 次葉&lt;/li>
&lt;li>別表四&lt;/li>
&lt;li>別表五 (一)&lt;/li>
&lt;li>別表七 (一)&lt;/li>
&lt;/ul>
&lt;p>税務署の職員さんが訂正する数字を書いてくれていたので、それをみながら e-tax ソフトで数字を修正して紙に印刷してそれを再提出する。おかげで赤字のときの別表書類の書き方もわかった。大半は欠損金の繰り返し還付に関する数字の記入漏れなので今後も赤字の年度があったときにこの内容を踏襲しながら申告すればよい。また1つ行政手続きのノウハウを得ることができた。税務署の職員さんに感謝。&lt;/p>
&lt;h2 id="企業サイトの更新">企業サイトの更新&lt;/h2>
&lt;p>企業サイトを作成してから3年近く経つのでそろそろ初期の頃に書いた内容が現状とあわなくなってきた。あちこち現状とあっていない内容を更新した。本当はデザインを刷新したいと思っている。デザイン刷新のためのチケットを作ったのが2021年7月28日 20:04なのでもうすぐ1年経とうとしている。どんどん時間が過ぎるな。今日のところは、主には &lt;a href="https://kazamori.jp/about/">企業情報&lt;/a> の構成を作り直した。それと同時に過去に働いていた会社での業務外発表を除去した。今後は自社の発表のみを掲載する。これには会社としてマーケティング活動をやっていくという意気込みと過去との決別の意味合いもある。トップページに news を5件表示しているところがビルドするタイミングによってそうならないときがあって、実行タイミングによってページングがされたりされなかったりする現象に悩まされている。ワークアラウンドとしては、何回かビルドをやり直せばページングされるときもあるのでそれを待つみたいな、どうしようもないやり方でこの場は凌いでいる。&lt;/p></content></item><item><title>k8s のアップグレードをやってみた</title><link>/diary/posts/2022/0625/</link><pubDate>Sat, 25 Jun 2022 16:34:05 +0900</pubDate><guid>/diary/posts/2022/0625/</guid><description>0時に寝て6時半に起きた。起きてから1時間ほどだらだらしてた。
ストレッチ 今日の開脚幅は開始前161cmで、ストレッチ後163cmだった。先週と同じなので現状維持とも言えるし、よい状態を維持しているとも言えるかもしれない。もう1年以上通っているせいか、なにかポイントが溜まっていて使わないといけないという話しで今日は20分延長でやってくれた。とは言っても、基本的なストレッチ項目が変わるわけではなく、いつもより伸ばす時間や手順が少し増えているぐらいだった気がする。今週はとくに腰の負荷もあまり感じなかったせいか、いつもの右腰の張りもなかったように思う。トレーナーさんに聞くと、暑くなると筋肉は伸びやすくなるので季節要因でストレッチをしたときの伸び具合が変わるのは普通とのこと。調子がよくなってきたのでこのまま好調を維持したい。
eks (k8s) のアップグレード お手伝い先のお仕事がもうすぐサービスインなのでそれまでにリスクのある作業をやっとこうみたいな状況にある。たまたま eks (k8s) のバージョンを 1.21 から 1.22 にあげようと思い立って、木曜日に提案したら、どんな障害が起きるかわからないので他メンバーがテスト環境を使っていない時間帯で作業した方がよいだろうという話になって土日にやることにした。
Updating an Amazon EKS cluster Kubernetes version 何が起きるか分からなくても、土曜日から始めて致命的なトラブルに見舞われても1日もあれば解決できるだろうという見通しで作業を始めた。その見通しも「私がやれば」という前提に成り立っている。良くも悪くも私がやろうと言ったことに反対されることはほとんどないが、それは私が言ったことは一定時間に私がすべてやり切るという信頼に基づいている。本当の意味でできるかどうか分からないことを必要以上に抱え込んでしまうときもあるのでバランス感覚は必要かもしれない。言わばサービス休日出勤だし、なぜ私がやっているかと言うと、システムの運用や保守の展望を考えたら、サービスインの前にインフラのバージョンを上げておく方が将来の保守コストを下げることに繋がるという1点のみに重要性を見い出していて、それをもっとも強く主張しているのが私だからという理由。
結論から言って2時間でアップグレード作業を完了した。1つ手順漏れがあって、アプリケーションの pod がすべてエラーになるというトラブルに見舞われたものの、すぐ手順漏れに気付いて難なく復旧できた。今日はテスト環境のアップグレードをしたわけだけど、また後日、本番向けの作業手順書を作れば、ほぼタウンタイムなしで1時間もあればアップグレード作業を完了できそうな見通しではある。
実際はミスもあったので次の順番でやったわけではないが、おそらくこの手順でやれば正しいはず。
aws cli と eksctl コマンドのインストール aws のアップグレードドキュメンを読む cert-manager のアップグレード (1.1.1 から 1.5.4) aws-load-balancer-controller のアップグレード (2.2.0 から 2.4.2) k8s control plane のアップグレード (1.21 から 1.22) (オプション: 不要) autoscaler のアップグレード (オプション: 不要) gpu サポートノードのアップグレード vpc cni プラグインのアップグレード (1.7.5 から 1.11.2) coredns プラグインのアップグレード (1.8.4 から 1.8.7) kube-proxy のアップグレード (1.</description><content>&lt;p>0時に寝て6時半に起きた。起きてから1時間ほどだらだらしてた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前161cmで、ストレッチ後163cmだった。先週と同じなので現状維持とも言えるし、よい状態を維持しているとも言えるかもしれない。もう1年以上通っているせいか、なにかポイントが溜まっていて使わないといけないという話しで今日は20分延長でやってくれた。とは言っても、基本的なストレッチ項目が変わるわけではなく、いつもより伸ばす時間や手順が少し増えているぐらいだった気がする。今週はとくに腰の負荷もあまり感じなかったせいか、いつもの右腰の張りもなかったように思う。トレーナーさんに聞くと、暑くなると筋肉は伸びやすくなるので季節要因でストレッチをしたときの伸び具合が変わるのは普通とのこと。調子がよくなってきたのでこのまま好調を維持したい。&lt;/p>
&lt;h2 id="eks-k8s-のアップグレード">eks (k8s) のアップグレード&lt;/h2>
&lt;p>お手伝い先のお仕事がもうすぐサービスインなのでそれまでにリスクのある作業をやっとこうみたいな状況にある。たまたま eks (k8s) のバージョンを 1.21 から 1.22 にあげようと思い立って、木曜日に提案したら、どんな障害が起きるかわからないので他メンバーがテスト環境を使っていない時間帯で作業した方がよいだろうという話になって土日にやることにした。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/update-cluster.html">Updating an Amazon EKS cluster Kubernetes version&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>何が起きるか分からなくても、土曜日から始めて致命的なトラブルに見舞われても1日もあれば解決できるだろうという見通しで作業を始めた。その見通しも「私がやれば」という前提に成り立っている。良くも悪くも私がやろうと言ったことに反対されることはほとんどないが、それは私が言ったことは一定時間に私がすべてやり切るという信頼に基づいている。本当の意味でできるかどうか分からないことを必要以上に抱え込んでしまうときもあるのでバランス感覚は必要かもしれない。言わばサービス休日出勤だし、なぜ私がやっているかと言うと、システムの運用や保守の展望を考えたら、サービスインの前にインフラのバージョンを上げておく方が将来の保守コストを下げることに繋がるという1点のみに重要性を見い出していて、それをもっとも強く主張しているのが私だからという理由。&lt;/p>
&lt;p>結論から言って2時間でアップグレード作業を完了した。1つ手順漏れがあって、アプリケーションの pod がすべてエラーになるというトラブルに見舞われたものの、すぐ手順漏れに気付いて難なく復旧できた。今日はテスト環境のアップグレードをしたわけだけど、また後日、本番向けの作業手順書を作れば、ほぼタウンタイムなしで1時間もあればアップグレード作業を完了できそうな見通しではある。&lt;/p>
&lt;p>実際はミスもあったので次の順番でやったわけではないが、おそらくこの手順でやれば正しいはず。&lt;/p>
&lt;ol>
&lt;li>aws cli と eksctl コマンドのインストール&lt;/li>
&lt;li>aws のアップグレードドキュメンを読む&lt;/li>
&lt;li>cert-manager のアップグレード (1.1.1 から 1.5.4)&lt;/li>
&lt;li>aws-load-balancer-controller のアップグレード (2.2.0 から 2.4.2)&lt;/li>
&lt;li>k8s control plane のアップグレード (1.21 から 1.22)&lt;/li>
&lt;li>(オプション: 不要) autoscaler のアップグレード&lt;/li>
&lt;li>(オプション: 不要) gpu サポートノードのアップグレード&lt;/li>
&lt;li>vpc cni プラグインのアップグレード (1.7.5 から 1.11.2)&lt;/li>
&lt;li>coredns プラグインのアップグレード (1.8.4 から 1.8.7)&lt;/li>
&lt;li>kube-proxy のアップグレード (1.21.2 から 1.22.6)&lt;/li>
&lt;li>k8s nodegroup のアップグレード (1.21 から 1.22)
&lt;ul>
&lt;li>k8s ノードが存在する nodegroup をアップグレードするとそのインスタンスが再作成されて pod が再デプロイされる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>細かい手順は aws のドキュメントの指示に従いながらやったらできた。add-on と self-managed add-on の種別の違いがあったり、helm と k8s manifest の手順が別々だったり、どのバージョンからのアップグレードかで作業手順が異なったりと、ドキュメントをちゃんと読まないと正しい作業手順がわからない。基本的にはドキュメント通りの作業で完了できた。&lt;/p>
&lt;h2 id="もくもく会">もくもく会&lt;/h2>
&lt;p>アップグレード作業を終えてから1時間ほど残っていたので16時から &lt;a href="https://kobe-sannomiya-dev.connpass.com/event/251117/">【三宮.dev ＆ KELab 共催】もくもく会&lt;/a> に参加した。今回は &lt;a href="https://kobe-engr-lab.studio.site/">Kobe Engineers Lab&lt;/a> さんと共催ということで &lt;a href="https://120workplace.jp/">120 WORKPLACE KOBE&lt;/a> で開催された。Kobe Engineers Lab の主催者の会社が 120 workplace でオフィスを借りているため、会議室を5時間/月まで無料で借りられるという。私も過去に何度か 120 workplace のコワーキングスペースで作業したこともあった。久しぶりに行ってよい場所だとは思う。会議室は初めて入ったけど、10人ぐらいは余裕で作業できる大きなテーブルがあって広くてよかった。終わってからわたなべさんと3時間ほど立ち呑みしてた。&lt;/p>
&lt;h2 id="はんなりビジネス">はんなりビジネス&lt;/h2>
&lt;p>21時から &lt;a href="https://hannari-python.connpass.com/event/250916/">はんなりビジネス #0&lt;/a> に参加した。おがわさんがまた新しいことやるんだなと思って興味本位で参加してみた。現実の課題に対してコミュニティの有志を募ってチームで取り組んでみたら、問題解決能力も身についてプログラミングの知識を活かしてより実践的なスキルが身に着いてよいのではないかといったところから始まった企画らしい。今日は初回だったので参加者でどういう取り組みがよいのかを雑談してた。まだまだこの先どうなるかわからないけど、私はあまりこの手の取り組みには懐疑的かなぁ。自分たちにとってちょうどよい課題レベルの対象をみつけるのは難しいし、誰でも参加できるオープンなビジネスコンテストやアイディアソンが本当に大事な問題を扱っているかも怪しい。現実の課題はお仕事でいくらでもあるので、それをコミュニティでやろうと思うとニッチな何かになるか、価値があるかどうかよりも本人がやりたいかどうかの目的になってしまうような気もする。とはいえ、私自身、ビジネス力はまったくないのでなにかしらやっているうちに価値に気付くこともあるかもしれない。もうしばらく様子をみてみる。&lt;/p></content></item><item><title>余白談義</title><link>/diary/posts/2022/0624/</link><pubDate>Fri, 24 Jun 2022 10:28:17 +0900</pubDate><guid>/diary/posts/2022/0624/</guid><description>0時に寝て6時に起きた。だいぶ復調してきて朝起きれるようになってきた。
歯科検診 3ヶ月ごとの定期検診。前回 は2年ぶりにレントゲンをとったので新しい歯のレントゲン写真をみせていただいた。とくに変わりなく、親知らずにゴミが溜まるスポットがあるから、親知らずを抜いた方がいいのはいいけど、下側の親知らずを抜くのは大変だから痛くなってからでもよいかも？みたいな話しをした。いま3ヶ月ごとに定期検診して親知らずのゴミスポットの掃除をしてもらっているからそれでもしかしたら大丈夫なのかもしれない。あと1箇所だけ銀の詰めものと歯が精密に一致していないところがあって、その隙間にゴミが溜まりやすいとのこと。急がなくてもよいけど、いずれ付け直した方がよいらしい。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今日の議題は次の3つ。
お手伝い先の契約更新についての話題 カフーツさんとワーケーションの話題 jjug ccc 2022 spring ふりかえり 先日の記事 でも「余白」という概念が個人的にはまったのであちこちで余白談義をしている。デザインで言うところの余白とは何かをはらさんに聞いてみたところ、次のようなものだという。
空白というコンテンツである 他に使ってはいけない領域である 開発における余裕とかゆとりのことを余白と言ってしまうと、デザインの文脈とは一致しないという話しになった。ワーケーションの文脈では予定調和じゃない時間を指すといとうさんは仰っていた。何かをやるための計画を立てた時間ではない。何もしなくてもよいし、思いつきで何かをしてもよい。先日の記事で、課題管理の文脈でメタ課題の抽出や他人のチケットにコメントしたりするのも余白の1つではないかと私が書いたのはその行動が必須というわけではない。誰かから指示されてやっているわけでもないという行動が、ワーケーションにおける予定調和じゃない行動と共通点があるのではないかと考えたから。
私が開発における余白を余裕やゆとりのように解釈して発言したので余っているものというニュアンスになってしまったけど、その時間は余っているものではなく、明示的に明けておくべき時間のように捉えたらデザインの文脈で言う余白にも近い概念になるかもしれない。開発だと想定外の追加作業や要件漏れなどのために確保しておく時間をバッファと呼んだりもする。例えば、開発の作業時間を1日8時間、1週間(5日間)で40時間と見積もるから余白がなくなってしまうであって、仮に1週間の余白を3時間と先に確保してしまって、37時間を開発の作業時間としてしまえば余白がなくなるということない。その余白時間に業務に関係ない勉強会をやってもいいし、自分の調べたいことに費やしてもいいかもしれない。私が金曜日を非稼働日として業務委託の作業をやらずに雑談していることにも通じる。
その後、余白談義からスクラムの課題や展望の話しなどにも発散して盛り上がった。スクラムには余白がないから。まだまだ私自身、余白の言語化に曖昧なところがあるので今後も意識しながら概念や価値を言語化していくように努めたい。</description><content>&lt;p>0時に寝て6時に起きた。だいぶ復調してきて朝起きれるようになってきた。&lt;/p>
&lt;h2 id="歯科検診">歯科検診&lt;/h2>
&lt;p>3ヶ月ごとの定期検診。&lt;a href="posts/2022/0325.md#%E6%AD%AF%E7%A7%91%E6%A4%9C%E8%A8%BA">前回&lt;/a> は2年ぶりにレントゲンをとったので新しい歯のレントゲン写真をみせていただいた。とくに変わりなく、親知らずにゴミが溜まるスポットがあるから、親知らずを抜いた方がいいのはいいけど、下側の親知らずを抜くのは大変だから痛くなってからでもよいかも？みたいな話しをした。いま3ヶ月ごとに定期検診して親知らずのゴミスポットの掃除をしてもらっているからそれでもしかしたら大丈夫なのかもしれない。あと1箇所だけ銀の詰めものと歯が精密に一致していないところがあって、その隙間にゴミが溜まりやすいとのこと。急がなくてもよいけど、いずれ付け直した方がよいらしい。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今日の議題は次の3つ。&lt;/p>
&lt;ul>
&lt;li>お手伝い先の契約更新についての話題&lt;/li>
&lt;li>カフーツさんとワーケーションの話題&lt;/li>
&lt;li>jjug ccc 2022 spring ふりかえり&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="/diary/diary/posts/2022/0618/#カフーツさん訪問">先日の記事&lt;/a> でも「余白」という概念が個人的にはまったのであちこちで余白談義をしている。デザインで言うところの余白とは何かをはらさんに聞いてみたところ、次のようなものだという。&lt;/p>
&lt;ul>
&lt;li>空白というコンテンツである&lt;/li>
&lt;li>他に使ってはいけない領域である&lt;/li>
&lt;/ul>
&lt;p>開発における余裕とかゆとりのことを余白と言ってしまうと、デザインの文脈とは一致しないという話しになった。ワーケーションの文脈では予定調和じゃない時間を指すといとうさんは仰っていた。何かをやるための計画を立てた時間ではない。何もしなくてもよいし、思いつきで何かをしてもよい。先日の記事で、課題管理の文脈でメタ課題の抽出や他人のチケットにコメントしたりするのも余白の1つではないかと私が書いたのはその行動が必須というわけではない。誰かから指示されてやっているわけでもないという行動が、ワーケーションにおける予定調和じゃない行動と共通点があるのではないかと考えたから。&lt;/p>
&lt;p>私が開発における余白を余裕やゆとりのように解釈して発言したので余っているものというニュアンスになってしまったけど、その時間は余っているものではなく、明示的に明けておくべき時間のように捉えたらデザインの文脈で言う余白にも近い概念になるかもしれない。開発だと想定外の追加作業や要件漏れなどのために確保しておく時間をバッファと呼んだりもする。例えば、開発の作業時間を1日8時間、1週間(5日間)で40時間と見積もるから余白がなくなってしまうであって、仮に1週間の余白を3時間と先に確保してしまって、37時間を開発の作業時間としてしまえば余白がなくなるということない。その余白時間に業務に関係ない勉強会をやってもいいし、自分の調べたいことに費やしてもいいかもしれない。私が金曜日を非稼働日として業務委託の作業をやらずに雑談していることにも通じる。&lt;/p>
&lt;p>その後、余白談義からスクラムの課題や展望の話しなどにも発散して盛り上がった。スクラムには余白がないから。まだまだ私自身、余白の言語化に曖昧なところがあるので今後も意識しながら概念や価値を言語化していくように努めたい。&lt;/p></content></item><item><title>assertj を使ってみた</title><link>/diary/posts/2022/0623/</link><pubDate>Thu, 23 Jun 2022 07:55:59 +0900</pubDate><guid>/diary/posts/2022/0623/</guid><description>0時に寝て6時に起きた。
assertDeepEquals を作った AssertJ というアサーションライブラリを使って assertDeepEquals を実装した。
junit4 では hamcrest という matcher が使われていて、それが assertDeepEquals 相当の機能を提供していたが、それが junit5 では提供されなくなったので自分で実装するか、アサーションライブラリを別途使う必要がある。
現時点でJUnit5ではHamcrestのMatcherは提供せず、使用者が自由に選択する方針で進んでいます。そうなった場合、標準でサポートされるassertTrueやassertEquelsなどだけでは、ちょっと頼りなく車輪の再発明になりそうなので、候補になりそうなHamcrestとAssertJのよく使いそうなメソッド比較表を作りました。
JUnitのアサーションライブラリHamcrest,AssertJ比較
2.4.2. Third-party Assertion Libraries によると、junit は基本的なアサーション機能を提供し、より強力なアサーションはサードパーティ製の好きなライブラリを使ってくれみたいなことが書いてある。軽く github でソースコード検索しても、みんな自前で作っているんやなということも分かる。
https://github.com/search?l=Java&amp;amp;q=assertDeepEquals&amp;amp;type=Code hamcrest はもう保守されていないようにみえるので assertj を使うことにした。assertj の機能を使うと assertDeepEquals を次のように実装できる。直接 assertj を使ってもよいのだけど、assertXxx という名前で使えた方が junit ベースのテストのアサートの統合性があるし、いまお手伝い先では myapp-test のような、テスト向けの共通ライブラリを提供していて、すべてのプロジェクトで既に使っているので assertj の依存関係を追加しなくてもすぐに使えるというぐらいの利便性を提供するだけのユーティリティになる。
public class Assertions { public static final void assertDeepEquals(Object expected, Object actual) { assertThat(expected).usingRecursiveComparison().isEqualTo(actual); } public static final void assertDeepEquals(Object expected, Object actual, String... fields) { assertThat(expected).</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="assertdeepequals-を作った">assertDeepEquals を作った&lt;/h2>
&lt;p>&lt;a href="https://assertj.github.io/doc/">AssertJ&lt;/a> というアサーションライブラリを使って &lt;code>assertDeepEquals&lt;/code> を実装した。&lt;/p>
&lt;p>junit4 では hamcrest という matcher が使われていて、それが &lt;code>assertDeepEquals&lt;/code> 相当の機能を提供していたが、それが junit5 では提供されなくなったので自分で実装するか、アサーションライブラリを別途使う必要がある。&lt;/p>
&lt;blockquote>
&lt;p>現時点でJUnit5ではHamcrestのMatcherは提供せず、使用者が自由に選択する方針で進んでいます。そうなった場合、標準でサポートされるassertTrueやassertEquelsなどだけでは、ちょっと頼りなく車輪の再発明になりそうなので、候補になりそうなHamcrestとAssertJのよく使いそうなメソッド比較表を作りました。&lt;/p>
&lt;p>&lt;a href="https://qiita.com/disc99/items/31fa7abb724f63602dc9">JUnitのアサーションライブラリHamcrest,AssertJ比較&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://junit.org/junit5/docs/snapshot/user-guide/#writing-tests-assertions-third-party">2.4.2. Third-party Assertion Libraries&lt;/a> によると、junit は基本的なアサーション機能を提供し、より強力なアサーションはサードパーティ製の好きなライブラリを使ってくれみたいなことが書いてある。軽く github でソースコード検索しても、みんな自前で作っているんやなということも分かる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/search?l=Java&amp;amp;q=assertDeepEquals&amp;amp;type=Code">https://github.com/search?l=Java&amp;amp;q=assertDeepEquals&amp;amp;type=Code&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>hamcrest はもう保守されていないようにみえるので assertj を使うことにした。assertj の機能を使うと &lt;code>assertDeepEquals&lt;/code> を次のように実装できる。直接 assertj を使ってもよいのだけど、assertXxx という名前で使えた方が junit ベースのテストのアサートの統合性があるし、いまお手伝い先では myapp-test のような、テスト向けの共通ライブラリを提供していて、すべてのプロジェクトで既に使っているので assertj の依存関係を追加しなくてもすぐに使えるというぐらいの利便性を提供するだけのユーティリティになる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Assertions&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">assertDeepEquals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Object expected&lt;span style="color:#f92672">,&lt;/span> Object actual&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat&lt;span style="color:#f92672">(&lt;/span>expected&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">usingRecursiveComparison&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">isEqualTo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>actual&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">assertDeepEquals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Object expected&lt;span style="color:#f92672">,&lt;/span> Object actual&lt;span style="color:#f92672">,&lt;/span> String&lt;span style="color:#f92672">...&lt;/span> fields&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat&lt;span style="color:#f92672">(&lt;/span>expected&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">usingRecursiveComparison&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">comparingOnlyFields&lt;/span>&lt;span style="color:#f92672">(&lt;/span>fields&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">isEqualTo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>actual&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">assertDeepEqualsIgnoringFields&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Object expected&lt;span style="color:#f92672">,&lt;/span> Object actual&lt;span style="color:#f92672">,&lt;/span> String&lt;span style="color:#f92672">...&lt;/span> fields&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat&lt;span style="color:#f92672">(&lt;/span>expected&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">usingRecursiveComparison&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">ignoringFields&lt;/span>&lt;span style="color:#f92672">(&lt;/span>fields&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">isEqualTo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>actual&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>k8s の cronjob を検証中</title><link>/diary/posts/2022/0622/</link><pubDate>Wed, 22 Jun 2022 18:58:20 +0900</pubDate><guid>/diary/posts/2022/0622/</guid><description>0時に寝て6時に起きた。寝不足を解消して体調が戻ってきた。
k8s の cronjob バッチ処理を Kubernetes: CronJob で作る。一通り設定して minikube で検証して eks 上でも動くようになった。
apiVersion: batch/v1 kind: CronJob metadata: name: my-app-hourly-job spec: schedule: &amp;#34;5 */1 * * *&amp;#34; concurrencyPolicy: Forbid startingDeadlineSeconds: 600 jobTemplate: spec: backoffLimit: 0 template: metadata: labels: app: my-app-hourly annotations: dapr.io/enabled: &amp;#34;true&amp;#34; dapr.io/app-id: &amp;#34;my-app-hourly&amp;#34; spec: containers: - name: my-app-hourly-job image: my-app-image imagePullPolicy: Always env: - name: BATCH_ENV value: &amp;#34;dev&amp;#34; command: - &amp;#34;/bin/sh&amp;#34; - &amp;#34;/app/scripts/my-app.sh&amp;#34; - &amp;#34;param1&amp;#34; - &amp;#34;param2&amp;#34; restartPolicy: Never command の設定がわかりにくい。さらに k8s のドキュメントのサンプル設定も誤解を招くような例になっている。どうも実行できるのは1つの cli だけで、複数コマンドを指定できるわけではない。シェルスクリプトを docker イメージに含めて、そこで任意のスクリプトを実装した方がよいだろう。</description><content>&lt;p>0時に寝て6時に起きた。寝不足を解消して体調が戻ってきた。&lt;/p>
&lt;h2 id="k8s-の-cronjob">k8s の cronjob&lt;/h2>
&lt;p>バッチ処理を &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/">Kubernetes: CronJob&lt;/a> で作る。一通り設定して minikube で検証して eks 上でも動くようになった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">batch/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">CronJob&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">my-app-hourly-job&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">schedule&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;5 */1 * * *&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">concurrencyPolicy&lt;/span>: &lt;span style="color:#ae81ff">Forbid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">startingDeadlineSeconds&lt;/span>: &lt;span style="color:#ae81ff">600&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">jobTemplate&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">backoffLimit&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">my-app-hourly&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">annotations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dapr.io/enabled&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">dapr.io/app-id&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;my-app-hourly&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">my-app-hourly-job&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">my-app-image&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">imagePullPolicy&lt;/span>: &lt;span style="color:#ae81ff">Always&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">BATCH_ENV&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;dev&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;/bin/sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;/app/scripts/my-app.sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;param1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;param2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">restartPolicy&lt;/span>: &lt;span style="color:#ae81ff">Never&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>command の設定がわかりにくい。さらに k8s のドキュメントのサンプル設定も誤解を招くような例になっている。どうも実行できるのは1つの cli だけで、複数コマンドを指定できるわけではない。シェルスクリプトを docker イメージに含めて、そこで任意のスクリプトを実装した方がよいだろう。&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;/bin/sh&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;/app/scripts/my-app.sh&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;param1&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;param2&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>この設定は次の cli として実行される。&lt;/p>
&lt;blockquote>
&lt;p>/bin/sh /app/scripts/my-app.sh param1 param2&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://stackoverflow.com/questions/51657105/how-to-ensure-kubernetes-cronjob-does-not-restart-on-failure">How to ensure kubernetes cronjob does not restart on failure&lt;/a> によると、バッチ処理が失敗したときに再実行したくないときは次の3つの設定をする。&lt;/p>
&lt;ul>
&lt;li>concurrencyPolicy: Forbid&lt;/li>
&lt;li>backoffLimit: 0&lt;/li>
&lt;li>restartPolicy: Never&lt;/li>
&lt;/ul>
&lt;p>restartPolicy が Never 以外だと、エラーが発生すると永遠に再実行されてしまうので障害時に2次被害を増やしてしまう懸念があったような気がする。&lt;/p>
&lt;p>あと、うちの環境は dapr 経由で他の pod サービスと通信しているので dapr を有効にしないと pod 間通信ができない。dapr はデーモンでずっと起動しているからバッチ処理の終了時に daprd も shutdown してやらないといけない。&lt;a href="https://docs.dapr.io/operations/hosting/kubernetes/kubernetes-job/">Running Dapr with a Kubernetes Job&lt;/a> にその方法が書いてある。daprd を shutdown しないと、pod のステータスが NotReady のままで Completed にならない。&lt;/p>
&lt;p>まだまだよくわかってないので &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/">Jobs&lt;/a> のドキュメントに一通り目を通そうと思っている。&lt;/p></content></item><item><title>maven で executable jar を作る</title><link>/diary/posts/2022/0621/</link><pubDate>Tue, 21 Jun 2022 10:28:55 +0900</pubDate><guid>/diary/posts/2022/0621/</guid><description>4時に寝て7時に起きた。
maven での executable jar の作り方 gradle では作ったことがあったけど、maven では初めてなので要領がわかっていない。
How to Create an Executable JAR with Maven How can I create an executable JAR with dependencies using Maven? これらの記事を読むと、maven-assembly-plugin を使えばいいのかな？とまずはこのプラグインで検証を始めた。古くからあるプラグインなので実績は十分なのだけど、もうあまり保守されていないのか、他プラグインから jar のマニフェストに書き込んで git のリビジョン番号が連携できてなかったり、通常の jar の生成処理を置き換えられなかったりと、あまり使い勝手のよいものではなかった。あと log4j2 と相性が悪くて意図したように設定ファイルを読み込んで初期化ができない。
main ERROR Error processing element EcsLayout: CLASS_NOT_FOUND main ERROR Unable to locate plugin type for EcsLayout main ERROR Unable to locate plugin for EcsLayout main ERROR Could not create plugin of type class org.</description><content>&lt;p>4時に寝て7時に起きた。&lt;/p>
&lt;h2 id="maven-での-executable-jar-の作り方">maven での executable jar の作り方&lt;/h2>
&lt;p>gradle では作ったことがあったけど、maven では初めてなので要領がわかっていない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.baeldung.com/executable-jar-with-maven">How to Create an Executable JAR with Maven&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/574594/how-can-i-create-an-executable-jar-with-dependencies-using-maven">How can I create an executable JAR with dependencies using Maven?&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>これらの記事を読むと、&lt;a href="https://maven.apache.org/plugins/maven-assembly-plugin/">maven-assembly-plugin&lt;/a> を使えばいいのかな？とまずはこのプラグインで検証を始めた。古くからあるプラグインなので実績は十分なのだけど、もうあまり保守されていないのか、他プラグインから jar のマニフェストに書き込んで git のリビジョン番号が連携できてなかったり、通常の jar の生成処理を置き換えられなかったりと、あまり使い勝手のよいものではなかった。あと log4j2 と相性が悪くて意図したように設定ファイルを読み込んで初期化ができない。&lt;/p>
&lt;pre tabindex="0">&lt;code>main ERROR Error processing element EcsLayout: CLASS_NOT_FOUND
main ERROR Unable to locate plugin type for EcsLayout
main ERROR Unable to locate plugin for EcsLayout
main ERROR Could not create plugin of type class org.apache.logging.log4j.core.appender.ConsoleAppender for element Console:
java.lang.NullPointerException: Cannot invoke &amp;#34;org.apache.logging.log4j.core.config.plugins.util.PluginType.getElementName()&amp;#34;
because &amp;#34;childType&amp;#34; is null java.lang.NullPointerException:
Cannot invoke &amp;#34;org.apache.logging.log4j.core.config.plugins.util.PluginType.getElementName()&amp;#34; because &amp;#34;childType&amp;#34; is null
&lt;/code>&lt;/pre>&lt;p>この厄介な問題をデバッグするよりも、すでにうまくいくことがわかっている &lt;a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/">spring-boot-maven-plugin&lt;/a> を使った方が簡単そうだったのでそうすることにした。不要な spring boot 関連の jar なども executable jar や docker イメージに含まれてしまうことだけがデメリット。そこだけ目を瞑れば log4j2 の初期化エラーも起きず、正常に動作した。やっぱり最近のアプリケーションで使われているプラグインはちゃんとしてるねみたいな話しにしておく。次の設定だけでうまくいった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-maven-plugin&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;mainClass&amp;gt;&lt;/span>com.example.myapp.Main&lt;span style="color:#f92672">&amp;lt;/mainClass&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;executions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;execution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;goals&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;goal&amp;gt;&lt;/span>repackage&lt;span style="color:#f92672">&amp;lt;/goal&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/goals&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/execution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/executions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>log4j2 の設定ファイルの動的な読み込み</title><link>/diary/posts/2022/0620/</link><pubDate>Mon, 20 Jun 2022 08:23:37 +0900</pubDate><guid>/diary/posts/2022/0620/</guid><description>0時に寝て7時に起きた。
バッチ処理モジュール cli でバッチ処理モジュールを作った。コマンドラインの引数パーサーと yml のパーサーを使うことにした。
picocli snakeyaml ロガー実装に log4j2 を使っているので設定ファイルはアプリケーションの設定ファイルと log4j2 の設定ファイルの2つになる。それぞれ環境ごとに用意してエントリーポイントから起動したタイミングで明示的に設定ファイルを読み込むようにした。
log4j2 の yml 設定ファイルを動的にどうやって設定するかはドキュメントにもとくに書いてなかった気がする。log4j2 のソースコードやテストコードを読みながら次のようにしたら反映された。
public static Config load(BatchEnvironment env) { var path = String.format(&amp;#34;config-%s.yml&amp;#34;, env.getName()); var inputStream = ConfigUtil.class.getClassLoader().getResourceAsStream(path); var yaml = new Yaml(new Constructor(Config.class)); return yaml.load(inputStream); } アプリケーションの設定は yml 設定に対応する Config クラスを定義しておいて次のようにして読み込む。
public static void initializeLogSettings(BatchEnvironment env) throws IOException { var path = String.format(&amp;#34;log4j2-%s.yml&amp;#34;, env.getName()); var inputStream = ConfigUtil.class.getClassLoader().getResourceAsStream(path); var source = new ConfigurationSource(inputStream); var configuration = new YamlConfigurationFactory().</description><content>&lt;p>0時に寝て7時に起きた。&lt;/p>
&lt;h2 id="バッチ処理モジュール">バッチ処理モジュール&lt;/h2>
&lt;p>cli でバッチ処理モジュールを作った。コマンドラインの引数パーサーと yml のパーサーを使うことにした。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://picocli.info/">picocli&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://bitbucket.org/snakeyaml/">snakeyaml&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ロガー実装に &lt;a href="https://logging.apache.org/log4j/2.x/">log4j2&lt;/a> を使っているので設定ファイルはアプリケーションの設定ファイルと log4j2 の設定ファイルの2つになる。それぞれ環境ごとに用意してエントリーポイントから起動したタイミングで明示的に設定ファイルを読み込むようにした。&lt;/p>
&lt;p>log4j2 の yml 設定ファイルを動的にどうやって設定するかはドキュメントにもとくに書いてなかった気がする。log4j2 のソースコードやテストコードを読みながら次のようにしたら反映された。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> Config &lt;span style="color:#a6e22e">load&lt;/span>&lt;span style="color:#f92672">(&lt;/span>BatchEnvironment env&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var path &lt;span style="color:#f92672">=&lt;/span> String&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">format&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;config-%s.yml&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> env&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var inputStream &lt;span style="color:#f92672">=&lt;/span> ConfigUtil&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getClassLoader&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">getResourceAsStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>path&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var yaml &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Yaml&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> Constructor&lt;span style="color:#f92672">(&lt;/span>Config&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> yaml&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">load&lt;/span>&lt;span style="color:#f92672">(&lt;/span>inputStream&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>アプリケーションの設定は yml 設定に対応する &lt;code>Config&lt;/code> クラスを定義しておいて次のようにして読み込む。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">initializeLogSettings&lt;/span>&lt;span style="color:#f92672">(&lt;/span>BatchEnvironment env&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">throws&lt;/span> IOException &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var path &lt;span style="color:#f92672">=&lt;/span> String&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">format&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;log4j2-%s.yml&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> env&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var inputStream &lt;span style="color:#f92672">=&lt;/span> ConfigUtil&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getClassLoader&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">getResourceAsStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>path&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var source &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ConfigurationSource&lt;span style="color:#f92672">(&lt;/span>inputStream&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var configuration &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> YamlConfigurationFactory&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">getConfiguration&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> source&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Configurator&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">initialize&lt;/span>&lt;span style="color:#f92672">(&lt;/span>configuration&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ちょっとした cli を作るときにちょっとしたライブラリがあると楽でよい。&lt;/p>
&lt;h2 id="欠損金の繰り戻し還付の申請の誤り">欠損金の繰り戻し還付の申請の誤り&lt;/h2>
&lt;p>国税局から電話がかかってきた。初めて提出した欠損金の繰り戻し還付の申請があちこち間違ってますよと。申請書類と一緒に法人税の申告書もみてもらっていて、還付申請した金額も申告の別表1に記入する必要があって、それも一緒に修正してねという話し。法人税の修正申告と還付の訂正依頼の2つが必要とのこと。税務署の人たちは本当に丁寧で親切にあれが間違っている、これが間違っていると教えてくれる。素人が法人決算やっているので初めて行う手続きの間違いはつきものだけど、税務署の人たちが教えてくれるので本当に助かる。感謝。&lt;/p></content></item><item><title>jjug ccc 2022 spring 参加</title><link>/diary/posts/2022/0619/</link><pubDate>Sun, 19 Jun 2022 11:02:33 +0900</pubDate><guid>/diary/posts/2022/0619/</guid><description>1時に寝て7時に起きた。前日、お酒飲んでたくさん雑談したので疲れ果てて寝てた。
jjug ccc 2022 spring 私の発表は朝10:25からだったけれど、その1つ前が同僚の発表なので見とこうと思って9時前にはオフィスに着いてたと思う。twitter のハッシュタグを開いたり、スライド資料のツィートの文面を用意したり、発表者用のTシャツを着たりなど、いろいろ発表前にできそうな準備をしておいた。zoom と youtube live の両方で配信しているせいか、zoom でのやり取りと youtube live のチャット欄でのやり取りが混ざって、発表者も運営も混乱していたように思う。jjug のスタッフさんも当日にあれこれ指示を出していたりもして配信プラットフォームが複数になるとややこしいよなとか思いながら眺めてた。
Track C の発表を午前中いっぱい、私のも含めて3つみてたんだけど、おそらく関係者以外で発表を聴いている人はかなり少なかったのではないかと推測する。まず twitter のハッシュタグも youtube live のチャット欄もほとんど書き込みはなく、質問もないから jjug のスタッフさんが質問するという、予想していた通りの展開になった。同僚と私の発表はぽっと出の発表なので視聴者が少なくてもわかるんだけど、その後のてらだよしおさんの発表もクラスメソッドさんのレポートを書いている人しかコメントしてなかったように思う。
【レポート】k8s 疲れの方へ送る、k8s ベースのらくらくマイクロサービス動作基盤のご紹介 #jjug_ccc #jjug_ccc_c オンラインイベントだからリアルタイムに視聴しないのか、日曜日または朝だから少ないのか、また機会があれば中の人にも聞いてみる。昨日の疲れもあって、会社ブログの記事を書いたら眠くなってきたので、午後から帰って寝てた。
Java で作るカスタム GitHub Actions</description><content>&lt;p>1時に寝て7時に起きた。前日、お酒飲んでたくさん雑談したので疲れ果てて寝てた。&lt;/p>
&lt;h2 id="jjug-ccc-2022-spring">jjug ccc 2022 spring&lt;/h2>
&lt;p>私の発表は朝10:25からだったけれど、その1つ前が同僚の発表なので見とこうと思って9時前にはオフィスに着いてたと思う。twitter のハッシュタグを開いたり、スライド資料のツィートの文面を用意したり、発表者用のTシャツを着たりなど、いろいろ発表前にできそうな準備をしておいた。zoom と youtube live の両方で配信しているせいか、zoom でのやり取りと youtube live のチャット欄でのやり取りが混ざって、発表者も運営も混乱していたように思う。jjug のスタッフさんも当日にあれこれ指示を出していたりもして配信プラットフォームが複数になるとややこしいよなとか思いながら眺めてた。&lt;/p>
&lt;p>Track C の発表を午前中いっぱい、私のも含めて3つみてたんだけど、おそらく関係者以外で発表を聴いている人はかなり少なかったのではないかと推測する。まず twitter のハッシュタグも youtube live のチャット欄もほとんど書き込みはなく、質問もないから jjug のスタッフさんが質問するという、予想していた通りの展開になった。同僚と私の発表はぽっと出の発表なので視聴者が少なくてもわかるんだけど、その後のてらだよしおさんの発表もクラスメソッドさんのレポートを書いている人しかコメントしてなかったように思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dev.classmethod.jp/articles/jjug-ccc-2022-spring-azure-container-apps/">【レポート】k8s 疲れの方へ送る、k8s ベースのらくらくマイクロサービス動作基盤のご紹介 #jjug_ccc #jjug_ccc_c&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>オンラインイベントだからリアルタイムに視聴しないのか、日曜日または朝だから少ないのか、また機会があれば中の人にも聞いてみる。昨日の疲れもあって、会社ブログの記事を書いたら眠くなってきたので、午後から帰って寝てた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kazamori.jp/blogs/2022/06/19/custom-github-actions-by-java/">Java で作るカスタム GitHub Actions&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>ワーケーションの定義を教えてもらった</title><link>/diary/posts/2022/0618/</link><pubDate>Sat, 18 Jun 2022 09:33:27 +0900</pubDate><guid>/diary/posts/2022/0618/</guid><description>0時に寝て7時に起きた。前日は移動による運動量が多かったせいか、なぜかよく眠れた。
ストレッチ 今日は朝から調子よいなと思っていた通り、開脚幅は開始前161cmで、ストレッチ後163cmだった。ここ数週間は162cmが上限になっていたので久しぶりに163cmにになった。先週末に休息の時間を多めに取ったせいか、腰の張りもいつもよりは小さかったように思う。
カフーツさん訪問 ストレッチを終えてから神戸駅の近くのカフーツさんに行ってきた。コワーキングスペースのあるイベント でみかけた縁で ブログJelly Vol.120 に参加した。イベントの趣旨としてはブログを書いて、参加者に共有して、ブログの内容について参加者同士でコメントしあうといったもの。参加者は3人だったので必然的に濃いコミュニケーションになった。
私は、明日の jjug ccc 2022 の参加報告ブログの下書きを書いたものの、まだ公開はできないのでリポジトリにコミットした markdown を共有しつつ、既に公開済みのワーケーションの記事をイベントの参加者に共有してみた。いとうさんはワーケーションにも詳しい方なのでワーケーションの定義を間違えているよと教えてくれた。その間違いは私だけでなく、一般的 (日本？) にもよく誤解されているという。まず2泊3日のような短期の滞在をワーケーションとは呼ばない。
日本の「ワーケーション」という言葉の使い方は間違ってて、冒頭、お書きのように、海外で言うところのワーケーションは1ヶ月〜3ヶ月、そこに滞在して地元に溶け込んで観光ではなくて「余白」を作って楽しむ、というものなんですよね。バケーションなので。会社員はムリですが（はっきり言いますけど）、デジタルノマドなリモートワーカーは自分の時間と仕事をコントロールできるので全然OKなわけで、なのでみんな会社員やめたらいいのにと思ってます。
ぼくらの解釈は「余白」はあらかじめなにも予定しない時間、ということです。行った先の成り行きでやることを決める、そのための余剰の時間ですね。だから普段やらないことをやってもいいし、本読んで内省してもいいし、ボ〜っと一日過ごしてもいいし。でも、行った先の地元の人たちとつながる、そこに余白を使うことが望ましいと思います。でもそれも出会い頭が面白いですね。
ワーケーションについてなんやらかんやら雑談しているうちに、いとうさんもテンション上がってきて有料記事をプレゼントするからこれ読めってノリで記事を紹介していただいた。
106ヶ国からの入国許可と『絶対行くべき世界のコワーキング＆コリビングBEST20』が指し示すこれからのローカルコワーキング〜国内企業社員より海外のデジタルノマドにフォーカスしたコリビングのすすめ〜小さなコワーキングの作り方＃2 いとうさんと 「余白」 という概念について議論していて、ずっと自分の中にあった言語化できていなかった概念とも紐付いた。本当によいキーワードを知ることができた。ワーケーション中にはらさんと話していたときに 時間をかければできるものじゃないことをやった方がいい と感じことに言葉を割り当ててくれた。昔の開発と比べて、いまの開発は余裕やゆとりが全然ないと私は思っていて、開発者が自由に調査したり開発したりできなくなっているように感じている。それは「リーン」という概念が幅をきかせていて無駄を減らし、効率を上げることばかりを邁進した結果として「余白」もなくしてしまっているように思う。開発に限らず課題管理の文脈でも、メタ課題の抽出や分類・整理も、他人のチケットにコメントをすることも「余白」の1つと言えるかもしれない。
13時に訪問して、ブログを書き終わったのが15時過ぎで、それから17時過ぎまで適当に作業をやって、その後ビールを飲みながら3人で雑談していて、気付いたら23時20分になっていた。基本的に私は人見知りなので初対面の人たちとそんな長く話すこととかないんだけど、なぜか意気投合していろんな雑談をしていた。コワーキングやワーケーションという分野と課題管理の分野は交錯する点や共通点がいくつかあって、私が課題管理の文脈からこうじゃないか？と言うと、異なる視点からいとうさんが答えるみたいなやり取りになって盛り上がっていた。別分野の経験豊富な方と話すことで多くの気付きを得られるのも「余白」がもたらす価値と言えるのかもしれない。</description><content>&lt;p>0時に寝て7時に起きた。前日は移動による運動量が多かったせいか、なぜかよく眠れた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日は朝から調子よいなと思っていた通り、開脚幅は開始前161cmで、ストレッチ後163cmだった。ここ数週間は162cmが上限になっていたので久しぶりに163cmにになった。先週末に休息の時間を多めに取ったせいか、腰の張りもいつもよりは小さかったように思う。&lt;/p>
&lt;h2 id="カフーツさん訪問">カフーツさん訪問&lt;/h2>
&lt;p>ストレッチを終えてから神戸駅の近くのカフーツさんに行ってきた。&lt;a href="/diary/diary/posts/2021/1106/#神戸のコワーキングスペースの半歩先の未来を考える">コワーキングスペースのあるイベント&lt;/a> でみかけた縁で &lt;a href="https://www.facebook.com/events/5230405317039250">ブログJelly Vol.120&lt;/a> に参加した。イベントの趣旨としてはブログを書いて、参加者に共有して、ブログの内容について参加者同士でコメントしあうといったもの。参加者は3人だったので必然的に濃いコミュニケーションになった。&lt;/p>
&lt;p>私は、明日の jjug ccc 2022 の参加報告ブログの下書きを書いたものの、まだ公開はできないのでリポジトリにコミットした markdown を共有しつつ、既に公開済みのワーケーションの記事をイベントの参加者に共有してみた。いとうさんはワーケーションにも詳しい方なのでワーケーションの定義を間違えているよと教えてくれた。その間違いは私だけでなく、一般的 (日本？) にもよく誤解されているという。まず2泊3日のような短期の滞在をワーケーションとは呼ばない。&lt;/p>
&lt;blockquote>
&lt;p>日本の「ワーケーション」という言葉の使い方は間違ってて、冒頭、お書きのように、海外で言うところのワーケーションは1ヶ月〜3ヶ月、そこに滞在して地元に溶け込んで観光ではなくて「余白」を作って楽しむ、というものなんですよね。バケーションなので。会社員はムリですが（はっきり言いますけど）、デジタルノマドなリモートワーカーは自分の時間と仕事をコントロールできるので全然OKなわけで、なのでみんな会社員やめたらいいのにと思ってます。&lt;/p>
&lt;p>ぼくらの解釈は「余白」はあらかじめなにも予定しない時間、ということです。行った先の成り行きでやることを決める、そのための余剰の時間ですね。だから普段やらないことをやってもいいし、本読んで内省してもいいし、ボ〜っと一日過ごしてもいいし。でも、行った先の地元の人たちとつながる、そこに余白を使うことが望ましいと思います。でもそれも出会い頭が面白いですね。&lt;/p>
&lt;/blockquote>
&lt;p>ワーケーションについてなんやらかんやら雑談しているうちに、いとうさんもテンション上がってきて有料記事をプレゼントするからこれ読めってノリで記事を紹介していただいた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://note.com/kanzan10to9/n/nddd349a1a82c">106ヶ国からの入国許可と『絶対行くべき世界のコワーキング＆コリビングBEST20』が指し示すこれからのローカルコワーキング〜国内企業社員より海外のデジタルノマドにフォーカスしたコリビングのすすめ〜小さなコワーキングの作り方＃2&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>いとうさんと &lt;strong>「余白」&lt;/strong> という概念について議論していて、ずっと自分の中にあった言語化できていなかった概念とも紐付いた。本当によいキーワードを知ることができた。ワーケーション中にはらさんと話していたときに &lt;a href="/diary/diary/posts/2022/0604/#わたなべさん合流">時間をかければできるものじゃないことをやった方がいい&lt;/a> と感じことに言葉を割り当ててくれた。昔の開発と比べて、いまの開発は余裕やゆとりが全然ないと私は思っていて、開発者が自由に調査したり開発したりできなくなっているように感じている。それは「リーン」という概念が幅をきかせていて無駄を減らし、効率を上げることばかりを邁進した結果として「余白」もなくしてしまっているように思う。開発に限らず課題管理の文脈でも、メタ課題の抽出や分類・整理も、他人のチケットにコメントをすることも「余白」の1つと言えるかもしれない。&lt;/p>
&lt;p>13時に訪問して、ブログを書き終わったのが15時過ぎで、それから17時過ぎまで適当に作業をやって、その後ビールを飲みながら3人で雑談していて、気付いたら23時20分になっていた。基本的に私は人見知りなので初対面の人たちとそんな長く話すこととかないんだけど、なぜか意気投合していろんな雑談をしていた。コワーキングやワーケーションという分野と課題管理の分野は交錯する点や共通点がいくつかあって、私が課題管理の文脈からこうじゃないか？と言うと、異なる視点からいとうさんが答えるみたいなやり取りになって盛り上がっていた。別分野の経験豊富な方と話すことで多くの気付きを得られるのも「余白」がもたらす価値と言えるのかもしれない。&lt;/p></content></item><item><title>接待もどき</title><link>/diary/posts/2022/0617/</link><pubDate>Fri, 17 Jun 2022 19:15:58 +0900</pubDate><guid>/diary/posts/2022/0617/</guid><description>親戚と親の来訪 姪が体調悪くて病院で検査を受けるという話しで姉夫婦が車で神戸にやってきて、それに便乗して親もやってきた。朝から道案内したりとかしてた。お昼ご飯は ヒシミツ醤油 というお店に行った。週末とか前を通ると10人は並んでいる。なんでこんなに人気があるんだろう？とずっと不思議に思ってた。どうやら醤油も売っているんだけど、醤油によくあう和食の定食も食べられる飲食店らしい。ご飯が8種類あってお替り自由なのでバリエーションの広さを楽しめる。普通のランチよりちょっと贅沢な雰囲気がするので接待などにも向きそう。但し、ランチのピーク時間外さないと並ばないといけない。
その後、親戚のお土産に 亀井堂総本店のバターサンド を買ってきた。西元町にあるお店で、4年ほど前にたまたまお店の前の通りかかったきっかけで買ってみたらおいしかったのでそれからずっと印象に残っていて、4年ぶりに買ってみた。老舗のお菓子なので接待のお土産にはちょうどよさそうな気がする。たまたま親戚がきたから接待モードになってお店とお土産を開拓してた。
バッチ処理のプラットフォーム検討 昨日の続き。aws batch の機能説明や faq を読んでいたらよさそうなので触ってみた。事前に次の3つのリソースを設定しないといけない。
コンピューティング環境 ジョブキュー ジョブ定義 これらの設定をした後、ジョブというリソースを発行することでジョブ定義の処理が実行される。ecs, fargate, ec2, ec2 spot instace から環境を選べる。ec2 spot instance を使えば安くていいかと思っていたんだけど、セキュリティを考慮すると外部のよく分からんインスタンスでバッチ処理を実行するのは懸念があるなぁと思い始めてやめることにした。aws lambda の代わりに aws batch を使うのはセキュリティの懸念さえなければ悪くはないんだけど、インフラの面倒さはどっちも同じぐらいで immutable infrastructure でバッチ処理のようなものを作るのはなかなか面倒くさい。
チームメンバーと3つの選択肢について議論した。
aws batch を使う eks (k8s) を使う github actions を使う github actions の self-hosted runner に ec2 spot instance を使う記事もみかけた。これもいいかなと思ったんだけど、aws batch 同様、セキュリティの懸念は払拭できないのでダメだと断念した。
Extra CI flexibility with Github Runner on AWS Spot Instances 消去法で eks (k8s) でやることにした。CronJob を使って実装していくことになりそう。</description><content>&lt;h2 id="親戚と親の来訪">親戚と親の来訪&lt;/h2>
&lt;p>姪が体調悪くて病院で検査を受けるという話しで姉夫婦が車で神戸にやってきて、それに便乗して親もやってきた。朝から道案内したりとかしてた。お昼ご飯は &lt;a href="https://hisimitu.thebase.in/">ヒシミツ醤油&lt;/a> というお店に行った。週末とか前を通ると10人は並んでいる。なんでこんなに人気があるんだろう？とずっと不思議に思ってた。どうやら醤油も売っているんだけど、醤油によくあう和食の定食も食べられる飲食店らしい。ご飯が8種類あってお替り自由なのでバリエーションの広さを楽しめる。普通のランチよりちょっと贅沢な雰囲気がするので接待などにも向きそう。但し、ランチのピーク時間外さないと並ばないといけない。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0617_lunch.jpg"/>
&lt;/figure>
&lt;p>その後、親戚のお土産に &lt;a href="https://www.kameido.co.jp/tonowa-index.html">亀井堂総本店のバターサンド&lt;/a> を買ってきた。西元町にあるお店で、4年ほど前にたまたまお店の前の通りかかったきっかけで買ってみたらおいしかったのでそれからずっと印象に残っていて、4年ぶりに買ってみた。老舗のお菓子なので接待のお土産にはちょうどよさそうな気がする。たまたま親戚がきたから接待モードになってお店とお土産を開拓してた。&lt;/p>
&lt;h2 id="バッチ処理のプラットフォーム検討">バッチ処理のプラットフォーム検討&lt;/h2>
&lt;p>昨日の続き。aws batch の機能説明や faq を読んでいたらよさそうなので触ってみた。事前に次の3つのリソースを設定しないといけない。&lt;/p>
&lt;ul>
&lt;li>コンピューティング環境&lt;/li>
&lt;li>ジョブキュー&lt;/li>
&lt;li>ジョブ定義&lt;/li>
&lt;/ul>
&lt;p>これらの設定をした後、ジョブというリソースを発行することでジョブ定義の処理が実行される。ecs, fargate, ec2, ec2 spot instace から環境を選べる。ec2 spot instance を使えば安くていいかと思っていたんだけど、セキュリティを考慮すると外部のよく分からんインスタンスでバッチ処理を実行するのは懸念があるなぁと思い始めてやめることにした。aws lambda の代わりに aws batch を使うのはセキュリティの懸念さえなければ悪くはないんだけど、インフラの面倒さはどっちも同じぐらいで immutable infrastructure でバッチ処理のようなものを作るのはなかなか面倒くさい。&lt;/p>
&lt;p>チームメンバーと3つの選択肢について議論した。&lt;/p>
&lt;ul>
&lt;li>aws batch を使う&lt;/li>
&lt;li>eks (k8s) を使う&lt;/li>
&lt;li>github actions を使う&lt;/li>
&lt;/ul>
&lt;p>github actions の self-hosted runner に ec2 spot instance を使う記事もみかけた。これもいいかなと思ったんだけど、aws batch 同様、セキュリティの懸念は払拭できないのでダメだと断念した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.incredibuild.com/blog/extra-ci-flexibility-with-github-runner-on-aws-spot-instances">Extra CI flexibility with Github Runner on AWS Spot Instances&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>消去法で eks (k8s) でやることにした。&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/">CronJob&lt;/a> を使って実装していくことになりそう。&lt;/p></content></item><item><title>バッチ処理のインフラ構築に着手</title><link>/diary/posts/2022/0616/</link><pubDate>Thu, 16 Jun 2022 12:23:17 +0900</pubDate><guid>/diary/posts/2022/0616/</guid><description>0時に寝て5時に起きた。なんか体調がいまいちな雰囲気。
ブログ記事のレビュー 昨日の続き。会社ブログの担当者にもレビューも通って体裁を整えて会社ブログにも転記された。あとは情シスグループのリーダーレビューが最終チェックになるみたい。
aws batch バッチ処理のインフラを構築しようと考えていて、これまで aws lambda で作られているのが非効率だなと思うようになってきた。aws batch を使えないかを検討している。いまバッチ処理のための web api のエンドポイントを実装するスタイルになっていて、この流れでやっていくと将来的にバッチ処理が api サーバーに増えていく。たまたま負荷の高いバッチ処理と通常のリクエストがスパイクするとサーバーを過負荷にして通常業務に影響を及ぼす懸念がある。ec2 を作って cron でバッチ処理動かせばいいやんという気もするけど、せっかく cdk を使っているのでフルマネージドな仕組みで構築できればカッコいいなとも思ったりする。
インフレ研究会 たまたまみかけたので fin-py のインフレ研究会に参加した。前は twitter spaces でやっていて、私はスマホに twitter アプリが入っていないから参加しにくくて微妙だった。最近は brave talk でやっているのでパソコンからも参加しやすくなった。物価、金利、中央銀行の金融政策などの話しを私はまったくわからないのでほとんど聞いているだけ。聞いているうちに世の中のお金の流れが少しずつわかってくればいいかな。国債の値段が下がれば金利が上がるみたいなそういう話しを聞いてそうなんだという感じ。</description><content>&lt;p>0時に寝て5時に起きた。なんか体調がいまいちな雰囲気。&lt;/p>
&lt;h2 id="ブログ記事のレビュー">ブログ記事のレビュー&lt;/h2>
&lt;p>昨日の続き。会社ブログの担当者にもレビューも通って体裁を整えて会社ブログにも転記された。あとは情シスグループのリーダーレビューが最終チェックになるみたい。&lt;/p>
&lt;h2 id="aws-batch">aws batch&lt;/h2>
&lt;p>バッチ処理のインフラを構築しようと考えていて、これまで aws lambda で作られているのが非効率だなと思うようになってきた。&lt;a href="https://aws.amazon.com/jp/batch/">aws batch&lt;/a> を使えないかを検討している。いまバッチ処理のための web api のエンドポイントを実装するスタイルになっていて、この流れでやっていくと将来的にバッチ処理が api サーバーに増えていく。たまたま負荷の高いバッチ処理と通常のリクエストがスパイクするとサーバーを過負荷にして通常業務に影響を及ぼす懸念がある。ec2 を作って cron でバッチ処理動かせばいいやんという気もするけど、せっかく cdk を使っているのでフルマネージドな仕組みで構築できればカッコいいなとも思ったりする。&lt;/p>
&lt;h2 id="インフレ研究会">インフレ研究会&lt;/h2>
&lt;p>たまたまみかけたので &lt;a href="https://fin-py.connpass.com/">fin-py&lt;/a> のインフレ研究会に参加した。前は twitter spaces でやっていて、私はスマホに twitter アプリが入っていないから参加しにくくて微妙だった。最近は &lt;a href="https://brave.com/ja/talk/">brave talk&lt;/a> でやっているのでパソコンからも参加しやすくなった。物価、金利、中央銀行の金融政策などの話しを私はまったくわからないのでほとんど聞いているだけ。聞いているうちに世の中のお金の流れが少しずつわかってくればいいかな。国債の値段が下がれば金利が上がるみたいなそういう話しを聞いてそうなんだという感じ。&lt;/p></content></item><item><title>設計談義は楽しい</title><link>/diary/posts/2022/0615/</link><pubDate>Wed, 15 Jun 2022 10:58:36 +0900</pubDate><guid>/diary/posts/2022/0615/</guid><description>0時に寝て4時半に起きてだらだらして2度寝して8時に起きた。
jjug のセッションの紹介 jjug の公式アカウントがランダムにセッションのページを紹介している。私のセッションのリンクが今日ツィートされた。この日記を書いている時点で3つの「いいね」が付いている (1つは私なので除く) 。大して人気の出るような内容ではないし、なにかを期待しているわけでもないけど、誰からも関心を持たれなかったらそれはそれで発表者として寂しいなという気持ちもあって、ついつい見てしまった。ほんの2-3人でもいいから当日は発表を聴いてくれると嬉しい。そして、その流れで質問をしてくれればと考えている。もし当日、誰も聴いてくれなかったらスタッフの人が質問してくれるんやろか？
JJUG CCC 2022 Spring 6月19日開催
[Track C] 10:25- #jjug_ccc_c#jjug_ccc
Java で作るカスタム GitHub Actionshttps://t.co/cwpuR7dPmJ
&amp;mdash; JJUG (@JJUG) June 15, 2022 ブログ記事のレビュー 朝一で昨日書いた記事を読み返しながら推敲した。やっぱり一晩寝ると、文章の粗が目立ってみえて細かい表現をあちこち直していた。その後に身近な人たちに記事のレビューをお願いして、概ね問題なさそうなので会社ブログの担当者にもレビュー依頼した。その返事はまだ返ってきていない。
設計ミーティング 先週から始めた 設計ミーティング の2回目。時間は2時間も抑えられていて話題がなければ解散するといったやり方。今日もなんだかんだで2時間丸々話していた。うちらの開発チームは開発者で共有すべき開発情報や設計の考え方などの情報共有が不足しているんだなと、多くの時間を割いても話題が尽きないことからも実感した。私は設計を練るのが好きなのでそれ自体も楽しい。スクラムイベントで会議の時間が多い上にこのミーティングは追加で実務の時間を奪うという懸念が大いにある。しかし、2-3ヶ月やったらアプリケーションの設計や品質に何かしらよい影響を与えそうな雰囲気はしている。代わりに他のスクラムイベントを削ることはできないだろうか。</description><content>&lt;p>0時に寝て4時半に起きてだらだらして2度寝して8時に起きた。&lt;/p>
&lt;h2 id="jjug-のセッションの紹介">jjug のセッションの紹介&lt;/h2>
&lt;p>jjug の公式アカウントがランダムにセッションのページを紹介している。私のセッションのリンクが今日ツィートされた。この日記を書いている時点で3つの「いいね」が付いている (1つは私なので除く) 。大して人気の出るような内容ではないし、なにかを期待しているわけでもないけど、誰からも関心を持たれなかったらそれはそれで発表者として寂しいなという気持ちもあって、ついつい見てしまった。ほんの2-3人でもいいから当日は発表を聴いてくれると嬉しい。そして、その流れで質問をしてくれればと考えている。もし当日、誰も聴いてくれなかったらスタッフの人が質問してくれるんやろか？&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">JJUG CCC 2022 Spring 6月19日開催&lt;br>[Track C] 10:25- &lt;a href="https://twitter.com/hashtag/jjug_ccc_c?src=hash&amp;amp;ref_src=twsrc%5Etfw">#jjug_ccc_c&lt;/a>&lt;a href="https://twitter.com/hashtag/jjug_ccc?src=hash&amp;amp;ref_src=twsrc%5Etfw">#jjug_ccc&lt;/a>&lt;br>Java で作るカスタム GitHub Actions&lt;a href="https://t.co/cwpuR7dPmJ">https://t.co/cwpuR7dPmJ&lt;/a>&lt;/p>&amp;mdash; JJUG (@JJUG) &lt;a href="https://twitter.com/JJUG/status/1536868086938099715?ref_src=twsrc%5Etfw">June 15, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="ブログ記事のレビュー">ブログ記事のレビュー&lt;/h2>
&lt;p>朝一で昨日書いた記事を読み返しながら推敲した。やっぱり一晩寝ると、文章の粗が目立ってみえて細かい表現をあちこち直していた。その後に身近な人たちに記事のレビューをお願いして、概ね問題なさそうなので会社ブログの担当者にもレビュー依頼した。その返事はまだ返ってきていない。&lt;/p>
&lt;h2 id="設計ミーティング">設計ミーティング&lt;/h2>
&lt;p>先週から始めた &lt;a href="/diary/diary/posts/2022/0608/#開発チームで設計の話し">設計ミーティング&lt;/a> の2回目。時間は2時間も抑えられていて話題がなければ解散するといったやり方。今日もなんだかんだで2時間丸々話していた。うちらの開発チームは開発者で共有すべき開発情報や設計の考え方などの情報共有が不足しているんだなと、多くの時間を割いても話題が尽きないことからも実感した。私は設計を練るのが好きなのでそれ自体も楽しい。スクラムイベントで会議の時間が多い上にこのミーティングは追加で実務の時間を奪うという懸念が大いにある。しかし、2-3ヶ月やったらアプリケーションの設計や品質に何かしらよい影響を与えそうな雰囲気はしている。代わりに他のスクラムイベントを削ることはできないだろうか。&lt;/p></content></item><item><title>ゴーストライター</title><link>/diary/posts/2022/0614/</link><pubDate>Tue, 14 Jun 2022 10:03:44 +0900</pubDate><guid>/diary/posts/2022/0614/</guid><description>0時に寝て6時に起きた。夜になにか作業をしようと考えていたけど、帰って晩ご飯食べたらだらだらしてた。
ブログ記事の執筆 今度の jjug ccc にチームの同僚と一緒に登壇する。同僚の発表スライドをみていて15分で話すには詳細を説明できないことに気付いた。せっかくイベントで発表して、よいプラクティスもできたのにもったいないとか思い始めて、発表の補足資料となるブログ記事を書きたいと私が言い始めた。先方ものってきてくれて、会社ブログを管理している社内の担当者を紹介してくれてそこに技術記事を書こうという打ち合わせをした。聞くところによると会社のテックブログはまだなく、技術記事も1つもないという話し。今回が初めての技術記事を公開する試みになるらしい。それはともかく、note の新エディタ が使えるようになっていたので初めて試してみた。新エディタの紹介記事を眺めてて画像のキャプションも入れられるようになったのにも気付いた。箇条書きの機能が増えたところはよいけど、勝手に段落がフォーマットされる感じが私の好みではない。エディタが勝手にフォーマットするのではなく、書き手が明示的に指示したときだけフォーマットされるような仕組みを私は好む。とはいえ、一般人は自動的によしなにやってくれる方がよいのかもしれない。半日ぐらいあーでもない、こーでもないと試行錯誤しながら一通りアウトラインに沿った草稿を書き上げた。</description><content>&lt;p>0時に寝て6時に起きた。夜になにか作業をしようと考えていたけど、帰って晩ご飯食べたらだらだらしてた。&lt;/p>
&lt;h2 id="ブログ記事の執筆">ブログ記事の執筆&lt;/h2>
&lt;p>今度の jjug ccc にチームの同僚と一緒に登壇する。同僚の発表スライドをみていて15分で話すには詳細を説明できないことに気付いた。せっかくイベントで発表して、よいプラクティスもできたのにもったいないとか思い始めて、発表の補足資料となるブログ記事を書きたいと私が言い始めた。先方ものってきてくれて、会社ブログを管理している社内の担当者を紹介してくれてそこに技術記事を書こうという打ち合わせをした。聞くところによると会社のテックブログはまだなく、技術記事も1つもないという話し。今回が初めての技術記事を公開する試みになるらしい。それはともかく、&lt;a href="https://note.com/info/n/nfa4a65bd08ea">note の新エディタ&lt;/a> が使えるようになっていたので初めて試してみた。新エディタの紹介記事を眺めてて画像のキャプションも入れられるようになったのにも気付いた。箇条書きの機能が増えたところはよいけど、勝手に段落がフォーマットされる感じが私の好みではない。エディタが勝手にフォーマットするのではなく、書き手が明示的に指示したときだけフォーマットされるような仕組みを私は好む。とはいえ、一般人は自動的によしなにやってくれる方がよいのかもしれない。半日ぐらいあーでもない、こーでもないと試行錯誤しながら一通りアウトラインに沿った草稿を書き上げた。&lt;/p></content></item><item><title>データベースを介したテストではまった話し</title><link>/diary/posts/2022/0613/</link><pubDate>Mon, 13 Jun 2022 10:20:17 +0900</pubDate><guid>/diary/posts/2022/0613/</guid><description>1時に寝て7時に起きた。帰りにふらっと仲のよい焼き鳥屋さんに寄ったらちょっとしたハプニングがあって長居してしまった。他に来ていたお客さんのカップルが別れ話を始め、こじれてややこしい状況になって、この騒動が一段落しないと席を立てない空気になってしまって終わるのを待ってた。マスターの知り合いらしくて、そのお客さんが帰ってから当事者たちの背景を聞いたりしてた。人生いろいろあるよなぁ。
spring の Transactional アノテーション spring フレームワークには Transactional というアノテーションがある。SpringBootTest を使ったテストのときに使うと、テストメソッドの終了時に自動的にデータベースへの書き込みがロールバックされて便利なことを テストコードのリファクタリング をしていたときに気付いた。
スレッドプールを使ってマルチスレッドで並行実行する処理を書いてそのテストを書いてみたら意図した結果にならない。なんでだろう？と2時間ほどはまってデバッグしていた。テストデータの書き込みが、実際にはデータベースにコミットされていないので、テストを実行しているスレッド以外のワーカースレッドからデータベースにアクセスしてもテストデータを参照できないからだと気付いた。データベースのトランザクションに細工すると、こういうはまりどころがあるなぁと気付いて Transactional を使わずに普通にテストを書いた。その分、自分でテストメソッドが呼ばれてコミットされたテストデータを削除する必要がある。調べていたときに他にも副作用がいろいろあるよという記事もみつけた。
Don’t Use @Transactional in Tests</description><content>&lt;p>1時に寝て7時に起きた。帰りにふらっと仲のよい焼き鳥屋さんに寄ったらちょっとしたハプニングがあって長居してしまった。他に来ていたお客さんのカップルが別れ話を始め、こじれてややこしい状況になって、この騒動が一段落しないと席を立てない空気になってしまって終わるのを待ってた。マスターの知り合いらしくて、そのお客さんが帰ってから当事者たちの背景を聞いたりしてた。人生いろいろあるよなぁ。&lt;/p>
&lt;h2 id="spring-の-transactional-アノテーション">spring の Transactional アノテーション&lt;/h2>
&lt;p>spring フレームワークには &lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html">Transactional&lt;/a> というアノテーションがある。&lt;a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html">SpringBootTest&lt;/a> を使ったテストのときに使うと、テストメソッドの終了時に自動的にデータベースへの書き込みがロールバックされて便利なことを &lt;a href="/diary/diary/posts/2022/0208/#テストコードのリファクタリング">テストコードのリファクタリング&lt;/a> をしていたときに気付いた。&lt;/p>
&lt;p>スレッドプールを使ってマルチスレッドで並行実行する処理を書いてそのテストを書いてみたら意図した結果にならない。なんでだろう？と2時間ほどはまってデバッグしていた。テストデータの書き込みが、実際にはデータベースにコミットされていないので、テストを実行しているスレッド以外のワーカースレッドからデータベースにアクセスしてもテストデータを参照できないからだと気付いた。データベースのトランザクションに細工すると、こういうはまりどころがあるなぁと気付いて Transactional を使わずに普通にテストを書いた。その分、自分でテストメソッドが呼ばれてコミットされたテストデータを削除する必要がある。調べていたときに他にも副作用がいろいろあるよという記事もみつけた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dev.to/henrykeys/don-t-use-transactional-in-tests-40eb">Don’t Use @Transactional in Tests&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>オーディオコンテンツにお金を払う</title><link>/diary/posts/2022/0612/</link><pubDate>Sun, 12 Jun 2022 09:40:38 +0900</pubDate><guid>/diary/posts/2022/0612/</guid><description>前日の夕方から寝たり起きたりでたくさん寝て7時に起きた。体力を回復した。
ワーケーション記事の執筆 せっかくの機会なので会社ブログにもワーケーションのふりかえりを書いた。
ワーケーション -城崎温泉- いまのところ、会社のサイトをみてお仕事が来るような会社でもないんだけど、今後のマーケティングをしていく中でどんな会社なのかをみられることも増えていくと思う。そのときに会社という法人の人となりがわかるようなコンテンツがたくさんあるとよいのではないかとも考えている。基本的には技術記事をメインにするつもりだけど、たまにはそうじゃない記事もあるのはよいだろう。最近はお仕事ばかりで全然、技術記事を書けていない。私は書くのが遅いので、書けることや書きたいことに対して10分の1ぐらいしか書けず、コンテンツがまったく育たない。今後のマーケティングの課題でもあるなぁ。
プレミアムリスナーになってみた いつからかな？2016年か2017年と思ってバックナンバーを遡って最初の放送を調べたら2017年5月30日が初回の放送だった。おそらく初期の時期から聴き始めたように思う。ベンチャーニュースで言いたい放題 というオーディオコンテンツがある。パーソナリティの話しがおもしろくて2-3年は聴いていた。起業した前後で余裕がなくて聴いていない時期が1年ほどあるけど、最近また余裕をもてるようになったので聴き始めた。5年前からずっと続いているし、いまも私が聴きたいと思うコンテンツを提供していることのすごさを実感する。そういった敬意も含めて プレミアムリスナー になることにした。購入はアプリ経由だと1480円、web 経由だと1000円になる。プラットフォームの制約があるのだろうけど、こんなことして apple に怒られないのかな？と心配になる。web 経由の方がお得ですよと普通に書いてある。プレミアムリスナーになると、プレミアムコンテンツを聴けるようになるが、おそらく配信されたばかりは期間限定で誰でも聴けて、時間が経ったらプレミアムリスナーしか聴けなくなるようなコンテンツにみえる。いままで何年も聴いてきたのと、今後も続けてほしいという願いも込めての料金支払いなので私はとくに不満はない。
私はいろんな仕事やプロジェクトを転々としてきたのもあり、何年も同じことをずっと続けていることそのものに尊敬の念がある。ベンチャーニュースで言いたい放題は5年継続していることになる。5年も続くとコンテンツそのものの価値や信頼、それに関するスキルもすごく上達すると思う。これまで私はプログラミングという文脈ではスキルを磨いてきたが、コンテンツを作っていくというところは素人なのでそういうところを見習いたいと考えている。そんなことも考えながら、気に入っているオーディオコンテンツにお金を払うことに決めた。</description><content>&lt;p>前日の夕方から寝たり起きたりでたくさん寝て7時に起きた。体力を回復した。&lt;/p>
&lt;h2 id="ワーケーション記事の執筆">ワーケーション記事の執筆&lt;/h2>
&lt;p>せっかくの機会なので会社ブログにもワーケーションのふりかえりを書いた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kazamori.jp/blogs/2022/06/12/workcation-kinosaki/">ワーケーション -城崎温泉-&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>いまのところ、会社のサイトをみてお仕事が来るような会社でもないんだけど、今後のマーケティングをしていく中でどんな会社なのかをみられることも増えていくと思う。そのときに会社という法人の人となりがわかるようなコンテンツがたくさんあるとよいのではないかとも考えている。基本的には技術記事をメインにするつもりだけど、たまにはそうじゃない記事もあるのはよいだろう。最近はお仕事ばかりで全然、技術記事を書けていない。私は書くのが遅いので、書けることや書きたいことに対して10分の1ぐらいしか書けず、コンテンツがまったく育たない。今後のマーケティングの課題でもあるなぁ。&lt;/p>
&lt;h2 id="プレミアムリスナーになってみた">プレミアムリスナーになってみた&lt;/h2>
&lt;p>いつからかな？2016年か2017年と思ってバックナンバーを遡って最初の放送を調べたら2017年5月30日が初回の放送だった。おそらく初期の時期から聴き始めたように思う。&lt;a href="https://voicy.jp/channel/32">ベンチャーニュースで言いたい放題&lt;/a> というオーディオコンテンツがある。パーソナリティの話しがおもしろくて2-3年は聴いていた。起業した前後で余裕がなくて聴いていない時期が1年ほどあるけど、最近また余裕をもてるようになったので聴き始めた。5年前からずっと続いているし、いまも私が聴きたいと思うコンテンツを提供していることのすごさを実感する。そういった敬意も含めて &lt;a href="https://service.voicy.jp/premium-listener">プレミアムリスナー&lt;/a> になることにした。購入はアプリ経由だと1480円、web 経由だと1000円になる。プラットフォームの制約があるのだろうけど、こんなことして apple に怒られないのかな？と心配になる。web 経由の方がお得ですよと普通に書いてある。プレミアムリスナーになると、プレミアムコンテンツを聴けるようになるが、おそらく配信されたばかりは期間限定で誰でも聴けて、時間が経ったらプレミアムリスナーしか聴けなくなるようなコンテンツにみえる。いままで何年も聴いてきたのと、今後も続けてほしいという願いも込めての料金支払いなので私はとくに不満はない。&lt;/p>
&lt;p>私はいろんな仕事やプロジェクトを転々としてきたのもあり、何年も同じことをずっと続けていることそのものに尊敬の念がある。ベンチャーニュースで言いたい放題は5年継続していることになる。5年も続くとコンテンツそのものの価値や信頼、それに関するスキルもすごく上達すると思う。これまで私はプログラミングという文脈ではスキルを磨いてきたが、コンテンツを作っていくというところは素人なのでそういうところを見習いたいと考えている。そんなことも考えながら、気に入っているオーディオコンテンツにお金を払うことに決めた。&lt;/p></content></item><item><title>ワーケーションの精算</title><link>/diary/posts/2022/0611/</link><pubDate>Sat, 11 Jun 2022 09:38:08 +0900</pubDate><guid>/diary/posts/2022/0611/</guid><description>1時に寝て7時に起きた。ふとんなしで寝ても寒くない季節になった。天気も悪かったので15時ぐらいから帰って、ドラクエタクトしたり、読み溜めてた LINE マンガ読んだり、疲れたら寝たりして普通に休んでた。
ストレッチ 今週はバテバテになっていて、先週から引き続き、右股関節や右腰に張りが強い。右側が少し前に出たような形状になっているらしく、姿勢か癖かで右側に負荷が偏るなにかになっているみたい。今日の開脚幅は開始前159cmで、ストレッチ後161cmだった。現状維持といったところ。今週末は休もうと思っている。参考がてらトレーナーさんに休むときにどうするかを聞いてみた。ジムへ行って運動した後、それから考えるらしい。私の場合、起きたらひとまずオフィスへ行ってなんか調べものして過ごすことが多い。サードプレイスへ出掛けるのはわりと多くの人に共通する行動なのかなとか思えた。
ワーケーションの精算 今週はバタバタしていてまったく余裕がなかった。ワーケーションのお金の精算をした。同行者からも料金の一部を徴収しているのでこの金額すべてが経費ではない。食費や入浴料金、お土産を除くと次になる。
宿泊費 (県民割引を適用後) 1泊目: 26,000 (3人) 2泊目: 27,000 (4人) 交通費 レンタカー: 23,760 ガソリン代: 2,424 高速道路代: 5,230 駐車場代: 800 接待 居酒屋: 9,200 合計: 94,414 入浴料金を会社の経費にできるかどうかは福利厚生費ならできるらしい。但し、うちは社員がいないので福利厚生費を計上できない。原則として役員には福利厚生費を適用できない。福利厚生とは社員の生活や仕事の充実や向上を目的とするため、役員はそれを提供する側になる。とはいえ、役員と社員が一緒に利用する妥当な金額の福利厚生費なら認められるらしい。
役員に福利厚生は存在しない？迷いやすいポイントを解説 高速道路の料金を etc の利用履歴から取得できないかな？と考えてググると、ETC利用照会サービス というのをみつけた。初期登録するにはカード番号と直近の利用履歴、車両番号と車載器管理番号が必要になる。レンタカーの領収書には車載器管理番号までは記載されていなかったので店舗に電話して尋ねると快く教えてくれた。これでETC利用照会サービスに登録できたものの、登録後に利用明細が表示されるまで4時間かかるという。バッチ処理のタイミングなのか、なにかわからないけど、4時間は長過ぎでしょとか思いながら待った。待った甲斐があって明細は csv と pdf 出力できた。記録としてデータを残す上でダウンロード機能はありがたい。</description><content>&lt;p>1時に寝て7時に起きた。ふとんなしで寝ても寒くない季節になった。天気も悪かったので15時ぐらいから帰って、ドラクエタクトしたり、読み溜めてた LINE マンガ読んだり、疲れたら寝たりして普通に休んでた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週はバテバテになっていて、先週から引き続き、右股関節や右腰に張りが強い。右側が少し前に出たような形状になっているらしく、姿勢か癖かで右側に負荷が偏るなにかになっているみたい。今日の開脚幅は開始前159cmで、ストレッチ後161cmだった。現状維持といったところ。今週末は休もうと思っている。参考がてらトレーナーさんに休むときにどうするかを聞いてみた。ジムへ行って運動した後、それから考えるらしい。私の場合、起きたらひとまずオフィスへ行ってなんか調べものして過ごすことが多い。サードプレイスへ出掛けるのはわりと多くの人に共通する行動なのかなとか思えた。&lt;/p>
&lt;h2 id="ワーケーションの精算">ワーケーションの精算&lt;/h2>
&lt;p>今週はバタバタしていてまったく余裕がなかった。ワーケーションのお金の精算をした。同行者からも料金の一部を徴収しているのでこの金額すべてが経費ではない。食費や入浴料金、お土産を除くと次になる。&lt;/p>
&lt;ul>
&lt;li>宿泊費 (県民割引を適用後)
&lt;ul>
&lt;li>1泊目: 26,000 (3人)&lt;/li>
&lt;li>2泊目: 27,000 (4人)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>交通費
&lt;ul>
&lt;li>レンタカー: 23,760&lt;/li>
&lt;li>ガソリン代: 2,424&lt;/li>
&lt;li>高速道路代: 5,230&lt;/li>
&lt;li>駐車場代: 800&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>接待
&lt;ul>
&lt;li>居酒屋: 9,200&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>合計: 94,414&lt;/li>
&lt;/ul>
&lt;p>入浴料金を会社の経費にできるかどうかは福利厚生費ならできるらしい。但し、うちは社員がいないので福利厚生費を計上できない。原則として役員には福利厚生費を適用できない。福利厚生とは社員の生活や仕事の充実や向上を目的とするため、役員はそれを提供する側になる。とはいえ、役員と社員が一緒に利用する妥当な金額の福利厚生費なら認められるらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.reloclub.jp/relotimes/article/14803">役員に福利厚生は存在しない？迷いやすいポイントを解説&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>高速道路の料金を etc の利用履歴から取得できないかな？と考えてググると、&lt;a href="https://www.etc-meisai.jp/index.html">ETC利用照会サービス&lt;/a> というのをみつけた。初期登録するにはカード番号と直近の利用履歴、車両番号と車載器管理番号が必要になる。レンタカーの領収書には車載器管理番号までは記載されていなかったので店舗に電話して尋ねると快く教えてくれた。これでETC利用照会サービスに登録できたものの、登録後に利用明細が表示されるまで4時間かかるという。バッチ処理のタイミングなのか、なにかわからないけど、4時間は長過ぎでしょとか思いながら待った。待った甲斐があって明細は csv と pdf 出力できた。記録としてデータを残す上でダウンロード機能はありがたい。&lt;/p></content></item><item><title>リファクタリングとオブジェクト指向プログラミング</title><link>/diary/posts/2022/0610/</link><pubDate>Fri, 10 Jun 2022 08:52:31 +0900</pubDate><guid>/diary/posts/2022/0610/</guid><description>0時に寝て8時に起きた。先週末の疲れが溜まってバテバテ。直近の1週間で睡眠時間が短いときは3-4時間しか寝てないのでなんか朝起きれなくて調子悪いなと思ったら単純に睡眠不足よね。なんか安心した。
既存ロジックのリファクタリング ちょっと前にタイムラインで「値オブジェクト」の定義の話題で盛り上がっていた。私は詳しくないのでどちらが正しいのかの白黒を付けられないが、値オブジェクトがどういうものかの定義を知らなくても、オブジェクト指向プログラミングとしてデータ + メソッドでカプセル化していくモジュールの概念からすると普通のことであって、それの特殊ケースに名前が付いている・付いていないという議論だったのではないかと思う。
今日たまたま既存のある処理に機能を拡張するため、既存のコードを読んでいて、ロジックを扱うコンポーネントが肥大化していて、ここに手を入れていくとさらにコードの見通しが悪くなるように思えた。そのロジックコンポーネントの半分は出力用の DTO を生成する処理が占めていて、DTO を生成する処理をオブジェクトとして切り出すことでロジックコンポーネントを半分に分割できることに気付いた。パラメーターとして7つの値をそのオブジェクトの入力として、そのオブジェクトの内部であれこれやって、最終的に必要な DTO を出力できればよい。1つのコンポーネントを2つのコンポーネントに分割したことで、それぞれのコンポーネントのスコープにおけるメソッドが半分になったというだけの話し。一般的なカプセル化の話し。難しい話しをしなくても設計やオブジェクト指向プログラミングの基本的な考え方などをメンバーに教えていければいいんだけど、私はあくまで協力会社のお手伝いなので、教える業務は担っていない。次の契約更新のときにインフラやプログラミングを経験の浅い人たちに教えましょうか？みたいな話しもしたいと考えている。</description><content>&lt;p>0時に寝て8時に起きた。先週末の疲れが溜まってバテバテ。直近の1週間で睡眠時間が短いときは3-4時間しか寝てないのでなんか朝起きれなくて調子悪いなと思ったら単純に睡眠不足よね。なんか安心した。&lt;/p>
&lt;h2 id="既存ロジックのリファクタリング">既存ロジックのリファクタリング&lt;/h2>
&lt;p>ちょっと前にタイムラインで「値オブジェクト」の定義の話題で盛り上がっていた。私は詳しくないのでどちらが正しいのかの白黒を付けられないが、値オブジェクトがどういうものかの定義を知らなくても、オブジェクト指向プログラミングとしてデータ + メソッドでカプセル化していくモジュールの概念からすると普通のことであって、それの特殊ケースに名前が付いている・付いていないという議論だったのではないかと思う。&lt;/p>
&lt;p>今日たまたま既存のある処理に機能を拡張するため、既存のコードを読んでいて、ロジックを扱うコンポーネントが肥大化していて、ここに手を入れていくとさらにコードの見通しが悪くなるように思えた。そのロジックコンポーネントの半分は出力用の DTO を生成する処理が占めていて、DTO を生成する処理をオブジェクトとして切り出すことでロジックコンポーネントを半分に分割できることに気付いた。パラメーターとして7つの値をそのオブジェクトの入力として、そのオブジェクトの内部であれこれやって、最終的に必要な DTO を出力できればよい。1つのコンポーネントを2つのコンポーネントに分割したことで、それぞれのコンポーネントのスコープにおけるメソッドが半分になったというだけの話し。一般的なカプセル化の話し。難しい話しをしなくても設計やオブジェクト指向プログラミングの基本的な考え方などをメンバーに教えていければいいんだけど、私はあくまで協力会社のお手伝いなので、教える業務は担っていない。次の契約更新のときにインフラやプログラミングを経験の浅い人たちに教えましょうか？みたいな話しもしたいと考えている。&lt;/p></content></item><item><title>コンテンツは狙ってバズらない</title><link>/diary/posts/2022/0609/</link><pubDate>Thu, 09 Jun 2022 13:02:23 +0900</pubDate><guid>/diary/posts/2022/0609/</guid><description>1時に寝て8時に起きた。昨晩はたくさん話してテンション上がって眠れなくてバテ気味。
serverless framework から cdk 移行の背景 木曜日はスプリントレビューがある。ステークホルダーが出席する唯一のスプリントイベントなので、大半はステークホルダーとの情報共有や質疑応答、プロジェクトにとっての大きい括りでの現状の共有になる。大半はお手伝い先の社員さん同士のやり取りで、協力会社の開発者は詳細が必要になったときだけ説明するといったイベント。前スプリントで 既存の lambda 関数を serverless framework から cdk へ移行 した。プロジェクトメンバーではないのだけど、業務のリーダークラスの方が cdk に関心をもって質問してくれた。聞くところによると、他プロジェクトでも cdk を使うようになってきているらしく、なぜいま移行しているのか？という質問だった。普段インフラ作業を孤独にやっているのもあって、業務の人が関心を示してくれたのが嬉しくて、変なスイッチが入っていろいろ説明した。serverless framework は2015年10月リリース、cdk は2018年7月リリースで、歴史的に serverless framework が普及して、その後に cdk が台頭してきたので実績や機能性から serverless framework が広く利用されている。但し、いま aws のインフラ管理をするのであれば、cdk は serverless framework 以上の管理ができることから cdk に一元管理した方がツールの学習コストを減らし、保守コストを下げることにつながるといった話しを丁寧に説明した。相手がそこまでの回答を求めていたかはわからないけど、関心を示してくれたことそのもので私が救われた気がした。
terapyon channel のコンテンツ公開 昨日の今日で公開された。ほとんど無編集だったのかな。web サイトのコンテンツ紹介の内容も手伝って夕方には公開された。
Podcast terapyon channel 「#58 もりもとさんの年1ゲスト会 マイクロ法人と開発ワークフローのカイゼン話ほか」を共有 https://t.co/aQfbuA6XrO #terapyon_channel
&amp;mdash; terapyon (@terapyon) June 9, 2022 私の中ではいろんな話題を楽しく話せて充実感があった。一部にだけ関心をもつ人にも聞きたいところだけ聞けていいんじゃないかと思えた。基本的に自分の podcast を聞き直すことはないんだけど、今回は自分が充実感をもって話せたせいか、2回ほど聞き直しておもしろい話だなぁと自画自賛してた (笑) 。自分がよいものは周りもそう思うはずだと、ついつい先入観で考えがちだけど、全然そうじゃなかった。全くいいねがつかなかったので周りからみたら私の自己満足のコンテンツでしかなかった (笑) 。コンテンツあるあるだけど、狙ってコンテンツをバズらせるのは難しい。ブログでもがんばって書いた記事が全く読まれないことはあるし、手間暇かけずに軽く書いた記事がめっちゃバズったこともある。コンテンツがバズるかどうかは、最初にみた人たちが拡散するかにも依ってくる。いずれにしても、他者が関心をもつようなコンテンツかどうかは本人ではわからないというのは確かかな。
今期から会社のマーケティングも少しずつやっていく予定になる。自分がよいと思ったコンテンツに全く関心を示されないことは今後も多々あるだろう。作ったコンテンツを多くの人に見聞きしてもらおうと思ったらやることは1つだけで、当たるまでひたすら作り続けて、いつか当たるのを気長に待つという戦略しか、いまのところ思いつかない。</description><content>&lt;p>1時に寝て8時に起きた。昨晩はたくさん話してテンション上がって眠れなくてバテ気味。&lt;/p>
&lt;h2 id="serverless-framework-から-cdk-移行の背景">serverless framework から cdk 移行の背景&lt;/h2>
&lt;p>木曜日はスプリントレビューがある。ステークホルダーが出席する唯一のスプリントイベントなので、大半はステークホルダーとの情報共有や質疑応答、プロジェクトにとっての大きい括りでの現状の共有になる。大半はお手伝い先の社員さん同士のやり取りで、協力会社の開発者は詳細が必要になったときだけ説明するといったイベント。前スプリントで &lt;a href="/diary/diary/posts/2022/0601/#mvpminimum-viable-productで対応した">既存の lambda 関数を serverless framework から cdk へ移行&lt;/a> した。プロジェクトメンバーではないのだけど、業務のリーダークラスの方が cdk に関心をもって質問してくれた。聞くところによると、他プロジェクトでも cdk を使うようになってきているらしく、なぜいま移行しているのか？という質問だった。普段インフラ作業を孤独にやっているのもあって、業務の人が関心を示してくれたのが嬉しくて、変なスイッチが入っていろいろ説明した。serverless framework は2015年10月リリース、cdk は2018年7月リリースで、歴史的に serverless framework が普及して、その後に cdk が台頭してきたので実績や機能性から serverless framework が広く利用されている。但し、いま aws のインフラ管理をするのであれば、cdk は serverless framework 以上の管理ができることから cdk に一元管理した方がツールの学習コストを減らし、保守コストを下げることにつながるといった話しを丁寧に説明した。相手がそこまでの回答を求めていたかはわからないけど、関心を示してくれたことそのもので私が救われた気がした。&lt;/p>
&lt;h2 id="terapyon-channel-のコンテンツ公開">terapyon channel のコンテンツ公開&lt;/h2>
&lt;p>昨日の今日で公開された。ほとんど無編集だったのかな。web サイトのコンテンツ紹介の内容も手伝って夕方には公開された。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">Podcast terapyon channel 「#58 もりもとさんの年1ゲスト会 マイクロ法人と開発ワークフローのカイゼン話ほか」を共有 &lt;a href="https://t.co/aQfbuA6XrO">https://t.co/aQfbuA6XrO&lt;/a> &lt;a href="https://twitter.com/hashtag/terapyon_channel?src=hash&amp;amp;ref_src=twsrc%5Etfw">#terapyon_channel&lt;/a>&lt;/p>&amp;mdash; terapyon (@terapyon) &lt;a href="https://twitter.com/terapyon/status/1534817292080451584?ref_src=twsrc%5Etfw">June 9, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>私の中ではいろんな話題を楽しく話せて充実感があった。一部にだけ関心をもつ人にも聞きたいところだけ聞けていいんじゃないかと思えた。基本的に自分の podcast を聞き直すことはないんだけど、今回は自分が充実感をもって話せたせいか、2回ほど聞き直しておもしろい話だなぁと自画自賛してた (笑) 。自分がよいものは周りもそう思うはずだと、ついつい先入観で考えがちだけど、全然そうじゃなかった。全くいいねがつかなかったので周りからみたら私の自己満足のコンテンツでしかなかった (笑) 。コンテンツあるあるだけど、狙ってコンテンツをバズらせるのは難しい。ブログでもがんばって書いた記事が全く読まれないことはあるし、手間暇かけずに軽く書いた記事がめっちゃバズったこともある。コンテンツがバズるかどうかは、最初にみた人たちが拡散するかにも依ってくる。いずれにしても、他者が関心をもつようなコンテンツかどうかは本人ではわからないというのは確かかな。&lt;/p>
&lt;p>今期から会社のマーケティングも少しずつやっていく予定になる。自分がよいと思ったコンテンツに全く関心を示されないことは今後も多々あるだろう。作ったコンテンツを多くの人に見聞きしてもらおうと思ったらやることは1つだけで、当たるまでひたすら作り続けて、いつか当たるのを気長に待つという戦略しか、いまのところ思いつかない。&lt;/p></content></item><item><title>書いた後に話して</title><link>/diary/posts/2022/0608/</link><pubDate>Wed, 08 Jun 2022 11:18:03 +0900</pubDate><guid>/diary/posts/2022/0608/</guid><description>3時に寝て7時に起きた。ワーケーションの記事まとめで1時ぐらいまでオフィスにいたので帰ってきてから寝るのが遅くなった。
開発チームで設計の話し 昨日のスクラムイベントのふりかえりでスプリントゴール未達の話題があった。うちのチームはスプリントが1週間と短いのもあるけど、スプリントゴールが未達になることがままある。というか、メンバーも本当の意味でスプリントゴールを守ろうとしていない。守れそうにないと分かっても残業も延期もせずに最終日を迎えて未達で終わるだけでしかない。それはともかく、ゴールに含めるタスクの見積もりの精度が悪いのではないかという話題が出たときに、私の周りではプランニングにもっと時間を割いてがっつり設計までやるという話しを聞くので、うちらのプランニングはチケットを選択して適当に割り当てたストーリーポイントで曖昧な見積もりをしているのでそれが悪いのではないかという意見を上げた。そしたら開発者だけで設計のミーティングをやろうという話しになって、今日から毎週やっていくのかな。会議が増えて実務をやる時間が減るというデメリットはあるものの、チームとして学ぶ時間が少ないとは前から思っていたので、チームとして学びの時間を使ってメンバーのスキルを高めていくきっかけの1つとしてはよいかもしれないと思った。あるチケットで議論していて、本質的にはどうなるべき？という議論をして、直近のマイルストーンでは実装できないが将来的に対応するときのためにチケットを作っておいたりした。そういう1つずつの積み重ねが将来の品質をあげていく糧になる。開発者だけで設計という枠組で話すこと自体は大事な時間だとは思えた。
terapyon channel の収録 21時過ぎから terapyon channel の収録を行った。たまたまだけど、私は年に1回出演していて、今後もそのペースがいいなという思えた。6月は法人決算を終えて気楽になっているし、1年に1回なら近況報告として話題もたくさんある。前回からのツールのアップグレードとして iris というツールで収録した。これまではローカルで音声ファイルを録音して、終わった後に寺田さんへその録音ファイルを送信していた。iris を使うと、ブラウザだけでそれをやってくれるのでゲスト側の作業が減ってお手軽になる。ホスト側もゲスト側で録音に失敗するという最悪の事態のリスクを軽減できるので望ましいという。iris のホスト側の画面にはゲスト側の音声が録音されていることを表すインジケーターもみえるらしい。それが安心感を与えているとのこと。久しぶりに寺田さんと話して、podcast の収録というよりも寺田さんと普通に近況の雑談をしたぐらいの感覚でしかない。</description><content>&lt;p>3時に寝て7時に起きた。ワーケーションの記事まとめで1時ぐらいまでオフィスにいたので帰ってきてから寝るのが遅くなった。&lt;/p>
&lt;h2 id="開発チームで設計の話し">開発チームで設計の話し&lt;/h2>
&lt;p>昨日のスクラムイベントのふりかえりでスプリントゴール未達の話題があった。うちのチームはスプリントが1週間と短いのもあるけど、スプリントゴールが未達になることがままある。というか、メンバーも本当の意味でスプリントゴールを守ろうとしていない。守れそうにないと分かっても残業も延期もせずに最終日を迎えて未達で終わるだけでしかない。それはともかく、ゴールに含めるタスクの見積もりの精度が悪いのではないかという話題が出たときに、私の周りではプランニングにもっと時間を割いてがっつり設計までやるという話しを聞くので、うちらのプランニングはチケットを選択して適当に割り当てたストーリーポイントで曖昧な見積もりをしているのでそれが悪いのではないかという意見を上げた。そしたら開発者だけで設計のミーティングをやろうという話しになって、今日から毎週やっていくのかな。会議が増えて実務をやる時間が減るというデメリットはあるものの、チームとして学ぶ時間が少ないとは前から思っていたので、チームとして学びの時間を使ってメンバーのスキルを高めていくきっかけの1つとしてはよいかもしれないと思った。あるチケットで議論していて、本質的にはどうなるべき？という議論をして、直近のマイルストーンでは実装できないが将来的に対応するときのためにチケットを作っておいたりした。そういう1つずつの積み重ねが将来の品質をあげていく糧になる。開発者だけで設計という枠組で話すこと自体は大事な時間だとは思えた。&lt;/p>
&lt;h2 id="terapyon-channel-の収録">terapyon channel の収録&lt;/h2>
&lt;p>21時過ぎから &lt;a href="https://podcast.terapyon.net/">terapyon channel&lt;/a> の収録を行った。たまたまだけど、私は年に1回出演していて、今後もそのペースがいいなという思えた。6月は法人決算を終えて気楽になっているし、1年に1回なら近況報告として話題もたくさんある。前回からのツールのアップグレードとして &lt;a href="https://iris.fm/">iris&lt;/a> というツールで収録した。これまではローカルで音声ファイルを録音して、終わった後に寺田さんへその録音ファイルを送信していた。iris を使うと、ブラウザだけでそれをやってくれるのでゲスト側の作業が減ってお手軽になる。ホスト側もゲスト側で録音に失敗するという最悪の事態のリスクを軽減できるので望ましいという。iris のホスト側の画面にはゲスト側の音声が録音されていることを表すインジケーターもみえるらしい。それが安心感を与えているとのこと。久しぶりに寺田さんと話して、podcast の収録というよりも寺田さんと普通に近況の雑談をしたぐらいの感覚でしかない。&lt;/p></content></item><item><title>変哲もない1日</title><link>/diary/posts/2022/0607/</link><pubDate>Tue, 07 Jun 2022 09:05:07 +0900</pubDate><guid>/diary/posts/2022/0607/</guid><description>0時に寝て7時に起きた。もうバテバテ。
開発の隙間 インフラタスクも一段落したのでアプリケーション開発の手伝いをしている。言うてももうすぐ feature freeze で大半の機能は fix しているのでサービスインに向けての運用系のタスクを先行して取っているだけ。簡単なサーバーサイドの修正を行い、割り当てられたタスクの内容を確認したり、スクラムイベントのふりかえりをしたり、ドキュメントを書いたりしたら1日が終わってしまった。ワーケーションへ行ってきた疲れが残っているのか、インフラタスクが落ち着いて次のタスクへの切り替わりのせいか、あまり集中できなかった。6月の週末はちょっと休んでもいいかもしれない。
ワーケーションのまとめ 3日目のワーケーションの記事を書き終えた。明日 podcast の収録があるからそれまでに終えようと思って無理して書き上げた。日が変わるぐらいまでは作業してたと思う。</description><content>&lt;p>0時に寝て7時に起きた。もうバテバテ。&lt;/p>
&lt;h2 id="開発の隙間">開発の隙間&lt;/h2>
&lt;p>インフラタスクも一段落したのでアプリケーション開発の手伝いをしている。言うてももうすぐ feature freeze で大半の機能は fix しているのでサービスインに向けての運用系のタスクを先行して取っているだけ。簡単なサーバーサイドの修正を行い、割り当てられたタスクの内容を確認したり、スクラムイベントのふりかえりをしたり、ドキュメントを書いたりしたら1日が終わってしまった。ワーケーションへ行ってきた疲れが残っているのか、インフラタスクが落ち着いて次のタスクへの切り替わりのせいか、あまり集中できなかった。6月の週末はちょっと休んでもいいかもしれない。&lt;/p>
&lt;h2 id="ワーケーションのまとめ">ワーケーションのまとめ&lt;/h2>
&lt;p>3日目のワーケーションの記事を書き終えた。明日 podcast の収録があるからそれまでに終えようと思って無理して書き上げた。日が変わるぐらいまでは作業してたと思う。&lt;/p></content></item><item><title>aws sns を介した pubsub</title><link>/diary/posts/2022/0606/</link><pubDate>Mon, 06 Jun 2022 04:43:44 +0900</pubDate><guid>/diary/posts/2022/0606/</guid><description>0時に寝て4時半に起きた。21時頃からオフィスで作業してたらそのまま寝落ちした。朝の掃除機をかける音で目覚めて、始業までワーケーションのふりかえりをしていた。
lambda 関数と sns の連携 定期実行で数百程度の web api 呼び出しを行いたい。これまで定期実行を lambda 関数で実装してきたが、負荷分散を考慮して作ってほしいと言われたので sns を使ってメッセージ分割した上で1つ1つの lambda 関数は sns のメッセージを受け取って実行されるように構成した。lambda 関数を使って pubsub するときは sns を使えばよいらしい。sns はあまり使ったことがないので私自身ノウハウをもっていないし、運用の勘所もよくわかっていない。ドキュメントをいくつか読みながら cdk のコードを書いてた。producer と consumer を lambda 関数で作成し、sns を介してリクエストの負荷分散を図る。lambda 関数は同時並行数を設定できるのでこれがスロットル制限のような役割にもなる。インフラやスクリプトのコードはすぐに実装できたが、lambda 関数の destroy にやたら時間がかかる。権限周りでいくつか設定を試すために destroy しながら検証をしたかった。destroy するのに20分はかかるので deploy や設定の手作業などをやっていると1つの設定を試すのに平気で1時間ぐらいかかってしまう。3回ぐらいやって疲れて検証作業はやや妥協した。
Amazon SNS でのAWS Lambdaの使用 Managing Lambda reserved concurrency Amazon SNS security best practices</description><content>&lt;p>0時に寝て4時半に起きた。21時頃からオフィスで作業してたらそのまま寝落ちした。朝の掃除機をかける音で目覚めて、始業までワーケーションのふりかえりをしていた。&lt;/p>
&lt;h2 id="lambda-関数と-sns-の連携">lambda 関数と sns の連携&lt;/h2>
&lt;p>定期実行で数百程度の web api 呼び出しを行いたい。これまで定期実行を lambda 関数で実装してきたが、負荷分散を考慮して作ってほしいと言われたので sns を使ってメッセージ分割した上で1つ1つの lambda 関数は sns のメッセージを受け取って実行されるように構成した。lambda 関数を使って pubsub するときは sns を使えばよいらしい。sns はあまり使ったことがないので私自身ノウハウをもっていないし、運用の勘所もよくわかっていない。ドキュメントをいくつか読みながら cdk のコードを書いてた。producer と consumer を lambda 関数で作成し、sns を介してリクエストの負荷分散を図る。lambda 関数は同時並行数を設定できるのでこれがスロットル制限のような役割にもなる。インフラやスクリプトのコードはすぐに実装できたが、lambda 関数の destroy にやたら時間がかかる。権限周りでいくつか設定を試すために destroy しながら検証をしたかった。destroy するのに20分はかかるので deploy や設定の手作業などをやっていると1つの設定を試すのに平気で1時間ぐらいかかってしまう。3回ぐらいやって疲れて検証作業はやや妥協した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/with-sns.html">Amazon SNS でのAWS Lambdaの使用&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html">Managing Lambda reserved concurrency&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.aws.amazon.com/sns/latest/dg/sns-security-best-practices.html">Amazon SNS security best practices&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>ワーケーション 3日目</title><link>/diary/posts/2022/0605/</link><pubDate>Sun, 05 Jun 2022 07:14:57 +0900</pubDate><guid>/diary/posts/2022/0605/</guid><description>3時に寝て6時前に起きた。起きて作業しようと思って階下に降りた (寝室は2階) ものの、なんかバテてて、畳の部屋で寝転がっていた。涼しくて気持ちよかった。2度寝もしてたかもしれない。起きてからは帰りの高速道路のサービスエリアを調べたり、丹波篠山市か、六甲山天覧台に寄り道するならどういうルートになるかシミュレーションしたりした。
朝風呂とモーニング 昨日と同じように7時を過ぎてから朝風呂に出掛けていく。今日は「地蔵湯」に入った。子ども向けの浅いお風呂と大きなお風呂があった。座椅子でやや腰に負担がかかっていたのでジャグジーで腰の療養をした。昨日3時まで雑談して疲れていたせいか、2泊を終えてバーンアウトしてしまったのか、3日目の旅程の考えがうまくまとまらなくて、お風呂に入りながらぼーっとしていた。喫茶店の 萠阿 (のあ) さんでモーニングを食べた。
事前に作成しておいた旅のしおりでは、チェックアウトは11時にして、13時に城崎温泉を出発する旅程になっていた。意図としては観光したい人向けに余裕をもったスケジュールにしていたつもりだった。しかし、周りも疲れているようにみえて、11時に城崎温泉を出てもいいかなという空気にはなっていた。とはいえ、11時から帰り始めると2時間半で神戸に着いてしまう。はらさんの帰りの飛行機の時間が19時だったのであまり早くても持て余してしまう。車で行ける付近の場所を観光してもいいかなと思いつつも具体的なアイディアが出てこない。疲れると想定外の状況に対していくつかの仮説を並行してシミュレーションできなくなっていた感じ。お昼ご飯どうする？という話題に、城崎温泉で食べるか、よそで食べるかもまとまらない。誰かが出石そばを食べに行こうと言い始めて「あっ、よさそう」と思えた。近くのパーキングエリアで出石そばを食べたらいいんじゃない？という案もあったが、出石の城下街へ行こうと押し切った。はまらないパズルのピースがはまった。学生の頃にツーリングで出石に行ったことがあったので私はどんな場所かを知っていて、お昼ご飯も食べられて少し観光もできてちょうどいいと思えた。
チェックアウト 11時に管理人さんが来られ、チェックアウトの手続きはすぐに済み、みんなで記念写真を撮って帰り始める。管理人さんは城崎温泉のことを質問すると、あれやこれやと教えてくれていた。すみよしさんが「出石そばのお薦めのお店知っています？」と管理人さんに尋ねた。私がそれは流石に知らんやろと横で聞いていたら「ちょっと待ってください」と即答で2店舗を教えてくれた。この管理人さんは何でも知っているんやなと感心して笑ってしまった。管理人さんは本当に親切でよい人だった。
このときの集合写真はきのいえのインスタグラムで公開されている。
お宿で勉強会！ 出石そばと城下町散策 11時に城崎温泉を出て出石の城下町へ向かう。40分ほどで着く。きのいえの管理人さんに教えてもらった 官兵衛 さんに訪問。お昼前で少し早かったせいか、ちょうど待たずに入れた。うちらがお店を出たときは2組ほど並んでいた。出石そばのシステムがわからなくて、注文するときに店員さんに尋ねると、大人男性ならだいたい10-15皿だという。ひとまず10皿を頼んで足りなかったらまた注文すればいいとのこと。まずはそばだけ食べて、その後に薬味を使って、卵は後半の方がよいと教えてくれた。私は、最初の2皿をそばだけを食べて、次にわさび、その後に葱や大根おろしを試し、とろろも入れ、8皿目ぐらいに卵をつかってみた。ちょっとした味のバリエーションにもなっていておもしろかった。私は10皿で満足した。
余談だが、まったく値段を知らずに入ったので、お会計のときにこれはいくらなんだろう？思いながら勘定をした。1人あたり薬味150円と皿そばが170円 * 10皿で合計すると1,850円 (税込) だった。おいしかったし、皿そばという名物を食べるという雰囲気も味わえてよかったのでまったく不満はない。純粋にそばだけだからそんなに高くないのかな？という先入観から想像以上だったので少し驚いた感じ。はらさんが「外国人を連れてきたらすごく喜ぶと思いますよ。」と2回ぐらい言ってた気がするので、これは大事なことなんだと思って、外国人を連れてきたらいいと私の記憶に残った。
その後、せっかく出石に来たから城跡も行ってみることにした。城跡には行ったことがなかった。城跡だから原っぱみたいな場所をみるだけかな？と考えていたら、石垣がしっかり残っていて3段目ぐらいまで登って街並みを展望できた。さらにもっと山を登っていけるようで、頂上までいくとそれなりの山登りハイキングができる場所になっているみたい。
私はまったく出石城のことを知らなくて、もともとのお殿様ではないが、なんやらかんやらで 仙石秀久 が城主になったらしい。センゴク の漫画の主人公。城跡に上る鳥居の裏に作者の宮下英樹さんの名前もあった。仙石秀久：鈴鳴り武者、またの名を蕎麦の伝道師…、あんたはいったい何者だ!? の記事によると、出石そばも仙石秀久が信州から出石へ転封したときに一緒に付いてきた信濃のそば職人が発祥になっているらしい。はーん。
西紀サービスエリア ワーケーション1日目の反省点 にも書いたが、車の移動で行きはどこで休憩するかを決めていなかった。そうすると、どのタイミングでどこのサービスエリアに入っていいかがわからなくなってしまった。帰りは下調べして、休憩によさそうな設備があって中間の適切な位置として、舞鶴若狭自動車道の西紀サービスエリアがよさそうと調べていた。そして最初からナビの目的地をサービスエリアにしてしまうことで走り過ぎや休憩までのペースなども走りながら考える必要がない。当たり前のことなんだけど、自分で運転してみて初日はうまく段取りできなかったのでこれも大事な事前準備だと気付いた。
小さなふりかえりと神戸空港 神戸に戻ってきてから雨がぱらぱらし始めた。天候も何とかもってちょうどよかった。1時間ほどドトールさんで休憩しながら軽いふりかえりみたいになった。
朝と夜に温泉入るのは疲れる 7つの外湯があり、パスポートを購入していても連続でお風呂に入る人はいなかった 開発合宿は2泊3日が限界 非日常の慣れない生活は楽しさととも緊張もあるので疲労も大きい 実際にやってみることから得られる経験や体験はとても大きい 城崎温泉がどういう場所か、その文化や歴史の一端を垣間見えた 主催としてやらなければならない段取りや準備の経験を大きく積めた 今回の経験をベースにして今後も課題管理システムに積み重なっていく 今後の開発合宿イベントの展望 オープン版は三ノ宮.devでやりそうなのでそこに便乗する うちの会社の関係者や知人に声をかけてクローズドなイベントを1回/年でやる (当面は) bizpy ではやらないかなぁ その後、解散してはらさんを神戸空港まで送っていった。空港の場所は知っていたけど、実際に行ったことなかったので車で空港への行き方がわかってよかった。これで飛行機で神戸に来る人がいても送迎ができる。18時半にレンタカーを返却した。今回は日産 NOTE e-Power というハイブリッド車を初めて運転した。今回の旅程で約350km走って消費したガソリンは約15リットルだった。燃費は23.3/リットルだった。レンタカーを返して家に着いたらやり終えたなって感じで気分がよかった。
ストレッチ いつもは土曜日の10時に通っているストレッチを、ワーケーションがあったので日曜日の19時半に変更してもらっていた。温泉に入った後に多少はストレッチをしたものの、運転疲れで体が硬くなってしまっていた。今日の開脚幅は開始前155cmで、ストレッチ後160cmだった。ワーケーションへ行ってきて疲れた後にストレッチを受けられるのは、疲弊した箇所がわかってとてもよかった。外湯に入るために普段より歩いたのものあって腰とふくらはぎの張りが強かった。その上で座椅子や車の運転なども相乗効果があって疲れが溜まっていた感じ。トレーナーさんと旅のふりかえりを雑談しながらストレッチを受けていて、週末どこかへ行ってきた後にストレッチを受けるのはすごくいいと思ってしまった。この場合、私の中ではストレッチがマッサージに置き換わってしまっている。</description><content>&lt;p>3時に寝て6時前に起きた。起きて作業しようと思って階下に降りた (寝室は2階) ものの、なんかバテてて、畳の部屋で寝転がっていた。涼しくて気持ちよかった。2度寝もしてたかもしれない。起きてからは帰りの高速道路のサービスエリアを調べたり、丹波篠山市か、六甲山天覧台に寄り道するならどういうルートになるかシミュレーションしたりした。&lt;/p>
&lt;h2 id="朝風呂とモーニング">朝風呂とモーニング&lt;/h2>
&lt;p>昨日と同じように7時を過ぎてから朝風呂に出掛けていく。今日は「地蔵湯」に入った。子ども向けの浅いお風呂と大きなお風呂があった。座椅子でやや腰に負担がかかっていたのでジャグジーで腰の療養をした。昨日3時まで雑談して疲れていたせいか、2泊を終えてバーンアウトしてしまったのか、3日目の旅程の考えがうまくまとまらなくて、お風呂に入りながらぼーっとしていた。喫茶店の &lt;a href="https://tabelog.com/hyogo/A2808/A280801/28014933/">萠阿 (のあ)&lt;/a> さんでモーニングを食べた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0605_morning1.jpg"/>
&lt;/figure>
&lt;p>事前に作成しておいた旅のしおりでは、チェックアウトは11時にして、13時に城崎温泉を出発する旅程になっていた。意図としては観光したい人向けに余裕をもったスケジュールにしていたつもりだった。しかし、周りも疲れているようにみえて、11時に城崎温泉を出てもいいかなという空気にはなっていた。とはいえ、11時から帰り始めると2時間半で神戸に着いてしまう。はらさんの帰りの飛行機の時間が19時だったのであまり早くても持て余してしまう。車で行ける付近の場所を観光してもいいかなと思いつつも具体的なアイディアが出てこない。疲れると想定外の状況に対していくつかの仮説を並行してシミュレーションできなくなっていた感じ。お昼ご飯どうする？という話題に、城崎温泉で食べるか、よそで食べるかもまとまらない。誰かが出石そばを食べに行こうと言い始めて「あっ、よさそう」と思えた。近くのパーキングエリアで出石そばを食べたらいいんじゃない？という案もあったが、出石の城下街へ行こうと押し切った。はまらないパズルのピースがはまった。学生の頃にツーリングで出石に行ったことがあったので私はどんな場所かを知っていて、お昼ご飯も食べられて少し観光もできてちょうどいいと思えた。&lt;/p>
&lt;h2 id="チェックアウト">チェックアウト&lt;/h2>
&lt;p>11時に管理人さんが来られ、チェックアウトの手続きはすぐに済み、みんなで記念写真を撮って帰り始める。管理人さんは城崎温泉のことを質問すると、あれやこれやと教えてくれていた。すみよしさんが「出石そばのお薦めのお店知っています？」と管理人さんに尋ねた。私がそれは流石に知らんやろと横で聞いていたら「ちょっと待ってください」と即答で2店舗を教えてくれた。この管理人さんは何でも知っているんやなと感心して笑ってしまった。管理人さんは本当に親切でよい人だった。&lt;/p>
&lt;p>このときの集合写真はきのいえのインスタグラムで公開されている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.instagram.com/p/CeatOWvLNMs/">お宿で勉強会！&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="出石そばと城下町散策">出石そばと城下町散策&lt;/h2>
&lt;p>11時に城崎温泉を出て出石の城下町へ向かう。40分ほどで着く。きのいえの管理人さんに教えてもらった &lt;a href="https://tabelog.com/hyogo/A2808/A280801/28006603/">官兵衛&lt;/a> さんに訪問。お昼前で少し早かったせいか、ちょうど待たずに入れた。うちらがお店を出たときは2組ほど並んでいた。出石そばのシステムがわからなくて、注文するときに店員さんに尋ねると、大人男性ならだいたい10-15皿だという。ひとまず10皿を頼んで足りなかったらまた注文すればいいとのこと。まずはそばだけ食べて、その後に薬味を使って、卵は後半の方がよいと教えてくれた。私は、最初の2皿をそばだけを食べて、次にわさび、その後に葱や大根おろしを試し、とろろも入れ、8皿目ぐらいに卵をつかってみた。ちょっとした味のバリエーションにもなっていておもしろかった。私は10皿で満足した。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2022/0605_soba1.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2022/0605_soba2.jpg"/>
&lt;/figure>
&lt;/p>
&lt;p>余談だが、まったく値段を知らずに入ったので、お会計のときにこれはいくらなんだろう？思いながら勘定をした。1人あたり薬味150円と皿そばが170円 * 10皿で合計すると1,850円 (税込) だった。おいしかったし、皿そばという名物を食べるという雰囲気も味わえてよかったのでまったく不満はない。純粋にそばだけだからそんなに高くないのかな？という先入観から想像以上だったので少し驚いた感じ。はらさんが「外国人を連れてきたらすごく喜ぶと思いますよ。」と2回ぐらい言ってた気がするので、これは大事なことなんだと思って、外国人を連れてきたらいいと私の記憶に残った。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0605_izushi1.jpg"/>
&lt;/figure>
&lt;p>その後、せっかく出石に来たから城跡も行ってみることにした。城跡には行ったことがなかった。城跡だから原っぱみたいな場所をみるだけかな？と考えていたら、石垣がしっかり残っていて3段目ぐらいまで登って街並みを展望できた。さらにもっと山を登っていけるようで、頂上までいくとそれなりの山登りハイキングができる場所になっているみたい。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2022/0605_izushi2.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2022/0605_izushi4.jpg"/>
&lt;/figure>
&lt;/p>
&lt;p>私はまったく出石城のことを知らなくて、もともとのお殿様ではないが、なんやらかんやらで &lt;a href="https://ja.wikipedia.org/wiki/%E4%BB%99%E7%9F%B3%E7%A7%80%E4%B9%85">仙石秀久&lt;/a> が城主になったらしい。&lt;a href="https://www.sunrise-pub.co.jp/duet-vol93/">センゴク&lt;/a> の漫画の主人公。城跡に上る鳥居の裏に作者の宮下英樹さんの名前もあった。&lt;a href="https://xn--y8jwb3fsa0346bwq3atxzab5s.com/saiko/sengoku-hidehisa/">仙石秀久：鈴鳴り武者、またの名を蕎麦の伝道師…、あんたはいったい何者だ!?&lt;/a> の記事によると、出石そばも仙石秀久が信州から出石へ転封したときに一緒に付いてきた信濃のそば職人が発祥になっているらしい。はーん。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0605_izushi3.jpg"/>
&lt;/figure>
&lt;h2 id="西紀サービスエリア">西紀サービスエリア&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0603/#三ノ宮から城崎温泉への移動">ワーケーション1日目の反省点&lt;/a> にも書いたが、車の移動で行きはどこで休憩するかを決めていなかった。そうすると、どのタイミングでどこのサービスエリアに入っていいかがわからなくなってしまった。帰りは下調べして、休憩によさそうな設備があって中間の適切な位置として、舞鶴若狭自動車道の西紀サービスエリアがよさそうと調べていた。そして最初からナビの目的地をサービスエリアにしてしまうことで走り過ぎや休憩までのペースなども走りながら考える必要がない。当たり前のことなんだけど、自分で運転してみて初日はうまく段取りできなかったのでこれも大事な事前準備だと気付いた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0605_sa1.jpg"/>
&lt;/figure>
&lt;h2 id="小さなふりかえりと神戸空港">小さなふりかえりと神戸空港&lt;/h2>
&lt;p>神戸に戻ってきてから雨がぱらぱらし始めた。天候も何とかもってちょうどよかった。1時間ほどドトールさんで休憩しながら軽いふりかえりみたいになった。&lt;/p>
&lt;ul>
&lt;li>朝と夜に温泉入るのは疲れる
&lt;ul>
&lt;li>7つの外湯があり、パスポートを購入していても連続でお風呂に入る人はいなかった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>開発合宿は2泊3日が限界
&lt;ul>
&lt;li>非日常の慣れない生活は楽しさととも緊張もあるので疲労も大きい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>実際にやってみることから得られる経験や体験はとても大きい
&lt;ul>
&lt;li>城崎温泉がどういう場所か、その文化や歴史の一端を垣間見えた&lt;/li>
&lt;li>主催としてやらなければならない段取りや準備の経験を大きく積めた
&lt;ul>
&lt;li>今回の経験をベースにして今後も課題管理システムに積み重なっていく&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>今後の開発合宿イベントの展望
&lt;ul>
&lt;li>オープン版は三ノ宮.devでやりそうなのでそこに便乗する&lt;/li>
&lt;li>うちの会社の関係者や知人に声をかけてクローズドなイベントを1回/年でやる
&lt;ul>
&lt;li>(当面は) bizpy ではやらないかなぁ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>その後、解散してはらさんを神戸空港まで送っていった。空港の場所は知っていたけど、実際に行ったことなかったので車で空港への行き方がわかってよかった。これで飛行機で神戸に来る人がいても送迎ができる。18時半にレンタカーを返却した。今回は日産 NOTE e-Power というハイブリッド車を初めて運転した。今回の旅程で約350km走って消費したガソリンは約15リットルだった。燃費は23.3/リットルだった。レンタカーを返して家に着いたらやり終えたなって感じで気分がよかった。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>いつもは土曜日の10時に通っているストレッチを、ワーケーションがあったので日曜日の19時半に変更してもらっていた。温泉に入った後に多少はストレッチをしたものの、運転疲れで体が硬くなってしまっていた。今日の開脚幅は開始前155cmで、ストレッチ後160cmだった。ワーケーションへ行ってきて疲れた後にストレッチを受けられるのは、疲弊した箇所がわかってとてもよかった。外湯に入るために普段より歩いたのものあって腰とふくらはぎの張りが強かった。その上で座椅子や車の運転なども相乗効果があって疲れが溜まっていた感じ。トレーナーさんと旅のふりかえりを雑談しながらストレッチを受けていて、週末どこかへ行ってきた後にストレッチを受けるのはすごくいいと思ってしまった。この場合、私の中ではストレッチがマッサージに置き換わってしまっている。&lt;/p></content></item><item><title>ワーケーション 2日目</title><link>/diary/posts/2022/0604/</link><pubDate>Sat, 04 Jun 2022 22:59:54 +0900</pubDate><guid>/diary/posts/2022/0604/</guid><description>0時に寝て5時半に起きた。軽く作業をしてから朝風呂を入りに行くことにした。
朝風呂とモーニング 7つの外湯 のうち、朝7時からあいているところは次の4つ。
地蔵湯 一の湯 御所の湯 鴻の湯 朝風呂を入るために浴衣姿で外を出歩く。城崎温泉のよいところとして、浴衣姿でその辺を散歩していても変な人に思われない文化を意図的に作っている。浴衣のまま出歩けるというのは、温泉が外湯なので出掛けるために着替えないといけないという手間を軽減するとともに、日本的くつろぎの雰囲気も醸し出している。実利と文化の両面から城崎温泉というコンテンツに付加価値を与えているおもしろい文化だと思えた。街が一体となってそういう文化を作ってきたんだなという歴史の重みも感じた。
「一の湯」に入ることにした。外へつながる扉に「洞窟」と書いてあって、露天風呂があるんだろうと思いながら外に出たら本当に洞窟があった。洞窟の温泉というのに入ったことがなかったのでびっくりした。後から入ってきたはらさんをみていて、なにこれ？みたいな表情をしたのがおもしろくて、初見ならびっくりするよなと私も入ったときにそんな顔をしていたのだろうとおもしろかった。入り終えてからから街並みをぶらぶらしながら カフェこやま さんでモーニングを食べた。懐かしい雰囲気。その後、さらに街並みを20-30分ほどぶらぶら散歩して戻ってきた。朝から徒歩で出かけてお風呂に入って2時間ほど時間が経っていた。
わたなべさん合流 宿に戻ってきて10-12時まで作業をしていた。12時半にわたなべさんが来られるので城崎温泉駅で出迎えて一緒にお昼ご飯を食べた。この時点で4人の全参加者が揃った。駅前でカニとろろ丼を食べておいしかった。
宿に戻ってきて13-15時まで私は雑談していた。今回の合宿の一番の私の収穫として次のことを学んだ。はらさんと話していたときにふとこんなことを聞いた。
作業は自宅やオフィスで黙々と時間をかければできるけど、そうじゃないもの、なにを作るかがそもそも明確ではないものを考えるときは移動しながら考えていることが多い。
はらさんはデザインのお仕事をされているので、ひらめきが必要なお仕事も多いのだろうと推測する。その話しを聞いてから、私も神戸に戻ってできる作業は後回しにして、普段やらないことや課題が曖昧なことの考えごとに取り組もうと姿勢を改めた。書きものをしながら、主には他のメンバーと雑談していた気がする。
晩ご飯の買い出し 一棟貸しの宿を借りたのでせっかくだから自炊してみんなで鍋をやろうと考えた。城崎温泉の注意点としてお店が早く閉まる。市場は17時、他のお土産屋さんや喫茶店も18時にはほぼ閉まっていたように思える。もしかしたら、6月は閑散期らしく観光客も少なかったためにそうしていたのかもしれない。そのため、15時半から買い出しに出掛ける。
おけしょう鮮魚 さんで海のものを購入する。店員さんに話しかけると、陳列していないお魚をいろいろ紹介してくれた。残念ながら、いまはカニの季節ではなく、松葉ガニは3月末に、紅ズワイガニ (香住ガニ) は5月末に漁が終わっているという。紅ズワイガニのゆでたものだけ置いてあったが、ゆでてあるカニを鍋にすると味が薄くなるだけと話されていた。いまは漁の季節ではないから生のカニが手に入らなくてカニ鍋をするにはむかないと教えてくれた。方針を転換して、真鱈と地元の魚を選んで切り身を見繕ってもらった。このときにお魚やさんに「骨を取って」と伝える方がよかったことを学んだ。私は滅多に魚を買わないのでそういう機微を知らなかった。あと1つ400円ぐらいの地元で取れたはまぐりを4つ購入した。魚屋さんが言うには、中国産の安いものもあるからそれでも味はそんなに変わらないよと気遣ってくれたけど、せっかく来たので地元のものを食べたいと思って値段の高い地元のはまぐりを買うことに決めた。魚を捌くのに15分ほどかかるので次の買い出しへ向かう。和田屋 さんで鍋に入れる野菜やきのこ、糸こんにゃくを買う。白飯も置いてた。お惣菜も少し売っている。岡本酒店 さんで店長おすすめのそのお店オリジナルの日本酒を購入した。最後に ミニフレッシュ で足りないもの、お茶などを購入した。ここは普通のスーパーになる。
1時間ほどで買い出しを完了した。温泉街の中心地にある宿の立地がよいので徒歩で十分に買い出しできた。車であちこち行くのかと想像していたのでとても楽だった。
夜風呂と海鮮鍋 買い出しを終えてから少し作業をして17時半ぐらいから「御所の湯」へ出掛ける。目の前に小さい川 (滝) を眺めながらお風呂に入れてよかった。「一の湯」の洞窟と匹敵する自然の風情を活かしたお風呂になっていた。その帰りに センター遊技場 が開いてたので入ってみた。昔ながらの射的があってやっているのを眺めてた。
お風呂から宿に戻って海鮮鍋を作り始めた。19時前後かな。アラで取った出汁と購入した出汁を組み合わせ、あとは野菜やきのこ、魚を入れて煮込むだけ。調理は簡単だったし、すぐにできた。食べながら魚を追加で入れたり、最後に白飯を入れて雑炊を作ったりして、みんなでわいわい作る楽しさもあって、やや不格好だったものの味はおいしかったと思う。一応、はまぐりの砂抜きも2-3時間ほどやってみて、砂が抜けたかどうかよくわからなかったけど、食べてみて砂を感じなかったので大丈夫だったと思う。もしかしたら魚屋さんでやっていたのかもしれない。和田家さんでポン酢も買っておいたけれど、出汁だけでそのまま食べてもおいしかったので、ポン酢はあまり使われなかった。岡本酒店さんの限定日本酒も甘口で奥深さのあるおいしい日本酒だった。お土産にもよさそうかな。鍋にもあっていたと思う。
夜散歩 21時過ぎにお茶がなくなったので買い出しも兼ねて夜散歩してきた。温泉街の中心地を川が流れていて、その左右に柳とライトアップが見栄えよく、きれいだという話しを聞いたのでみんなで散歩しながら眺めてきた。6月という季節は、暑くも寒くもなくてちょうどよかったと思う。城崎温泉は徒歩で行ける街並みの景観がよいので老若男女誰でも楽しめる場所のように思えた。たぶん温泉街ってそういうものかな。
プレゼン大会と出前ラーメン 22時から親睦も兼ねてのプレゼン大会。みんなに何か話すネタを作ってきてとお願いしていたのでみんなちゃんと作ってきてくれてた。はらさんはこの合宿で取り組んだ スマートコントラクト入門 の話し、すみよしさんは 三ノ宮.dev を3年以上、運営してきてわかった話し、わたなべさんはやってきた研究と貿易統計からみる日本の経済動向の話し、それぞれが個性や特性を出していて、とてもおもしろかった。少ない人数でやると深い質疑応答のやり取りも出来たりしてよい。全然違うバックボーンをもった参加者同士が、自由に発表していたのでみんな違う話しでとてもよかったと思う。私は最近デザイナーさんに作ってもらったスライドマスターを使って、会社紹介を作りつつ、課題管理をビジネスとしてやってみたいという話しをした。話題がちょっと堅かったかもしれないなとも思えたが、プレゼン大会が終わってからその夜にわたなべさんと3時まで課題管理がどうのこうとか、ビジネスの展開について雑談していた。その後の雑談ネタにもなってよかったのかもしれない。
プレゼン大会の途中で wifi の調子が悪くなって、プロジェクターとラップトップの接続がうまくいかなかったりもした。午後からネットワークも不安定で繋がらないときもあったりしたのでルーターの再起動をできるとよかったのかもしれない。次回があれば、管理人さんにそういった状況を想定して、ルーターの場所を聞いておいて、うちらが再起動してもいいかどうかを確認しておいてもよかったのかもしれない。
余談だけど、プレゼン大会の途中で 宮政ラーメン という宅配ラーメン？で出前をとったりもした。電話で注文すると、宿まで来てくれて、その場で屋台ラーメンを作ってくれる。この店主は37年やっているらしい。みんな油そばを頼んでいておいしかったみたい。私はお腹いっぱいだったし、この時間 (0時) に食べると次の日に胃もたれで辛そうかなと思って今回は断念した。営業時間は21時から翌1時。もうちょっと早い時間に気付いて注文すればよかったかもしれない。
プレゼン大会を終えてから海鮮鍋の片付けをした。0時回っていてちょっと疲れたなという印象もあったのでもうちょっと時間の配分や段取りをうまくできればよかったと思う。次回への反省点かな。</description><content>&lt;p>0時に寝て5時半に起きた。軽く作業をしてから朝風呂を入りに行くことにした。&lt;/p>
&lt;h2 id="朝風呂とモーニング">朝風呂とモーニング&lt;/h2>
&lt;p>&lt;a href="https://kinosaki-spa.gr.jp/about/spa/7onsen/">7つの外湯&lt;/a> のうち、朝7時からあいているところは次の4つ。&lt;/p>
&lt;ul>
&lt;li>地蔵湯&lt;/li>
&lt;li>一の湯&lt;/li>
&lt;li>御所の湯&lt;/li>
&lt;li>鴻の湯&lt;/li>
&lt;/ul>
&lt;p>朝風呂を入るために浴衣姿で外を出歩く。城崎温泉のよいところとして、浴衣姿でその辺を散歩していても変な人に思われない文化を意図的に作っている。浴衣のまま出歩けるというのは、温泉が外湯なので出掛けるために着替えないといけないという手間を軽減するとともに、日本的くつろぎの雰囲気も醸し出している。実利と文化の両面から城崎温泉というコンテンツに付加価値を与えているおもしろい文化だと思えた。街が一体となってそういう文化を作ってきたんだなという歴史の重みも感じた。&lt;/p>
&lt;p>「一の湯」に入ることにした。外へつながる扉に「洞窟」と書いてあって、露天風呂があるんだろうと思いながら外に出たら本当に洞窟があった。洞窟の温泉というのに入ったことがなかったのでびっくりした。後から入ってきたはらさんをみていて、なにこれ？みたいな表情をしたのがおもしろくて、初見ならびっくりするよなと私も入ったときにそんな顔をしていたのだろうとおもしろかった。入り終えてからから街並みをぶらぶらしながら &lt;a href="https://tabelog.com/hyogo/A2808/A280801/28028485/">カフェこやま&lt;/a> さんでモーニングを食べた。懐かしい雰囲気。その後、さらに街並みを20-30分ほどぶらぶら散歩して戻ってきた。朝から徒歩で出かけてお風呂に入って2時間ほど時間が経っていた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0604_food1.jpg"/>
&lt;/figure>
&lt;h2 id="わたなべさん合流">わたなべさん合流&lt;/h2>
&lt;p>宿に戻ってきて10-12時まで作業をしていた。12時半にわたなべさんが来られるので城崎温泉駅で出迎えて一緒にお昼ご飯を食べた。この時点で4人の全参加者が揃った。駅前でカニとろろ丼を食べておいしかった。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0604_food2.jpg"/>
&lt;/figure>
&lt;p>宿に戻ってきて13-15時まで私は雑談していた。今回の合宿の一番の私の収穫として次のことを学んだ。はらさんと話していたときにふとこんなことを聞いた。&lt;/p>
&lt;blockquote>
&lt;p>作業は自宅やオフィスで黙々と時間をかければできるけど、そうじゃないもの、なにを作るかがそもそも明確ではないものを考えるときは移動しながら考えていることが多い。&lt;/p>
&lt;/blockquote>
&lt;p>はらさんはデザインのお仕事をされているので、ひらめきが必要なお仕事も多いのだろうと推測する。その話しを聞いてから、私も神戸に戻ってできる作業は後回しにして、普段やらないことや課題が曖昧なことの考えごとに取り組もうと姿勢を改めた。書きものをしながら、主には他のメンバーと雑談していた気がする。&lt;/p>
&lt;h2 id="晩ご飯の買い出し">晩ご飯の買い出し&lt;/h2>
&lt;p>一棟貸しの宿を借りたのでせっかくだから自炊してみんなで鍋をやろうと考えた。城崎温泉の注意点としてお店が早く閉まる。市場は17時、他のお土産屋さんや喫茶店も18時にはほぼ閉まっていたように思える。もしかしたら、6月は閑散期らしく観光客も少なかったためにそうしていたのかもしれない。そのため、15時半から買い出しに出掛ける。&lt;/p>
&lt;p>&lt;a href="https://www.okesyo.com/">おけしょう鮮魚&lt;/a> さんで海のものを購入する。店員さんに話しかけると、陳列していないお魚をいろいろ紹介してくれた。残念ながら、いまはカニの季節ではなく、松葉ガニは3月末に、紅ズワイガニ (香住ガニ) は5月末に漁が終わっているという。紅ズワイガニのゆでたものだけ置いてあったが、ゆでてあるカニを鍋にすると味が薄くなるだけと話されていた。いまは漁の季節ではないから生のカニが手に入らなくてカニ鍋をするにはむかないと教えてくれた。方針を転換して、真鱈と地元の魚を選んで切り身を見繕ってもらった。このときにお魚やさんに「骨を取って」と伝える方がよかったことを学んだ。私は滅多に魚を買わないのでそういう機微を知らなかった。あと1つ400円ぐらいの地元で取れたはまぐりを4つ購入した。魚屋さんが言うには、中国産の安いものもあるからそれでも味はそんなに変わらないよと気遣ってくれたけど、せっかく来たので地元のものを食べたいと思って値段の高い地元のはまぐりを買うことに決めた。魚を捌くのに15分ほどかかるので次の買い出しへ向かう。&lt;a href="https://kinosaki-spa.gr.jp/directory/wada-ya/">和田屋&lt;/a> さんで鍋に入れる野菜やきのこ、糸こんにゃくを買う。白飯も置いてた。お惣菜も少し売っている。&lt;a href="https://kinosaki-spa.gr.jp/directory/okamoto/">岡本酒店&lt;/a> さんで店長おすすめのそのお店オリジナルの日本酒を購入した。最後に &lt;a href="https://www.ekiten.jp/shop_5101588/">ミニフレッシュ&lt;/a> で足りないもの、お茶などを購入した。ここは普通のスーパーになる。&lt;/p>
&lt;p>1時間ほどで買い出しを完了した。温泉街の中心地にある宿の立地がよいので徒歩で十分に買い出しできた。車であちこち行くのかと想像していたのでとても楽だった。&lt;/p>
&lt;h2 id="夜風呂と海鮮鍋">夜風呂と海鮮鍋&lt;/h2>
&lt;p>買い出しを終えてから少し作業をして17時半ぐらいから「御所の湯」へ出掛ける。目の前に小さい川 (滝) を眺めながらお風呂に入れてよかった。「一の湯」の洞窟と匹敵する自然の風情を活かしたお風呂になっていた。その帰りに &lt;a href="https://kinosaki-spa.gr.jp/directory/center-yugijo/">センター遊技場&lt;/a> が開いてたので入ってみた。昔ながらの射的があってやっているのを眺めてた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0604_shooting1.jpg"/>
&lt;/figure>
&lt;p>お風呂から宿に戻って海鮮鍋を作り始めた。19時前後かな。アラで取った出汁と購入した出汁を組み合わせ、あとは野菜やきのこ、魚を入れて煮込むだけ。調理は簡単だったし、すぐにできた。食べながら魚を追加で入れたり、最後に白飯を入れて雑炊を作ったりして、みんなでわいわい作る楽しさもあって、やや不格好だったものの味はおいしかったと思う。一応、はまぐりの砂抜きも2-3時間ほどやってみて、砂が抜けたかどうかよくわからなかったけど、食べてみて砂を感じなかったので大丈夫だったと思う。もしかしたら魚屋さんでやっていたのかもしれない。和田家さんでポン酢も買っておいたけれど、出汁だけでそのまま食べてもおいしかったので、ポン酢はあまり使われなかった。岡本酒店さんの限定日本酒も甘口で奥深さのあるおいしい日本酒だった。お土産にもよさそうかな。鍋にもあっていたと思う。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2022/0604_food3.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2022/0604_food4.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2022/0604_food5.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2022/0604_food6.jpg"/>
&lt;/figure>
&lt;/p>
&lt;h2 id="夜散歩">夜散歩&lt;/h2>
&lt;p>21時過ぎにお茶がなくなったので買い出しも兼ねて夜散歩してきた。温泉街の中心地を川が流れていて、その左右に柳とライトアップが見栄えよく、きれいだという話しを聞いたのでみんなで散歩しながら眺めてきた。6月という季節は、暑くも寒くもなくてちょうどよかったと思う。城崎温泉は徒歩で行ける街並みの景観がよいので老若男女誰でも楽しめる場所のように思えた。たぶん温泉街ってそういうものかな。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2022/0604_view1.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2022/0604_view2.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2022/0604_view3.jpg"/>
&lt;/figure>
&lt;/p>
&lt;h2 id="プレゼン大会と出前ラーメン">プレゼン大会と出前ラーメン&lt;/h2>
&lt;p>22時から親睦も兼ねてのプレゼン大会。みんなに何か話すネタを作ってきてとお願いしていたのでみんなちゃんと作ってきてくれてた。はらさんはこの合宿で取り組んだ &lt;a href="https://www.oreilly.co.jp/books/9784873119342/">スマートコントラクト入門&lt;/a> の話し、すみよしさんは &lt;a href="https://sannomiya.dev/">三ノ宮.dev&lt;/a> を3年以上、運営してきてわかった話し、わたなべさんはやってきた研究と貿易統計からみる日本の経済動向の話し、それぞれが個性や特性を出していて、とてもおもしろかった。少ない人数でやると深い質疑応答のやり取りも出来たりしてよい。全然違うバックボーンをもった参加者同士が、自由に発表していたのでみんな違う話しでとてもよかったと思う。私は最近デザイナーさんに作ってもらったスライドマスターを使って、会社紹介を作りつつ、課題管理をビジネスとしてやってみたいという話しをした。話題がちょっと堅かったかもしれないなとも思えたが、プレゼン大会が終わってからその夜にわたなべさんと3時まで課題管理がどうのこうとか、ビジネスの展開について雑談していた。その後の雑談ネタにもなってよかったのかもしれない。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2022/0604_presentation1.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2022/0604_presentation2.jpg"/>
&lt;/figure>
&lt;/p>
&lt;p>プレゼン大会の途中で wifi の調子が悪くなって、プロジェクターとラップトップの接続がうまくいかなかったりもした。午後からネットワークも不安定で繋がらないときもあったりしたのでルーターの再起動をできるとよかったのかもしれない。次回があれば、管理人さんにそういった状況を想定して、ルーターの場所を聞いておいて、うちらが再起動してもいいかどうかを確認しておいてもよかったのかもしれない。&lt;/p>
&lt;p>余談だけど、プレゼン大会の途中で &lt;a href="https://tabelog.com/hyogo/A2808/A280801/28011388/">宮政ラーメン&lt;/a> という宅配ラーメン？で出前をとったりもした。電話で注文すると、宿まで来てくれて、その場で屋台ラーメンを作ってくれる。この店主は37年やっているらしい。みんな油そばを頼んでいておいしかったみたい。私はお腹いっぱいだったし、この時間 (0時) に食べると次の日に胃もたれで辛そうかなと思って今回は断念した。営業時間は21時から翌1時。もうちょっと早い時間に気付いて注文すればよかったかもしれない。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2022/0604_food7.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2022/0604_food8.jpg"/>
&lt;/figure>
&lt;/p>
&lt;p>プレゼン大会を終えてから海鮮鍋の片付けをした。0時回っていてちょっと疲れたなという印象もあったのでもうちょっと時間の配分や段取りをうまくできればよかったと思う。次回への反省点かな。&lt;/p></content></item><item><title>ワーケーション 1日目</title><link>/diary/posts/2022/0603/</link><pubDate>Fri, 03 Jun 2022 14:24:23 +0900</pubDate><guid>/diary/posts/2022/0603/</guid><description>23時に寝て6時に起きた。
三ノ宮から城崎温泉への移動 8時前にレンタカーを借り、途中で同乗者のすみよしさんを拾ってから城崎温泉へと向かう。途中、丹羽市の氷上というパーキングエリアで15分ほど休憩した。よく知らない道を運転しているとどこのパーキングエリアで休憩していいかわからなくなる。事前に休憩する場所を調べておく必要があったことに気付いた。もともとかなり余裕をもったスケジュールで運転していたものの、普通に高速道路を運転していると10時半ぐらいには城崎温泉の近くまで着いていた。宿の管理人さんには12時前後と伝えていたのでかなり早過ぎる。寄り道しようということで近くの玄武洞に行ってみることにした。残念ながら展示している岸壁の工事をしていてあまり景観はよくなかったけど、軽いハイキングのような感覚で玄武洞周りの公園を歩いたり、ミュージアム (というよりはお土産さんみたい印象) で様々な石をみたりもできた。
きのいえのチェックイン 30分強ほど玄武洞で時間を潰して11時半頃に城崎温泉の きのいえ に辿り着いた。何度か道を間違えてうろうろしたりもした。初めて行く場所は道を間違えることも計算に入れて少し早めに行くぐらいでちょうどよい時間帯になるのかもしれない。2泊3日で城崎温泉唯一の一棟貸しの宿を借りた。本来のチェックインは15時からになるものの、管理人さんの計らいで特別に12時にチェックインの手続きをしてくれた。宿に到着して電話すると15分ぐらいでやってきて、宿泊者のワクチン摂取確認と本人確認を行い、その後に宿泊料を私がクレジットカードで一括で支払った。これは ひょうごを旅しようキャンペーン＋(プラス) で割引を受けるためにワクチン摂取証明と本人確認が厳しいという背景。事務手続きを終えて施設の説明を一通り受ける。管理人さんは見た目30歳前後の若い方で、普段はカーテン職人として働きながら週末だけきのいえの管理人をやっているという。週末起業みたいなものかもしれない。とても親切な方で丁寧に設備の説明をしてくれて、付近のおすすめのお店や城崎温泉での過ごし方なども教えてくれた。
はらさん合流と午後の作業 13時前に千葉から来られたはらさんを城崎温泉駅で出迎えて一緒にお昼ご飯を食べた。但馬牛の牛すじ丼とうどんを食べた。おいしろかった。宿に戻っていたらお手伝い先のミーティングが入っていることに気付く。1時間ほどテレビ会議でややこしい内容の方向性の議論をして、その後もチケットの作業をしていた。17時ぐらいから sns でシェアするときの ogp 画像のデザインについてはらさんに相談にのってもらった。これまでは、私が求めていたデザインに近いものを最初から提供してくれていたデザイナーさんだったが、今回は苦戦していて、最初のものは全然違うって感じでボツにして再作成してもらった。いくつかやり取りして、ある程度、近いものに修正してくれて、微調整をはらさんと一緒にしていた。はらさんのアドバイスは的確で、こうした方がよいと言われた内容をデザイナーさんに伝えて、修正してもらって、再アップロードしてもらった画像をみると、ちょっとした違いでうける印象も変わったりしてよくなった。デザイナー視点における &amp;ldquo;見る&amp;rdquo; ポイントがあるんだなぁと、素人の私にはわからない視点を見抜かれていたようだ。
外湯めぐりと晩ご飯 17時過ぎからみんなの作業も終わったところで温泉に入りにいくことにした。7つの外湯 があり、まずは駅の近くの「さとの湯」に入った。2Fと3Fにお風呂があって、3種類のお風呂と3種類のサウナ (高温、中温、ミスト)、露天風呂があって、1つずつはそんなに特筆するものはないものの、いろいろ入ってみて楽しめたのでよかったと思う。すべての温泉に付属しているかは確認していないが、私が入った4つの温泉はどこも隣に足湯があって憩いの場になっていた。
温泉に入ってから定番のコーヒーを飲み、宿の管理人さんに紹介してもらった居酒屋 ふくとみ さんに行ってきた。3人で適当に見繕ってくださいという適当なオーダーでおでんとお刺身を頼んで十分な量が出てきたのでよかった。他にもおすすめはいくつかあったけれど、食べきれないので何度か通うようなお店みたい。
就寝前 22時前には宿に戻ってきて今日の出来事をまとめていた。座椅子で低足の机に向かってラップトップを使うのは腰にくるというのを数時間で悟って、私はタイニングテーブルと椅子で作業することにした。翌日の旅程のチェックや補足事項の調査、細々したことをやっていた。</description><content>&lt;p>23時に寝て6時に起きた。&lt;/p>
&lt;h2 id="三ノ宮から城崎温泉への移動">三ノ宮から城崎温泉への移動&lt;/h2>
&lt;p>8時前にレンタカーを借り、途中で同乗者のすみよしさんを拾ってから城崎温泉へと向かう。途中、丹羽市の氷上というパーキングエリアで15分ほど休憩した。よく知らない道を運転しているとどこのパーキングエリアで休憩していいかわからなくなる。事前に休憩する場所を調べておく必要があったことに気付いた。もともとかなり余裕をもったスケジュールで運転していたものの、普通に高速道路を運転していると10時半ぐらいには城崎温泉の近くまで着いていた。宿の管理人さんには12時前後と伝えていたのでかなり早過ぎる。寄り道しようということで近くの玄武洞に行ってみることにした。残念ながら展示している岸壁の工事をしていてあまり景観はよくなかったけど、軽いハイキングのような感覚で玄武洞周りの公園を歩いたり、ミュージアム (というよりはお土産さんみたい印象) で様々な石をみたりもできた。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2022/0603_genbudo1.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2022/0603_genbudo2.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2022/0603_genbudo3.jpg"/>
&lt;/figure>
&lt;/p>
&lt;h2 id="きのいえのチェックイン">きのいえのチェックイン&lt;/h2>
&lt;p>30分強ほど玄武洞で時間を潰して11時半頃に城崎温泉の &lt;a href="https://kinosaki-kinoie.com/index.html">きのいえ&lt;/a> に辿り着いた。何度か道を間違えてうろうろしたりもした。初めて行く場所は道を間違えることも計算に入れて少し早めに行くぐらいでちょうどよい時間帯になるのかもしれない。2泊3日で城崎温泉唯一の一棟貸しの宿を借りた。本来のチェックインは15時からになるものの、管理人さんの計らいで特別に12時にチェックインの手続きをしてくれた。宿に到着して電話すると15分ぐらいでやってきて、宿泊者のワクチン摂取確認と本人確認を行い、その後に宿泊料を私がクレジットカードで一括で支払った。これは &lt;a href="https://www.hyogo-tourism.jp/furusato-ouen/">ひょうごを旅しようキャンペーン＋(プラス)&lt;/a> で割引を受けるためにワクチン摂取証明と本人確認が厳しいという背景。事務手続きを終えて施設の説明を一通り受ける。管理人さんは見た目30歳前後の若い方で、普段はカーテン職人として働きながら週末だけきのいえの管理人をやっているという。週末起業みたいなものかもしれない。とても親切な方で丁寧に設備の説明をしてくれて、付近のおすすめのお店や城崎温泉での過ごし方なども教えてくれた。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2022/0603_hotel1.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2022/0603_hotel2.jpg"/>
&lt;/figure>
&lt;/p>
&lt;h2 id="はらさん合流と午後の作業">はらさん合流と午後の作業&lt;/h2>
&lt;p>13時前に千葉から来られたはらさんを城崎温泉駅で出迎えて一緒にお昼ご飯を食べた。但馬牛の牛すじ丼とうどんを食べた。おいしろかった。宿に戻っていたらお手伝い先のミーティングが入っていることに気付く。1時間ほどテレビ会議でややこしい内容の方向性の議論をして、その後もチケットの作業をしていた。17時ぐらいから sns でシェアするときの ogp 画像のデザインについてはらさんに相談にのってもらった。これまでは、私が求めていたデザインに近いものを最初から提供してくれていたデザイナーさんだったが、今回は苦戦していて、最初のものは全然違うって感じでボツにして再作成してもらった。いくつかやり取りして、ある程度、近いものに修正してくれて、微調整をはらさんと一緒にしていた。はらさんのアドバイスは的確で、こうした方がよいと言われた内容をデザイナーさんに伝えて、修正してもらって、再アップロードしてもらった画像をみると、ちょっとした違いでうける印象も変わったりしてよくなった。デザイナー視点における &amp;ldquo;見る&amp;rdquo; ポイントがあるんだなぁと、素人の私にはわからない視点を見抜かれていたようだ。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0603_food1.jpg"/>
&lt;/figure>
&lt;h2 id="外湯めぐりと晩ご飯">外湯めぐりと晩ご飯&lt;/h2>
&lt;p>17時過ぎからみんなの作業も終わったところで温泉に入りにいくことにした。&lt;a href="https://kinosaki-spa.gr.jp/about/spa/7onsen/">7つの外湯&lt;/a> があり、まずは駅の近くの「さとの湯」に入った。2Fと3Fにお風呂があって、3種類のお風呂と3種類のサウナ (高温、中温、ミスト)、露天風呂があって、1つずつはそんなに特筆するものはないものの、いろいろ入ってみて楽しめたのでよかったと思う。すべての温泉に付属しているかは確認していないが、私が入った4つの温泉はどこも隣に足湯があって憩いの場になっていた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0605_footspa1.jpg"/>
&lt;/figure>
&lt;p>温泉に入ってから定番のコーヒーを飲み、宿の管理人さんに紹介してもらった居酒屋 &lt;a href="https://tabelog.com/hyogo/A2808/A280801/28017042/">ふくとみ&lt;/a> さんに行ってきた。3人で適当に見繕ってくださいという適当なオーダーでおでんとお刺身を頼んで十分な量が出てきたのでよかった。他にもおすすめはいくつかあったけれど、食べきれないので何度か通うようなお店みたい。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0603_food2.jpg"/>
&lt;/figure>
&lt;h2 id="就寝前">就寝前&lt;/h2>
&lt;p>22時前には宿に戻ってきて今日の出来事をまとめていた。座椅子で低足の机に向かってラップトップを使うのは腰にくるというのを数時間で悟って、私はタイニングテーブルと椅子で作業することにした。翌日の旅程のチェックや補足事項の調査、細々したことをやっていた。&lt;/p></content></item><item><title>draw.io で描いたインフラ構成図</title><link>/diary/posts/2022/0602/</link><pubDate>Thu, 02 Jun 2022 08:51:06 +0900</pubDate><guid>/diary/posts/2022/0602/</guid><description>0時に寝て4時に起きて7時までだらだらしてた。なんか調子悪い。
draw.io を描いてみた 先日、draw.io で aws 構成図を描く調査 をした。割り込みの作業をやっていてシステム構成図の作成を先延ばししていた。だいたいの調査は終わっていたのであとは根を詰めて描くだけ。次のサンプル構成図をみながら同じように描いていく。
AWS のアーキテクチャ図を描きたい ! でもどうすれば良いの ? 2つの環境があって、そのうちの1つを作成した。新規構築した環境でスクラッチから描いたものの、インフラリソースの構成要素が少なかったのでサンプル構成図を参考にしながらすぐに描けた。半角スペースで文字位置を調整したりすると、github 上で svg 表示したときに文字の位置がずれたりするのでそういうやり方はダメだとわかった。あと draw.io の振る舞いなのか、vscode のプラグインのせいなのかわからないけど、オブジェクトの配置の前後関係をうまく調整できなくてコピペし直したり、なにかの操作をしたタイミングでインフラリソースのアイコンが後ろに隠蔽されていたりもした。リソース間の接続のための線も自動的に繋がるときもあって便利なのだが、誤動作して変な位置にレイアウトされることもあって制御が難しい。私の感覚では、多少の利便性のために自動化されるよりも、自分で思い通りに制御出来る方を好む。draw.io の自動調整機能の制御が難しいなと思った。</description><content>&lt;p>0時に寝て4時に起きて7時までだらだらしてた。なんか調子悪い。&lt;/p>
&lt;h2 id="drawio-を描いてみた">draw.io を描いてみた&lt;/h2>
&lt;p>先日、&lt;a href="/diary/diary/posts/2022/0523/">draw.io で aws 構成図を描く調査&lt;/a> をした。割り込みの作業をやっていてシステム構成図の作成を先延ばししていた。だいたいの調査は終わっていたのであとは根を詰めて描くだけ。次のサンプル構成図をみながら同じように描いていく。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://aws.amazon.com/jp/builders-flash/202204/way-to-draw-architecture/">AWS のアーキテクチャ図を描きたい ! でもどうすれば良いの ?&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>2つの環境があって、そのうちの1つを作成した。新規構築した環境でスクラッチから描いたものの、インフラリソースの構成要素が少なかったのでサンプル構成図を参考にしながらすぐに描けた。半角スペースで文字位置を調整したりすると、github 上で svg 表示したときに文字の位置がずれたりするのでそういうやり方はダメだとわかった。あと draw.io の振る舞いなのか、vscode のプラグインのせいなのかわからないけど、オブジェクトの配置の前後関係をうまく調整できなくてコピペし直したり、なにかの操作をしたタイミングでインフラリソースのアイコンが後ろに隠蔽されていたりもした。リソース間の接続のための線も自動的に繋がるときもあって便利なのだが、誤動作して変な位置にレイアウトされることもあって制御が難しい。私の感覚では、多少の利便性のために自動化されるよりも、自分で思い通りに制御出来る方を好む。draw.io の自動調整機能の制御が難しいなと思った。&lt;/p></content></item><item><title>手抜き</title><link>/diary/posts/2022/0601/</link><pubDate>Wed, 01 Jun 2022 07:20:18 +0900</pubDate><guid>/diary/posts/2022/0601/</guid><description>2時に寝て6時に起きた。疲れていたからよく眠れた。
mvp（minimum viable product）で対応した スクラムに限った話しではないと思うが、プロダクト開発をしていると mvp（minimum viable product）という言葉を聞くことがままある。昔ながらのイテレーション開発よりも、アジャイル開発の文脈でよく使われるように思う。というのは、短い開発期間でプロトタイプを作ったり、最低限の動く機能を作ったりすることをよしとする考え方があるから。昔ながらのやり方だと、イテレーション期間の中でそういった段階的な開発はするものの、外部からみたとき (もしくはマイルストーン) においてはそこそこの機能が提供されているので mvp といった言い方をすることはなかった。もしかしたらアルファとかベータとか呼んでいたかもしれない。最近ある lambda 関数の移行作業を行った。serverless framework でデプロイしていたリソースを cdk で一元管理する。その過程で既存のコードを読むと、ある id をハードコーディングで指定して FIXME がこんな感じに書いてあった。この id が指すリソースはその後なくなっており、本番環境で不要な処理が定期実行でずっと動き続けていたのと、本来は複数の id リソースに対して行うべき処理を実行していなかった。
# FIXME 対象 id 一覧を取得する。(Phase2までに対応します) id = &amp;#39;ABC001&amp;#39; チームの開発リーダーはその存在を全く忘れていたし、このスクリプトを実装したさらに上位の開発リーダーからはこの処理の要否はよくわからないからチームで確認してという曖昧な返事が返ってきた。チームで確認したところ、この処理は必要だとわかり、この機に複数の id リソースに対して対応するようにした。何も知らない私が修正しても5分で対応を完了した。
mvp で対応したんで
このように実装者は話していたが、本当なのだろうか？と思えた。さらにこのスクリプトのエラーログのログストリームを監視して slack 通知する lambda 関数も移行対象で、コードの検証をしていたところ、slack 通知をするための lambda 関数が別途あり、その動作検証をしていたところ、その lambda 関数を呼び出す権限 lambda:InvokeFunction が足りないことに気付いた。これも実装者に問い合わせたところ、動作検証はやっていないし、過去に1度も slack 通知は発生していないという。状況証拠から考えると、権限が足りないために正常に動作していなかったと推測される。結果的に mvp で対応したという2つの lambda 関数は実運用で半年間、無駄にリソースを浪費して何の役にも立っていなかった。当然、引き継ぎも、課題管理システムのチケットも、ドキュメントも何ら残されていなかった。mvp で対応したという表現に開発で大事なものを誤魔化してはいないだろうか。</description><content>&lt;p>2時に寝て6時に起きた。疲れていたからよく眠れた。&lt;/p>
&lt;h2 id="mvpminimum-viable-productで対応した">mvp（minimum viable product）で対応した&lt;/h2>
&lt;p>スクラムに限った話しではないと思うが、プロダクト開発をしていると mvp（minimum viable product）という言葉を聞くことがままある。昔ながらのイテレーション開発よりも、アジャイル開発の文脈でよく使われるように思う。というのは、短い開発期間でプロトタイプを作ったり、最低限の動く機能を作ったりすることをよしとする考え方があるから。昔ながらのやり方だと、イテレーション期間の中でそういった段階的な開発はするものの、外部からみたとき (もしくはマイルストーン) においてはそこそこの機能が提供されているので mvp といった言い方をすることはなかった。もしかしたらアルファとかベータとか呼んでいたかもしれない。最近ある lambda 関数の移行作業を行った。serverless framework でデプロイしていたリソースを cdk で一元管理する。その過程で既存のコードを読むと、ある id をハードコーディングで指定して &lt;em>FIXME&lt;/em> がこんな感じに書いてあった。この id が指すリソースはその後なくなっており、本番環境で不要な処理が定期実行でずっと動き続けていたのと、本来は複数の id リソースに対して行うべき処理を実行していなかった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># FIXME 対象 id 一覧を取得する。(Phase2までに対応します)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;ABC001&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>チームの開発リーダーはその存在を全く忘れていたし、このスクリプトを実装したさらに上位の開発リーダーからはこの処理の要否はよくわからないからチームで確認してという曖昧な返事が返ってきた。チームで確認したところ、この処理は必要だとわかり、この機に複数の id リソースに対して対応するようにした。何も知らない私が修正しても5分で対応を完了した。&lt;/p>
&lt;blockquote>
&lt;p>mvp で対応したんで&lt;/p>
&lt;/blockquote>
&lt;p>このように実装者は話していたが、本当なのだろうか？と思えた。さらにこのスクリプトのエラーログのログストリームを監視して slack 通知する lambda 関数も移行対象で、コードの検証をしていたところ、slack 通知をするための lambda 関数が別途あり、その動作検証をしていたところ、その lambda 関数を呼び出す権限 &lt;em>lambda:InvokeFunction&lt;/em> が足りないことに気付いた。これも実装者に問い合わせたところ、動作検証はやっていないし、過去に1度も slack 通知は発生していないという。状況証拠から考えると、権限が足りないために正常に動作していなかったと推測される。結果的に mvp で対応したという2つの lambda 関数は実運用で半年間、無駄にリソースを浪費して何の役にも立っていなかった。当然、引き継ぎも、課題管理システムのチケットも、ドキュメントも何ら残されていなかった。mvp で対応したという表現に開発で大事なものを誤魔化してはいないだろうか。&lt;/p></content></item></channel></rss>