<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2023/04 on forest nook</title><link>/diary/dates/2023/04/</link><description>Recent content in 2023/04 on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/dates/2023/04/index.xml" rel="self" type="application/rss+xml"/><item><title>unix crypt(3) をよくわかってなかった</title><link>/diary/posts/2023/0418/</link><pubDate>Tue, 18 Apr 2023 08:17:20 +0900</pubDate><guid>/diary/posts/2023/0418/</guid><description>0時に寝て2回ほど起きて7時に起きた。わりと気分がよい方。
unix の crypt(3) というライブラリ実装 google の Admin console の api の REST Resource: users で hashFunction として crypt を選択してハッシュ化したパスワードを連携できる。
crypt - C crypt ライブラリに準拠しています。DES、MD5（ハッシュ プレフィックス $1$）、SHA-256（ハッシュ プレフィックス $5$）、SHA-512（ハッシュ プレフィックス $6$）ハッシュ アルゴリズムをサポートします。
この crypt というのは単純に sha256 や sha512 でハッシュ化すればよいわけではなく、歴史的経緯でそれぞれの os ごとにある crypt ライブラリの実装に依存しているらしい。
$ man 3 crypt おそらく google のドキュメントがいう C crypt ライブラリというのは glibc のことを指していると考えてよいと思うが、go の準標準パッケージである golang.org/x/crypto を探してもその実装は存在しない。これも推測だが、仕様が曖昧なものを go の開発者は実装しようとしないのだと思う。とはいえ、c の crypt ライブラリをラップして go から使うのも面倒と言えば面倒なので誰かが crypt ライブラリを真似て野良実装して、それが一部で使われていたりするようにみえる。しかし、なぜかそのオリジナルを作った開発者はそのコードのリポジトリを削除していて、ソースコードのコピーがまわりまわって、いま github.com/GehirnInc/crypt で保守されているらしい。このライブラリを使ってエンコードすると c の crypt ライブラリの出力と一致することは確認できた。この実装をみれば、単純にエンコードすればよいといったものではないことが伺えるので pure go のライブラリとして共有されているのは有り難い。</description><content>&lt;p>0時に寝て2回ほど起きて7時に起きた。わりと気分がよい方。&lt;/p>
&lt;h2 id="unix-の-crypt3-というライブラリ実装">unix の crypt(3) というライブラリ実装&lt;/h2>
&lt;p>google の Admin console の api の &lt;a href="https://developers.google.com/admin-sdk/directory/reference/rest/v1/users?hl=ja">REST Resource: users&lt;/a> で &lt;code>hashFunction&lt;/code> として crypt を選択してハッシュ化したパスワードを連携できる。&lt;/p>
&lt;blockquote>
&lt;p>crypt - C crypt ライブラリに準拠しています。DES、MD5（ハッシュ プレフィックス $1$）、SHA-256（ハッシュ プレフィックス $5$）、SHA-512（ハッシュ プレフィックス $6$）ハッシュ アルゴリズムをサポートします。&lt;/p>
&lt;/blockquote>
&lt;p>この crypt というのは単純に sha256 や sha512 でハッシュ化すればよいわけではなく、歴史的経緯でそれぞれの os ごとにある crypt ライブラリの実装に依存しているらしい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ man &lt;span style="color:#ae81ff">3&lt;/span> crypt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>おそらく google のドキュメントがいう C crypt ライブラリというのは glibc のことを指していると考えてよいと思うが、go の準標準パッケージである &lt;a href="https://pkg.go.dev/golang.org/x/crypto">golang.org/x/crypto&lt;/a> を探してもその実装は存在しない。これも推測だが、仕様が曖昧なものを go の開発者は実装しようとしないのだと思う。とはいえ、c の crypt ライブラリをラップして go から使うのも面倒と言えば面倒なので誰かが crypt ライブラリを真似て野良実装して、それが一部で使われていたりするようにみえる。しかし、なぜかそのオリジナルを作った開発者はそのコードのリポジトリを削除していて、ソースコードのコピーがまわりまわって、いま &lt;a href="https://github.com/GehirnInc/crypt">github.com/GehirnInc/crypt&lt;/a> で保守されているらしい。このライブラリを使ってエンコードすると c の crypt ライブラリの出力と一致することは確認できた。この実装をみれば、単純にエンコードすればよいといったものではないことが伺えるので pure go のライブラリとして共有されているのは有り難い。&lt;/p>
&lt;p>このライブラリを使ってハッシュ化した文字列と c 言語のコードも chatgpt に書いてもらっていくつか一致することは検証できた。デバッグしていて、もう1つ salt を生成も特定の文字しか使えないのでうっかり乱数を使って文字列生成していると間違ってしまう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">saltChars&lt;/span> = []byte(&lt;span style="color:#e6db74">&amp;#34;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789./&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GenerateSalt&lt;/span>(&lt;span style="color:#a6e22e">method&lt;/span> &lt;span style="color:#a6e22e">Method&lt;/span>) []&lt;span style="color:#66d9ef">byte&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span> = make([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#ae81ff">16&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">charsLength&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">saltChars&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = &lt;span style="color:#a6e22e">saltChars&lt;/span>[&lt;span style="color:#a6e22e">rand&lt;/span>.&lt;span style="color:#a6e22e">Intn&lt;/span>(&lt;span style="color:#a6e22e">charsLength&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">salt&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">method&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">SHA256&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">salt&lt;/span> = append([]byte(&lt;span style="color:#e6db74">&amp;#34;$5$&amp;#34;&lt;/span>), &lt;span style="color:#a6e22e">b&lt;/span>&lt;span style="color:#f92672">...&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">SHA512&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">salt&lt;/span> = append([]byte(&lt;span style="color:#e6db74">&amp;#34;$6$&amp;#34;&lt;/span>), &lt;span style="color:#a6e22e">b&lt;/span>&lt;span style="color:#f92672">...&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;unsupported salt method: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">method&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">salt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここで生成した salt を使って github.com/GehirnInc/crypt を使うとこんな感じで crypt を使って google のユーザーアカウント連携ができる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Crypt&lt;/span>(&lt;span style="color:#a6e22e">password&lt;/span>, &lt;span style="color:#a6e22e">salt&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) (&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">salt&lt;/span>) &amp;lt; &lt;span style="color:#ae81ff">3&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;invalid salt: %s&amp;#34;&lt;/span>, string(&lt;span style="color:#a6e22e">salt&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">crypter&lt;/span> &lt;span style="color:#a6e22e">crypt&lt;/span>.&lt;span style="color:#a6e22e">Crypter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> string(&lt;span style="color:#a6e22e">salt&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>:&lt;span style="color:#ae81ff">3&lt;/span>]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;$5$&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">crypter&lt;/span> = &lt;span style="color:#a6e22e">crypt&lt;/span>.&lt;span style="color:#a6e22e">SHA256&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;$6$&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">crypter&lt;/span> = &lt;span style="color:#a6e22e">crypt&lt;/span>.&lt;span style="color:#a6e22e">SHA512&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;unsupported salt prefix: %s&amp;#34;&lt;/span>, string(&lt;span style="color:#a6e22e">salt&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>:&lt;span style="color:#ae81ff">3&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hashed&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">crypter&lt;/span>.&lt;span style="color:#a6e22e">Generate&lt;/span>(&lt;span style="color:#a6e22e">password&lt;/span>, &lt;span style="color:#a6e22e">salt&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">crypter&lt;/span>.&lt;span style="color:#a6e22e">Verify&lt;/span>(&lt;span style="color:#a6e22e">hashed&lt;/span>, &lt;span style="color:#a6e22e">password&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">hashed&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ハッシュ化した文字列が正しいかどうかは実際に google にログインしてみないと判別できないのでわりとデバッグや検証に時間がかかった。&lt;/p>
&lt;h3 id="リファレンス">リファレンス&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://blog.amedama.jp/entry/unix-crypt-3">色々な Unix 系 OS の crypt(3) について調べたら面白かった話&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yosida95.com/2015/07/25/120000.html">/etc/shadow などで使われるハッシュ関数、 crypt(3) を Go 言語で実装しました&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>カスタム overlay モジュールを完全にマスターした</title><link>/diary/posts/2023/0417/</link><pubDate>Mon, 17 Apr 2023 08:53:17 +0900</pubDate><guid>/diary/posts/2023/0417/</guid><description>0時に寝て何度か起きて7時に起きた。変な夢をみた気がするが、どんな夢だったかは思い出せない。
openldap のカスタム overlay モジュールのデバッグ 先週末から openldap のカスタム overlay モジュール の開発やデバッグをしている。openldap のソースコードや gdb のデバッグのやり方にも慣れてきて私の中でも理解度が増してきた。
openldap サーバーのデバッグログは次のコードが設定されている。
#define LDAP_DEBUG_TRACE 0x0001 このコードを slapd.conf の loglevel に設定するとデバッグログを出力できるようになる。
loglevel stats 0x0001 ... このときに ppolicy の overlay モジュールがどのタイミングで呼ばれるかをデバッグログを確認しながら検証した。
overlay ppolicy ppolicy_hash_cleartext on 結論から言うと次の2点になる。
overlay は slapd.conf の後ろに書いた方のカスタムモジュールが先に実行される ppolicy_hash_cleartext は ppolicy_add のタイミングで平文パスワードをハッシュ化している gdb でデバッグすると op-&amp;gt;o_request-&amp;gt;oq_add-&amp;gt;rs_modlist も op-&amp;gt;o_request-&amp;gt;oq_add-&amp;gt;rs_e-&amp;gt;e_attrs も同じアドレスを指す overlay の処理は db に書き込む前と後の2つのタイミングがある slap_passwd_hash( &amp;amp;(pa-&amp;gt;a_vals[0]), &amp;amp;hpw, &amp;amp;txt ); ... pa-&amp;gt;a_vals[0].bv_val = hpw.bv_val; pa-&amp;gt;a_vals[0].bv_len = hpw.bv_len; カスタム overlay モジュールを使って openldap からパスワードを取得するには次の順番で処理が行われることを理解しておく必要がある。</description><content>&lt;p>0時に寝て何度か起きて7時に起きた。変な夢をみた気がするが、どんな夢だったかは思い出せない。&lt;/p>
&lt;h2 id="openldap-のカスタム-overlay-モジュールのデバッグ">openldap のカスタム overlay モジュールのデバッグ&lt;/h2>
&lt;p>先週末から &lt;a href="/diary/diary/posts/2023/0414/#chatgpt-と一緒にデバッグ">openldap のカスタム overlay モジュール&lt;/a> の開発やデバッグをしている。openldap のソースコードや gdb のデバッグのやり方にも慣れてきて私の中でも理解度が増してきた。&lt;/p>
&lt;p>openldap サーバーのデバッグログは次のコードが設定されている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define LDAP_DEBUG_TRACE 0x0001
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このコードを slapd.conf の loglevel に設定するとデバッグログを出力できるようになる。&lt;/p>
&lt;pre tabindex="0">&lt;code>loglevel stats 0x0001 ...
&lt;/code>&lt;/pre>&lt;p>このときに ppolicy の overlay モジュールがどのタイミングで呼ばれるかをデバッグログを確認しながら検証した。&lt;/p>
&lt;pre tabindex="0">&lt;code>overlay ppolicy
ppolicy_hash_cleartext on
&lt;/code>&lt;/pre>&lt;p>結論から言うと次の2点になる。&lt;/p>
&lt;ul>
&lt;li>overlay は slapd.conf の後ろに書いた方のカスタムモジュールが先に実行される&lt;/li>
&lt;li>ppolicy_hash_cleartext は ppolicy_add のタイミングで平文パスワードをハッシュ化している
&lt;ul>
&lt;li>gdb でデバッグすると op-&amp;gt;o_request-&amp;gt;oq_add-&amp;gt;rs_modlist も op-&amp;gt;o_request-&amp;gt;oq_add-&amp;gt;rs_e-&amp;gt;e_attrs も同じアドレスを指す&lt;/li>
&lt;li>overlay の処理は db に書き込む前と後の2つのタイミングがある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">slap_passwd_hash&lt;/span>( &lt;span style="color:#f92672">&amp;amp;&lt;/span>(pa&lt;span style="color:#f92672">-&amp;gt;&lt;/span>a_vals[&lt;span style="color:#ae81ff">0&lt;/span>]), &lt;span style="color:#f92672">&amp;amp;&lt;/span>hpw, &lt;span style="color:#f92672">&amp;amp;&lt;/span>txt );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pa&lt;span style="color:#f92672">-&amp;gt;&lt;/span>a_vals[&lt;span style="color:#ae81ff">0&lt;/span>].bv_val &lt;span style="color:#f92672">=&lt;/span> hpw.bv_val;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pa&lt;span style="color:#f92672">-&amp;gt;&lt;/span>a_vals[&lt;span style="color:#ae81ff">0&lt;/span>].bv_len &lt;span style="color:#f92672">=&lt;/span> hpw.bv_len;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>カスタム overlay モジュールを使って openldap からパスワードを取得するには次の順番で処理が行われることを理解しておく必要がある。&lt;/p>
&lt;ol>
&lt;li>mycustom_add &amp;lt;= このタイミングで平文パスワードを取得しないといけない&lt;/li>
&lt;li>ppolicy_add &amp;lt;= このタイミングで平文のパスワードをハッシュ化する&lt;/li>
&lt;li>mycustom_add_response &amp;lt;= このタイミングではすでにパスワードがハッシュ化されている&lt;/li>
&lt;/ol>
&lt;p>openldap のことを何も知らない素人が chatgpt と一緒にデバッグしてこのことを2日で理解できた。開発のやり方が変わっていく予兆を感じた。&lt;/p></content></item><item><title>yubikey bio を購入してみた</title><link>/diary/posts/2023/0416/</link><pubDate>Sun, 16 Apr 2023 11:53:13 +0900</pubDate><guid>/diary/posts/2023/0416/</guid><description>0時に寝て7時に起きた。午前中は洗濯して、昨日届いたお肉を焼いて朝ご飯にしながらドラクエタクトやってた。
YubiKey Bio の購入 デスクトップマシンが不調だった1-2ヶ月ほど m2 macbook air でお仕事をしていた。デスクトップマシンと比べて明らかに便利だったことがある。1password にログインするときに os のシステムアカウントも利用できて、具体的には指紋認証によりパスワード入力を必要としなかった。デフォルトでは2週間ごとにパスワード入力を必要とする設定になっているが、これも無効にすることもできる。パスワードを忘れないように1ヶ月に1回ぐらいは手入力してもよいかもしれない。生体認証はその精度にまだ懸念はあるそうだけど、こういった日常的な認証における用途ならそれほど高い精度を要求しないことに気付いた。私は個人でお仕事しているから日常でオフィスに保管している物理的なデバイスを盗むのは難しい。他にも linux で使える指紋認証のデバイスを探してみた。しかし、現時点では usb の指紋認証デバイスは windows 一択になっていて linux はサポートされていない。YubiKey ぐらいしか、私はみつけることができなかった。
YubiKey Bio - FIDO Edition をオンラインストアで購入した。船便で購入したので届くまで1ヶ月ほどかかる。急ぐものではないので気長に待つ。
YubiKey Bio - FIDO Edition $90 Shipping &amp;amp; handling Economy - 10-20 Working Days - No tracking available $5 Duties, taxes and/or carrier subcharges $14.68 USD 日本にお店がないので輸入扱いで関税がかかるのかな？また会計システムに登録するときに税金の計上方法を調べる必要がありそう。
自分たちでやろうとしないことを他人は助けられない 他社のプロジェクト開発のお手伝いでプロジェクトマネージャーとしてこの半年をマネジメントしてきて分かるようになったことが1つある。米軍がアフガニスタンから撤退するときの方便のようにみかけ、ロシアのウクライナ侵攻のときにウクライナ軍が善戦して西側諸国の支持を得たことでその正しさを再確認できた言葉がある。
バイデン大統領は演説で「当事国の軍隊が戦う意思がないのにアメリカが戦うわけにはいかない」という趣旨を繰り返した。
アフガニスタン崩壊と日本への教訓
2月からプロジェクトの開発遅れがみえていてスケジュール調整している。プロジェクトの開発がうまくいかないことの全責任は私にあることは間違いない。その点には一切の懸念も疑問もない。昨今の働き方改革で有休取得が大事なことも理解していて、平均して取得するなら毎月1-2日休むことになる。それは理解できるが、開発が遅延していても有休で休み、その遅延をマネージャである私が休出して開発を肩代わりするという調整を1ヶ月以上続けてきて、この歪みは開発やプロジェクトにとってよくないということもわかってきた。
私個人のモチベーション管理にも多少の影響はあるが、私は指示されて休出しているわけではなく、自分の目的のためにやっているのでこの影響はそれほど重要ではない。
なにが問題かというとプロダクトオーナーシップを開発者がもたないという点にある。私はお手伝いであるから、いずれいなくなる。周りからどうみえようと最終的にプロダクトオーナーシップは契約形態としてもてない。そして、お手伝い先の開発メンバーがもつようになるのが望ましい。しかし、そういう雰囲気はみえない。これまで他社の人間がマネージャーをやっているようなプロジェクトに私が参加したことがなかったためにそういった視点がなかった。そして、私は自分がイニシアティブをもって開発するプロダクトはすべてプロダクトオーナーシップをもって臨んできた。そのため、開発者に裁量を与えることで必然的にプロダクトオーナーシップをもつようになると信じてきたが、いまのやり方だとそうならない気がしている。なぜならば、放っておいても問題になる前に私が勝手に対応してしまうために開発者のインセンティブやモチベーションを阻害してしまうからだ。
プロジェクトにおけるスケジュールや品質を担保するためにはマネージャーである私が一定の尽力をするのは合理的ではある。一方でそれをやり過ぎることで開発メンバーのプロダクトオーナーシップを遠ざけてしまう。プロダクトオーナーシップをもっていない開発者が休出してまで開発に尽力する意味など普通にはない。仮に私が開発メンバーでもそう思うだろう。昔の上長 がやっていたことをみて私が学んだことを、外部の人間として開発メンバーに教えることはとても難しいことを理解できた。</description><content>&lt;p>0時に寝て7時に起きた。午前中は洗濯して、昨日届いたお肉を焼いて朝ご飯にしながらドラクエタクトやってた。&lt;/p>
&lt;h2 id="yubikey-bio-の購入">YubiKey Bio の購入&lt;/h2>
&lt;p>デスクトップマシンが不調だった1-2ヶ月ほど &lt;a href="/diary/diary/posts/2022/1004/#m2-macbook-air-購入">m2 macbook air&lt;/a> でお仕事をしていた。デスクトップマシンと比べて明らかに便利だったことがある。&lt;a href="https://1password.com/jp/">1password&lt;/a> にログインするときに os のシステムアカウントも利用できて、具体的には指紋認証によりパスワード入力を必要としなかった。デフォルトでは2週間ごとにパスワード入力を必要とする設定になっているが、これも無効にすることもできる。パスワードを忘れないように1ヶ月に1回ぐらいは手入力してもよいかもしれない。生体認証はその精度にまだ懸念はあるそうだけど、こういった日常的な認証における用途ならそれほど高い精度を要求しないことに気付いた。私は個人でお仕事しているから日常でオフィスに保管している物理的なデバイスを盗むのは難しい。他にも linux で使える指紋認証のデバイスを探してみた。しかし、現時点では usb の指紋認証デバイスは windows 一択になっていて linux はサポートされていない。YubiKey ぐらいしか、私はみつけることができなかった。&lt;/p>
&lt;p>&lt;a href="https://www.yubico.com/jp/product/yubikey-bio-series/yubikey-bio/">YubiKey Bio - FIDO Edition&lt;/a> をオンラインストアで購入した。船便で購入したので届くまで1ヶ月ほどかかる。急ぐものではないので気長に待つ。&lt;/p>
&lt;pre tabindex="0">&lt;code>YubiKey Bio - FIDO Edition
$90
Shipping &amp;amp; handling
Economy - 10-20 Working Days - No tracking available
$5
Duties, taxes and/or carrier subcharges
$14.68 USD
&lt;/code>&lt;/pre>&lt;p>日本にお店がないので輸入扱いで関税がかかるのかな？また会計システムに登録するときに税金の計上方法を調べる必要がありそう。&lt;/p>
&lt;h2 id="自分たちでやろうとしないことを他人は助けられない">自分たちでやろうとしないことを他人は助けられない&lt;/h2>
&lt;p>他社のプロジェクト開発のお手伝いでプロジェクトマネージャーとしてこの半年をマネジメントしてきて分かるようになったことが1つある。米軍がアフガニスタンから撤退するときの方便のようにみかけ、ロシアのウクライナ侵攻のときにウクライナ軍が善戦して西側諸国の支持を得たことでその正しさを再確認できた言葉がある。&lt;/p>
&lt;blockquote>
&lt;p>バイデン大統領は演説で「当事国の軍隊が戦う意思がないのにアメリカが戦うわけにはいかない」という趣旨を繰り返した。&lt;/p>
&lt;p>&lt;a href="https://www.jfss.gr.jp/article/1569">アフガニスタン崩壊と日本への教訓&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>2月からプロジェクトの開発遅れがみえていてスケジュール調整している。プロジェクトの開発がうまくいかないことの全責任は私にあることは間違いない。その点には一切の懸念も疑問もない。昨今の働き方改革で有休取得が大事なことも理解していて、平均して取得するなら毎月1-2日休むことになる。それは理解できるが、開発が遅延していても有休で休み、その遅延をマネージャである私が休出して開発を肩代わりするという調整を1ヶ月以上続けてきて、この歪みは開発やプロジェクトにとってよくないということもわかってきた。&lt;/p>
&lt;p>私個人のモチベーション管理にも多少の影響はあるが、私は指示されて休出しているわけではなく、自分の目的のためにやっているのでこの影響はそれほど重要ではない。&lt;/p>
&lt;p>なにが問題かというとプロダクトオーナーシップを開発者がもたないという点にある。私はお手伝いであるから、いずれいなくなる。周りからどうみえようと最終的にプロダクトオーナーシップは契約形態としてもてない。そして、お手伝い先の開発メンバーがもつようになるのが望ましい。しかし、そういう雰囲気はみえない。これまで他社の人間がマネージャーをやっているようなプロジェクトに私が参加したことがなかったためにそういった視点がなかった。そして、私は自分がイニシアティブをもって開発するプロダクトはすべてプロダクトオーナーシップをもって臨んできた。そのため、開発者に裁量を与えることで必然的にプロダクトオーナーシップをもつようになると信じてきたが、いまのやり方だとそうならない気がしている。なぜならば、放っておいても問題になる前に私が勝手に対応してしまうために開発者のインセンティブやモチベーションを阻害してしまうからだ。&lt;/p>
&lt;p>プロジェクトにおけるスケジュールや品質を担保するためにはマネージャーである私が一定の尽力をするのは合理的ではある。一方でそれをやり過ぎることで開発メンバーのプロダクトオーナーシップを遠ざけてしまう。プロダクトオーナーシップをもっていない開発者が休出してまで開発に尽力する意味など普通にはない。仮に私が開発メンバーでもそう思うだろう。&lt;a href="/diary/diary/posts/2023/0310/">昔の上長&lt;/a> がやっていたことをみて私が学んだことを、外部の人間として開発メンバーに教えることはとても難しいことを理解できた。&lt;/p></content></item><item><title>休出デバッグ</title><link>/diary/posts/2023/0415/</link><pubDate>Sat, 15 Apr 2023 16:26:08 +0900</pubDate><guid>/diary/posts/2023/0415/</guid><description>昨日は久しぶりに飲みに行っきて1時に寝て8時に起きた。
ストレッチ 外がだいぶ暖かくなってきて散歩に行く機会も増えてきた気がする。今日の開脚幅は開始前157cmで、ストレッチ後159cmだった。先週と違って今週は忙しくて座っている時間が大幅に増えた。そして、その分の右腰の張りは強かった。腰の張り具合はその週の忙しさや労働時間で推測できるぐらいにはわかってきた。それ以外はだいたい可もなく不可もなくな感じだったと思う。
淡路牛の受け取り 姉からお肉が届くという連絡があったので日時を調整して受け取った。島サラダフェア2022 という懸賞に応募していたのが当たったらしい。5000円相当の淡路牛らしい。お正月に食べるようなお肉だと言えば伝わるかな。A賞の5名のうちの1人がここにいるので総応募数は推して知るべし。姉が言うには全然応募ないらしい。こういうの調べて真面目に応募してメルカリで売るみたいなことやったらそれなりに儲かるのかもしれない。運営はマーケティングのやり方を変えた方がいいんじゃないかとか心配になって話していた。
openldap の overlay のデバッグ 午後から昨日の続き。chatgpt と一緒に openldap サーバーのカスタム overlay モジュールのデバッグをしていた。昨日の時点では2つの問題があることを確認できていた。今日は個々の問題の詳細をデバッグしながらワークアラウンドとして動かすためのコードを書いた。1つはビルドの問題じゃないかと思える不可思議な現象が起きていて、もう1つは openldap の ppolicy の仕様とカスタム overlay モジュールの仕様のどちらが正しいのかを設計者に確認する必要がある。15年ぶりぐらいに c 言語のコードを書いている。かなり怪しいけど、gdb をインタラクティブな repl のようにして振る舞いを確認しながら書いている。カスタム overlay モジュールでエラーが発生すると openldap はその処理をスキップするようにみえて、なんのログも出ない。細かくログ出力してどこまで動いたのかを確認しながら開発するとよさそうな雰囲気がわかった。</description><content>&lt;p>昨日は久しぶりに飲みに行っきて1時に寝て8時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>外がだいぶ暖かくなってきて散歩に行く機会も増えてきた気がする。今日の開脚幅は開始前157cmで、ストレッチ後159cmだった。先週と違って今週は忙しくて座っている時間が大幅に増えた。そして、その分の右腰の張りは強かった。腰の張り具合はその週の忙しさや労働時間で推測できるぐらいにはわかってきた。それ以外はだいたい可もなく不可もなくな感じだったと思う。&lt;/p>
&lt;h2 id="淡路牛の受け取り">淡路牛の受け取り&lt;/h2>
&lt;p>姉からお肉が届くという連絡があったので日時を調整して受け取った。&lt;a href="https://www.awajikoku.com/shimasalad/2022/12/04/20221204094613/">島サラダフェア2022&lt;/a> という懸賞に応募していたのが当たったらしい。5000円相当の淡路牛らしい。お正月に食べるようなお肉だと言えば伝わるかな。A賞の5名のうちの1人がここにいるので総応募数は推して知るべし。姉が言うには全然応募ないらしい。こういうの調べて真面目に応募してメルカリで売るみたいなことやったらそれなりに儲かるのかもしれない。運営はマーケティングのやり方を変えた方がいいんじゃないかとか心配になって話していた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0415_awaji-beef.jpg"/>
&lt;/figure>
&lt;h2 id="openldap-の-overlay-のデバッグ">openldap の overlay のデバッグ&lt;/h2>
&lt;p>午後から昨日の続き。&lt;a href="https://openai.com/blog/chatgpt">chatgpt&lt;/a> と一緒に openldap サーバーのカスタム overlay モジュールのデバッグをしていた。昨日の時点では2つの問題があることを確認できていた。今日は個々の問題の詳細をデバッグしながらワークアラウンドとして動かすためのコードを書いた。1つはビルドの問題じゃないかと思える不可思議な現象が起きていて、もう1つは openldap の ppolicy の仕様とカスタム overlay モジュールの仕様のどちらが正しいのかを設計者に確認する必要がある。15年ぶりぐらいに c 言語のコードを書いている。かなり怪しいけど、gdb をインタラクティブな repl のようにして振る舞いを確認しながら書いている。カスタム overlay モジュールでエラーが発生すると openldap はその処理をスキップするようにみえて、なんのログも出ない。細かくログ出力してどこまで動いたのかを確認しながら開発するとよさそうな雰囲気がわかった。&lt;/p></content></item><item><title>oss な開発は chatgpt が猛威を振るう予感</title><link>/diary/posts/2023/0414/</link><pubDate>Fri, 14 Apr 2023 07:52:38 +0900</pubDate><guid>/diary/posts/2023/0414/</guid><description>2時に寝て6時半に起きた。開発の追い込みが佳境に入ってきて集中力が増してきた。
chatgpt と一緒にデバッグ openldap サーバーの拡張の仕組みに Overlays がある。c 言語でカスタム overlay を実装することで openldap サーバーに任意のフック処理を実装できる。いまやっていることはパスワードの追加や更新をフックしてそのパスワードを id 連携するためのモジュールを開発している。というか、開発済みだと聞いていたモジュールが意図したように動かないのでデバッグしている。例えば ppolicy という overlay を使って次のように設定すると、平文で送ったパスワードをディレクトリサービスの db へ格納する前に平文からパスワードをハッシュ化してくれる。この変換はパスワード変更を overlay でフックして実装されている。
overlay ppolicy ppolicy_hash_cleartext on overlay は slapd.conf に設定した順番に実行されるようで、それぞれの overlay に依存関係がある場合は実際の処理にも影響がある。そんな openldap サーバーの拡張モジュールの開発を引き継ぐことになったが、私がまったく openldap サーバーのことをわかっていないので chatgpt を使って理解しながらデバッグしている。これがそれなりにうまくいっていて調査が捗った。但し、chatgpt が教えてくれたことなので完全に正しいかどうかの保証がない。振る舞いで検証できるものはともかく、そうじゃないものは最後に有識者に正しいかどうかを確認する必要がある。
例えば、次のような ldif エントリーをサンプルとして、パスワードは userPassword という属性で扱う。ここで userPassword だけコロンが2重 (::) になっていることがわかる。これは属性の値が base64 でエンコーディングされていることを意味している。こういった2重コロンのような短いキーワードを検索で調べるのは難しい。chatgpt ならピンポイントに答えてくれる。
dn: uid=jdoe,ou=users,dc=example,dc=com objectClass: top objectClass: person objectClass: organizationalPerson objectClass: inetOrgPerson uid: jdoe cn: John Doe givenName: John sn: Doe mail: jdoe@example.</description><content>&lt;p>2時に寝て6時半に起きた。開発の追い込みが佳境に入ってきて集中力が増してきた。&lt;/p>
&lt;h2 id="chatgpt-と一緒にデバッグ">chatgpt と一緒にデバッグ&lt;/h2>
&lt;p>openldap サーバーの拡張の仕組みに &lt;a href="https://www.openldap.org/doc/admin24/overlays.html">Overlays&lt;/a> がある。c 言語でカスタム overlay を実装することで openldap サーバーに任意のフック処理を実装できる。いまやっていることはパスワードの追加や更新をフックしてそのパスワードを id 連携するためのモジュールを開発している。というか、開発済みだと聞いていたモジュールが意図したように動かないのでデバッグしている。例えば &lt;code>ppolicy&lt;/code> という overlay を使って次のように設定すると、平文で送ったパスワードをディレクトリサービスの db へ格納する前に平文からパスワードをハッシュ化してくれる。この変換はパスワード変更を overlay でフックして実装されている。&lt;/p>
&lt;pre tabindex="0">&lt;code>overlay ppolicy
ppolicy_hash_cleartext on
&lt;/code>&lt;/pre>&lt;p>overlay は slapd.conf に設定した順番に実行されるようで、それぞれの overlay に依存関係がある場合は実際の処理にも影響がある。そんな openldap サーバーの拡張モジュールの開発を引き継ぐことになったが、私がまったく openldap サーバーのことをわかっていないので &lt;a href="https://openai.com/blog/chatgpt">chatgpt&lt;/a> を使って理解しながらデバッグしている。これがそれなりにうまくいっていて調査が捗った。但し、chatgpt が教えてくれたことなので完全に正しいかどうかの保証がない。振る舞いで検証できるものはともかく、そうじゃないものは最後に有識者に正しいかどうかを確認する必要がある。&lt;/p>
&lt;p>例えば、次のような ldif エントリーをサンプルとして、パスワードは &lt;code>userPassword&lt;/code> という属性で扱う。ここで &lt;code>userPassword&lt;/code> だけコロンが2重 (&lt;code>::&lt;/code>) になっていることがわかる。これは属性の値が base64 でエンコーディングされていることを意味している。こういった2重コロンのような短いキーワードを検索で調べるのは難しい。chatgpt ならピンポイントに答えてくれる。&lt;/p>
&lt;pre tabindex="0">&lt;code>dn: uid=jdoe,ou=users,dc=example,dc=com
objectClass: top
objectClass: person
objectClass: organizationalPerson
objectClass: inetOrgPerson
uid: jdoe
cn: John Doe
givenName: John
sn: Doe
mail: jdoe@example.com
userPassword:: e1NTSEF9bm9ZMU5kdzN3WUdSbFhpdDJUaTY5UW9SeXpXaklEeXc=
&lt;/code>&lt;/pre>&lt;p>openldap は oss だし、ドキュメントもインターネット上にあるので構造体の定義や c 言語のサンプルコードも書いてくれる。それらが完全に正しいか、私には判断できないが、openldap のソースコードで調査するところの当たりをつけるには十分な情報を返してくれる。カスタム overlay を開発するときの主要なエントリーポイントと ldap 操作のタグ名は次になる。&lt;/p>
&lt;ul>
&lt;li>bi_op_bind: バインド（認証）操作に対応するエントリーポイント、LDAP_REQ_BIND&lt;/li>
&lt;li>bi_op_search: 検索操作に対応するエントリーポイント、LDAP_REQ_SEARCH&lt;/li>
&lt;li>bi_op_compare: 比較操作に対応するエントリーポイント、LDAP_REQ_COMPARE&lt;/li>
&lt;li>bi_op_modify: 修正（属性の追加、削除、変更）操作に対応するエントリーポイント、LDAP_REQ_MODIFY&lt;/li>
&lt;li>bi_op_modrdn: エントリ名の変更 (MODIFY RDN) 操作に対応するエントリーポイント、LDAP_REQ_MODRDN&lt;/li>
&lt;li>bi_op_add: エントリの追加操作に対応するエントリーポイント、LDAP_REQ_ADD&lt;/li>
&lt;li>bi_op_delete: エントリの削除操作に対応するエントリーポイント、LDAP_REQ_DELETE&lt;/li>
&lt;li>bi_op_abandon: 中止操作に対応するエントリーポイント、LDAP_REQ_ABANDON&lt;/li>
&lt;li>bi_op_extended: 拡張操作に対応するエントリーポイント、LDAP_REQ_EXTENDED&lt;/li>
&lt;/ul>
&lt;p>例えば、LDAP_REQ_ADD は ldap.h で次のように定義されている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define LDAP_REQ_ADD ((ber_tag_t) 0x68U) &lt;/span>&lt;span style="color:#75715e">/* application + constructed */&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これを gdb でデバッグしてタグを確認するときは次のように Operation 構造体内の o_tag をチェックすればよい。gdb で16進数表示するときは &lt;code>/x&lt;/code> を指定する。&lt;/p>
&lt;pre tabindex="0">&lt;code>(gdb) print /x op-&amp;gt;o_tag
$8 = 0x68
&lt;/code>&lt;/pre>&lt;p>ppolicy よりも前にカスタム overlay を設定すれば平文のパスワードにアクセスできそうにみえるのだけど、gdb でデバッグしているとハッシュ化済みのパスワードになっていた。&lt;/p>
&lt;p>あと稼働している openldap サーバーに gdb で attach してデバッグする方法も chatgpt に聞きながら行った。やりたい操作に対して gdb のコマンドを教えてもらってすぐに検証してフィードバックからさらに質問できるのでインタラクティブな repl のような環境と chatgpt は相性がよいように思えた。gdb のコマンドを覚えておく必要も、ググる必要もないことに気付いた。&lt;/p>
&lt;h2 id="近況報告">近況報告&lt;/h2>
&lt;p>元同僚と &lt;a href="/diary/diary/posts/2022/0311/#近況報告">約1年ぶりの近況報告&lt;/a> の雑談会をしてきた。これで3回目かな。毎年の恒例行事のようになってきた。兵庫県の住みたい街ランキングでいつも上位にある &lt;a href="https://www.nishi.or.jp/">西宮市&lt;/a> でカレーを食べて、バーで飲んできた。三ノ宮から西宮は快速で15分程度の距離。すぐ行ける場所なんだが、とくに行く機会がなかったので神戸に引っ越してきて5年以上経つのに電車で行ったのは今回が初めてになる。いつも通り近況を聞きながら、みんな私と同じぐらいの世代なので今後のキャリアの方向性などを話していた。&lt;/p>
&lt;p>私は起業して税金やその仕組みに関心をもつようになり、起業する前より少し詳しくなった。知人から節税相談を受けることもある。税金の基本的な考え方として、1つの大きな収入に対して節税することはできない。自由に使えるお金がほしかったら基本的に節税できない。税金をたくさん払って貯金するしかない。一方で個人と会社に資産を分割したり、共済や基金を活用することで手取りの収入は減るが、支払う税金は少なくなって中長期でみると資産が増える。例えば、共済や基金に積み立てたお金は原則としては退職所得で戻ってくるので、ずっと優遇された &lt;a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/shotoku/1420.htm">退職所得の所得税&lt;/a> により、最終的に支払う税金が少なくなるからである。これが税金を支払う基本的な考え方。自分の手元にお金を残した上で税金を払いたくないが、どうすればよいか？とよく聞かれるが、そんなことはできないというのが模範回答になる。元同僚も私もそうなのだが、もはや自分の生活にお金をあまり必要としていない。私が節税の仕組みを調べたり実践したりするのは、税金の仕組みを学ぶために過ぎない。ただ知識として学ぶよりも、実際に実践して運用してみる方が学びになる。&lt;/p>
&lt;p>以前の &lt;a href="/diary/diary/posts/2023/0408/#もくもく会">出張もくもく会&lt;/a> の後で懇親会のときにそのうち資本主義は新しい制度にとって変わられるのではないかという話題があった。それは行き過ぎた資本主義の弊害と、資本主義である限り40時間/週の労働時間から抜け出すには資本家になるしかなくて、人類はすでにこれだけ技術があるのだからもっと多くの人が今よりも働かずに食べていけるのではないかと多くの人が考えている。私の場合も、実質は自分のやりたいことしかやってなくて、自分のために働きながらも、老後のために一応はお金をもらっておくみたいな働き方になっている。この考え方は資本主義の次の制度へ移行するときに活きてくればいいなと思う。&lt;/p></content></item><item><title>rpm のパッケージングを作り直す</title><link>/diary/posts/2023/0413/</link><pubDate>Thu, 13 Apr 2023 09:30:07 +0900</pubDate><guid>/diary/posts/2023/0413/</guid><description>1時に寝て何度か起きてあまり眠れなかった。昨日は遅くに帰ってきて晩ご飯を遅くに食べたので寝ていて吐き気がしてうまく眠れなかった。寝る前に食べることはできないみたい。
rpm パッケージング再び ビルドができるようになったモジュール を rpm でパッケージングする。rpm でのビルドもできる状態で渡してもらえたので私が開発したモジュールを追加してパッケージングを修正する。rpm のパッケージングを行うのも5年ぶりといったところ。コンテナに慣れてしまって rpm を使うことはもうないと思っていたけれど、まだまだ現役であることを実感する。spec ファイルは普通に読めるので既存の設定や、他の rpm パッケージの spec ファイルの記述などもみながら、自分のモジュールで必要な設定を追加していく。久しぶりだったわりには順調に作業が進捗して2-3時間もやっていて追加の修正をして、実際にインストールして動作確認もできた。
rpm のマクロを確認する。
$ rpm --eval &amp;#34;%{_libdir}&amp;#34; /usr/lib64 あるサーバーサービスを systemd 経由で実行させる。内部的に環境変数を使っている。systemd の EnvironmentFile で環境変数を設定したファイルへのパスを指定できる。例えば、次のように EnvironmentFile にパスを設定する。
[Service] Type=simple EnvironmentFile=/opt/path/to/my.env ExecStart=/opt/path/to/bin/my-service KillMode=process StartLimitBurst=2 Restart=on-abnormal User=ldap Group=ldap この環境変数にはパスワードのような機密情報も含むので rpm の %files で root 権限でのみ読めるようにアクセス制限を設定する。systemd 自体は root 権限で動くので環境変数の設定は root が行って my-service は ldap のユーザー／グループ権限で動く。
%attr(600,root,root) %config(noreplace) %{_sysconfdir}/path/to/my.env もう rpm なんか古の技術で自分で作ることなんか今後はないやろと思っていた。5年ぶりぐらいに、いま rpm でパッケージングしていて、spec ファイルを普通に読めるので簡単なパッケージングぐらいはすぐできる。なんでもやっといたら役に立つもんやと思ったりもする。
&amp;mdash; Tetsuya Morimoto (@t2y) April 13, 2023</description><content>&lt;p>1時に寝て何度か起きてあまり眠れなかった。昨日は遅くに帰ってきて晩ご飯を遅くに食べたので寝ていて吐き気がしてうまく眠れなかった。寝る前に食べることはできないみたい。&lt;/p>
&lt;h2 id="rpm-パッケージング再び">rpm パッケージング再び&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0411/#ビルド問題の解決">ビルドができるようになったモジュール&lt;/a> を rpm でパッケージングする。rpm でのビルドもできる状態で渡してもらえたので私が開発したモジュールを追加してパッケージングを修正する。rpm のパッケージングを行うのも5年ぶりといったところ。コンテナに慣れてしまって rpm を使うことはもうないと思っていたけれど、まだまだ現役であることを実感する。spec ファイルは普通に読めるので既存の設定や、他の rpm パッケージの spec ファイルの記述などもみながら、自分のモジュールで必要な設定を追加していく。久しぶりだったわりには順調に作業が進捗して2-3時間もやっていて追加の修正をして、実際にインストールして動作確認もできた。&lt;/p>
&lt;p>rpm のマクロを確認する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ rpm --eval &lt;span style="color:#e6db74">&amp;#34;%{_libdir}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/lib64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>あるサーバーサービスを systemd 経由で実行させる。内部的に環境変数を使っている。systemd の EnvironmentFile で環境変数を設定したファイルへのパスを指定できる。例えば、次のように EnvironmentFile にパスを設定する。&lt;/p>
&lt;pre tabindex="0">&lt;code>[Service]
Type=simple
EnvironmentFile=/opt/path/to/my.env
ExecStart=/opt/path/to/bin/my-service
KillMode=process
StartLimitBurst=2
Restart=on-abnormal
User=ldap
Group=ldap
&lt;/code>&lt;/pre>&lt;p>この環境変数にはパスワードのような機密情報も含むので rpm の %files で root 権限でのみ読めるようにアクセス制限を設定する。systemd 自体は root 権限で動くので環境変数の設定は root が行って my-service は ldap のユーザー／グループ権限で動く。&lt;/p>
&lt;pre tabindex="0">&lt;code>%attr(600,root,root) %config(noreplace) %{_sysconfdir}/path/to/my.env
&lt;/code>&lt;/pre>&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">もう rpm なんか古の技術で自分で作ることなんか今後はないやろと思っていた。5年ぶりぐらいに、いま rpm でパッケージングしていて、spec ファイルを普通に読めるので簡単なパッケージングぐらいはすぐできる。なんでもやっといたら役に立つもんやと思ったりもする。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1646540939740213248?ref_src=twsrc%5Etfw">April 13, 2023&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item><item><title>ローカルのゲスト os に開発環境を作る</title><link>/diary/posts/2023/0412/</link><pubDate>Wed, 12 Apr 2023 09:30:05 +0900</pubDate><guid>/diary/posts/2023/0412/</guid><description>0時に寝て7時に起きた。いろいろうまくいってない。
vagrant 再び rpm でパッケージングされた openldap サーバーの動作検証をするために vagrant で rockylinux/8 Vagrant box の環境を構築する。 rockylinux 8 だと次のようなエラーが発生した。
VBoxManage: error: Failed to open OVF file &amp;#39;path/to/.vagrant.d/boxes/rockylinux-VAGRANTSLASH-8/7.0.0/virtualbox/box.ovf&amp;#39; (VERR_FILE_NOT_FOUND) 既知のバグとして次の forum にワークアラウンドが書かれている。
Vagrant box rockylinux/8 fails for virtualbox provider with error VBOX_E_OBJECT_NOT_FOUND uefi なマシンのせいなのかな？詳細を理解していないけど Vagrantfile を次のようにする。
Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.box = &amp;#34;rockylinux/8&amp;#34; config.vm.provider &amp;#34;virtualbox&amp;#34; do |domain| domain.customize [&amp;#34;modifyvm&amp;#34;, :id, &amp;#34;--firmware&amp;#34;, &amp;#34;efi&amp;#34;] end end 修正済みのイメージをダウンロードするようにメタデータを作成する。
$ vi box-metadata.json { &amp;#34;name&amp;#34; : &amp;#34;rockylinux/8&amp;#34;, &amp;#34;description&amp;#34; : &amp;#34;Rocky Linux 8 7.</description><content>&lt;p>0時に寝て7時に起きた。いろいろうまくいってない。&lt;/p>
&lt;h2 id="vagrant-再び">vagrant 再び&lt;/h2>
&lt;p>rpm でパッケージングされた openldap サーバーの動作検証をするために vagrant で &lt;a href="https://app.vagrantup.com/rockylinux/boxes/8">rockylinux/8 Vagrant box&lt;/a> の環境を構築する。 rockylinux 8 だと次のようなエラーが発生した。&lt;/p>
&lt;pre tabindex="0">&lt;code>VBoxManage: error: Failed to open OVF file &amp;#39;path/to/.vagrant.d/boxes/rockylinux-VAGRANTSLASH-8/7.0.0/virtualbox/box.ovf&amp;#39; (VERR_FILE_NOT_FOUND)
&lt;/code>&lt;/pre>&lt;p>既知のバグとして次の forum にワークアラウンドが書かれている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://forums.rockylinux.org/t/vagrant-box-rockylinux-8-fails-for-virtualbox-provider-with-error-vbox-e-object-not-found/8228/4">Vagrant box rockylinux/8 fails for virtualbox provider with error VBOX_E_OBJECT_NOT_FOUND&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>uefi なマシンのせいなのかな？詳細を理解していないけど Vagrantfile を次のようにする。&lt;/p>
&lt;pre tabindex="0">&lt;code>Vagrant.configure(&amp;#34;2&amp;#34;) do |config|
config.vm.box = &amp;#34;rockylinux/8&amp;#34;
config.vm.provider &amp;#34;virtualbox&amp;#34; do |domain|
domain.customize [&amp;#34;modifyvm&amp;#34;, :id, &amp;#34;--firmware&amp;#34;, &amp;#34;efi&amp;#34;]
end
end
&lt;/code>&lt;/pre>&lt;p>修正済みのイメージをダウンロードするようにメタデータを作成する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ vi box-metadata.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;rockylinux/8&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;description&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Rocky Linux 8 7.0.0 Bugfix&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;versions&amp;#34;&lt;/span> : [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;version&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;7.0.1-20221213.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;providers&amp;#34;&lt;/span> : [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;virtualbox&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;http://dl.rockylinux.org/pub/rocky/8/images/x86_64/Rocky-8-Vagrant-Vbox-8.7-20221213.0.x86_64.box&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再度 vagrant の環境を作り直す。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ vagrant box add box-metadata.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ rm -rf .vagrant/ &lt;span style="color:#75715e"># 古い設定を削除&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ vagrant up
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>vagrant を使うのも4年ぶりになるかな。コンテナに慣れてしまうと久しぶり感がある。使い方を忘れていて調べながらやってた。&lt;/p>
&lt;h3 id="vagrant-にポートフォワーディングの設定を追加">vagrant にポートフォワーディングの設定を追加&lt;/h3>
&lt;pre tabindex="0">&lt;code>$ vi Vagrantfile
...
config.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 389, host: 1389 # ldap
config.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 636, host: 1636 # ldaps
...
&lt;/code>&lt;/pre>&lt;p>これでホスト os からゲスト os へ接続できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>==&amp;gt; default: Forwarding ports...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> default: 389 (guest) =&amp;gt; 1389 (host) (adapter 1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> default: 636 (guest) =&amp;gt; 1636 (host) (adapter 1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> default: 22 (guest) =&amp;gt; 2222 (host) (adapter 1)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここでは ldap サーバーに対して &lt;a href="https://directory.apache.org/studio/">Apache Directory Studio&lt;/a> で接続できるように ssh のポートフォワーディングを設定している。&lt;/p>
&lt;h3 id="scp-でファイルを転送">scp でファイルを転送&lt;/h3>
&lt;p>config を出力する。ssh の秘密鍵へのパス設定をしてくれるので scp のオプションに指定しなくて済む。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ vagrant ssh-config &amp;gt; ssh.config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ポート番号も config に記載されているけれど、それは指定しないと scp できなかった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ scp -P &lt;span style="color:#ae81ff">2200&lt;/span> -F ssh.config path/to/myfile vagrant@localhost:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>vagrant ユーザーのパスワードも聞かれて vagrant を指定すればコピーできた。config を作ってもあまり便利ではなかった。&lt;/p>
&lt;p>&lt;a href="https://github.com/invernizzi/vagrant-scp">vagrant-scp&lt;/a> というプラグインがあるのでインストールしてみる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ vagrant plugin install vagrant-scp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>次のようにして使う。この方が簡単。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ vagrant scp path/to/myfile ./ &lt;span style="color:#75715e"># 仮想マシンのホームディレクトリにコピーされる&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>リリースまで残り2週間</title><link>/diary/posts/2023/0411/</link><pubDate>Tue, 11 Apr 2023 08:29:43 +0900</pubDate><guid>/diary/posts/2023/0411/</guid><description>0時に寝て4時に起きて6時半に起きた。最近は以前より眠れるようになりつつある。今日は定例会議とバグ調査とコードレビューと検証をしていたらすぐに1日終わってしまった。
ビルド問題の解決 2月の上旬 から問題を認識していて、ある c 言語のモジュールが正常にビルドできない問題がようやく解決されてビルドできるようになった。libtool を使ってライブラリをビルドしていて、歴史的経緯からシンボル名の書き換えが必要だったみたい。2週間後にリリースされるモジュールの開発前の状態でビルドが通ったのがいまという状況。ここから私がそのモジュールに対して追加の開発を行う。本来の私のお仕事ではないけど、このモジュール開発の私が負う方がチームとしての成果が大きいと判断した。
ビルドができるようになるまで2ヶ月程待ったことになる。普通に考えたらリリース延期だが、担当者の割り当ての課題もあって、もうこれは不可抗力としてそのままリリースしようと思う。おそらく誰もこの件に関して本来の開発の在り方についての言及しないと私は考えている。おそらく品質も信頼できないものだと推測する。残りの2週間で追加の開発を一目散に駆けて成るように成るのを私も受け入れることにしようと思う。</description><content>&lt;p>0時に寝て4時に起きて6時半に起きた。最近は以前より眠れるようになりつつある。今日は定例会議とバグ調査とコードレビューと検証をしていたらすぐに1日終わってしまった。&lt;/p>
&lt;h2 id="ビルド問題の解決">ビルド問題の解決&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0309/">2月の上旬&lt;/a> から問題を認識していて、ある c 言語のモジュールが正常にビルドできない問題がようやく解決されてビルドできるようになった。&lt;a href="https://www.gnu.org/software/libtool/">libtool&lt;/a> を使ってライブラリをビルドしていて、歴史的経緯からシンボル名の書き換えが必要だったみたい。2週間後にリリースされるモジュールの開発前の状態でビルドが通ったのがいまという状況。ここから私がそのモジュールに対して追加の開発を行う。本来の私のお仕事ではないけど、このモジュール開発の私が負う方がチームとしての成果が大きいと判断した。&lt;/p>
&lt;p>ビルドができるようになるまで2ヶ月程待ったことになる。普通に考えたらリリース延期だが、担当者の割り当ての課題もあって、もうこれは不可抗力としてそのままリリースしようと思う。おそらく誰もこの件に関して本来の開発の在り方についての言及しないと私は考えている。おそらく品質も信頼できないものだと推測する。残りの2週間で追加の開発を一目散に駆けて成るように成るのを私も受け入れることにしようと思う。&lt;/p></content></item><item><title>サーバーサイド開発とセマフォ</title><link>/diary/posts/2023/0410/</link><pubDate>Mon, 10 Apr 2023 08:18:28 +0900</pubDate><guid>/diary/posts/2023/0410/</guid><description>0時に寝て7時に起きた。
web api サーバーへの負荷テスト web api サーバーへ数百から数千件の同時リクエストを送ってエラーが発生しないことを確認する。チームのメンバーがテストを実施していたら producer がメッセージを送信するときに rabbitmq との接続エラーがいくつか発生した。いくつか対応方法を考えられるが、既存のコードを大きく変更せず解決するものとしてセマフォを導入してみた。自分で作っても難しいものではないが、golang.org/x/sync/semaphore で準標準パッケージとして提供されている。次のように簡単に使える。
sem := semaphore.NewWeighted(maxConcurrentSessions) ... ctx := context.Background() if err := sem.Acquire(ctx, 1); err != nil { return err } defer sem.Release(1) これで rabbitmq との同時接続数を制御する。rabbitmq 側もどのぐらいの接続を受け付けるかは Networking and RabbitMQ を参照して設定で制御できる。デフォルトは 128 となっているので 1024 ぐらいまで増やしてみた。
サーバーサイド開発のおもしろさの1つとしてボトルネックは移動するという概念がある。必ずどこかにニーポイント (ボトルネック) は現れるので意図したパフォーマンスや負荷を耐えるようにリソース制限をしてサーバーが堅牢になるよう調整する。この手の作業はサーバーサイドエンジニアをやってきた私の得意とするところ。</description><content>&lt;p>0時に寝て7時に起きた。&lt;/p>
&lt;h2 id="web-api-サーバーへの負荷テスト">web api サーバーへの負荷テスト&lt;/h2>
&lt;p>web api サーバーへ数百から数千件の同時リクエストを送ってエラーが発生しないことを確認する。チームのメンバーがテストを実施していたら producer がメッセージを送信するときに rabbitmq との接続エラーがいくつか発生した。いくつか対応方法を考えられるが、既存のコードを大きく変更せず解決するものとしてセマフォを導入してみた。自分で作っても難しいものではないが、&lt;a href="https://pkg.go.dev/golang.org/x/sync/semaphore">golang.org/x/sync/semaphore&lt;/a> で準標準パッケージとして提供されている。次のように簡単に使える。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sem&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">semaphore&lt;/span>.&lt;span style="color:#a6e22e">NewWeighted&lt;/span>(&lt;span style="color:#a6e22e">maxConcurrentSessions&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sem&lt;/span>.&lt;span style="color:#a6e22e">Acquire&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">sem&lt;/span>.&lt;span style="color:#a6e22e">Release&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで rabbitmq との同時接続数を制御する。rabbitmq 側もどのぐらいの接続を受け付けるかは &lt;a href="https://www.rabbitmq.com/networking.html">Networking and RabbitMQ&lt;/a> を参照して設定で制御できる。デフォルトは 128 となっているので 1024 ぐらいまで増やしてみた。&lt;/p>
&lt;p>サーバーサイド開発のおもしろさの1つとしてボトルネックは移動するという概念がある。必ずどこかにニーポイント (ボトルネック) は現れるので意図したパフォーマンスや負荷を耐えるようにリソース制限をしてサーバーが堅牢になるよう調整する。この手の作業はサーバーサイドエンジニアをやってきた私の得意とするところ。&lt;/p></content></item><item><title>ubuntu の環境構築</title><link>/diary/posts/2023/0409/</link><pubDate>Sun, 09 Apr 2023 18:10:30 +0900</pubDate><guid>/diary/posts/2023/0409/</guid><description>0時に寝て8時に起きた。昨日は出張から遅くに帰ってきたのでバテた。
ストレッチ 昨日はもくもく会で遅くに帰ってきたので毎週のストレッチを土曜日から日曜日に変更していた。ここ1-2ヶ月ほどでは最も調子がよかった。今週は出張していて普段より健康的な生活をしていた。というのは、お手伝い先のオフィスでは原則として私は9-18時でしか働けないため、業務の都合でずっと座りっぱなしにならない。例えば、自社のオフィスだとだいたい8時から始業して遅いと23時ぐらいまでずっと座りっぱなしになってしまう。たまたまホテルもいつもよりも離れた場所にとり、10分ほど歩く距離だったのでちょうどよかった。帰ってからホテルで2-3時間作業していたりもするのだが、それでも同じ姿勢でずっと座り続けている方が体にとってはよくないことがわかる。今日の開脚幅は開始前152cmで、ストレッチ後156cmだった。座っている時間が短かったために腰の張りはほとんどなかった。
ubuntu 22.04 lts の環境構築 先日 マシンに ubuntu をインストールした 続きの話し。東京出張があったり、開発の終盤でいろいろやっている中で開発環境を作り直すインセンティブが低かったので環境構築が遅くなった。過去の環境構築の issue が残っているのでそれをみながらやれば5-6時間もあれば作り直せた。結論から言って、マシンスペックが上がって、os も新しいものに変わったので開発環境としてはめちゃくちゃ快適になった。好みだが、私はリソースの潤沢なデスクトップマシンに linux をインストールして開発するのが一番しっくりくる。主観的に感情的にその構成が好きだというもの。
realforce の bluetooth キーボードの設定をするのにもう1つキーボードが必要なことに気付いた。私は bluez というツールを使って bluetooth キーボードのペアリングをしている。ペアリングするためには bluez の bluetoothctl という cli から操作してペアリングを行う。realforce のキーボードは有線/bluetooth 接続を両方同時につなぐことはできないため、bluetooth 接続するためには別のキーボードを接続して cli 操作しないといけない。
$ bluetoothctl [bluetooth]# power on [bluetooth]# agent on [bluetooth]# scan on bluetooth キーボードから接続要求を送る。
... [NEW] Device F6:9D:A5:41:B7:1F REALFORCE_2 ... [bluetooth]# info F6:9D:A5:41:B7:1F Device F6:9D:A5:41:B7:1F (random) Name: REALFORCE_2 Alias: REALFORCE_2 Appearance: 0x03c1 Icon: input-keyboard Paired: no Trusted: no Blocked: no Connected: no LegacyPairing: no UUID: Human Interface Device (00001812-0000-1000-8000-00805f9b34fb) RSSI: -51 マシンからデバイスを検出したらデバイス情報を確認してペアリングを実行する。</description><content>&lt;p>0時に寝て8時に起きた。昨日は出張から遅くに帰ってきたのでバテた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>昨日はもくもく会で遅くに帰ってきたので毎週のストレッチを土曜日から日曜日に変更していた。ここ1-2ヶ月ほどでは最も調子がよかった。今週は出張していて普段より健康的な生活をしていた。というのは、お手伝い先のオフィスでは原則として私は9-18時でしか働けないため、業務の都合でずっと座りっぱなしにならない。例えば、自社のオフィスだとだいたい8時から始業して遅いと23時ぐらいまでずっと座りっぱなしになってしまう。たまたまホテルもいつもよりも離れた場所にとり、10分ほど歩く距離だったのでちょうどよかった。帰ってからホテルで2-3時間作業していたりもするのだが、それでも同じ姿勢でずっと座り続けている方が体にとってはよくないことがわかる。今日の開脚幅は開始前152cmで、ストレッチ後156cmだった。座っている時間が短かったために腰の張りはほとんどなかった。&lt;/p>
&lt;h2 id="ubuntu-2204-lts-の環境構築">ubuntu 22.04 lts の環境構築&lt;/h2>
&lt;p>先日 &lt;a href="/diary/diary/posts/2023/0325/#dell-マシンに-ubuntu-をインストール">マシンに ubuntu をインストールした&lt;/a> 続きの話し。東京出張があったり、開発の終盤でいろいろやっている中で開発環境を作り直すインセンティブが低かったので環境構築が遅くなった。過去の環境構築の issue が残っているのでそれをみながらやれば5-6時間もあれば作り直せた。結論から言って、マシンスペックが上がって、os も新しいものに変わったので開発環境としてはめちゃくちゃ快適になった。好みだが、私はリソースの潤沢なデスクトップマシンに linux をインストールして開発するのが一番しっくりくる。主観的に感情的にその構成が好きだというもの。&lt;/p>
&lt;p>realforce の bluetooth キーボードの設定をするのにもう1つキーボードが必要なことに気付いた。私は &lt;a href="http://www.bluez.org/">bluez&lt;/a> というツールを使って bluetooth キーボードのペアリングをしている。ペアリングするためには bluez の bluetoothctl という cli から操作してペアリングを行う。realforce のキーボードは有線/bluetooth 接続を両方同時につなぐことはできないため、bluetooth 接続するためには別のキーボードを接続して cli 操作しないといけない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ bluetoothctl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>bluetooth&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># power on&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>bluetooth&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># agent on&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>bluetooth&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#75715e"># scan on&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>bluetooth キーボードから接続要求を送る。&lt;/p>
&lt;pre tabindex="0">&lt;code>...
[NEW] Device F6:9D:A5:41:B7:1F REALFORCE_2
...
[bluetooth]# info F6:9D:A5:41:B7:1F
Device F6:9D:A5:41:B7:1F (random)
Name: REALFORCE_2
Alias: REALFORCE_2
Appearance: 0x03c1
Icon: input-keyboard
Paired: no
Trusted: no
Blocked: no
Connected: no
LegacyPairing: no
UUID: Human Interface Device (00001812-0000-1000-8000-00805f9b34fb)
RSSI: -51
&lt;/code>&lt;/pre>&lt;p>マシンからデバイスを検出したらデバイス情報を確認してペアリングを実行する。&lt;/p>
&lt;pre tabindex="0">&lt;code>[bluetooth]# pair F6:9D:A5:41:B7:1F
Attempting to pair with F6:9D:A5:41:B7:1F
[CHG] Device F6:9D:A5:41:B7:1F Connected: yes
[agent] Passkey: ***
&lt;/code>&lt;/pre>&lt;p>これでペアリングが実行されて bluetooth 接続できるようになる。ubuntu 20.04 lts の頃より進化しているのは接続／切断時に電池の残量も表示されるようになった。キーボードには充電池を使っているので地味に嬉しい。残量が少なくなってきたら帰るときに充電を仕掛けて帰れる。&lt;/p>
&lt;p>今回の環境構築で1つはまったものがある。vagrant の仮想環境として virtualbox を使う。&lt;a href="https://wiki.ubuntu.com/UEFI/SecureBoot">secure boot&lt;/a> のために virtualbox をインストールするときにパスワードを mok (Machine-Owner Key) に登録しないといけない。この作業手順が分からなくて右往左往していた。インストール時に mok のダイアログが表示されてパスワードを登録するが、この後に os を再起動して bios 起動時に特別なダイアログが表示されて mok に登録したいパスワードを入力する。アプリケーションのインストール時に bios の設定が必要という概念が私の頭の中になくて分からなかった。これをやらないと virtualbox サービスが正常に起動しない。調べていると ubuntu 標準の virtualbox は壊れていて 3rd party の contrib なパッケージを使えという古い記事も出てくる。22.04 なら ubuntu 標準の virtualbox でも問題なく、mok の登録後に systemd から virtualbox サービスが起動することを確認した。再起動後の mok のダイアログは1度しか出てこないのでうっかり見逃してしまったら再設定しないといけない。次の cli で再設定できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo dpkg-reconfigure virtualbox-dkms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">dell の xps 8950 に ubuntu 22.04 lts をインストールして開発環境を一通り構築した。ほとんどトラブルなく構築できた。いろいろ快適になったので集中力が上がる。開発の追い込みなのでちょうどよい。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1646055812224417792?ref_src=twsrc%5Etfw">April 12, 2023&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item><item><title>気分転換のもくもく会</title><link>/diary/posts/2023/0408/</link><pubDate>Sat, 08 Apr 2023 08:04:44 +0900</pubDate><guid>/diary/posts/2023/0408/</guid><description>0時に寝て4時に起きて6時に起きてだらだらして7時半から広いお風呂入ってきた。
the b 水道橋 昨日は the b 水道橋 に宿泊した。the b というホテルブランドらしい。初めて宿泊した。あまり新しい施設ではないし、部屋も狭かったけれど、受付でアイスクリームが無料というサービスをしていたり、大浴場があったりと限られたリソースでがんばろうとしている雰囲気がみえておもしろいホテルだと思う。値段も他のビジネスホテルより少し割安だった。水道橋駅から10分ほどだとは思うが、微妙に歩く立地が割安にしているのではないかと思う。水道橋はどこに行くにもアクセスがよいのでよい場所だと思う。晩ご飯に近くの つどい酒場えすと。 という居酒屋にふらっと入ったらよいお店だった。お店もほぼ満席だった。部屋は普通もしくは手狭なのだけど、全体としてはよい宿泊体験だったと思う。また機会があったら泊まるかもしれない。
もくもく会 出張もくもく会 を開催した。3月は週末にお仕事していなければバテて家で寝ているといった、あまりよくない状態だったので気分転換も兼ねてのもくもく会だった。いつもと違う場所、違う人たちとやり取りすることそのものがマンネリを解消する上でもよかったように思う。12人が参加してくれた。20人ぐらいが入れる広い場所を借りてみたものの、思ったより集まらなかった。前回来てくれた方たちも何人かいた。レンタルスペースなので参加費いらないですか？と問い合わせしてくれた方もいた。もくもく会イベントはうちの会社の交際費を使う手段の1つでもある。
会場は VILLENT 秋葉原 というレンタルスペースを借りた。10時00分から17時30分まで7.5時間を借りて税込20,988円。前回の会場 は定員が10人なものの、窮屈で狭かったため、今度は広い場所を借りることにした。定員は24人なものの参加者は私を含めて13人だった。だいたい4人座れる机に2人ずつ、たすきに座ってスペース的には余裕があってちょうどよかった。次回またもくもく会をやるときは20人ぐらいのスペースに対して10人程度の募集にしようと思う。
会場はサイトの写真をみて想像したよりも汚い (古い) 施設だった。あとで参加者と話していて借りるときに google map でビルの外観をみればいいと教えてもらった。電源タップはないと書いてあったが棚を探すと3つほど見つけた。インターネット接続にちょっとしたトラブルがあった。wifi ルーターには接続できるけど、インターネットにアクセスできない。あれー？と思って問い合わせしたら自動音声でルーターの電源の on/off を試せと流れて、wifi ルーターを探してみたら、その後ろに置いてあった onu (光回線終端装置) の電源が入ってなかった。wifi ルーターだけ電源が入っていて onu だけ電源を切ることはないと思うので前に使った人たちのいたずらかもしれない。くそーって気分だった。wifi 速度は7人接続している状態で240Mbpsほどあったので十分に速かった。
あとで施設のレビューをみてみると「清潔感」が 4.0 と低くはないけれど、他の項目に比べて明らかに低い点数となっている。私ならこの項目に 3.0 をつけるかなと思う。価格が割安なのでそんなものと言えるが、特定の項目だけ統計の値が低いのならなにか理由があると考えてよいということを学んだ。ちなみにそれでも 4.0 と点数が高いのはすべての項目を 5.0 に付けているレビューアがいるためだと考えられる。ちゃんと点数を付けているレビューアは 2.0-4.0 を付けていたようにみえる。
午前中に10人ほど参加して、午後から2人参加して、参加者の大半は web 系の人たちにみえた。午後から来た2人組は期待したものと違ったのか1-2時間作業してすぐに帰られた。窓を開けておくと周りの工事の音が少し騒々しい。途中で少し寒いということで窓を閉めたら騒音はそれほど気にならなくなった。私は日記を書いたり、お仕事のドキュメントを書いたりしていた。図書館で勉強するような雰囲気になっていて作業に集中できてよかった。</description><content>&lt;p>0時に寝て4時に起きて6時に起きてだらだらして7時半から広いお風呂入ってきた。&lt;/p>
&lt;h2 id="the-b-水道橋">the b 水道橋&lt;/h2>
&lt;p>昨日は &lt;a href="https://www.theb-hotels.com/theb/suidobashi">the b 水道橋&lt;/a> に宿泊した。the b というホテルブランドらしい。初めて宿泊した。あまり新しい施設ではないし、部屋も狭かったけれど、受付でアイスクリームが無料というサービスをしていたり、大浴場があったりと限られたリソースでがんばろうとしている雰囲気がみえておもしろいホテルだと思う。値段も他のビジネスホテルより少し割安だった。水道橋駅から10分ほどだとは思うが、微妙に歩く立地が割安にしているのではないかと思う。水道橋はどこに行くにもアクセスがよいのでよい場所だと思う。晩ご飯に近くの &lt;a href="https://tabelog.com/tokyo/A1310/A131003/13213953/">つどい酒場えすと。&lt;/a> という居酒屋にふらっと入ったらよいお店だった。お店もほぼ満席だった。部屋は普通もしくは手狭なのだけど、全体としてはよい宿泊体験だったと思う。また機会があったら泊まるかもしれない。&lt;/p>
&lt;h2 id="もくもく会">もくもく会&lt;/h2>
&lt;p>&lt;a href="https://kazamori.connpass.com/event/277481/">出張もくもく会&lt;/a> を開催した。3月は週末にお仕事していなければバテて家で寝ているといった、あまりよくない状態だったので気分転換も兼ねてのもくもく会だった。いつもと違う場所、違う人たちとやり取りすることそのものがマンネリを解消する上でもよかったように思う。12人が参加してくれた。20人ぐらいが入れる広い場所を借りてみたものの、思ったより集まらなかった。前回来てくれた方たちも何人かいた。レンタルスペースなので参加費いらないですか？と問い合わせしてくれた方もいた。もくもく会イベントはうちの会社の交際費を使う手段の1つでもある。&lt;/p>
&lt;p>会場は &lt;a href="https://www.instabase.jp/space/2544621780">VILLENT 秋葉原&lt;/a> というレンタルスペースを借りた。10時00分から17時30分まで7.5時間を借りて税込20,988円。&lt;a href="/diary/diary/posts/2023/0109/#もくもく会">前回の会場&lt;/a> は定員が10人なものの、窮屈で狭かったため、今度は広い場所を借りることにした。定員は24人なものの参加者は私を含めて13人だった。だいたい4人座れる机に2人ずつ、たすきに座ってスペース的には余裕があってちょうどよかった。次回またもくもく会をやるときは20人ぐらいのスペースに対して10人程度の募集にしようと思う。&lt;/p>
&lt;p>会場はサイトの写真をみて想像したよりも汚い (古い) 施設だった。あとで参加者と話していて借りるときに google map でビルの外観をみればいいと教えてもらった。電源タップはないと書いてあったが棚を探すと3つほど見つけた。インターネット接続にちょっとしたトラブルがあった。wifi ルーターには接続できるけど、インターネットにアクセスできない。あれー？と思って問い合わせしたら自動音声でルーターの電源の on/off を試せと流れて、wifi ルーターを探してみたら、その後ろに置いてあった onu (光回線終端装置) の電源が入ってなかった。wifi ルーターだけ電源が入っていて onu だけ電源を切ることはないと思うので前に使った人たちのいたずらかもしれない。くそーって気分だった。wifi 速度は7人接続している状態で240Mbpsほどあったので十分に速かった。&lt;/p>
&lt;p>あとで施設のレビューをみてみると「清潔感」が 4.0 と低くはないけれど、他の項目に比べて明らかに低い点数となっている。私ならこの項目に 3.0 をつけるかなと思う。価格が割安なのでそんなものと言えるが、特定の項目だけ統計の値が低いのならなにか理由があると考えてよいということを学んだ。ちなみにそれでも 4.0 と点数が高いのはすべての項目を 5.0 に付けているレビューアがいるためだと考えられる。ちゃんと点数を付けているレビューアは 2.0-4.0 を付けていたようにみえる。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0408_review.png"/>
&lt;/figure>
&lt;p>午前中に10人ほど参加して、午後から2人参加して、参加者の大半は web 系の人たちにみえた。午後から来た2人組は期待したものと違ったのか1-2時間作業してすぐに帰られた。窓を開けておくと周りの工事の音が少し騒々しい。途中で少し寒いということで窓を閉めたら騒音はそれほど気にならなくなった。私は日記を書いたり、お仕事のドキュメントを書いたりしていた。図書館で勉強するような雰囲気になっていて作業に集中できてよかった。&lt;/p></content></item><item><title>一日中リファクタリング</title><link>/diary/posts/2023/0407/</link><pubDate>Fri, 07 Apr 2023 13:16:56 +0900</pubDate><guid>/diary/posts/2023/0407/</guid><description>0時に寝て7時に起きた。昨日は夜にホテルで作業しようと思いながらテレビをみているうちに寝落ちしてた。朝から夜までずっとリファクタリングのためにコードを書いたり、コンテナ環境の設定を変更したりしていた。
mongodb のコネクションプール MongoDB Drivers の Connection Example に次のようなことが書いてある。
Reuse Your Client
We recommend that you reuse your client across sessions and operations. You can use the same Client instance to perform multiple tasks, instead of creating a new one each time. The Client type is safe for concurrent use by multiple goroutines. To learn more about how connection pools work in the driver, see the FAQ page.
mongodb drivers の client は goroutine safe なので再利用することを推奨している。内部的にはコネクションプールをもっていて mongodb とのコネクションを再利用できる。具体的にはライブラリ内部に次のようなコードがみつかる。context にセッション情報があればそれを使い、なければクライアントの sessionPool (コネクションプール) を使ってセッションを取得して mongodb にアクセスする関数の終わりで終了処理を行う。</description><content>&lt;p>0時に寝て7時に起きた。昨日は夜にホテルで作業しようと思いながらテレビをみているうちに寝落ちしてた。朝から夜までずっとリファクタリングのためにコードを書いたり、コンテナ環境の設定を変更したりしていた。&lt;/p>
&lt;h2 id="mongodb-のコネクションプール">mongodb のコネクションプール&lt;/h2>
&lt;p>MongoDB Drivers の &lt;a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/connection/#connection-example">Connection Example&lt;/a> に次のようなことが書いてある。&lt;/p>
&lt;blockquote>
&lt;p>Reuse Your Client&lt;/p>
&lt;p>We recommend that you reuse your client across sessions and operations. You can use the same Client instance to perform multiple tasks, instead of creating a new one each time. The Client type is safe for concurrent use by multiple goroutines. To learn more about how connection pools work in the driver, see the &lt;a href="https://www.mongodb.com/docs/drivers/go/current/faq/#std-label-golang-faq-connection-pool">FAQ&lt;/a> page.&lt;/p>
&lt;/blockquote>
&lt;p>mongodb drivers の client は goroutine safe なので再利用することを推奨している。内部的にはコネクションプールをもっていて mongodb とのコネクションを再利用できる。具体的にはライブラリ内部に次のようなコードがみつかる。context にセッション情報があればそれを使い、なければクライアントの sessionPool (コネクションプール) を使ってセッションを取得して mongodb にアクセスする関数の終わりで終了処理を行う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sess&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sessionFromContext&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sess&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">coll&lt;/span>.&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">sessionPool&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sess&lt;/span> = &lt;span style="color:#a6e22e">session&lt;/span>.&lt;span style="color:#a6e22e">NewImplicitClientSession&lt;/span>(&lt;span style="color:#a6e22e">coll&lt;/span>.&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">sessionPool&lt;/span>, &lt;span style="color:#a6e22e">coll&lt;/span>.&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">sess&lt;/span>.&lt;span style="color:#a6e22e">EndSession&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>既存のコードはコネクションプールのことを考慮していないコードになっていたので大きくリファクタリングして効率化した。&lt;/p>
&lt;h2 id="docker-hub-の-pull-制限">docker hub の pull 制限&lt;/h2>
&lt;p>午前中はリファクタリング、午後は docker compose 環境の変更と再構築、午後はバグ修正と一日中 docker image を取得する作業をしていた。gitlab ci/cd が動くとテストと docker image 生成の処理が動くのでその過程で関連する docker image を pull する。夕方になって gitlab ci/cd で初めて次のエラーが発生することに気付いた。前にお手伝いしていた職場でもそういう現象が起こると聞いて、docker login するコードを github actions のスクリプトに追加していたので、rate limit がかかることは知っていた。&lt;/p>
&lt;pre tabindex="0">&lt;code>You have reached your pull rate limit. You may increase the limit by authenticating and upgrading: https://www.docker.com/increase-rate-limits.
&lt;/code>&lt;/pre>&lt;p>&lt;a href="https://www.docker.com/increase-rate-limits/">Understanding Your Docker Hub Rate Limit&lt;/a> によると、6時間あたり匿名アクセスは100、
free ユーザーは200を上限としているらしい。匿名アクセスは ip アドレスでカウントしているのだろうから場合によっては会社内からのアクセスをすべてカウントされたりするかもしれない。課金するとこの上限が24時間あたり5000になる。docker hub のプライベートリポジトリを利用する意図で team プランの課金を検討していたが、docker hub のアクセス制限を緩和するために課金する必要があるかもしれない。&lt;/p></content></item><item><title>リリース後の展望</title><link>/diary/posts/2023/0406/</link><pubDate>Thu, 06 Apr 2023 08:28:32 +0900</pubDate><guid>/diary/posts/2023/0406/</guid><description>0時に寝て7時半に起きた。そろそろ出張バテしてきた。
プロジェクトの進捗報告 出張したときの月例報告の5回目。前回の進捗報告はこちら 。私のマネジメントの不手際で1ヶ月延期 (元の計画通り) して、未だに開発は完了していないものの、今月末にリリースできる見通しでプロジェクトを進めている。おそらくあと1-2回は私が休出するのだろう。これからメンバーにはできる限りの QA テストを3週間に渡って行ってもらう。
チームが fix した3月の issue 数は47、そのうちの34を、enhance ラベルが付いたものは12でそのうちの9を私が担当した。クリティカルパスになりそうなものは、一旦はメンバーにアサインするものの、進捗をみて遅れていれば私が issue を引き取って対応している。先月から引き続き、やばそうな芽が出てきたら私が本気出して対応する。見た目上のスケジュールには影響を与えないようにしている。先月の反省で早めに引き取ることにしたのでずるずる後ろへ延びることはない。このやり方をすると、私がボトルネックになりかねないが、私の工数は調整次第でメンバーよりも大きくできるのでいまのところ問題ない。リリースまで1ヶ月を切った中で取り得る手段は限られてくる。
2月から ハドルと雑談 の試験運用をしていた。ほぼ毎日午前中は私が slack のハドルに在籍 (オフィスアワーに近い取り組み) するようにして、メンバーから雑談する機会は増えるかどうかを試していた。約2ヶ月やって結果は次の通りとなった。
対象日数: 34日 雑談人数: 10人 雑談時間: 5.75時間 3日に1日ぐらい軽く雑談するといった結果になった。おそらく私がハドルにいなかったら話す機会はなかったのでこの価値をどう見積もるかは人によって分かれると思う。うちのチームはリモートワークが中心なので雑談する機会があるほど望ましい。それほど強く提案するわけではないが、slack のハドル活用をもっと展開してもよいのではないかと経営者に推奨した。
聞いた話では着任前にこのプロダクト開発は2年近く迷走していたらしい。それによって要件は整理されていたと言える。私がこの半年でリリース (予定) できる状態にしたのを評価してもらえているようにはみえる。余談だが、自分のスキルを社会の役に立てられるのがいまは嬉しい。前職では、誰でもできる簡単なお仕事しかできず、開発もあまりつまらなかった。いまは自分がよいと思うものを一定の裁量で判断し、さらにマネージャー経験も積めて、今回のお仕事は私の中でも達成感は高い方でもある。
あとは今後の開発の話し、販売戦略の話しなどもしていた。4月末で初期開発の区切りもつく。今後は毎月1週間も出張しなくてよいのではないかという話しもして、5月は会議を2-3日に集中してやったらいいんじゃないかということになった。出張はそろそろ疲れてきたのと、私がオフィスにいてもメンバーは半分以上リモートワークなのでオフィスに来る意義があまりない。うちのチームはリモートワークで開発に支障が出ない仕組みを構築できているとは思う。</description><content>&lt;p>0時に寝て7時半に起きた。そろそろ出張バテしてきた。&lt;/p>
&lt;h2 id="プロジェクトの進捗報告">プロジェクトの進捗報告&lt;/h2>
&lt;p>出張したときの月例報告の5回目。&lt;a href="/diary/diary/posts/2023/0309/">前回の進捗報告はこちら&lt;/a> 。私のマネジメントの不手際で1ヶ月延期 (元の計画通り) して、未だに開発は完了していないものの、今月末にリリースできる見通しでプロジェクトを進めている。おそらくあと1-2回は私が休出するのだろう。これからメンバーにはできる限りの QA テストを3週間に渡って行ってもらう。&lt;/p>
&lt;p>チームが fix した3月の issue 数は47、そのうちの34を、enhance ラベルが付いたものは12でそのうちの9を私が担当した。クリティカルパスになりそうなものは、一旦はメンバーにアサインするものの、進捗をみて遅れていれば私が issue を引き取って対応している。先月から引き続き、やばそうな芽が出てきたら私が本気出して対応する。見た目上のスケジュールには影響を与えないようにしている。先月の反省で早めに引き取ることにしたのでずるずる後ろへ延びることはない。このやり方をすると、私がボトルネックになりかねないが、私の工数は調整次第でメンバーよりも大きくできるのでいまのところ問題ない。リリースまで1ヶ月を切った中で取り得る手段は限られてくる。&lt;/p>
&lt;p>2月から &lt;a href="/diary/diary/posts/2023/0202/#ハドルと雑談">ハドルと雑談&lt;/a> の試験運用をしていた。ほぼ毎日午前中は私が slack のハドルに在籍 (オフィスアワーに近い取り組み) するようにして、メンバーから雑談する機会は増えるかどうかを試していた。約2ヶ月やって結果は次の通りとなった。&lt;/p>
&lt;ul>
&lt;li>対象日数: 34日&lt;/li>
&lt;li>雑談人数: 10人&lt;/li>
&lt;li>雑談時間: 5.75時間&lt;/li>
&lt;/ul>
&lt;p>3日に1日ぐらい軽く雑談するといった結果になった。おそらく私がハドルにいなかったら話す機会はなかったのでこの価値をどう見積もるかは人によって分かれると思う。うちのチームはリモートワークが中心なので雑談する機会があるほど望ましい。それほど強く提案するわけではないが、slack のハドル活用をもっと展開してもよいのではないかと経営者に推奨した。&lt;/p>
&lt;p>聞いた話では着任前にこのプロダクト開発は2年近く迷走していたらしい。それによって要件は整理されていたと言える。私がこの半年でリリース (予定) できる状態にしたのを評価してもらえているようにはみえる。余談だが、自分のスキルを社会の役に立てられるのがいまは嬉しい。前職では、誰でもできる簡単なお仕事しかできず、開発もあまりつまらなかった。いまは自分がよいと思うものを一定の裁量で判断し、さらにマネージャー経験も積めて、今回のお仕事は私の中でも達成感は高い方でもある。&lt;/p>
&lt;p>あとは今後の開発の話し、販売戦略の話しなどもしていた。4月末で初期開発の区切りもつく。今後は毎月1週間も出張しなくてよいのではないかという話しもして、5月は会議を2-3日に集中してやったらいいんじゃないかということになった。出張はそろそろ疲れてきたのと、私がオフィスにいてもメンバーは半分以上リモートワークなのでオフィスに来る意義があまりない。うちのチームはリモートワークで開発に支障が出ない仕組みを構築できているとは思う。&lt;/p></content></item><item><title>rsync に daemon モードがあるらしい</title><link>/diary/posts/2023/0405/</link><pubDate>Wed, 05 Apr 2023 11:24:21 +0900</pubDate><guid>/diary/posts/2023/0405/</guid><description>23時に寝て2時半に起きて4時や5時に起きて7時に起きた。泊まっているホテルの低反発枕の寝心地がよい。
rsync daemon over ssh 外部向けのドキュメントを公開するための gitlab ci/cd を構築した。web サーバにドキュメントをアップロードする手段として rsync を使っている。rsync over ssh でデータを転送するときにさらに daemon モード (rsyncd) という仕組みがあって、権限や書き込み先の acl なども細かく制御できる。手順や設定は古の古臭い雰囲気はするけれど、実用的には ssh の秘密鍵を使ってちょっと高機能なアップロードを実現できる。ssh agent で鍵登録できていれば次のような cli でセキュアに rsync できる。全然知らない方法だったので学びの1つになった。
$ rsync \ --verbose \ --rsh ssh \ --stats \ --compress-choice=zstd \ --compress-level=10 \ --itemize-changes \ --recursive \ --checksum \ --delete \ local/ ${USER}@${HOST}::${RSYNC_DIR} rsync+sshはdaemonモードを使うと更に安全になる LLMを使ってみる会 LLMを使ってみる会 に参加した。私も chatgpt に調べものやちょっとしたことを聞くようになったりしているが、他の人たちがどんな用途に使っているのかも知りたくて参加してみた。fin-py のイベントだったのでみんな金融系のドキュメントの要約に使っているのが多そうにみえた。あとは研究テーマとして gpt/llm を取り上げている人たちも何人かいた。</description><content>&lt;p>23時に寝て2時半に起きて4時や5時に起きて7時に起きた。泊まっているホテルの低反発枕の寝心地がよい。&lt;/p>
&lt;h2 id="rsync-daemon-over-ssh">rsync daemon over ssh&lt;/h2>
&lt;p>外部向けのドキュメントを公開するための gitlab ci/cd を構築した。web サーバにドキュメントをアップロードする手段として rsync を使っている。rsync over ssh でデータを転送するときにさらに daemon モード (rsyncd) という仕組みがあって、権限や書き込み先の acl なども細かく制御できる。手順や設定は古の古臭い雰囲気はするけれど、実用的には ssh の秘密鍵を使ってちょっと高機能なアップロードを実現できる。ssh agent で鍵登録できていれば次のような cli でセキュアに rsync できる。全然知らない方法だったので学びの1つになった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ rsync &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --verbose &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --rsh ssh &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --stats &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --compress-choice&lt;span style="color:#f92672">=&lt;/span>zstd &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --compress-level&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --itemize-changes &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --recursive &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --checksum &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --delete &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> local/ &lt;span style="color:#e6db74">${&lt;/span>USER&lt;span style="color:#e6db74">}&lt;/span>@&lt;span style="color:#e6db74">${&lt;/span>HOST&lt;span style="color:#e6db74">}&lt;/span>::&lt;span style="color:#e6db74">${&lt;/span>RSYNC_DIR&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;a href="https://jyn.jp/rsync-daemon-over-ssh/">rsync+sshはdaemonモードを使うと更に安全になる&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="llmを使ってみる会">LLMを使ってみる会&lt;/h2>
&lt;p>&lt;a href="https://fin-py.connpass.com/event/279271/">LLMを使ってみる会&lt;/a> に参加した。私も chatgpt に調べものやちょっとしたことを聞くようになったりしているが、他の人たちがどんな用途に使っているのかも知りたくて参加してみた。fin-py のイベントだったのでみんな金融系のドキュメントの要約に使っているのが多そうにみえた。あとは研究テーマとして gpt/llm を取り上げている人たちも何人かいた。&lt;/p></content></item><item><title>考えているとストリームが発生する</title><link>/diary/posts/2023/0404/</link><pubDate>Tue, 04 Apr 2023 09:07:41 +0900</pubDate><guid>/diary/posts/2023/0404/</guid><description>18時から20時半ぐらいまで寝て、それから晩ご飯を食べに出掛けて、23時頃に戻ってきてまた寝て、4時に起きて、6時に起きた。出張の初日は不規則な寝方になる。
定例会議とふりかえり リリースまであと3週間。一部の開発がまだ完了していないことに大きなストレスと懸念を感じつつ、進捗はしているそうなのでその対応が完了するのを待つ。いまは日々の進捗や発生する事象に注意を配りつつ、メンバーは QA レベルのテストを、私は淡々とリリースの準備をしている。外部からアクセスできるプライベートなコンテナレジストリを docker hub でお金を払うか、自社で運用するかの決めの問題や外部向けにドキュメントを公開するための決めごとなどを確認したりしていた。
毎月のマイルストーン終了後にふりかえりをしている。今月は対応した issue のうち、70%超を私が fix しているのであまり話題がないかなぁとか思っていたけど、全然そんなことはなく、活発にふりかえりのコメント (付箋に書く) が出てよかった。当初は付箋に書いた内容に対して関心のあるものをメンバーに投票してもらっていた。そして、メンバーの関心の高いマークがたくさん付いたものから掘り下げて聞くようにしていた。最近は3人でふりかえりをやっているため、すべての付箋をみていっても10個未満程度、すべてヒアリングしても時間がちょうどよいので投票をやめた。そうすると、メンバーが自分のやったことや思ったことを他者へ話す機会になっていて、これは内省を促す意図でとてもよいことじゃないかと思うようになってきた。
ふりかえりをしない人やチームは成長しない
これは私の持論だ。うまくいかなかったときにふりかえりすると、当事者が嫌な気持ちになったりしんどかったり、責任を感じたりとネガティブなイメージから、私の経験則ではふりかえりを行わないチームの方がずっと多かった。こういう小さい積み重ねを継続的にやるのは後になってその人の価値観や成長に影響を与えるのではないかと最近は思う。うちのチームでは厳しく責任追及はしないのでメンバーが率直的にこれができなかったとふりかえることはできるようになっているとは思う。
ふとふりかえりをしていてこんな言葉が私の口から出た。
作業の進捗をストリームとして確認できると嬉しい、ストリームを眺めているとメンバーが考えているのかどうかが分かる
エンジニアリング組織論への招待 に次のような節がある。
「悩む」と「考える」の違い
「考える」は行動であり、「悩む」は状態なのです。考えているのであれば、それはメンターがその行動を見ることができます。しかし、「悩む」であれば、メンターは心の状態を観察することはできません。
悩んでいる状態は手が止まっていて、頭の中で思考がぐるぐる巡っていて、もやもやしている状態。考えているとは、課題を書き出したり、分解したり、調査したりと忙しく行動していると言える。当然、考えないと優れた品質のアウトプットは出せない。正に私がやっている課題管理も、そのための課題管理システムも考えていることを確認・監視するために有効な手法とシステムであることが伺える。チームのふりかえりをしながら、そういった話しをメンバーに共有したりしていた。</description><content>&lt;p>18時から20時半ぐらいまで寝て、それから晩ご飯を食べに出掛けて、23時頃に戻ってきてまた寝て、4時に起きて、6時に起きた。出張の初日は不規則な寝方になる。&lt;/p>
&lt;h2 id="定例会議とふりかえり">定例会議とふりかえり&lt;/h2>
&lt;p>リリースまであと3週間。一部の開発がまだ完了していないことに大きなストレスと懸念を感じつつ、進捗はしているそうなのでその対応が完了するのを待つ。いまは日々の進捗や発生する事象に注意を配りつつ、メンバーは QA レベルのテストを、私は淡々とリリースの準備をしている。外部からアクセスできるプライベートなコンテナレジストリを docker hub でお金を払うか、自社で運用するかの決めの問題や外部向けにドキュメントを公開するための決めごとなどを確認したりしていた。&lt;/p>
&lt;p>毎月のマイルストーン終了後にふりかえりをしている。今月は対応した issue のうち、70%超を私が fix しているのであまり話題がないかなぁとか思っていたけど、全然そんなことはなく、活発にふりかえりのコメント (付箋に書く) が出てよかった。当初は付箋に書いた内容に対して関心のあるものをメンバーに投票してもらっていた。そして、メンバーの関心の高いマークがたくさん付いたものから掘り下げて聞くようにしていた。最近は3人でふりかえりをやっているため、すべての付箋をみていっても10個未満程度、すべてヒアリングしても時間がちょうどよいので投票をやめた。そうすると、メンバーが自分のやったことや思ったことを他者へ話す機会になっていて、これは内省を促す意図でとてもよいことじゃないかと思うようになってきた。&lt;/p>
&lt;blockquote>
&lt;p>ふりかえりをしない人やチームは成長しない&lt;/p>
&lt;/blockquote>
&lt;p>これは私の持論だ。うまくいかなかったときにふりかえりすると、当事者が嫌な気持ちになったりしんどかったり、責任を感じたりとネガティブなイメージから、私の経験則ではふりかえりを行わないチームの方がずっと多かった。こういう小さい積み重ねを継続的にやるのは後になってその人の価値観や成長に影響を与えるのではないかと最近は思う。うちのチームでは厳しく責任追及はしないのでメンバーが率直的にこれができなかったとふりかえることはできるようになっているとは思う。&lt;/p>
&lt;p>ふとふりかえりをしていてこんな言葉が私の口から出た。&lt;/p>
&lt;blockquote>
&lt;p>作業の進捗をストリームとして確認できると嬉しい、ストリームを眺めているとメンバーが考えているのかどうかが分かる&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://gihyo.jp/book/2018/978-4-7741-9605-3">エンジニアリング組織論への招待&lt;/a> に次のような節がある。&lt;/p>
&lt;blockquote>
&lt;p>「悩む」と「考える」の違い&lt;/p>
&lt;p>「考える」は行動であり、「悩む」は状態なのです。考えているのであれば、それはメンターがその行動を見ることができます。しかし、「悩む」であれば、メンターは心の状態を観察することはできません。&lt;/p>
&lt;/blockquote>
&lt;p>悩んでいる状態は手が止まっていて、頭の中で思考がぐるぐる巡っていて、もやもやしている状態。考えているとは、課題を書き出したり、分解したり、調査したりと忙しく行動していると言える。当然、考えないと優れた品質のアウトプットは出せない。正に私がやっている課題管理も、そのための課題管理システムも考えていることを確認・監視するために有効な手法とシステムであることが伺える。チームのふりかえりをしながら、そういった話しをメンバーに共有したりしていた。&lt;/p></content></item><item><title>ローカルにコンテナレジストリを構築する</title><link>/diary/posts/2023/0403/</link><pubDate>Mon, 03 Apr 2023 11:34:18 +0900</pubDate><guid>/diary/posts/2023/0403/</guid><description>出張する日は寝ないで資料を作ったりバグ修正したりして始発の新幹線の中で寝てた。寝てなくて疲れているせいか、新幹線で寝るのに慣れたのか、わりと2-3時間ぐっすり新幹線で眠れるようになってきた。普通にベッドで寝ても3時間ぐらいしか眠れないので睡眠時間はあまり変わらない。
docker registry の構築 先日の調査 の続き。 Deploy a registry server に書いてあることを実際にローカルで検証した。
tls の自己証明書の作成。subjectAltName という設定をするように書いてある。
$ openssl req -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key -addext &amp;#34;subjectAltName = DNS:myhost.mydomain.example.com&amp;#34; -x509 -days 365 -out certs/domain.crt basic 認証のための htpasswd の設定。htpasswd とか懐かしいなと思いながら実行した。
$ docker run --entrypoint htpasswd httpd:2 -Bbn user1 secret1 &amp;gt;&amp;gt; dot_htpasswd $ docker run --entrypoint htpasswd httpd:2 -Bbn user2 secret2 &amp;gt;&amp;gt; dot_htpasswd docker 社が提供する oss な docker registry サーバーを使って起動する。
$ mkdir /mnt/registry # docker image を永続化する場所 $ sudo docker run -d \ --restart=always \ --name registry \ -v &amp;#34;$(pwd)&amp;#34;/auth:/auth \ -e &amp;#34;REGISTRY_AUTH=htpasswd&amp;#34; \ -e &amp;#34;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&amp;#34; \ -e &amp;#34;REGISTRY_AUTH_HTPASSWD_PATH=/auth/dot_htpasswd&amp;#34; \ -v &amp;#34;$(pwd)&amp;#34;/certs:/certs \ -e &amp;#34;REGISTRY_HTTP_ADDR=0.</description><content>&lt;p>出張する日は寝ないで資料を作ったりバグ修正したりして始発の新幹線の中で寝てた。寝てなくて疲れているせいか、新幹線で寝るのに慣れたのか、わりと2-3時間ぐっすり新幹線で眠れるようになってきた。普通にベッドで寝ても3時間ぐらいしか眠れないので睡眠時間はあまり変わらない。&lt;/p>
&lt;h2 id="docker-registry-の構築">docker registry の構築&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0330/#外部向けコンテナレジストリ">先日の調査&lt;/a> の続き。
&lt;a href="https://docs.docker.com/registry/deploying/">Deploy a registry server&lt;/a> に書いてあることを実際にローカルで検証した。&lt;/p>
&lt;p>tls の自己証明書の作成。subjectAltName という設定をするように書いてある。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ openssl req -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key -addext &lt;span style="color:#e6db74">&amp;#34;subjectAltName = DNS:myhost.mydomain.example.com&amp;#34;&lt;/span> -x509 -days &lt;span style="color:#ae81ff">365&lt;/span> -out certs/domain.crt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>basic 認証のための htpasswd の設定。htpasswd とか懐かしいなと思いながら実行した。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bsah" data-lang="bsah">$ docker run --entrypoint htpasswd httpd:2 -Bbn user1 secret1 &amp;gt;&amp;gt; dot_htpasswd
$ docker run --entrypoint htpasswd httpd:2 -Bbn user2 secret2 &amp;gt;&amp;gt; dot_htpasswd
&lt;/code>&lt;/pre>&lt;p>docker 社が提供する oss な docker registry サーバーを使って起動する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ mkdir /mnt/registry &lt;span style="color:#75715e"># docker image を永続化する場所&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo docker run -d &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --restart&lt;span style="color:#f92672">=&lt;/span>always &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --name registry &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>pwd&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>/auth:/auth &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;REGISTRY_AUTH=htpasswd&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;REGISTRY_AUTH_HTPASSWD_PATH=/auth/dot_htpasswd&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>pwd&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>/certs:/certs &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;REGISTRY_HTTP_ADDR=0.0.0.0:443&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;REGISTRY_HTTP_TLS_KEY=/certs/domain.key&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -p 8443:443 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /mnt/registry:/var/lib/registry &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> registry:2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで basic 認証付きで https で通信できる docker registry サーバーができた。&lt;/p>
&lt;p>外部のマシンから dokcer login しようとすると次のようなエラーが発生する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker login myhost.mydomain.example.com:8443
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Username: user2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Password: ***
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Error response from daemon: Get &lt;span style="color:#e6db74">&amp;#34;https://myhost.mydomain.example.com:8443/v2/&amp;#34;&lt;/span>: x509: certificate signed by unknown authority
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://docs.docker.com/registry/insecure/">Test an insecure registry&lt;/a> によると、
自己証明書を使って外部からアクセスできるようにするためには docker client 側にさっき作った domain.crt をコピーする必要がある。&lt;/p>
&lt;p>linux だとこんな設定。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cp domain.crt /etc/docker/certs.d/myhost.mydomain.example.com:8443/ca.crt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Docker Desktop for Mac を使っている場合はこんな感じ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-zsh" data-lang="zsh">&lt;span style="display:flex;">&lt;span>&amp;gt; security add-trusted-cert -d -r trustRoot -k ~/Library/Keychains/login.keychain path/to/certs/domain.crt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで外部からも docker login して任意の docker image を push/pull できるようになる。
docker registry サーバーは Let’s Encrypt をサポートしているそうなので &lt;a href="https://letsencrypt.org/how-it-works/">How It Works&lt;/a> を参照して設定すればよいと書いてあった。&lt;/p>
&lt;h2 id="mdbook-の初期設定">mdbook の初期設定&lt;/h2>
&lt;p>mdbook は新しい rust のバージョンだとビルドできなかったりするので rustup を使ってローカルに rustc をインストールするのがよいかもしれない。
プラグインとしては &lt;a href="https://github.com/badboy/mdbook-mermaid">mdbook-mermaid&lt;/a> を使う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ curl --proto &lt;span style="color:#e6db74">&amp;#39;=https&amp;#39;&lt;/span> --tlsv1.2 -sSf https://sh.rustup.rs | sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ~/.cargo/bin/rustc --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cargo install mdbook mdbook-mermaid
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>mdbook-mermaid の設定も簡単でドキュメントルート配下に mermaid の js ファイルを配置すると動いた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ vi book.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>preprocessor.mermaid&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>command &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;mdbook-mermaid&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>output.html&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>additional-js &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;mermaid.min.js&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;mermaid-init.js&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>事務手続き時々お出かけ</title><link>/diary/posts/2023/0402/</link><pubDate>Sun, 02 Apr 2023 11:19:12 +0900</pubDate><guid>/diary/posts/2023/0402/</guid><description>0時に寝て4時に起きて6時に起きて8時ぐらいまでだらだらしてた。出張前にプロジェクトの進捗を確認したり近況報告の資料を作ったり。
Mon copain (モン・コパン) 出張するときはお土産をもっていく ようにしていて、2月の中旬からお土産を探す余裕もなくてネタ切れでどうしようと思っていたものの、朝から調べてたら パティスリー モンプリュ というお店をみつけた。 Mon copain というガトーショコラの詰め合わせを選んでみた。ガトーショコラをあまり買ったことも食べたこともないので試しに購入してみた。本当は私が味見してからお土産にするかどうかを選定する (自分が食べてイマイチなものはお土産に持っていかない) のだが、先月からそんな余裕がなくて、お店を信頼して自分用と一緒にその場で購入したりしている。単品だと3個入りを1セットで購入できる。税込で580円になる。
それぞれ上から次になる。
茶色の包み: au lait キャラメルのコクが味わい深いミルク・ショコラ 白色の包み: blanc ほんのりレモンが香るホワイト・ショコラ 焦げ茶の包み: noir ほろ苦さが大人味のスイート・ショコラ しっとり柔らかい口当たりで上品な風味だった。神戸の洋菓子屋さんという印象がそのままのお菓子。甘いが甘過ぎない雰囲気でよいと思う。3つとも食感は似ているが、どれも風味がまったく違うので全部食べてみるのも楽しめると思う。お土産として量と値段のバランスも取れていてちょうどよかった。全然調査していなくても、即席でよいお店がみつかるのは神戸という地域のよさだと思う。
夜のお花見 at 生田川公園 昨年に引き続き生田川公園 で三ノ宮.devのお花見。今年は夜桜にしようと夕方から始めることに。私は16時ぐらいから車で買い出しへ行って17時ぐらいから参加してきた。ここ2-3週間ほど車を動かす機会を伺っていてできなかったのが、明確な目的があると車を動かすことができてよかった。初めて近所のスーパーマーケットへ車で出掛けて駐車場に停めて買いものしてきた。15分ほどで買いものして、駐車場から出るときに220円必要だった。後で調べると500円以上購入すると120分無料になったらしい。レジで駐車券ありませんか？と聞かれて車に忘れてきていたので無料化のための手続きができなかった。次回から持参するための学びの1つとなった。その後、生田川公園へ移動して、付近をまわりながらパーキングのスポットをみつけることもできた。次のお花見はまた来年になるけど、そのときに役立つはず。
昨年は4人だったのが今年は7人参加していた。昨年よりは三ノ宮.devも少し成長したのかもしれない。1月に起業相談 されていた方も来ていて、その後、デザイナーや開発者をみつけることができて、プロダクト開発をしているらしい。3ヶ月でさっそくピボットしましたという話しをしていて、起業したばかりだとそんなもんだと私も思う。うまくいっているように話していたのでよかったと思う。これから海外に3ヶ月ぐらい出かけるといった話しもされていてスケールの大きい人だなと聞いてた。
17時頃から始めて20時半でお開きになった。街灯の近くの場所をとったので暗くなっても灯りは問題なかった。始めたときは涼しくてちょうどよかったものの、さすがに20時をまわると寒くて解散することにした。私も20-21時ぐらいで帰ろうと思っていたのでちょうどよかった。食べものも飲みものもそんなに外してはなかったが、せっかく車があったので最初にコアメンバーに声を掛けて買い出しに行ってもよかったなと思えた。私が余裕なくて段取りできなかったせいでもある。16時から始めて19時に終える花見のやり方もあることを学んだ。
請求書の即時払い 今月から請求書の支払いを即時払いに切り替えることにした。いまお手伝いしているお客さんは当社から請求書を送ると即時払いしてくれる。これまで取り引きしてきたお客さんは翌月末払いが普通だったのでそういうものだと思い込んでいた。私も無条件でその慣習に従っていた。もちろん契約上の支払い期限そのものは翌月末に設定しているが、支払いを即時で行うことに問題はなにもない。
キャッシュフローの視点から「回収は早く支払いは遅く」の原則がある。レバレッジを効かせた経営 (資金繰り) をするなら正しいが、うちみたいな会社が支払いを1ヶ月遅くするメリットは何もない。これまでは請求書を受け取ったときに会計システムに取り引き登録して、銀行口座から1ヶ月後に予約振り込みの登録をしていた。そして、実際に振り込みされた1ヶ月後に、銀行の振り込み明細と会計システムの取り引き明細を付き合わせて決済が完了となる。請求書を受け取ったときに即時払いにすると、タイミング的に1ヶ月ずれる2度の事務手続きを1度にまとめられる。一言でいうと事務手続きの効率化になる。
うちみたいな会社にとっては請求書の即時払いをすると、事務手続きの工数を少なくできるというメリットがあることに気付いた。こんな簡単なことにこれまで気付いていなかったわけではないのだが、私の目が曇っていたのか、慣習に引き摺られて気付かない振りをしていた。自分の頭で考えること、実際に実践してみることの重要性を改めて学んだ。</description><content>&lt;p>0時に寝て4時に起きて6時に起きて8時ぐらいまでだらだらしてた。出張前にプロジェクトの進捗を確認したり近況報告の資料を作ったり。&lt;/p>
&lt;h2 id="mon-copain-モンコパン">Mon copain (モン・コパン)&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/1030/#神戸お土産探し">出張するときはお土産をもっていく&lt;/a> ようにしていて、2月の中旬からお土産を探す余裕もなくてネタ切れでどうしようと思っていたものの、朝から調べてたら
&lt;a href="https://montplus.com/">パティスリー モンプリュ&lt;/a> というお店をみつけた。
Mon copain というガトーショコラの詰め合わせを選んでみた。ガトーショコラをあまり買ったことも食べたこともないので試しに購入してみた。本当は私が味見してからお土産にするかどうかを選定する (自分が食べてイマイチなものはお土産に持っていかない) のだが、先月からそんな余裕がなくて、お店を信頼して自分用と一緒にその場で購入したりしている。単品だと3個入りを1セットで購入できる。税込で580円になる。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0402_mon-copain.jpg"/>
&lt;/figure>
&lt;p>それぞれ上から次になる。&lt;/p>
&lt;ul>
&lt;li>茶色の包み: au lait キャラメルのコクが味わい深いミルク・ショコラ&lt;/li>
&lt;li>白色の包み: blanc ほんのりレモンが香るホワイト・ショコラ&lt;/li>
&lt;li>焦げ茶の包み: noir ほろ苦さが大人味のスイート・ショコラ&lt;/li>
&lt;/ul>
&lt;p>しっとり柔らかい口当たりで上品な風味だった。神戸の洋菓子屋さんという印象がそのままのお菓子。甘いが甘過ぎない雰囲気でよいと思う。3つとも食感は似ているが、どれも風味がまったく違うので全部食べてみるのも楽しめると思う。お土産として量と値段のバランスも取れていてちょうどよかった。全然調査していなくても、即席でよいお店がみつかるのは神戸という地域のよさだと思う。&lt;/p>
&lt;h2 id="夜のお花見-at-生田川公園">夜のお花見 at 生田川公園&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0410/#お花見-at-生田川公園">昨年に引き続き生田川公園&lt;/a> で三ノ宮.devのお花見。今年は夜桜にしようと夕方から始めることに。私は16時ぐらいから車で買い出しへ行って17時ぐらいから参加してきた。ここ2-3週間ほど車を動かす機会を伺っていてできなかったのが、明確な目的があると車を動かすことができてよかった。初めて近所のスーパーマーケットへ車で出掛けて駐車場に停めて買いものしてきた。15分ほどで買いものして、駐車場から出るときに220円必要だった。後で調べると500円以上購入すると120分無料になったらしい。レジで駐車券ありませんか？と聞かれて車に忘れてきていたので無料化のための手続きができなかった。次回から持参するための学びの1つとなった。その後、生田川公園へ移動して、付近をまわりながらパーキングのスポットをみつけることもできた。次のお花見はまた来年になるけど、そのときに役立つはず。&lt;/p>
&lt;p>昨年は4人だったのが今年は7人参加していた。昨年よりは三ノ宮.devも少し成長したのかもしれない。&lt;a href="/diary/diary/posts/2023/0124/#起業相談">1月に起業相談&lt;/a> されていた方も来ていて、その後、デザイナーや開発者をみつけることができて、プロダクト開発をしているらしい。3ヶ月でさっそくピボットしましたという話しをしていて、起業したばかりだとそんなもんだと私も思う。うまくいっているように話していたのでよかったと思う。これから海外に3ヶ月ぐらい出かけるといった話しもされていてスケールの大きい人だなと聞いてた。&lt;/p>
&lt;p>17時頃から始めて20時半でお開きになった。街灯の近くの場所をとったので暗くなっても灯りは問題なかった。始めたときは涼しくてちょうどよかったものの、さすがに20時をまわると寒くて解散することにした。私も20-21時ぐらいで帰ろうと思っていたのでちょうどよかった。食べものも飲みものもそんなに外してはなかったが、せっかく車があったので最初にコアメンバーに声を掛けて買い出しに行ってもよかったなと思えた。私が余裕なくて段取りできなかったせいでもある。16時から始めて19時に終える花見のやり方もあることを学んだ。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0402_hanami.jpg"/>
&lt;/figure>
&lt;h2 id="請求書の即時払い">請求書の即時払い&lt;/h2>
&lt;p>今月から請求書の支払いを即時払いに切り替えることにした。いまお手伝いしているお客さんは当社から請求書を送ると即時払いしてくれる。これまで取り引きしてきたお客さんは翌月末払いが普通だったのでそういうものだと思い込んでいた。私も無条件でその慣習に従っていた。もちろん契約上の支払い期限そのものは翌月末に設定しているが、支払いを即時で行うことに問題はなにもない。&lt;/p>
&lt;p>キャッシュフローの視点から「回収は早く支払いは遅く」の原則がある。レバレッジを効かせた経営 (資金繰り) をするなら正しいが、うちみたいな会社が支払いを1ヶ月遅くするメリットは何もない。これまでは請求書を受け取ったときに会計システムに取り引き登録して、銀行口座から1ヶ月後に予約振り込みの登録をしていた。そして、実際に振り込みされた1ヶ月後に、銀行の振り込み明細と会計システムの取り引き明細を付き合わせて決済が完了となる。請求書を受け取ったときに即時払いにすると、タイミング的に1ヶ月ずれる2度の事務手続きを1度にまとめられる。一言でいうと事務手続きの効率化になる。&lt;/p>
&lt;p>うちみたいな会社にとっては請求書の即時払いをすると、事務手続きの工数を少なくできるというメリットがあることに気付いた。こんな簡単なことにこれまで気付いていなかったわけではないのだが、私の目が曇っていたのか、慣習に引き摺られて気付かない振りをしていた。自分の頭で考えること、実際に実践してみることの重要性を改めて学んだ。&lt;/p></content></item><item><title>まったく終わっていない年度始まり</title><link>/diary/posts/2023/0401/</link><pubDate>Sat, 01 Apr 2023 11:59:53 +0900</pubDate><guid>/diary/posts/2023/0401/</guid><description>23時に寝て何度か起きて7時に起きた。久しぶりに早めにお仕事を終えて、気分転換に出掛けて、帰ってきてすぐ寝てたかな。
年度を気にしている余裕がない お仕事の納期が4月末でまだ余談を許さない状況と言える。2ヶ月以上遅延している、ある開発作業の最後の作業をメンバーから私に担当を付け替えている。前任者が作業を終えたら私がクリティカルパスになるようにしておいて、なる早で終わらせて開発を完了させたい。リリースまであと3週間なのに code freeze すらできていないという、マネジメントとしては失態を続けている。前任者が作業を終えるのを見計らって私が休出しつつ段取りを組んで正しいスケジュールに引き戻そうと調整している。
ストレッチ 今日の開脚幅は開始前154cmで、ストレッチ後158cmだった。今週は (私個人の) 開発のピークを過ぎて後半は余裕があったので体にかかる負荷も少なかったのではないかと想像していたら、ストレッチを受けていても先週より調子がよいように思えた。右股関節付近の張りは継続しているものの、腰の張りもひどくなく、すねの外側の筋も問題なく、ここ1-2ヶ月ぐらいではもっとも調子がよかったかもしれないと思えた。トレーナーさんも今日は目立って悪いところはなさそうとコメントしていたぐらい。
個人カンファレンス ストレッチを終えてからオフィスへ行って tenntenn Conference 2023 に参加した。個人が1日中話しまくるという取り組みそのものがおもしろい。自社のお仕事をしながら並行で視聴していた。パネルディスカッション (個人カンファレンスなのにモデラーとパネラーがいて、どうやら同じ人物っぽい人が相互に話していたw) のときに次のような質問があった。
Q. なぜ個人カンファレンスをやっているのか？
A. あまり深い意味はなく、誰もやっていないので思いつきでやっている
私のような無名の開発者が個人カンファレンスを開いても誰も参加してくれないと想定される。個人カンファレンスが成り立つ開発者の知名度やコンテンツを選択するのはすごく難しいと思う。個人カンファレンスの取り組みをみていて会社のテックカンファレンスを1人でやってみるというのもおもしろそうに思えた。うちの会社は課題管理を中核にビジネスを進めていく。その一環でコンテンツをいくつも作っていく必要がある。そして、コンテンツが溜まってきたらカンファレンス形式にして一気に放出するという取り組みをいずれやってみてもよいかもしれない。
他には 昨日の雑談会 にも書いたことで、オンラインの勉強会で参加者とインタラクティブにやり取りする難しさをこの個人カンファレンスをみていても感じた。登録で300人超、そのうち6割参加で180人ぐらいが参加していると仮定して、インタラクティブにコメントしているのは数人ほどしかいなかったと思う。私も他の作業と並行しつつ、ながらで視聴していたのでインタラクティブなコメントなどはしなかった。たまに twitter に所感を投稿するぐらい。基本的にオンライン勉強会でインタラクティブなやり取りを求めず、オフラインで3-4人集まってインタラクティブにやり取りする内容をコンテンツとして流すというのがよいのかもしれないなと、視聴していて思ったりもした。
Q. 有料の勉強会を始めたきっかけは？
A. お仕事じゃないとまとまった時間を使うことに家族の了承を得られにくいと考えたから
私も有料勉強会に参加しているので興味があった。主催者が転職の隙間時間を使う理由を家族に理解してもらうためだったと話されていた。私も過去に同居人がいたときに自分の時間を勉強したり、飲み会へ行ったりするのを非難された時期があったので理解できる。私はいまや調べものや勉強をしている時間が一番幸せを感じる。私にとって他のことを考えずに集中している状態がその時間に相当する。疲れてただ寝ているときもたまにある。しかし、それはあの時間を勉強や仕事に割り当てていたらもっとうまく物事を進められたのに、、、と後になって自己嫌悪になって返ってくるときがある。いまは何をなしても満たされることはなくて、常になにかをなし続けている状態そのものに満たされる。
閑話休題。あとでアーカイブも公開されるそうなので関心がある発表はまた見返すと思う。generics 周りと静的解析に関するところに私は関心をもっている。他に個人カンファレンスをやっている人を私はみかけたことがないけれど、こういう新しい取り組みに挑戦する人は本当に尊敬できる。</description><content>&lt;p>23時に寝て何度か起きて7時に起きた。久しぶりに早めにお仕事を終えて、気分転換に出掛けて、帰ってきてすぐ寝てたかな。&lt;/p>
&lt;h2 id="年度を気にしている余裕がない">年度を気にしている余裕がない&lt;/h2>
&lt;p>お仕事の納期が4月末でまだ余談を許さない状況と言える。2ヶ月以上遅延している、ある開発作業の最後の作業をメンバーから私に担当を付け替えている。前任者が作業を終えたら私がクリティカルパスになるようにしておいて、なる早で終わらせて開発を完了させたい。リリースまであと3週間なのに code freeze すらできていないという、マネジメントとしては失態を続けている。前任者が作業を終えるのを見計らって私が休出しつつ段取りを組んで正しいスケジュールに引き戻そうと調整している。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前154cmで、ストレッチ後158cmだった。今週は (私個人の) 開発のピークを過ぎて後半は余裕があったので体にかかる負荷も少なかったのではないかと想像していたら、ストレッチを受けていても先週より調子がよいように思えた。右股関節付近の張りは継続しているものの、腰の張りもひどくなく、すねの外側の筋も問題なく、ここ1-2ヶ月ぐらいではもっとも調子がよかったかもしれないと思えた。トレーナーさんも今日は目立って悪いところはなさそうとコメントしていたぐらい。&lt;/p>
&lt;h2 id="個人カンファレンス">個人カンファレンス&lt;/h2>
&lt;p>ストレッチを終えてからオフィスへ行って &lt;a href="https://tenntenn.connpass.com/event/261521/">tenntenn Conference 2023&lt;/a> に参加した。個人が1日中話しまくるという取り組みそのものがおもしろい。自社のお仕事をしながら並行で視聴していた。パネルディスカッション (個人カンファレンスなのにモデラーとパネラーがいて、どうやら同じ人物っぽい人が相互に話していたw) のときに次のような質問があった。&lt;/p>
&lt;blockquote>
&lt;p>Q. なぜ個人カンファレンスをやっているのか？&lt;/p>
&lt;p>A. あまり深い意味はなく、誰もやっていないので思いつきでやっている&lt;/p>
&lt;/blockquote>
&lt;p>私のような無名の開発者が個人カンファレンスを開いても誰も参加してくれないと想定される。個人カンファレンスが成り立つ開発者の知名度やコンテンツを選択するのはすごく難しいと思う。個人カンファレンスの取り組みをみていて会社のテックカンファレンスを1人でやってみるというのもおもしろそうに思えた。うちの会社は課題管理を中核にビジネスを進めていく。その一環でコンテンツをいくつも作っていく必要がある。そして、コンテンツが溜まってきたらカンファレンス形式にして一気に放出するという取り組みをいずれやってみてもよいかもしれない。&lt;/p>
&lt;p>他には &lt;a href="/diary/diary/posts/2023/0331/#chatgpt-勉強会">昨日の雑談会&lt;/a> にも書いたことで、オンラインの勉強会で参加者とインタラクティブにやり取りする難しさをこの個人カンファレンスをみていても感じた。登録で300人超、そのうち6割参加で180人ぐらいが参加していると仮定して、インタラクティブにコメントしているのは数人ほどしかいなかったと思う。私も他の作業と並行しつつ、ながらで視聴していたのでインタラクティブなコメントなどはしなかった。たまに twitter に所感を投稿するぐらい。基本的にオンライン勉強会でインタラクティブなやり取りを求めず、オフラインで3-4人集まってインタラクティブにやり取りする内容をコンテンツとして流すというのがよいのかもしれないなと、視聴していて思ったりもした。&lt;/p>
&lt;blockquote>
&lt;p>Q. 有料の勉強会を始めたきっかけは？&lt;/p>
&lt;p>A. お仕事じゃないとまとまった時間を使うことに家族の了承を得られにくいと考えたから&lt;/p>
&lt;/blockquote>
&lt;p>私も有料勉強会に参加しているので興味があった。主催者が転職の隙間時間を使う理由を家族に理解してもらうためだったと話されていた。私も過去に同居人がいたときに自分の時間を勉強したり、飲み会へ行ったりするのを非難された時期があったので理解できる。私はいまや調べものや勉強をしている時間が一番幸せを感じる。私にとって他のことを考えずに集中している状態がその時間に相当する。疲れてただ寝ているときもたまにある。しかし、それはあの時間を勉強や仕事に割り当てていたらもっとうまく物事を進められたのに、、、と後になって自己嫌悪になって返ってくるときがある。いまは何をなしても満たされることはなくて、常になにかをなし続けている状態そのものに満たされる。&lt;/p>
&lt;p>閑話休題。あとでアーカイブも公開されるそうなので関心がある発表はまた見返すと思う。generics 周りと静的解析に関するところに私は関心をもっている。他に個人カンファレンスをやっている人を私はみかけたことがないけれど、こういう新しい取り組みに挑戦する人は本当に尊敬できる。&lt;/p></content></item></channel></rss>