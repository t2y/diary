<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2023/08 on forest nook</title><link>/diary/dates/2023/08/</link><description>Recent content in 2023/08 on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/dates/2023/08/index.xml" rel="self" type="application/rss+xml"/><item><title>qa と最初のキャリア</title><link>/diary/posts/2023/0831/</link><pubDate>Thu, 31 Aug 2023 12:49:54 +0900</pubDate><guid>/diary/posts/2023/0831/</guid><description>0時に寝て何度か起きて6時に起きた。1-2週間前に2年ほどやっていたドラクエタクトをやめた。飽きたのか自然ともういいかって感じでやめられた。それ以来、家に帰ってからゆっくり休む時間が増えた気がする。
qa という業務の懐の広さ 先週の水曜日から qa テストに移行している。スケジュールとしてはこのために1ヶ月を確保している。おそらくもう少し早く終えられるんじゃないかという気はしている。早く終われば次の開発の計画づくりを前倒しにすればよいのでそれは構わない。私は先週から残タスクのリファクタリングが終わりきらなかったのでややバタバタしていたが、メンバーはテストに専念してテスト環境で動かして意図しない振る舞いを issue 登録したり、直感とは反する振る舞いを issue 登録したりしている。
新人さんや、未経験だけと開発者になりたいとジョブチェンジする人たち向けに、最初のキャリアとしてテスターや qa をするのがよいのではないかと私は考えている。きっかけは More Joel on Software に、テクニカルサポートは開発者を配置する必要があると書いてあった。しかし、テクニカルサポートだとスキルを身につけると持て余してしまうため、その業務ためのキャリアパスを考えないといけないと書いてあった。まったく同感だ。私がお手伝いしたある会社でもテクニカルサポートは1-2年で辞めているのを見聞きした。みんな開発したいからね。
(おまけ) カスタマーサービスの人たちのためのキャリアパスを用意する
テクニカルサポートにはデバッグ能力を要求するため、資質の高い人を配置する必要がある More Joel on Software
新卒以外の採用ルートで未経験から開発者になるのは、いまは相当に難しいと思う。そんな人たちがキャリアアップするための試金石としてテスターがよいと思う。重要なお仕事だし、テストツールをプログラミングすることで開発者になるための準備期間 (学習) にもあてられる。システムの振る舞いや知識もテストを通して身につけられる。このお仕事を2-3年務められて、プログラミングも少し理解できるようになって、それでも開発者になりたいという意志があるなら開発者にステップアップすればよい。適正があるかどうかわからない状態で開発者を始めるよりも、ゆっくり学んでいけるのでうまくいくのではないか？と思ったりする。うちの会社はまだ社員を雇う余裕がないので私の持論の検証はできないが、どこかの会社でやってみてほしい。</description><content>&lt;p>0時に寝て何度か起きて6時に起きた。1-2週間前に2年ほどやっていたドラクエタクトをやめた。飽きたのか自然ともういいかって感じでやめられた。それ以来、家に帰ってからゆっくり休む時間が増えた気がする。&lt;/p>
&lt;h2 id="qa-という業務の懐の広さ">qa という業務の懐の広さ&lt;/h2>
&lt;p>先週の水曜日から qa テストに移行している。スケジュールとしてはこのために1ヶ月を確保している。おそらくもう少し早く終えられるんじゃないかという気はしている。早く終われば次の開発の計画づくりを前倒しにすればよいのでそれは構わない。私は先週から残タスクのリファクタリングが終わりきらなかったのでややバタバタしていたが、メンバーはテストに専念してテスト環境で動かして意図しない振る舞いを issue 登録したり、直感とは反する振る舞いを issue 登録したりしている。&lt;/p>
&lt;p>新人さんや、未経験だけと開発者になりたいとジョブチェンジする人たち向けに、最初のキャリアとしてテスターや qa をするのがよいのではないかと私は考えている。きっかけは More Joel on Software に、テクニカルサポートは開発者を配置する必要があると書いてあった。しかし、テクニカルサポートだとスキルを身につけると持て余してしまうため、その業務ためのキャリアパスを考えないといけないと書いてあった。まったく同感だ。私がお手伝いしたある会社でもテクニカルサポートは1-2年で辞めているのを見聞きした。みんな開発したいからね。&lt;/p>
&lt;blockquote>
&lt;p>(おまけ) カスタマーサービスの人たちのためのキャリアパスを用意する&lt;/p>
&lt;ul>
&lt;li>テクニカルサポートにはデバッグ能力を要求するため、資質の高い人を配置する必要がある&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://t2y.hatenablog.jp/entry/2021/10/09/162618">More Joel on Software&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>新卒以外の採用ルートで未経験から開発者になるのは、いまは相当に難しいと思う。そんな人たちがキャリアアップするための試金石としてテスターがよいと思う。重要なお仕事だし、テストツールをプログラミングすることで開発者になるための準備期間 (学習) にもあてられる。システムの振る舞いや知識もテストを通して身につけられる。このお仕事を2-3年務められて、プログラミングも少し理解できるようになって、それでも開発者になりたいという意志があるなら開発者にステップアップすればよい。適正があるかどうかわからない状態で開発者を始めるよりも、ゆっくり学んでいけるのでうまくいくのではないか？と思ったりする。うちの会社はまだ社員を雇う余裕がないので私の持論の検証はできないが、どこかの会社でやってみてほしい。&lt;/p></content></item><item><title>トークン認証のプロバイダ実装</title><link>/diary/posts/2023/0830/</link><pubDate>Wed, 30 Aug 2023 13:14:57 +0900</pubDate><guid>/diary/posts/2023/0830/</guid><description>22時から寝始めて何度か起きて6時に起きた。最近は早寝早起きにしている。
client ライブラリのトークン認証対応 いまの開発の新機能の1つにローカルアカウントの管理機能がある。普通のパスワード認証により、JWT によるアクセストークンを発行し、リフレッシュトークンを使ってアクセストークンの再取得を行う。api サーバーで実装してもらったこれらの web api を使って、api client 側でもログインしてアクセストークンを取得して web api のリクエストができるようにする。一般的にアクセストークンは有効期限が短いため、有効期限が切れたときは透過的にリフレッシュトークンを使ってアクセストークンを再取得する。またリフレッシュトークンの有効期限が切れたときは再ログインして、アクセストークンとリフレッシュトークンを再取得する。
文章で書けばこれだけの機能だけど、このための AuthProvider を実装した。最終的には次のインターフェースになった。
type AuthProvider interface { CanRefresh() bool GetAuthorization() (string, error) GetType() AuthType Refresh() error } 先週たまたま Azure/azure-sdk-for-go の AuthProvider のソースコードを読んだ。やりたいことに対して、かなり複雑なことをしているようにみえたが、アクセストークンのキャッシュ、有効期限が切れたときのリフレッシュを透過的に行うコードだった。このライブラリの実装が読みにくいコードで、私だったらもっとシンプルに実装するというイメージが先週からあったのでそのイメージ通りに実装して1日で対応を終えた。本当はこの機能をいまの開発フェーズで提供する予定はなかったんだけど、うまく簡潔に実装できたので一部 agent で導入してテストで検証することにした。</description><content>&lt;p>22時から寝始めて何度か起きて6時に起きた。最近は早寝早起きにしている。&lt;/p>
&lt;h2 id="client-ライブラリのトークン認証対応">client ライブラリのトークン認証対応&lt;/h2>
&lt;p>いまの開発の新機能の1つにローカルアカウントの管理機能がある。普通のパスワード認証により、JWT によるアクセストークンを発行し、リフレッシュトークンを使ってアクセストークンの再取得を行う。api サーバーで実装してもらったこれらの web api を使って、api client 側でもログインしてアクセストークンを取得して web api のリクエストができるようにする。一般的にアクセストークンは有効期限が短いため、有効期限が切れたときは透過的にリフレッシュトークンを使ってアクセストークンを再取得する。またリフレッシュトークンの有効期限が切れたときは再ログインして、アクセストークンとリフレッシュトークンを再取得する。&lt;/p>
&lt;p>文章で書けばこれだけの機能だけど、このための &lt;em>AuthProvider&lt;/em> を実装した。最終的には次のインターフェースになった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">AuthProvider&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">CanRefresh&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetAuthorization&lt;/span>() (&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">GetType&lt;/span>() &lt;span style="color:#a6e22e">AuthType&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Refresh&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>先週たまたま &lt;a href="https://github.com/Azure/azure-sdk-for-go">Azure/azure-sdk-for-go&lt;/a> の &lt;em>AuthProvider&lt;/em> のソースコードを読んだ。やりたいことに対して、かなり複雑なことをしているようにみえたが、アクセストークンのキャッシュ、有効期限が切れたときのリフレッシュを透過的に行うコードだった。このライブラリの実装が読みにくいコードで、私だったらもっとシンプルに実装するというイメージが先週からあったのでそのイメージ通りに実装して1日で対応を終えた。本当はこの機能をいまの開発フェーズで提供する予定はなかったんだけど、うまく簡潔に実装できたので一部 agent で導入してテストで検証することにした。&lt;/p></content></item><item><title>コンテナー間のデータ通信と named pipe</title><link>/diary/posts/2023/0829/</link><pubDate>Tue, 29 Aug 2023 09:27:04 +0900</pubDate><guid>/diary/posts/2023/0829/</guid><description>22時頃から寝ていて2回起きて3時に起き出して、4時までネットみたりしていて、また寝て6時に起きた。生活のリズムがおかしい。
コンテナー間のデータのやり取り 昨日 モジュール分割 したことにより、いままで1つのモジュールで管理していたが、モジュールを分割したのでそれぞれのバージョンを取得できるとよいという話題が出た。コンテナー内にアプリケーションのバイナリがあり、バイナリを実行するとバージョン情報を取得できる。それぞれのモジュールは独立したコンテナで動いてるため、コンテナー間でその情報を受け渡す方法が必要になる。ググってみると次の so がヒットして named pipe がプラクティスだという。
How to run shell script on host from docker container? ホスト os 上の named pipe をコンテナーの volumes でマウントして、それぞれのコンテナーが読み書きすればよい。構築時に named pipe さえ作ったらコンテナー内での読み書きでデータ通信を実現できるため、シンプルでよいんじゃないかと思えた。
mypipe という named pipe を作る。
$ mkfifo mypipe 読み込み用コンテナーのための read-Dockerfile を作る。tail コマンドで named pipe を読む。
$ vi read-Dockerfile From bash:latest ENTRYPOINT [ &amp;#34;tail&amp;#34;, &amp;#34;-f&amp;#34;, &amp;#34;/app/mypipe&amp;#34; ] $ docker build -t mypipe-read:latest -f read-Dockerfile . named pipe をマウントして読み込み用コンテナーを起動する。
$ docker run --rm --mount type=bind,source=&amp;#34;$(pwd)&amp;#34;/mypipe,target=/app/mypipe,readonly mypipe-read 書き込み用のエントリーポイントのスクリプトはちょっと工夫がいる。おそらく Dockerfile 内で直接リダイレクトの操作ができない (やり方がわからなかった) 。シェルスクリプトを呼び出す形にして、シェルスクリプト内部でリダイレクトにより、named pipe に書き込みする。</description><content>&lt;p>22時頃から寝ていて2回起きて3時に起き出して、4時までネットみたりしていて、また寝て6時に起きた。生活のリズムがおかしい。&lt;/p>
&lt;h2 id="コンテナー間のデータのやり取り">コンテナー間のデータのやり取り&lt;/h2>
&lt;p>昨日 &lt;a href="/diary/diary/posts/2023/0828/">モジュール分割&lt;/a> したことにより、いままで1つのモジュールで管理していたが、モジュールを分割したのでそれぞれのバージョンを取得できるとよいという話題が出た。コンテナー内にアプリケーションのバイナリがあり、バイナリを実行するとバージョン情報を取得できる。それぞれのモジュールは独立したコンテナで動いてるため、コンテナー間でその情報を受け渡す方法が必要になる。ググってみると次の so がヒットして named pipe がプラクティスだという。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/32163955/how-to-run-shell-script-on-host-from-docker-container">How to run shell script on host from docker container?&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ホスト os 上の named pipe をコンテナーの volumes でマウントして、それぞれのコンテナーが読み書きすればよい。構築時に named pipe さえ作ったらコンテナー内での読み書きでデータ通信を実現できるため、シンプルでよいんじゃないかと思えた。&lt;/p>
&lt;p>mypipe という named pipe を作る。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ mkfifo mypipe
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>読み込み用コンテナーのための read-Dockerfile を作る。tail コマンドで named pipe を読む。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ vi read-Dockerfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>From bash:latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENTRYPOINT &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;tail&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-f&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/app/mypipe&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker build -t mypipe-read:latest -f read-Dockerfile .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>named pipe をマウントして読み込み用コンテナーを起動する。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ docker run --rm --mount type=bind,source=&amp;#34;$(pwd)&amp;#34;/mypipe,target=/app/mypipe,readonly mypipe-read
&lt;/code>&lt;/pre>&lt;p>書き込み用のエントリーポイントのスクリプトはちょっと工夫がいる。おそらく Dockerfile 内で直接リダイレクトの操作ができない (やり方がわからなかった) 。シェルスクリプトを呼び出す形にして、シェルスクリプト内部でリダイレクトにより、named pipe に書き込みする。&lt;/p>
&lt;p>エントリーポイントのスクリプトは次のような感じ。&lt;code>eval &amp;quot;$@&amp;quot;&lt;/code> で任意のコード実行できるようにちょっと細工。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ vi myentrypoint.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cleanup&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;cleanup ...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>trap cleanup INT TERM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>date&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> eval &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$@&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>書き込み用コンテナーのための write-Dockerfile を作る。先の myentrypoint.sh を &lt;code>ENTRYPOINT&lt;/code> として起動させる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ vi write-Dockerfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>From bash:latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>COPY myentrypoint.sh /app/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RUN chmod +x /app/myentrypoint.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENTRYPOINT &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/app/myentrypoint.sh&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker build -t mypipe-write:latest -f write-Dockerfile .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>適当に乱数を生成する cli を eval 実行させる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker run --rm --mount type&lt;span style="color:#f92672">=&lt;/span>bind,source&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>pwd&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>/mypipe,target&lt;span style="color:#f92672">=&lt;/span>/app/mypipe mypipe-write &lt;span style="color:#e6db74">&amp;#34;tr -dc 0-9 &amp;lt; /dev/urandom | fold -w 8 | head -1 &amp;gt; /app/mypipe&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>読み込み用コンテナーで乱数を表示できるはず。&lt;/p>
&lt;p>なにも難しくなく、linux の標準の機能を使ってコンテナー間のデータ通信を実現できたことにちょっと驚いた。&lt;/p>
&lt;p>go で named pipe を読むときは linux ならば &lt;code>syscall.O_NONBLOCK&lt;/code> を指定することで書き込みしていなくてもブロックせずに読める。値を取得できない可能性はあるけど、それが許される要件ならこれで済む。またテックブログにまとめたい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">readNamedPipe&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) ([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">flag&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">O_RDONLY&lt;/span> | &lt;span style="color:#a6e22e">syscall&lt;/span>.&lt;span style="color:#a6e22e">O_NONBLOCK&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pipe&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">OpenFile&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span>, &lt;span style="color:#a6e22e">flag&lt;/span>, &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">ModeNamedPipe&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to open path: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">pipe&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">reader&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">pipe&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reader&lt;/span>.&lt;span style="color:#a6e22e">ReadLine&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to read line: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>go の処理系も驚く sdk のコード生成</title><link>/diary/posts/2023/0828/</link><pubDate>Mon, 28 Aug 2023 08:05:42 +0900</pubDate><guid>/diary/posts/2023/0828/</guid><description>0時に寝て何度か起きて6時に起きた。そのまま7時過ぎまでだらだらしてた。しんどい。
msgraph-sdk-go のサイズ問題 先週 msgraph-sdk-go を使った開発 を終えてデプロイする段階になってライブラリのサイズが大きくて、コンパイル速度が遅くなったり、バイナリサイズが大きくなったりする弊害があることに気付いた。コンパイル速度は2-3倍遅くなり (3分が7-10分ぐらい)、バイナリサイズも2-3倍大きくなる (30 MiB が 100 MiB とか) 。たまたまこのリポジトリは他のツール類からも依存パッケージとして使われるものなので想定よりも影響が大きいことに気付いた。
朝からチームのメンバーとミーティングして、本来は qa に入ったこの時期にこんな変更をすべきではないが、これは放置するデメリットが大きいのでリポジトリ分割 (モジュール分割) しようと提案して了承を得た。私がやれば作業は1日もあれば完了するだろうと見積もって、見積もり通り、夕方には分割したモジュールをテスト環境にデプロイして当面の解決を得た。アプリケーションのモジュール構造をちゃんとレイヤー化して作ってあるから、今回みたいに急遽、モジュール分割が必要になってもほぼ変更する必要はなかった (たった1箇所だけ) 。
この本質的な問題は次の issue のコメントで説明されている。
Issue with the size of the API surface of the models package #129 ざっと機械翻訳してみる。
コンテキスト
この SDK は kiota を使用してメタデータから自動的に生成されます。オリジナルのメタデータは、Microsoft Graph の配下にあるすべてのサービスチーム（v1用とベータ用）によって入力された CSDL です。この CSDL は最終的に OpenAPI のフォーマットに変換されますが、これは非常に大きなものです（1k 以上のエンドポイント、1.5k のモデル &amp;hellip;）。API のサイズが大きいため、完全な API surface の SDK を手作りすることは実現不可能でしょう。
私たちは、SDK を複数のサブモジュール（ファイル用、メール用など）に &amp;ldquo;スライス&amp;rdquo; して、人々が関心のあるものだけを簡単に入手できるようにすることをしばらく考えてきました。実際、私たちは PowerShell でこれを実現しました。しかし、&amp;ldquo;グラフ&amp;rdquo; の性質（すべてのモデルは互いにある程度関連している）と構築されるアプリケーションの多様性により、スライスは誰にとっても &amp;ldquo;正しい&amp;rdquo; ものにはならない（大きすぎたり、小さすぎたり、モデルの重複につながったり&amp;hellip;）。</description><content>&lt;p>0時に寝て何度か起きて6時に起きた。そのまま7時過ぎまでだらだらしてた。しんどい。&lt;/p>
&lt;h2 id="msgraph-sdk-go-のサイズ問題">msgraph-sdk-go のサイズ問題&lt;/h2>
&lt;p>先週 &lt;a href="/diary/diary/posts/2023/0825/#msgraph-sdk-go-を使った開発">msgraph-sdk-go を使った開発&lt;/a> を終えてデプロイする段階になってライブラリのサイズが大きくて、コンパイル速度が遅くなったり、バイナリサイズが大きくなったりする弊害があることに気付いた。コンパイル速度は2-3倍遅くなり (3分が7-10分ぐらい)、バイナリサイズも2-3倍大きくなる (30 MiB が 100 MiB とか) 。たまたまこのリポジトリは他のツール類からも依存パッケージとして使われるものなので想定よりも影響が大きいことに気付いた。&lt;/p>
&lt;p>朝からチームのメンバーとミーティングして、本来は qa に入ったこの時期にこんな変更をすべきではないが、これは放置するデメリットが大きいのでリポジトリ分割 (モジュール分割) しようと提案して了承を得た。私がやれば作業は1日もあれば完了するだろうと見積もって、見積もり通り、夕方には分割したモジュールをテスト環境にデプロイして当面の解決を得た。アプリケーションのモジュール構造をちゃんとレイヤー化して作ってあるから、今回みたいに急遽、モジュール分割が必要になってもほぼ変更する必要はなかった (たった1箇所だけ) 。&lt;/p>
&lt;p>この本質的な問題は次の issue のコメントで説明されている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/microsoftgraph/msgraph-sdk-go/issues/129#issuecomment-1098028043">Issue with the size of the API surface of the models package #129&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ざっと機械翻訳してみる。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>コンテキスト&lt;/strong>&lt;/p>
&lt;p>この SDK は &lt;a href="https://github.com/microsoft/kiota">kiota&lt;/a> を使用してメタデータから自動的に生成されます。オリジナルのメタデータは、Microsoft Graph の配下にあるすべてのサービスチーム（v1用とベータ用）によって入力された CSDL です。この CSDL は最終的に OpenAPI のフォーマットに変換されますが、これは非常に大きなものです（1k 以上のエンドポイント、1.5k のモデル &amp;hellip;）。API のサイズが大きいため、完全な API surface の SDK を手作りすることは実現不可能でしょう。&lt;/p>
&lt;p>私たちは、SDK を複数のサブモジュール（ファイル用、メール用など）に &amp;ldquo;スライス&amp;rdquo; して、人々が関心のあるものだけを簡単に入手できるようにすることをしばらく考えてきました。実際、私たちは PowerShell でこれを実現しました。しかし、&amp;ldquo;グラフ&amp;rdquo; の性質（すべてのモデルは互いにある程度関連している）と構築されるアプリケーションの多様性により、スライスは誰にとっても &amp;ldquo;正しい&amp;rdquo; ものにはならない（大きすぎたり、小さすぎたり、モデルの重複につながったり&amp;hellip;）。&lt;/p>
&lt;p>そのような理由から、私たちは「完全なSDK」を提供することにしました。すべての人にとって理想的とは言えないかもしれませんが、Go開発者の中には「アプリケーションを作るためのSDKが欲しいだけ」という人もいると感じています（以下で説明する2つ目のオプションとは対照的です）。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>Go の欠点&lt;/strong>&lt;/p>
&lt;p>Go の探求を通して、いくつかの欠点に気づいた。現時点では、私たちのプロジェクトやパッケージが適切にセットアップされていないせいなのか、Go や大規模プロジェクトの制限のせいなのかはわからない：&lt;/p>
&lt;p>go build は、変更されておらず、依存関係も変更されていないサブパッケージをリビルドすることが多い。go build が直前に実行されていても、go test がリビルドすることがよくあります。なぜある種のキャッシュに頼らないのでしょうか？同じ問題が go lint にもある。&lt;br />
私には、たくさんのサブパッケージがある大きなプロジェクトをビルドするコストは、依存関係が更新されたり、キャッシュが削除されたり、コードが変更されたりしない限り、「セッションごとに一度」だけ支払われるべきだと感じます。&lt;/p>
&lt;p>私たちのプロジェクト構成／構造において、そのような状況を改善するための最適化について、自由に概説してください。また、Goコミュニティ（Goコンパイラを開発している人たちなど）と関わって、そのようなフィードバックを提供する方法があれば、喜んでそうします。私たちのプロジェクトは、その規模の大きさから、世の中にあるほとんどのGoパッケージと比べると、ちょっと変わり者だとわかっています。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>適切なサイズの SDK&lt;/strong>&lt;/p>
&lt;p>最後に、すべてのエンドポイントを備えた完全な SDK を持つことは、様々な理由からすべての人に適しているわけではないことを認識しています。私たちは新しい &amp;ldquo;適切なサイズのセルフサービスSDKエクスペリエンス&amp;rdquo; を可能にするために取り組んでいます。そこでは、APIユーザーは誰でも、この SDK と同じように見え、同じように感じる SDK を生成することができますが、完全な API サーフェスの代わりに、彼らのアプリケーションのために彼らが気にするエンドポイント/モデルのみが含まれています。
私たちは今、そのような取り組みに本当に早くから取り組んでいますが、それでもフィードバックをいただけるとうれしいです。大まかな手順はこんな感じだ：&lt;/p>
&lt;ol>
&lt;li>新しいgoプロジェクトを作成するか、既存のプロジェクトを特定する。&lt;/li>
&lt;li>kiotaの依存関係を追加するか、msgraph-sdk-go-coreを追加します（これはKiotaの依存関係をプルし、いくつか追加します）。&lt;/li>
&lt;li>グラフエクスプローラで必要なリソースを選択（左パネル、2番目のタブ、&amp;hellip;、&amp;ldquo;コレクションに追加&amp;rdquo;）。&lt;/li>
&lt;li>コレクションをプレビューをクリックし、postmanコレクションとしてエクスポートします。&lt;/li>
&lt;li>hidi を postmanコレクションと先ほど共有したOpenAPIの完全な説明文と一緒に使って、&amp;ldquo;フィルタリングされた&amp;rdquo; OpenAPI フォーマットを生成する。&lt;/li>
&lt;li>kiotaを使って、プロジェクトにMicrosoft Graph用のGoクライアントを生成する。&lt;/li>
&lt;li>APIの呼び出しを開始する。&lt;/li>
&lt;/ol>
&lt;p>この時点で、私たちはこれらのステップをすべて文書化し、効率化するために取り組んでいます（おそらくステップ4～5を圧縮しています）。このアプローチの素晴らしいところは、ステップ5から7までが、Microsoft Graphだけでなく、呼び出したいOpenAPIで記述されたAPIで動作することだ。&lt;br />
繰り返しますが、この最後の提案はまだ初期段階です。自由に試して、様々な場所でフィードバックを提供してください。&lt;/p>
&lt;p>この長い投稿で、私たちがどこに向かっているのかが明らかになり、Goコミュニティからこれらの側面すべてについてさらにフィードバックが得られると本当に助かる！&lt;/p>
&lt;/blockquote>
&lt;p>簡単に言えば、ms graph api の体系が巨大過ぎて、その定義は &lt;a href="https://raw.githubusercontent.com/microsoftgraph/msgraph-metadata/master/openapi/v1.0/openapi.yaml">openapi.yaml&lt;/a> にあるが、この定義からすべてコード生成すると巨大なモデル定義をもつ sdk が出来上がってしまったという話しである。後半に書いてあるワークアラウンドとして kiota で必要なモデルだけを選択して専用 sdk を生成すればサイズを小さくできるとある。しかし、それはそれで &lt;a href="https://developer.microsoft.com/en-us/graph/graph-explorer">graph explorer&lt;/a> で選択しないといけなかったりして面倒そうではある。次のドキュメントでもその手順について書いてある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://devblogs.microsoft.com/microsoft365dev/building-go-applications-with-the-microsoft-graph-go-sdk/#create-a-smaller-and-tailored-microsoft-graph-go-client-library">Create a smaller and tailored Microsoft Graph Go client library&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>うちの用途ではモジュール分割により、局所化したのでひとまずこの問題は大きな影響をもたないようになった。また余裕があるときにモデルを選択して専用 sdk を自動的に生成する仕組みを構築できるならそれに挑戦してもよいかもしれない。&lt;/p></content></item><item><title>気分転換に開発はお休み</title><link>/diary/posts/2023/0827/</link><pubDate>Sun, 27 Aug 2023 12:44:17 +0900</pubDate><guid>/diary/posts/2023/0827/</guid><description>0時に寝て3時5時7時と起きて8時に起きた。起きてからネットの記事を読みながらしばらくだらだらしていた。11時ぐらいにはオフィスへ行って今月分の請求書を発行して、9月のイベントで発表するネタの調査、三ノ宮.dev の slack で 課題管理について話した podcast を紹介してもらったお礼を述べたりとか、いろいろ自社のお仕事をしていた。
マイクロ法人のススメ たまたまだが、私がよく行くお店でマスターが1人でやり繰りしている飲食店が増えてきた。またコワーキングスペースなどへ行くと、マイクロ法人でがんばっている人たちと交流する機会も増えてきた。私自身マイクロ法人として1人で会社や事業を経営している立場なのでそういった似たもの同士な人たちとよく気があう。同じような人たちをみていて、マイクロ法人のなにが楽しいのかを、いずれちゃんとしたブログの記事にしたいと思う。外から観察していても働き方に共通点がある。
よいところを述べる前に、わるいところも言うべきだと思う。
(サラリーマンと比較して) 会計や税制といった財務知識が必要になる (サラリーマンと比較して) 書類などの事務手続き作業は増える (サラリーマンと比較して) 短期的な安定や信頼を得にくい 自分で営業しないといけない 自分で事業を設計しないといけない 同僚と雑談できない、困ったときに助けてもらえない 複数人で対応するような規模の大きな仕事はできない たくさんわるいところもある。これらのわるいところを受け入れた上でよいところもある。
お仕事はすべて自分で決められる 目標設定をしなくて済む (他者評価もされなくて済む) (サラリーマンと比較して) 事業がうまくいけばより大きな対価を得られやすい デメリットよりもメリットが上回るのならマイクロ法人がいいと私は思う。もちろん若い人には勧めない。経験のある人が評価されずにつまらない組織の仕事で残りの余生を過ごすぐらいなら、自分で思うよう好き勝手働いた方が人生としては楽しいのではないかと思ったりする。もちろんそれで失敗する人もいるだろうし、私も今後失敗するかもしれない。失敗したときに会社を辞めずにサラリーマンをしておけばよかったと後悔する日が来るかもしれない。仮に失敗したとしても、その瞬間までのマイクロ法人で働いてきた日々に価値を見出せればそれだけでよかったと思えるかどうか、と言い換えられるかもしれない。
楽しく働く
うちの会社の価値観の1つにしようと考えている。歳をとってシニア社員になるほど、楽しく働いている人は少なくなっていくように傍からはみえる。会社から評価されず、おもしろい仕事も任されず、ただ生活のために働いている人は多いのだろう。状況が許せば、そんな人がマイクロ法人になると、働く楽しさを取り戻せるかもしれない。</description><content>&lt;p>0時に寝て3時5時7時と起きて8時に起きた。起きてからネットの記事を読みながらしばらくだらだらしていた。11時ぐらいにはオフィスへ行って今月分の請求書を発行して、9月のイベントで発表するネタの調査、三ノ宮.dev の slack で &lt;a href="/diary/diary/posts/2023/0815/#課題管理とプロジェクトマネージメントの話を熱く語る">課題管理について話した podcast&lt;/a> を紹介してもらったお礼を述べたりとか、いろいろ自社のお仕事をしていた。&lt;/p>
&lt;h2 id="マイクロ法人のススメ">マイクロ法人のススメ&lt;/h2>
&lt;p>たまたまだが、私がよく行くお店でマスターが1人でやり繰りしている飲食店が増えてきた。またコワーキングスペースなどへ行くと、マイクロ法人でがんばっている人たちと交流する機会も増えてきた。私自身マイクロ法人として1人で会社や事業を経営している立場なのでそういった似たもの同士な人たちとよく気があう。同じような人たちをみていて、マイクロ法人のなにが楽しいのかを、いずれちゃんとしたブログの記事にしたいと思う。外から観察していても働き方に共通点がある。&lt;/p>
&lt;p>よいところを述べる前に、わるいところも言うべきだと思う。&lt;/p>
&lt;ul>
&lt;li>(サラリーマンと比較して) 会計や税制といった財務知識が必要になる&lt;/li>
&lt;li>(サラリーマンと比較して) 書類などの事務手続き作業は増える&lt;/li>
&lt;li>(サラリーマンと比較して) 短期的な安定や信頼を得にくい&lt;/li>
&lt;li>自分で営業しないといけない&lt;/li>
&lt;li>自分で事業を設計しないといけない&lt;/li>
&lt;li>同僚と雑談できない、困ったときに助けてもらえない&lt;/li>
&lt;li>複数人で対応するような規模の大きな仕事はできない&lt;/li>
&lt;/ul>
&lt;p>たくさんわるいところもある。これらのわるいところを受け入れた上でよいところもある。&lt;/p>
&lt;ul>
&lt;li>お仕事はすべて自分で決められる&lt;/li>
&lt;li>目標設定をしなくて済む (他者評価もされなくて済む)&lt;/li>
&lt;li>(サラリーマンと比較して) 事業がうまくいけばより大きな対価を得られやすい&lt;/li>
&lt;/ul>
&lt;p>デメリットよりもメリットが上回るのならマイクロ法人がいいと私は思う。もちろん若い人には勧めない。経験のある人が評価されずにつまらない組織の仕事で残りの余生を過ごすぐらいなら、自分で思うよう好き勝手働いた方が人生としては楽しいのではないかと思ったりする。もちろんそれで失敗する人もいるだろうし、私も今後失敗するかもしれない。失敗したときに会社を辞めずにサラリーマンをしておけばよかったと後悔する日が来るかもしれない。仮に失敗したとしても、その瞬間までのマイクロ法人で働いてきた日々に価値を見出せればそれだけでよかったと思えるかどうか、と言い換えられるかもしれない。&lt;/p>
&lt;blockquote>
&lt;p>楽しく働く&lt;/p>
&lt;/blockquote>
&lt;p>うちの会社の価値観の1つにしようと考えている。歳をとってシニア社員になるほど、楽しく働いている人は少なくなっていくように傍からはみえる。会社から評価されず、おもしろい仕事も任されず、ただ生活のために働いている人は多いのだろう。状況が許せば、そんな人がマイクロ法人になると、働く楽しさを取り戻せるかもしれない。&lt;/p></content></item><item><title>全身疲労と気分転換</title><link>/diary/posts/2023/0826/</link><pubDate>Sat, 26 Aug 2023 12:06:00 +0900</pubDate><guid>/diary/posts/2023/0826/</guid><description>23時に寝て何度か起きて6時に起きた。疲労でバテバテ。
ストレッチ 先週もあまりよい状態ではなかったけれど、今日はことさら悪かった。疲労は着実に蓄積するんやと実感する。左足は筋肉痛やなって感じだけど、右足はそのうち足が動かなくなるんじゃないかとすら思えた。ふくらはぎは左右ともにパンパンだし、右の股関節の部位はピキッて感じで痛みが出たりするから根本的に悪そう。足全体が硬かったように思える。腰もいくつか張りがあって、特定のツボはかなり痛くてなにかが悪いのだと思えた。臀部のツボも一部だけすごく効いて痛かった。肩周りも凝りや張りはいつもより大きかったように思う。今日の開脚幅は開始前154cmで、ストレッチ後156cmだった。久しぶりにこんな調子の悪いのも珍しいなと思えた。あと2週間ぐらいがお仕事のピークだと思うのでもう少しだけもてばよい。
請求書のテンプレート作り 10月から施行されるインボイス対応の請求書として 10%, 8% の消費税の税率を明記して別々に小計を記載しなければならない。そろそろ個々の企業でも運用が始まるところ。うちの会社が扱う商品は10%のみだが、請求書のフォーマットそのものを変更しないといけない。ちょうど freee 側でもその対応で6-7月に新しい帳票管理の機能をリリースしていた。8月から順次切り替えとなっていた。私は開発にいっぱいいっぱいだったからベータ版は見送って正式リリース後に対応することにしていた。それが今日だ。今月分の請求書はインボイス対応の新しいフォーマットで作る。
その移行をしていて、この機会に会社のロゴや角印も請求書に載せることにした。はらさんに角印をどうやってデータ化したらよいかを尋ねたら、普通に白い紙に押印してスキャナで取り込んで、白色を透過処理して使っているとのこと。
オフィスの複合機で白い紙で押印した角印をスキャンする。pdf でダウンロードできる。pdftoppm で pdf を png に変換する。
$ pdftoppm -png corporate-seal-square.pdf corporate-seal-square $ ls corporate-seal-square-* corporate-seal-square-1.png corporate-seal-square-2.png あとは白い背景を透過処理するだけ。pinta, incscape とやってみたけど、どうもうまくできない。最終的に次の記事を参考にしながら gimp を使って「ファジー選択」で透過処理したいところをちょこちょこ選択しながら変換していくのがもっとも私にとって簡単だった。
GIMP – 画像を切り抜き背景を透明・透過して保存する方法 請求書のテンプレートに対して角印を読み込んで、社名に重なるように配置するのが慣習らしい。なぜ社名に角印を重ねるかというと偽造や改ざんを防止するという意図になる。電子データの請求書に角印を載せる意味はないけれど、紙の慣習にあわせるという意図なら重ねた方がよいだろうと考えて社名に角印を重なるようにして作成した。請求書に角印とロゴが入って見栄えもよくなった。
立ち呑み屋 本番 先週行った立ち呑み屋 さんにコミュニティのメンバーと一緒に行ってきた。ずっと休日も開発してきて疲労困憊ないので気分転換しようという思いつき。
19時開始でたまたまオフィスを出たときに雷が鳴り始めて、私がお店に付いたすぐ後に豪雨になった。今日はついている。豪雨は1-2時間で止んでいたと思う。その後、さなださんとすみよしさんと合流して飲んでた。わいわい雑談できて楽しかった。いくつか始めて注文してみた料理もおいしかった。このお店の料理は何を頼んでもおいしい気がする。お酒も料理もマスターが1人で運営しているせいか、非常に良心的な価格設定になっている。もう1.5倍ぐらい値上げしたらいいんじゃないかと思う。それでも安い方だけど。立ち呑みだとしんどいので22時前にはお開きになった。長居せずに帰りやすいのも立ち呑みのよいところだと思う。</description><content>&lt;p>23時に寝て何度か起きて6時に起きた。疲労でバテバテ。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>先週もあまりよい状態ではなかったけれど、今日はことさら悪かった。疲労は着実に蓄積するんやと実感する。左足は筋肉痛やなって感じだけど、右足はそのうち足が動かなくなるんじゃないかとすら思えた。ふくらはぎは左右ともにパンパンだし、右の股関節の部位はピキッて感じで痛みが出たりするから根本的に悪そう。足全体が硬かったように思える。腰もいくつか張りがあって、特定のツボはかなり痛くてなにかが悪いのだと思えた。臀部のツボも一部だけすごく効いて痛かった。肩周りも凝りや張りはいつもより大きかったように思う。今日の開脚幅は開始前154cmで、ストレッチ後156cmだった。久しぶりにこんな調子の悪いのも珍しいなと思えた。あと2週間ぐらいがお仕事のピークだと思うのでもう少しだけもてばよい。&lt;/p>
&lt;h2 id="請求書のテンプレート作り">請求書のテンプレート作り&lt;/h2>
&lt;p>10月から施行されるインボイス対応の請求書として 10%, 8% の消費税の税率を明記して別々に小計を記載しなければならない。そろそろ個々の企業でも運用が始まるところ。うちの会社が扱う商品は10%のみだが、請求書のフォーマットそのものを変更しないといけない。ちょうど freee 側でもその対応で6-7月に新しい帳票管理の機能をリリースしていた。8月から順次切り替えとなっていた。私は開発にいっぱいいっぱいだったからベータ版は見送って正式リリース後に対応することにしていた。それが今日だ。今月分の請求書はインボイス対応の新しいフォーマットで作る。&lt;/p>
&lt;p>その移行をしていて、この機会に会社のロゴや角印も請求書に載せることにした。はらさんに角印をどうやってデータ化したらよいかを尋ねたら、普通に白い紙に押印してスキャナで取り込んで、白色を透過処理して使っているとのこと。&lt;/p>
&lt;p>オフィスの複合機で白い紙で押印した角印をスキャンする。pdf でダウンロードできる。pdftoppm で pdf を png に変換する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ pdftoppm -png corporate-seal-square.pdf corporate-seal-square
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ls corporate-seal-square-*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>corporate-seal-square-1.png corporate-seal-square-2.png
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>あとは白い背景を透過処理するだけ。pinta, incscape とやってみたけど、どうもうまくできない。最終的に次の記事を参考にしながら gimp を使って「ファジー選択」で透過処理したいところをちょこちょこ選択しながら変換していくのがもっとも私にとって簡単だった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://howpon.com/1450">GIMP – 画像を切り抜き背景を透明・透過して保存する方法&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>請求書のテンプレートに対して角印を読み込んで、社名に重なるように配置するのが慣習らしい。なぜ社名に角印を重ねるかというと偽造や改ざんを防止するという意図になる。電子データの請求書に角印を載せる意味はないけれど、紙の慣習にあわせるという意図なら重ねた方がよいだろうと考えて社名に角印を重なるようにして作成した。請求書に角印とロゴが入って見栄えもよくなった。&lt;/p>
&lt;h2 id="立ち呑み屋-本番">立ち呑み屋 本番&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0819/#立ち呑み屋">先週行った立ち呑み屋&lt;/a> さんにコミュニティのメンバーと一緒に行ってきた。ずっと休日も開発してきて疲労困憊ないので気分転換しようという思いつき。&lt;/p>
&lt;p>19時開始でたまたまオフィスを出たときに雷が鳴り始めて、私がお店に付いたすぐ後に豪雨になった。今日はついている。豪雨は1-2時間で止んでいたと思う。その後、さなださんとすみよしさんと合流して飲んでた。わいわい雑談できて楽しかった。いくつか始めて注文してみた料理もおいしかった。このお店の料理は何を頼んでもおいしい気がする。お酒も料理もマスターが1人で運営しているせいか、非常に良心的な価格設定になっている。もう1.5倍ぐらい値上げしたらいいんじゃないかと思う。それでも安い方だけど。立ち呑みだとしんどいので22時前にはお開きになった。長居せずに帰りやすいのも立ち呑みのよいところだと思う。&lt;/p></content></item><item><title>msgraph-sdk-go のビルド問題</title><link>/diary/posts/2023/0825/</link><pubDate>Fri, 25 Aug 2023 18:28:18 +0900</pubDate><guid>/diary/posts/2023/0825/</guid><description>1時に寝て何度か起きて7時に起きた。昨日は少し早めにお仕事を終えて家で休んでいたので少し回復した。
msgraph-sdk-go を使った開発 昨日の続き 。前日に作ったマージリクエストをチームのメンバーにレビューしてもらっていくつか修正して、マージを終えた。一段落。
さらにこの sdk を使うことで8月の前半に開発していた差分比較のところも変更しないといけないことに気付いた。public な構造体のメンバーにアクセスして差分比較する処理を実装していたが、この sdk は getter で構造体のメンバーにアクセスしないといけないことに気付いた。reflectoin の処理に追加で実装を入れるだけなのでそんなに難しくはない。そういった修正をしていたら1日終わってしまった。開発していると時間が過ぎるのは早い。
たまたま ci/cd ジョブの実行時間の上限を10分にしていて超えるときがあってジョブが失敗した。 調べてみると、msgraph-sdk-go の api が巨大過ぎてメモリを浪費したりコンパイルに時間がかかったりするという issue をみつけた。
Memory Leak when creating msgraph client #436 私のローカル環境で測ってみると、約36秒で完了していたテストが2分23秒かかるようになっていた。テストの実行が4-5倍ぐらい遅くなった。さらにコンテナイメージのサイズは 36 MiB から 109 MiB と3倍ほど増えた。無駄に開発を遅らせる環境要因になっているのでこれは別途調査して対応しないといけないことに気付いた。</description><content>&lt;p>1時に寝て何度か起きて7時に起きた。昨日は少し早めにお仕事を終えて家で休んでいたので少し回復した。&lt;/p>
&lt;h2 id="msgraph-sdk-go-を使った開発">msgraph-sdk-go を使った開発&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0824/#msgraph-sdk-go-を使った開発">昨日の続き&lt;/a> 。前日に作ったマージリクエストをチームのメンバーにレビューしてもらっていくつか修正して、マージを終えた。一段落。&lt;/p>
&lt;p>さらにこの sdk を使うことで8月の前半に開発していた差分比較のところも変更しないといけないことに気付いた。public な構造体のメンバーにアクセスして差分比較する処理を実装していたが、この sdk は getter で構造体のメンバーにアクセスしないといけないことに気付いた。reflectoin の処理に追加で実装を入れるだけなのでそんなに難しくはない。そういった修正をしていたら1日終わってしまった。開発していると時間が過ぎるのは早い。&lt;/p>
&lt;p>たまたま ci/cd ジョブの実行時間の上限を10分にしていて超えるときがあってジョブが失敗した。
調べてみると、msgraph-sdk-go の api が巨大過ぎてメモリを浪費したりコンパイルに時間がかかったりするという issue をみつけた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/microsoftgraph/msgraph-sdk-go/issues/436">Memory Leak when creating msgraph client #436&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>私のローカル環境で測ってみると、約36秒で完了していたテストが2分23秒かかるようになっていた。テストの実行が4-5倍ぐらい遅くなった。さらにコンテナイメージのサイズは 36 MiB から 109 MiB と3倍ほど増えた。無駄に開発を遅らせる環境要因になっているのでこれは別途調査して対応しないといけないことに気付いた。&lt;/p></content></item><item><title>開発の瞬発力が足りない</title><link>/diary/posts/2023/0824/</link><pubDate>Thu, 24 Aug 2023 18:57:19 +0900</pubDate><guid>/diary/posts/2023/0824/</guid><description>最終の新幹線で帰ってきて、2時に寝て2回ぐらい起きて8時前に起きた。寝坊した。7時頃に起きてない時点で疲れているんやろなと思えた。
msgraph-sdk-go を使った開発 昨日の続き 。ライセンスやグループのメンバーを扱うときの特殊な処理を実装してからマージリクエストを送った。本当は火曜日の時点でできたらよかったことが2日遅れになった。モチベーションがあれば、日曜日や月曜日の夜にできたことかもしれない。加齢のせいかもしれないし、私の中でまだ開発になにかが足りない。誰かから責められるわけではないが、自分で自分に嘘をつかないために自分なら間に合わせられたものが2日遅れになっているという事実にだけは気付いている。id 連携のビジネスロジックに相当するところの置き換えに4日かかったというのはノウハウがなかったらそんなもんという気もせんでもない。一通り実装できたのであとは qa テストで複雑なテストケースのバグ出しをすればよいだろう。</description><content>&lt;p>最終の新幹線で帰ってきて、2時に寝て2回ぐらい起きて8時前に起きた。寝坊した。7時頃に起きてない時点で疲れているんやろなと思えた。&lt;/p>
&lt;h2 id="msgraph-sdk-go-を使った開発">msgraph-sdk-go を使った開発&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0823/#msgraph-sdk-go-を使った開発">昨日の続き&lt;/a> 。ライセンスやグループのメンバーを扱うときの特殊な処理を実装してからマージリクエストを送った。本当は火曜日の時点でできたらよかったことが2日遅れになった。モチベーションがあれば、日曜日や月曜日の夜にできたことかもしれない。加齢のせいかもしれないし、私の中でまだ開発になにかが足りない。誰かから責められるわけではないが、自分で自分に嘘をつかないために自分なら間に合わせられたものが2日遅れになっているという事実にだけは気付いている。id 連携のビジネスロジックに相当するところの置き換えに4日かかったというのはノウハウがなかったらそんなもんという気もせんでもない。一通り実装できたのであとは qa テストで複雑なテストケースのバグ出しをすればよいだろう。&lt;/p></content></item><item><title>年度末打ち上げ</title><link>/diary/posts/2023/0823/</link><pubDate>Wed, 23 Aug 2023 19:09:26 +0900</pubDate><guid>/diary/posts/2023/0823/</guid><description>22時に寝て何度か起きて6時に起きた。カプセルホテルに泊まるときにいつも忘れることで、下の方のカプセルにしてもらうのをお願いすべき。おっさんには上のカプセルによじ登るのが辛い。カプセルホテルに泊まるので盗難防止を考慮して着替え以外はもっていなかった。パソコンがないので朝からやることもなくてお風呂入って、休憩スペースでのんびりしていた。
msgraph-sdk-go を使った開発 azure との id 連携のリファクタリング の続き。
microsoft 社のシステムの仕様が直感的でなかったり、sdk の api が使いにくかったり、この sdk を使うことの学習コストがやや高い。一方でドキュメントを読めば仕様はちゃんと書いてあるのでドキュメントを読みながら開発していくのがよさそうに思える。当たり前と言えば当たり前だが、ドキュメントを読まないと絶対に分からない仕様が多いという意味で学習コストが高い。
例えば businessPhones というプロパティはリストで設定するけれど、これは1つしか設定できないという仕様になる。2つ値を設定しようとするとエラーになる。
businessPhones String collection The telephone numbers for the user.
NOTE: Although this is a string collection, only one number can be set for this property.
https://learn.microsoft.com/en-us/graph/api/user-update?view=graph-rest-1.0&amp;amp;tabs=http#request-body
だいぶ sdk に慣れてきて、あともうちょっとのところだったが、今晩は予定があるので切り上げとなった。
年度末打ち上げ お手伝いしているお客さんが8月が年度末になる。年度末の会社の打ち上げをやるのでよかったらどうぞとお声がけをいただいていた。うちのプロジェクトのスケジュールにあわせると定例を行う週の火・水の2日間だけ参加可能として予定を提出していた。他の社員さんの予定と調整して2週間もあるからそんなあわないだろう？と思っていたらあってしまって出張するしかないかと今回の出張が決まった次第だ。
17時半から東銀座へ移動して、ホテルの地下にあるちょっとよい雰囲気のレストランでお食事をいただいた。立派な陶磁器に芸術的な料理が添えられていて、おいしかったし、みて楽しむこともできて、会社で来ないと食べられないような内容で私はよかったと思う。食べものはコースだったが、若い人向けにはもっと量がないとお腹が空くだろうから追加でいくつか料理を頼んだりしていた。行ったことないレストランの量はわからないのでコースの選択は難しいと思う。
約55%の社員 (+お手伝い) が参加していた。欠席者の半分以上はリモートワークだったり業務都合で参加できなかったのを考慮すると、私用で欠席している社員は少数派にみえる。私用で欠席できるというのも多様性の文脈では大事だと思えるし、それでも7割ぐらいは参加する意志があるというのは組織としてのまとわりを表す指標の1つに思える。
私自身、昔はあまり会社の全体飲み会が好きではなく、チームや部署単位なら行くが、全社となると欠席する方が多かった。会社の中のよく知らない人たちと親睦を図ることにあまり価値を見出していなかった。しかし、いまマネジメントの立場で考えると、一定の理解はできるようになった。マネジメントとして社員に平等に報いる方法はかなり限定的であること。個別の社員ごとに好ましい方法で対応することはできないという現実がある。したがって、こういった全社的な催しもしかたないと言える。
そして、こういった場で人と人の結びつきや人間関係を良好に保つように、社員みんなが努力して組織が成り立っているのだとわかるようになってきた。 私は直接部門だから売上を上げてれば文句ないだろうとずっと思ってきたけれど、必ずしもそういった見た目の数字だけが会社を維持させているわけではない。目にみえない価値もたしかに組織にはある。 若い頃の私はその努力に欠けていた、もっというとフリーライドしていたという見方もできることに気付けるようになった。
その価値をいま風に言えばチームビルディングといったラベルがついている。それをどうやってうまく成し遂げるか、こういう場で見聞きすることの大事さもわかるようになってきた。だから、いまの私は自身にとって重要ではないイベントも後学のために役に立つかもしれないと前向きに参加するようになった。結局のところ、イベントを楽しむのもそうじゃないのも自分次第である。どんなことからも学べる。その学びがあるのならきっと楽しいと言えるかもしれない。社員旅行へ同行しての学び も大いにあった。
18時から始めて21時前でお開きになった。それから東銀座を出て9時24分の新大阪行きの最終新幹線に乗れた。新大阪に23時48分頃に付いて23時55分発の新快速に乗った。新幹線が2分遅れたことで新快速も2分出発を遅らせて57分発になった。その後、他にも神戸線で事故があった影響か、信号待ちがどうこうで芦屋あたりからずっと低速運行していた。最終的に三ノ宮には到着予定から17分遅れになった。疲れて早く帰りたいなと思っているときほど、こんなもんという印象。考え方を変えれば、いろいろあったのに、ちゃんと三ノ宮まで帰れてよかったと思えばそんなに気も悪くない。</description><content>&lt;p>22時に寝て何度か起きて6時に起きた。カプセルホテルに泊まるときにいつも忘れることで、下の方のカプセルにしてもらうのをお願いすべき。おっさんには上のカプセルによじ登るのが辛い。カプセルホテルに泊まるので盗難防止を考慮して着替え以外はもっていなかった。パソコンがないので朝からやることもなくてお風呂入って、休憩スペースでのんびりしていた。&lt;/p>
&lt;h2 id="msgraph-sdk-go-を使った開発">msgraph-sdk-go を使った開発&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0821/#最後のリファクタリング課題">azure との id 連携のリファクタリング&lt;/a> の続き。&lt;/p>
&lt;p>microsoft 社のシステムの仕様が直感的でなかったり、sdk の api が使いにくかったり、この sdk を使うことの学習コストがやや高い。一方でドキュメントを読めば仕様はちゃんと書いてあるのでドキュメントを読みながら開発していくのがよさそうに思える。当たり前と言えば当たり前だが、ドキュメントを読まないと絶対に分からない仕様が多いという意味で学習コストが高い。&lt;/p>
&lt;p>例えば businessPhones というプロパティはリストで設定するけれど、これは1つしか設定できないという仕様になる。2つ値を設定しようとするとエラーになる。&lt;/p>
&lt;blockquote>
&lt;p>businessPhones String collection The telephone numbers for the user.&lt;br />
NOTE: Although this is a string collection, only one number can be set for this property.&lt;br />
&lt;a href="https://learn.microsoft.com/en-us/graph/api/user-update?view=graph-rest-1.0&amp;amp;tabs=http#request-body">https://learn.microsoft.com/en-us/graph/api/user-update?view=graph-rest-1.0&amp;amp;tabs=http#request-body&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>だいぶ sdk に慣れてきて、あともうちょっとのところだったが、今晩は予定があるので切り上げとなった。&lt;/p>
&lt;h2 id="年度末打ち上げ">年度末打ち上げ&lt;/h2>
&lt;p>お手伝いしているお客さんが8月が年度末になる。年度末の会社の打ち上げをやるのでよかったらどうぞとお声がけをいただいていた。うちのプロジェクトのスケジュールにあわせると定例を行う週の火・水の2日間だけ参加可能として予定を提出していた。他の社員さんの予定と調整して2週間もあるからそんなあわないだろう？と思っていたらあってしまって出張するしかないかと今回の出張が決まった次第だ。&lt;/p>
&lt;p>17時半から東銀座へ移動して、ホテルの地下にあるちょっとよい雰囲気のレストランでお食事をいただいた。立派な陶磁器に芸術的な料理が添えられていて、おいしかったし、みて楽しむこともできて、会社で来ないと食べられないような内容で私はよかったと思う。食べものはコースだったが、若い人向けにはもっと量がないとお腹が空くだろうから追加でいくつか料理を頼んだりしていた。行ったことないレストランの量はわからないのでコースの選択は難しいと思う。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2023/0823_food1.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2023/0823_food2.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2023/0823_food3.jpg"/>
&lt;/figure>
&lt;/p>
&lt;p>約55%の社員 (+お手伝い) が参加していた。欠席者の半分以上はリモートワークだったり業務都合で参加できなかったのを考慮すると、私用で欠席している社員は少数派にみえる。私用で欠席できるというのも多様性の文脈では大事だと思えるし、それでも7割ぐらいは参加する意志があるというのは組織としてのまとわりを表す指標の1つに思える。&lt;/p>
&lt;p>私自身、昔はあまり会社の全体飲み会が好きではなく、チームや部署単位なら行くが、全社となると欠席する方が多かった。会社の中のよく知らない人たちと親睦を図ることにあまり価値を見出していなかった。しかし、いまマネジメントの立場で考えると、一定の理解はできるようになった。マネジメントとして社員に平等に報いる方法はかなり限定的であること。個別の社員ごとに好ましい方法で対応することはできないという現実がある。したがって、こういった全社的な催しもしかたないと言える。&lt;/p>
&lt;p>そして、こういった場で人と人の結びつきや人間関係を良好に保つように、社員みんなが努力して組織が成り立っているのだとわかるようになってきた。
私は直接部門だから売上を上げてれば文句ないだろうとずっと思ってきたけれど、必ずしもそういった見た目の数字だけが会社を維持させているわけではない。目にみえない価値もたしかに組織にはある。
若い頃の私はその努力に欠けていた、もっというとフリーライドしていたという見方もできることに気付けるようになった。&lt;/p>
&lt;p>その価値をいま風に言えばチームビルディングといったラベルがついている。それをどうやってうまく成し遂げるか、こういう場で見聞きすることの大事さもわかるようになってきた。だから、いまの私は自身にとって重要ではないイベントも後学のために役に立つかもしれないと前向きに参加するようになった。結局のところ、イベントを楽しむのもそうじゃないのも自分次第である。どんなことからも学べる。その学びがあるのならきっと楽しいと言えるかもしれない。&lt;a href="/diary/diary/posts/2023/0707/">社員旅行へ同行しての学び&lt;/a> も大いにあった。&lt;/p>
&lt;p>18時から始めて21時前でお開きになった。それから東銀座を出て9時24分の新大阪行きの最終新幹線に乗れた。新大阪に23時48分頃に付いて23時55分発の新快速に乗った。新幹線が2分遅れたことで新快速も2分出発を遅らせて57分発になった。その後、他にも神戸線で事故があった影響か、信号待ちがどうこうで芦屋あたりからずっと低速運行していた。最終的に三ノ宮には到着予定から17分遅れになった。疲れて早く帰りたいなと思っているときほど、こんなもんという印象。考え方を変えれば、いろいろあったのに、ちゃんと三ノ宮まで帰れてよかったと思えばそんなに気も悪くない。&lt;/p></content></item><item><title>イレギュラーな出張</title><link>/diary/posts/2023/0822/</link><pubDate>Tue, 22 Aug 2023 19:08:48 +0900</pubDate><guid>/diary/posts/2023/0822/</guid><description>本当は昨日の夜にもう少し開発しようと思っていたが、体力的に衰えているせいか、晩ご飯食べに帰ってそのまま家でだらだらしていた。翌1-3時前までオフィス戻って作業して、それから出張の準備をして、5時過ぎからいつも通り始発の新幹線に向かった。
定例会議 私のリファクタリング issue が1つだけ未達で残ってしまった。他の新機能開発はほぼ予定通り完了できた。メンバーががんばってお仕事してくれたことに感謝。無理なスケジュールを強いていないというのもあるが、ちゃんと見積もりと工数を管理できていることそのものはよいことだと思う。概ね予定通りであることを確認して、あと2つのマイルストーン (1ヶ月) を使って qa テストにあてる。これも web 開発からしたら驚くほどの工数を使っているようにみえると思う。しかし、品質の悪い web 開発を私はたくさんみてきたので結果的に qa をちゃんとやる方が工数削減になると私は考えている。
いま作っているプロダクトのライセンスが実は Apache License v2 になる。oss な会社だから基本的にプロダクトは oss なライセンスで提供しているらしい。とはいえ、リポジトリを一般公開しているというわけでもないため、広く oss として使ってもらいたいというほどのモチベーションでもない。お客さんが要求すればソースコードも提供するといったスタンスらしい。実際にお客さんがソースコードを要求してくることは皆無らしいが。
もうやんカレー 過去に虎ノ門で働いた頃、もうやんカレー好きな同僚がいて懐かしくて 新橋店 へ行ってみた。私がこのお店へ行っていた頃は10年以上のことなのに、昔とお店の雰囲気やメニューはあまり変わっていない気がする。スパイスが効いておいしかった。薬味？トッピング？にサービスで提供されるスモーキーなたくわんや玉ねぎのピクルスもおいしかった。
かぷせる旅籠 赤坂 SPABLIC INN 五反田から赤坂へ行くルートの1つとして、五反田 - 新橋 - 赤坂見附で行ける。乗り換えのアクセスがよかったり、新橋で晩ご飯食べるのもちょうどいい。前から知っていて1度泊まってみたいと考えていた かぷせる旅籠 赤坂 SPABLIC INN に泊まってみた。SPA:BLIC がコーポレートサイトらしい。結論から行って、私の感覚ではすごくよかった。また一泊出張のようなスポットで泊まるときがあれば予約したい。カプセルホテルだから料金は4,471円だった。いまの相場からいうとビジネスホテルでも1万2千円ぐらいするので半額以下と言える。カプセルホテルだから盗難防止を考慮して着替え以外はもっていかなかったが、ちゃんと鍵付きのロッカーもあったのでパソコン程度の荷物なら保管できる。
和風カプセルホテルで施設が新しく、ハイテクであちこちの入館やロッカー、チェックイン／アウトはすべて ic チップで行う。お風呂とサウナはこれといって特徴もなかった気はするが、大きなお風呂に入れるだけで私は満足。コワーキングスペースも併設されていた。休憩プランだと150円/時で使えるらしい。宿泊でももしかしたら使えたのかもしれない。コワーキングスペースが使えるならリモートワークをここでしてもよいのかもしれない。よいところをみつけた。</description><content>&lt;p>本当は昨日の夜にもう少し開発しようと思っていたが、体力的に衰えているせいか、晩ご飯食べに帰ってそのまま家でだらだらしていた。翌1-3時前までオフィス戻って作業して、それから出張の準備をして、5時過ぎからいつも通り始発の新幹線に向かった。&lt;/p>
&lt;h2 id="定例会議">定例会議&lt;/h2>
&lt;p>私のリファクタリング issue が1つだけ未達で残ってしまった。他の新機能開発はほぼ予定通り完了できた。メンバーががんばってお仕事してくれたことに感謝。無理なスケジュールを強いていないというのもあるが、ちゃんと見積もりと工数を管理できていることそのものはよいことだと思う。概ね予定通りであることを確認して、あと2つのマイルストーン (1ヶ月) を使って qa テストにあてる。これも web 開発からしたら驚くほどの工数を使っているようにみえると思う。しかし、品質の悪い web 開発を私はたくさんみてきたので結果的に qa をちゃんとやる方が工数削減になると私は考えている。&lt;/p>
&lt;p>いま作っているプロダクトのライセンスが実は Apache License v2 になる。oss な会社だから基本的にプロダクトは oss なライセンスで提供しているらしい。とはいえ、リポジトリを一般公開しているというわけでもないため、広く oss として使ってもらいたいというほどのモチベーションでもない。お客さんが要求すればソースコードも提供するといったスタンスらしい。実際にお客さんがソースコードを要求してくることは皆無らしいが。&lt;/p>
&lt;h2 id="もうやんカレー">もうやんカレー&lt;/h2>
&lt;p>過去に虎ノ門で働いた頃、もうやんカレー好きな同僚がいて懐かしくて &lt;a href="https://www.moyan.jp/shimbashi/">新橋店&lt;/a> へ行ってみた。私がこのお店へ行っていた頃は10年以上のことなのに、昔とお店の雰囲気やメニューはあまり変わっていない気がする。スパイスが効いておいしかった。薬味？トッピング？にサービスで提供されるスモーキーなたくわんや玉ねぎのピクルスもおいしかった。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0822_curry.jpg"/>
&lt;/figure>
&lt;h2 id="かぷせる旅籠-赤坂-spablic-inn">かぷせる旅籠 赤坂 SPABLIC INN&lt;/h2>
&lt;p>五反田から赤坂へ行くルートの1つとして、五反田 - 新橋 - 赤坂見附で行ける。乗り換えのアクセスがよかったり、新橋で晩ご飯食べるのもちょうどいい。前から知っていて1度泊まってみたいと考えていた &lt;a href="https://www.booking.com/hotel/jp/kapuserulu-long-chi-ban-spablic-inn.ja.html">かぷせる旅籠 赤坂 SPABLIC INN&lt;/a> に泊まってみた。&lt;a href="https://spablic.com/">SPA:BLIC&lt;/a> がコーポレートサイトらしい。結論から行って、私の感覚ではすごくよかった。また一泊出張のようなスポットで泊まるときがあれば予約したい。カプセルホテルだから料金は4,471円だった。いまの相場からいうとビジネスホテルでも1万2千円ぐらいするので半額以下と言える。カプセルホテルだから盗難防止を考慮して着替え以外はもっていかなかったが、ちゃんと鍵付きのロッカーもあったのでパソコン程度の荷物なら保管できる。&lt;/p>
&lt;p>和風カプセルホテルで施設が新しく、ハイテクであちこちの入館やロッカー、チェックイン／アウトはすべて ic チップで行う。お風呂とサウナはこれといって特徴もなかった気はするが、大きなお風呂に入れるだけで私は満足。コワーキングスペースも併設されていた。休憩プランだと150円/時で使えるらしい。宿泊でももしかしたら使えたのかもしれない。コワーキングスペースが使えるならリモートワークをここでしてもよいのかもしれない。よいところをみつけた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0822_capsule1.jpg"/>
&lt;/figure></content></item><item><title>2023年最初の記事は事例紹介</title><link>/diary/posts/2023/0821/</link><pubDate>Mon, 21 Aug 2023 20:47:10 +0900</pubDate><guid>/diary/posts/2023/0821/</guid><description>0時に寝て7時に起きて8時前までだらだらしていた。昨日は開発してないけれど、なんか疲れて起き上がれない。
先週末に恒大集団が米国で連邦破産法適用を申請というニュースが出ていたので香港市場でひと波乱あるのでは？という憶測も出ていたけど、とくに変わりなく1日が終わった。別の不動産大手もデフォルトの危機らしくて、その2回目の期限が1ヶ月ほどあるようなのでもう1ヶ月してから波乱があるのかもしれない。
最後のリファクタリング課題 このマイルストーンで開発を終えて次マイルストーンからテストへ移行する。機能拡張はほとんど終わっていて、作り直した方がよいリファクタリングのチケットをいくつかやっている。そのうちの1つに azure 連携するときに rest api を直接使っていて sdk を使っていない。microsoft 社も go の sdk を提供している。将来的には型によるバリデーションの仕組みを導入したいと考えている。あらかじめ sdk を使ったコードに置き換えておきたい。sdk が使いやすい api になっていれば、すぐに進捗するところが、これがなかなか、この sdk の api 設計もコードもあまりきれいなものではない。一方で大半のコードはスキーマからコードを自動生成しているようもみえるのでモジュールの構造を理解してしまえば、api の設計も類推は効くようになると思う。
https://github.com/microsoftgraph/msgraph-sdk-go https://learn.microsoft.com/en-us/graph/api/resources/user?view=graph-rest-1.0 https://learn.microsoft.com/en-us/graph/api/resources/group?view=graph-rest-1.0 ユーザー／グループの取得周り、ユーザー作成の web api 呼び出しを置き換えて疲れて晩ご飯を食べに帰ってしまった。家に帰ったらもうダレてしまってそのままだらだら休んでいた。残りの開発を明日に先送りにする。疲労もあるのか、モチベーションコントロールがうまくいかなくて、昔だったらあと2-3時間作業して帰るところのひと踏ん張りがきかなくなりつつある。気を引き締めないとあまりよくない。
事例紹介 昨日更新したたたき台 を最終版にするつもりが、午前中、先方に送る前に読み直したら細かいところに気付いてちょっとだけ推敲した。午前中にレビュー依頼を出して、夕方には返信がきてそのまま OK が出て、事例紹介を公開した。会社のサイトをすっかり触らなくなってしまっていて、8月になって2023年初めての更新になる。何度も書いているけど、この事例紹介は私の自己満足で、これを書くと世の中の役に立っている気がして嬉しくなる。さらに今回はプロジェクトマネージャーとして実績を出すことができたので次のキャリアへの大きな一歩となる。今後も課題管理の探求をがんばっていく。
事例紹介にOSSTech株式会社様を追加しました</description><content>&lt;p>0時に寝て7時に起きて8時前までだらだらしていた。昨日は開発してないけれど、なんか疲れて起き上がれない。&lt;/p>
&lt;p>先週末に恒大集団が米国で連邦破産法適用を申請というニュースが出ていたので香港市場でひと波乱あるのでは？という憶測も出ていたけど、とくに変わりなく1日が終わった。別の不動産大手もデフォルトの危機らしくて、その2回目の期限が1ヶ月ほどあるようなのでもう1ヶ月してから波乱があるのかもしれない。&lt;/p>
&lt;h2 id="最後のリファクタリング課題">最後のリファクタリング課題&lt;/h2>
&lt;p>このマイルストーンで開発を終えて次マイルストーンからテストへ移行する。機能拡張はほとんど終わっていて、作り直した方がよいリファクタリングのチケットをいくつかやっている。そのうちの1つに azure 連携するときに rest api を直接使っていて sdk を使っていない。microsoft 社も go の sdk を提供している。将来的には型によるバリデーションの仕組みを導入したいと考えている。あらかじめ sdk を使ったコードに置き換えておきたい。sdk が使いやすい api になっていれば、すぐに進捗するところが、これがなかなか、この sdk の api 設計もコードもあまりきれいなものではない。一方で大半のコードはスキーマからコードを自動生成しているようもみえるのでモジュールの構造を理解してしまえば、api の設計も類推は効くようになると思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/microsoftgraph/msgraph-sdk-go">https://github.com/microsoftgraph/msgraph-sdk-go&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/graph/api/resources/user?view=graph-rest-1.0">https://learn.microsoft.com/en-us/graph/api/resources/user?view=graph-rest-1.0&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/graph/api/resources/group?view=graph-rest-1.0">https://learn.microsoft.com/en-us/graph/api/resources/group?view=graph-rest-1.0&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ユーザー／グループの取得周り、ユーザー作成の web api 呼び出しを置き換えて疲れて晩ご飯を食べに帰ってしまった。家に帰ったらもうダレてしまってそのままだらだら休んでいた。残りの開発を明日に先送りにする。疲労もあるのか、モチベーションコントロールがうまくいかなくて、昔だったらあと2-3時間作業して帰るところのひと踏ん張りがきかなくなりつつある。気を引き締めないとあまりよくない。&lt;/p>
&lt;h2 id="事例紹介">事例紹介&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0820/#事例紹介のたたき台更新">昨日更新したたたき台&lt;/a> を最終版にするつもりが、午前中、先方に送る前に読み直したら細かいところに気付いてちょっとだけ推敲した。午前中にレビュー依頼を出して、夕方には返信がきてそのまま OK が出て、事例紹介を公開した。会社のサイトをすっかり触らなくなってしまっていて、8月になって2023年初めての更新になる。何度も書いているけど、この事例紹介は私の自己満足で、これを書くと世の中の役に立っている気がして嬉しくなる。さらに今回はプロジェクトマネージャーとして実績を出すことができたので次のキャリアへの大きな一歩となる。今後も課題管理の探求をがんばっていく。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kazamori.jp/news/2023/08/21/subcontract-osstech/">事例紹介にOSSTech株式会社様を追加しました&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>疲労で開発はお休み</title><link>/diary/posts/2023/0820/</link><pubDate>Sun, 20 Aug 2023 10:56:24 +0900</pubDate><guid>/diary/posts/2023/0820/</guid><description>2時に寝て何度か起きて7時に起きた。9時ぐらいまでだらだらしてた。
事例紹介のたたき台更新 8月の上旬には たたき台を作成 していたものの、レビュー待ちしてたり、他の開発業務に意識を取られてそのまま放置していた。go-ldap のテックブログ を書いた後にその成果も事例紹介に含めて公開できる。結果的にはこの順番でよかったとも思える。また2週間も文章を寝かせておくと、記憶がリセットされて自分の文章の拙さにも気付けて全体を推敲できた。自分の成果物を自分で信頼しないというのが大事。明日に草稿を先方に提出して来週中には事例紹介を公開できるようなスケジュールで進める。
椅子の受け取り また ジモティー 検索でみつけたバランスチェアを購入した。3,500円。なかなか無料や安価でよい椅子はみつからないのでこのぐらいの値段は出すのが相場のように思える。同じようなバランスチェアの新品の価格を調べると2万円程度だっだ。中古でこのぐらいの価格なら妥当にみえる。以前に購入したバランスチェア をオフィスで使っていて、それも快適なので実家の離れ用にあってもよいと思えた。
引き取りは車で20分程度のところにある駐車場に行ってきた。愛想のよい方ですんなりと取り引きを終えることができた。感謝。</description><content>&lt;p>2時に寝て何度か起きて7時に起きた。9時ぐらいまでだらだらしてた。&lt;/p>
&lt;h2 id="事例紹介のたたき台更新">事例紹介のたたき台更新&lt;/h2>
&lt;p>8月の上旬には &lt;a href="/diary/diary/posts/2023/0806/#事例紹介のたたき台">たたき台を作成&lt;/a> していたものの、レビュー待ちしてたり、他の開発業務に意識を取られてそのまま放置していた。&lt;a href="/diary/diary/posts/2023/0818/#go-ldap-テックブログとその勉強会">go-ldap のテックブログ&lt;/a> を書いた後にその成果も事例紹介に含めて公開できる。結果的にはこの順番でよかったとも思える。また2週間も文章を寝かせておくと、記憶がリセットされて自分の文章の拙さにも気付けて全体を推敲できた。自分の成果物を自分で信頼しないというのが大事。明日に草稿を先方に提出して来週中には事例紹介を公開できるようなスケジュールで進める。&lt;/p>
&lt;h2 id="椅子の受け取り">椅子の受け取り&lt;/h2>
&lt;p>また &lt;a href="https://jmty.jp/">ジモティー&lt;/a> 検索でみつけたバランスチェアを購入した。3,500円。なかなか無料や安価でよい椅子はみつからないのでこのぐらいの値段は出すのが相場のように思える。同じようなバランスチェアの新品の価格を調べると2万円程度だっだ。中古でこのぐらいの価格なら妥当にみえる。&lt;a href="/diary/diary/posts/2023/0505/#ジモティーで椅子の受け取り">以前に購入したバランスチェア&lt;/a> をオフィスで使っていて、それも快適なので実家の離れ用にあってもよいと思えた。&lt;/p>
&lt;p>引き取りは車で20分程度のところにある駐車場に行ってきた。愛想のよい方ですんなりと取り引きを終えることができた。感謝。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0820_chair1.jpg"/>
&lt;/figure></content></item><item><title>開発もしながら雑多な土曜日</title><link>/diary/posts/2023/0819/</link><pubDate>Sat, 19 Aug 2023 17:30:57 +0900</pubDate><guid>/diary/posts/2023/0819/</guid><description>1時に寝て何度か起きて7時に起きた。晩ご飯食べてオフィスに戻ったものの、知人と0時過ぎまでチャットしていて開発できなかった。たまにはそういうこともあるか。
ストレッチ 左右両方のふくらはぎの筋の張りがやばくてめっちゃ効いた。トレーナーさん曰く、この筋が効くのはふくらはぎを酷使しているか、まったく使っていないかのどちらかだと言う。私の場合は後者だろう。椅子に座っている時間が長いとふくらはぎの筋が張る。今日の開脚幅は開始前156cmで、ストレッチ後160cmだった。数値の良さは維持できている。腰もひどくはないけど、やや張りを感じるようにはなってきた。トレーナーさんも全体的に硬い傾向があるとコメントしていたので疲労が溜まっているのはそうだと思う。
散髪 ストレッチを終えてから散髪へ行ってきた。短くきると頭が軽いし、お風呂で頭を洗うのも楽になっていい。もう今後はずっと短髪でいこうと思う。散髪していたらなぜかすごく眠気があって、終えてからお昼ご飯を食べて一旦帰って2時間ほど寝てた。なんか睡魔にとりつかれた。
cli コマンドの開発 金曜日の夜にやるつもりのお仕事ができなかったので夕方から着手した。夕方の方がオフィスも涼しくて捗る。3時間ほどかけて cli コマンドを一通りつくって README に使い方を書いて issue をクローズした。難しい開発ではないけれど、やり切って満足。
立ち呑み屋 たまたま食べログをみていて見つけた立ち呑み屋さんがよさそうだった。コミュニティのメンバーを誘って来週末に行くことにしているが、誘った手前、下見をしておこうと思って21時過ぎから1人で行ってみた。カウンターしかない小さいバーで詰めても10人入れないようなスペース。5人先客がいてマスターが1人でやりくりしている。その後も3グループぐらい入れ替わりにお客さんがやってきて常連さんの多いお店みたい。私はぼっちで行ったんだけど、徐々に話しかけてもらって、お酒を飲んでいるから2時間したら周りの人たちと話していた。そういう雰囲気のお店。立ち呑みなのに24時ぐらいまでいた。楽しかった。ふらっと1人で行って適当に雑談できるお店をみつけた。また行こうと思う。</description><content>&lt;p>1時に寝て何度か起きて7時に起きた。晩ご飯食べてオフィスに戻ったものの、知人と0時過ぎまでチャットしていて開発できなかった。たまにはそういうこともあるか。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>左右両方のふくらはぎの筋の張りがやばくてめっちゃ効いた。トレーナーさん曰く、この筋が効くのはふくらはぎを酷使しているか、まったく使っていないかのどちらかだと言う。私の場合は後者だろう。椅子に座っている時間が長いとふくらはぎの筋が張る。今日の開脚幅は開始前156cmで、ストレッチ後160cmだった。数値の良さは維持できている。腰もひどくはないけど、やや張りを感じるようにはなってきた。トレーナーさんも全体的に硬い傾向があるとコメントしていたので疲労が溜まっているのはそうだと思う。&lt;/p>
&lt;h2 id="散髪">散髪&lt;/h2>
&lt;p>ストレッチを終えてから散髪へ行ってきた。短くきると頭が軽いし、お風呂で頭を洗うのも楽になっていい。もう今後はずっと短髪でいこうと思う。散髪していたらなぜかすごく眠気があって、終えてからお昼ご飯を食べて一旦帰って2時間ほど寝てた。なんか睡魔にとりつかれた。&lt;/p>
&lt;h2 id="cli-コマンドの開発">cli コマンドの開発&lt;/h2>
&lt;p>金曜日の夜にやるつもりのお仕事ができなかったので夕方から着手した。夕方の方がオフィスも涼しくて捗る。3時間ほどかけて cli コマンドを一通りつくって README に使い方を書いて issue をクローズした。難しい開発ではないけれど、やり切って満足。&lt;/p>
&lt;h2 id="立ち呑み屋">立ち呑み屋&lt;/h2>
&lt;p>たまたま食べログをみていて見つけた立ち呑み屋さんがよさそうだった。コミュニティのメンバーを誘って来週末に行くことにしているが、誘った手前、下見をしておこうと思って21時過ぎから1人で行ってみた。カウンターしかない小さいバーで詰めても10人入れないようなスペース。5人先客がいてマスターが1人でやりくりしている。その後も3グループぐらい入れ替わりにお客さんがやってきて常連さんの多いお店みたい。私はぼっちで行ったんだけど、徐々に話しかけてもらって、お酒を飲んでいるから2時間したら周りの人たちと話していた。そういう雰囲気のお店。立ち呑みなのに24時ぐらいまでいた。楽しかった。ふらっと1人で行って適当に雑談できるお店をみつけた。また行こうと思う。&lt;/p></content></item><item><title>3つめのテックブログ</title><link>/diary/posts/2023/0818/</link><pubDate>Fri, 18 Aug 2023 09:57:18 +0900</pubDate><guid>/diary/posts/2023/0818/</guid><description>2時に寝て何度か起きて7時に起きた。朝から弁護士さんにメールの返信をしたりしていた。午前／午後と普通に運用ツールの開発をして夕方に勉強会をして、夜に軽く呑みに行ってきた。
go-ldap テックブログとその勉強会 水曜日から テックブログの執筆 に着手して、木曜日のお昼には下書きを書き上げて社内レビューをお願いしていた。ldap プロトコルの振る舞いについて調べたことを書いた。あまり自信はなかったけど、社内のシニアエンジニアにレビューしてもらって、よく書けているとコメントをもらってシンプルに嬉しかった。いま開発の佳境のしんどい時期に、非開発以外のことに時間をとって記事を書いて報われた気持ちになった。
今日のチーム勉強会は私が担当だったのでこのテックブログの記事を解説した。実際に go-ldap のソースコードを一緒に読みながら進める。書いたり話したりすると、ちゃんと自分が理解できているかどうかを確認ができる。そして、コードを読みながら説明しているときに、記事に書いてある内容が一部間違っていることにも気付けた。こういう体験の繰り返しで私は自分を信頼しないことを学ぶ。私の浅い理解や未熟さを実感する機会があって、また次にがんばろうというモチベーションにもつながる。
自身の理解度の確認やチームへの共有、モチベーションコントロールなど、複数の意味で自分が書いたテックブログの記事を解説する勉強会はいいように思えた。
go-ldap へのコントリビューション 思い入れのあった内容を書いて公開してしまうと、燃え尽きのような、少しやり切った感を感じていた。しかし、開発はまだ佳境の途中なのでここで立ち止まることはできない。それで呑みに行ってみた。とくに目的なくみつけたお店に初めて入ってみた。普通の居酒屋よりちょっとだけ値が張る感じの、落ち着いたお店で、私よりも少し年配 (にみえる) マスターが1人でやりくりしていた。軽く話しながら晩ご飯を食べれてやや救われた。また行ってみようと思う。</description><content>&lt;p>2時に寝て何度か起きて7時に起きた。朝から弁護士さんにメールの返信をしたりしていた。午前／午後と普通に運用ツールの開発をして夕方に勉強会をして、夜に軽く呑みに行ってきた。&lt;/p>
&lt;h2 id="go-ldap-テックブログとその勉強会">go-ldap テックブログとその勉強会&lt;/h2>
&lt;p>水曜日から &lt;a href="/diary/diary/posts/2023/0816/#テックブログの執筆開始">テックブログの執筆&lt;/a> に着手して、木曜日のお昼には下書きを書き上げて社内レビューをお願いしていた。ldap プロトコルの振る舞いについて調べたことを書いた。あまり自信はなかったけど、社内のシニアエンジニアにレビューしてもらって、よく書けているとコメントをもらってシンプルに嬉しかった。いま開発の佳境のしんどい時期に、非開発以外のことに時間をとって記事を書いて報われた気持ちになった。&lt;/p>
&lt;p>今日のチーム勉強会は私が担当だったのでこのテックブログの記事を解説した。実際に go-ldap のソースコードを一緒に読みながら進める。書いたり話したりすると、ちゃんと自分が理解できているかどうかを確認ができる。そして、コードを読みながら説明しているときに、記事に書いてある内容が一部間違っていることにも気付けた。こういう体験の繰り返しで私は自分を信頼しないことを学ぶ。私の浅い理解や未熟さを実感する機会があって、また次にがんばろうというモチベーションにもつながる。&lt;/p>
&lt;p>自身の理解度の確認やチームへの共有、モチベーションコントロールなど、複数の意味で自分が書いたテックブログの記事を解説する勉強会はいいように思えた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.osstech.co.jp/posts/2023/08/go-ldap-contribution/">go-ldap へのコントリビューション&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>思い入れのあった内容を書いて公開してしまうと、燃え尽きのような、少しやり切った感を感じていた。しかし、開発はまだ佳境の途中なのでここで立ち止まることはできない。それで呑みに行ってみた。とくに目的なくみつけたお店に初めて入ってみた。普通の居酒屋よりちょっとだけ値が張る感じの、落ち着いたお店で、私よりも少し年配 (にみえる) マスターが1人でやりくりしていた。軽く話しながら晩ご飯を食べれてやや救われた。また行ってみようと思う。&lt;/p></content></item><item><title>投資詐欺にあっている懸念</title><link>/diary/posts/2023/0817/</link><pubDate>Thu, 17 Aug 2023 08:30:56 +0900</pubDate><guid>/diary/posts/2023/0817/</guid><description>0時に寝て何度か起きて7時に起きた。昨日は1週間先に変更されてた定例の予定を間違えていて段取りをミスった。
何度も投資詐欺に騙される人 母からある会社の投資について事業説明をみてほしいと zoom のリンクが送られてきた。先日からお金を貸してほしいとか言い出しておかしいとは思っていた。その元凶はこれかと思って、会社のサイトをみるとクレジットカード + 仮想通貨のビジネスで、一般消費者から投資のお金を集めているらしい。「あっ、はい」って感じの怪しい投資ビジネスで、インターネットで会社名を軽く検索した感じではまだ詐欺とわかっているわけではないらしい。一方で怪しい口コミも散見される。
論理的に考えれば、一般消費者からお金を募るようなビジネスがまともな事業でない可能性が高い。現時点では事業者が投資詐欺であるかどうかの断定はできないが、こんな怪しい会社に投資する、その信頼の源泉がどこから出てくるのかにも理解に苦しむ。うちの親は投資詐欺に何度も騙されている。過去20-30年でおそらく5-6回ぐらい。それでも学習しない。どういう経緯で騙されているのかわからないが、信じてしまうようだ。
母に電話して、こんなよくわからない事業のスタートアップに投資をするのはリスクが高いこと、この手のビジネスの投資詐欺は多いことを伝えた。成年後見人の弁護士さんにも共有して、もし可能なら弁護士さんの視点からも母に投資詐欺のリスクが高いことを説明してほしいとお願いした。こんなやり取りをすることが本当にしんどくて疲れる。</description><content>&lt;p>0時に寝て何度か起きて7時に起きた。昨日は1週間先に変更されてた定例の予定を間違えていて段取りをミスった。&lt;/p>
&lt;h2 id="何度も投資詐欺に騙される人">何度も投資詐欺に騙される人&lt;/h2>
&lt;p>母からある会社の投資について事業説明をみてほしいと zoom のリンクが送られてきた。先日からお金を貸してほしいとか言い出しておかしいとは思っていた。その元凶はこれかと思って、会社のサイトをみるとクレジットカード + 仮想通貨のビジネスで、一般消費者から投資のお金を集めているらしい。「あっ、はい」って感じの怪しい投資ビジネスで、インターネットで会社名を軽く検索した感じではまだ詐欺とわかっているわけではないらしい。一方で怪しい口コミも散見される。&lt;/p>
&lt;p>論理的に考えれば、一般消費者からお金を募るようなビジネスがまともな事業でない可能性が高い。現時点では事業者が投資詐欺であるかどうかの断定はできないが、こんな怪しい会社に投資する、その信頼の源泉がどこから出てくるのかにも理解に苦しむ。うちの親は投資詐欺に何度も騙されている。過去20-30年でおそらく5-6回ぐらい。それでも学習しない。どういう経緯で騙されているのかわからないが、信じてしまうようだ。&lt;/p>
&lt;p>母に電話して、こんなよくわからない事業のスタートアップに投資をするのはリスクが高いこと、この手のビジネスの投資詐欺は多いことを伝えた。成年後見人の弁護士さんにも共有して、もし可能なら弁護士さんの視点からも母に投資詐欺のリスクが高いことを説明してほしいとお願いした。こんなやり取りをすることが本当にしんどくて疲れる。&lt;/p></content></item><item><title>お盆の最終日</title><link>/diary/posts/2023/0816/</link><pubDate>Wed, 16 Aug 2023 13:44:29 +0900</pubDate><guid>/diary/posts/2023/0816/</guid><description>1時に寝て何度か起きて8時半に起きた。数ヶ月に1回ぐらいの頻度でしかないことだけど寝坊した。起きたら8時半であれ？と思った。起きてから家でそのぐらいの時間までだらだらするのはちょくちょくあることだけど、気付かず寝てたのは久しぶりだった。
台風が過ぎた後の焼き鳥屋さん 今朝に寝坊した理由はこれだと思うけれど、昨日の22時から晩ご飯を求めて仲のよい焼き鳥屋さんへ行ってきた。台風で9割以上のお店が閉めている中、唯一と言っていいぐらいの珍しさで開いてた。そのお店 (グループ) のオーナーは雨が降ろうが槍が降ろうが営業日は開けるという方針らしい。マスターも夕方から台風は過ぎて雨も弱まっていたので普通に営業していたらしい。しかし、お客さんは数グループと少なかったと仰っていた。私が22時に行って誰もいなくて24時までいたけれど、誰も来なかった。通常なら22時だと他に2-3グループはいて、その後も最低でも1グループは飲みにやってくるぐらいの人気のある焼き鳥屋さんだ。そもそも駅から人が出てこないし、道にも人が歩いていない。物流も止まっていたのでいくつか仕入れが出来なくて提供できないメニューもあった。
いつもなら2杯飲んで帰るところを、こんな日だから売上に貢献しようと思って3杯飲んで寝坊した気がする。
mongodb 7.0.0 リリース ちょうど qa テスト前で mongodb のメジャーバージョンがリリースされそうなので毎週のようにチェックしていた。rc10 までいって ga されたみたい。
MongoDB 7.0.0 is released まだ docker hub には正式なリリースバージョンのコンテナイメージは公開されていない。しかし、rc10 が ga になったはずなのでひとまずはそれを使って開発環境とテスト環境を 7.0.0 に移行した。うちの用途だと ttl インデックスを作り直す以外には移行作業は必要なかった。自動テストはそのまま成功したし、テスト環境のデータもそのまま移行してパッとみた感じでは正常に動いている。来週から qa テストも始まるのでぎりぎり間に合ったというところ。MongoDB Software Lifecycle Schedules によると、だいたい mongodb は3年サポートされる。メジャーバージョンが年に1回リリースされているようにみえるので、いまメジャーバージョンを上げておくと1年余裕をもって運用できる。
テックブログの執筆開始 お昼からテックブログの執筆に着手した。あまり大きな意味はないのだけど、お手伝い先のテックブログの記事を早く3つ書きたかった。別に三部作というわけでもない。けれど、テックブログ書いてますよと他者へ伝えるときに最低3つぐらい記事を書いていないと、全然書いてないやんと私なら思ってしまう。3つぐらいあれば、この人はこういう技術に関心があるんだ、こんな業務をやっているんだ、内容もしっかり書けているねとか、そういう判断を下すことができる最低限のコンテンツ量と言えるのではないだろうか。私にとってはそれが3つの記事と言える。ちょっと前に公開した podcast でテックブログの記事を読んでくださいと話したのでリスナーが聞く前に増やしておきたい。ちょうどプロダクトのプレスリリースも出たのでその宣伝も兼ねられるし、勉強会のネタにもなるし、私の義務感を軽減してストレス解消にもなるし、ここは踏ん張って今日・明日で下書きを書き終えたい。</description><content>&lt;p>1時に寝て何度か起きて8時半に起きた。数ヶ月に1回ぐらいの頻度でしかないことだけど寝坊した。起きたら8時半であれ？と思った。起きてから家でそのぐらいの時間までだらだらするのはちょくちょくあることだけど、気付かず寝てたのは久しぶりだった。&lt;/p>
&lt;h2 id="台風が過ぎた後の焼き鳥屋さん">台風が過ぎた後の焼き鳥屋さん&lt;/h2>
&lt;p>今朝に寝坊した理由はこれだと思うけれど、昨日の22時から晩ご飯を求めて仲のよい焼き鳥屋さんへ行ってきた。台風で9割以上のお店が閉めている中、唯一と言っていいぐらいの珍しさで開いてた。そのお店 (グループ) のオーナーは雨が降ろうが槍が降ろうが営業日は開けるという方針らしい。マスターも夕方から台風は過ぎて雨も弱まっていたので普通に営業していたらしい。しかし、お客さんは数グループと少なかったと仰っていた。私が22時に行って誰もいなくて24時までいたけれど、誰も来なかった。通常なら22時だと他に2-3グループはいて、その後も最低でも1グループは飲みにやってくるぐらいの人気のある焼き鳥屋さんだ。そもそも駅から人が出てこないし、道にも人が歩いていない。物流も止まっていたのでいくつか仕入れが出来なくて提供できないメニューもあった。&lt;/p>
&lt;p>いつもなら2杯飲んで帰るところを、こんな日だから売上に貢献しようと思って3杯飲んで寝坊した気がする。&lt;/p>
&lt;h2 id="mongodb-700-リリース">mongodb 7.0.0 リリース&lt;/h2>
&lt;p>ちょうど qa テスト前で mongodb のメジャーバージョンがリリースされそうなので毎週のようにチェックしていた。rc10 までいって ga されたみたい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.mongodb.com/community/forums/t/mongodb-7-0-0-is-released/239732">MongoDB 7.0.0 is released&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>まだ docker hub には正式なリリースバージョンのコンテナイメージは公開されていない。しかし、rc10 が ga になったはずなのでひとまずはそれを使って開発環境とテスト環境を 7.0.0 に移行した。うちの用途だと ttl インデックスを作り直す以外には移行作業は必要なかった。自動テストはそのまま成功したし、テスト環境のデータもそのまま移行してパッとみた感じでは正常に動いている。来週から qa テストも始まるのでぎりぎり間に合ったというところ。&lt;a href="https://www.mongodb.com/support-policy/lifecycles">MongoDB Software Lifecycle Schedules&lt;/a> によると、だいたい mongodb は3年サポートされる。メジャーバージョンが年に1回リリースされているようにみえるので、いまメジャーバージョンを上げておくと1年余裕をもって運用できる。&lt;/p>
&lt;h2 id="テックブログの執筆開始">テックブログの執筆開始&lt;/h2>
&lt;p>お昼からテックブログの執筆に着手した。あまり大きな意味はないのだけど、お手伝い先のテックブログの記事を早く3つ書きたかった。別に三部作というわけでもない。けれど、テックブログ書いてますよと他者へ伝えるときに最低3つぐらい記事を書いていないと、全然書いてないやんと私なら思ってしまう。3つぐらいあれば、この人はこういう技術に関心があるんだ、こんな業務をやっているんだ、内容もしっかり書けているねとか、そういう判断を下すことができる最低限のコンテンツ量と言えるのではないだろうか。私にとってはそれが3つの記事と言える。&lt;a href="/diary/diary/posts/2023/0815/#課題管理とプロジェクトマネージメントの話を熱く語る">ちょっと前に公開した podcast&lt;/a> でテックブログの記事を読んでくださいと話したのでリスナーが聞く前に増やしておきたい。ちょうどプロダクトのプレスリリースも出たのでその宣伝も兼ねられるし、勉強会のネタにもなるし、私の義務感を軽減してストレス解消にもなるし、ここは踏ん張って今日・明日で下書きを書き終えたい。&lt;/p></content></item><item><title>台風の暴風雨にびびった</title><link>/diary/posts/2023/0815/</link><pubDate>Tue, 15 Aug 2023 20:46:29 +0900</pubDate><guid>/diary/posts/2023/0815/</guid><description>台風が来るということだったので昨日は18時には家に戻ってきてゆっくりしていた。とくに何をしていたわけでもないけれど、なぜか眠れなくて3時ぐらいまでは起きていた気がする。あまりちゃんと眠れない中、7時に起きた。朝から外の暴風雨がすごくて人が飛ばされそうな勢いだった。さすがにオフィス行けないなと諦めて家でリモートワークしていた。お昼過ぎぐらいまで暴風雨が続いていたと思う。夕方になってから外に出たら普通の雨になっていてそれからオフィスに来た。
課題管理とプロジェクトマネージメントの話を熱く語る 理由があって先日 チェックした音声データ とは違う音声データを使って昨日の夜に公開された。週末働いてバテていたせいか、昨日は余裕なくて聞けなかったものの、深夜に聞き始めた。よいこと言っているなーと自画自賛しつついくつか間違ったことも話してしまっているけれど、私の話しにそこまで注意して聞く人はいないでしょう。
#81 課題管理とプロジェクトマネージメントの話を熱く語る 課題管理の話題になると、ついつい熱中して話してしまう。「熱く語る」と書かれてしまうのはこの分野に熱意をもっている人が稀だからかな。私はこの1-2年この分野をずっと調べているから、ここで話した10倍ぐらいのコンテンツをもっている。勉強会の資料も数個はあるし、スライドは200枚ぐらいある。そして、調べれば調べるほど私が分かっていないことも分かってきて、もっともっと調べたいことがある。しかし、いまいまはもう体力と気力がない。
エージェントアプリケーション開発 昨日の続き 。昨日レビューをしっかりしてもらってマージした。windows ad サーバーとの dirsync の通信のところを、一切動かさず、既存のコードをインターフェースにあうように作り直したものの、実際に動かしてみると非同期の制御が意図したデータフローでなかったり、windows ad サーバーの知らない仕様があったり、細かいバグもあったりで半日ほどかけてデバッグしながらバグ修正してた。単体レベルのテストでこのバグ数だと、qa レベルだとさらにバグありそうだなという感触だけ確かめた。その後 dirsync の検索も非同期になった方が嬉しいなと思ってちょっとリファクタリングして検証がてら提案してみた。特別なことをしなくても go-ldap の非同期検索を使ってそのまま動くことも確認できたのでこれはこれで役に立つと思う。
Refactor DirSync search process #458</description><content>&lt;p>台風が来るということだったので昨日は18時には家に戻ってきてゆっくりしていた。とくに何をしていたわけでもないけれど、なぜか眠れなくて3時ぐらいまでは起きていた気がする。あまりちゃんと眠れない中、7時に起きた。朝から外の暴風雨がすごくて人が飛ばされそうな勢いだった。さすがにオフィス行けないなと諦めて家でリモートワークしていた。お昼過ぎぐらいまで暴風雨が続いていたと思う。夕方になってから外に出たら普通の雨になっていてそれからオフィスに来た。&lt;/p>
&lt;h2 id="課題管理とプロジェクトマネージメントの話を熱く語る">課題管理とプロジェクトマネージメントの話を熱く語る&lt;/h2>
&lt;p>理由があって先日 &lt;a href="/diary/diary/posts/2023/0811/#podcast-の内容チェック">チェックした音声データ&lt;/a> とは違う音声データを使って昨日の夜に公開された。週末働いてバテていたせいか、昨日は余裕なくて聞けなかったものの、深夜に聞き始めた。よいこと言っているなーと自画自賛しつついくつか間違ったことも話してしまっているけれど、私の話しにそこまで注意して聞く人はいないでしょう。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://podcast.terapyon.net/episodes/0090.html">#81 課題管理とプロジェクトマネージメントの話を熱く語る&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>課題管理の話題になると、ついつい熱中して話してしまう。「熱く語る」と書かれてしまうのはこの分野に熱意をもっている人が稀だからかな。私はこの1-2年この分野をずっと調べているから、ここで話した10倍ぐらいのコンテンツをもっている。勉強会の資料も数個はあるし、スライドは200枚ぐらいある。そして、調べれば調べるほど私が分かっていないことも分かってきて、もっともっと調べたいことがある。しかし、いまいまはもう体力と気力がない。&lt;/p>
&lt;h2 id="エージェントアプリケーション開発">エージェントアプリケーション開発&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0814/#エージェントアプリケーション開発">昨日の続き&lt;/a> 。昨日レビューをしっかりしてもらってマージした。windows ad サーバーとの dirsync の通信のところを、一切動かさず、既存のコードをインターフェースにあうように作り直したものの、実際に動かしてみると非同期の制御が意図したデータフローでなかったり、windows ad サーバーの知らない仕様があったり、細かいバグもあったりで半日ほどかけてデバッグしながらバグ修正してた。単体レベルのテストでこのバグ数だと、qa レベルだとさらにバグありそうだなという感触だけ確かめた。その後 dirsync の検索も非同期になった方が嬉しいなと思ってちょっとリファクタリングして検証がてら提案してみた。特別なことをしなくても go-ldap の非同期検索を使ってそのまま動くことも確認できたのでこれはこれで役に立つと思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/go-ldap/ldap/pull/458">Refactor DirSync search process #458&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>週明けから疲労困憊</title><link>/diary/posts/2023/0814/</link><pubDate>Mon, 14 Aug 2023 07:54:56 +0900</pubDate><guid>/diary/posts/2023/0814/</guid><description>4時に寝て7時に起きた。遅くまでコードを書いていたわけではないけど、眠れなかったのとお腹空いて夜にもぐもぐ夜食を食べていたせいかもしれない。たいてい月曜日は元気いっぱいなのに今日はバテバテだった。
wifi 復旧 金曜日からコワーキングスペースの wifi が不通 になっていた。午前中に業者がフロアの機器室の扉 (施錠されている) を開けて作業していた。週末に復旧できなかったのはシンプルに業者との保守契約に休日対応オプションが入っていなかったのかもしれない。運悪く連休に発生したために約3日間停止していた wifi が11時過ぎにようやく復旧した。フロアにまったく人影がなくて、みんなお盆休みなのかもしれない。
エージェントアプリケーション開発 昨日の続き 。朝からマージリクエストを作ってメンバーにレビューしてもらう。1000行程度の diff になったのでレビューするのも大変。基本的なロジックは問題なかったけれど、メンバーがしっかりレビューしてくれたおかげで細かいところをみていくと、いくつか修正点があった。感謝。レビューを終えて、マージして、テスト環境にデプロイして、一通り動いていることは確認した。ここからは運用レベルの検証に入っていく。週末も昨日もあまり寝てないのもあって、台風がきているし、今日はここで休むことにした。疲れたー。</description><content>&lt;p>4時に寝て7時に起きた。遅くまでコードを書いていたわけではないけど、眠れなかったのとお腹空いて夜にもぐもぐ夜食を食べていたせいかもしれない。たいてい月曜日は元気いっぱいなのに今日はバテバテだった。&lt;/p>
&lt;h2 id="wifi-復旧">wifi 復旧&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0812/#オフィスの-wifi-不通">金曜日からコワーキングスペースの wifi が不通&lt;/a> になっていた。午前中に業者がフロアの機器室の扉 (施錠されている) を開けて作業していた。週末に復旧できなかったのはシンプルに業者との保守契約に休日対応オプションが入っていなかったのかもしれない。運悪く連休に発生したために約3日間停止していた wifi が11時過ぎにようやく復旧した。フロアにまったく人影がなくて、みんなお盆休みなのかもしれない。&lt;/p>
&lt;h2 id="エージェントアプリケーション開発">エージェントアプリケーション開発&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0813/#エージェントアプリケーション開発">昨日の続き&lt;/a> 。朝からマージリクエストを作ってメンバーにレビューしてもらう。1000行程度の diff になったのでレビューするのも大変。基本的なロジックは問題なかったけれど、メンバーがしっかりレビューしてくれたおかげで細かいところをみていくと、いくつか修正点があった。感謝。レビューを終えて、マージして、テスト環境にデプロイして、一通り動いていることは確認した。ここからは運用レベルの検証に入っていく。週末も昨日もあまり寝てないのもあって、台風がきているし、今日はここで休むことにした。疲れたー。&lt;/p></content></item><item><title>神戸の高速道路事情</title><link>/diary/posts/2023/0813/</link><pubDate>Sun, 13 Aug 2023 12:18:19 +0900</pubDate><guid>/diary/posts/2023/0813/</guid><description>4時に寝て7時に起きた。蛍光灯をつけっぱなしで寝たのであまり深く寝ていない感じがする。
テーブル受け取り 先日の ジモティー取引 のテーブルを受け取りに行ってきた。テーブルのサイズは次になる。
縦: 120cm 幅: 75cm 高さ: 70cm ちゃんとメジャーで測って車の荷室に入ることを確認して行った。やや工夫しながら積み込みしないと当たるところもあった。後部座席を倒してこのぐらいのサイズで荷室が埋まる。もうひとまわりぐらいの余裕はあるかな。
あとは椅子を探すだけ。次は9月に実家へ帰ろうと考えているのでそれまでに準備したい。
阪神高速3号神戸線 以前 実家からの帰りで渋滞に遭遇 してから、たいてい実家から帰ってくるときは白川まで出て7号北神戸線で帰るようになった。少しだけ遠回りだけど、まず渋滞しないので時間的には早く着く可能性が高い。今日は京橋から西明石まで高速道路で走ってきた。30-40分といったところ。往路は白川経由で1080円 (渋滞しない) 、復路は須磨経由 (3号神戸線と呼ばれるルート) が1040円で若宮-湊川-柳原あたりで安定の渋滞につかまった。明らかに白河経由なら20分は早く帰れたと思う。下りはまだしも、上りは渋滞に遭遇する確率がかなり高い。次の記事によると、阪神高速3号神戸線は全国ワースト1位の渋滞区間になるらしい。もう休日の上りで3号神戸線を走ることはないかもしれない。
東京圏の首都高速など、全国6都市圏にある都市高速道路のうち、最も渋滞する区間が、阪神高速3号神戸線のおもに神戸市内の区間です。
阪神高速3号神戸線はなぜ混む？
3号神戸線が渋滞する理由を調べるといろいろな意見がある。それっぽいのをまとめておく。
神戸-大阪という都市間の交通量は多いのに土地が狭い 山と海に挟まれていて土地がないから下道の幹線道路 (国道) も貧弱 サグ (下り坂から上り坂に変わる箇所) がいくつかある 出口のすぐ先に信号があるから出口付近で混雑する 鋭角カーブがあるので減速する 次の記事も図解があってわかりやすかった。
旅行シーズンには大混乱！阪神高速３号神戸線が渋滞日本一のワケ エージェントアプリケーション開発 昨日の続き 。お昼に2時間ほどやって、夕方に晩ご飯の買いものへ行ったら強い通り雨に降られて一旦家で休んでいるうちに少し寝て、また涼しくなった20時頃から4時間ほどやってた。windows ad サーバーとの dirsync の通信もコードを読みながらインターフェースをあわせるように書き換えていった。実際に動かしてないから動かないかもしれない。このテストは明日に行う。channel を使った非同期／並行処理のところは難しいのでなるべく共通化してアプリケーション側はそれを再利用する形にしたい。マージリクエストを送る一歩手前までは整理できた。あとはテストだけ。疲れたけど、ようやく先週のスケジュールに復帰した。</description><content>&lt;p>4時に寝て7時に起きた。蛍光灯をつけっぱなしで寝たのであまり深く寝ていない感じがする。&lt;/p>
&lt;h2 id="テーブル受け取り">テーブル受け取り&lt;/h2>
&lt;p>先日の &lt;a href="/diary/diary/posts/2023/0811/#ダイニングテーブルの交渉成立">ジモティー取引&lt;/a> のテーブルを受け取りに行ってきた。テーブルのサイズは次になる。&lt;/p>
&lt;ul>
&lt;li>縦: 120cm&lt;/li>
&lt;li>幅: 75cm&lt;/li>
&lt;li>高さ: 70cm&lt;/li>
&lt;/ul>
&lt;p>ちゃんとメジャーで測って車の荷室に入ることを確認して行った。やや工夫しながら積み込みしないと当たるところもあった。後部座席を倒してこのぐらいのサイズで荷室が埋まる。もうひとまわりぐらいの余裕はあるかな。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0813_table.jpg"/>
&lt;/figure>
&lt;p>あとは椅子を探すだけ。次は9月に実家へ帰ろうと考えているのでそれまでに準備したい。&lt;/p>
&lt;h2 id="阪神高速3号神戸線">阪神高速3号神戸線&lt;/h2>
&lt;p>以前 &lt;a href="/diary/diary/posts/2023/0212/#帰路">実家からの帰りで渋滞に遭遇&lt;/a> してから、たいてい実家から帰ってくるときは白川まで出て7号北神戸線で帰るようになった。少しだけ遠回りだけど、まず渋滞しないので時間的には早く着く可能性が高い。今日は京橋から西明石まで高速道路で走ってきた。30-40分といったところ。往路は白川経由で1080円 (渋滞しない) 、復路は須磨経由 (3号神戸線と呼ばれるルート) が1040円で若宮-湊川-柳原あたりで安定の渋滞につかまった。明らかに白河経由なら20分は早く帰れたと思う。下りはまだしも、上りは渋滞に遭遇する確率がかなり高い。次の記事によると、阪神高速3号神戸線は全国ワースト1位の渋滞区間になるらしい。もう休日の上りで3号神戸線を走ることはないかもしれない。&lt;/p>
&lt;blockquote>
&lt;p>東京圏の首都高速など、全国6都市圏にある都市高速道路のうち、最も渋滞する区間が、阪神高速3号神戸線のおもに神戸市内の区間です。&lt;/p>
&lt;p>&lt;a href="https://www.nihon-kyuso.co.jp/info/archives/132">阪神高速3号神戸線はなぜ混む？&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>3号神戸線が渋滞する理由を調べるといろいろな意見がある。それっぽいのをまとめておく。&lt;/p>
&lt;ul>
&lt;li>神戸-大阪という都市間の交通量は多いのに土地が狭い
&lt;ul>
&lt;li>山と海に挟まれていて土地がないから下道の幹線道路 (国道) も貧弱&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>サグ (下り坂から上り坂に変わる箇所) がいくつかある&lt;/li>
&lt;li>出口のすぐ先に信号があるから出口付近で混雑する&lt;/li>
&lt;li>鋭角カーブがあるので減速する&lt;/li>
&lt;/ul>
&lt;p>次の記事も図解があってわかりやすかった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://rurano0.wixsite.com/mysite/post/%E6%97%85%E8%A1%8C%E3%82%B7%E3%83%BC%E3%82%BA%E3%83%B3%E3%81%AB%E3%81%AF%E5%A4%A7%E6%B7%B7%E4%B9%B1%EF%BC%81%E9%98%AA%E7%A5%9E%E9%AB%98%E9%80%9F%EF%BC%93%E5%8F%B7%E7%A5%9E%E6%88%B8%E7%B7%9A%E3%81%8C%E6%B8%8B%E6%BB%9E%E6%97%A5%E6%9C%AC%E4%B8%80%E3%81%AE%E3%83%AF%E3%82%B1">旅行シーズンには大混乱！阪神高速３号神戸線が渋滞日本一のワケ&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="エージェントアプリケーション開発">エージェントアプリケーション開発&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0812/#エージェントアプリケーション開発">昨日の続き&lt;/a> 。お昼に2時間ほどやって、夕方に晩ご飯の買いものへ行ったら強い通り雨に降られて一旦家で休んでいるうちに少し寝て、また涼しくなった20時頃から4時間ほどやってた。windows ad サーバーとの dirsync の通信もコードを読みながらインターフェースをあわせるように書き換えていった。実際に動かしてないから動かないかもしれない。このテストは明日に行う。channel を使った非同期／並行処理のところは難しいのでなるべく共通化してアプリケーション側はそれを再利用する形にしたい。マージリクエストを送る一歩手前までは整理できた。あとはテストだけ。疲れたけど、ようやく先週のスケジュールに復帰した。&lt;/p></content></item><item><title>室温と集中力との相関関係</title><link>/diary/posts/2023/0812/</link><pubDate>Sat, 12 Aug 2023 12:01:41 +0900</pubDate><guid>/diary/posts/2023/0812/</guid><description>2時に寝て2回ぐらい起きて7時に起きた。朝からやや疲れ気味。
ストレッチ 疲労と暑さと出張でバテバテ。今日の開脚幅は開始前157cmで、ストレッチ後160cmだった。数値はよい感じ。トレーナーさんが言うにはお尻と肩が硬かったらしい。私の感覚ではそれらに加えて、ふくらはぎの後ろの筋がかなり痛かった、とくに左足。さらに体全体がだるくて疲れが溜まっているなーという印象も受けた。実は8月21日の週にまた出張する予定になったので体力がもつか、不安も感じるようになってきた。
空調工事の結果 先日の 暑さ対策委員会 の続き。
出張から帰ってきて、エアコンの冷媒切り替えを終えたはずのオフィスの室温はどう変わったか？その結果が楽しみにで昨日、出張帰りにオフィスに寄ってみたというのもあった。結論から言うと
何の成果も！！得られませんでした！！
温湿度計を買っておいてよかった。ちゃんと数値でどう変わったかを測れるもんね。だって午前中は34℃、お昼から32℃、夜は28℃、なんも変わってない。この部屋が暑い理由は冷媒が原因ではなかったという切り分けはできた。がっかりして、また運営会社に電話して、成果がなかったことと、前に断熱のブラインドに変えてくれると言っていた件はどうなったの？とツッコミまで入れてしまったよ。もう建物の構造的にこの区画は涼しくならないんやろか？
オフィスの wifi 不通 昨日の午前中、運営会社のスタッフとやり取りしていて wifi が不通になっていることに気付いた。デスクトップマシンは有線ネットワークを使っていてそちらは疎通しているものの、wifi のアクセスポイントまでは接続できるが、なぜかその先のインターネット接続が不通になるという現象が発生していた。たまたま部屋の外に出たときにコワーキングスペースの利用者が運営会社のサポートに電話して、やや強い口調でクレームしていた。コワーキングスペースの利用者向けには wifi ネットワークしかないため、コワーキングスペースにわざわざ来てインターネット繋がりませんで怒る気持ちは分からないでもない。
ネットワーク障害が発生することそのものは仕方ないものの、発生してから翌日の20時時点でその wifi ネットワークの障害が解消していない。同じフロア内にある有線ネットワークが疎通していることから、このネットワーク障害は小規模な原因であることが推測される。それこそ通信機器を再起動すれば直るかもしれない。1日以上放置している運営体制を懸念に思ってしまったのだけど、これは職業病？週末に知らずにコワーキングスペースへ来られる方がいるのではないだろうか？
エージェントアプリケーション開発 今週中に完了させておきたい機能開発 が全然進捗しなかったので週末に取り組む。昼間は暑くて (34℃) 集中力が出なかったので15時から19時まで家に帰ってエアコンの効いた部屋で寝てた。ただただ寝てた。私が4時間起きずに眠れることは稀なので自分でも驚いた。その後、オフィスに戻って19時半ぐらいから開発に臨んだ。夜のオフィスの室温は28℃前後なので十分に涼しい (と適応している自分がいる) 。
ldap サーバーでのユーザーとグループのエントリー、それぞれの変更を検知して id 連携しないといけない。既存の実装は1つのクエリにユーザーとグループの検索条件を OR 条件にして両方のエントリーを取得するようにしている。このフィルター自体は問題ないが、その後のユーザーとグループの判別に DN の接尾辞の部分マッチで判定していた。これは微妙な判定方法だ。このやり方だとユーザーとグループの DN の接尾辞が同じときに運用できない。ユーザーとグループは分けて管理した方が要件がシンプルで運用も実装もわかりやすいだろうと考え、それぞれのクエリを非同期／並行に動かすようにした。こういうのは go 言語の得意とするところ。一通り動くようになったら3時半ぐらいになってた。涼しい方が集中できる。</description><content>&lt;p>2時に寝て2回ぐらい起きて7時に起きた。朝からやや疲れ気味。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>疲労と暑さと出張でバテバテ。今日の開脚幅は開始前157cmで、ストレッチ後160cmだった。数値はよい感じ。トレーナーさんが言うにはお尻と肩が硬かったらしい。私の感覚ではそれらに加えて、ふくらはぎの後ろの筋がかなり痛かった、とくに左足。さらに体全体がだるくて疲れが溜まっているなーという印象も受けた。実は8月21日の週にまた出張する予定になったので体力がもつか、不安も感じるようになってきた。&lt;/p>
&lt;h2 id="空調工事の結果">空調工事の結果&lt;/h2>
&lt;p>先日の &lt;a href="/diary/diary/posts/2023/0802/">暑さ対策委員会&lt;/a> の続き。&lt;/p>
&lt;p>出張から帰ってきて、エアコンの冷媒切り替えを終えたはずのオフィスの室温はどう変わったか？その結果が楽しみにで昨日、出張帰りにオフィスに寄ってみたというのもあった。結論から言うと&lt;/p>
&lt;blockquote>
&lt;p>何の成果も！！得られませんでした！！&lt;/p>
&lt;/blockquote>
&lt;p>温湿度計を買っておいてよかった。ちゃんと数値でどう変わったかを測れるもんね。だって午前中は34℃、お昼から32℃、夜は28℃、なんも変わってない。この部屋が暑い理由は冷媒が原因ではなかったという切り分けはできた。がっかりして、また運営会社に電話して、成果がなかったことと、前に断熱のブラインドに変えてくれると言っていた件はどうなったの？とツッコミまで入れてしまったよ。もう建物の構造的にこの区画は涼しくならないんやろか？&lt;/p>
&lt;h2 id="オフィスの-wifi-不通">オフィスの wifi 不通&lt;/h2>
&lt;p>昨日の午前中、運営会社のスタッフとやり取りしていて wifi が不通になっていることに気付いた。デスクトップマシンは有線ネットワークを使っていてそちらは疎通しているものの、wifi のアクセスポイントまでは接続できるが、なぜかその先のインターネット接続が不通になるという現象が発生していた。たまたま部屋の外に出たときにコワーキングスペースの利用者が運営会社のサポートに電話して、やや強い口調でクレームしていた。コワーキングスペースの利用者向けには wifi ネットワークしかないため、コワーキングスペースにわざわざ来てインターネット繋がりませんで怒る気持ちは分からないでもない。&lt;/p>
&lt;p>ネットワーク障害が発生することそのものは仕方ないものの、発生してから翌日の20時時点でその wifi ネットワークの障害が解消していない。同じフロア内にある有線ネットワークが疎通していることから、このネットワーク障害は小規模な原因であることが推測される。それこそ通信機器を再起動すれば直るかもしれない。1日以上放置している運営体制を懸念に思ってしまったのだけど、これは職業病？週末に知らずにコワーキングスペースへ来られる方がいるのではないだろうか？&lt;/p>
&lt;h2 id="エージェントアプリケーション開発">エージェントアプリケーション開発&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0807/#エージェントアプリケーション開発">今週中に完了させておきたい機能開発&lt;/a> が全然進捗しなかったので週末に取り組む。昼間は暑くて (34℃) 集中力が出なかったので15時から19時まで家に帰ってエアコンの効いた部屋で寝てた。ただただ寝てた。私が4時間起きずに眠れることは稀なので自分でも驚いた。その後、オフィスに戻って19時半ぐらいから開発に臨んだ。夜のオフィスの室温は28℃前後なので十分に涼しい (と適応している自分がいる) 。&lt;/p>
&lt;p>ldap サーバーでのユーザーとグループのエントリー、それぞれの変更を検知して id 連携しないといけない。既存の実装は1つのクエリにユーザーとグループの検索条件を OR 条件にして両方のエントリーを取得するようにしている。このフィルター自体は問題ないが、その後のユーザーとグループの判別に DN の接尾辞の部分マッチで判定していた。これは微妙な判定方法だ。このやり方だとユーザーとグループの DN の接尾辞が同じときに運用できない。ユーザーとグループは分けて管理した方が要件がシンプルで運用も実装もわかりやすいだろうと考え、それぞれのクエリを非同期／並行に動かすようにした。こういうのは go 言語の得意とするところ。一通り動くようになったら3時半ぐらいになってた。涼しい方が集中できる。&lt;/p></content></item><item><title>休日だったとは思えない多忙な日</title><link>/diary/posts/2023/0811/</link><pubDate>Fri, 11 Aug 2023 08:12:53 +0900</pubDate><guid>/diary/posts/2023/0811/</guid><description>2時に寝て6時に起きて8時過ぎに起きた。昨日の夜に書いたコードにバグがあると朝からチャットをみかけて慌てて起きてオフィスへ行くことにした。夕方に一度帰って仮眠してまた夜に涼しくなってからオフィスへ行って作業していた。祝日とは思えない忙しさでほぼほぼフルで働いていた。
podcast の内容チェック 一昨日に収録した podcast の音声データが仕上がったと昨日の夜に連絡をもらった。本当は昨日の夜に聞いて内容チェックするところが、昨日はコードを書いていてそれで疲れてしまったので朝から聞いて内容チェックしていた。2時間話したので聞くのも2時間かかる。
今回はスクリプトも付いていた。日本語の音声データからの llm 技術を使ってスクリプトを自動生成している。そのテキストをみながら聞いていた。てらださんが言うには音声データによってスクリプトの精度は大きく変わるらしいが、今回の私の雑談はうまくいった方で7割ぐらいの精度で正しかった。ところどころの単語は間違っているものの、ざっとテキストを見返してもなにを話したのかの雰囲気は類推できる。これがあると、どの時間帯にどういった内容を話しているかを知ることができるため、自分の関心のあるところだけ聞くときに参考になる。その程度の要件であれば7割の精度で構わないという。その後、当日にもともと予定していなかったことを話したことの、ショーノート向けのリンクを探してきて追記したりしていた。
ダイニングテーブルの交渉成立 以前から ジモティー検索 で実家の離れでリモートワークするためのテーブルを探していた。出品されても大抵は1時間以内で取引相手が決まってしまうため、勝負は時の運のような雰囲気になっていた。たまたま今晩も検索してみて、近所でみつけて、どうせ交渉済みかなと諦めモード満開で問い合わせたところ、まだ引き取り先が決まってなくて無事に交渉が成立した。明後日の午前中に明石市まで引き取りに行ってくることになった。なにが嬉しいって中古のダイニングテーブルを無料で譲り受けられる。うまいこといくときはトントン拍子だった。</description><content>&lt;p>2時に寝て6時に起きて8時過ぎに起きた。昨日の夜に書いたコードにバグがあると朝からチャットをみかけて慌てて起きてオフィスへ行くことにした。夕方に一度帰って仮眠してまた夜に涼しくなってからオフィスへ行って作業していた。祝日とは思えない忙しさでほぼほぼフルで働いていた。&lt;/p>
&lt;h2 id="podcast-の内容チェック">podcast の内容チェック&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0809/#podcast-収録">一昨日に収録した podcast&lt;/a> の音声データが仕上がったと昨日の夜に連絡をもらった。本当は昨日の夜に聞いて内容チェックするところが、昨日はコードを書いていてそれで疲れてしまったので朝から聞いて内容チェックしていた。2時間話したので聞くのも2時間かかる。&lt;/p>
&lt;p>今回はスクリプトも付いていた。日本語の音声データからの llm 技術を使ってスクリプトを自動生成している。そのテキストをみながら聞いていた。てらださんが言うには音声データによってスクリプトの精度は大きく変わるらしいが、今回の私の雑談はうまくいった方で7割ぐらいの精度で正しかった。ところどころの単語は間違っているものの、ざっとテキストを見返してもなにを話したのかの雰囲気は類推できる。これがあると、どの時間帯にどういった内容を話しているかを知ることができるため、自分の関心のあるところだけ聞くときに参考になる。その程度の要件であれば7割の精度で構わないという。その後、当日にもともと予定していなかったことを話したことの、ショーノート向けのリンクを探してきて追記したりしていた。&lt;/p>
&lt;h2 id="ダイニングテーブルの交渉成立">ダイニングテーブルの交渉成立&lt;/h2>
&lt;p>以前から &lt;a href="/diary/diary/posts/2023/0726/#法要の調整">ジモティー検索&lt;/a> で実家の離れでリモートワークするためのテーブルを探していた。出品されても大抵は1時間以内で取引相手が決まってしまうため、勝負は時の運のような雰囲気になっていた。たまたま今晩も検索してみて、近所でみつけて、どうせ交渉済みかなと諦めモード満開で問い合わせたところ、まだ引き取り先が決まってなくて無事に交渉が成立した。明後日の午前中に明石市まで引き取りに行ってくることになった。なにが嬉しいって中古のダイニングテーブルを無料で譲り受けられる。うまいこといくときはトントン拍子だった。&lt;/p></content></item><item><title>出張帰りにオフィスに寄って開発する</title><link>/diary/posts/2023/0810/</link><pubDate>Thu, 10 Aug 2023 00:16:02 +0900</pubDate><guid>/diary/posts/2023/0810/</guid><description>18時19分の新幹線に乗って21時前に新神戸駅に着く。この時間帯で帰ってくるのが楽な気がする。新神戸駅についたらいつもそこからタクシーで帰りたいと思う。いまうちの会社は全然儲かってないのでそんなことできないけれど、いつか余裕ができたら出張帰りの電車乗り継ぎをやめてタクシーで直帰してよいルールにしたい。
go 1.21 への移行 昨日 Go 1.21 is released! されたことを知った。自分の作業を中断して早めに移行して問題があれば検出できるしておきたかったので 1.20 から 1.21 への移行をしていた。もっとも大きな移行としてログ出力をすべて log/slog へ移行した。もともと cybozu-go/log という標準の log パッケージに近いものを使っていたので移行そのものは大きな課題にはならなかった。一方で変更することによって運用にどういった影響が出るかは実際に動かさないと気付かないこともあるだろうという視点で早く移行したかった。昨日の夕方に 1.21 で一通りは動くようにして、今朝から細かいところの修正は他のライブラリとして slices/maps といった新規に追加された標準ライブラリを使うように変更していった。リポジトリが数個あるので単純に労力だけの問題。ついでに go-ldap の ci 環境の設定も変えておいた。
Add go 1.21 build/testing to github workflow #457 github-api-tools 再び 帰りの新幹線の中でてらださんとやり取りしていた。issue 検索に llm の技術を使ってサンプルアプリケーションを作るというアイディアが進んでいて、公けの github issues のデータを使えばいいという話しをした。実際に学習データにするには、一定の前処理したテキストとメタデータが必要になる。github issues からあるプロジェクトの情報を一括で取得する方法はないか？という相談を受けて、github の rest api などを使って取得するのがよいのではないか？と提案した。
私も過去に github での作業時間の検証のために github-api-tools というツールを作っていた。21時半頃にオフィスに戻ってきて、せっかくなので試しにやってみるかと翌1時過ぎぐらいまでコードを書いていた。過去にも issues の機能も作った方がよいよねという課題は残してあった。
Add issue statistics #1 python のコードを滅多に触る機会がなくなってしまったので勘所を思い出したりするのにやや手間取った。それでも自分が過去に作ったものなのですぐにできた。</description><content>&lt;p>18時19分の新幹線に乗って21時前に新神戸駅に着く。この時間帯で帰ってくるのが楽な気がする。新神戸駅についたらいつもそこからタクシーで帰りたいと思う。いまうちの会社は全然儲かってないのでそんなことできないけれど、いつか余裕ができたら出張帰りの電車乗り継ぎをやめてタクシーで直帰してよいルールにしたい。&lt;/p>
&lt;h2 id="go-121-への移行">go 1.21 への移行&lt;/h2>
&lt;p>昨日 &lt;a href="https://go.dev/blog/go1.21">Go 1.21 is released!&lt;/a> されたことを知った。自分の作業を中断して早めに移行して問題があれば検出できるしておきたかったので 1.20 から 1.21 への移行をしていた。もっとも大きな移行としてログ出力をすべて &lt;a href="https://pkg.go.dev/log/slog">log/slog&lt;/a> へ移行した。もともと &lt;a href="https://github.com/cybozu-go/log">cybozu-go/log&lt;/a> という標準の log パッケージに近いものを使っていたので移行そのものは大きな課題にはならなかった。一方で変更することによって運用にどういった影響が出るかは実際に動かさないと気付かないこともあるだろうという視点で早く移行したかった。昨日の夕方に 1.21 で一通りは動くようにして、今朝から細かいところの修正は他のライブラリとして slices/maps といった新規に追加された標準ライブラリを使うように変更していった。リポジトリが数個あるので単純に労力だけの問題。ついでに go-ldap の ci 環境の設定も変えておいた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/go-ldap/ldap/pull/457">Add go 1.21 build/testing to github workflow #457&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="github-api-tools-再び">github-api-tools 再び&lt;/h2>
&lt;p>帰りの新幹線の中でてらださんとやり取りしていた。issue 検索に llm の技術を使ってサンプルアプリケーションを作るというアイディアが進んでいて、公けの github issues のデータを使えばいいという話しをした。実際に学習データにするには、一定の前処理したテキストとメタデータが必要になる。github issues からあるプロジェクトの情報を一括で取得する方法はないか？という相談を受けて、github の rest api などを使って取得するのがよいのではないか？と提案した。&lt;/p>
&lt;p>私も過去に github での作業時間の検証のために &lt;a href="https://github.com/kazamori/github-api-tools">github-api-tools&lt;/a> というツールを作っていた。21時半頃にオフィスに戻ってきて、せっかくなので試しにやってみるかと翌1時過ぎぐらいまでコードを書いていた。過去にも issues の機能も作った方がよいよねという課題は残してあった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/github-api-tools/issues/1">Add issue statistics #1&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>python のコードを滅多に触る機会がなくなってしまったので勘所を思い出したりするのにやや手間取った。それでも自分が過去に作ったものなのですぐにできた。&lt;/p></content></item><item><title>年一ゲストの podcast 収録</title><link>/diary/posts/2023/0809/</link><pubDate>Wed, 09 Aug 2023 23:43:36 +0900</pubDate><guid>/diary/posts/2023/0809/</guid><description>夕方に寝て晩ご飯食べてきて23時に寝て7時に起きた。起きてから podcast のネタ帳を書いていた。本当は前日の夜に書くと宣言したものの、夜は眠くて普通に寝てた。
mongodb のインデックス追加 テスト環境の履歴テーブルにドキュメントが135万件ほど入っている。管理画面の履歴一覧を表示すると、一覧がレンダリングされるのに約1秒かかるようになった。遅い。インデックスなしでフルスキャンしているのでデフォルトのソートキーのインデックスが必要なことはすぐに想定できた。実際に compass でクエリを explain で実行してみるとフルスキャンしていることと、どのぐらいの時間がかかっているのかを計測できた。
デフォルトのソートキーのインデックスを追加すると explain の画面で数十 msec かかっていた時間が解消された。ソートキーに対して自動的にインデックスが使われることもわかった。
管理画面からも数十 msec で一覧が表示されるようになった。私の感覚ではひと昔のデータベースは10万件を超えたら1秒ぐらいかかった気はするが、いまはマシンスペックもミドルウェアの性能も上がっているのでそれが100万件超になったんだなという印象。実運用だとすぐに発生する問題が普通の開発をしていると気付きにくくなる懸念があることを学んだ。
podcast 収録 お仕事を終えてから、年一ゲストとして出演している terapyon channel の podcast の収録へ行ってきた。本当は6月頃に出演依頼が来ていたのを、私がお手伝いしている開発のプレスリリースや事例紹介が終わってからの方が話せる内容が多くてよいということで延期してもらっていた。事例紹介はまだ公開できていないけれど、別に事例紹介なくても先方にうちの会社が手伝っていることを公開してよい許可はもらっているので podcast の中で話してもまったく問題ない。
昨日てらださんとたまたまやり取りしていたときに、せっかく東京に来ているのでオフラインで収録しては？と言ったらその方向になって、翌日即収録という行き当たりばったりやっつけ計画で話しが進んだ。非商用の podcast で話すのでそこまで品質に責任をもつ必要もない。19時半にてらださんの会社のオフィスへ伺い、20時頃から収録を始めて、なんやらかんやら盛り上がって言いたい放題言って、2時間経っていた。オンラインで収録するよりも、オフラインの方がずっと多くのことを短い時間で話せるように感じた。相槌うったり会話の掛け合いがしやすいので間が短い気がする。内容的にはちょっと話し過ぎで聞く人は疲れて最後まで聞いてもらえないかもしれない。その後、近くの居酒屋さんへ飲みに行って1時間ほど飲んで24時前にはホテルへ戻ってきた。楽しかったー。
てらださんの近況の中に llm を使ってサービスを開発するときに LangChain というツールがあって、これを使うと簡単にいろんな言語処理ができて楽しいといったことを共有してもらった。いまは触る余裕がないけれど、覚えておきたい。</description><content>&lt;p>夕方に寝て晩ご飯食べてきて23時に寝て7時に起きた。起きてから podcast のネタ帳を書いていた。本当は前日の夜に書くと宣言したものの、夜は眠くて普通に寝てた。&lt;/p>
&lt;h2 id="mongodb-のインデックス追加">mongodb のインデックス追加&lt;/h2>
&lt;p>テスト環境の履歴テーブルにドキュメントが135万件ほど入っている。管理画面の履歴一覧を表示すると、一覧がレンダリングされるのに約1秒かかるようになった。遅い。インデックスなしでフルスキャンしているのでデフォルトのソートキーのインデックスが必要なことはすぐに想定できた。実際に &lt;a href="https://www.mongodb.com/ja-jp/products/compass">compass&lt;/a> でクエリを explain で実行してみるとフルスキャンしていることと、どのぐらいの時間がかかっているのかを計測できた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0809_mongodb-explain1.png"/>
&lt;/figure>
&lt;p>デフォルトのソートキーのインデックスを追加すると explain の画面で数十 msec かかっていた時間が解消された。ソートキーに対して自動的にインデックスが使われることもわかった。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0809_mongodb-explain2.png"/>
&lt;/figure>
&lt;p>管理画面からも数十 msec で一覧が表示されるようになった。私の感覚ではひと昔のデータベースは10万件を超えたら1秒ぐらいかかった気はするが、いまはマシンスペックもミドルウェアの性能も上がっているのでそれが100万件超になったんだなという印象。実運用だとすぐに発生する問題が普通の開発をしていると気付きにくくなる懸念があることを学んだ。&lt;/p>
&lt;h2 id="podcast-収録">podcast 収録&lt;/h2>
&lt;p>お仕事を終えてから、年一ゲストとして出演している &lt;a href="https://podcast.terapyon.net/">terapyon channel&lt;/a> の podcast の収録へ行ってきた。本当は6月頃に出演依頼が来ていたのを、私がお手伝いしている開発のプレスリリースや事例紹介が終わってからの方が話せる内容が多くてよいということで延期してもらっていた。事例紹介はまだ公開できていないけれど、別に事例紹介なくても先方にうちの会社が手伝っていることを公開してよい許可はもらっているので podcast の中で話してもまったく問題ない。&lt;/p>
&lt;p>昨日てらださんとたまたまやり取りしていたときに、せっかく東京に来ているのでオフラインで収録しては？と言ったらその方向になって、翌日即収録という行き当たりばったりやっつけ計画で話しが進んだ。非商用の podcast で話すのでそこまで品質に責任をもつ必要もない。19時半にてらださんの会社のオフィスへ伺い、20時頃から収録を始めて、なんやらかんやら盛り上がって言いたい放題言って、2時間経っていた。オンラインで収録するよりも、オフラインの方がずっと多くのことを短い時間で話せるように感じた。相槌うったり会話の掛け合いがしやすいので間が短い気がする。内容的にはちょっと話し過ぎで聞く人は疲れて最後まで聞いてもらえないかもしれない。その後、近くの居酒屋さんへ飲みに行って1時間ほど飲んで24時前にはホテルへ戻ってきた。楽しかったー。&lt;/p>
&lt;p>てらださんの近況の中に llm を使ってサービスを開発するときに &lt;a href="https://www.langchain.com/">LangChain&lt;/a> というツールがあって、これを使うと簡単にいろんな言語処理ができて楽しいといったことを共有してもらった。いまは触る余裕がないけれど、覚えておきたい。&lt;/p></content></item><item><title>移動と会議と眠気の日</title><link>/diary/posts/2023/0808/</link><pubDate>Tue, 08 Aug 2023 09:15:11 +0900</pubDate><guid>/diary/posts/2023/0808/</guid><description>1時から3時まで仮眠して、それから準備していつも通り5時15分に家を出た。なぜかお盆前なのに新幹線はめっちゃ空いていてパーソナルスペースが広くて車内で2時間ほど寝ていた気がする。仮眠したつもりだったが、やっぱり16時前後になると眠くて眠くてお仕事にならなくなった。夕方にホテルに戻って寝てた。新幹線の移動日はたいていパフォーマンスが悪い。
プロジェクトの進捗報告 出張したときの月例報告の9回目。前回の進捗報告はこちら 。
いつもは水曜日にやっているけれど、今回は先方の出席者の都合がよくなかったので火曜日に変更した。午前中にはチームでの定例会議をやっているので本日2つ目の会議。資料作り の中でも書いたけれど、開発がやや遅れてもう1つイテレーションをこなした上で QA を2つイテレーションするという計画を伝えた。スケジュールの前倒しするように言われる可能性もあるかなとは考えていた。しかし、とくに計画については何も言われなくて、私の想定する計画通りでよいかのように進んだ。メンバーにスキルアップしてもらう教育的な側面から時間をかけているところもあるので、そういった学習コストを容認するという判断だったのかもしれない。いずれにしても最後の締めに向けて懸念点はなく、いまはひたすらに邁進するだけ。その他、設計についての考え方やメンバーの育成について共有したりしていた。</description><content>&lt;p>1時から3時まで仮眠して、それから準備していつも通り5時15分に家を出た。なぜかお盆前なのに新幹線はめっちゃ空いていてパーソナルスペースが広くて車内で2時間ほど寝ていた気がする。仮眠したつもりだったが、やっぱり16時前後になると眠くて眠くてお仕事にならなくなった。夕方にホテルに戻って寝てた。新幹線の移動日はたいていパフォーマンスが悪い。&lt;/p>
&lt;h2 id="プロジェクトの進捗報告">プロジェクトの進捗報告&lt;/h2>
&lt;p>出張したときの月例報告の9回目。&lt;a href="/diary/diary/posts/2023/0712/">前回の進捗報告はこちら&lt;/a> 。&lt;/p>
&lt;p>いつもは水曜日にやっているけれど、今回は先方の出席者の都合がよくなかったので火曜日に変更した。午前中にはチームでの定例会議をやっているので本日2つ目の会議。&lt;a href="/diary/diary/posts/2023/0805/#進捗報告の資料作り">資料作り&lt;/a> の中でも書いたけれど、開発がやや遅れてもう1つイテレーションをこなした上で QA を2つイテレーションするという計画を伝えた。スケジュールの前倒しするように言われる可能性もあるかなとは考えていた。しかし、とくに計画については何も言われなくて、私の想定する計画通りでよいかのように進んだ。メンバーにスキルアップしてもらう教育的な側面から時間をかけているところもあるので、そういった学習コストを容認するという判断だったのかもしれない。いずれにしても最後の締めに向けて懸念点はなく、いまはひたすらに邁進するだけ。その他、設計についての考え方やメンバーの育成について共有したりしていた。&lt;/p></content></item><item><title>設計の見直しとリファクタリング</title><link>/diary/posts/2023/0807/</link><pubDate>Mon, 07 Aug 2023 11:06:04 +0900</pubDate><guid>/diary/posts/2023/0807/</guid><description>2時ぐらいに寝て起きたかどうかあまり覚えていないが7時に起きた。あまり寝た気がしない。
エージェントアプリケーション開発 昨日の続き 。一晩寝かした甲斐があったのかどうか、意識的にはわからないが、少なくともつまづくことなく1つずつ設計の見直しや処理をパラメーター化していって一通りプロトコルの差異以外のところは整理できた。今日は自分のコードを書く余裕はなかったけれど、1日かけて既存の設計の見直しを終えられたことをうまくいったと自分で肯定しておこうと思う (他人からみたらそうじゃない可能性はある) 。
関数は1つの機能のみを実装して、入力しか依存関係をもたないようにシンプルにすべきという基本概念がある。その基本概念をちゃんと理解できていないと、設計のアンチパターンの1つとして、渡すパラメーターがどんどん増えていってしまうことに気付いた。まずは既存の処理やフローを変えずに設計を見直したのでそうなってしまっている。また後で時間があったら、インターフェースを明確にして根本的な設計を見直してもよいかもしれない。</description><content>&lt;p>2時ぐらいに寝て起きたかどうかあまり覚えていないが7時に起きた。あまり寝た気がしない。&lt;/p>
&lt;h2 id="エージェントアプリケーション開発">エージェントアプリケーション開発&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0806/#syncrepl-を使ったエージェントアプリケーション開発">昨日の続き&lt;/a> 。一晩寝かした甲斐があったのかどうか、意識的にはわからないが、少なくともつまづくことなく1つずつ設計の見直しや処理をパラメーター化していって一通りプロトコルの差異以外のところは整理できた。今日は自分のコードを書く余裕はなかったけれど、1日かけて既存の設計の見直しを終えられたことをうまくいったと自分で肯定しておこうと思う (他人からみたらそうじゃない可能性はある) 。&lt;/p>
&lt;p>関数は1つの機能のみを実装して、入力しか依存関係をもたないようにシンプルにすべきという基本概念がある。その基本概念をちゃんと理解できていないと、設計のアンチパターンの1つとして、渡すパラメーターがどんどん増えていってしまうことに気付いた。まずは既存の処理やフローを変えずに設計を見直したのでそうなってしまっている。また後で時間があったら、インターフェースを明確にして根本的な設計を見直してもよいかもしれない。&lt;/p></content></item><item><title>真夏の休出 第1週</title><link>/diary/posts/2023/0806/</link><pubDate>Sun, 06 Aug 2023 12:23:17 +0900</pubDate><guid>/diary/posts/2023/0806/</guid><description>2時に寝て6時に起きてだらだらしてたらいつの間にか2度寝して9時に起きた。8月は開発の佳境なので基本的には土日を働く予定。
晩ご飯を外食して、夕方から NieR:Automata Ver1.1a というアニメが2期決定というニュースをたまたまみて、1期のコンテンツを見始めた。品質の高い作品だとは思うけれど、世界観 (設定) が私の頭の中のなにかとあわない。世界観の違和感や矛盾を受け入れ難いものがあって引っかかりを覚えるような作品だった。もともとゲームが原作らしい。人によって評価が分かれそうに思えた。
事例紹介のたたき台 先日のプレスリリース の続き。こういった会社の正式な文章を書くのは、その労力以上に面倒臭さが上回って後回しにしてしまう。簡潔な文章なので、過去の体裁やフォーマットなどをみながらやればすぐにできた。今回は私はマネージャーとしてプロダクト開発しているので、うちが作ったんよ的なノリでちょっと前のめりにプロダクト紹介をしてみた。私がもっている課題管理のノウハウを駆使して開発プロジェクトをうまくまわした工夫も書きたいところだけど、そうすると事例紹介と課題管理のプラクティスの話しがごっちゃになって訳の分からん記事になってしまう。事例紹介とは別に、今回の事例をベースに課題管理のプラクティスの記事を別途ブログに書こうと思った。他にもお客さん先のテックブログにも書かないといけない記事が2つ溜まっている。私は文章を書くのが遅いからなかなか捌けない。日記を書いて練習しているうちに早く書けるようにならないかな？と期待しているが、まだまだそんな予兆はみえない。
syncrepl を使ったエージェントアプリケーション開発 昨日のレビュー対応したものがマージされた 。それをもって自分たちのアプリケーションのコードを書かないといけない。以前に ldap の dirsync というプロトコル をメンバーが実装して、それを使ったアプリケーションのコードがある。その実装といくつか共通部分を再利用しつつ、プロトコルの違うところだけを追加できるようにしたい。既存のエージェントアプリケーションのソースを読みながら、どういう風に設計していくかのイメージを膨らませておいた。今日のところはコードを読んで頭の中に入れて考えるだけ。この状態で一晩寝かすと、寝ている間に脳が無意識に考えてくれて効率がよいはず。これは休日の時間のよい使い方だと思う。</description><content>&lt;p>2時に寝て6時に起きてだらだらしてたらいつの間にか2度寝して9時に起きた。8月は開発の佳境なので基本的には土日を働く予定。&lt;/p>
&lt;p>晩ご飯を外食して、夕方から &lt;a href="https://nierautomata-anime.com/">NieR:Automata Ver1.1a&lt;/a> というアニメが2期決定というニュースをたまたまみて、1期のコンテンツを見始めた。品質の高い作品だとは思うけれど、世界観 (設定) が私の頭の中のなにかとあわない。世界観の違和感や矛盾を受け入れ難いものがあって引っかかりを覚えるような作品だった。もともとゲームが原作らしい。人によって評価が分かれそうに思えた。&lt;/p>
&lt;h2 id="事例紹介のたたき台">事例紹介のたたき台&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0801/">先日のプレスリリース&lt;/a> の続き。こういった会社の正式な文章を書くのは、その労力以上に面倒臭さが上回って後回しにしてしまう。簡潔な文章なので、過去の体裁やフォーマットなどをみながらやればすぐにできた。今回は私はマネージャーとしてプロダクト開発しているので、うちが作ったんよ的なノリでちょっと前のめりにプロダクト紹介をしてみた。私がもっている課題管理のノウハウを駆使して開発プロジェクトをうまくまわした工夫も書きたいところだけど、そうすると事例紹介と課題管理のプラクティスの話しがごっちゃになって訳の分からん記事になってしまう。事例紹介とは別に、今回の事例をベースに課題管理のプラクティスの記事を別途ブログに書こうと思った。他にもお客さん先のテックブログにも書かないといけない記事が2つ溜まっている。私は文章を書くのが遅いからなかなか捌けない。日記を書いて練習しているうちに早く書けるようにならないかな？と期待しているが、まだまだそんな予兆はみえない。&lt;/p>
&lt;h2 id="syncrepl-を使ったエージェントアプリケーション開発">syncrepl を使ったエージェントアプリケーション開発&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0805/#syncrepl-のレビュー対応">昨日のレビュー対応したものがマージされた&lt;/a> 。それをもって自分たちのアプリケーションのコードを書かないといけない。以前に &lt;a href="/diary/diary/posts/2023/0522/#メンバーの-oss-へのコントリビュート">ldap の dirsync というプロトコル&lt;/a> をメンバーが実装して、それを使ったアプリケーションのコードがある。その実装といくつか共通部分を再利用しつつ、プロトコルの違うところだけを追加できるようにしたい。既存のエージェントアプリケーションのソースを読みながら、どういう風に設計していくかのイメージを膨らませておいた。今日のところはコードを読んで頭の中に入れて考えるだけ。この状態で一晩寝かすと、寝ている間に脳が無意識に考えてくれて効率がよいはず。これは休日の時間のよい使い方だと思う。&lt;/p></content></item><item><title>go-ldap の syncrepl 機能のレビュー対応</title><link>/diary/posts/2023/0805/</link><pubDate>Sat, 05 Aug 2023 11:38:14 +0900</pubDate><guid>/diary/posts/2023/0805/</guid><description>1時に寝て何度か起きて7時に起きた。今週もよく働いたからバテバテ。
ストレッチ これまでも慢性的に右足全般は悪かったのだけれども、今日は左足の張りがある (痛い) ところと右足の張りがある (痛い) ところが全然違うことに気付いた。トレーナーさんによるとさらに今日はいつもより上半身の腕も硬かったという話しだった。これから1ヶ月か、1ヶ月半ほどは開発の佳境で忙しくなる (座っている時間が長くなる) ので体調がよくなることはないと思う。今日の開脚幅は開始前155cmで、ストレッチ後158cmだった。普段通りなのでこの調子なら問題ない。
syncrepl のレビュー対応 先日のレビュー対応 の修正。通信プロトコルの処理を実装するには想定したパケット (byte 列) をデコードしないといけない。そのために誤っているとすぐに panic する。開発しているときは既存の処理の振る舞いと競合してあちこちで panic してデバッグが容易ではなかった。そこで既存処理とは分割して先ずは実装した。その後、プロトコルの仕様と対応するパケットを理解してしまえば、どこを直せばよいか把握できているので既存の処理と共存させることはとくに難しくなかった。私の先入観であちこち変更しないといけないのでは？と思い込んでしまっていたのをレビューアの指摘で気付くことができた。感謝。
Add syncrepl (rfc-4533) consumer (persistent search) #447 これでレビュー対応を終えた。pr を送ってから2週間放置されていた。そこでレビューしてくれないかとお願いしたら2人のメンテナーがすぐにレビューしてくれた。これは 非同期検索 でのやり取りを経て私の信頼があがっていたためと思われる。この機能はお仕事の開発にも使う。ちょうどいま開発の佳境に際して花を添えるよいタイミングと言える。
進捗報告の資料作り 気付いたら来週は出張の週になる。月例報告のための資料を作っていないことに今日気付いて慌てて資料を作った。いまは開発の佳境の時期なので、開発方法論に新しいことを試しているわけでもないし、この1ヶ月のやったことの進捗を報告するだけ。内容は固まっていて資料を作るのはそんなに大変ではない。理想的なスケジュールだと9月上旬で開発完了を目指していたが、それは無理そうだと判断した。その次のイテレーションで完了できるように目指す。さらに追加でバッファのイテレーションももう1つある (と私が勝手に思っている) 。2つイテレーションを伸ばすと開発は1ヶ月の遅延となる。このぐらいのブレは私の中では許容範囲だけれども、一般の会社だと認められるのかどうか、開発マネジメントの機微によって分かれるのかもしれない。</description><content>&lt;p>1時に寝て何度か起きて7時に起きた。今週もよく働いたからバテバテ。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>これまでも慢性的に右足全般は悪かったのだけれども、今日は左足の張りがある (痛い) ところと右足の張りがある (痛い) ところが全然違うことに気付いた。トレーナーさんによるとさらに今日はいつもより上半身の腕も硬かったという話しだった。これから1ヶ月か、1ヶ月半ほどは開発の佳境で忙しくなる (座っている時間が長くなる) ので体調がよくなることはないと思う。今日の開脚幅は開始前155cmで、ストレッチ後158cmだった。普段通りなのでこの調子なら問題ない。&lt;/p>
&lt;h2 id="syncrepl-のレビュー対応">syncrepl のレビュー対応&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0804/#syncrepl-機能の-pr-の続き">先日のレビュー対応&lt;/a> の修正。通信プロトコルの処理を実装するには想定したパケット (byte 列) をデコードしないといけない。そのために誤っているとすぐに panic する。開発しているときは既存の処理の振る舞いと競合してあちこちで panic してデバッグが容易ではなかった。そこで既存処理とは分割して先ずは実装した。その後、プロトコルの仕様と対応するパケットを理解してしまえば、どこを直せばよいか把握できているので既存の処理と共存させることはとくに難しくなかった。私の先入観であちこち変更しないといけないのでは？と思い込んでしまっていたのをレビューアの指摘で気付くことができた。感謝。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/go-ldap/ldap/pull/447">Add syncrepl (rfc-4533) consumer (persistent search) #447&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>これでレビュー対応を終えた。pr を送ってから2週間放置されていた。そこでレビューしてくれないかとお願いしたら2人のメンテナーがすぐにレビューしてくれた。これは &lt;a href="/diary/diary/posts/2023/0703/#非同期の-ldap-検索の-api">非同期検索&lt;/a> でのやり取りを経て私の信頼があがっていたためと思われる。この機能はお仕事の開発にも使う。ちょうどいま開発の佳境に際して花を添えるよいタイミングと言える。&lt;/p>
&lt;h2 id="進捗報告の資料作り">進捗報告の資料作り&lt;/h2>
&lt;p>気付いたら来週は出張の週になる。月例報告のための資料を作っていないことに今日気付いて慌てて資料を作った。いまは開発の佳境の時期なので、開発方法論に新しいことを試しているわけでもないし、この1ヶ月のやったことの進捗を報告するだけ。内容は固まっていて資料を作るのはそんなに大変ではない。理想的なスケジュールだと9月上旬で開発完了を目指していたが、それは無理そうだと判断した。その次のイテレーションで完了できるように目指す。さらに追加でバッファのイテレーションももう1つある (と私が勝手に思っている) 。2つイテレーションを伸ばすと開発は1ヶ月の遅延となる。このぐらいのブレは私の中では許容範囲だけれども、一般の会社だと認められるのかどうか、開発マネジメントの機微によって分かれるのかもしれない。&lt;/p></content></item><item><title>人事を尽くして天命を</title><link>/diary/posts/2023/0804/</link><pubDate>Fri, 04 Aug 2023 00:51:41 +0900</pubDate><guid>/diary/posts/2023/0804/</guid><description>3時に寝て6時に起きて7時に起きた。夜更しして youtube の動画をみてた。今日も差分比較の開発というよりは、既存の id 連携の機能の調査を主にしていた。ms の azure の api とか、振る舞いが怪し過ぎて本当にひどい。
ホリエモンの動画 たまたまみかけて中野さんが出演していたから夜中にみてた。ホリエモンの動画に出ているのでいまやときの人って感じがする。中野さんによると、ビッグモーターの問題は1年前から取り上げていたらしく、さらにいま問題になっているのとは別の、営業の詐欺っぽい売り方 (中野さんは元営業らしい) に懸念を表明していたようだ。いま発生している問題は板金部門によるものなので、もしかしたら今後に指摘されていくのかもしれない。そして、たまたま本を書いていた時期と重なって出版もするらしい。この方の話を聞いていると、ちゃんと準備して勉強して、たくさん働いて、やることをやって、いまよい時を得たようにみえる。こういう働き方を私も目指したい。出版されたら本を買って読んでみようと思う。
syncrepl 機能の pr の続き go-ldap への syncrepl の pr の続き。いまお仕事の開発に忙しくてまったくこちらのレビュー対応をする余裕はない。メンテナーのうちの1人が approve してくれた。もう1人はコードを一元管理できるようにしてほしいということなので週末にその対応をする。普通の検索と syncrepl を使った persistent search を同じコードで保守するのが本当に保守コストを下げるのかどうか、私はやや懐疑的なのだけれども、メンテナーから単一のコードですべてを管理したいという要望があるのでその意見自体には従うつもり。既存の処理に影響を与えないよう、またレビューしやすいように分割して開発して pr を送ったものの、それを1つに統合するというタスクが残課題となる。</description><content>&lt;p>3時に寝て6時に起きて7時に起きた。夜更しして youtube の動画をみてた。今日も差分比較の開発というよりは、既存の id 連携の機能の調査を主にしていた。ms の azure の api とか、振る舞いが怪し過ぎて本当にひどい。&lt;/p>
&lt;h2 id="ホリエモンの動画">ホリエモンの動画&lt;/h2>
&lt;p>たまたまみかけて中野さんが出演していたから夜中にみてた。ホリエモンの動画に出ているのでいまやときの人って感じがする。中野さんによると、ビッグモーターの問題は1年前から取り上げていたらしく、さらにいま問題になっているのとは別の、営業の詐欺っぽい売り方 (中野さんは元営業らしい) に懸念を表明していたようだ。いま発生している問題は板金部門によるものなので、もしかしたら今後に指摘されていくのかもしれない。そして、たまたま本を書いていた時期と重なって出版もするらしい。この方の話を聞いていると、ちゃんと準備して勉強して、たくさん働いて、やることをやって、いまよい時を得たようにみえる。こういう働き方を私も目指したい。出版されたら本を買って読んでみようと思う。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/nKpGfTZC_kM" allowfullscreen title="ビッグモーターの不正はなぜ生まれた？闇が深すぎる業界の手口を元幹部・中野優作さんが語る【生配信ダイジェスト】">&lt;/iframe>
&lt;/div>
&lt;h2 id="syncrepl-機能の-pr-の続き">syncrepl 機能の pr の続き&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0719/#syncrepl-機能の実装">go-ldap への syncrepl&lt;/a> の pr の続き。いまお仕事の開発に忙しくてまったくこちらのレビュー対応をする余裕はない。メンテナーのうちの1人が approve してくれた。もう1人はコードを一元管理できるようにしてほしいということなので週末にその対応をする。普通の検索と syncrepl を使った persistent search を同じコードで保守するのが本当に保守コストを下げるのかどうか、私はやや懐疑的なのだけれども、メンテナーから単一のコードですべてを管理したいという要望があるのでその意見自体には従うつもり。既存の処理に影響を与えないよう、またレビューしやすいように分割して開発して pr を送ったものの、それを1つに統合するというタスクが残課題となる。&lt;/p></content></item><item><title>社員の給与は最低賃金より高いのでは？</title><link>/diary/posts/2023/0803/</link><pubDate>Thu, 03 Aug 2023 20:27:39 +0900</pubDate><guid>/diary/posts/2023/0803/</guid><description>晩ご飯を食べるために20時頃に帰ってきて晩ご飯食べて21時過ぎからそのままだらだら寝てた。起きたら23時ぐらいであれ？と思ってその後も2-3時間ごとに起きたりもしながら寝てた。差分比較の開発が半分は過ぎたけれど、調査のコストも大きくてまだ継続している。
インフレ研究会 久しぶりに エンジニアのためのインフレ研究会 #7 に参加した。話している内容を聞きながら普通にお仕事してた。こういう軽い雑談を聞きながら作業をするのは気楽でよい。雑談の話題の1つに最低賃金の話しが出た。私の感覚では時給労働者だからアルバイトやパートのスタッフの給料があがるのが主なのかな？と考えていたけど、正社員にも影響あるでしょうという話しになっていた。
最低賃金 全国平均で時給1002円に 過去最大の41円引き上げ 例えば東京だと1080円になるらしい。仮にこの金額で給与を計算すると 8 * 20 * 1080 = 172,800 円になる。学卒者の初任賃金 をみると、令和5年の学歴別初任給が次になる。高卒者の初任給も最低賃金よりは高く設定されている。
大学: 212,500 円 短大: 200,000 円 専修: 200,000 円 高校: 183,300 円 この統計が世の中のすべてではないのかもしれないけど、一般論として社員の給与が最低賃金より下回るといったことは起きないのではないか？と私は考えている。もちろんいろいろな税金を支払うと手取りはもっと低くなってしまうのはあるけれど、それはまた別の問題。</description><content>&lt;p>晩ご飯を食べるために20時頃に帰ってきて晩ご飯食べて21時過ぎからそのままだらだら寝てた。起きたら23時ぐらいであれ？と思ってその後も2-3時間ごとに起きたりもしながら寝てた。差分比較の開発が半分は過ぎたけれど、調査のコストも大きくてまだ継続している。&lt;/p>
&lt;h2 id="インフレ研究会">インフレ研究会&lt;/h2>
&lt;p>久しぶりに &lt;a href="https://inflation.connpass.com/event/291691/">エンジニアのためのインフレ研究会 #7&lt;/a> に参加した。話している内容を聞きながら普通にお仕事してた。こういう軽い雑談を聞きながら作業をするのは気楽でよい。雑談の話題の1つに最低賃金の話しが出た。私の感覚では時給労働者だからアルバイトやパートのスタッフの給料があがるのが主なのかな？と考えていたけど、正社員にも影響あるでしょうという話しになっていた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www3.nhk.or.jp/news/html/20230728/k10014145061000.html">最低賃金 全国平均で時給1002円に 過去最大の41円引き上げ&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>例えば東京だと1080円になるらしい。仮にこの金額で給与を計算すると 8 * 20 * 1080 = 172,800 円になる。&lt;a href="https://jsite.mhlw.go.jp/tokyo-roudoukyoku/jirei_toukei/_121239.html">学卒者の初任賃金&lt;/a> をみると、令和5年の学歴別初任給が次になる。高卒者の初任給も最低賃金よりは高く設定されている。&lt;/p>
&lt;ul>
&lt;li>大学: 212,500 円&lt;/li>
&lt;li>短大: 200,000 円&lt;/li>
&lt;li>専修: 200,000 円&lt;/li>
&lt;li>高校: 183,300 円&lt;/li>
&lt;/ul>
&lt;p>この統計が世の中のすべてではないのかもしれないけど、一般論として社員の給与が最低賃金より下回るといったことは起きないのではないか？と私は考えている。もちろんいろいろな税金を支払うと手取りはもっと低くなってしまうのはあるけれど、それはまた別の問題。&lt;/p></content></item><item><title>空調工事への期待</title><link>/diary/posts/2023/0802/</link><pubDate>Wed, 02 Aug 2023 08:03:16 +0900</pubDate><guid>/diary/posts/2023/0802/</guid><description>1時に寝て3時に起きて6時半に起きた。差分比較の開発をやってもやっても終わらなくていろいろ忙しい。
空調工事のお知らせ 先日の 暑さ対策委員会 の続き。
3週間前から運営会社に毎週電話してその後の進捗を聞いたりしていた。毎回違う担当者が出て、なにかしら調査や対応をやっている的な話しを聞きつつ、また来週に進捗を連絡しますと言われて、一度も進捗報告がきたことがない。3回無視されているのでそろそろ怒ってもいいんじゃないかと思っていたところ。ふとエレベーターの横に空調工事をするという張り紙があった。8月8日の夜間に「空調冷媒切替工事」を行うらしい。軽く調べたらエアコンの効きが悪化する原因の1つとして冷媒の機能不全はありえるらしい。調査してそのことが原因として判明したのか、疑わしいところだから試しに工事してみるのか、そういったことを先方から連絡してきてほしい。また3週間前には断熱のブラインドも導入すると言ってたのだけど、それは一体どうなったのか。8月8日はちょうど東京へ出張するタイミングなのですぐに検証することはできない。</description><content>&lt;p>1時に寝て3時に起きて6時半に起きた。差分比較の開発をやってもやっても終わらなくていろいろ忙しい。&lt;/p>
&lt;h2 id="空調工事のお知らせ">空調工事のお知らせ&lt;/h2>
&lt;p>先日の &lt;a href="/diary/diary/posts/2023/0725/">暑さ対策委員会&lt;/a> の続き。&lt;/p>
&lt;p>3週間前から運営会社に毎週電話してその後の進捗を聞いたりしていた。毎回違う担当者が出て、なにかしら調査や対応をやっている的な話しを聞きつつ、また来週に進捗を連絡しますと言われて、一度も進捗報告がきたことがない。3回無視されているのでそろそろ怒ってもいいんじゃないかと思っていたところ。ふとエレベーターの横に空調工事をするという張り紙があった。8月8日の夜間に「空調冷媒切替工事」を行うらしい。軽く調べたらエアコンの効きが悪化する原因の1つとして冷媒の機能不全はありえるらしい。調査してそのことが原因として判明したのか、疑わしいところだから試しに工事してみるのか、そういったことを先方から連絡してきてほしい。また3週間前には断熱のブラインドも導入すると言ってたのだけど、それは一体どうなったのか。8月8日はちょうど東京へ出張するタイミングなのですぐに検証することはできない。&lt;/p></content></item><item><title>プロダクトのプレスリリース</title><link>/diary/posts/2023/0801/</link><pubDate>Tue, 01 Aug 2023 23:06:17 +0900</pubDate><guid>/diary/posts/2023/0801/</guid><description>昨日は普通に帰ってきて晩ご飯を食べてそのまま休んでいた。23時に寝て何度か起きて7時に起きた。昨日の続き。まだ差分比較の開発を継続している。
プレスリリース 昨年の11月から開発しているプロダクトのプレスリリースが出た。4月末で1次リリースして、もうすぐ2次リリースになるタイミングなので2次リリースの機能をもってお客さんに出せるレベルになってきたという判断なのかもしれない。
なんにせよ、自分がやったことの成果がカタチとなってみえたことでちょっと嬉しかった。また近いうちに会社の事例紹介も書く。
オンプレミス環境のActive DirectoryやOpenLDAPからSaaS（クラウド環境）へユーザー情報を自動で連携し、シングルサインオン環境を効率的に運用するための新製品をリリース ストレッチ 土日に実家へ帰っていたのでその代替として夜にストレッチへ行ってきた。19時40分からで私が最後のお客さんだった。開発の佳境で毎日忙しく机に向かっているのと、週末に実家へ帰ってなんやかんやで作業していたせいか、すねの外側の筋やふくらはぎの筋がぱんぱんになっていてかなり硬かった。今日の開脚幅は開始前151cmで、ストレッチ後157cmだった。あまり調子はよくなかったものの、いつもと違うリズムでストレッチへ行ったのでまぁいっかという所感。トレーナーさんにもう8月に入りましたねと言われて時間の過ぎたるの早さを感じる。</description><content>&lt;p>昨日は普通に帰ってきて晩ご飯を食べてそのまま休んでいた。23時に寝て何度か起きて7時に起きた。昨日の続き。まだ差分比較の開発を継続している。&lt;/p>
&lt;h2 id="プレスリリース">プレスリリース&lt;/h2>
&lt;p>昨年の11月から開発しているプロダクトのプレスリリースが出た。4月末で1次リリースして、もうすぐ2次リリースになるタイミングなので2次リリースの機能をもってお客さんに出せるレベルになってきたという判断なのかもしれない。&lt;/p>
&lt;p>なんにせよ、自分がやったことの成果がカタチとなってみえたことでちょっと嬉しかった。また近いうちに会社の事例紹介も書く。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prtimes.jp/main/html/rd/p/000000016.000038710.html">オンプレミス環境のActive DirectoryやOpenLDAPからSaaS（クラウド環境）へユーザー情報を自動で連携し、シングルサインオン環境を効率的に運用するための新製品をリリース&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>土日に実家へ帰っていたのでその代替として夜にストレッチへ行ってきた。19時40分からで私が最後のお客さんだった。開発の佳境で毎日忙しく机に向かっているのと、週末に実家へ帰ってなんやかんやで作業していたせいか、すねの外側の筋やふくらはぎの筋がぱんぱんになっていてかなり硬かった。今日の開脚幅は開始前151cmで、ストレッチ後157cmだった。あまり調子はよくなかったものの、いつもと違うリズムでストレッチへ行ったのでまぁいっかという所感。トレーナーさんにもう8月に入りましたねと言われて時間の過ぎたるの早さを感じる。&lt;/p></content></item></channel></rss>