<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2023/02 on forest nook</title><link>/diary/dates/2023/02/</link><description>Recent content in 2023/02 on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/dates/2023/02/index.xml" rel="self" type="application/rss+xml"/><item><title>cookei の secure 属性と localhost</title><link>/diary/posts/2023/0213/</link><pubDate>Mon, 13 Feb 2023 19:40:54 +0900</pubDate><guid>/diary/posts/2023/0213/</guid><description>0時に寝て6時半に起きて7時半に起きて9時過ぎに起きた。普通は明け方に2度寝して起きるのになぜか3度寝して寝坊した。慌てて準備してオフィス行って業務開始が9時半をまわってしまった。年に1回ぐらい意味なく寝坊することもある。こういうことがあるから他人がなにか意図しない失敗しても寛容になれる。
cookie の secure 属性 以前たまたま Meety脆弱性 2022-11 をみたときに認証 cookie に secure 属性が使われていないという指摘をみかけた。http でログインするときに cookie にセッション情報を保存してしまうと、平文でセッション情報が流れてしまうのでセキュリティ的によくない。具体的な攻撃方法としては wifi の通信をパケットキャプチャするとか、ルーター (カフェの無料 wifi とか) で中間者攻撃 (man in the middle) などのセキュリティ上の懸念がある。その対策としては cookie の secure 属性を付けておくと、http のときはセッション情報をブラウザに保存しなくなるのでログインできなくなる代わりにそういった攻撃から守れるようになる。フロントエンドのセキュリティのお作法みたいなものにみえたので覚えていた。
ちょうど管理画面のログイン機能をメンバーに実装してもらったところなのでその対応をしているかどうかをメンバーに確認していた。メンバーもその認識はもっていて環境変数の設定で切り替えられるように実装していた。テスト環境にデプロイするときにその設定を有効にしてもらって、私が意図した振る舞いをしているかどうか、テスト環境にアクセスして検証していた。しかし、secure 属性が付いていることは確認したものの、http でもセッション情報がブラウザに保存されていて、あれー？って感じで検証していた。メンバーは保存されないという。
localhost は例外
ブラウザによっては localhost だと httpsの要件が無視されるとのことでした。
CookieのSameSite属性とSecure属性について
この記事によると localhost だと適用外になるブラウザがあるんだと気付いた。たまたま私が ssh の port-forwarding 経由でテスト環境にアクセスしていたので localhost 経由のアクセスになっていた。これは開発時は http でも動くようにすることで環境変数で切り替えるといった、それ自体がセキュリティインシデントになり得る設定をもたないようにするための、ブラウザベンダーの配慮だろう。chrome はそういう振る舞いをしていることを私は確認できた。</description><content>&lt;p>0時に寝て6時半に起きて7時半に起きて9時過ぎに起きた。普通は明け方に2度寝して起きるのになぜか3度寝して寝坊した。慌てて準備してオフィス行って業務開始が9時半をまわってしまった。年に1回ぐらい意味なく寝坊することもある。こういうことがあるから他人がなにか意図しない失敗しても寛容になれる。&lt;/p>
&lt;h2 id="cookie-の-secure-属性">cookie の secure 属性&lt;/h2>
&lt;p>以前たまたま &lt;a href="https://gist.github.com/mala/39650fd9cb41bf58d305a8b311b31ff1">Meety脆弱性 2022-11&lt;/a> をみたときに認証 cookie に secure 属性が使われていないという指摘をみかけた。http でログインするときに cookie にセッション情報を保存してしまうと、平文でセッション情報が流れてしまうのでセキュリティ的によくない。具体的な攻撃方法としては wifi の通信をパケットキャプチャするとか、ルーター (カフェの無料 wifi とか) で中間者攻撃 (man in the middle) などのセキュリティ上の懸念がある。その対策としては cookie の secure 属性を付けておくと、http のときはセッション情報をブラウザに保存しなくなるのでログインできなくなる代わりにそういった攻撃から守れるようになる。フロントエンドのセキュリティのお作法みたいなものにみえたので覚えていた。&lt;/p>
&lt;p>ちょうど管理画面のログイン機能をメンバーに実装してもらったところなのでその対応をしているかどうかをメンバーに確認していた。メンバーもその認識はもっていて環境変数の設定で切り替えられるように実装していた。テスト環境にデプロイするときにその設定を有効にしてもらって、私が意図した振る舞いをしているかどうか、テスト環境にアクセスして検証していた。しかし、secure 属性が付いていることは確認したものの、http でもセッション情報がブラウザに保存されていて、あれー？って感じで検証していた。メンバーは保存されないという。&lt;/p>
&lt;blockquote>
&lt;p>localhost は例外&lt;/p>
&lt;p>ブラウザによっては localhost だと httpsの要件が無視されるとのことでした。&lt;/p>
&lt;p>&lt;a href="https://blog.prevent.co.jp/entry/2022/05/20/094427">CookieのSameSite属性とSecure属性について&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>この記事によると localhost だと適用外になるブラウザがあるんだと気付いた。たまたま私が ssh の port-forwarding 経由でテスト環境にアクセスしていたので localhost 経由のアクセスになっていた。これは開発時は http でも動くようにすることで環境変数で切り替えるといった、それ自体がセキュリティインシデントになり得る設定をもたないようにするための、ブラウザベンダーの配慮だろう。chrome はそういう振る舞いをしていることを私は確認できた。&lt;/p></content></item><item><title>納骨</title><link>/diary/posts/2023/0212/</link><pubDate>Sun, 12 Feb 2023 22:01:47 +0900</pubDate><guid>/diary/posts/2023/0212/</guid><description>昨日から実家に帰ってた。0時に寝て5時に起きた。珍しく親が寝坊して5時半頃まで起きてこなかったものの、私の方が早めに起きてスマホをみながらだらだらしてた。朝から法要の準備をしたりしていた。
49日 (納骨) 9時40分頃には参加者が全員集まっていた。今日の参加者は15人。10時からの予定だったものの、住職も10分前には到着されて全員揃っていたので予定時刻より少し早く始めた。いつも通りのお経を住職にあげていただく。30分ほど。その後に住職からの法話がある。今日は49日なのでその由来について話された。仏教では亡くなって49日目に亡くなった方が仏の元へ向かうとされている。なぜ49日なの？という由来にいくつか諸説があるといったお話をされた。
お釈迦様が瞑想して悟りを開いたのにかかった日数が49日だったとか お釈迦様がそれを数えていたわけではなく、弟子が数えていたのでそれが正しいのか後世の創作なのかはわからない 昔のインドは7進法が採用されていて7 * 7 = 49日が重要な意味をもったとか 古くから1週間は7日とされている 仏教に限らずキリスト教においても神は6日で世界を創造して7日目に休んだというので7という数字が意味をもつのだろう 土葬の時代、土に埋めるものの、そのままだと土地を有効活用できないため、埋めて白骨化するのを待って掘り返すのが49日だったとか 実際にうちらは土葬をしたことがないので本当に49日で白骨化するかはわからない 土を丸く盛り上げて作る墓「土饅頭」ーー穴を掘らずに土を盛る理由とは？ その後、お墓へ移動して納骨になる。お墓の前で骨壺から納骨袋に骨を入れ替えてお墓の中に入れる。お墓がどんな構造をしているか、私が知らなかったので骨を入れるスペースとその開け方を学んだ。住職もお墓まで来てくれて納骨の作業をしている間はお経を唱えていただいた。感謝。
お墓から戻ってきて11時。随分と順調に予定を消化し過ぎて食事どころを12時で予約していたので少し待つことに。11時半から近所の食事どころへ移動して参加者でご飯を食べる。12時前から食事が始まって14時前にはお開きとなった。過去に父とも1-2度来たことがあるお店なので私にとってもやや懐かしかった。量は十分にあったし味もよかったと思う。 料理が出てくる合間がもう少し早くてもよかったと思うぐらいの改善点。料理を配膳するスタッフが2人しかいなかったので人手不足で大変なんだろうと推測できた。
祖父の法要をしていたときはこの倍は参加者がいたように思う。コロナ禍で葬儀が家族葬となり、親戚も近くの濃い人たちだけで行うようになった。参加者数が減ることで調整コストが下がって昔に比べたら簡素化できて楽にはなっている。
帰路 姪が神戸にある大学に通っているので帰りは車で一緒に帰ってきた。祖父の法要をしていた頃、大阪の親戚が車で淡路島に来られていて、私もよくその親戚の車に同乗して一緒に大阪まで帰っていた。その親戚も少し前に亡くなってしまったが、同じようなことを代替わりしてやっていることに気付いた。車なら早く帰れるはずが、運が悪くて月見山 - 湊川間で10分もあれば抜けられるところを1時間の渋滞につかまった。5台の玉突き事故があり1車線規制で渋滞していた。真ん中の2台の車がもっとも潰れていた。事故じゃなくても湊川付近は神戸の中心地なのでやや混雑しがちな印象がある。私が通ったときはまだ事故車があって警察が聴取をしていたので発生直後に近かったのかもしれない。ちょうど 湊川 ICの真横だったので降りるときの事故だったのかもしれない。
もしかしたら事前に渋滞情報を聞いていたら迂回路を選択できたかもしれない。高速バスは阪神高速の3号神戸線が渋滞していると北側の迂回路を使うことがある。だから迂回路の存在は知っていた。帰ってきてから迂回ルートを調べてみた。垂水JCTから神戸に入るには次の2通りの経路がある。
垂水JCT - 名谷JCT - 月見山 - 若宮 - 湊川 - 柳原 - 京橋 - 生田川 垂水JCT - 布施畑(ふせはた)JCT - 白川JCT - 箕谷(みのたに)JCT - (新神戸トンネル) - 布引(ぬのびき)JCT - 新神戸駅 垂水JCTの前で渋滞情報を取得できれば、北側の布施畑JCT経由のルートを選べばよい。今度ナビも操作しながら通ってみる。
明石海峡大橋からの経路選択のご案内</description><content>&lt;p>昨日から実家に帰ってた。0時に寝て5時に起きた。珍しく親が寝坊して5時半頃まで起きてこなかったものの、私の方が早めに起きてスマホをみながらだらだらしてた。朝から法要の準備をしたりしていた。&lt;/p>
&lt;h2 id="49日-納骨">49日 (納骨)&lt;/h2>
&lt;p>9時40分頃には参加者が全員集まっていた。今日の参加者は15人。10時からの予定だったものの、住職も10分前には到着されて全員揃っていたので予定時刻より少し早く始めた。いつも通りのお経を住職にあげていただく。30分ほど。その後に住職からの法話がある。今日は49日なのでその由来について話された。仏教では亡くなって49日目に亡くなった方が仏の元へ向かうとされている。なぜ49日なの？という由来にいくつか諸説があるといったお話をされた。&lt;/p>
&lt;ul>
&lt;li>お釈迦様が瞑想して悟りを開いたのにかかった日数が49日だったとか
&lt;ul>
&lt;li>お釈迦様がそれを数えていたわけではなく、弟子が数えていたのでそれが正しいのか後世の創作なのかはわからない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>昔のインドは7進法が採用されていて7 * 7 = 49日が重要な意味をもったとか
&lt;ul>
&lt;li>古くから1週間は7日とされている&lt;/li>
&lt;li>仏教に限らずキリスト教においても神は6日で世界を創造して7日目に休んだというので7という数字が意味をもつのだろう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>土葬の時代、土に埋めるものの、そのままだと土地を有効活用できないため、埋めて白骨化するのを待って掘り返すのが49日だったとか
&lt;ul>
&lt;li>実際にうちらは土葬をしたことがないので本当に49日で白骨化するかはわからない&lt;/li>
&lt;li>&lt;a href="https://www.sougiya.biz/kiji_detail.php?cid=553">土を丸く盛り上げて作る墓「土饅頭」ーー穴を掘らずに土を盛る理由とは？&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>その後、お墓へ移動して納骨になる。お墓の前で骨壺から納骨袋に骨を入れ替えてお墓の中に入れる。お墓がどんな構造をしているか、私が知らなかったので骨を入れるスペースとその開け方を学んだ。住職もお墓まで来てくれて納骨の作業をしている間はお経を唱えていただいた。感謝。&lt;/p>
&lt;p>お墓から戻ってきて11時。随分と順調に予定を消化し過ぎて食事どころを12時で予約していたので少し待つことに。11時半から近所の食事どころへ移動して参加者でご飯を食べる。12時前から食事が始まって14時前にはお開きとなった。過去に父とも1-2度来たことがあるお店なので私にとってもやや懐かしかった。量は十分にあったし味もよかったと思う。 料理が出てくる合間がもう少し早くてもよかったと思うぐらいの改善点。料理を配膳するスタッフが2人しかいなかったので人手不足で大変なんだろうと推測できた。&lt;/p>
&lt;p>祖父の法要をしていたときはこの倍は参加者がいたように思う。コロナ禍で葬儀が家族葬となり、親戚も近くの濃い人たちだけで行うようになった。参加者数が減ることで調整コストが下がって昔に比べたら簡素化できて楽にはなっている。&lt;/p>
&lt;h2 id="帰路">帰路&lt;/h2>
&lt;p>姪が神戸にある大学に通っているので帰りは車で一緒に帰ってきた。祖父の法要をしていた頃、大阪の親戚が車で淡路島に来られていて、私もよくその親戚の車に同乗して一緒に大阪まで帰っていた。その親戚も少し前に亡くなってしまったが、同じようなことを代替わりしてやっていることに気付いた。車なら早く帰れるはずが、運が悪くて月見山 - 湊川間で10分もあれば抜けられるところを1時間の渋滞につかまった。5台の玉突き事故があり1車線規制で渋滞していた。真ん中の2台の車がもっとも潰れていた。事故じゃなくても湊川付近は神戸の中心地なのでやや混雑しがちな印象がある。私が通ったときはまだ事故車があって警察が聴取をしていたので発生直後に近かったのかもしれない。ちょうど &lt;a href="/diary/diary/posts/2022/0108/#初詣">湊川&lt;/a> ICの真横だったので降りるときの事故だったのかもしれない。&lt;/p>
&lt;p>もしかしたら事前に渋滞情報を聞いていたら迂回路を選択できたかもしれない。高速バスは阪神高速の3号神戸線が渋滞していると北側の迂回路を使うことがある。だから迂回路の存在は知っていた。帰ってきてから迂回ルートを調べてみた。垂水JCTから神戸に入るには次の2通りの経路がある。&lt;/p>
&lt;ul>
&lt;li>垂水JCT - 名谷JCT - 月見山 - 若宮 - 湊川 - 柳原 - 京橋 - 生田川&lt;/li>
&lt;li>垂水JCT - 布施畑(ふせはた)JCT - 白川JCT - 箕谷(みのたに)JCT - (新神戸トンネル) - 布引(ぬのびき)JCT - 新神戸駅&lt;/li>
&lt;/ul>
&lt;p>垂水JCTの前で渋滞情報を取得できれば、北側の布施畑JCT経由のルートを選べばよい。今度ナビも操作しながら通ってみる。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0212_road.png"/>
&lt;/figure>
&lt;ul>
&lt;li>&lt;a href="https://www.jb-honshi.co.jp/customer_index/guide/keiro/">明石海峡大橋からの経路選択のご案内&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>合間の休養</title><link>/diary/posts/2023/0211/</link><pubDate>Sat, 11 Feb 2023 12:17:53 +0900</pubDate><guid>/diary/posts/2023/0211/</guid><description>23時に寝て何度か起きて8時に起きた。疲れていたせいか、いつもよりよく眠れた。18時過ぎぐらいまで調べ物をしていて、それから実家へ車で帰った。初めて夜の高速道路を走ってみたらわりと道がわからなくて怖かった。昼間よりは速度を出せないので夜に帰るならゆっくり帰るのが安全にはよさそう。20時頃には実家について晩ご飯を食べ始めてた。
ストレッチ 今日の開脚幅は開始前156cmで、ストレッチ後160cmだった。 出張帰りだったのもあって腰に張りはあってやや疲労が溜まっている感はあったものの、前月に比べたら全然ましだった。やはり前月が葬儀の後に事務手続きと出張が重なって特別に疲労していたことがわかった。トレーナーさんといつも通りの話をしていた。最近はサッカーの三笘選手が大活躍しているので毎週その話題が定番になっている。
こってり天津飯 天津飯は日本発祥！カニ玉との違いとは によると、天津飯は日本の中華料理屋さんが考えた料理らしい。麻婆春雨と同じ類の料理。
少し前に天下一品の新メニューでこってり天津飯ができた。天津飯は日本の中華料理屋さんならどこでも食べられる料理だが、こってり天津飯は「こってりスープ」がある天下一品でしか食べられない。天津飯というコモディティを、こってりスープという天下一品独自のプロダクトで再発見または再発明したような商品とみなせる。
課題管理という分野もそれ自体はどこにでもある概念やスキル体系でしかないが、うちの会社独自のプロダクトを作ったり、プラクティスを構築できれば、再発明できるんじゃないかとたまたま食べていて思った。いつか課題管理ビジネスが軌道にのってインタビューされるようなことがあったらこってり天津飯を食べていて気付きましたみたいな、カッコいい談話にしたい。</description><content>&lt;p>23時に寝て何度か起きて8時に起きた。疲れていたせいか、いつもよりよく眠れた。18時過ぎぐらいまで調べ物をしていて、それから実家へ車で帰った。初めて夜の高速道路を走ってみたらわりと道がわからなくて怖かった。昼間よりは速度を出せないので夜に帰るならゆっくり帰るのが安全にはよさそう。20時頃には実家について晩ご飯を食べ始めてた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前156cmで、ストレッチ後160cmだった。
出張帰りだったのもあって腰に張りはあってやや疲労が溜まっている感はあったものの、前月に比べたら全然ましだった。やはり前月が葬儀の後に事務手続きと出張が重なって特別に疲労していたことがわかった。トレーナーさんといつも通りの話をしていた。最近はサッカーの三笘選手が大活躍しているので毎週その話題が定番になっている。&lt;/p>
&lt;h2 id="こってり天津飯">こってり天津飯&lt;/h2>
&lt;p>&lt;a href="https://www.cookdoor.jp/chinese-food/dictionary/21228_china_028/">天津飯は日本発祥！カニ玉との違いとは&lt;/a> によると、天津飯は日本の中華料理屋さんが考えた料理らしい。麻婆春雨と同じ類の料理。&lt;/p>
&lt;p>少し前に天下一品の新メニューでこってり天津飯ができた。天津飯は日本の中華料理屋さんならどこでも食べられる料理だが、こってり天津飯は「こってりスープ」がある天下一品でしか食べられない。天津飯というコモディティを、こってりスープという天下一品独自のプロダクトで再発見または再発明したような商品とみなせる。&lt;/p>
&lt;p>課題管理という分野もそれ自体はどこにでもある概念やスキル体系でしかないが、うちの会社独自のプロダクトを作ったり、プラクティスを構築できれば、再発明できるんじゃないかとたまたま食べていて思った。いつか課題管理ビジネスが軌道にのってインタビューされるようなことがあったらこってり天津飯を食べていて気付きましたみたいな、カッコいい談話にしたい。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0211_kotteri.jpg"/>
&lt;/figure></content></item><item><title>windows の調査を開始</title><link>/diary/posts/2023/0210/</link><pubDate>Fri, 10 Feb 2023 15:39:06 +0900</pubDate><guid>/diary/posts/2023/0210/</guid><description>1時に寝て7時過ぎに起きた。やや飲み過ぎて、2日酔いではないけど起きたときは気分が悪かった。
go-winio を触ってみた windows 向けのモジュールを作り直すにあたり、有識者のサポートをお願いしているものの、私も最低限の知識はないとあかんやろと調査を開始した。microsoft/go-winio というライブラリが ms 社のリポジトリで公開されている。公式ならよいのだろうと安易に考えて触ってみたものの、ドキュメントがほとんどなくて、まず使い方がわからん。いまのところ、windows に詳しい人向けのライブラリみたい。ひとまずリポジトリにある pipe_test.go のテストコードを読みながら名前付きパイプを介したプロセス間通信をやってみた。一応は動いたのでここから内部の windows api の仕様や設定などをみていく。その過程で go-winio のチュートリアルがないのであれば、私がテックブログを書いてもよいのかもしれない。
チュートリアル的に書いてみたコードは次の通り。
https://gitlab.com/t2y/misc/-/tree/main/winio-send https://gitlab.com/t2y/misc/-/tree/main/winio-receive 課題管理勉強会 出張のときに毎月の課題管理勉強会。とくにネタが思いつかなかったので エンジニアリング組織論への招待 を題材にしてみた。資料はすでに作ってあった 。私にとっては課題管理をやる意義や価値の大半がこの書籍の中で解説されている。用語や考え方のところでとても参考になるし、いまメンタリングの技術の章を読み直したりもしている。昔はマネージャーやってなかったからその章は読み飛ばしてた。開発組織向けの組織論を解説した書籍でこれ以上のものは、いまのところ、私が読んだ本の中では知らない。4年前に読んだ本を、今回の勉強会を開く機会でまた読み直すきっかけにもなってよかった。本はコンテキストがきれいに構成されているので他の人の所感や意見を聞いたり雑談したりする題材としてもよさそうに思える。</description><content>&lt;p>1時に寝て7時過ぎに起きた。やや飲み過ぎて、2日酔いではないけど起きたときは気分が悪かった。&lt;/p>
&lt;h2 id="go-winio-を触ってみた">go-winio を触ってみた&lt;/h2>
&lt;p>windows 向けのモジュールを作り直すにあたり、有識者のサポートをお願いしているものの、私も最低限の知識はないとあかんやろと調査を開始した。&lt;a href="https://github.com/microsoft/go-winio">microsoft/go-winio&lt;/a> というライブラリが ms 社のリポジトリで公開されている。公式ならよいのだろうと安易に考えて触ってみたものの、ドキュメントがほとんどなくて、まず使い方がわからん。いまのところ、windows に詳しい人向けのライブラリみたい。ひとまずリポジトリにある pipe_test.go のテストコードを読みながら名前付きパイプを介したプロセス間通信をやってみた。一応は動いたのでここから内部の windows api の仕様や設定などをみていく。その過程で go-winio のチュートリアルがないのであれば、私がテックブログを書いてもよいのかもしれない。&lt;/p>
&lt;p>チュートリアル的に書いてみたコードは次の通り。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gitlab.com/t2y/misc/-/tree/main/winio-send">https://gitlab.com/t2y/misc/-/tree/main/winio-send&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gitlab.com/t2y/misc/-/tree/main/winio-receive">https://gitlab.com/t2y/misc/-/tree/main/winio-receive&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="課題管理勉強会">課題管理勉強会&lt;/h2>
&lt;p>出張のときに毎月の課題管理勉強会。とくにネタが思いつかなかったので &lt;a href="https://gihyo.jp/book/2018/978-4-7741-9605-3">エンジニアリング組織論への招待&lt;/a> を題材にしてみた。&lt;a href="/diary/diary/posts/2023/0205/">資料はすでに作ってあった&lt;/a> 。私にとっては課題管理をやる意義や価値の大半がこの書籍の中で解説されている。用語や考え方のところでとても参考になるし、いまメンタリングの技術の章を読み直したりもしている。昔はマネージャーやってなかったからその章は読み飛ばしてた。開発組織向けの組織論を解説した書籍でこれ以上のものは、いまのところ、私が読んだ本の中では知らない。4年前に読んだ本を、今回の勉強会を開く機会でまた読み直すきっかけにもなってよかった。本はコンテキストがきれいに構成されているので他の人の所感や意見を聞いたり雑談したりする題材としてもよさそうに思える。&lt;/p></content></item><item><title>リリースの前倒し</title><link>/diary/posts/2023/0209/</link><pubDate>Thu, 09 Feb 2023 08:10:53 +0900</pubDate><guid>/diary/posts/2023/0209/</guid><description>23時に寝て何度か起きて5時半に起きた。
プロジェクトの進捗報告 出張したときの月例報告の3回目。前回の進捗報告はこちら 。1月はバックエンド開発を完了させてフロントエンド開発に着手した。 当初は6ヶ月の開発期間を設けていたものの、1ヶ月前倒しの5ヶ月でフェーズ1の開発を完了させる見通しを報告した。管理画面も機能的にはすでに一通り実装できている。これから2月は使いやすさの ui を改善していくところや品質をあげるためのリファクタリングを行い、3月は運用レベルのテストをしてバグ修正を行う。ソースコードの品質も私がチェックしているので、どういう修正が必要かも予測できていて、十分に余裕のあるスケジュールだと私は考えている。油断も慢心もなく、いまできるだけの知識とスキルをつぎ込んで品質の高いプロダクトに仕上げるのに努める。
先月に宣言した通り、フェーズ1の開発はもう私の中では終わっていて次のフェーズ2への準備や計画をこれから考えていく。業務的に区切りがよいのでフェーズ1で契約終了する可能性もあったけれど、4月以降も開発のマネジメントをしてほしいとのこと。フェーズ1の開発と並行して、余裕をみてフェーズ2以降の計画も立てていく。フェーズ2以降に予定している、少なくともあと2つの機能開発に私は責任をもとうと契約の有無に関係なくもともと考えていた。それらを実装すれば大半のお客さんのニーズにあうプロダクトになるはずなのでそれ以降の開発は引き継いでいいかなと思う。言うても野心的に言えば3ヶ月強といったところか。チームも成長しているので3ヶ月前よりは開発速度が上がっている。
さらにいま私が担当しているプロジェクトとは別に、他にもやってほしいお仕事があるらしい。もしかしたらそれも含めて来季の半期以上のお手伝いになるのかもしれない。しばらく次のお仕事探しはしなくてよい状況にある。3月のリリースを終えたら会社の事例紹介を書きたい。今回は会社として初めてのプロジェクトマネジメントの実績になる。周りにも喧伝していきたい。
出張晩ご飯 たまたま1月末に課題管理についてチャットで議論していたら盛り上がったのでこみやさんと晩ご飯に行ってきた。ざっくばらんに近況やチームのマネジメントについて話してきて楽しかった。19時半過ぎから始めて23時過ぎまで飲んでた。帰路の途中で新宿駅構内で人身事故が発生して、電車が止まってしまい、復旧に1時間ぐらいかかるというのでタクシーで帰った。タクシー料金も region pay で「ただいま東京プラス」のクーポンが使えたので金銭的に損はしなかった。
こみやさんのチームの話しからは、対話重視のスクラムのイベントが si におけるメンバーの教育にもうまくいっているように聞こえた。メンバー間で質問し合うのを促していて、質問者と回答者の双方の理解度をあげることを狙いとしている。質問が現状をふりかえるよいきっかけになっているとのこと。
あとメンバーに自律的に勉強会をしてもらうにはどうしたらいいかという話題も盛り上がった。私もいま毎週勉強会をやっていて、これはよい開発文化を作る上で大事だと思っているものの、いずれメンバーが自律的にやるようになってほしい。いまは私がお手本をみせるという意図もあって勉強会の運営をやっているのだけど、それをどうやってメンバーもできるように巻き込んでいくかを考えている。こみやさんや私が勉強会をやると、一定の水準で運営してしまうから、それがメンバーにとって逆に気後れさせてしまわないかという視点も話したりしていた。勉強会は準備に工数がかかると発表者が大変になって続かなくなるので、毎週やろうと思ったら準備に工数をかけないという仕掛けは重要になる。もしくは情報共有やコミュニケーションの場としての勉強会を考えるならもっと身近な内容を話す場になってもよいのでは？という考え方もある。例えば、最近の時事ネタで関心をもったニュースや技術などを取り上げて雑談するのでもかまわない。
いずれにしても、うちらがやれと指示してしまうと、業務命令として業務だからやっているだけになってしまい、よい開発文化を作るという、結果的に業務に大きな価値をもたらすなにかとは違うものになってしまうのがこの問題の難しいところ。開発をよりよくしたい。技術を深めたい。品質をあげたい。なにかしら開発そのものに対して関心をもって自律的にそういう活動をする開発者を増やしていく。言葉にすればたったこれだけのこと。しかし、このことを教えるのは相当に難しい。まだ私がマネージャーとして働く時間はあるのでこれからも挑戦していきたい。</description><content>&lt;p>23時に寝て何度か起きて5時半に起きた。&lt;/p>
&lt;h2 id="プロジェクトの進捗報告">プロジェクトの進捗報告&lt;/h2>
&lt;p>出張したときの月例報告の3回目。&lt;a href="/diary/diary/posts/2023/0112/">前回の進捗報告はこちら&lt;/a> 。1月はバックエンド開発を完了させてフロントエンド開発に着手した。
当初は6ヶ月の開発期間を設けていたものの、1ヶ月前倒しの5ヶ月でフェーズ1の開発を完了させる見通しを報告した。管理画面も機能的にはすでに一通り実装できている。これから2月は使いやすさの ui を改善していくところや品質をあげるためのリファクタリングを行い、3月は運用レベルのテストをしてバグ修正を行う。ソースコードの品質も私がチェックしているので、どういう修正が必要かも予測できていて、十分に余裕のあるスケジュールだと私は考えている。油断も慢心もなく、いまできるだけの知識とスキルをつぎ込んで品質の高いプロダクトに仕上げるのに努める。&lt;/p>
&lt;p>先月に宣言した通り、フェーズ1の開発はもう私の中では終わっていて次のフェーズ2への準備や計画をこれから考えていく。業務的に区切りがよいのでフェーズ1で契約終了する可能性もあったけれど、4月以降も開発のマネジメントをしてほしいとのこと。フェーズ1の開発と並行して、余裕をみてフェーズ2以降の計画も立てていく。フェーズ2以降に予定している、少なくともあと2つの機能開発に私は責任をもとうと契約の有無に関係なくもともと考えていた。それらを実装すれば大半のお客さんのニーズにあうプロダクトになるはずなのでそれ以降の開発は引き継いでいいかなと思う。言うても野心的に言えば3ヶ月強といったところか。チームも成長しているので3ヶ月前よりは開発速度が上がっている。&lt;/p>
&lt;p>さらにいま私が担当しているプロジェクトとは別に、他にもやってほしいお仕事があるらしい。もしかしたらそれも含めて来季の半期以上のお手伝いになるのかもしれない。しばらく次のお仕事探しはしなくてよい状況にある。3月のリリースを終えたら会社の事例紹介を書きたい。今回は会社として初めてのプロジェクトマネジメントの実績になる。周りにも喧伝していきたい。&lt;/p>
&lt;h2 id="出張晩ご飯">出張晩ご飯&lt;/h2>
&lt;p>たまたま1月末に課題管理についてチャットで議論していたら盛り上がったのでこみやさんと晩ご飯に行ってきた。ざっくばらんに近況やチームのマネジメントについて話してきて楽しかった。19時半過ぎから始めて23時過ぎまで飲んでた。帰路の途中で新宿駅構内で人身事故が発生して、電車が止まってしまい、復旧に1時間ぐらいかかるというのでタクシーで帰った。タクシー料金も region pay で「ただいま東京プラス」のクーポンが使えたので金銭的に損はしなかった。&lt;/p>
&lt;p>こみやさんのチームの話しからは、対話重視のスクラムのイベントが si におけるメンバーの教育にもうまくいっているように聞こえた。メンバー間で質問し合うのを促していて、質問者と回答者の双方の理解度をあげることを狙いとしている。質問が現状をふりかえるよいきっかけになっているとのこと。&lt;/p>
&lt;p>あとメンバーに自律的に勉強会をしてもらうにはどうしたらいいかという話題も盛り上がった。私もいま毎週勉強会をやっていて、これはよい開発文化を作る上で大事だと思っているものの、いずれメンバーが自律的にやるようになってほしい。いまは私がお手本をみせるという意図もあって勉強会の運営をやっているのだけど、それをどうやってメンバーもできるように巻き込んでいくかを考えている。こみやさんや私が勉強会をやると、一定の水準で運営してしまうから、それがメンバーにとって逆に気後れさせてしまわないかという視点も話したりしていた。勉強会は準備に工数がかかると発表者が大変になって続かなくなるので、毎週やろうと思ったら準備に工数をかけないという仕掛けは重要になる。もしくは情報共有やコミュニケーションの場としての勉強会を考えるならもっと身近な内容を話す場になってもよいのでは？という考え方もある。例えば、最近の時事ネタで関心をもったニュースや技術などを取り上げて雑談するのでもかまわない。&lt;/p>
&lt;p>いずれにしても、うちらがやれと指示してしまうと、業務命令として業務だからやっているだけになってしまい、よい開発文化を作るという、結果的に業務に大きな価値をもたらすなにかとは違うものになってしまうのがこの問題の難しいところ。開発をよりよくしたい。技術を深めたい。品質をあげたい。なにかしら開発そのものに対して関心をもって自律的にそういう活動をする開発者を増やしていく。言葉にすればたったこれだけのこと。しかし、このことを教えるのは相当に難しい。まだ私がマネージャーとして働く時間はあるのでこれからも挑戦していきたい。&lt;/p></content></item><item><title>車で行きたい場所</title><link>/diary/posts/2023/0208/</link><pubDate>Wed, 08 Feb 2023 08:10:50 +0900</pubDate><guid>/diary/posts/2023/0208/</guid><description>23時に寝て5時に起きて7時半に起きた。軽く二度寝しようと思ったらちょっと寝坊した。
windows アプリケーション開発に関わる ある windows モジュールの開発をやり直しことにしたのでその仕切り直しのキックオフに参加する。もう10年以上前の sier にいた頃は windows サーバーで oracle を動かしたり、vb6 のアプリケーション開発をやっていたりしたけれど、その後は windows アプリケーションの開発に関わったことはないのでまったく windows サーバーの知見はない。別チームから有識者に入ってもらって既存のモジュールを開発し直すことになった。私が実装するわけではないけれど、せっかくなので最近の windows の振る舞いを調べて仕組みを再確認する機会としたい。
ニッポンの絶景 たまたま帰ったときにテレビでやっていた 林修のニッポンドリル 学者が選ぶ！春に見るべきニッポンの絶景ベスト24 をみた。 コロナ禍がひと段落したらインバウンドも戻るのかなという話題にあう、日本で観光するとよいところを紹介していた。出てくる風景がすごいのもあって、死後の世界だとか、桃源郷だとか、たしかにこんな場所あるんやなと思えておもしろかった。
この中に 兵庫県朝来市の竹田城跡 が出てくる。本題じゃないけど、このサイトの構成がややおかしいと思う。スマホファーストなのは分かるけど、ちゃんとした業者に作ってもらえばよいのにと思ってしまった。閑話休題。竹田城跡は天空の城とも呼ばれる、知る人ぞ知る名勝であることは間違いなくて、私も1度は行ってみたいと考えている。ちょうど車も入手したところなので今年こそは行ってみたいと思う。それでよかったら会社の開発合宿やコミュニティのイベントなどにも応用していきたいと思う。都会にはない、地元のよいところや観光資源を活かして地域に貢献できるようにしたいという想いは歳を経るごとに感謝の気持ちとセットで実感できるようになってきた気がする。</description><content>&lt;p>23時に寝て5時に起きて7時半に起きた。軽く二度寝しようと思ったらちょっと寝坊した。&lt;/p>
&lt;h2 id="windows-アプリケーション開発に関わる">windows アプリケーション開発に関わる&lt;/h2>
&lt;p>ある windows モジュールの開発をやり直しことにしたのでその仕切り直しのキックオフに参加する。もう10年以上前の sier にいた頃は windows サーバーで oracle を動かしたり、vb6 のアプリケーション開発をやっていたりしたけれど、その後は windows アプリケーションの開発に関わったことはないのでまったく windows サーバーの知見はない。別チームから有識者に入ってもらって既存のモジュールを開発し直すことになった。私が実装するわけではないけれど、せっかくなので最近の windows の振る舞いを調べて仕組みを再確認する機会としたい。&lt;/p>
&lt;h2 id="ニッポンの絶景">ニッポンの絶景&lt;/h2>
&lt;p>たまたま帰ったときにテレビでやっていた &lt;a href="https://syufufuu.com/hayasi-haruzekei230208/">林修のニッポンドリル 学者が選ぶ！春に見るべきニッポンの絶景ベスト24&lt;/a> をみた。
コロナ禍がひと段落したらインバウンドも戻るのかなという話題にあう、日本で観光するとよいところを紹介していた。出てくる風景がすごいのもあって、死後の世界だとか、桃源郷だとか、たしかにこんな場所あるんやなと思えておもしろかった。&lt;/p>
&lt;p>この中に &lt;a href="https://www.city.asago.hyogo.jp/takeda/">兵庫県朝来市の竹田城跡&lt;/a> が出てくる。本題じゃないけど、このサイトの構成がややおかしいと思う。スマホファーストなのは分かるけど、ちゃんとした業者に作ってもらえばよいのにと思ってしまった。閑話休題。竹田城跡は天空の城とも呼ばれる、知る人ぞ知る名勝であることは間違いなくて、私も1度は行ってみたいと考えている。ちょうど車も入手したところなので今年こそは行ってみたいと思う。それでよかったら会社の開発合宿やコミュニティのイベントなどにも応用していきたいと思う。都会にはない、地元のよいところや観光資源を活かして地域に貢献できるようにしたいという想いは歳を経るごとに感謝の気持ちとセットで実感できるようになってきた気がする。&lt;/p></content></item><item><title>1週間を管理しようとしない</title><link>/diary/posts/2023/0207/</link><pubDate>Tue, 07 Feb 2023 08:34:05 +0900</pubDate><guid>/diary/posts/2023/0207/</guid><description>1時に寝て5時に起きた。ホテルのテレビを付けっぱなしで寝たら朝のニュースで起きた。なんとなくニュースをみながら7時ぐらいまでのんびりしてた。
1週間のイテレーションはナンセンス？ 毎月行っているマイルストーンのふりかえり。今回で3回目なのでメンバーもだいぶ慣れてきた。11, 12, 1月と3ヶ月に渡って課題管理をメンバーに実践してもらいながら開発してきた。当初、開発のイテレーションを1週間で行うか、2週間で行うかの話し合いで短い方がいいんじゃないかとなり、あまり深く考えずに1週間のイテレーションで開発をまわしてきた。しかし、いまとなってはこれは開発のイテレーションとは違うものになっている。
最初の1ヶ月はメンバーにとって慣れないワークフローだから、1週間のイテレーションでこの issue をやる・やらないといった厳密な取り決めはしなかった。その後、徐々に慣れてきたのを見越して、定例会議のときに issue 一覧をみながら、メンバーに2-3個ぐらいの issue をアサインしたり、issue の優先順位付けを明確にしたりしてきた。必ず issue を完了させるという強い制約を課していないものの、だいたい毎週アサインしたものをメンバーは対応してくれていたので、マネージャーとしての私の視点からもとくに問題はないようにみえた。要はうまくまわっているのでそれ以上の管理をしなくてもいい状態だったと言える。
一方で、本来の課題管理のイテレーションとは異なる開発のワークフローになっていて、それがよいことなのかどうか、私自身にも明確な答えがなかった。それでメンバーに尋ねてみた。いまの1週間単位のイテレーション (開発のワークフロー) をどう思いますか？
メンバーからは、1週間の作業内容を厳密に決めなくてもいいんじゃないかという意見が出た。それは私の考えとも一致していたものの、開発のイテレーションを2週間に伸ばすことについて話しているときに、そうしたとしても、定例会議は毎週やりたいという意見が出た。要件確認や仕様共有のために重要だという。通常、イテレーションの成果共有のために定例会議とイテレーションの長さは一致している。仮にイテレーションを2週間にしたら定例会議は2週間に1回となる。しかし、メンバーの視点からはイテレーションを1週間にするか2週間にするかについて関心はないものの、毎週の定例会議で行っている情報共有は重要だという認識があった。
ここで開発のイテレーションと定例会議の頻度は別にあわせなくてもいいんじゃないかと考えるきっかけを私は得られた。スクラムもスプリントと会議体の頻度はセットになっているのでこの発想はなかった。ちなみにアリエル時代は1つのイテレーションが3ヶ月で定例会議もなかった。そして、うちのチームは1ヶ月のマイルストーンに対してふりかえりをセットにしている。これはもはやイテレーション開発の文脈でいえば、実質うちのチームはマイルストーンと呼んでいる1ヶ月が1つのイテレーションになっていて、1つのイテレーション内に4回の定例会議があるというイテレーション開発のワークフローになっていることに気付いた。課題管理の考え方やワークフローがもっと洗練されていくと、毎週の定例会議をやらなくてもよいようになっていくのが私の経験から自明である。しかし、うちの開発は私も含めて8割以上がフルリモートワークなので、メンバー全員の顔を合わせる機会を作るという観点から毎週の定例会議は大事な場にもなっている。
実際の開発のマネジメントをしてみると、私自身、分かっていなかったことや新たな発見があって、まだまだ自分自身も修行の身であることを実感する。ここでの結論としてわかったことは次の通りで、ロードマップにおける最初のフェーズが完了する3月末までは現状のワークフローを継続してみることに決めた。
開発のイテレーションとして1週間は短過ぎて管理対象としてあわない 開発のイテレーションと定例会議の頻度をあわせなくてもよい フルリモートワークの場合、メンバー全員を集める目的は情報共有だけではない</description><content>&lt;p>1時に寝て5時に起きた。ホテルのテレビを付けっぱなしで寝たら朝のニュースで起きた。なんとなくニュースをみながら7時ぐらいまでのんびりしてた。&lt;/p>
&lt;h2 id="1週間のイテレーションはナンセンス">1週間のイテレーションはナンセンス？&lt;/h2>
&lt;p>毎月行っているマイルストーンのふりかえり。今回で3回目なのでメンバーもだいぶ慣れてきた。11, 12, 1月と3ヶ月に渡って課題管理をメンバーに実践してもらいながら開発してきた。当初、開発のイテレーションを1週間で行うか、2週間で行うかの話し合いで短い方がいいんじゃないかとなり、あまり深く考えずに1週間のイテレーションで開発をまわしてきた。しかし、いまとなってはこれは開発のイテレーションとは違うものになっている。&lt;/p>
&lt;p>最初の1ヶ月はメンバーにとって慣れないワークフローだから、1週間のイテレーションでこの issue をやる・やらないといった厳密な取り決めはしなかった。その後、徐々に慣れてきたのを見越して、定例会議のときに issue 一覧をみながら、メンバーに2-3個ぐらいの issue をアサインしたり、issue の優先順位付けを明確にしたりしてきた。必ず issue を完了させるという強い制約を課していないものの、だいたい毎週アサインしたものをメンバーは対応してくれていたので、マネージャーとしての私の視点からもとくに問題はないようにみえた。要はうまくまわっているのでそれ以上の管理をしなくてもいい状態だったと言える。&lt;/p>
&lt;p>一方で、本来の課題管理のイテレーションとは異なる開発のワークフローになっていて、それがよいことなのかどうか、私自身にも明確な答えがなかった。それでメンバーに尋ねてみた。いまの1週間単位のイテレーション (開発のワークフロー) をどう思いますか？&lt;/p>
&lt;p>メンバーからは、1週間の作業内容を厳密に決めなくてもいいんじゃないかという意見が出た。それは私の考えとも一致していたものの、開発のイテレーションを2週間に伸ばすことについて話しているときに、そうしたとしても、定例会議は毎週やりたいという意見が出た。要件確認や仕様共有のために重要だという。通常、イテレーションの成果共有のために定例会議とイテレーションの長さは一致している。仮にイテレーションを2週間にしたら定例会議は2週間に1回となる。しかし、メンバーの視点からはイテレーションを1週間にするか2週間にするかについて関心はないものの、毎週の定例会議で行っている情報共有は重要だという認識があった。&lt;/p>
&lt;p>ここで開発のイテレーションと定例会議の頻度は別にあわせなくてもいいんじゃないかと考えるきっかけを私は得られた。スクラムもスプリントと会議体の頻度はセットになっているのでこの発想はなかった。ちなみにアリエル時代は1つのイテレーションが3ヶ月で定例会議もなかった。そして、うちのチームは1ヶ月のマイルストーンに対してふりかえりをセットにしている。これはもはやイテレーション開発の文脈でいえば、実質うちのチームはマイルストーンと呼んでいる1ヶ月が1つのイテレーションになっていて、1つのイテレーション内に4回の定例会議があるというイテレーション開発のワークフローになっていることに気付いた。課題管理の考え方やワークフローがもっと洗練されていくと、毎週の定例会議をやらなくてもよいようになっていくのが私の経験から自明である。しかし、うちの開発は私も含めて8割以上がフルリモートワークなので、メンバー全員の顔を合わせる機会を作るという観点から毎週の定例会議は大事な場にもなっている。&lt;/p>
&lt;p>実際の開発のマネジメントをしてみると、私自身、分かっていなかったことや新たな発見があって、まだまだ自分自身も修行の身であることを実感する。ここでの結論としてわかったことは次の通りで、ロードマップにおける最初のフェーズが完了する3月末までは現状のワークフローを継続してみることに決めた。&lt;/p>
&lt;ul>
&lt;li>開発のイテレーションとして1週間は短過ぎて管理対象としてあわない&lt;/li>
&lt;li>開発のイテレーションと定例会議の頻度をあわせなくてもよい&lt;/li>
&lt;li>フルリモートワークの場合、メンバー全員を集める目的は情報共有だけではない&lt;/li>
&lt;/ul></content></item><item><title>集中のち寝不足</title><link>/diary/posts/2023/0206/</link><pubDate>Mon, 06 Feb 2023 09:21:43 +0900</pubDate><guid>/diary/posts/2023/0206/</guid><description>1時に帰ってきてそのまま寝ないで6時10分の新幹線に乗ってから2時間半ほど寝た。これはこれで時間の使い方が有意義な気がする。午前中は翌日の定例会議の準備を着々と進めて、ci/cd 環境の改善、午後からリファクタリングなどをやっていた。15時をまわると眠くなってきて散歩したりして気分転換しつつも体調悪いなと思って17時半にお仕事を終えてホテルへ戻って2-3時間ほど寝てた。その後、晩ご飯食べるかなと出掛けたものの、あまり食欲もなくて、2時間ほど付近を散歩して運動していた。たまにはそういうのもいいか。飲食店が多い地域なので外から眺めているだけでもわりと楽しい。
ssh 経由のデプロイ これまで ci/cd でテストして docker イメージをビルドしてコンテナレジストリに登録するところまでやっていた。実際にテスト環境にデプロイするときは、テスト環境にログインして更新用のスクリプトを私が手動実行していた。そんなに頻繁にテスト環境を更新する必要がなかったのでそれでも十分ではあるものの、ci/cd の完成形を目指すなら自動化すべきという考え方もあってデプロイの部分を作ることにした。
もっとも簡単な方法として Using SSH keys with GitLab CI/CD をみながら、ssh でテスト環境にデプロイすることにした。すでに更新用のスクリプトがあって、テスト環境にログインして実行すればできる状態なので ssh さえ使えればすぐに移行できるという話しでもある。openssh-client を使うためにベースイメージを alpine から ubuntu にしてパッケージをインストールしないといけない。実行時間がややかかるというコスト以外には気にならないかな。ssh の秘密鍵を file 種別でもつのか通常の環境変数でもつのかで扱いが異なって、それに少しはまったぐらいですぐできた。今後は docker イメージのビルド単位に自動的にデプロイされるようになる。
interface{} の型エイリアスとしての any go のコードをリファクタリングしていて json.Marshal の引数が any となっていることに気付いた。
func Marshal(v any) ([]byte, error) { ... } go 1.18 以降で interface{} の型エイリアスとして any が定義されているらしい。任意の型を扱えるシグネチャとして、メソッドの振る舞いのみを規定する interface{} を使うというのは型システムとしては正しい。他言語でいえば object に相当するものが go はオブジェクト指向言語ではないのでそれがない。そういう間違っていないけど、わかりにくいなと思っていたものに any という名前の型エイリアスが導入されてとてもしっくりきた。プログラミングしていて、実務的にどうかというところをちゃんと改善していくところがみえるのは楽しい。
type any = interface{} Go 1.18 で interface{} の代わりに any が使えるようになる話</description><content>&lt;p>1時に帰ってきてそのまま寝ないで6時10分の新幹線に乗ってから2時間半ほど寝た。これはこれで時間の使い方が有意義な気がする。午前中は翌日の定例会議の準備を着々と進めて、ci/cd 環境の改善、午後からリファクタリングなどをやっていた。15時をまわると眠くなってきて散歩したりして気分転換しつつも体調悪いなと思って17時半にお仕事を終えてホテルへ戻って2-3時間ほど寝てた。その後、晩ご飯食べるかなと出掛けたものの、あまり食欲もなくて、2時間ほど付近を散歩して運動していた。たまにはそういうのもいいか。飲食店が多い地域なので外から眺めているだけでもわりと楽しい。&lt;/p>
&lt;h2 id="ssh-経由のデプロイ">ssh 経由のデプロイ&lt;/h2>
&lt;p>これまで ci/cd でテストして docker イメージをビルドしてコンテナレジストリに登録するところまでやっていた。実際にテスト環境にデプロイするときは、テスト環境にログインして更新用のスクリプトを私が手動実行していた。そんなに頻繁にテスト環境を更新する必要がなかったのでそれでも十分ではあるものの、ci/cd の完成形を目指すなら自動化すべきという考え方もあってデプロイの部分を作ることにした。&lt;/p>
&lt;p>もっとも簡単な方法として &lt;a href="https://docs.gitlab.com/ee/ci/ssh_keys/">Using SSH keys with GitLab CI/CD&lt;/a> をみながら、ssh でテスト環境にデプロイすることにした。すでに更新用のスクリプトがあって、テスト環境にログインして実行すればできる状態なので ssh さえ使えればすぐに移行できるという話しでもある。openssh-client を使うためにベースイメージを alpine から ubuntu にしてパッケージをインストールしないといけない。実行時間がややかかるというコスト以外には気にならないかな。ssh の秘密鍵を &lt;code>file&lt;/code> 種別でもつのか通常の環境変数でもつのかで扱いが異なって、それに少しはまったぐらいですぐできた。今後は docker イメージのビルド単位に自動的にデプロイされるようになる。&lt;/p>
&lt;h2 id="interface-の型エイリアスとしての-any">interface{} の型エイリアスとしての any&lt;/h2>
&lt;p>go のコードをリファクタリングしていて json.Marshal の引数が &lt;code>any&lt;/code> となっていることに気付いた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Marshal&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">any&lt;/span>) ([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>go 1.18 以降で &lt;code>interface{}&lt;/code> の型エイリアスとして &lt;code>any&lt;/code> が定義されているらしい。任意の型を扱えるシグネチャとして、メソッドの振る舞いのみを規定する &lt;code>interface{}&lt;/code> を使うというのは型システムとしては正しい。他言語でいえば object に相当するものが go はオブジェクト指向言語ではないのでそれがない。そういう間違っていないけど、わかりにくいなと思っていたものに &lt;code>any&lt;/code> という名前の型エイリアスが導入されてとてもしっくりきた。プログラミングしていて、実務的にどうかというところをちゃんと改善していくところがみえるのは楽しい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">any&lt;/span> = &lt;span style="color:#66d9ef">interface&lt;/span>{}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;a href="https://zenn.dev/syumai/articles/c6q5un1j0msim0aj0ca0">Go 1.18 で interface{} の代わりに any が使えるようになる話&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>資料作りを丸半日</title><link>/diary/posts/2023/0205/</link><pubDate>Sun, 05 Feb 2023 12:19:23 +0900</pubDate><guid>/diary/posts/2023/0205/</guid><description>23時に寝て何度か起きて7時に起きた。起きたものの、なんかしんどくてお昼前まで寝てた。
課題管理勉強会の資料作り 出張前の定例作業になりつつある。本当は余裕をもって事前に資料作りしておけばよいのに、日々の余裕がないから出張直前の日曜日に資料作りしている。これはよくない兆し。次の課題管理勉強会は エンジニアリング組織論への招待 を取り上げる。Chapter 1 の思考のリファクタリングから、私が関心のあるところ、もしくは課題管理で解決できそうな話題などを重点的に取り上げる。たたき台はできた。構成や進行をさらに練りたいので少し寝かせてからもうちょっと考える。読み返していると忘れていたことを思い出したり、課題管理と密接な内容を再発見したり、本の内容をずっと覚えているとかないから自分の勉強にもなる。本当は参加者同士で内容の議論ができるといいんじゃないかと思うけど、少人数の勉強会ではないから発言しにくい空気がある。もしくは発言するのは一部のメンバーに限られてしまう。とくにリモート参加が多いと勉強会は盛り上がらない。それは オンライン飲み会が盛り上がらない理由 と同じ。
12時頃にオフィス来て、途中に休憩を取っているけど、ひと段落して気付いたら23時まわってた。明日は始発で新幹線に乗る。このまま起きたまま夜通し出張の準備をして新幹線で寝る作戦に移行する。</description><content>&lt;p>23時に寝て何度か起きて7時に起きた。起きたものの、なんかしんどくてお昼前まで寝てた。&lt;/p>
&lt;h2 id="課題管理勉強会の資料作り">課題管理勉強会の資料作り&lt;/h2>
&lt;p>出張前の定例作業になりつつある。本当は余裕をもって事前に資料作りしておけばよいのに、日々の余裕がないから出張直前の日曜日に資料作りしている。これはよくない兆し。次の課題管理勉強会は &lt;a href="https://gihyo.jp/book/2018/978-4-7741-9605-3">エンジニアリング組織論への招待&lt;/a> を取り上げる。Chapter 1 の思考のリファクタリングから、私が関心のあるところ、もしくは課題管理で解決できそうな話題などを重点的に取り上げる。たたき台はできた。構成や進行をさらに練りたいので少し寝かせてからもうちょっと考える。読み返していると忘れていたことを思い出したり、課題管理と密接な内容を再発見したり、本の内容をずっと覚えているとかないから自分の勉強にもなる。本当は参加者同士で内容の議論ができるといいんじゃないかと思うけど、少人数の勉強会ではないから発言しにくい空気がある。もしくは発言するのは一部のメンバーに限られてしまう。とくにリモート参加が多いと勉強会は盛り上がらない。それは &lt;a href="/diary/diary/posts/2023/0203/#隔週の雑談">オンライン飲み会が盛り上がらない理由&lt;/a> と同じ。&lt;/p>
&lt;p>12時頃にオフィス来て、途中に休憩を取っているけど、ひと段落して気付いたら23時まわってた。明日は始発で新幹線に乗る。このまま起きたまま夜通し出張の準備をして新幹線で寝る作戦に移行する。&lt;/p></content></item><item><title>go の学び直し 静的解析編</title><link>/diary/posts/2023/0204/</link><pubDate>Sat, 04 Feb 2023 12:35:28 +0900</pubDate><guid>/diary/posts/2023/0204/</guid><description>23時に寝て2時に起きて5時ぐらいにも起きて7時に起きた。昨日は podcast 収録でたくさん話して疲れてしまってそのまま帰ってすぐ寝た。すぐ起きるんだけど。
ストレッチ 今日の開脚幅は開始前157cmで、ストレッチ後159cmだった。朝出かける前に開脚のストレッチしたら数値よくなるかな？と思ってやってみたらいつもより少しよくなった。ストレッチはいつも通りとも言えるし、腰の張りがまだまだ残っていることも確認できた。疲労が溜まっているんよな。毎週ストレッチしているからこの程度の疲労で済んでいるとも思える。お正月に実家から戻ってきてから1月の東京出張と35日は終えた。来週はまた2月の東京出張とその週末に49日がある。ここまで体力がもてばその次の法要は初盆なので少し空く。体力的に第4四半期の山場と言えるかもしれない。ただがんばる。
go の学び直し Gopher塾 #3 - 静的解析を使ったGoの開発ツール制作 入門編 - DAY 1 に参加した。
過去にも Python とマクロ、インポートフックと抽象構文木 や Java のアノテーションプロセッサを試す など、メタプログラミングのアプローチやコード生成などを実務で使ってきたので静的解析にも関心がある。講義内容の詳細は書かないけど、静的解析のような難しい話題に対して4時間という短い時間でとてもよい講義になっていたと思う。go の静的解析の要点や提供されているツールなどを一通り学ぶことができた。もちろん、実用するには試行錯誤や習熟を必要とするけど、取っ掛かりとして十分な内容に思えた。
skeleton というツールを使って静的解析のための analyzer プロジェクトのひな形を作る。
$ go install github.com/gostaticanalysis/skeleton/v2@latest $ skeleton myanalyzer $ tree myanalyzer myanalyzer ├── cmd │ └── myanalyzer │ └── main.go ├── go.mod ├── myanalyzer.go ├── myanalyzer_test.go └── testdata └── src └── a ├── a.go └── go.mod 意図的にテストが落ちるようになっていてすぐ動作確認できる。
$ go mod tidy $ go test --- FAIL: TestAnalyzer (0.</description><content>&lt;p>23時に寝て2時に起きて5時ぐらいにも起きて7時に起きた。昨日は podcast 収録でたくさん話して疲れてしまってそのまま帰ってすぐ寝た。すぐ起きるんだけど。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前157cmで、ストレッチ後159cmだった。朝出かける前に開脚のストレッチしたら数値よくなるかな？と思ってやってみたらいつもより少しよくなった。ストレッチはいつも通りとも言えるし、腰の張りがまだまだ残っていることも確認できた。疲労が溜まっているんよな。毎週ストレッチしているからこの程度の疲労で済んでいるとも思える。お正月に実家から戻ってきてから1月の東京出張と35日は終えた。来週はまた2月の東京出張とその週末に49日がある。ここまで体力がもてばその次の法要は初盆なので少し空く。体力的に第4四半期の山場と言えるかもしれない。ただがんばる。&lt;/p>
&lt;h2 id="go-の学び直し">go の学び直し&lt;/h2>
&lt;p>&lt;a href="https://tenntenn.connpass.com/event/271533/">Gopher塾 #3 - 静的解析を使ったGoの開発ツール制作 入門編 - DAY 1&lt;/a> に参加した。&lt;/p>
&lt;p>過去にも &lt;a href="https://t2y.hatenablog.jp/entry/2015/03/11/025123">Python とマクロ、インポートフックと抽象構文木&lt;/a> や &lt;a href="https://kazamori.jp/blogs/2020/07/12/java-annotation-processor/">Java のアノテーションプロセッサを試す&lt;/a> など、メタプログラミングのアプローチやコード生成などを実務で使ってきたので静的解析にも関心がある。講義内容の詳細は書かないけど、静的解析のような難しい話題に対して4時間という短い時間でとてもよい講義になっていたと思う。go の静的解析の要点や提供されているツールなどを一通り学ぶことができた。もちろん、実用するには試行錯誤や習熟を必要とするけど、取っ掛かりとして十分な内容に思えた。&lt;/p>
&lt;p>&lt;a href="https://github.com/gostaticanalysis/skeleton">skeleton&lt;/a> というツールを使って静的解析のための analyzer プロジェクトのひな形を作る。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go install github.com/gostaticanalysis/skeleton/v2@latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ skeleton myanalyzer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ tree myanalyzer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myanalyzer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── cmd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── myanalyzer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── main.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── go.mod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── myanalyzer.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── myanalyzer_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── testdata
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── a.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── go.mod
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>意図的にテストが落ちるようになっていてすぐ動作確認できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go mod tidy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ go test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--- FAIL: TestAnalyzer &lt;span style="color:#f92672">(&lt;/span>0.05s&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> analysistest.go:448: a/a.go:5:6: diagnostic &lt;span style="color:#e6db74">&amp;#34;identifier is gopher&amp;#34;&lt;/span> does not match pattern &lt;span style="color:#e6db74">&amp;#34;pattern&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> analysistest.go:512: a/a.go:5: no diagnostic was reported matching &lt;span style="color:#e6db74">&amp;#34;pattern&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FAIL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exit status &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FAIL myanalyzer 0.349s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>いろいろ説明を端折るけど、試しに FuncDecl の ast ノードに対して関数の行数をカウントする処理を実装してみた。&lt;a href="https://pkg.go.dev/golang.org/x/tools/go/analysis#hdr-Pass">analysis パッケージの Pass&lt;/a> を使うと便利なユーティリティが提供されていて、静的解析をするときに面倒な処理をショートカットできて簡単に実装できることが理解できた。ここで作った analyzer は go vet で実行できるそうなのでプロジェクトの独自ルールを analyzer で実装して ci でチェックするといった運用もできる。応用範囲は広そう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ast&lt;/span>.&lt;span style="color:#a6e22e">FuncDecl&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Pos&lt;/span>(), &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">End&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">start&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pass&lt;/span>.&lt;span style="color:#a6e22e">Fset&lt;/span>.&lt;span style="color:#a6e22e">Position&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Pos&lt;/span>()).&lt;span style="color:#a6e22e">Line&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">end&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pass&lt;/span>.&lt;span style="color:#a6e22e">Fset&lt;/span>.&lt;span style="color:#a6e22e">Position&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">End&lt;/span>()).&lt;span style="color:#a6e22e">Line&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;the number of lines:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">end&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">start&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>雑談の多い日</title><link>/diary/posts/2023/0203/</link><pubDate>Fri, 03 Feb 2023 18:53:13 +0900</pubDate><guid>/diary/posts/2023/0203/</guid><description>0時に寝て4時に起きて6時に起きた。本当はもっと早く起きて勉強会の資料作りやろうと思っていたけど、疲れと寒さでうまく起きれない。高速バスよりはずっと楽だけど、それでも土日に実家帰ってくると疲れが溜まる。次の週の週末になると蓄積度が違う。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。
フロントエンドの技術選定のふりかえり プロジェクトマネジメントの話し ハドルと雑談の話し 年末にはらさん主催の忘年会に参加した。参加者は10人前後いたと思う。そのときにはらさんが「会社でオンライン飲み会やっても盛り上がらない？」といった話題があった。その意見には私も同意でおそらく参加者が5人以上いるとオンライン飲み会は盛り上がらない。オンライン飲み会の難しさは1つの部屋だとせいぜい3-4人ぐらいでないと話せない。1つの部屋に10人とかいると、実質話しているのは3人ぐらいで残りのメンバーは聞いているだけになる。それが盛り上がらない要因だと思う。オフラインの飲み会なら、例えば4人テーブルに3グループに分かれて、それぞれのグループが3つの会話が成立するから盛り上がる。そして、隣の会話が薄く聞こえたり、ちょっと休むときに隣のグループの会話に混じったりもできる。これと同じことをオンラインでもチャンネルを分けてやればよいというのは理屈の上で正しい。しかし、オンラインで能動的に別のチャンネルに入り直すのは複数の意味で障壁が高い。まずツールの操作が分かりにくいし、幹事が仕切るわけでもないので運用ルールも曖昧。仮に幹事がいても仕切れるのは1つのチャンネルだけで、他のチャンネルが意図した運用をしているかどうか、チャンネルを出たり入ったりしないと監視するのが難しい。オフラインの飲み会に近い状態にするのは、オンラインミーティングツール側で自動的にうまいこと配慮しないといけないのではないかといった話を、はらさんとしていた。
はんなりPodcast はんなりプログラミング のコミュニティが はんなりPodcast（仮） を始めたらしい。私もちょくちょくはんなりさんのイベントに参加するので運営の方々とも懇意にさせていただいている。たまたまゲストで呼んでいただいた。感謝。内容はまた公開されてから書くので今日は収録の雰囲気だけ書いておく。かいせんさんとおがわさんとは、オンライン上でもよくやり取りしているので気軽に話すことができた。逆に私が調子に乗り過ぎて内容とは逸脱したことや自分の話したいことをわーっと話し過ぎてしまったのではないかという反省もあとになって思う。いま1人で働いているからこうやって自分の話しを聞いてくれる機会というのは貴重でそれはそれで楽しかった。ついつい自分の話しばかりし過ぎないように注意しないといけない。</description><content>&lt;p>0時に寝て4時に起きて6時に起きた。本当はもっと早く起きて勉強会の資料作りやろうと思っていたけど、疲れと寒さでうまく起きれない。高速バスよりはずっと楽だけど、それでも土日に実家帰ってくると疲れが溜まる。次の週の週末になると蓄積度が違う。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="/diary/diary/posts/2023/0201/#テックブログのレビュー／公開">フロントエンドの技術選定&lt;/a>のふりかえり&lt;/li>
&lt;li>プロジェクトマネジメントの話し&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2023/0202/#ハドルと雑談">ハドルと雑談&lt;/a>の話し&lt;/li>
&lt;/ul>
&lt;p>年末にはらさん主催の忘年会に参加した。参加者は10人前後いたと思う。そのときにはらさんが「会社でオンライン飲み会やっても盛り上がらない？」といった話題があった。その意見には私も同意でおそらく参加者が5人以上いるとオンライン飲み会は盛り上がらない。オンライン飲み会の難しさは1つの部屋だとせいぜい3-4人ぐらいでないと話せない。1つの部屋に10人とかいると、実質話しているのは3人ぐらいで残りのメンバーは聞いているだけになる。それが盛り上がらない要因だと思う。オフラインの飲み会なら、例えば4人テーブルに3グループに分かれて、それぞれのグループが3つの会話が成立するから盛り上がる。そして、隣の会話が薄く聞こえたり、ちょっと休むときに隣のグループの会話に混じったりもできる。これと同じことをオンラインでもチャンネルを分けてやればよいというのは理屈の上で正しい。しかし、オンラインで能動的に別のチャンネルに入り直すのは複数の意味で障壁が高い。まずツールの操作が分かりにくいし、幹事が仕切るわけでもないので運用ルールも曖昧。仮に幹事がいても仕切れるのは1つのチャンネルだけで、他のチャンネルが意図した運用をしているかどうか、チャンネルを出たり入ったりしないと監視するのが難しい。オフラインの飲み会に近い状態にするのは、オンラインミーティングツール側で自動的にうまいこと配慮しないといけないのではないかといった話を、はらさんとしていた。&lt;/p>
&lt;h2 id="はんなりpodcast">はんなりPodcast&lt;/h2>
&lt;p>&lt;a href="https://hannari-python.connpass.com/">はんなりプログラミング&lt;/a> のコミュニティが &lt;a href="https://note.com/hannari_group/n/n219af97b2ddf">はんなりPodcast（仮）&lt;/a> を始めたらしい。私もちょくちょくはんなりさんのイベントに参加するので運営の方々とも懇意にさせていただいている。たまたまゲストで呼んでいただいた。感謝。内容はまた公開されてから書くので今日は収録の雰囲気だけ書いておく。かいせんさんとおがわさんとは、オンライン上でもよくやり取りしているので気軽に話すことができた。逆に私が調子に乗り過ぎて内容とは逸脱したことや自分の話したいことをわーっと話し過ぎてしまったのではないかという反省もあとになって思う。いま1人で働いているからこうやって自分の話しを聞いてくれる機会というのは貴重でそれはそれで楽しかった。ついつい自分の話しばかりし過ぎないように注意しないといけない。&lt;/p></content></item><item><title>オフィスアワー的なハドル</title><link>/diary/posts/2023/0202/</link><pubDate>Thu, 02 Feb 2023 08:19:18 +0900</pubDate><guid>/diary/posts/2023/0202/</guid><description>2時に寝て7時に起きた。お仕事は時間かけた割に成果でなくて、遅くに帰ってきて晩ご飯食べてダンまちみたら寝るのも遅くなった。
ハドルと雑談 今日から午前中はハドルミーティングに滞在するようにして、メンバーが気軽に雑談しやすい雰囲気を作ってみる。大学で言うところのオフィスアワー。初日だったせいか、どんなものかとお試しでチーム外の開発者が来てくれたりもした。メンバーの1人もお昼前にとくに用ないけど試しに来てみましたと軽く雑談した。ハドル中じゃなかったけど、別のメンバーも午後にコードレビューの詳細について聞きたいといったメッセージが届いてハドルをした。リモートワークしていても気軽に話しかけていいんやでと表明することで、いくらか話しかけるのをためらう心理的障壁が下がったことは確認できた。普通に誰でも考えて起きること。あとはこれを一定期間、1ヶ月とか2ヶ月とか続けてみてどのぐらいの雑談ができるかを記録して、効果がありそうなら次のアクションを考える。とくに用事もないけど、暇だから気分転換に雑談に来ましたというのが高頻度で起これば心理的安全性にとってもよいことじゃないかな。私が逆の立場なら、用事もないのに会社の人に話しかけるのは仲のよい同僚しかいなかったと思う。他のメンバーも気軽にハドルに滞在するようになれば、物理的にオフィスに出社しなくても雑談しやすい雰囲気は作れるかもしれない。</description><content>&lt;p>2時に寝て7時に起きた。お仕事は時間かけた割に成果でなくて、遅くに帰ってきて晩ご飯食べてダンまちみたら寝るのも遅くなった。&lt;/p>
&lt;h2 id="ハドルと雑談">ハドルと雑談&lt;/h2>
&lt;p>今日から午前中はハドルミーティングに滞在するようにして、メンバーが気軽に雑談しやすい雰囲気を作ってみる。大学で言うところのオフィスアワー。初日だったせいか、どんなものかとお試しでチーム外の開発者が来てくれたりもした。メンバーの1人もお昼前にとくに用ないけど試しに来てみましたと軽く雑談した。ハドル中じゃなかったけど、別のメンバーも午後にコードレビューの詳細について聞きたいといったメッセージが届いてハドルをした。リモートワークしていても気軽に話しかけていいんやでと表明することで、いくらか話しかけるのをためらう心理的障壁が下がったことは確認できた。普通に誰でも考えて起きること。あとはこれを一定期間、1ヶ月とか2ヶ月とか続けてみてどのぐらいの雑談ができるかを記録して、効果がありそうなら次のアクションを考える。とくに用事もないけど、暇だから気分転換に雑談に来ましたというのが高頻度で起これば心理的安全性にとってもよいことじゃないかな。私が逆の立場なら、用事もないのに会社の人に話しかけるのは仲のよい同僚しかいなかったと思う。他のメンバーも気軽にハドルに滞在するようになれば、物理的にオフィスに出社しなくても雑談しやすい雰囲気は作れるかもしれない。&lt;/p></content></item><item><title>テックブログ公開</title><link>/diary/posts/2023/0201/</link><pubDate>Wed, 01 Feb 2023 08:50:39 +0900</pubDate><guid>/diary/posts/2023/0201/</guid><description>0時に寝て何度か起きて6時半に起きた。起きてから8時までだらだらしてた。寒くて起きれない。2月入ってしまった。早いなぁ。
テックブログのレビュー／公開 先週に草稿は書き上げていた ものの、レビューが滞っていた。他社のテックブログを勝手に書いて公開するわけにはいかないので慎重にレビューをお願いしていた。私がそういう特性の人間なのか、課題管理システムを長年使い続けてきたからそうなったのか、その両方なのか。私は Unit Bias が大きい方の人間だと思う。自分の中で完了したタスクをクローズせずに放置しておくのが精神的に耐えられない。すぐに対応しない残作業があるなら新しい issue に作った上で古い issue をクローズすることもたまにある。放置するのは嫌なので今日は関係者にどんどん確認してレビューを進めた。
公開して知人にシェアしてみたものの、あまり反応がよくないので大して関心を唆る読みものにはなっていないようだ。扱っている内容が悪いわけではなく、私の構成や文章力が拙いのだと思う。悔しいのでもう1回ぐらい、この記事に関連するテックブログを書いて関心をもってもらうような読みものにしたい。関西人だからかぶせてかぶせて天丼にしていく。
フロントエンドの技術選定</description><content>&lt;p>0時に寝て何度か起きて6時半に起きた。起きてから8時までだらだらしてた。寒くて起きれない。2月入ってしまった。早いなぁ。&lt;/p>
&lt;h2 id="テックブログのレビュー公開">テックブログのレビュー／公開&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0125/#フロントエンドの技術選定のテックブログ">先週に草稿は書き上げていた&lt;/a> ものの、レビューが滞っていた。他社のテックブログを勝手に書いて公開するわけにはいかないので慎重にレビューをお願いしていた。私がそういう特性の人間なのか、課題管理システムを長年使い続けてきたからそうなったのか、その両方なのか。私は &lt;a href="https://lirio.com/blog/unit-bias-lirio-bias-brief/">Unit Bias&lt;/a> が大きい方の人間だと思う。自分の中で完了したタスクをクローズせずに放置しておくのが精神的に耐えられない。すぐに対応しない残作業があるなら新しい issue に作った上で古い issue をクローズすることもたまにある。放置するのは嫌なので今日は関係者にどんどん確認してレビューを進めた。&lt;/p>
&lt;p>公開して知人にシェアしてみたものの、あまり反応がよくないので大して関心を唆る読みものにはなっていないようだ。扱っている内容が悪いわけではなく、私の構成や文章力が拙いのだと思う。悔しいのでもう1回ぐらい、この記事に関連するテックブログを書いて関心をもってもらうような読みものにしたい。関西人だからかぶせてかぶせて天丼にしていく。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.osstech.co.jp/posts/2023/02/frontend-tech-selection/">フロントエンドの技術選定&lt;/a>&lt;/li>
&lt;/ul></content></item></channel></rss>