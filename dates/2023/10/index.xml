<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2023/10 on forest nook</title><link>/diary/dates/2023/10/</link><description>Recent content in 2023/10 on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/dates/2023/10/index.xml" rel="self" type="application/rss+xml"/><item><title>イベント参加のついでに実家に立ち寄り</title><link>/diary/posts/2023/1014/</link><pubDate>Sat, 14 Oct 2023 07:01:12 +0900</pubDate><guid>/diary/posts/2023/1014/</guid><description>0時に寝て2時に起きて少し仮眠して5時に起きた。朝から出かける準備をして6時過ぎには出発した。神戸から実家まで約80kmの距離を、早朝だと高速道路が空いているのもあって1時間弱といったところ。
軽トラのエンジンをかける 車のバッテリーがあがってしまったときに使う ジャンプスターター を昨年末に購入していた。また軽トラのバッテリーがあがってしまったようで、今回は母に使い方を教えながらエンジンをかけてみた。バッテリーにつなぐケーブルに boost ボタンがあってそれを押下してエンジンをかけるだけ。これは本当に買ってよかった。たまにしか農業しないような家の軽トラ向けにあると安心できる。軽トラのエンジンがかかったら1時間ほど走ってくればそれで元のバッテリーは回復する。
草焼き 実家に着いたのが7時過ぎで朝ご飯を食べて、まだ時間があったので草焼きを手伝うことにした。すでに刈って干した草が集めてあったのでそれを火にかけて番をする。以前にも草焼きをした経験 があったので注意を払いながら行う。母が言うには、最近でも淡路島の人で草焼きをしていて2人亡くなっているという。おそらく煙に巻かれて一酸化炭素中毒で気を失ってしまったんだと推測する。干し草は一気に燃え上がるので青い草と干し草を調整ながら火の勢いを制御する。あとは表面だけ燃えるので内側も燃えるように混ぜ返したり空気を送ったりといった調整も必要になる。火の制御は難しい。1時間ほどやっていた。
Python Boot Camp 今日の目的は次のイベントに TA として参加してきた。
Python Boot Camp in 徳島2nd 現地11時集合だったものの、早めに実家を出たので10時半頃に着いてしまった。他のスタッフもその後すぐに合流して10時50分には全員が揃った。私は知り合いのスタッフがほとんどいなかったので挨拶したりしていた。だいたいスタッフは次のような構成だった。
講師: 1人 現地スタッフ: 1人 TA: 3人 会場関係者: 2人 次の段取りでほぼこの通りうまくスケジュールを進捗できたと思う。
11:00 スタッフTA講師が集合 11:00-11:30 準備 11:30-12:30 スタッフTA講師でランチ 12:30 開場 13:00 PyCamp開始 17:00 PyCamp終了 17:30 撤収完了 お昼に食べた「鳴門うどん」もひやむぎ程度のサイズの麺をにゅうめんのような食感で食べるものだった。身近に住んでいてこれは知らなかった。おいしかった。
boot camp イベントも順調に進捗して受講者も喜んでいたようだったのでよかった。久しぶりにこういったイベントに参加すると、プログラミングを始めたばかりの気持ちなどを思い出してよかったと思う。いまはお仕事でプログラミングの随分と高度なことをマネージャーとして教えているわけだけど、簡単なコードが動いておもしろいといった気持ちがあることも大事だと思う。懇親会も出て、その後、スタッフ同士での反省会もやって、21時前には現地を解散して21時20分に実家に戻った。</description><content>&lt;p>0時に寝て2時に起きて少し仮眠して5時に起きた。朝から出かける準備をして6時過ぎには出発した。神戸から実家まで約80kmの距離を、早朝だと高速道路が空いているのもあって1時間弱といったところ。&lt;/p>
&lt;h2 id="軽トラのエンジンをかける">軽トラのエンジンをかける&lt;/h2>
&lt;p>車のバッテリーがあがってしまったときに使う &lt;a href="/diary/diary/posts/2023/0101/#ジャンプスターター">ジャンプスターター&lt;/a> を昨年末に購入していた。また軽トラのバッテリーがあがってしまったようで、今回は母に使い方を教えながらエンジンをかけてみた。バッテリーにつなぐケーブルに boost ボタンがあってそれを押下してエンジンをかけるだけ。これは本当に買ってよかった。たまにしか農業しないような家の軽トラ向けにあると安心できる。軽トラのエンジンがかかったら1時間ほど走ってくればそれで元のバッテリーは回復する。&lt;/p>
&lt;h2 id="草焼き">草焼き&lt;/h2>
&lt;p>実家に着いたのが7時過ぎで朝ご飯を食べて、まだ時間があったので草焼きを手伝うことにした。すでに刈って干した草が集めてあったのでそれを火にかけて番をする。&lt;a href="/diary/diary/posts/2021/1006/">以前にも草焼きをした経験&lt;/a> があったので注意を払いながら行う。母が言うには、最近でも淡路島の人で草焼きをしていて2人亡くなっているという。おそらく煙に巻かれて一酸化炭素中毒で気を失ってしまったんだと推測する。干し草は一気に燃え上がるので青い草と干し草を調整ながら火の勢いを制御する。あとは表面だけ燃えるので内側も燃えるように混ぜ返したり空気を送ったりといった調整も必要になる。火の制御は難しい。1時間ほどやっていた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/1014_kusayaki.jpg"/>
&lt;/figure>
&lt;h2 id="python-boot-camp">Python Boot Camp&lt;/h2>
&lt;p>今日の目的は次のイベントに TA として参加してきた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pyconjp.connpass.com/event/293032/">Python Boot Camp in 徳島2nd&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>現地11時集合だったものの、早めに実家を出たので10時半頃に着いてしまった。他のスタッフもその後すぐに合流して10時50分には全員が揃った。私は知り合いのスタッフがほとんどいなかったので挨拶したりしていた。だいたいスタッフは次のような構成だった。&lt;/p>
&lt;ul>
&lt;li>講師: 1人&lt;/li>
&lt;li>現地スタッフ: 1人&lt;/li>
&lt;li>TA: 3人&lt;/li>
&lt;li>会場関係者: 2人&lt;/li>
&lt;/ul>
&lt;p>次の段取りでほぼこの通りうまくスケジュールを進捗できたと思う。&lt;/p>
&lt;pre tabindex="0">&lt;code>11:00 スタッフTA講師が集合
11:00-11:30 準備
11:30-12:30 スタッフTA講師でランチ
12:30 開場
13:00 PyCamp開始
17:00 PyCamp終了
17:30 撤収完了
&lt;/code>&lt;/pre>&lt;p>お昼に食べた「鳴門うどん」もひやむぎ程度のサイズの麺をにゅうめんのような食感で食べるものだった。身近に住んでいてこれは知らなかった。おいしかった。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/1014_naruto-udon.jpg"/>
&lt;/figure>
&lt;p>boot camp イベントも順調に進捗して受講者も喜んでいたようだったのでよかった。久しぶりにこういったイベントに参加すると、プログラミングを始めたばかりの気持ちなどを思い出してよかったと思う。いまはお仕事でプログラミングの随分と高度なことをマネージャーとして教えているわけだけど、簡単なコードが動いておもしろいといった気持ちがあることも大事だと思う。懇親会も出て、その後、スタッフ同士での反省会もやって、21時前には現地を解散して21時20分に実家に戻った。&lt;/p></content></item><item><title>標準ライブラリに XOAUTH2 の実装がない</title><link>/diary/posts/2023/1013/</link><pubDate>Fri, 13 Oct 2023 08:31:00 +0900</pubDate><guid>/diary/posts/2023/1013/</guid><description>0時に寝て3時に起きて5時ぐらいまでネットで遊んでて6時半に起きた。昨日の夜に洗濯しようと思って忘れていたので朝から洗濯した。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。
税理士さんとの打ち合わせのふりかえり 昔お手伝いした会社の開発体制の話 新しいチーム勉強会 の導入 3人の税理士さんと打ち合わせしてみて最終的に顧問契約をお願いする方を決めた。話してみてやり取りした雰囲気だと、その税理士さんもスキルやこちらの要件対応については全く問題なさそうに思えた。あとは報酬とうちの会社の規模などを考慮して選択した。
昔お手伝いした会社で2年経ってちょっと相談にのってほしいという打ち合わせをした。私がいた2年前と開発体制はまったく変わってなくて、未だにテックリードがほぼ1人で開発している状況らしい。私が辞めてから以降も何人かは開発者が入っては辞めを繰り返しているのだと推測する。私も2度とその開発者と一緒に働きたくないと思うぐらいには信頼してなくて、開発者が引く手あまたな世の中の状況において、人間として信頼されないリーダーって致命的なんだなということを改めて実感した。おそらくテックリードを追放しない限り、あの開発体制 (と言ってもほぼ独り開発) は何も変わらないのだろうと思う。
oauth 2.0 で認証して google の smtp サーバーを使う 昨日の続き 。
リフレッシュトークンを使って取得したアクセストークンで smtp の AUTH コマンドで XOAUTH2 で認証すればよい。仕様は次のドキュメントに書いてある。
Home &amp;gt; Google Workspace &amp;gt; Gmail &amp;gt; Guides &amp;gt; OAuth 2.0 Mechanism RFC 7628 - A Set of Simple Authentication and Security Layer (SASL) Mechanisms for OAuth 日本語訳 なぜか go の標準ライブラリの net/smtp には Plain と CRAM-MD5 の2つしか実装されていない。AUTH コマンドの実装は smtp.Auth インターフェースで定義されている。
type Auth interface { Start(server *ServerInfo) (proto string, toServer []byte, err error) Next(fromServer []byte, more bool) (toServer []byte, err error) } 正常系の雑な実装だとこんな感じ。</description><content>&lt;p>0時に寝て3時に起きて5時ぐらいまでネットで遊んでて6時半に起きた。昨日の夜に洗濯しようと思って忘れていたので朝から洗濯した。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。&lt;/p>
&lt;ul>
&lt;li>税理士さんとの打ち合わせのふりかえり&lt;/li>
&lt;li>昔お手伝いした会社の開発体制の話&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2023/1005/">新しいチーム勉強会&lt;/a> の導入&lt;/li>
&lt;/ul>
&lt;p>3人の税理士さんと打ち合わせしてみて最終的に顧問契約をお願いする方を決めた。話してみてやり取りした雰囲気だと、その税理士さんもスキルやこちらの要件対応については全く問題なさそうに思えた。あとは報酬とうちの会社の規模などを考慮して選択した。&lt;/p>
&lt;p>昔お手伝いした会社で2年経ってちょっと相談にのってほしいという打ち合わせをした。私がいた2年前と開発体制はまったく変わってなくて、未だにテックリードがほぼ1人で開発している状況らしい。私が辞めてから以降も何人かは開発者が入っては辞めを繰り返しているのだと推測する。私も2度とその開発者と一緒に働きたくないと思うぐらいには信頼してなくて、開発者が引く手あまたな世の中の状況において、人間として信頼されないリーダーって致命的なんだなということを改めて実感した。おそらくテックリードを追放しない限り、あの開発体制 (と言ってもほぼ独り開発) は何も変わらないのだろうと思う。&lt;/p>
&lt;h2 id="oauth-20-で認証して-google-の-smtp-サーバーを使う">oauth 2.0 で認証して google の smtp サーバーを使う&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/1012/">昨日の続き&lt;/a> 。&lt;/p>
&lt;p>リフレッシュトークンを使って取得したアクセストークンで smtp の AUTH コマンドで XOAUTH2 で認証すればよい。仕様は次のドキュメントに書いてある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developers.google.com/gmail/imap/xoauth2-protocol">Home &amp;gt; Google Workspace &amp;gt; Gmail &amp;gt; Guides &amp;gt; OAuth 2.0 Mechanism&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tex2e.github.io/rfc-translater/html/rfc7628.html">RFC 7628 - A Set of Simple Authentication and Security Layer (SASL) Mechanisms for OAuth 日本語訳&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>なぜか go の標準ライブラリの net/smtp には Plain と CRAM-MD5 の2つしか実装されていない。AUTH コマンドの実装は smtp.Auth インターフェースで定義されている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Auth&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Start&lt;/span>(&lt;span style="color:#a6e22e">server&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ServerInfo&lt;/span>) (&lt;span style="color:#a6e22e">proto&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">toServer&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Next&lt;/span>(&lt;span style="color:#a6e22e">fromServer&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">more&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) (&lt;span style="color:#a6e22e">toServer&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>正常系の雑な実装だとこんな感じ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">oauth2&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tokenType&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">accessToken&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">o&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">oauth2&lt;/span>) &lt;span style="color:#a6e22e">Start&lt;/span>(&lt;span style="color:#a6e22e">server&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">smtp&lt;/span>.&lt;span style="color:#a6e22e">ServerInfo&lt;/span>) (&lt;span style="color:#66d9ef">string&lt;/span>, []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">server&lt;/span>.&lt;span style="color:#a6e22e">TLS&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;need tls&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">resp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []byte(&lt;span style="color:#e6db74">&amp;#34;user=&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\001auth=&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">tokenType&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">accessToken&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\001\001&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;XOAUTH2&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">o&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">oauth2&lt;/span>) &lt;span style="color:#a6e22e">Next&lt;/span>(&lt;span style="color:#a6e22e">fromServer&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">more&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) ([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">more&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;unexpected server challenge&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ググるとサンプルコードを実装している人たちがちらほらいるので、そのうち標準ライブラリに誰か実装してくれると思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jacobalberty/smtpoauth2">https://github.com/jacobalberty/smtpoauth2&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>go 本体に pr を送るチャンスでもあるけど、&lt;a href="https://go.dev/doc/contribute">Contribution Guide&lt;/a> を少し眺めて大変そうと思って、いまそこまでのモチベーションないなって感じ。&lt;/p></content></item><item><title>xoauth2 という smtp の認証</title><link>/diary/posts/2023/1012/</link><pubDate>Thu, 12 Oct 2023 08:19:48 +0900</pubDate><guid>/diary/posts/2023/1012/</guid><description>0時に寝て何度か起きて6時に起きた。昨日、凡人が天才に挑むという状況で、キングダムの 蒙驁 将軍が廉頗に挑むみたいな状況を思い出して見返していた。史実では蒙驁が魏を攻めて東郡を置いたというのは事実だが、廉頗と戦ったという記録はなく、おそらくは蒙驁と廉頗に因縁があって雪辱戦としたというのはキングダムの創作だろうと推測される。
oauth 2.0 で認証して google の smtp サーバーを使う google さんの smtp.gmail.com の smtp サーバーを使ってメールを送信したい。
Turning off less secure app access to G Suite accounts Beginning September 30, 2024: third-party apps that use only a password to access Google Accounts and Google Sync will no longer be supported 2019年にパスワード認証は廃止するので oauth 2.0 へ移行してくださいといった、最初のアナウンスが行われて、もうできないかと思ったら2024年9月30日に完全廃止するのかな？まだパスワード認証は動くかもしれない。一方で oauth 2.0 へ移行しないといけないのでその調査をメンバーにしてもらっていた。結局、途中からは私も本気になって調べていた。
oauth 2.0 で認証してアクセストークンとリフレッシュトークンを取得するためのサンプルコードとして OAuth2DotPyRunThrough が用意されている。このトークンを取得するときに callback の url にユーザーが明示的にアクセスして同意する必要がある。ここで得たアクセストークンは1時間で有効期限がきれる。しかし、リフレッシュトークンはユーザーが revoke しない限りは永続的に使えるそうで、このリフレッシュトークンを使って必要なときにアクセストークンを取得するというのが google さんの oauth 2.</description><content>&lt;p>0時に寝て何度か起きて6時に起きた。昨日、凡人が天才に挑むという状況で、キングダムの &lt;a href="https://dic.pixiv.net/a/%E8%92%99%E9%A9%81">蒙驁&lt;/a> 将軍が廉頗に挑むみたいな状況を思い出して見返していた。史実では蒙驁が魏を攻めて東郡を置いたというのは事実だが、廉頗と戦ったという記録はなく、おそらくは蒙驁と廉頗に因縁があって雪辱戦としたというのはキングダムの創作だろうと推測される。&lt;/p>
&lt;h2 id="oauth-20-で認証して-google-の-smtp-サーバーを使う">oauth 2.0 で認証して google の smtp サーバーを使う&lt;/h2>
&lt;p>google さんの smtp.gmail.com の smtp サーバーを使ってメールを送信したい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://workspaceupdates.googleblog.com/2019/12/less-secure-apps-oauth-google-username-password-incorrect.html">Turning off less secure app access to G Suite accounts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://workspaceupdates.googleblog.com/2023/09/winding-down-google-sync-and-less-secure-apps-support.html">Beginning September 30, 2024: third-party apps that use only a password to access Google Accounts and Google Sync will no longer be supported&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>2019年にパスワード認証は廃止するので oauth 2.0 へ移行してくださいといった、最初のアナウンスが行われて、もうできないかと思ったら2024年9月30日に完全廃止するのかな？まだパスワード認証は動くかもしれない。一方で oauth 2.0 へ移行しないといけないのでその調査をメンバーにしてもらっていた。結局、途中からは私も本気になって調べていた。&lt;/p>
&lt;p>oauth 2.0 で認証してアクセストークンとリフレッシュトークンを取得するためのサンプルコードとして &lt;a href="https://github.com/google/gmail-oauth2-tools/wiki/OAuth2DotPyRunThrough">OAuth2DotPyRunThrough&lt;/a> が用意されている。このトークンを取得するときに callback の url にユーザーが明示的にアクセスして同意する必要がある。ここで得たアクセストークンは1時間で有効期限がきれる。しかし、リフレッシュトークンはユーザーが revoke しない限りは永続的に使えるそうで、このリフレッシュトークンを使って必要なときにアクセストークンを取得するというのが google さんの oauth 2.0 のアプリケーションの運用になるみたい。つまりリフレッシュトークンをアプリケーション側で管理することでアクセストークンは何度でも取得できる。&lt;/p>
&lt;p>&lt;a href="https://developers.google.com/gmail/imap/xoauth2-protocol">OAuth 2.0 Mechanism&lt;/a> によると、取得したアクセストークンを使って &lt;code>XOAUTH2&lt;/code> という smtp の認証方式で認証すれば smtp サーバーに対して smtp でメールを送信できる。gmail 以外でメールをやり取りする機会がなくなって数年たつ。smtp の仕組みとか、まったく忘れてしまって関心もない。たったこれだけなんだけど、右往左往してあちこち調べることになった。ややこしいのは google のクラウド api 経由でメールを送ることもできて、そのやり方と混同するとまったく違う方向に行ってしまう。そこだけ注意。&lt;/p></content></item><item><title>ステートレスな認証という概念</title><link>/diary/posts/2023/1011/</link><pubDate>Wed, 11 Oct 2023 09:14:37 +0900</pubDate><guid>/diary/posts/2023/1011/</guid><description>0時に寝て4時ぐらいに起きてだらだらして7時半に起きた。やっぱりあまり眠れない。
ステートレスな認証という概念 次の開発フェーズが始まっていて、ちょっと時間が経ってしまったが、前開発フェーズのお披露目的な製品紹介をお手伝い先の全社向けに行った。主には直近の開発フェーズで追加した機能などを紹介した。その過程で新たに認証の仕組みを追加して jwt で認証するといった話しをしたところ、それはステートレスなのかどうかといった質問が出た。セキュリティを考慮して、アーキテクチャ的にフロントエンドの認証と api サーバーの認証は分けて実装しているのと、そのために仕組みも複雑になっているのだけど、ステートレスという言葉が指す意図を私がよくわかっていなくて、うまく説明できなかった。説明を終えた後にアーキテクチャのイメージ図と一緒に補足をしながらやり取りして次の記事を教えてもらった。
&amp;ldquo;JWT=ステートレス&amp;quot;から一歩踏み出すための考え方 jwt は暗号化の技術で認証する仕組みなので有効期限が切れるまでは有効なアクセストークンとなる。そのため、jwt のみだとログアウトという概念はないため、そこをどうしているのか？という質問だった。フロントエンド／api サーバーともに session をオンメモリで保持して、ログインしたユーザーを管理しているため、ログアウトしたら session からレコードを削除することで有効な jwt のアクセストークンが来ても認証エラーにしてしまうことでステートをもった認証方式を実現している。とくまる先生が次のように説明しているところ。
「セッションIDをJWTに内包する」 という考え方です。
うちはこれをセッション ID ではなくユーザー名でやっている。とくに難しいことをやっているわけではなく、普通に実装したらそんな感じかな？と考えていたが、jwt = ステートレス認証だと思い込んでいる人たちがいるから ストートレスな認証 というキーワードが出てきたんだなと理解できた。最近のトレンドとしてはログアウトで jwt のアクセストークンを無効にできないと脆弱性と指摘される可能性がありそうとも書いてある。
ログアウト時にJWTを無効化できない実装は今後脆弱性診断で「OWASP Top 10 2021違反」と指摘されるようになりそう(今も個別にされてるかもしれないけど)
私はアーキテクチャ的にブラウザに api サーバーのアクセストークンをみせないというところに注力して認証機能の開発をサポートしていた。それ自体も間違っていないとは思うけど、今回の質問はその工夫とは異なるところの質問だった。認証は難しい。</description><content>&lt;p>0時に寝て4時ぐらいに起きてだらだらして7時半に起きた。やっぱりあまり眠れない。&lt;/p>
&lt;h2 id="ステートレスな認証という概念">ステートレスな認証という概念&lt;/h2>
&lt;p>次の開発フェーズが始まっていて、ちょっと時間が経ってしまったが、前開発フェーズのお披露目的な製品紹介をお手伝い先の全社向けに行った。主には直近の開発フェーズで追加した機能などを紹介した。その過程で新たに認証の仕組みを追加して jwt で認証するといった話しをしたところ、それはステートレスなのかどうかといった質問が出た。セキュリティを考慮して、アーキテクチャ的にフロントエンドの認証と api サーバーの認証は分けて実装しているのと、そのために仕組みも複雑になっているのだけど、ステートレスという言葉が指す意図を私がよくわかっていなくて、うまく説明できなかった。説明を終えた後にアーキテクチャのイメージ図と一緒に補足をしながらやり取りして次の記事を教えてもらった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zenn.dev/ritou/articles/4a5d6597a5f250">&amp;ldquo;JWT=ステートレス&amp;quot;から一歩踏み出すための考え方&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>jwt は暗号化の技術で認証する仕組みなので有効期限が切れるまでは有効なアクセストークンとなる。そのため、jwt のみだとログアウトという概念はないため、そこをどうしているのか？という質問だった。フロントエンド／api サーバーともに session をオンメモリで保持して、ログインしたユーザーを管理しているため、ログアウトしたら session からレコードを削除することで有効な jwt のアクセストークンが来ても認証エラーにしてしまうことでステートをもった認証方式を実現している。とくまる先生が次のように説明しているところ。&lt;/p>
&lt;blockquote>
&lt;p>「セッションIDをJWTに内包する」 という考え方です。&lt;/p>
&lt;/blockquote>
&lt;p>うちはこれをセッション ID ではなくユーザー名でやっている。とくに難しいことをやっているわけではなく、普通に実装したらそんな感じかな？と考えていたが、jwt = ステートレス認証だと思い込んでいる人たちがいるから &lt;em>ストートレスな認証&lt;/em> というキーワードが出てきたんだなと理解できた。最近のトレンドとしてはログアウトで jwt のアクセストークンを無効にできないと脆弱性と指摘される可能性がありそうとも書いてある。&lt;/p>
&lt;blockquote>
&lt;p>ログアウト時にJWTを無効化できない実装は今後脆弱性診断で「OWASP Top 10 2021違反」と指摘されるようになりそう(今も個別にされてるかもしれないけど)&lt;/p>
&lt;/blockquote>
&lt;p>私はアーキテクチャ的にブラウザに api サーバーのアクセストークンをみせないというところに注力して認証機能の開発をサポートしていた。それ自体も間違っていないとは思うけど、今回の質問はその工夫とは異なるところの質問だった。認証は難しい。&lt;/p></content></item><item><title>珍しく余裕のなかった一日</title><link>/diary/posts/2023/1010/</link><pubDate>Tue, 10 Oct 2023 21:16:44 +0900</pubDate><guid>/diary/posts/2023/1010/</guid><description>0時に寝て何度か起きて7時過ぎに起きた。眠れたような、そうじゃないようなよく分からない起き方をした。お昼ご飯を食べる間もなく、打ち合わせとコードレビューで1日を終えた。連休明けでよい慣らしになった。
税理士さんとの打ち合わせ2 税理士さん探し の続き。今回話した方は公認会計士だった。監査ができるのが公認会計士で、税務の申告ができるのが税理士という役割の違いになる。会計監査も含めてチェックしてほしかったら公認会計士さんにお願いするといった役割分担になるかもしれない。話してみて、若くて理路整然として悪い印象はなにもなかったのだけど、逆にこの人がうちの会社の会計／税務を親身にやってくれそうにもみえなかったし、ホームページの事業内容をみても公認会計士だから税務のビジネスだけではなく、もっと大きな会計のお仕事の方がを目指しているようにもみえた。同じ質問をして、前回の税理士さんの回答の違いなども考慮しながら選定の判断材料にはなるなと思いながらやり取りしていた。選択する側の打ち合わせはおもしろい。
アーキテクチャの再考 お手伝いしているシステム開発で、私の中ではもうアーキテクチャは固まったかな？と考えていたのが、お客さんと話していて、さらなる要件や展望を聞いているとそうじゃなかったことに気付いた。どうやら最初の実装としてはいまのアーキテクチャを堅牢に作って、その次の要件として待っていてくれたようにみえる。
私の認識を正す意味も含めて、さらにお客さんの要件や世の中の競合製品に対して競争力をもつにはどうするかといった視点をざっくばらんに雑談した。もう1段階アーキテクチャを見直す必要があるなと思えた。開発に着手して今月末でちょうど1年が経つ。これまで大きなアーキテクチャの変更もなく、順調に開発は進んできたものの、ここらで見直しやズレの補正が必要になってきてもなんらおかしくはない。いまの開発フェーズでは対応しないが、次の開発フェーズに向けてのアイディアの1つとしてアーキテクチャの再考が必要なことを認識した。</description><content>&lt;p>0時に寝て何度か起きて7時過ぎに起きた。眠れたような、そうじゃないようなよく分からない起き方をした。お昼ご飯を食べる間もなく、打ち合わせとコードレビューで1日を終えた。連休明けでよい慣らしになった。&lt;/p>
&lt;h2 id="税理士さんとの打ち合わせ2">税理士さんとの打ち合わせ2&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/1006/#税理士さんとの打ち合わせ1">税理士さん探し&lt;/a> の続き。今回話した方は公認会計士だった。監査ができるのが公認会計士で、税務の申告ができるのが税理士という役割の違いになる。会計監査も含めてチェックしてほしかったら公認会計士さんにお願いするといった役割分担になるかもしれない。話してみて、若くて理路整然として悪い印象はなにもなかったのだけど、逆にこの人がうちの会社の会計／税務を親身にやってくれそうにもみえなかったし、ホームページの事業内容をみても公認会計士だから税務のビジネスだけではなく、もっと大きな会計のお仕事の方がを目指しているようにもみえた。同じ質問をして、前回の税理士さんの回答の違いなども考慮しながら選定の判断材料にはなるなと思いながらやり取りしていた。選択する側の打ち合わせはおもしろい。&lt;/p>
&lt;h2 id="アーキテクチャの再考">アーキテクチャの再考&lt;/h2>
&lt;p>お手伝いしているシステム開発で、私の中ではもうアーキテクチャは固まったかな？と考えていたのが、お客さんと話していて、さらなる要件や展望を聞いているとそうじゃなかったことに気付いた。どうやら最初の実装としてはいまのアーキテクチャを堅牢に作って、その次の要件として待っていてくれたようにみえる。&lt;/p>
&lt;p>私の認識を正す意味も含めて、さらにお客さんの要件や世の中の競合製品に対して競争力をもつにはどうするかといった視点をざっくばらんに雑談した。もう1段階アーキテクチャを見直す必要があるなと思えた。開発に着手して今月末でちょうど1年が経つ。これまで大きなアーキテクチャの変更もなく、順調に開発は進んできたものの、ここらで見直しやズレの補正が必要になってきてもなんらおかしくはない。いまの開発フェーズでは対応しないが、次の開発フェーズに向けてのアイディアの1つとしてアーキテクチャの再考が必要なことを認識した。&lt;/p></content></item><item><title>秋休み2</title><link>/diary/posts/2023/1009/</link><pubDate>Mon, 09 Oct 2023 17:18:13 +0900</pubDate><guid>/diary/posts/2023/1009/</guid><description>22時に寝て何度か起きて7時に起きた。一昨日からイスラエルとパレスチナの背景の調査をしていて、だいぶあてられてしんどくなってきた。歳のせいか、誰も幸せにならない難しい問題を調べているとしんどくなる。</description><content>&lt;p>22時に寝て何度か起きて7時に起きた。一昨日からイスラエルとパレスチナの背景の調査をしていて、だいぶあてられてしんどくなってきた。歳のせいか、誰も幸せにならない難しい問題を調べているとしんどくなる。&lt;/p></content></item><item><title>解決すべき難しい問題と戦争</title><link>/diary/posts/2023/1008/</link><pubDate>Sun, 08 Oct 2023 13:44:15 +0900</pubDate><guid>/diary/posts/2023/1008/</guid><description>23時頃から寝始めて3時ころに吐き気で苦しんで7時に起きた。寝る前にちょっとお菓子食べたのがよくなかったのかもしれない。
イスラエルとハマスの戦争 昨日の夕方からハマス (パレスチナ) がイスラエルにロケッ弾を打ち込んだというニュースをみていろいろ調べていた。ハマスはパレスチナのガザ地区を実効支配するイスラム組織だそうで、からなずしもパレスチナを代表しているわけではないらしい。パレスチナにもファタハと呼ばれる穏健派もあるそうで一枚岩ではないとのこと。経営者になると、こういった世界のニュースに対して経済への影響が気になって情報収集してしまう。イスラエルとパレスチナの2国間の問題はとても難しいものになっているようで、どうやって解決するのか、誰もアイディアのないまま、いまに至っているようにみえる。是非はとまかく、どちらかがどちらかを滅ぼすしかないのかもしれない。いまのところ、イスラエルとパレスチナの紛争は日常と言えるほど起こっていて、その2国間でドンパチするなら世界経済に大きな影響はないだろうとみられている。一方で今回は規模が大きいのと、一般市民への虐殺や犯行もみられることから、もっと大きな戦争に発展する懸念もみられている。ウクライナとロシアの戦争とも影響して台湾有事への懸念も、リスクは低いかもしれないが、ないわけではないとみられている。
パレスチナ問題ってなに？ １からわかる！イスラエルとパレスチナ（１） 【現状まとめ】イスラエル「戦争状態」 パレスチナとイスラエル、今年だけで200人死んでるよ。</description><content>&lt;p>23時頃から寝始めて3時ころに吐き気で苦しんで7時に起きた。寝る前にちょっとお菓子食べたのがよくなかったのかもしれない。&lt;/p>
&lt;h2 id="イスラエルとハマスの戦争">イスラエルとハマスの戦争&lt;/h2>
&lt;p>昨日の夕方からハマス (パレスチナ) がイスラエルにロケッ弾を打ち込んだというニュースをみていろいろ調べていた。ハマスはパレスチナのガザ地区を実効支配するイスラム組織だそうで、からなずしもパレスチナを代表しているわけではないらしい。パレスチナにもファタハと呼ばれる穏健派もあるそうで一枚岩ではないとのこと。経営者になると、こういった世界のニュースに対して経済への影響が気になって情報収集してしまう。イスラエルとパレスチナの2国間の問題はとても難しいものになっているようで、どうやって解決するのか、誰もアイディアのないまま、いまに至っているようにみえる。是非はとまかく、どちらかがどちらかを滅ぼすしかないのかもしれない。いまのところ、イスラエルとパレスチナの紛争は日常と言えるほど起こっていて、その2国間でドンパチするなら世界経済に大きな影響はないだろうとみられている。一方で今回は規模が大きいのと、一般市民への虐殺や犯行もみられることから、もっと大きな戦争に発展する懸念もみられている。ウクライナとロシアの戦争とも影響して台湾有事への懸念も、リスクは低いかもしれないが、ないわけではないとみられている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www3.nhk.or.jp/news/special/news_seminar/jiji/jiji97/">パレスチナ問題ってなに？ １からわかる！イスラエルとパレスチナ（１）&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://note.com/goto_finance/n/n136b3f1964f8">【現状まとめ】イスラエル「戦争状態」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://anond.hatelabo.jp/20231007234056">パレスチナとイスラエル、今年だけで200人死んでるよ。&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>世界観のあう買いもの</title><link>/diary/posts/2023/1007/</link><pubDate>Sat, 07 Oct 2023 16:31:44 +0900</pubDate><guid>/diary/posts/2023/1007/</guid><description>0時に寝て何度か起きて7時に起きた。2-3日前から首を寝違えていて違和感がある。課題管理のブログ記事を書こうと思っていたけど、気分がのらなくて遊んでいた。
ストレッチ 今週も忙しくはなく、のんびり過ごしていたので体調は徐々に復調している。腰の張りは先週に比べてかなりよくなっているように感じた。トレーナーさんによるとふくらはぎの筋の張りがあったそうだけど、私からみたらそんなに気にはならなかった。今日の開脚幅は開始前155cmで、ストレッチ後158cmだった。首を寝違えているのもなにかしらよくなる方法があるかと思って相談してみた。トレーナーさん曰く、首の寝違えだけは自然治癒しか方法がないという。トレーナーさんたちの間でもいろいろ試してみたことがあるらしい。しかし、どれも一時的に痛みを和らげる効果のあるストレッチはあるものの、時間が経つと元に戻るので限定的なものらしい。その一時的に痛みを和らげるのも、脇の下の筋を伸ばすと効果があるらしい。トレーナーさんもなぜその筋を伸ばすと痛みが和らぐのかの理屈はよく分からないそうだが、実際に試してみてそこだけが効果があったと話されていた。
Python Boot Camp 来週、徳島の鳴門でイベントがある。いま余裕もあるのでスタッフが足らなかったら手伝ってもいいと、前にてらださんと話していた。ちょっと前まで参加者が1人しかいなかったので手伝う必要ないかと思っていたんだが、ここ数日でいっきに参加者が増えたみたいで助っ人で手伝いに行くことにした。ブートキャンプに参加するのは初めて。チュートリアルやスタッフの要項などのドキュメントを予習として読んでいた。
Python Boot Camp in 徳島2nd
ヨハクさんのフレークシール たまたま「余白」というキーワードでインターネットを検索していて次のサイトをみつけた。
https://yohaku.stores.jp/ マスキングテープの専門店らしいが、なんとなく制作物の世界観が私にあうので応援も含めて次のフレークシールを買ってみることにした。
CATEGORY / Flake seal 3種類買ってみて、今日届いたので、試しに一緒に入っていた型紙に貼ってフレームに入れてみた。こういう雰囲気が好き。しばらくオフィスの棚に飾ってみようと思う。
ツキトホシ ダイアリー テガミ</description><content>&lt;p>0時に寝て何度か起きて7時に起きた。2-3日前から首を寝違えていて違和感がある。課題管理のブログ記事を書こうと思っていたけど、気分がのらなくて遊んでいた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週も忙しくはなく、のんびり過ごしていたので体調は徐々に復調している。腰の張りは先週に比べてかなりよくなっているように感じた。トレーナーさんによるとふくらはぎの筋の張りがあったそうだけど、私からみたらそんなに気にはならなかった。今日の開脚幅は開始前155cmで、ストレッチ後158cmだった。首を寝違えているのもなにかしらよくなる方法があるかと思って相談してみた。トレーナーさん曰く、首の寝違えだけは自然治癒しか方法がないという。トレーナーさんたちの間でもいろいろ試してみたことがあるらしい。しかし、どれも一時的に痛みを和らげる効果のあるストレッチはあるものの、時間が経つと元に戻るので限定的なものらしい。その一時的に痛みを和らげるのも、脇の下の筋を伸ばすと効果があるらしい。トレーナーさんもなぜその筋を伸ばすと痛みが和らぐのかの理屈はよく分からないそうだが、実際に試してみてそこだけが効果があったと話されていた。&lt;/p>
&lt;h2 id="python-boot-camp">Python Boot Camp&lt;/h2>
&lt;p>来週、徳島の鳴門でイベントがある。いま余裕もあるのでスタッフが足らなかったら手伝ってもいいと、前にてらださんと話していた。ちょっと前まで参加者が1人しかいなかったので手伝う必要ないかと思っていたんだが、ここ数日でいっきに参加者が増えたみたいで助っ人で手伝いに行くことにした。ブートキャンプに参加するのは初めて。チュートリアルやスタッフの要項などのドキュメントを予習として読んでいた。&lt;/p>
&lt;p>&lt;a href="https://pyconjp.connpass.com/event/293032/">Python Boot Camp in 徳島2nd&lt;/a>&lt;/p>
&lt;h2 id="ヨハクさんのフレークシール">ヨハクさんのフレークシール&lt;/h2>
&lt;p>たまたま「余白」というキーワードでインターネットを検索していて次のサイトをみつけた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://yohaku.stores.jp/">https://yohaku.stores.jp/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>マスキングテープの専門店らしいが、なんとなく制作物の世界観が私にあうので応援も含めて次のフレークシールを買ってみることにした。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://yohaku.stores.jp/?category_id=642bf7f02ce5f6002939cf51">CATEGORY / Flake seal&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>3種類買ってみて、今日届いたので、試しに一緒に入っていた型紙に貼ってフレームに入れてみた。こういう雰囲気が好き。しばらくオフィスの棚に飾ってみようと思う。&lt;/p>
&lt;ul>
&lt;li>ツキトホシ&lt;/li>
&lt;li>ダイアリー&lt;/li>
&lt;li>テガミ&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="/diary/diary/img/2023/1007_frake-seal.jpg"/>
&lt;/figure></content></item><item><title>税理士さんの選定</title><link>/diary/posts/2023/1006/</link><pubDate>Fri, 06 Oct 2023 19:22:05 +0900</pubDate><guid>/diary/posts/2023/1006/</guid><description>1時に寝て3時頃に吐き気で起きて1時間ぐらい苦しんでた。久しぶりにやばかった。その後なんとか寝て7時半に起きた。
税理士さんとの打ち合わせ1 うちの会社のイベントとして毎年ワーケーション (開発合宿) をやろうかと考えている。コワーキングやコミュニティの延長上でワーケーションを行うわけだが、いくらかうちの会社の持ち出しで費用負担してよいと考えている。しかし、そのときの支出はどういった建付けで経費として扱えるのかどうか、私は税理士ではないのでよくわかっていない。そういったことを相談するために税理士さんに顧問になってもらおうと考えている。うちから税理士さんへの要件としては freee のデータを正として扱ってくれればそれでいいかな。
また2021年度は赤字決算になったので2022年度に 法人税の欠損金の繰り戻し還付 を行った。このお金を2022年度に計上していないため、その分の金額が資産のマイナスとして2023年度の決算に残ってしまっている。法人税の支払いは正しいのだが、還付金を2023年度に雑収入として登録するか、2022年度に遡って未計上の金額を登録するかのどちらかで訂正しないといけない。過去の法人決算の訂正自体も行う仕組みはあるので手続きするだけだが、それも手間暇がかかるのでついでに税理士さんにやってもらうと考えている。
税理士・会計士にfreeeの情報を共有する 会計システムに freee を使っているので freee さんの税理士紹介サービスを使って選定する。3事務所ピックアップしてくれたので順番に打ち合わせしていく。今日はその最初の税理事務所の方と打ち合わせした。話した感覚でうちの会社の考え方や規模にあった税理士さんだったのでこの方でいいんじゃないかとも思っているけれど、せっかく他の事務所もピックアップしてくれたので他の税理士さんの話も来週また聞いてみる。
コードレビュー まる一日コードレビューをしていた。私もマージリクエストを投げていてレビューしてもらいつつ、メンバーのコードレビューも順番にやっていった。その中で smtp の仕様を把握しておく必要があっていくつかシニアエンジニアの方からもアドバイスをもらって、私もそうだったんだと勉強していた。メールヘッダーのエンコーディング、昔は覚えていたけど、ずっとメールを送るコードを書いてなかったので私も忘れてしまっていた。こういうことをさらっと指摘できるのがシニアエンジニアのすごいところ。
sendmail コマンドによるメール発信 - Postfix Advent Calendar 2014 - ダメ出し Blog go だと標準ライブラリに mime パッケージがある。mime パッケージを使って件名を utf-8 でエンコーディングされた文字列で指定すると次のようになる。q エンコーディングと b エンコーディングの2種類がある。b エンコーディングの方がデータ量が減ってよさそう。
fmt.Println(&amp;#34;Subject: &amp;#34; + mime.QEncoding.Encode(&amp;#34;utf-8&amp;#34;, &amp;#34;テスト&amp;#34;)) fmt.Println(&amp;#34;Subject: &amp;#34; + mime.BEncoding.Encode(&amp;#34;utf-8&amp;#34;, &amp;#34;テスト&amp;#34;)) Subject: =?utf-8?q?=E3=83=86=E3=82=B9=E3=83=88?= Subject: =?UTF-8?b?44OG44K544OI?= https://go.dev/play/p/zQjMMp17bKf</description><content>&lt;p>1時に寝て3時頃に吐き気で起きて1時間ぐらい苦しんでた。久しぶりにやばかった。その後なんとか寝て7時半に起きた。&lt;/p>
&lt;h2 id="税理士さんとの打ち合わせ1">税理士さんとの打ち合わせ1&lt;/h2>
&lt;p>うちの会社のイベントとして毎年ワーケーション (開発合宿) をやろうかと考えている。コワーキングやコミュニティの延長上でワーケーションを行うわけだが、いくらかうちの会社の持ち出しで費用負担してよいと考えている。しかし、そのときの支出はどういった建付けで経費として扱えるのかどうか、私は税理士ではないのでよくわかっていない。そういったことを相談するために税理士さんに顧問になってもらおうと考えている。うちから税理士さんへの要件としては freee のデータを正として扱ってくれればそれでいいかな。&lt;/p>
&lt;p>また2021年度は赤字決算になったので2022年度に &lt;a href="/diary/diary/posts/2022/0626/#法人税の修正申告と欠損金の繰り戻し還付の訂正依頼">法人税の欠損金の繰り戻し還付&lt;/a> を行った。このお金を2022年度に計上していないため、その分の金額が資産のマイナスとして2023年度の決算に残ってしまっている。法人税の支払いは正しいのだが、還付金を2023年度に雑収入として登録するか、2022年度に遡って未計上の金額を登録するかのどちらかで訂正しないといけない。過去の法人決算の訂正自体も行う仕組みはあるので手続きするだけだが、それも手間暇がかかるのでついでに税理士さんにやってもらうと考えている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://support.freee.co.jp/hc/ja/articles/204403124-%E7%A8%8E%E7%90%86%E5%A3%AB-%E4%BC%9A%E8%A8%88%E5%A3%AB%E3%81%ABfreee%E3%81%AE%E6%83%85%E5%A0%B1%E3%82%92%E5%85%B1%E6%9C%89%E3%81%99%E3%82%8B">税理士・会計士にfreeeの情報を共有する&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>会計システムに freee を使っているので freee さんの税理士紹介サービスを使って選定する。3事務所ピックアップしてくれたので順番に打ち合わせしていく。今日はその最初の税理事務所の方と打ち合わせした。話した感覚でうちの会社の考え方や規模にあった税理士さんだったのでこの方でいいんじゃないかとも思っているけれど、せっかく他の事務所もピックアップしてくれたので他の税理士さんの話も来週また聞いてみる。&lt;/p>
&lt;h2 id="コードレビュー">コードレビュー&lt;/h2>
&lt;p>まる一日コードレビューをしていた。私もマージリクエストを投げていてレビューしてもらいつつ、メンバーのコードレビューも順番にやっていった。その中で smtp の仕様を把握しておく必要があっていくつかシニアエンジニアの方からもアドバイスをもらって、私もそうだったんだと勉強していた。メールヘッダーのエンコーディング、昔は覚えていたけど、ずっとメールを送るコードを書いてなかったので私も忘れてしまっていた。こういうことをさらっと指摘できるのがシニアエンジニアのすごいところ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://fumiyas.github.io/2014/12/13/sendmail.postfix-advent-calendar.html">sendmail コマンドによるメール発信 - Postfix Advent Calendar 2014 - ダメ出し Blog&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>go だと標準ライブラリに &lt;a href="https://pkg.go.dev/mime">mime&lt;/a> パッケージがある。mime パッケージを使って件名を utf-8 でエンコーディングされた文字列で指定すると次のようになる。q エンコーディングと b エンコーディングの2種類がある。b エンコーディングの方がデータ量が減ってよさそう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Subject: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">mime&lt;/span>.&lt;span style="color:#a6e22e">QEncoding&lt;/span>.&lt;span style="color:#a6e22e">Encode&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;テスト&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Subject: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">mime&lt;/span>.&lt;span style="color:#a6e22e">BEncoding&lt;/span>.&lt;span style="color:#a6e22e">Encode&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;テスト&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>Subject: =?utf-8?q?=E3=83=86=E3=82=B9=E3=83=88?=
Subject: =?UTF-8?b?44OG44K544OI?=
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;a href="https://go.dev/play/p/zQjMMp17bKf">https://go.dev/play/p/zQjMMp17bKf&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>ふりかえり + チーム勉強会</title><link>/diary/posts/2023/1005/</link><pubDate>Thu, 05 Oct 2023 08:26:09 +0900</pubDate><guid>/diary/posts/2023/1005/</guid><description>22時から寝始めて何度か起きて7時に起きた。久しぶりにどっしりくるような夢をみたけれど、もう内容を覚えていない。
ふりかえりを兼ねたチーム勉強会 新しい開発に着手して初めてのチーム勉強会を行った。前の開発とチーム勉強会の運用を大きく変更した。ざっくり次が要項になる。
前開発の postmortem 運用がうまくいかなかったので代替としてやってみる 開発システム全体の機能が増えてきて、メンバーそれぞれがやっていることもバラバラになりつつある 普段やっていることを他メンバーへ情報共有する機会とする そのときのマイルストーンでやっていることをふりかえりする機会とする 開発システムについて知りたいところや設計の議論などをしてもよい メンバーが全員揃っていれば、どんな質問をしても誰かが知っているはず そのマイルストーンでやったことを基本として他メンバーへ共有する 内容は基本的になんでもよい、あまり準備せずに話せる内容でよい 特定の issue の内容でも、マージリクエストの解説でも、機能や振る舞いの考察など 知識やノウハウを他メンバーに共用する上で wiki やブログの記事などにしてもよい 書くところがなかったらテックブログに書けばよい 勉強会のために調査する時間が必要であれば、その調査時間も仕事の一環とする 勉強会の準備も考慮して開発のスケジュールを各自で調整する 業務で実装したことや調査したことを共有する機会にもなる まだ合流前だけど、メンバーが新規に1人増える。2週間に1回の定例のみだと、新しいメンバーが既存のメンバーに追いつくための情報が足りないだろうと思って質問しやすい機会を設けようと考えていた。雑談時間とか、設計会議とか、そういう呼び方をしてもよいのだけど、私にとって違和感なく一番しっくりきて柔軟性も高いのが「チーム勉強会」になる。ふりかえりと情報共有と学びの場の3つを兼ね、チームビルディングにも応用しようという、まさに天才の所業ではないかw まだ始めたばかりだから言うだけ言っておく。また開発が終わったときに良し悪しのふりかえりはする。
今日のところは最初だったので前マイルストーンでやった issue をメンバーそれぞれ1つずつ内容を説明して共有した。私も mongodb の初期化ツールのマージリクエストが出来たばかりだったのでその背景や意図、工夫したところなどを紹介した。他のメンバーも背景やソースコードを紹介しながらみんなでわいわいできた。第1回目にしては活気があって情報共有という目的も果たせたし、よい感じの取り組みにみえた。このままうまく運用にのせていく。</description><content>&lt;p>22時から寝始めて何度か起きて7時に起きた。久しぶりにどっしりくるような夢をみたけれど、もう内容を覚えていない。&lt;/p>
&lt;h2 id="ふりかえりを兼ねたチーム勉強会">ふりかえりを兼ねたチーム勉強会&lt;/h2>
&lt;p>新しい開発に着手して初めてのチーム勉強会を行った。前の開発とチーム勉強会の運用を大きく変更した。ざっくり次が要項になる。&lt;/p>
&lt;ul>
&lt;li>前開発の postmortem 運用がうまくいかなかったので代替としてやってみる&lt;/li>
&lt;li>開発システム全体の機能が増えてきて、メンバーそれぞれがやっていることもバラバラになりつつある
&lt;ul>
&lt;li>普段やっていることを他メンバーへ情報共有する機会とする&lt;/li>
&lt;li>そのときのマイルストーンでやっていることをふりかえりする機会とする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>開発システムについて知りたいところや設計の議論などをしてもよい
&lt;ul>
&lt;li>メンバーが全員揃っていれば、どんな質問をしても誰かが知っているはず&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>そのマイルストーンでやったことを基本として他メンバーへ共有する
&lt;ul>
&lt;li>内容は基本的になんでもよい、あまり準備せずに話せる内容でよい
&lt;ul>
&lt;li>特定の issue の内容でも、マージリクエストの解説でも、機能や振る舞いの考察など&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>知識やノウハウを他メンバーに共用する上で wiki やブログの記事などにしてもよい
&lt;ul>
&lt;li>書くところがなかったらテックブログに書けばよい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>勉強会のために調査する時間が必要であれば、その調査時間も仕事の一環とする
&lt;ul>
&lt;li>勉強会の準備も考慮して開発のスケジュールを各自で調整する&lt;/li>
&lt;li>業務で実装したことや調査したことを共有する機会にもなる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>まだ合流前だけど、メンバーが新規に1人増える。2週間に1回の定例のみだと、新しいメンバーが既存のメンバーに追いつくための情報が足りないだろうと思って質問しやすい機会を設けようと考えていた。雑談時間とか、設計会議とか、そういう呼び方をしてもよいのだけど、私にとって違和感なく一番しっくりきて柔軟性も高いのが「チーム勉強会」になる。ふりかえりと情報共有と学びの場の3つを兼ね、チームビルディングにも応用しようという、まさに天才の所業ではないかw まだ始めたばかりだから言うだけ言っておく。また開発が終わったときに良し悪しのふりかえりはする。&lt;/p>
&lt;p>今日のところは最初だったので前マイルストーンでやった issue をメンバーそれぞれ1つずつ内容を説明して共有した。私も mongodb の初期化ツールのマージリクエストが出来たばかりだったのでその背景や意図、工夫したところなどを紹介した。他のメンバーも背景やソースコードを紹介しながらみんなでわいわいできた。第1回目にしては活気があって情報共有という目的も果たせたし、よい感じの取り組みにみえた。このままうまく運用にのせていく。&lt;/p></content></item><item><title>相続税の申告の一歩手前</title><link>/diary/posts/2023/1004/</link><pubDate>Wed, 04 Oct 2023 08:26:17 +0900</pubDate><guid>/diary/posts/2023/1004/</guid><description>22時頃から寝始めて何度か起きて6時に起きた。早寝早起き。
会計士事務所への訪問 相続税の申告手続きを未だにやっている。
父が失くなったのが 昨年の12月26日 になる。相続税は死亡を知った日から10ヶ月以内と期限が決められている。それを過ぎると算税や延滞税などのペナルティが科せられる。うちの期限は10月26日になる。1-3月ぐらい葬儀やらお仕事やらで忙しかったものの、4月ぐらいから相続の手続きに着手した。5月29日に親族の相続関連の書類を取りまとめて弁護士さんへ送付した。それから銀行口座の解約やら司法書士さんやら税理士さんの作業やらなんやらあって、いまもまだ会計士さんに申告の書類を作ってもらっているところ。その過程でいくつか質疑応答があってそれを調査したりしている。
その会計士さんの事務所が近所にあるのでお昼に訪問して挨拶してきた。申告に必要な書類の提出をしつつ軽く打ち合わせをした。税務署は20年遡って口座のお金を動きを調べるらしい。話しているときに死亡保険金とかないですか？と聞かれて、母が受けとったと話していたなと思い出して、それも父の遺産として扱う必要がありますと言われて、確かにそうだと思って申告漏れしていることに気付いた。これで死亡保険金の書類が必要になってまた取り寄せに時間がかかる。こんな感じに五月雨式に遅れていくので10ヶ月ぎりぎりになりそうな雰囲気。来週中に申告が終わる嬉しいなといったところ。
mongodb の初期化ツール ちょっと前から少しずつ mongodb の初期化ツールを作っている。コレクションの作成ならびにインデックスの追加を、さらに初期データの投入も制御したい。mongodb のバージョンが 6.0.x のときは作成済みのコレクションに対して同じ設定で作成しようとすると、既に作成済みというエラーが発生していた。それが 7.0.x になってエラーにならないようになっていることに気付いた。調べてみると、次の issue で同じ設定なら作成の結果に関係なく冪等であるのでエラーとして扱わなくてよいという考え方になる。
Make create command idempotent on mongod これは初期化ツールを作っている私にとっては朗報で、同じコレクションに対して複数の操作をしても変更した設定だけが有効になるといった振る舞いをする。こういう細かい所もバージョンアップをしながら改善していくことが伺えて学びになった。</description><content>&lt;p>22時頃から寝始めて何度か起きて6時に起きた。早寝早起き。&lt;/p>
&lt;h2 id="会計士事務所への訪問">会計士事務所への訪問&lt;/h2>
&lt;p>相続税の申告手続きを未だにやっている。&lt;/p>
&lt;p>父が失くなったのが &lt;a href="/diary/diary/posts/2022/1226/">昨年の12月26日&lt;/a> になる。相続税は死亡を知った日から10ヶ月以内と期限が決められている。それを過ぎると算税や延滞税などのペナルティが科せられる。うちの期限は10月26日になる。1-3月ぐらい葬儀やらお仕事やらで忙しかったものの、4月ぐらいから相続の手続きに着手した。5月29日に親族の相続関連の書類を取りまとめて弁護士さんへ送付した。それから銀行口座の解約やら司法書士さんやら税理士さんの作業やらなんやらあって、いまもまだ会計士さんに申告の書類を作ってもらっているところ。その過程でいくつか質疑応答があってそれを調査したりしている。&lt;/p>
&lt;p>その会計士さんの事務所が近所にあるのでお昼に訪問して挨拶してきた。申告に必要な書類の提出をしつつ軽く打ち合わせをした。税務署は20年遡って口座のお金を動きを調べるらしい。話しているときに死亡保険金とかないですか？と聞かれて、母が受けとったと話していたなと思い出して、それも父の遺産として扱う必要がありますと言われて、確かにそうだと思って申告漏れしていることに気付いた。これで死亡保険金の書類が必要になってまた取り寄せに時間がかかる。こんな感じに五月雨式に遅れていくので10ヶ月ぎりぎりになりそうな雰囲気。来週中に申告が終わる嬉しいなといったところ。&lt;/p>
&lt;h2 id="mongodb-の初期化ツール">mongodb の初期化ツール&lt;/h2>
&lt;p>ちょっと前から少しずつ mongodb の初期化ツールを作っている。コレクションの作成ならびにインデックスの追加を、さらに初期データの投入も制御したい。mongodb のバージョンが 6.0.x のときは作成済みのコレクションに対して同じ設定で作成しようとすると、既に作成済みというエラーが発生していた。それが 7.0.x になってエラーにならないようになっていることに気付いた。調べてみると、次の issue で同じ設定なら作成の結果に関係なく冪等であるのでエラーとして扱わなくてよいという考え方になる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://jira.mongodb.org/browse/SERVER-60064">Make create command idempotent on mongod&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>これは初期化ツールを作っている私にとっては朗報で、同じコレクションに対して複数の操作をしても変更した設定だけが有効になるといった振る舞いをする。こういう細かい所もバージョンアップをしながら改善していくことが伺えて学びになった。&lt;/p></content></item><item><title>selinux はなるべく有効にして使うもの</title><link>/diary/posts/2023/1003/</link><pubDate>Tue, 03 Oct 2023 16:28:42 +0900</pubDate><guid>/diary/posts/2023/1003/</guid><description>22時ぐらいから寝始めて何度か起きて6時に起きた。早く寝たから早く起きた。
selinux の微妙な振る舞い 今日は火曜日なのでチームの定例会議をやって、ドキュメントを書いて、その後はインフラの細かい作業をわちゃわちゃやって、ドキュメントを書いてとわちゃわちゃやってた。
先週、最新の almalinux 8 をインストールして、その後、lvm の論理ボリュームの結合 とか、rootless コンテナ の設定とか、テスト環境を構築していた。gitlab ci/cd から ssh で公開鍵認証を使ってデプロイしている。作り直したこのテスト環境に対してその公開鍵認証がうまく動かない現象に遭遇した。よくある設定や権限のトラブルではなく、デバッグ用の sshd を起動すると公開鍵認証できた。なにかしら systemd 経由で起動する sshd の設定ミスなんじゃないかと、2-3時間デバッグしてもわからなくて社内の有識者に尋ねてみた。
$ sudo /usr/sbin/sshd -d -p 2222 selinux を無効にしてみたら？というアドバイスをいただいて、試しに enforced から disabled にしたら動いたので selinux のなにかしらの設定を変えてしまったのかな？とそのときは思っていた。しかし、別の開発者からデフォルト設定で enforced でも動くはずという情報をもらって、もう一度 disabled から enforced に戻して再起動したら普通に動いて、その前の公開鍵認証の失敗を再現できなくなった。私にはこの先のデバッグはまったくわからない。お手伝い先のシニアエンジニアの方にみてもらって次のようなことを教えてもらった。
SElinuxが怪しいなと思ったら、/var/log/audit/audit.log とかausearch -m avcコマンドを確認。
authorized_keysのアクセスが拒否されているので確かにSELinuxの問題があったことがわかります。
type=AVC msg=audit(1696315292.258:1446): avc: denied { read } for pid=446534 comm=&amp;ldquo;sshd&amp;rdquo; name=&amp;ldquo;authorized_keys&amp;rdquo; dev=&amp;ldquo;dm-0&amp;rdquo; ino=201836096 scontext=system_u:system_r:sshd_t:s0-s0:c0.c1023 tcontext=unconfined_u:object_r:default_t:s0 tclass=file permissive=0
現在、authorized_keysのコンテキストは期待通りunconfined_u:object_r:ssh_home_t:s0となっているけど、問題が起きていたときは、unconfined_u:object_r:default_t:s0 だったことがわかります。
詳しい経緯はわからないけど、.ssh/authorized_keysを作成した時点でopenssh用のselinuxポリシーが適用されていなかったと考えられます。
その後なにかのイベント(再起動?)でrestorecon 相当が行われて、コンテキストがssh_home_tに変更され問題は解消した。
なんだかよくわかないけど、OSのマイナーバージョンアップで微妙にセキュリティコンテキストが変更されてrestoreconすると解決する、ってのは時々起きてますね。</description><content>&lt;p>22時ぐらいから寝始めて何度か起きて6時に起きた。早く寝たから早く起きた。&lt;/p>
&lt;h2 id="selinux-の微妙な振る舞い">selinux の微妙な振る舞い&lt;/h2>
&lt;p>今日は火曜日なのでチームの定例会議をやって、ドキュメントを書いて、その後はインフラの細かい作業をわちゃわちゃやって、ドキュメントを書いてとわちゃわちゃやってた。&lt;/p>
&lt;p>先週、最新の almalinux 8 をインストールして、その後、&lt;a href="/diary/diary/posts/2023/0929/#lvm-の論理ボリュームの結合">lvm の論理ボリュームの結合&lt;/a> とか、&lt;a href="/diary/diary/posts/2023/1002/">rootless コンテナ&lt;/a> の設定とか、テスト環境を構築していた。gitlab ci/cd から ssh で公開鍵認証を使ってデプロイしている。作り直したこのテスト環境に対してその公開鍵認証がうまく動かない現象に遭遇した。よくある設定や権限のトラブルではなく、デバッグ用の sshd を起動すると公開鍵認証できた。なにかしら systemd 経由で起動する sshd の設定ミスなんじゃないかと、2-3時間デバッグしてもわからなくて社内の有識者に尋ねてみた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo /usr/sbin/sshd -d -p &lt;span style="color:#ae81ff">2222&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>selinux を無効にしてみたら？というアドバイスをいただいて、試しに enforced から disabled にしたら動いたので selinux のなにかしらの設定を変えてしまったのかな？とそのときは思っていた。しかし、別の開発者からデフォルト設定で enforced でも動くはずという情報をもらって、もう一度 disabled から enforced に戻して再起動したら普通に動いて、その前の公開鍵認証の失敗を再現できなくなった。私にはこの先のデバッグはまったくわからない。お手伝い先のシニアエンジニアの方にみてもらって次のようなことを教えてもらった。&lt;/p>
&lt;blockquote>
&lt;p>SElinuxが怪しいなと思ったら、/var/log/audit/audit.log とか&lt;code>ausearch -m avc&lt;/code>コマンドを確認。&lt;br />
authorized_keysのアクセスが拒否されているので確かにSELinuxの問題があったことがわかります。&lt;br />
type=AVC msg=audit(1696315292.258:1446): avc: denied { read } for pid=446534 comm=&amp;ldquo;sshd&amp;rdquo; name=&amp;ldquo;authorized_keys&amp;rdquo; dev=&amp;ldquo;dm-0&amp;rdquo; ino=201836096 scontext=system_u:system_r:sshd_t:s0-s0:c0.c1023 tcontext=unconfined_u:object_r:default_t:s0 tclass=file permissive=0&lt;br />
現在、authorized_keysのコンテキストは期待通りunconfined_u:object_r:ssh_home_t:s0となっているけど、問題が起きていたときは、unconfined_u:object_r:default_t:s0 だったことがわかります。&lt;br />
詳しい経緯はわからないけど、.ssh/authorized_keysを作成した時点でopenssh用のselinuxポリシーが適用されていなかったと考えられます。&lt;br />
その後なにかのイベント(再起動?)でrestorecon 相当が行われて、コンテキストがssh_home_tに変更され問題は解消した。&lt;br />
なんだかよくわかないけど、OSのマイナーバージョンアップで微妙にセキュリティコンテキストが変更されてrestoreconすると解決する、ってのは時々起きてますね。&lt;br />
たぶんopensshインストール前にrsyncしたのでコンテキストがdefault_tになってたんじゃないかと。なかなかの罠ですね。&lt;br />&lt;/p>
&lt;/blockquote>
&lt;p>おそらく lvm の論理ボリュームのバックアップ／リストアに &lt;code>rsync -a&lt;/code> を使った (本当は &lt;code>cp -a&lt;/code>の方がよい) ことによる問題ではないかということ。私が報告した状況と selinux のログからすぐ助言できるのが素晴らしいと思う。まだまだ私のインフラエンジニアとしての未熟さを実感した瞬間でもあった。一昔前は selinux は disabled にするものという常識だったが、最近は初期設定で動くようになっているのでなるべく selinux は有効にして運用するものという意識に変わってきているらしい。&lt;/p></content></item><item><title>インフラの式年遷宮</title><link>/diary/posts/2023/1002/</link><pubDate>Mon, 02 Oct 2023 09:08:26 +0900</pubDate><guid>/diary/posts/2023/1002/</guid><description>1時に寝て何度か起きて5時に起きた。それからだらだらして寝てまた7時に起きた。
テスト環境の再整備と rootless コンテナ インフラの式年遷宮のようなことをしていて、テスト環境をリファクタリングして再整備していた。これまで root でコンテナを実行していたが、最近は rootless コンテナがセキュリティ強化の観点から望ましいということで次のドキュメントをみながら設定した。
Linux post-installation steps for Docker Engine 設定はとくに難しくないが、dockerd や containerd の起動を systemd のユーザーインスタンスに依存することになる。systemd のユーザーインスタンスは基本的にユーザーがログインしたときに生成されるものなので OS が再起動したときなどに困る。OS 再起動時にも systemd のユーザーインスタンスを生成するには linger という仕組みを有効にすればよいらしい。systemd &amp;ndash;user の扱いと linger のことまで理解していれば、たぶん大丈夫なのかな？これで運用がうまくいくことを祈りたい。
$ sudo loginctl enable-linger ucidm</description><content>&lt;p>1時に寝て何度か起きて5時に起きた。それからだらだらして寝てまた7時に起きた。&lt;/p>
&lt;h2 id="テスト環境の再整備と-rootless-コンテナ">テスト環境の再整備と rootless コンテナ&lt;/h2>
&lt;p>インフラの式年遷宮のようなことをしていて、テスト環境をリファクタリングして再整備していた。これまで root でコンテナを実行していたが、最近は rootless コンテナがセキュリティ強化の観点から望ましいということで次のドキュメントをみながら設定した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/engine/install/linux-postinstall/">Linux post-installation steps for Docker Engine&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>設定はとくに難しくないが、dockerd や containerd の起動を systemd のユーザーインスタンスに依存することになる。systemd のユーザーインスタンスは基本的にユーザーがログインしたときに生成されるものなので OS が再起動したときなどに困る。OS 再起動時にも systemd のユーザーインスタンスを生成するには linger という仕組みを有効にすればよいらしい。systemd &amp;ndash;user の扱いと linger のことまで理解していれば、たぶん大丈夫なのかな？これで運用がうまくいくことを祈りたい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo loginctl enable-linger ucidm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>インボイス制度の開始</title><link>/diary/posts/2023/1001/</link><pubDate>Sun, 01 Oct 2023 10:28:40 +0900</pubDate><guid>/diary/posts/2023/1001/</guid><description>0時に寝て何度か起きて7時過ぎに起きた。いろいろ作業していたんだけど、お昼からインボイス制度の開始に伴って請求書や会計処理がちょっと変わるのでそのシステムの運用や調べものをしていた。
インボイス制度の開始 10/1にサブスクリプションの請求が届いているものを経費登録しようとしていて税区分が変わってくることに気付いた。適格請求書発行事業者向けの支払いであればこれまで通りだが、そうじゃない場合に経過措置期間用税区分が新設されている。合理的に考えたら経過措置の控除割合80%を選択することで節税になる。ここで会計システムに経費登録する際、適格請求書発行事業者なのかどうかについて、これまでは未確認だったものを請求書 (領収書) から判断する必要が出てくる。いまみたらセブンイレブンのレシートにも登録番号が記載されている。こうやってシステム (仕組み) で世の中を変えていくのは強力だなと思えた。
インボイス制度(クリエイター向け) 経過措置期間用税区分の消費税計算方法 その後、取引先の設定に適格請求書発行事業者の登録番号を設定できることがわかって、明らかにそうだとわかっているものは検索して設定したりしていた。外国企業については 国境を越えた役務の提供に係る消費税の課税関係について に書いてある。例えば、google workspace を使っていると請求書には Google Asia Pacific Pte. LTd. と書いてある。しかし、請求書には登録番号がない。これは 登録国外事業者名簿 をみると、有効であることがわかり、さらに法人番号もみつかる。法人に関しては法人番号と登録番号は基本的に同じなのでそれを登録しておけばよい。</description><content>&lt;p>0時に寝て何度か起きて7時過ぎに起きた。いろいろ作業していたんだけど、お昼からインボイス制度の開始に伴って請求書や会計処理がちょっと変わるのでそのシステムの運用や調べものをしていた。&lt;/p>
&lt;h2 id="インボイス制度の開始">インボイス制度の開始&lt;/h2>
&lt;p>10/1にサブスクリプションの請求が届いているものを経費登録しようとしていて税区分が変わってくることに気付いた。適格請求書発行事業者向けの支払いであればこれまで通りだが、そうじゃない場合に経過措置期間用税区分が新設されている。合理的に考えたら経過措置の控除割合80%を選択することで節税になる。ここで会計システムに経費登録する際、適格請求書発行事業者なのかどうかについて、これまでは未確認だったものを請求書 (領収書) から判断する必要が出てくる。いまみたらセブンイレブンのレシートにも登録番号が記載されている。こうやってシステム (仕組み) で世の中を変えていくのは強力だなと思えた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.help-note.com/hc/ja/articles/22355987935001-%E3%82%A4%E3%83%B3%E3%83%9C%E3%82%A4%E3%82%B9%E5%88%B6%E5%BA%A6-%E3%82%AF%E3%83%AA%E3%82%A8%E3%82%A4%E3%82%BF%E3%83%BC%E5%90%91%E3%81%91-">インボイス制度(クリエイター向け)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://support.freee.co.jp/hc/ja/articles/202848250-2-%E6%B6%88%E8%B2%BB%E7%A8%8E-%E7%A8%8E%E5%8C%BA%E5%88%86%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E8%A1%8C%E3%81%86#calculation">経過措置期間用税区分の消費税計算方法&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>その後、取引先の設定に適格請求書発行事業者の登録番号を設定できることがわかって、明らかにそうだとわかっているものは検索して設定したりしていた。外国企業については &lt;a href="https://www.nta.go.jp/publication/pamph/shohi/cross/01.htm">国境を越えた役務の提供に係る消費税の課税関係について&lt;/a> に書いてある。例えば、google workspace を使っていると請求書には Google Asia Pacific Pte. LTd. と書いてある。しかし、請求書には登録番号がない。これは &lt;a href="https://www.nta.go.jp/publication/pamph/shohi/cross/touroku.pdf">登録国外事業者名簿&lt;/a> をみると、有効であることがわかり、さらに法人番号もみつかる。法人に関しては法人番号と登録番号は基本的に同じなのでそれを登録しておけばよい。&lt;/p></content></item></channel></rss>