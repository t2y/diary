<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2023/10 on forest nook</title><link>/diary/dates/2023/10/</link><description>Recent content in 2023/10 on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/dates/2023/10/index.xml" rel="self" type="application/rss+xml"/><item><title>権限管理ができるようになった</title><link>/diary/posts/2023/1026/</link><pubDate>Thu, 26 Oct 2023 08:03:13 +0900</pubDate><guid>/diary/posts/2023/1026/</guid><description>1時に寝て何度か起きて7時半に起きた。なんかしんどい夢をみたが、もう覚えていない。
rbac なミドルウェアの実装 昨日の続き 。rbac (role-based access control) なライブラリが一通り実装できたのでそれを使って echo のミドルウェア を実装した。やりたいことは次のようなこと。たったこれだけだが、これを実装するために、ここ1週間ほど、あれやこれやの実装をしてきた。ようやくそれが動くようになったというところ。私にとってはミドルウェアの仕組みは過去に何度も実装してきたものだが、頭に描いたイメージのまま、実装できたのがよかったと思う。
func rbacWithConfig(cfg rbacConfig) echo.MiddlewareFunc { return func(next echo.HandlerFunc) echo.HandlerFunc { return func(c echo.Context) error { if cfg.Skipper(c) { return next(c) } req := c.Request() ctx := req.Context() sessionStore := c.Get(keySession).(session.Store) userName := c.Get(&amp;#34;username&amp;#34;).(string) s, err := session.Get(ctx, sessionStore, userName) if err != nil { return fmt.Errorf(&amp;#34;failed to get session: %w&amp;#34;, err) } if !s.Role.CanAccess(ctx, req.URL.Path, req.Method) { return echo.</description><content>&lt;p>1時に寝て何度か起きて7時半に起きた。なんかしんどい夢をみたが、もう覚えていない。&lt;/p>
&lt;h2 id="rbac-なミドルウェアの実装">rbac なミドルウェアの実装&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/1025/#interface-はデシリアライズできない">昨日の続き&lt;/a> 。rbac (role-based access control) なライブラリが一通り実装できたのでそれを使って &lt;a href="/diary/diary/posts/2023/1023/">echo のミドルウェア&lt;/a> を実装した。やりたいことは次のようなこと。たったこれだけだが、これを実装するために、ここ1週間ほど、あれやこれやの実装をしてきた。ようやくそれが動くようになったというところ。私にとってはミドルウェアの仕組みは過去に何度も実装してきたものだが、頭に描いたイメージのまま、実装できたのがよかったと思う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">rbacWithConfig&lt;/span>(&lt;span style="color:#a6e22e">cfg&lt;/span> &lt;span style="color:#a6e22e">rbacConfig&lt;/span>) &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">MiddlewareFunc&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span>) &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">cfg&lt;/span>.&lt;span style="color:#a6e22e">Skipper&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">next&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sessionStore&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">keySession&lt;/span>).(&lt;span style="color:#a6e22e">session&lt;/span>.&lt;span style="color:#a6e22e">Store&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">userName&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;username&amp;#34;&lt;/span>).(&lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">session&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">sessionStore&lt;/span>, &lt;span style="color:#a6e22e">userName&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to get session: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Role&lt;/span>.&lt;span style="color:#a6e22e">CanAccess&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>.&lt;span style="color:#a6e22e">Path&lt;/span>, &lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">Method&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">ErrForbidden&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">next&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="nodejs-のアップグレード">node.js のアップグレード&lt;/h2>
&lt;p>ちょうど管理画面も少し触ろうと思って環境を構築し始めた。たまたま node.js のバージョンをみると、ちょうど10月18日で 18 (LTS) の active support 期間が終了していた。security support は2025年4月まであるのでそんな急がなくてもよいが、それに気付いたついでなので 20 (LTS) にアップグレードすることにした。幸い、大半のライブラリは 20 (LTS) でもそのまま動いた。しかし、依存ライブラリのアップデートをしていて、一部 conflict してうまく動かないライブラリもあった。細かい原因調査をしていないが、フロントエンドの方がこまめにバージョンを上げていかないと何が原因でアプリケーションが正常に動かなくなるのか、分からなくなる気がする。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://endoflife.date/nodejs">https://endoflife.date/nodejs&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>非日常を提供するという価値</title><link>/diary/posts/2023/1025/</link><pubDate>Wed, 25 Oct 2023 08:36:25 +0900</pubDate><guid>/diary/posts/2023/1025/</guid><description>1時半に寝て3時に起きてもう1回起きて6時半に起きた。
interface はデシリアライズできない 昨日の続き 。rbac なライブラリを使ってアプリケーションを実装していく。ログイン時にユーザーにロールを割り当ててセッションにロールを保持するのが都合よさそうに思えた。ロールの実装で一部の型は interface にして後から拡張できるような設計にしていた。例えば encoding/json ライブラリだと、Marshaler/Unmarshaler の interface を満たすことで任意の json のシリアライズ/デシリアライズをフックできる。調べたり、実際に動かしていていて気付いたのだけど、interface の場合はシリアライズは任意にできるけど、デシリアライズはできない。当たり前と言えば当たり前だが、interface を満たす複数の型がある中で json ライブラリがどの型でデシリアライズしていいか判別できないからだ。当初の interface を用いた設計が誤りだったことに気付いて、一部の型を汎用の構造体で設計し直すようなことをしていた。
またデシリアライズするときに一部の値を初期化したいといった要件がある。例えば mutex を初期化したい。このときに処理の内部で派生型を宣言して、それにキャストした上でデシリアライズの処理を実行した上で差分の処理を実装するというテクニックを学んだ。スコープが限定されて、コードがシンプルになって保守性も高い、久しぶりに頭のよいスマートなコードをみた。
func (r *Role) UnmarshalJSON(b []byte) error { type Alias Role if err := json.Unmarshal(b, (*Alias)(r)); err != nil { return err } r.mu = &amp;amp;sync.Mutex{} return nil } Custom UnmarshalBSON in mongo-go-driver コワーキングのオンラインイベント 月例のカフーツさんのオンラインイベントに参加した。前回の所感はここ 。今日は参加者が2人だけだった。コワーキングスペースを運営するコワーキングスペースマネージャーの連携を強化することで、コワーキングスペースの付加価値が上がったりしないか？といった内容を話したりしていた。コワーキングスペースマネージャーは、普通はお仕事で自分のコワーキングスペースにいないといけないから、なかなか他所のコワーキングスペースへ訪問すること自体が難しい。コワーキングスペース同士の連携により、お仕事でコワーキングスペースマネージャーが自分ところのコワーキングスペースの利用者を連れて、他所のコワーキングスペースへ訪問して、そこでイベントをしたりすればいいんじゃないかという案が出た。
いとうさんがよく コワーキングツアー と称して、全国各地のコワーキングスペースへ訪問して、そこでイベント開催をしたり、その地域の取り組みなどを紹介したりしている。それと全く同じことを、コワーキングスペースの利用者に対してもその付加価値というのはあるかもしれないと私もよいアイディアだと思った。例えば、大阪のコワーキングスペースの利用者を広島へ連れていって、そこでイベントやって交流する。その逆も然り。通常のコワーキングスペースの利用者は自ら広島のコワーキングスペースへ行ってコラボレーションを行ったりしない。いや、いとうさんみたいに自らやる人もいるんだけど、そんな人は対象の利用者ではない。自分からは行かないが、誘われたら行ってもいいかなと考える人 (私もそんな1人だ) を移動させることで、新しい価値やアイディアが生まれるかもしれないと思える。私もいまはフルタイムのお仕事があるから自由に移動はできないが、いずれ会社の投資期間に入って、自分でスケジュールを決められる状況になれば、コワーキングツアーにも出掛けてみようと思う。
あと勉強会やイベント以外でコワーキングスペースで出来ることはないか？という話題でも盛り上がった。私は主催者の準備が大変だと出来ないから、主催者のコストが低いものという視点から考えて猫コワーキングがいいんじゃないかと提案してみた。ある週だけコワーキングスペースに猫が10匹ぐらいいますといった取り組み。課題は猫をどこから連れてくるかだけだが、そういう機会があれば確かに私も行ってみたい。そのアイディアの発散で非日常の体験ができるような取り組みがよいんじゃないかとまとめられていた。
猫コワーキング (猫がたくさんいる) 深夜コワーキング (深夜に開いている) 深夜コワーキングスペースのモデルとなる 弐拾dB さんというコワーキングスペースが広島の尾道にあるらしい。23-翌5時という営業時間だという。いとうさんが絶賛していたのでおもしろいオーナーが運営されているのだと思う。そのオーナーが執筆したエッセイの 頁をめくる音で息をする を購入してみた。</description><content>&lt;p>1時半に寝て3時に起きてもう1回起きて6時半に起きた。&lt;/p>
&lt;h2 id="interface-はデシリアライズできない">interface はデシリアライズできない&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/1024/#rbac-なライブラリの実装">昨日の続き&lt;/a> 。rbac なライブラリを使ってアプリケーションを実装していく。ログイン時にユーザーにロールを割り当ててセッションにロールを保持するのが都合よさそうに思えた。ロールの実装で一部の型は interface にして後から拡張できるような設計にしていた。例えば &lt;a href="https://pkg.go.dev/encoding/json">encoding/json&lt;/a> ライブラリだと、Marshaler/Unmarshaler の interface を満たすことで任意の json のシリアライズ/デシリアライズをフックできる。調べたり、実際に動かしていていて気付いたのだけど、interface の場合はシリアライズは任意にできるけど、デシリアライズはできない。当たり前と言えば当たり前だが、interface を満たす複数の型がある中で json ライブラリがどの型でデシリアライズしていいか判別できないからだ。当初の interface を用いた設計が誤りだったことに気付いて、一部の型を汎用の構造体で設計し直すようなことをしていた。&lt;/p>
&lt;p>またデシリアライズするときに一部の値を初期化したいといった要件がある。例えば mutex を初期化したい。このときに処理の内部で派生型を宣言して、それにキャストした上でデシリアライズの処理を実行した上で差分の処理を実装するというテクニックを学んだ。スコープが限定されて、コードがシンプルになって保守性も高い、久しぶりに頭のよいスマートなコードをみた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Role&lt;/span>) &lt;span style="color:#a6e22e">UnmarshalJSON&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Alias&lt;/span> &lt;span style="color:#a6e22e">Role&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">Unmarshal&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>, (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Alias&lt;/span>)(&lt;span style="color:#a6e22e">r&lt;/span>)); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">mu&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Mutex&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/56400734/custom-unmarshalbson-in-mongo-go-driver">Custom UnmarshalBSON in mongo-go-driver&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="コワーキングのオンラインイベント">コワーキングのオンラインイベント&lt;/h2>
&lt;p>月例のカフーツさんのオンラインイベントに参加した。&lt;a href="/diary/diary/posts/2023/0927/#コワーキングのオンラインイベント">前回の所感はここ&lt;/a> 。今日は参加者が2人だけだった。コワーキングスペースを運営するコワーキングスペースマネージャーの連携を強化することで、コワーキングスペースの付加価値が上がったりしないか？といった内容を話したりしていた。コワーキングスペースマネージャーは、普通はお仕事で自分のコワーキングスペースにいないといけないから、なかなか他所のコワーキングスペースへ訪問すること自体が難しい。コワーキングスペース同士の連携により、お仕事でコワーキングスペースマネージャーが自分ところのコワーキングスペースの利用者を連れて、他所のコワーキングスペースへ訪問して、そこでイベントをしたりすればいいんじゃないかという案が出た。&lt;/p>
&lt;p>いとうさんがよく &lt;a href="https://cahootz.jp/?cat=21">コワーキングツアー&lt;/a> と称して、全国各地のコワーキングスペースへ訪問して、そこでイベント開催をしたり、その地域の取り組みなどを紹介したりしている。それと全く同じことを、コワーキングスペースの利用者に対してもその付加価値というのはあるかもしれないと私もよいアイディアだと思った。例えば、大阪のコワーキングスペースの利用者を広島へ連れていって、そこでイベントやって交流する。その逆も然り。通常のコワーキングスペースの利用者は自ら広島のコワーキングスペースへ行ってコラボレーションを行ったりしない。いや、いとうさんみたいに自らやる人もいるんだけど、そんな人は対象の利用者ではない。自分からは行かないが、誘われたら行ってもいいかなと考える人 (私もそんな1人だ) を移動させることで、新しい価値やアイディアが生まれるかもしれないと思える。私もいまはフルタイムのお仕事があるから自由に移動はできないが、いずれ会社の投資期間に入って、自分でスケジュールを決められる状況になれば、コワーキングツアーにも出掛けてみようと思う。&lt;/p>
&lt;p>あと勉強会やイベント以外でコワーキングスペースで出来ることはないか？という話題でも盛り上がった。私は主催者の準備が大変だと出来ないから、主催者のコストが低いものという視点から考えて猫コワーキングがいいんじゃないかと提案してみた。ある週だけコワーキングスペースに猫が10匹ぐらいいますといった取り組み。課題は猫をどこから連れてくるかだけだが、そういう機会があれば確かに私も行ってみたい。そのアイディアの発散で非日常の体験ができるような取り組みがよいんじゃないかとまとめられていた。&lt;/p>
&lt;ul>
&lt;li>猫コワーキング (猫がたくさんいる)&lt;/li>
&lt;li>深夜コワーキング (深夜に開いている)&lt;/li>
&lt;/ul>
&lt;p>深夜コワーキングスペースのモデルとなる &lt;a href="https://20db.stores.jp/">弐拾dB&lt;/a> さんというコワーキングスペースが広島の尾道にあるらしい。23-翌5時という営業時間だという。いとうさんが絶賛していたのでおもしろいオーナーが運営されているのだと思う。そのオーナーが執筆したエッセイの &lt;a href="https://20db.stores.jp/items/61869c960548e03fb98a95ac">頁をめくる音で息をする&lt;/a> を購入してみた。&lt;/p></content></item><item><title>初めて rbac なライブラリを実装した</title><link>/diary/posts/2023/1024/</link><pubDate>Tue, 24 Oct 2023 11:48:05 +0900</pubDate><guid>/diary/posts/2023/1024/</guid><description>22時頃から休んでいて寝たり起きたりで7時に起きた。起きたらネットの記事とかだらだら読んでた。
rbac なライブラリの実装 昨日から認可のための仕組みを調査している。私の中ではもっとも一般的な rbac (role-based access control) でまずは作ってみようと思う。次の2つのライブラリの利用を検討したが、自分たちのやりたいことにあわない気がして今回は見送ることにした。
https://github.com/casbin/casbin モデル定義とポリシー設定が複雑過ぎて設定が難しい、保守が大変になりそう https://github.com/mikespook/gorbac イメージはあっているが、この程度のライブラリなら自分で作った方が学習コストもなく、拡張にも柔軟に思える 一通り、ライブラリとして使えるように参照実装した。これから実際のアプリケーション要件にあわせてミドルウェアとして rbac な認可処理を作っていく。
変わりゆく世界秩序 サンフランシスコが陥った負の“スパイラル” の記事にあるような、米国で950ドル以下の窃盗は軽犯罪とするという法律の変更によって、万引きを逮捕しなくなってモラル崩壊が起きて、小売店の商品を普通に盗むという事件が多発しているらしい。fin-py でおがわさんとそんな話しをしていたら次の動画を教えてもらった。私は歴史が好きなので、こういった「歴史は繰り返す」といったものはだいたいみてしまう。厳密な裏付けはわからないが、盛者必衰という言葉もあるように、どんな国でも栄枯盛衰のサイクルはあるだろうというのは大局の視点として同意できる。過去の歴史と国の栄枯盛衰をいくつかの指標とお金の視点から調査したものでおもしろかった。
日本は80年サイクルで戦争の周期がくるといった説もあるが、この動画でもサイクルの切り替わりのタイミングで平和的にしろ暴力的にしろ、かならず戦争は起きると説明している。もうすでに戦争は始まっている感もあるが、戦争は避けようがないという点も同意するところだ。本も読んでみようと思う。</description><content>&lt;p>22時頃から休んでいて寝たり起きたりで7時に起きた。起きたらネットの記事とかだらだら読んでた。&lt;/p>
&lt;h2 id="rbac-なライブラリの実装">rbac なライブラリの実装&lt;/h2>
&lt;p>昨日から認可のための仕組みを調査している。私の中ではもっとも一般的な rbac (role-based access control) でまずは作ってみようと思う。次の2つのライブラリの利用を検討したが、自分たちのやりたいことにあわない気がして今回は見送ることにした。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/casbin/casbin">https://github.com/casbin/casbin&lt;/a>
&lt;ul>
&lt;li>モデル定義とポリシー設定が複雑過ぎて設定が難しい、保守が大変になりそう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/mikespook/gorbac">https://github.com/mikespook/gorbac&lt;/a>
&lt;ul>
&lt;li>イメージはあっているが、この程度のライブラリなら自分で作った方が学習コストもなく、拡張にも柔軟に思える&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>一通り、ライブラリとして使えるように参照実装した。これから実際のアプリケーション要件にあわせてミドルウェアとして rbac な認可処理を作っていく。&lt;/p>
&lt;h2 id="変わりゆく世界秩序">変わりゆく世界秩序&lt;/h2>
&lt;p>&lt;a href="https://www3.nhk.or.jp/news/special/international_news_navi/articles/feature/2023/09/26/34645.html">サンフランシスコが陥った負の“スパイラル”&lt;/a> の記事にあるような、米国で950ドル以下の窃盗は軽犯罪とするという法律の変更によって、万引きを逮捕しなくなってモラル崩壊が起きて、小売店の商品を普通に盗むという事件が多発しているらしい。fin-py でおがわさんとそんな話しをしていたら次の動画を教えてもらった。私は歴史が好きなので、こういった「歴史は繰り返す」といったものはだいたいみてしまう。厳密な裏付けはわからないが、盛者必衰という言葉もあるように、どんな国でも栄枯盛衰のサイクルはあるだろうというのは大局の視点として同意できる。過去の歴史と国の栄枯盛衰をいくつかの指標とお金の視点から調査したものでおもしろかった。&lt;/p>
&lt;p>日本は80年サイクルで戦争の周期がくるといった説もあるが、この動画でもサイクルの切り替わりのタイミングで平和的にしろ暴力的にしろ、かならず戦争は起きると説明している。もうすでに戦争は始まっている感もあるが、戦争は避けようがないという点も同意するところだ。本も読んでみようと思う。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/y3oy8y0EljY" allowfullscreen title="レイ・ダリオ著 「変わりゆく世界秩序」">&lt;/iframe>
&lt;/div></content></item><item><title>echo のミドルウェア関数のスタイル</title><link>/diary/posts/2023/1023/</link><pubDate>Mon, 23 Oct 2023 08:09:29 +0900</pubDate><guid>/diary/posts/2023/1023/</guid><description>1時に寝て何度か起きて6時半に起きた。起きてから軽く部屋の掃除をした。
echo のミドルウェア開発 go の api サーバーの開発に echo という定番のフレームワークを使っている。少し前にメンバーに認証の処理をミドルウェアとして実装してもらった。いま認可の仕組みもミドルウェアで実装しようと、いくつかソースコードを読んでいて、echo のフレームワークが提供しているミドルウェアの関数名や config には共通点があることに気付いた。echo middleware によると、20個ぐらいのミドルウェアが提供されている。例えば、適当にそのうちの3つほどを取り出すが XxxWithConfig という命名規則で config を受けとって echo.MiddlewareFunc を返すというインターフェースになっている。
func HTTPSRedirectWithConfig(config RedirectConfig) echo.MiddlewareFunc func LoggerWithConfig(config LoggerConfig) echo.MiddlewareFunc func BodyDumpWithConfig(config BodyDumpConfig) echo.MiddlewareFunc また config の中身をみていると、ミドルウェアの処理に必要な関数を渡すような設計になっている。複数のミドルウェアにとって共通なのは、ミドルウェアの処理を迂回する条件を実装するため middleware.Skipper という型が次のように型で定義されている。
e.Use(middleware.BasicAuthWithConfig(middleware.BasicAuthConfig{ Skipper: func (c echo.Context) bool { // Skipper defines a function to skip middleware. }, Validator: func(string, string, echo.Context) (bool, error) { // Validator is a function to validate BasicAuth credentials. // Required.</description><content>&lt;p>1時に寝て何度か起きて6時半に起きた。起きてから軽く部屋の掃除をした。&lt;/p>
&lt;h2 id="echo-のミドルウェア開発">echo のミドルウェア開発&lt;/h2>
&lt;p>go の api サーバーの開発に &lt;a href="/diary/diary/posts/2022/1122/#echo-を採用">echo&lt;/a> という定番のフレームワークを使っている。少し前にメンバーに認証の処理をミドルウェアとして実装してもらった。いま認可の仕組みもミドルウェアで実装しようと、いくつかソースコードを読んでいて、echo のフレームワークが提供しているミドルウェアの関数名や config には共通点があることに気付いた。&lt;a href="https://echo.labstack.com/docs/category/middleware">echo middleware&lt;/a> によると、20個ぐらいのミドルウェアが提供されている。例えば、適当にそのうちの3つほどを取り出すが &lt;code>XxxWithConfig&lt;/code> という命名規則で config を受けとって echo.MiddlewareFunc を返すというインターフェースになっている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">HTTPSRedirectWithConfig&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#a6e22e">RedirectConfig&lt;/span>) &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">MiddlewareFunc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">LoggerWithConfig&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#a6e22e">LoggerConfig&lt;/span>) &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">MiddlewareFunc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">BodyDumpWithConfig&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#a6e22e">BodyDumpConfig&lt;/span>) &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">MiddlewareFunc&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>また config の中身をみていると、ミドルウェアの処理に必要な関数を渡すような設計になっている。複数のミドルウェアにとって共通なのは、ミドルウェアの処理を迂回する条件を実装するため &lt;code>middleware.Skipper&lt;/code> という型が次のように型で定義されている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Use&lt;/span>(&lt;span style="color:#a6e22e">middleware&lt;/span>.&lt;span style="color:#a6e22e">BasicAuthWithConfig&lt;/span>(&lt;span style="color:#a6e22e">middleware&lt;/span>.&lt;span style="color:#a6e22e">BasicAuthConfig&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Skipper&lt;/span>: &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Skipper defines a function to skip middleware.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Validator&lt;/span>: &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) (&lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Validator is a function to validate BasicAuth credentials.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Required.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Realm&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Restricted&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>典型的なミドルウェアは次のように実装する。最初に Skipper を呼び出して処理の有無を確認する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span>) &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Skipper&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">next&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO: ミドルウェア本体の処理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">next&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>認証のミドルウェアを実装してもらったときに、私がここまでみていなかったなということに気付いて、既存のミドルウェアを echo のそれと同じスタイルにあわせるようにリファクタリングした。自分でソースコードを読んでいるとコードレビューで気付かなかったことに気付くことが多い。自分がコードを書いているときと、コードレビューをしているときでなにかしら視点が違う。&lt;/p></content></item><item><title>ほぼ休みに近いオフィスワーク</title><link>/diary/posts/2023/1022/</link><pubDate>Sun, 22 Oct 2023 12:43:16 +0900</pubDate><guid>/diary/posts/2023/1022/</guid><description>3時に寝て何度か起きて8時半に起きた。午前中はだらだらしていた。午後は事務手続きしたり、本を読んだりしていた。
芦屋能の申込み 昨日 蝉丸の予習 をしてきたが、来月に能の「蝉丸」の上演がある。せっかく物語の背景や詞章の勉強したので見に行くことに決めた。第二十二回芦屋能・狂言鑑賞の会 にローソンチケットで申込みした。金曜日の17時と、ちょっとお仕事を早く終えて出掛けないといけない。芦屋ルナ・ホールという、行ったことない会場になる。前の方に座れるなら指定席を選択するのだけど、いま購入しようとすると、チケットが残りわずからしいのであまりよい席は残っていないと推測する。今回は2階席 (自由席) 3,000円 で観ることにした。昨日の能イベントの会場である芦屋能舞台でもいくつかチケットがあると朝原さんが話されていた。そこで買った方がよい席を取ることができたのかもしれない。また次の機会があれば聞いてみようと思う。
業務スーパーのナポリタンサラダ ちょくちょく業務スーパーで買いものする。業務スーパーの惣菜などは国内工場で作っているとあるからなんとなく安心して買っている。いつもは マカロニサラダ を買っていて、野菜サラダの付け合わせにしたり、刻みネギを混ぜて食べたりしている。今日は初めてナポリタンサラダというのをみつけた。また業務スーパーのサイトにないのでおそらく新製品なのだろうと思う。私はナポリタンが好きなので買ってみた。よくあるお弁当の付け合わせに入ってそうな風味で300円程度の値段を考えれば十分においしい。単体で食べても小腹を満たせるし、他のものと組み合わせもしやすそうに思う。業務スーパーの買いもの楽しい。</description><content>&lt;p>3時に寝て何度か起きて8時半に起きた。午前中はだらだらしていた。午後は事務手続きしたり、本を読んだりしていた。&lt;/p>
&lt;h2 id="芦屋能の申込み">芦屋能の申込み&lt;/h2>
&lt;p>昨日 &lt;a href="/diary/diary/posts/2023/1021/">蝉丸の予習&lt;/a> をしてきたが、来月に能の「蝉丸」の上演がある。せっかく物語の背景や詞章の勉強したので見に行くことに決めた。&lt;a href="https://yarai-nohgakudo.com/archives/11286">第二十二回芦屋能・狂言鑑賞の会&lt;/a> にローソンチケットで申込みした。金曜日の17時と、ちょっとお仕事を早く終えて出掛けないといけない。芦屋ルナ・ホールという、行ったことない会場になる。前の方に座れるなら指定席を選択するのだけど、いま購入しようとすると、チケットが残りわずからしいのであまりよい席は残っていないと推測する。今回は2階席 (自由席) 3,000円 で観ることにした。昨日の能イベントの会場である芦屋能舞台でもいくつかチケットがあると朝原さんが話されていた。そこで買った方がよい席を取ることができたのかもしれない。また次の機会があれば聞いてみようと思う。&lt;/p>
&lt;h2 id="業務スーパーのナポリタンサラダ">業務スーパーのナポリタンサラダ&lt;/h2>
&lt;p>ちょくちょく業務スーパーで買いものする。業務スーパーの惣菜などは国内工場で作っているとあるからなんとなく安心して買っている。いつもは &lt;a href="https://www.gyomusuper.jp/product/detail.php?go_id=2389">マカロニサラダ&lt;/a> を買っていて、野菜サラダの付け合わせにしたり、刻みネギを混ぜて食べたりしている。今日は初めてナポリタンサラダというのをみつけた。また業務スーパーのサイトにないのでおそらく新製品なのだろうと思う。私はナポリタンが好きなので買ってみた。よくあるお弁当の付け合わせに入ってそうな風味で300円程度の値段を考えれば十分においしい。単体で食べても小腹を満たせるし、他のものと組み合わせもしやすそうに思う。業務スーパーの買いもの楽しい。&lt;/p></content></item><item><title>蝉丸の予習</title><link>/diary/posts/2023/1021/</link><pubDate>Sat, 21 Oct 2023 15:46:40 +0900</pubDate><guid>/diary/posts/2023/1021/</guid><description>21時頃から休んでいて何度か寝たり起きたりしながら5時に起きた。だらだらして気付いたら8時半だった。
ストレッチ 今週もとくに本業が忙しかったわけではないが、本業以外のお仕事や作業がたくさんあって、わりと座っている時間が長くて疲れていたのかもしれない。腰は大丈夫かな？と思ったものの、左腰の後ろはかなり張りがあってきつかった。トレーナーさんはあまり気付かなかったみたいだが。あと太ももの後ろの筋が張っていて今日は重点的にそこを伸ばしてもらって気持ちよかった。太ももの後ろの筋って物理的に自分では絶対に伸ばせない位置にあるため、トレーナーが伸ばしてくれることに大きな意義がある。これだけでもドクターストレッチさんに通っていてよいところだと思う。今日の開脚幅は開始前156cmで、ストレッチ後159cmだった。数値はまぁまぁ。
能楽の勉強 前に1度行ったことのある「能のことばを読んでみる会」へ行ってきた。前回の所感はここ 。参加者は私が数えたところ17名。前回、いつもは10人に満たないと仰っていたが、朝原さんのマーケティングがうまくいっているのか、今回も10人は軽く超えていた。
このイベントはとてもおもしろい。
『百人一首』で知られる蝉丸と、その姉・逆髪が出会い、別れる能《蝉丸》 第36回能のことばを読んでみる会 今日のテーマは「蝉丸 (せみまる) 」だった。国語の授業などで百人一首として習ったことを覚えている人もいるだろうか。
これやこの 行くも帰るも 別れては 知るも知らぬも 逢坂の関
蝉丸 (せみまる)
有名だし、私も学生の頃は百人一首を覚えていたのでこの歌は覚えている。百人一首の引用元となる 後撰和歌集 では次のように収録されている。
これやこの 行くも帰るも 別れつつ 知るも知らぬも 逢坂の関
オリジナルは「別れつつ」だったのが百人一首では「別れては」に改変されている。たまたま調べていると次のような質問をみつけた。
後撰和歌集に収録されている蝉丸の「これやこの 行くも帰るも 別れつつ 知るも知らぬも 逢坂の関」の和歌について、歌集によっては第三句が「別れては」となっている。「別れつつ」と「別れては」では解釈が違うのか、解説が載っている資料が見たい。
https://crd.ndl.go.jp/reference/modules/d3ndlcrdentry/index.php?page=ref_view&amp;amp;id=1000328600
この回答でも後世の人たちが「別れては」の方がまとまりが良いとか、読みやすいとか、抑揚が利くとか、そんな理由で勝手に改変してそれが有名になった例の1つだという。能の世界でもこういったオリジナルの単語 (漢字) や言い回しが変わってしまうことはちょくちょくあるらしい。それは文書を複写するときに単純に書き間違えたとか、後世の人がこの方がよいと勝手に表現を変えてしまうことがあって、オリジナルよりもそちらが有名になってしまうことがあるらしい。
日本の歴史を調べるときに最初に調べる辞典として 国史大辞典 がある。そこに蝉丸の記述がある。平安時代の歌人、音楽家。生没年不詳で、伝説的人物で諸説あるとのことで、本当に伝えられている経歴や逸話が正しいのかはよく分かっていないという。最も確実なのが、後撰和歌集の和歌を詠んだのが蝉丸という人物だという伝承だという。蝉丸を祀った神社は3つあり、現代では諸芸道の神様として祀られている。
蝉丸神社 関蝉丸神社 上社 下社 蝉丸は生まれつき盲目でありながら琵琶の名人として伝わっており「盲琵琶」の祖とされるが、これもよくわかっていない伝承だという。ここまでを能の「蝉丸」を読み始める前の予備知識として、講師の朝原さんがさらっと話すのがこのイベントの醍醐味。私がここに書き残せていない話題もまだいくつかある。一般人はここまででお腹いっぱいになるが、これが能を読み始める前段階である。
能の「蝉丸」 は、皇子なのに盲目であるために捨てられる蝉丸、皇女なのに逆さまに生い立つ髪をもち狂人であるために捨てられる逆髪の2人が、逢坂山という辺地でたまたま？出会うという物語になっている。朝原さんが天に向かって逆さまに生い立つ髪ってどういうものか現実には想像できないが、少年漫画の世界ではないか？と話されていて、私は HUNTER×HUNTER のゴンみたいな髪型を連想したw
蝉丸は盲目なので盲目の人からの視点の表現と、逆髪は目がみえるので (狂人だけど) 健常者からの視点の表現が対比として表されているのもおもしろい。京都から逢坂山の関を超える 道行 の表現がまったく異なる。お互い捨てられた先の辺地の藁屋で、蝉丸が琵琶を弾いたことに逆髪が気付いて、藁屋を尋ねる (出会う) と物語が進んでいって、お互いに涙を流して再会に感動するものの、逆髪は「じゃあ、またね」って感じにすぐ？帰ろうとするのに対して、蝉丸は「もう行っちゃうんですか？！」的な名残惜しくて、ただそれだけのやり取りの能となっている。この能はただ姉弟が出会って別れるだけの、なんの事件も起こらないし、なんの因果もない。これは仏教でいう 会者定離 (えしゃじょうり) を表しているという。出会った者は必ず別れることになるという普遍的な摂理。関西人からみると、オチがないやんとツッコミたくなるところが、哲学的ではまるところなのかもしれない。
11月に 第二十二回「芦屋能・狂言鑑賞の会」 で能の「蝉丸」が演じられるようなので見に行こうと思う。</description><content>&lt;p>21時頃から休んでいて何度か寝たり起きたりしながら5時に起きた。だらだらして気付いたら8時半だった。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週もとくに本業が忙しかったわけではないが、本業以外のお仕事や作業がたくさんあって、わりと座っている時間が長くて疲れていたのかもしれない。腰は大丈夫かな？と思ったものの、左腰の後ろはかなり張りがあってきつかった。トレーナーさんはあまり気付かなかったみたいだが。あと太ももの後ろの筋が張っていて今日は重点的にそこを伸ばしてもらって気持ちよかった。太ももの後ろの筋って物理的に自分では絶対に伸ばせない位置にあるため、トレーナーが伸ばしてくれることに大きな意義がある。これだけでもドクターストレッチさんに通っていてよいところだと思う。今日の開脚幅は開始前156cmで、ストレッチ後159cmだった。数値はまぁまぁ。&lt;/p>
&lt;h2 id="能楽の勉強">能楽の勉強&lt;/h2>
&lt;p>前に1度行ったことのある「能のことばを読んでみる会」へ行ってきた。&lt;a href="/diary/diary/posts/2023/0716/#能楽の勉強">前回の所感はここ&lt;/a> 。参加者は私が数えたところ17名。前回、いつもは10人に満たないと仰っていたが、朝原さんのマーケティングがうまくいっているのか、今回も10人は軽く超えていた。&lt;/p>
&lt;p>このイベントはとてもおもしろい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://nohgaku-kyodo.com/repertoire/yondemiru-semimaru20231021">『百人一首』で知られる蝉丸と、その姉・逆髪が出会い、別れる能《蝉丸》 第36回能のことばを読んでみる会&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>今日のテーマは「蝉丸 (せみまる) 」だった。国語の授業などで百人一首として習ったことを覚えている人もいるだろうか。&lt;/p>
&lt;blockquote>
&lt;p>これやこの 行くも帰るも 別れては 知るも知らぬも 逢坂の関&lt;/p>
&lt;p>蝉丸 (せみまる)&lt;/p>
&lt;/blockquote>
&lt;p>有名だし、私も学生の頃は百人一首を覚えていたのでこの歌は覚えている。百人一首の引用元となる &lt;a href="https://ja.wikipedia.org/wiki/%E5%BE%8C%E6%92%B0%E5%92%8C%E6%AD%8C%E9%9B%86">後撰和歌集&lt;/a> では次のように収録されている。&lt;/p>
&lt;blockquote>
&lt;p>これやこの 行くも帰るも 別れつつ 知るも知らぬも 逢坂の関&lt;/p>
&lt;/blockquote>
&lt;p>オリジナルは「別れつつ」だったのが百人一首では「別れては」に改変されている。たまたま調べていると次のような質問をみつけた。&lt;/p>
&lt;blockquote>
&lt;p>後撰和歌集に収録されている蝉丸の「これやこの 行くも帰るも 別れつつ 知るも知らぬも 逢坂の関」の和歌について、歌集によっては第三句が「別れては」となっている。「別れつつ」と「別れては」では解釈が違うのか、解説が載っている資料が見たい。&lt;/p>
&lt;p>&lt;a href="https://crd.ndl.go.jp/reference/modules/d3ndlcrdentry/index.php?page=ref_view&amp;amp;id=1000328600">https://crd.ndl.go.jp/reference/modules/d3ndlcrdentry/index.php?page=ref_view&amp;amp;id=1000328600&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>この回答でも後世の人たちが「別れては」の方がまとまりが良いとか、読みやすいとか、抑揚が利くとか、そんな理由で勝手に改変してそれが有名になった例の1つだという。能の世界でもこういったオリジナルの単語 (漢字) や言い回しが変わってしまうことはちょくちょくあるらしい。それは文書を複写するときに単純に書き間違えたとか、後世の人がこの方がよいと勝手に表現を変えてしまうことがあって、オリジナルよりもそちらが有名になってしまうことがあるらしい。&lt;/p>
&lt;p>日本の歴史を調べるときに最初に調べる辞典として &lt;a href="https://japanknowledge.com/contents/kokushi/">国史大辞典&lt;/a> がある。そこに蝉丸の記述がある。平安時代の歌人、音楽家。生没年不詳で、伝説的人物で諸説あるとのことで、本当に伝えられている経歴や逸話が正しいのかはよく分かっていないという。最も確実なのが、後撰和歌集の和歌を詠んだのが蝉丸という人物だという伝承だという。蝉丸を祀った神社は3つあり、現代では諸芸道の神様として祀られている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://ja.wikipedia.org/wiki/%E8%9D%89%E4%B8%B8%E7%A5%9E%E7%A4%BE">蝉丸神社&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ja.wikipedia.org/wiki/%E9%96%A2%E8%9D%89%E4%B8%B8%E7%A5%9E%E7%A4%BE">関蝉丸神社&lt;/a>
&lt;ul>
&lt;li>上社&lt;/li>
&lt;li>下社&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>蝉丸は生まれつき盲目でありながら琵琶の名人として伝わっており「盲琵琶」の祖とされるが、これもよくわかっていない伝承だという。ここまでを能の「蝉丸」を読み始める前の予備知識として、講師の朝原さんがさらっと話すのがこのイベントの醍醐味。私がここに書き残せていない話題もまだいくつかある。一般人はここまででお腹いっぱいになるが、これが能を読み始める前段階である。&lt;/p>
&lt;p>&lt;a href="https://www.the-noh.com/jp/plays/data/program_057.html">能の「蝉丸」&lt;/a> は、皇子なのに盲目であるために捨てられる蝉丸、皇女なのに逆さまに生い立つ髪をもち狂人であるために捨てられる逆髪の2人が、逢坂山という辺地でたまたま？出会うという物語になっている。朝原さんが天に向かって逆さまに生い立つ髪ってどういうものか現実には想像できないが、少年漫画の世界ではないか？と話されていて、私は &lt;a href="https://www.shonenjump.com/j/rensai/hunter.html">HUNTER×HUNTER&lt;/a> のゴンみたいな髪型を連想したw&lt;/p>
&lt;p>蝉丸は盲目なので盲目の人からの視点の表現と、逆髪は目がみえるので (狂人だけど) 健常者からの視点の表現が対比として表されているのもおもしろい。京都から逢坂山の関を超える &lt;a href="https://db2.the-noh.com/jdic/2008/07/post_27.html">道行&lt;/a> の表現がまったく異なる。お互い捨てられた先の辺地の藁屋で、蝉丸が琵琶を弾いたことに逆髪が気付いて、藁屋を尋ねる (出会う) と物語が進んでいって、お互いに涙を流して再会に感動するものの、逆髪は「じゃあ、またね」って感じにすぐ？帰ろうとするのに対して、蝉丸は「もう行っちゃうんですか？！」的な名残惜しくて、ただそれだけのやり取りの能となっている。この能はただ姉弟が出会って別れるだけの、なんの事件も起こらないし、なんの因果もない。これは仏教でいう &lt;a href="https://ja.wikipedia.org/wiki/%E4%BC%9A%E8%80%85%E5%AE%9A%E9%9B%A2">会者定離 (えしゃじょうり)&lt;/a> を表しているという。出会った者は必ず別れることになるという普遍的な摂理。関西人からみると、オチがないやんとツッコミたくなるところが、哲学的ではまるところなのかもしれない。&lt;/p>
&lt;p>11月に &lt;a href="http://www.ashiya-nohbutai.com/img/kouen/2023/20231117-2.pdf">第二十二回「芦屋能・狂言鑑賞の会」&lt;/a> で能の「蝉丸」が演じられるようなので見に行こうと思う。&lt;/p></content></item><item><title>相続の手続きを完了した</title><link>/diary/posts/2023/1020/</link><pubDate>Fri, 20 Oct 2023 17:52:39 +0900</pubDate><guid>/diary/posts/2023/1020/</guid><description>0時に寝て4時に起きて6時前に起きた。最近早起きになってきた。
相続税の申告 今月に入って、何度か 会計事務所へ書類をもって訪問 したりしていた。昨日ようやく公認会計士の先生から相続税の申告を終えたという連絡をいただいた。父が失くなったのが 昨年の12月26日 でこの26日が申告期限となっていた。なんでこんなに時間がかかるの？と思いたくもなるが、うちの場合は10ヶ月ぎりぎりで相続税の申告ができた。遅れても延滞税がかかるだけで逮捕されるわけではなさそう。
ともあれ、相続が無事に終わってよかった。父は交通事故にあって遺言を残せる状態に回復することもなく入院生活を送って亡くなった。相続税の配偶者控除は手厚くて1億6,000万円までは相続税免除となる。なるべく母が相続する方が税金が少なくなるように一見はみえる。しかし、うちは2次相続も考慮して母と姉と私の3者に対して法定相続を採用することに決めた。2次相続のシミュレーション結果がどうであっても、私は母が相続しても詐欺で騙されて失ってしまうことを前提と考えているため、税金を余分に支払ってでも法定相続を採用しようと、もともと考えていた。最終的に母は相続税が不要なため、姉と私の2人が相続税を支払う形になった。それもすべて公認会計士さんが手続きしてくれたのでとくに労力があったわけでもない。
なぜ二次相続は重要？一次相続との違いや税額シミュレーションについても解説 相続の手続きで揉めたのが 未登記の建物の扱い だった。原則として建物はすべて登記しなければならないという法律はあるものの、過去の建物は未登記のものが多く、うちの実家の建物も大半が未登記だとわかった。そのまま未登記のまま、固定資産税評価額を使って相続税を算出することで問題なく完了できた。
家族信託のススメ 母が一定のお金を相続するにあたり、弁護士さんから 家族信託 を推奨されている。家族信託とは、後見人制度に代わる柔軟な財産管理をするための仕組みらしい。
うちは交通事故により父が意思疎通を図れない状態となったため、有無を言わさず成年後見人が選任され、その財産管理の在り方に大きな不満をもっている。さらに成年後見人の弁護士さんに少なくない手数料を5年間に渡って支払っている。実際の運用を経験して成年後見人という制度に懐疑的なところがいくつかある。
家族信託はそういった成年後見人による財産管理に代わるもので、契約時に決めた条件に従って財産の管理を第3者 (たいていは親族？) に委託する仕組みらしい。初期費用として50-100万円ほどかかるが、その後の維持管理のために経費はかからない。うちの場合は年間 627,000 円 (税込) を成年後見人の弁護士さんへ支払っていた。つまり毎月 52,250 円 (税込) を弁護士さんへ支払っていたことになる。この費用が本人が亡くなるまでずっと継続するというのが、成年後見人制度のコストの大きいところ。うちは5年間、さらに他にもいろいろあって、もっと多額の手数料を弁護士さんへ支払っている。もしかしたら財産の多寡によっては、さらに大きな金額を支払うことになるのかもしれない。
初期費用がかかるのは次の段取りを踏む必要があり、これらの作業に専門家へ依頼することでそのコンサルティング費用や事務手続き費用がかかるとのこと。
契約書の作成 公正証書の作成 信託口座の開設 これによって、契約書で決めた用途に関しては私や姉がお金を管理をして、母に送金するといったことが可能となる。母は直接、信託口座からお金を引き出すことはできない。運用としては、母から送金依頼があったときに私や姉が手続きをして、年に1回、私や姉から母へ報告をおこなう必要があるといった程度の労力が必要になる。弁護士さんに教えてもらった話しとオンラインの記事をみながらメリットをまとめる。
成年後見人制度よりも (一般論として) コストが安く、柔軟に財産管理できる 最初に決めた契約の内容に従って財産を運用できる (元本保証がない) 資産運用もできる (成年後見人は不可、財産が目減りする可能性があるものは一切できない) 親が判断能力を失っても財産管理に影響が出ない 認知症になっても子どもが財産を運用できる 詐欺に騙されてもお金を引き出せない 知的障害のある子どもがいる場合に、親が亡くなった後も財産を子どものために使ってもらうように運用できる ハイリスクな不動産の共有をしなくて済む 家族信託と、家族が勝手に親の通帳を取り上げて、認証情報を秘密にして運用するのと何が違うのかも弁護士さんに聞いてみた。
本人が金融機関に紛失届を出せば容易に再発行できる 親のお金を子どもが取り上げているという後ろめたさがある この状態を裁判などで訴えれば親側の主張が正しい 姉とも相談しつつ、母も説得しつつ、家族信託をするのでいいのではないかと、いまのところ、私は考えている。</description><content>&lt;p>0時に寝て4時に起きて6時前に起きた。最近早起きになってきた。&lt;/p>
&lt;h2 id="相続税の申告">相続税の申告&lt;/h2>
&lt;p>今月に入って、何度か &lt;a href="/diary/diary/posts/2023/1004/#会計士事務所への訪問">会計事務所へ書類をもって訪問&lt;/a> したりしていた。昨日ようやく公認会計士の先生から相続税の申告を終えたという連絡をいただいた。父が失くなったのが &lt;a href="/diary/diary/posts/2022/1226/">昨年の12月26日&lt;/a> でこの26日が申告期限となっていた。なんでこんなに時間がかかるの？と思いたくもなるが、うちの場合は10ヶ月ぎりぎりで相続税の申告ができた。遅れても延滞税がかかるだけで逮捕されるわけではなさそう。&lt;/p>
&lt;p>ともあれ、相続が無事に終わってよかった。父は交通事故にあって遺言を残せる状態に回復することもなく入院生活を送って亡くなった。相続税の配偶者控除は手厚くて1億6,000万円までは相続税免除となる。なるべく母が相続する方が税金が少なくなるように一見はみえる。しかし、うちは2次相続も考慮して母と姉と私の3者に対して法定相続を採用することに決めた。2次相続のシミュレーション結果がどうであっても、私は母が相続しても詐欺で騙されて失ってしまうことを前提と考えているため、税金を余分に支払ってでも法定相続を採用しようと、もともと考えていた。最終的に母は相続税が不要なため、姉と私の2人が相続税を支払う形になった。それもすべて公認会計士さんが手続きしてくれたのでとくに労力があったわけでもない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://legacy.ne.jp/knowledge/now/souzoku/524-nijisouzoku-ichijisouzoku-chigai-kaisetsu/">なぜ二次相続は重要？一次相続との違いや税額シミュレーションについても解説&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>相続の手続きで揉めたのが &lt;a href="/diary/diary/posts/2023/0510/">未登記の建物の扱い&lt;/a> だった。原則として建物はすべて登記しなければならないという法律はあるものの、過去の建物は未登記のものが多く、うちの実家の建物も大半が未登記だとわかった。そのまま未登記のまま、固定資産税評価額を使って相続税を算出することで問題なく完了できた。&lt;/p>
&lt;h2 id="家族信託のススメ">家族信託のススメ&lt;/h2>
&lt;p>母が一定のお金を相続するにあたり、弁護士さんから &lt;a href="https://kazokushintaku.org/whats/">家族信託&lt;/a> を推奨されている。家族信託とは、後見人制度に代わる柔軟な財産管理をするための仕組みらしい。&lt;/p>
&lt;p>うちは交通事故により父が意思疎通を図れない状態となったため、有無を言わさず成年後見人が選任され、その財産管理の在り方に大きな不満をもっている。さらに成年後見人の弁護士さんに少なくない手数料を5年間に渡って支払っている。実際の運用を経験して成年後見人という制度に懐疑的なところがいくつかある。&lt;/p>
&lt;p>家族信託はそういった成年後見人による財産管理に代わるもので、契約時に決めた条件に従って財産の管理を第3者 (たいていは親族？) に委託する仕組みらしい。初期費用として50-100万円ほどかかるが、その後の維持管理のために経費はかからない。うちの場合は年間 627,000 円 (税込) を成年後見人の弁護士さんへ支払っていた。つまり毎月 52,250 円 (税込) を弁護士さんへ支払っていたことになる。この費用が本人が亡くなるまでずっと継続するというのが、成年後見人制度のコストの大きいところ。うちは5年間、さらに他にもいろいろあって、もっと多額の手数料を弁護士さんへ支払っている。もしかしたら財産の多寡によっては、さらに大きな金額を支払うことになるのかもしれない。&lt;/p>
&lt;p>初期費用がかかるのは次の段取りを踏む必要があり、これらの作業に専門家へ依頼することでそのコンサルティング費用や事務手続き費用がかかるとのこと。&lt;/p>
&lt;ul>
&lt;li>契約書の作成&lt;/li>
&lt;li>公正証書の作成&lt;/li>
&lt;li>信託口座の開設&lt;/li>
&lt;/ul>
&lt;p>これによって、契約書で決めた用途に関しては私や姉がお金を管理をして、母に送金するといったことが可能となる。母は直接、信託口座からお金を引き出すことはできない。運用としては、母から送金依頼があったときに私や姉が手続きをして、年に1回、私や姉から母へ報告をおこなう必要があるといった程度の労力が必要になる。弁護士さんに教えてもらった話しとオンラインの記事をみながらメリットをまとめる。&lt;/p>
&lt;ul>
&lt;li>成年後見人制度よりも (一般論として) コストが安く、柔軟に財産管理できる&lt;/li>
&lt;li>最初に決めた契約の内容に従って財産を運用できる
&lt;ul>
&lt;li>(元本保証がない) 資産運用もできる (成年後見人は不可、財産が目減りする可能性があるものは一切できない)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>親が判断能力を失っても財産管理に影響が出ない
&lt;ul>
&lt;li>認知症になっても子どもが財産を運用できる&lt;/li>
&lt;li>詐欺に騙されてもお金を引き出せない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>知的障害のある子どもがいる場合に、親が亡くなった後も財産を子どものために使ってもらうように運用できる&lt;/li>
&lt;li>ハイリスクな不動産の共有をしなくて済む&lt;/li>
&lt;/ul>
&lt;p>家族信託と、家族が勝手に親の通帳を取り上げて、認証情報を秘密にして運用するのと何が違うのかも弁護士さんに聞いてみた。&lt;/p>
&lt;ul>
&lt;li>本人が金融機関に紛失届を出せば容易に再発行できる&lt;/li>
&lt;li>親のお金を子どもが取り上げているという後ろめたさがある
&lt;ul>
&lt;li>この状態を裁判などで訴えれば親側の主張が正しい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>姉とも相談しつつ、母も説得しつつ、家族信託をするのでいいのではないかと、いまのところ、私は考えている。&lt;/p></content></item><item><title>メールの結合テストのツール</title><link>/diary/posts/2023/1019/</link><pubDate>Thu, 19 Oct 2023 19:18:15 +0900</pubDate><guid>/diary/posts/2023/1019/</guid><description>0時に寝て4時と5時に起きて6時に起きた。最近は4時から1時間ごとに起きたりする。メールの送信処理のリファクタリングのコードレビューが長く続いていてなかなかややこしい。
mailhog の web api を使って検索する メール送信の結合テストに mailhog というツールを使っている。smtp サーバーとしてメールを受け付けて web ui でそのメールの内容を確認できる機能をもっている。さらに web api で任意のメール取り出すこともできる。パスワードリセットの一時トークンをメールで送信するため、結合テストで一連のパスワードリセットを検証するにはメールから一時トークンを取り出さないといけない。そこで mailhog の出番だ。
検索 api を使うと任意のメールをフィルターできる。例えば、送り先のメールアドレスで検索するときは次のようにリクエストする。
$ curl -s &amp;#34;http://localhost:8025/api/v2/search?kind=to&amp;amp;query=myuser1@example.com&amp;#34; | jq . うちらのやり方はメールのメッセージ ID に意図した uuid をセットしている。メールのメッセージから指定した uuid を含んでいるかを検索することで任意のメールをフィルターできる。
$ curl -s &amp;#34;http://localhost:8025/api/v2/search?kind=containing&amp;amp;query=28c9391f-25a5-4a8f-9035-7b8d5ac2d0f4&amp;#34; | jq . それを結合テストのテストコードから呼び出すようにユーティリティを作ると次のようなコードになる。
import ( &amp;#34;github.com/mailhog/data&amp;#34; ) type mmSearchResult struct { Total int `json:&amp;#34;total&amp;#34;` Count int `json:&amp;#34;count&amp;#34;` Start int `json:&amp;#34;start&amp;#34;` Items []data.Message `json:&amp;#34;items&amp;#34;` } func searchMail( host string, kind string, query string, ) (*mmSearchResult, error) { q := url.</description><content>&lt;p>0時に寝て4時と5時に起きて6時に起きた。最近は4時から1時間ごとに起きたりする。メールの送信処理のリファクタリングのコードレビューが長く続いていてなかなかややこしい。&lt;/p>
&lt;h2 id="mailhog-の-web-api-を使って検索する">mailhog の web api を使って検索する&lt;/h2>
&lt;p>メール送信の結合テストに &lt;a href="https://github.com/mailhog">mailhog&lt;/a> というツールを使っている。smtp サーバーとしてメールを受け付けて web ui でそのメールの内容を確認できる機能をもっている。さらに web api で任意のメール取り出すこともできる。パスワードリセットの一時トークンをメールで送信するため、結合テストで一連のパスワードリセットを検証するにはメールから一時トークンを取り出さないといけない。そこで mailhog の出番だ。&lt;/p>
&lt;p>検索 api を使うと任意のメールをフィルターできる。例えば、送り先のメールアドレスで検索するときは次のようにリクエストする。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ curl -s &lt;span style="color:#e6db74">&amp;#34;http://localhost:8025/api/v2/search?kind=to&amp;amp;query=myuser1@example.com&amp;#34;&lt;/span> | jq .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>うちらのやり方はメールのメッセージ ID に意図した uuid をセットしている。メールのメッセージから指定した uuid を含んでいるかを検索することで任意のメールをフィルターできる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ curl -s &lt;span style="color:#e6db74">&amp;#34;http://localhost:8025/api/v2/search?kind=containing&amp;amp;query=28c9391f-25a5-4a8f-9035-7b8d5ac2d0f4&amp;#34;&lt;/span> | jq .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>それを結合テストのテストコードから呼び出すようにユーティリティを作ると次のようなコードになる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/mailhog/data&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">mmSearchResult&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Total&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;total&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Count&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;count&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Start&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;start&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Items&lt;/span> []&lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;items&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">searchMail&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">host&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">kind&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">query&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">mmSearchResult&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">q&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">Values&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">q&lt;/span>.&lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;kind&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">kind&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">q&lt;/span>.&lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;query&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">query&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Scheme&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Host&lt;/span>: &lt;span style="color:#a6e22e">host&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Path&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/api/v2/search&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">RawQuery&lt;/span>: &lt;span style="color:#a6e22e">q&lt;/span>.&lt;span style="color:#a6e22e">Encode&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">slog&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;mailhog search endpoint&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;url&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">url&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">NewRequest&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">url&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;http create new request error. err: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">DefaultClient&lt;/span>.&lt;span style="color:#a6e22e">Do&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;http request error. err: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">StatusCode&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">400&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;returned response code is %d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">StatusCode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#a6e22e">mmSearchResult&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">convertBody&lt;/span>(&lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">r&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to convert: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">r&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="歯医者">歯医者&lt;/h2>
&lt;p>17時から歯科検診へ行ってきた。歯科検診をしてくれた今回のスタッフはおそらく初めてだったと思うが、手際がよくていつもよりもストレスが少なかった気がした。うちのチームのメンバーは朝方なので8時過ぎにはだいたいみんな始業し始める。なので、朝よりも夜にいない方がメンバーにとってよいだろうと考えて、朝一 (9時) に歯医者へ行くよりも最終 (17時) に行くようにしている。&lt;/p>
&lt;h2 id="pycamp-ふりかえり">pycamp ふりかえり&lt;/h2>
&lt;p>先週末の &lt;a href="/diary/diary/posts/2023/1014/#python-boot-camp">Python Boot Camp&lt;/a> のふりかえり。ここまでがスタッフのお仕事なので一般的な kpt でイベントのふりかえりをした。仕事じゃないし、大きなトラブルもなかったし、参加者の評判 (アンケートの内容) もよかったので概ねよい内容だったと思う。テキストの改善点は直接 issue に追加してほしいと言われたので報告した。是非も含めてスタッフに判断してほしいので私が直すつもりはない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/pyconjp/pycamp.pycon.jp/issues/219">タプルとリストの違いの説明に辞書のキーになれることも追加する #219&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/pyconjp/pycamp.pycon.jp/issues/220">Windows 環境で普通に pip upgrade をすると環境が壊れる #220&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/pyconjp/pycamp.pycon.jp/issues/221">pip コマンドの説明で実際に存在するモジュールを書いてあると誤ってインストールしてしまう #221&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>パスワードリセットのテストのためのガイドライン</title><link>/diary/posts/2023/1018/</link><pubDate>Wed, 18 Oct 2023 09:04:08 +0900</pubDate><guid>/diary/posts/2023/1018/</guid><description>0時に寝て何度か起きて4時に起きて仮眠して6時に起きた。あまり寝た気がしない。
OWASP のパスワードリセットのガイドライン パスワードリセットの仕組みをメンバーに開発してもらっている。そのコードレビューが先週から白熱している。セキュリティが関連するので堅牢に作る必要があるのでここはあまり妥協せきない。お手伝い先のシニアエンジニアから独自設計で作るのではなく、最低限、世の中の一般的なガイドラインに従っているかを確認するために OWASP のガイドラインを紹介してくれた。これはパスワードリセットの仕組みをテストするための要項をあげている。
Testing for Weak Password Change or Reset Functionalities これをメンバーに読んでもらって理解して実装しろと言いたいところでもあるが、私自身、読んだことがないとレビューできないことに気付いて、これは私が読んだ上で既存の設計や実装を見直すべきだと判断して deepl を駆使しながらほとんどを読んでみた。たしかに読んでみていくつか抜け・漏れに気付いたり、うちのセキュリティポリシーとして意図的に緩和しているところも認識できたりして、結論から言って読んでよかったと思う。当初はパスワードリセットのために一時トークンを1つだけ使っていたのだけど、それも2つを別々の経路に送って、割符のように組み合わせて認証する仕組みに変更した。よりセキュアにするという意図では一時トークンも1つよりも2つの方がよいというのは概ね正しいと思う。</description><content>&lt;p>0時に寝て何度か起きて4時に起きて仮眠して6時に起きた。あまり寝た気がしない。&lt;/p>
&lt;h2 id="owasp-のパスワードリセットのガイドライン">OWASP のパスワードリセットのガイドライン&lt;/h2>
&lt;p>パスワードリセットの仕組みをメンバーに開発してもらっている。そのコードレビューが先週から白熱している。セキュリティが関連するので堅牢に作る必要があるのでここはあまり妥協せきない。お手伝い先のシニアエンジニアから独自設計で作るのではなく、最低限、世の中の一般的なガイドラインに従っているかを確認するために OWASP のガイドラインを紹介してくれた。これはパスワードリセットの仕組みをテストするための要項をあげている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities">Testing for Weak Password Change or Reset Functionalities&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>これをメンバーに読んでもらって理解して実装しろと言いたいところでもあるが、私自身、読んだことがないとレビューできないことに気付いて、これは私が読んだ上で既存の設計や実装を見直すべきだと判断して deepl を駆使しながらほとんどを読んでみた。たしかに読んでみていくつか抜け・漏れに気付いたり、うちのセキュリティポリシーとして意図的に緩和しているところも認識できたりして、結論から言って読んでよかったと思う。当初はパスワードリセットのために一時トークンを1つだけ使っていたのだけど、それも2つを別々の経路に送って、割符のように組み合わせて認証する仕組みに変更した。よりセキュアにするという意図では一時トークンも1つよりも2つの方がよいというのは概ね正しいと思う。&lt;/p></content></item><item><title>もうすぐ新規メンバーが入ってくる</title><link>/diary/posts/2023/1017/</link><pubDate>Tue, 17 Oct 2023 09:17:19 +0900</pubDate><guid>/diary/posts/2023/1017/</guid><description>1時に寝て何度か起きて6時半に起きた。なんか喉が乾いて一晩で飲むヨーグルトを900mlを飲んでしまった。今日もコードレビューが多くて疲弊した。
新規メンバーの受け入れ調整 早ければ9月末辺りから参加すると言いながら、既存のお仕事の調整でまだ新規メンバーが参加していなかった。一方で定例会議やチーム勉強会にはその頃から参加していた。そろそろ既存のお仕事が落ち着くということで来週の月曜日から開発に参加することに決まった。これでうちのチームの常勤メンバーは私を含めて4人になった。私は3人のメンバーの面倒をみることになる。3人もいればチームとして出来ることが大きく増えるのではないかと期待している。キングダムに例えたら信が100人将になったぐらいの影響力か。とはいえ、若いメンバーが主体なのでまだまだ指導してスキルアップしてもらうことにはなるが、私のお仕事が遊撃よりも指導の方に工数を割くようになっているのかもしれない。この機会にオンボーディングのドキュメントも作ることにした。</description><content>&lt;p>1時に寝て何度か起きて6時半に起きた。なんか喉が乾いて一晩で飲むヨーグルトを900mlを飲んでしまった。今日もコードレビューが多くて疲弊した。&lt;/p>
&lt;h2 id="新規メンバーの受け入れ調整">新規メンバーの受け入れ調整&lt;/h2>
&lt;p>早ければ9月末辺りから参加すると言いながら、既存のお仕事の調整でまだ新規メンバーが参加していなかった。一方で定例会議やチーム勉強会にはその頃から参加していた。そろそろ既存のお仕事が落ち着くということで来週の月曜日から開発に参加することに決まった。これでうちのチームの常勤メンバーは私を含めて4人になった。私は3人のメンバーの面倒をみることになる。3人もいればチームとして出来ることが大きく増えるのではないかと期待している。キングダムに例えたら信が100人将になったぐらいの影響力か。とはいえ、若いメンバーが主体なのでまだまだ指導してスキルアップしてもらうことにはなるが、私のお仕事が遊撃よりも指導の方に工数を割くようになっているのかもしれない。この機会にオンボーディングのドキュメントも作ることにした。&lt;/p></content></item><item><title>税理士さんとの契約</title><link>/diary/posts/2023/1016/</link><pubDate>Mon, 16 Oct 2023 09:00:47 +0900</pubDate><guid>/diary/posts/2023/1016/</guid><description>0時に寝て何度か起きて6時に起きた。夜にストレッチを受けて寝たせいか、わりとよく眠れた。お仕事はコードレビューを中心に、既存のよくないところをリファクタリングして品質や堅牢性を高めることをしていた。
税理士さんと契約についての打ち合わせ 税理士さん探し の続き。3人の税理士さんと打ち合わせをして、その中で1人の税理士さんを選定した。ようやく、うちの会社も税理士さんに税務をお願いできるようになった。最初の打ち合わせを30分ほど行った。うちは会計システムに freee を使っているので freee の操作ができることを要件に探した。freee には税理士さんをアドバイザーとして招待する仕組みがあって、それを使って登録すると税理士さんがうちの会社の会計データを読み書きできるようになるという。まずはその登録作業を行った。他にも過去の決算書と決算申告のデータを共有したり、うちの会社の特徴や課題管理のやり方なども情報共有した。課題管理にも関心をもってくれたのでうちの会社の jira にも招待して、できれば、税理士さんもうちの会社の会計作業については jira で課題管理してくれると嬉しい。それは難しいかもだけど。
税理士さんが言うには、税理士会が情報共有のツールとして dropbox を推奨しているらしい。ファイルを情報共有するために dropbox のフォルダ共有してくれると助かるという。うちは google workspace を使っているので必然的に google drive が望ましいのだけど、それは税理士さんにあわせて dropbox にした。私の感覚だと、dropbox よりは google の方がセキュリティもサービスも信頼できてよいのだけど、そこは税理士会の慣習に従うことにした。
税理士さんは社内では slack を、お客さん向けには chatwork を使っているという。私は chatwork 使ったことがなかったのでこの機会に使うことにしてみた。これは税理士さん側から私を招待してもらって使えるようにした。どうやらフリープランで使ってみるみたい。chatwork にもフリープランあったんやと知った。
利用プランの変更 契約についてどうしましょう？と相談したところ、どっちでもよいと言う。税理士さんの守秘義務は法律で定められていて、これに違反すると懲戒処分に加えて、刑事罰もうけるような、強力なものらしい。したがって、税理士さんが契約書を企業と交わさなくても税務には問題がないらしい。一方で顧問契約を1年は継続してほしいといったときに期間を契約書に明記して契約するといったケースもあるらしい。先方がいらないと言っていたのでひとまず契約書なしで進めることにしてみる。
税理士の守秘義務</description><content>&lt;p>0時に寝て何度か起きて6時に起きた。夜にストレッチを受けて寝たせいか、わりとよく眠れた。お仕事はコードレビューを中心に、既存のよくないところをリファクタリングして品質や堅牢性を高めることをしていた。&lt;/p>
&lt;h2 id="税理士さんと契約についての打ち合わせ">税理士さんと契約についての打ち合わせ&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/1010/#税理士さんとの打ち合わせ2">税理士さん探し&lt;/a> の続き。3人の税理士さんと打ち合わせをして、その中で1人の税理士さんを選定した。ようやく、うちの会社も税理士さんに税務をお願いできるようになった。最初の打ち合わせを30分ほど行った。うちは会計システムに freee を使っているので freee の操作ができることを要件に探した。freee には税理士さんをアドバイザーとして招待する仕組みがあって、それを使って登録すると税理士さんがうちの会社の会計データを読み書きできるようになるという。まずはその登録作業を行った。他にも過去の決算書と決算申告のデータを共有したり、うちの会社の特徴や課題管理のやり方なども情報共有した。課題管理にも関心をもってくれたのでうちの会社の jira にも招待して、できれば、税理士さんもうちの会社の会計作業については jira で課題管理してくれると嬉しい。それは難しいかもだけど。&lt;/p>
&lt;p>税理士さんが言うには、税理士会が情報共有のツールとして dropbox を推奨しているらしい。ファイルを情報共有するために dropbox のフォルダ共有してくれると助かるという。うちは google workspace を使っているので必然的に google drive が望ましいのだけど、それは税理士さんにあわせて dropbox にした。私の感覚だと、dropbox よりは google の方がセキュリティもサービスも信頼できてよいのだけど、そこは税理士会の慣習に従うことにした。&lt;/p>
&lt;p>税理士さんは社内では slack を、お客さん向けには chatwork を使っているという。私は chatwork 使ったことがなかったのでこの機会に使うことにしてみた。これは税理士さん側から私を招待してもらって使えるようにした。どうやらフリープランで使ってみるみたい。chatwork にもフリープランあったんやと知った。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.chatwork.com/service/packages/chatwork/price.php">利用プランの変更&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>契約についてどうしましょう？と相談したところ、どっちでもよいと言う。税理士さんの守秘義務は法律で定められていて、これに違反すると懲戒処分に加えて、刑事罰もうけるような、強力なものらしい。したがって、税理士さんが契約書を企業と交わさなくても税務には問題がないらしい。一方で顧問契約を1年は継続してほしいといったときに期間を契約書に明記して契約するといったケースもあるらしい。先方がいらないと言っていたのでひとまず契約書なしで進めることにしてみる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.office-kuriyama.jp/category/1244788.html">税理士の守秘義務&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>田んぼ仕事の流れでお休み</title><link>/diary/posts/2023/1015/</link><pubDate>Sun, 15 Oct 2023 08:01:14 +0900</pubDate><guid>/diary/posts/2023/1015/</guid><description>23時に寝て何度か起きて6時半に起きた。
田んぼ 7時からトラクターで田んぼを耕す。昨日の夜、普通に雨が降っていたので今日は田んぼ無理かなと諦めつつ、朝起きたら雨もあがっていて、田んぼもそれほど水浸しになってなかったので予定通りで耕作できた。昨日、刈った草を焼いてあったのでスペースが空いたところをトラクターで耕していく。全体のうちの半分ぐらいを耕した。玉ねぎとか、なにか野菜をまた植えるらしい。
トラクターは大きな機械なので田んぼの隅などはうまく耕せないし、畝を作るときの縦と横の相反する畝などは作れない。畝を作る目的の1つに排水がある。雨が降ったときに水が田んぼから流れていくように道を作らないといけない。トラクターで大まかに作った後に鍬で調整していく。私はこの鍬仕事が苦手でいつも親にやってもらうのだけど、30分だけ (これが限界) 手伝うようにしている。中央の水を抜くための谷を開通させるところだけ30分ほど作業した。
ストレッチ お昼過ぎに帰ってきてそのまま休んでいて夜にストレッチだけ行ってきた。夜のストレッチはいつもあまり調子よくないが、鍬仕事を少しやった分の筋肉痛などをほぐした感じ。今日の開脚幅は開始前153cmで、ストレッチ後155cmだった。</description><content>&lt;p>23時に寝て何度か起きて6時半に起きた。&lt;/p>
&lt;h2 id="田んぼ">田んぼ&lt;/h2>
&lt;p>7時からトラクターで田んぼを耕す。昨日の夜、普通に雨が降っていたので今日は田んぼ無理かなと諦めつつ、朝起きたら雨もあがっていて、田んぼもそれほど水浸しになってなかったので予定通りで耕作できた。昨日、刈った草を焼いてあったのでスペースが空いたところをトラクターで耕していく。全体のうちの半分ぐらいを耕した。玉ねぎとか、なにか野菜をまた植えるらしい。&lt;/p>
&lt;p>トラクターは大きな機械なので田んぼの隅などはうまく耕せないし、畝を作るときの縦と横の相反する畝などは作れない。畝を作る目的の1つに排水がある。雨が降ったときに水が田んぼから流れていくように道を作らないといけない。トラクターで大まかに作った後に鍬で調整していく。私はこの鍬仕事が苦手でいつも親にやってもらうのだけど、30分だけ (これが限界) 手伝うようにしている。中央の水を抜くための谷を開通させるところだけ30分ほど作業した。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2023/1015_field1.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2023/1015_field2.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2023/1015_field3.jpg"/>
&lt;/figure>
&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>お昼過ぎに帰ってきてそのまま休んでいて夜にストレッチだけ行ってきた。夜のストレッチはいつもあまり調子よくないが、鍬仕事を少しやった分の筋肉痛などをほぐした感じ。今日の開脚幅は開始前153cmで、ストレッチ後155cmだった。&lt;/p></content></item><item><title>イベント参加のついでに実家に立ち寄り</title><link>/diary/posts/2023/1014/</link><pubDate>Sat, 14 Oct 2023 07:01:12 +0900</pubDate><guid>/diary/posts/2023/1014/</guid><description>0時に寝て2時に起きて少し仮眠して5時に起きた。朝から出かける準備をして6時過ぎには出発した。神戸から実家まで約80kmの距離を、早朝だと高速道路が空いているのもあって1時間弱といったところ。
軽トラのエンジンをかける 車のバッテリーがあがってしまったときに使う ジャンプスターター を昨年末に購入していた。また軽トラのバッテリーがあがってしまったようで、今回は母に使い方を教えながらエンジンをかけてみた。バッテリーにつなぐケーブルに boost ボタンがあってそれを押下してエンジンをかけるだけ。これは本当に買ってよかった。たまにしか農業しないような家の軽トラ向けにあると安心できる。軽トラのエンジンがかかったら1時間ほど走ってくればそれで元のバッテリーは回復する。
草焼き 実家に着いたのが7時過ぎで朝ご飯を食べて、まだ時間があったので草焼きを手伝うことにした。すでに刈って干した草が集めてあったのでそれを火にかけて番をする。以前にも草焼きをした経験 があったので注意を払いながら行う。母が言うには、最近でも淡路島の人で草焼きをしていて2人亡くなっているという。おそらく煙に巻かれて一酸化炭素中毒で気を失ってしまったんだと推測する。干し草は一気に燃え上がるので青い草と干し草を調整ながら火の勢いを制御する。あとは表面だけ燃えるので内側も燃えるように混ぜ返したり空気を送ったりといった調整も必要になる。火の制御は難しい。1時間ほどやっていた。
Python Boot Camp 今日の目的は次のイベントに TA として参加してきた。
Python Boot Camp in 徳島2nd 現地11時集合だったものの、早めに実家を出たので10時半頃に着いてしまった。他のスタッフもその後すぐに合流して10時50分には全員が揃った。私は知り合いのスタッフがほとんどいなかったので挨拶したりしていた。だいたいスタッフは次のような構成だった。
講師: 1人 現地スタッフ: 1人 TA: 3人 会場関係者: 2人 次の段取りでほぼこの通りうまくスケジュールを進捗できたと思う。
11:00 スタッフTA講師が集合 11:00-11:30 準備 11:30-12:30 スタッフTA講師でランチ 12:30 開場 13:00 PyCamp開始 17:00 PyCamp終了 17:30 撤収完了 お昼に食べた「鳴門うどん」もひやむぎ程度のサイズの麺をにゅうめんのような食感で食べるものだった。身近に住んでいてこれは知らなかった。おいしかった。
boot camp イベントも順調に進捗して受講者も喜んでいたようだったのでよかった。久しぶりにこういったイベントに参加すると、プログラミングを始めたばかりの気持ちなどを思い出してよかったと思う。いまはお仕事でプログラミングの随分と高度なことをマネージャーとして教えているわけだけど、簡単なコードが動いておもしろいといった気持ちがあることも大事だと思う。懇親会も出て、その後、スタッフ同士での反省会もやって、21時前には現地を解散して21時20分に実家に戻った。</description><content>&lt;p>0時に寝て2時に起きて少し仮眠して5時に起きた。朝から出かける準備をして6時過ぎには出発した。神戸から実家まで約80kmの距離を、早朝だと高速道路が空いているのもあって1時間弱といったところ。&lt;/p>
&lt;h2 id="軽トラのエンジンをかける">軽トラのエンジンをかける&lt;/h2>
&lt;p>車のバッテリーがあがってしまったときに使う &lt;a href="/diary/diary/posts/2023/0101/#ジャンプスターター">ジャンプスターター&lt;/a> を昨年末に購入していた。また軽トラのバッテリーがあがってしまったようで、今回は母に使い方を教えながらエンジンをかけてみた。バッテリーにつなぐケーブルに boost ボタンがあってそれを押下してエンジンをかけるだけ。これは本当に買ってよかった。たまにしか農業しないような家の軽トラ向けにあると安心できる。軽トラのエンジンがかかったら1時間ほど走ってくればそれで元のバッテリーは回復する。&lt;/p>
&lt;h2 id="草焼き">草焼き&lt;/h2>
&lt;p>実家に着いたのが7時過ぎで朝ご飯を食べて、まだ時間があったので草焼きを手伝うことにした。すでに刈って干した草が集めてあったのでそれを火にかけて番をする。&lt;a href="/diary/diary/posts/2021/1006/">以前にも草焼きをした経験&lt;/a> があったので注意を払いながら行う。母が言うには、最近でも淡路島の人で草焼きをしていて2人亡くなっているという。おそらく煙に巻かれて一酸化炭素中毒で気を失ってしまったんだと推測する。干し草は一気に燃え上がるので青い草と干し草を調整ながら火の勢いを制御する。あとは表面だけ燃えるので内側も燃えるように混ぜ返したり空気を送ったりといった調整も必要になる。火の制御は難しい。1時間ほどやっていた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/1014_kusayaki.jpg"/>
&lt;/figure>
&lt;h2 id="python-boot-camp">Python Boot Camp&lt;/h2>
&lt;p>今日の目的は次のイベントに TA として参加してきた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pyconjp.connpass.com/event/293032/">Python Boot Camp in 徳島2nd&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>現地11時集合だったものの、早めに実家を出たので10時半頃に着いてしまった。他のスタッフもその後すぐに合流して10時50分には全員が揃った。私は知り合いのスタッフがほとんどいなかったので挨拶したりしていた。だいたいスタッフは次のような構成だった。&lt;/p>
&lt;ul>
&lt;li>講師: 1人&lt;/li>
&lt;li>現地スタッフ: 1人&lt;/li>
&lt;li>TA: 3人&lt;/li>
&lt;li>会場関係者: 2人&lt;/li>
&lt;/ul>
&lt;p>次の段取りでほぼこの通りうまくスケジュールを進捗できたと思う。&lt;/p>
&lt;pre tabindex="0">&lt;code>11:00 スタッフTA講師が集合
11:00-11:30 準備
11:30-12:30 スタッフTA講師でランチ
12:30 開場
13:00 PyCamp開始
17:00 PyCamp終了
17:30 撤収完了
&lt;/code>&lt;/pre>&lt;p>お昼に食べた「鳴門うどん」もひやむぎ程度のサイズの麺をにゅうめんのような食感で食べるものだった。身近に住んでいてこれは知らなかった。おいしかった。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/1014_naruto-udon.jpg"/>
&lt;/figure>
&lt;p>boot camp イベントも順調に進捗して受講者も喜んでいたようだったのでよかった。久しぶりにこういったイベントに参加すると、プログラミングを始めたばかりの気持ちなどを思い出してよかったと思う。いまはお仕事でプログラミングの随分と高度なことをマネージャーとして教えているわけだけど、簡単なコードが動いておもしろいといった気持ちがあることも大事だと思う。懇親会も出て、その後、スタッフ同士での反省会もやって、21時前には現地を解散して21時20分に実家に戻った。&lt;/p></content></item><item><title>標準ライブラリに XOAUTH2 の実装がない</title><link>/diary/posts/2023/1013/</link><pubDate>Fri, 13 Oct 2023 08:31:00 +0900</pubDate><guid>/diary/posts/2023/1013/</guid><description>0時に寝て3時に起きて5時ぐらいまでネットで遊んでて6時半に起きた。昨日の夜に洗濯しようと思って忘れていたので朝から洗濯した。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。
税理士さんとの打ち合わせのふりかえり 昔お手伝いした会社の開発体制の話 新しいチーム勉強会 の導入 3人の税理士さんと打ち合わせしてみて最終的に顧問契約をお願いする方を決めた。話してみてやり取りした雰囲気だと、その税理士さんもスキルやこちらの要件対応については全く問題なさそうに思えた。あとは報酬とうちの会社の規模などを考慮して選択した。
昔お手伝いした会社で2年経ってちょっと相談にのってほしいという打ち合わせをした。私がいた2年前と開発体制はまったく変わってなくて、未だにテックリードがほぼ1人で開発している状況らしい。私が辞めてから以降も何人かは開発者が入っては辞めを繰り返しているのだと推測する。私も2度とその開発者と一緒に働きたくないと思うぐらいには信頼してなくて、開発者が引く手あまたな世の中の状況において、人間として信頼されないリーダーって致命的なんだなということを改めて実感した。おそらくテックリードを追放しない限り、あの開発体制 (と言ってもほぼ独り開発) は何も変わらないのだろうと思う。
oauth 2.0 で認証して google の smtp サーバーを使う 昨日の続き 。
リフレッシュトークンを使って取得したアクセストークンで smtp の AUTH コマンドで XOAUTH2 で認証すればよい。仕様は次のドキュメントに書いてある。
Home &amp;gt; Google Workspace &amp;gt; Gmail &amp;gt; Guides &amp;gt; OAuth 2.0 Mechanism RFC 7628 - A Set of Simple Authentication and Security Layer (SASL) Mechanisms for OAuth 日本語訳 なぜか go の標準ライブラリの net/smtp には Plain と CRAM-MD5 の2つしか実装されていない。AUTH コマンドの実装は smtp.Auth インターフェースで定義されている。
type Auth interface { Start(server *ServerInfo) (proto string, toServer []byte, err error) Next(fromServer []byte, more bool) (toServer []byte, err error) } 正常系の雑な実装だとこんな感じ。</description><content>&lt;p>0時に寝て3時に起きて5時ぐらいまでネットで遊んでて6時半に起きた。昨日の夜に洗濯しようと思って忘れていたので朝から洗濯した。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。&lt;/p>
&lt;ul>
&lt;li>税理士さんとの打ち合わせのふりかえり&lt;/li>
&lt;li>昔お手伝いした会社の開発体制の話&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2023/1005/">新しいチーム勉強会&lt;/a> の導入&lt;/li>
&lt;/ul>
&lt;p>3人の税理士さんと打ち合わせしてみて最終的に顧問契約をお願いする方を決めた。話してみてやり取りした雰囲気だと、その税理士さんもスキルやこちらの要件対応については全く問題なさそうに思えた。あとは報酬とうちの会社の規模などを考慮して選択した。&lt;/p>
&lt;p>昔お手伝いした会社で2年経ってちょっと相談にのってほしいという打ち合わせをした。私がいた2年前と開発体制はまったく変わってなくて、未だにテックリードがほぼ1人で開発している状況らしい。私が辞めてから以降も何人かは開発者が入っては辞めを繰り返しているのだと推測する。私も2度とその開発者と一緒に働きたくないと思うぐらいには信頼してなくて、開発者が引く手あまたな世の中の状況において、人間として信頼されないリーダーって致命的なんだなということを改めて実感した。おそらくテックリードを追放しない限り、あの開発体制 (と言ってもほぼ独り開発) は何も変わらないのだろうと思う。&lt;/p>
&lt;h2 id="oauth-20-で認証して-google-の-smtp-サーバーを使う">oauth 2.0 で認証して google の smtp サーバーを使う&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/1012/">昨日の続き&lt;/a> 。&lt;/p>
&lt;p>リフレッシュトークンを使って取得したアクセストークンで smtp の AUTH コマンドで XOAUTH2 で認証すればよい。仕様は次のドキュメントに書いてある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developers.google.com/gmail/imap/xoauth2-protocol">Home &amp;gt; Google Workspace &amp;gt; Gmail &amp;gt; Guides &amp;gt; OAuth 2.0 Mechanism&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tex2e.github.io/rfc-translater/html/rfc7628.html">RFC 7628 - A Set of Simple Authentication and Security Layer (SASL) Mechanisms for OAuth 日本語訳&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>なぜか go の標準ライブラリの net/smtp には Plain と CRAM-MD5 の2つしか実装されていない。AUTH コマンドの実装は smtp.Auth インターフェースで定義されている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Auth&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Start&lt;/span>(&lt;span style="color:#a6e22e">server&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ServerInfo&lt;/span>) (&lt;span style="color:#a6e22e">proto&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">toServer&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Next&lt;/span>(&lt;span style="color:#a6e22e">fromServer&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">more&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) (&lt;span style="color:#a6e22e">toServer&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>正常系の雑な実装だとこんな感じ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">oauth2&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tokenType&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">accessToken&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">o&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">oauth2&lt;/span>) &lt;span style="color:#a6e22e">Start&lt;/span>(&lt;span style="color:#a6e22e">server&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">smtp&lt;/span>.&lt;span style="color:#a6e22e">ServerInfo&lt;/span>) (&lt;span style="color:#66d9ef">string&lt;/span>, []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">server&lt;/span>.&lt;span style="color:#a6e22e">TLS&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;need tls&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">resp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []byte(&lt;span style="color:#e6db74">&amp;#34;user=&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\001auth=&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">tokenType&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">accessToken&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\001\001&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;XOAUTH2&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">o&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">oauth2&lt;/span>) &lt;span style="color:#a6e22e">Next&lt;/span>(&lt;span style="color:#a6e22e">fromServer&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">more&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) ([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">more&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;unexpected server challenge&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ググるとサンプルコードを実装している人たちがちらほらいるので、そのうち標準ライブラリに誰か実装してくれると思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jacobalberty/smtpoauth2">https://github.com/jacobalberty/smtpoauth2&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>go 本体に pr を送るチャンスでもあるけど、&lt;a href="https://go.dev/doc/contribute">Contribution Guide&lt;/a> を少し眺めて大変そうと思って、いまそこまでのモチベーションないなって感じ。&lt;/p></content></item><item><title>xoauth2 という smtp の認証</title><link>/diary/posts/2023/1012/</link><pubDate>Thu, 12 Oct 2023 08:19:48 +0900</pubDate><guid>/diary/posts/2023/1012/</guid><description>0時に寝て何度か起きて6時に起きた。昨日、凡人が天才に挑むという状況で、キングダムの 蒙驁 将軍が廉頗に挑むみたいな状況を思い出して見返していた。史実では蒙驁が魏を攻めて東郡を置いたというのは事実だが、廉頗と戦ったという記録はなく、おそらくは蒙驁と廉頗に因縁があって雪辱戦としたというのはキングダムの創作だろうと推測される。
oauth 2.0 で認証して google の smtp サーバーを使う google さんの smtp.gmail.com の smtp サーバーを使ってメールを送信したい。
Turning off less secure app access to G Suite accounts Beginning September 30, 2024: third-party apps that use only a password to access Google Accounts and Google Sync will no longer be supported 2019年にパスワード認証は廃止するので oauth 2.0 へ移行してくださいといった、最初のアナウンスが行われて、もうできないかと思ったら2024年9月30日に完全廃止するのかな？まだパスワード認証は動くかもしれない。一方で oauth 2.0 へ移行しないといけないのでその調査をメンバーにしてもらっていた。結局、途中からは私も本気になって調べていた。
oauth 2.0 で認証してアクセストークンとリフレッシュトークンを取得するためのサンプルコードとして OAuth2DotPyRunThrough が用意されている。このトークンを取得するときに callback の url にユーザーが明示的にアクセスして同意する必要がある。ここで得たアクセストークンは1時間で有効期限がきれる。しかし、リフレッシュトークンはユーザーが revoke しない限りは永続的に使えるそうで、このリフレッシュトークンを使って必要なときにアクセストークンを取得するというのが google さんの oauth 2.</description><content>&lt;p>0時に寝て何度か起きて6時に起きた。昨日、凡人が天才に挑むという状況で、キングダムの &lt;a href="https://dic.pixiv.net/a/%E8%92%99%E9%A9%81">蒙驁&lt;/a> 将軍が廉頗に挑むみたいな状況を思い出して見返していた。史実では蒙驁が魏を攻めて東郡を置いたというのは事実だが、廉頗と戦ったという記録はなく、おそらくは蒙驁と廉頗に因縁があって雪辱戦としたというのはキングダムの創作だろうと推測される。&lt;/p>
&lt;h2 id="oauth-20-で認証して-google-の-smtp-サーバーを使う">oauth 2.0 で認証して google の smtp サーバーを使う&lt;/h2>
&lt;p>google さんの smtp.gmail.com の smtp サーバーを使ってメールを送信したい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://workspaceupdates.googleblog.com/2019/12/less-secure-apps-oauth-google-username-password-incorrect.html">Turning off less secure app access to G Suite accounts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://workspaceupdates.googleblog.com/2023/09/winding-down-google-sync-and-less-secure-apps-support.html">Beginning September 30, 2024: third-party apps that use only a password to access Google Accounts and Google Sync will no longer be supported&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>2019年にパスワード認証は廃止するので oauth 2.0 へ移行してくださいといった、最初のアナウンスが行われて、もうできないかと思ったら2024年9月30日に完全廃止するのかな？まだパスワード認証は動くかもしれない。一方で oauth 2.0 へ移行しないといけないのでその調査をメンバーにしてもらっていた。結局、途中からは私も本気になって調べていた。&lt;/p>
&lt;p>oauth 2.0 で認証してアクセストークンとリフレッシュトークンを取得するためのサンプルコードとして &lt;a href="https://github.com/google/gmail-oauth2-tools/wiki/OAuth2DotPyRunThrough">OAuth2DotPyRunThrough&lt;/a> が用意されている。このトークンを取得するときに callback の url にユーザーが明示的にアクセスして同意する必要がある。ここで得たアクセストークンは1時間で有効期限がきれる。しかし、リフレッシュトークンはユーザーが revoke しない限りは永続的に使えるそうで、このリフレッシュトークンを使って必要なときにアクセストークンを取得するというのが google さんの oauth 2.0 のアプリケーションの運用になるみたい。つまりリフレッシュトークンをアプリケーション側で管理することでアクセストークンは何度でも取得できる。&lt;/p>
&lt;p>&lt;a href="https://developers.google.com/gmail/imap/xoauth2-protocol">OAuth 2.0 Mechanism&lt;/a> によると、取得したアクセストークンを使って &lt;code>XOAUTH2&lt;/code> という smtp の認証方式で認証すれば smtp サーバーに対して smtp でメールを送信できる。gmail 以外でメールをやり取りする機会がなくなって数年たつ。smtp の仕組みとか、まったく忘れてしまって関心もない。たったこれだけなんだけど、右往左往してあちこち調べることになった。ややこしいのは google のクラウド api 経由でメールを送ることもできて、そのやり方と混同するとまったく違う方向に行ってしまう。そこだけ注意。&lt;/p></content></item><item><title>ステートレスな認証という概念</title><link>/diary/posts/2023/1011/</link><pubDate>Wed, 11 Oct 2023 09:14:37 +0900</pubDate><guid>/diary/posts/2023/1011/</guid><description>0時に寝て4時ぐらいに起きてだらだらして7時半に起きた。やっぱりあまり眠れない。
ステートレスな認証という概念 次の開発フェーズが始まっていて、ちょっと時間が経ってしまったが、前開発フェーズのお披露目的な製品紹介をお手伝い先の全社向けに行った。主には直近の開発フェーズで追加した機能などを紹介した。その過程で新たに認証の仕組みを追加して jwt で認証するといった話しをしたところ、それはステートレスなのかどうかといった質問が出た。セキュリティを考慮して、アーキテクチャ的にフロントエンドの認証と api サーバーの認証は分けて実装しているのと、そのために仕組みも複雑になっているのだけど、ステートレスという言葉が指す意図を私がよくわかっていなくて、うまく説明できなかった。説明を終えた後にアーキテクチャのイメージ図と一緒に補足をしながらやり取りして次の記事を教えてもらった。
&amp;ldquo;JWT=ステートレス&amp;quot;から一歩踏み出すための考え方 jwt は暗号化の技術で認証する仕組みなので有効期限が切れるまでは有効なアクセストークンとなる。そのため、jwt のみだとログアウトという概念はないため、そこをどうしているのか？という質問だった。フロントエンド／api サーバーともに session をオンメモリで保持して、ログインしたユーザーを管理しているため、ログアウトしたら session からレコードを削除することで有効な jwt のアクセストークンが来ても認証エラーにしてしまうことでステートをもった認証方式を実現している。とくまる先生が次のように説明しているところ。
「セッションIDをJWTに内包する」 という考え方です。
うちはこれをセッション ID ではなくユーザー名でやっている。とくに難しいことをやっているわけではなく、普通に実装したらそんな感じかな？と考えていたが、jwt = ステートレス認証だと思い込んでいる人たちがいるから ストートレスな認証 というキーワードが出てきたんだなと理解できた。最近のトレンドとしてはログアウトで jwt のアクセストークンを無効にできないと脆弱性と指摘される可能性がありそうとも書いてある。
ログアウト時にJWTを無効化できない実装は今後脆弱性診断で「OWASP Top 10 2021違反」と指摘されるようになりそう(今も個別にされてるかもしれないけど)
私はアーキテクチャ的にブラウザに api サーバーのアクセストークンをみせないというところに注力して認証機能の開発をサポートしていた。それ自体も間違っていないとは思うけど、今回の質問はその工夫とは異なるところの質問だった。認証は難しい。</description><content>&lt;p>0時に寝て4時ぐらいに起きてだらだらして7時半に起きた。やっぱりあまり眠れない。&lt;/p>
&lt;h2 id="ステートレスな認証という概念">ステートレスな認証という概念&lt;/h2>
&lt;p>次の開発フェーズが始まっていて、ちょっと時間が経ってしまったが、前開発フェーズのお披露目的な製品紹介をお手伝い先の全社向けに行った。主には直近の開発フェーズで追加した機能などを紹介した。その過程で新たに認証の仕組みを追加して jwt で認証するといった話しをしたところ、それはステートレスなのかどうかといった質問が出た。セキュリティを考慮して、アーキテクチャ的にフロントエンドの認証と api サーバーの認証は分けて実装しているのと、そのために仕組みも複雑になっているのだけど、ステートレスという言葉が指す意図を私がよくわかっていなくて、うまく説明できなかった。説明を終えた後にアーキテクチャのイメージ図と一緒に補足をしながらやり取りして次の記事を教えてもらった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zenn.dev/ritou/articles/4a5d6597a5f250">&amp;ldquo;JWT=ステートレス&amp;quot;から一歩踏み出すための考え方&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>jwt は暗号化の技術で認証する仕組みなので有効期限が切れるまでは有効なアクセストークンとなる。そのため、jwt のみだとログアウトという概念はないため、そこをどうしているのか？という質問だった。フロントエンド／api サーバーともに session をオンメモリで保持して、ログインしたユーザーを管理しているため、ログアウトしたら session からレコードを削除することで有効な jwt のアクセストークンが来ても認証エラーにしてしまうことでステートをもった認証方式を実現している。とくまる先生が次のように説明しているところ。&lt;/p>
&lt;blockquote>
&lt;p>「セッションIDをJWTに内包する」 という考え方です。&lt;/p>
&lt;/blockquote>
&lt;p>うちはこれをセッション ID ではなくユーザー名でやっている。とくに難しいことをやっているわけではなく、普通に実装したらそんな感じかな？と考えていたが、jwt = ステートレス認証だと思い込んでいる人たちがいるから &lt;em>ストートレスな認証&lt;/em> というキーワードが出てきたんだなと理解できた。最近のトレンドとしてはログアウトで jwt のアクセストークンを無効にできないと脆弱性と指摘される可能性がありそうとも書いてある。&lt;/p>
&lt;blockquote>
&lt;p>ログアウト時にJWTを無効化できない実装は今後脆弱性診断で「OWASP Top 10 2021違反」と指摘されるようになりそう(今も個別にされてるかもしれないけど)&lt;/p>
&lt;/blockquote>
&lt;p>私はアーキテクチャ的にブラウザに api サーバーのアクセストークンをみせないというところに注力して認証機能の開発をサポートしていた。それ自体も間違っていないとは思うけど、今回の質問はその工夫とは異なるところの質問だった。認証は難しい。&lt;/p></content></item><item><title>珍しく余裕のなかった一日</title><link>/diary/posts/2023/1010/</link><pubDate>Tue, 10 Oct 2023 21:16:44 +0900</pubDate><guid>/diary/posts/2023/1010/</guid><description>0時に寝て何度か起きて7時過ぎに起きた。眠れたような、そうじゃないようなよく分からない起き方をした。お昼ご飯を食べる間もなく、打ち合わせとコードレビューで1日を終えた。連休明けでよい慣らしになった。
税理士さんとの打ち合わせ2 税理士さん探し の続き。今回話した方は公認会計士だった。監査ができるのが公認会計士で、税務の申告ができるのが税理士という役割の違いになる。会計監査も含めてチェックしてほしかったら公認会計士さんにお願いするといった役割分担になるかもしれない。話してみて、若くて理路整然として悪い印象はなにもなかったのだけど、逆にこの人がうちの会社の会計／税務を親身にやってくれそうにもみえなかったし、ホームページの事業内容をみても公認会計士だから税務のビジネスだけではなく、もっと大きな会計のお仕事の方がを目指しているようにもみえた。同じ質問をして、前回の税理士さんの回答の違いなども考慮しながら選定の判断材料にはなるなと思いながらやり取りしていた。選択する側の打ち合わせはおもしろい。
アーキテクチャの再考 お手伝いしているシステム開発で、私の中ではもうアーキテクチャは固まったかな？と考えていたのが、お客さんと話していて、さらなる要件や展望を聞いているとそうじゃなかったことに気付いた。どうやら最初の実装としてはいまのアーキテクチャを堅牢に作って、その次の要件として待っていてくれたようにみえる。
私の認識を正す意味も含めて、さらにお客さんの要件や世の中の競合製品に対して競争力をもつにはどうするかといった視点をざっくばらんに雑談した。もう1段階アーキテクチャを見直す必要があるなと思えた。開発に着手して今月末でちょうど1年が経つ。これまで大きなアーキテクチャの変更もなく、順調に開発は進んできたものの、ここらで見直しやズレの補正が必要になってきてもなんらおかしくはない。いまの開発フェーズでは対応しないが、次の開発フェーズに向けてのアイディアの1つとしてアーキテクチャの再考が必要なことを認識した。</description><content>&lt;p>0時に寝て何度か起きて7時過ぎに起きた。眠れたような、そうじゃないようなよく分からない起き方をした。お昼ご飯を食べる間もなく、打ち合わせとコードレビューで1日を終えた。連休明けでよい慣らしになった。&lt;/p>
&lt;h2 id="税理士さんとの打ち合わせ2">税理士さんとの打ち合わせ2&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/1006/#税理士さんとの打ち合わせ1">税理士さん探し&lt;/a> の続き。今回話した方は公認会計士だった。監査ができるのが公認会計士で、税務の申告ができるのが税理士という役割の違いになる。会計監査も含めてチェックしてほしかったら公認会計士さんにお願いするといった役割分担になるかもしれない。話してみて、若くて理路整然として悪い印象はなにもなかったのだけど、逆にこの人がうちの会社の会計／税務を親身にやってくれそうにもみえなかったし、ホームページの事業内容をみても公認会計士だから税務のビジネスだけではなく、もっと大きな会計のお仕事の方がを目指しているようにもみえた。同じ質問をして、前回の税理士さんの回答の違いなども考慮しながら選定の判断材料にはなるなと思いながらやり取りしていた。選択する側の打ち合わせはおもしろい。&lt;/p>
&lt;h2 id="アーキテクチャの再考">アーキテクチャの再考&lt;/h2>
&lt;p>お手伝いしているシステム開発で、私の中ではもうアーキテクチャは固まったかな？と考えていたのが、お客さんと話していて、さらなる要件や展望を聞いているとそうじゃなかったことに気付いた。どうやら最初の実装としてはいまのアーキテクチャを堅牢に作って、その次の要件として待っていてくれたようにみえる。&lt;/p>
&lt;p>私の認識を正す意味も含めて、さらにお客さんの要件や世の中の競合製品に対して競争力をもつにはどうするかといった視点をざっくばらんに雑談した。もう1段階アーキテクチャを見直す必要があるなと思えた。開発に着手して今月末でちょうど1年が経つ。これまで大きなアーキテクチャの変更もなく、順調に開発は進んできたものの、ここらで見直しやズレの補正が必要になってきてもなんらおかしくはない。いまの開発フェーズでは対応しないが、次の開発フェーズに向けてのアイディアの1つとしてアーキテクチャの再考が必要なことを認識した。&lt;/p></content></item><item><title>秋休み2</title><link>/diary/posts/2023/1009/</link><pubDate>Mon, 09 Oct 2023 17:18:13 +0900</pubDate><guid>/diary/posts/2023/1009/</guid><description>22時に寝て何度か起きて7時に起きた。一昨日からイスラエルとパレスチナの背景の調査をしていて、だいぶあてられてしんどくなってきた。歳のせいか、誰も幸せにならない難しい問題を調べているとしんどくなる。</description><content>&lt;p>22時に寝て何度か起きて7時に起きた。一昨日からイスラエルとパレスチナの背景の調査をしていて、だいぶあてられてしんどくなってきた。歳のせいか、誰も幸せにならない難しい問題を調べているとしんどくなる。&lt;/p></content></item><item><title>解決すべき難しい問題と戦争</title><link>/diary/posts/2023/1008/</link><pubDate>Sun, 08 Oct 2023 13:44:15 +0900</pubDate><guid>/diary/posts/2023/1008/</guid><description>23時頃から寝始めて3時ころに吐き気で苦しんで7時に起きた。寝る前にちょっとお菓子食べたのがよくなかったのかもしれない。
イスラエルとハマスの戦争 昨日の夕方からハマス (パレスチナ) がイスラエルにロケッ弾を打ち込んだというニュースをみていろいろ調べていた。ハマスはパレスチナのガザ地区を実効支配するイスラム組織だそうで、からなずしもパレスチナを代表しているわけではないらしい。パレスチナにもファタハと呼ばれる穏健派もあるそうで一枚岩ではないとのこと。経営者になると、こういった世界のニュースに対して経済への影響が気になって情報収集してしまう。イスラエルとパレスチナの2国間の問題はとても難しいものになっているようで、どうやって解決するのか、誰もアイディアのないまま、いまに至っているようにみえる。是非はとまかく、どちらかがどちらかを滅ぼすしかないのかもしれない。いまのところ、イスラエルとパレスチナの紛争は日常と言えるほど起こっていて、その2国間でドンパチするなら世界経済に大きな影響はないだろうとみられている。一方で今回は規模が大きいのと、一般市民への虐殺や犯行もみられることから、もっと大きな戦争に発展する懸念もみられている。ウクライナとロシアの戦争とも影響して台湾有事への懸念も、リスクは低いかもしれないが、ないわけではないとみられている。
パレスチナ問題ってなに？ １からわかる！イスラエルとパレスチナ（１） 【現状まとめ】イスラエル「戦争状態」 パレスチナとイスラエル、今年だけで200人死んでるよ。</description><content>&lt;p>23時頃から寝始めて3時ころに吐き気で苦しんで7時に起きた。寝る前にちょっとお菓子食べたのがよくなかったのかもしれない。&lt;/p>
&lt;h2 id="イスラエルとハマスの戦争">イスラエルとハマスの戦争&lt;/h2>
&lt;p>昨日の夕方からハマス (パレスチナ) がイスラエルにロケッ弾を打ち込んだというニュースをみていろいろ調べていた。ハマスはパレスチナのガザ地区を実効支配するイスラム組織だそうで、からなずしもパレスチナを代表しているわけではないらしい。パレスチナにもファタハと呼ばれる穏健派もあるそうで一枚岩ではないとのこと。経営者になると、こういった世界のニュースに対して経済への影響が気になって情報収集してしまう。イスラエルとパレスチナの2国間の問題はとても難しいものになっているようで、どうやって解決するのか、誰もアイディアのないまま、いまに至っているようにみえる。是非はとまかく、どちらかがどちらかを滅ぼすしかないのかもしれない。いまのところ、イスラエルとパレスチナの紛争は日常と言えるほど起こっていて、その2国間でドンパチするなら世界経済に大きな影響はないだろうとみられている。一方で今回は規模が大きいのと、一般市民への虐殺や犯行もみられることから、もっと大きな戦争に発展する懸念もみられている。ウクライナとロシアの戦争とも影響して台湾有事への懸念も、リスクは低いかもしれないが、ないわけではないとみられている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www3.nhk.or.jp/news/special/news_seminar/jiji/jiji97/">パレスチナ問題ってなに？ １からわかる！イスラエルとパレスチナ（１）&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://note.com/goto_finance/n/n136b3f1964f8">【現状まとめ】イスラエル「戦争状態」&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://anond.hatelabo.jp/20231007234056">パレスチナとイスラエル、今年だけで200人死んでるよ。&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>世界観のあう買いもの</title><link>/diary/posts/2023/1007/</link><pubDate>Sat, 07 Oct 2023 16:31:44 +0900</pubDate><guid>/diary/posts/2023/1007/</guid><description>0時に寝て何度か起きて7時に起きた。2-3日前から首を寝違えていて違和感がある。課題管理のブログ記事を書こうと思っていたけど、気分がのらなくて遊んでいた。
ストレッチ 今週も忙しくはなく、のんびり過ごしていたので体調は徐々に復調している。腰の張りは先週に比べてかなりよくなっているように感じた。トレーナーさんによるとふくらはぎの筋の張りがあったそうだけど、私からみたらそんなに気にはならなかった。今日の開脚幅は開始前155cmで、ストレッチ後158cmだった。首を寝違えているのもなにかしらよくなる方法があるかと思って相談してみた。トレーナーさん曰く、首の寝違えだけは自然治癒しか方法がないという。トレーナーさんたちの間でもいろいろ試してみたことがあるらしい。しかし、どれも一時的に痛みを和らげる効果のあるストレッチはあるものの、時間が経つと元に戻るので限定的なものらしい。その一時的に痛みを和らげるのも、脇の下の筋を伸ばすと効果があるらしい。トレーナーさんもなぜその筋を伸ばすと痛みが和らぐのかの理屈はよく分からないそうだが、実際に試してみてそこだけが効果があったと話されていた。
Python Boot Camp 来週、徳島の鳴門でイベントがある。いま余裕もあるのでスタッフが足らなかったら手伝ってもいいと、前にてらださんと話していた。ちょっと前まで参加者が1人しかいなかったので手伝う必要ないかと思っていたんだが、ここ数日でいっきに参加者が増えたみたいで助っ人で手伝いに行くことにした。ブートキャンプに参加するのは初めて。チュートリアルやスタッフの要項などのドキュメントを予習として読んでいた。
Python Boot Camp in 徳島2nd
ヨハクさんのフレークシール たまたま「余白」というキーワードでインターネットを検索していて次のサイトをみつけた。
https://yohaku.stores.jp/ マスキングテープの専門店らしいが、なんとなく制作物の世界観が私にあうので応援も含めて次のフレークシールを買ってみることにした。
CATEGORY / Flake seal 3種類買ってみて、今日届いたので、試しに一緒に入っていた型紙に貼ってフレームに入れてみた。こういう雰囲気が好き。しばらくオフィスの棚に飾ってみようと思う。
ツキトホシ ダイアリー テガミ</description><content>&lt;p>0時に寝て何度か起きて7時に起きた。2-3日前から首を寝違えていて違和感がある。課題管理のブログ記事を書こうと思っていたけど、気分がのらなくて遊んでいた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週も忙しくはなく、のんびり過ごしていたので体調は徐々に復調している。腰の張りは先週に比べてかなりよくなっているように感じた。トレーナーさんによるとふくらはぎの筋の張りがあったそうだけど、私からみたらそんなに気にはならなかった。今日の開脚幅は開始前155cmで、ストレッチ後158cmだった。首を寝違えているのもなにかしらよくなる方法があるかと思って相談してみた。トレーナーさん曰く、首の寝違えだけは自然治癒しか方法がないという。トレーナーさんたちの間でもいろいろ試してみたことがあるらしい。しかし、どれも一時的に痛みを和らげる効果のあるストレッチはあるものの、時間が経つと元に戻るので限定的なものらしい。その一時的に痛みを和らげるのも、脇の下の筋を伸ばすと効果があるらしい。トレーナーさんもなぜその筋を伸ばすと痛みが和らぐのかの理屈はよく分からないそうだが、実際に試してみてそこだけが効果があったと話されていた。&lt;/p>
&lt;h2 id="python-boot-camp">Python Boot Camp&lt;/h2>
&lt;p>来週、徳島の鳴門でイベントがある。いま余裕もあるのでスタッフが足らなかったら手伝ってもいいと、前にてらださんと話していた。ちょっと前まで参加者が1人しかいなかったので手伝う必要ないかと思っていたんだが、ここ数日でいっきに参加者が増えたみたいで助っ人で手伝いに行くことにした。ブートキャンプに参加するのは初めて。チュートリアルやスタッフの要項などのドキュメントを予習として読んでいた。&lt;/p>
&lt;p>&lt;a href="https://pyconjp.connpass.com/event/293032/">Python Boot Camp in 徳島2nd&lt;/a>&lt;/p>
&lt;h2 id="ヨハクさんのフレークシール">ヨハクさんのフレークシール&lt;/h2>
&lt;p>たまたま「余白」というキーワードでインターネットを検索していて次のサイトをみつけた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://yohaku.stores.jp/">https://yohaku.stores.jp/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>マスキングテープの専門店らしいが、なんとなく制作物の世界観が私にあうので応援も含めて次のフレークシールを買ってみることにした。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://yohaku.stores.jp/?category_id=642bf7f02ce5f6002939cf51">CATEGORY / Flake seal&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>3種類買ってみて、今日届いたので、試しに一緒に入っていた型紙に貼ってフレームに入れてみた。こういう雰囲気が好き。しばらくオフィスの棚に飾ってみようと思う。&lt;/p>
&lt;ul>
&lt;li>ツキトホシ&lt;/li>
&lt;li>ダイアリー&lt;/li>
&lt;li>テガミ&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="/diary/diary/img/2023/1007_frake-seal.jpg"/>
&lt;/figure></content></item><item><title>税理士さんの選定</title><link>/diary/posts/2023/1006/</link><pubDate>Fri, 06 Oct 2023 19:22:05 +0900</pubDate><guid>/diary/posts/2023/1006/</guid><description>1時に寝て3時頃に吐き気で起きて1時間ぐらい苦しんでた。久しぶりにやばかった。その後なんとか寝て7時半に起きた。
税理士さんとの打ち合わせ1 うちの会社のイベントとして毎年ワーケーション (開発合宿) をやろうかと考えている。コワーキングやコミュニティの延長上でワーケーションを行うわけだが、いくらかうちの会社の持ち出しで費用負担してよいと考えている。しかし、そのときの支出はどういった建付けで経費として扱えるのかどうか、私は税理士ではないのでよくわかっていない。そういったことを相談するために税理士さんに顧問になってもらおうと考えている。うちから税理士さんへの要件としては freee のデータを正として扱ってくれればそれでいいかな。
また2021年度は赤字決算になったので2022年度に 法人税の欠損金の繰り戻し還付 を行った。このお金を2022年度に計上していないため、その分の金額が資産のマイナスとして2023年度の決算に残ってしまっている。法人税の支払いは正しいのだが、還付金を2023年度に雑収入として登録するか、2022年度に遡って未計上の金額を登録するかのどちらかで訂正しないといけない。過去の法人決算の訂正自体も行う仕組みはあるので手続きするだけだが、それも手間暇がかかるのでついでに税理士さんにやってもらうと考えている。
税理士・会計士にfreeeの情報を共有する 会計システムに freee を使っているので freee さんの税理士紹介サービスを使って選定する。3事務所ピックアップしてくれたので順番に打ち合わせしていく。今日はその最初の税理事務所の方と打ち合わせした。話した感覚でうちの会社の考え方や規模にあった税理士さんだったのでこの方でいいんじゃないかとも思っているけれど、せっかく他の事務所もピックアップしてくれたので他の税理士さんの話も来週また聞いてみる。
コードレビュー まる一日コードレビューをしていた。私もマージリクエストを投げていてレビューしてもらいつつ、メンバーのコードレビューも順番にやっていった。その中で smtp の仕様を把握しておく必要があっていくつかシニアエンジニアの方からもアドバイスをもらって、私もそうだったんだと勉強していた。メールヘッダーのエンコーディング、昔は覚えていたけど、ずっとメールを送るコードを書いてなかったので私も忘れてしまっていた。こういうことをさらっと指摘できるのがシニアエンジニアのすごいところ。
sendmail コマンドによるメール発信 - Postfix Advent Calendar 2014 - ダメ出し Blog go だと標準ライブラリに mime パッケージがある。mime パッケージを使って件名を utf-8 でエンコーディングされた文字列で指定すると次のようになる。q エンコーディングと b エンコーディングの2種類がある。b エンコーディングの方がデータ量が減ってよさそう。
fmt.Println(&amp;#34;Subject: &amp;#34; + mime.QEncoding.Encode(&amp;#34;utf-8&amp;#34;, &amp;#34;テスト&amp;#34;)) fmt.Println(&amp;#34;Subject: &amp;#34; + mime.BEncoding.Encode(&amp;#34;utf-8&amp;#34;, &amp;#34;テスト&amp;#34;)) Subject: =?utf-8?q?=E3=83=86=E3=82=B9=E3=83=88?= Subject: =?UTF-8?b?44OG44K544OI?= https://go.dev/play/p/zQjMMp17bKf</description><content>&lt;p>1時に寝て3時頃に吐き気で起きて1時間ぐらい苦しんでた。久しぶりにやばかった。その後なんとか寝て7時半に起きた。&lt;/p>
&lt;h2 id="税理士さんとの打ち合わせ1">税理士さんとの打ち合わせ1&lt;/h2>
&lt;p>うちの会社のイベントとして毎年ワーケーション (開発合宿) をやろうかと考えている。コワーキングやコミュニティの延長上でワーケーションを行うわけだが、いくらかうちの会社の持ち出しで費用負担してよいと考えている。しかし、そのときの支出はどういった建付けで経費として扱えるのかどうか、私は税理士ではないのでよくわかっていない。そういったことを相談するために税理士さんに顧問になってもらおうと考えている。うちから税理士さんへの要件としては freee のデータを正として扱ってくれればそれでいいかな。&lt;/p>
&lt;p>また2021年度は赤字決算になったので2022年度に &lt;a href="/diary/diary/posts/2022/0626/#法人税の修正申告と欠損金の繰り戻し還付の訂正依頼">法人税の欠損金の繰り戻し還付&lt;/a> を行った。このお金を2022年度に計上していないため、その分の金額が資産のマイナスとして2023年度の決算に残ってしまっている。法人税の支払いは正しいのだが、還付金を2023年度に雑収入として登録するか、2022年度に遡って未計上の金額を登録するかのどちらかで訂正しないといけない。過去の法人決算の訂正自体も行う仕組みはあるので手続きするだけだが、それも手間暇がかかるのでついでに税理士さんにやってもらうと考えている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://support.freee.co.jp/hc/ja/articles/204403124-%E7%A8%8E%E7%90%86%E5%A3%AB-%E4%BC%9A%E8%A8%88%E5%A3%AB%E3%81%ABfreee%E3%81%AE%E6%83%85%E5%A0%B1%E3%82%92%E5%85%B1%E6%9C%89%E3%81%99%E3%82%8B">税理士・会計士にfreeeの情報を共有する&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>会計システムに freee を使っているので freee さんの税理士紹介サービスを使って選定する。3事務所ピックアップしてくれたので順番に打ち合わせしていく。今日はその最初の税理事務所の方と打ち合わせした。話した感覚でうちの会社の考え方や規模にあった税理士さんだったのでこの方でいいんじゃないかとも思っているけれど、せっかく他の事務所もピックアップしてくれたので他の税理士さんの話も来週また聞いてみる。&lt;/p>
&lt;h2 id="コードレビュー">コードレビュー&lt;/h2>
&lt;p>まる一日コードレビューをしていた。私もマージリクエストを投げていてレビューしてもらいつつ、メンバーのコードレビューも順番にやっていった。その中で smtp の仕様を把握しておく必要があっていくつかシニアエンジニアの方からもアドバイスをもらって、私もそうだったんだと勉強していた。メールヘッダーのエンコーディング、昔は覚えていたけど、ずっとメールを送るコードを書いてなかったので私も忘れてしまっていた。こういうことをさらっと指摘できるのがシニアエンジニアのすごいところ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://fumiyas.github.io/2014/12/13/sendmail.postfix-advent-calendar.html">sendmail コマンドによるメール発信 - Postfix Advent Calendar 2014 - ダメ出し Blog&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>go だと標準ライブラリに &lt;a href="https://pkg.go.dev/mime">mime&lt;/a> パッケージがある。mime パッケージを使って件名を utf-8 でエンコーディングされた文字列で指定すると次のようになる。q エンコーディングと b エンコーディングの2種類がある。b エンコーディングの方がデータ量が減ってよさそう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Subject: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">mime&lt;/span>.&lt;span style="color:#a6e22e">QEncoding&lt;/span>.&lt;span style="color:#a6e22e">Encode&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;テスト&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Subject: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">mime&lt;/span>.&lt;span style="color:#a6e22e">BEncoding&lt;/span>.&lt;span style="color:#a6e22e">Encode&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;テスト&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>Subject: =?utf-8?q?=E3=83=86=E3=82=B9=E3=83=88?=
Subject: =?UTF-8?b?44OG44K544OI?=
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;a href="https://go.dev/play/p/zQjMMp17bKf">https://go.dev/play/p/zQjMMp17bKf&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>ふりかえり + チーム勉強会</title><link>/diary/posts/2023/1005/</link><pubDate>Thu, 05 Oct 2023 08:26:09 +0900</pubDate><guid>/diary/posts/2023/1005/</guid><description>22時から寝始めて何度か起きて7時に起きた。久しぶりにどっしりくるような夢をみたけれど、もう内容を覚えていない。
ふりかえりを兼ねたチーム勉強会 新しい開発に着手して初めてのチーム勉強会を行った。前の開発とチーム勉強会の運用を大きく変更した。ざっくり次が要項になる。
前開発の postmortem 運用がうまくいかなかったので代替としてやってみる 開発システム全体の機能が増えてきて、メンバーそれぞれがやっていることもバラバラになりつつある 普段やっていることを他メンバーへ情報共有する機会とする そのときのマイルストーンでやっていることをふりかえりする機会とする 開発システムについて知りたいところや設計の議論などをしてもよい メンバーが全員揃っていれば、どんな質問をしても誰かが知っているはず そのマイルストーンでやったことを基本として他メンバーへ共有する 内容は基本的になんでもよい、あまり準備せずに話せる内容でよい 特定の issue の内容でも、マージリクエストの解説でも、機能や振る舞いの考察など 知識やノウハウを他メンバーに共用する上で wiki やブログの記事などにしてもよい 書くところがなかったらテックブログに書けばよい 勉強会のために調査する時間が必要であれば、その調査時間も仕事の一環とする 勉強会の準備も考慮して開発のスケジュールを各自で調整する 業務で実装したことや調査したことを共有する機会にもなる まだ合流前だけど、メンバーが新規に1人増える。2週間に1回の定例のみだと、新しいメンバーが既存のメンバーに追いつくための情報が足りないだろうと思って質問しやすい機会を設けようと考えていた。雑談時間とか、設計会議とか、そういう呼び方をしてもよいのだけど、私にとって違和感なく一番しっくりきて柔軟性も高いのが「チーム勉強会」になる。ふりかえりと情報共有と学びの場の3つを兼ね、チームビルディングにも応用しようという、まさに天才の所業ではないかw まだ始めたばかりだから言うだけ言っておく。また開発が終わったときに良し悪しのふりかえりはする。
今日のところは最初だったので前マイルストーンでやった issue をメンバーそれぞれ1つずつ内容を説明して共有した。私も mongodb の初期化ツールのマージリクエストが出来たばかりだったのでその背景や意図、工夫したところなどを紹介した。他のメンバーも背景やソースコードを紹介しながらみんなでわいわいできた。第1回目にしては活気があって情報共有という目的も果たせたし、よい感じの取り組みにみえた。このままうまく運用にのせていく。</description><content>&lt;p>22時から寝始めて何度か起きて7時に起きた。久しぶりにどっしりくるような夢をみたけれど、もう内容を覚えていない。&lt;/p>
&lt;h2 id="ふりかえりを兼ねたチーム勉強会">ふりかえりを兼ねたチーム勉強会&lt;/h2>
&lt;p>新しい開発に着手して初めてのチーム勉強会を行った。前の開発とチーム勉強会の運用を大きく変更した。ざっくり次が要項になる。&lt;/p>
&lt;ul>
&lt;li>前開発の postmortem 運用がうまくいかなかったので代替としてやってみる&lt;/li>
&lt;li>開発システム全体の機能が増えてきて、メンバーそれぞれがやっていることもバラバラになりつつある
&lt;ul>
&lt;li>普段やっていることを他メンバーへ情報共有する機会とする&lt;/li>
&lt;li>そのときのマイルストーンでやっていることをふりかえりする機会とする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>開発システムについて知りたいところや設計の議論などをしてもよい
&lt;ul>
&lt;li>メンバーが全員揃っていれば、どんな質問をしても誰かが知っているはず&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>そのマイルストーンでやったことを基本として他メンバーへ共有する
&lt;ul>
&lt;li>内容は基本的になんでもよい、あまり準備せずに話せる内容でよい
&lt;ul>
&lt;li>特定の issue の内容でも、マージリクエストの解説でも、機能や振る舞いの考察など&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>知識やノウハウを他メンバーに共用する上で wiki やブログの記事などにしてもよい
&lt;ul>
&lt;li>書くところがなかったらテックブログに書けばよい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>勉強会のために調査する時間が必要であれば、その調査時間も仕事の一環とする
&lt;ul>
&lt;li>勉強会の準備も考慮して開発のスケジュールを各自で調整する&lt;/li>
&lt;li>業務で実装したことや調査したことを共有する機会にもなる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>まだ合流前だけど、メンバーが新規に1人増える。2週間に1回の定例のみだと、新しいメンバーが既存のメンバーに追いつくための情報が足りないだろうと思って質問しやすい機会を設けようと考えていた。雑談時間とか、設計会議とか、そういう呼び方をしてもよいのだけど、私にとって違和感なく一番しっくりきて柔軟性も高いのが「チーム勉強会」になる。ふりかえりと情報共有と学びの場の3つを兼ね、チームビルディングにも応用しようという、まさに天才の所業ではないかw まだ始めたばかりだから言うだけ言っておく。また開発が終わったときに良し悪しのふりかえりはする。&lt;/p>
&lt;p>今日のところは最初だったので前マイルストーンでやった issue をメンバーそれぞれ1つずつ内容を説明して共有した。私も mongodb の初期化ツールのマージリクエストが出来たばかりだったのでその背景や意図、工夫したところなどを紹介した。他のメンバーも背景やソースコードを紹介しながらみんなでわいわいできた。第1回目にしては活気があって情報共有という目的も果たせたし、よい感じの取り組みにみえた。このままうまく運用にのせていく。&lt;/p></content></item><item><title>相続税の申告の一歩手前</title><link>/diary/posts/2023/1004/</link><pubDate>Wed, 04 Oct 2023 08:26:17 +0900</pubDate><guid>/diary/posts/2023/1004/</guid><description>22時頃から寝始めて何度か起きて6時に起きた。早寝早起き。
会計士事務所への訪問 相続税の申告手続きを未だにやっている。
父が失くなったのが 昨年の12月26日 になる。相続税は死亡を知った日から10ヶ月以内と期限が決められている。それを過ぎると算税や延滞税などのペナルティが科せられる。うちの期限は10月26日になる。1-3月ぐらい葬儀やらお仕事やらで忙しかったものの、4月ぐらいから相続の手続きに着手した。5月29日に親族の相続関連の書類を取りまとめて弁護士さんへ送付した。それから銀行口座の解約やら司法書士さんやら税理士さんの作業やらなんやらあって、いまもまだ会計士さんに申告の書類を作ってもらっているところ。その過程でいくつか質疑応答があってそれを調査したりしている。
その会計士さんの事務所が近所にあるのでお昼に訪問して挨拶してきた。申告に必要な書類の提出をしつつ軽く打ち合わせをした。税務署は20年遡って口座のお金を動きを調べるらしい。話しているときに死亡保険金とかないですか？と聞かれて、母が受けとったと話していたなと思い出して、それも父の遺産として扱う必要がありますと言われて、確かにそうだと思って申告漏れしていることに気付いた。これで死亡保険金の書類が必要になってまた取り寄せに時間がかかる。こんな感じに五月雨式に遅れていくので10ヶ月ぎりぎりになりそうな雰囲気。来週中に申告が終わる嬉しいなといったところ。
mongodb の初期化ツール ちょっと前から少しずつ mongodb の初期化ツールを作っている。コレクションの作成ならびにインデックスの追加を、さらに初期データの投入も制御したい。mongodb のバージョンが 6.0.x のときは作成済みのコレクションに対して同じ設定で作成しようとすると、既に作成済みというエラーが発生していた。それが 7.0.x になってエラーにならないようになっていることに気付いた。調べてみると、次の issue で同じ設定なら作成の結果に関係なく冪等であるのでエラーとして扱わなくてよいという考え方になる。
Make create command idempotent on mongod これは初期化ツールを作っている私にとっては朗報で、同じコレクションに対して複数の操作をしても変更した設定だけが有効になるといった振る舞いをする。こういう細かい所もバージョンアップをしながら改善していくことが伺えて学びになった。</description><content>&lt;p>22時頃から寝始めて何度か起きて6時に起きた。早寝早起き。&lt;/p>
&lt;h2 id="会計士事務所への訪問">会計士事務所への訪問&lt;/h2>
&lt;p>相続税の申告手続きを未だにやっている。&lt;/p>
&lt;p>父が失くなったのが &lt;a href="/diary/diary/posts/2022/1226/">昨年の12月26日&lt;/a> になる。相続税は死亡を知った日から10ヶ月以内と期限が決められている。それを過ぎると算税や延滞税などのペナルティが科せられる。うちの期限は10月26日になる。1-3月ぐらい葬儀やらお仕事やらで忙しかったものの、4月ぐらいから相続の手続きに着手した。5月29日に親族の相続関連の書類を取りまとめて弁護士さんへ送付した。それから銀行口座の解約やら司法書士さんやら税理士さんの作業やらなんやらあって、いまもまだ会計士さんに申告の書類を作ってもらっているところ。その過程でいくつか質疑応答があってそれを調査したりしている。&lt;/p>
&lt;p>その会計士さんの事務所が近所にあるのでお昼に訪問して挨拶してきた。申告に必要な書類の提出をしつつ軽く打ち合わせをした。税務署は20年遡って口座のお金を動きを調べるらしい。話しているときに死亡保険金とかないですか？と聞かれて、母が受けとったと話していたなと思い出して、それも父の遺産として扱う必要がありますと言われて、確かにそうだと思って申告漏れしていることに気付いた。これで死亡保険金の書類が必要になってまた取り寄せに時間がかかる。こんな感じに五月雨式に遅れていくので10ヶ月ぎりぎりになりそうな雰囲気。来週中に申告が終わる嬉しいなといったところ。&lt;/p>
&lt;h2 id="mongodb-の初期化ツール">mongodb の初期化ツール&lt;/h2>
&lt;p>ちょっと前から少しずつ mongodb の初期化ツールを作っている。コレクションの作成ならびにインデックスの追加を、さらに初期データの投入も制御したい。mongodb のバージョンが 6.0.x のときは作成済みのコレクションに対して同じ設定で作成しようとすると、既に作成済みというエラーが発生していた。それが 7.0.x になってエラーにならないようになっていることに気付いた。調べてみると、次の issue で同じ設定なら作成の結果に関係なく冪等であるのでエラーとして扱わなくてよいという考え方になる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://jira.mongodb.org/browse/SERVER-60064">Make create command idempotent on mongod&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>これは初期化ツールを作っている私にとっては朗報で、同じコレクションに対して複数の操作をしても変更した設定だけが有効になるといった振る舞いをする。こういう細かい所もバージョンアップをしながら改善していくことが伺えて学びになった。&lt;/p></content></item><item><title>selinux はなるべく有効にして使うもの</title><link>/diary/posts/2023/1003/</link><pubDate>Tue, 03 Oct 2023 16:28:42 +0900</pubDate><guid>/diary/posts/2023/1003/</guid><description>22時ぐらいから寝始めて何度か起きて6時に起きた。早く寝たから早く起きた。
selinux の微妙な振る舞い 今日は火曜日なのでチームの定例会議をやって、ドキュメントを書いて、その後はインフラの細かい作業をわちゃわちゃやって、ドキュメントを書いてとわちゃわちゃやってた。
先週、最新の almalinux 8 をインストールして、その後、lvm の論理ボリュームの結合 とか、rootless コンテナ の設定とか、テスト環境を構築していた。gitlab ci/cd から ssh で公開鍵認証を使ってデプロイしている。作り直したこのテスト環境に対してその公開鍵認証がうまく動かない現象に遭遇した。よくある設定や権限のトラブルではなく、デバッグ用の sshd を起動すると公開鍵認証できた。なにかしら systemd 経由で起動する sshd の設定ミスなんじゃないかと、2-3時間デバッグしてもわからなくて社内の有識者に尋ねてみた。
$ sudo /usr/sbin/sshd -d -p 2222 selinux を無効にしてみたら？というアドバイスをいただいて、試しに enforced から disabled にしたら動いたので selinux のなにかしらの設定を変えてしまったのかな？とそのときは思っていた。しかし、別の開発者からデフォルト設定で enforced でも動くはずという情報をもらって、もう一度 disabled から enforced に戻して再起動したら普通に動いて、その前の公開鍵認証の失敗を再現できなくなった。私にはこの先のデバッグはまったくわからない。お手伝い先のシニアエンジニアの方にみてもらって次のようなことを教えてもらった。
SElinuxが怪しいなと思ったら、/var/log/audit/audit.log とかausearch -m avcコマンドを確認。
authorized_keysのアクセスが拒否されているので確かにSELinuxの問題があったことがわかります。
type=AVC msg=audit(1696315292.258:1446): avc: denied { read } for pid=446534 comm=&amp;ldquo;sshd&amp;rdquo; name=&amp;ldquo;authorized_keys&amp;rdquo; dev=&amp;ldquo;dm-0&amp;rdquo; ino=201836096 scontext=system_u:system_r:sshd_t:s0-s0:c0.c1023 tcontext=unconfined_u:object_r:default_t:s0 tclass=file permissive=0
現在、authorized_keysのコンテキストは期待通りunconfined_u:object_r:ssh_home_t:s0となっているけど、問題が起きていたときは、unconfined_u:object_r:default_t:s0 だったことがわかります。
詳しい経緯はわからないけど、.ssh/authorized_keysを作成した時点でopenssh用のselinuxポリシーが適用されていなかったと考えられます。
その後なにかのイベント(再起動?)でrestorecon 相当が行われて、コンテキストがssh_home_tに変更され問題は解消した。
なんだかよくわかないけど、OSのマイナーバージョンアップで微妙にセキュリティコンテキストが変更されてrestoreconすると解決する、ってのは時々起きてますね。</description><content>&lt;p>22時ぐらいから寝始めて何度か起きて6時に起きた。早く寝たから早く起きた。&lt;/p>
&lt;h2 id="selinux-の微妙な振る舞い">selinux の微妙な振る舞い&lt;/h2>
&lt;p>今日は火曜日なのでチームの定例会議をやって、ドキュメントを書いて、その後はインフラの細かい作業をわちゃわちゃやって、ドキュメントを書いてとわちゃわちゃやってた。&lt;/p>
&lt;p>先週、最新の almalinux 8 をインストールして、その後、&lt;a href="/diary/diary/posts/2023/0929/#lvm-の論理ボリュームの結合">lvm の論理ボリュームの結合&lt;/a> とか、&lt;a href="/diary/diary/posts/2023/1002/">rootless コンテナ&lt;/a> の設定とか、テスト環境を構築していた。gitlab ci/cd から ssh で公開鍵認証を使ってデプロイしている。作り直したこのテスト環境に対してその公開鍵認証がうまく動かない現象に遭遇した。よくある設定や権限のトラブルではなく、デバッグ用の sshd を起動すると公開鍵認証できた。なにかしら systemd 経由で起動する sshd の設定ミスなんじゃないかと、2-3時間デバッグしてもわからなくて社内の有識者に尋ねてみた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo /usr/sbin/sshd -d -p &lt;span style="color:#ae81ff">2222&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>selinux を無効にしてみたら？というアドバイスをいただいて、試しに enforced から disabled にしたら動いたので selinux のなにかしらの設定を変えてしまったのかな？とそのときは思っていた。しかし、別の開発者からデフォルト設定で enforced でも動くはずという情報をもらって、もう一度 disabled から enforced に戻して再起動したら普通に動いて、その前の公開鍵認証の失敗を再現できなくなった。私にはこの先のデバッグはまったくわからない。お手伝い先のシニアエンジニアの方にみてもらって次のようなことを教えてもらった。&lt;/p>
&lt;blockquote>
&lt;p>SElinuxが怪しいなと思ったら、/var/log/audit/audit.log とか&lt;code>ausearch -m avc&lt;/code>コマンドを確認。&lt;br />
authorized_keysのアクセスが拒否されているので確かにSELinuxの問題があったことがわかります。&lt;br />
type=AVC msg=audit(1696315292.258:1446): avc: denied { read } for pid=446534 comm=&amp;ldquo;sshd&amp;rdquo; name=&amp;ldquo;authorized_keys&amp;rdquo; dev=&amp;ldquo;dm-0&amp;rdquo; ino=201836096 scontext=system_u:system_r:sshd_t:s0-s0:c0.c1023 tcontext=unconfined_u:object_r:default_t:s0 tclass=file permissive=0&lt;br />
現在、authorized_keysのコンテキストは期待通りunconfined_u:object_r:ssh_home_t:s0となっているけど、問題が起きていたときは、unconfined_u:object_r:default_t:s0 だったことがわかります。&lt;br />
詳しい経緯はわからないけど、.ssh/authorized_keysを作成した時点でopenssh用のselinuxポリシーが適用されていなかったと考えられます。&lt;br />
その後なにかのイベント(再起動?)でrestorecon 相当が行われて、コンテキストがssh_home_tに変更され問題は解消した。&lt;br />
なんだかよくわかないけど、OSのマイナーバージョンアップで微妙にセキュリティコンテキストが変更されてrestoreconすると解決する、ってのは時々起きてますね。&lt;br />
たぶんopensshインストール前にrsyncしたのでコンテキストがdefault_tになってたんじゃないかと。なかなかの罠ですね。&lt;br />&lt;/p>
&lt;/blockquote>
&lt;p>おそらく lvm の論理ボリュームのバックアップ／リストアに &lt;code>rsync -a&lt;/code> を使った (本当は &lt;code>cp -a&lt;/code>の方がよい) ことによる問題ではないかということ。私が報告した状況と selinux のログからすぐ助言できるのが素晴らしいと思う。まだまだ私のインフラエンジニアとしての未熟さを実感した瞬間でもあった。一昔前は selinux は disabled にするものという常識だったが、最近は初期設定で動くようになっているのでなるべく selinux は有効にして運用するものという意識に変わってきているらしい。&lt;/p></content></item><item><title>インフラの式年遷宮</title><link>/diary/posts/2023/1002/</link><pubDate>Mon, 02 Oct 2023 09:08:26 +0900</pubDate><guid>/diary/posts/2023/1002/</guid><description>1時に寝て何度か起きて5時に起きた。それからだらだらして寝てまた7時に起きた。
テスト環境の再整備と rootless コンテナ インフラの式年遷宮のようなことをしていて、テスト環境をリファクタリングして再整備していた。これまで root でコンテナを実行していたが、最近は rootless コンテナがセキュリティ強化の観点から望ましいということで次のドキュメントをみながら設定した。
Linux post-installation steps for Docker Engine 設定はとくに難しくないが、dockerd や containerd の起動を systemd のユーザーインスタンスに依存することになる。systemd のユーザーインスタンスは基本的にユーザーがログインしたときに生成されるものなので OS が再起動したときなどに困る。OS 再起動時にも systemd のユーザーインスタンスを生成するには linger という仕組みを有効にすればよいらしい。systemd &amp;ndash;user の扱いと linger のことまで理解していれば、たぶん大丈夫なのかな？これで運用がうまくいくことを祈りたい。
$ sudo loginctl enable-linger ucidm</description><content>&lt;p>1時に寝て何度か起きて5時に起きた。それからだらだらして寝てまた7時に起きた。&lt;/p>
&lt;h2 id="テスト環境の再整備と-rootless-コンテナ">テスト環境の再整備と rootless コンテナ&lt;/h2>
&lt;p>インフラの式年遷宮のようなことをしていて、テスト環境をリファクタリングして再整備していた。これまで root でコンテナを実行していたが、最近は rootless コンテナがセキュリティ強化の観点から望ましいということで次のドキュメントをみながら設定した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/engine/install/linux-postinstall/">Linux post-installation steps for Docker Engine&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>設定はとくに難しくないが、dockerd や containerd の起動を systemd のユーザーインスタンスに依存することになる。systemd のユーザーインスタンスは基本的にユーザーがログインしたときに生成されるものなので OS が再起動したときなどに困る。OS 再起動時にも systemd のユーザーインスタンスを生成するには linger という仕組みを有効にすればよいらしい。systemd &amp;ndash;user の扱いと linger のことまで理解していれば、たぶん大丈夫なのかな？これで運用がうまくいくことを祈りたい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo loginctl enable-linger ucidm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>インボイス制度の開始</title><link>/diary/posts/2023/1001/</link><pubDate>Sun, 01 Oct 2023 10:28:40 +0900</pubDate><guid>/diary/posts/2023/1001/</guid><description>0時に寝て何度か起きて7時過ぎに起きた。いろいろ作業していたんだけど、お昼からインボイス制度の開始に伴って請求書や会計処理がちょっと変わるのでそのシステムの運用や調べものをしていた。
インボイス制度の開始 10/1にサブスクリプションの請求が届いているものを経費登録しようとしていて税区分が変わってくることに気付いた。適格請求書発行事業者向けの支払いであればこれまで通りだが、そうじゃない場合に経過措置期間用税区分が新設されている。合理的に考えたら経過措置の控除割合80%を選択することで節税になる。ここで会計システムに経費登録する際、適格請求書発行事業者なのかどうかについて、これまでは未確認だったものを請求書 (領収書) から判断する必要が出てくる。いまみたらセブンイレブンのレシートにも登録番号が記載されている。こうやってシステム (仕組み) で世の中を変えていくのは強力だなと思えた。
インボイス制度(クリエイター向け) 経過措置期間用税区分の消費税計算方法 その後、取引先の設定に適格請求書発行事業者の登録番号を設定できることがわかって、明らかにそうだとわかっているものは検索して設定したりしていた。外国企業については 国境を越えた役務の提供に係る消費税の課税関係について に書いてある。例えば、google workspace を使っていると請求書には Google Asia Pacific Pte. LTd. と書いてある。しかし、請求書には登録番号がない。これは 登録国外事業者名簿 をみると、有効であることがわかり、さらに法人番号もみつかる。法人に関しては法人番号と登録番号は基本的に同じなのでそれを登録しておけばよい。</description><content>&lt;p>0時に寝て何度か起きて7時過ぎに起きた。いろいろ作業していたんだけど、お昼からインボイス制度の開始に伴って請求書や会計処理がちょっと変わるのでそのシステムの運用や調べものをしていた。&lt;/p>
&lt;h2 id="インボイス制度の開始">インボイス制度の開始&lt;/h2>
&lt;p>10/1にサブスクリプションの請求が届いているものを経費登録しようとしていて税区分が変わってくることに気付いた。適格請求書発行事業者向けの支払いであればこれまで通りだが、そうじゃない場合に経過措置期間用税区分が新設されている。合理的に考えたら経過措置の控除割合80%を選択することで節税になる。ここで会計システムに経費登録する際、適格請求書発行事業者なのかどうかについて、これまでは未確認だったものを請求書 (領収書) から判断する必要が出てくる。いまみたらセブンイレブンのレシートにも登録番号が記載されている。こうやってシステム (仕組み) で世の中を変えていくのは強力だなと思えた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.help-note.com/hc/ja/articles/22355987935001-%E3%82%A4%E3%83%B3%E3%83%9C%E3%82%A4%E3%82%B9%E5%88%B6%E5%BA%A6-%E3%82%AF%E3%83%AA%E3%82%A8%E3%82%A4%E3%82%BF%E3%83%BC%E5%90%91%E3%81%91-">インボイス制度(クリエイター向け)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://support.freee.co.jp/hc/ja/articles/202848250-2-%E6%B6%88%E8%B2%BB%E7%A8%8E-%E7%A8%8E%E5%8C%BA%E5%88%86%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E8%A1%8C%E3%81%86#calculation">経過措置期間用税区分の消費税計算方法&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>その後、取引先の設定に適格請求書発行事業者の登録番号を設定できることがわかって、明らかにそうだとわかっているものは検索して設定したりしていた。外国企業については &lt;a href="https://www.nta.go.jp/publication/pamph/shohi/cross/01.htm">国境を越えた役務の提供に係る消費税の課税関係について&lt;/a> に書いてある。例えば、google workspace を使っていると請求書には Google Asia Pacific Pte. LTd. と書いてある。しかし、請求書には登録番号がない。これは &lt;a href="https://www.nta.go.jp/publication/pamph/shohi/cross/touroku.pdf">登録国外事業者名簿&lt;/a> をみると、有効であることがわかり、さらに法人番号もみつかる。法人に関しては法人番号と登録番号は基本的に同じなのでそれを登録しておけばよい。&lt;/p></content></item></channel></rss>