<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2023/07 on forest nook</title><link>/diary/dates/2023/07/</link><description>Recent content in 2023/07 on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/dates/2023/07/index.xml" rel="self" type="application/rss+xml"/><item><title>雑談について雑談した</title><link>/diary/posts/2023/0715/</link><pubDate>Sat, 15 Jul 2023 17:38:29 +0900</pubDate><guid>/diary/posts/2023/0715/</guid><description>1時に寝て何度か起きて7時に起きた。昨日は遅くまで調べものをしていたわりには達成感がなくていまいちな金曜日になった。
ストレッチ 東京出張から戻ってきたときはあまり体調がよくないことが多い。今日は右足全般の張りが強かった。すねの外側、太ももの後ろ、股関節の関節部位、あちこち硬いなと思えた。今日の開脚幅は開始前154cmで、ストレッチ後158cmだった。数値もよくはなかった。なんとなくだけど、あと何年かしたら右足が動かなくなるんじゃないかとすら思えるようになってきた。いまストレッチしているのはその寿命を伸ばす行為だと考えている。なにもしていないのに体調が悪くなるというのがこれからどんどん増えてくるのだと推測する。悪いことばかりでもなく、先週まで辛かった首の痛みは気付いたら治っていた。
日本ナレッジ・マネジメント学会に加入申請を出した 先日の課題管理の雑談 のときに 日本ナレッジ・マネジメント学会 という学会があることを教えていただいた。学術的なところでナレッジマネジメント (知識経営) についてどのようなことが研究されていて (あるいはされていなくて)、どういう知見が溜まっているのかを知りたかったのでちょうどうちの会社にとってよい機会だと思える。
さっそく web のフォームから加入申請を送って、法人会員になるのは申請書を郵送する必要があるとのことでその事務手続きも終えた。法人会員は10万円/年の費用がかかる。学会などの年会費は「諸会費」という勘定科目使い、不課税となる。まぁこのぐらいの金額ならよいだろうと即断即決で決めた。
雑談の雑談 毎月お手伝い先の会社に出張して経営陣とサポート部門トップを含めたトップ3に プロジェクトの進捗報告 をしている。
プロジェクトの初期の頃は情報共有を密にしたり親睦を深める意図から (言うても月1回だけれども) 毎月行くことには意味はあった。しかし、うちのチームはフルリモートで開発が進む体制になっており、私が物理的にオフィスに出向かなくてもプロジェクトの開発にはほとんど影響を与えない。ではなぜ出張しているのかの意義はプロジェクトの進捗報告をオフライン会議でやっていることの方が大きいのではないかと思うようになってきた。早いときは20分ほどで報告は終わるし、普通にやっても30分もあったら報告内容は終わる。そこから参加者でその時々の雑談が始まる。会議のうち報告と雑談の時間が半々ぐらいといったときもある。
この雑談の機会を作る大義名分として、私が出張して進捗報告の会議があるから「出しになっている」のではないか？という仮説を思いついた。その場では「プロジェクトには直接関係ないのだけど、、、」という話題もちょくちょく出る。会社の業務には誰の責任でも担当でもない宙ぶらりんになる業務も発生する。チームならそれはマネージャーがすべて巻き取るわけだが、部署単位になると浮いたままになることもある。そういう話題がこの会議の中ではちょくちょくあがってくる。
建前上の会議を「出しにして」話す機会のない人たちが雑談するという、別の価値を提供している会議もあるんじゃないかと、顧問のはらさんと雑談していたところ、次の記事を紹介された。
なぜ雑談が重要か 私も前日にざっと読んでこれはひどい記事だなと思ってスルーしていた。意外とこの記事の是非について盛り上がった。私がこの記事をひどいと思うのは次の点になる。
目的と手段をベン図 (集合を扱う表現) で表すという奇妙さ 会議では重要な情報を得られず雑談でこそ得られるという極端な物言い そういうケースがあることは同意するが、大半は会議で重要な情報を得られているはずだ 会議と雑談を別の空間や時間で行う対立軸のように書いているところ 会議の中で雑談して、会議内の雑談で発見があったのならそれは会議で得られたのと同じこと (上述した事例が正にそう) 雑談は会議を補うものであって会議を置き換えるものではない 会議で重要な情報を得られないなんてことは一般の業務においてあり得ない 試しにこの記事の著者が書いた本のファンである友だちにも意見を聞いてみたところ、次のようなコメントが返ってきた。
目的と手段を同じ座標の集合にするのは無理がある 手段を「目的の役に立つもの」と独自定義を置き換えることへの懸念と分かりにくさ 本とブログとのギャップに驚いている。どちらかが本人でどちらかがゴーストライターなのか、とさえ思ってしまう 前半の大事な前提が受け入れられないからその続きの内容も入ってこないといったコメントをその友だちからもらった。そんな話しをしていると、はらさんが javascript と java を混同して話す人はなにを話しても聞く気にならないと解釈すれば理解できると共感していた。それぐらい冒頭の目的と手段について書かれた内容はわかりにくいと言える。
著者が言いたいことは、本質的な課題は最初からわかりにくいもので顧客自身も気付いていないことが多い。いくつか調査したりヒアリングしたり、その結果を分析したりしながら徐々にわかってきたりすることがある。イシューからはじめよ ではそのことを「解くべき問題 = 課題を見極める」と表現している。私はそれを課題管理で解決しようとしているが、著者は雑談で解決しようというアプローチの違いについて書いてあるものだと意図は理解できる。しかし、記事の内容は分かりにくいので支持しないというのが私の立場である。</description><content>&lt;p>1時に寝て何度か起きて7時に起きた。昨日は遅くまで調べものをしていたわりには達成感がなくていまいちな金曜日になった。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>東京出張から戻ってきたときはあまり体調がよくないことが多い。今日は右足全般の張りが強かった。すねの外側、太ももの後ろ、股関節の関節部位、あちこち硬いなと思えた。今日の開脚幅は開始前154cmで、ストレッチ後158cmだった。数値もよくはなかった。なんとなくだけど、あと何年かしたら右足が動かなくなるんじゃないかとすら思えるようになってきた。いまストレッチしているのはその寿命を伸ばす行為だと考えている。なにもしていないのに体調が悪くなるというのがこれからどんどん増えてくるのだと推測する。悪いことばかりでもなく、先週まで辛かった首の痛みは気付いたら治っていた。&lt;/p>
&lt;h2 id="日本ナレッジマネジメント学会に加入申請を出した">日本ナレッジ・マネジメント学会に加入申請を出した&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0711/#コパイロツトさんと雑談">先日の課題管理の雑談&lt;/a> のときに &lt;a href="https://kmsj.org/">日本ナレッジ・マネジメント学会&lt;/a> という学会があることを教えていただいた。学術的なところでナレッジマネジメント (知識経営) についてどのようなことが研究されていて (あるいはされていなくて)、どういう知見が溜まっているのかを知りたかったのでちょうどうちの会社にとってよい機会だと思える。&lt;/p>
&lt;p>さっそく web のフォームから加入申請を送って、法人会員になるのは申請書を郵送する必要があるとのことでその事務手続きも終えた。法人会員は10万円/年の費用がかかる。学会などの年会費は「諸会費」という勘定科目使い、不課税となる。まぁこのぐらいの金額ならよいだろうと即断即決で決めた。&lt;/p>
&lt;h2 id="雑談の雑談">雑談の雑談&lt;/h2>
&lt;p>毎月お手伝い先の会社に出張して経営陣とサポート部門トップを含めたトップ3に &lt;a href="/diary/diary/posts/2023/0712/">プロジェクトの進捗報告&lt;/a> をしている。&lt;/p>
&lt;p>プロジェクトの初期の頃は情報共有を密にしたり親睦を深める意図から (言うても月1回だけれども) 毎月行くことには意味はあった。しかし、うちのチームはフルリモートで開発が進む体制になっており、私が物理的にオフィスに出向かなくてもプロジェクトの開発にはほとんど影響を与えない。ではなぜ出張しているのかの意義はプロジェクトの進捗報告をオフライン会議でやっていることの方が大きいのではないかと思うようになってきた。早いときは20分ほどで報告は終わるし、普通にやっても30分もあったら報告内容は終わる。そこから参加者でその時々の雑談が始まる。会議のうち報告と雑談の時間が半々ぐらいといったときもある。&lt;/p>
&lt;p>この雑談の機会を作る大義名分として、私が出張して進捗報告の会議があるから「出しになっている」のではないか？という仮説を思いついた。その場では「プロジェクトには直接関係ないのだけど、、、」という話題もちょくちょく出る。会社の業務には誰の責任でも担当でもない宙ぶらりんになる業務も発生する。チームならそれはマネージャーがすべて巻き取るわけだが、部署単位になると浮いたままになることもある。そういう話題がこの会議の中ではちょくちょくあがってくる。&lt;/p>
&lt;p>建前上の会議を「出しにして」話す機会のない人たちが雑談するという、別の価値を提供している会議もあるんじゃないかと、顧問のはらさんと雑談していたところ、次の記事を紹介された。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://tech.stmn.co.jp/entry/2023/07/14/115639">なぜ雑談が重要か&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>私も前日にざっと読んでこれはひどい記事だなと思ってスルーしていた。意外とこの記事の是非について盛り上がった。私がこの記事をひどいと思うのは次の点になる。&lt;/p>
&lt;ul>
&lt;li>目的と手段をベン図 (集合を扱う表現) で表すという奇妙さ&lt;/li>
&lt;li>会議では重要な情報を得られず雑談でこそ得られるという極端な物言い
&lt;ul>
&lt;li>そういうケースがあることは同意するが、大半は会議で重要な情報を得られているはずだ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>会議と雑談を別の空間や時間で行う対立軸のように書いているところ
&lt;ul>
&lt;li>会議の中で雑談して、会議内の雑談で発見があったのならそれは会議で得られたのと同じこと (上述した事例が正にそう)&lt;/li>
&lt;li>雑談は会議を補うものであって会議を置き換えるものではない
&lt;ul>
&lt;li>会議で重要な情報を得られないなんてことは一般の業務においてあり得ない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>試しにこの記事の著者が書いた本のファンである友だちにも意見を聞いてみたところ、次のようなコメントが返ってきた。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>目的と手段を同じ座標の集合にするのは無理がある&lt;/li>
&lt;li>手段を「目的の役に立つもの」と独自定義を置き換えることへの懸念と分かりにくさ&lt;/li>
&lt;li>本とブログとのギャップに驚いている。どちらかが本人でどちらかがゴーストライターなのか、とさえ思ってしまう&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>前半の大事な前提が受け入れられないからその続きの内容も入ってこないといったコメントをその友だちからもらった。そんな話しをしていると、はらさんが javascript と java を混同して話す人はなにを話しても聞く気にならないと解釈すれば理解できると共感していた。それぐらい冒頭の目的と手段について書かれた内容はわかりにくいと言える。&lt;/p>
&lt;p>著者が言いたいことは、本質的な課題は最初からわかりにくいもので顧客自身も気付いていないことが多い。いくつか調査したりヒアリングしたり、その結果を分析したりしながら徐々にわかってきたりすることがある。&lt;a href="http://www.eijipress.co.jp/book/book.php?epcode=2085">イシューからはじめよ&lt;/a> ではそのことを「解くべき問題 = 課題を見極める」と表現している。私はそれを課題管理で解決しようとしているが、著者は雑談で解決しようというアプローチの違いについて書いてあるものだと意図は理解できる。しかし、記事の内容は分かりにくいので支持しないというのが私の立場である。&lt;/p></content></item><item><title>メモリリークに遭遇</title><link>/diary/posts/2023/0714/</link><pubDate>Fri, 14 Jul 2023 07:57:23 +0900</pubDate><guid>/diary/posts/2023/0714/</guid><description>23時に寝て何度か起きて5時に起きてからだらだらネットしながら記事を読んだりしていて7時に起き上がった。
agent アプリケーションのメモリリーク調査 qa テストの一環として先月からテスト環境で毎分 agent アプリケーションにリクエストを投げる長時間稼働テストを実行している。なんとなく気になるところがあったからやったわけではあるけれど、長時間稼働テストによってメモリリークを検出できてしまった。自分を過信せずちゃんと検証しないといけないなと思えた。top コマンドの実メモリー (RES) を1ヶ月前と比較して増えているからメモリリークだと気付いたところ。これからメモリプロファイリングをしながら原因を追求していく。私が書いた (レビューした) go のコードでメモリリークはないだろうと高をくくっていただけにちょっとショックではあった。
go は標準ライブラリに pprof というプロファイラがあるので簡単にデバッグできる。プロファイラで昨日から調査していたところ、go-zeromq/zmq4 の処理でメモリリークしていることはわかった。それがライブラリの使い方が誤っているのか、潜在的な不具合なのかはまだこれから調査するところ。
ライブラリ側の問題を調査するので厄介ではあるけど、私が書いた (レビューした) go のコードでメモリリークしているわけじゃないことがわかって少しほっとした。
go の generics 勉強会 先日準備した資料 を使って勉強会を開催した。
https://github.com/t2y/go-generics-study この勉強会はある意味、うちのチームのメンバーが理解しておくべき内容なので go のプログラミングをやっていないメンバーが聞いてもあまり関心をもてない内容となっている。そういうお断りもした上で最悪2-3人ぐらいの参加者になるかと思ったもののプログラミングに関心がある人たちは参加してくれて5-6人ぐらいの規模にはなった。一方で内容も難しいし、私の説明がどれだけわかりやすかったか、私自身にはわからないのでなんとも言えない。質問も一切なかったので喋りきって疲れたという疲労感と、伝わったのか伝わらなかったのか分からない消化不良感と、金曜日だから今日はもういいや感でどっと疲れたというのが率直な感想になる。
とはいえ、私もずっと generics の仕様をちゃんと追いかけたいと思いながら先送りしていたものではあるので私の中では自分が go の generics の理解度をあげて実際の開発の中で使い分けるだけの判断基準をもてたことが収穫だったと言える。</description><content>&lt;p>23時に寝て何度か起きて5時に起きてからだらだらネットしながら記事を読んだりしていて7時に起き上がった。&lt;/p>
&lt;h2 id="agent-アプリケーションのメモリリーク調査">agent アプリケーションのメモリリーク調査&lt;/h2>
&lt;p>qa テストの一環として先月からテスト環境で毎分 agent アプリケーションにリクエストを投げる長時間稼働テストを実行している。なんとなく気になるところがあったからやったわけではあるけれど、長時間稼働テストによってメモリリークを検出できてしまった。自分を過信せずちゃんと検証しないといけないなと思えた。top コマンドの実メモリー (RES) を1ヶ月前と比較して増えているからメモリリークだと気付いたところ。これからメモリプロファイリングをしながら原因を追求していく。私が書いた (レビューした) go のコードでメモリリークはないだろうと高をくくっていただけにちょっとショックではあった。&lt;/p>
&lt;p>go は標準ライブラリに pprof というプロファイラがあるので簡単にデバッグできる。プロファイラで昨日から調査していたところ、&lt;a href="https://github.com/go-zeromq/zmq4">go-zeromq/zmq4&lt;/a> の処理でメモリリークしていることはわかった。それがライブラリの使い方が誤っているのか、潜在的な不具合なのかはまだこれから調査するところ。&lt;/p>
&lt;p>ライブラリ側の問題を調査するので厄介ではあるけど、私が書いた (レビューした) go のコードでメモリリークしているわけじゃないことがわかって少しほっとした。&lt;/p>
&lt;h2 id="go-の-generics-勉強会">go の generics 勉強会&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0707/#go-の-generics 勉強会の準備">先日準備した資料&lt;/a> を使って勉強会を開催した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/go-generics-study">https://github.com/t2y/go-generics-study&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>この勉強会はある意味、うちのチームのメンバーが理解しておくべき内容なので go のプログラミングをやっていないメンバーが聞いてもあまり関心をもてない内容となっている。そういうお断りもした上で最悪2-3人ぐらいの参加者になるかと思ったもののプログラミングに関心がある人たちは参加してくれて5-6人ぐらいの規模にはなった。一方で内容も難しいし、私の説明がどれだけわかりやすかったか、私自身にはわからないのでなんとも言えない。質問も一切なかったので喋りきって疲れたという疲労感と、伝わったのか伝わらなかったのか分からない消化不良感と、金曜日だから今日はもういいや感でどっと疲れたというのが率直な感想になる。&lt;/p>
&lt;p>とはいえ、私もずっと generics の仕様をちゃんと追いかけたいと思いながら先送りしていたものではあるので私の中では自分が go の generics の理解度をあげて実際の開発の中で使い分けるだけの判断基準をもてたことが収穫だったと言える。&lt;/p></content></item><item><title>縁の下のマネージャー</title><link>/diary/posts/2023/0713/</link><pubDate>Thu, 13 Jul 2023 13:39:15 +0900</pubDate><guid>/diary/posts/2023/0713/</guid><description>20時にホテルに戻ってきてのんびりしながら気付いたら22時ぐらいになって、少しテレビをみて0時に寝て4時ぐらいから起きてその後はあまり眠れなかった。それでも7時過ぎまでだらだらしていた。
7月後半に実装予定の新機能の設計 9月までに実装する新機能のうち、唯一、私の頭の中で設計の見通しをもっていなかった機能の設計を行うことにした。
ざっくりした機能概要から私がふわっと想定していたものはずっと複雑なものだったのだけど、プロダクトオーナーに要件をヒアリングしているうちにそんな高度なものは求められていないことに気付いた。逆にその高度な機能の仕組みを提供しても、実際に運用の現場で使うにあたって手間暇だけかかってそんなものを求めていないと言われそうな気がした。そこで私が作りたいなと思っていた設計のアイディアは封印することにした。既存の先行プロダクトがもっている機能とほぼ同様のものを、うちらの開発しているプロダクトで実現するだけでよさそうにみえた。そのシンプルな機能の設計を軽くやっておいた。詳細を詰めるのは次のマイルストーンで私ではないメンバーに実装してもらうことになるけれど、なんとなく当初の想定よりも早くできそうに思えた。
ログ出力のリファクタリング id 連携の処理で複雑なリソースを map 型で扱うときデバッグ用途でリソースを丸ごと dump したい。しかし、パスワードのような機密情報が含まれる場合はそれらはログに出力したくない。この処理をいまは連携種別ごとに実装していて、本質じゃないところで個別実装の手間があるのと機密情報の出力というセキュリティに関するところを毎回プログラマーが手で実装するのもどうかな？という気がして汎用のログユーティリティとしてロガーのライブラリ側で提供することにした。インフラやプラットフォーム的な機能に私は積極的に開発に介入している。
やり方の1つとしてオリジナルのリソースをコピーして機密情報だけ削除した一時的なリソースコピーを dump してログ出力する。go 1.21 で標準ライブラリに追加される maps パッケージを使うと map の操作が簡単にできる。コピー関数もある。しかし、この機能は shallow copy なので map の値にネストした map が含まれる場合はオリジナルの値を書き換えてしまう。ネストした map を調べてそれらもクローンしていく処理を実装した。excludeKeys に除外したい任意のキーを渡し、map の値を再帰的にチェックして取り除く。最終的には次のようなコピーユーティリティになった。
func copyWithoutExcludeKeys( fields map[string]any, excludeKeys []string, ) map[string]any { cloned := maps.Clone(fields) for k, v := range cloned { switch t := v.(type) { case map[string]string: strMapCloned := maps.Clone(t) for _, sk := range maps.Keys(strMapCloned) { if slices.Contains(excludeKeys, sk) { delete(strMapCloned, sk) } } cloned[k] = strMapCloned case map[string]any: cloned[k] = copyWithoutExcludeKeys(t, excludeKeys) case []map[string]any: for i, v := range t { t[i] = copyWithoutExcludeKeys(v, excludeKeys) } default: if slices.</description><content>&lt;p>20時にホテルに戻ってきてのんびりしながら気付いたら22時ぐらいになって、少しテレビをみて0時に寝て4時ぐらいから起きてその後はあまり眠れなかった。それでも7時過ぎまでだらだらしていた。&lt;/p>
&lt;h2 id="7月後半に実装予定の新機能の設計">7月後半に実装予定の新機能の設計&lt;/h2>
&lt;p>9月までに実装する新機能のうち、唯一、私の頭の中で設計の見通しをもっていなかった機能の設計を行うことにした。&lt;/p>
&lt;p>ざっくりした機能概要から私がふわっと想定していたものはずっと複雑なものだったのだけど、プロダクトオーナーに要件をヒアリングしているうちにそんな高度なものは求められていないことに気付いた。逆にその高度な機能の仕組みを提供しても、実際に運用の現場で使うにあたって手間暇だけかかってそんなものを求めていないと言われそうな気がした。そこで私が作りたいなと思っていた設計のアイディアは封印することにした。既存の先行プロダクトがもっている機能とほぼ同様のものを、うちらの開発しているプロダクトで実現するだけでよさそうにみえた。そのシンプルな機能の設計を軽くやっておいた。詳細を詰めるのは次のマイルストーンで私ではないメンバーに実装してもらうことになるけれど、なんとなく当初の想定よりも早くできそうに思えた。&lt;/p>
&lt;h2 id="ログ出力のリファクタリング">ログ出力のリファクタリング&lt;/h2>
&lt;p>id 連携の処理で複雑なリソースを map 型で扱うときデバッグ用途でリソースを丸ごと dump したい。しかし、パスワードのような機密情報が含まれる場合はそれらはログに出力したくない。この処理をいまは連携種別ごとに実装していて、本質じゃないところで個別実装の手間があるのと機密情報の出力というセキュリティに関するところを毎回プログラマーが手で実装するのもどうかな？という気がして汎用のログユーティリティとしてロガーのライブラリ側で提供することにした。インフラやプラットフォーム的な機能に私は積極的に開発に介入している。&lt;/p>
&lt;p>やり方の1つとしてオリジナルのリソースをコピーして機密情報だけ削除した一時的なリソースコピーを dump してログ出力する。go 1.21 で標準ライブラリに追加される &lt;a href="https://pkg.go.dev/golang.org/x/exp/maps">maps&lt;/a> パッケージを使うと map の操作が簡単にできる。コピー関数もある。しかし、この機能は shallow copy なので map の値にネストした map が含まれる場合はオリジナルの値を書き換えてしまう。ネストした map を調べてそれらもクローンしていく処理を実装した。excludeKeys に除外したい任意のキーを渡し、map の値を再帰的にチェックして取り除く。最終的には次のようなコピーユーティリティになった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">copyWithoutExcludeKeys&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fields&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">any&lt;/span>, &lt;span style="color:#a6e22e">excludeKeys&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">any&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cloned&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">maps&lt;/span>.&lt;span style="color:#a6e22e">Clone&lt;/span>(&lt;span style="color:#a6e22e">fields&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">cloned&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>.(&lt;span style="color:#66d9ef">type&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">strMapCloned&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">maps&lt;/span>.&lt;span style="color:#a6e22e">Clone&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">sk&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">maps&lt;/span>.&lt;span style="color:#a6e22e">Keys&lt;/span>(&lt;span style="color:#a6e22e">strMapCloned&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">slices&lt;/span>.&lt;span style="color:#a6e22e">Contains&lt;/span>(&lt;span style="color:#a6e22e">excludeKeys&lt;/span>, &lt;span style="color:#a6e22e">sk&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> delete(&lt;span style="color:#a6e22e">strMapCloned&lt;/span>, &lt;span style="color:#a6e22e">sk&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cloned&lt;/span>[&lt;span style="color:#a6e22e">k&lt;/span>] = &lt;span style="color:#a6e22e">strMapCloned&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">any&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cloned&lt;/span>[&lt;span style="color:#a6e22e">k&lt;/span>] = &lt;span style="color:#a6e22e">copyWithoutExcludeKeys&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">excludeKeys&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> []&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">any&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = &lt;span style="color:#a6e22e">copyWithoutExcludeKeys&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">excludeKeys&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">slices&lt;/span>.&lt;span style="color:#a6e22e">Contains&lt;/span>(&lt;span style="color:#a6e22e">excludeKeys&lt;/span>, &lt;span style="color:#a6e22e">k&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> delete(&lt;span style="color:#a6e22e">cloned&lt;/span>, &lt;span style="color:#a6e22e">k&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">cloned&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>会議の趨勢</title><link>/diary/posts/2023/0712/</link><pubDate>Wed, 12 Jul 2023 09:40:34 +0900</pubDate><guid>/diary/posts/2023/0712/</guid><description>前日に飲みに行ってきて1時に寝て何度か起きて7時過ぎに起きた。移動日であまり眠れていなかったのと夜遅くまで飲みに行っていたせいか、朝からどっと疲れた印象があった。
プロジェクトの進捗報告 出張したときの月例報告の8回目。前回の進捗報告はこちら 。
今回はあまり大きな話題がなかったのと、いま機能開発の真っ只中なので報告もシンプルなもので済む。前月に導入した新しい取り組みをおさらいしつつ、それらが1ヶ月を経てどのような状況になっているかを共有することにした。前月は新しい取り組みを始めたからいろいろツッコミが出るかな？と期待したらほとんど出なくてやや消化不良だった。今回は逆に前月と大きな取り組みの違いもなく、淡々とやってますよ、進捗はまぁまぁですよみたいな共有だったのに報告後の雑談は盛り上がった。会議の趨勢は未だに読めない。
いずれにせよ、開発はこれからの1ヶ月が正念場になる。私も積極的に開発に介入するし、私がやらないといけない issue もいくつかある。人に張りついて指導していると自分の作業がまったく進められない。なので、指導していない時間に自分の作業を進める取り組みをそろそろ始めていく必要もある。心技体は悪くないのでまぁ大丈夫だろうとみている。</description><content>&lt;p>前日に飲みに行ってきて1時に寝て何度か起きて7時過ぎに起きた。移動日であまり眠れていなかったのと夜遅くまで飲みに行っていたせいか、朝からどっと疲れた印象があった。&lt;/p>
&lt;h2 id="プロジェクトの進捗報告">プロジェクトの進捗報告&lt;/h2>
&lt;p>出張したときの月例報告の8回目。&lt;a href="/diary/diary/posts/2023/0614/">前回の進捗報告はこちら&lt;/a> 。&lt;/p>
&lt;p>今回はあまり大きな話題がなかったのと、いま機能開発の真っ只中なので報告もシンプルなもので済む。前月に導入した新しい取り組みをおさらいしつつ、それらが1ヶ月を経てどのような状況になっているかを共有することにした。前月は新しい取り組みを始めたからいろいろツッコミが出るかな？と期待したらほとんど出なくてやや消化不良だった。今回は逆に前月と大きな取り組みの違いもなく、淡々とやってますよ、進捗はまぁまぁですよみたいな共有だったのに報告後の雑談は盛り上がった。会議の趨勢は未だに読めない。&lt;/p>
&lt;p>いずれにせよ、開発はこれからの1ヶ月が正念場になる。私も積極的に開発に介入するし、私がやらないといけない issue もいくつかある。人に張りついて指導していると自分の作業がまったく進められない。なので、指導していない時間に自分の作業を進める取り組みをそろそろ始めていく必要もある。心技体は悪くないのでまぁ大丈夫だろうとみている。&lt;/p></content></item><item><title>定例会議とそのプラクティス</title><link>/diary/posts/2023/0711/</link><pubDate>Tue, 11 Jul 2023 09:11:19 +0900</pubDate><guid>/diary/posts/2023/0711/</guid><description>22時に寝て1時半に起きて3時半に起きた。それからお風呂入って準備して始発の新幹線に乗った。いつもは夜通し起きているけど、今日は夜に雑談会があるので寝ておくことにした。
新しいやり方で1ヶ月が経過した定例会議 一ヶ月前の定例会議 は変更したばかりで手探りな状況ではあったが、今回は3つのマイルストーンをこなし、チームメンバーも新しいやり方に慣れてきたと言える。いまのところ、開発の情報共有でメンバーが困っているようにはみえない。しかし、タイムボックスの始めと終わりが生産性が上がるといったマイルストーンを短くした成果もあまりみえない。可もなく不可もなくといったところかな。悪いわけではない。
一方で6月末に私が休暇をとったり社員旅行があったりしてその分の業務時間が3日ほど少なかったことが最も大きく影響したと言うべきかもしれない。私は終わってみれば2週間で1つの issue しか fix していなくて、これまでは10以上 fix しているので、今回のマイルストーンの成果がいまいちにみえるのは私が最も働いていないといった方が正しい。いろいろ手掛けてはいるのだけど、調整のタイミングが悪くて fix しなかったという状況がある。それも含めて次の1ヶ月をピークにもっていく開発のメリハリではある。これまでの1ヶ月の進捗をみてメンバーにも3ヶ月でいま想定している機能開発を終わらせるよと共有した。
私が作業するなら余裕でこなせる作業量だけど、実際に作業するのは私じゃなくてメンバーが担当する。今後もメンバーの進捗を注視しながらサポートしていくことになる。他人の進捗をコミットするのはなかなか難しいという思いを抱きながらサポートしていく。
コパイロツトさんと雑談 準備を経て 19時半から南青山のオフィスで雑談してきた。いろいろ準備していったが、モニターが大き過ぎて画面共有しても文字がよくみえなかったり macbook の操作がやりにくかったりして資料はほとんど使わずに雑談してきた。コパイロツトさんはプロジェクトマネジメントそのものをやっているわけではなく、プロジェクトリーダーの意思決定を支援するための取り組みをしているというユニークな業務を提供している。スクラムで例えると、スクラムマスターよりも代理プロダクトオーナー (Proxy Product Owner) に近いという。
How to Succeed as a Proxy Product Owner 定例会議をうまくやればプロジェクトがうまくいくという信念のもと SuperGoodMeetings を提供している。ツールを正しく使ってもらえると意図した通りにうまくいくのだが、問題はツールをそもそも使ってくれないユーザーやチームをどう導くかというところで苦労されているように思えた。これは課題管理システムを使ってくれないという私の問題意識とも通じる。ツールを使いこなすには文章を書くことが重要で、文章を書けない人たちが一定数いるという事実を受け入れて、どのような取り組みをしていくか？これも課題管理と共通の問題であるように思える。課題管理の話しをして背景や意図が通じる人は少ないだけに、その価値観を共有できるというのは稀な機会であった。また 日本ナレッジ・マネジメント学会 という学会があることを教えていただいた。後日加入してみようと思う。
19時半から21時ぐらいまでオフィスで雑談して、その後23時半ぐらいまで飲みに行ってきた。楽しかった。</description><content>&lt;p>22時に寝て1時半に起きて3時半に起きた。それからお風呂入って準備して始発の新幹線に乗った。いつもは夜通し起きているけど、今日は夜に雑談会があるので寝ておくことにした。&lt;/p>
&lt;h2 id="新しいやり方で1ヶ月が経過した定例会議">新しいやり方で1ヶ月が経過した定例会議&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0613/#新しい定例会議の初日">一ヶ月前の定例会議&lt;/a> は変更したばかりで手探りな状況ではあったが、今回は3つのマイルストーンをこなし、チームメンバーも新しいやり方に慣れてきたと言える。いまのところ、開発の情報共有でメンバーが困っているようにはみえない。しかし、タイムボックスの始めと終わりが生産性が上がるといったマイルストーンを短くした成果もあまりみえない。可もなく不可もなくといったところかな。悪いわけではない。&lt;/p>
&lt;p>一方で6月末に私が休暇をとったり社員旅行があったりしてその分の業務時間が3日ほど少なかったことが最も大きく影響したと言うべきかもしれない。私は終わってみれば2週間で1つの issue しか fix していなくて、これまでは10以上 fix しているので、今回のマイルストーンの成果がいまいちにみえるのは私が最も働いていないといった方が正しい。いろいろ手掛けてはいるのだけど、調整のタイミングが悪くて fix しなかったという状況がある。それも含めて次の1ヶ月をピークにもっていく開発のメリハリではある。これまでの1ヶ月の進捗をみてメンバーにも3ヶ月でいま想定している機能開発を終わらせるよと共有した。&lt;/p>
&lt;p>私が作業するなら余裕でこなせる作業量だけど、実際に作業するのは私じゃなくてメンバーが担当する。今後もメンバーの進捗を注視しながらサポートしていくことになる。他人の進捗をコミットするのはなかなか難しいという思いを抱きながらサポートしていく。&lt;/p>
&lt;h2 id="コパイロツトさんと雑談">コパイロツトさんと雑談&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0709/#課題管理の雑談会へ向けての準備">準備を経て&lt;/a> 19時半から南青山のオフィスで雑談してきた。いろいろ準備していったが、モニターが大き過ぎて画面共有しても文字がよくみえなかったり macbook の操作がやりにくかったりして資料はほとんど使わずに雑談してきた。コパイロツトさんはプロジェクトマネジメントそのものをやっているわけではなく、プロジェクトリーダーの意思決定を支援するための取り組みをしているというユニークな業務を提供している。スクラムで例えると、スクラムマスターよりも代理プロダクトオーナー (Proxy Product Owner) に近いという。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/serious-scrum/how-to-succeed-as-a-proxy-product-owner-364c655d20b8">How to Succeed as a Proxy Product Owner&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>定例会議をうまくやればプロジェクトがうまくいくという信念のもと &lt;a href="https://supergoodmeetings.com/">SuperGoodMeetings&lt;/a> を提供している。ツールを正しく使ってもらえると意図した通りにうまくいくのだが、問題はツールをそもそも使ってくれないユーザーやチームをどう導くかというところで苦労されているように思えた。これは課題管理システムを使ってくれないという私の問題意識とも通じる。ツールを使いこなすには文章を書くことが重要で、文章を書けない人たちが一定数いるという事実を受け入れて、どのような取り組みをしていくか？これも課題管理と共通の問題であるように思える。課題管理の話しをして背景や意図が通じる人は少ないだけに、その価値観を共有できるというのは稀な機会であった。また &lt;a href="https://kmsj.org/">日本ナレッジ・マネジメント学会&lt;/a> という学会があることを教えていただいた。後日加入してみようと思う。&lt;/p>
&lt;p>19時半から21時ぐらいまでオフィスで雑談して、その後23時半ぐらいまで飲みに行ってきた。楽しかった。&lt;/p></content></item><item><title>情報共有とメンバー課金の過ち</title><link>/diary/posts/2023/0710/</link><pubDate>Mon, 10 Jul 2023 08:26:01 +0900</pubDate><guid>/diary/posts/2023/0710/</guid><description>1時に寝て4時に起きて5時に起きて7時に起きた。明け方からうまく眠れなくなった。
clang の互換性 openldap 2.5 向けに ldap の overlay モジュールのビルド環境を作っていた。これまでは 2.4 向けのモジュールのみを提供していた。2.5 もそろそろやろうということで先週末からビルド環境の構築に着手していた。rpm のパッケージングの作業をしていて、openldap 2.5 のサーバーのビルドをしていると次のエラーが発生した。
configure:21011: checking for pthread_detach with &amp;lt;pthread.h&amp;gt; configure:21033: clang -o conftest -O2 -g3 -fstack-protector -fPIE -D_REENTRANT -D_THREAD_SAFE -DOPENLDAP_FD_SETSIZE=16384 -DLDAP_CONNECTIONLESS -DSLAPD_META_CLIENT_PR -D_GNU_SOURCE -Wl,-z,relro -Wl,--as-needed -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 conftest.c &amp;gt;&amp;amp;5 clang-15: warning: argument unused during compilation: &amp;#39;-specs=/usr/lib/rpm/redhat/redhat-hardened-ld&amp;#39; [-Wunused-command-line-argument] clang-15: warning: argument unused during compilation: &amp;#39;-specs=/usr/lib/rpm/redhat/redhat-annobin-cc1&amp;#39; [-Wunused-command-line-argument] conftest.c:118:16: error: incompatible pointer to integer conversion passing &amp;#39;void *&amp;#39; to parameter of type &amp;#39;pthread_t&amp;#39; (aka &amp;#39;unsigned long&amp;#39;) [-Wint-conversion] pthread_detach(NULL); ^~~~ /usr/lib64/clang/15.</description><content>&lt;p>1時に寝て4時に起きて5時に起きて7時に起きた。明け方からうまく眠れなくなった。&lt;/p>
&lt;h2 id="clang-の互換性">clang の互換性&lt;/h2>
&lt;p>openldap 2.5 向けに ldap の overlay モジュールのビルド環境を作っていた。これまでは 2.4 向けのモジュールのみを提供していた。2.5 もそろそろやろうということで先週末からビルド環境の構築に着手していた。rpm のパッケージングの作業をしていて、openldap 2.5 のサーバーのビルドをしていると次のエラーが発生した。&lt;/p>
&lt;pre tabindex="0">&lt;code>configure:21011: checking for pthread_detach with &amp;lt;pthread.h&amp;gt;
configure:21033: clang -o conftest -O2 -g3 -fstack-protector -fPIE -D_REENTRANT -D_THREAD_SAFE -DOPENLDAP_FD_SETSIZE=16384 -DLDAP_CONNECTIONLESS -DSLAPD_META_CLIENT_PR -D_GNU_SOURCE -Wl,-z,relro -Wl,--as-needed -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 conftest.c &amp;gt;&amp;amp;5
clang-15: warning: argument unused during compilation: &amp;#39;-specs=/usr/lib/rpm/redhat/redhat-hardened-ld&amp;#39; [-Wunused-command-line-argument]
clang-15: warning: argument unused during compilation: &amp;#39;-specs=/usr/lib/rpm/redhat/redhat-annobin-cc1&amp;#39; [-Wunused-command-line-argument]
conftest.c:118:16: error: incompatible pointer to integer conversion passing &amp;#39;void *&amp;#39; to parameter of type &amp;#39;pthread_t&amp;#39; (aka &amp;#39;unsigned long&amp;#39;) [-Wint-conversion]
pthread_detach(NULL);
^~~~
/usr/lib64/clang/15.0.7/include/stddef.h:89:16: note: expanded from macro &amp;#39;NULL&amp;#39;
# define NULL ((void*)0)
^~~~~~~~~~
/usr/include/pthread.h:269:38: note: passing argument to parameter &amp;#39;__th&amp;#39; here
extern int pthread_detach (pthread_t __th) __THROW;
^
1 error generated.
&lt;/code>&lt;/pre>&lt;p>エラーメッセージを調べていると、どうやら clang 15 に pthread_detach がないといったものらしい。clang 14 のときはビルドできたという。他の oss でも clang のバージョン違いでビルドできないといったことは発生しているらしい。有識者によると、次の修正が clang15 対応らしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://git.openldap.org/openldap/openldap/-/commit/4a9aaf7c2621c2800b163efe928512c20bd422e2">ITS#10011 build: fix compatibility with stricter C99 compilers&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>それ以外はとくに問題なく、ビルドできてモジュールそのものの動作も確認した。あとは rpm のパッケージングと gitlab ci/cd でビルドしたモジュールで動くかどうかの検証だけ。&lt;/p>
&lt;h2 id="メンバー課金による過ち">メンバー課金による過ち&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0709/">昨日 SuperGoodMeetings をさわってみた&lt;/a> ときにチーム管理の機能があって、任意のユーザーを招待するのは無制限で課金されないと書いてあった。「なるほどね。」とピンと来てコパイロツトの中の人に次のような所感を共有してみた。&lt;/p>
&lt;blockquote>
&lt;p>招待可能ユーザー数を無制限にしているのはよい視点だと私は思います。メンバー課金にすると、経費を削減するために共有アカウントを利用したり、あまり使わない人にはアカウントを作らないようになって情報共有の側面から望ましくない状態になる。一昔前のオンプレ時代は業務に使うシステムのアカウントは全社員がもっていて当たり前だったのが、クラウドサービスを使うようになってメンバー課金の経費削減から全社員がもたないようになりつつある (とくに中小企業) のは、情報共有の視点から過去よりも悪化しているという問題意識を私はもっています。&lt;/p>
&lt;/blockquote>
&lt;p>コパイロツトさんもまったく同じ課題意識をもっていてメンバー課金しない料金体系にしているとのこと。鶏と卵みたいな話しだけど、組織には情報共有のためにアカウントのお金をケチんなと言いたいし、クラウドサービスの会社も料金体系を1人ずつじゃなくて、30人、100人、1000人といったある程度の階段でいいんじゃない？とか思ったりする。メンバー課金じゃないクラウドサービスとして basecamp や backlog などがある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://basecamp.com/pricing">https://basecamp.com/pricing&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://backlog.com/ja/pricing/">https://backlog.com/ja/pricing/&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>定例会議のプラクティスとプロダクト</title><link>/diary/posts/2023/0709/</link><pubDate>Sun, 09 Jul 2023 20:15:38 +0900</pubDate><guid>/diary/posts/2023/0709/</guid><description>昨日も1時過ぎまで飲んでいて3時に寝て8時に起きて午前中はだらだらしていてお昼からオフィスへ出掛けて行って調べものをしていた。
課題管理の雑談会へ向けての準備 先日の準備 の続き。
先日は私が関心をもっていることの資料を整理し直して先方に提示した。今日は コパイロツト さんのプロダクトの1つである SuperGoodMeetings にアカウント登録していろいろ触っていた。その過程で Project Sprint プラクティカルガイド を読んだりもしていた。
SuperGoodMeetings は Project Sprint という考え方で定例会議をうまくやるためのプロダクトにみえる。アプリケーションの完成度も高いしよく出来ていると思う。私からみたら課題管理システムのサブセットにみえる。会議のアジェンダが個々の issue に相当して詳細に管理できる。ui も最近の課題管理システムのそれに近い。一方でこのプロダクトは開発者向けのツールではないため、このツールだけでシステム開発を管理することは想定していないのではないか？と推測される。その辺りの話しも来週、出張したときに中の人に聞いてみようと思う。</description><content>&lt;p>昨日も1時過ぎまで飲んでいて3時に寝て8時に起きて午前中はだらだらしていてお昼からオフィスへ出掛けて行って調べものをしていた。&lt;/p>
&lt;h2 id="課題管理の雑談会へ向けての準備">課題管理の雑談会へ向けての準備&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0617/#課題管理の雑談会へ向けての準備">先日の準備&lt;/a> の続き。&lt;/p>
&lt;p>先日は私が関心をもっていることの資料を整理し直して先方に提示した。今日は &lt;a href="https://copilot.jp/">コパイロツト&lt;/a> さんのプロダクトの1つである &lt;a href="https://supergoodmeetings.com/">SuperGoodMeetings&lt;/a> にアカウント登録していろいろ触っていた。その過程で &lt;a href="https://miro.com/app/board/uXjVMX-zl6s=/">Project Sprint プラクティカルガイド&lt;/a> を読んだりもしていた。&lt;/p>
&lt;p>SuperGoodMeetings は Project Sprint という考え方で定例会議をうまくやるためのプロダクトにみえる。アプリケーションの完成度も高いしよく出来ていると思う。私からみたら課題管理システムのサブセットにみえる。会議のアジェンダが個々の issue に相当して詳細に管理できる。ui も最近の課題管理システムのそれに近い。一方でこのプロダクトは開発者向けのツールではないため、このツールだけでシステム開発を管理することは想定していないのではないか？と推測される。その辺りの話しも来週、出張したときに中の人に聞いてみようと思う。&lt;/p></content></item><item><title>アイディアは移動距離に比例する</title><link>/diary/posts/2023/0708/</link><pubDate>Sat, 08 Jul 2023 13:01:48 +0900</pubDate><guid>/diary/posts/2023/0708/</guid><description>23時に寝て2時に起きて5時に起きて7時に起きた。
ストレッチ 旅行へ行ってきてからなぜか首の筋を痛めている。寝違えたわけでもないのに気がついたら急にある筋が痛いなと思うようになった。今日の開脚幅は開始前157cmで、ストレッチ後160cmだった。今週もわりと忙しかったり暑かったりして負荷はまぁまぁ高かった。先週からの疲労を加味するとややバテた。すねの外側の筋、右のおしりの一点、腰の張り、肩から首にかけての張りなど、全身あちこち痛いところいっぱいみたいな状態だった。来週は東京出張でまたバタバタするが、帰ってきたら週末休んでもいいんじゃないかと思うぐらいにはしんどい感じ。
カフーツさん訪問 お昼はずっと作業をしていて、それが一段落した後に17時半ぐらいから ブログJelly Vol.133 に参加してきた。他の参加者はいとうさんとながいさんの2人だった。いとうさんはお仕事が忙しいということでずっとお仕事をされていた。私はながいさんとあーでもないこーでもないといった、いろんな話題の雑談をしてきた。
アイディアは移動距離に比例する
なにかのきっかけでこういう言葉があることを知った。家を持たず、デジタルノマドのように地域に縛られずに移動しながら働く人たちは優位性があるといった話題になった。quora でも同じような Q&amp;amp;A がある。
「アイデアは移動距離に比例する」というのは、どんな理由からでしょうか？ 今回は だいやめ を持っていった。いつも通り翌1時過ぎまで飲んで酔っ払ってしまった。飲み過ぎた。歳のせいか、お酒に弱くなっているので摂生も考慮してもうちょっと控えるようにした方がいいかもしれない。</description><content>&lt;p>23時に寝て2時に起きて5時に起きて7時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>旅行へ行ってきてからなぜか首の筋を痛めている。寝違えたわけでもないのに気がついたら急にある筋が痛いなと思うようになった。今日の開脚幅は開始前157cmで、ストレッチ後160cmだった。今週もわりと忙しかったり暑かったりして負荷はまぁまぁ高かった。先週からの疲労を加味するとややバテた。すねの外側の筋、右のおしりの一点、腰の張り、肩から首にかけての張りなど、全身あちこち痛いところいっぱいみたいな状態だった。来週は東京出張でまたバタバタするが、帰ってきたら週末休んでもいいんじゃないかと思うぐらいにはしんどい感じ。&lt;/p>
&lt;h2 id="カフーツさん訪問">カフーツさん訪問&lt;/h2>
&lt;p>お昼はずっと作業をしていて、それが一段落した後に17時半ぐらいから &lt;a href="https://www.facebook.com/events/287696183719718">ブログJelly Vol.133&lt;/a> に参加してきた。他の参加者はいとうさんとながいさんの2人だった。いとうさんはお仕事が忙しいということでずっとお仕事をされていた。私はながいさんとあーでもないこーでもないといった、いろんな話題の雑談をしてきた。&lt;/p>
&lt;blockquote>
&lt;p>アイディアは移動距離に比例する&lt;/p>
&lt;/blockquote>
&lt;p>なにかのきっかけでこういう言葉があることを知った。家を持たず、デジタルノマドのように地域に縛られずに移動しながら働く人たちは優位性があるといった話題になった。quora でも同じような Q&amp;amp;A がある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://jp.quora.com/%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2%E3%81%AF%E7%A7%BB%E5%8B%95%E8%B7%9D%E9%9B%A2%E3%81%AB%E6%AF%94%E4%BE%8B%E3%81%99%E3%82%8B-%E3%81%A8%E3%81%84%E3%81%86%E3%81%AE%E3%81%AF-%E3%81%A9%E3%82%93%E3%81%AA%E7%90%86">「アイデアは移動距離に比例する」というのは、どんな理由からでしょうか？&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>今回は &lt;a href="/diary/diary/posts/2021/1109/#呑み">だいやめ&lt;/a> を持っていった。いつも通り翌1時過ぎまで飲んで酔っ払ってしまった。飲み過ぎた。歳のせいか、お酒に弱くなっているので摂生も考慮してもうちょっと控えるようにした方がいいかもしれない。&lt;/p></content></item><item><title>七夕と願い</title><link>/diary/posts/2023/0707/</link><pubDate>Fri, 07 Jul 2023 18:01:53 +0900</pubDate><guid>/diary/posts/2023/0707/</guid><description>23時に寝て2時に起きて6時に起きた。旅行から帰ってきてから最近はこのパターンになってきた。
google のロゴが Tanabata 2023 になっていて七夕だと気付いた。もう私にとって願いというのは健康を祈るぐらいしかない。残された寿命を使い切る前にいまやっていることをやり切りたい、もしくはその結果をみたいと思っていて、そのために必要なことは健康ぐらいかなと。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。
ADLIV さんふりかえり 社員旅行の同行ふりかえり 他社の社員旅行へ同行してみての所感として学ぶことは多々あった。
強制参加にはしない (断ってもよい) 仕事だけではない人間関係の構築という価値観を大事にしている 上下関係がフラットなので参加者が自由に行動したり話したりできる 経営陣や上司に忖度しないメンバーがいることでフラットな関係性を共有できる チーム単位で行動できるので組織の全体行動を強制される感覚が緩和される 野中郁二郎先生は業務外での暗黙知を共有する「場」づくりが大事だと説いている。会社が危機のときやしんどいお仕事をこなすとき、最後は経営者やリーダーの人生観や価値観がモノを言うという考え方がある。そんなときにこういった価値観の共有は役に立つのかもしれない。「社員旅行」という単語自体が古い価値観をイメージしてネガティブに聞こえる。いまだったらワーケーションと呼ぶ方がよいかもしれない。
過去にスタートアップで働いていたとき、会社が M&amp;amp;A で売却して、私にとってはあまりメリットがなかったので即断で辞めると伝えた。即断できたのは経営者に理念がなかったからというのも大きな要因の1つだといまになって思える。時期の差はあれど、私以外の主要メンバーもその後に全員辞めた。要はそういうこと。
go の generics 勉強会の準備 水曜日から資料を作っている。昨日はほぼまる一日コードレビューをやっていた。午前中の半日を費やしてようやく完成した。この資料は一般の go 勉強会でも使えるなと思ったのでお手伝い先のプロダクト開発に関するところを取り除いた資料を別途公開した。資料の中でその内容を検証するサンプルコードも次のリポジトリで公開している。
https://github.com/t2y/go-generics-study</description><content>&lt;p>23時に寝て2時に起きて6時に起きた。旅行から帰ってきてから最近はこのパターンになってきた。&lt;/p>
&lt;p>google のロゴが &lt;a href="https://www.google.com/doodles/tanabata-2023">Tanabata 2023&lt;/a> になっていて七夕だと気付いた。もう私にとって願いというのは健康を祈るぐらいしかない。残された寿命を使い切る前にいまやっていることをやり切りたい、もしくはその結果をみたいと思っていて、そのために必要なことは健康ぐらいかなと。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="/diary/diary/posts/2023/0628/">ADLIV さんふりかえり&lt;/a>&lt;/li>
&lt;li>&lt;a href="/diary/diary/tags/sightseeing/">社員旅行の同行ふりかえり&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>他社の社員旅行へ同行してみての所感として学ぶことは多々あった。&lt;/p>
&lt;ul>
&lt;li>強制参加にはしない (断ってもよい)&lt;/li>
&lt;li>仕事だけではない人間関係の構築という価値観を大事にしている&lt;/li>
&lt;li>上下関係がフラットなので参加者が自由に行動したり話したりできる&lt;/li>
&lt;li>経営陣や上司に忖度しないメンバーがいることでフラットな関係性を共有できる&lt;/li>
&lt;li>チーム単位で行動できるので組織の全体行動を強制される感覚が緩和される&lt;/li>
&lt;/ul>
&lt;p>野中郁二郎先生は業務外での暗黙知を共有する「場」づくりが大事だと説いている。会社が危機のときやしんどいお仕事をこなすとき、最後は経営者やリーダーの人生観や価値観がモノを言うという考え方がある。そんなときにこういった価値観の共有は役に立つのかもしれない。「社員旅行」という単語自体が古い価値観をイメージしてネガティブに聞こえる。いまだったらワーケーションと呼ぶ方がよいかもしれない。&lt;/p>
&lt;p>過去にスタートアップで働いていたとき、会社が M&amp;amp;A で売却して、私にとってはあまりメリットがなかったので即断で辞めると伝えた。即断できたのは経営者に理念がなかったからというのも大きな要因の1つだといまになって思える。時期の差はあれど、私以外の主要メンバーもその後に全員辞めた。要はそういうこと。&lt;/p>
&lt;h2 id="go-の-generics-勉強会の準備">go の generics 勉強会の準備&lt;/h2>
&lt;p>水曜日から資料を作っている。昨日はほぼまる一日コードレビューをやっていた。午前中の半日を費やしてようやく完成した。この資料は一般の go 勉強会でも使えるなと思ったのでお手伝い先のプロダクト開発に関するところを取り除いた資料を別途公開した。資料の中でその内容を検証するサンプルコードも次のリポジトリで公開している。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/go-generics-study">https://github.com/t2y/go-generics-study&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>コードレビューで1日が終わる日</title><link>/diary/posts/2023/0706/</link><pubDate>Thu, 06 Jul 2023 08:19:59 +0900</pubDate><guid>/diary/posts/2023/0706/</guid><description>0時に寝て2時に起きて6時半に起きた。旅行から帰ってきて睡眠の質が上がってきた気がする。
コードレビュー 週明けから毎日ずっとコードレビューをしているわけだけど、今日は scim の id 連携の実装ができたのでそのコードレビューを半日以上やっていた。変更内容は2000行弱ぐらい。以前にも scim の調査 について少し書いた。
担当者は前マイルストーンのときから調査していて、今マイルストーンで初期実装は入れてしまおうという話しを昨日の 1on1 でしていた。また qa レベルのテストは来月末ぐらいでやるので詳細を作り込むよりもまずは大きな機能として入れておきたい。いまマイルストーンの期間を2週間に設定している。調査も含めて実装まで2つのマイルストーンを費やそうとしている。理想的にはどんな機能であっても、メンバーには2週間で完了する粒度で issue を分割して作業できるようになってほしいという狙いがある。
それは過去にどんな新機能を作っていても2週間を超えることはなかったという私の経験則でもある。これは2週間でどんな機能でも完成するという意味ではなく、2週間でマージできないような区切りのつかない機能開発はないという意味だ。機能実装のような issue でマイルストーンをまたぐ開発をしていると、進捗が不透明になったり、開発がダレると私は考えている。ダレるというのは短い期間に集中して開発した方が効率も品質もよいものができるのではないか。記憶の仕組みからは理屈上そうだと言える。開発のメリハリをつけるという働き方に範を示していきたい。</description><content>&lt;p>0時に寝て2時に起きて6時半に起きた。旅行から帰ってきて睡眠の質が上がってきた気がする。&lt;/p>
&lt;h2 id="コードレビュー">コードレビュー&lt;/h2>
&lt;p>週明けから毎日ずっとコードレビューをしているわけだけど、今日は scim の id 連携の実装ができたのでそのコードレビューを半日以上やっていた。変更内容は2000行弱ぐらい。以前にも &lt;a href="/diary/diary/posts/2023/0627/#scim-調査">scim の調査&lt;/a> について少し書いた。&lt;/p>
&lt;p>担当者は前マイルストーンのときから調査していて、今マイルストーンで初期実装は入れてしまおうという話しを昨日の 1on1 でしていた。また qa レベルのテストは来月末ぐらいでやるので詳細を作り込むよりもまずは大きな機能として入れておきたい。いまマイルストーンの期間を2週間に設定している。調査も含めて実装まで2つのマイルストーンを費やそうとしている。理想的にはどんな機能であっても、メンバーには2週間で完了する粒度で issue を分割して作業できるようになってほしいという狙いがある。&lt;/p>
&lt;p>それは過去にどんな新機能を作っていても2週間を超えることはなかったという私の経験則でもある。これは2週間でどんな機能でも完成するという意味ではなく、2週間でマージできないような区切りのつかない機能開発はないという意味だ。機能実装のような issue でマイルストーンをまたぐ開発をしていると、進捗が不透明になったり、開発がダレると私は考えている。ダレるというのは短い期間に集中して開発した方が効率も品質もよいものができるのではないか。記憶の仕組みからは理屈上そうだと言える。開発のメリハリをつけるという働き方に範を示していきたい。&lt;/p></content></item><item><title>go の generics 勉強会へ向けての準備</title><link>/diary/posts/2023/0705/</link><pubDate>Wed, 05 Jul 2023 09:06:35 +0900</pubDate><guid>/diary/posts/2023/0705/</guid><description>0時に寝て6時に起きて7時に起きた。週明けから忙しくて余裕ない。それでもよく眠れていることが幸い。
go の generics 勉強会の準備 今週末の金曜日に勉強会をする想定で作り始めた。generics は難しいのでなかなか本腰を入れて取り組めていなかった。基本的には tenntenn さんの プログラミング言語Go完全入門 15章ジェネリクス（型パラメタ） の資料をベースに、自分で理解できるように調査したり、サンプルコードを書いたり、自分で理解した内容を補足したりして資料を作り始めた。go 1.18 のジェネリクスで導入された概念は次になる。これらのキーワードに関するところをそれぞれ調べることにした。
型パラメーター 型引数 インターフェースによる制約 (Type constraint) 型セット (Type sets)</description><content>&lt;p>0時に寝て6時に起きて7時に起きた。週明けから忙しくて余裕ない。それでもよく眠れていることが幸い。&lt;/p>
&lt;h2 id="go-の-generics-勉強会の準備">go の generics 勉強会の準備&lt;/h2>
&lt;p>今週末の金曜日に勉強会をする想定で作り始めた。generics は難しいのでなかなか本腰を入れて取り組めていなかった。基本的には tenntenn さんの &lt;a href="https://tenn.in/generics">プログラミング言語Go完全入門 15章ジェネリクス（型パラメタ）&lt;/a> の資料をベースに、自分で理解できるように調査したり、サンプルコードを書いたり、自分で理解した内容を補足したりして資料を作り始めた。go 1.18 のジェネリクスで導入された概念は次になる。これらのキーワードに関するところをそれぞれ調べることにした。&lt;/p>
&lt;ul>
&lt;li>型パラメーター&lt;/li>
&lt;li>型引数&lt;/li>
&lt;li>インターフェースによる制約 (Type constraint)&lt;/li>
&lt;li>型セット (Type sets)&lt;/li>
&lt;/ul></content></item><item><title>ldap プロトコルの persistent search</title><link>/diary/posts/2023/0704/</link><pubDate>Tue, 04 Jul 2023 08:11:43 +0900</pubDate><guid>/diary/posts/2023/0704/</guid><description>0時に寝て5時に起きて6時半に起きた。朝から大鼓方を調べたりしていた。
persistent search あれこれ ldap プロトコルの文脈でクライアントがサーバーに接続して、エントリーの更新を検出して更新があったエントリーのみを取得することを persistent search (永続検索) と呼ぶ。メッセージキューで言うところの pubsub の consumer に相当する機能。フィルター条件に合致したエントリーのみを取得するという側面では検索と言える。
ietf のワーキンググループに次のような仕様がある。
Persistent Search: A Simple LDAP Change Notification Mechanism go-ldap で過去に Add Persistent search control + PersistentSearch() #80 で実装を追加しようとしたのもあったので調べてみた。しかし、この機能に openldap は対応していないようだ。
以前から調べている openldap の syncrepl も persistent search を実現する機能の1つと言える。ldap に詳しくないと用語と機能と実装の切り分けができなくて困惑する。syncrepl はもともとレプリケーションのための仕組みではあるが、pubsub の consumer としても使える。そういうときに syncrepl を使って &amp;ldquo;persistent search&amp;rdquo; を行うと言ったりする。このときに先の ietf に提案されている persistent search とはまったく関係ない。だから混乱する。
lopenldap サーバー同士で syncrepl の provider の機能は次の overlay モジュールによって提供される。逆に syncrepl の consumer の機能は openldap の組み込みの機能で提供される。なんらかの歴史的経緯があるのだろう。</description><content>&lt;p>0時に寝て5時に起きて6時半に起きた。朝から大鼓方を調べたりしていた。&lt;/p>
&lt;h2 id="persistent-search-あれこれ">persistent search あれこれ&lt;/h2>
&lt;p>ldap プロトコルの文脈でクライアントがサーバーに接続して、エントリーの更新を検出して更新があったエントリーのみを取得することを persistent search (永続検索) と呼ぶ。メッセージキューで言うところの pubsub の consumer に相当する機能。フィルター条件に合致したエントリーのみを取得するという側面では検索と言える。&lt;/p>
&lt;p>ietf のワーキンググループに次のような仕様がある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.ietf.org/proceedings/50/I-D/ldapext-psearch-03.txt">Persistent Search: A Simple LDAP Change Notification Mechanism&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>go-ldap で過去に &lt;a href="https://github.com/go-ldap/ldap/pull/80">Add Persistent search control + PersistentSearch() #80&lt;/a> で実装を追加しようとしたのもあったので調べてみた。しかし、この機能に openldap は対応していないようだ。&lt;/p>
&lt;p>以前から調べている &lt;a href="/diary/diary/posts/2023/0317/">openldap の syncrepl&lt;/a> も persistent search を実現する機能の1つと言える。ldap に詳しくないと用語と機能と実装の切り分けができなくて困惑する。syncrepl はもともとレプリケーションのための仕組みではあるが、pubsub の consumer としても使える。そういうときに syncrepl を使って &lt;em>&amp;ldquo;persistent search&amp;rdquo;&lt;/em> を行うと言ったりする。このときに先の ietf に提案されている persistent search とはまったく関係ない。だから混乱する。&lt;/p>
&lt;p>lopenldap サーバー同士で syncrepl の provider の機能は次の overlay モジュールによって提供される。逆に syncrepl の consumer の機能は openldap の組み込みの機能で提供される。なんらかの歴史的経緯があるのだろう。&lt;/p>
&lt;pre tabindex="0">&lt;code>overlay syncprov
&lt;/code>&lt;/pre>&lt;p>ldapsearch コマンドで persistent search (syncrepl consumer) を実行するには次のようにする。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ldapsearch -x -H &lt;span style="color:#e6db74">&amp;#34;ldap://localhost:389&amp;#34;&lt;/span> -b &lt;span style="color:#e6db74">&amp;#34;dc=example,dc=com&amp;#34;&lt;/span> -D &lt;span style="color:#e6db74">&amp;#34;cn=Manager,dc=example,dc=com&amp;#34;&lt;/span> -w &lt;span style="color:#e6db74">&amp;#34;secret&amp;#34;&lt;/span> -E &lt;span style="color:#e6db74">&amp;#39;!sync=rp&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ldap プロトコルの文脈で persistent search を行うといった場合、クライアントから pubsub で言うところの consumer を用意するといった意味だけで、その実装や通信方法はいくつか実現方法があるということを学んだ。&lt;/p>
&lt;h2 id="サイトデザイン最終レビュー">サイトデザイン最終レビュー&lt;/h2>
&lt;p>19時からデザイナーさんとはらさんと打ち合わせ。少し前に用意してくれた &lt;a href="/diary/diary/posts/2023/0619/#サイトデザインのサンプルページ">サイトデザインのサンプルページ&lt;/a> の最終レビューを行った。全体としては気に入っているので概ね ok なのだけど、詳細の気になったところやデザインの機微のようなところをはらさんと一緒にデザイナーさんとやり取りして共有した。&lt;/p>
&lt;p>デザインだけをみてこちらで想定していたことも、デザイナーさんの意見や視点を伺ってみると発見があっておもしろかった。逆に言えば、デザインだけでデザイナーさんの意図を伝えるのはとても難しいということもわかった。背景の説明を受けると論理的だったり合理性があったりするものの、なにも情報がない状態でそのことに気付くのは難しい。これはコードリーディングにおいても同じで、作者に意図の説明を受けながらソースコードを読むと簡単に理解できたりする。そして、デザイナーさんもうちらの意見から考え方を見直すこともあった。ウェブデザインのようなものを1人で完全に気付きを得るのは難しそうだ。&lt;/p>
&lt;p>はらさんにレビューに入ってもらっていてとても助かる。私は ui/ux については素人なので、要件やレビューする視点の重要なところにツッコミを入れてくれるので気付くことも多い。私がコードレビューで設計やプログラミングについて指摘しているのも、別の人の視点からみるとこういうみえ方をするんだろうなと思いながら聞いていた。「餅は餅屋」とはよく言った言葉だ。自分がよくわからない分野のお仕事を依頼もしくは話すときは、自分たちの立場でそういった外部の専門家を雇うことの重要性も同時に理解できた。私は課題管理の専門家としてそういうポジションを作っていきたい。&lt;/p></content></item><item><title>リフレクションにはまった半日</title><link>/diary/posts/2023/0703/</link><pubDate>Mon, 03 Jul 2023 07:35:25 +0900</pubDate><guid>/diary/posts/2023/0703/</guid><description>23時に寝て5時に起きて6時半に起きた。ストレッチで伸ばしたせいか、いつもよりよく眠れた。先週は主に旅行へ行っていて非日常でリフレッシュした。今朝は朝ご飯に野菜サラダを作って食べて7時半には家を出れた。
非同期の ldap 検索の api 先日送った go-ldap の pr を完了して無事にマージされた。送ったときはチャンネル用いた検索 api だったのだけど、それから設計を議論して非同期検索を主とした api として生まれ変わった。レビューに1ヶ月を要したものの2人のメンバーから approve をもらって無事にマージできた。
Add search asynchronously with context #440 この一歩は大きくてこの機能を突破口にうちらの要件に足りない機能を実装していく。プロトコル部分の修正が過去の draft 実装から参考にできるのであれば今週中にはまた pr を送りたい。
mongodb の unmarshal 実装 mongodb-driver での bson の marshal/unmarshal を実装する。mongo-driver/bson に unmarshal について2つの interface が紹介されている。
type Unmarshaler interface { UnmarshalBSON([]byte) error } type ValueUnmarshaler interface { UnmarshalBSONValue(bsontype.Type, []byte) error } bson の byte 列を unmarshal するにあたり、構造体そのものには UnmarshalBSON() を、構造体のメンバーには UnmarshalBSONValue() を使う。これでうまくいきそうに思えたのだけど、interface を介したデコード処理で意図した振る舞いにならないことに気付いた。mongodb-driver は decode/unmarshal 処理を reflect を使って実装している。要件の詳細は省く (interface を使いたい背景がある) が、再現コードが次になる。</description><content>&lt;p>23時に寝て5時に起きて6時半に起きた。ストレッチで伸ばしたせいか、いつもよりよく眠れた。先週は主に旅行へ行っていて非日常でリフレッシュした。今朝は朝ご飯に野菜サラダを作って食べて7時半には家を出れた。&lt;/p>
&lt;h2 id="非同期の-ldap-検索の-api">非同期の ldap 検索の api&lt;/h2>
&lt;p>先日送った &lt;a href="/diary/diary/posts/2023/0601/#チャンネルを用いた-ldap-検索の-api">go-ldap の pr&lt;/a> を完了して無事にマージされた。送ったときはチャンネル用いた検索 api だったのだけど、それから設計を議論して非同期検索を主とした api として生まれ変わった。レビューに1ヶ月を要したものの2人のメンバーから approve をもらって無事にマージできた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/go-ldap/ldap/pull/440">Add search asynchronously with context #440&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>この一歩は大きくてこの機能を突破口にうちらの要件に足りない機能を実装していく。プロトコル部分の修正が過去の draft 実装から参考にできるのであれば今週中にはまた pr を送りたい。&lt;/p>
&lt;h2 id="mongodb-の-unmarshal-実装">mongodb の unmarshal 実装&lt;/h2>
&lt;p>mongodb-driver での bson の marshal/unmarshal を実装する。&lt;a href="https://pkg.go.dev/go.mongodb.org/mongo-driver/bson">mongo-driver/bson&lt;/a> に unmarshal について2つの interface が紹介されている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Unmarshaler&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">UnmarshalBSON&lt;/span>([]&lt;span style="color:#66d9ef">byte&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ValueUnmarshaler&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">UnmarshalBSONValue&lt;/span>(&lt;span style="color:#a6e22e">bsontype&lt;/span>.&lt;span style="color:#a6e22e">Type&lt;/span>, []&lt;span style="color:#66d9ef">byte&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>bson の byte 列を unmarshal するにあたり、構造体そのものには &lt;code>UnmarshalBSON()&lt;/code> を、構造体のメンバーには &lt;code>UnmarshalBSONValue()&lt;/code> を使う。これでうまくいきそうに思えたのだけど、interface を介したデコード処理で意図した振る舞いにならないことに気付いた。mongodb-driver は decode/unmarshal 処理を &lt;a href="https://pkg.go.dev/reflect">reflect&lt;/a> を使って実装している。要件の詳細は省く (interface を使いたい背景がある) が、再現コードが次になる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">MyInterface&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">MyFunc&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">MyType&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">MyType&lt;/span>) &lt;span style="color:#a6e22e">MyFunc&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">tMyInterface&lt;/span> = &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">TypeOf&lt;/span>((&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">MyInterface&lt;/span>)(&lt;span style="color:#66d9ef">nil&lt;/span>)).&lt;span style="color:#a6e22e">Elem&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">some&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>.&lt;span style="color:#a6e22e">Convert&lt;/span>(&lt;span style="color:#a6e22e">tMyInterface&lt;/span>).&lt;span style="color:#a6e22e">MethodByName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;MyFunc&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;got&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">f&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;=========&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t1&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">MyType&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">some&lt;/span>(&lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">ValueOf&lt;/span>(&lt;span style="color:#a6e22e">t1&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// the zero value of an interface is nil
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">t2&lt;/span> &lt;span style="color:#a6e22e">MyInterface&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">some&lt;/span>(&lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">ValueOf&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">t2&lt;/span>).&lt;span style="color:#a6e22e">Elem&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このコードを実行すると次のエラーになる。&lt;/p>
&lt;pre tabindex="0">&lt;code>panic: reflect: Method on nil interface value
&lt;/code>&lt;/pre>&lt;p>ドキュメントにも interface の nil の値を呼び出すと panic するよと書いてある。&lt;/p>
&lt;blockquote>
&lt;p>Method returns a function value corresponding to v&amp;rsquo;s i&amp;rsquo;th method. The arguments to a Call on the returned function should not include a receiver; the returned function will always use v as the receiver. Method panics if i is out of range or if v is a nil interface value.&lt;/p>
&lt;p>&lt;a href="https://pkg.go.dev/reflect#Value.Method">https://pkg.go.dev/reflect#Value.Method&lt;/a>&lt;/p>
&lt;/blockquote></content></item><item><title>敦盛を観てきた</title><link>/diary/posts/2023/0702/</link><pubDate>Sun, 02 Jul 2023 10:35:51 +0900</pubDate><guid>/diary/posts/2023/0702/</guid><description>18時半に寝て22時過ぎに起きて、もう今日は無理やと諦めてまた寝て、6時に起きて8時に起きた。車移動の旅の疲れか、いつもよりよく眠れた。
能: 敦盛 13時から 第四回《真花演能会》能『敦盛』 を カフーツのいとうさんとながいさん と一緒に観に行ってきた。結論から書くと、私にとってはとてもよかった。前に1度能を観た体験 があるのでその前回の体験との相対比較で観ることもできた。前回は能を2つ、狂言を1つ観たことで時間がかかった。今回は狂言と能を1つずつのセットで観た。初心者は観ていて疲れるのでこのぐらいの規模で十分に思えた。
一番よいSS席が8,000円と、前回よりも少し高い価格設定となっている。その価格差からサービスレベルの違いも伺えた。お客さんの入りは会場のキャパシティに対して7割程度といったところかな。
スマホとイヤホンで能の解説が聞けるアプリを提供 イヤホンをもっていなかったので聞いてないが、、、 朝原さんの解説が丁寧でわかりやすかった この解説もスマホから英語で聞けると話されていた 資料は英語併記で当日のアナウンスも日本語の後に英語で行っていた 詞章 (ししょう) という、能の台本が資料に添付されていた 謡曲 (ようきょく) とも呼ばれるみたい 詞章があることで演者が何を言っているのか把握しやすい。例えば、次のような台詞を能の独特の謡の表現で聞き分けるのは素人にはなかなか難しい。というのは現代語ではないという点と、明確な1文になっていなかったり、単語の区切りがよく分からなかったりするから。次の台詞から「に」「の」とかで終わっている文章があることがわかる。
ワキ: さては其夜の御遊びなりけり城のうちに。さも面白き笛の音の。よせ手の陣まで聞こえしは
シテ詞: それこそさしも敦盛が。最後まで持ちし笛竹の
ワキ: 音も一節を唄ひ遊ぶ
必ずしもこの台詞通りに謡をしているわけでもないことがわかった。少し飛ばしたり、書いていない内容を謳うこともあった。あくまでこれは参考程度のもののようだ。感覚的には8割ぐらい資料の沿って進んでいた気がする。
前回はちょくちょく寝落ちしてしまっていた。今回は詞章をみながら能を観ていたのでずっと集中して観ることができた。詞章ばかり目で追っていると演者の動きをみれないのでそのバランスも大事だと理解できた。本当はこの内容を暗記して観るのが正しいのだろう。寝落ちしたのは中盤の、詞章がなかった地元に住む男との会話の部分だけだった。
後半は囃子方の演奏とシテの演者の舞いが盛り上がっていって、最後の最後は場面が変わって少し落として終わったように思える。そこら辺はよくわからなかったけど、後半の盛り上がりにかけての、蓮生 (熊谷次郎直実) と敦盛との和解の雰囲気が表れていた。敦盛は2番目物の修羅能にカテゴライズされる。このカテゴリは修羅道に落ちた苦しみを描く作品が多い中、敦盛を討った蓮生が供養し、敦盛が成仏していく？ような終わり方になっていてよい結末のような話しになる。内容も後味がよいものだった。
狂言: 雷 能と狂言をセットにして 能楽 と呼ぶ。日記での紹介は前後しているが、現代では狂言を演じてから能をするという順番になるらしい。狂言は20-30分、能は1.5時間程度といった時間配分になる。現代に当てはめると、狂言はコメディ、能はシリアスなドラマといった演目になる。
雷 (神鳴) という狂言をみた。狂言は演劇に近いので詞章がなくてもだいたい雰囲気はわかるし、笑えるところもわかる。腰痛を治してもらった雷神が医者にお礼を求められ、持ち合わせがなかったことから「近日眷属を連れてそなたの住処に落ちて礼をする」と言うが、医者は「それは迷惑でござる。」と言い放った瞬間が一番受けていた気がする。一緒に行ったながいさんは狂言の方がわかりやすくてよいと話されていた。
大鼓方 太鼓 (たいこ) じゃなくて大鼓 (おおつづみ)、漢字が似ているのでたまに間違う。
前回に能を観に行ったときも 谷口正壽 さんが大鼓を演奏されていた。おそらく関西圏で活動されているのだと推測する。前回はパンフレットに囃子方の名前がなかったけれど、今回は囃子方の演者も記載されていたので名前を確認して調べてみた。観終わった後にいとうさんも谷口さんの演奏について言及しているのを聞いて、私も前回初めて聴いたのに囃子方すごいと印象に残ったのは谷口さんの技量の高さによるものだとわかった。素人が聴いていてもこの人は別格のように感じた。ホームページのプロフィールによると昭和54年 (当時10歳) から能楽石井流大鼓方に入門とあるので40年以上のキャリアになる。
谷口さんが大鼓で出演している能を探したら次がヒットした。前に菊慈童 の動画を見返したときも感じたが、臨場感が全然違う。動画だと谷口さんの凄さは霞んでしまう。生で聴いた大鼓と掛け声の聴こえ方とは異なる。
能楽と郷土を知る会 能楽を演じる前に30分ほど予備知識や背景などを解説する時間がある。今回は 朝原広基 さんという能楽研究家が演目の解説を行った。肩書きの通り、当時の時代背景や風習などをとても丁寧に解説してくれてわかりやすかった。
パンフレットに入っていたチラシをみて 能楽と郷土を知る会 というイベントを運営されているようだ。まさに私が関心のある内容なので今度遊びに行ってみようと思う。
ストレッチ 土曜日は旅行へ行っていたので日曜日の夜にストレッチへ。首が痛いとトレーナーさんに伝えたら、いつもはやらない首のストレッチもやってくれた。感謝。体調の悪いところを伝えるとそこもストレッチしてみてくれるのが助かる。車を運転する姿勢はどうしても前傾姿勢になるのと、運転は意識を集中しないとできないことからデスクワークよりも上位の負荷がかかるらしい。神戸から高知まで何時間もかけて運転しているし、移動の時間は車に乗せてもらうことも多かったので全身あちこちに張りがあって、とくに上半身が全般的に硬かった。今日の開脚幅は開始前151cmで、ストレッチ後154cmだった。いつもとは違う状況での計測なので数値は悪化した。</description><content>&lt;p>18時半に寝て22時過ぎに起きて、もう今日は無理やと諦めてまた寝て、6時に起きて8時に起きた。車移動の旅の疲れか、いつもよりよく眠れた。&lt;/p>
&lt;h2 id="能-敦盛">能: 敦盛&lt;/h2>
&lt;p>13時から &lt;a href="https://shin-flower.jp/events/2023/0419143830.html">第四回《真花演能会》能『敦盛』&lt;/a> を &lt;a href="/diary/diary/posts/2023/0603/#カフーツさん訪問">カフーツのいとうさんとながいさん&lt;/a> と一緒に観に行ってきた。結論から書くと、私にとってはとてもよかった。&lt;a href="/diary/diary/posts/2023/0603/">前に1度能を観た体験&lt;/a> があるのでその前回の体験との相対比較で観ることもできた。前回は能を2つ、狂言を1つ観たことで時間がかかった。今回は狂言と能を1つずつのセットで観た。初心者は観ていて疲れるのでこのぐらいの規模で十分に思えた。&lt;/p>
&lt;p>一番よいSS席が8,000円と、前回よりも少し高い価格設定となっている。その価格差からサービスレベルの違いも伺えた。お客さんの入りは会場のキャパシティに対して7割程度といったところかな。&lt;/p>
&lt;ul>
&lt;li>スマホとイヤホンで能の解説が聞けるアプリを提供
&lt;ul>
&lt;li>イヤホンをもっていなかったので聞いてないが、、、&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>朝原さんの解説が丁寧でわかりやすかった
&lt;ul>
&lt;li>この解説もスマホから英語で聞けると話されていた&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>資料は英語併記で当日のアナウンスも日本語の後に英語で行っていた&lt;/li>
&lt;li>詞章 (ししょう) という、能の台本が資料に添付されていた
&lt;ul>
&lt;li>&lt;a href="https://ja.wikipedia.org/wiki/%E8%AC%A1%E6%9B%B2">謡曲 (ようきょく)&lt;/a> とも呼ばれるみたい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>詞章があることで演者が何を言っているのか把握しやすい。例えば、次のような台詞を能の独特の謡の表現で聞き分けるのは素人にはなかなか難しい。というのは現代語ではないという点と、明確な1文になっていなかったり、単語の区切りがよく分からなかったりするから。次の台詞から「に」「の」とかで終わっている文章があることがわかる。&lt;/p>
&lt;blockquote>
&lt;p>ワキ: さては其夜の御遊びなりけり城のうちに。さも面白き笛の音の。よせ手の陣まで聞こえしは&lt;br />
シテ詞: それこそさしも敦盛が。最後まで持ちし笛竹の&lt;br />
ワキ: 音も一節を唄ひ遊ぶ&lt;br />&lt;/p>
&lt;/blockquote>
&lt;p>必ずしもこの台詞通りに謡をしているわけでもないことがわかった。少し飛ばしたり、書いていない内容を謳うこともあった。あくまでこれは参考程度のもののようだ。感覚的には8割ぐらい資料の沿って進んでいた気がする。&lt;/p>
&lt;p>前回はちょくちょく寝落ちしてしまっていた。今回は詞章をみながら能を観ていたのでずっと集中して観ることができた。詞章ばかり目で追っていると演者の動きをみれないのでそのバランスも大事だと理解できた。本当はこの内容を暗記して観るのが正しいのだろう。寝落ちしたのは中盤の、詞章がなかった地元に住む男との会話の部分だけだった。&lt;/p>
&lt;p>後半は囃子方の演奏とシテの演者の舞いが盛り上がっていって、最後の最後は場面が変わって少し落として終わったように思える。そこら辺はよくわからなかったけど、後半の盛り上がりにかけての、蓮生 (熊谷次郎直実) と敦盛との和解の雰囲気が表れていた。敦盛は2番目物の修羅能にカテゴライズされる。このカテゴリは修羅道に落ちた苦しみを描く作品が多い中、敦盛を討った蓮生が供養し、敦盛が成仏していく？ような終わり方になっていてよい結末のような話しになる。内容も後味がよいものだった。&lt;/p>
&lt;h3 id="狂言-雷">狂言: 雷&lt;/h3>
&lt;p>能と狂言をセットにして &lt;a href="https://ja.wikipedia.org/wiki/%E8%83%BD%E6%A5%BD">能楽&lt;/a> と呼ぶ。日記での紹介は前後しているが、現代では狂言を演じてから能をするという順番になるらしい。狂言は20-30分、能は1.5時間程度といった時間配分になる。現代に当てはめると、狂言はコメディ、能はシリアスなドラマといった演目になる。&lt;/p>
&lt;p>&lt;a href="https://ja.wikipedia.org/wiki/%E9%9B%B7_(%E7%8B%82%E8%A8%80)">雷 (神鳴)&lt;/a> という狂言をみた。狂言は演劇に近いので詞章がなくてもだいたい雰囲気はわかるし、笑えるところもわかる。腰痛を治してもらった雷神が医者にお礼を求められ、持ち合わせがなかったことから「近日眷属を連れてそなたの住処に落ちて礼をする」と言うが、医者は「それは迷惑でござる。」と言い放った瞬間が一番受けていた気がする。一緒に行ったながいさんは狂言の方がわかりやすくてよいと話されていた。&lt;/p>
&lt;h3 id="大鼓方">大鼓方&lt;/h3>
&lt;p>太鼓 (たいこ) じゃなくて大鼓 (おおつづみ)、漢字が似ているのでたまに間違う。&lt;/p>
&lt;p>前回に能を観に行ったときも &lt;a href="http://t-masatoshi.com/">谷口正壽&lt;/a> さんが大鼓を演奏されていた。おそらく関西圏で活動されているのだと推測する。前回はパンフレットに囃子方の名前がなかったけれど、今回は囃子方の演者も記載されていたので名前を確認して調べてみた。観終わった後にいとうさんも谷口さんの演奏について言及しているのを聞いて、私も前回初めて聴いたのに囃子方すごいと印象に残ったのは谷口さんの技量の高さによるものだとわかった。素人が聴いていてもこの人は別格のように感じた。ホームページのプロフィールによると昭和54年 (当時10歳) から能楽石井流大鼓方に入門とあるので40年以上のキャリアになる。&lt;/p>
&lt;p>谷口さんが大鼓で出演している能を探したら次がヒットした。&lt;a href="/diary/diary/posts/2023/0603/">前に菊慈童&lt;/a> の動画を見返したときも感じたが、臨場感が全然違う。動画だと谷口さんの凄さは霞んでしまう。生で聴いた大鼓と掛け声の聴こえ方とは異なる。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/z-h6r-JH37w" allowfullscreen title="高砂">&lt;/iframe>
&lt;/div>
&lt;h3 id="能楽と郷土を知る会">能楽と郷土を知る会&lt;/h3>
&lt;p>能楽を演じる前に30分ほど予備知識や背景などを解説する時間がある。今回は &lt;a href="https://nohgaku-kyodo.com/performer/asahara-hiroki">朝原広基&lt;/a> さんという能楽研究家が演目の解説を行った。肩書きの通り、当時の時代背景や風習などをとても丁寧に解説してくれてわかりやすかった。&lt;/p>
&lt;p>パンフレットに入っていたチラシをみて &lt;a href="https://nohgaku-kyodo.com/">能楽と郷土を知る会&lt;/a> というイベントを運営されているようだ。まさに私が関心のある内容なので今度遊びに行ってみようと思う。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>土曜日は旅行へ行っていたので日曜日の夜にストレッチへ。首が痛いとトレーナーさんに伝えたら、いつもはやらない首のストレッチもやってくれた。感謝。体調の悪いところを伝えるとそこもストレッチしてみてくれるのが助かる。車を運転する姿勢はどうしても前傾姿勢になるのと、運転は意識を集中しないとできないことからデスクワークよりも上位の負荷がかかるらしい。神戸から高知まで何時間もかけて運転しているし、移動の時間は車に乗せてもらうことも多かったので全身あちこちに張りがあって、とくに上半身が全般的に硬かった。今日の開脚幅は開始前151cmで、ストレッチ後154cmだった。いつもとは違う状況での計測なので数値は悪化した。&lt;/p></content></item><item><title>最終日の移動</title><link>/diary/posts/2023/0701/</link><pubDate>Sat, 01 Jul 2023 10:33:47 +0900</pubDate><guid>/diary/posts/2023/0701/</guid><description>0時に寝て3時と6時に起きて7時に起きた。まぁまぁ眠れたと思う。
朝食バイキング 昨日はスマホもってなくて写真を撮れなかったが、今日はもってきてちゃんと撮ったよ。朝ご飯がめっちゃよかった。さすが高級旅館。朝からこんな贅沢が許されるのか (言い過ぎ？) という種類の食材とおいしさの朝ごはんだった。私は普段から外食が多いため、食生活がよくない。野菜をたくさんとれることに大きな価値をおく。あとサラダが大好き。いろんな野菜をとれてよかった。写真に写っている10倍ぐらいの食材があって、オムレツのような簡単な料理はシェフにお願いすれば作ってくれるらしい。和と洋の両方の食材があったと思う。地元の特産品もたくさんあった。団体だとみんなどんな朝ご飯をトッピングしているか、どういう組み合わせにしているかをみて次の参考にできたりもして楽しめた。
バイキングの食材をどう組み合わせるのかというのも創作の1つに思えた。
桂浜へ 高知と言えば桂浜、桂浜と言えば坂本竜馬かな。お約束の竜馬像を見に行ってきた。残念ながら雨だったので桂浜のあちこちを散策しようという雰囲気ではなかった。
当初の予定では 桂浜水族館 へ行くといった話しもあったんだけど、時間の都合で見送られた。私は水族館が大好きなので昨日に続いてもう1つ行けると期待していたのに残念だった。
ドライブイン 西村食堂 という、近くの食堂で少し早めのお昼ご飯を食べる。朝ご飯のバイキングをがっつり食べた人にはややきつそうだった。お刺し身定食が山盛りで出てくる感じの食堂でよかったと思う。私の記憶では高知で食べたお刺身の中ではこの食堂に出てきたものがもっとも鮮度がよくておいしかったと思う。次の高知へ来たときはお腹を空かせて山盛りのお刺身定食を頼んでみたいと思う。私は海鮮丼という普通サイズの、お刺身が4種のった丼ぶりを注文した。これもコスパよくて十分においしかった。
ここで12時をまわっていたので私は社員旅行から離脱して帰路に入ることにした。
海洋堂スペースファクトリー南国の寄り道 帰路の途中だったので 海洋堂スペースファクトリー南国 にも立ち寄ってみた。1F と 2F は無料で見学できて写真も撮ってよいと教えていただいた。有償のガイドツアーのようなものもやっていて関心はあったけど、時間もないので断念した。30分ほどささっと見て回った。アニメや漫画が好きな人には楽しめそう。
車移動 12時55分に海洋堂さんを出発して13時53分に 吉野川サービスエリア で休憩した。雨降りの視界の悪さ、トンネルの多さなどもあって疲労と眠気で運転はかなり辛かった。2-3回ぐらいは車体が揺れて車道にある線をオーバーしそうになった。休むと一時的に眠気はしゃきっとするものの、30分ほど走っているとまたすぐにどんよりしてきて辛かった。私にとってはトンネルを走るのがとても疲れたように思えた。1人だから気楽に運転できたけど、人を乗せていたら怖い運転だったと思う。
14時13分に吉野川サービスエリアを出て、15時16分に淡路島の実家に着いた。高速道路でガーッと走っていたので高速道路を降りた後の実家までの道のりもわりとスピードを出してしまっていた。疲労もあって感覚が狂ってしまっていた。実家には誰もいなかったので30分ほど横になって休んでいた。このままいると寝てしまいそうだったので起き上がって16時7分に実家を出発した。
休息したのと、ここから神戸まで帰る道のりはよく知っている道筋で慣れているせいか、四国を走っていたときよりも頭も眠気も冴えて集中して帰ってくることができた。知らない道を走るというのも疲れるのかもしれないと思えた。17時37分に神戸のマンションへたどり着くことができた。
休憩も含めて5-6時間あれば高知市から神戸市まで車で移動できることもわかった。こうやって移動時間の記録を残しておけば、また何かのイベントのときに役立つかもしれない。</description><content>&lt;p>0時に寝て3時と6時に起きて7時に起きた。まぁまぁ眠れたと思う。&lt;/p>
&lt;h2 id="朝食バイキング">朝食バイキング&lt;/h2>
&lt;p>昨日はスマホもってなくて写真を撮れなかったが、今日はもってきてちゃんと撮ったよ。朝ご飯がめっちゃよかった。さすが高級旅館。朝からこんな贅沢が許されるのか (言い過ぎ？) という種類の食材とおいしさの朝ごはんだった。私は普段から外食が多いため、食生活がよくない。野菜をたくさんとれることに大きな価値をおく。あとサラダが大好き。いろんな野菜をとれてよかった。写真に写っている10倍ぐらいの食材があって、オムレツのような簡単な料理はシェフにお願いすれば作ってくれるらしい。和と洋の両方の食材があったと思う。地元の特産品もたくさんあった。団体だとみんなどんな朝ご飯をトッピングしているか、どういう組み合わせにしているかをみて次の参考にできたりもして楽しめた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0701_breakfast.jpg"/>
&lt;/figure>
&lt;p>バイキングの食材をどう組み合わせるのかというのも創作の1つに思えた。&lt;/p>
&lt;h2 id="桂浜へ">桂浜へ&lt;/h2>
&lt;p>高知と言えば桂浜、桂浜と言えば坂本竜馬かな。お約束の竜馬像を見に行ってきた。残念ながら雨だったので桂浜のあちこちを散策しようという雰囲気ではなかった。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0701_ryoma.jpg"/>
&lt;/figure>
&lt;p>当初の予定では &lt;a href="https://katurahama-aq.jp/">桂浜水族館&lt;/a> へ行くといった話しもあったんだけど、時間の都合で見送られた。私は水族館が大好きなので昨日に続いてもう1つ行けると期待していたのに残念だった。&lt;/p>
&lt;p>&lt;a href="https://tabelog.com/kochi/A3901/A390101/39007101/">ドライブイン 西村食堂&lt;/a> という、近くの食堂で少し早めのお昼ご飯を食べる。朝ご飯のバイキングをがっつり食べた人にはややきつそうだった。お刺し身定食が山盛りで出てくる感じの食堂でよかったと思う。私の記憶では高知で食べたお刺身の中ではこの食堂に出てきたものがもっとも鮮度がよくておいしかったと思う。次の高知へ来たときはお腹を空かせて山盛りのお刺身定食を頼んでみたいと思う。私は海鮮丼という普通サイズの、お刺身が4種のった丼ぶりを注文した。これもコスパよくて十分においしかった。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0701_don.jpg"/>
&lt;/figure>
&lt;p>ここで12時をまわっていたので私は社員旅行から離脱して帰路に入ることにした。&lt;/p>
&lt;h2 id="海洋堂スペースファクトリー南国の寄り道">海洋堂スペースファクトリー南国の寄り道&lt;/h2>
&lt;p>帰路の途中だったので &lt;a href="https://kaiyodo-sfn.jp/">海洋堂スペースファクトリー南国&lt;/a> にも立ち寄ってみた。1F と 2F は無料で見学できて写真も撮ってよいと教えていただいた。有償のガイドツアーのようなものもやっていて関心はあったけど、時間もないので断念した。30分ほどささっと見て回った。アニメや漫画が好きな人には楽しめそう。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0701_godzilla.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2023/0701_tachikoma.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2023/0701_fate.jpg"/>
&lt;/figure>
&lt;h2 id="車移動">車移動&lt;/h2>
&lt;p>12時55分に海洋堂さんを出発して13時53分に &lt;a href="https://www.w-holdings.co.jp/sapa/2484.html">吉野川サービスエリア&lt;/a> で休憩した。雨降りの視界の悪さ、トンネルの多さなどもあって疲労と眠気で運転はかなり辛かった。2-3回ぐらいは車体が揺れて車道にある線をオーバーしそうになった。休むと一時的に眠気はしゃきっとするものの、30分ほど走っているとまたすぐにどんよりしてきて辛かった。私にとってはトンネルを走るのがとても疲れたように思えた。1人だから気楽に運転できたけど、人を乗せていたら怖い運転だったと思う。&lt;/p>
&lt;p>14時13分に吉野川サービスエリアを出て、15時16分に淡路島の実家に着いた。高速道路でガーッと走っていたので高速道路を降りた後の実家までの道のりもわりとスピードを出してしまっていた。疲労もあって感覚が狂ってしまっていた。実家には誰もいなかったので30分ほど横になって休んでいた。このままいると寝てしまいそうだったので起き上がって16時7分に実家を出発した。&lt;/p>
&lt;p>休息したのと、ここから神戸まで帰る道のりはよく知っている道筋で慣れているせいか、四国を走っていたときよりも頭も眠気も冴えて集中して帰ってくることができた。知らない道を走るというのも疲れるのかもしれないと思えた。17時37分に神戸のマンションへたどり着くことができた。&lt;/p>
&lt;p>休憩も含めて5-6時間あれば高知市から神戸市まで車で移動できることもわかった。こうやって移動時間の記録を残しておけば、また何かのイベントのときに役立つかもしれない。&lt;/p></content></item></channel></rss>