<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2024/11 on</title><link>/diary/dates/2024/11/</link><description>Recent content in 2024/11 on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 17 Nov 2024 17:40:36 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/dates/2024/11/index.xml" rel="self" type="application/rss+xml"/><item><title>壁打ちとシャトル</title><link>/diary/posts/2024/1117/</link><pubDate>Sun, 17 Nov 2024 17:40:36 +0900</pubDate><guid>/diary/posts/2024/1117/</guid><description>今日のバドミントン練習は壁打ちを1時間ほどした。複数のシャトルを使ってそれぞれの違いなどを検証してみた。シャトルによって壁打ちのやり方が変わってくることがわかっておもしろかった。壁打ちを終えてから軽く縄跳びをした。
壁打ちの研究 昨日の続き 。動画の解説やアドバイスを参考にしながらいろいろなシャトルで壁打ちしてみた。
バドミントンを始めるときに amazon でシャトルを検索すると、いろいろな種類のシャトルが販売されている。どのシャトルを買ってよいか最初のうちはよくわからなかった。いくつか買ってみて試すうちに違いがわかってきてシャトル選びのノウハウも得た。あらためて単価を算出してみるとアウトドア向けは専用設計だから割高になってしまうことも伺える。
エアシャトル (アウトドア向け, 単価660円) メイビスフィールド2 (アウトドア向け, 単価440円) エアロセンサ200 (水鳥羽, 練習用シャトル, 単価225円) メイビス40 (ナイロンシャトル, 単価233円) メイビスフィールド (アウトドア向け, 単価380円) 体育館でバドミントンをするならエアロセンサを買えばよい。ナイロンシャトルは耐久性があると聞くが、趣味でやる程度ならそんなに消耗しないのでエアロセンサで数ヶ月は使えると思う。アウトドア向けならメイビスフィールド2がよく反発して遠くへ飛ぶので打ち合いしやすいと思う。エアシャトルはコルクが硬くて重い分だけもっとも飛距離も速度もでると推測されるが、まだ打ち合いしたことがないので未知数でもある。
閑話休題。それぞれのシャトルで壁打ちしてみた所感をまとめておく。コルクの素材によって壁にぶつかったときの反発力が大きく違う。反発力の強いものから並べると次になる。
エアシャトル メイビスフィールド2 ↑ 壁との距離を変える基準 ↓ メイビスフィールド エアロセンサ200, メイビス40 しかし、エアシャトルはコルクが硬いせいか、どこに跳ね返ってくるかわからない。エアシャトルはリフティングするのももっとも難しい。うまく打たないと変な方向に飛んでいってしまう。そしてエアシャトルで壁打ちするのは物理的に無理だと思う。そうすると、メイビスフィールド2がもっとも反発力が強いと言える。エアロセンサ (またはメイビス40) の反発力はもっとも弱い。同じ位置で壁打ちすると、メイビスフィールド2と比べてシャトルが返ってくるまでに時間の余裕があることに気付いた。メイビスフィールド2で壁打ちするときは壁からさらに離れて距離を取るとよいことに気付いた。メイビスフィールドはメイビスフィールド2と比べて反発力が弱い。反発力が弱いという特性は必ずしもデメリットではなく、キャッチの練習はしやすいし、ロビングで真上に上げるときも強く打っても高くあがりにくいため (天井に届きにくい) 、ラケットのスィートスポットで捉えられているかどうかのチェックもしやすい。シャトルそれぞれの特性にあわせた向いている練習というのはあるように思える。
エアロセンサを打つと カコン という乾いた音が鳴り、打っていて気持ちがよい。壁打ちするとシャトルは傷んでしまうかもしれないが、単価比較したらエアロセンサは安いから打ち心地を優先するのもよい。もしくはメイビス40もあまり反発しないから耐久性のあるナイロンシャトルで代用するのもよいかもしれない。まだそんなに使っていないから水鳥羽とナイロンシャトルの耐久性の違いを私はまだ実感できていない。1日数十分程度の練習ならエアロセンサでもよいかもしれないと考え始めた。
壁打ちしていて打ち返しやすいパターンとそうではないパターンがある。打ち返しやすいのは、自分の身体の前の得意なポイントにシャトルを呼び込めているとうまく打ち返せる。動画でもシャトルの前に移動するのが大事だと説明していた理由を理解できた。シャトルが返ってきたところにラケットを伸ばしてただ打ち返そうとしてもうまく打てない。シャトルが返ってくる軌道を見定めて、自分が打ちやすいポイントにシャトルを呼び込んでからラケットを振り抜いて打ち返す方がうまくいく。そのためにはフットワークを使ってカラダをシャトルの前へ移動させないといけない状況もある。ラケットを振り抜くと速度が速くなってしまい、メイビスフィールド2だと距離を取らないとその次のシャトルが戻ってくる速度に対応できない。
壁打ちするときにグリップの上下の握る位置を変えてみるとラケットコントロールも変わってくる。グリップの上の方をもつ (ラケットを短くもつ) と小回りがきくからコントロール重視になる。グリップの下の方をもつ (ラケットを長くもつ) と回転半径が大きくなる分パワーを加えたり、遠くのシャトルに届くといった利点がある。ある動画ではシングルスのときは長めに、ダブルスのときは短めといった持ち方をするという一般論や、昔はラケットが重かったから短めにもつのが主流だったが、いまのラケットはフルカーボン素材で軽くなったから長めにもつプレイヤーが増えたという話しも聞いた。いくつか動画をみた感じだと、グリップの持ち方や握る位置はそれぞれのプレイヤーが別々のことを言っていて自分にあったスタイルならそれでよいように思えた。基本はイースタン／ウェスタングリップになるが、個々人が打ちやすいように微妙にカスタマイズしているように思えた。動画の解説者によっては握り方はそれほど重要ではないと説明している人もいた。イースタングリップを意識しながら持ちつつ、真正面のシャトルをウェスタングリップに持ち替えて打つといった練習もしてみたが、なかなか壁打ちが続かない。何度も反復してその切り替えに慣れていく必要がある。
シャトルとスピード番号 以前 ラケットを購入した バドミントンプロショップチャンプ で練習用シャトルを1ダース購入した。paypay で買うと2,850円、現金で買うと2,700円になる。いま買ったらスピード番号が4だった。9月末にラケットと一緒に購入したときのスピード番号は3だった。バドミントンのシャトルにはスピード番号というのがあり、気温によって速度ではなく飛ぶ飛距離に差が生じるために飛びやすさを季節によって飛びやすさ調整しているらしい。スピード番号が高い方が遠くまで飛ぶ = 気温が低いときに使うシャトルになるとのこと。いまは暖かいから3番と4番があればだいたい1年は過ごせそう。
バドミントンシャトルのスピード番号って？意味や見方を完全解説 シャトルすくい 次の動画の1分20秒からシャトルをすくう練習方法を説明している。上手い人はラケットでシャトルを拾っている。これも初心者は簡単にはできない。これならオフィスや家でも練習できるかもしれない。その続きに相手がいるときの基礎打ちで同じ位置にシャトルを打ち返す練習を紹介している。壁打ちをしていて同じ位置に狙って返すことが全然できないと気付いてきた。野球のキャッチボールでも同じようなことを言われるが、特定の位置へ狙って返すというのは球技を問わず基本の所作になるんだなと思えた。</description><content>&lt;p>今日のバドミントン練習は壁打ちを1時間ほどした。複数のシャトルを使ってそれぞれの違いなどを検証してみた。シャトルによって壁打ちのやり方が変わってくることがわかっておもしろかった。壁打ちを終えてから軽く縄跳びをした。&lt;/p>
&lt;h2 id="壁打ちの研究">壁打ちの研究&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2024/1116/#壁打ちの研究">昨日の続き&lt;/a> 。動画の解説やアドバイスを参考にしながらいろいろなシャトルで壁打ちしてみた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2024/1117_shuttle.jpg"/>
&lt;/figure>
&lt;p>バドミントンを始めるときに amazon でシャトルを検索すると、いろいろな種類のシャトルが販売されている。どのシャトルを買ってよいか最初のうちはよくわからなかった。いくつか買ってみて試すうちに違いがわかってきてシャトル選びのノウハウも得た。あらためて単価を算出してみるとアウトドア向けは専用設計だから割高になってしまうことも伺える。&lt;/p>
&lt;ul>
&lt;li>エアシャトル (アウトドア向け, 単価660円)&lt;/li>
&lt;li>メイビスフィールド2 (アウトドア向け, 単価440円)&lt;/li>
&lt;li>エアロセンサ200 (水鳥羽, 練習用シャトル, 単価225円)&lt;/li>
&lt;li>メイビス40 (ナイロンシャトル, 単価233円)&lt;/li>
&lt;li>メイビスフィールド (アウトドア向け, 単価380円)&lt;/li>
&lt;/ul>
&lt;p>体育館でバドミントンをするならエアロセンサを買えばよい。ナイロンシャトルは耐久性があると聞くが、趣味でやる程度ならそんなに消耗しないのでエアロセンサで数ヶ月は使えると思う。アウトドア向けならメイビスフィールド2がよく反発して遠くへ飛ぶので打ち合いしやすいと思う。エアシャトルはコルクが硬くて重い分だけもっとも飛距離も速度もでると推測されるが、まだ打ち合いしたことがないので未知数でもある。&lt;/p>
&lt;p>閑話休題。それぞれのシャトルで壁打ちしてみた所感をまとめておく。コルクの素材によって壁にぶつかったときの反発力が大きく違う。反発力の強いものから並べると次になる。&lt;/p>
&lt;ol>
&lt;li>エアシャトル&lt;/li>
&lt;li>メイビスフィールド2&lt;/li>
&lt;li>↑ 壁との距離を変える基準 ↓&lt;/li>
&lt;li>メイビスフィールド&lt;/li>
&lt;li>エアロセンサ200, メイビス40&lt;/li>
&lt;/ol>
&lt;p>しかし、エアシャトルはコルクが硬いせいか、どこに跳ね返ってくるかわからない。エアシャトルはリフティングするのももっとも難しい。うまく打たないと変な方向に飛んでいってしまう。そしてエアシャトルで壁打ちするのは物理的に無理だと思う。そうすると、メイビスフィールド2がもっとも反発力が強いと言える。エアロセンサ (またはメイビス40) の反発力はもっとも弱い。同じ位置で壁打ちすると、メイビスフィールド2と比べてシャトルが返ってくるまでに時間の余裕があることに気付いた。メイビスフィールド2で壁打ちするときは壁からさらに離れて距離を取るとよいことに気付いた。メイビスフィールドはメイビスフィールド2と比べて反発力が弱い。反発力が弱いという特性は必ずしもデメリットではなく、キャッチの練習はしやすいし、ロビングで真上に上げるときも強く打っても高くあがりにくいため (天井に届きにくい) 、ラケットのスィートスポットで捉えられているかどうかのチェックもしやすい。シャトルそれぞれの特性にあわせた向いている練習というのはあるように思える。&lt;/p>
&lt;p>エアロセンサを打つと &lt;em>カコン&lt;/em> という乾いた音が鳴り、打っていて気持ちがよい。壁打ちするとシャトルは傷んでしまうかもしれないが、単価比較したらエアロセンサは安いから打ち心地を優先するのもよい。もしくはメイビス40もあまり反発しないから耐久性のあるナイロンシャトルで代用するのもよいかもしれない。まだそんなに使っていないから水鳥羽とナイロンシャトルの耐久性の違いを私はまだ実感できていない。1日数十分程度の練習ならエアロセンサでもよいかもしれないと考え始めた。&lt;/p>
&lt;p>壁打ちしていて打ち返しやすいパターンとそうではないパターンがある。打ち返しやすいのは、自分の身体の前の得意なポイントにシャトルを呼び込めているとうまく打ち返せる。動画でもシャトルの前に移動するのが大事だと説明していた理由を理解できた。シャトルが返ってきたところにラケットを伸ばしてただ打ち返そうとしてもうまく打てない。シャトルが返ってくる軌道を見定めて、自分が打ちやすいポイントにシャトルを呼び込んでからラケットを振り抜いて打ち返す方がうまくいく。そのためにはフットワークを使ってカラダをシャトルの前へ移動させないといけない状況もある。ラケットを振り抜くと速度が速くなってしまい、メイビスフィールド2だと距離を取らないとその次のシャトルが戻ってくる速度に対応できない。&lt;/p>
&lt;p>壁打ちするときにグリップの上下の握る位置を変えてみるとラケットコントロールも変わってくる。グリップの上の方をもつ (ラケットを短くもつ) と小回りがきくからコントロール重視になる。グリップの下の方をもつ (ラケットを長くもつ) と回転半径が大きくなる分パワーを加えたり、遠くのシャトルに届くといった利点がある。ある動画ではシングルスのときは長めに、ダブルスのときは短めといった持ち方をするという一般論や、昔はラケットが重かったから短めにもつのが主流だったが、いまのラケットはフルカーボン素材で軽くなったから長めにもつプレイヤーが増えたという話しも聞いた。いくつか動画をみた感じだと、グリップの持ち方や握る位置はそれぞれのプレイヤーが別々のことを言っていて自分にあったスタイルならそれでよいように思えた。基本はイースタン／ウェスタングリップになるが、個々人が打ちやすいように微妙にカスタマイズしているように思えた。動画の解説者によっては握り方はそれほど重要ではないと説明している人もいた。イースタングリップを意識しながら持ちつつ、真正面のシャトルをウェスタングリップに持ち替えて打つといった練習もしてみたが、なかなか壁打ちが続かない。何度も反復してその切り替えに慣れていく必要がある。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2024/1117_racket.jpg"/>
&lt;/figure>
&lt;h2 id="シャトルとスピード番号">シャトルとスピード番号&lt;/h2>
&lt;p>以前 &lt;a href="/diary/diary/posts/2024/0927/#ラケット選び">ラケットを購入した&lt;/a> &lt;a href="http://www.pro-champ.com/">バドミントンプロショップチャンプ&lt;/a> で練習用シャトルを1ダース購入した。paypay で買うと2,850円、現金で買うと2,700円になる。いま買ったらスピード番号が4だった。9月末にラケットと一緒に購入したときのスピード番号は3だった。バドミントンのシャトルにはスピード番号というのがあり、気温によって速度ではなく飛ぶ飛距離に差が生じるために飛びやすさを季節によって飛びやすさ調整しているらしい。スピード番号が高い方が遠くまで飛ぶ = 気温が低いときに使うシャトルになるとのこと。いまは暖かいから3番と4番があればだいたい1年は過ごせそう。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.e-rslshop.com/shuttle_speed/">バドミントンシャトルのスピード番号って？意味や見方を完全解説&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="シャトルすくい">シャトルすくい&lt;/h2>
&lt;p>次の動画の1分20秒からシャトルをすくう練習方法を説明している。上手い人はラケットでシャトルを拾っている。これも初心者は簡単にはできない。これならオフィスや家でも練習できるかもしれない。その続きに相手がいるときの基礎打ちで同じ位置にシャトルを打ち返す練習を紹介している。壁打ちをしていて同じ位置に狙って返すことが全然できないと気付いてきた。野球のキャッチボールでも同じようなことを言われるが、特定の位置へ狙って返すというのは球技を問わず基本の所作になるんだなと思えた。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/-Gpc67VTT4c" allowfullscreen title="【初心者必見！！】ラケットの持ち方とグリップの握り方の練習方法　バドミントン">&lt;/iframe>
&lt;/div></content></item><item><title>壁打ちの研究</title><link>/diary/posts/2024/1116/</link><pubDate>Sat, 16 Nov 2024 14:19:11 +0900</pubDate><guid>/diary/posts/2024/1116/</guid><description>今日のバドミントン練習は公園と近所のビルの軒下で1時間ほど行った。
みなとのもりの運動 前回の所感 。エアシャトルで打ち合いしてみたくて企画した。知人が来てくれる予定ではあったけど、急遽予定が変わってしまったようでドタキャンになって普通に運動して練習してきた。
ジョギング3周 1.4 km、縄跳び15分で1561回、今日は土の上で跳んでみた。ひざへの負担は低いものの、リズムがあわなくてコンクリートの上で跳ぶよりも多くミスした。回数も150回ほど少なくなった。跳ぶ地面がコンクリートと土で大きく異なることを実感した。個々の運動の合間にストレッチもたくさん行った。
その後にバドミントン練習をした。エアシャトルでリフティングを10分ほどやってウォームアップしてから ひとり練習の動画でみたロビング を試してみた。調子に乗っていたらエアシャトルを木の枝に引っ掛けてしまった。冬になったら葉が落ちて自然に落ちてくるかなぁ。エアバドミントンを行う風速の基準は3-4m/sが基準になる。今日の風速は4-5m程度だった。雨が降る少し前から風が出てきたときはシャトルが流れ過ぎてちょっと無理だなと感じた。ロビング (頭上にシャトルを打ち上げる) を向かい風に向かって打つことでまさに動画でみた通りにシャトルが戻ってきておもしろかった。なかなか連続ではできないが、よい角度で思いっきり打つとちょうど同じ位置にシャトルが戻ってきてもう1度打ち込みできる。
雨が降りそうな雰囲気が出てきたところで公園から撤収していつものビルの軒下へ。屋根があるから雨天練習場でもある。メイビス2で壁打ちを15分した。前にみた壁打ちの動画 でまずは10回続けられるのを目指そうと解説していたのでそれを目標に練習してみる。うまくいくときで10回程度、ほとんどは数回で失敗してしまう。壁打ちすら私にとってはかなり難しい。これはエアシャトルでリフティングを始めたときも ほとんどは20回も続かなかった 。その後1ヶ月ほど練習して、いまは大抵50-100回は続くし、うまくいくと300回を超える。壁打ちも10回も続かないところから練習して回数を増やしていく。
シャトルを壁に打ちつけても器物破損にはならないとは思うが、ビルの関係者にとって気持ちのよいものではないだろう。いつかビルの壁打ちは怒られるかもしれない。そのときのために壁打ちできる他の場所も探していこうと思う。また時間のあるときに屋根と照明があって人がこない壁を探しにいこうと思う。
壁打ちの研究 壁打ちがおもしろくなってきたのでまた別の動画をみた。
この動画のコーチもよい音を鳴らして壁打ちしている。上級者はみんなシャトルを打ったときによい音が鳴る。この音を鳴らしたいというのが私の目標でもある。動画で壁打ちのスキルアップをレベル別に解説している。こういうのはとても助かる。足はスタンスを広めにし、リアクションステップがよいとのこと。リアクションステップとは、相手が打った瞬間に着地してその反動を利用して動くという動き出しを速くするためのフットワーク。足音を小さくなっているとよいらしい。
レベル1 得意な手の持ち方でずっと打つ 私はバックで打つ方が得意になる (多くの人がそう？) 壁の同じ位置に打てば同じところへ返ってくるのを自分のペースで打つ 速く打てば速く返ってきて打ち返しが間に合わない レベル2 バックとフォアを交互に打つ シャトルをクロスに打ち返すと交互になる ラケットの持ち替えをがんばるのが大事 私はフォアとバックのラケットの持ち方を理解できていない バドミントン教室へ行ったときに教えてもらおうと思う レベル3 壁に近づく シャトルの方へ自分が動いていく 上級者向け 壁から返ってきたコルクが自分の方を向くまで待って打つ リフティングしていてもコルクが下を向いているときと曲がっていたりスピンしたりしてるとミスをする確率が高くなるのを私も実感している 自分の打った速さで返ってくる、仕掛ける・流すの実践練習をする 打つポイントを決めてその位置へ動く ストレッチ 今週は木・金以外の曜日を運動した。今日も午前中はしっかりカラダを動かしたのでストレッチで状況を確認するにはちょうどよい。ころんで痛めた腰の張りはなくなっていた。右足全般の関節周りがやや痛いのと、左右ともに太ももの後ろの張りが強かったように思う。週の半ばでは右足の前太ももの張りもあったものの、その後の運動や休養で回復したのか、今日のストレッチ中にはとくに張りを感じなかった。木・金を休んだせいか、よい感じに筋肉痛の疲労も抜けていたように感じた。今日の開脚幅は開始前150cmで、ストレッチ後154cmだった。今週はストレッチもたくさん出来たので開脚幅の数字は伸びるかと期待したが、いつも通りだった。</description><content>&lt;p>今日のバドミントン練習は公園と近所のビルの軒下で1時間ほど行った。&lt;/p>
&lt;h2 id="みなとのもりの運動">みなとのもりの運動&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2024/1005/#みなとのもりの運動">前回の所感&lt;/a> 。エアシャトルで打ち合いしてみたくて企画した。知人が来てくれる予定ではあったけど、急遽予定が変わってしまったようでドタキャンになって普通に運動して練習してきた。&lt;/p>
&lt;p>ジョギング3周 1.4 km、縄跳び15分で1561回、今日は土の上で跳んでみた。ひざへの負担は低いものの、リズムがあわなくてコンクリートの上で跳ぶよりも多くミスした。回数も150回ほど少なくなった。跳ぶ地面がコンクリートと土で大きく異なることを実感した。個々の運動の合間にストレッチもたくさん行った。&lt;/p>
&lt;p>その後にバドミントン練習をした。エアシャトルでリフティングを10分ほどやってウォームアップしてから &lt;a href="/diary/diary/posts/2024/0928/#ひとりでできるバドミントンの練習">ひとり練習の動画でみたロビング&lt;/a> を試してみた。調子に乗っていたらエアシャトルを木の枝に引っ掛けてしまった。冬になったら葉が落ちて自然に落ちてくるかなぁ。エアバドミントンを行う風速の基準は3-4m/sが基準になる。今日の風速は4-5m程度だった。雨が降る少し前から風が出てきたときはシャトルが流れ過ぎてちょっと無理だなと感じた。ロビング (頭上にシャトルを打ち上げる) を向かい風に向かって打つことでまさに動画でみた通りにシャトルが戻ってきておもしろかった。なかなか連続ではできないが、よい角度で思いっきり打つとちょうど同じ位置にシャトルが戻ってきてもう1度打ち込みできる。&lt;/p>
&lt;p>雨が降りそうな雰囲気が出てきたところで公園から撤収していつものビルの軒下へ。屋根があるから雨天練習場でもある。メイビス2で壁打ちを15分した。&lt;a href="/diary/diary/posts/2024/1113/#壁打ち">前にみた壁打ちの動画&lt;/a> でまずは10回続けられるのを目指そうと解説していたのでそれを目標に練習してみる。うまくいくときで10回程度、ほとんどは数回で失敗してしまう。壁打ちすら私にとってはかなり難しい。これはエアシャトルでリフティングを始めたときも &lt;a href="/diary/diary/posts/2024/1011/">ほとんどは20回も続かなかった&lt;/a> 。その後1ヶ月ほど練習して、いまは大抵50-100回は続くし、うまくいくと300回を超える。壁打ちも10回も続かないところから練習して回数を増やしていく。&lt;/p>
&lt;p>シャトルを壁に打ちつけても器物破損にはならないとは思うが、ビルの関係者にとって気持ちのよいものではないだろう。いつかビルの壁打ちは怒られるかもしれない。そのときのために壁打ちできる他の場所も探していこうと思う。また時間のあるときに屋根と照明があって人がこない壁を探しにいこうと思う。&lt;/p>
&lt;h2 id="壁打ちの研究">壁打ちの研究&lt;/h2>
&lt;p>壁打ちがおもしろくなってきたのでまた別の動画をみた。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/AIPq8Vn1q70" allowfullscreen title="じーまコーチ登場！レベル別壁打ち練習法を紹介（バドミントン）">&lt;/iframe>
&lt;/div>
&lt;p>この動画のコーチもよい音を鳴らして壁打ちしている。上級者はみんなシャトルを打ったときによい音が鳴る。この音を鳴らしたいというのが私の目標でもある。動画で壁打ちのスキルアップをレベル別に解説している。こういうのはとても助かる。足はスタンスを広めにし、リアクションステップがよいとのこと。リアクションステップとは、相手が打った瞬間に着地してその反動を利用して動くという動き出しを速くするためのフットワーク。足音を小さくなっているとよいらしい。&lt;/p>
&lt;h4 id="レベル1">レベル1&lt;/h4>
&lt;ul>
&lt;li>得意な手の持ち方でずっと打つ
&lt;ul>
&lt;li>私はバックで打つ方が得意になる (多くの人がそう？)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>壁の同じ位置に打てば同じところへ返ってくるのを自分のペースで打つ
&lt;ul>
&lt;li>速く打てば速く返ってきて打ち返しが間に合わない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="レベル2">レベル2&lt;/h4>
&lt;ul>
&lt;li>バックとフォアを交互に打つ&lt;/li>
&lt;li>シャトルをクロスに打ち返すと交互になる&lt;/li>
&lt;li>ラケットの持ち替えをがんばるのが大事
&lt;ul>
&lt;li>私はフォアとバックのラケットの持ち方を理解できていない&lt;/li>
&lt;li>バドミントン教室へ行ったときに教えてもらおうと思う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="レベル3">レベル3&lt;/h4>
&lt;ul>
&lt;li>壁に近づく&lt;/li>
&lt;li>シャトルの方へ自分が動いていく&lt;/li>
&lt;/ul>
&lt;h4 id="上級者向け">上級者向け&lt;/h4>
&lt;ul>
&lt;li>壁から返ってきたコルクが自分の方を向くまで待って打つ
&lt;ul>
&lt;li>リフティングしていてもコルクが下を向いているときと曲がっていたりスピンしたりしてるとミスをする確率が高くなるのを私も実感している&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>自分の打った速さで返ってくる、仕掛ける・流すの実践練習をする&lt;/li>
&lt;li>打つポイントを決めてその位置へ動く&lt;/li>
&lt;/ul>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週は木・金以外の曜日を運動した。今日も午前中はしっかりカラダを動かしたのでストレッチで状況を確認するにはちょうどよい。ころんで痛めた腰の張りはなくなっていた。右足全般の関節周りがやや痛いのと、左右ともに太ももの後ろの張りが強かったように思う。週の半ばでは右足の前太ももの張りもあったものの、その後の運動や休養で回復したのか、今日のストレッチ中にはとくに張りを感じなかった。木・金を休んだせいか、よい感じに筋肉痛の疲労も抜けていたように感じた。今日の開脚幅は開始前150cmで、ストレッチ後154cmだった。今週はストレッチもたくさん出来たので開脚幅の数字は伸びるかと期待したが、いつも通りだった。&lt;/p></content></item><item><title>モジュールは複数データソースに依存させない</title><link>/diary/posts/2024/1115/</link><pubDate>Fri, 15 Nov 2024 16:24:57 +0900</pubDate><guid>/diary/posts/2024/1115/</guid><description>デバッグしていて遅くなり、帰ってから慌ててスーパーに買いものへ行ったりしていて時間がなくなったので今日はバドミントン練習をお休み。
データベースとメッセージキューの整合性を考える 昨日の続き。トランザクションを導入したことで mongodb と mq でのデータフローが意図せず変わってしまっていることが調査してわかった。
従来は次のように動いていた。
api サーバーがエントリー情報を受け取る api ハンドラーがエントリー情報を mongodb に保存する api ハンドラーがメッセージを管理するジョブ情報を mongodb に保存する api ハンドラー内の producer が rabbitmq にメッセージを送信する consumer がメッセージを受信する consumer が mongodb からジョブ情報を参照する api ハンドラーがレスポンスを返す consumer がメッセージを処理する トランザクションを導入したことで mongodb にデータが保存されるタイミングが変わってしまった。
api サーバーがエントリー情報を受け取る api ハンドラーがトランザクションを開始する api ハンドラーがエントリー情報を mongodb に保存する (この時点では未コミット) api ハンドラーがメッセージを管理するジョブ情報を mongodb に保存する (この時点では未コミット) api ハンドラー内の producer が rabbitmq にメッセージを送信する consumer がメッセージを受信する consumer が mongodb からジョブ情報を参照するが、トランザクションがコミットされていない可能性がある api ハンドラーがトランザクションをコミットする api ハンドラーがレスポンスを返す consumer でエラーが発生する 処理の流れを見直して次のように改修した。内部実装の都合があってやや煩雑な変更となった。</description><content>&lt;p>デバッグしていて遅くなり、帰ってから慌ててスーパーに買いものへ行ったりしていて時間がなくなったので今日はバドミントン練習をお休み。&lt;/p>
&lt;h2 id="データベースとメッセージキューの整合性を考える">データベースとメッセージキューの整合性を考える&lt;/h2>
&lt;p>昨日の続き。トランザクションを導入したことで mongodb と mq でのデータフローが意図せず変わってしまっていることが調査してわかった。&lt;/p>
&lt;p>従来は次のように動いていた。&lt;/p>
&lt;ol>
&lt;li>api サーバーがエントリー情報を受け取る&lt;/li>
&lt;li>api ハンドラーがエントリー情報を mongodb に保存する&lt;/li>
&lt;li>api ハンドラーがメッセージを管理するジョブ情報を mongodb に保存する&lt;/li>
&lt;li>api ハンドラー内の producer が rabbitmq にメッセージを送信する&lt;/li>
&lt;li>consumer がメッセージを受信する&lt;/li>
&lt;li>consumer が mongodb からジョブ情報を参照する&lt;/li>
&lt;li>api ハンドラーがレスポンスを返す&lt;/li>
&lt;li>consumer がメッセージを処理する&lt;/li>
&lt;/ol>
&lt;p>トランザクションを導入したことで mongodb にデータが保存されるタイミングが変わってしまった。&lt;/p>
&lt;ol>
&lt;li>api サーバーがエントリー情報を受け取る&lt;/li>
&lt;li>api ハンドラーがトランザクションを開始する&lt;/li>
&lt;li>api ハンドラーがエントリー情報を mongodb に保存する (この時点では未コミット)&lt;/li>
&lt;li>api ハンドラーがメッセージを管理するジョブ情報を mongodb に保存する (この時点では未コミット)&lt;/li>
&lt;li>api ハンドラー内の producer が rabbitmq にメッセージを送信する&lt;/li>
&lt;li>consumer がメッセージを受信する&lt;/li>
&lt;li>consumer が mongodb からジョブ情報を参照するが、トランザクションがコミットされていない可能性がある&lt;/li>
&lt;li>api ハンドラーがトランザクションをコミットする&lt;/li>
&lt;li>api ハンドラーがレスポンスを返す&lt;/li>
&lt;li>consumer でエラーが発生する&lt;/li>
&lt;/ol>
&lt;p>処理の流れを見直して次のように改修した。内部実装の都合があってやや煩雑な変更となった。&lt;/p>
&lt;ol>
&lt;li>api サーバーがエントリー情報を受け取る&lt;/li>
&lt;li>api ハンドラーがトランザクションを開始する&lt;/li>
&lt;li>api ハンドラーがエントリー情報を mongodb に保存する (この時点では未コミット)&lt;/li>
&lt;li>api ハンドラーがメッセージを管理するジョブ情報を mongodb に保存する (この時点では未コミット)&lt;/li>
&lt;li>api ハンドラーがトランザクションをコミットする&lt;/li>
&lt;li>api ハンドラー内の producer が rabbitmq にメッセージを送信する&lt;/li>
&lt;li>consumer がメッセージを受信する&lt;/li>
&lt;li>consumer が mongodb からジョブ情報を参照する&lt;/li>
&lt;li>api ハンドラーがレスポンスを返す&lt;/li>
&lt;li>consumer がメッセージを処理する&lt;/li>
&lt;/ol>
&lt;p>これは単純にトランザクションのコミットタイミングと mq へのメッセージ送受信のタイミングを見直せばよいという話しではない。本質的に mongodb で管理しているジョブ情報と rabbitmq へ送信しているメッセージの整合性を保証することはできないということを表している。producer はメッセージ送信に失敗する可能性があるから、そのときにジョブ情報を書き換える必要はあるが、その前にトランザクションをコミットしてしまっているため、api ハンドラー内でデータのコミットタイミングが複数になってしまう。トランザクションを導入したメリットが失われてしまい、&lt;a href="https://en.wikipedia.org/wiki/Unit_of_work">Unit of work&lt;/a> のパターンも実現できない。consumer の処理に必要な情報を mongodb にあるデータとメッセージの2つに分割しているところが整合性の問題を引き起こしている。アーキテクチャ上の設計ミスと言える。consumer の処理に必要な情報はすべてメッセージに含めてしまい、メッセージを処理した後に mongodb に結果を書き込むといった設計にすべきだった。&lt;/p>
&lt;p>初期実装のときからジョブ情報を mongodb で管理する必要はあるのか？という懸念を私はもっていた。要件や機能が曖昧な状況でもあり、メンバーもなんとなく db に管理情報を残しておいた方が将来的な変更に対応できて安心といった理由だったと思う。当時は整合性の問題が起きることに、私が気付いていなかったためにこの設計を見直すように強く指摘できなかった。トランザクションを導入したことで consumer が必要な情報を db に保持すると、db とメッセージ処理のタイミングにおける整合性の問題が生じるという学びになった。&lt;/p>
&lt;p>いまとなってはこのジョブ情報を使う他の機能もあるため、この設計を見直すことはできない。今後の開発プロジェクトで db とメッセージを扱うときはこの経験を活かすためにふりかえりとして書いておく。&lt;/p></content></item><item><title>久しぶりにコードリーティングイベントに参加</title><link>/diary/posts/2024/1114/</link><pubDate>Thu, 14 Nov 2024 16:14:07 +0900</pubDate><guid>/diary/posts/2024/1114/</guid><description>今日のバドミントン練習はメイビス2で壁当てを15分した。勉強会帰りで疲れていたせいか、夜遅くのせいか、あまりカラダが動かなかった。日付が変わってから 中学校体育館の12月予約 で4つ抽選申し込みをしていたが、すべて落選していた。2ヶ月続けてすべて落選したことからそうそう予約は取れないことがわかってきた。
昼間は昨日の続きで mongodb のトランザクション導入のマージリクエストをレビューしてもらって、テスト環境へデプロイして検証していた。id 連携のシステム間連携において意図した振る舞いにならなくてその調査をしていた。チーム勉強会で mongodb のトランザクション周りのいろいろをメンバーに共有した。17時前にお仕事を終えて定期歯科検診へ行ってきた。前回対応してくれたスタッフさんで「また少し痩せました？」と聞かれた。8月からだとほとんど変わっていないと思うが、今週は普段より多く運動できているのでその影響もあるのかもしれない。30分ほどですんなり終わった。
コードリーティング 歯医者を終えてから KOBE.go #7 - コードリーディング会 へ行ってきた。移転したハックバーへ行くのも初めて。三ノ宮駅から10分ほど歩いた場所の、こじんまりしたバーだった。10人程度入ったらいっぱいかな。おそらく集客や家賃などを考えたら妥当なサイズと立地なのだと推測する。いまは水-日の18-23時、月・火がお休みという営業時間らしい。私が着いたときはカウンターが埋まっていたのでテーブル席で発表を聞きながらコメントしたりしていた。私以外の参加者の大半は学生さん、みんな20代の方ばかりだったと思う。kyoto.go で発表したりしていたせいか、kobe.go のスタッフさんにも名前を覚えてもらえていた。若い人がコミュニティを運営しているのはよいことだと私は考えている。年寄りの役割としてなにかしらコンテンツを提供することで協力できればと思う。
コードリーティングはおくたにさんという方が実装している gomoqt という Media over QUIC (MOQ) のサーバー／クライアントを題材とした。京都大学の学生さんで学生起業しているのかな？音声配信サービスをやりたいから moq ライブラリを開発していると話されていて、プロトコルを勉強して自前でサーバー／クライアントのライブラリを実装しようとするの、すごいなと思って聞いていた。quic のライブラリを使ってサーバー／クライアントを実装しているようにみえた。ソケット (トランスポート層) より上のレイヤーを実装すればよいならそんなに難しくはない。
発表資料: gomoqt Media over QUIC in Golang github: gomoqt 私が想定するコードリーティングのイベントではなかったものの、参加者は誰も moq プロトコルを知らないので moq の背景や現状、プロトコル仕様を共有するようなイベントになっていた。それはそれで私は知らないことばかりなのでへーと思いながら聞いていた。21時半頃にはイベントも終わり、イベント告知や雑談モードになっていって、若い人たちの中におっさんがいても迷惑かなと22時前には退出した。帰る前にワンドリンク (Go という名前の柑橘系カクテル) の料金として700円を支払う。個人的にお酒を飲みながらの勉強会はあまり好きではない。気分や雰囲気でぐだぐだになる印象があって学ぶときは学び、終わってから飲みに行って雑談するといった切り替えが私は好み。バーで勉強会をするという雰囲気もあまり馴染めない。単純に狭いし暗いし椅子よくないし作業に集中しにくいという所感かな。</description><content>&lt;p>今日のバドミントン練習はメイビス2で壁当てを15分した。勉強会帰りで疲れていたせいか、夜遅くのせいか、あまりカラダが動かなかった。日付が変わってから &lt;a href="/diary/diary/posts/2024/1014/#中学校体育館の夜間開放">中学校体育館の12月予約&lt;/a> で4つ抽選申し込みをしていたが、すべて落選していた。2ヶ月続けてすべて落選したことからそうそう予約は取れないことがわかってきた。&lt;/p>
&lt;p>昼間は昨日の続きで mongodb のトランザクション導入のマージリクエストをレビューしてもらって、テスト環境へデプロイして検証していた。id 連携のシステム間連携において意図した振る舞いにならなくてその調査をしていた。チーム勉強会で mongodb のトランザクション周りのいろいろをメンバーに共有した。17時前にお仕事を終えて定期歯科検診へ行ってきた。前回対応してくれたスタッフさんで「また少し痩せました？」と聞かれた。8月からだとほとんど変わっていないと思うが、今週は普段より多く運動できているのでその影響もあるのかもしれない。30分ほどですんなり終わった。&lt;/p>
&lt;h2 id="コードリーティング">コードリーティング&lt;/h2>
&lt;p>歯医者を終えてから &lt;a href="https://kobego.connpass.com/event/332586/">KOBE.go #7 - コードリーディング会&lt;/a> へ行ってきた。移転したハックバーへ行くのも初めて。三ノ宮駅から10分ほど歩いた場所の、こじんまりしたバーだった。10人程度入ったらいっぱいかな。おそらく集客や家賃などを考えたら妥当なサイズと立地なのだと推測する。いまは水-日の18-23時、月・火がお休みという営業時間らしい。私が着いたときはカウンターが埋まっていたのでテーブル席で発表を聞きながらコメントしたりしていた。私以外の参加者の大半は学生さん、みんな20代の方ばかりだったと思う。kyoto.go で発表したりしていたせいか、kobe.go のスタッフさんにも名前を覚えてもらえていた。若い人がコミュニティを運営しているのはよいことだと私は考えている。年寄りの役割としてなにかしらコンテンツを提供することで協力できればと思う。&lt;/p>
&lt;p>コードリーティングはおくたにさんという方が実装している gomoqt という Media over QUIC (MOQ) のサーバー／クライアントを題材とした。京都大学の学生さんで学生起業しているのかな？音声配信サービスをやりたいから moq ライブラリを開発していると話されていて、プロトコルを勉強して自前でサーバー／クライアントのライブラリを実装しようとするの、すごいなと思って聞いていた。quic のライブラリを使ってサーバー／クライアントを実装しているようにみえた。ソケット (トランスポート層) より上のレイヤーを実装すればよいならそんなに難しくはない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.canva.com/design/DAGWblHSGeg/iAhvEHKme9u4m6OhW_yflg/edit">発表資料: gomoqt Media over QUIC in Golang&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/OkutaniDaichi0106/gomoqt">github: gomoqt&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>私が想定するコードリーティングのイベントではなかったものの、参加者は誰も moq プロトコルを知らないので moq の背景や現状、プロトコル仕様を共有するようなイベントになっていた。それはそれで私は知らないことばかりなのでへーと思いながら聞いていた。21時半頃にはイベントも終わり、イベント告知や雑談モードになっていって、若い人たちの中におっさんがいても迷惑かなと22時前には退出した。帰る前にワンドリンク (Go という名前の柑橘系カクテル) の料金として700円を支払う。個人的にお酒を飲みながらの勉強会はあまり好きではない。気分や雰囲気でぐだぐだになる印象があって学ぶときは学び、終わってから飲みに行って雑談するといった切り替えが私は好み。バーで勉強会をするという雰囲気もあまり馴染めない。単純に狭いし暗いし椅子よくないし作業に集中しにくいという所感かな。&lt;/p></content></item><item><title>シャトルの壁打ちの研究</title><link>/diary/posts/2024/1113/</link><pubDate>Wed, 13 Nov 2024 19:40:42 +0900</pubDate><guid>/diary/posts/2024/1113/</guid><description>今日のバドミントン練習はエアシャトルでリフティングを10分した。連続最大回数は275回。リフティングをしてからシャトルを真上に強く打つのを10分、シャトルを反発力の高いメイビス2にして壁打ちを15分していた。シャトルを強く打つときにチカラの入れ方や角度などを考えながら打ってみた。壁打ちも練習していて2パターン思いついた。1つは壁の近くでひたすらシャトルを打ち返すやり方、もう1つは少し壁から距離をとって真上にシャトルをあげて落ちてきたシャトルを思いっきり振り抜いて壁に向かって打つ。壁から返ってきたシャトルをまた真上にあげて、思いっきり振り抜くのを繰り返す。このやり方だと素振りの延長上でラケットを振る練習になるような気がする。
昨日まではジョギングしてからバドミントンの練習をしてきた。今日は逆にバドミントンの練習をしてからジョギングと縄跳びをした。お仕事を終えたのが20時頃で21時にバドミントン練習場 (ビルの軒下) の照明がおちる。だから先に照明が消える前に先にバドミントンの練習をすることにした。おかげで壁打ちのやり方をひらめいたりして約1時間集中して練習していた。その後、みなとのもり公園へ移動してジョギング2周 (0.9km) と縄跳び15分で1770回跳べた。昨日からの筋肉痛も続いているので軽めに運動しようと思ったものの、縄跳びは少し回数が増えた。休憩時間を少し減らしたり、ミスが減ったり、バドミントン後のせいか腕がだるくて縄をまわすリズムにのれなくてペース落ちたりと、昨日とはコンディションがいろいろ違うなと思いながら数字をみるとおもしろい。
お仕事は昨日の続きで mongodb のトランザクションのデバッグをずっとやってた。デバッグしての結論として middleware で unit of work を実装するのは断念した。
メガネ探し 視力が 0.3 ぐらいで有事のときに困る状況を想定してメガネを1つもっておこうと考えている。やぎさんにも相談していくつかアドバイスをいただいた。動体視力も落ちていてバドミントンをしていて動くシャトルを空振りすることも多い。もしかしたらメガネをした方がシャトルとの距離感もつかめるのかも？と思いスポーツ用のメガネがどうなのかも調べてみた。結論から言うと、スポーツ用途ならメガネよりもコンタクトレンズの方がよいらしい。コンタクトレンズをするほど視力低下に困っているわけでもないからまずはメガネを買って必要なときだけ使うといった運用を考えている。
バドミントンどきに適したメガネ＆保護眼鏡 壁打ち 次のバドミントンの練習方法として壁打ちがよいんじゃないかと調べてみた。上級者の動画をみると、近くで力強く打ち返して壁打ちしている。これはめちゃくちゃ難しい。シャトルが速過ぎて全然おいつかない。実際にやっている人をみるとこのぐらいはできるんやとわかってやり方のイメージづくりにはよい。
もう1つ。室内でスポンジボールを打ち返す壁打ちを取り上げているサイトもあった。これならオフィスでもできるんじゃないかとベルボールを amazon で発注してみた。出張にももっていってホテルでやってもよいかもしれない。
スポンジボールで壁打ちをやってみた≪ベルバド≫</description><content>&lt;p>今日のバドミントン練習はエアシャトルでリフティングを10分した。連続最大回数は275回。リフティングをしてからシャトルを真上に強く打つのを10分、シャトルを反発力の高いメイビス2にして壁打ちを15分していた。シャトルを強く打つときにチカラの入れ方や角度などを考えながら打ってみた。壁打ちも練習していて2パターン思いついた。1つは壁の近くでひたすらシャトルを打ち返すやり方、もう1つは少し壁から距離をとって真上にシャトルをあげて落ちてきたシャトルを思いっきり振り抜いて壁に向かって打つ。壁から返ってきたシャトルをまた真上にあげて、思いっきり振り抜くのを繰り返す。このやり方だと素振りの延長上でラケットを振る練習になるような気がする。&lt;/p>
&lt;p>昨日まではジョギングしてからバドミントンの練習をしてきた。今日は逆にバドミントンの練習をしてからジョギングと縄跳びをした。お仕事を終えたのが20時頃で21時にバドミントン練習場 (ビルの軒下) の照明がおちる。だから先に照明が消える前に先にバドミントンの練習をすることにした。おかげで壁打ちのやり方をひらめいたりして約1時間集中して練習していた。その後、みなとのもり公園へ移動してジョギング2周 (0.9km) と縄跳び15分で1770回跳べた。昨日からの筋肉痛も続いているので軽めに運動しようと思ったものの、縄跳びは少し回数が増えた。休憩時間を少し減らしたり、ミスが減ったり、バドミントン後のせいか腕がだるくて縄をまわすリズムにのれなくてペース落ちたりと、昨日とはコンディションがいろいろ違うなと思いながら数字をみるとおもしろい。&lt;/p>
&lt;p>お仕事は昨日の続きで mongodb のトランザクションのデバッグをずっとやってた。デバッグしての結論として middleware で unit of work を実装するのは断念した。&lt;/p>
&lt;h2 id="メガネ探し">メガネ探し&lt;/h2>
&lt;p>視力が 0.3 ぐらいで有事のときに困る状況を想定してメガネを1つもっておこうと考えている。やぎさんにも相談していくつかアドバイスをいただいた。動体視力も落ちていてバドミントンをしていて動くシャトルを空振りすることも多い。もしかしたらメガネをした方がシャトルとの距離感もつかめるのかも？と思いスポーツ用のメガネがどうなのかも調べてみた。結論から言うと、スポーツ用途ならメガネよりもコンタクトレンズの方がよいらしい。コンタクトレンズをするほど視力低下に困っているわけでもないからまずはメガネを買って必要なときだけ使うといった運用を考えている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://amagan.jp/badominntonnmegane/">バドミントンどきに適したメガネ＆保護眼鏡&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="壁打ち">壁打ち&lt;/h2>
&lt;p>次のバドミントンの練習方法として壁打ちがよいんじゃないかと調べてみた。上級者の動画をみると、近くで力強く打ち返して壁打ちしている。これはめちゃくちゃ難しい。シャトルが速過ぎて全然おいつかない。実際にやっている人をみるとこのぐらいはできるんやとわかってやり方のイメージづくりにはよい。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/wjHObGsg07E" allowfullscreen title="一人でこっそり練習「壁打ち」でレシーブを鍛える！">&lt;/iframe>
&lt;/div>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/03VxIKM7NCg" allowfullscreen title="一人でも出来る上達の方法！これも絶対みるべし❗️❗️壁打ちの極意👍👍">&lt;/iframe>
&lt;/div>
&lt;p>もう1つ。室内でスポンジボールを打ち返す壁打ちを取り上げているサイトもあった。これならオフィスでもできるんじゃないかとベルボールを amazon で発注してみた。出張にももっていってホテルでやってもよいかもしれない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://machida-badminton.com/bellbad-training/">スポンジボールで壁打ちをやってみた≪ベルバド≫&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>mongodb のトランザクション調査</title><link>/diary/posts/2024/1112/</link><pubDate>Tue, 12 Nov 2024 08:50:36 +0900</pubDate><guid>/diary/posts/2024/1112/</guid><description>今日のバドミントン練習はエアシャトルでリフティングを10分、連続最大回数は120回ほど、ショートサーブ30回した。フットワーク練習はお休み。筋肉痛もあったから、みなとのもり公園をジョギングで3周 1.4km、縄跳び15分で1712回だった。縄跳びも2ヶ月ぶり。8月に過去最高が1838回に対して、2ヶ月ぶりにやって2分弱の休憩、十数回のミスがあっても1700回を超えるんやと思って少し驚いた。8月に比べたらいまは涼しいから記録が伸びるのもある。ジョギングで足が筋肉痛になると走るよりも縄跳びの方が負担が小さい。昨日と同じように運動してストレッチして十分にカラダを動かした。
トランザクションとコールバック お仕事は昨日の続きでリクエスト途中のサービス終了したときに web api ハンドラーの処理が途中でキャンセルされ、そのために内部のデータが不整合になることがわかった。データを不整合にしないため mongodb のトランザクション の仕組みを調べてデバッグしたりしていた。echo のミドルウェアで Unit of work を実装できないかをプロトタイプ実装していた。
基本は次のように callback 関数を渡せばトランザクションに失敗したときにリトライもしてくれて便利なのだけど、いろいろ api サーバーの既存アーキテクチャの都合もあってこれは使えないことがわかった。
session, err := client.StartSession() if err != nil { return err } defer session.EndSession(ctx) result, err := session.WithTransaction(ctx, callback)</description><content>&lt;p>今日のバドミントン練習はエアシャトルでリフティングを10分、連続最大回数は120回ほど、ショートサーブ30回した。フットワーク練習はお休み。筋肉痛もあったから、みなとのもり公園をジョギングで3周 1.4km、縄跳び15分で1712回だった。縄跳びも2ヶ月ぶり。8月に過去最高が1838回に対して、2ヶ月ぶりにやって2分弱の休憩、十数回のミスがあっても1700回を超えるんやと思って少し驚いた。8月に比べたらいまは涼しいから記録が伸びるのもある。ジョギングで足が筋肉痛になると走るよりも縄跳びの方が負担が小さい。昨日と同じように運動してストレッチして十分にカラダを動かした。&lt;/p>
&lt;h2 id="トランザクションとコールバック">トランザクションとコールバック&lt;/h2>
&lt;p>お仕事は昨日の続きでリクエスト途中のサービス終了したときに web api ハンドラーの処理が途中でキャンセルされ、そのために内部のデータが不整合になることがわかった。データを不整合にしないため &lt;a href="https://www.mongodb.com/docs/manual/core/transactions/">mongodb のトランザクション&lt;/a> の仕組みを調べてデバッグしたりしていた。echo のミドルウェアで &lt;a href="https://en.wikipedia.org/wiki/Unit_of_work">Unit of work&lt;/a> を実装できないかをプロトタイプ実装していた。&lt;/p>
&lt;p>基本は次のように callback 関数を渡せばトランザクションに失敗したときにリトライもしてくれて便利なのだけど、いろいろ api サーバーの既存アーキテクチャの都合もあってこれは使えないことがわかった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">session&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">StartSession&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">session&lt;/span>.&lt;span style="color:#a6e22e">EndSession&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">result&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">session&lt;/span>.&lt;span style="color:#a6e22e">WithTransaction&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">callback&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>部屋の片付けへの趣き</title><link>/diary/posts/2024/1111/</link><pubDate>Mon, 11 Nov 2024 08:23:37 +0900</pubDate><guid>/diary/posts/2024/1111/</guid><description>今日のバドミントン練習はエアシャトルでリフティングを10分、連続最大回数は322回だった。その後にショートサーブ30回、フットワーク10分の練習をした。リフティングは連続回数よりもラケットコントロールの質を求める練習に変えていく。昨日と同様、みなとのもり公園をジョギングで4週走った。fitbit によると 1.8km 走ったそうな。
プロジェクトマネージャーが手を動かすことの功罪 朝からお手伝い先の社内インフラサーバーが落ちていて待ち時間があったのでふと思い返してつらつら考えごとをしていた。
お客さんが選ばなければ、逡巡と葛藤の結果、最終的に私は品質を優先する
開発合宿の課題管理の雑談から引用
私はもっと仕組みを作るところに注力すべきだった。私自身がコンサル嫌いの、実務をやっている姿勢をみせてメンバーが参考にしてほしいという意識が強過ぎた。また開発は楽しいことから必要以上に手を動かし過ぎてコアな開発に入り過ぎたことで、自分がやらないと他のメンバーが担当しにくい体制になってしまった。「任せる」はずが「任される」ことになってしまった。バックエンドの品質は大事だから責任感もあった。もしかしたらお客さんが求める以上の過剰品質なモノづくりをしてしまったのかもしれない。そして、仕組みづくりの後はメンバーへ委譲すべきだった。いまメンバーへマネージャーを委譲しているが、マネージャーという業務はもともと得意でもなくこだわりもなかったがためにすんなりと委譲できた。
しかし、開発の方は得意分野、且つ好きであるために品質にこだわってしまう傾向があることを認識できた。そのことが裏目に出てしまった。これが自社プロダクトの開発ならばすべて自社の資産になるためにそれでもよかったかもしれないが、他社プロダクトでやってしまうと、自分の時間を必要以上に注ぎ込むことになってしまった。その結果、お客さんの信頼を得られてはいるものの、自社プロダクトの開発に着手できず、クロージングの時期が遅れて微妙な状況になってしまった。もしかしたら、お客さんもうちの会社との契約を終了できなくなってしまって困っているという考え方もできる。
rabbitmq の autoAck (noAck) の振る舞い 先週の続き 。id 連携のリクエストをし続けながら compose サービスを down させたときの振る舞いを検証する。理想的にはそれぞれのモジュールのサービスが graceful に振る舞って、それぞれの永続化する場所でデータが溜まってくれることを期待している。その1つがメッセージキューでもある。Persistence Configuration によると、rabbitmq のメッセージを永続化するには queue に対して durable の設定を行い、producer が送信するメッセージに対しても persistent の属性を付与すればよい。しかし、実際に検証してみると、サービスの再起動時にメッセージキューからメッセージが消失していることがわかった。consume メソッドに渡す仮引数に autoAck というパラメーターがある。コメントにもそれっぽいことが書いてある。
When autoAck (also known as noAck) is true, the server will acknowledge deliveries to this consumer prior to writing the delivery to the network. When autoAck is true, the consumer should not call Delivery.</description><content>&lt;p>今日のバドミントン練習はエアシャトルでリフティングを10分、連続最大回数は322回だった。その後にショートサーブ30回、フットワーク10分の練習をした。リフティングは連続回数よりもラケットコントロールの質を求める練習に変えていく。昨日と同様、みなとのもり公園をジョギングで4週走った。fitbit によると 1.8km 走ったそうな。&lt;/p>
&lt;h2 id="プロジェクトマネージャーが手を動かすことの功罪">プロジェクトマネージャーが手を動かすことの功罪&lt;/h2>
&lt;p>朝からお手伝い先の社内インフラサーバーが落ちていて待ち時間があったのでふと思い返してつらつら考えごとをしていた。&lt;/p>
&lt;blockquote>
&lt;p>お客さんが選ばなければ、逡巡と葛藤の結果、最終的に私は品質を優先する&lt;/p>
&lt;p>&lt;a href="/diary/diary/posts/2024/1102/">開発合宿の課題管理の雑談から引用&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>私はもっと仕組みを作るところに注力すべきだった。私自身がコンサル嫌いの、実務をやっている姿勢をみせてメンバーが参考にしてほしいという意識が強過ぎた。また開発は楽しいことから必要以上に手を動かし過ぎてコアな開発に入り過ぎたことで、自分がやらないと他のメンバーが担当しにくい体制になってしまった。「任せる」はずが「任される」ことになってしまった。バックエンドの品質は大事だから責任感もあった。もしかしたらお客さんが求める以上の過剰品質なモノづくりをしてしまったのかもしれない。そして、仕組みづくりの後はメンバーへ委譲すべきだった。いまメンバーへマネージャーを委譲しているが、マネージャーという業務はもともと得意でもなくこだわりもなかったがためにすんなりと委譲できた。&lt;/p>
&lt;p>しかし、開発の方は得意分野、且つ好きであるために品質にこだわってしまう傾向があることを認識できた。そのことが裏目に出てしまった。これが自社プロダクトの開発ならばすべて自社の資産になるためにそれでもよかったかもしれないが、他社プロダクトでやってしまうと、自分の時間を必要以上に注ぎ込むことになってしまった。その結果、お客さんの信頼を得られてはいるものの、自社プロダクトの開発に着手できず、クロージングの時期が遅れて微妙な状況になってしまった。もしかしたら、お客さんもうちの会社との契約を終了できなくなってしまって困っているという考え方もできる。&lt;/p>
&lt;h2 id="rabbitmq-の-autoack-noack-の振る舞い">rabbitmq の autoAck (noAck) の振る舞い&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2024/1108/#compose-サービスの停止の振る舞い">先週の続き&lt;/a> 。id 連携のリクエストをし続けながら compose サービスを down させたときの振る舞いを検証する。理想的にはそれぞれのモジュールのサービスが graceful に振る舞って、それぞれの永続化する場所でデータが溜まってくれることを期待している。その1つがメッセージキューでもある。&lt;a href="https://www.rabbitmq.com/docs/persistence-conf">Persistence Configuration&lt;/a> によると、rabbitmq のメッセージを永続化するには queue に対して durable の設定を行い、producer が送信するメッセージに対しても persistent の属性を付与すればよい。しかし、実際に検証してみると、サービスの再起動時にメッセージキューからメッセージが消失していることがわかった。consume メソッドに渡す仮引数に autoAck というパラメーターがある。コメントにもそれっぽいことが書いてある。&lt;/p>
&lt;blockquote>
&lt;p>When autoAck (also known as noAck) is true, the server will acknowledge deliveries to this consumer prior to writing the delivery to the network. When autoAck is true, the consumer should not call Delivery.Ack. Automatically acknowledging deliveries means that some deliveries may get lost if the consumer is unable to process them after the server delivers them. See &lt;a href="http://www.rabbitmq.com/confirms.html">http://www.rabbitmq.com/confirms.html&lt;/a> for more details.&lt;/p>
&lt;p>&lt;a href="https://pkg.go.dev/github.com/rabbitmq/amqp091-go#Channel.ConsumeWithContext">ConsumeWithContext&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>autoAck という名前からメッセージを取得したら自動的にそのメッセージに対して ack を返すようなイメージで私は考えていた。しかし、どうやら consumer が subscribe して接続した時点で consume 扱いとなり、consumer がメッセージを実際に取得したかどうかに関係なく consumer の終了時にそのときに溜まっているすべてのメッセージが消失しているようにみえる。余談だが、rabbitmq のドキュメントにも noAck と autoAck という2つの用語が存在する。どうやらもともと noAck という名前だったのを autoAck という用語に変更したようにみえる。メッセージを永続化するには autoAck=false にしてメッセージに対する処理を完了した後に consumer が必ず ack を返すという実装にしないといけないことがわかった。このパラメーターは2年前から同じ設定だったので私がいま検証するまで誰もこの振る舞いに気付かなかったんやと驚いた。&lt;/p>
&lt;h2 id="部屋の掃除">部屋の掃除&lt;/h2>
&lt;p>19時に閉まる業務スーパーへ買いものへ行くために18時過ぎにお仕事を終えて、移動して買いものをして、炊飯開始して、ジョギングして、戻って晩ごはんを食べて、バドミントン練習をして、お風呂に入って、ストレッチして、なんとなくベッドに入って休もうとした。ここで22時半ぐらい。まったく眠れなくて寝室の掃除を始めたら、これが捗ってやる気が出てきて、部屋のレイアウト変更したりして少し片付けもできた。引っ越してからまったく進めていなかった部屋づくりが突発的に急に少しできた。これまでも時間がなかったわけではないが、まったくやる気がなくて手をつけられていなかった。それがなぜできたのかはわからないが、手をつけられていなかったことに手を入れられたことで心理的に楽になった気がした。明日も帰ったら少しだけ部屋づくりの作業をしようと思う。&lt;/p></content></item><item><title>ほぼお休み</title><link>/diary/posts/2024/1110/</link><pubDate>Sun, 10 Nov 2024 18:01:45 +0900</pubDate><guid>/diary/posts/2024/1110/</guid><description>今日のバドミントン練習はリフティングを5分、フットワークを10分した。久しぶりにリフティングしたら距離感が鈍っているかと思いきや、100回は簡単に超えられた。リフティングをするのも少し飽きてきたので他の練習もやっていこうと思う。練習前に無性にカラダ動かしたくなったので 1.8km ほどジョギングで走ってみた。
期日前投票 兵庫県知事選挙 の期日前投票へ行ってきた。元知事のさいとうさんも追い上げしているみたい。来週末が投票日になるので結果がどうなるのか楽しみでもある。
兵庫県知事選情勢、稲村氏わずかにリード　斎藤氏が猛追 2人の自殺者のうち、1人は告発された方でもう1人は次の優勝パレードの寄付金を募る企画の責任者だったと思う。表向き補助金のキックバックとは認められてはいないが、不可解なお金の流れがあるのでかなり黒に近い灰色にみえる。百条委員会が進むうちにこの疑惑の検証も進むのではないか？と当初は考えていたが、そうでもなくなっていないみたい。もしくはこれは副知事がやったことで知事の過失とはみられていないのかもしれない。
【独自】兵庫・斎藤知事の補助金キックバック疑惑 13金融機関の寄付額一覧を入手！ タスクをこなす日々 以前みた動画で 日々の変化を感じる のが大事だとあった。少し意識して普段やらないことをしてみたり、買いものするモノを変えたりしてみていた。またマンネリになってきたのでそのことを思い出していた。梅原さんの言う 義務感によって受け身の状態になってしまう 状態そのものである。
以前はやりたいことがいくつかあったし、そのための調べものも少しずつ進められていた。夏場は開発者としてお仕事のよくない部分を直すというところに集中したものの (その成果も十分に出た) 、一時期のその繁忙期をすでに過ぎていていまはそれほど忙しくないにも関わらず、心が空き時間を何に使うかということについてこない。いまのプロジェクトの課題に気付き過ぎてすべてに対応できない状況にストレスを感じているところも多少はある。そうであっても、新しいことを学んでいて楽しいとか、日々の生活に活気があるとか、そういう状態ではなくなってしまっている。5月頃は運動をして体脂肪を減らす日々が本当に楽しかった。それが当たり前になってしまったというべきなのか。2024年1月まで運動はほとんどやっていなかったのだから、運動をやるようになって単純に他のことをしていた時間を取られているという考え方もある。一方で運動によって健康にはなっているし、バドミントンという趣味や新たなコミュニティの土台づくりにもなっているから、これはこれでよい方向に変化したとも考えられる。</description><content>&lt;p>今日のバドミントン練習はリフティングを5分、フットワークを10分した。久しぶりにリフティングしたら距離感が鈍っているかと思いきや、100回は簡単に超えられた。リフティングをするのも少し飽きてきたので他の練習もやっていこうと思う。練習前に無性にカラダ動かしたくなったので 1.8km ほどジョギングで走ってみた。&lt;/p>
&lt;h2 id="期日前投票">期日前投票&lt;/h2>
&lt;p>&lt;a href="https://senkyo.pref.hyogo.lg.jp/">兵庫県知事選挙&lt;/a> の期日前投票へ行ってきた。元知事のさいとうさんも追い上げしているみたい。来週末が投票日になるので結果がどうなるのか楽しみでもある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.nikkei.com/article/DGXZQOUA092EM0Z01C24A1000000/">兵庫県知事選情勢、稲村氏わずかにリード　斎藤氏が猛追&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>2人の自殺者のうち、1人は告発された方でもう1人は次の優勝パレードの寄付金を募る企画の責任者だったと思う。表向き補助金のキックバックとは認められてはいないが、不可解なお金の流れがあるのでかなり黒に近い灰色にみえる。百条委員会が進むうちにこの疑惑の検証も進むのではないか？と当初は考えていたが、そうでもなくなっていないみたい。もしくはこれは副知事がやったことで知事の過失とはみられていないのかもしれない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dot.asahi.com/articles/-/234725?page=1">【独自】兵庫・斎藤知事の補助金キックバック疑惑 13金融機関の寄付額一覧を入手！&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="タスクをこなす日々">タスクをこなす日々&lt;/h2>
&lt;p>以前みた動画で &lt;a href="/diary/diary/posts/2024/1008/#仕事は楽しいかね">日々の変化を感じる&lt;/a> のが大事だとあった。少し意識して普段やらないことをしてみたり、買いものするモノを変えたりしてみていた。またマンネリになってきたのでそのことを思い出していた。梅原さんの言う &lt;a href="/diary/diary/posts/2024/1012/#１日ひとつだけ強くなる">義務感によって受け身の状態になってしまう&lt;/a> 状態そのものである。&lt;/p>
&lt;p>以前はやりたいことがいくつかあったし、そのための調べものも少しずつ進められていた。夏場は開発者としてお仕事のよくない部分を直すというところに集中したものの (その成果も十分に出た) 、一時期のその繁忙期をすでに過ぎていていまはそれほど忙しくないにも関わらず、心が空き時間を何に使うかということについてこない。いまのプロジェクトの課題に気付き過ぎてすべてに対応できない状況にストレスを感じているところも多少はある。そうであっても、新しいことを学んでいて楽しいとか、日々の生活に活気があるとか、そういう状態ではなくなってしまっている。5月頃は運動をして体脂肪を減らす日々が本当に楽しかった。それが当たり前になってしまったというべきなのか。2024年1月まで運動はほとんどやっていなかったのだから、運動をやるようになって単純に他のことをしていた時間を取られているという考え方もある。一方で運動によって健康にはなっているし、バドミントンという趣味や新たなコミュニティの土台づくりにもなっているから、これはこれでよい方向に変化したとも考えられる。&lt;/p></content></item><item><title>テストカバレッジの LT 発表</title><link>/diary/posts/2024/1109/</link><pubDate>Sat, 09 Nov 2024 11:35:25 +0900</pubDate><guid>/diary/posts/2024/1109/</guid><description>今日のバドミントン練習はお休み。
LT 会 午後から LT大会 with カメラマン に参加してきた。副業でカメラマンをやろうとしている方が LT 中にプロフィール写真になるようなものを撮ってくれるという。会社紹介などのスライドで使えるかもしれないと思って参加してきた。趣味で4-5年カメラを勉強しているというだけあって、機材や知識も備えていてよかったと思う。LT のネタとして先月お仕事でやっていた go のテスト改善の一環でカバレッジについての紹介をしてきた。サンプルコードは次になる。
github.com/t2y/go-integration-tests-sample 終わってから軽く立ち飲み屋で飲んで若い人たちの話しを聞いていた。若い人たちは活気があってやりたいことも多くて、いまの私からみたときのモチベーションの在り方に違いがあるようにも思えた。たまに若い人たちの中に紛れて話しを聞くだけでも自分が失くしたものを気付くきっかけになるようにも思えた。若い人たちはどんどん挑戦してがんばってほしい。
ストレッチ 今日は身体的に疲れているというよりも、開発合宿から続くお仕事のせいか、精神的に疲れていて、2週間ぶりにトレーナーさんと雑談するだけでも気分転換になってよかったと思う。今週はお仕事に集中していてまったく運動していないため、足の張りなどはほとんどなくなっていた。一方でバドミントンの試合をしてこけたときに痛めた腰だけはまだ張りが残っていてなかなか治りきらないことも実感した。今日の開脚幅は開始前149cmで、ストレッチ後155cmだった。
ストレッチを終えてから買いものしてオフィスへ戻って軽く作業していた。</description><content>&lt;p>今日のバドミントン練習はお休み。&lt;/p>
&lt;h2 id="lt-会">LT 会&lt;/h2>
&lt;p>午後から &lt;a href="https://kobe-sannomiya-dev.connpass.com/event/332096/">LT大会 with カメラマン&lt;/a> に参加してきた。副業でカメラマンをやろうとしている方が LT 中にプロフィール写真になるようなものを撮ってくれるという。会社紹介などのスライドで使えるかもしれないと思って参加してきた。趣味で4-5年カメラを勉強しているというだけあって、機材や知識も備えていてよかったと思う。LT のネタとして先月お仕事でやっていた go のテスト改善の一環でカバレッジについての紹介をしてきた。サンプルコードは次になる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/go-integration-tests-sample">github.com/t2y/go-integration-tests-sample&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>終わってから軽く立ち飲み屋で飲んで若い人たちの話しを聞いていた。若い人たちは活気があってやりたいことも多くて、いまの私からみたときのモチベーションの在り方に違いがあるようにも思えた。たまに若い人たちの中に紛れて話しを聞くだけでも自分が失くしたものを気付くきっかけになるようにも思えた。若い人たちはどんどん挑戦してがんばってほしい。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日は身体的に疲れているというよりも、開発合宿から続くお仕事のせいか、精神的に疲れていて、2週間ぶりにトレーナーさんと雑談するだけでも気分転換になってよかったと思う。今週はお仕事に集中していてまったく運動していないため、足の張りなどはほとんどなくなっていた。一方でバドミントンの試合をしてこけたときに痛めた腰だけはまだ張りが残っていてなかなか治りきらないことも実感した。今日の開脚幅は開始前149cmで、ストレッチ後155cmだった。&lt;/p>
&lt;p>ストレッチを終えてから買いものしてオフィスへ戻って軽く作業していた。&lt;/p></content></item><item><title>開発者合宿のふりかえり</title><link>/diary/posts/2024/1108/</link><pubDate>Fri, 08 Nov 2024 10:08:26 +0900</pubDate><guid>/diary/posts/2024/1108/</guid><description>今日のバドミントン練習はお休み。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今日は先週末の開発合宿のふりかえりをした。
1週間前ぐらいに参加者を集めて事前打ち合わせをして過ごし方の共有をした方がよかった 周りと雑談してしまうので資料を合宿中に作るのはほとんど時間を取れない もう3回目なのでお風呂へ入るのにも慣れが出てきてお気に入りの外湯へ行くようになった 人数はどのぐらいが適正か？ 5人という人数は中途半端だったように思える 8人は多過ぎた気はするから6人がちょうどよいのではないかと思える 周辺の体験イベントにみんなで参加してみるのもよいかもしれない あらかじめ希望をとっておく 発表の時間を初日と2日目に分割したのはよかった 夜に発表を固めなくてもよい お昼でも夕方でもみんなが集まっている時間帯にさらに分散させるのがよさそう 細かいところはいろいろあるけれど、覚えているうちに意見をもらった。いつもはらさんが来てくれるから私の負担が低くなり本当に助かっている。
compose サービスの停止の振る舞い 昨日の続き 。それぞれのサービスに depends_on を指定することで依存関係を定義できる。サービス起動時と停止時に依存するサービスが先に起動または停止するように順番を制御してくれる。但し、起動時のデフォルトはコンテナ起動をトリガーにするため healthcheck などを指定しないと厳密にサービスが起動しているかどうかはわからない。
Control startup and shutdown order in Compose compose サービスの起動は次の2つのコマンドがある。
up: すべての依存関係を調べてコンテナサービスを起動する、停止しているコンテナがなければ作成する start: 停止しているコンテナのみを起動する 基本的には up を使っておけば運用上の問題は起きない。start を使う理由がなければ up を使うといった感覚でよい。一時的なメンテナンスなどで stop を使ってコンテナを停止し、そのコンテナだけ起動すればよいことがわかっていれば start を使った方がオーバーヘッドが少ないといったメリットはあるだろう。up と start の違いはそれほど気にしなくてもよい。
次に compose サービスの停止は次の2つのコマンドがある。
down: コンテナを削除する、関連するリソース (volume や network) もすべて削除する stop: コンテナを削除せずに停止する 運用上どちらか一報を覚えておくなら down を使えばクリーンに再起動できると言える。コンテナが使うイメージのバージョンアップをするときなどはコンテナを削除する必要があるから down する方が手間がいらない。stop で停止したコンテナがあると、up でも start でもバージョンを自動的にあげてくれたりはせず、ただ停止したコンテナを起動するといった振る舞いになる。そのため、バージョンアップをするときは stop で停止した後に rm でコンテナを削除する必要がある。それなら最初から down で削除してしまってもよいと言える。compose の logs コマンドを使うと複数サービスのログを1つのストリームで監視できる。この状態で stop や down を実行してどういった振る舞いになるのかを検証できた。</description><content>&lt;p>今日のバドミントン練習はお休み。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今日は先週末の開発合宿のふりかえりをした。&lt;/p>
&lt;ul>
&lt;li>1週間前ぐらいに参加者を集めて事前打ち合わせをして過ごし方の共有をした方がよかった&lt;/li>
&lt;li>周りと雑談してしまうので資料を合宿中に作るのはほとんど時間を取れない&lt;/li>
&lt;li>もう3回目なのでお風呂へ入るのにも慣れが出てきてお気に入りの外湯へ行くようになった&lt;/li>
&lt;li>人数はどのぐらいが適正か？
&lt;ul>
&lt;li>5人という人数は中途半端だったように思える&lt;/li>
&lt;li>8人は多過ぎた気はするから6人がちょうどよいのではないかと思える&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>周辺の体験イベントにみんなで参加してみるのもよいかもしれない
&lt;ul>
&lt;li>あらかじめ希望をとっておく&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>発表の時間を初日と2日目に分割したのはよかった
&lt;ul>
&lt;li>夜に発表を固めなくてもよい&lt;/li>
&lt;li>お昼でも夕方でもみんなが集まっている時間帯にさらに分散させるのがよさそう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>細かいところはいろいろあるけれど、覚えているうちに意見をもらった。いつもはらさんが来てくれるから私の負担が低くなり本当に助かっている。&lt;/p>
&lt;h2 id="compose-サービスの停止の振る舞い">compose サービスの停止の振る舞い&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2024/1107/">昨日の続き&lt;/a> 。それぞれのサービスに &lt;a href="https://docs.docker.com/reference/compose-file/services/#depends_on">depends_on&lt;/a> を指定することで依存関係を定義できる。サービス起動時と停止時に依存するサービスが先に起動または停止するように順番を制御してくれる。但し、起動時のデフォルトはコンテナ起動をトリガーにするため healthcheck などを指定しないと厳密にサービスが起動しているかどうかはわからない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/compose/how-tos/startup-order/">Control startup and shutdown order in Compose&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>compose サービスの起動は次の2つのコマンドがある。&lt;/p>
&lt;ul>
&lt;li>up: すべての依存関係を調べてコンテナサービスを起動する、停止しているコンテナがなければ作成する&lt;/li>
&lt;li>start: 停止しているコンテナのみを起動する&lt;/li>
&lt;/ul>
&lt;p>基本的には up を使っておけば運用上の問題は起きない。start を使う理由がなければ up を使うといった感覚でよい。一時的なメンテナンスなどで stop を使ってコンテナを停止し、そのコンテナだけ起動すればよいことがわかっていれば start を使った方がオーバーヘッドが少ないといったメリットはあるだろう。up と start の違いはそれほど気にしなくてもよい。&lt;/p>
&lt;p>次に compose サービスの停止は次の2つのコマンドがある。&lt;/p>
&lt;ul>
&lt;li>down: コンテナを削除する、関連するリソース (volume や network) もすべて削除する&lt;/li>
&lt;li>stop: コンテナを削除せずに停止する&lt;/li>
&lt;/ul>
&lt;p>運用上どちらか一報を覚えておくなら down を使えばクリーンに再起動できると言える。コンテナが使うイメージのバージョンアップをするときなどはコンテナを削除する必要があるから down する方が手間がいらない。stop で停止したコンテナがあると、up でも start でもバージョンを自動的にあげてくれたりはせず、ただ停止したコンテナを起動するといった振る舞いになる。そのため、バージョンアップをするときは stop で停止した後に rm でコンテナを削除する必要がある。それなら最初から down で削除してしまってもよいと言える。compose の logs コマンドを使うと複数サービスのログを1つのストリームで監視できる。この状態で stop や down を実行してどういった振る舞いになるのかを検証できた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/@laurap_85411/docker-compose-stop-vs-down-e4e8d6515a85">Docker compose stop VS down&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$ docker compose logs -n 3 -f
&lt;/code>&lt;/pre></content></item><item><title>ミドルウェアのコンテナの振る舞い検証</title><link>/diary/posts/2024/1107/</link><pubDate>Thu, 07 Nov 2024 12:28:46 +0900</pubDate><guid>/diary/posts/2024/1107/</guid><description>今日もバドミントン練習はお休み。
mongodb の healthcheck bitnami/mongodb というサードパーティのコンテナ を使って mongodb サービスを設定している。docker compose でコンテナサービスの依存関係を記述できるが、特別な設定をしないとコンテナサービスの起動をトリガーに依存関係を制御する。実際はコンテナが起動して内部のサーバー／デーモンが正常に起動するまで少し時間がかかる。たとえば mongodb のコンテナであれば mongod デーモンに初期設定をして再起動したりといった処理を内部的に行っている。そんなときに healthcheck を使うことで実際に mongod デーモンに接続できるかどうかでコンテナのサービス間の依存関係を制御できる。
これまで mongodb には healthcheck の設定をしていなかったので調査して次の設定を追加した。
healthcheck: test: mongosh &amp;#34;mongodb://localhost:37017/test?directConnection=false&amp;amp;replicaSet=${MONGO_REPLICA_SET}&amp;#34; --eval &amp;#39;db.runCommand(&amp;#34;ping&amp;#34;).ok&amp;#39; --quiet interval: 60s timeout: 5s retries: 3 start_period: 30s start_interval: 3s mongosh で db に接続して ping を実行するだけなら認証は必要ない。mongosh でなにもパラメーターを指定せずに接続すると direct 接続になってしまう。replica set の設定が完了していることを検証するために replica set 接続にしている。また interval は起動中もずっと死活監視に test コマンドを実行している。それとは別に start_interval を指定することでサービス開始時と通常の運用時の test コマンドによる制御をわけて管理できる。
rabbitmq のアップグレード 19時過ぎに業務終了報告をして、帰ろうと思ったときにふと rabbitmq のバージョンを最近あまり確認していないことに気付いた。いま 3.12.14 を使っているが、Release Information をみるとコミュニティサポートは切れていて、現行バージョンは 4.</description><content>&lt;p>今日もバドミントン練習はお休み。&lt;/p>
&lt;h2 id="mongodb-の-healthcheck">mongodb の healthcheck&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/1214/#コンテナを使ったレプリカセットの初期設定">bitnami/mongodb というサードパーティのコンテナ&lt;/a> を使って mongodb サービスを設定している。docker compose でコンテナサービスの依存関係を記述できるが、特別な設定をしないとコンテナサービスの起動をトリガーに依存関係を制御する。実際はコンテナが起動して内部のサーバー／デーモンが正常に起動するまで少し時間がかかる。たとえば mongodb のコンテナであれば mongod デーモンに初期設定をして再起動したりといった処理を内部的に行っている。そんなときに &lt;a href="https://docs.docker.com/reference/dockerfile/#healthcheck">healthcheck&lt;/a> を使うことで実際に mongod デーモンに接続できるかどうかでコンテナのサービス間の依存関係を制御できる。&lt;/p>
&lt;p>これまで mongodb には healthcheck の設定をしていなかったので調査して次の設定を追加した。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">healthcheck&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">test&lt;/span>: &lt;span style="color:#ae81ff">mongosh &amp;#34;mongodb://localhost:37017/test?directConnection=false&amp;amp;replicaSet=${MONGO_REPLICA_SET}&amp;#34; --eval &amp;#39;db.runCommand(&amp;#34;ping&amp;#34;).ok&amp;#39; --quiet&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">interval&lt;/span>: &lt;span style="color:#ae81ff">60s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">timeout&lt;/span>: &lt;span style="color:#ae81ff">5s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">retries&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">start_period&lt;/span>: &lt;span style="color:#ae81ff">30s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">start_interval&lt;/span>: &lt;span style="color:#ae81ff">3s&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>mongosh で db に接続して ping を実行するだけなら認証は必要ない。mongosh でなにもパラメーターを指定せずに接続すると direct 接続になってしまう。replica set の設定が完了していることを検証するために replica set 接続にしている。また interval は起動中もずっと死活監視に test コマンドを実行している。それとは別に start_interval を指定することでサービス開始時と通常の運用時の test コマンドによる制御をわけて管理できる。&lt;/p>
&lt;h2 id="rabbitmq-のアップグレード">rabbitmq のアップグレード&lt;/h2>
&lt;p>19時過ぎに業務終了報告をして、帰ろうと思ったときにふと rabbitmq のバージョンを最近あまり確認していないことに気付いた。いま 3.12.14 を使っているが、&lt;a href="https://www.rabbitmq.com/release-information">Release Information&lt;/a> をみるとコミュニティサポートは切れていて、現行バージョンは 4.0 になっていることに気付いた。試しに結合テストの rabbitmq のバージョンを 4.0.3 に上げてみたところ、問題なく動作している。テスト環境の移行は他のメンバーが使っていない夜にやった方がいいかと帰ることをやめて普通に移行作業をやり始めてしまった。メッセージキューは永続化したデータを基本的には保持しないため、メジャーバージョンアップで互換性がなかったとしても volume 配下のデータを削除して exchange/queue を移行すればよい。&lt;/p>
&lt;p>rabbitmq の http api client として rabbit-hole というツールを使っている。それも v2 から v3 へアップグレードしていて &lt;a href="https://github.com/michaelklishin/rabbit-hole/releases/tag/v3.1.0">Changes Between 2.16.0 and 3.1.0 (Oct 31, 2024)&lt;/a> に書いてあるが、機能的な変更も非互換の変更もいまのところはないが、4.0 にあわせて将来的に非互換な変更をやりやすいよう、メジャーバージョンを上げると書いてある。go.mod の依存関係も更新したりした。&lt;/p>
&lt;p>19時過ぎに帰ろうと思ってから、なんやらかんやらしているうちに最終的には21時半まで作業していた。&lt;/p></content></item><item><title>sveltekit の base path 設定</title><link>/diary/posts/2024/1106/</link><pubDate>Wed, 06 Nov 2024 08:56:02 +0900</pubDate><guid>/diary/posts/2024/1106/</guid><description>昨日遅くまで作業していたせいか、体調があまりよくなくて19時でお仕事を終えて帰って休んでいた。21時過ぎにはベッドに入って寝てた。
base path 移行とビルド リバースプロキシのルーティング検証 を終えて path based routing を採用することに決まった。そのため、nginx の設定にあわせて sveltekit の ui の base path を設定し直し、テスト環境にデプロイして検証していた。デプロイ先の制約によって base path が変わるというのはよくある状況なので sveltekit も Configuration paths で svelte.config.js に base path が設定できるようになっている。当初は環境変数で切り替えできるように設定して修正したものの、実際にビルドしてコンテナでテスト環境へデプロイしてみると有効にならない。adapter-node を使ってビルドしたソースコードを調べてみると svelte.config.js に設定した値がリテラルで埋め込まれていることがわかった。node.js サーバーの起動時に環境変数などを参照して動的に設定することはできない。次の issue が登録されている。
make adapter-node base path configurable via environment variable #7242 ビルド時にパスを固定にしないと、他のスクリプトソースやアセットの管理で煩雑になるところがあるのだろうと推測する。本当は環境変数で起動時に動的に変更できると、お客さんの環境にあわせて base path の値を変えたりもできるが、現状ではこちらが決めた値を固定で使ってもらうしかないことがわかった。</description><content>&lt;p>昨日遅くまで作業していたせいか、体調があまりよくなくて19時でお仕事を終えて帰って休んでいた。21時過ぎにはベッドに入って寝てた。&lt;/p>
&lt;h2 id="base-path-移行とビルド">base path 移行とビルド&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2024/1030/#nginx-のリバースプロキシ">リバースプロキシのルーティング検証&lt;/a> を終えて path based routing を採用することに決まった。そのため、nginx の設定にあわせて sveltekit の ui の base path を設定し直し、テスト環境にデプロイして検証していた。デプロイ先の制約によって base path が変わるというのはよくある状況なので sveltekit も &lt;a href="https://svelte.dev/docs/kit/configuration#paths">Configuration paths&lt;/a> で &lt;code>svelte.config.js&lt;/code> に base path が設定できるようになっている。当初は環境変数で切り替えできるように設定して修正したものの、実際にビルドしてコンテナでテスト環境へデプロイしてみると有効にならない。adapter-node を使ってビルドしたソースコードを調べてみると &lt;code>svelte.config.js&lt;/code> に設定した値がリテラルで埋め込まれていることがわかった。node.js サーバーの起動時に環境変数などを参照して動的に設定することはできない。次の issue が登録されている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/sveltejs/kit/issues/7242">make adapter-node base path configurable via environment variable #7242&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ビルド時にパスを固定にしないと、他のスクリプトソースやアセットの管理で煩雑になるところがあるのだろうと推測する。本当は環境変数で起動時に動的に変更できると、お客さんの環境にあわせて base path の値を変えたりもできるが、現状ではこちらが決めた値を固定で使ってもらうしかないことがわかった。&lt;/p></content></item><item><title>休み明けの残タスクに追われた</title><link>/diary/posts/2024/1105/</link><pubDate>Tue, 05 Nov 2024 08:32:53 +0900</pubDate><guid>/diary/posts/2024/1105/</guid><description>前日は十分に休みつつも夜遅くまで事務手続きをやって週始め。昨日作った請求書を送付して会計処理もした。
法人税の中間申告 (続き) 税務署からの通知は 自治体のそれから約1ヶ月遅れて 届く。朝からお手伝い先の社内で管理している gitlab サーバーに接続できない。障害が発生していたようで復旧するまで1-2時間ほど隙間時間ができた。その間に e-tax で法人税および地方法人税、それから消費税の中間申告／納付をした。eltax と比べて e-tax の中間申告は手順が少なくて簡単にできる。いまシステム移行しているようで、古いシステムと新しいシステムの全く違う UI を行き来する、めちゃくちゃな UI の違和感さえ我慢すれば簡単に手続きできた。
先週分の残作業や溜まっていた issue の整理 先週の金曜日をお休みしていたマージリクエストをレビューしたり、修正済みの issue をメンバーに検証してもらっていたところで修正漏れがあったりして fix した。その過程で仕様を変えたりもしたのでテストケースも修正したりした。週初めで元気があったせいか、作業の区切りも悪かったせいか、早くお仕事を終えて日記を書こうと思っていたのに21時過ぎまでやって疲れてしまって、すぐ帰ってそのまま寝てた。</description><content>&lt;p>前日は十分に休みつつも夜遅くまで事務手続きをやって週始め。昨日作った請求書を送付して会計処理もした。&lt;/p>
&lt;h2 id="法人税の中間申告-続き">法人税の中間申告 (続き)&lt;/h2>
&lt;p>税務署からの通知は &lt;a href="/diary/diary/posts/2024/1007/#法人税の中間申告">自治体のそれから約1ヶ月遅れて&lt;/a> 届く。朝からお手伝い先の社内で管理している gitlab サーバーに接続できない。障害が発生していたようで復旧するまで1-2時間ほど隙間時間ができた。その間に e-tax で法人税および地方法人税、それから消費税の中間申告／納付をした。eltax と比べて e-tax の中間申告は手順が少なくて簡単にできる。いまシステム移行しているようで、古いシステムと新しいシステムの全く違う UI を行き来する、めちゃくちゃな UI の違和感さえ我慢すれば簡単に手続きできた。&lt;/p>
&lt;h2 id="先週分の残作業や溜まっていた-issue-の整理">先週分の残作業や溜まっていた issue の整理&lt;/h2>
&lt;p>先週の金曜日をお休みしていたマージリクエストをレビューしたり、修正済みの issue をメンバーに検証してもらっていたところで修正漏れがあったりして fix した。その過程で仕様を変えたりもしたのでテストケースも修正したりした。週初めで元気があったせいか、作業の区切りも悪かったせいか、早くお仕事を終えて日記を書こうと思っていたのに21時過ぎまでやって疲れてしまって、すぐ帰ってそのまま寝てた。&lt;/p></content></item><item><title>疲労回復のための余暇</title><link>/diary/posts/2024/1104/</link><pubDate>Mon, 04 Nov 2024 20:08:33 +0900</pubDate><guid>/diary/posts/2024/1104/</guid><description>朝から起きていたものの、開発合宿疲れのせいか、起き上がる気力がなくて夕方まで家でのんびりしていた。お腹が空いて外へ出掛けたことをきっかけにそれから活動していた。イベントは楽しいし得るものも多いが、その疲労も確実にくる。前回の開発合宿は忙しい時期に休みもなく 精神的に疲弊した 記憶がある。こうやって書いておくと当時の様子を思い出せるので日記を書いておくと役に立つ。今後も開発合宿のようなイベントの後に休日がある日程を設けていく。今日のバドミントン練習もお休み。
経費の精算 夕方からオフィスで経費精算をしていた。11月に入ったのでお客さんへの請求書も発行していないことに気付いて請求書を作ったりしていた。11月1日にお休みをとったから忘れていた。その後に開発合宿の経費の整理をいろいろやってた。今回は約15万円ほど会社の経費を使ったことになる。予算通りではあるが、改めて精査してみるとインフレの影響で食費や宿泊費のすべての値段が上がっていることを実感する。
バドミントンの予定登録 エアバドミントンの予定登録、磯上体育館の抽選確認／確定、中学校体育館の予約、冬期スポーツ教室 の申し込みなど、バドミントンに関する予定の登録などを行った。自分のモチベーションコントロールが難しくなっていて、ゆっくり休みたいという気持ちはありつつも、なにも予定を入れないとただだらだら過ごしてしまうという懸念もある。バドミントンは今後がんばりたいのでどんどん練習の予定を入れてしまう。</description><content>&lt;p>朝から起きていたものの、開発合宿疲れのせいか、起き上がる気力がなくて夕方まで家でのんびりしていた。お腹が空いて外へ出掛けたことをきっかけにそれから活動していた。イベントは楽しいし得るものも多いが、その疲労も確実にくる。前回の開発合宿は忙しい時期に休みもなく &lt;a href="/diary/diary/posts/2024/0307/#精神的な疲労">精神的に疲弊した&lt;/a> 記憶がある。こうやって書いておくと当時の様子を思い出せるので日記を書いておくと役に立つ。今後も開発合宿のようなイベントの後に休日がある日程を設けていく。今日のバドミントン練習もお休み。&lt;/p>
&lt;h2 id="経費の精算">経費の精算&lt;/h2>
&lt;p>夕方からオフィスで経費精算をしていた。11月に入ったのでお客さんへの請求書も発行していないことに気付いて請求書を作ったりしていた。11月1日にお休みをとったから忘れていた。その後に開発合宿の経費の整理をいろいろやってた。今回は約15万円ほど会社の経費を使ったことになる。予算通りではあるが、改めて精査してみるとインフレの影響で食費や宿泊費のすべての値段が上がっていることを実感する。&lt;/p>
&lt;h2 id="バドミントンの予定登録">バドミントンの予定登録&lt;/h2>
&lt;p>エアバドミントンの予定登録、磯上体育館の抽選確認／確定、中学校体育館の予約、&lt;a href="https://isogami-gym.jp/2024%e5%b9%b4%e5%ba%a6%e5%86%ac%e6%9c%9f%e3%82%b9%e3%83%9d%e3%83%bc%e3%83%84%e6%95%99%e5%ae%a4%e3%80%80%e5%8f%97%e8%ac%9b%e7%94%9f%e5%8b%9f%e9%9b%86/">冬期スポーツ教室&lt;/a> の申し込みなど、バドミントンに関する予定の登録などを行った。自分のモチベーションコントロールが難しくなっていて、ゆっくり休みたいという気持ちはありつつも、なにも予定を入れないとただだらだら過ごしてしまうという懸念もある。バドミントンは今後がんばりたいのでどんどん練習の予定を入れてしまう。&lt;/p></content></item><item><title>秋の城崎温泉の終わり</title><link>/diary/posts/2024/1103/</link><pubDate>Sun, 03 Nov 2024 23:10:56 +0900</pubDate><guid>/diary/posts/2024/1103/</guid><description>昨日で大雨が過ぎ去って朝から快晴だった。近くの公園へ行って3人でバドミントンの打ち合いを30分ほど軽くやってみた。せっかくバドミントンの道具を持っていったので少しでもみんなで出来てよかった。
朝からお風呂へ行ったり雑談したりお土産を買ってきたりしながら11時にチェックアウトする。行きと同じ参加者と2人で帰路につく。時間があるので篠山城跡に寄り道してから神戸へ帰ってきた。周辺でお昼ご飯を食べてから篠山城跡へ行ってみる。11月3日は文化の日なので美術館、博物館、資料館などが無料拝観になったりするらしい。篠山城大書院 も無料公開されていた。初めて入ってみた。大書院 (おおしょいん) と読む。中は広くて資料展示や10分ほどで歴史のダイジェスト動画を流していた。明治の初期には篠山県と豊岡県があったんやというのも初めて知った。
明治4年（1871年）7月14日の廃藩置県により篠山藩は廃され、篠山県となる。さらに同年11月には篠山県も廃され豊岡県に編入、明治9年（1876年）8月には兵庫県に編入された。
wikipedia:篠山藩
常設展示かどうかはわからないが、有志の方が手作りでつくった戦国武将の甲冑が展示されていて見事だった。写真を撮っていいのかわからなかったが、ダメとは書いてなかったし、本物でもないからいいかなとおさめてきた。
帰りの車の中でも政治や課題管理など、いろいろ雑談しながらゆっくり帰ってきた。途中、2箇所で渋滞につかまった。車のナビ通りにいくと渋滞になっているところを google map で回避できるルートを使うとうまく抜けられた。みんな車のナビをみて移動するから同じルートで渋滞になってしまうのかもしれない。google map はリアルタイムで利用者が投稿した渋滞情報を更新しているようでそれを参照して迂回ルートを提案しているらしい。渋滞に捕まりそうなときは車のナビではなく、助手席で google map のルート検索をしてもらうとよいことを学んだ。同乗の参加者を神戸空港まで送り終えて今回の開発合宿を終えられた。
今回は私の準備不足でなにも出来なかったが、無事にイベントを終えられてホッとした。家に帰ったら疲れてなにもする気がなくなってそのままぐったりしていた。イベントをやっているときはスケジュールをこなすことに必死だけど、終わりはいつも達成感と、物足りなさや反省に加えて寂しさも混ざって複雑な心境になる。</description><content>&lt;p>昨日で大雨が過ぎ去って朝から快晴だった。近くの公園へ行って3人でバドミントンの打ち合いを30分ほど軽くやってみた。せっかくバドミントンの道具を持っていったので少しでもみんなで出来てよかった。&lt;/p>
&lt;p>朝からお風呂へ行ったり雑談したりお土産を買ってきたりしながら11時にチェックアウトする。行きと同じ参加者と2人で帰路につく。時間があるので篠山城跡に寄り道してから神戸へ帰ってきた。周辺でお昼ご飯を食べてから篠山城跡へ行ってみる。11月3日は文化の日なので美術館、博物館、資料館などが無料拝観になったりするらしい。&lt;a href="https://withsasayama.jp/osyoin/">篠山城大書院&lt;/a> も無料公開されていた。初めて入ってみた。大書院 (おおしょいん) と読む。中は広くて資料展示や10分ほどで歴史のダイジェスト動画を流していた。明治の初期には篠山県と豊岡県があったんやというのも初めて知った。&lt;/p>
&lt;blockquote>
&lt;p>明治4年（1871年）7月14日の廃藩置県により篠山藩は廃され、篠山県となる。さらに同年11月には篠山県も廃され豊岡県に編入、明治9年（1876年）8月には兵庫県に編入された。&lt;/p>
&lt;p>&lt;a href="https://ja.wikipedia.org/wiki/%E7%AF%A0%E5%B1%B1%E8%97%A9">wikipedia:篠山藩&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>常設展示かどうかはわからないが、有志の方が手作りでつくった戦国武将の甲冑が展示されていて見事だった。写真を撮っていいのかわからなかったが、ダメとは書いてなかったし、本物でもないからいいかなとおさめてきた。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2024/1103_osyoin1.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2024/1103_osyoin2.jpg"/>
&lt;/figure>
&lt;/p>
&lt;p>帰りの車の中でも政治や課題管理など、いろいろ雑談しながらゆっくり帰ってきた。途中、2箇所で渋滞につかまった。車のナビ通りにいくと渋滞になっているところを google map で回避できるルートを使うとうまく抜けられた。みんな車のナビをみて移動するから同じルートで渋滞になってしまうのかもしれない。google map はリアルタイムで利用者が投稿した渋滞情報を更新しているようでそれを参照して迂回ルートを提案しているらしい。渋滞に捕まりそうなときは車のナビではなく、助手席で google map のルート検索をしてもらうとよいことを学んだ。同乗の参加者を神戸空港まで送り終えて今回の開発合宿を終えられた。&lt;/p>
&lt;p>今回は私の準備不足でなにも出来なかったが、無事にイベントを終えられてホッとした。家に帰ったら疲れてなにもする気がなくなってそのままぐったりしていた。イベントをやっているときはスケジュールをこなすことに必死だけど、終わりはいつも達成感と、物足りなさや反省に加えて寂しさも混ざって複雑な心境になる。&lt;/p></content></item><item><title>秋の城崎温泉の中日</title><link>/diary/posts/2024/1102/</link><pubDate>Sat, 02 Nov 2024 14:39:38 +0900</pubDate><guid>/diary/posts/2024/1102/</guid><description>居間で1時半から6時頃まで寝てた。今日のバドミントンは雨天中止。朝から大雨、河川洪水、土砂災害警報と出ていた。雨も夜までずっと降り続いていた。
起きてから昨日、移動途中のサービスエリアで買っておいた丹波黒枝豆を茹でてみる。大粒で少し甘みがあっておいしい枝豆だった。普通の枝豆とは少し趣が違うようなのでお土産にもよさそうに思えた。おやつ代わりに茹でた枝豆を食べていた。
その後、午前中に雑談しながら発表資料を作り終えた。今回の開発合宿は余裕がなくてすべてにおいて準備不足だったが、そのうちの大きな反省として発表資料を事前に作らなかったことがあげられる。きのいえにいると、なんやらかんやら周りと雑談して盛り上がるので自分の作業がまったく進まない。ワーケーションは「余白」が大事になる。普段話さない人たちと雑談するためのイベントでもある。
お昼頃に マルサン精肉店 ですき焼き用の但馬牛を買いに行く。店員さんと話しながら1人200gを基準に購入する。但馬牛のリブロースを200g、鹿児島産の赤身肉を100gとした。但馬牛はとてもおいしかったが、リブロースの霜降りの脂身があるため、量は食べられない。実際に食べてみた所感としてはリブロースを150g、赤身肉を100gでよかったと思える。足りないよりは余る方がよいのでこのぐらいは許容範囲と言える。お店では陳列棚にお肉を並べていなかったため、100gの単価がわからなかった。私の先入観でお肉はそう高くないだろうと考えていた。実際に買ってみたらリブロースが3000円/100g、赤身肉が1900円/100gだった。先に値段を聞いてから他の部位とも調整して買うべきだった。インフレしているのもあると思うが、5人分のお肉の料金が8人でカニを購入したのと同じぐらいの金額になってしまった。失敗。
午後からまた別のお風呂へ入りにいったついでに かみや民藝店 さんの前を通りかかって入ってみた。陳列されている麦わら細工を見学してからオーナーさんに話しかけてみた。この麦わら細工を作っているのは日本で城崎温泉と伊勢の2箇所しかないらしい。昨年、お土産に麦わら細工のストラップを購入してから気になっていた。
お土産を買ってきてから、うちの会社のロゴは幾何学模様だからこの麦わら細工で作れないかと考えていた。うまくできればオリジナルな会社のノベルティになるのではないかと。オーナーさんに聞いてみたところ、うまくできるかどうかは実際に作ってみないと分からないものの、特注のようなものも引き受けているという。基本的にすべて手作りで作るため、既成品を作るのも特注品を作るのも手間暇はあまり変わらないらしい。
カスタムメイドの追加費用はない 最低発注数のようなものはない 納期は急いでいないからいつでもよい 1つ2500円前後で作ってくれるという。まず試作品としてうちのロゴの色違いで2つを作ってもらうことにした。それをみてから実際にノベルティとして発注するかどうかを決める。麦わら細工でノベルティの試作品交渉がうまくいった。
晩ごはんに関西風のすき焼きを作って食べる。まず肉を焼いて溶き卵でそのまま食べる。焼いて食べるときのインパクトは大きい。よいお肉だったのもあっておいしかったと思う。焼いて食べた後は普通に煮込むすき焼きを作る。最初に焼いて食べるお肉のインパクトが大きかった分、煮込んで食べたときの印象が薄くなってしまう感じがした。2回に分けて鍋を作ったが、最初は野菜が足りなくてすき焼きに煮込む水分が少なかったように思えた。鍋いっぱいの野菜を多めに入れてから煮込むとよさそう。
晩ごはんを食べ終えてから2日目の親睦会に入る。3人で発表していく。私はこの10ヶ月間の運動や体重減やバドミントンを始めた話しをまとめてみた。準備不足もあって単体と経緯をまとめただけでなにを伝えたいか、よくわからない発表になってしまった。はらさんは「ロールモデルを歩く」という主題で自分がなりたい人に、自分がなっていけるような生き方をしていくという話しをされた。それを聞いていて参加者からこれからは「風の時代」になっていくとか、経済的な価値よりも精神的なつながりを大事にする価値観が重要視されるのではないかといったコメントもあった。60歳になってものづくりをしている人は周りからみて迷惑になっているのではないか？若い人たちからみて年配の作る人は迷惑ではないか？50代になると受託開発の単価が下がる問題への対応。40代のうちから単価をあげず最初から高くないから下がらないという戦略もある。
私がいま独立して会社をやっている理由を端的に表すと「組織に馴染めない」ということがあげられる。それについても聞いてみた。
ai を相手に話せば、若い人に迷惑をかけずにやり取りできるのではないか？ 老化しないための研究が発展して不老不死のような状況もみえてくるのではないか？ 50代になると選択肢がなくなっていく サラリーマンとして我慢してやっていく その生き方も強いと言える 組織と折り合いをつけられているならそれは能力の1つと言える 50代で潜伏していた人はあまりいない 発表を終えて、0時ぐらいから知人のトラブルプロジェクトの話しを聞いていた。自身の経験則から私ならどう考えてどう行動するかと考えながら雑談していた。抜本的に改善しないといけない状況だが、プロジェクトの状況からどうにもならない、かなり高い確率で失敗の未来がみえている。雑談をしていて課題管理や業務の教え方について思うことが出てきたのを、忘れないように書き殴っておいた。この話しをできただけでもこの開発合宿は価値があった。
若いメンバーは「わからない」「できない」が言えた時点で正しいとする
そこから先の問題を表現する練習を積み重ねる これは文章でやり取りするよりも、口頭で話しながらできるようになってもらう 専門用語が出てくれば、なにが／どうわからないかを短文で説明してもらう その後に具体的に論理を説明しながらわからない内容を長文で説明してもらう 問題の本質を理解するための問答ではなく、私が言ったことを理解するための問答になっていた
文章で指摘した方が後で読み返せて調べられるし、証拠も残ってよいだろうと考えていたが、人によってはそのやり方が最善でもなかった 口頭で問題の本質を確認したり、相手が何を理解出来ているかを質問して考えてもらう時間をもっと取るべきだった 教え方・教わり方に個人差がある 文章だからわかりやすいとか、口頭だから曖昧になるというわけでもないことを学んだ プロダクト開発のコアな役割を担ってしまうと品質をとるか、成長を促すかのトレードオフに直面する
私の価値観ではプロダクトの品質をあげる方を選んでしまった プロジェクトに入る前にお客さんにどちらかの2択を決めてもらう メンバーの成長を優先か、プロダクト/プロジェクトの品質を優先するか お客さんが選ばなければ、逡巡と葛藤の結果、最終的に私は品質を優先する 業務の進め方が一定水準に満たないメンバーをどう対応するかa
コードレビューならマージしない、やり直しをしてもらうスキームを作るべきだった 最初からうまくできるわけはないから、やりながら慣れていってもらうことを優先して導入を甘めにしてしまった 問題の本質を理解できていないようにみえても指摘したことを修正したらマージしていた 問題の本質を理解するよう促したり、モブプロしたりしてもっと時間をかけて基本を指導して最低水準を設けるべきだった もっと話して時間をかけてゆっくりしっかり指導していくべきだった 最初に業務を遂行する上でのスキルの基準を示すべきだった リーダークラスのできる人、チームを相手に課題管理を教えるのか、新人や経験の浅い人たちも含めて課題管理を教えるのかでやり方が異なる
前者はみて学んでくれる 実践しながら勝手にできるようになっていくのでプロジェクトが進む 後者は成長を主目的とする 品質や機能開発を停滞させても業務の進め方をしっかり指導することが中長期的に大事になる 課題管理のビジネスをする上でマネージャーとして実践的に入るのはよい
終わりのスキームを最初から作っておく必要があった マネージャー (&amp;amp;遊撃) でプロダクト開発のコアな役割を担ってしまうと抜けられなくなる クロージングをどうすればよいかを悩み始めた 課題管理の OJT を実践的に1ヶ月で終えられるようなコンテンツづくりやノウハウのパッケージングをしていく必要がある 現状ではうまくいけば半年、そうじゃなかったら1年ぐらいかかる プロダクト開発の初期で私からメンバーにマネージャーを移行するスキームを作っておく マネージャーは厳しいことを指摘しないといけない
なぜ厳しいことを指摘するのかの背景や理由を説明できるようになる 厳しいことを言っても人間関係を崩さないだけの人間力も必要になる</description><content>&lt;p>居間で1時半から6時頃まで寝てた。今日のバドミントンは雨天中止。朝から大雨、河川洪水、土砂災害警報と出ていた。雨も夜までずっと降り続いていた。&lt;/p>
&lt;p>起きてから昨日、移動途中のサービスエリアで買っておいた丹波黒枝豆を茹でてみる。大粒で少し甘みがあっておいしい枝豆だった。普通の枝豆とは少し趣が違うようなのでお土産にもよさそうに思えた。おやつ代わりに茹でた枝豆を食べていた。&lt;/p>
&lt;p>その後、午前中に雑談しながら発表資料を作り終えた。今回の開発合宿は余裕がなくてすべてにおいて準備不足だったが、そのうちの大きな反省として発表資料を事前に作らなかったことがあげられる。きのいえにいると、なんやらかんやら周りと雑談して盛り上がるので自分の作業がまったく進まない。ワーケーションは「余白」が大事になる。普段話さない人たちと雑談するためのイベントでもある。&lt;/p>
&lt;p>お昼頃に &lt;a href="https://kinosaki-spa.gr.jp/directory/marusan-seiniku/">マルサン精肉店&lt;/a> ですき焼き用の但馬牛を買いに行く。店員さんと話しながら1人200gを基準に購入する。但馬牛のリブロースを200g、鹿児島産の赤身肉を100gとした。但馬牛はとてもおいしかったが、リブロースの霜降りの脂身があるため、量は食べられない。実際に食べてみた所感としてはリブロースを150g、赤身肉を100gでよかったと思える。足りないよりは余る方がよいのでこのぐらいは許容範囲と言える。お店では陳列棚にお肉を並べていなかったため、100gの単価がわからなかった。私の先入観でお肉はそう高くないだろうと考えていた。実際に買ってみたらリブロースが3000円/100g、赤身肉が1900円/100gだった。先に値段を聞いてから他の部位とも調整して買うべきだった。インフレしているのもあると思うが、5人分のお肉の料金が8人でカニを購入したのと同じぐらいの金額になってしまった。失敗。&lt;/p>
&lt;p>午後からまた別のお風呂へ入りにいったついでに &lt;a href="https://kamiya-mingei.com/shop/">かみや民藝店&lt;/a> さんの前を通りかかって入ってみた。陳列されている麦わら細工を見学してからオーナーさんに話しかけてみた。この麦わら細工を作っているのは日本で城崎温泉と伊勢の2箇所しかないらしい。昨年、お土産に麦わら細工のストラップを購入してから気になっていた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2024/1102_mugiwara.jpg"/>
&lt;/figure>
&lt;p>お土産を買ってきてから、うちの会社のロゴは幾何学模様だからこの麦わら細工で作れないかと考えていた。うまくできればオリジナルな会社のノベルティになるのではないかと。オーナーさんに聞いてみたところ、うまくできるかどうかは実際に作ってみないと分からないものの、特注のようなものも引き受けているという。基本的にすべて手作りで作るため、既成品を作るのも特注品を作るのも手間暇はあまり変わらないらしい。&lt;/p>
&lt;ul>
&lt;li>カスタムメイドの追加費用はない&lt;/li>
&lt;li>最低発注数のようなものはない&lt;/li>
&lt;li>納期は急いでいないからいつでもよい&lt;/li>
&lt;/ul>
&lt;p>1つ2500円前後で作ってくれるという。まず試作品としてうちのロゴの色違いで2つを作ってもらうことにした。それをみてから実際にノベルティとして発注するかどうかを決める。麦わら細工でノベルティの試作品交渉がうまくいった。&lt;/p>
&lt;p>晩ごはんに関西風のすき焼きを作って食べる。まず肉を焼いて溶き卵でそのまま食べる。焼いて食べるときのインパクトは大きい。よいお肉だったのもあっておいしかったと思う。焼いて食べた後は普通に煮込むすき焼きを作る。最初に焼いて食べるお肉のインパクトが大きかった分、煮込んで食べたときの印象が薄くなってしまう感じがした。2回に分けて鍋を作ったが、最初は野菜が足りなくてすき焼きに煮込む水分が少なかったように思えた。鍋いっぱいの野菜を多めに入れてから煮込むとよさそう。&lt;/p>
&lt;p>晩ごはんを食べ終えてから2日目の親睦会に入る。3人で発表していく。私はこの10ヶ月間の運動や体重減やバドミントンを始めた話しをまとめてみた。準備不足もあって単体と経緯をまとめただけでなにを伝えたいか、よくわからない発表になってしまった。はらさんは「ロールモデルを歩く」という主題で自分がなりたい人に、自分がなっていけるような生き方をしていくという話しをされた。それを聞いていて参加者からこれからは「風の時代」になっていくとか、経済的な価値よりも精神的なつながりを大事にする価値観が重要視されるのではないかといったコメントもあった。60歳になってものづくりをしている人は周りからみて迷惑になっているのではないか？若い人たちからみて年配の作る人は迷惑ではないか？50代になると受託開発の単価が下がる問題への対応。40代のうちから単価をあげず最初から高くないから下がらないという戦略もある。&lt;/p>
&lt;p>私がいま独立して会社をやっている理由を端的に表すと「組織に馴染めない」ということがあげられる。それについても聞いてみた。&lt;/p>
&lt;ul>
&lt;li>ai を相手に話せば、若い人に迷惑をかけずにやり取りできるのではないか？&lt;/li>
&lt;li>老化しないための研究が発展して不老不死のような状況もみえてくるのではないか？&lt;/li>
&lt;li>50代になると選択肢がなくなっていく
&lt;ul>
&lt;li>サラリーマンとして我慢してやっていく
&lt;ul>
&lt;li>その生き方も強いと言える&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>組織と折り合いをつけられているならそれは能力の1つと言える&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>50代で潜伏していた人はあまりいない&lt;/li>
&lt;/ul>
&lt;p>発表を終えて、0時ぐらいから知人のトラブルプロジェクトの話しを聞いていた。自身の経験則から私ならどう考えてどう行動するかと考えながら雑談していた。抜本的に改善しないといけない状況だが、プロジェクトの状況からどうにもならない、かなり高い確率で失敗の未来がみえている。雑談をしていて課題管理や業務の教え方について思うことが出てきたのを、忘れないように書き殴っておいた。この話しをできただけでもこの開発合宿は価値があった。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>若いメンバーは「わからない」「できない」が言えた時点で正しいとする&lt;/p>
&lt;ul>
&lt;li>そこから先の問題を表現する練習を積み重ねる&lt;/li>
&lt;li>これは文章でやり取りするよりも、口頭で話しながらできるようになってもらう&lt;/li>
&lt;li>専門用語が出てくれば、なにが／どうわからないかを短文で説明してもらう
&lt;ul>
&lt;li>その後に具体的に論理を説明しながらわからない内容を長文で説明してもらう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>問題の本質を理解するための問答ではなく、私が言ったことを理解するための問答になっていた&lt;/p>
&lt;ul>
&lt;li>文章で指摘した方が後で読み返せて調べられるし、証拠も残ってよいだろうと考えていたが、人によってはそのやり方が最善でもなかった&lt;/li>
&lt;li>口頭で問題の本質を確認したり、相手が何を理解出来ているかを質問して考えてもらう時間をもっと取るべきだった
&lt;ul>
&lt;li>教え方・教わり方に個人差がある
&lt;ul>
&lt;li>文章だからわかりやすいとか、口頭だから曖昧になるというわけでもないことを学んだ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>プロダクト開発のコアな役割を担ってしまうと品質をとるか、成長を促すかのトレードオフに直面する&lt;/p>
&lt;ul>
&lt;li>私の価値観ではプロダクトの品質をあげる方を選んでしまった
&lt;ul>
&lt;li>プロジェクトに入る前にお客さんにどちらかの2択を決めてもらう
&lt;ul>
&lt;li>メンバーの成長を優先か、プロダクト/プロジェクトの品質を優先するか
&lt;ul>
&lt;li>お客さんが選ばなければ、逡巡と葛藤の結果、最終的に私は品質を優先する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>業務の進め方が一定水準に満たないメンバーをどう対応するかa&lt;/p>
&lt;ul>
&lt;li>コードレビューならマージしない、やり直しをしてもらうスキームを作るべきだった&lt;/li>
&lt;li>最初からうまくできるわけはないから、やりながら慣れていってもらうことを優先して導入を甘めにしてしまった
&lt;ul>
&lt;li>問題の本質を理解できていないようにみえても指摘したことを修正したらマージしていた
&lt;ul>
&lt;li>問題の本質を理解するよう促したり、モブプロしたりしてもっと時間をかけて基本を指導して最低水準を設けるべきだった&lt;/li>
&lt;li>もっと話して時間をかけてゆっくりしっかり指導していくべきだった
&lt;ul>
&lt;li>最初に業務を遂行する上でのスキルの基準を示すべきだった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>リーダークラスのできる人、チームを相手に課題管理を教えるのか、新人や経験の浅い人たちも含めて課題管理を教えるのかでやり方が異なる&lt;/p>
&lt;ul>
&lt;li>前者はみて学んでくれる
&lt;ul>
&lt;li>実践しながら勝手にできるようになっていくのでプロジェクトが進む&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>後者は成長を主目的とする
&lt;ul>
&lt;li>品質や機能開発を停滞させても業務の進め方をしっかり指導することが中長期的に大事になる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>課題管理のビジネスをする上でマネージャーとして実践的に入るのはよい&lt;/p>
&lt;ul>
&lt;li>終わりのスキームを最初から作っておく必要があった&lt;/li>
&lt;li>マネージャー (&amp;amp;遊撃) でプロダクト開発のコアな役割を担ってしまうと抜けられなくなる
&lt;ul>
&lt;li>クロージングをどうすればよいかを悩み始めた&lt;/li>
&lt;li>課題管理の OJT を実践的に1ヶ月で終えられるようなコンテンツづくりやノウハウのパッケージングをしていく必要がある
&lt;ul>
&lt;li>現状ではうまくいけば半年、そうじゃなかったら1年ぐらいかかる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>プロダクト開発の初期で私からメンバーにマネージャーを移行するスキームを作っておく&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>マネージャーは厳しいことを指摘しないといけない&lt;/p>
&lt;ul>
&lt;li>なぜ厳しいことを指摘するのかの背景や理由を説明できるようになる&lt;/li>
&lt;li>厳しいことを言っても人間関係を崩さないだけの人間力も必要になる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content></item><item><title>秋の城崎温泉へ</title><link>/diary/posts/2024/1101/</link><pubDate>Fri, 01 Nov 2024 14:14:18 +0900</pubDate><guid>/diary/posts/2024/1101/</guid><description>1時前まで資料作りをして2時過ぎに寝た。神戸から城崎温泉まで3時間もあれば着くことはこれまでの経験でわかっていた。三ノ宮で8時半に待ち合わせてして出掛ける。出掛けていろいろやってたので今日のバドミントン練習はお休み。
開発合宿へ出掛ける 今回は一緒に車で移動するのは1人だけ。レンタカーを借りずに社用車で出掛ける。8時半に待ち合わせして9時半頃に 西紀サービスエリア で休憩。丹波産の黒豆は使っていないらしいが 黒豆せんべい を買ってみたらおいしかった。また今度買ってみようと思う。その後、出発したもののナビの案内がおかしい。中継地点として西紀 SA を設定していたため、出発した後も西紀 SA へ向かうようなループした案内になってしまった。中継地点を通過したことを登録するか、ナビのルート案内をやり直す必要があった。失敗。あとナビの目的地を城崎温泉駅にするよりも「但馬空港IC」のように高速道路の出口を指定した方が高速道路を使ったルート案内になるように思える。ナビの設定で回避できるかもしれないが、なるべく高速道路よりも下道を使うようなルート案内が行われてしまう。
やや運転トラブルはあったものの結果的には予定通りの11時半に きのいえ に到着した。スタッフさんもおられてそのまますぐにチェックイン手続してくれた。前回はクレジットカードの上限設定を超えて決済できなかった。今回は上限設定を見直していたので問題なく手続きできた。プロジェクターとの接続チェックで手間取った。wifi の接続先が 2.4g と 5g あり、プロジェクターが 2.4g を使っているためにラップトップも 2.4g に接続しないと接続できなかった。周波数をあわせないと接続できないというのを学んだ。
その後、12時半、14時半と電車や自分の車で来られた参加者と合流。今回の参加者は私も含めて5人。参加者が chromecast をもってきていた。プロジェクターに hdmi 接続で chromecast を接続し、chromecast はモバイルバッテリーから電源をとる。これで wifi 接続すれば、OS に関係なく chrome ブラウザなら画面共有できるようになる。ブラウザのタブ単体と画面全体のどちらでも共有できる。プロジェクターが提供する ios キャスト (airplay) やミラキャストは os ごとに設定を変えないといけないのでそれが面倒になる。いま chromecast は生産中止になっていて現行機種は Google TV Streamer になり、値段も16,000円とやや高い。このデバイスとモバイルバッテリーをもっておけば、開発合宿のような、不特定多数のラップトップで画面共有するときに便利なことを学んだ。
雑談しながら作業したり、お風呂へ行ったりしながら19時からイタリアンのビールレストラン GUBIGABU で晩ご飯にした。この時期はまだカニが解禁されていない。インフレのせいか、値段はやや高めになっていた。味はおいしかった。地ビール4種飲み比べ のメニューがあってそれぞれ飲んでみた。どれも特徴があって好みが分かれると思う。私は雪のビール (カニビール) が一番好みだった。最初の1-2品を頼んでみて量が少なかったのでそれからは2皿頼むことにした。5人という人数は料理の量やお皿を置く位置と席の配置が難しい。2皿ないとどちらか一方の端にいる人は料理を取れない。
21時頃に晩ご飯を終えて21時半から恒例の親睦会に移る。今回は初日に2人、2日目に3人と分けて発表してもらう。詳細は省くがおもしろかった。人数が少なくて時間も余裕があるからゆっくり雑談しながら発表内容についてあれこれ話しができてよかったと思う。人数が少ないから濃い話しや雑談になる。これは昨年よりも参加者数を少なくしたことのメリットだと思う。その後も作業したり雑談しながら25時半頃に寝た。私はいびきがうるさかったら申し訳ないから1Fで毛布にくるまって寝てた。暖房を入れておいたら寒くもなくよく眠れた。4時間ほど寝て1時間も深い睡眠があった。運転したり普段とは違うことをして疲れていたようにみえる。</description><content>&lt;p>1時前まで資料作りをして2時過ぎに寝た。神戸から城崎温泉まで3時間もあれば着くことはこれまでの経験でわかっていた。三ノ宮で8時半に待ち合わせてして出掛ける。出掛けていろいろやってたので今日のバドミントン練習はお休み。&lt;/p>
&lt;h2 id="開発合宿へ出掛ける">開発合宿へ出掛ける&lt;/h2>
&lt;p>今回は一緒に車で移動するのは1人だけ。レンタカーを借りずに社用車で出掛ける。8時半に待ち合わせして9時半頃に &lt;a href="http://www.nishiki-sa.jp/">西紀サービスエリア&lt;/a> で休憩。丹波産の黒豆は使っていないらしいが &lt;a href="https://shikano-hyogo.co.jp/news/988/">黒豆せんべい&lt;/a> を買ってみたらおいしかった。また今度買ってみようと思う。その後、出発したもののナビの案内がおかしい。中継地点として西紀 SA を設定していたため、出発した後も西紀 SA へ向かうようなループした案内になってしまった。中継地点を通過したことを登録するか、ナビのルート案内をやり直す必要があった。失敗。あとナビの目的地を城崎温泉駅にするよりも「但馬空港IC」のように高速道路の出口を指定した方が高速道路を使ったルート案内になるように思える。ナビの設定で回避できるかもしれないが、なるべく高速道路よりも下道を使うようなルート案内が行われてしまう。&lt;/p>
&lt;p>やや運転トラブルはあったものの結果的には予定通りの11時半に &lt;a href="https://kinosaki-kinoie.com/index.html">きのいえ&lt;/a> に到着した。スタッフさんもおられてそのまますぐにチェックイン手続してくれた。前回はクレジットカードの上限設定を超えて決済できなかった。今回は上限設定を見直していたので問題なく手続きできた。プロジェクターとの接続チェックで手間取った。wifi の接続先が 2.4g と 5g あり、プロジェクターが 2.4g を使っているためにラップトップも 2.4g に接続しないと接続できなかった。周波数をあわせないと接続できないというのを学んだ。&lt;/p>
&lt;p>その後、12時半、14時半と電車や自分の車で来られた参加者と合流。今回の参加者は私も含めて5人。参加者が &lt;a href="https://store.google.com/jp/product/chromecast_google_tv?hl=ja">chromecast&lt;/a> をもってきていた。プロジェクターに hdmi 接続で chromecast を接続し、chromecast はモバイルバッテリーから電源をとる。これで wifi 接続すれば、OS に関係なく chrome ブラウザなら画面共有できるようになる。ブラウザのタブ単体と画面全体のどちらでも共有できる。プロジェクターが提供する ios キャスト (airplay) やミラキャストは os ごとに設定を変えないといけないのでそれが面倒になる。いま chromecast は生産中止になっていて現行機種は &lt;a href="https://store.google.com/product/google_tv_streamer?hl=ja">Google TV Streamer&lt;/a> になり、値段も16,000円とやや高い。このデバイスとモバイルバッテリーをもっておけば、開発合宿のような、不特定多数のラップトップで画面共有するときに便利なことを学んだ。&lt;/p>
&lt;p>雑談しながら作業したり、お風呂へ行ったりしながら19時からイタリアンのビールレストラン &lt;a href="https://tabelog.com/hyogo/A2808/A280801/28009545/">GUBIGABU&lt;/a> で晩ご飯にした。この時期はまだカニが解禁されていない。インフレのせいか、値段はやや高めになっていた。味はおいしかった。&lt;a href="https://kinosaki-kanko.com/craft-beer/">地ビール4種飲み比べ&lt;/a> のメニューがあってそれぞれ飲んでみた。どれも特徴があって好みが分かれると思う。私は雪のビール (カニビール) が一番好みだった。最初の1-2品を頼んでみて量が少なかったのでそれからは2皿頼むことにした。5人という人数は料理の量やお皿を置く位置と席の配置が難しい。2皿ないとどちらか一方の端にいる人は料理を取れない。&lt;/p>
&lt;p>21時頃に晩ご飯を終えて21時半から恒例の親睦会に移る。今回は初日に2人、2日目に3人と分けて発表してもらう。詳細は省くがおもしろかった。人数が少なくて時間も余裕があるからゆっくり雑談しながら発表内容についてあれこれ話しができてよかったと思う。人数が少ないから濃い話しや雑談になる。これは昨年よりも参加者数を少なくしたことのメリットだと思う。その後も作業したり雑談しながら25時半頃に寝た。私はいびきがうるさかったら申し訳ないから1Fで毛布にくるまって寝てた。暖房を入れておいたら寒くもなくよく眠れた。4時間ほど寝て1時間も深い睡眠があった。運転したり普段とは違うことをして疲れていたようにみえる。&lt;/p></content></item></channel></rss>