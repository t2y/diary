<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2024/10 on</title><link>/diary/dates/2024/10/</link><description>Recent content in 2024/10 on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 25 Oct 2024 13:02:31 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/dates/2024/10/index.xml" rel="self" type="application/rss+xml"/><item><title>テストを書きなぐり</title><link>/diary/posts/2024/1025/</link><pubDate>Fri, 25 Oct 2024 13:02:31 +0900</pubDate><guid>/diary/posts/2024/1025/</guid><description>今日のバドミントン練習はエアシャトルでリフティングを20分した。連続最大回数は235回できた。出張休み明けだからあまりできないかと思ったが、そうでもなかった。他に122, 192回と20分しかやっていないのに200回超えして、さらに100回超えが2回もあった。練習の間が空いたから慎重にシャトルをみて取り組めたのかもしれない。エアシャトルでのリフティングも200回を超えるようになってきたら別の練習メニューへ移っていく。
神戸にいると、いつも通りのロウカット玄米と生卵と納豆に野菜サラダを食べられる。外食しなくて済むとほっとする。一昨日からの結合テストのリファクタリングを区切りとして終わらせた。一日中テストデータ生成処理のリファクタリングと足りないテストコードの追加をしていた。テストコードの妥当性をカバレッジで確認できるようになったので安心してテストの品質を管理できる。
レゾナンスの楽曲 apple music で 澤野弘之 氏をお気に入り登録しているせいか、新しいアルバムの配信が始まった的な通知をみかけた。これはなんだろう？と調べたら レゾナンス：無限号列車 というスマホゲームの音楽を担当しているらしい。プロモーションアニメも本格的なものが作られている。このイントロの数秒を聞いただけでこれは澤野弘之氏の音楽だとわかる。近未来且つ SF 的な雰囲気。</description><content>&lt;p>今日のバドミントン練習はエアシャトルでリフティングを20分した。連続最大回数は235回できた。出張休み明けだからあまりできないかと思ったが、そうでもなかった。他に122, 192回と20分しかやっていないのに200回超えして、さらに100回超えが2回もあった。練習の間が空いたから慎重にシャトルをみて取り組めたのかもしれない。エアシャトルでのリフティングも200回を超えるようになってきたら別の練習メニューへ移っていく。&lt;/p>
&lt;p>神戸にいると、いつも通りのロウカット玄米と生卵と納豆に野菜サラダを食べられる。外食しなくて済むとほっとする。一昨日からの結合テストのリファクタリングを区切りとして終わらせた。一日中テストデータ生成処理のリファクタリングと足りないテストコードの追加をしていた。テストコードの妥当性をカバレッジで確認できるようになったので安心してテストの品質を管理できる。&lt;/p>
&lt;h2 id="レゾナンスの楽曲">レゾナンスの楽曲&lt;/h2>
&lt;p>apple music で &lt;a href="https://www.sawanohiroyuki.com/">澤野弘之&lt;/a> 氏をお気に入り登録しているせいか、新しいアルバムの配信が始まった的な通知をみかけた。これはなんだろう？と調べたら &lt;a href="https://rzns.jp/">レゾナンス：無限号列車&lt;/a> というスマホゲームの音楽を担当しているらしい。プロモーションアニメも本格的なものが作られている。このイントロの数秒を聞いただけでこれは澤野弘之氏の音楽だとわかる。近未来且つ SF 的な雰囲気。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/G-BLrbA5YQE" allowfullscreen title="【Production I.G x Hiroyuki SAWANO x 大張正己】『レゾナンス』アニメーションPV《Prologue》">&lt;/iframe>
&lt;/div></content></item><item><title>飛行機での出張帰り</title><link>/diary/posts/2024/1024/</link><pubDate>Thu, 24 Oct 2024 13:02:46 +0900</pubDate><guid>/diary/posts/2024/1024/</guid><description>夜に神戸に戻ってきてからオフィスに来て、機内でやっていた作業を区切りのよいところまで進めてコミットしたりしていた。その後スーパーへ買いものへ行ったりしていた。今日もバドミントン練習はおやすみ。
ローカルは standalone mongodb mongodb の レプリケーション 機能を使っていて、replica set の設定が容易なことから bitnami/mongodb というコンテナを使っている。これまで結合テストもレプリケーション機能を設定して実行するようにしていた。結合テストの量が増えてきたのもあって実行時間が徐々に遅くなってきた。いまテストのリファクタリングをしているため、ローカルで検証のために何度も実行する必要がある。コードの品質を上げるためにテストを書きやすくする必要がある。実行時間は短いほどよい。そこでローカルでの実行はレプリケーションを設定しないようにしてみた。さらに go のデータ競合を検知する -race オプションも外してテストを実行してみたところ、この2つの改善で macbook の環境で改善前より45%ほど速くなった。十分な高速化を図れた。
飛行機ルートのふりかえり 8月に大雨で新幹線が止まってしまい 神戸に帰れない状況 に直面した。私はほとんど飛行機に乗ったことがなかったため、新幹線が動かないときの迂回手段として飛行機のルートに慣れておく。普段リュックサックに小さいカッターとマイナスドライバーを携帯している。これらは飛行機の手荷物検査でとめられてしまう。荷物を預けるか、検査場で処分してもらうしかない。前回は ANA で帰ってきたが、今回は スカイマーク の飛行機に乗った。値段が安いから LCC だと思っていたら スカイマークは安くて快適なMCC らしい。ANA に比べたらずっと小さい飛行機だった。
タイムスケジュールは次のようになった。
18:15 (都営浅草線) 五反田 発 18:56 (京急本線) 羽田空港 着 19:45 搭乗開始 19:55 飛行機の座席に着く 20:08 羽田空港の滑走路を発進 20:20 離陸 (機内は暗かった、ラップトップで作業) 21:16 神戸空港の滑走路に着陸 21:22 降機 21:25 空港内の荷物受け取り場に着く 21:30 荷物を受け取り 21:35 (ポートライナー) 神戸空港 発 21:51 (ポートライナー) 貿易センター 着 新幹線だと次のようなタイムスケジュールになる。トータルの時間でみれば新幹線の方が20-30分早いかなといったところ。一方で新幹線だと2時間半、同じ姿勢で座っている必要がある。飛行機だと座っている時間は1時間強。飛行機は搭乗手続きのチェックポイントがいくつかあってそれぞれに細かい待ち時間ができてしまうのが気になる。そのときの体調によってもどちらがよいかは変わってくるかもしれない。来月は行きは飛行機、帰りは新幹線にしてみる。
17:57 (JR) 五反田 発 18:03 (JR) 品川 着 18:19 (新幹線) 品川 発 20:53 (新幹線) 新神戸 着 21:10 (市営地下鉄) 新神戸 21:12 (市営地下鉄) 三宮</description><content>&lt;p>夜に神戸に戻ってきてからオフィスに来て、機内でやっていた作業を区切りのよいところまで進めてコミットしたりしていた。その後スーパーへ買いものへ行ったりしていた。今日もバドミントン練習はおやすみ。&lt;/p>
&lt;h2 id="ローカルは-standalone-mongodb">ローカルは standalone mongodb&lt;/h2>
&lt;p>mongodb の &lt;a href="https://www.mongodb.com/docs/manual/replication/">レプリケーション&lt;/a> 機能を使っていて、replica set の設定が容易なことから &lt;a href="https://hub.docker.com/r/bitnami/mongodb">bitnami/mongodb&lt;/a> というコンテナを使っている。これまで結合テストもレプリケーション機能を設定して実行するようにしていた。結合テストの量が増えてきたのもあって実行時間が徐々に遅くなってきた。いまテストのリファクタリングをしているため、ローカルで検証のために何度も実行する必要がある。コードの品質を上げるためにテストを書きやすくする必要がある。実行時間は短いほどよい。そこでローカルでの実行はレプリケーションを設定しないようにしてみた。さらに go のデータ競合を検知する &lt;code>-race&lt;/code> オプションも外してテストを実行してみたところ、この2つの改善で macbook の環境で改善前より45%ほど速くなった。十分な高速化を図れた。&lt;/p>
&lt;h2 id="飛行機ルートのふりかえり">飛行機ルートのふりかえり&lt;/h2>
&lt;p>8月に大雨で新幹線が止まってしまい &lt;a href="/diary/diary/posts/2024/0829/">神戸に帰れない状況&lt;/a> に直面した。私はほとんど飛行機に乗ったことがなかったため、新幹線が動かないときの迂回手段として飛行機のルートに慣れておく。普段リュックサックに小さいカッターとマイナスドライバーを携帯している。これらは飛行機の手荷物検査でとめられてしまう。荷物を預けるか、検査場で処分してもらうしかない。前回は ANA で帰ってきたが、今回は &lt;a href="https://www.skymark.co.jp/ja/">スカイマーク&lt;/a> の飛行機に乗った。値段が安いから LCC だと思っていたら &lt;a href="https://japantour.airtrip.jp/column/magazine/skymark-why-popularity-goodvalue/">スカイマークは安くて快適なMCC&lt;/a> らしい。ANA に比べたらずっと小さい飛行機だった。&lt;/p>
&lt;p>タイムスケジュールは次のようになった。&lt;/p>
&lt;pre tabindex="0">&lt;code>18:15 (都営浅草線) 五反田 発
18:56 (京急本線) 羽田空港 着
19:45 搭乗開始
19:55 飛行機の座席に着く
20:08 羽田空港の滑走路を発進
20:20 離陸
(機内は暗かった、ラップトップで作業)
21:16 神戸空港の滑走路に着陸
21:22 降機
21:25 空港内の荷物受け取り場に着く
21:30 荷物を受け取り
21:35 (ポートライナー) 神戸空港 発
21:51 (ポートライナー) 貿易センター 着
&lt;/code>&lt;/pre>&lt;p>新幹線だと次のようなタイムスケジュールになる。トータルの時間でみれば新幹線の方が20-30分早いかなといったところ。一方で新幹線だと2時間半、同じ姿勢で座っている必要がある。飛行機だと座っている時間は1時間強。飛行機は搭乗手続きのチェックポイントがいくつかあってそれぞれに細かい待ち時間ができてしまうのが気になる。そのときの体調によってもどちらがよいかは変わってくるかもしれない。来月は行きは飛行機、帰りは新幹線にしてみる。&lt;/p>
&lt;pre tabindex="0">&lt;code>17:57 (JR) 五反田 発
18:03 (JR) 品川 着
18:19 (新幹線) 品川 発
20:53 (新幹線) 新神戸 着
21:10 (市営地下鉄) 新神戸
21:12 (市営地下鉄) 三宮
&lt;/code>&lt;/pre></content></item><item><title>本番導入へ向けての社内キックオフ</title><link>/diary/posts/2024/1023/</link><pubDate>Wed, 23 Oct 2024 13:02:45 +0900</pubDate><guid>/diary/posts/2024/1023/</guid><description>出張で道具がないのでバドミントン練習はおやすみ。
プロジェクトの進捗報告 出張したときの月例報告の21回目。前々回の進捗報告はこちら 。前回の9月は特別な話題がなかったのもあって書いてなかった。今回も淡々と進捗を報告してあまり話題はないものの、プログラミングを教えることの、抽象化能力と論理的思考、モジュール設計について話題にしてみた。経験のあるプログラマーやできる人は勝手にできてしまうものの、普通の人へどうやって指導していけばいいのか。どこでもよく聞く話しではあるし、プロダクト開発で課題管理をする上での延長上にある話題かもしれない。プロジェクトで解かないといけない問題の本質を認識できるかどうか、気付くかどうかという個人の素養に基づくところが大きい。経験を積んでスキルアップする過程で身につけていく特性を言語化したり明文化したりすることには意味がある。いまの私は答えをもっていないのだけど、とりとめのないの話題だけ共有した。
その後、ある案件の社内向けキックオフがあった。うちらが約2年開発してきたプロダクトがお客さん先で導入することが決まった。1月にテストして2月下旬から本番導入となる。最初のお客さんなので本番導入後のトラブルがあることも想定しておく。それが終わったらフルタイムもお仕事もようやく終えられるかもしれない。うちの会社のプロダクト開発に工数を取るようにしていきたい。</description><content>&lt;p>出張で道具がないのでバドミントン練習はおやすみ。&lt;/p>
&lt;h2 id="プロジェクトの進捗報告">プロジェクトの進捗報告&lt;/h2>
&lt;p>出張したときの月例報告の21回目。&lt;a href="/diary/diary/posts/2024/0731/">前々回の進捗報告はこちら&lt;/a> 。前回の9月は特別な話題がなかったのもあって書いてなかった。今回も淡々と進捗を報告してあまり話題はないものの、プログラミングを教えることの、抽象化能力と論理的思考、モジュール設計について話題にしてみた。経験のあるプログラマーやできる人は勝手にできてしまうものの、普通の人へどうやって指導していけばいいのか。どこでもよく聞く話しではあるし、プロダクト開発で課題管理をする上での延長上にある話題かもしれない。プロジェクトで解かないといけない問題の本質を認識できるかどうか、気付くかどうかという個人の素養に基づくところが大きい。経験を積んでスキルアップする過程で身につけていく特性を言語化したり明文化したりすることには意味がある。いまの私は答えをもっていないのだけど、とりとめのないの話題だけ共有した。&lt;/p>
&lt;p>その後、ある案件の社内向けキックオフがあった。うちらが約2年開発してきたプロダクトがお客さん先で導入することが決まった。1月にテストして2月下旬から本番導入となる。最初のお客さんなので本番導入後のトラブルがあることも想定しておく。それが終わったらフルタイムもお仕事もようやく終えられるかもしれない。うちの会社のプロダクト開発に工数を取るようにしていきたい。&lt;/p></content></item><item><title>とりとめのない出張初日</title><link>/diary/posts/2024/1022/</link><pubDate>Tue, 22 Oct 2024 13:02:43 +0900</pubDate><guid>/diary/posts/2024/1022/</guid><description>出張で道具がないのでバドミントン練習はおやすみ。
始発の新幹線で東京へ。定例会議に出て、昨日の カバレッジ計測 の成果をメンバーに共有して、その後もバグ修正や結合テストのリファクタリングをしていた。夕方には疲労で眠くなってきて17時でお仕事を終えて、お気に入りの 中華料理屋さんの晩酌セット を食べて、ホテルに帰って3時間ほど寝てた。起きてから軽く散歩に外に出たぐらいでまたホテルに戻って寝てた。毎月の出張で生活のリズムが乱れる。食べものと生活の拠点がいつもと違うのがしんどくなってきた。</description><content>&lt;p>出張で道具がないのでバドミントン練習はおやすみ。&lt;/p>
&lt;p>始発の新幹線で東京へ。定例会議に出て、昨日の &lt;a href="/diary/diary/posts/2024/1021/">カバレッジ計測&lt;/a> の成果をメンバーに共有して、その後もバグ修正や結合テストのリファクタリングをしていた。夕方には疲労で眠くなってきて17時でお仕事を終えて、お気に入りの &lt;a href="/diary/diary/posts/2024/0924/">中華料理屋さんの晩酌セット&lt;/a> を食べて、ホテルに帰って3時間ほど寝てた。起きてから軽く散歩に外に出たぐらいでまたホテルに戻って寝てた。毎月の出張で生活のリズムが乱れる。食べものと生活の拠点がいつもと違うのがしんどくなってきた。&lt;/p></content></item><item><title>出張前日の資料づくり</title><link>/diary/posts/2024/1021/</link><pubDate>Mon, 21 Oct 2024 12:46:20 +0900</pubDate><guid>/diary/posts/2024/1021/</guid><description>今日は1日中オフィスにこもって作業と出張準備をしていたのでバドミントン練習はお休み。夕方にお土産として モロゾフのプリンクッキー を購入するために本店へ行ってきた。これも神戸限定らしい。
パッケージ外のディレクトリにあるテストのカバレッジ計測 先日 深夜にバイナリのビルド・起動調査 をしたのに、最終的にはそんなことしなくてもよかった。デフォルトではパッケージ外のディレクトリにあるテストのカバレッジを計測しないことから普通にはできないと考えていた。しかし、調べたら次の SO で解決法をみつけた。結論としては -coverpkg ./... のように go test で実行している結合テストに対してオプションを指定するだけでよかった。
How to detect code-coverage of separated folders in GO? この調査を終えて最終的な makefile の coverage ターゲットは次のようになった。
coverage: lint rm -f coverage.* go test -tags=integration -race -cover ./... -coverpkg ./... -covermode atomic -coverprofile=coverage.out go tool cover -html coverage.out -o coverage.html この make ターゲットを gitlab ci/cd から実行して coverage.out/coverage.html を自動生成する。coverage.out があるので必要に応じて好みのツールで統計情報を解析すればよい。たとえば nikolaydubina/go-cover-treemap でツリーマップを作るなら次のように実行する。
$ go-cover-treemap -coverprofile coverage.out &amp;gt; treemap.svg 近況報告の資料作り 普段は週末に報告資料を作っているのにもうやる気が無さ過ぎてお仕事を終えてから作っている。今回はネガティブな内容も報告に入れる。過去の経緯などを調査しながら3時間もあれば一通りのアウトラインはできた。明日がマイルストーンの最終日になるため、明日を終えてからでないと細かい数字は決定しない。マイルストーンの issue を調べたら qa テストでみつけた不具合の issue がそれなりに溜まっているようにみえる。本当は次のマイルストーンで5次開発は完了予定だが、もう1つ増やしてもよいかもしれない。いずれにしても12月／1月に本番導入のための準備もある。今の開発フェーズを完了しても次の開発フェーズには入らないのではないかという見通しもある。</description><content>&lt;p>今日は1日中オフィスにこもって作業と出張準備をしていたのでバドミントン練習はお休み。夕方にお土産として &lt;a href="https://shop.morozoff.co.jp/c/region/kobe">モロゾフのプリンクッキー&lt;/a> を購入するために本店へ行ってきた。これも神戸限定らしい。&lt;/p>
&lt;h2 id="パッケージ外のディレクトリにあるテストのカバレッジ計測">パッケージ外のディレクトリにあるテストのカバレッジ計測&lt;/h2>
&lt;p>先日 &lt;a href="/diary/diary/posts/2024/1018/#go-test-からバイナリをビルドしてサーバーを起動する">深夜にバイナリのビルド・起動調査&lt;/a> をしたのに、最終的にはそんなことしなくてもよかった。デフォルトではパッケージ外のディレクトリにあるテストのカバレッジを計測しないことから普通にはできないと考えていた。しかし、調べたら次の SO で解決法をみつけた。結論としては &lt;code>-coverpkg ./...&lt;/code> のように go test で実行している結合テストに対してオプションを指定するだけでよかった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/34535704/how-to-detect-code-coverage-of-separated-folders-in-go">How to detect code-coverage of separated folders in GO?&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>この調査を終えて最終的な makefile の coverage ターゲットは次のようになった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">coverage&lt;/span>&lt;span style="color:#f92672">:&lt;/span> lint
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rm -f coverage.*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> go test -tags&lt;span style="color:#f92672">=&lt;/span>integration -race -cover ./... -coverpkg ./... -covermode atomic -coverprofile&lt;span style="color:#f92672">=&lt;/span>coverage.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> go tool cover -html coverage.out -o coverage.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この make ターゲットを gitlab ci/cd から実行して coverage.out/coverage.html を自動生成する。coverage.out があるので必要に応じて好みのツールで統計情報を解析すればよい。たとえば &lt;a href="https://github.com/nikolaydubina/go-cover-treemap">nikolaydubina/go-cover-treemap&lt;/a> でツリーマップを作るなら次のように実行する。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ go-cover-treemap -coverprofile coverage.out &amp;gt; treemap.svg
&lt;/code>&lt;/pre>&lt;h2 id="近況報告の資料作り">近況報告の資料作り&lt;/h2>
&lt;p>普段は週末に報告資料を作っているのにもうやる気が無さ過ぎてお仕事を終えてから作っている。今回はネガティブな内容も報告に入れる。過去の経緯などを調査しながら3時間もあれば一通りのアウトラインはできた。明日がマイルストーンの最終日になるため、明日を終えてからでないと細かい数字は決定しない。マイルストーンの issue を調べたら qa テストでみつけた不具合の issue がそれなりに溜まっているようにみえる。本当は次のマイルストーンで5次開発は完了予定だが、もう1つ増やしてもよいかもしれない。いずれにしても12月／1月に本番導入のための準備もある。今の開発フェーズを完了しても次の開発フェーズには入らないのではないかという見通しもある。&lt;/p></content></item><item><title>バドミントンの基本練習</title><link>/diary/posts/2024/1020/</link><pubDate>Sun, 20 Oct 2024 14:36:03 +0900</pubDate><guid>/diary/posts/2024/1020/</guid><description>今日のバドミントン練習は磯上体育館で9時から12時半頃まで3時間ほど練習できた。ひとりでリフティング練習をするよりも相手がいて打ち合いする方がずっと楽しい。午前中にしっかり動いたので2万歩を超えて昨日の消費エネルギーは4500カロリーを超えた。
体育館でバドミントン 前回の所感 。磯上体育館では月に2回ぐらい個人利用という先着順で予約できる仕組みがある。8時過ぎに磯上体育館へ行ったらすでに2組並んでいた。先頭の方は9時から2面予約するという。私は3番目で並んでいた。8時半頃には10人以上後ろに並んでいたので8時頃に行くと確実に予約できると思う。事務側も本当は9時から受付だけど、並んでいるせいか8時45分頃から予約受け付けしてれくた。こうやって予約を取るためにどんどん並ぶ時間が早くなっていくのかもしれない。
先頭に並んでいたシニアの方が気さくに周りに声をかけていて、話しているうちに仲良くなってその人たちの9時からの練習に混ぜてもらうことになった。ベテランのシニアな方で経験もあって教え方もとても上手だった。丁寧に教えてくれてすごく勉強になった。来週も個人利用で9時から借りると話されていたのを聞いて来週も練習に混ぜてもらうことにした。今日は3つの打ち方の基本を教えてもらいながら練習した。
クリア コートの奥から相手のコート奥へ大きく前方へ打ち返す ドロップ クリアを同じ打ち方でコートの奥からネットを超えた前方位置へゆるく落とす プッシュ ネット前で浮いた球を下方に叩きつけるような打ち方になる 打ちながら、私のラケットの振り方や持ち方のよくないところを指摘してもらった。我流でやっていたからちゃんとした知識やフォームを教えてもらえるのは本当にありがたい。教えてもらったことで覚えていることを書いておく。
足は肩幅に開いて準備をする まだ言語化できないが、右足/左足の使い方について説明されてた 足の親指部分にチカラを入れてコントロールするように話されていた フットワークと足の位置を意識してみる 私は無意識に一歩目は左足から動いてしまう フォアハンドで打つときは右足から動いた方が速いのかもしれない シャトルが来てから動くのではなく、来る前から位置を予測して動いて備える ラケットを振るときに左手をあげてカラダのバランスをとる 基本として左手をどう使うのかがすごく大事とのこと 左手を下げない、肘を90度にまげてあげるのに備えておく 手首をまげずに固定してラケットを振る ラケットは親指と人差し指でつまむ気持ちで軽くもち、シャトルを打ち返す瞬間だけ握る この感覚で打ち返すと真っ直ぐ強い打球を返せるようになった バックハンドで返すときも同様でシャトルを打つ瞬間だけ握り込んで止めるような感覚で返す 向かってくるシャトルに対してカラダの正面でとらえて打つ この位置を固定にすることで安定して打ち返せる気がする 1時間ちょっと練習の指導をしてもらって30分ほどダブルスの試合をした。私は下手だからすぐ失敗してラリーが止まってしまう。試合形式になると簡単そうにみえるシャトルの打ち返しも緊張や前後左右の動きの中で失敗してしまう。練習でできないことは試合では絶対にできない。ラリーを止めてしまって他の人たちに悪いなと罪悪感を感じるし、練習する方がたくさんシャトルを打つことができて楽しい。もう少し上達するまでは試合は棄権しようかなとも思う。11時からいとうさんが来られて、前の時間帯に教えてもらった打ち方を意識しながらひたすら打ち合いの練習をしていた。その前の練習で教えてもらったことをゆっくり反復する時間をとれてこの時間もよかった。基本の打ち方を教えてもらった通りにやっていると狙ったところにうまく返せる回数が増えたように感じた。
ストレッチ 先週は実家へ帰ってストレッチをお休みして2週間ぶり。午前中にバドミントンの練習をたくさんして疲れていたのと、試合をしているときにころんで足と腰を少し痛めていた。その部位を伸ばす意図でもストレッチしてもらってちょうどよかった。運動して筋肉痛もある状態でストレッチするとよく伸びて、その日の睡眠もよく取れるし疲労回復も早くなる。今日の開脚幅は開始前146cmで、ストレッチ後155cmだった。ストレッチ前は筋肉痛で伸びないのがストレッチ後によく伸びていることが伺える。トレーナーさんはサッカーをずっとされていた方なのでたまたまはてブでみかけた町田ゼルビアの記事を話題にしたら盛り上がった。この著者の記事が3つもあがっているようにいまホット話題ではあるらしい。
なぜ町田ゼルビアは叩かれるのか？ここ2年の出来事を振り返る③ ストレッチを終えて晩ご飯を食べた後にオフィスで作業しようと思っていたものの、家に帰ったら疲れてそのまま休んでしまった。体調が悪いわけでもないのに、最近はやらないといけないことをがんばる気力がなくなっている。なにか内からのやりたいが出てこない。</description><content>&lt;p>今日のバドミントン練習は磯上体育館で9時から12時半頃まで3時間ほど練習できた。ひとりでリフティング練習をするよりも相手がいて打ち合いする方がずっと楽しい。午前中にしっかり動いたので2万歩を超えて昨日の消費エネルギーは4500カロリーを超えた。&lt;/p>
&lt;h2 id="体育館でバドミントン">体育館でバドミントン&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2024/0918/#体育館でバドミントン">前回の所感&lt;/a> 。磯上体育館では月に2回ぐらい個人利用という先着順で予約できる仕組みがある。8時過ぎに磯上体育館へ行ったらすでに2組並んでいた。先頭の方は9時から2面予約するという。私は3番目で並んでいた。8時半頃には10人以上後ろに並んでいたので8時頃に行くと確実に予約できると思う。事務側も本当は9時から受付だけど、並んでいるせいか8時45分頃から予約受け付けしてれくた。こうやって予約を取るためにどんどん並ぶ時間が早くなっていくのかもしれない。&lt;/p>
&lt;p>先頭に並んでいたシニアの方が気さくに周りに声をかけていて、話しているうちに仲良くなってその人たちの9時からの練習に混ぜてもらうことになった。ベテランのシニアな方で経験もあって教え方もとても上手だった。丁寧に教えてくれてすごく勉強になった。来週も個人利用で9時から借りると話されていたのを聞いて来週も練習に混ぜてもらうことにした。今日は3つの打ち方の基本を教えてもらいながら練習した。&lt;/p>
&lt;ul>
&lt;li>クリア
&lt;ul>
&lt;li>コートの奥から相手のコート奥へ大きく前方へ打ち返す&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ドロップ
&lt;ul>
&lt;li>クリアを同じ打ち方でコートの奥からネットを超えた前方位置へゆるく落とす&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>プッシュ
&lt;ul>
&lt;li>ネット前で浮いた球を下方に叩きつけるような打ち方になる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>打ちながら、私のラケットの振り方や持ち方のよくないところを指摘してもらった。我流でやっていたからちゃんとした知識やフォームを教えてもらえるのは本当にありがたい。教えてもらったことで覚えていることを書いておく。&lt;/p>
&lt;ul>
&lt;li>足は肩幅に開いて準備をする
&lt;ul>
&lt;li>まだ言語化できないが、右足/左足の使い方について説明されてた&lt;/li>
&lt;li>足の親指部分にチカラを入れてコントロールするように話されていた&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>フットワークと足の位置を意識してみる
&lt;ul>
&lt;li>私は無意識に一歩目は左足から動いてしまう
&lt;ul>
&lt;li>フォアハンドで打つときは右足から動いた方が速いのかもしれない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>シャトルが来てから動くのではなく、来る前から位置を予測して動いて備える&lt;/li>
&lt;li>ラケットを振るときに左手をあげてカラダのバランスをとる
&lt;ul>
&lt;li>基本として左手をどう使うのかがすごく大事とのこと&lt;/li>
&lt;li>左手を下げない、肘を90度にまげてあげるのに備えておく&lt;/li>
&lt;li>手首をまげずに固定してラケットを振る&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ラケットは親指と人差し指でつまむ気持ちで軽くもち、シャトルを打ち返す瞬間だけ握る
&lt;ul>
&lt;li>この感覚で打ち返すと真っ直ぐ強い打球を返せるようになった&lt;/li>
&lt;li>バックハンドで返すときも同様でシャトルを打つ瞬間だけ握り込んで止めるような感覚で返す&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>向かってくるシャトルに対してカラダの正面でとらえて打つ
&lt;ul>
&lt;li>この位置を固定にすることで安定して打ち返せる気がする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>1時間ちょっと練習の指導をしてもらって30分ほどダブルスの試合をした。私は下手だからすぐ失敗してラリーが止まってしまう。試合形式になると簡単そうにみえるシャトルの打ち返しも緊張や前後左右の動きの中で失敗してしまう。練習でできないことは試合では絶対にできない。ラリーを止めてしまって他の人たちに悪いなと罪悪感を感じるし、練習する方がたくさんシャトルを打つことができて楽しい。もう少し上達するまでは試合は棄権しようかなとも思う。11時からいとうさんが来られて、前の時間帯に教えてもらった打ち方を意識しながらひたすら打ち合いの練習をしていた。その前の練習で教えてもらったことをゆっくり反復する時間をとれてこの時間もよかった。基本の打ち方を教えてもらった通りにやっていると狙ったところにうまく返せる回数が増えたように感じた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>先週は実家へ帰ってストレッチをお休みして2週間ぶり。午前中にバドミントンの練習をたくさんして疲れていたのと、試合をしているときにころんで足と腰を少し痛めていた。その部位を伸ばす意図でもストレッチしてもらってちょうどよかった。運動して筋肉痛もある状態でストレッチするとよく伸びて、その日の睡眠もよく取れるし疲労回復も早くなる。今日の開脚幅は開始前146cmで、ストレッチ後155cmだった。ストレッチ前は筋肉痛で伸びないのがストレッチ後によく伸びていることが伺える。トレーナーさんはサッカーをずっとされていた方なのでたまたまはてブでみかけた町田ゼルビアの記事を話題にしたら盛り上がった。この著者の記事が3つもあがっているようにいまホット話題ではあるらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://note.com/shv12/n/nab3420c578d4">なぜ町田ゼルビアは叩かれるのか？ここ2年の出来事を振り返る③ &lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ストレッチを終えて晩ご飯を食べた後にオフィスで作業しようと思っていたものの、家に帰ったら疲れてそのまま休んでしまった。体調が悪いわけでもないのに、最近はやらないといけないことをがんばる気力がなくなっている。なにか内からのやりたいが出てこない。&lt;/p></content></item><item><title>コンパクトな REALFORCE R1 キーボード</title><link>/diary/posts/2024/1019/</link><pubDate>Sat, 19 Oct 2024 12:26:39 +0900</pubDate><guid>/diary/posts/2024/1019/</guid><description>今日は午前中寝ていたのと雨降りだったのもありバドミントン練習はお休みした。
REALFORCE R1 レビュー bluetooth の初回ペアリング設定を過去の R3 のペアリング設定 をみながら行った。手順を忘れていたのでまた書いておく。agent を介してパスキーを入力する必要がある。その手順が少しわかりにくい。30分ほどペアリング設定をうまくできなくてやり直ししたりしていた。滅多にやらないことだし。今回も GUI ツールではなく bluetoothctl を実行してペアリングした。
$ bluetoothctl [REALFORCE_2 (R3)]# default-agent Default agent request successful [REALFORCE_2 (R3)]# scan on Discovery started ... (デバイスを検索しているうちに RC1 がみつかる) ... MAC アドレスを確認してペアリングする [REALFORCE_2 (R3)]# pair F7:62:4B:02:D6:EB Attempting to pair with F7:62:4B:02:D6:EB (キーボードに接続を試みる) .. [agent] Passkey: 946185 (エージェントがパスキーを受け取る) ... エージェントが受け取ったパスキーを、bluetooth 接続するキーボードで入力して Enter を押下する。
[NEW] Primary Service (Handle 0x0000) /org/bluez/hci0/dev_F7_62_4B_02_D6_EB/service000a 00001801-0000-1000-8000-00805f9b34fb Generic Attribute Profile [NEW] Primary Service (Handle 0x0000) /org/bluez/hci0/dev_F7_62_4B_02_D6_EB/service000b 0000180a-0000-1000-8000-00805f9b34fb Device Information [NEW] Characteristic (Handle 0x0000) /org/bluez/hci0/dev_F7_62_4B_02_D6_EB/service000b/char000c 00002a29-0000-1000-8000-00805f9b34fb Manufacturer Name String [NEW] Characteristic (Handle 0x0000) /org/bluez/hci0/dev_F7_62_4B_02_D6_EB/service000b/char000e 00002a50-0000-1000-8000-00805f9b34fb PnP ID [NEW] Primary Service (Handle 0x0000) /org/bluez/hci0/dev_F7_62_4B_02_D6_EB/service0010 0000180f-0000-1000-8000-00805f9b34fb Battery Service [NEW] Characteristic (Handle 0x0000) /org/bluez/hci0/dev_F7_62_4B_02_D6_EB/service0010/char0011 00002a19-0000-1000-8000-00805f9b34fb Battery Level [NEW] Descriptor (Handle 0x0000) /org/bluez/hci0/dev_F7_62_4B_02_D6_EB/service0010/char0011/desc0013 00002902-0000-1000-8000-00805f9b34fb Client Characteristic Configuration [CHG] Device F7:62:4B:02:D6:EB UUIDs: 00001800-0000-1000-8000-00805f9b34fb [CHG] Device F7:62:4B:02:D6:EB UUIDs: 00001801-0000-1000-8000-00805f9b34fb [CHG] Device F7:62:4B:02:D6:EB UUIDs: 0000180a-0000-1000-8000-00805f9b34fb [CHG] Device F7:62:4B:02:D6:EB UUIDs: 0000180f-0000-1000-8000-00805f9b34fb [CHG] Device F7:62:4B:02:D6:EB UUIDs: 00001812-0000-1000-8000-00805f9b34fb [CHG] Device F7:62:4B:02:D6:EB ServicesResolved: yes [CHG] Device F7:62:4B:02:D6:EB Paired: yes Pairing successful [CHG] Device F7:62:4B:02:D6:EB Modalias: usb:v0853p031Ad0001 .</description><content>&lt;p>今日は午前中寝ていたのと雨降りだったのもありバドミントン練習はお休みした。&lt;/p>
&lt;h2 id="realforce-r1-レビュー">REALFORCE R1 レビュー&lt;/h2>
&lt;p>bluetooth の初回ペアリング設定を過去の &lt;a href="/diary/diary/posts/2021/1102/#realforce-のワイヤレスモデル">R3 のペアリング設定&lt;/a> をみながら行った。手順を忘れていたのでまた書いておく。agent を介してパスキーを入力する必要がある。その手順が少しわかりにくい。30分ほどペアリング設定をうまくできなくてやり直ししたりしていた。滅多にやらないことだし。今回も GUI ツールではなく bluetoothctl を実行してペアリングした。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bluetoothctl
[REALFORCE_2 (R3)]# default-agent
Default agent request successful
[REALFORCE_2 (R3)]# scan on
Discovery started
... (デバイスを検索しているうちに RC1 がみつかる)
... MAC アドレスを確認してペアリングする
[REALFORCE_2 (R3)]# pair F7:62:4B:02:D6:EB
Attempting to pair with F7:62:4B:02:D6:EB (キーボードに接続を試みる)
..
[agent] Passkey: 946185 (エージェントがパスキーを受け取る)
...
&lt;/code>&lt;/pre>&lt;p>エージェントが受け取ったパスキーを、bluetooth 接続するキーボードで入力して Enter を押下する。&lt;/p>
&lt;pre tabindex="0">&lt;code>[NEW] Primary Service (Handle 0x0000)
/org/bluez/hci0/dev_F7_62_4B_02_D6_EB/service000a
00001801-0000-1000-8000-00805f9b34fb
Generic Attribute Profile
[NEW] Primary Service (Handle 0x0000)
/org/bluez/hci0/dev_F7_62_4B_02_D6_EB/service000b
0000180a-0000-1000-8000-00805f9b34fb
Device Information
[NEW] Characteristic (Handle 0x0000)
/org/bluez/hci0/dev_F7_62_4B_02_D6_EB/service000b/char000c
00002a29-0000-1000-8000-00805f9b34fb
Manufacturer Name String
[NEW] Characteristic (Handle 0x0000)
/org/bluez/hci0/dev_F7_62_4B_02_D6_EB/service000b/char000e
00002a50-0000-1000-8000-00805f9b34fb
PnP ID
[NEW] Primary Service (Handle 0x0000)
/org/bluez/hci0/dev_F7_62_4B_02_D6_EB/service0010
0000180f-0000-1000-8000-00805f9b34fb
Battery Service
[NEW] Characteristic (Handle 0x0000)
/org/bluez/hci0/dev_F7_62_4B_02_D6_EB/service0010/char0011
00002a19-0000-1000-8000-00805f9b34fb
Battery Level
[NEW] Descriptor (Handle 0x0000)
/org/bluez/hci0/dev_F7_62_4B_02_D6_EB/service0010/char0011/desc0013
00002902-0000-1000-8000-00805f9b34fb
Client Characteristic Configuration
[CHG] Device F7:62:4B:02:D6:EB UUIDs: 00001800-0000-1000-8000-00805f9b34fb
[CHG] Device F7:62:4B:02:D6:EB UUIDs: 00001801-0000-1000-8000-00805f9b34fb
[CHG] Device F7:62:4B:02:D6:EB UUIDs: 0000180a-0000-1000-8000-00805f9b34fb
[CHG] Device F7:62:4B:02:D6:EB UUIDs: 0000180f-0000-1000-8000-00805f9b34fb
[CHG] Device F7:62:4B:02:D6:EB UUIDs: 00001812-0000-1000-8000-00805f9b34fb
[CHG] Device F7:62:4B:02:D6:EB ServicesResolved: yes
[CHG] Device F7:62:4B:02:D6:EB Paired: yes
Pairing successful
[CHG] Device F7:62:4B:02:D6:EB Modalias: usb:v0853p031Ad0001
...
[REALFORCE_2 (R3)]# exit
&lt;/code>&lt;/pre>&lt;p>ペアリングが成功したらキーボード入力できるようになる。bluetoothctl を eixt してから再実行すると今度は RC1 で実行された。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bluetoothctl
[RC1_1]# info
Device F7:62:4B:01:D6:EB (random)
Name: RC1_1
Alias: RC1_1
Appearance: 0x03c1
Icon: input-keyboard
Paired: yes
Trusted: no
Blocked: no
Connected: yes
WakeAllowed: yes
LegacyPairing: no
UUID: Generic Access Profile (00001800-0000-1000-8000-00805f9b34fb)
UUID: Generic Attribute Profile (00001801-0000-1000-8000-00805f9b34fb)
UUID: Device Information (0000180a-0000-1000-8000-00805f9b34fb)
UUID: Battery Service (0000180f-0000-1000-8000-00805f9b34fb)
UUID: Human Interface Device (00001812-0000-1000-8000-00805f9b34fb)
Modalias: usb:v0853p031Ad0001
Battery Percentage: 0x5b (91)
[RC1_1]# trust
[CHG] Device F7:62:4B:02:D6:EB Trusted: yes
&lt;/code>&lt;/pre>&lt;p>この日記を R1 のキーボードで書いている。R3 と比べてたしかにコンパクトで軽い。キーボードを持ち運びするならよさそう。R3 と比べて右シフトキーが小さいのでその隣にある PgUp キーをタイプミスしてしまう。私は左右両方のシフトキーを使う。!記号などの左手でタイプするときは右シフトキーを使う。それからコンパクトサイズのせいか、キーとキーの隙間が若干狭くなったように感じる。矢印キーの位置もエンターキーの下の方に移動している。R3 の矢印キーの位置を無意識にタイプしようとして空打ちしてしまう。意外と矢印キーを私は使っていたことに気付く。これらの操作の違和感は慣れの問題だと思う。キーボードの打鍵感も R3 と比べて若干違う。気持ち、深さが増して軽い印象を受ける。キー荷重は 45g を選択した。R3 では変荷重モデルを使っていたので小指キーが 30g から 45g に変わる。その違いはあまり感じない。&lt;/p>
&lt;p>キーボードは毎日たくさん使うものだから慣れによる無意識の最適化が自然と行われる。私の用途では R3 と R1 では右シフトキーと矢印キーの位置の違いに違和感を感じる。両方のキーボードを使い分けるというようにはならないのかもしれない。どちらかに慣れるともう一方に違和感を抱くように思える。&lt;/p>
&lt;h2 id="能楽の勉強">能楽の勉強&lt;/h2>
&lt;p>&lt;a href="https://nohgaku-kyodo.com/repertoire/yondemiru-yohkihi20241019">玄宗皇帝と楊貴妃の愛情物語の後日談《楊貴妃》 第41回能のことばを読んでみる会&lt;/a> に参加してきた。&lt;a href="/diary/diary/posts/2024/0630/#能楽の勉強">前回の所感はここ&lt;/a> 。中国史上もっとも有名な美人といわれる &lt;a href="https://ja.wikipedia.org/wiki/%E6%A5%8A%E8%B2%B4%E5%A6%83">楊貴妃&lt;/a> の幽霊を主人公とした能になる。&lt;a href="https://ja.wikipedia.org/wiki/%E6%96%B9%E5%A3%AB">方士&lt;/a> と呼ばれる修行者が玄宗皇帝の命令で楊貴妃の魂魄の在り処を探していて蓬莱島でみつけて話しを聞くといった、とくに変わったこともない普通の物語の構成になっている。作者ははっきり分かっていないらしいが、世阿弥の娘婿になる金春禅竹 (こんぱる ぜんちく) ではないかと推定されるとのこと。&lt;/p>
&lt;p>&lt;a href="https://ja.wikipedia.org/wiki/%E8%B2%B4%E5%A6%83">貴妃&lt;/a> というのは皇帝の后に与えられる位の1つで皇后に次ぐ高い位だという。楊が姓になる。唐の &lt;a href="https://ja.wikipedia.org/wiki/%E7%8E%84%E5%AE%97_(%E5%94%90)">玄宗皇帝&lt;/a> は在位期間が45年と長い。前半は善政をしいて唐は絶頂期を迎える。後半は楊貴妃にうつつを抜かすようになる。楊一族が政治の重要なポストを占めるようになり、玄宗皇帝が政治に関心をなくして最終的に反乱が起きて国が乱れてしまう。その後、白居易 (はくきょい) という著名な詩人が玄宗皇帝と楊貴妃の物語を &lt;a href="https://ja.wikipedia.org/wiki/%E9%95%B7%E6%81%A8%E6%AD%8C">長恨歌&lt;/a> にした。この漢詩が素晴らしい内容だと評価されて後世にまで楊貴妃の物語が広く伝わる影響を与えたという。&lt;/p>
&lt;p>源氏物語に出てくる &lt;a href="https://ja.wikipedia.org/wiki/%E6%A1%90%E5%A3%BA%E6%9B%B4%E8%A1%A3">桐壺更衣&lt;/a> (光源氏の母) が楊貴妃のイメージや長恨歌から引用されて創作されているという。この能は源氏物語に出てくる長恨歌を引用した文章を引用して作られてもいて、伝言ゲームのように、引用を繰り返すうちに少しその内容が変わってしまうといったことも起きているらしい。おもしろかったのが、漢詩に序文をつけたりするのを詩序と呼ぶ。オリジナルの中国の長恨歌には詩序がないのに、日本に伝わって残っている長恨歌には詩序が残っていて、その詩序の内容を能でも引用していたりする。当時は長恨歌には詩序があったのに現代では失われてしまった可能性もないわけではないが、おそらく日本に伝わってきた後に誰かが詩序を追加したのではないかと考えられているらしい。&lt;/p>
&lt;blockquote>
&lt;p>会者定離ぞと 聞く時は、逢うこそ別れなりけれ&lt;/p>
&lt;/blockquote>
&lt;p>以前 &lt;a href="/diary/diary/posts/2023/1021/#能楽の勉強">蝉丸の能&lt;/a> を読んだときにも &lt;a href="https://ja.wikipedia.org/wiki/%E4%BC%9A%E8%80%85%E5%AE%9A%E9%9B%A2">会者定離 (えしゃじょうり)&lt;/a> が出てきた。一種の悟りのような表現だと朝原さんが解説していて私も記憶によく残っている。直接なにかの役に立つわけではないけれど、こういう言葉や概念に触れて自分の価値観をふりかえる機会があるのはおもしろい。能の言葉を読んでいるとそういう出会いがある。&lt;/p></content></item><item><title>exec とスクリプト</title><link>/diary/posts/2024/1018/</link><pubDate>Fri, 18 Oct 2024 11:19:20 +0900</pubDate><guid>/diary/posts/2024/1018/</guid><description>今日のバドミントン練習はエアシャトルでリフティングを60分した。連続最大回数は191回だった。もう少しで200回だったのに残念。木曜日は睡眠をたくさんとって疲れは少し取れたし、安定的に50回前後は続くようになりつつも、100回までに失敗してしまう。今日は100回を超えたのが2回だけだった。ラケットのスィートスポットでとらえたときにきれいに真上にあがる感覚が楽しい。うまくいくときは数回は続く。それが自然にできるときとそうじゃないときの違いを私は制御できてなくて言語化もできない。
エアシャトルとメイビスにおけるリフティングの違いを比べてみると、メイビスの方が打ち上げて落ちてくるときにあまり回転せずコルクが下を向く傾向が多いようにみえる。エアシャトルの方がコルクが重い分、縦方向に回転し始めるとその回転が止まらず、回転しているからラケット面でとらえるのが難しくなる。だからエアシャトルの方がメイビスよりもリフティングが難しいといえる。シャトルを高く打ち上げると、落下してくる距離が長くなりその回転が落ち着く傾向があるからリフティングしやすくなるのではないかと仮説を考えた。伸び悩みかもしれないし、地道に練習を継続するときかもしれない。
exec とエントリーポイントのスクリプト コンテナを起動して stop すると SIGTERM が送られる。そのときに api サーバーでシグナルの処理をしているのに、気付いたらシグナル処理が行われずタイムアウトするようになっていた。デフォルトでは10秒でタイムアウトして強制終了となる。なぜシグナルを捕捉しなくなったかを調査したら、あるときサーバーの起動前に前処理が必要になってエントリーポイントをシェルスクリプトにしていた。そのときに exec しないと、シェルスクリプトのプロセスに対してシグナルが送られるため、api サーバーがシグナルを検知できなくなるという副作用があることに気付いた。これまでも exec を使うとプロセス ID は変更されないという知識を知っていたが、それがどういう状況で役に立つかを理解できていなかった。シグナルを用いた同期処理に exec が役に立つ状況があることを学んだ。修正は次の1行のみ。
--- a/docker/entrypoint.sh +++ b/docker/entrypoint.sh @@ -2,4 +2,4 @@ ... ... (pre process) ... -./bin/api &amp;#34;$@&amp;#34; +exec ./bin/api &amp;#34;$@&amp;#34; go test からバイナリをビルドしてサーバーを起動する 先日 結合テスト向けカバレッジ計測の調査 をした成果を使って実際に go test からカバレッジ計測のカスタマイズを施したバイナリをビルドしてサーバー起動するコードを書いてみた。やや手間取ったが、一通り動いてカバレッジを計測できた。例えば、単体テストのカバレッジを計測するための makefile のターゲットは次のようになる。
GO_COVER_DIR:=$(CURDIR)/tests/coverage coverage: @mkdir -p $(GO_COVER_DIR) go test -tags=integration -race -cover ./... -covermode atomic -args -test.gocoverdir=$(GO_COVER_DIR) go は fork ができない。fork の代わりに exec を使う。How do I fork a go process?</description><content>&lt;p>今日のバドミントン練習はエアシャトルでリフティングを60分した。連続最大回数は191回だった。もう少しで200回だったのに残念。木曜日は睡眠をたくさんとって疲れは少し取れたし、安定的に50回前後は続くようになりつつも、100回までに失敗してしまう。今日は100回を超えたのが2回だけだった。ラケットのスィートスポットでとらえたときにきれいに真上にあがる感覚が楽しい。うまくいくときは数回は続く。それが自然にできるときとそうじゃないときの違いを私は制御できてなくて言語化もできない。&lt;/p>
&lt;p>エアシャトルとメイビスにおけるリフティングの違いを比べてみると、メイビスの方が打ち上げて落ちてくるときにあまり回転せずコルクが下を向く傾向が多いようにみえる。エアシャトルの方がコルクが重い分、縦方向に回転し始めるとその回転が止まらず、回転しているからラケット面でとらえるのが難しくなる。だからエアシャトルの方がメイビスよりもリフティングが難しいといえる。シャトルを高く打ち上げると、落下してくる距離が長くなりその回転が落ち着く傾向があるからリフティングしやすくなるのではないかと仮説を考えた。伸び悩みかもしれないし、地道に練習を継続するときかもしれない。&lt;/p>
&lt;h2 id="exec-とエントリーポイントのスクリプト">exec とエントリーポイントのスクリプト&lt;/h2>
&lt;p>コンテナを起動して stop すると SIGTERM が送られる。そのときに api サーバーでシグナルの処理をしているのに、気付いたらシグナル処理が行われずタイムアウトするようになっていた。デフォルトでは10秒でタイムアウトして強制終了となる。なぜシグナルを捕捉しなくなったかを調査したら、あるときサーバーの起動前に前処理が必要になってエントリーポイントをシェルスクリプトにしていた。そのときに exec しないと、シェルスクリプトのプロセスに対してシグナルが送られるため、api サーバーがシグナルを検知できなくなるという副作用があることに気付いた。これまでも &lt;a href="https://ja.wikipedia.org/wiki/Exec">exec&lt;/a> を使うとプロセス ID は変更されないという知識を知っていたが、それがどういう状況で役に立つかを理解できていなかった。シグナルを用いた同期処理に exec が役に立つ状況があることを学んだ。修正は次の1行のみ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-diff" data-lang="diff">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">--- a/docker/entrypoint.sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+++ b/docker/entrypoint.sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span>&lt;span style="color:#75715e">@@ -2,4 +2,4 @@
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ... (pre process)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">-./bin/api &amp;#34;$@&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+exec ./bin/api &amp;#34;$@&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="go-test-からバイナリをビルドしてサーバーを起動する">go test からバイナリをビルドしてサーバーを起動する&lt;/h2>
&lt;p>先日 &lt;a href="/diary/diary/posts/2024/1011/#go-の結合テスト向けカバレッジ計測の考察">結合テスト向けカバレッジ計測の調査&lt;/a> をした成果を使って実際に go test からカバレッジ計測のカスタマイズを施したバイナリをビルドしてサーバー起動するコードを書いてみた。やや手間取ったが、一通り動いてカバレッジを計測できた。例えば、単体テストのカバレッジを計測するための makefile のターゲットは次のようになる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>GO_COVER_DIR&lt;span style="color:#f92672">:=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>CURDIR&lt;span style="color:#66d9ef">)&lt;/span>/tests/coverage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">coverage&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @mkdir -p &lt;span style="color:#66d9ef">$(&lt;/span>GO_COVER_DIR&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> go test -tags&lt;span style="color:#f92672">=&lt;/span>integration -race -cover ./... -covermode atomic -args -test.gocoverdir&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GO_COVER_DIR&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>go は &lt;a href="https://ja.wikipedia.org/wiki/Fork">fork&lt;/a> ができない。fork の代わりに exec を使う。&lt;a href="https://stackoverflow.com/a/28371586">How do I fork a go process?&lt;/a> に go の goroutine のスケジューリングと fork は相性が悪くてうまく動かないということが背景だと説明されている。それはともかく exec を使ってもサーバープロセスを非同期に起動できたのでそのスニペットを書いておく。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">binaryPath&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">buildBinary&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">args&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-verbose&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-port&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">Itoa&lt;/span>(&lt;span style="color:#a6e22e">ServerPort&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">r&lt;/span>, &lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Pipe&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewScanner&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Scan&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Text&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cmd&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">exec&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span>(&lt;span style="color:#a6e22e">binaryPath&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span>&lt;span style="color:#f92672">...&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cmd&lt;/span>.&lt;span style="color:#a6e22e">Stdout&lt;/span> = &lt;span style="color:#a6e22e">w&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cmd&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">slog&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to start api server&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;err&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cmd&lt;/span>.&lt;span style="color:#a6e22e">Process&lt;/span>.&lt;span style="color:#a6e22e">Signal&lt;/span>(&lt;span style="color:#a6e22e">syscall&lt;/span>.&lt;span style="color:#a6e22e">SIGTERM&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">slog&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to terminate the api process&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;err&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cmd&lt;/span>.&lt;span style="color:#a6e22e">Process&lt;/span>.&lt;span style="color:#a6e22e">Wait&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">slog&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to wait terminating the api process&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;err&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">slog&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;completed to terminate the api process&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// サーバーに対するテストを実行
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>サーバープロセスの標準出力のログを &lt;a href="/diary/diary/posts/2024/0919/">io.Pipe&lt;/a> を使って出力することもできる。exec で生成したプロセスに対してもシグナルを送ったり終了を待つこともできる。デバッグしている分にはこれで意図したように制御できた。この知見は将来的に役に立つ気がする。0時過ぎから調査を再開して4時前ぐらいまでやっていた。少しはまって時間はかかったものの、久しぶりに集中してデバッグしていた。&lt;/p></content></item><item><title>変な疲れかた</title><link>/diary/posts/2024/1017/</link><pubDate>Thu, 17 Oct 2024 08:53:01 +0900</pubDate><guid>/diary/posts/2024/1017/</guid><description>今日のバドミントン練習はエアシャトルでリフティングを40分した。連続最大回数は168回だった。いくつか練習場所を転々としながら最終的にはホームのビルの軒下に行き着いた。環境のよい場所を知ってしまうと、それよりも劣る環境で練習することに抵抗を感じてしまう。昼間なら風がなくて人通りの少ないところであればどこでもそう大差はないが、夜は証明と背景でシャトル視認性 が変わってくる。21時まではホームのビルで、21時以降はその隣のビルでといった定番の練習場所ができつつある。今日はなんとなく調子がよくなくて練習していて手応えや集中力を感じなかった。
午前中に結合テスト改善に関するドキュメントを書いて、お昼から rpm パッケージングのリファクタリングやって、夕方に午前中に書いたドキュメントを使いながらメンバーに結合テスト改善の要項について共有した。そして17時半にはお仕事終えて帰った。晩ご飯も外食してリフティング練習も早めに切り上げて帰った。ここ数日あまり睡眠時間を取れていなかったのもあり、疲れているかも？と21時過ぎから横になって寝ていた。</description><content>&lt;p>今日のバドミントン練習はエアシャトルでリフティングを40分した。連続最大回数は168回だった。いくつか練習場所を転々としながら最終的にはホームのビルの軒下に行き着いた。環境のよい場所を知ってしまうと、それよりも劣る環境で練習することに抵抗を感じてしまう。昼間なら風がなくて人通りの少ないところであればどこでもそう大差はないが、&lt;a href="/diary/diary/posts/2024/1012/#練習場所と照明と背景の考察">夜は証明と背景でシャトル視認性&lt;/a> が変わってくる。21時まではホームのビルで、21時以降はその隣のビルでといった定番の練習場所ができつつある。今日はなんとなく調子がよくなくて練習していて手応えや集中力を感じなかった。&lt;/p>
&lt;p>午前中に結合テスト改善に関するドキュメントを書いて、お昼から rpm パッケージングのリファクタリングやって、夕方に午前中に書いたドキュメントを使いながらメンバーに結合テスト改善の要項について共有した。そして17時半にはお仕事終えて帰った。晩ご飯も外食してリフティング練習も早めに切り上げて帰った。ここ数日あまり睡眠時間を取れていなかったのもあり、疲れているかも？と21時過ぎから横になって寝ていた。&lt;/p></content></item><item><title>テストライブラリの導入</title><link>/diary/posts/2024/1016/</link><pubDate>Wed, 16 Oct 2024 11:36:49 +0900</pubDate><guid>/diary/posts/2024/1016/</guid><description>今日のバドミントン練習はエアシャトルでリフティングを25分した。連続最大回数は277回できた。初めてエアシャトルで200回を超えた。しかも夜なのに。やや高めに打ち上げれば安定的にリフティングできるようになってきた。連続回数が増えることはラケットとシャトルの距離感、ラケットコントロールが上達していることの証左でもあるので200回を超えたときは嬉しかった。
テストライブラリの追加 結合テストを改善するために2つのライブラリを新たに使うよう導入した。
gavv/httpexpect stretchr/testify testify は名前だけ知っていたが、実際に使ってみるのは初めて。testify は大きく3つの機能もっている。
アサーション テストスィート モック うちらのチームで使うのはアサーション機能だけになる。モックも将来的に使う可能性はある。アサーションを使うと自分でエラーメッセージを書く手間を省ける。次のようなコードがあった場合、
if expected != actual { t.Errorf(&amp;#34;expected %d, but got %d&amp;#34;, expected, actual) return } 次のようにエラーレポートを testify に委譲できる。このぐらいの利便性でしかないが、テストの規模が大きくなったり、量が増えていけば読み書きのコストを削減できるかもしれない。
if !assert.Equal(expected, actual) { return } httpexpect はまったく知らなくて初めて使ってみたが、感触がよい。これもデフォルトのエラーレポート機能は testify のアサーション機能を使っているようにみえる。これまでは http リクエストに対して自前のユーティリティ関数と組み合わせて次のようなコードを書いていた。
res, err := doHTTPRequest(body, UserPath, http.MethodGet, &amp;#34;&amp;#34;) if res.StatusCode != http.StatusOK { t.Errorf(&amp;#34;expected to get %d, but got %d&amp;#34;, http.StatusOK, res.StatusCode) return } var actual entry.User if err := convertBody(res, &amp;amp;actual); err !</description><content>&lt;p>今日のバドミントン練習はエアシャトルでリフティングを25分した。連続最大回数は277回できた。初めてエアシャトルで200回を超えた。しかも夜なのに。やや高めに打ち上げれば安定的にリフティングできるようになってきた。連続回数が増えることはラケットとシャトルの距離感、ラケットコントロールが上達していることの証左でもあるので200回を超えたときは嬉しかった。&lt;/p>
&lt;h2 id="テストライブラリの追加">テストライブラリの追加&lt;/h2>
&lt;p>結合テストを改善するために2つのライブラリを新たに使うよう導入した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gavv/httpexpect">gavv/httpexpect&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/stretchr/testify">stretchr/testify&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>testify は名前だけ知っていたが、実際に使ってみるのは初めて。testify は大きく3つの機能もっている。&lt;/p>
&lt;ul>
&lt;li>アサーション&lt;/li>
&lt;li>テストスィート&lt;/li>
&lt;li>モック&lt;/li>
&lt;/ul>
&lt;p>うちらのチームで使うのはアサーション機能だけになる。モックも将来的に使う可能性はある。アサーションを使うと自分でエラーメッセージを書く手間を省ける。次のようなコードがあった場合、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">expected&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">actual&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;expected %d, but got %d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">expected&lt;/span>, &lt;span style="color:#a6e22e">actual&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>次のようにエラーレポートを testify に委譲できる。このぐらいの利便性でしかないが、テストの規模が大きくなったり、量が増えていけば読み書きのコストを削減できるかもしれない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">assert&lt;/span>.&lt;span style="color:#a6e22e">Equal&lt;/span>(&lt;span style="color:#a6e22e">expected&lt;/span>, &lt;span style="color:#a6e22e">actual&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>httpexpect はまったく知らなくて初めて使ってみたが、感触がよい。これもデフォルトのエラーレポート機能は testify のアサーション機能を使っているようにみえる。これまでは http リクエストに対して自前のユーティリティ関数と組み合わせて次のようなコードを書いていた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">doHTTPRequest&lt;/span>(&lt;span style="color:#a6e22e">body&lt;/span>, &lt;span style="color:#a6e22e">UserPath&lt;/span>, &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">MethodGet&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">StatusCode&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;expected to get %d, but got %d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>, &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">StatusCode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">actual&lt;/span> &lt;span style="color:#a6e22e">entry&lt;/span>.&lt;span style="color:#a6e22e">User&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">convertBody&lt;/span>(&lt;span style="color:#a6e22e">res&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">actual&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to convert: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>httpexpect を使うと次のように簡潔に記述できる上にエラーレポートを httpexpect に委譲できる。これはかなりテストコードを読み書きする工数を削減できると思う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">actual&lt;/span> &lt;span style="color:#a6e22e">entry&lt;/span>.&lt;span style="color:#a6e22e">User&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#a6e22e">UserPath&lt;/span>).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">WithJSON&lt;/span>(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">any&lt;/span>{ &lt;span style="color:#f92672">...&lt;/span> }).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Expect&lt;/span>().
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Status&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span>).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">JSON&lt;/span>().
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Decode&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">actual&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>mongodb のテストデータ管理</title><link>/diary/posts/2024/1015/</link><pubDate>Tue, 15 Oct 2024 08:52:01 +0900</pubDate><guid>/diary/posts/2024/1015/</guid><description>今日のバドミントン練習はエアシャトルでリフティングを45分した。連続最大回数は146回できた。調子は悪くなく安定的に30回前後は続くものの、50回を超えたぐらいで失敗してしまう。打ち上げる高さの違いかな？と気付いて少し高めに打ち上げるようにしたら100回を超えた。エアシャトルはラケット面に対して適切な角度でコルクを打たないとあらぬ方向に飛んでいってしまう。高く打ち上げるほど、重力で落ちてくるときにコルクが下を向きやすくなるため、うまくシャトルを打ち上げやすくなる。ラケットコントロールをうまくできれば、エアシャトルをより低い高さでリフティングできるようになるかもしれない。まだ私はそのレベルには満たない。
json からの mongodb にテストデータを追加する 結合テストの改善をしていてテストデータを json で管理したい。これまで go の構造体でテストデータを定義して mongodb の client で insert するといったことをしていた。それも役に立つのだけど、共有のテストデータがどこにあるのか、ソースコードに書いてしまうと時間とともに散らばっていって把握できなくなっていく。テストデータを管理するためのディレクトリを設け、そこに json で記述してどのテスト関数で使うかといったメタ情報も定義できるようにした。次のコードは mongodb に json からデータをインポートするための原理を説明するための疑似コードのようなもの。
go の構造体で定義したテストデータと json で管理するのとどちらがよいかというのは議論の余地はあるし、一概に言えないとは思う。
type testData struct { Documents []bson.Raw `bson:&amp;#34;documents&amp;#34;` } func InsertData( t *testing.T, client *mongo.Client, b []byte, ) (func()) { var data testData err := bson.UnmarshalExtJSON(b, false, &amp;amp;data) require.NoError(t, err, &amp;#34;failed to get json files: %v&amp;#34;, err) ctx := context.Background() col := client.Database(dbName).Collection(&amp;#34;mycollection&amp;#34;) r, err := col.</description><content>&lt;p>今日のバドミントン練習はエアシャトルでリフティングを45分した。連続最大回数は146回できた。調子は悪くなく安定的に30回前後は続くものの、50回を超えたぐらいで失敗してしまう。打ち上げる高さの違いかな？と気付いて少し高めに打ち上げるようにしたら100回を超えた。エアシャトルはラケット面に対して適切な角度でコルクを打たないとあらぬ方向に飛んでいってしまう。高く打ち上げるほど、重力で落ちてくるときにコルクが下を向きやすくなるため、うまくシャトルを打ち上げやすくなる。ラケットコントロールをうまくできれば、エアシャトルをより低い高さでリフティングできるようになるかもしれない。まだ私はそのレベルには満たない。&lt;/p>
&lt;h2 id="json-からの-mongodb-にテストデータを追加する">json からの mongodb にテストデータを追加する&lt;/h2>
&lt;p>結合テストの改善をしていてテストデータを json で管理したい。これまで go の構造体でテストデータを定義して mongodb の client で insert するといったことをしていた。それも役に立つのだけど、共有のテストデータがどこにあるのか、ソースコードに書いてしまうと時間とともに散らばっていって把握できなくなっていく。テストデータを管理するためのディレクトリを設け、そこに json で記述してどのテスト関数で使うかといったメタ情報も定義できるようにした。次のコードは mongodb に json からデータをインポートするための原理を説明するための疑似コードのようなもの。&lt;/p>
&lt;p>go の構造体で定義したテストデータと json で管理するのとどちらがよいかというのは議論の余地はあるし、一概に言えないとは思う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">testData&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Documents&lt;/span> []&lt;span style="color:#a6e22e">bson&lt;/span>.&lt;span style="color:#a6e22e">Raw&lt;/span> &lt;span style="color:#e6db74">`bson:&amp;#34;documents&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">InsertData&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>, &lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">mongo&lt;/span>.&lt;span style="color:#a6e22e">Client&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) (&lt;span style="color:#66d9ef">func&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#a6e22e">testData&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bson&lt;/span>.&lt;span style="color:#a6e22e">UnmarshalExtJSON&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">require&lt;/span>.&lt;span style="color:#a6e22e">NoError&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;failed to get json files: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">col&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Database&lt;/span>(&lt;span style="color:#a6e22e">dbName&lt;/span>).&lt;span style="color:#a6e22e">Collection&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;mycollection&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">col&lt;/span>.&lt;span style="color:#a6e22e">InsertMany&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">docsToInterfaces&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">Documents&lt;/span>&lt;span style="color:#f92672">...&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">require&lt;/span>.&lt;span style="color:#a6e22e">NoError&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;failed to insert: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">insertResult&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Helper&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">col&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Database&lt;/span>(&lt;span style="color:#a6e22e">dbName&lt;/span>).&lt;span style="color:#a6e22e">Collection&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;mycollection&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">InsertedIDs&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">filter&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bson&lt;/span>.&lt;span style="color:#a6e22e">D&lt;/span>{{&lt;span style="color:#a6e22e">Key&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;_id&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">Value&lt;/span>: &lt;span style="color:#a6e22e">id&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">col&lt;/span>.&lt;span style="color:#a6e22e">DeleteOne&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">filter&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to delete %s: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">id&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>呼び出し側のイメージ。defer で teardown を呼ぶことでテスト完了時に追加したテストデータを削除してくれる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">teardown&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">mongotest&lt;/span>.&lt;span style="color:#a6e22e">InsertData&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">mongoClient&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">teardown&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>bson.Raw として読み込める json データは bson パッケージのユーティリティを使って dump できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">dumpAsJSON&lt;/span>(&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#a6e22e">any&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bson&lt;/span>.&lt;span style="color:#a6e22e">MarshalExtJSON&lt;/span>(&lt;span style="color:#a6e22e">value&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">slog&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to marshal as extended JSON&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;err&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(string(&lt;span style="color:#a6e22e">b&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>バドミントンのセンスは距離感らしい</title><link>/diary/posts/2024/1014/</link><pubDate>Mon, 14 Oct 2024 13:45:52 +0900</pubDate><guid>/diary/posts/2024/1014/</guid><description>今日のバドミントン練習はエアシャトルでリフティングを110分 (エア110分) した。1回あたりは20-30分で休憩する。最大連続回数は192回だった。もうちょっとで200回を越せそう。
ラケットとシャトルの距離感の考察 エアシャトルでリフティングをしていると、きれいに真上にあげられるときとシャトルにスピンがかかってしまうときがある。スピンしてしまうと、ラケットのスィートスポットでコルクをとらえるのが難しくなる。試しにエアシャトルをラケット面に並べてみた。中心部でシャトル3つ分の横幅しかない。この中心部分でラケットのコルクをとらえるとうまく弾ける。シャトルが回転していると、コルクが垂直方向から傾いた角度でラケット面に当たったりフレームに当たる確率が高くなる。ラケットの上部だとシャトル2つ分の横幅しかない。リフティングを失敗してしまうのは回転中のシャトルをはたいたり、あらぬ方向へ飛ばしてしまうことが多い。うまくラケットコントロールを行い、なるべくシャトルをスピンさせずに上げることができればリフティングが安定する。
今日は昼間と夜間にビルの軒下で練習した。風の影響も軽微だったので安定的に連続して50回前後はできていたと思う。121, 146, 192, 152, 122, 106, 102, 120 と連続して100回を越せたのが8回もあった。うち2回は夜になる。メビウスだと100回に1-2回ラケットコントロールをミスしてシャトルをうまく上げられないときがある。そのときにリカバリをうまくやれば続けられる。安定的に100回程度のリフティングができるからリカバリを連続で2-4回できれば200回を超える。この原理はエアシャトルも同様になる。仮にエアシャトルだと20回に1回うまく上げられないとする。200回を超すには連続で10回リカバリできないといけない。リカバリできるかどうかは運の要素もある。回転しているシャトルがフレームのどこに当たるかでリカバリ可能な場合とそうではない場合がある。10回連続でリカバリするよりも5回連続の方が、5回連続よりも2回連続の方が容易な状況と言える。つまり、ラケットコントロールが上達するとリフティングにおけるシャトル打ち上げのミスが減る。ミスが減るとリカバリ試行の回数が減る。リカバリ試行の回数が減ると連続回数が増えるという理屈になる。
今日エアシャトルで192回連続で続いたことはたまたまリカバリが連続的に成功した結果であり、リカバリを必要とせず安定的にどれだけ長くリフティングを続けられるかの方が重要ではある。よいときのラケットコントロールの感触を覚えておいて再現できるように努めていく。
次の動画によると、バドミントンのセンスとは「距離感」とのこと。練習しているうちに距離感は少しずつよくなる。そして速いプレーになると距離感をつかむのはもっと難しいとのこと。
距離感をつかむための練習としては次になる。私がいまひとり練習しているのはまさにこれになる。
シャトルのキャッチ シャトルのリフティング 一人でロビングを打ってみる 2人いればシャトルパスもおすすめとのこと。
中学校体育館の夜間開放 バドミントンができる体育館探し。抽選予約のためのアカウント登録 を終えて初めての抽選。15日ゼロ時に抽選が行われる。初回なので0時頃に待機してみていた。本当に0時まわってから抽選のバッチ処理が動いているようでサイトで更新していると2-3分後に抽選結果が表示されるようになった。最大4つ抽選申し込みできる。残念ながらすべて落選だった。15日以降は先着順で予約できる。抽選結果が出た後も空きがあれば先着で校区以外の中学校も予約できる。校区以外の夜間開放されている中学校のうち、私が住んでいるところから近い区で駅から徒歩10-15分程度で歩いていけそうな中学校をピックアップしてみた。
灘区
原田中学校 中央区
渚中学校 兵庫区
兵庫中学校 湊川中学校 須佐野中学校 長田区
駒ケ林中学校 長田中学校 予想した通り、抽選確定後にみんな先着申し込みを検索しているらしく断続的に 504 エラーが出たりもしていた。私が検索して確認できた中では渚中学校と須佐野中学校に先着の空き枠が1つ2つあった。他の中学校はすべて埋まっていた。空きがある中学校もあるんだなと検索してみているうちに0時10分までにはそれらも誰かに先着予約されたみたいで埋まっていた。14日の深夜 (15日ゼロ時過ぎ) に街中の駅からアクセスのよい中学校の予約はすべて埋まると考えてよさそう。中学校によって貸し出し可能な日が平日／休日ともにあるところもあれば週末だけのところもある。11月はどこの体育館も予約できなかったが、今回は抽選申し込みと先着申し込みの雰囲気を把握できた。</description><content>&lt;p>今日のバドミントン練習はエアシャトルでリフティングを110分 (エア110分) した。1回あたりは20-30分で休憩する。最大連続回数は192回だった。もうちょっとで200回を越せそう。&lt;/p>
&lt;h2 id="ラケットとシャトルの距離感の考察">ラケットとシャトルの距離感の考察&lt;/h2>
&lt;p>エアシャトルでリフティングをしていると、きれいに真上にあげられるときとシャトルにスピンがかかってしまうときがある。スピンしてしまうと、ラケットのスィートスポットでコルクをとらえるのが難しくなる。試しにエアシャトルをラケット面に並べてみた。中心部でシャトル3つ分の横幅しかない。この中心部分でラケットのコルクをとらえるとうまく弾ける。シャトルが回転していると、コルクが垂直方向から傾いた角度でラケット面に当たったりフレームに当たる確率が高くなる。ラケットの上部だとシャトル2つ分の横幅しかない。リフティングを失敗してしまうのは回転中のシャトルをはたいたり、あらぬ方向へ飛ばしてしまうことが多い。うまくラケットコントロールを行い、なるべくシャトルをスピンさせずに上げることができればリフティングが安定する。&lt;/p>
&lt;p>今日は昼間と夜間にビルの軒下で練習した。風の影響も軽微だったので安定的に連続して50回前後はできていたと思う。121, 146, 192, 152, 122, 106, 102, 120 と連続して100回を越せたのが8回もあった。うち2回は夜になる。メビウスだと100回に1-2回ラケットコントロールをミスしてシャトルをうまく上げられないときがある。そのときにリカバリをうまくやれば続けられる。安定的に100回程度のリフティングができるからリカバリを連続で2-4回できれば200回を超える。この原理はエアシャトルも同様になる。仮にエアシャトルだと20回に1回うまく上げられないとする。200回を超すには連続で10回リカバリできないといけない。リカバリできるかどうかは運の要素もある。回転しているシャトルがフレームのどこに当たるかでリカバリ可能な場合とそうではない場合がある。10回連続でリカバリするよりも5回連続の方が、5回連続よりも2回連続の方が容易な状況と言える。つまり、ラケットコントロールが上達するとリフティングにおけるシャトル打ち上げのミスが減る。ミスが減るとリカバリ試行の回数が減る。リカバリ試行の回数が減ると連続回数が増えるという理屈になる。&lt;/p>
&lt;p>今日エアシャトルで192回連続で続いたことはたまたまリカバリが連続的に成功した結果であり、リカバリを必要とせず安定的にどれだけ長くリフティングを続けられるかの方が重要ではある。よいときのラケットコントロールの感触を覚えておいて再現できるように努めていく。&lt;/p>
&lt;p>次の動画によると、バドミントンのセンスとは「距離感」とのこと。練習しているうちに距離感は少しずつよくなる。そして速いプレーになると距離感をつかむのはもっと難しいとのこと。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/pOT9o7L92FI" allowfullscreen title="【バドのセンス】初心者の方のよくある悩み⑩【ありますか？】">&lt;/iframe>
&lt;/div>
&lt;p>距離感をつかむための練習としては次になる。私がいまひとり練習しているのはまさにこれになる。&lt;/p>
&lt;ul>
&lt;li>シャトルのキャッチ&lt;/li>
&lt;li>シャトルのリフティング&lt;/li>
&lt;li>一人でロビングを打ってみる&lt;/li>
&lt;/ul>
&lt;p>2人いればシャトルパスもおすすめとのこと。&lt;/p>
&lt;h2 id="中学校体育館の夜間開放">中学校体育館の夜間開放&lt;/h2>
&lt;p>バドミントンができる体育館探し。&lt;a href="/diary/diary/posts/2024/0920/#バドミントンの練習場所の確保">抽選予約のためのアカウント登録&lt;/a> を終えて初めての抽選。15日ゼロ時に抽選が行われる。初回なので0時頃に待機してみていた。本当に0時まわってから抽選のバッチ処理が動いているようでサイトで更新していると2-3分後に抽選結果が表示されるようになった。最大4つ抽選申し込みできる。残念ながらすべて落選だった。15日以降は先着順で予約できる。抽選結果が出た後も空きがあれば先着で校区以外の中学校も予約できる。校区以外の夜間開放されている中学校のうち、私が住んでいるところから近い区で駅から徒歩10-15分程度で歩いていけそうな中学校をピックアップしてみた。&lt;/p>
&lt;p>灘区&lt;/p>
&lt;ul>
&lt;li>原田中学校&lt;/li>
&lt;/ul>
&lt;p>中央区&lt;/p>
&lt;ul>
&lt;li>渚中学校&lt;/li>
&lt;/ul>
&lt;p>兵庫区&lt;/p>
&lt;ul>
&lt;li>兵庫中学校&lt;/li>
&lt;li>湊川中学校&lt;/li>
&lt;li>須佐野中学校&lt;/li>
&lt;/ul>
&lt;p>長田区&lt;/p>
&lt;ul>
&lt;li>駒ケ林中学校&lt;/li>
&lt;li>長田中学校&lt;/li>
&lt;/ul>
&lt;p>予想した通り、抽選確定後にみんな先着申し込みを検索しているらしく断続的に 504 エラーが出たりもしていた。私が検索して確認できた中では渚中学校と須佐野中学校に先着の空き枠が1つ2つあった。他の中学校はすべて埋まっていた。空きがある中学校もあるんだなと検索してみているうちに0時10分までにはそれらも誰かに先着予約されたみたいで埋まっていた。14日の深夜 (15日ゼロ時過ぎ) に街中の駅からアクセスのよい中学校の予約はすべて埋まると考えてよさそう。中学校によって貸し出し可能な日が平日／休日ともにあるところもあれば週末だけのところもある。11月はどこの体育館も予約できなかったが、今回は抽選申し込みと先着申し込みの雰囲気を把握できた。&lt;/p></content></item><item><title>田んぼの畝作り</title><link>/diary/posts/2024/1013/</link><pubDate>Sun, 13 Oct 2024 22:36:30 +0900</pubDate><guid>/diary/posts/2024/1013/</guid><description>今日のバドミントン練習は主にエアシャトルでリフティングを80分 (メイビス10分、エア70分) した。今日の連続最大回数は79回だった。メイビスなら10分以内に200回は続けられるようになってきた。ウォームアップにメイビスでリフティングを始める。今日は5回目ぐらいで250回続いた。リフティング練習を1時間もやれば1日の消費エネルギーは3,000カロリーを超える。
田んぼの宿題 8月に実家に帰って田んぼを耕した が、土がよく乾いていて畝を作れるような状態ではなかった。その後、雨を待って土が適度に水分を含む状態になるのを待っていた。帰れるタイミングもあって今日になった。前回から約2ヶ月たつとまた雑草が茂り始めていたところだった。雑草を駆除するだけでも3ヶ月に1回ぐらいの頻度で田んぼを耕さないといけない。昨日の夜から帰っていたため、朝7時半ぐらいからトラクターで耕し始めて11時頃には畝作りも終えた。
いずれコワーキングスペースで農業体験を始めたらトラクターで田んぼを耕すのもメニューに組み込みたい。多くの人はトラクターになんか乗ったことないだろうから1度はやってみたいと思う。3ヶ月に1回は雑草駆除のために耕した方がよい。気軽に縦横無尽に田んぼを耕せる機会を提供しやすい。
その後、粗大ごみを市の処分センターにもって行ってお昼ご飯食べてから帰途につく。
いつもと違う帰り道 先日の 毎日1つ新しいことを試して変化を楽しむ という学びを思い出したのと、時間に余裕があったからいつもと違う道を通ってみようと、明石海峡大橋を渡って垂水ジャンクションから降りて海岸線の下道を走りながら帰ってきた。垂水ジャンクションの出口は山側になるのでそこから海岸線までわりと距離がある。海岸線に下るのに20分ほどかかる。垂水から須磨の海岸線はそんなに混雑しないので下道でもそれほど時間はかからない。10分ぐらいかな。その後、若宮からまた阪神高速に乗る。湊川IC付近は常に渋滞する というのも知った上で軽い渋滞なら高速の方が早いだろうと予測した。やはり渋滞はしていたものの、それでも時速20-30kmで流れている程度の軽微な渋滞だったので20-30分で若宮-京橋間を走って帰宅した。垂水ジャンクションを降りずにそのまま高速道路を走るよりもずっと時間はかかっているのだけど、知らない道を走るというのも気分転換にはなる。
バドミントンの練習 ダイソーでベルトにひっかけるポーチ (300円) とベルト (100円) を購入した。エアシャトル も9個購入した。このポーチにシャトルを10個ほど詰めて、こまめにシャトルを拾わなくても効率よく練習できるようにした。
夕方から磯上公園でリフティングをしていたが、いまひとつ続かない。調子が悪い。田んぼ作業で疲れているせい？暗くなったので場所を変える。旧居留地にある新しい練習場所としてワイズロードの近くや三井住友銀行神戸本部ビルの前とか、転々としながら試してみたがいまいち。その後、バスの営業所の駐車場へ行った。まぁまぁできたが、風がやや吹いているのが気になって、次にみなとのもり公園へ行ってみたが、そこはもっと風が強くてリフティングできる環境ではなかった。最後に サンボーホール のビルへ行ってみた。前から試してみたいと思っていた。このビル前の広場も休日の昼間は子ども連れの家族がよく遊んでいる。日曜日の22時には誰もいない。
磯上公園よりもバスの営業所よりも風の影響が小さくてとてもよかった。この場所で20分ほどエアシャトルでリフティングして安定的に20-30回をこなすことができた。最高は79回と過去最高ではないが、3回以上は連続50回を越した気がするので練習をしてしての感触は悪くなかった。そこでエアシャトルのリフティングは風の影響を受けやすいことに気付いた。エアシャトルを安定的にリフティングをするにはメイビスよりも高く打ち上げないといけない。しかし、高く打ち上げるほど風による影響を受けやすい。そよ風がふくだけでも軌道がずれる。シャトルが落ちてくる位置を目視しつつ予測しつつラケットコントロールをする。しかし、ちょっと風が吹くだけで微妙にズレてしまい、ラケットのフレームなどに当ててしまう。昼よりも夜の方が暗いから風の影響による補正が難しい。サンボーホールがもっとも風が弱くてリフティングが安定することに気付いた。そして、この場所は日曜日の夜でも照明がついている。
ホームのビル はオフィスビルのせいか、休日は消灯している。これまで休日の夜に練習する安定的な場所がなかった。だから休日は公園で明るい時間帯に練習してきた。しかし、サンボーホールが休日でも照明がついていて風の影響を受けにくい構造なら休日の夜の練習場所になるかもしれない。偶然よい場所をみつけた。</description><content>&lt;p>今日のバドミントン練習は主にエアシャトルでリフティングを80分 (メイビス10分、エア70分) した。今日の連続最大回数は79回だった。メイビスなら10分以内に200回は続けられるようになってきた。ウォームアップにメイビスでリフティングを始める。今日は5回目ぐらいで250回続いた。リフティング練習を1時間もやれば1日の消費エネルギーは3,000カロリーを超える。&lt;/p>
&lt;h2 id="田んぼの宿題">田んぼの宿題&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2024/0817/">8月に実家に帰って田んぼを耕した&lt;/a> が、土がよく乾いていて畝を作れるような状態ではなかった。その後、雨を待って土が適度に水分を含む状態になるのを待っていた。帰れるタイミングもあって今日になった。前回から約2ヶ月たつとまた雑草が茂り始めていたところだった。雑草を駆除するだけでも3ヶ月に1回ぐらいの頻度で田んぼを耕さないといけない。昨日の夜から帰っていたため、朝7時半ぐらいからトラクターで耕し始めて11時頃には畝作りも終えた。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2024/1013_field1.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2024/1013_field2.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2024/1013_field3.jpg"/>
&lt;/figure>
&lt;/p>
&lt;p>いずれコワーキングスペースで農業体験を始めたらトラクターで田んぼを耕すのもメニューに組み込みたい。多くの人はトラクターになんか乗ったことないだろうから1度はやってみたいと思う。3ヶ月に1回は雑草駆除のために耕した方がよい。気軽に縦横無尽に田んぼを耕せる機会を提供しやすい。&lt;/p>
&lt;p>その後、粗大ごみを市の処分センターにもって行ってお昼ご飯食べてから帰途につく。&lt;/p>
&lt;h2 id="いつもと違う帰り道">いつもと違う帰り道&lt;/h2>
&lt;p>先日の &lt;a href="/diary/diary/posts/2024/1008/#仕事は楽しいかね">毎日1つ新しいことを試して変化を楽しむ&lt;/a> という学びを思い出したのと、時間に余裕があったからいつもと違う道を通ってみようと、明石海峡大橋を渡って垂水ジャンクションから降りて海岸線の下道を走りながら帰ってきた。垂水ジャンクションの出口は山側になるのでそこから海岸線までわりと距離がある。海岸線に下るのに20分ほどかかる。垂水から須磨の海岸線はそんなに混雑しないので下道でもそれほど時間はかからない。10分ぐらいかな。その後、若宮からまた阪神高速に乗る。&lt;a href="/diary/diary/posts/2023/0813/#阪神高速3号神戸線">湊川IC付近は常に渋滞する&lt;/a> というのも知った上で軽い渋滞なら高速の方が早いだろうと予測した。やはり渋滞はしていたものの、それでも時速20-30kmで流れている程度の軽微な渋滞だったので20-30分で若宮-京橋間を走って帰宅した。垂水ジャンクションを降りずにそのまま高速道路を走るよりもずっと時間はかかっているのだけど、知らない道を走るというのも気分転換にはなる。&lt;/p>
&lt;h2 id="バドミントンの練習">バドミントンの練習&lt;/h2>
&lt;p>ダイソーでベルトにひっかけるポーチ (300円) とベルト (100円) を購入した。&lt;a href="https://jp.victorsport.com/product/77634/as-airshuttle-ii">エアシャトル&lt;/a> も9個購入した。このポーチにシャトルを10個ほど詰めて、こまめにシャトルを拾わなくても効率よく練習できるようにした。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2024/1013_pouch.jpg"/>
&lt;/figure>
&lt;p>夕方から磯上公園でリフティングをしていたが、いまひとつ続かない。調子が悪い。田んぼ作業で疲れているせい？暗くなったので場所を変える。旧居留地にある新しい練習場所としてワイズロードの近くや三井住友銀行神戸本部ビルの前とか、転々としながら試してみたがいまいち。その後、バスの営業所の駐車場へ行った。まぁまぁできたが、風がやや吹いているのが気になって、次にみなとのもり公園へ行ってみたが、そこはもっと風が強くてリフティングできる環境ではなかった。最後に &lt;a href="https://kobe-sanbo.net/">サンボーホール&lt;/a> のビルへ行ってみた。前から試してみたいと思っていた。このビル前の広場も休日の昼間は子ども連れの家族がよく遊んでいる。日曜日の22時には誰もいない。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2024/1013_building.jpg"/>
&lt;/figure>
&lt;p>磯上公園よりもバスの営業所よりも風の影響が小さくてとてもよかった。この場所で20分ほどエアシャトルでリフティングして安定的に20-30回をこなすことができた。最高は79回と過去最高ではないが、3回以上は連続50回を越した気がするので練習をしてしての感触は悪くなかった。そこでエアシャトルのリフティングは風の影響を受けやすいことに気付いた。エアシャトルを安定的にリフティングをするにはメイビスよりも高く打ち上げないといけない。しかし、高く打ち上げるほど風による影響を受けやすい。そよ風がふくだけでも軌道がずれる。シャトルが落ちてくる位置を目視しつつ予測しつつラケットコントロールをする。しかし、ちょっと風が吹くだけで微妙にズレてしまい、ラケットのフレームなどに当ててしまう。昼よりも夜の方が暗いから風の影響による補正が難しい。サンボーホールがもっとも風が弱くてリフティングが安定することに気付いた。そして、この場所は日曜日の夜でも照明がついている。&lt;/p>
&lt;p>&lt;a href="/diary/diary/posts/2024/1010/#バドミントンの練習場所探し">ホームのビル&lt;/a> はオフィスビルのせいか、休日は消灯している。これまで休日の夜に練習する安定的な場所がなかった。だから休日は公園で明るい時間帯に練習してきた。しかし、サンボーホールが休日でも照明がついていて風の影響を受けにくい構造なら休日の夜の練習場所になるかもしれない。偶然よい場所をみつけた。&lt;/p></content></item><item><title>照明の明るさや色合いとシャトル視認の考察</title><link>/diary/posts/2024/1012/</link><pubDate>Sat, 12 Oct 2024 14:02:25 +0900</pubDate><guid>/diary/posts/2024/1012/</guid><description>今日のバドミントン練習も引き続き主にエアシャトルでリフティングを70分 (駐車場10分、公園35分、ビル25分) した。土曜日なので昼間に駐車場や公園、ビルの軒下で練習した。20-30分もやれば集中力が途切れてくるので休憩と気分転換を兼ねて場所を移動している。今日の連続最大回数は122回だった。安定的に20-30回は続くようになってきた。メイビスフィールドだと10分やれば1度は200回以上続けられる程度に安定してきた。
エアシャトルのコルクが真下を向いているときにラケットのスィートスポットでとらえるとうまく上がる。失敗するときはラケットコントロールを誤ってシャトルを回転させてしまうことが多い。エアシャトルはコルクをラケットのガットでとらえないとうまく上がらない。回転しているとシャトルの裾をはたいたりコルクをフレームに当てて跳ね上がらなかったり、跳ね上がってもあらぬ方向へ飛んでいってしまう。軽い失敗で回転させてしまっても、ちょっと強めに打ち上げると重力で補正されてコルクが真下を向くように修正できるときがある。そのリカバリがうまくいくと連続回数が増えていく。
練習場所と照明と背景の考察 近所にバスの営業所があり、その駐車場が広くて明るかったので練習してみた。ここは24時まで照明がついている。周りは大きなマンションまたはビルに囲まれている。平日の22時台で20分ほど練習していたが誰も来なかった。広くて周りに気を遣う必要もなくシャトルも視認しやすかった。また今度行ってみようと思う。
先の駐車場の印象がよかったので広い駐車場なら練習しやすいのかな？と思って別のところへも行ってみた。基本的に駐車場は24時間照明がついていて明るいところが多い。しかし、駐車場ならどこでもいいわけでもなかった。次の駐車場はシャトルの背景が複数のビルと夜の闇で移り変わってしまい、背景の明るさが変わる影響でシャトルを視認しにくいことに気付いた。広くて明るければどこでも練習しやすいわけではないことに気付いた。
次に電球色なら昼白色の照明よりも目にやさしいから練習しやすいのではないかと考えた。旧居留地の有名な建物の隣のビル。写真ではわかりにくいが、次のビルの照明は橙色の電球色になる。試してみたら意外とシャトルを視認できなかった。その理由はシャトルの色が昼白色に映える赤色や黄色に着色されているため、電球色に照明に溶け込んでしまってシャトルそのものを視認しにくくなってしまうように思えた。もしかしたら白いシャトルなら逆にみやすいのかもしれない。今度また試してみる。
夜にバドミントンの練習をする場所探しで大事な要素がいくつかわかってきた。一見、明るさだけをみてよさそうに思えてもシャトルを使ってリフティングしてみると視認しにくい場合がある。実際に試さないとその場所がよいかどうかはわからない。今回の調査から考察したことをまとめる。
照明の明るさと色 暗すぎたらみえない スペース全体が明るくてもシャトルを視認しやすいとはかぎらない 照明が明る過ぎても眩しい 照明がそれほど強力ではなくても目と照明との距離が近いと眩しい 屋根の高いビルの軒下の視認性が高いのは目と照明との距離が遠いからだと気付いた 電球色だと赤／黄色のシャトルを視認しにくい 視界における背景色とシャトルとのコンストラクト シャトルを目で追うときに背景の明るさや色が変わると視認しにくい 背景が変わらない場所の方がその背景色に目が慣れてシャトルを視認しやすくなる ビルの軒下の視認性が高いのはビルからみえる壁や背景が一様だから スペースの広さ 近くに壁や垣根、屋根があると避けようとして注意力を取られる 周りに人が来ないことがわかっている場所の方が集中できる 駐車場は断続的に車や人が来るので集中しにくい 広い方が照明との距離を調整しやすい 周りの背景があまり変わらない殺風景な場所の方がシャトルを視認しやすい １日ひとつだけ、強くなる 昨日 はらさんに紹介してもらった梅原大吾の著書 の目次を眺めていくつか気になったところを読んでみた。1つの項目が2-3ページぐらいなのでタイトルで気になったところをすぐ読める。全体の3割ぐらいしか読んでいないけれど、それでも私には役に立ったので所感をブクログに書いてみた。
１日ひとつだけ、強くなる。 「格闘ゲーマーだって、正直飽きる」というタイトルがあってモチベーションコントロールについての梅原さんの考え方を読むことができた。私もプログラミングは好きだが、かといって飽きやマンネリがないわけではない。
この義務感というのは結構な曲者だ。時折「仕事でもないのに、そんな真剣にやってられるかよ」という人がいる。これは逆ではないだろうか。仕事が持つ義務感によって、かえって向上心を持つことが難しくなることは多い。義務感によってやらされているという、受け身の状態になってしまう。これが進行すると「最低限の基準さえ保っておけばそれでいいだろう」といた気持ちにまでなりかねない。
義務感によって受け身にならないこと。受け身というのは、外部からの刺激に依存したやり方だ。刺激を与えられている間はいいけれど、それがなくなればやる気もなくなる。
この悩みがあるときにひとりだと自分に言い訳をしてすぐ受け身の状態になってしまう。常に新しい取り組みや変化への挑戦をしていかないと、人間は怠惰で最低限の基準で受け身になってしまう。いまの私には耳の痛い話しでもある。そして、梅原さんの考え方を読んでいても、結局のところ、この状態を抜け出すにはモチベーションにとらわれない継続の仕組みを自分で見出すだけのように読めた。
評価してもらえない内的な成長を、どれだけ意識できるかで、モチベーションは大きく変わってくる。
プロであれアマチュアであれ、やるべきことは結局ほとんど変わらない。僕は、少しずつ自分のペースを取り戻していった。何か打ち込んでいることや、続けていることがあるのなら、成長のループを継続することを考えてほしい。毎日の歩みがいかにわずかであっても、安定した継続というのはそれだけで自信になるからだ。
本書のタイトルにもなっている「1日ひとつだけ」という言葉の背景として、梅原さんは1日を思い返して自身の成長を1つだけメモしているという。日記を書くことの意義とも共通する。日記の意義の1つはふりかえりを自然に行っていることになる。そして、外からみてわからない内的な成長を自分で気付いて成長を実感したり、自身の基準で肯定することが継続のためのモチベーションコントロールによいと梅原さんは実践している。この考え方は私が日記を3年書き続けていることから得た気付きとも合致する。よい時期によい本と出会えた。
実家へ帰る 先日トラクターで 真夏の硬い田んぼ を耕すのはやりにくかった。雨が降って適度に乾いた状態の田んぼを耕すために実家へ帰る。今日は親が外出しているというので20時から帰って明日、田んぼ作業をすることにした。</description><content>&lt;p>今日のバドミントン練習も引き続き主にエアシャトルでリフティングを70分 (駐車場10分、公園35分、ビル25分) した。土曜日なので昼間に駐車場や公園、ビルの軒下で練習した。20-30分もやれば集中力が途切れてくるので休憩と気分転換を兼ねて場所を移動している。今日の連続最大回数は122回だった。安定的に20-30回は続くようになってきた。メイビスフィールドだと10分やれば1度は200回以上続けられる程度に安定してきた。&lt;/p>
&lt;p>エアシャトルのコルクが真下を向いているときにラケットのスィートスポットでとらえるとうまく上がる。失敗するときはラケットコントロールを誤ってシャトルを回転させてしまうことが多い。エアシャトルはコルクをラケットのガットでとらえないとうまく上がらない。回転しているとシャトルの裾をはたいたりコルクをフレームに当てて跳ね上がらなかったり、跳ね上がってもあらぬ方向へ飛んでいってしまう。軽い失敗で回転させてしまっても、ちょっと強めに打ち上げると重力で補正されてコルクが真下を向くように修正できるときがある。そのリカバリがうまくいくと連続回数が増えていく。&lt;/p>
&lt;h2 id="練習場所と照明と背景の考察">練習場所と照明と背景の考察&lt;/h2>
&lt;p>近所にバスの営業所があり、その駐車場が広くて明るかったので練習してみた。ここは24時まで照明がついている。周りは大きなマンションまたはビルに囲まれている。平日の22時台で20分ほど練習していたが誰も来なかった。広くて周りに気を遣う必要もなくシャトルも視認しやすかった。また今度行ってみようと思う。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2024/1012_parking1.jpg"/>
&lt;/figure>
&lt;p>先の駐車場の印象がよかったので広い駐車場なら練習しやすいのかな？と思って別のところへも行ってみた。基本的に駐車場は24時間照明がついていて明るいところが多い。しかし、駐車場ならどこでもいいわけでもなかった。次の駐車場はシャトルの背景が複数のビルと夜の闇で移り変わってしまい、背景の明るさが変わる影響でシャトルを視認しにくいことに気付いた。広くて明るければどこでも練習しやすいわけではないことに気付いた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2024/1012_parking2.jpg"/>
&lt;/figure>
&lt;p>次に電球色なら昼白色の照明よりも目にやさしいから練習しやすいのではないかと考えた。旧居留地の有名な建物の隣のビル。写真ではわかりにくいが、次のビルの照明は橙色の電球色になる。試してみたら意外とシャトルを視認できなかった。その理由はシャトルの色が昼白色に映える赤色や黄色に着色されているため、電球色に照明に溶け込んでしまってシャトルそのものを視認しにくくなってしまうように思えた。もしかしたら白いシャトルなら逆にみやすいのかもしれない。今度また試してみる。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2024/1012_building.jpg"/>
&lt;/figure>
&lt;p>夜にバドミントンの練習をする場所探しで大事な要素がいくつかわかってきた。一見、明るさだけをみてよさそうに思えてもシャトルを使ってリフティングしてみると視認しにくい場合がある。実際に試さないとその場所がよいかどうかはわからない。今回の調査から考察したことをまとめる。&lt;/p>
&lt;ul>
&lt;li>照明の明るさと色
&lt;ul>
&lt;li>暗すぎたらみえない&lt;/li>
&lt;li>スペース全体が明るくてもシャトルを視認しやすいとはかぎらない&lt;/li>
&lt;li>照明が明る過ぎても眩しい
&lt;ul>
&lt;li>照明がそれほど強力ではなくても目と照明との距離が近いと眩しい&lt;/li>
&lt;li>屋根の高いビルの軒下の視認性が高いのは目と照明との距離が遠いからだと気付いた&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>電球色だと赤／黄色のシャトルを視認しにくい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>視界における背景色とシャトルとのコンストラクト
&lt;ul>
&lt;li>シャトルを目で追うときに背景の明るさや色が変わると視認しにくい
&lt;ul>
&lt;li>背景が変わらない場所の方がその背景色に目が慣れてシャトルを視認しやすくなる
&lt;ul>
&lt;li>ビルの軒下の視認性が高いのはビルからみえる壁や背景が一様だから&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>スペースの広さ
&lt;ul>
&lt;li>近くに壁や垣根、屋根があると避けようとして注意力を取られる&lt;/li>
&lt;li>周りに人が来ないことがわかっている場所の方が集中できる
&lt;ul>
&lt;li>駐車場は断続的に車や人が来るので集中しにくい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>広い方が照明との距離を調整しやすい&lt;/li>
&lt;li>周りの背景があまり変わらない殺風景な場所の方がシャトルを視認しやすい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="１日ひとつだけ強くなる">１日ひとつだけ、強くなる&lt;/h2>
&lt;p>昨日 &lt;a href="/diary/diary/posts/2024/1011/#隔週の雑談">はらさんに紹介してもらった梅原大吾の著書&lt;/a> の目次を眺めていくつか気になったところを読んでみた。1つの項目が2-3ページぐらいなのでタイトルで気になったところをすぐ読める。全体の3割ぐらいしか読んでいないけれど、それでも私には役に立ったので所感をブクログに書いてみた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://booklog.jp/users/t2y1979/archives/1/B0116H3QPG">１日ひとつだけ、強くなる。&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>「格闘ゲーマーだって、正直飽きる」というタイトルがあってモチベーションコントロールについての梅原さんの考え方を読むことができた。私もプログラミングは好きだが、かといって飽きやマンネリがないわけではない。&lt;/p>
&lt;blockquote>
&lt;p>この義務感というのは結構な曲者だ。時折「仕事でもないのに、そんな真剣にやってられるかよ」という人がいる。これは逆ではないだろうか。仕事が持つ義務感によって、かえって向上心を持つことが難しくなることは多い。義務感によってやらされているという、受け身の状態になってしまう。これが進行すると「最低限の基準さえ保っておけばそれでいいだろう」といた気持ちにまでなりかねない。&lt;/p>
&lt;p>義務感によって受け身にならないこと。受け身というのは、外部からの刺激に依存したやり方だ。刺激を与えられている間はいいけれど、それがなくなればやる気もなくなる。&lt;/p>
&lt;/blockquote>
&lt;p>この悩みがあるときにひとりだと自分に言い訳をしてすぐ受け身の状態になってしまう。常に新しい取り組みや変化への挑戦をしていかないと、人間は怠惰で最低限の基準で受け身になってしまう。いまの私には耳の痛い話しでもある。そして、梅原さんの考え方を読んでいても、結局のところ、この状態を抜け出すにはモチベーションにとらわれない継続の仕組みを自分で見出すだけのように読めた。&lt;/p>
&lt;blockquote>
&lt;p>評価してもらえない内的な成長を、どれだけ意識できるかで、モチベーションは大きく変わってくる。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>プロであれアマチュアであれ、やるべきことは結局ほとんど変わらない。僕は、少しずつ自分のペースを取り戻していった。何か打ち込んでいることや、続けていることがあるのなら、成長のループを継続することを考えてほしい。毎日の歩みがいかにわずかであっても、安定した継続というのはそれだけで自信になるからだ。&lt;/p>
&lt;/blockquote>
&lt;p>本書のタイトルにもなっている「1日ひとつだけ」という言葉の背景として、梅原さんは1日を思い返して自身の成長を1つだけメモしているという。日記を書くことの意義とも共通する。日記の意義の1つはふりかえりを自然に行っていることになる。そして、外からみてわからない内的な成長を自分で気付いて成長を実感したり、自身の基準で肯定することが継続のためのモチベーションコントロールによいと梅原さんは実践している。この考え方は私が日記を3年書き続けていることから得た気付きとも合致する。よい時期によい本と出会えた。&lt;/p>
&lt;h2 id="実家へ帰る">実家へ帰る&lt;/h2>
&lt;p>先日トラクターで &lt;a href="/diary/diary/posts/2024/0817/">真夏の硬い田んぼ&lt;/a> を耕すのはやりにくかった。雨が降って適度に乾いた状態の田んぼを耕すために実家へ帰る。今日は親が外出しているというので20時から帰って明日、田んぼ作業をすることにした。&lt;/p></content></item><item><title>ひとりではできないこと</title><link>/diary/posts/2024/1011/</link><pubDate>Fri, 11 Oct 2024 10:15:44 +0900</pubDate><guid>/diary/posts/2024/1011/</guid><description>今日のバドミントン練習はエアシャトルでリフティングを30分した。連続最大回数は80回だが、ほとんどの試行は20回も続かずに失敗してしまう。難しい。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。
課題管理と adr の関係の考察 数年前から adr の話題や導入した会社の記事などをみかけるようになった。私はこれまで課題管理をうまくやっていれば adr はそれほど重要ではないとあまり重視してこなかった。しかし、世の中的に認知されて流行っているものはなにかしら意義があるのだろうと最近は少し見直してきているところもある。このスライドによると2017年から流行り始めたらしい。
開発に関する情報を一元管理する、または全文検索ことにビジネスチャンスはある 検索のニーズや要件は多様で言語によっても違い、技術もまだまだ発展的でもあるからずっとビジネスの種になる気はする gitlab issues のコメントの全文検索は有料機能なので slack 通知したチャンネルを全文検索している 課題管理システムのプラグインでテキストをシステム間連携することで検索システムを別途構築できる可能性がある 検索できなくてもデータのアーカイブをするという視点でもビジネスニーズに応える？ ベクトル検索 を検索がまだ一般的にはなっていない？ テックブログを読む会でメンバーが 医薬品検索にベクトル検索を導入したら、デフォで検索ニーズをほぼ満たせそうだった話 を紹介していた いまや rdb でも全文検索機能はあるが、実運用だと rdb の i/o がボトルネックになることは多いだろうから全文検索用途に使うモチベーションが低いと想定される 普通の全文検索とベクトル検索の違いを実際に触ってみて評価してみたい wiki と adr の違いの1つとして wiki になにを書いてよいかわからない問題がある 文章を書けるようになるのは経験や習熟を必要とする adr のようなテンプレートがあることで経験の浅い開発者も書きやすくなる狙いはある 課題管理システムの wiki に adr のラッピングをして別機能としてみせるのはよいかもしれない 業務の引き継ぎにも adr は役に立つのではないか？ adr 一覧をみたり、そこから検索することで検索効率や精度は上がるという想定 大きい会社でも巨大な課題管理システムと wiki が1つだけあって一元管理しているという噂は聞く ある会社では wiki は誤っている可能性があるから信用するなという教訓があった wiki の情報は更新されていない可能性があるから参考にしながら必ず裏をとって業務をしなさいという話し wiki を編集したら必ずレビューが必要になるプロセス notion のプロジェクト管理の使い勝手はどうか？ テンプレートを使ってガントチャートやカンバンを作れる 基本的に自分でカスタマイズできることの良し悪しがある db をどんどん改良できるが、それだけに魔改造してしまう 時間とともに複数人が改良すると保守できなくなっていく懸念がある 中核機能をパッケージ側で提供することは堅牢性を担保する上で重要ではないか タスク管理と wiki がシームレスなところはよい、はらさんは日報を書いてリンクしている 会社のインフラに日々の開発情報を書いていくと退職後に参照できない フリーランスのような働き方をするにはナレッジデータベースをローカルに作りたいという欲求がある 組み込みの課題管理システムにより、自身のナレッジデータベースをローカルに残すという目的はよいかもしれない 仕事は楽しいかね？ の考察 まとめを見返しながら、だいたいの項目は理解または支持できる。1つだけ次の項目が私には欠けていることに気付いた。</description><content>&lt;p>今日のバドミントン練習はエアシャトルでリフティングを30分した。連続最大回数は80回だが、ほとんどの試行は20回も続かずに失敗してしまう。難しい。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。&lt;/p>
&lt;h3 id="課題管理と-adr-の関係の考察">課題管理と adr の関係の考察&lt;/h3>
&lt;iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/1d21876659d244a8b6c121255e2fbce9" title="ADRを運用して3年経った僕らの現在地" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 600px; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777">&lt;/iframe>
&lt;p>数年前から adr の話題や導入した会社の記事などをみかけるようになった。私はこれまで課題管理をうまくやっていれば adr はそれほど重要ではないとあまり重視してこなかった。しかし、世の中的に認知されて流行っているものはなにかしら意義があるのだろうと最近は少し見直してきているところもある。このスライドによると2017年から流行り始めたらしい。&lt;/p>
&lt;ul>
&lt;li>開発に関する情報を一元管理する、または全文検索ことにビジネスチャンスはある
&lt;ul>
&lt;li>検索のニーズや要件は多様で言語によっても違い、技術もまだまだ発展的でもあるからずっとビジネスの種になる気はする&lt;/li>
&lt;li>gitlab issues のコメントの全文検索は有料機能なので slack 通知したチャンネルを全文検索している
&lt;ul>
&lt;li>課題管理システムのプラグインでテキストをシステム間連携することで検索システムを別途構築できる可能性がある&lt;/li>
&lt;li>検索できなくてもデータのアーカイブをするという視点でもビジネスニーズに応える？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.elastic.co/jp/what-is/vector-search">ベクトル検索&lt;/a> を検索がまだ一般的にはなっていない？
&lt;ul>
&lt;li>テックブログを読む会でメンバーが &lt;a href="https://zenn.dev/minedia/articles/d9f01aa05bc880">医薬品検索にベクトル検索を導入したら、デフォで検索ニーズをほぼ満たせそうだった話&lt;/a> を紹介していた&lt;/li>
&lt;li>いまや rdb でも全文検索機能はあるが、実運用だと rdb の i/o がボトルネックになることは多いだろうから全文検索用途に使うモチベーションが低いと想定される&lt;/li>
&lt;li>普通の全文検索とベクトル検索の違いを実際に触ってみて評価してみたい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>wiki と adr の違いの1つとして wiki になにを書いてよいかわからない問題がある
&lt;ul>
&lt;li>文章を書けるようになるのは経験や習熟を必要とする&lt;/li>
&lt;li>adr のようなテンプレートがあることで経験の浅い開発者も書きやすくなる狙いはある&lt;/li>
&lt;li>課題管理システムの wiki に adr のラッピングをして別機能としてみせるのはよいかもしれない&lt;/li>
&lt;li>業務の引き継ぎにも adr は役に立つのではないか？&lt;/li>
&lt;li>adr 一覧をみたり、そこから検索することで検索効率や精度は上がるという想定&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>大きい会社でも巨大な課題管理システムと wiki が1つだけあって一元管理しているという噂は聞く
&lt;ul>
&lt;li>ある会社では wiki は誤っている可能性があるから信用するなという教訓があった
&lt;ul>
&lt;li>wiki の情報は更新されていない可能性があるから参考にしながら必ず裏をとって業務をしなさいという話し&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>wiki を編集したら必ずレビューが必要になるプロセス&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>notion のプロジェクト管理の使い勝手はどうか？
&lt;ul>
&lt;li>テンプレートを使ってガントチャートやカンバンを作れる
&lt;ul>
&lt;li>基本的に自分でカスタマイズできることの良し悪しがある
&lt;ul>
&lt;li>db をどんどん改良できるが、それだけに魔改造してしまう&lt;/li>
&lt;li>時間とともに複数人が改良すると保守できなくなっていく懸念がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>中核機能をパッケージ側で提供することは堅牢性を担保する上で重要ではないか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>タスク管理と wiki がシームレスなところはよい、はらさんは日報を書いてリンクしている&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>会社のインフラに日々の開発情報を書いていくと退職後に参照できない
&lt;ul>
&lt;li>フリーランスのような働き方をするにはナレッジデータベースをローカルに作りたいという欲求がある&lt;/li>
&lt;li>組み込みの課題管理システムにより、自身のナレッジデータベースをローカルに残すという目的はよいかもしれない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="仕事は楽しいかねhahahugoshortcode1112s0hbhb-の考察">&lt;a href="/diary/diary/posts/2024/1008/">仕事は楽しいかね？&lt;/a> の考察&lt;/h3>
&lt;p>まとめを見返しながら、だいたいの項目は理解または支持できる。1つだけ次の項目が私には欠けていることに気付いた。&lt;/p>
&lt;blockquote>
&lt;p>毎日1つ試し続ければ必ず上達や進歩ができる&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>新しいことを始めると、いまやっていることを継続する時間がなくなったりしないか？&lt;/li>
&lt;li>プロダクト開発ではがんばってもあまり成果が出ないような時期もある
&lt;ul>
&lt;li>リファクタリングやテスト追加などはまさにそう&lt;/li>
&lt;li>そういったときも1つでも変化をもたらせれば日々の生活が変わるのか？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>はらさんのお奨めは梅原さんの &lt;a href="https://www.kadokawa.co.jp/product/301305000020/">１日ひとつだけ、強くなる。 世界一プロ・ゲーマーの勝ち続ける６４の流儀&lt;/a>&lt;/li>
&lt;li>本書を読んではらさんのよかったところは「試してみることに失敗はない」
&lt;ul>
&lt;li>それまでも試すことはやっていたはずなのに躊躇してしまう理由として失敗したら時間の無駄だと考えてしまっていた&lt;/li>
&lt;li>失敗したら嫌だと考えてしまうところがあったが、この考え方があるから vision pro を購入できる
&lt;ul>
&lt;li>最近は vision pro の話題を聞かなくなったがどうか？
&lt;ul>
&lt;li>&lt;a href="https://internet.watch.impress.co.jp/docs/yajiuma/1630679.html">ロードマップに影響は？ Appleに26年間在籍した「Vision Pro」の開発責任者が退職へ&lt;/a>&lt;/li>
&lt;li>仕事にはならないのではないか？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>やりたいことをすぐやってみるという思考につながった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>面倒くさいときもなるべくパソコンを使うようにしてなにかしら調べる&lt;/li>
&lt;li>私はオフィスにいれば、家よりはなにかしら作業するモチベーションになる&lt;/li>
&lt;li>目標達成や成果をあげるには環境がもっとも大事
&lt;ul>
&lt;li>個人の感情を信頼しない
&lt;ul>
&lt;li>人間は面倒だとすぐ怠けてやめてしまう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>環境を整えることでワークフローを洗練させて習慣化する
&lt;ul>
&lt;li>日記になにか書かないといけないから調べものをする&lt;/li>
&lt;li>嫌々ながらでもやっているうちに習慣になってくるとワークフローが洗練していく&lt;/li>
&lt;li>人間の運用を変えていくなにかは普遍的な価値またはビジネスチャンスがある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>調子の悪いときにどうやって早く脱却するかが大事
&lt;ul>
&lt;li>ひとりでは言い訳を作ったり怠けてしまう&lt;/li>
&lt;li>このときに他人の助けがいるのではないか？
&lt;ul>
&lt;li>話しを聞いてもらうだけでも前へ進むきっかけになる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="go-の結合テスト向けカバレッジ計測の考察">go の結合テスト向けカバレッジ計測の考察&lt;/h2>
&lt;p>以前リリースパーティーで go 1.20 で結合テスト向けのカバレッジ計測の機能が入ったことを聞いていた。次のブログ記事でやり方が紹介されている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://go.dev/blog/integration-test-coverage">Code coverage for Go integration tests&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://netdevops.me/2023/test-coverage-for-go-integration-tests/">Test coverage for Go integration tests&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>将来的に結合テストを作るときにカバレッジ計測のカスタマイズを施したバイナリを使って api server を起動する仕組みにすればこの機能を使えることに気付いた。&lt;/p>
&lt;p>まずは単体テストを実行して任意のディレクトリ (&lt;code>tests/coverage&lt;/code>) にカバレッジ計測のための中間データを生成する。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ mkdir -p tests/coverage
$ go test -cover ./... -covermode atomic -args -test.gocoverdir=&amp;#34;$PWD/tests/coverage&amp;#34;
$ go tool covdata textfmt -i=./tests/coverage -o coverage.out
&lt;/code>&lt;/pre>&lt;p>coverage.out がさまざまなツールの入力となる統計情報となる。例えば、このファイルを使って次のようにしてソースコードのヒートマップの html を作成できる。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ go tool cover -html coverage.out -o coverage.html
&lt;/code>&lt;/pre>&lt;p>&lt;a href="https://github.com/nikolaydubina/go-cover-treemap">nikolaydubina/go-cover-treemap&lt;/a> を使うと treemap でカバレッジのヒートマップを確認できる。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ go-cover-treemap -coverprofile coverage.out &amp;gt; treemap.svg
&lt;/code>&lt;/pre>&lt;p>カバレッジ計測向けのバイナリをビルドする。そのバイナリを起動するときに環境変数 GOCOVERDIR に単体テストのカバレッジの中間データが含まれるディレクトリを指定する。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ go build -cover -covermode atomic -o bin/api ./cmd/api/...
$ GOCOVERDIR=&amp;#34;$PWD/tests/coverage&amp;#34; ./bin/api -verbose
&lt;/code>&lt;/pre>&lt;p>このバイナリを使って起動した api server に対してリクエストを呼び出すことでカバレッジを計測してくれる。結合テストからバイナリ起動した api server に対してリクエストしたときに GOCOVERDIR に中間データが追加されていく。結合テストを完了したら最終的なカバレッジの統計情報を生成する。
￼&lt;/p>
&lt;pre tabindex="0">&lt;code>$ go tool covdata textfmt -i=./tests/coverage -o coverage.out
&lt;/code>&lt;/pre>&lt;p>textfmt のヘルプをみたら同じディレクトリじゃなくてもよいみたい。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ go tool covdata textfmt -help
...
Examples:
go tool covdata textfmt -i=dir1,dir2 -o=out.txt
merges data from input directories dir1+dir2
and emits text format into file &amp;#39;out.txt&amp;#39;
&lt;/code>&lt;/pre></content></item><item><title>練習場所のビル探し</title><link>/diary/posts/2024/1010/</link><pubDate>Thu, 10 Oct 2024 12:35:57 +0900</pubDate><guid>/diary/posts/2024/1010/</guid><description>今日のバドミントン練習はリフティングを昼夜あわせて85分 (メイビスで75分、エアで10分) した。フォア持ちとバック持ちを交互に切り替えリファクタリングで398回続けられた。目標の200回を越せるようになった。
バドミントンの練習場所探し お昼休みに公園へ行って20分ほど軽く練習した。そのときに連続回数が198回だった。あと2回足りなかったのが悔しかったのと、夜にがんばったらできそうかなという見通しをもっていた。
夜は近所で練習場所によさそうなビルを探してまわってみた。まずは少しおしゃれな区役所のビルの軒下へ行ってみた。
たまたま時間帯が悪かったのか、この場所が風の通り道になっているのか、練習を始めて5分ほどやって風の影響が強くて難しそうだったのですぐに撤収した。人通りが少なく照明もよい感じなのだけど、バドミントンの練習は風が強いとどうにもできない。
付近を散策しながら旧居留地にある別のビルへ。従業員の通用口がやや近いところが懸念。従業員が出てきたときにこいつ何しているの？と思うかもしれない。私の視点からもややパーソナルスペース／練習スペースを狭く感じるところはある。風の影響は受けにくい構造にはなっている。ここで15分ほど練習して267回継続できた。初めて200回を超えた。その後、あまり回数が続かなくなったのでまた散策して別のビルへ。
ここも広くて明るくて夜は施錠しているようにみえる。ここは従業員と会うこともない。よい場所なんだけど、照明が明る過ぎて見上げたときにシャトルと照明が重なってしまうと眩しい。照明が明る過ぎても練習しにくいことに気付いた。ここでも20分ほど練習したのに200回を超えなくて次へ移動する。照明が目に入るせいかもしれない。
最後はホームのビルへ。他のビルで練習してみてホームのビルのよさを実感した。もっとも練習スペースが広い。そして照明を背中側にして練習するスペースも十分にある。そうすると、見上げても照明とシャトルが重なることはないので眩しくて失敗してしまう状況を避けられる。構造的に風の影響も受けにくい。ここで20分ほど練習していたら398回、266回、349回と200回超えを3回できた。
フォア持ちとバック持ちのリフティングをしていて安定的するようになってきた。うまくラケットのスィートスポットで打てば真上にシャトルが上がる。50回ぐらいならほとんど動くこともなく上げられる。だいたい100回に1-2回ぐらい、失敗してシャトルをラケットのフレームに当てたりしてシャトル操作が乱れる。ドタバタしてリカバリする。これまではそのときに焦ってしまってシャトルを落とすことが多かった。なぜ200回以上続くかというと、その稀に失敗したときのシャトル操作をリカバリできるようになってきたから。つまり5回ぐらいミスしたときにリカバリできれば200回は続くということになる。これはメイビスフィールドのシャトルを使ったときの話し。
次にエアシャトルを使って同様にリフティングをしてみると最高で50数回ぐらいしか続かない。これはラケットのフレームまたはフレーム近くのガットで弾いてしまうと、コルク部分がプラスチックなために反発せずに落としてしまったり、あらぬ方向へ飛んでいったりしてリカバリがとても難しい。つまり、ラケットコントロールをうまくやらないとエアシャトルでリフティングを継続するのはメイビスフィールドよりもずっと難しい。次の目標としてはエアシャトルで200回を越せるようにラケットコントロールの練習をするのがよいように思える。
テストとビルドタグ go ではテスト用途のパッケージを httptest や iotest といった、通常アプリケーションとしてパッケージを提供しているものもある。しかし、通常のパッケージにしてしまうと、アプリケーションをビルドしたときにテストコードもバイナリにも含まれてしまう。依存パッケージの管理やバイナリサイズを減らす上で不要なコードはビルド対象外になる方が望ましい。自分たちが書いたソースコードがアプリケーションに含まれることはサイズの視点では問題ないが、テスト向けの依存パッケージもアプリケーションに含まれると意図せずバイナリサイズが大きくなってしまったり、パッケージの依存解決に時間がかかったりしてしまう懸念がある。そのため、ビルドタグを用いてテスト用途のパッケージはテストのときしかビルドしないように制御する。
例えば integration というビルドタグを設ける。テスト用途の util パッケージを定義するときは次のようにソースコードを記述する。
//go:build integration package util ビルドタグを指定せずに結合テストを実行しようとすると次のようなエラーが発生する。
$ go test ./tests/... # example.com/tsets/mypackage package example.com/tsets/mypackage_test imports example.com/tests/util: build constraints exclude all Go files in path/to/tests/util FAIL example.com/tests/mypackage [setup failed] 結合テストを実行するには次のように明示的にビルドタグを指定して、テスト用途のパッケージをビルドしてテストが実行されるようにしないといけない。
$ go test -tags=integration ./tests/mypackage/...</description><content>&lt;p>今日のバドミントン練習はリフティングを昼夜あわせて85分 (メイビスで75分、エアで10分) した。フォア持ちとバック持ちを交互に切り替えリファクタリングで398回続けられた。目標の200回を越せるようになった。&lt;/p>
&lt;h2 id="バドミントンの練習場所探し">バドミントンの練習場所探し&lt;/h2>
&lt;p>お昼休みに公園へ行って20分ほど軽く練習した。そのときに連続回数が198回だった。あと2回足りなかったのが悔しかったのと、夜にがんばったらできそうかなという見通しをもっていた。&lt;/p>
&lt;p>夜は近所で練習場所によさそうなビルを探してまわってみた。まずは少しおしゃれな区役所のビルの軒下へ行ってみた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2024/1010_bullding1.jpg"/>
&lt;/figure>
&lt;p>たまたま時間帯が悪かったのか、この場所が風の通り道になっているのか、練習を始めて5分ほどやって風の影響が強くて難しそうだったのですぐに撤収した。人通りが少なく照明もよい感じなのだけど、バドミントンの練習は風が強いとどうにもできない。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2024/1010_bullding2.jpg"/>
&lt;/figure>
&lt;p>付近を散策しながら旧居留地にある別のビルへ。従業員の通用口がやや近いところが懸念。従業員が出てきたときにこいつ何しているの？と思うかもしれない。私の視点からもややパーソナルスペース／練習スペースを狭く感じるところはある。風の影響は受けにくい構造にはなっている。ここで15分ほど練習して267回継続できた。初めて200回を超えた。その後、あまり回数が続かなくなったのでまた散策して別のビルへ。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2024/1010_bullding3.jpg"/>
&lt;/figure>
&lt;p>ここも広くて明るくて夜は施錠しているようにみえる。ここは従業員と会うこともない。よい場所なんだけど、照明が明る過ぎて見上げたときにシャトルと照明が重なってしまうと眩しい。照明が明る過ぎても練習しにくいことに気付いた。ここでも20分ほど練習したのに200回を超えなくて次へ移動する。照明が目に入るせいかもしれない。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2024/1010_bullding4.jpg"/>
&lt;/figure>
&lt;p>最後はホームのビルへ。他のビルで練習してみてホームのビルのよさを実感した。もっとも練習スペースが広い。そして照明を背中側にして練習するスペースも十分にある。そうすると、見上げても照明とシャトルが重なることはないので眩しくて失敗してしまう状況を避けられる。構造的に風の影響も受けにくい。ここで20分ほど練習していたら398回、266回、349回と200回超えを3回できた。&lt;/p>
&lt;p>フォア持ちとバック持ちのリフティングをしていて安定的するようになってきた。うまくラケットのスィートスポットで打てば真上にシャトルが上がる。50回ぐらいならほとんど動くこともなく上げられる。だいたい100回に1-2回ぐらい、失敗してシャトルをラケットのフレームに当てたりしてシャトル操作が乱れる。ドタバタしてリカバリする。これまではそのときに焦ってしまってシャトルを落とすことが多かった。なぜ200回以上続くかというと、その稀に失敗したときのシャトル操作をリカバリできるようになってきたから。つまり5回ぐらいミスしたときにリカバリできれば200回は続くということになる。これはメイビスフィールドのシャトルを使ったときの話し。&lt;/p>
&lt;p>次にエアシャトルを使って同様にリフティングをしてみると最高で50数回ぐらいしか続かない。これはラケットのフレームまたはフレーム近くのガットで弾いてしまうと、コルク部分がプラスチックなために反発せずに落としてしまったり、あらぬ方向へ飛んでいったりしてリカバリがとても難しい。つまり、ラケットコントロールをうまくやらないとエアシャトルでリフティングを継続するのはメイビスフィールドよりもずっと難しい。次の目標としてはエアシャトルで200回を越せるようにラケットコントロールの練習をするのがよいように思える。&lt;/p>
&lt;h2 id="テストとビルドタグ">テストとビルドタグ&lt;/h2>
&lt;p>go ではテスト用途のパッケージを &lt;a href="https://pkg.go.dev/net/http/httptest">httptest&lt;/a> や &lt;a href="https://pkg.go.dev/testing/iotest">iotest&lt;/a> といった、通常アプリケーションとしてパッケージを提供しているものもある。しかし、通常のパッケージにしてしまうと、アプリケーションをビルドしたときにテストコードもバイナリにも含まれてしまう。依存パッケージの管理やバイナリサイズを減らす上で不要なコードはビルド対象外になる方が望ましい。自分たちが書いたソースコードがアプリケーションに含まれることはサイズの視点では問題ないが、テスト向けの依存パッケージもアプリケーションに含まれると意図せずバイナリサイズが大きくなってしまったり、パッケージの依存解決に時間がかかったりしてしまう懸念がある。そのため、ビルドタグを用いてテスト用途のパッケージはテストのときしかビルドしないように制御する。&lt;/p>
&lt;p>例えば &lt;code>integration&lt;/code> というビルドタグを設ける。テスト用途の &lt;code>util&lt;/code> パッケージを定義するときは次のようにソースコードを記述する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//go:build integration
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">util&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ビルドタグを指定せずに結合テストを実行しようとすると次のようなエラーが発生する。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ go test ./tests/...
# example.com/tsets/mypackage
package example.com/tsets/mypackage_test
imports example.com/tests/util: build constraints exclude all Go files in path/to/tests/util
FAIL example.com/tests/mypackage [setup failed]
&lt;/code>&lt;/pre>&lt;p>結合テストを実行するには次のように明示的にビルドタグを指定して、テスト用途のパッケージをビルドしてテストが実行されるようにしないといけない。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ go test -tags=integration ./tests/mypackage/...
&lt;/code>&lt;/pre></content></item><item><title>iphone 16 初期セットアップ</title><link>/diary/posts/2024/1009/</link><pubDate>Wed, 09 Oct 2024 14:37:45 +0900</pubDate><guid>/diary/posts/2024/1009/</guid><description>今日のバドミントン練習はリフティングを35分 (メイビスで25分、エアで10分)、壁当てを5分した。近所のビルの軒下の照明は21時までと21時から24時までで明るさが異なる。段階的に照明を暗くしているようにみえる。フォア持ちとバック持ちを交互に切り替えながら行うリフティングはやや安定してきた気はするが、100回を超えたぐらいで失敗してしまう。当面は200回連続を目標に練習してみる。21時を過ぎてから風が強くなってきて集中力もなくなったので今日は練習を早めにきりあげた。
エアシャトルは高く上げた方が落下時に安定する。練習していてラケットコントロールを失敗してシャトルをビルの入口の天井に打ち上げてしまった。これはビル管理に怒られるんじゃないかと思って焦った。近くのコンビニで脚立を貸してくださいとお願いしたら店員さんが快く貸してくれた。やさしい世界。脚立を使って、横からラケットでシャトルを手繰り寄せて、ぎりぎり手が届いて回収できた。あと数十センチ中央側に止まっていたら回収できなかった。ほんと助かった。この付近では高くシャトルをあげないという学びを得た。
iphone 16 の機種変更と移行 前の機種変更から2年たったので移行することに決めた。色はグリーンがよかったのでティールというミントカラーを選択して pro ではなくスタンダードなデバイスにした。実際が届いてティールのカラーをみてみると、私のイメージのグリーンとはやや異なったけど、これはこれで悪くないとは思う。これまで使っていた 14 pro とサイズはほぼ同じで厚みが少し薄くなっていた。手にもった感じでは薄くなった分だけ掴みやすかったり包み込めたりして馴染むように思えた。デバイスの触感も悪くない。
さっそく ios のクイックスタート機能を使って移行した。1時間もあれば初期設定はだいたいうまくいった。私にとって重要な移行検証は次の3つだけ。
Microsoft Authenticator 1Password 電話／SMS sim カードを移し変えるだけで電話の発着信もできた。スマホで電話の発着信テストをする方法 から111に電話すると、その後、着信を受けられて発着信のテストができる。Authenticator の初期設定を失敗して初回起動時にバックアップから復旧する選択肢を選ばないといけなかった。誤って新規セットアップをしてしまい、どうやって移行するのかがわからなくてはまった。アプリを一度削除してから再インストールして、再度初期設定することで icloud に保存されている Authenticator のデータを移行できた。
その後、コンビニで paypay を使おうとしてデータ通信できないことにも気付いた。レジに並んでいるときに気付いてよかった。iijmio 乗り換えガイド (初期設定) をみながら APN 構成プロファイルのインストールをする必要があった。これを設定しないと電話回線でデータ通信できない。電話の発着信ができているからデータ通信もできると私は誤解していた。全体を通して、私は少しはまって調べたりやり直したりしたが、スムーズに移行すれば1-2時間もあれば重要なデータを移行できる。あとは個別アプリの再ログインだったり、移行だったりをしていくだけ。銀行アプリなどもやや再設定は申請が必要で面倒だったりもする。</description><content>&lt;p>今日のバドミントン練習はリフティングを35分 (メイビスで25分、エアで10分)、壁当てを5分した。近所のビルの軒下の照明は21時までと21時から24時までで明るさが異なる。段階的に照明を暗くしているようにみえる。フォア持ちとバック持ちを交互に切り替えながら行うリフティングはやや安定してきた気はするが、100回を超えたぐらいで失敗してしまう。当面は200回連続を目標に練習してみる。21時を過ぎてから風が強くなってきて集中力もなくなったので今日は練習を早めにきりあげた。&lt;/p>
&lt;p>エアシャトルは高く上げた方が落下時に安定する。練習していてラケットコントロールを失敗してシャトルをビルの入口の天井に打ち上げてしまった。これはビル管理に怒られるんじゃないかと思って焦った。近くのコンビニで脚立を貸してくださいとお願いしたら店員さんが快く貸してくれた。やさしい世界。脚立を使って、横からラケットでシャトルを手繰り寄せて、ぎりぎり手が届いて回収できた。あと数十センチ中央側に止まっていたら回収できなかった。ほんと助かった。この付近では高くシャトルをあげないという学びを得た。&lt;/p>
&lt;h2 id="iphone-16-の機種変更と移行">iphone 16 の機種変更と移行&lt;/h2>
&lt;p>前の機種変更から2年たったので移行することに決めた。色はグリーンがよかったのでティールというミントカラーを選択して pro ではなくスタンダードなデバイスにした。実際が届いてティールのカラーをみてみると、私のイメージのグリーンとはやや異なったけど、これはこれで悪くないとは思う。これまで使っていた 14 pro とサイズはほぼ同じで厚みが少し薄くなっていた。手にもった感じでは薄くなった分だけ掴みやすかったり包み込めたりして馴染むように思えた。デバイスの触感も悪くない。&lt;/p>
&lt;p>さっそく ios のクイックスタート機能を使って移行した。1時間もあれば初期設定はだいたいうまくいった。私にとって重要な移行検証は次の3つだけ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.microsoft.com/ja-jp/security/mobile-authenticator-app">Microsoft Authenticator&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://1password.com/jp">1Password&lt;/a>&lt;/li>
&lt;li>電話／SMS&lt;/li>
&lt;/ul>
&lt;p>sim カードを移し変えるだけで電話の発着信もできた。&lt;a href="https://engrholiday.jp/nw/tel-test-111/">スマホで電話の発着信テストをする方法&lt;/a> から111に電話すると、その後、着信を受けられて発着信のテストができる。Authenticator の初期設定を失敗して初回起動時にバックアップから復旧する選択肢を選ばないといけなかった。誤って新規セットアップをしてしまい、どうやって移行するのかがわからなくてはまった。アプリを一度削除してから再インストールして、再度初期設定することで icloud に保存されている Authenticator のデータを移行できた。&lt;/p>
&lt;p>その後、コンビニで paypay を使おうとしてデータ通信できないことにも気付いた。レジに並んでいるときに気付いてよかった。&lt;a href="https://www.iijmio.jp/hdd/guide/apn.html?krkr=30b437c9-ac7b-415e-9338-17c929e84aae&amp;krkr-s=dd434f94-9fe7-485a-8ecb-3c20322ef599.1728475216836#apn_ios">iijmio 乗り換えガイド (初期設定)&lt;/a> をみながら APN 構成プロファイルのインストールをする必要があった。これを設定しないと電話回線でデータ通信できない。電話の発着信ができているからデータ通信もできると私は誤解していた。全体を通して、私は少しはまって調べたりやり直したりしたが、スムーズに移行すれば1-2時間もあれば重要なデータを移行できる。あとは個別アプリの再ログインだったり、移行だったりをしていくだけ。銀行アプリなどもやや再設定は申請が必要で面倒だったりもする。&lt;/p></content></item><item><title>毎日の変化を感じる</title><link>/diary/posts/2024/1008/</link><pubDate>Tue, 08 Oct 2024 16:27:59 +0900</pubDate><guid>/diary/posts/2024/1008/</guid><description>今日のバドミントン練習は昼に30分、夜に40分した。リフティングは60分 (メイビスで40分、エアで20分)、キャッチは10分した。バック持ちのリフティング練習をしているうちに腕の筋が痛くなってきた。やり過ぎかもしれない。
フォア持ちとバック持ちを交互に切り替えながらリフティングをする。片方の持ち方だけでやれば200回はできる。しかし、交互に切り替えると50-100回ぐらいしか続かない。雑になってしまったり、遠近感を見誤ったりしてしまう。リフティングを失敗するときは前後の距離感が狂ってしまうことが多い。動体視力は10代後半がピークで40代から急激に衰えていくらしい。視力が衰えるのはもう仕方ないだろうからラケットコントロールを上達させる方がよいのだろう。ビルの軒下は風が通りにくいという特徴があって公園でやるよりも風の影響がなくてやりやすいときもある。あとエアシャトルも少し高めに弾くとコルク部分が重いせいか、直進的に落ちてきてリフティングしやすいことに気付いた。
仕事は楽しいかね？ プロダクト開発をしていると、開発がどんどん遅くなっていってがんばってもあまり進捗していないように実感する時期がくる。もしくは日々の開発業務がマンネリになってしまうこともある。昔からそういう状況のことを 射撃しつつ前進 と呼ばれていた気がする。そんな時期もあるから地道にコツコツと時間をかけて日々できることを積み重ねるしかないと私は考えていた。税理士さんと雑談していて「仕事は楽しいかね?」という名著があることを教えてもらった。要約動画がわかりやすいと紹介していただいた。
まとめは次になる。
楽しく生きるには、遊び感覚で新しいことを試し続けること (価値観があう) 試してみることに失敗はない (価値観があう) 試すからこそ新しい発見がある (価値観があう) むしろ試さないことが失敗である (価値観があう) 大きな目標はなくていい (価値観があう、課題管理) 毎日気になったことを1つ試すことを目標にすること (課題管理) 毎日1つ試し続ければ必ず上達や進歩ができる 成功者はシンプルに試す数がとても多い人 (価値観があう) 今抱えている問題点を書き出して、それを解決するために今動き出すこと (課題管理) 適切な時とか完璧な機会なんてものはない (価値観があう) 現状を把握して1つずつ試す (課題管理) 完璧な状態であっても試し続ける (価値観があう) 私の価値観にあるものも多いし、いくつか課題管理で普段やっていることにも当てはまる。動画をみていて「毎日1つ試す、変化を感じるのが大事」と言っているのが気になった。日々の生活における既存のいろいろをやっていると、他のことをする余裕がなくなってしまい、いま抱えていることの区切りがついてから新しいことをしようと私は考えるところがある。いま注力していることに余裕がなければ、新しいことはしないように私はしている。一方で最近は少し余裕が出てきたこともあり、バドミントンの練習を始めたことが日々の変化になっていて、たしかに気分がよい。毎日の変化をもっと小さいもの、簡単なものにして、なにかを為さなくても日々の変化を感じることを目的にすればいま以上に日々の生活を楽しめるのかなと学びになった。</description><content>&lt;p>今日のバドミントン練習は昼に30分、夜に40分した。リフティングは60分 (メイビスで40分、エアで20分)、キャッチは10分した。バック持ちのリフティング練習をしているうちに腕の筋が痛くなってきた。やり過ぎかもしれない。&lt;/p>
&lt;p>フォア持ちとバック持ちを交互に切り替えながらリフティングをする。片方の持ち方だけでやれば200回はできる。しかし、交互に切り替えると50-100回ぐらいしか続かない。雑になってしまったり、遠近感を見誤ったりしてしまう。リフティングを失敗するときは前後の距離感が狂ってしまうことが多い。動体視力は10代後半がピークで40代から急激に衰えていくらしい。視力が衰えるのはもう仕方ないだろうからラケットコントロールを上達させる方がよいのだろう。ビルの軒下は風が通りにくいという特徴があって公園でやるよりも風の影響がなくてやりやすいときもある。あとエアシャトルも少し高めに弾くとコルク部分が重いせいか、直進的に落ちてきてリフティングしやすいことに気付いた。&lt;/p>
&lt;h2 id="仕事は楽しいかね">仕事は楽しいかね？&lt;/h2>
&lt;p>プロダクト開発をしていると、開発がどんどん遅くなっていってがんばってもあまり進捗していないように実感する時期がくる。もしくは日々の開発業務がマンネリになってしまうこともある。昔からそういう状況のことを &lt;a href="https://megalodon.jp/2011-0824-1248-00/japanese.joelonsoftware.com/Articles/FireAndMotion.html">射撃しつつ前進&lt;/a> と呼ばれていた気がする。そんな時期もあるから地道にコツコツと時間をかけて日々できることを積み重ねるしかないと私は考えていた。税理士さんと雑談していて「仕事は楽しいかね?」という名著があることを教えてもらった。要約動画がわかりやすいと紹介していただいた。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/Kro6ZTvCFq4" allowfullscreen title="【要約】仕事は楽しいかね？【デイル・ドーテン】">&lt;/iframe>
&lt;/div>
&lt;p>まとめは次になる。&lt;/p>
&lt;ul>
&lt;li>楽しく生きるには、遊び感覚で新しいことを試し続けること (価値観があう)&lt;/li>
&lt;li>試してみることに失敗はない (価値観があう)&lt;/li>
&lt;li>試すからこそ新しい発見がある (価値観があう)&lt;/li>
&lt;li>むしろ試さないことが失敗である (価値観があう)&lt;/li>
&lt;li>大きな目標はなくていい (価値観があう、課題管理)&lt;/li>
&lt;li>毎日気になったことを1つ試すことを目標にすること (課題管理)&lt;/li>
&lt;li>毎日1つ試し続ければ必ず上達や進歩ができる&lt;/li>
&lt;li>成功者はシンプルに試す数がとても多い人 (価値観があう)&lt;/li>
&lt;li>今抱えている問題点を書き出して、それを解決するために今動き出すこと (課題管理)&lt;/li>
&lt;li>適切な時とか完璧な機会なんてものはない (価値観があう)&lt;/li>
&lt;li>現状を把握して1つずつ試す (課題管理)&lt;/li>
&lt;li>完璧な状態であっても試し続ける (価値観があう)&lt;/li>
&lt;/ul>
&lt;p>私の価値観にあるものも多いし、いくつか課題管理で普段やっていることにも当てはまる。動画をみていて「毎日1つ試す、変化を感じるのが大事」と言っているのが気になった。日々の生活における既存のいろいろをやっていると、他のことをする余裕がなくなってしまい、いま抱えていることの区切りがついてから新しいことをしようと私は考えるところがある。いま注力していることに余裕がなければ、新しいことはしないように私はしている。一方で最近は少し余裕が出てきたこともあり、バドミントンの練習を始めたことが日々の変化になっていて、たしかに気分がよい。毎日の変化をもっと小さいもの、簡単なものにして、なにかを為さなくても日々の変化を感じることを目的にすればいま以上に日々の生活を楽しめるのかなと学びになった。&lt;/p></content></item><item><title>エアバドミントンのシャトル所感</title><link>/diary/posts/2024/1007/</link><pubDate>Mon, 07 Oct 2024 08:25:39 +0900</pubDate><guid>/diary/posts/2024/1007/</guid><description>今日のバドミントン練習はリフティング40分、キャッチ10分、壁当て10分で1時間ほどやっていた。フォア持ちとバック持ちのリフティングを主にやっていた。雨が降ったり止んだりでもビルの軒下なので問題なく練習できた。エアバドミントン のシャトルを購入した。屋外で行うスポーツだから風の影響を受けないよう、中空のようなデザインになっている。購入したシャトルは高耐久性のためにコルクの部分がプラスチックになっている。エアバドミントン向けのシャトルがすべてそうなのかどうかはわからない。
以前 メイビスフィールドとメイビスフィールドIIの違い について考察した。このエアバドミントンのシャトルはコルク部分がプラスチックなのでゴムのような弾力がないためにラケットのスウィートスポットで捉えないとどこに飛んでいくかわからない。メイビスフィールドよりもさらにシャトル制御が難しい。いまリフティングとキャッチの練習はメイビスフィールドを、壁当てはより反発力の高いメイビスフィールドIIを使っている。メイビスフィールドでリフティングをうまくできるようになってきたらエアバドミントン向けのシャトルに変えると難易度が高くなってステップアップによいように思えた。
テストの段取りが捗らない 今日は1日かけてテストケースの更新をするつもりが、開発した過去の issue を見返していて作業漏れに気付いてその修正で半日以上を費やしてしまった。すぐ対応はできたのでそれ自体はよかったものの、また作業が遅れ気味になってストレスが溜まるなぁという所感。夜に作業してもよかったものの、会社の事務手続きしていたらわりと時間が経ってしまって明日ごめんなさいしてもう1-2日時間をもらおうと思う。
法人税の中間申告 10月から11月末までの間に法人税の中間申告をしないといけない。いつも次の順番に連絡がくる。兵庫県のプレ申告データが届いていたので納付した。
兵庫県 神戸市 税務署 (法人税と消費税) 以前は紙の申告書類が送られてきたのを確認して、紙の書類で申告して納付したりしていた。いまは電子申告で行うようにしたので eltax や e-tax のメッセージボックスに前年度に納付した税金から算出したプレ申告データが届く。eltax のシステムはプレ申告データを使って申告書類を半自動生成してくれる。あとはその申告書類の納付税額にあうよう、前年度に納付した税金の情報を入力していけばよい。各種項目の数字のバリデーションチェックも実装されていて、久しぶりに手続きすると、どの項目にどの数字を記載していいか間違ったりするけれど、それを検出して教えてくれる。年に1回しかやらないことだからいろいろ忘れていて助かる。プレ申告データから申告書を作成すると自動的に「予定申告」という区分になる。「中間申告」と「予定申告」は別ものみたいだけど、eltax では「予定申告」に一本化しているのかもしれない。申告した後になって気付いて選択を間違えたかな？と思って焦った。
eltax は「納税メニュー」から「電子申告連動」を選択して申告したデータを検索してから納付情報を取得しないといけない。ここだけが e-tax と手順が違う。納付情報からペイジーで税金を納付する。同じことをあと3回やらないといけない。思い出しつつ、課題管理システムにもメモを残しつつ、やり方を思い出していた。</description><content>&lt;p>今日のバドミントン練習はリフティング40分、キャッチ10分、壁当て10分で1時間ほどやっていた。フォア持ちとバック持ちのリフティングを主にやっていた。雨が降ったり止んだりでもビルの軒下なので問題なく練習できた。&lt;a href="https://japan-airbadminton.jp/">エアバドミントン&lt;/a> のシャトルを購入した。屋外で行うスポーツだから風の影響を受けないよう、中空のようなデザインになっている。購入したシャトルは高耐久性のためにコルクの部分がプラスチックになっている。エアバドミントン向けのシャトルがすべてそうなのかどうかはわからない。&lt;/p>
&lt;p>以前 &lt;a href="/diary/diary/posts/2024/1001/#いそがみのバドミントン練習">メイビスフィールドとメイビスフィールドIIの違い&lt;/a> について考察した。このエアバドミントンのシャトルはコルク部分がプラスチックなのでゴムのような弾力がないためにラケットのスウィートスポットで捉えないとどこに飛んでいくかわからない。メイビスフィールドよりもさらにシャトル制御が難しい。いまリフティングとキャッチの練習はメイビスフィールドを、壁当てはより反発力の高いメイビスフィールドIIを使っている。メイビスフィールドでリフティングをうまくできるようになってきたらエアバドミントン向けのシャトルに変えると難易度が高くなってステップアップによいように思えた。&lt;/p>
&lt;h2 id="テストの段取りが捗らない">テストの段取りが捗らない&lt;/h2>
&lt;p>今日は1日かけてテストケースの更新をするつもりが、開発した過去の issue を見返していて作業漏れに気付いてその修正で半日以上を費やしてしまった。すぐ対応はできたのでそれ自体はよかったものの、また作業が遅れ気味になってストレスが溜まるなぁという所感。夜に作業してもよかったものの、会社の事務手続きしていたらわりと時間が経ってしまって明日ごめんなさいしてもう1-2日時間をもらおうと思う。&lt;/p>
&lt;h2 id="法人税の中間申告">法人税の中間申告&lt;/h2>
&lt;p>10月から11月末までの間に法人税の中間申告をしないといけない。いつも次の順番に連絡がくる。兵庫県のプレ申告データが届いていたので納付した。&lt;/p>
&lt;ol>
&lt;li>兵庫県&lt;/li>
&lt;li>神戸市&lt;/li>
&lt;li>税務署 (法人税と消費税)&lt;/li>
&lt;/ol>
&lt;p>以前は紙の申告書類が送られてきたのを確認して、紙の書類で申告して納付したりしていた。いまは電子申告で行うようにしたので eltax や e-tax のメッセージボックスに前年度に納付した税金から算出したプレ申告データが届く。eltax のシステムはプレ申告データを使って申告書類を半自動生成してくれる。あとはその申告書類の納付税額にあうよう、前年度に納付した税金の情報を入力していけばよい。各種項目の数字のバリデーションチェックも実装されていて、久しぶりに手続きすると、どの項目にどの数字を記載していいか間違ったりするけれど、それを検出して教えてくれる。年に1回しかやらないことだからいろいろ忘れていて助かる。プレ申告データから申告書を作成すると自動的に「予定申告」という区分になる。「中間申告」と「予定申告」は別ものみたいだけど、eltax では「予定申告」に一本化しているのかもしれない。申告した後になって気付いて選択を間違えたかな？と思って焦った。&lt;/p>
&lt;p>eltax は「納税メニュー」から「電子申告連動」を選択して申告したデータを検索してから納付情報を取得しないといけない。ここだけが e-tax と手順が違う。納付情報からペイジーで税金を納付する。同じことをあと3回やらないといけない。思い出しつつ、課題管理システムにもメモを残しつつ、やり方を思い出していた。&lt;/p></content></item><item><title>秋休み4</title><link>/diary/posts/2024/1006/</link><pubDate>Sun, 06 Oct 2024 08:25:37 +0900</pubDate><guid>/diary/posts/2024/1006/</guid><description>昨日運動したり出掛けたりしてなんか疲れてしまったのか、普通にお休みしていた。いまひとつのりきれない。</description><content>&lt;p>昨日運動したり出掛けたりしてなんか疲れてしまったのか、普通にお休みしていた。いまひとつのりきれない。&lt;/p></content></item><item><title>風がなければ公園でバドミントンもできそう</title><link>/diary/posts/2024/1005/</link><pubDate>Sat, 05 Oct 2024 12:59:51 +0900</pubDate><guid>/diary/posts/2024/1005/</guid><description>先日購入した ポータブルネット を使って公園で屋外バドミントンを1時間ほどした。持ち運びするときの折り畳み状態が次になる。筒の中に紐が通っていてバラバラにならないので簡単に組み立てできる。初見でも2分あれば組み立ても片付けもできる。予想以上に組み立て／片付けの体験がよかった。
みなとのもりの運動 前回の所感 。水曜日に運動部の slack チャンネルに投稿していた。とがいさんが久しぶりにバスケの練習に来られた。9時から準備を始めて10時から公園で運動する。土曜日の午前中に運動の予定を入れるのは朝ちゃんと起きる理由にもなってよい。予定がなければ、お昼までだらだらしてしまっていたかもしれない。私はトラックを4周ジョギングしてストレッチをしてからバドミントンのひとり練習をしていた。とがいさんもバスケ練習が終えてから合流して一緒にバドミントンの練習もした。10時半頃から軽くウォームアップして、ネットを挟んで打ち合いをした。ネットがあるとバドミントンの練習をするモチベーションにもなるし、場所を固定するのにもよい。太陽とシャトルが重ならないような位置取り、風の向きなども考慮して場所を決めないといけない。2回休憩して11時半頃まで打ち合いの練習をして終えた。よい運動になった。
バドミントンは体力さえ続けば1時間ぐらいなんとなくでやってしまう。誰でもできる有酸素運動としてよさそうにみえる。テトリスのような、シンプルなゲームだからついついやり続けてしまう魅力がある。
ストレッチ 今週は毎日30-60程度はバドミントンの練習をしてきて汗をかくぐらいには運動してきて太ももに張りを感じていた。ゆっくりやっているつもりでもたまにチカラが入ってしまうときもある。以前 SPINE SALON さんで診察 してもらったときの状況に似ている。また筋が少しズレているのかもしれない。運動を再開してからはこのときに教えてもらった体操もしていた。トレーナーさんも気遣ってくれて右太ももを念入りにゆっくり伸ばしてくれた。そのせいか、ストレッチ前と比べてずいぶん楽になった。今日の開脚幅は開始前146cmで、ストレッチ後154cmだった。少し休みながら様子をみてみようと思う。</description><content>&lt;p>先日購入した &lt;a href="/diary/diary/posts/2024/0929/#ポータブルネット">ポータブルネット&lt;/a> を使って公園で屋外バドミントンを1時間ほどした。持ち運びするときの折り畳み状態が次になる。筒の中に紐が通っていてバラバラにならないので簡単に組み立てできる。初見でも2分あれば組み立ても片付けもできる。予想以上に組み立て／片付けの体験がよかった。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2024/1005_fold.jpg"/>
&lt;/figure>
&lt;h2 id="みなとのもりの運動">みなとのもりの運動&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2024/1004/#みなとのもりの運動">前回の所感&lt;/a> 。水曜日に運動部の slack チャンネルに投稿していた。とがいさんが久しぶりにバスケの練習に来られた。9時から準備を始めて10時から公園で運動する。土曜日の午前中に運動の予定を入れるのは朝ちゃんと起きる理由にもなってよい。予定がなければ、お昼までだらだらしてしまっていたかもしれない。私はトラックを4周ジョギングしてストレッチをしてからバドミントンのひとり練習をしていた。とがいさんもバスケ練習が終えてから合流して一緒にバドミントンの練習もした。10時半頃から軽くウォームアップして、ネットを挟んで打ち合いをした。ネットがあるとバドミントンの練習をするモチベーションにもなるし、場所を固定するのにもよい。太陽とシャトルが重ならないような位置取り、風の向きなども考慮して場所を決めないといけない。2回休憩して11時半頃まで打ち合いの練習をして終えた。よい運動になった。&lt;/p>
&lt;p>バドミントンは体力さえ続けば1時間ぐらいなんとなくでやってしまう。誰でもできる有酸素運動としてよさそうにみえる。テトリスのような、シンプルなゲームだからついついやり続けてしまう魅力がある。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週は毎日30-60程度はバドミントンの練習をしてきて汗をかくぐらいには運動してきて太ももに張りを感じていた。ゆっくりやっているつもりでもたまにチカラが入ってしまうときもある。以前 &lt;a href="/diary/diary/posts/2024/0707/#右股関節の診察">SPINE SALON さんで診察&lt;/a> してもらったときの状況に似ている。また筋が少しズレているのかもしれない。運動を再開してからはこのときに教えてもらった体操もしていた。トレーナーさんも気遣ってくれて右太ももを念入りにゆっくり伸ばしてくれた。そのせいか、ストレッチ前と比べてずいぶん楽になった。今日の開脚幅は開始前146cmで、ストレッチ後154cmだった。少し休みながら様子をみてみようと思う。&lt;/p></content></item><item><title>雨上がり後の練習</title><link>/diary/posts/2024/1004/</link><pubDate>Fri, 04 Oct 2024 22:59:44 +0900</pubDate><guid>/diary/posts/2024/1004/</guid><description>今日のバドミントン練習はリフティングを10分、キャッチを10分、壁当てを10分した。今日も近所のビル横の広場へ行った。本当は10分だけやって帰ろうと思っていたのにやり始めたら楽しくなってきて30分やっていた。ちょうど23時半から始めて24時になるとビルの玄関が消灯した。これまで22時台でしか練習していなかった。その時間帯に行くのがよいということもわかった。
リフティングは夜でも200回は続けられるようになった。ラケットコントロールが少しずつ上達してきたのは実感できる。単純に回数を続けるだけであれば、もっと回数を増やすこともできると思う。回数を増やすことにあまり意味はないのでリフティングのやり方を工夫したりしている。最初のウォームアップに200回ほどリフティングをやってから別の練習をするようになった。バドミントンのひとり練習動画 でリフティングもキャッチもラケットの持ち方をフォア持ちとバック持ちに切り替えて繰り返しやることを紹介している。昨日からこの練習に挑戦しているが、まだまだ安定的に切り替えることが私には難しい。
真上に打ち上げるロビングもシャトルを狙ったところに打つにはラケットのスィートスポットでシャトルを捉える必要がある。うまく打てるときもあるが、連続して何度も真上に打ち上げるのは難しい。何回かに1回はきれいに真上にあがるがそのときに落ちてきたシャトルを連続して真上に上げるのは難しい。ラケットコントロールがうまくできていないから、やや角度がついて斜め上にあがってしまう。そうすると落下点へ移動するためにドタバタしてしまってロビングの練習にならない。毎日数十分でも続けていける雰囲気はする。</description><content>&lt;p>今日のバドミントン練習はリフティングを10分、キャッチを10分、壁当てを10分した。今日も近所のビル横の広場へ行った。本当は10分だけやって帰ろうと思っていたのにやり始めたら楽しくなってきて30分やっていた。ちょうど23時半から始めて24時になるとビルの玄関が消灯した。これまで22時台でしか練習していなかった。その時間帯に行くのがよいということもわかった。&lt;/p>
&lt;p>リフティングは夜でも200回は続けられるようになった。ラケットコントロールが少しずつ上達してきたのは実感できる。単純に回数を続けるだけであれば、もっと回数を増やすこともできると思う。回数を増やすことにあまり意味はないのでリフティングのやり方を工夫したりしている。最初のウォームアップに200回ほどリフティングをやってから別の練習をするようになった。&lt;a href="/diary/diary/posts/2024/0928/">バドミントンのひとり練習動画&lt;/a> でリフティングもキャッチもラケットの持ち方をフォア持ちとバック持ちに切り替えて繰り返しやることを紹介している。昨日からこの練習に挑戦しているが、まだまだ安定的に切り替えることが私には難しい。&lt;/p>
&lt;p>真上に打ち上げるロビングもシャトルを狙ったところに打つにはラケットのスィートスポットでシャトルを捉える必要がある。うまく打てるときもあるが、連続して何度も真上に打ち上げるのは難しい。何回かに1回はきれいに真上にあがるがそのときに落ちてきたシャトルを連続して真上に上げるのは難しい。ラケットコントロールがうまくできていないから、やや角度がついて斜め上にあがってしまう。そうすると落下点へ移動するためにドタバタしてしまってロビングの練習にならない。毎日数十分でも続けていける雰囲気はする。&lt;/p></content></item><item><title>一日中テストコードを書いていた</title><link>/diary/posts/2024/1003/</link><pubDate>Thu, 03 Oct 2024 21:25:50 +0900</pubDate><guid>/diary/posts/2024/1003/</guid><description>今日のバドミントン練習は22時半頃から近所のビル横の広場でリフティングを20分、キャッチを10分、壁当てを10分した。
リフティングや壁当てをしていて、自分の感覚とはずれてラケットを空振りしてしまうことがある。またラケットのスィートスポットでシャトルを捉えられず、フレームでこねてしまうこともある。この感覚のズレはなぜ起きるのかを考えるようになった。1つわかったことは飛んでいるシャトルを点で捉えようとすると空振りしやすい。シャトルの軌道を見極めてシャトルの移動する放物線でラケットを振ると捉えやすい。野球の球をうつときにもよく指摘される話しでもある。そのままバドミントンにも応用できるように思えた。体勢が崩れたり、向かってくるシャトルの速度にあわせられないときなど、シャトルの移動する放物線を目で捉えられなくて空振りしてしまう。理論がわかったからと言ってそんなすぐに対応できるわけでもないが、今日の練習をしていた気付いたことを書いていく。
外へ出掛けるときにラケットとシャトルをもって時間があれば、空きスペースで練習するのに慣れてきた。</description><content>&lt;p>今日のバドミントン練習は22時半頃から近所のビル横の広場でリフティングを20分、キャッチを10分、壁当てを10分した。&lt;/p>
&lt;p>リフティングや壁当てをしていて、自分の感覚とはずれてラケットを空振りしてしまうことがある。またラケットのスィートスポットでシャトルを捉えられず、フレームでこねてしまうこともある。この感覚のズレはなぜ起きるのかを考えるようになった。1つわかったことは飛んでいるシャトルを点で捉えようとすると空振りしやすい。シャトルの軌道を見極めてシャトルの移動する放物線でラケットを振ると捉えやすい。野球の球をうつときにもよく指摘される話しでもある。そのままバドミントンにも応用できるように思えた。体勢が崩れたり、向かってくるシャトルの速度にあわせられないときなど、シャトルの移動する放物線を目で捉えられなくて空振りしてしまう。理論がわかったからと言ってそんなすぐに対応できるわけでもないが、今日の練習をしていた気付いたことを書いていく。&lt;/p>
&lt;p>外へ出掛けるときにラケットとシャトルをもって時間があれば、空きスペースで練習するのに慣れてきた。&lt;/p></content></item><item><title>バドミントンの雨天練習場</title><link>/diary/posts/2024/1002/</link><pubDate>Wed, 02 Oct 2024 09:22:13 +0900</pubDate><guid>/diary/posts/2024/1002/</guid><description>今日のバドミントン練習はお昼に20分、夜に30分ほどした。
15時頃コンビニへ飲みものを買いにいくついでに東遊園地へ寄り道して練習した。そんなに人が多いわけではないけど、公園でのんびりしている人たちがちょこちょこいる。空きスペースでおっさんが昼間からバドミントンの練習をするのはやや恥ずかしい。下手だし。「あの人働いてないんやろか」とか周りからみられているかもしれない。最初はそんなことを考えながらも、練習をやり始めたら集中してきてあまり気にならなくなった。昼間はリフティングを10分、キャッチを10分した。連続最大回数は127回、10分間に20回ほどキャッチできた。ほんの数十分でも毎日やっていれば徐々にうまくなっている気はする。
夜も近所でビルの玄関横の少し広いスペースをみつけた。ビルの正面玄関の電気がある。十分に明るくはないけど、ぎりぎりリフティングやキャッチの練習ならできる。しかも屋根があるから雨の日でも練習できる。22時頃ならほとんど人がいないからたぶん練習していても怒られない。なんだかんだで30分以上はやっていたと思う。シャトルを上に放り投げてキャッチするときに、一番簡単なのはシャトルが落ちてくる速度にあわせてラケット面を落としながら受ける。もっとも簡単で少し練習すれば5回に1回は成功する。しかし、このやり方は上下のシャトルの動きにしか対応できない。シャトルを上に放り投げてキャッチするときに上下のチカラの調整だけではなく、シャトルの落下速度にあわせながら横からラケットを当てて包み込むような取り方がある。うまくはまればかっこいい。失敗すると空振りするのでもう少し練習が必要になる。リフティングやキャッチのような基本的な練習でもチカラの向きやシャトルの動きから学ぶことはいくつもある。</description><content>&lt;p>今日のバドミントン練習はお昼に20分、夜に30分ほどした。&lt;/p>
&lt;p>15時頃コンビニへ飲みものを買いにいくついでに東遊園地へ寄り道して練習した。そんなに人が多いわけではないけど、公園でのんびりしている人たちがちょこちょこいる。空きスペースでおっさんが昼間からバドミントンの練習をするのはやや恥ずかしい。下手だし。「あの人働いてないんやろか」とか周りからみられているかもしれない。最初はそんなことを考えながらも、練習をやり始めたら集中してきてあまり気にならなくなった。昼間はリフティングを10分、キャッチを10分した。連続最大回数は127回、10分間に20回ほどキャッチできた。ほんの数十分でも毎日やっていれば徐々にうまくなっている気はする。&lt;/p>
&lt;p>夜も近所でビルの玄関横の少し広いスペースをみつけた。ビルの正面玄関の電気がある。十分に明るくはないけど、ぎりぎりリフティングやキャッチの練習ならできる。しかも屋根があるから雨の日でも練習できる。22時頃ならほとんど人がいないからたぶん練習していても怒られない。なんだかんだで30分以上はやっていたと思う。シャトルを上に放り投げてキャッチするときに、一番簡単なのはシャトルが落ちてくる速度にあわせてラケット面を落としながら受ける。もっとも簡単で少し練習すれば5回に1回は成功する。しかし、このやり方は上下のシャトルの動きにしか対応できない。シャトルを上に放り投げてキャッチするときに上下のチカラの調整だけではなく、シャトルの落下速度にあわせながら横からラケットを当てて包み込むような取り方がある。うまくはまればかっこいい。失敗すると空振りするのでもう少し練習が必要になる。リフティングやキャッチのような基本的な練習でもチカラの向きやシャトルの動きから学ぶことはいくつもある。&lt;/p></content></item><item><title>磯上公園での夜間練習</title><link>/diary/posts/2024/1001/</link><pubDate>Tue, 01 Oct 2024 17:18:03 +0900</pubDate><guid>/diary/posts/2024/1001/</guid><description>今日のバドミントン練習はリフティングとシャトルキャッチを30分、ながいさんと打ち合いを30分した。1時間近くバドミントン練習をしていたことで歩数で言えば5千歩相当の運動になった。バドミントンは激しい運動ではないものの、わりと動き回るので有酸素運動としても優等生だと思う。よい感じにカロリーを消費する。
社内ハンズオン 社内向けハンズオンの2回目。前回の社内ハンズオン 。いまの開発フェーズの機能開発が落ち着いたのでハンズオンを実施して ui などのレビュー会も実施した。朝10時半から始めて、お昼休みをはさみつつ、16時頃までやっていた。私はハドルでつないで聞きながら自分の作業をやろうと思っていたものの、なにかしらハンズオン会場の会話や質問を聞いていると、その回答や背景などを slack に書いたりして注意力が取られてあまり自分の作業はできなかった。みんなでわいわい検証したり、プロダクトへのフィードバックや意見が出て楽しかった。
いそがみ体育館お休み ながいさんとバドミントン練習する前に筋トレしようと早めにお仕事を切り上げて向かったらお休みだった。偶数月の第1火曜日が休館日らしい。それはわからんやろと帰ってきてから google カレンダーに登録した。2ヶ月ごとの第1火曜日の繰り返し予定という設定は google カレンダーで用意に登録できる。次は12月3日、その次は2月4日・・・今後はこの失敗を回避できるはず。
いそがみのバドミントン練習 スーパーで買いものして家に戻って晩ご飯を作って食べてから20時半にいそがみ公園へ戻る。21時半まで約1時間、バドミントンの練習をした。リフティングやシャトルキャッチの練習をしていて、ながいさんが来られてから打ち合いをしてみた。街灯の隣でやればシャトルはみえなくはないけど、体育館で行うような集中したラリーにはなりそうもない。それは暗くてシャトルがみえにくいから。軽い運動で流す程度ならぎりぎりできるかもしれない。昼間と夜間で練習してみて、左右のシャトルの変化は暗くても把握しやすいが、前後のシャトルの変化は暗いと遠近感をつかみにくい。夜間の方がリフティングが難しいのも微妙に遠近感が狂うから。ラケットコントロールがうまくなればブレずにシャトルを空中に上げられて遠近感を気にせずにリフティングできるようになるかもしれない。
昨日からアウトドア用の メイビスフィールド と メイビスフィールドII の、2つのシャトルを実際に使っていて、その違いを比べてみた。結論からいうとメイビスフィールドIIの方が性能がよいようにみえる。メイビスフィールドIIの方がシャトルをうったときの反発力は強く、軽い力で速く遠くへ飛ばせるように感じる。初期モデルに改良が施されていることが明らかに伺える。一方で初期モデルが不要かというとそうでもなく、リフティングやシャトルキャッチの練習をするなら反発力は必要ではないから跳ねない方がラケットコントロールが適切にできているかの練習になりそうな気もする。ラケットの中心 (スィートスポット) でシャトルを捉えられているか、シャトルのコルクをどの角度で捉えているかの感覚を養うにはあまり反発しない方が感触を確認しやすいようにも思えた。反発しないから強い打球をうつ練習にもなる。適材適所で使い分けようと思う。
ほかに LED ライトがついた光るシャトルというのも売っていて気になっている。電池交換は不可で数時間から数十時間ほど使えるらしい。屋外で行う エアバドミントン というのもある。風の影響を受けにくいエアシャトルを使う以外はバドミントンと大差なさそう。バレーとビーチバレーのような関係？これらのシャトルも近いうちに買ってみて試してみようと思う。</description><content>&lt;p>今日のバドミントン練習はリフティングとシャトルキャッチを30分、ながいさんと打ち合いを30分した。1時間近くバドミントン練習をしていたことで歩数で言えば5千歩相当の運動になった。バドミントンは激しい運動ではないものの、わりと動き回るので有酸素運動としても優等生だと思う。よい感じにカロリーを消費する。&lt;/p>
&lt;h2 id="社内ハンズオン">社内ハンズオン&lt;/h2>
&lt;p>社内向けハンズオンの2回目。&lt;a href="/diary/diary/posts/2024/0725/#ハンズオン">前回の社内ハンズオン&lt;/a> 。いまの開発フェーズの機能開発が落ち着いたのでハンズオンを実施して ui などのレビュー会も実施した。朝10時半から始めて、お昼休みをはさみつつ、16時頃までやっていた。私はハドルでつないで聞きながら自分の作業をやろうと思っていたものの、なにかしらハンズオン会場の会話や質問を聞いていると、その回答や背景などを slack に書いたりして注意力が取られてあまり自分の作業はできなかった。みんなでわいわい検証したり、プロダクトへのフィードバックや意見が出て楽しかった。&lt;/p>
&lt;h2 id="いそがみ体育館お休み">いそがみ体育館お休み&lt;/h2>
&lt;p>ながいさんとバドミントン練習する前に筋トレしようと早めにお仕事を切り上げて向かったらお休みだった。偶数月の第1火曜日が休館日らしい。それはわからんやろと帰ってきてから google カレンダーに登録した。2ヶ月ごとの第1火曜日の繰り返し予定という設定は google カレンダーで用意に登録できる。次は12月3日、その次は2月4日・・・今後はこの失敗を回避できるはず。&lt;/p>
&lt;h2 id="いそがみのバドミントン練習">いそがみのバドミントン練習&lt;/h2>
&lt;p>スーパーで買いものして家に戻って晩ご飯を作って食べてから20時半にいそがみ公園へ戻る。21時半まで約1時間、バドミントンの練習をした。リフティングやシャトルキャッチの練習をしていて、ながいさんが来られてから打ち合いをしてみた。街灯の隣でやればシャトルはみえなくはないけど、体育館で行うような集中したラリーにはなりそうもない。それは暗くてシャトルがみえにくいから。軽い運動で流す程度ならぎりぎりできるかもしれない。昼間と夜間で練習してみて、左右のシャトルの変化は暗くても把握しやすいが、前後のシャトルの変化は暗いと遠近感をつかみにくい。夜間の方がリフティングが難しいのも微妙に遠近感が狂うから。ラケットコントロールがうまくなればブレずにシャトルを空中に上げられて遠近感を気にせずにリフティングできるようになるかもしれない。&lt;/p>
&lt;p>昨日からアウトドア用の &lt;a href="https://www.yonex.co.jp/badminton/news/2021/04/2104161600.html">メイビスフィールド&lt;/a> と &lt;a href="https://yonexshop.jp/item/detail/1_1_M-F2CBP_1/004">メイビスフィールドII&lt;/a> の、2つのシャトルを実際に使っていて、その違いを比べてみた。結論からいうとメイビスフィールドIIの方が性能がよいようにみえる。メイビスフィールドIIの方がシャトルをうったときの反発力は強く、軽い力で速く遠くへ飛ばせるように感じる。初期モデルに改良が施されていることが明らかに伺える。一方で初期モデルが不要かというとそうでもなく、リフティングやシャトルキャッチの練習をするなら反発力は必要ではないから跳ねない方がラケットコントロールが適切にできているかの練習になりそうな気もする。ラケットの中心 (スィートスポット) でシャトルを捉えられているか、シャトルのコルクをどの角度で捉えているかの感覚を養うにはあまり反発しない方が感触を確認しやすいようにも思えた。反発しないから強い打球をうつ練習にもなる。適材適所で使い分けようと思う。&lt;/p>
&lt;p>ほかに LED ライトがついた光るシャトルというのも売っていて気になっている。電池交換は不可で数時間から数十時間ほど使えるらしい。屋外で行う &lt;a href="https://japan-airbadminton.jp/">エアバドミントン&lt;/a> というのもある。風の影響を受けにくいエアシャトルを使う以外はバドミントンと大差なさそう。バレーとビーチバレーのような関係？これらのシャトルも近いうちに買ってみて試してみようと思う。&lt;/p></content></item></channel></rss>