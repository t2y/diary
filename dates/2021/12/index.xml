<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2021/12 on forest nook</title><link>/diary/dates/2021/12/</link><description>Recent content in 2021/12 on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/dates/2021/12/index.xml" rel="self" type="application/rss+xml"/><item><title>大晦日の帰省</title><link>/diary/posts/2021/1231/</link><pubDate>Fri, 31 Dec 2021 08:14:16 +0900</pubDate><guid>/diary/posts/2021/1231/</guid><description>0時に寝て6時に起きた。朝活やってからまたちょっと寝てた。午後から高速バスで実家に帰った。
朝活: バッタを倒しにアフリカへ 金朝ツメトギ 2021-12-31 AM 6 金曜朝6時開催のもくもく会 に参加した。厳密には朝活のときは、はらさんの振り返りを聞いてた感じで、終わってから「第2章アフリカに染まる」「第3章旅立ちを前に」を読んだ。アフリカでの生活のあれこれが書いてあって、日本に住んでいる自分からは斬新でおもしろい。なにかの記事でアフリカが経済発展しない理由の1つに賄賂や汚職が横行していて云々みたいな記事を読んだことがある気がするけど、本書の中でもちょくちょく賄賂を要求されたり、不正に給料をもらおうとぼったくりされたこととかが書いてある。日本人からみると賄賂やぼったくりの金額もそんなに高くないので払ってしまったりしてそれが返って社会に歪みを与えてたりするのかな？とも思えた。
モーリタニアの公用語がフランス語で著者は英語しか話せなくて、言葉の通じない国で現地の人たちと仲良くなるのは相当の苦労が忍ばれる。著者は文章を読んでいてもおもしろい感じだけど、言葉のスキルとは別にコミュニケーション能力が高い人なんだろうということも伺える。言葉が通じなくても仲良くなれる雰囲気の人はいると思う。あとは日本と比べると生活環境がよくなくて、いまの自分は外国で暮らすとかできないだろうなと読んでて思うこともあった。
高校の同級生と飲む 毎年、大晦日に集まって近況報告をしたりしてた。コロナ禍があって自粛していたので3年ぶりに集まった。とくに変わりなくみんな元気でいた。18時頃から飲みながらだらだらしてた。私は前に焼き鳥屋さんのマスターのおすすめで飲んだ だいやめ を持っていった。そのとき飲んだお湯割もおいしかったけど、今回はソーダ割りを試してみて、それもおいしかった。友だちも初めてだいやめを飲んで、これ芋焼酎なの？と驚いていた。初めて飲んだら驚くという意味でもこの焼酎はお土産に向いている。
友だちの1人はゴルフにはまっているという話。調子がよかったら80台でまわれるぐらいで、私にはわからないけど中級者と言えるだけのレベルに達しているらしい。ゴルフは接待や出世のためのツールみたいなイメージが私にはある。したがって私とは無縁でやることはないような気がする。かなり歩くから健康のためにもよいという話もあるのでゴルフ自体を忌避しているわけでもない。スポーツとして楽しんでやっているのはよいと思う。
夜はテレビで RIZIN をみていた。出場している選手は全然わからないけど、大晦日っぽいなと思いながらみていた。</description><content>&lt;p>0時に寝て6時に起きた。朝活やってからまたちょっと寝てた。午後から高速バスで実家に帰った。&lt;/p>
&lt;h2 id="朝活-バッタを倒しにアフリカへ">朝活: バッタを倒しにアフリカへ&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=WRW2MIbe3uc">金朝ツメトギ 2021-12-31 AM 6 金曜朝6時開催のもくもく会&lt;/a> に参加した。厳密には朝活のときは、はらさんの振り返りを聞いてた感じで、終わってから「第2章アフリカに染まる」「第3章旅立ちを前に」を読んだ。アフリカでの生活のあれこれが書いてあって、日本に住んでいる自分からは斬新でおもしろい。なにかの記事でアフリカが経済発展しない理由の1つに賄賂や汚職が横行していて云々みたいな記事を読んだことがある気がするけど、本書の中でもちょくちょく賄賂を要求されたり、不正に給料をもらおうとぼったくりされたこととかが書いてある。日本人からみると賄賂やぼったくりの金額もそんなに高くないので払ってしまったりしてそれが返って社会に歪みを与えてたりするのかな？とも思えた。&lt;/p>
&lt;p>モーリタニアの公用語がフランス語で著者は英語しか話せなくて、言葉の通じない国で現地の人たちと仲良くなるのは相当の苦労が忍ばれる。著者は文章を読んでいてもおもしろい感じだけど、言葉のスキルとは別にコミュニケーション能力が高い人なんだろうということも伺える。言葉が通じなくても仲良くなれる雰囲気の人はいると思う。あとは日本と比べると生活環境がよくなくて、いまの自分は外国で暮らすとかできないだろうなと読んでて思うこともあった。&lt;/p>
&lt;h2 id="高校の同級生と飲む">高校の同級生と飲む&lt;/h2>
&lt;p>毎年、大晦日に集まって近況報告をしたりしてた。コロナ禍があって自粛していたので3年ぶりに集まった。とくに変わりなくみんな元気でいた。18時頃から飲みながらだらだらしてた。私は前に焼き鳥屋さんのマスターのおすすめで飲んだ &lt;a href="/diary/diary/posts/2021/1109/#呑み">だいやめ&lt;/a> を持っていった。そのとき飲んだお湯割もおいしかったけど、今回はソーダ割りを試してみて、それもおいしかった。友だちも初めてだいやめを飲んで、これ芋焼酎なの？と驚いていた。初めて飲んだら驚くという意味でもこの焼酎はお土産に向いている。&lt;/p>
&lt;p>友だちの1人はゴルフにはまっているという話。調子がよかったら80台でまわれるぐらいで、私にはわからないけど中級者と言えるだけのレベルに達しているらしい。ゴルフは接待や出世のためのツールみたいなイメージが私にはある。したがって私とは無縁でやることはないような気がする。かなり歩くから健康のためにもよいという話もあるのでゴルフ自体を忌避しているわけでもない。スポーツとして楽しんでやっているのはよいと思う。&lt;/p>
&lt;p>夜はテレビで RIZIN をみていた。出場している選手は全然わからないけど、大晦日っぽいなと思いながらみていた。&lt;/p></content></item><item><title>銀行での手続き</title><link>/diary/posts/2021/1230/</link><pubDate>Thu, 30 Dec 2021 08:24:55 +0900</pubDate><guid>/diary/posts/2021/1230/</guid><description>0時に寝て6時に起きた。10時に銀行へ行く予定があったから普通に起きて8時にはオフィスにいた。予定があればちゃんと起きれるのに休日はだらけてしまう。午後から気分転換に漫画喫茶へ行ったら満室で入れなくて、そのまま帰ってだらだらしてた。
BizSTATION Light BizSTATION Light (以下light) という無償サービスを使っているが、このサービスは契約時に OS 縛りがあって macOS と Windows のどちらかでしか使えないサービスとなっている。誤った意識の高さでセキュリティを考えたような制約にみえる。しかし、現状そうなっているので仕方ない。これまで macOS でサービスを利用してきたが、Windows マシンを購入したのでこのサービスも Windows に切り替えることにした。なぜ macOS だとダメかというと、BizSTATION という有償サービスがある。月々1,760円を支払うと light よりも高機能なサービスを受けられる。macOS でも利用できるのだけど、macOS の場合、有償でも API サービスを利用できない。Web サービスでありながら OS で認証方式を変えているため、その仕様制限で API サービスは利用できないという理屈になるらしい。API サービスを利用できなければ会計システムと連携できないため、これまで light しか使ってこなかった。Windows マシンを購入したのでこの機会に macOS から Windows へ契約を変更することに決めた。
ここで macOS から Windows への変更は既存契約を解約して新規契約を結ぶという手順になるらしい。同じ会社・口座なのに OS の変更すらできないというのは不便で、新規契約なので登録手続きに3週間ぐらいはサービスを利用できない期間ができる。いま API サービスを使っていないから全く問題ないけど、こういう利便性の悪さからも有償サービスに切り替えるモチベーションをなくしてしまった。というのは、API サービスなしで1年以上やり繰りしてきて、いまお金を払えば API サービスを利用できると言っても現時点では別に困らないから不要だと考えている。いずれ必要になる可能性もあるので、いまのうちに Windows マシンに契約を切り替えておこうと考えた次第。
昨日、準備した 経営セーフティ共済 の前納付の書類もついでに確認してもらって問題なしということでそのまま提出してきた。</description><content>&lt;p>0時に寝て6時に起きた。10時に銀行へ行く予定があったから普通に起きて8時にはオフィスにいた。予定があればちゃんと起きれるのに休日はだらけてしまう。午後から気分転換に漫画喫茶へ行ったら満室で入れなくて、そのまま帰ってだらだらしてた。&lt;/p>
&lt;h2 id="bizstation-light">BizSTATION Light&lt;/h2>
&lt;p>&lt;a href="https://bizstation.bk.mufg.jp/bizlight/index.html">BizSTATION Light&lt;/a> (以下light) という無償サービスを使っているが、このサービスは契約時に OS 縛りがあって macOS と Windows のどちらかでしか使えないサービスとなっている。誤った意識の高さでセキュリティを考えたような制約にみえる。しかし、現状そうなっているので仕方ない。これまで macOS でサービスを利用してきたが、Windows マシンを購入したのでこのサービスも Windows に切り替えることにした。なぜ macOS だとダメかというと、&lt;a href="https://bizstation.bk.mufg.jp/bizstation/index.html">BizSTATION&lt;/a> という有償サービスがある。月々1,760円を支払うと light よりも高機能なサービスを受けられる。macOS でも利用できるのだけど、macOS の場合、有償でも API サービスを利用できない。Web サービスでありながら OS で認証方式を変えているため、その仕様制限で API サービスは利用できないという理屈になるらしい。API サービスを利用できなければ会計システムと連携できないため、これまで light しか使ってこなかった。Windows マシンを購入したのでこの機会に macOS から Windows へ契約を変更することに決めた。&lt;/p>
&lt;p>ここで macOS から Windows への変更は既存契約を解約して新規契約を結ぶという手順になるらしい。同じ会社・口座なのに OS の変更すらできないというのは不便で、新規契約なので登録手続きに3週間ぐらいはサービスを利用できない期間ができる。いま API サービスを使っていないから全く問題ないけど、こういう利便性の悪さからも有償サービスに切り替えるモチベーションをなくしてしまった。というのは、API サービスなしで1年以上やり繰りしてきて、いまお金を払えば API サービスを利用できると言っても現時点では別に困らないから不要だと考えている。いずれ必要になる可能性もあるので、いまのうちに Windows マシンに契約を切り替えておこうと考えた次第。&lt;/p>
&lt;p>昨日、準備した &lt;a href="/diary/diary/posts/2021/1229/#経営セーフティ共済の前納">経営セーフティ共済&lt;/a> の前納付の書類もついでに確認してもらって問題なしということでそのまま提出してきた。&lt;/p></content></item><item><title>年末の事務手続き</title><link>/diary/posts/2021/1229/</link><pubDate>Wed, 29 Dec 2021 11:39:19 +0900</pubDate><guid>/diary/posts/2021/1229/</guid><description>0時に寝て5時に起きて2度寝して8時に起きた。昨日と全く同じような起き方でだらけてきた。一昨日に作成しておいた PR が approve されたので、お昼にマージしてその続きのコードもちょっと書いたりしてた。
経営セーフティ共済の前納 昨年度から経営セーフティ共済に加入している。3月に前納 (一括納付) しているので、今年度も同様に 掛金の前納 を行う。前納は明示的に申請しない限り、期間が過ぎると月々の支払いに変更されてしまう。決算月で前納するかどうかで経費の損金算入のタイミングが変わってきて、法人税の税金の支払いに影響がある。ある記事によると、2ヶ月前から手続きできると書いてあった。それが正しいなら1月からとなってしまうけど、中小機構のサイトの説明にはいつから手続き可能とは書いていない。ひとまず書類をダウンロードして必要事項を記入した。明日、別件で銀行に行く機会があるので、ついでに前納手続き可能なら書類を提出してくる。
Oculus Link のセットアップ Windows マシンを購入した理由 の1つに Oculus Link を使うことがあった。市販の USB 3.0 ケーブルは購入していたので Oculus Link アプリをインストールしたり、設定したりしていた。久しぶりにヘッドマウントを起動したので OS のアップデートなどもしていた。VRChat もやったことないのでこの機に試してみる。時間に余裕ができたら VR でもなにか活動していきたい。
「Oculus Link」のセットアップを徹底解説 注意点やケーブル選びも</description><content>&lt;p>0時に寝て5時に起きて2度寝して8時に起きた。昨日と全く同じような起き方でだらけてきた。一昨日に作成しておいた PR が approve されたので、お昼にマージしてその続きのコードもちょっと書いたりしてた。&lt;/p>
&lt;h2 id="経営セーフティ共済の前納">経営セーフティ共済の前納&lt;/h2>
&lt;p>昨年度から経営セーフティ共済に加入している。3月に前納 (一括納付) しているので、今年度も同様に &lt;a href="https://www.smrj.go.jp/kyosai/tkyosai/customer/procedure/installment/02.html">掛金の前納&lt;/a> を行う。前納は明示的に申請しない限り、期間が過ぎると月々の支払いに変更されてしまう。決算月で前納するかどうかで経費の損金算入のタイミングが変わってきて、法人税の税金の支払いに影響がある。ある記事によると、2ヶ月前から手続きできると書いてあった。それが正しいなら1月からとなってしまうけど、中小機構のサイトの説明にはいつから手続き可能とは書いていない。ひとまず書類をダウンロードして必要事項を記入した。明日、別件で銀行に行く機会があるので、ついでに前納手続き可能なら書類を提出してくる。&lt;/p>
&lt;h2 id="oculus-link-のセットアップ">Oculus Link のセットアップ&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1103/#asus-rog-zephyrus-g15-ga503qr">Windows マシンを購入した理由&lt;/a> の1つに Oculus Link を使うことがあった。市販の USB 3.0 ケーブルは購入していたので Oculus Link アプリをインストールしたり、設定したりしていた。久しぶりにヘッドマウントを起動したので OS のアップデートなどもしていた。&lt;a href="https://hello.vrchat.com/">VRChat&lt;/a> もやったことないのでこの機に試してみる。時間に余裕ができたら VR でもなにか活動していきたい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.moguravr.com/oculus-link-setup-explanation/">「Oculus Link」のセットアップを徹底解説 注意点やケーブル選びも&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>目標はもうない</title><link>/diary/posts/2021/1228/</link><pubDate>Tue, 28 Dec 2021 10:27:20 +0900</pubDate><guid>/diary/posts/2021/1228/</guid><description>0時に寝て5時に起きて2度寝して8時に起きた。前日やや飲み過ぎて軽い2日酔い。
目標考察 この前ストレッチを受けているときにトレーナーさんから「来年の目標はなんですか？」とふと聞かれた。目標という単語に私は忌避感をもっているなと感じた。というのは、普通の規模の会社でサラリーマンやっていれば、期首に目標設定やって期末に評価して昇格やボーナスの金額が変わるといった制度になっていることが多いと思う。私は昔から目標とか意識して働くよりも、働いている過程や状況の変化の中でそのときに大事だと自分が思ったことに注力するような方だった。なので、期首に立てた目標とは全然異なる業績をあげたりすると、目標とか無関係に評価が決まることが多かった。この評価には高い評価を受けたこともあるし、低い評価を受けたこともある。そして、評価は上長やより上位の人たちのさじ加減で決まることも多かった。目標とか組織の論理よりもプロジェクトの状況にとって大事かどうかを自分で判断して行動するから目標が有名無実化しやすい方だった。そういう働き方をしていると、目標とか評価とか無駄な労力よなと思ってしまう。いまマイクロ法人として独立して、目標と評価という無駄な労力を費やさなくて済むので、そういったストレスからは解放された生活を送れるようになった。
閑話休題。トレーナーさんにはこう回答した。目標とかとくにないです。日々、健康で過ごすぐらいのことしか考えてませんと意識の低い回答をした。一方で私はやりたいと思ったことはすでにやっているところはある。サラリーマン時代の刷り込みからか、目標とは計画を指していて、すでにやっていることは目標に含めないように考えてしまうところがある。進行中であってもやり終えるまでを目標と設定して喧伝してもよいとは思うけど、私がすでにやっていることを目標とみなさないのは、上述したように、やっている過程や状況の変化にあわせて変えていくため、予め事前に立てておいた目標とは異なる結果になることが経験的に多かったことに起因する。もうこの歳になると目標を立てるというよりも、目標となることをやっているかどうかの方が重要になってきたという思いもある。
いずれにしても目標や評価のような行動を私は2度とやることはないだろうという話し。
実践知本の読み直し 課題管理における背景の理論考察を始めたとき、早い段階で読んだ本に 実践知 — エキスパートの知性 がある。8月頃に読んだ。当時は知識にもいろんな分野や研究成果があるとわかった程度だった。その後、認知心理学やスクラム開発の背景を学ぶうちに実践知とも関連があるように思えてきた。背景知識が増えた状態で、いまこの本を読み返せばまた違った理解があるのではないかと考えてまた読み直すことにした。</description><content>&lt;p>0時に寝て5時に起きて2度寝して8時に起きた。前日やや飲み過ぎて軽い2日酔い。&lt;/p>
&lt;h2 id="目標考察">目標考察&lt;/h2>
&lt;p>この前ストレッチを受けているときにトレーナーさんから「来年の目標はなんですか？」とふと聞かれた。目標という単語に私は忌避感をもっているなと感じた。というのは、普通の規模の会社でサラリーマンやっていれば、期首に目標設定やって期末に評価して昇格やボーナスの金額が変わるといった制度になっていることが多いと思う。私は昔から目標とか意識して働くよりも、働いている過程や状況の変化の中でそのときに大事だと自分が思ったことに注力するような方だった。なので、期首に立てた目標とは全然異なる業績をあげたりすると、目標とか無関係に評価が決まることが多かった。この評価には高い評価を受けたこともあるし、低い評価を受けたこともある。そして、評価は上長やより上位の人たちのさじ加減で決まることも多かった。目標とか組織の論理よりもプロジェクトの状況にとって大事かどうかを自分で判断して行動するから目標が有名無実化しやすい方だった。そういう働き方をしていると、目標とか評価とか無駄な労力よなと思ってしまう。いまマイクロ法人として独立して、目標と評価という無駄な労力を費やさなくて済むので、そういったストレスからは解放された生活を送れるようになった。&lt;/p>
&lt;p>閑話休題。トレーナーさんにはこう回答した。目標とかとくにないです。日々、健康で過ごすぐらいのことしか考えてませんと意識の低い回答をした。一方で私はやりたいと思ったことはすでにやっているところはある。サラリーマン時代の刷り込みからか、目標とは計画を指していて、すでにやっていることは目標に含めないように考えてしまうところがある。進行中であってもやり終えるまでを目標と設定して喧伝してもよいとは思うけど、私がすでにやっていることを目標とみなさないのは、上述したように、やっている過程や状況の変化にあわせて変えていくため、予め事前に立てておいた目標とは異なる結果になることが経験的に多かったことに起因する。もうこの歳になると目標を立てるというよりも、目標となることをやっているかどうかの方が重要になってきたという思いもある。&lt;/p>
&lt;p>いずれにしても目標や評価のような行動を私は2度とやることはないだろうという話し。&lt;/p>
&lt;h2 id="実践知本の読み直し">実践知本の読み直し&lt;/h2>
&lt;p>課題管理における背景の理論考察を始めたとき、早い段階で読んだ本に &lt;a href="https://b.kobe-u.ac.jp/books/b007/">実践知 — エキスパートの知性&lt;/a> がある。8月頃に読んだ。当時は知識にもいろんな分野や研究成果があるとわかった程度だった。その後、認知心理学やスクラム開発の背景を学ぶうちに実践知とも関連があるように思えてきた。背景知識が増えた状態で、いまこの本を読み返せばまた違った理解があるのではないかと考えてまた読み直すことにした。&lt;/p></content></item><item><title>仕事納め</title><link>/diary/posts/2021/1227/</link><pubDate>Mon, 27 Dec 2021 08:04:38 +0900</pubDate><guid>/diary/posts/2021/1227/</guid><description>0時に寝て6時に起きた。今日は仕事納めだー。
ミステリと言う勿れ 10巻 読んだのは昨日の夜なんだけど、ミステリと言う勿れの10巻 の電子版があることにたまたま気付いて購入した。そして、読みふけった。第9巻から発生した事件の続きで第10巻で進展して犯人が判明して解決した。もうね。ちょっとこの巻はすごかった。この漫画に出てくる犯人は普通の人間の常識や感覚からちょっとズレた変な人が犯人みたいなところはあった。今回はさらにそれが斜め上にズレて何一つ犯人が語る理屈や動機を理解できなくて、犯人が分かってから解決編をやっている途中でこの漫画の著者はまともな精神状態でこの漫画を描いているの？と著者の健康を心配をしてしまうぐらい、犯人の人間像に私は理解ができなかった。もちろん娯楽作品としては十分におもしろいのだけど、私にとっては理屈がわからんというのは苦痛でもあるのでわかるために読み直そうと思ってしまうので何回か読み直すことになると思う。
仕事納め 対外的には今日が仕事納め。内部的には28-29日は自社のお仕事をして30日に実家に帰るかどうか、まだ決めてない。天気次第でもいいかな。去年はうまくいかなくて31日までお仕事していたことを思うと今年は27日で締められて余裕があるように感じる。ちょうど帰省したおかださんがうちのオフィスまで訪ねて来てくれた。去年はコロナ禍で帰省されなかったので2年ぶり。オフィスの会議室を使ったことなくて、お試しも含めて軽く課題管理のビジネスアイディアについて共有した。とくに反応はなかったけれど、ちゃんと準備もしていないので気軽に雑談した。その後、近くの焼き鳥屋さんとワインバーで飲んでた。ある意味、納会の代わりにもなった。近況、昔話、技術動向、最近読んだ本などの話しをした。1人だったらほぼ100%納会はやらないので最終日に飲み会があって納会のような気分にはなった。今後は仕事納めの日に飲み会を入れるようにしていこうと思った。</description><content>&lt;p>0時に寝て6時に起きた。今日は仕事納めだー。&lt;/p>
&lt;h2 id="ミステリと言う勿れ-10巻">ミステリと言う勿れ 10巻&lt;/h2>
&lt;p>読んだのは昨日の夜なんだけど、&lt;a href="https://www.shogakukan.co.jp/books/09871497">ミステリと言う勿れの10巻&lt;/a> の電子版があることにたまたま気付いて購入した。そして、読みふけった。第9巻から発生した事件の続きで第10巻で進展して犯人が判明して解決した。もうね。ちょっとこの巻はすごかった。この漫画に出てくる犯人は普通の人間の常識や感覚からちょっとズレた変な人が犯人みたいなところはあった。今回はさらにそれが斜め上にズレて何一つ犯人が語る理屈や動機を理解できなくて、犯人が分かってから解決編をやっている途中でこの漫画の著者はまともな精神状態でこの漫画を描いているの？と著者の健康を心配をしてしまうぐらい、犯人の人間像に私は理解ができなかった。もちろん娯楽作品としては十分におもしろいのだけど、私にとっては理屈がわからんというのは苦痛でもあるのでわかるために読み直そうと思ってしまうので何回か読み直すことになると思う。&lt;/p>
&lt;h2 id="仕事納め">仕事納め&lt;/h2>
&lt;p>対外的には今日が仕事納め。内部的には28-29日は自社のお仕事をして30日に実家に帰るかどうか、まだ決めてない。天気次第でもいいかな。去年はうまくいかなくて31日までお仕事していたことを思うと今年は27日で締められて余裕があるように感じる。ちょうど帰省したおかださんがうちのオフィスまで訪ねて来てくれた。去年はコロナ禍で帰省されなかったので2年ぶり。オフィスの会議室を使ったことなくて、お試しも含めて軽く課題管理のビジネスアイディアについて共有した。とくに反応はなかったけれど、ちゃんと準備もしていないので気軽に雑談した。その後、近くの焼き鳥屋さんとワインバーで飲んでた。ある意味、納会の代わりにもなった。近況、昔話、技術動向、最近読んだ本などの話しをした。1人だったらほぼ100%納会はやらないので最終日に飲み会があって納会のような気分にはなった。今後は仕事納めの日に飲み会を入れるようにしていこうと思った。&lt;/p></content></item><item><title>メンタルモデルの参考</title><link>/diary/posts/2021/1226/</link><pubDate>Sun, 26 Dec 2021 13:49:44 +0900</pubDate><guid>/diary/posts/2021/1226/</guid><description>0時過ぎに寝て6時に起きてだらだらしてて8時に起き上がった。
会議室予約 明日おかださんと話すのでシェアオフィスの 会議室予約サイト で会議室を予約した。この予約サイト、リリースされて1年近く経つけど、本当に使いにくい。技術の無駄遣いって言葉がしっくり来る。会議室はオフィスを借りている人には5時間/月まで無料で使える。元町オフィスの会議室を予約するのは初めてかな。どんな使い勝手かを試してみるよい機会でもある。明日に備えて設備やモニターチェックをしていた。
ソフトウェアエンジニアと技術力 そねさんの1ヶ月以上前に公開されたスライドを、あとで読みこじらせて、今日読み直した。課題管理のためのメンタルモデルを確立しないといけないと考えるようになってきた。そのためのヒントになるかな？とちゃんとメモを取りながら精読しようと思って1ヶ月放置していた。他のことに注力していると別のことができなくなる。ソフトウェアエンジニアという定義をあまりみたことがなくて斬新だったり、書いてある内容そのものは共感できるものではあった。一方で精神論や思想的な話しが多くて、もう少し理論的な裏付けや技術的な背景があった方が私の好みだったなと1ヶ月も置いておいたから期待値が上がってしまっていた。
ソフトウェアエンジニアとは、科学 (ソフトウェア) を活用して問題を解決する力をもつ人であり、ソフトウェアを使いこなして最小の労力で問題を解決することを技術力が高いと言う。</description><content>&lt;p>0時過ぎに寝て6時に起きてだらだらしてて8時に起き上がった。&lt;/p>
&lt;h2 id="会議室予約">会議室予約&lt;/h2>
&lt;p>明日おかださんと話すのでシェアオフィスの &lt;a href="https://booking.wooc.co.jp/wooc/">会議室予約サイト&lt;/a> で会議室を予約した。この予約サイト、リリースされて1年近く経つけど、本当に使いにくい。技術の無駄遣いって言葉がしっくり来る。会議室はオフィスを借りている人には5時間/月まで無料で使える。元町オフィスの会議室を予約するのは初めてかな。どんな使い勝手かを試してみるよい機会でもある。明日に備えて設備やモニターチェックをしていた。&lt;/p>
&lt;h2 id="ソフトウェアエンジニアと技術力">ソフトウェアエンジニアと技術力&lt;/h2>
&lt;p>そねさんの1ヶ月以上前に公開されたスライドを、あとで読みこじらせて、今日読み直した。課題管理のためのメンタルモデルを確立しないといけないと考えるようになってきた。そのためのヒントになるかな？とちゃんとメモを取りながら精読しようと思って1ヶ月放置していた。他のことに注力していると別のことができなくなる。ソフトウェアエンジニアという定義をあまりみたことがなくて斬新だったり、書いてある内容そのものは共感できるものではあった。一方で精神論や思想的な話しが多くて、もう少し理論的な裏付けや技術的な背景があった方が私の好みだったなと1ヶ月も置いておいたから期待値が上がってしまっていた。&lt;/p>
&lt;blockquote>
&lt;p>ソフトウェアエンジニアとは、科学 (ソフトウェア) を活用して問題を解決する力をもつ人であり、ソフトウェアを使いこなして最小の労力で問題を解決することを技術力が高いと言う。&lt;/p>
&lt;/blockquote>
&lt;iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/fb6aa6332db84aceafc121588984b95f" title="ソフトウェアエンジニアと技術力 / developer-lifework" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;" data-ratio="1.78343949044586">&lt;/iframe></content></item><item><title>ワーケーションの情報共有</title><link>/diary/posts/2021/1225/</link><pubDate>Sat, 25 Dec 2021 10:49:00 +0900</pubDate><guid>/diary/posts/2021/1225/</guid><description>23時に寝て2時前に起きてまた寝て6時に起きてまた寝て8時に起きた。
ストレッチ 今週もお仕事がいっぱいいっぱいで全然ストレッチできなかった。今日の開脚幅は開始前167cmで、ストレッチ後169.5cmと前回よりも数値が悪くなった。さぼっていたから仕方ない。一方で右股関節の不可動領域が週ごとによくなっていて、可動していなかった領域が稼働することによって、内転筋に張りが出るようになっているとのこと。システムで例えると、ある地点のパフォーマンスが改善することで別の地点にニーポイントが移動するような話しだと思う。日常生活でもなんか違和感があると思ってはいたので改善していきたい。
ワーケーション準備 これまで準備してきた 内容を旅のしおりにまとめている。その内容を参加者4人で共有するための打ち合わせをした。これまで私が更新してきた旅のしおりの内容を一通り確認して、みんなで付近の観光案内などをみたりしていた。城崎温泉は720年開湯というくだりを話すと、歴史好きの人たちは反応して平安京やら平城京やらの年号で盛り上がった。私はもともと学校の書架に置いてある「日本の歴史」というタイトルの漫画を3回ぐらい読み込んでいた児童だったので観光地は歴史から入る癖がある。そんな人じゃなくても、人間、歳をとると歴史の重みみたいなのを感じるようになって、歴史に敬意を払うようになるんじゃないかと勝手に思っている。1泊目の宿は予約済みだけど、2泊目どうする？という話しをしていたら、たまたま宿泊予約サイトで Book store iChi ゲストハウス をみつけた。1部屋4人で宿泊できるし、料金も安いし、ゲストハウスとか泊まったことないという参加者もいるし、おもしろそうみたいなノリになって、ノリのまま予約した。ふるさと応援！ひょうごを旅しようキャンペーン も適用できるという話しなので兵庫在住なら2000円/人の割り引きを受けられる。なにかしら情報共有で他人と話すと新しい行動や調査のヒントがあったりしてモノゴトが進むきっかけになると実感した打ち合わせだった。
たまたま話していて「794 鳴くよウグイス平安京」は共通認識だけど、私は「710 なんと都を移す平城京」で覚えてたんだけど、平城京の語呂合わせはバリエーションがあるみたい。しかもヤフー知恵袋みたら「南都」という名詞バージョンもあるとのこと。へー。https://t.co/IvBLJ30inP
&amp;mdash; Tetsuya Morimoto (@t2y) December 25, 2021</description><content>&lt;p>23時に寝て2時前に起きてまた寝て6時に起きてまた寝て8時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週もお仕事がいっぱいいっぱいで全然ストレッチできなかった。今日の開脚幅は開始前167cmで、ストレッチ後169.5cmと前回よりも数値が悪くなった。さぼっていたから仕方ない。一方で右股関節の不可動領域が週ごとによくなっていて、可動していなかった領域が稼働することによって、内転筋に張りが出るようになっているとのこと。システムで例えると、ある地点のパフォーマンスが改善することで別の地点にニーポイントが移動するような話しだと思う。日常生活でもなんか違和感があると思ってはいたので改善していきたい。&lt;/p>
&lt;h2 id="ワーケーション準備">ワーケーション準備&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1217/#ワーケーション準備">これまで準備してきた&lt;/a> 内容を旅のしおりにまとめている。その内容を参加者4人で共有するための打ち合わせをした。これまで私が更新してきた旅のしおりの内容を一通り確認して、みんなで付近の観光案内などをみたりしていた。城崎温泉は720年開湯というくだりを話すと、歴史好きの人たちは反応して平安京やら平城京やらの年号で盛り上がった。私はもともと学校の書架に置いてある「日本の歴史」というタイトルの漫画を3回ぐらい読み込んでいた児童だったので観光地は歴史から入る癖がある。そんな人じゃなくても、人間、歳をとると歴史の重みみたいなのを感じるようになって、歴史に敬意を払うようになるんじゃないかと勝手に思っている。1泊目の宿は予約済みだけど、2泊目どうする？という話しをしていたら、たまたま宿泊予約サイトで &lt;a href="https://www.bookstoreichi.com/guesthouse">Book store iChi ゲストハウス&lt;/a> をみつけた。1部屋4人で宿泊できるし、料金も安いし、ゲストハウスとか泊まったことないという参加者もいるし、おもしろそうみたいなノリになって、ノリのまま予約した。&lt;a href="https://www.hyogo-tourism.jp/furusato-ouen/">ふるさと応援！ひょうごを旅しようキャンペーン&lt;/a> も適用できるという話しなので兵庫在住なら2000円/人の割り引きを受けられる。なにかしら情報共有で他人と話すと新しい行動や調査のヒントがあったりしてモノゴトが進むきっかけになると実感した打ち合わせだった。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">たまたま話していて「794 鳴くよウグイス平安京」は共通認識だけど、私は「710 なんと都を移す平城京」で覚えてたんだけど、平城京の語呂合わせはバリエーションがあるみたい。しかもヤフー知恵袋みたら「南都」という名詞バージョンもあるとのこと。へー。&lt;a href="https://t.co/IvBLJ30inP">https://t.co/IvBLJ30inP&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1474655368387371008?ref_src=twsrc%5Etfw">December 25, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item><item><title>冒険をするチームにはコックが必要</title><link>/diary/posts/2021/1224/</link><pubDate>Fri, 24 Dec 2021 08:58:51 +0900</pubDate><guid>/diary/posts/2021/1224/</guid><description>0時に寝て4時に起きて、なんとなくドラクエタクトしてたら6時になってそのまま朝活に出てた。sns のタイムラインを眺めていると今日で仕事納めにしている人をちらほらみかけた。私は外向けには月曜日が仕事納めで、内向けには水曜日までは働くかな。30日は実家に帰るか、ゆっくり休むか、まだ決めてない。
朝活: バッタを倒しにアフリカへ 先日たまたまみかけた記事から購入した ことを書いた。積ん読状態だったけど、技術書ばかりも疲れるので気分転換に読み進めることにした。
第1章サハラに青春を賭けるを読んだ。著者はおもしろい人だというのは文章から伝わってくるので何を書いてても驚きはしないが、それでもアフリカ(モーリタニア)の生活や状況などは全く知らないことばかりなので何を読んでも斬新には感じる。モーリタニア・イスラム共和国 という国すら私は知らなかった。
第1章は渡航してフィールワークに出掛けた内容が書いてあった。砂漠へ行くチームにコックが必要というのは、ドラクエ脳の自分には出てこない発想で現実は旅をしながらおいしいものも食べたいという欲求は強いのだなぁという学び？があった。
slack のマルチチャンネルゲスト これまでお手伝い先では slack のシングルチャンネルゲストで参加していた。必然的に1つのチャンネルにすべてのプロジェクトメンバー20人がいる。技術的な話題を気軽に投稿しにくいし、システム通知などもかなり制限されていた。
人間が会話するチャンネルとシステムが通知するチャンネルは分けた方がよい
と、私はプラクティスとして常々言っている。きっと誰もが言っている。システム通知が認知負荷となるという声は業務側のメンバーからも届いていた。これは外部メンバーをマルチチャンネルゲストにすることのコストだけの問題なので、その価値をどう測るかという視点から、中の人がその予算を確保して外部メンバーがマルチチャンネルゲスト化された。その判断を支持する意図でも、slack のチャンネルが複数扱えることでどういった情報共有やシステム間連携の価値があるかというのを、私の経験からも提示していきたいと考えている。情報を監視するという概念、ならびに情報の一元管理にも関わってくるので、課題管理と並ぶ情報共有という文脈で私の強みが活きる分野でもある。いろいろやっていきたい。</description><content>&lt;p>0時に寝て4時に起きて、なんとなくドラクエタクトしてたら6時になってそのまま朝活に出てた。sns のタイムラインを眺めていると今日で仕事納めにしている人をちらほらみかけた。私は外向けには月曜日が仕事納めで、内向けには水曜日までは働くかな。30日は実家に帰るか、ゆっくり休むか、まだ決めてない。&lt;/p>
&lt;h2 id="朝活-バッタを倒しにアフリカへ">朝活: バッタを倒しにアフリカへ&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1030/#サバクトビバッタの研究">先日たまたまみかけた記事から購入した&lt;/a> ことを書いた。積ん読状態だったけど、技術書ばかりも疲れるので気分転換に読み進めることにした。&lt;/p>
&lt;p>第1章サハラに青春を賭けるを読んだ。著者はおもしろい人だというのは文章から伝わってくるので何を書いてても驚きはしないが、それでもアフリカ(モーリタニア)の生活や状況などは全く知らないことばかりなので何を読んでも斬新には感じる。&lt;a href="https://www.mofa.go.jp/mofaj/area/mauritania/index.html">モーリタニア・イスラム共和国&lt;/a> という国すら私は知らなかった。&lt;/p>
&lt;p>第1章は渡航してフィールワークに出掛けた内容が書いてあった。砂漠へ行くチームにコックが必要というのは、ドラクエ脳の自分には出てこない発想で現実は旅をしながらおいしいものも食べたいという欲求は強いのだなぁという学び？があった。&lt;/p>
&lt;h2 id="slack-のマルチチャンネルゲスト">slack のマルチチャンネルゲスト&lt;/h2>
&lt;p>これまでお手伝い先では slack のシングルチャンネルゲストで参加していた。必然的に1つのチャンネルにすべてのプロジェクトメンバー20人がいる。技術的な話題を気軽に投稿しにくいし、システム通知などもかなり制限されていた。&lt;/p>
&lt;blockquote>
&lt;p>人間が会話するチャンネルとシステムが通知するチャンネルは分けた方がよい&lt;/p>
&lt;/blockquote>
&lt;p>と、私はプラクティスとして常々言っている。きっと誰もが言っている。システム通知が認知負荷となるという声は業務側のメンバーからも届いていた。これは外部メンバーをマルチチャンネルゲストにすることのコストだけの問題なので、その価値をどう測るかという視点から、中の人がその予算を確保して外部メンバーがマルチチャンネルゲスト化された。その判断を支持する意図でも、slack のチャンネルが複数扱えることでどういった情報共有やシステム間連携の価値があるかというのを、私の経験からも提示していきたいと考えている。情報を監視するという概念、ならびに情報の一元管理にも関わってくるので、課題管理と並ぶ情報共有という文脈で私の強みが活きる分野でもある。いろいろやっていきたい。&lt;/p></content></item><item><title>maven のバージョンチェック処理の振る舞い</title><link>/diary/posts/2021/1223/</link><pubDate>Thu, 23 Dec 2021 08:35:00 +0900</pubDate><guid>/diary/posts/2021/1223/</guid><description>23時に寝て1時に起きてまた寝て6時半に起きた。変なライフサイクルになってきた。
maven のアップデートポリシー maven が依存解決するとき、例えばバージョンの範囲を指定して最新バージョンを取得するといった設定ができる。実行していると、新しいバージョンをチェックしにいくときとそうじゃないときがあって、どういう仕組みで動いているのかよくわからなかったのでデバッグした。言うても DEBUG ログを出力させて、ログの内容をソースで grep しながら関連するところを読んだだけ。
DefaultUpdateCheckManager.isUpdateRequired の中でポリシーが最終チェック日付を確認していいる。ここから辿っていくと ArtifactRepositoryPolicy という仕組みがある。
return ( lastCheckDate == null ) || policy.checkOutOfDate( lastCheckDate ); ドキュメントでそれっぽい内容を調べると updatePolicy を設定できるようになっている。デフォルトは daily なので日次でチェックしにいくような振る舞いをする。バージョンチェックするときとしないときの何が違うのか、よくわかっていなかった振る舞いを理解できた。これはビルドキャッシュの有無に関係ないのでキャッシュがあるからバージョンチェック処理をスキップできるわけではない。もちろん、更新をチェックさせたくないのであれば never に設定してもいいのかもしれない。
updatePolicy
The frequency for downloading updates - can be &amp;ldquo;always&amp;rdquo;, &amp;ldquo;daily&amp;rdquo; (default), &amp;ldquo;interval:XXX&amp;rdquo; (in minutes) or &amp;ldquo;never&amp;rdquo; (only if it doesn&amp;rsquo;t exist locally).
https://maven.apache.org/ref/3.6.3/maven-settings/settings.html</description><content>&lt;p>23時に寝て1時に起きてまた寝て6時半に起きた。変なライフサイクルになってきた。&lt;/p>
&lt;h2 id="maven-のアップデートポリシー">maven のアップデートポリシー&lt;/h2>
&lt;p>maven が依存解決するとき、例えばバージョンの範囲を指定して最新バージョンを取得するといった設定ができる。実行していると、新しいバージョンをチェックしにいくときとそうじゃないときがあって、どういう仕組みで動いているのかよくわからなかったのでデバッグした。言うても DEBUG ログを出力させて、ログの内容をソースで grep しながら関連するところを読んだだけ。&lt;/p>
&lt;p>&lt;a href="https://github.com/apache/maven/blob/maven-3.6.3/maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java#L110">DefaultUpdateCheckManager.isUpdateRequired&lt;/a> の中でポリシーが最終チェック日付を確認していいる。ここから辿っていくと &lt;a href="https://github.com/apache/maven/blob/maven-3.6.3/maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java#L115">ArtifactRepositoryPolicy&lt;/a> という仕組みがある。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">(&lt;/span> lastCheckDate &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">||&lt;/span> policy&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">checkOutOfDate&lt;/span>&lt;span style="color:#f92672">(&lt;/span> lastCheckDate &lt;span style="color:#f92672">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ドキュメントでそれっぽい内容を調べると &lt;code>updatePolicy&lt;/code> を設定できるようになっている。デフォルトは &lt;code>daily&lt;/code> なので日次でチェックしにいくような振る舞いをする。バージョンチェックするときとしないときの何が違うのか、よくわかっていなかった振る舞いを理解できた。これはビルドキャッシュの有無に関係ないのでキャッシュがあるからバージョンチェック処理をスキップできるわけではない。もちろん、更新をチェックさせたくないのであれば &lt;code>never&lt;/code> に設定してもいいのかもしれない。&lt;/p>
&lt;blockquote>
&lt;p>updatePolicy&lt;/p>
&lt;p>The frequency for downloading updates - can be &amp;ldquo;always&amp;rdquo;, &amp;ldquo;daily&amp;rdquo; (default), &amp;ldquo;interval:XXX&amp;rdquo; (in minutes) or &amp;ldquo;never&amp;rdquo; (only if it doesn&amp;rsquo;t exist locally).&lt;/p>
&lt;p>&lt;a href="https://maven.apache.org/ref/3.6.3/maven-settings/settings.html">https://maven.apache.org/ref/3.6.3/maven-settings/settings.html&lt;/a>&lt;/p>
&lt;/blockquote></content></item><item><title>課題管理システムの一本化</title><link>/diary/posts/2021/1222/</link><pubDate>Wed, 22 Dec 2021 08:21:13 +0900</pubDate><guid>/diary/posts/2021/1222/</guid><description>0時に寝て4時過ぎに起きて2度寝して6時前に起きた。
朝活: バッタを倒しにアフリカへ 【三宮.dev オンライン】今年最後のリモート朝活もくもく会 に参加した。スクラム本を読み終えたので気分転換に バッタを倒しにアフリカへ を読むことにした。主に雑談してたら序文しか読めなかった。
課題管理システムを一本化する お仕事でスクラム開発を実践している。プロダクトバックログを backlog で管理し、スプリントバックログを GitHub Issues で管理している。課題を複数のプラットフォームで管理することは情報の一元管理という側面からよくないといったことをお手伝いを始めたときから機をみて指摘していた。そういう状態が2ヶ月ほど続いて、GitHub Issues は機能的に厳しいという共通認識が開発者にはあるため、backlog へ一本化されることに決定した。スクラムと課題管理との関係を追究したい私にとっては朗報で、今後は PO も含めて課題管理システムの用途をメンバーにアドバイスしながら課題管理の高みを目指していきたい。但し、backlog は標準で github 連携機能を提供していないため、チケット駆動開発をするには自前で連携機能を作らないといけないらしい。</description><content>&lt;p>0時に寝て4時過ぎに起きて2度寝して6時前に起きた。&lt;/p>
&lt;h2 id="朝活-バッタを倒しにアフリカへ">朝活: バッタを倒しにアフリカへ&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/234405/">【三宮.dev オンライン】今年最後のリモート朝活もくもく会&lt;/a> に参加した。スクラム本を読み終えたので気分転換に &lt;a href="https://www.kobunsha.com/shelf/book/isbn/9784334039899">バッタを倒しにアフリカへ&lt;/a> を読むことにした。主に雑談してたら序文しか読めなかった。&lt;/p>
&lt;h2 id="課題管理システムを一本化する">課題管理システムを一本化する&lt;/h2>
&lt;p>お仕事でスクラム開発を実践している。プロダクトバックログを &lt;a href="https://backlog.com/ja/">backlog&lt;/a> で管理し、スプリントバックログを &lt;a href="https://docs.github.com/ja/issues">GitHub Issues&lt;/a> で管理している。課題を複数のプラットフォームで管理することは情報の一元管理という側面からよくないといったことをお手伝いを始めたときから機をみて指摘していた。そういう状態が2ヶ月ほど続いて、GitHub Issues は機能的に厳しいという共通認識が開発者にはあるため、backlog へ一本化されることに決定した。スクラムと課題管理との関係を追究したい私にとっては朗報で、今後は PO も含めて課題管理システムの用途をメンバーにアドバイスしながら課題管理の高みを目指していきたい。但し、backlog は標準で github 連携機能を提供していないため、チケット駆動開発をするには自前で連携機能を作らないといけないらしい。&lt;/p></content></item><item><title>誕生石が増えた</title><link>/diary/posts/2021/1221/</link><pubDate>Tue, 21 Dec 2021 07:58:55 +0900</pubDate><guid>/diary/posts/2021/1221/</guid><description>0時に寝て6時に半に起きた。今日は普通に眠れた。お仕事で本番リリース作業のトラブルシューティングのお手伝いをしていてバタバタしてた。
誕生石を63年ぶりに改訂？ 先日コーポレートストーンを ターコイズ に決めたとか、訳のわからないことを書いた。たまたまはてブで 日本の誕生石、63年ぶりに改訂　新たに宝石10石追加、全29石に というニュースをみかけた。誕生石のことをよく知らなくて勝手に月に1つの石があるんだと思い込んでいたら全然そんなことはなくて、今回の追加で多い月は4つの石が設定されたらしい。
全国宝石卸商協同組合（東京都千代田区）は12月20日、63年ぶりに日本の誕生石を見直し、新しい宝石10石を追加したことを発表しました。今回の追加により、日本の誕生石は全29石になりました。
(中略)
日本の誕生石は1958年、アメリカの宝石商組合（現在のジュエラーズ・オブ・アメリカ）が定めたものをベースに全国宝石卸商協同組合が初めて制定しました。
記事によると、業界団体が決めているだけで、最終的な目的は宝石を売りたいだけなのかな。「資本主義ってやつか」 って一言つぶやいたら満足するような記事だった。</description><content>&lt;p>0時に寝て6時に半に起きた。今日は普通に眠れた。お仕事で本番リリース作業のトラブルシューティングのお手伝いをしていてバタバタしてた。&lt;/p>
&lt;h2 id="誕生石を63年ぶりに改訂">誕生石を63年ぶりに改訂？&lt;/h2>
&lt;p>先日コーポレートストーンを &lt;a href="/diary/diary/posts/2021/1213/#ターコイズ">ターコイズ&lt;/a> に決めたとか、訳のわからないことを書いた。たまたまはてブで &lt;a href="https://maidonanews.jp/article/14368447">日本の誕生石、63年ぶりに改訂　新たに宝石10石追加、全29石に&lt;/a> というニュースをみかけた。誕生石のことをよく知らなくて勝手に月に1つの石があるんだと思い込んでいたら全然そんなことはなくて、今回の追加で多い月は4つの石が設定されたらしい。&lt;/p>
&lt;blockquote>
&lt;p>全国宝石卸商協同組合（東京都千代田区）は12月20日、63年ぶりに日本の誕生石を見直し、新しい宝石10石を追加したことを発表しました。今回の追加により、日本の誕生石は全29石になりました。&lt;/p>
&lt;p>(中略)&lt;/p>
&lt;p>日本の誕生石は1958年、アメリカの宝石商組合（現在のジュエラーズ・オブ・アメリカ）が定めたものをベースに全国宝石卸商協同組合が初めて制定しました。&lt;/p>
&lt;/blockquote>
&lt;p>記事によると、業界団体が決めているだけで、最終的な目的は宝石を売りたいだけなのかな。&lt;em>「資本主義ってやつか」&lt;/em> って一言つぶやいたら満足するような記事だった。&lt;/p></content></item><item><title>新型コロナワクチン接種証明書アプリを使ってみた</title><link>/diary/posts/2021/1220/</link><pubDate>Mon, 20 Dec 2021 20:36:47 +0900</pubDate><guid>/diary/posts/2021/1220/</guid><description>23時に寝て1時過ぎに起きて4時半に起きて6時半に起きた。寝てないわけじゃないけど、うまく眠れなくなった。
スマホのマイナンバーカードの読み取りは位置がシビア ワーケーションで ふるさと応援！ひょうごを旅しようキャンペーン を利用する条件の1つにワクチンの接種証明を提示する必要がある。ちょうどデジタル庁から 新型コロナワクチン接種証明書アプリ がリリースされた。このアプリを使えば接種の原本の書類を持っていかなくて済む。
朝からアプリをインストールしてマイナンバーカードを使って接種証明書を発行しようとしたのだけど、マイナンバーカードの読み取りができない。エラーも表示されなくてうんともすんとも動かない。パスワードがロックされていたらエラーが表示されるように思えるのでなんかおかしい状況だった。そのことをツィートしたら、とのきさんがマイナンバーカードの読み取りはシビアで位置があっていないと読み取りできないとアドバイスしてくれた。
スマホ機種によってNFCの搭載位置やカードの当て方などで読み取りが非常にシビアみたいです
NFCチップの位置をスマホとカードで正確に一致させてギリギリ読みとれた、など聞いたことがあります
&amp;mdash; tonoki(demobird) (@tonoki) December 20, 2021 午後から JPKIMobile を用いた有効性の確認方法 を確認しながら再挑戦した。ここに書いてあるようにちょっと離したり、カードの位置を少しずつずらして調整したりしてたら読み取りできた。この時点でパスワードロックではないことを確認できた。
iPhone端末にICカードをセットします。画面が変わらないようであれば、一度ICカードを離してから再度セットしてください。
JPKIMobile で読み取りできたので同じ要領で接種証明書アプリでもやってみたら今度はすんなりと読み取りできて発行できた。位置さえあえば読み取りはすぐできた。今朝はたぶん机に置いて位置を調整せず、読み取りには時間がかかるのかな？とずっと動かさず待っていたのがよくなかったみたい。とのきさんのおかげで区役所に行く無駄な時間を削減できた。感謝。</description><content>&lt;p>23時に寝て1時過ぎに起きて4時半に起きて6時半に起きた。寝てないわけじゃないけど、うまく眠れなくなった。&lt;/p>
&lt;h2 id="スマホのマイナンバーカードの読み取りは位置がシビア">スマホのマイナンバーカードの読み取りは位置がシビア&lt;/h2>
&lt;p>ワーケーションで &lt;a href="https://www.hyogo-tourism.jp/furusato-ouen/">ふるさと応援！ひょうごを旅しようキャンペーン&lt;/a> を利用する条件の1つにワクチンの接種証明を提示する必要がある。ちょうどデジタル庁から &lt;a href="https://www.digital.go.jp/policies/posts/vaccinecert">新型コロナワクチン接種証明書アプリ&lt;/a> がリリースされた。このアプリを使えば接種の原本の書類を持っていかなくて済む。&lt;/p>
&lt;p>朝からアプリをインストールしてマイナンバーカードを使って接種証明書を発行しようとしたのだけど、マイナンバーカードの読み取りができない。エラーも表示されなくてうんともすんとも動かない。パスワードがロックされていたらエラーが表示されるように思えるのでなんかおかしい状況だった。そのことをツィートしたら、とのきさんがマイナンバーカードの読み取りはシビアで位置があっていないと読み取りできないとアドバイスしてくれた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">スマホ機種によってNFCの搭載位置やカードの当て方などで読み取りが非常にシビアみたいです&lt;br>NFCチップの位置をスマホとカードで正確に一致させてギリギリ読みとれた、など聞いたことがあります&lt;/p>&amp;mdash; tonoki(demobird) (@tonoki) &lt;a href="https://twitter.com/tonoki/status/1472760754332127235?ref_src=twsrc%5Etfw">December 20, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>午後から &lt;a href="https://www.jpki.go.jp/download/howto_iphone/certificate_p02.html">JPKIMobile を用いた有効性の確認方法&lt;/a> を確認しながら再挑戦した。ここに書いてあるようにちょっと離したり、カードの位置を少しずつずらして調整したりしてたら読み取りできた。この時点でパスワードロックではないことを確認できた。&lt;/p>
&lt;blockquote>
&lt;p>iPhone端末にICカードをセットします。画面が変わらないようであれば、一度ICカードを離してから再度セットしてください。&lt;/p>
&lt;/blockquote>
&lt;p>JPKIMobile で読み取りできたので同じ要領で接種証明書アプリでもやってみたら今度はすんなりと読み取りできて発行できた。位置さえあえば読み取りはすぐできた。今朝はたぶん机に置いて位置を調整せず、読み取りには時間がかかるのかな？とずっと動かさず待っていたのがよくなかったみたい。とのきさんのおかげで区役所に行く無駄な時間を削減できた。感謝。&lt;/p></content></item><item><title>スクラム開発の所感</title><link>/diary/posts/2021/1219/</link><pubDate>Sun, 19 Dec 2021 12:26:41 +0900</pubDate><guid>/diary/posts/2021/1219/</guid><description>0時に寝て2時過ぎに起きてだらだらして7時に起きてだらだらして8時に起き上がった。休日は自然とだらだらしがち。
log4j2 の脆弱性対応 たまたま sns で新たに脆弱性が発見され 2.17.0 がリリースされたことをみかけた。Apache Log4j Security Vulnerabilities をみて、午前中に対応して pr を作成して dos 攻撃の脆弱性と書いた後に次のツィートをみかけた。私は詳細を理解できていないのでこの内容が 2.17.0 で fix されているのかどうかまでは調査できていない。いずれにしても rce 攻撃はこわいから緊急度が跳ね上がるなとみていた。
【悲報】log4jのRCE脆弱性、2.15で緩和策としてlocalhostにしかlookupできなくしたはずが、127.0.0[.]1#example[.]comのように#を挟むことにより回避可能ということが判明。これにより任意ドメインへのリクエストが可能になり再びリモート実行可能に。みなさん最新版の2.17にアップデートしましょう。 https://t.co/uQhJSnjv7m
&amp;mdash; 暇な女子高専生@駆け出しエンジニア (@miettal) December 19, 2021 アジャイル開発とスクラム 第2版 昨日の続き。素晴らしい本だったので所感をまとめた。スクラム開発の理解がより進んだ。
アジャイル開発とスクラム 第2版 顧客・技術・経営をつなぐ協調的ソフトウェア開発マネジメント</description><content>&lt;p>0時に寝て2時過ぎに起きてだらだらして7時に起きてだらだらして8時に起き上がった。休日は自然とだらだらしがち。&lt;/p>
&lt;h2 id="log4j2-の脆弱性対応">log4j2 の脆弱性対応&lt;/h2>
&lt;p>たまたま sns で新たに脆弱性が発見され 2.17.0 がリリースされたことをみかけた。&lt;a href="https://logging.apache.org/log4j/2.x/security.html">Apache Log4j Security Vulnerabilities&lt;/a> をみて、午前中に対応して pr を作成して dos 攻撃の脆弱性と書いた後に次のツィートをみかけた。私は詳細を理解できていないのでこの内容が 2.17.0 で fix されているのかどうかまでは調査できていない。いずれにしても rce 攻撃はこわいから緊急度が跳ね上がるなとみていた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">【悲報】log4jのRCE脆弱性、2.15で緩和策としてlocalhostにしかlookupできなくしたはずが、127.0.0[.]1#example[.]comのように#を挟むことにより回避可能ということが判明。これにより任意ドメインへのリクエストが可能になり再びリモート実行可能に。みなさん最新版の2.17にアップデートしましょう。 &lt;a href="https://t.co/uQhJSnjv7m">https://t.co/uQhJSnjv7m&lt;/a>&lt;/p>&amp;mdash; 暇な女子高専生@駆け出しエンジニア (@miettal) &lt;a href="https://twitter.com/miettal/status/1472372715281858563?ref_src=twsrc%5Etfw">December 19, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="アジャイル開発とスクラム-第2版">アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>昨日の続き。素晴らしい本だったので所感をまとめた。スクラム開発の理解がより進んだ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://t2y.hatenablog.jp/entry/2021/12/19/183339">アジャイル開発とスクラム 第2版 顧客・技術・経営をつなぐ協調的ソフトウェア開発マネジメント&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>スクラム本を読了</title><link>/diary/posts/2021/1218/</link><pubDate>Sat, 18 Dec 2021 17:41:18 +0900</pubDate><guid>/diary/posts/2021/1218/</guid><description>0時に寝て6時に起きてだらだらしてて8時に起き上がった。
ストレッチ 今週もお仕事に注力してた。ストレッチは2-3日/週かな。普通ぐらいの頻度。夜は寒くなって外に出掛けるのが億劫で1日ウォーキングしたかなぐらい。今日の開脚幅は開始前169cmで、ストレッチ後170cmで、久しぶりに170cm台に戻した。いい感じ。右股関節の不可動領域がよくなっているのが実感できるようになってきているので調子はよさそう。今日は全体的に右半身 (太もも後ろ、腰、大胸筋) と張りがあって疲労もやや溜まってそうに思えた。基本的に週末もなにかしら作業していて疲労が蓄積していないのは毎週のストレッチの効果も大きいと考えている。
次の bizpy 勉強会 1月の bizpy 勉強会のイベント、Python で機械学習をやってみる勉強会 を公開した。次回はわたなべさんに講師をやってもらう。このイベントページも作っていただいた。運営が2人になったのでお互いの忙しいときは分担しながらコミュニティを運営していける。本当にありがたい。わたなべさんが担当している間に私も次のネタの下調べや仕込みをする余裕がもてる。メタバースの勉強会やってもいいなとは考えているけど、私だけではコンテンツが弱くて、よそから詳しい人を招いてこないといけない。どうしたものか。
アジャイル開発とスクラム 第2版 読了した。全12章の後にもコラムと対談があって、この内容も読み応えがあっていくつも示唆を与えられるものだった。
コラム 野中理論とスクラム スペシャルトーク 野中氏と平鍋氏の対談 イノベーションに必要なのは、対話を通じて共振・共感・共鳴する実践知リーダーシップであり、それがスクラムの心だ おわりに 12章で出てきた実践知について、実践知とは何か、実践知リーダーシップとはどういうことかというのが対談の中でも繰り返し出てきてその理解が深まった。私の中では暗黙知と実践知の境界が曖昧だったが、暗黙知と形式知を行ったり来たりすること、そして身体性を伴っているというのが実践知であること。そこには「もの」や「こと」の目に見えない関係性を洞察しながら判断し、本質を考え抜く知力が必要であると述べられていた。昔は 知行合一 と言ったらしいが、90年代以降の日本は分析過多、計画過多、コンプライアンス過多になってしまったという。また時間のあるときに所感をまとめようと思う。</description><content>&lt;p>0時に寝て6時に起きてだらだらしてて8時に起き上がった。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週もお仕事に注力してた。ストレッチは2-3日/週かな。普通ぐらいの頻度。夜は寒くなって外に出掛けるのが億劫で1日ウォーキングしたかなぐらい。今日の開脚幅は開始前169cmで、ストレッチ後170cmで、久しぶりに170cm台に戻した。いい感じ。右股関節の不可動領域がよくなっているのが実感できるようになってきているので調子はよさそう。今日は全体的に右半身 (太もも後ろ、腰、大胸筋) と張りがあって疲労もやや溜まってそうに思えた。基本的に週末もなにかしら作業していて疲労が蓄積していないのは毎週のストレッチの効果も大きいと考えている。&lt;/p>
&lt;h2 id="次の-bizpy-勉強会">次の bizpy 勉強会&lt;/h2>
&lt;p>1月の bizpy 勉強会のイベント、&lt;a href="https://bizpy.connpass.com/event/234387/">Python で機械学習をやってみる勉強会&lt;/a> を公開した。次回はわたなべさんに講師をやってもらう。このイベントページも作っていただいた。運営が2人になったのでお互いの忙しいときは分担しながらコミュニティを運営していける。本当にありがたい。わたなべさんが担当している間に私も次のネタの下調べや仕込みをする余裕がもてる。メタバースの勉強会やってもいいなとは考えているけど、私だけではコンテンツが弱くて、よそから詳しい人を招いてこないといけない。どうしたものか。&lt;/p>
&lt;h2 id="アジャイル開発とスクラム-第2版">アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>読了した。全12章の後にもコラムと対談があって、この内容も読み応えがあっていくつも示唆を与えられるものだった。&lt;/p>
&lt;ul>
&lt;li>コラム 野中理論とスクラム&lt;/li>
&lt;li>スペシャルトーク 野中氏と平鍋氏の対談
&lt;ul>
&lt;li>イノベーションに必要なのは、対話を通じて共振・共感・共鳴する実践知リーダーシップであり、それがスクラムの心だ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>おわりに&lt;/li>
&lt;/ul>
&lt;p>12章で出てきた実践知について、実践知とは何か、実践知リーダーシップとはどういうことかというのが対談の中でも繰り返し出てきてその理解が深まった。私の中では暗黙知と実践知の境界が曖昧だったが、暗黙知と形式知を行ったり来たりすること、そして身体性を伴っているというのが実践知であること。そこには「もの」や「こと」の目に見えない関係性を洞察しながら判断し、本質を考え抜く知力が必要であると述べられていた。昔は &lt;a href="https://ja.wikipedia.org/wiki/%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80">知行合一&lt;/a> と言ったらしいが、90年代以降の日本は分析過多、計画過多、コンプライアンス過多になってしまったという。また時間のあるときに所感をまとめようと思う。&lt;/p></content></item><item><title>知識創造と実践知の考察</title><link>/diary/posts/2021/1217/</link><pubDate>Fri, 17 Dec 2021 09:03:56 +0900</pubDate><guid>/diary/posts/2021/1217/</guid><description>0時に寝て6時に起きた。ここ最近は晩ご飯作って食べてアイスクリーム食べてドラクエタクトやって寝るみたいな業後の過ごし方が多い。
朝活: アジャイル開発とスクラム 第2版 金朝ツメトギ 2021-12-17 AM 6 金曜朝6時開催のもくもく会 で第11章スクラムと知識創造と第12章スクラムと実践知リーダーを読んだ。
第11章では知識想像モデルとして SECI モデルが紹介されている。ふと読んでいて、私が課題管理システムでやっていたのはこの「表出化」の活動で、多くのスクラムをやっているチームは「共同化」を主にやっているように思えた。ソフトウェア開発方法論の歴史的に、チケット駆動開発 → イテレーション開発 → アジャイル開発/スクラムの時系列に発展してきた経緯から、私のようなチケット駆動開発をがっつりやってきた開発者が言う対話が重要だと言うことと、最初からスクラム開発で「共同化」しかやらず「表出化」していない開発者が言う対話が重要だと言うことは、背景事情からして根本的に指している内容が違うのではないか？という仮説を思いついた。対話が重要だと言う開発者がドキュメントや文章を書くことをなおざりにするのを見かけて違和感を感じていた。チケット駆動開発をがっつりやってきた開発者は文章を書いた上でそれだけでは解決できなかった問題を解決するために対話が必要だと言っているわけであり、文章すら書けない開発者は対話だけで開発を進められるわけではないと考えると、これまでスクラム開発に抱いていた私の違和感の正体に近づいたように思えた。
第12章では実践知という概念とそのリーダーシップが紹介されている。以前 実践知 — エキスパートの知性 という本を読んで、メタ認知も含めた認知心理学の知見を踏まえた知識創造や実践知を獲得するに至る背景や教育と課題管理との間にある関係性を考えていたことがあった。スクラムにおいても実践知という概念を扱っているのを読んで、ここにはなにかしらの関係性を見出したり体系化を行う余地があるように考えている。やや哲学的な話題も出てくるので人によって賛否がわかれるかもしれないが、私は自分の考えている中長期的な思考や教育への考え方の価値観が合致していて、これが日本的な経営スタイルの鍵だという意見には一定の同意ができる。自分自身も中長期的な展望を大事にしながら課題解決していきたいという想いもあるからだ。
ワーケーション準備 ワーケーション準備 の残タスクを少しずつやっていく。宿泊先の きのいえ に電話してチェックイン前に駐車場にレンタカーをとめさせてもらえないかを問い合わせた。当日に宿泊客がいれば13時以降、いなければそれよりも早めにとめてもよいとのこと。スタッフがいれば声をかけていなくても勝手にとめてよいと教えてもらった。先方からも ふるさと応援！ひょうごを旅しようキャンペーン が本来は12月末で終了だったのが2月28日まで延長されたため、宿泊者が兵庫県在住であればその手続きをしたいとのこと。一旦、オンラインで決済済みの予約をキャンセルして、現地決済で兵庫県の割り引きの手続きをしてくれるという。メンバーは4人中3人が兵庫県在住なので4,000円/人の割り引きで合計12,000円の割り引きになった。</description><content>&lt;p>0時に寝て6時に起きた。ここ最近は晩ご飯作って食べてアイスクリーム食べてドラクエタクトやって寝るみたいな業後の過ごし方が多い。&lt;/p>
&lt;h2 id="朝活-アジャイル開発とスクラム-第2版">朝活: アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>&lt;a href="https://t.co/0erAzQpDzk">金朝ツメトギ 2021-12-17 AM 6 金曜朝6時開催のもくもく会&lt;/a> で第11章スクラムと知識創造と第12章スクラムと実践知リーダーを読んだ。&lt;/p>
&lt;p>第11章では知識想像モデルとして SECI モデルが紹介されている。ふと読んでいて、私が課題管理システムでやっていたのはこの「表出化」の活動で、多くのスクラムをやっているチームは「共同化」を主にやっているように思えた。ソフトウェア開発方法論の歴史的に、チケット駆動開発 → イテレーション開発 → アジャイル開発/スクラムの時系列に発展してきた経緯から、私のようなチケット駆動開発をがっつりやってきた開発者が言う対話が重要だと言うことと、最初からスクラム開発で「共同化」しかやらず「表出化」していない開発者が言う対話が重要だと言うことは、背景事情からして根本的に指している内容が違うのではないか？という仮説を思いついた。対話が重要だと言う開発者がドキュメントや文章を書くことをなおざりにするのを見かけて違和感を感じていた。チケット駆動開発をがっつりやってきた開発者は文章を書いた上でそれだけでは解決できなかった問題を解決するために対話が必要だと言っているわけであり、文章すら書けない開発者は対話だけで開発を進められるわけではないと考えると、これまでスクラム開発に抱いていた私の違和感の正体に近づいたように思えた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1217_seci-model.png"/>
&lt;/figure>
&lt;p>第12章では実践知という概念とそのリーダーシップが紹介されている。以前 &lt;a href="https://b.kobe-u.ac.jp/books/b007/">実践知 — エキスパートの知性&lt;/a> という本を読んで、メタ認知も含めた認知心理学の知見を踏まえた知識創造や実践知を獲得するに至る背景や教育と課題管理との間にある関係性を考えていたことがあった。スクラムにおいても実践知という概念を扱っているのを読んで、ここにはなにかしらの関係性を見出したり体系化を行う余地があるように考えている。やや哲学的な話題も出てくるので人によって賛否がわかれるかもしれないが、私は自分の考えている中長期的な思考や教育への考え方の価値観が合致していて、これが日本的な経営スタイルの鍵だという意見には一定の同意ができる。自分自身も中長期的な展望を大事にしながら課題解決していきたいという想いもあるからだ。&lt;/p>
&lt;h2 id="ワーケーション準備">ワーケーション準備&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1212/#ワーケーション予約">ワーケーション準備&lt;/a> の残タスクを少しずつやっていく。宿泊先の &lt;a href="https://kinosaki-kinoie.com/">きのいえ&lt;/a> に電話してチェックイン前に駐車場にレンタカーをとめさせてもらえないかを問い合わせた。当日に宿泊客がいれば13時以降、いなければそれよりも早めにとめてもよいとのこと。スタッフがいれば声をかけていなくても勝手にとめてよいと教えてもらった。先方からも &lt;a href="https://www.hyogo-tourism.jp/furusato-ouen/">ふるさと応援！ひょうごを旅しようキャンペーン&lt;/a> が本来は12月末で終了だったのが2月28日まで延長されたため、宿泊者が兵庫県在住であればその手続きをしたいとのこと。一旦、オンラインで決済済みの予約をキャンセルして、現地決済で兵庫県の割り引きの手続きをしてくれるという。メンバーは4人中3人が兵庫県在住なので4,000円/人の割り引きで合計12,000円の割り引きになった。&lt;/p></content></item><item><title>traceparent の生成</title><link>/diary/posts/2021/1216/</link><pubDate>Thu, 16 Dec 2021 08:22:54 +0900</pubDate><guid>/diary/posts/2021/1216/</guid><description>1時半に寝て7時半に起きた。ちょっと疲れてて寝坊した。
W3C Trace Context の traceparent ヘッダーの生成 前にお仕事で dapr の分散トレーシングを検証している ことについて書いた。
dapr の分散トレーシングは W3C Trace Context に準拠していて、dapr 経由のリクエストは自動的にこの情報が付与されるが、そうじゃないリクエストもトレーシングできるようにするためには http ヘッダーの traceparent をセットしないといけない。試しにサーバー側に traceparent を生成するのはどうやるのかを調べてみた。Implementations of Trace Context にある java ライブラリを調べていて、Jaeger クライアントは OpenTelemetry に移行したと書いてあって、OpenTracing と OpenCensus は OpenTelemetry に統合されたと書いてあって、どうやら OpenTelemetry を使うのがよさそうだとわかった。
やりたいことは traceparent を生成したいだけだが、OpenTelemetry の Manual Instrumentation を読んでも直接的なやり方は書いてなくて、open-telemetry/opentelemetry-java のテストコードなどもみながら実装した。細かいところの仕様をまだ理解できていないけど、ひとまずこれで生成できたので検証はできると思う。
public class W3cContextUtil { private static final String TRACE_PARENT_VERSION = &amp;#34;00&amp;#34;; private static final OpenTelemetrySdk openTelemetry = OpenTelemetrySdk.builder() .setTracerProvider(SdkTracerProvider.builder().build()) .setPropagators(ContextPropagators.create(W3CTraceContextPropagator.getInstance())) .buildAndRegisterGlobal(); private static final Tracer tracer = openTelemetry.</description><content>&lt;p>1時半に寝て7時半に起きた。ちょっと疲れてて寝坊した。&lt;/p>
&lt;h2 id="w3c-trace-context-の-traceparent-ヘッダーの生成">W3C Trace Context の traceparent ヘッダーの生成&lt;/h2>
&lt;p>前にお仕事で &lt;a href="/diary/diary/posts/2021/1209/#dapr-の分散トレーシングと-w3c-trace-context">dapr の分散トレーシングを検証している&lt;/a> ことについて書いた。&lt;/p>
&lt;p>dapr の分散トレーシングは &lt;a href="https://www.w3.org/TR/trace-context/">W3C Trace Context&lt;/a> に準拠していて、dapr 経由のリクエストは自動的にこの情報が付与されるが、そうじゃないリクエストもトレーシングできるようにするためには http ヘッダーの &lt;code>traceparent&lt;/code> をセットしないといけない。試しにサーバー側に &lt;code>traceparent&lt;/code> を生成するのはどうやるのかを調べてみた。&lt;a href="https://github.com/w3c/trace-context/blob/main/implementations.md">Implementations of Trace Context&lt;/a> にある java ライブラリを調べていて、Jaeger クライアントは OpenTelemetry に移行したと書いてあって、OpenTracing と OpenCensus は OpenTelemetry に統合されたと書いてあって、どうやら OpenTelemetry を使うのがよさそうだとわかった。&lt;/p>
&lt;p>やりたいことは &lt;code>traceparent&lt;/code> を生成したいだけだが、OpenTelemetry の &lt;a href="https://opentelemetry.io/docs/instrumentation/java/manual_instrumentation/">Manual Instrumentation&lt;/a> を読んでも直接的なやり方は書いてなくて、&lt;a href="https://github.com/open-telemetry/opentelemetry-java">open-telemetry/opentelemetry-java&lt;/a> のテストコードなどもみながら実装した。細かいところの仕様をまだ理解できていないけど、ひとまずこれで生成できたので検証はできると思う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">W3cContextUtil&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String TRACE_PARENT_VERSION &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;00&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> OpenTelemetrySdk openTelemetry &lt;span style="color:#f92672">=&lt;/span> OpenTelemetrySdk&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setTracerProvider&lt;/span>&lt;span style="color:#f92672">(&lt;/span>SdkTracerProvider&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">build&lt;/span>&lt;span style="color:#f92672">())&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setPropagators&lt;/span>&lt;span style="color:#f92672">(&lt;/span>ContextPropagators&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>&lt;span style="color:#f92672">(&lt;/span>W3CTraceContextPropagator&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getInstance&lt;/span>&lt;span style="color:#f92672">()))&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">buildAndRegisterGlobal&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> Tracer tracer &lt;span style="color:#f92672">=&lt;/span> openTelemetry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getTracer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;my-tracer&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;1.0.0&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> String &lt;span style="color:#a6e22e">generateTraceParent&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
Span span &lt;span style="color:#f92672">=&lt;/span> tracer&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">spanBuilder&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;parent&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">startSpan&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
SpanContext sc &lt;span style="color:#f92672">=&lt;/span> span&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getSpanContext&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> String&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">format&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;%s-%s-%s-%s&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
TRACE_PARENT_VERSION&lt;span style="color:#f92672">,&lt;/span>
sc&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getTraceId&lt;/span>&lt;span style="color:#f92672">(),&lt;/span>
sc&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getSpanId&lt;/span>&lt;span style="color:#f92672">(),&lt;/span>
sc&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getTraceFlags&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">asHex&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">finally&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
span&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">end&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="大阪python-もくもく会">大阪Python もくもく会&lt;/h2>
&lt;p>&lt;a href="https://osakapython.connpass.com/event/233460/">大阪Python もくもく会 #66&lt;/a> にオンライン参加した。コロナ禍前に大阪へ通勤していた頃はオフライン勉強会に何回か参加したことがある。主催者のやぎさんは一度 bizpy に参加してくれたこともある。11月からオフライン勉強会を再開したとのこと。久しぶりに参加してやぎさんと話していたら &lt;a href="https://neos.com/">neosvr&lt;/a> にも関心をもっているとのこと。私も少し前に oculus quest 2 を購入して触ってみた程度なのでメタバース関連で一緒に勉強会をしてもよいかもしれない。もくもく会では「アジャイル開発とスクラム 第2版」を読んでいて昨日の日記の記事がまさにその成果物。せっかくなので成果発表でこの本の紹介などをした。&lt;/p></content></item><item><title>データと業務の変遷</title><link>/diary/posts/2021/1215/</link><pubDate>Wed, 15 Dec 2021 09:21:52 +0900</pubDate><guid>/diary/posts/2021/1215/</guid><description>23時に寝てこわい夢をみて1時半に起きて、そのまま寝たのか寝てないのかよくわからない仮眠状態で5時半に起きた。
朝活: アジャイル開発とスクラム 第2版 【三宮.dev オンライン】リモート朝活もくもく会 で第10章 竹内・野中のスクラム論文再考を読んだ。1986年に竹内氏と野中氏によって書かれた The New New Product Development Game から得た概念や理論的背景をスクラム創設者のジェフ・サザーランド氏がソフトウェア開発の方法論として体系化したものがスクラムになる。そのため、原点はこの論文にある。第10章ではオリジナルに書かれている内容とスクラム開発を比較している。オリジナルの論文にある TypeC (キヤノンやホンダの新製品開発) のようなチームの特徴として次の6つをあげている。
不安定な状態を保つ
最初に綿密な計画や指示があるわけではない、チームは自由な裁量と同時に困難なゴールを目指す
プロジェクトチームは自ら組織化する
チームは不安定な状態から自己組織化し、対話の中で自律状態を作り出す
開発フェーズを重複させる
開発フェーズを重複させることで、メンバーは専門分野を超えてプロジェクト全体で責任をもつようになる
「マルチ学習」
メンバーはグループ全体として学習し、専門を超えて学習する
柔らかなマネジメント
無管理でも強い管理でもない自主性を尊重した柔らかなマネジメントが重要である
学びを組織で共有する
過去の成功を組織に伝える、もしくは意識的に捨て去る
オリジナルの論文の解説を読んでいると、古きよき日本の家族ぐるみの職場やチームの働き方のように思えてくる。時代が違うのでいまからこういった働き方に戻るのは現実的ではないだろうが、その中で重要だった概念や要素を、いまソフトウェア開発方法論としてのスクラムで実践できるのはいろいろと私の中でも思うことがある。私の考える課題管理の方法論にも竹内・野中氏のオリジナルの論文の概念は影響を受けるように思えた。章末にコラムとしてジェフ・サザーランド氏のインタビュー記事もあった。マイクロファイナンスのプロジェクトを通して、小さなグループに小さくお金を貸し出すことが、貧困から抜けすための小さなきっかけ (ブートストラップ) になるという体験からスクラム開発の動機づけになったという話しは哲学として印象に残った。なにかを成すには哲学が大事だと思う。
データがあると同期したくなる お仕事でスクラムのふりかえりをやっていて miro と backlog のデータ同期という話題が出た。業務チームはブレインストーミングで要件を洗い出したりする作業のときに miro を使っていて、miro ベースでメモを記述した後でバックログアイテムとして backlog に登録する。このとき backlog に登録した後で miro を捨てるならいいが、残したまま次の展望や要件の洗い出しにも再利用したりしていると、miro と backlog のバックログアイテムの内容が乖離したり不整合が発生したりする。チームとしてはバックログアイテムに書いてある内容が正という運用をしているため、miro のみに最新の情報がある状態が続くと課題になる。私の知る限り、miro と課題管理システムのデータ連携のツールはないと思う。
私からみたら最初からすべてバックログアイテムに文章で書けばいいやんで話が終わってしまうが、人によって使い慣れたツールは異なるため、そんな単純な話しでもない。一方で昔は miro や backlog がなかった時代もあって、そのときは物理的な付箋紙をホワイトボードに張りながら作業をしていたから、本来は同期したいという概念もなかったはずという意見も出た。たしかにツールがデジタルになって電子データとなった瞬間からデータの再利用を考えるようになるんだなと私も思えた。あと付箋紙をホワイトボードに貼り付けていた時代は何週間もその状態のまま放置するといったこともなかったのではないか？という気もした。</description><content>&lt;p>23時に寝てこわい夢をみて1時半に起きて、そのまま寝たのか寝てないのかよくわからない仮眠状態で5時半に起きた。&lt;/p>
&lt;h2 id="朝活-アジャイル開発とスクラム-第2版">朝活: アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/233922/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> で第10章 竹内・野中のスクラム論文再考を読んだ。1986年に竹内氏と野中氏によって書かれた &lt;a href="https://hbr.org/1986/01/the-new-new-product-development-game">The New New Product Development Game&lt;/a> から得た概念や理論的背景をスクラム創設者のジェフ・サザーランド氏がソフトウェア開発の方法論として体系化したものがスクラムになる。そのため、原点はこの論文にある。第10章ではオリジナルに書かれている内容とスクラム開発を比較している。オリジナルの論文にある TypeC (キヤノンやホンダの新製品開発) のようなチームの特徴として次の6つをあげている。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>不安定な状態を保つ&lt;/p>
&lt;p>最初に綿密な計画や指示があるわけではない、チームは自由な裁量と同時に困難なゴールを目指す&lt;/p>
&lt;/li>
&lt;li>
&lt;p>プロジェクトチームは自ら組織化する&lt;/p>
&lt;p>チームは不安定な状態から自己組織化し、対話の中で自律状態を作り出す&lt;/p>
&lt;/li>
&lt;li>
&lt;p>開発フェーズを重複させる&lt;/p>
&lt;p>開発フェーズを重複させることで、メンバーは専門分野を超えてプロジェクト全体で責任をもつようになる&lt;/p>
&lt;/li>
&lt;li>
&lt;p>「マルチ学習」&lt;/p>
&lt;p>メンバーはグループ全体として学習し、専門を超えて学習する&lt;/p>
&lt;/li>
&lt;li>
&lt;p>柔らかなマネジメント&lt;/p>
&lt;p>無管理でも強い管理でもない自主性を尊重した柔らかなマネジメントが重要である&lt;/p>
&lt;/li>
&lt;li>
&lt;p>学びを組織で共有する&lt;/p>
&lt;p>過去の成功を組織に伝える、もしくは意識的に捨て去る&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>オリジナルの論文の解説を読んでいると、古きよき日本の家族ぐるみの職場やチームの働き方のように思えてくる。時代が違うのでいまからこういった働き方に戻るのは現実的ではないだろうが、その中で重要だった概念や要素を、いまソフトウェア開発方法論としてのスクラムで実践できるのはいろいろと私の中でも思うことがある。私の考える課題管理の方法論にも竹内・野中氏のオリジナルの論文の概念は影響を受けるように思えた。章末にコラムとしてジェフ・サザーランド氏のインタビュー記事もあった。マイクロファイナンスのプロジェクトを通して、小さなグループに小さくお金を貸し出すことが、貧困から抜けすための小さなきっかけ (ブートストラップ) になるという体験からスクラム開発の動機づけになったという話しは哲学として印象に残った。なにかを成すには哲学が大事だと思う。&lt;/p>
&lt;h2 id="データがあると同期したくなる">データがあると同期したくなる&lt;/h2>
&lt;p>お仕事でスクラムのふりかえりをやっていて &lt;a href="https://miro.com/">miro&lt;/a> と &lt;a href="https://backlog.com/ja/">backlog&lt;/a> のデータ同期という話題が出た。業務チームはブレインストーミングで要件を洗い出したりする作業のときに miro を使っていて、miro ベースでメモを記述した後でバックログアイテムとして backlog に登録する。このとき backlog に登録した後で miro を捨てるならいいが、残したまま次の展望や要件の洗い出しにも再利用したりしていると、miro と backlog のバックログアイテムの内容が乖離したり不整合が発生したりする。チームとしてはバックログアイテムに書いてある内容が正という運用をしているため、miro のみに最新の情報がある状態が続くと課題になる。私の知る限り、miro と課題管理システムのデータ連携のツールはないと思う。&lt;/p>
&lt;p>私からみたら最初からすべてバックログアイテムに文章で書けばいいやんで話が終わってしまうが、人によって使い慣れたツールは異なるため、そんな単純な話しでもない。一方で昔は miro や backlog がなかった時代もあって、そのときは物理的な付箋紙をホワイトボードに張りながら作業をしていたから、本来は同期したいという概念もなかったはずという意見も出た。たしかにツールがデジタルになって電子データとなった瞬間からデータの再利用を考えるようになるんだなと私も思えた。あと付箋紙をホワイトボードに貼り付けていた時代は何週間もその状態のまま放置するといったこともなかったのではないか？という気もした。&lt;/p></content></item><item><title>github actions のワークフローカスタマイズ</title><link>/diary/posts/2021/1214/</link><pubDate>Tue, 14 Dec 2021 11:14:58 +0900</pubDate><guid>/diary/posts/2021/1214/</guid><description>0時に寝て6時半に起きた。
github actions の並行ビルド 1-2日でできると思ったら想定したよりややこしくて3日かかった。既存処理でかかっている時間を40-50%ほど短縮できた。1つの job で複数モジュールのビルドや docker イメージの生成、aws ecr への登録、eks の pod 更新などをしている処理を複数の job に分割する。job を分割すると、ビルド成果物を共有できなかったり、env のスコープも変わってくる。独立した job 環境で効率よく処理できるよう、ビルドキャッシュを導入したり、カスタムの composite アクションで処理を共通化したりと、あれやこれやを変更する量が増えていった。変更すること自体は問題ないけど、動作検証は github actions 上で動かさないと分からないところがあって、その検証に時間がかかる。複雑なワークフローを実装していると、github actions のかゆいところに手が届かないのにも気付けた。まだまだ circleci は企業向けに使われるのかもしれないなと思えた。
ビルドキャッシュを削除できない workflow レベルの env は参照できないフィールドがあったり job の steps で動的に更新できない workflow の再実行で途中の job から再実行できない カスタム action で run.if は使えない</description><content>&lt;p>0時に寝て6時半に起きた。&lt;/p>
&lt;h2 id="github-actions-の並行ビルド">github actions の並行ビルド&lt;/h2>
&lt;p>1-2日でできると思ったら想定したよりややこしくて3日かかった。既存処理でかかっている時間を40-50%ほど短縮できた。1つの job で複数モジュールのビルドや docker イメージの生成、aws ecr への登録、eks の pod 更新などをしている処理を複数の job に分割する。job を分割すると、ビルド成果物を共有できなかったり、env のスコープも変わってくる。独立した job 環境で効率よく処理できるよう、ビルドキャッシュを導入したり、カスタムの composite アクションで処理を共通化したりと、あれやこれやを変更する量が増えていった。変更すること自体は問題ないけど、動作検証は github actions 上で動かさないと分からないところがあって、その検証に時間がかかる。複雑なワークフローを実装していると、github actions のかゆいところに手が届かないのにも気付けた。まだまだ circleci は企業向けに使われるのかもしれないなと思えた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/actions/cache/issues/2">ビルドキャッシュを削除できない&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/actions/runner/issues/480">workflow レベルの env は参照できないフィールドがあったり&lt;/a> job の steps で動的に更新できない&lt;/li>
&lt;li>workflow の再実行で途中の job から再実行できない&lt;/li>
&lt;li>&lt;a href="https://tech.guitarrapc.com/entry/2021/08/01/194007#2-runif-%E3%81%AF%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%84-%E5%88%B6%E7%B4%84">カスタム action で run.if は使えない&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>log4j2 セキュリティ対応</title><link>/diary/posts/2021/1213/</link><pubDate>Mon, 13 Dec 2021 08:21:13 +0900</pubDate><guid>/diary/posts/2021/1213/</guid><description>23時に寝て5時に起きたが、だらだらしているうちに2度寝して6時半に起きた。
log4j2 セキュリティ対応 CVE-2021-44228 が金曜日のお昼から私のタイムラインを賑わしている。私がお手伝いしているお仕事はイントラのシステムなのでやや余裕をもって情報を眺めていた。issue のコメント をみても log4j 1.x にも影響があると書かれて、その後に実際には影響ないと書かれて、さらにその後に条件付きだけど影響はあると二転三転してた。自分で実際に試してなくて世の中の開発者の情報をみているだけ。そのため、公式の情報を信頼するといったポジションでしかない。関係者の方々には敬意を払いたい。私は spring の公式ブログで公開されている Log4J2 Vulnerability and Spring Boot を読みながら対応した。
ターコイズ ふとしたきっかけで ターコイズ の記事を読んだ。12月の誕生石らしく、それでいまの時期に紹介されることも多いのだと推測する。別の記事でターコイズは喉によいと書かれていて、以前 喉に違和感がある ことを書いた。日常生活に困るほどではないけど、もうこの歳だから体調が良くなることはなく悪くなる一方だろうという見通しも含めて験担ぎのような感覚で喉というキーワードでつながったから購入してみた。
近所の原石屋さんに行って尋ねてみたら1-2cmぐらいのサイズ1個240円ほどで売っていたので3個買って、近所のダイソーで入れものを買って、それっぽくオフィスに置いておくことにした。うちのコーポレートカラーはグリーンとブルーなんだけど、ターコイズも ターコイズグリーン と ターコイズブルー の2種類の色がある。創業も12月なので誕生石としても合致する。共通点があって相性がよさそうなのでうちのコーポレートストーン (そんな言葉ない) はターコイズでいいや。</description><content>&lt;p>23時に寝て5時に起きたが、だらだらしているうちに2度寝して6時半に起きた。&lt;/p>
&lt;h2 id="log4j2-セキュリティ対応">log4j2 セキュリティ対応&lt;/h2>
&lt;p>&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228">CVE-2021-44228&lt;/a> が金曜日のお昼から私のタイムラインを賑わしている。私がお手伝いしているお仕事はイントラのシステムなのでやや余裕をもって情報を眺めていた。&lt;a href="https://github.com/apache/logging-log4j2/pull/608#issuecomment-990494126">issue のコメント&lt;/a> をみても log4j 1.x にも影響があると書かれて、その後に実際には影響ないと書かれて、さらにその後に条件付きだけど影響はあると二転三転してた。自分で実際に試してなくて世の中の開発者の情報をみているだけ。そのため、公式の情報を信頼するといったポジションでしかない。関係者の方々には敬意を払いたい。私は spring の公式ブログで公開されている &lt;a href="https://spring.io/blog/2021/12/10/log4j2-vulnerability-and-spring-boot">Log4J2 Vulnerability and Spring Boot&lt;/a> を読みながら対応した。&lt;/p>
&lt;h2 id="ターコイズ">ターコイズ&lt;/h2>
&lt;p>ふとしたきっかけで &lt;a href="https://www.fu-stone.com/blog/turquoise/">ターコイズ&lt;/a> の記事を読んだ。12月の誕生石らしく、それでいまの時期に紹介されることも多いのだと推測する。別の記事でターコイズは喉によいと書かれていて、以前 &lt;a href="/diary/diary/posts/2021/1114/#傾斜枕">喉に違和感がある&lt;/a> ことを書いた。日常生活に困るほどではないけど、もうこの歳だから体調が良くなることはなく悪くなる一方だろうという見通しも含めて験担ぎのような感覚で喉というキーワードでつながったから購入してみた。&lt;/p>
&lt;p>近所の原石屋さんに行って尋ねてみたら1-2cmぐらいのサイズ1個240円ほどで売っていたので3個買って、近所のダイソーで入れものを買って、それっぽくオフィスに置いておくことにした。うちのコーポレートカラーはグリーンとブルーなんだけど、ターコイズも &lt;a href="https://www.colordic.org/colorscheme/4115">ターコイズグリーン&lt;/a> と &lt;a href="https://www.colordic.org/colorscheme/4129">ターコイズブルー&lt;/a> の2種類の色がある。創業も12月なので誕生石としても合致する。共通点があって相性がよさそうなのでうちのコーポレートストーン (そんな言葉ない) はターコイズでいいや。&lt;/p></content></item><item><title>ワーケーション準備</title><link>/diary/posts/2021/1212/</link><pubDate>Sun, 12 Dec 2021 11:53:29 +0900</pubDate><guid>/diary/posts/2021/1212/</guid><description>2時半に寝て7時に起きた。なんか眠れなくてだらだらしてた。
ワーケーション予約 参加予定者に最終確認をとって3人参加してくれることになった。感謝。私を含めて4人で行ってくる。レンタカーと きのいえ の予約を確定させた。1月28-30日で 城崎温泉 でワーケーションしてくる。宿泊は金曜日の夜しか予約があいてなくて4月まで土曜日の夜はすでに予約が埋まっていた。もし金土と連泊で予約するときは3ヶ月以上前に予約をとらないといけないということがわかった。宿泊人数によって料金が変わってくるため、多少の人数変更に対応できる条件で予約できるのが望ましい。今回泊まることでオーナーの人とやり取りできればそういったことも聞いてみようと思う。その後、旅のしおりを作り始めた。まだ1ヶ月あるので調べながらゆっくり準備を進めていく。移動や作業のための時間、食事、親睦会などタイムラインを作りながらやり方を検討していく。
ショコラ・シュバルツ 山梨県北杜市のふるさと納税 の返礼品として ショコラ・シュバルツ（Chocolat Schwartz） が届いた。試しに1本飲んでみた。香りがよくて黒ビールなんだけど、普通の黒ビールとは異なる風味でそれがショコラなのかどうか、私にはよくわかってないけど、あまり味わったことのない黒ビールという点からはおいしかった。毎日飲むようなビールではないと思うが、イベントや記念日など普通のビールとは異なるビールを試したいときには向きそう。お土産などにもよさそう。</description><content>&lt;p>2時半に寝て7時に起きた。なんか眠れなくてだらだらしてた。&lt;/p>
&lt;h2 id="ワーケーション予約">ワーケーション予約&lt;/h2>
&lt;p>参加予定者に最終確認をとって3人参加してくれることになった。感謝。私を含めて4人で行ってくる。レンタカーと &lt;a href="https://kinosaki-kinoie.com/">きのいえ&lt;/a> の予約を確定させた。1月28-30日で &lt;a href="https://kinosaki-spa.gr.jp/">城崎温泉&lt;/a> でワーケーションしてくる。宿泊は金曜日の夜しか予約があいてなくて4月まで土曜日の夜はすでに予約が埋まっていた。もし金土と連泊で予約するときは3ヶ月以上前に予約をとらないといけないということがわかった。宿泊人数によって料金が変わってくるため、多少の人数変更に対応できる条件で予約できるのが望ましい。今回泊まることでオーナーの人とやり取りできればそういったことも聞いてみようと思う。その後、旅のしおりを作り始めた。まだ1ヶ月あるので調べながらゆっくり準備を進めていく。移動や作業のための時間、食事、親睦会などタイムラインを作りながらやり方を検討していく。&lt;/p>
&lt;h2 id="ショコラシュバルツ">ショコラ・シュバルツ&lt;/h2>
&lt;p>&lt;a href="https://www.satofull.jp/products/detail.php?product_id=1256650">山梨県北杜市のふるさと納税&lt;/a> の返礼品として &lt;a href="https://www.yatsugatake-beer.com/?mode=grp&amp;amp;gid=1059669">ショコラ・シュバルツ（Chocolat Schwartz）&lt;/a> が届いた。試しに1本飲んでみた。香りがよくて黒ビールなんだけど、普通の黒ビールとは異なる風味でそれがショコラなのかどうか、私にはよくわかってないけど、あまり味わったことのない黒ビールという点からはおいしかった。毎日飲むようなビールではないと思うが、イベントや記念日など普通のビールとは異なるビールを試したいときには向きそう。お土産などにもよさそう。&lt;/p></content></item><item><title>ワーケーションのシミュレーション</title><link>/diary/posts/2021/1211/</link><pubDate>Sat, 11 Dec 2021 13:13:29 +0900</pubDate><guid>/diary/posts/2021/1211/</guid><description>1時に寝て7時に起きた。久しぶりに遅くまで飲んでたのでやや気分が悪い。全体としてあまり大したことしてなかったんだけど、日記のふりかえりしたり、スクラム談義したり、log4j の脆弱性のその後の状況を静観したりしてた。
ストレッチ 今週もお仕事に注力してたらストレッチは2日/週とあまりできなかった。夜も外に出掛けるのが億劫になったり、勉強会に参加してたりしてウォーキングもやってない。今日の開脚幅は開始前167cmで、ストレッチ後169.5cmだった。さぼってたわりにはまぁまぁだった。特別なことはなにもしてなかったけど、右太もも後ろの筋がやや張っていて右足はあまりよくない。一方で右股関節の不可動領域がよくなっていることが自分でストレッチしててもわかるようになってきて半年以上やってきた甲斐があったと言える。
ワーケーション計画 参加者の目処がついてきたので城崎温泉に出掛けるワーケーションの計画をシミュレーションしていた。たとえば電車とレンタカーでどのぐらい料金の差になるかというと、三ノ宮発でレンタカーを借りて移動 (2泊3日) するときの料金 (高速道路/ガソリン代含む) は 35,648 円、電車は往復11,000円/人になる。3人いればレンタカーと同じぐらいの料金で、4人いればレンタカーで移動した方が安くなる。3人だったとしても移動の勝手の良さを考慮するとレンタカーの方がよさそうに思えた。</description><content>&lt;p>1時に寝て7時に起きた。久しぶりに遅くまで飲んでたのでやや気分が悪い。全体としてあまり大したことしてなかったんだけど、日記のふりかえりしたり、スクラム談義したり、log4j の脆弱性のその後の状況を静観したりしてた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週もお仕事に注力してたらストレッチは2日/週とあまりできなかった。夜も外に出掛けるのが億劫になったり、勉強会に参加してたりしてウォーキングもやってない。今日の開脚幅は開始前167cmで、ストレッチ後169.5cmだった。さぼってたわりにはまぁまぁだった。特別なことはなにもしてなかったけど、右太もも後ろの筋がやや張っていて右足はあまりよくない。一方で右股関節の不可動領域がよくなっていることが自分でストレッチしててもわかるようになってきて半年以上やってきた甲斐があったと言える。&lt;/p>
&lt;h2 id="ワーケーション計画">ワーケーション計画&lt;/h2>
&lt;p>参加者の目処がついてきたので城崎温泉に出掛けるワーケーションの計画をシミュレーションしていた。たとえば電車とレンタカーでどのぐらい料金の差になるかというと、三ノ宮発でレンタカーを借りて移動 (2泊3日) するときの料金 (高速道路/ガソリン代含む) は 35,648 円、電車は往復11,000円/人になる。3人いればレンタカーと同じぐらいの料金で、4人いればレンタカーで移動した方が安くなる。3人だったとしても移動の勝手の良さを考慮するとレンタカーの方がよさそうに思えた。&lt;/p></content></item><item><title>ワーケーションの思いつき</title><link>/diary/posts/2021/1210/</link><pubDate>Fri, 10 Dec 2021 08:43:04 +0900</pubDate><guid>/diary/posts/2021/1210/</guid><description>0時に寝て6時に起きた。
朝活: アジャイル開発とスクラム 第2版 金朝ツメトギ 2021-12-10 AM 6 金曜朝6時開催のもくもく会 に参加した。今回はてらださんも来られていた。第9章を読んだ。KDDI さんの事例紹介で2013年から取り組みしているらしい。フラクタルスプリント を実際の業務で実践している稀な事例としておもしろかった。1週間のスプリントの中に1日のスプリントが4回あるといったフラクタル構造のスプリント。また金曜日は「仕事をしない日」としてレトロスペクティブと OST (オープンスペーステクノロジー、自由な発表と議論の時間) に割当てている。20%ルールに近いものと言えるかもしれないが、自己研鑽のための時間をスプリントの中に組み込むという、組織の理解があってこそできる取り組みを実践していてすごいなと感心した。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。スクラムの話題として だいくしーのスクラム Bar #1 や Scrum Masters Night! Online 〜第10夜〜 に参加してやり取りした内容や考察したことなどをいろいろ話してた。そのうちの話題の1つに、スクラムマスターの役割とは何だろうかがある。スクラムマスターはプロダクトをよくすることに責任をもち、メンバーが働きやすいように支えるような役割である。ここまでは共通認識として、その範囲がどこまでかは人によって意見が異なるように思えた。あくまでプロダクトやチームの範囲内で行動するスクラムマスターと、スクラムを組織全体に広めたり、人事・評価制度や経営にも参加していくスクラムマスターがある。スクラムマスターは社外の人間でもできるという考え方があるが、必然的に後者の役割も担うなら社内の人間に限定される。後者の役割は越権行為ではないか、いやいや、チームのために働いたメンバーの評価が下がってしまえば現場でよりよいプロダクト開発はできないから大事ではないかという意見も出た。便宜上、前者を (普通の) スクラムマスター、後者を「意識の高い」スクラムマスターと呼ぶ。私の考えでは、意識の高いスクラムマスターの言わんとしていることはわかるが、それをやりたいなら部長や役員などになってから職責とともに改善すべきであり、スクラムマスターという組織におけるラインではない人が経営に口出ししたりすることによる、組織の歪みはまた別の問題を引き起こすのではないかとも思えた。私も経営をやっていて経営側の視点でみるとやはりおかしい。
その後にワーケーションについて相談した。城崎温泉にある きのいえ でワーケーションをやってみようかと考えている。参加のお誘いややり方についていくつか相談しながら前向きに検討しようということになった。
忘年会 【初参加大歓迎】三宮.dev＆bizpy 合同忘年会 に参加してきた。忘年会の前に運営に入ってもらった、わたなべさんと軽く bizpy の運営について話してきた。1月はわたなべさんに機械学習の勉強会をやってもらう。私は昨年も三宮.devの忘年会に出てた。昨年は3人だったのが今年は4人になった。名物の大きなポークカツレツ。4人とも勉強会の常連みたいな人たちなのでお酒を飲みながらわいわいやって、コロナ禍になる前のコミュニティの勉強会の飲み会を思い出したりしてた。ワーケーションの話をしたら2人は興味を示してくれて、メンバーが4人集まったので開発合宿の企画をしてみることに決めた。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="朝活-アジャイル開発とスクラム-第2版">朝活: アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=MbpX1LF1fto">金朝ツメトギ 2021-12-10 AM 6 金曜朝6時開催のもくもく会&lt;/a> に参加した。今回はてらださんも来られていた。第9章を読んだ。KDDI さんの事例紹介で2013年から取り組みしているらしい。&lt;a href="/diary/diary/posts/2021/1029/#フラクタルスプリント">フラクタルスプリント&lt;/a> を実際の業務で実践している稀な事例としておもしろかった。1週間のスプリントの中に1日のスプリントが4回あるといったフラクタル構造のスプリント。また金曜日は「仕事をしない日」としてレトロスペクティブと OST (オープンスペーステクノロジー、自由な発表と議論の時間) に割当てている。20%ルールに近いものと言えるかもしれないが、自己研鑽のための時間をスプリントの中に組み込むという、組織の理解があってこそできる取り組みを実践していてすごいなと感心した。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1210-weekly-sprint.png"/>
&lt;/figure>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。スクラムの話題として &lt;a href="https://chatwork.connpass.com/event/231183/">だいくしーのスクラム Bar #1&lt;/a> や &lt;a href="https://smn.connpass.com/event/226002/">Scrum Masters Night! Online 〜第10夜〜&lt;/a> に参加してやり取りした内容や考察したことなどをいろいろ話してた。そのうちの話題の1つに、スクラムマスターの役割とは何だろうかがある。スクラムマスターはプロダクトをよくすることに責任をもち、メンバーが働きやすいように支えるような役割である。ここまでは共通認識として、その範囲がどこまでかは人によって意見が異なるように思えた。あくまでプロダクトやチームの範囲内で行動するスクラムマスターと、スクラムを組織全体に広めたり、人事・評価制度や経営にも参加していくスクラムマスターがある。スクラムマスターは社外の人間でもできるという考え方があるが、必然的に後者の役割も担うなら社内の人間に限定される。後者の役割は越権行為ではないか、いやいや、チームのために働いたメンバーの評価が下がってしまえば現場でよりよいプロダクト開発はできないから大事ではないかという意見も出た。便宜上、前者を (普通の) スクラムマスター、後者を「意識の高い」スクラムマスターと呼ぶ。私の考えでは、意識の高いスクラムマスターの言わんとしていることはわかるが、それをやりたいなら部長や役員などになってから職責とともに改善すべきであり、スクラムマスターという組織におけるラインではない人が経営に口出ししたりすることによる、組織の歪みはまた別の問題を引き起こすのではないかとも思えた。私も経営をやっていて経営側の視点でみるとやはりおかしい。&lt;/p>
&lt;p>その後にワーケーションについて相談した。城崎温泉にある &lt;a href="https://kinosaki-kinoie.com/">きのいえ&lt;/a> でワーケーションをやってみようかと考えている。参加のお誘いややり方についていくつか相談しながら前向きに検討しようということになった。&lt;/p>
&lt;h2 id="忘年会">忘年会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/231602/">【初参加大歓迎】三宮.dev＆bizpy 合同忘年会&lt;/a> に参加してきた。忘年会の前に運営に入ってもらった、わたなべさんと軽く bizpy の運営について話してきた。1月はわたなべさんに機械学習の勉強会をやってもらう。私は昨年も三宮.devの忘年会に出てた。昨年は3人だったのが今年は4人になった。名物の大きなポークカツレツ。4人とも勉強会の常連みたいな人たちなのでお酒を飲みながらわいわいやって、コロナ禍になる前のコミュニティの勉強会の飲み会を思い出したりしてた。ワーケーションの話をしたら2人は興味を示してくれて、メンバーが4人集まったので開発合宿の企画をしてみることに決めた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1210-katsu.jpg"/>
&lt;/figure></content></item><item><title>2年目の創立記念日</title><link>/diary/posts/2021/1209/</link><pubDate>Thu, 09 Dec 2021 11:24:30 +0900</pubDate><guid>/diary/posts/2021/1209/</guid><description>0時半に寝て6時半に起きた。久しぶりに22時までお仕事やって区切りもよかったからそれからお惣菜を買って23時頃から晩ご飯を食べてた。生活が乱れるなぁ。
dapr の分散トレーシングと W3C trace context お仕事で dapr の分散トレーシングを検証してた。知らない人は Dapr Advent Calendar 8日目 - DaprとZipkinで分散トレーシング のチュートリアルをお勧めする。dapr は W3C Trace Context を使って分散トレーシングを扱う。rest api では、具体的には traceparent と tracestore という http ヘッダーにトレース用途の情報を付けて転送する。すごいところは pubsub のメッセージングを経由してもそれらの情報を転送できる。pubsub 間でこれらの情報は CloudEvents という標準化されたデータのフォーマットでやり取りされる。実際には CloudEvents の中に traceparent と tracestore の値を含めて通信するけれど、外部からみたら http ヘッダーを転送できているようにみえる。しかし、http ヘッダーの任意の値を転送したい場合、それができない。tracestore はトレースのためのベンダー独自情報を付与できるとあったので、ここに任意の値をセットして送ってみたけど、http ヘッダーの付け替えは行われなかった。あとで dapr のソースを読んだら publish するときはそのまま送っているけど、subscribe するときに tracestore の仕様を満たしているか検証しながらパースしていて、任意の値を送っても仕様に沿っていなければ捨てられてしまうことがわかった。dapr の issue でも要望として登録されてた。誰もやってないならコントリビュートするチャンスかもしれない。
Propagate arbitrary/configurable http headers from publisher to subscribers #3642 創立記念日 今日が会社の創立記念日。無事に2周年を迎えた。創立記念日をお休みにするしないを考えたのだけど、いま休日も普通に働いている状況で、且つ役員は勤怠管理をする必要はないので平日になんの意味もなく休むメリットが何もないということに行き着いた。創立記念日だから休むのではなく、いつでも必要なときに休めばいい。もっと言うと、休む理由がなければ働くという逆転現象が生じていて、休む理由は私用か疲労ぐらいしかなくて、基本的に疲れてない限りはずっと働くみたいな理屈になってしまっている。社員が増えて会社に余裕が出てから創立記念日は休みみたいな制度を作ればいい。それまではたぶん来年もそれ以降も普通に働いていると思う。
1年目は訳分からず働いていたから経営的なことは全くわからなかったけど、2年目は経営上の諸問題が出てきて、経営的な意思決定や考察も増えてきて、行政手続きも熟れて、会社の実績も増えていっていて、会社を育てるという意識もかなり出てきた。率直に言えば、いまの経営状態は可もなく不可もなくといったものなので何もアピールすることはない。しかし、経営したことない人間が経営というキャリアを積み重ねていることには大きな意義があって、自身のキャリアアップには確かな手応えも感じつつある。これからもがんばっていこう。</description><content>&lt;p>0時半に寝て6時半に起きた。久しぶりに22時までお仕事やって区切りもよかったからそれからお惣菜を買って23時頃から晩ご飯を食べてた。生活が乱れるなぁ。&lt;/p>
&lt;h2 id="dapr-の分散トレーシングと-w3c-trace-context">dapr の分散トレーシングと W3C trace context&lt;/h2>
&lt;p>お仕事で dapr の分散トレーシングを検証してた。知らない人は &lt;a href="https://cero-t.hatenadiary.jp/entry/2021/12/08/071742">Dapr Advent Calendar 8日目 - DaprとZipkinで分散トレーシング&lt;/a> のチュートリアルをお勧めする。dapr は &lt;a href="https://www.w3.org/TR/trace-context/">W3C Trace Context&lt;/a> を使って分散トレーシングを扱う。rest api では、具体的には &lt;code>traceparent&lt;/code> と &lt;code>tracestore&lt;/code> という http ヘッダーにトレース用途の情報を付けて転送する。すごいところは pubsub のメッセージングを経由してもそれらの情報を転送できる。pubsub 間でこれらの情報は &lt;a href="https://github.com/cloudevents/spec">CloudEvents&lt;/a> という標準化されたデータのフォーマットでやり取りされる。実際には CloudEvents の中に &lt;code>traceparent&lt;/code> と &lt;code>tracestore&lt;/code> の値を含めて通信するけれど、外部からみたら http ヘッダーを転送できているようにみえる。しかし、http ヘッダーの任意の値を転送したい場合、それができない。&lt;code>tracestore&lt;/code> はトレースのためのベンダー独自情報を付与できるとあったので、ここに任意の値をセットして送ってみたけど、http ヘッダーの付け替えは行われなかった。あとで dapr のソースを読んだら publish するときはそのまま送っているけど、subscribe するときに &lt;code>tracestore&lt;/code> の仕様を満たしているか検証しながらパースしていて、任意の値を送っても仕様に沿っていなければ捨てられてしまうことがわかった。dapr の issue でも要望として登録されてた。誰もやってないならコントリビュートするチャンスかもしれない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/dapr/dapr/issues/3642">Propagate arbitrary/configurable http headers from publisher to subscribers #3642&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="創立記念日">創立記念日&lt;/h2>
&lt;p>今日が会社の創立記念日。無事に2周年を迎えた。創立記念日をお休みにするしないを考えたのだけど、いま休日も普通に働いている状況で、且つ役員は勤怠管理をする必要はないので平日になんの意味もなく休むメリットが何もないということに行き着いた。創立記念日だから休むのではなく、いつでも必要なときに休めばいい。もっと言うと、休む理由がなければ働くという逆転現象が生じていて、休む理由は私用か疲労ぐらいしかなくて、基本的に疲れてない限りはずっと働くみたいな理屈になってしまっている。社員が増えて会社に余裕が出てから創立記念日は休みみたいな制度を作ればいい。それまではたぶん来年もそれ以降も普通に働いていると思う。&lt;/p>
&lt;p>1年目は訳分からず働いていたから経営的なことは全くわからなかったけど、2年目は経営上の諸問題が出てきて、経営的な意思決定や考察も増えてきて、行政手続きも熟れて、会社の実績も増えていっていて、会社を育てるという意識もかなり出てきた。率直に言えば、いまの経営状態は可もなく不可もなくといったものなので何もアピールすることはない。しかし、経営したことない人間が経営というキャリアを積み重ねていることには大きな意義があって、自身のキャリアアップには確かな手応えも感じつつある。これからもがんばっていこう。&lt;/p></content></item><item><title>整理・整頓・清掃・清潔・躾</title><link>/diary/posts/2021/1208/</link><pubDate>Wed, 08 Dec 2021 07:01:44 +0900</pubDate><guid>/diary/posts/2021/1208/</guid><description>0時に寝て5時に起きた。今日はがんばって起きた！久しぶりに7時半から始業してた。
トヨタの5S スクラムイベントのふりかえりをしていて トヨタの5S の話題が出た。聞いたことがあるようないような、スクラムを勉強しているいま見返すとじわじわ聞いてくる。玄人ぶって「そうそう、こういうのが大事なんだよ」とか言いたくなりそうな雰囲気がある。普通にやっていたら当たり前のことなのに、忙しかったり複雑な問題に対応してたりすると、普通の状態を維持できなくなって混沌がもたらされる気がする。そういう状況のときに初心に戻るにはこういった原則や標榜を使って啓蒙することに意義があるんだと、いまは思うようになってきた。これ自体をよいとかわるいとか言うのは適切ではなくて、うまくいっていない状態からより戻すときに活用するといった考え方の方が正しいのかもしれない。</description><content>&lt;p>0時に寝て5時に起きた。今日はがんばって起きた！久しぶりに7時半から始業してた。&lt;/p>
&lt;h2 id="トヨタの5s">トヨタの5S&lt;/h2>
&lt;p>スクラムイベントのふりかえりをしていて &lt;a href="https://circu.co.jp/pro-sharing/mag/article/2964/">トヨタの5S&lt;/a> の話題が出た。聞いたことがあるようないような、スクラムを勉強しているいま見返すとじわじわ聞いてくる。玄人ぶって「そうそう、こういうのが大事なんだよ」とか言いたくなりそうな雰囲気がある。普通にやっていたら当たり前のことなのに、忙しかったり複雑な問題に対応してたりすると、普通の状態を維持できなくなって混沌がもたらされる気がする。そういう状況のときに初心に戻るにはこういった原則や標榜を使って啓蒙することに意義があるんだと、いまは思うようになってきた。これ自体をよいとかわるいとか言うのは適切ではなくて、うまくいっていない状態からより戻すときに活用するといった考え方の方が正しいのかもしれない。&lt;/p></content></item><item><title>クロスデフォルト</title><link>/diary/posts/2021/1207/</link><pubDate>Tue, 07 Dec 2021 08:14:52 +0900</pubDate><guid>/diary/posts/2021/1207/</guid><description>0時に寝て6時半に起きた。5時台には起きているんだけど、起き上がるところまではなかなかいけない。
恒大集団のデフォルト 11月から利払の期日の日はチェックしていて、支払うときは2-3日前には支払いを完了したというニュースが出ていたように思う。今日の支払いは前日に支払いしたというニュースが出ないからダメなんだろうなと様子をみていた。
中国恒大、猶予期間終了までにオフショア債利払いできず＝関係筋 1つの債務がデフォルトした場合、残りの債務も一括返済しないといけないことを クロスデフォルト と呼ぶらしい。契約書にクロスデフォルト条項として書いてあるらしい。記事によると、クロスデフォルトによって約190億ドル (約2.1兆円) のオフショア債の返済を一括でしないといけないらしい。リーマンショックのようなことは起きないという見通しだけど、うちみたいな零細企業は世の中の影響を諸に受けるのでお仕事に影響がでなければいいなぁといったところ。
アプリケーションログの調査 昨日の続き。ecs-logging-java で JSON Lines でログを制御するところで spring-boot の設定で tomcat のアクセスログの設定ができる。tomcat のアクセスログを log4j のレイアウトの仕組みを使って ecs-logging-java が提供する EcsLayout に変更できないかを3時間ほど調査して、どうもできないようだというのを教えてもらった。tomcat は apache のログを出力するという目的で実装されているから log4j の柔軟なログに対応していないという理屈。
じゃあ、どうやって apache のアクセスログを JSON Lines にするかというと、PatternLayout のパターンに json のフォーマットを直書きしてしまうというやり方がある。なんかプログラミングでスマートに解決したいところだけど、その仕組みがないなら仕方ないかって感じでこれでやろうと思う。
apacheのaccess_logをjson化しtd-agentで集約サーバへ収集する</description><content>&lt;p>0時に寝て6時半に起きた。5時台には起きているんだけど、起き上がるところまではなかなかいけない。&lt;/p>
&lt;h2 id="恒大集団のデフォルト">恒大集団のデフォルト&lt;/h2>
&lt;p>11月から利払の期日の日はチェックしていて、支払うときは2-3日前には支払いを完了したというニュースが出ていたように思う。今日の支払いは前日に支払いしたというニュースが出ないからダメなんだろうなと様子をみていた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://jp.reuters.com/article/evergrande-idJPKBN2IM0F0">中国恒大、猶予期間終了までにオフショア債利払いできず＝関係筋&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>1つの債務がデフォルトした場合、残りの債務も一括返済しないといけないことを &lt;a href="https://www.ifinance.ne.jp/glossary/loan/loa259.html">クロスデフォルト&lt;/a> と呼ぶらしい。契約書にクロスデフォルト条項として書いてあるらしい。記事によると、クロスデフォルトによって約190億ドル (約2.1兆円) のオフショア債の返済を一括でしないといけないらしい。リーマンショックのようなことは起きないという見通しだけど、うちみたいな零細企業は世の中の影響を諸に受けるのでお仕事に影響がでなければいいなぁといったところ。&lt;/p>
&lt;h2 id="アプリケーションログの調査">アプリケーションログの調査&lt;/h2>
&lt;p>昨日の続き。ecs-logging-java で JSON Lines でログを制御するところで spring-boot の設定で tomcat のアクセスログの設定ができる。tomcat のアクセスログを log4j のレイアウトの仕組みを使って ecs-logging-java が提供する EcsLayout に変更できないかを3時間ほど調査して、どうもできないようだというのを教えてもらった。tomcat は apache のログを出力するという目的で実装されているから log4j の柔軟なログに対応していないという理屈。&lt;/p>
&lt;p>じゃあ、どうやって apache のアクセスログを JSON Lines にするかというと、PatternLayout のパターンに json のフォーマットを直書きしてしまうというやり方がある。なんかプログラミングでスマートに解決したいところだけど、その仕組みがないなら仕方ないかって感じでこれでやろうと思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://ogugu.hateblo.jp/entry/2018/08/03/153930">apacheのaccess_logをjson化しtd-agentで集約サーバへ収集する&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>アプリケーションログの調査</title><link>/diary/posts/2021/1206/</link><pubDate>Mon, 06 Dec 2021 08:08:14 +0900</pubDate><guid>/diary/posts/2021/1206/</guid><description>1時に寝て7時に起きた。
アプリケーションログの調査 お仕事でログの整理をやろうとしていて、そのためのライブラリとして ecs-logging-java を調べてた。
ECS Logging Java Reference 1.x » Get started ecs-logging-javaつかってみた 一番のモチベーションは JSON Lines でログを管理したいというところ。この手の実装や読み込んでログ分析したりとかはあちこちでやってきたので親近感はある。既存のログからの移行も含めていろいろ設計していかないといけない。私の感覚だとアプリケーションの開発初期にログの設計や出力周りを作り込むものだけど、そうじゃない文化の開発もあるんだなという印象。あとからログ設計するとか、移行や既存のコードに手を入れたり、開発初期に作り込むより手間暇かかる気がするんだけど、そんな時間もなく開発してたってことなのかなぁ。</description><content>&lt;p>1時に寝て7時に起きた。&lt;/p>
&lt;h2 id="アプリケーションログの調査">アプリケーションログの調査&lt;/h2>
&lt;p>お仕事でログの整理をやろうとしていて、そのためのライブラリとして ecs-logging-java を調べてた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.elastic.co/guide/en/ecs-logging/java/current/setup.html">ECS Logging Java Reference 1.x » Get started&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://speakerdeck.com/shibadog/ecs-logging-javatukatutemita">ecs-logging-javaつかってみた&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>一番のモチベーションは &lt;a href="https://jsonlines.org/">JSON Lines&lt;/a> でログを管理したいというところ。この手の実装や読み込んでログ分析したりとかはあちこちでやってきたので親近感はある。既存のログからの移行も含めていろいろ設計していかないといけない。私の感覚だとアプリケーションの開発初期にログの設計や出力周りを作り込むものだけど、そうじゃない文化の開発もあるんだなという印象。あとからログ設計するとか、移行や既存のコードに手を入れたり、開発初期に作り込むより手間暇かかる気がするんだけど、そんな時間もなく開発してたってことなのかなぁ。&lt;/p></content></item><item><title>頭文字Dを読了</title><link>/diary/posts/2021/1205/</link><pubDate>Sun, 05 Dec 2021 11:47:08 +0900</pubDate><guid>/diary/posts/2021/1205/</guid><description>0時に寝て7時に起きてだらだらやってて午前中は 頭文字D のアニメをみてた。漫画 (アニメも？) はすでに完結しているのでいつか読もうと思いつつ最後まで読んでいない。ゴッドフットやゴッドアームが出てくるぐらいまでは読んだ気がする。その後どうなったのかを知らない。イニシャルDをみていると、ストーリーも絵も演出もまったく派手さはなくて普通なんだけど、なぜかおもしろくて続きをみてしまうという人間の娯楽の本質をついている気がしてくる。なんでなんだろうなぁ。
頭文字D たまたま思い出したので夜に漫画喫茶行って頭文字Dを最後まで読んできた。全48巻で、31巻ぐらいから読み始めて3-4時間ぐらいで読み終えた。漫画なので仕方ないけど、対戦相手がどんどん強くなっていって勝ち方が玄人好みというのか、単純に抜いた・抜かれたの話しではなく、タイヤマネージメントがどうこうとか、恐怖に対する心理がどうこうとか、ドライバーと車のセッティングも含めた駆け引きが強くなっていって、どちらが速いかというよりは戦略通りの展開にもっていって最後はそれがうまくはまるみたいな、これまでもずっとそうだったんだけど、ここからはよりトップレベルのほんの僅かな差が勝敗を分けるといった描き方になっていったように思う。それはそれで現実に近い気はするけど、漫画的には派手な演出にならないので玄人好みなストーリーになっていった気がする。但し、そこまでやってきて最後の対戦相手だけは、個人的には納得感がなくて、ここまで緻密に作り上げてきた理論や個々のドライバーの修練の積み重ねが圧倒的天才の前にひれ伏すみたいな切り口が急展開していて、頭の切り替えができなかった感じがした。とはいえ、最後まで読み終えられてよかったし、作品としてはすごくおもしろかった。作者はモータースポーツが本当に好きなんだろうなというのが伝わってくる漫画だと思う。
ふるさと納税 あまり欲しいものもないし、ふるさと納税の行政手続きも一通り理解したから今年はやらなくてもいいかとも思っていた。しかし、paypayボーナスキャンペーン をみてやってみるかという気になった。paypay はいろんなものと連携していて見かけるたびにすごいなと思う。お得だからと必要もないものを買うことはないけど、ふるさと納税はやらなかったとしても、どのみち納税は必要なものなので還元があるということは節税につながるのかな？理屈はよくわからないけど、言いたいことは paypay はすごいという話でした。
dapr の api トークンを使った認証 Enable API token authentication in Dapr を一通り読んだ。内容はとくに難しくなく、こんな風に dapr の manifest を書けば JWT トークンを設定できますということを書いてある。私はずっとサーバーサイドばっかりやってきたからフロントエンドで使われる技術や仕組みに弱い。JWT トークンもその1つで、自分でちゃんと実装したことがないからちゃんとよく分かってない。これが OAuth2 なら provider を実装したこともあるからその仕組みも意図も理解できる。一度どこかで自分で JWT も実装してみないといけないのだろうな。
少し前にお仕事で kubernetes の secret の移行作業をやった。既存の secret にキーバリューを追加するときは patch を使う。
$ kubectl patch secret mydata -p=&amp;#39;{&amp;#34;stringData&amp;#34;:{&amp;#34;mykey&amp;#34;: &amp;#34;myvalue&amp;#34;}}&amp;#39; secret の内容を確認するときも2つのやり方がある。キーだけを確認するならこれでよい。
$ kubectl describe secrets mydata キーに対応する値もデコードして確認するならこうする。但し、閲覧注意。
$ kubectl get secret mydata -o json | jq &amp;#39;.</description><content>&lt;p>0時に寝て7時に起きてだらだらやってて午前中は &lt;a href="https://ja.wikipedia.org/wiki/%E9%A0%AD%E6%96%87%E5%AD%97D">頭文字D&lt;/a> のアニメをみてた。漫画 (アニメも？) はすでに完結しているのでいつか読もうと思いつつ最後まで読んでいない。ゴッドフットやゴッドアームが出てくるぐらいまでは読んだ気がする。その後どうなったのかを知らない。イニシャルDをみていると、ストーリーも絵も演出もまったく派手さはなくて普通なんだけど、なぜかおもしろくて続きをみてしまうという人間の娯楽の本質をついている気がしてくる。なんでなんだろうなぁ。&lt;/p>
&lt;h2 id="頭文字d">頭文字D&lt;/h2>
&lt;p>たまたま思い出したので夜に漫画喫茶行って頭文字Dを最後まで読んできた。全48巻で、31巻ぐらいから読み始めて3-4時間ぐらいで読み終えた。漫画なので仕方ないけど、対戦相手がどんどん強くなっていって勝ち方が玄人好みというのか、単純に抜いた・抜かれたの話しではなく、タイヤマネージメントがどうこうとか、恐怖に対する心理がどうこうとか、ドライバーと車のセッティングも含めた駆け引きが強くなっていって、どちらが速いかというよりは戦略通りの展開にもっていって最後はそれがうまくはまるみたいな、これまでもずっとそうだったんだけど、ここからはよりトップレベルのほんの僅かな差が勝敗を分けるといった描き方になっていったように思う。それはそれで現実に近い気はするけど、漫画的には派手な演出にならないので玄人好みなストーリーになっていった気がする。但し、そこまでやってきて最後の対戦相手だけは、個人的には納得感がなくて、ここまで緻密に作り上げてきた理論や個々のドライバーの修練の積み重ねが圧倒的天才の前にひれ伏すみたいな切り口が急展開していて、頭の切り替えができなかった感じがした。とはいえ、最後まで読み終えられてよかったし、作品としてはすごくおもしろかった。作者はモータースポーツが本当に好きなんだろうなというのが伝わってくる漫画だと思う。&lt;/p>
&lt;h2 id="ふるさと納税">ふるさと納税&lt;/h2>
&lt;p>あまり欲しいものもないし、ふるさと納税の行政手続きも一通り理解したから今年はやらなくてもいいかとも思っていた。しかし、&lt;a href="https://www.satofull.jp/static/campaign/202112_pcp.php">paypayボーナスキャンペーン&lt;/a> をみてやってみるかという気になった。paypay はいろんなものと連携していて見かけるたびにすごいなと思う。お得だからと必要もないものを買うことはないけど、ふるさと納税はやらなかったとしても、どのみち納税は必要なものなので還元があるということは節税につながるのかな？理屈はよくわからないけど、言いたいことは paypay はすごいという話でした。&lt;/p>
&lt;h2 id="dapr-の-api-トークンを使った認証">dapr の api トークンを使った認証&lt;/h2>
&lt;p>&lt;a href="https://docs.dapr.io/operations/security/api-token/">Enable API token authentication in Dapr&lt;/a> を一通り読んだ。内容はとくに難しくなく、こんな風に dapr の manifest を書けば &lt;a href="https://jwt.io/">JWT&lt;/a> トークンを設定できますということを書いてある。私はずっとサーバーサイドばっかりやってきたからフロントエンドで使われる技術や仕組みに弱い。JWT トークンもその1つで、自分でちゃんと実装したことがないからちゃんとよく分かってない。これが OAuth2 なら provider を実装したこともあるからその仕組みも意図も理解できる。一度どこかで自分で JWT も実装してみないといけないのだろうな。&lt;/p>
&lt;p>少し前にお仕事で kubernetes の secret の移行作業をやった。既存の secret にキーバリューを追加するときは patch を使う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl patch secret mydata -p&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;{&amp;#34;stringData&amp;#34;:{&amp;#34;mykey&amp;#34;: &amp;#34;myvalue&amp;#34;}}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>secret の内容を確認するときも2つのやり方がある。キーだけを確認するならこれでよい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl describe secrets mydata
&lt;/code>&lt;/pre>&lt;/div>&lt;p>キーに対応する値もデコードして確認するならこうする。但し、閲覧注意。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get secret mydata -o json | jq &lt;span style="color:#e6db74">&amp;#39;.data | map_values(@base64d)&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>github actions のビルドキャッシュ運用</title><link>/diary/posts/2021/1204/</link><pubDate>Sat, 04 Dec 2021 13:20:21 +0900</pubDate><guid>/diary/posts/2021/1204/</guid><description>23時に寝て5時に起きてちょっと作業してまた寝て7時に起きた。お仕事も働き始めて1ヶ月が経過して、だいぶチームの雰囲気や業務に慣れてきたところ。稼働日の18日間で作成した pr が16件。入ったときに割当てられた3つの課題から10数件の issue を派生させてちょうどすべて fix した。来週から新しい課題に取り組む。
ストレッチ 今週もお仕事に注力してたらストレッチは2日/週とあまりできなかった。ウォーキングもやってない。今日の開脚幅は開始前165cmで、ストレッチ後167cmだった。さぼってたせいか、数値が悪くなってしまった。右股関節の関節の可動域がよくないところは少しずつまがるようになってきてよくなってきている実感がある。一方で右太ももの後ろの筋が張りが大きいことに気付いた。トレーナーさんに聞くと、この筋は椅子に座っていると張りやすいという話しなので、最近はお仕事に注力して椅子に座っている時間が以前より伸びているせいだと思う。あと会議に出席している時間も増えているため、その時間は椅子に座っておかないといけないという制約も増えている。
actions/cache の exclude 設定 github actions でビルドキャッシュを扱う方法は Caching dependencies to speed up workflows に書いてあって、それは actions/cache という github actions がキャッシュ機能を提供している。ここでドキュメントにはキャッシュの除外設定については何も書かれていないが、リポジトリに含まれる examples.md には次のような説明と設定例が出てくる。
Depending on the environment, huge packages might be pre-installed in the global cache folder. With actions/cache@v2 you can now exclude unwanted packages with exclude pattern
https://github.com/actions/cache/blob/main/examples.md#c---nuget
- uses: actions/cache@v2 with: path: |~/.nuget/packages !~/.nuget/packages/unwanted key: ${{ runner.os }}-nuget-${{ hashFiles(&amp;#39;**/packages.lock.json&amp;#39;) }} restore-keys: | ${{ runner.</description><content>&lt;p>23時に寝て5時に起きてちょっと作業してまた寝て7時に起きた。お仕事も働き始めて1ヶ月が経過して、だいぶチームの雰囲気や業務に慣れてきたところ。稼働日の18日間で作成した pr が16件。入ったときに割当てられた3つの課題から10数件の issue を派生させてちょうどすべて fix した。来週から新しい課題に取り組む。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週もお仕事に注力してたらストレッチは2日/週とあまりできなかった。ウォーキングもやってない。今日の開脚幅は開始前165cmで、ストレッチ後167cmだった。さぼってたせいか、数値が悪くなってしまった。右股関節の関節の可動域がよくないところは少しずつまがるようになってきてよくなってきている実感がある。一方で右太ももの後ろの筋が張りが大きいことに気付いた。トレーナーさんに聞くと、この筋は椅子に座っていると張りやすいという話しなので、最近はお仕事に注力して椅子に座っている時間が以前より伸びているせいだと思う。あと会議に出席している時間も増えているため、その時間は椅子に座っておかないといけないという制約も増えている。&lt;/p>
&lt;h2 id="actionscache-の-exclude-設定">actions/cache の exclude 設定&lt;/h2>
&lt;p>github actions でビルドキャッシュを扱う方法は &lt;a href="https://docs.github.com/ja/actions/advanced-guides/caching-dependencies-to-speed-up-workflows">Caching dependencies to speed up workflows&lt;/a> に書いてあって、それは &lt;a href="https://github.com/actions/cache">actions/cache&lt;/a> という github actions がキャッシュ機能を提供している。ここでドキュメントにはキャッシュの除外設定については何も書かれていないが、リポジトリに含まれる &lt;code>examples.md&lt;/code> には次のような説明と設定例が出てくる。&lt;/p>
&lt;blockquote>
&lt;p>Depending on the environment, huge packages might be pre-installed in the global cache folder. With actions/cache@v2 you can now exclude unwanted packages with &lt;a href="https://github.com/actions/toolkit/tree/main/packages/glob#exclude-patterns">exclude pattern&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/actions/cache/blob/main/examples.md#c---nuget">https://github.com/actions/cache/blob/main/examples.md#c---nuget&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/cache@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">path&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> ~/.nuget/packages
&lt;/span>&lt;span style="color:#e6db74"> !~/.nuget/packages/unwanted&lt;/span>
&lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">${{ runner.os }}-nuget-${{ hashFiles(&amp;#39;**/packages.lock.json&amp;#39;) }}&lt;/span>
&lt;span style="color:#f92672">restore-keys&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> &lt;/span> &lt;span style="color:#ae81ff">${{ runner.os }}-nuget-&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>!&lt;/code> を入れるだけかと思って検証してみたらどうも意図した振る舞いにならない。実はこの設定はバグっていて実際には動かない。なぜ動かないかを追いかけてないけど、issue にも登録されている。&lt;code>path&lt;/code> の記述方法によって動いたり動かなかったりするというのが現状の振る舞いになるらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/actions/cache/issues/494">Excluded sub directory not working #494&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/actions/toolkit/issues/713">Cache - excluding files or folders with ! not working #713&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ちなみに正しい動く設定は次になる。ワイルドカードを使わないといけないらしい。ドキュメントに除外設定について書いていないのはバグってて中途半端な振る舞いをしているからかもしれない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/cache@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">path&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> ~/.nuget/packages/*
&lt;/span>&lt;span style="color:#e6db74"> !~/.nuget/packages/unwanted&lt;/span>
&lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">${{ runner.os }}-nuget-${{ hashFiles(&amp;#39;**/packages.lock.json&amp;#39;) }}&lt;/span>
&lt;span style="color:#f92672">restore-keys&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> &lt;/span> &lt;span style="color:#ae81ff">${{ runner.os }}-nuget-&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>あとビルドキャッシュのキーにパッケージ管理のファイルのハッシュ値を取るようになっている。この背景も github actions がキャッシュをクリアする機能を提供していないからであろう。&lt;a href="https://github.com/actions/cache/issues/2">Clear cache #2&lt;/a> でも議論されているが、キャッシュをクリアできないため、同じキーにパッケージが溜まり続けるような運用は開発者にとっても github 社にとってもリソースを浪費するので好ましくない。いまは7日以上アクセスされていないキャッシュを削除する運用になっているため、なるべくフレッシュなキャッシュが生成されるような運用となるよう、ハッシュ値を取得するようなキーの運用が行われているように推測される。&lt;/p></content></item><item><title>チームごっこ</title><link>/diary/posts/2021/1203/</link><pubDate>Fri, 03 Dec 2021 08:55:15 +0900</pubDate><guid>/diary/posts/2021/1203/</guid><description>0時に寝て6時に起きた。
朝活: アジャイル開発とスクラム 第2版 第7章の残りと第8章を読んだ。事例紹介なので軽く読み流した感じ。インタビュー記事のタイトルが気になった。
「合宿で、「仕事での同僚」から「チームの仲間」になれました
このタイトルと内容に私は違和感があるので反論としてそれを書いていく。
心理的安全性のつくりかた に書いてあったが、MIT のオスターマン教授によると、チームという概念は比較的新しいものらしい。
職場における、チームという概念は1980年以降、最も広まったイノベーションのひとつだ。
「心理的安全性のつくりかた」ではチームとグループの違いは次になる。
チームは共通の目標に向かってともに問題解決やアイディアを出す集団 グループはそうなっていない、ただの寄せ集めの集団 共通の目標に対して互いに対話や協働することでチームになっていく。この考え方は私の経験則とも合致するし支持している。実際の業務や作業を通してチームは築かれていくと私は考える。しかし、コミュニケーションの活性化や親睦を深めればチームになると誤解している人もいるように思う。
件のインタビュー記事では、次の内容があった。
合宿の最大の成果は、何だったのでしょう？
「仕事での同僚」から「チームの仲間」になれたことだと思います。昨今、ハラスメントやプライバシーの観点からなかなか個人の深い話ができないことが多いと思いますが、お互いを信頼した上で自分の生い立ちや経験から「私がなぜここにいるのか」を深掘りできたことが大きいと思います。
具体的には、誰とも話さず、自分を見つめる時間として三浦海岸の浜辺に全員を１時間放置しました（笑）。その時間で自分の今までをふりかえり、再集合したときに１人ずつ語り、お互いのことを尊重し受け入れることで心理的安全性が一気に高まったと思います。
私だったら転職を考えますね。浜辺に放置されて再集合して生い立ちとか語れとか言われて、そんな上司だと懸念を抱くと思う。その場で抗議はしなかったとしても。仕事を通して結果的に信頼関係が深くなって、同じ行動をするなら理解できるが、そうじゃない状態で職位の高い人がメンバーに合宿を半強制参加させてプライベートの内容を話させるのはハラスメントと紙一重かもしれない。おそらくこれはたまたまうまくいったケースだというだけで再現性のあるプラクティスにはまったく思えない。厳しい言い方をすると、偉い人の自己満足によるチームごっこではないかと思う。
「仕事での同僚」から「チームの仲間」になれたというインタビューが書かれていた。私の感覚ではやや違和感がある。グループではなくチームという概念が認識されるようになったのはわりと最近の話だというのはたしか心理的安全性のつくりかたに書いてあった気がする。 #金朝ツメトギ
&amp;mdash; Tetsuya Morimoto (@t2y) December 2, 2021 本番リリース作業 今日は非稼働日なんだけど、インフラ周りの修正をしていたので本番リリースの作業を見守っていた。ハドルで画面共有しながらみんなでわいわいできるので、これはこれでリリース作業の雰囲気を学ぶ機会にもなる。私が本番リリースすることはないだろうけど、担当者がどういった作業でリリースしているかを知っておく方が運用に役に立つ仕組みも導入できるかもしれない。音声通話と画面共有さえあればフルリモートワークでもなにも困ることはない。よい世の中になったと思う。RabbitMQ と Dapr 周りで私が懸念に思っていたことを本番リリースを通して検証したり振る舞いを観察できたので新たな知見を得た。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="朝活-アジャイル開発とスクラム-第2版">朝活: アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>第7章の残りと第8章を読んだ。事例紹介なので軽く読み流した感じ。インタビュー記事のタイトルが気になった。&lt;/p>
&lt;blockquote>
&lt;p>「合宿で、「仕事での同僚」から「チームの仲間」になれました&lt;/p>
&lt;/blockquote>
&lt;p>このタイトルと内容に私は違和感があるので反論としてそれを書いていく。&lt;/p>
&lt;p>&lt;a href="https://pub.jmam.co.jp/book/b517388.html">心理的安全性のつくりかた&lt;/a> に書いてあったが、MIT のオスターマン教授によると、チームという概念は比較的新しいものらしい。&lt;/p>
&lt;blockquote>
&lt;p>職場における、チームという概念は1980年以降、最も広まったイノベーションのひとつだ。&lt;/p>
&lt;/blockquote>
&lt;p>「心理的安全性のつくりかた」ではチームとグループの違いは次になる。&lt;/p>
&lt;ul>
&lt;li>チームは共通の目標に向かってともに問題解決やアイディアを出す集団&lt;/li>
&lt;li>グループはそうなっていない、ただの寄せ集めの集団&lt;/li>
&lt;/ul>
&lt;p>共通の目標に対して互いに対話や協働することでチームになっていく。この考え方は私の経験則とも合致するし支持している。実際の業務や作業を通してチームは築かれていくと私は考える。しかし、コミュニケーションの活性化や親睦を深めればチームになると誤解している人もいるように思う。&lt;/p>
&lt;p>件のインタビュー記事では、次の内容があった。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>合宿の最大の成果は、何だったのでしょう？&lt;/strong>&lt;/p>
&lt;p>「仕事での同僚」から「チームの仲間」になれたことだと思います。昨今、ハラスメントやプライバシーの観点からなかなか個人の深い話ができないことが多いと思いますが、お互いを信頼した上で自分の生い立ちや経験から「私がなぜここにいるのか」を深掘りできたことが大きいと思います。&lt;/p>
&lt;p>具体的には、誰とも話さず、自分を見つめる時間として三浦海岸の浜辺に全員を１時間放置しました（笑）。その時間で自分の今までをふりかえり、再集合したときに１人ずつ語り、お互いのことを尊重し受け入れることで心理的安全性が一気に高まったと思います。&lt;/p>
&lt;/blockquote>
&lt;p>私だったら転職を考えますね。浜辺に放置されて再集合して生い立ちとか語れとか言われて、そんな上司だと懸念を抱くと思う。その場で抗議はしなかったとしても。仕事を通して結果的に信頼関係が深くなって、同じ行動をするなら理解できるが、そうじゃない状態で職位の高い人がメンバーに合宿を半強制参加させてプライベートの内容を話させるのはハラスメントと紙一重かもしれない。おそらくこれはたまたまうまくいったケースだというだけで再現性のあるプラクティスにはまったく思えない。厳しい言い方をすると、偉い人の自己満足によるチームごっこではないかと思う。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">「仕事での同僚」から「チームの仲間」になれたというインタビューが書かれていた。私の感覚ではやや違和感がある。グループではなくチームという概念が認識されるようになったのはわりと最近の話だというのはたしか心理的安全性のつくりかたに書いてあった気がする。 &lt;a href="https://twitter.com/hashtag/%E9%87%91%E6%9C%9D%E3%83%84%E3%83%A1%E3%83%88%E3%82%AE?src=hash&amp;amp;ref_src=twsrc%5Etfw">#金朝ツメトギ&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1466528241661874179?ref_src=twsrc%5Etfw">December 2, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="本番リリース作業">本番リリース作業&lt;/h2>
&lt;p>今日は非稼働日なんだけど、インフラ周りの修正をしていたので本番リリースの作業を見守っていた。ハドルで画面共有しながらみんなでわいわいできるので、これはこれでリリース作業の雰囲気を学ぶ機会にもなる。私が本番リリースすることはないだろうけど、担当者がどういった作業でリリースしているかを知っておく方が運用に役に立つ仕組みも導入できるかもしれない。音声通話と画面共有さえあればフルリモートワークでもなにも困ることはない。よい世の中になったと思う。RabbitMQ と Dapr 周りで私が懸念に思っていたことを本番リリースを通して検証したり振る舞いを観察できたので新たな知見を得た。&lt;/p></content></item><item><title>スクラムイベントにもの思い</title><link>/diary/posts/2021/1202/</link><pubDate>Thu, 02 Dec 2021 07:43:21 +0900</pubDate><guid>/diary/posts/2021/1202/</guid><description>23時に寝て6時半に起きた。昨日は疲労困憊だったのでなんもせずすぐ寝た。
スクラムイベント お仕事のスクラム開発で木曜日はスプリントレビューとプロダクトバックログリファインメントを行う。主にステークホルダーとプロジェクトオーナーがプロダクトバックログアイテムの優先度を議論したり、タスクに細分化されていない課題をタスクにしていくための作業に当てたりしている。本当はタスク化されたイシューをさらにリファイメントするイベントなのだろうだけど、まだそこまで業務やチームの体制が成熟していないため、タスクの細分化のための時間になっていたりしている。
これらのイベントで開発者がイニシアティブをとることはないけど、プロダクトオーナーやその業務チームにいるメンバーたちがどうやって業務をタスク化しているかのやり取りもみえたりする。開発者にとってそのやり取りをみていることに意味があるかどうかはまだ私にはわからないが、業務チームのメンバーがどういった働き方をしているかを知るきっかけにはなる。業務チームは miro を使ってメンバーみんなで同時編集しながら課題を付箋代わりのメモに落としていく。その個々のメモがタスクに近いものになるのだろうけど、私からみたら業務すべてを知っている人がまとめて細分化してドキュメントに書き記して2-3回みんなでレビューすれば終わるようなものを、みんなで付箋紙に書いていって整合性が取れているのかどうかわからないメモの固まりを作っているようにみえる。この作業はみんなでやらないと進捗しないので1週間に1回とかになる。
チームが扱うすべての業務を知っているメンバーはいない 業務に必要な機能の優先順位や優先度を決める権限をもっていない 情報が足りないと思ったときにメンバーが自律的に動いて補う体制が整っていない あとステークホルダーが話す要件や仕様に関わってくる話の大半が口頭で行われていてドキュメントや課題管理に文章として書き記されていない。だから同じ話しを何度も繰り返し聞くようなケースも発生する。わからないことを聞くことも、繰り返し聞くことも問題ではないが、議事録以外にそこで話す内容がドキュメント化されないのはどうしてだろう？という気もした。もっともっと文章を書かないと情報共有やノウハウをためることにはつながっていかないだろうということも垣間みえる。
総括すれば、どんな開発方法論を使っても、リーダーやマネージャークラスが圧倒的に文章を書けないと、その配下のメンバーは自律的に行動できないというだけの話しでしかないが、どうやったら解消できるか？はまだまだこれからの私の課題でもある。</description><content>&lt;p>23時に寝て6時半に起きた。昨日は疲労困憊だったのでなんもせずすぐ寝た。&lt;/p>
&lt;h2 id="スクラムイベント">スクラムイベント&lt;/h2>
&lt;p>お仕事のスクラム開発で木曜日はスプリントレビューとプロダクトバックログリファインメントを行う。主にステークホルダーとプロジェクトオーナーがプロダクトバックログアイテムの優先度を議論したり、タスクに細分化されていない課題をタスクにしていくための作業に当てたりしている。本当はタスク化されたイシューをさらにリファイメントするイベントなのだろうだけど、まだそこまで業務やチームの体制が成熟していないため、タスクの細分化のための時間になっていたりしている。&lt;/p>
&lt;p>これらのイベントで開発者がイニシアティブをとることはないけど、プロダクトオーナーやその業務チームにいるメンバーたちがどうやって業務をタスク化しているかのやり取りもみえたりする。開発者にとってそのやり取りをみていることに意味があるかどうかはまだ私にはわからないが、業務チームのメンバーがどういった働き方をしているかを知るきっかけにはなる。業務チームは &lt;a href="https://miro.com/">miro&lt;/a> を使ってメンバーみんなで同時編集しながら課題を付箋代わりのメモに落としていく。その個々のメモがタスクに近いものになるのだろうけど、私からみたら業務すべてを知っている人がまとめて細分化してドキュメントに書き記して2-3回みんなでレビューすれば終わるようなものを、みんなで付箋紙に書いていって整合性が取れているのかどうかわからないメモの固まりを作っているようにみえる。この作業はみんなでやらないと進捗しないので1週間に1回とかになる。&lt;/p>
&lt;ul>
&lt;li>チームが扱うすべての業務を知っているメンバーはいない&lt;/li>
&lt;li>業務に必要な機能の優先順位や優先度を決める権限をもっていない&lt;/li>
&lt;li>情報が足りないと思ったときにメンバーが自律的に動いて補う体制が整っていない&lt;/li>
&lt;/ul>
&lt;p>あとステークホルダーが話す要件や仕様に関わってくる話の大半が口頭で行われていてドキュメントや課題管理に文章として書き記されていない。だから同じ話しを何度も繰り返し聞くようなケースも発生する。わからないことを聞くことも、繰り返し聞くことも問題ではないが、議事録以外にそこで話す内容がドキュメント化されないのはどうしてだろう？という気もした。もっともっと文章を書かないと情報共有やノウハウをためることにはつながっていかないだろうということも垣間みえる。&lt;/p>
&lt;p>総括すれば、どんな開発方法論を使っても、リーダーやマネージャークラスが圧倒的に文章を書けないと、その配下のメンバーは自律的に行動できないというだけの話しでしかないが、どうやったら解消できるか？はまだまだこれからの私の課題でもある。&lt;/p></content></item><item><title>師走入り</title><link>/diary/posts/2021/1201/</link><pubDate>Wed, 01 Dec 2021 04:13:59 +0900</pubDate><guid>/diary/posts/2021/1201/</guid><description>1時から1時間ほど仮眠をとって2時から4時過ぎまで作業して帰ってお風呂に入ってそのまま6時から 【三宮.dev オンライン】リモート朝活もくもく会 の朝活に参加した。30分ほど雑談して眠くなって7時過ぎから9時前まで寝てた。
dapr の pubsub の dead letter サポート お仕事で dapr を触っている。pubsub で dead letter queue の仕組みを導入しようとしているが、PubSub&amp;rsquo;s DeadLetter Topic #2217 によると v1.6 (2022年1月20日リリース予定) のマイルストーンになっている。本当にその予定ならそろそろベータ版が実装されていて、開発ブランチあったらテストしようかと考えていた。調べてたら rabbitmq はすでに v1.5 で dead letter のサポートがマージされているのを発見した。
Add dead letter support for RabbitMQ pubsub #1844 たまたま、いま使っている pubsub も rabbitmq だった。ドキュメントをみたら確かにその設定が追加されている。
dapr RabbitMQ
Field Required Details Example enableDeadLetter N Enable forwarding Messages that cannot be handled to a dead-letter topic.</description><content>&lt;p>1時から1時間ほど仮眠をとって2時から4時過ぎまで作業して帰ってお風呂に入ってそのまま6時から &lt;a href="https://kobe-sannomiya-dev.connpass.com/event/232426/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> の朝活に参加した。30分ほど雑談して眠くなって7時過ぎから9時前まで寝てた。&lt;/p>
&lt;h2 id="dapr-の-pubsub-の-dead-letter-サポート">dapr の pubsub の dead letter サポート&lt;/h2>
&lt;p>お仕事で dapr を触っている。pubsub で dead letter queue の仕組みを導入しようとしているが、&lt;a href="https://github.com/dapr/dapr/issues/2217">PubSub&amp;rsquo;s DeadLetter Topic #2217&lt;/a> によると v1.6 (2022年1月20日リリース予定) のマイルストーンになっている。本当にその予定ならそろそろベータ版が実装されていて、開発ブランチあったらテストしようかと考えていた。調べてたら rabbitmq はすでに v1.5 で dead letter のサポートがマージされているのを発見した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/dapr/docs/pull/1844">Add dead letter support for RabbitMQ pubsub #1844&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>たまたま、いま使っている pubsub も rabbitmq だった。ドキュメントをみたら確かにその設定が追加されている。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://docs.dapr.io/reference/components-reference/supported-pubsub/setup-rabbitmq/">dapr RabbitMQ&lt;/a>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Required&lt;/th>
&lt;th>Details&lt;/th>
&lt;th>Example&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>enableDeadLetter&lt;/td>
&lt;td>N&lt;/td>
&lt;td>Enable forwarding Messages that cannot be handled to a dead-letter topic. Defaults to &amp;ldquo;false&amp;rdquo;&lt;/td>
&lt;td>&amp;ldquo;true&amp;rdquo;, &amp;ldquo;false&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>maxLen&lt;/td>
&lt;td>N&lt;/td>
&lt;td>The maximum number of messages of a queue and its dead letter queue (if dead letter enabled). If both maxLen and maxLenBytes are set then both will apply; whichever limit is hit first will be enforced. Defaults to no limit.&lt;/td>
&lt;td>&amp;ldquo;1000&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>maxLenBytes&lt;/td>
&lt;td>N&lt;/td>
&lt;td>Maximum length in bytes of a queue and its dead letter queue (if dead letter enabled). If both maxLen and maxLenBytes are set then both will apply; whichever limit is hit first will be enforced. Defaults to no limit.&lt;/td>
&lt;td>&amp;ldquo;1048576&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/blockquote>
&lt;p>enableDeadLetter=true に設定して、適当にエラーが発生しそうなリクエストを作って dead letter にメッセージが入るかどうかを検証してた。ひとまず dead letter にメッセージが入ること自体は確認できた。&lt;/p>
&lt;h2 id="bizpy-勉強会">bizpy 勉強会&lt;/h2>
&lt;p>&lt;a href="https://bizpy.connpass.com/event/229239/">Python で Slack のインテグレーションをやってみる勉強会 #3&lt;/a> を開催した。月曜日から2時間もあればできる資料作成をだらだら先送りしていて夜中に作った。なんか体調を崩しているのかもしれない。たまたま勉強会の前にせらさんから激励のコメントをいただいて嬉しかった。&lt;/p>
&lt;blockquote>
&lt;p>今日の分も含めコンテンツ拝見しましたが、素晴らしいですね&lt;/p>
&lt;/blockquote>
&lt;p>私見だけど、slack インテグレーションで調べものをしているとせらさんの記事や issue のやり取りをみかけることが多い。twitter で slack インテグレーションに関してつぶやくと100%せらさんからレスポンスがある (個人の経験談) 。過去に私は外資の ISV で働きたいと思って活動したこともあったけど、せらさんをみていて自分のレベルでは無理だったなと得心がいった。なにがすごいって、bizpy の勉強会のようなところにもわざわざやってきて、講師にコメントしたりアドバイスしてくれるんだからね。&lt;/p>
&lt;p>2ヶ月に渡り、slack インテグレーションのチュートリアルレベルの記事を実際に設定してみて、サンプルコード書いてみて、動かしてみて、slack でどんなことができそうかの理解を深めることができた。今回の内容はビジネスパーソン向けではなかったのでちょっと敷居が高かったかもしれないが、全3回でやり切ることができてよかった。終わってから運営に新たにわたなべさんが加わったことを参加者に紹介しつつ、次回の企画について雑談していた。次回はわたなべさんから機械学習入門のような勉強会をしてもらうことに決まった。&lt;/p></content></item></channel></rss>