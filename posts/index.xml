<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on forest nook</title><link>/diary/posts/</link><description>Recent content in Posts on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Thu, 07 Apr 2022 06:10:00 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>cdk のメジャーバージョンのマイグレーション</title><link>/diary/posts/2022/0407/</link><pubDate>Thu, 07 Apr 2022 06:10:00 +0900</pubDate><guid>/diary/posts/2022/0407/</guid><description>0時に寝て5時に起きた。開発者にインフラ変更の影響を出さないように6時半からインフラのお仕事してた。
cdk v1 と v2 の違い AWS CDK Versions には v1 と v2 の2つがある。新規で作るものは v2 を選択すればよいけど、既存のスタックが v1 だとマイグレーションが必要になる。cdk は bootstrap したときに CDKToolkit というスタックを生成する。cdk をアップグレードするというのはこのスタックの設定も更新する必要がある。デフォルト設定をそのまま使っていればマイグレーションはそんなに難しくはないはずだけど、設定をカスタマイズしていたりするといくつかパラメーターを調整したりしなかったりしてややこしいかもしれない。
Migrating to AWS CDK v2 Bootstrapping また v2 は v1 の experimental な機能は移行されていないため、v1 のライブラリを直接使うか、自前でその機能を実装するといったことも必要になる可能性がある。
cdk v2 を使っていて v1 にある機能が v2 になくてあれー？って感じで調べてたら experimental な機能はまだ移行されてないらしい。https://t.co/SbRZ5ddrTj
&amp;mdash; Tetsuya Morimoto (@t2y) April 7, 2022 例えば、v1 の apigwv2.VpcLink というメソッドは experimental で v2 に移行されていないため、v2 に移行されている stable な CfnVpcLink という機能を使って次のように実装した。これは v1 の cdk の実装をみて同じように実装しただけ。</description><content>&lt;p>0時に寝て5時に起きた。開発者にインフラ変更の影響を出さないように6時半からインフラのお仕事してた。&lt;/p>
&lt;h2 id="cdk-v1-と-v2-の違い">cdk v1 と v2 の違い&lt;/h2>
&lt;p>&lt;a href="https://docs.aws.amazon.com/cdk/api/versions.html">AWS CDK Versions&lt;/a> には v1 と v2 の2つがある。新規で作るものは v2 を選択すればよいけど、既存のスタックが v1 だとマイグレーションが必要になる。cdk は bootstrap したときに CDKToolkit というスタックを生成する。cdk をアップグレードするというのはこのスタックの設定も更新する必要がある。デフォルト設定をそのまま使っていればマイグレーションはそんなに難しくはないはずだけど、設定をカスタマイズしていたりするといくつかパラメーターを調整したりしなかったりしてややこしいかもしれない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html">Migrating to AWS CDK v2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.aws.amazon.com/cdk/v2/guide/bootstrapping.html">Bootstrapping&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>また v2 は v1 の experimental な機能は移行されていないため、v1 のライブラリを直接使うか、自前でその機能を実装するといったことも必要になる可能性がある。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">cdk v2 を使っていて v1 にある機能が v2 になくてあれー？って感じで調べてたら experimental な機能はまだ移行されてないらしい。&lt;a href="https://t.co/SbRZ5ddrTj">https://t.co/SbRZ5ddrTj&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1511924087450640386?ref_src=twsrc%5Etfw">April 7, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>例えば、v1 の apigwv2.VpcLink というメソッドは experimental で v2 に移行されていないため、v2 に移行されている stable な CfnVpcLink という機能を使って次のように実装した。これは v1 の cdk の実装をみて同じように実装しただけ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/aws/aws-cdk/pull/10531/files#diff-1cf3aaf7b2b6b2e72123b93cb3108eb9e9a3291e588d62eb2cd34dd0509d3045">https://github.com/aws/aws-cdk/pull/10531/files#diff-1cf3aaf7b2b6b2e72123b93cb3108eb9e9a3291e588d62eb2cd34dd0509d3045&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-diff" data-lang="diff">&lt;span style="color:#f92672">- const apiGwVpcLink = new apigwv2.VpcLink(this, &amp;#39;ApiGwVpcLink&amp;#39;, {
&lt;/span>&lt;span style="color:#f92672">- vpc: vpc,
&lt;/span>&lt;span style="color:#f92672">- vpcLinkName: &amp;#39;my-vpc-link&amp;#39;,
&lt;/span>&lt;span style="color:#f92672">- securityGroups: [mySecurityGroup]
&lt;/span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+ const apiGwVpcLink = new apigwv2.CfnVpcLink(this, &amp;#39;ApiGwVpcLink&amp;#39;, {
&lt;/span>&lt;span style="color:#a6e22e">+ name: &amp;#39;my-vpc-link&amp;#39;,
&lt;/span>&lt;span style="color:#a6e22e">+ subnetIds: vpc.privateSubnets.map(sb =&amp;gt; sb.subnetId),
&lt;/span>&lt;span style="color:#a6e22e">+ securityGroupIds: [mySecurityGroup.securityGroupId]
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>ecs の draining とタスクの停止時間</title><link>/diary/posts/2022/0406/</link><pubDate>Wed, 06 Apr 2022 06:30:16 +0900</pubDate><guid>/diary/posts/2022/0406/</guid><description>0時に寝て4時に起きた。なんか起きてから sns のタイムラインを眺めてた。6時半にはオフィスについて cdk のコードを読み始めた。
ecs の draining に時間がかかる？ cdk でインフラのデプロイをしていて、ecs のタスクの置き換えにやたら時間がかかっているのに気付いた。調べてみると、aws のドキュメントがすぐにヒットした。デフォルトでは停止するまでに5分ぐらいかかってしまうようだけど、それを調整したかったらいくつかパラメーターがある。
コンテナインスタンスが DRAINING に設定されているときに、Amazon ECS タスクが停止するのに時間がかかるトラブルシューティング方法を教えてください。 ecs サービスの deployment configuration minimumHealthyPercent: 同時に停止できるタスクの割合設定 maximumPercent: draining されるタスクが停止するまで置き換えるタスクを開始するかどうかの設定？ ロードバランサーの deregistration delay deregistrationDelay: elb(nlb) が登録解除処理が完了するまでに待つ時間。タスクが draining の状態になってこの時間が過ぎた後に登録解除して target が未使用になる ecs タスク定義の stop timeout stopTimeout: コンテナーが正常終了しないときに ecs が強制的にプロセスを kill するまでの待ち時間 それぞれのインフラの状況にあわせて適切なパラメーターを変更すればよい。私が管理しているのは次の2つを変更した。
maximumPercent: 100 -&amp;gt; 200 (%) deregistrationDelay: 300 -&amp;gt; 30 (秒) これで18分ほどかかっていたデプロイ時間を8分ぐらいまで短縮できた。テスト環境の設定なので多少のエラーが発生したとしても速い方がよい。</description><content>&lt;p>0時に寝て4時に起きた。なんか起きてから sns のタイムラインを眺めてた。6時半にはオフィスについて cdk のコードを読み始めた。&lt;/p>
&lt;h2 id="ecs-の-draining-に時間がかかる">ecs の draining に時間がかかる？&lt;/h2>
&lt;p>cdk でインフラのデプロイをしていて、ecs のタスクの置き換えにやたら時間がかかっているのに気付いた。調べてみると、aws のドキュメントがすぐにヒットした。デフォルトでは停止するまでに5分ぐらいかかってしまうようだけど、それを調整したかったらいくつかパラメーターがある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/ecs-tasks-stop-delayed-draining/">コンテナインスタンスが DRAINING に設定されているときに、Amazon ECS タスクが停止するのに時間がかかるトラブルシューティング方法を教えてください。&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="ecs-サービスの-deployment-configuration">ecs サービスの deployment configuration&lt;/h4>
&lt;ul>
&lt;li>minimumHealthyPercent: 同時に停止できるタスクの割合設定&lt;/li>
&lt;li>maximumPercent: draining されるタスクが停止するまで置き換えるタスクを開始するかどうかの設定？&lt;/li>
&lt;/ul>
&lt;h4 id="ロードバランサーの-deregistration-delay">ロードバランサーの deregistration delay&lt;/h4>
&lt;ul>
&lt;li>deregistrationDelay: elb(nlb) が登録解除処理が完了するまでに待つ時間。タスクが draining の状態になってこの時間が過ぎた後に登録解除して target が未使用になる&lt;/li>
&lt;/ul>
&lt;h4 id="ecs-タスク定義の-stop-timeout">ecs タスク定義の stop timeout&lt;/h4>
&lt;ul>
&lt;li>stopTimeout: コンテナーが正常終了しないときに ecs が強制的にプロセスを kill するまでの待ち時間&lt;/li>
&lt;/ul>
&lt;p>それぞれのインフラの状況にあわせて適切なパラメーターを変更すればよい。私が管理しているのは次の2つを変更した。&lt;/p>
&lt;ul>
&lt;li>maximumPercent: 100 -&amp;gt; 200 (%)&lt;/li>
&lt;li>deregistrationDelay: 300 -&amp;gt; 30 (秒)&lt;/li>
&lt;/ul>
&lt;p>これで18分ほどかかっていたデプロイ時間を8分ぐらいまで短縮できた。テスト環境の設定なので多少のエラーが発生したとしても速い方がよい。&lt;/p></content></item><item><title>再びのインフラエンジニア</title><link>/diary/posts/2022/0405/</link><pubDate>Tue, 05 Apr 2022 06:30:11 +0900</pubDate><guid>/diary/posts/2022/0405/</guid><description>0時に寝て7時に起きた。
インフラタスクに専念 本当はインフラ担当者が別途いるのだけど、多忙過ぎて、インフラタスクが1ヶ月近く遅延していて、プロジェクト内で合意を得て私がすべて巻き取ることにした。内容の如何に依らず、その一切合切をすべて巻き取ると宣言した。過去に働いた会社でも他の担当者ができなかった業務を後からリカバリするのはよくやってたのでそれ自体は構わない。ただ他人のタスクを肩代わりしても評価されないことも多くて、もともと私のタスクではないから誰がやったかなんか忘れてしまうんよね。私もとくにアピールしないからそう認識されても構わないのだけど、そういう業務が増えてくるとその職場を辞めるきっかけにもなってた。
インフラ担当者や他の社員さんにヒアリングしながら現時点でも十数個のタスクがある。過去のインフラの負債も含めて2-3週間ぐらい、私が集中的にやればすべて片がつくのではないかと考えている。今日たまたまスクラムのリファインメントやってて、業務の人から他の機能開発が遅れているのに2-3週間もインフラ作業に専念するってどういうこと？インフラタスクってインフラ担当者にやってもらえないんですか？と質問を受けて、できるんならその方が望ましいけど、過去の実績からまったく進捗しないのでこちらでやるざるを得ない状況というのを説明した。業務の人からみたらインフラなんか何をやっているかわからないからそんなもんよね。これから2-3週間経って蓄積したインフラタスクをすべて解決した後で少し時間が経つとインフラ担当者が全部やったように外部からはみえてしまうというのを、過去に何度も経験した。</description><content>&lt;p>0時に寝て7時に起きた。&lt;/p>
&lt;h2 id="インフラタスクに専念">インフラタスクに専念&lt;/h2>
&lt;p>本当はインフラ担当者が別途いるのだけど、多忙過ぎて、インフラタスクが1ヶ月近く遅延していて、プロジェクト内で合意を得て私がすべて巻き取ることにした。内容の如何に依らず、その一切合切をすべて巻き取ると宣言した。過去に働いた会社でも他の担当者ができなかった業務を後からリカバリするのはよくやってたのでそれ自体は構わない。ただ他人のタスクを肩代わりしても評価されないことも多くて、もともと私のタスクではないから誰がやったかなんか忘れてしまうんよね。私もとくにアピールしないからそう認識されても構わないのだけど、そういう業務が増えてくるとその職場を辞めるきっかけにもなってた。&lt;/p>
&lt;p>インフラ担当者や他の社員さんにヒアリングしながら現時点でも十数個のタスクがある。過去のインフラの負債も含めて2-3週間ぐらい、私が集中的にやればすべて片がつくのではないかと考えている。今日たまたまスクラムのリファインメントやってて、業務の人から他の機能開発が遅れているのに2-3週間もインフラ作業に専念するってどういうこと？インフラタスクってインフラ担当者にやってもらえないんですか？と質問を受けて、できるんならその方が望ましいけど、過去の実績からまったく進捗しないのでこちらでやるざるを得ない状況というのを説明した。業務の人からみたらインフラなんか何をやっているかわからないからそんなもんよね。これから2-3週間経って蓄積したインフラタスクをすべて解決した後で少し時間が経つとインフラ担当者が全部やったように外部からはみえてしまうというのを、過去に何度も経験した。&lt;/p></content></item><item><title>契約更新の打ち合わせ</title><link>/diary/posts/2022/0404/</link><pubDate>Mon, 04 Apr 2022 17:51:54 +0900</pubDate><guid>/diary/posts/2022/0404/</guid><description>0時に寝て5時過ぎに起きて7時半に起きた。
契約更新 4月末が3ヶ月契約の区切りなので契約更新の打ち合わせをした。更新はするのだけど、契約条件が現状の働き方とあわなくなってきたのでその調整のための打ち合わせ。いくつか私の懸念やプロジェクト管理について話していて認知の歪みが起きている箇所を特定できた。いま開発の計画がストーリーポイントから見積もったスケジュールになっていて、これが私からみてデタラメな計画になっている。チームが習熟すれば精度が上がっていくというスクラムマスターの説だが、現時点ではデタラメな計画だから想定外のタスクや進捗遅れが起きてもそれが直接的に反映されない。タスクは増えるが、計画は何も変わらないということがすでにいくつも発生していて、それをおかしいと言っているのがメンバーの中で私だけという状況になっている。前に勤めていた会社でも全く同じことがあった。私だけが開発スケジュールの遅延を2ヶ月前に察していて、他のメンバーは締め切りの2週間前になって気付くということが過去にもあった。
いまのプロジェクトが納期に対して実際に遅れるかどうかは納期が来ないとわからないが、少なくともタスクが増えて納期が固定なら残業して終わらせるしかないと私は考えていた。しかし、開発のトップは計画を延期すべきだと考えていることがわかった。延期してよいのだ。プランニングをしていてどんなに遅延があっても計画を絶対に変えようとしないので期限が必達なのだと私が勘違いしていた。おそらく単純にストーリーポイントから見積もっているスケジュールだから、個々のタスクが増えたり遅れたりしても、それらを全体の計画にどう調整していいのかが誰もわからないのだと推測する。これもストーリーポイントの弊害の1つではあるが。</description><content>&lt;p>0時に寝て5時過ぎに起きて7時半に起きた。&lt;/p>
&lt;h2 id="契約更新">契約更新&lt;/h2>
&lt;p>4月末が3ヶ月契約の区切りなので契約更新の打ち合わせをした。更新はするのだけど、契約条件が現状の働き方とあわなくなってきたのでその調整のための打ち合わせ。いくつか私の懸念やプロジェクト管理について話していて認知の歪みが起きている箇所を特定できた。いま開発の計画がストーリーポイントから見積もったスケジュールになっていて、これが私からみてデタラメな計画になっている。チームが習熟すれば精度が上がっていくというスクラムマスターの説だが、現時点ではデタラメな計画だから想定外のタスクや進捗遅れが起きてもそれが直接的に反映されない。タスクは増えるが、計画は何も変わらないということがすでにいくつも発生していて、それをおかしいと言っているのがメンバーの中で私だけという状況になっている。前に勤めていた会社でも全く同じことがあった。私だけが開発スケジュールの遅延を2ヶ月前に察していて、他のメンバーは締め切りの2週間前になって気付くということが過去にもあった。&lt;/p>
&lt;p>いまのプロジェクトが納期に対して実際に遅れるかどうかは納期が来ないとわからないが、少なくともタスクが増えて納期が固定なら残業して終わらせるしかないと私は考えていた。しかし、開発のトップは計画を延期すべきだと考えていることがわかった。延期してよいのだ。プランニングをしていてどんなに遅延があっても計画を絶対に変えようとしないので期限が必達なのだと私が勘違いしていた。おそらく単純にストーリーポイントから見積もっているスケジュールだから、個々のタスクが増えたり遅れたりしても、それらを全体の計画にどう調整していいのかが誰もわからないのだと推測する。これもストーリーポイントの弊害の1つではあるが。&lt;/p></content></item><item><title>カスタムドメインの設定</title><link>/diary/posts/2022/0403/</link><pubDate>Sun, 03 Apr 2022 10:32:38 +0900</pubDate><guid>/diary/posts/2022/0403/</guid><description>3時に寝て7時半に起きた。前日の深夜にオフィスの掃除をしてた。シェアオフィスなので掃除機をかけると音がうるさくて周りに迷惑なので誰もいない時間帯を見計らって行う必要がある。
逆イールド 会社を経営する上で経済の状況は大きな影響を受けるので機をみて経済の勉強もしている。直近40年近くの統計では、米国債金利において、2年債の金利が10年債の金利を追い越してしまう現象が発生した場合、その1年後ぐらいに景気後退期がやってくる。この現象を 逆イールド と呼ぶ。
なぜ逆イールドが発生すると景気後退となるのか。国債とは政府の借金。金融機関、年金、個人、海外などが貸している。金利は複雑で様々な要因で決まるので一概に言えないが、大雑把にまとめると経済の力や金融政策、世のおカネの量で決まる。政策金利によって3ヶ月債や2年債は大きく影響を受ける。利上げを急ぎでやろうとしている理由は高いインフレがある。米国は約40年ぶりの高インフレとなっている。FRB は約2%のインフレを目標としているが、現状は遥かに高い水準になるので金利を上げてインフレを抑制しようとしている。FRB は次の2つの使命を負っている。
物価の安定 雇用の最大化 いま物価が急上昇しているため、このまま金融緩和を続けるとさらに物価が上昇して悪い影響を及ぼしてしまう。いまは金融緩和を縮小して利上げをしていく必要がある。しかし、利上げは景気に対して悪影響となる可能性がある。どのぐらい利上げすればよいのかは実際には誰もわからない。最悪の状況として次がある。
スタグフレーション: 高インフレのまま景気が減速する現象 スタグフレーションが発生すると経済対策や金融政策で対応しづらい非常にまずい状況となる。経済学者によっても意見が分かれるので、まだスタグフレーションが起こるとは限らない。しかし、起こる可能性があるという見方も出てきているらしい。
英語のテックブログ開設 先日作った backlog-github-integration-action の記事を書くことにした。会社のプロダクトとして作ったツールで汎用的なものや業務として保守していくものは積極的にアピールしていきたい。基本的に私は日本市場をあてにしていないのと、せっかく会社を作ったのだし、海外の会社と取り引きできるようになりたいという野望もある。プロダクトの情報発信は英語が基本で、余裕があったら日本語も書くといった優先度でやっていく。
少し前にたまたま hashnode がイケてるというのをタイムラインでみかけたのを思い出した。せっかくなので調べてみたら、どうも Custom Domain を無償、且つお手軽に設定できるのが訴求点になっているらしい。カスタムドメインを使うと、url に統合性があってカッコいいという以外にも信頼できるドメインに対して SEO が行われるため、優良な記事を書いていると自社ドメインの信頼があがっていくといったメリットがある。コストがかからないならカスタムドメインを使わない理由は何もない。そして設定したものが次になる。
https://blog.kazamori.jp/ ネームサーバーにカスタムドメインの設定をしていて間違って少しはまった。
間違った設定
cname blog hashnode.network 正しい設定
cname blog hashnode.network. 最後にドット . が必要になる。これで blog.kazamori.jp の名前解決が hashnode.network として解決される。
$ dig blog.kazamori.jp ... ;; ANSWER SECTION: blog.kazamori.jp. 198 IN CNAME hashnode.network. hashnode.network. 46 IN A 76.76.21.21 CNAME レコードを滅多に設定しないのでドットで終わらないといけない規則を忘れてた。設定後、dns の propagation に最大24時間ほどかかる。世界のどこからでもアクセスできるようになるには24時間ぐらいかかるかもしれないけど、ローカルで動作検証するなら数分で反映されてた。</description><content>&lt;p>3時に寝て7時半に起きた。前日の深夜にオフィスの掃除をしてた。シェアオフィスなので掃除機をかけると音がうるさくて周りに迷惑なので誰もいない時間帯を見計らって行う必要がある。&lt;/p>
&lt;h2 id="逆イールド">逆イールド&lt;/h2>
&lt;p>会社を経営する上で経済の状況は大きな影響を受けるので機をみて経済の勉強もしている。直近40年近くの統計では、米国債金利において、2年債の金利が10年債の金利を追い越してしまう現象が発生した場合、その1年後ぐらいに景気後退期がやってくる。この現象を &lt;strong>逆イールド&lt;/strong> と呼ぶ。&lt;/p>
&lt;p>なぜ逆イールドが発生すると景気後退となるのか。国債とは政府の借金。金融機関、年金、個人、海外などが貸している。金利は複雑で様々な要因で決まるので一概に言えないが、大雑把にまとめると経済の力や金融政策、世のおカネの量で決まる。政策金利によって3ヶ月債や2年債は大きく影響を受ける。利上げを急ぎでやろうとしている理由は高いインフレがある。米国は約40年ぶりの高インフレとなっている。FRB は約2%のインフレを目標としているが、現状は遥かに高い水準になるので金利を上げてインフレを抑制しようとしている。FRB は次の2つの使命を負っている。&lt;/p>
&lt;ul>
&lt;li>物価の安定&lt;/li>
&lt;li>雇用の最大化&lt;/li>
&lt;/ul>
&lt;p>いま物価が急上昇しているため、このまま金融緩和を続けるとさらに物価が上昇して悪い影響を及ぼしてしまう。いまは金融緩和を縮小して利上げをしていく必要がある。しかし、利上げは景気に対して悪影響となる可能性がある。どのぐらい利上げすればよいのかは実際には誰もわからない。最悪の状況として次がある。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>スタグフレーション&lt;/strong>: 高インフレのまま景気が減速する現象&lt;/li>
&lt;/ul>
&lt;p>スタグフレーションが発生すると経済対策や金融政策で対応しづらい非常にまずい状況となる。経済学者によっても意見が分かれるので、まだスタグフレーションが起こるとは限らない。しかし、起こる可能性があるという見方も出てきているらしい。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/apeDeUAXMdk" allowfullscreen title="よくわかる「逆イールド」　景気後退のシグナル（後藤達也）">&lt;/iframe>
&lt;/div>
&lt;h2 id="英語のテックブログ開設">英語のテックブログ開設&lt;/h2>
&lt;p>先日作った &lt;a href="/diary/diary/posts/2022/0327/#backlog-と-github-のインテグレーション-action">backlog-github-integration-action&lt;/a> の記事を書くことにした。会社のプロダクトとして作ったツールで汎用的なものや業務として保守していくものは積極的にアピールしていきたい。基本的に私は日本市場をあてにしていないのと、せっかく会社を作ったのだし、海外の会社と取り引きできるようになりたいという野望もある。プロダクトの情報発信は英語が基本で、余裕があったら日本語も書くといった優先度でやっていく。&lt;/p>
&lt;p>少し前にたまたま &lt;a href="https://hashnode.com/">hashnode&lt;/a> がイケてるというのをタイムラインでみかけたのを思い出した。せっかくなので調べてみたら、どうも &lt;a href="https://support.hashnode.com/docs/mapping-domain">Custom Domain&lt;/a> を無償、且つお手軽に設定できるのが訴求点になっているらしい。カスタムドメインを使うと、url に統合性があってカッコいいという以外にも信頼できるドメインに対して SEO が行われるため、優良な記事を書いていると自社ドメインの信頼があがっていくといったメリットがある。コストがかからないならカスタムドメインを使わない理由は何もない。そして設定したものが次になる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.kazamori.jp/">https://blog.kazamori.jp/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ネームサーバーにカスタムドメインの設定をしていて間違って少しはまった。&lt;/p>
&lt;p>間違った設定&lt;/p>
&lt;pre tabindex="0">&lt;code>cname blog hashnode.network
&lt;/code>&lt;/pre>&lt;p>正しい設定&lt;/p>
&lt;pre tabindex="0">&lt;code>cname blog hashnode.network.
&lt;/code>&lt;/pre>&lt;p>最後にドット &lt;code>.&lt;/code> が必要になる。これで blog.kazamori.jp の名前解決が hashnode.network として解決される。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ dig blog.kazamori.jp
...
;; ANSWER SECTION:
blog.kazamori.jp. 198 IN CNAME hashnode.network.
hashnode.network. 46 IN A 76.76.21.21
&lt;/code>&lt;/pre>&lt;/div>&lt;p>CNAME レコードを滅多に設定しないのでドットで終わらないといけない規則を忘れてた。設定後、dns の propagation に最大24時間ほどかかる。世界のどこからでもアクセスできるようになるには24時間ぐらいかかるかもしれないけど、ローカルで動作検証するなら数分で反映されてた。&lt;/p></content></item><item><title>jjug の cfp に応募した</title><link>/diary/posts/2022/0402/</link><pubDate>Sat, 02 Apr 2022 09:46:52 +0900</pubDate><guid>/diary/posts/2022/0402/</guid><description>0時に寝て5時に起きた。
ストレッチ 今日の開脚幅は開始前161cmで、ストレッチ後164cmだった。先週とあまり変わらずといったところ。今日は腰の張りが強かった。トレーナーさんは左の張りが強いと言ってたんだけど、私は右の方が体感的に張りが強いように感じた。もう1年以上担当してくれたトレーナーさんが4月いっぱいで転勤になるらしい。社内制度で広島に最低でも半年間は転勤になるという。広島が終わっても神戸に戻ってくるとは限らず、また別の地域へ転勤になる可能性もあるという。きっと優秀な社員だから転勤するんだろうなと思えた。20代後半ぐらいの若もので個人でも筋トレが好きでボディービルダーの大会などにも参加していると聞いた。趣味と業務が近いのでトレーナーとしてのパフォーマンスも高いのだろうと推測する。若い人はなんでも挑戦して経験した方がよいと私も応援した。5月から後任で別のトレーナーに変わる。新しいトレーナーさんに変わることで前のトレーナーさんとの相対評価もできる。これはこれで楽しみでもある。
JJUG CCC 2022 Spring の cfp 応募 本当は締め切りが先週末だったんだけど、募集期間が1週間伸びたのでちょうど作ったばかりのツールで応募してみた。今回はオンラインイベントなので事前にビデオを撮って送るらしい。当日は質疑応答の時間 (10分間) だけオンラインで参加すればよいという感じ。地方在住で物理的に東京に行けないという開発者にも発表しやすいと言えるかもしれない。内容的には初心者向けなので GitHub Actions というネタがいまどきどのぐらい参加者の関心を集めるか、他のプロポーザルとの競争がどのぐらいか次第かな。
Java で作るカスタム GitHub Actions 生田川公園のお花見予定 cfp を投稿して14時頃に気分転換がてら生田川公園に再訪した。今日は絶好のお花見日和なのでどのぐらい人がいるかを調べるために行ってきた。昨日の夜よりはたくさん人がいて、そこそこ賑わっていた。だいたいの桜の木の下は集団にスペースをとられていた。とはいえ、お花見をするためのスペースが全くないというわけでもないのでよい場所を気にしないなら普通に10人ぐらいの集団でお花見はできそう。個人的には川に入って川遊びしているのが楽しそうにみえた。公園管理者に怒られないならちょっとやってみたい。
帰ってきてから 三宮.dev のすみよしさんと連絡をとって4月10日(日) 11:00 - 16:00 で開催することに決めた。来週中には大半が散ってしまうかも？だけど、実際にやってみてイベント開催の経験値を積むリハーサルの意図もある。bizpy はもはや全く神戸のコミュニティではなくなってしまったけれど、またいつか盛り返す可能性もあるかもしれない。その日のために素振りはしておきたい。</description><content>&lt;p>0時に寝て5時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前161cmで、ストレッチ後164cmだった。先週とあまり変わらずといったところ。今日は腰の張りが強かった。トレーナーさんは左の張りが強いと言ってたんだけど、私は右の方が体感的に張りが強いように感じた。もう1年以上担当してくれたトレーナーさんが4月いっぱいで転勤になるらしい。社内制度で広島に最低でも半年間は転勤になるという。広島が終わっても神戸に戻ってくるとは限らず、また別の地域へ転勤になる可能性もあるという。きっと優秀な社員だから転勤するんだろうなと思えた。20代後半ぐらいの若もので個人でも筋トレが好きでボディービルダーの大会などにも参加していると聞いた。趣味と業務が近いのでトレーナーとしてのパフォーマンスも高いのだろうと推測する。若い人はなんでも挑戦して経験した方がよいと私も応援した。5月から後任で別のトレーナーに変わる。新しいトレーナーさんに変わることで前のトレーナーさんとの相対評価もできる。これはこれで楽しみでもある。&lt;/p>
&lt;h2 id="jjug-ccc-2022-spring-の-cfp-応募">JJUG CCC 2022 Spring の cfp 応募&lt;/h2>
&lt;p>本当は締め切りが先週末だったんだけど、募集期間が1週間伸びたのでちょうど作ったばかりのツールで応募してみた。今回はオンラインイベントなので事前にビデオを撮って送るらしい。当日は質疑応答の時間 (10分間) だけオンラインで参加すればよいという感じ。地方在住で物理的に東京に行けないという開発者にも発表しやすいと言えるかもしれない。内容的には初心者向けなので GitHub Actions というネタがいまどきどのぐらい参加者の関心を集めるか、他のプロポーザルとの競争がどのぐらいか次第かな。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://fortee.jp/jjug-ccc-2022-spring/proposal/0c85f6b2-d44d-40c2-8e6d-ddc1fe821273">Java で作るカスタム GitHub Actions&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="生田川公園のお花見予定">生田川公園のお花見予定&lt;/h2>
&lt;p>cfp を投稿して14時頃に気分転換がてら生田川公園に再訪した。今日は絶好のお花見日和なのでどのぐらい人がいるかを調べるために行ってきた。昨日の夜よりはたくさん人がいて、そこそこ賑わっていた。だいたいの桜の木の下は集団にスペースをとられていた。とはいえ、お花見をするためのスペースが全くないというわけでもないのでよい場所を気にしないなら普通に10人ぐらいの集団でお花見はできそう。個人的には川に入って川遊びしているのが楽しそうにみえた。公園管理者に怒られないならちょっとやってみたい。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0402_park.jpg"/>
&lt;/figure>
&lt;p>帰ってきてから &lt;a href="https://sannomiya-dev.netlify.app/">三宮.dev&lt;/a> のすみよしさんと連絡をとって4月10日(日) 11:00 - 16:00 で開催することに決めた。来週中には大半が散ってしまうかも？だけど、実際にやってみてイベント開催の経験値を積むリハーサルの意図もある。bizpy はもはや全く神戸のコミュニティではなくなってしまったけれど、またいつか盛り返す可能性もあるかもしれない。その日のために素振りはしておきたい。&lt;/p></content></item><item><title>お花見の場所探し</title><link>/diary/posts/2022/0401/</link><pubDate>Fri, 01 Apr 2022 15:55:25 +0900</pubDate><guid>/diary/posts/2022/0401/</guid><description>0時に寝て5時過ぎに起きた。
spring framework の脆弱性対応 起きてタイムライン眺めてたら spring framework の脆弱性の公式アナウンスが出ていたのですぐに準備してオフィス行って7時前から脆弱性対応の作業をしてた。
Spring Framework RCE, Early Announcement 大学の研究室にいた頃、root staff と呼ばれるシステム管理者をやっていた。研究室のネットワークをすべて freebsd で自分たちで構築していたので os の脆弱性が公表されると研究室のすべての os のパッチ適用をやっていた。具体的にはパッチの当たった kernel をビルドして再起動するといった作業。
それを2年間やっていたせいか、脆弱性情報が公開されるとすぐに対応する癖みたいなものがついた。7時前から作業して検証して7時11分に PR を作成した。レビューアは誰も作業を始めてないけど。金曜日は非稼働日なので私が作業しなくてもよいのだけど、ここまでやったら安心して他の作業に移ることができた。
生田川公園の桜 地元のコミュニティでオミクロン株の感染が落ち着いてきたのでリアルお花見をしたいねという話題があがっている。私自身、お花見に毎年参加するような人間でもないけれど、たしかにコロナ禍になってからはお花見やってないだろうし、個人的にも数年はお花見やってないからやってもいいかなという気持ちにはなった。近場だと 生田川公園 という場所があり、特筆するほど桜がとてもきれいという場所ではないが、一応は桜があって、お花見するスペースもあって、形としては成り立つようなところ。お仕事を終えてから自転車で開花状況を見に行った。19時頃に行って寒くても何組かはお花見している集団はいた。開花状況は7-8割といったところかな。今週末から来週にかけてぐらいが見頃だと思う。</description><content>&lt;p>0時に寝て5時過ぎに起きた。&lt;/p>
&lt;h2 id="spring-framework-の脆弱性対応">spring framework の脆弱性対応&lt;/h2>
&lt;p>起きてタイムライン眺めてたら spring framework の脆弱性の公式アナウンスが出ていたのですぐに準備してオフィス行って7時前から脆弱性対応の作業をしてた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement">Spring Framework RCE, Early Announcement&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>大学の研究室にいた頃、root staff と呼ばれるシステム管理者をやっていた。研究室のネットワークをすべて freebsd で自分たちで構築していたので os の脆弱性が公表されると研究室のすべての os のパッチ適用をやっていた。具体的にはパッチの当たった kernel をビルドして再起動するといった作業。&lt;/p>
&lt;p>それを2年間やっていたせいか、脆弱性情報が公開されるとすぐに対応する癖みたいなものがついた。7時前から作業して検証して7時11分に PR を作成した。レビューアは誰も作業を始めてないけど。金曜日は非稼働日なので私が作業しなくてもよいのだけど、ここまでやったら安心して他の作業に移ることができた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0401_springframework.png"/>
&lt;/figure>
&lt;h2 id="生田川公園の桜">生田川公園の桜&lt;/h2>
&lt;p>地元のコミュニティでオミクロン株の感染が落ち着いてきたのでリアルお花見をしたいねという話題があがっている。私自身、お花見に毎年参加するような人間でもないけれど、たしかにコロナ禍になってからはお花見やってないだろうし、個人的にも数年はお花見やってないからやってもいいかなという気持ちにはなった。近場だと &lt;a href="https://www.kobe-park.or.jp/kouen_keikaku/2018/11/05/%E7%94%9F%E7%94%B0%E5%B7%9D%E5%85%AC%E5%9C%92/">生田川公園&lt;/a> という場所があり、特筆するほど桜がとてもきれいという場所ではないが、一応は桜があって、お花見するスペースもあって、形としては成り立つようなところ。お仕事を終えてから自転車で開花状況を見に行った。19時頃に行って寒くても何組かはお花見している集団はいた。開花状況は7-8割といったところかな。今週末から来週にかけてぐらいが見頃だと思う。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2022/0401_park1.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2022/0401_park2.jpg"/>
&lt;/figure>
&lt;/p></content></item><item><title>第3期の年度末</title><link>/diary/posts/2022/0331/</link><pubDate>Thu, 31 Mar 2022 12:46:22 +0900</pubDate><guid>/diary/posts/2022/0331/</guid><description>0時に寝て6時に起きた。昨日に引き続き、日中はフロントエンドのバグ修正をやって午後は本番リリースの守り神みたいなことをやって、夜は請求書を作ってた。
年度末 今年度最後の請求処理をして本当に四半期が終わるんだなぁとしみじみと感傷に浸ってた。財務の試算表と貸借対照表を軽く眺めてた。今期は赤字なので別によいところはないんだけど、また振り返りをやろうとは考えている。貸借対照表を「ちんしゃくたいしょうひょう」と読んでいて間違ってますよとツッコミもらった。なぜか素で間違えた。お仕事終えてから焼き鳥屋さんに寄ってマスターと2時間ほど雑談して帰ってきた。</description><content>&lt;p>0時に寝て6時に起きた。昨日に引き続き、日中はフロントエンドのバグ修正をやって午後は本番リリースの守り神みたいなことをやって、夜は請求書を作ってた。&lt;/p>
&lt;h2 id="年度末">年度末&lt;/h2>
&lt;p>今年度最後の請求処理をして本当に四半期が終わるんだなぁとしみじみと感傷に浸ってた。財務の試算表と貸借対照表を軽く眺めてた。今期は赤字なので別によいところはないんだけど、また振り返りをやろうとは考えている。貸借対照表を「ちんしゃくたいしょうひょう」と読んでいて間違ってますよとツッコミもらった。なぜか素で間違えた。お仕事終えてから焼き鳥屋さんに寄ってマスターと2時間ほど雑談して帰ってきた。&lt;/p></content></item><item><title>暇つぶしのフロントエンド開発</title><link>/diary/posts/2022/0330/</link><pubDate>Wed, 30 Mar 2022 07:18:47 +0900</pubDate><guid>/diary/posts/2022/0330/</guid><description>0時に寝て4時に起きた。起きてから sns のタイムラインを眺めてぼーっとしてた。
フロントエンド開発 先週からタスクがなくて (社員さんが多忙で今スプリントのタスク洗い出しができていない) だらだらしていて、来週から引き取ろうと思っている cdk 周りのインフラ構築の調査を事前に始めようかと考えていた。そういう話を社員さんにしたらフロントエンドの開発を手伝ってほしいと言われた。
種々雑多なフロントエンドの ui に関する改善要望が十数個あがっていて対応できないのでちょっとでもやってほしいという依頼。少し前に 初めてフロントエンド開発 に着手して、4つほど PR を送ってマージされた。にも関わらず、社員さんに「開発環境の作り方わかりますか？」と質問を受けた。ちょっときょとんとして「前に PR をいくつか送りましたが、なにか他にやらないといけないことがありますか？」と質問に質問で返した。社員さんもテンパっているのか、過去に私がフロントエンドの PR を出していたことを認識してなかったみたい。vue.js も nuxt も全くわからないので開発スタイルも以前のまま。
全然わからない。俺たちは雰囲気で開発している。
5つほど ui 改善のチケットを fix した。難しいことはわからないので私でもできそうな簡単なものから選択して直していった。そしたら、翌日のデイリースクラムで業務の人たちからすごい勢いで直してくれてるみたいにめっちゃ感謝された。もともと社員さんが他のタスクに忙しくていまできないって業務の人たちに前日断っていたタスク群を、いま手持ちのタスクが何もないので暇を持て余してますという私が fix しているんだから、世の中、訳がわからない。私は普段バックエンド開発している人間だから業務の人たちに感謝されることはおろか、やっていることさえ理解されない方なんだけど、たまに ui とか改善すると感謝されて嬉しいという気持ちは他の開発者よりも強いかもしれない。</description><content>&lt;p>0時に寝て4時に起きた。起きてから sns のタイムラインを眺めてぼーっとしてた。&lt;/p>
&lt;h2 id="フロントエンド開発">フロントエンド開発&lt;/h2>
&lt;p>先週からタスクがなくて (社員さんが多忙で今スプリントのタスク洗い出しができていない) だらだらしていて、来週から引き取ろうと思っている cdk 周りのインフラ構築の調査を事前に始めようかと考えていた。そういう話を社員さんにしたらフロントエンドの開発を手伝ってほしいと言われた。&lt;/p>
&lt;p>種々雑多なフロントエンドの ui に関する改善要望が十数個あがっていて対応できないのでちょっとでもやってほしいという依頼。少し前に &lt;a href="/diary/diary/posts/2022/0315/##フロントエンド開発">初めてフロントエンド開発&lt;/a> に着手して、4つほど PR を送ってマージされた。にも関わらず、社員さんに「開発環境の作り方わかりますか？」と質問を受けた。ちょっときょとんとして「前に PR をいくつか送りましたが、なにか他にやらないといけないことがありますか？」と質問に質問で返した。社員さんもテンパっているのか、過去に私がフロントエンドの PR を出していたことを認識してなかったみたい。vue.js も nuxt も全くわからないので開発スタイルも以前のまま。&lt;/p>
&lt;blockquote>
&lt;p>全然わからない。俺たちは雰囲気で開発している。&lt;/p>
&lt;/blockquote>
&lt;p>5つほど ui 改善のチケットを fix した。難しいことはわからないので私でもできそうな簡単なものから選択して直していった。そしたら、翌日のデイリースクラムで業務の人たちからすごい勢いで直してくれてるみたいにめっちゃ感謝された。もともと社員さんが他のタスクに忙しくていまできないって業務の人たちに前日断っていたタスク群を、いま手持ちのタスクが何もないので暇を持て余してますという私が fix しているんだから、世の中、訳がわからない。私は普段バックエンド開発している人間だから業務の人たちに感謝されることはおろか、やっていることさえ理解されない方なんだけど、たまに ui とか改善すると感謝されて嬉しいという気持ちは他の開発者よりも強いかもしれない。&lt;/p></content></item><item><title>backlog の認可の仕組み</title><link>/diary/posts/2022/0329/</link><pubDate>Tue, 29 Mar 2022 07:19:00 +0900</pubDate><guid>/diary/posts/2022/0329/</guid><description>0時に寝て6時に起きた。
backlog の oauth 2.0 の仕組み ユーザー単位の API キーの他、oauth 2.0 の認可の仕組みもある。OAuth Grant Types は Authorization Code と Refresh Token の2つをサポートしている。
https://developer.nulab.com/ja/docs/backlog/auth/ https://backlog.com/developer/applications/ 手順はざっくりこんな感じ。
開発者向けのサイトからアプリケーションを作成して認可コードのリクエストを送る。
https://YOUR-SPACE.backlog.com/OAuth2AccessRequest.action?response_type=code&amp;amp;client_id=xxx&amp;amp;redirect_uri=http://localhost:18080/callback リダイレクト先に query='code=zzz' な認可コードが届く。それを使ってアクセストークンを取得する。
{&amp;#39;access_token&amp;#39;: &amp;#39;xxx&amp;#39;, &amp;#39;expires_in&amp;#39;: 3599, &amp;#39;refresh_token&amp;#39;: &amp;#39;xxx&amp;#39;, &amp;#39;token_type&amp;#39;: &amp;#39;Bearer&amp;#39;} 有効期限が1時間のアクセストークンを取得できる。次のようにして認証をパスできる。
$ curl -s -H &amp;#34;Authorization: Bearer xxx&amp;#34; &amp;#39;https://YOUR-SPACE.backlog.com/api/v2/space&amp;#39; 基本的にはユーザー単位の認証しかなくてアプリケーションアカウントの運用はできないみたい。backlog の課金プランをみると、基本的にはユーザー無制限っぽいのでアプリケーションアカウントを一般ユーザーで作成すれば、運用上問題にならないからアプリケーションアカウントを設けていないのではないかと思う。お手伝い先の管理者にインテグレーション向けの専用ユーザーを作成して API キーを github の secrets に登録してほしいという依頼を出した。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="backlog-の-oauth-20-の仕組み">backlog の oauth 2.0 の仕組み&lt;/h2>
&lt;p>ユーザー単位の API キーの他、oauth 2.0 の認可の仕組みもある。&lt;a href="https://oauth.net/2/grant-types/">OAuth Grant Types&lt;/a> は Authorization Code と Refresh Token の2つをサポートしている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.nulab.com/ja/docs/backlog/auth/">https://developer.nulab.com/ja/docs/backlog/auth/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://backlog.com/developer/applications/">https://backlog.com/developer/applications/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>手順はざっくりこんな感じ。&lt;/p>
&lt;p>開発者向けのサイトからアプリケーションを作成して認可コードのリクエストを送る。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">https://YOUR-SPACE.backlog.com/OAuth2AccessRequest.action?response_type&lt;span style="color:#f92672">=&lt;/span>code&amp;amp;client_id&lt;span style="color:#f92672">=&lt;/span>xxx&amp;amp;redirect_uri&lt;span style="color:#f92672">=&lt;/span>http://localhost:18080/callback
&lt;/code>&lt;/pre>&lt;/div>&lt;p>リダイレクト先に &lt;code>query='code=zzz'&lt;/code> な認可コードが届く。それを使ってアクセストークンを取得する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;access_token&amp;#39;:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;xxx&amp;#39;,&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;expires_in&amp;#39;:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">3599,&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;refresh_token&amp;#39;:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;xxx&amp;#39;,&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;token_type&amp;#39;:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;Bearer&amp;#39;&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>有効期限が1時間のアクセストークンを取得できる。次のようにして認証をパスできる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ curl -s -H &lt;span style="color:#e6db74">&amp;#34;Authorization: Bearer xxx&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;https://YOUR-SPACE.backlog.com/api/v2/space&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>基本的にはユーザー単位の認証しかなくてアプリケーションアカウントの運用はできないみたい。backlog の課金プランをみると、基本的にはユーザー無制限っぽいのでアプリケーションアカウントを一般ユーザーで作成すれば、運用上問題にならないからアプリケーションアカウントを設けていないのではないかと思う。お手伝い先の管理者にインテグレーション向けの専用ユーザーを作成して API キーを github の secrets に登録してほしいという依頼を出した。&lt;/p></content></item><item><title>backlog-github-integration-action を運用し始めた</title><link>/diary/posts/2022/0328/</link><pubDate>Mon, 28 Mar 2022 17:15:41 +0900</pubDate><guid>/diary/posts/2022/0328/</guid><description>2時に寝て6時半に起きた。
backlog と github のインテグレーション action の試験運用 昨日作った backlog-github-integration-action を早速お手伝い先の github リポジトリと backlog に導入した。いま暇な時期というのもあって、誰からもクレームが出なかった。この閑散とした間隙を「乗るしかない、このビッグウェーブに」というノリで導入して運用して既成事実を作る。ses でお手伝いに行って課題管理のツールを作っているというのは頭おかしいと思うけど、周りからクレームが出る前に電光石火で運用にのせてしまう。実際に運用で使うといくつかバグがあって、いま latest の docker イメージを使ってカスタム action が動いている。バグがあったら修正して、./gradlew jib (docker push) で新しい docker イメージを gihtub packages に push して、不具合があった pr のジョブを再実行すれば再現環境でテストもできる。いくつかバグ修正をした。実際の運用のデータを使うとばらばらとバグがみつかる。運用で実際に使われていないツールはダメ、絶対。</description><content>&lt;p>2時に寝て6時半に起きた。&lt;/p>
&lt;h2 id="backlog-と-github-のインテグレーション-action-の試験運用">backlog と github のインテグレーション action の試験運用&lt;/h2>
&lt;p>昨日作った backlog-github-integration-action を早速お手伝い先の github リポジトリと backlog に導入した。いま暇な時期というのもあって、誰からもクレームが出なかった。この閑散とした間隙を「乗るしかない、このビッグウェーブに」というノリで導入して運用して既成事実を作る。ses でお手伝いに行って課題管理のツールを作っているというのは頭おかしいと思うけど、周りからクレームが出る前に電光石火で運用にのせてしまう。実際に運用で使うといくつかバグがあって、いま latest の docker イメージを使ってカスタム action が動いている。バグがあったら修正して、&lt;code>./gradlew jib&lt;/code> (docker push) で新しい docker イメージを gihtub packages に push して、不具合があった pr のジョブを再実行すれば再現環境でテストもできる。いくつかバグ修正をした。実際の運用のデータを使うとばらばらとバグがみつかる。運用で実際に使われていないツールはダメ、絶対。&lt;/p></content></item><item><title>backlog-github-integration-action を作った</title><link>/diary/posts/2022/0327/</link><pubDate>Sun, 27 Mar 2022 07:41:04 +0900</pubDate><guid>/diary/posts/2022/0327/</guid><description>0時に寝て7時に起きた。丸一日開発していた。構想1ヶ月、実装2日といったところか。
backlog と github のインテグレーション action お手伝い先が backlog を課題管理システムとして使っている。backlog は git 連携 の機能をもっているが、これは nulab 社のクラウド上に git リポジトリを構築したものと連携する機能であって、github と連携する機能ではない。そこで github と backlog と連携するためのカスタム github action を作った。
https://github.com/kazamori/backlog-github-integration-action カスタム github action を java で開発するのは普通にはやらないと思うが、いくつか理由があってお手伝い先が java しかできないというのと、nulab 社が提供している公式クライアント nulab/backlog4j が java しかないから。最初は go で実装しようと思って go のクライアントを試したんだけど、サンプルコードをかいたら一部の処理でエラーになって、そのエラーがよくわからなくてやる気がなくなってしまった。最新の rest api の仕様にそってメンテナンスされていないのかな？と思って、やっぱり公式クライアントしかないなと。他にも次のライブラリを使っている。
設定ファイル: https://github.com/lightbend/config コマンドライン解析: https://github.com/remkop/picocli github クライアント: https://github.com/hub4j/github-api これまでは commons-cli を使ってきたけど、サブコマンドの機能を提供していない。もうメンテされてないかも？サブコマンドの機能をもつ argument parser がほしくて picocli を選択した。初めて使っていて、実装してみたらわりと私の好みでよく出来ていると思う。今後は cli ライブラリとして picocli を使っていこうと思う。</description><content>&lt;p>0時に寝て7時に起きた。丸一日開発していた。構想1ヶ月、実装2日といったところか。&lt;/p>
&lt;h2 id="backlog-と-github-のインテグレーション-action">backlog と github のインテグレーション action&lt;/h2>
&lt;p>お手伝い先が &lt;a href="https://backlog.com/ja/">backlog&lt;/a> を課題管理システムとして使っている。backlog は &lt;a href="https://support-ja.backlog.com/hc/ja/sections/360005425774-Git">git 連携&lt;/a> の機能をもっているが、これは nulab 社のクラウド上に git リポジトリを構築したものと連携する機能であって、github と連携する機能ではない。そこで github と backlog と連携するためのカスタム github action を作った。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/backlog-github-integration-action">https://github.com/kazamori/backlog-github-integration-action&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>カスタム github action を java で開発するのは普通にはやらないと思うが、いくつか理由があってお手伝い先が java しかできないというのと、nulab 社が提供している公式クライアント &lt;a href="https://github.com/nulab/backlog4j">nulab/backlog4j&lt;/a> が java しかないから。最初は go で実装しようと思って go のクライアントを試したんだけど、サンプルコードをかいたら一部の処理でエラーになって、そのエラーがよくわからなくてやる気がなくなってしまった。最新の rest api の仕様にそってメンテナンスされていないのかな？と思って、やっぱり公式クライアントしかないなと。他にも次のライブラリを使っている。&lt;/p>
&lt;ul>
&lt;li>設定ファイル: &lt;a href="https://github.com/lightbend/config">https://github.com/lightbend/config&lt;/a>&lt;/li>
&lt;li>コマンドライン解析: &lt;a href="https://github.com/remkop/picocli">https://github.com/remkop/picocli&lt;/a>&lt;/li>
&lt;li>github クライアント: &lt;a href="https://github.com/hub4j/github-api">https://github.com/hub4j/github-api&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>これまでは commons-cli を使ってきたけど、サブコマンドの機能を提供していない。もうメンテされてないかも？サブコマンドの機能をもつ argument parser がほしくて picocli を選択した。初めて使っていて、実装してみたらわりと私の好みでよく出来ていると思う。今後は cli ライブラリとして picocli を使っていこうと思う。&lt;/p></content></item><item><title>まん延防止等重点措置解除後の飲み会</title><link>/diary/posts/2022/0326/</link><pubDate>Sat, 26 Mar 2022 09:01:26 +0900</pubDate><guid>/diary/posts/2022/0326/</guid><description>0時に寝て2時に起きて5時に起きた。日中は昨日から着手したカスタム github action の開発をしていた。
ストレッチ 今日の開脚幅は開始前161cmで、ストレッチ後165cmだった。今日は右股関節の違和感と左の腰の張りが強かった。今週は少しだけストレッチをやった。お仕事が落ち着いてきて次の課題への谷間で気力が削がれていてメリハリがなくなっている。また生活を見直しつつ運動やストレッチに時間を割くようにしていきたい。
会員制バーで雑談 1月に行って からの再訪。前回はまん延防止等重点措置が実施される前だったのでお客さんはうちら2人だけだった。今回は解除された直後だったせいか、うちらの他に4人お客さんがいた。バーのマスターと友だちというわけではないけど、同じ経営者として経営がうまくいくといいなと思ってしまうのでお客さんが入っていると嬉しく思う。地域コミュニティを主催しているすみよしさんと一緒に行ってきた。今回はコースではなく、適当に料理も頼みながら普通に飲んでた。電話で予約をとったときに食べものについて確認したせいか、マスターも気をきかせて前菜を用意してくれていたみたい。前菜とパスタとおつまみでわりとお腹がふくれて、あとはお酒を飲んでた。
すみよしさんとは2020年から勉強会に参加したりしていたのでもう2年ぐらいの付き合いになる。わりと仲良くなってコミュニティの在り方とか、神戸界隈のベンチャー情報とか、新しい技術のあれこれとかを話したりしている。飲みながらざっくばらんにそういった雑談をしていた。</description><content>&lt;p>0時に寝て2時に起きて5時に起きた。日中は昨日から着手したカスタム github action の開発をしていた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前161cmで、ストレッチ後165cmだった。今日は右股関節の違和感と左の腰の張りが強かった。今週は少しだけストレッチをやった。お仕事が落ち着いてきて次の課題への谷間で気力が削がれていてメリハリがなくなっている。また生活を見直しつつ運動やストレッチに時間を割くようにしていきたい。&lt;/p>
&lt;h2 id="会員制バーで雑談">会員制バーで雑談&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0122/#会員制バーでふりかえり">1月に行って&lt;/a> からの再訪。前回はまん延防止等重点措置が実施される前だったのでお客さんはうちら2人だけだった。今回は解除された直後だったせいか、うちらの他に4人お客さんがいた。バーのマスターと友だちというわけではないけど、同じ経営者として経営がうまくいくといいなと思ってしまうのでお客さんが入っていると嬉しく思う。地域コミュニティを主催しているすみよしさんと一緒に行ってきた。今回はコースではなく、適当に料理も頼みながら普通に飲んでた。電話で予約をとったときに食べものについて確認したせいか、マスターも気をきかせて前菜を用意してくれていたみたい。前菜とパスタとおつまみでわりとお腹がふくれて、あとはお酒を飲んでた。&lt;/p>
&lt;p>すみよしさんとは2020年から勉強会に参加したりしていたのでもう2年ぐらいの付き合いになる。わりと仲良くなってコミュニティの在り方とか、神戸界隈のベンチャー情報とか、新しい技術のあれこれとかを話したりしている。飲みながらざっくばらんにそういった雑談をしていた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0326_dish.jpg"/>
&lt;/figure></content></item><item><title>カスタム github action 開発に着手</title><link>/diary/posts/2022/0325/</link><pubDate>Fri, 25 Mar 2022 18:35:34 +0900</pubDate><guid>/diary/posts/2022/0325/</guid><description>0時に寝て6時に起きた。
歯科検診 3ヶ月ごとの定期検診。本音は行くのが面倒くさいのだけど、こういう機会がないと検診に行かないので健康のためと思って通い続けている。基本的には30分強ぐらいで歯の掃除？みたいなことをやるだけ。下の歯の親知らずをまだ抜いていなくて、歯磨きでは届かないスポットがあって、そこが虫歯になりやすいのかな？3ヶ月に1回は掃除してもらえるのでたぶん役に立っているのだろう。今回は前にレントゲンをとって2年経ったので取り直ししましょうということで歯のレントゲンもとった。この歯医者さんにきてから2年経ったんだなということを実感した。よい歯医者さんだと思っているのでこれからも通うだろう。
カスタム github action 開発 前からやろうやろうと思っていて、他のことに時間を割かれてできていなかったことに着手した。久しぶりに gradle を触ったら使い方や設定方法を忘れてしまってドキュメントを読みながら再入門した。1つのアプリケーションであってもマルチプロジェクト構成がデフォルトになったみたい。これによってディレクトリの階層構造も変わっている。
Gradle のマルチプロジェクト機能を試す 今日のところは gradle 設定と main 関数と config のコードだけ書いた。java のバージョンも17を使うことにした。週末にある程度動くものを作りきれるかどうか。着手するまでが一番時間がかかので着手すればすぐにできそうな見通しはある。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="歯科検診">歯科検診&lt;/h2>
&lt;p>3ヶ月ごとの定期検診。本音は行くのが面倒くさいのだけど、こういう機会がないと検診に行かないので健康のためと思って通い続けている。基本的には30分強ぐらいで歯の掃除？みたいなことをやるだけ。下の歯の親知らずをまだ抜いていなくて、歯磨きでは届かないスポットがあって、そこが虫歯になりやすいのかな？3ヶ月に1回は掃除してもらえるのでたぶん役に立っているのだろう。今回は前にレントゲンをとって2年経ったので取り直ししましょうということで歯のレントゲンもとった。この歯医者さんにきてから2年経ったんだなということを実感した。よい歯医者さんだと思っているのでこれからも通うだろう。&lt;/p>
&lt;h2 id="カスタム-github-action-開発">カスタム github action 開発&lt;/h2>
&lt;p>前からやろうやろうと思っていて、他のことに時間を割かれてできていなかったことに着手した。久しぶりに gradle を触ったら使い方や設定方法を忘れてしまってドキュメントを読みながら再入門した。1つのアプリケーションであってもマルチプロジェクト構成がデフォルトになったみたい。これによってディレクトリの階層構造も変わっている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kazamori.jp/blogs/2020/06/30/gradle-multi-project/">Gradle のマルチプロジェクト機能を試す&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>今日のところは gradle 設定と main 関数と config のコードだけ書いた。java のバージョンも17を使うことにした。週末にある程度動くものを作りきれるかどうか。着手するまでが一番時間がかかので着手すればすぐにできそうな見通しはある。&lt;/p></content></item><item><title>spring boot の環境とログ設定</title><link>/diary/posts/2022/0324/</link><pubDate>Thu, 24 Mar 2022 07:54:35 +0900</pubDate><guid>/diary/posts/2022/0324/</guid><description>0時に寝て4時に起きて6時に起きた。
spring のプロファイル設定 spring の Profiles の仕組みを使って環境ごとの設定を作る。デプロイは k8s で管理しているため、spring boot の Externalized Configuration の仕組みを使って、環境変数から application.yml に定義された設定を書き換える。k8s は kustomize で管理していて prod, test, dev の3つの環境で任意の設定を記述できる。
問題はログ出力の設定を環境ごとに変えたい。具体的には datadog に連携されるログは構造化ログ (json lines) を、ローカルの開発ではコンソールログをみたい。Log4j Spring Boot Support によると、1つの設定ファイルに複数のプロファイル設定を記述できるようにもみえるけど、実際にやってみたらうまく動かなかった。xml ではなく yml を使っているせいかもしれないし、私の記述方法が誤っているのかもしれない。いずれにしても yml で複数のプロファイルを設定しているサンプルをみつけられなかった。
そこで Different Log4j2 Configurations per Spring Profile をみて、環境ごとにログ設定ファイルも分割することにした。application.yml には次のように記述する。
spring: profiles: active: dev logging: config: classpath:log4j2-${spring.profiles.active}.yml ローカル開発向けの lgo4j2-dev.yml は次のようになる。
Configuration: status: warn name: YAMLConfig appenders: Console: name: STDOUT target: SYSTEM_OUT PatternLayout: Pattern: &amp;#34;%d{yyyy-MM-dd HH:mm:ss.</description><content>&lt;p>0時に寝て4時に起きて6時に起きた。&lt;/p>
&lt;h2 id="spring-のプロファイル設定">spring のプロファイル設定&lt;/h2>
&lt;p>spring の &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.profiles">Profiles&lt;/a> の仕組みを使って環境ごとの設定を作る。デプロイは k8s で管理しているため、spring boot の &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config">Externalized Configuration&lt;/a> の仕組みを使って、環境変数から application.yml に定義された設定を書き換える。k8s は kustomize で管理していて prod, test, dev の3つの環境で任意の設定を記述できる。&lt;/p>
&lt;p>問題はログ出力の設定を環境ごとに変えたい。具体的には datadog に連携されるログは構造化ログ (json lines) を、ローカルの開発ではコンソールログをみたい。&lt;a href="https://logging.apache.org/log4j/2.x/log4j-spring-boot/index.html">Log4j Spring Boot Support&lt;/a> によると、1つの設定ファイルに複数のプロファイル設定を記述できるようにもみえるけど、実際にやってみたらうまく動かなかった。xml ではなく yml を使っているせいかもしれないし、私の記述方法が誤っているのかもしれない。いずれにしても yml で複数のプロファイルを設定しているサンプルをみつけられなかった。&lt;/p>
&lt;p>そこで &lt;a href="https://www.baeldung.com/spring-log4j2-config-per-profile">Different Log4j2 Configurations per Spring Profile&lt;/a> をみて、環境ごとにログ設定ファイルも分割することにした。application.yml には次のように記述する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">spring&lt;/span>:
&lt;span style="color:#f92672">profiles&lt;/span>:
&lt;span style="color:#f92672">active&lt;/span>: &lt;span style="color:#ae81ff">dev&lt;/span>
&lt;span style="color:#f92672">logging&lt;/span>:
&lt;span style="color:#f92672">config&lt;/span>: &lt;span style="color:#ae81ff">classpath:log4j2-${spring.profiles.active}.yml&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ローカル開発向けの lgo4j2-dev.yml は次のようになる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">Configuration&lt;/span>:
&lt;span style="color:#f92672">status&lt;/span>: &lt;span style="color:#ae81ff">warn&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">YAMLConfig&lt;/span>
&lt;span style="color:#f92672">appenders&lt;/span>:
&lt;span style="color:#f92672">Console&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">STDOUT&lt;/span>
&lt;span style="color:#f92672">target&lt;/span>: &lt;span style="color:#ae81ff">SYSTEM_OUT&lt;/span>
&lt;span style="color:#f92672">PatternLayout&lt;/span>:
&lt;span style="color:#f92672">Pattern&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;%d{yyyy-MM-dd HH:mm:ss.SSS}[%t]%-5level %logger{36} - %msg%n&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>k8s のマニフェストで環境変数を次のように定義すれば prod というプロファイルが設定される。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">my-service&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">template&lt;/span>:
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">containers&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">my-service&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">spring.profiles.active&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;prod&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>クラウド環境向けの log4j2-prod.yml は次のようになる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">Configuration&lt;/span>:
&lt;span style="color:#f92672">status&lt;/span>: &lt;span style="color:#ae81ff">warn&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">YAMLConfig&lt;/span>
&lt;span style="color:#f92672">appenders&lt;/span>:
&lt;span style="color:#f92672">Console&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">STDOUT&lt;/span>
&lt;span style="color:#f92672">target&lt;/span>: &lt;span style="color:#ae81ff">SYSTEM_OUT&lt;/span>
&lt;span style="color:#f92672">EcsLayout&lt;/span>:
&lt;span style="color:#f92672">serviceName&lt;/span>: &lt;span style="color:#ae81ff">my-service&lt;/span>
&lt;span style="color:#f92672">serviceNodeName&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>
&lt;span style="color:#f92672">includeMarkers&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">KeyValuePair&lt;/span>:
- &lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">type&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">app&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>暇な一日</title><link>/diary/posts/2022/0323/</link><pubDate>Wed, 23 Mar 2022 08:49:50 +0900</pubDate><guid>/diary/posts/2022/0323/</guid><description>23時に寝て3時に起きて5時までだらだらしててそのまま起きた。
タスクがない 開発のロードマップ全体の計画が遅れているのに私のタスクが全くないみたいな状態になっている。昨日、開発のリーダーにタスクがないので適当なタスクをアサインしてくださいとお願いして、すぐアサインされるんだと思ってたら1日待ってもアサインされなかった。現スプリントのチケットはたくさんあるのにアサイン可能なチケットがないのか、アサインしなくても他の開発者で間に合うのか、その両方なのか、開発チームは5人いて、そのうち4人が外部の協力会社になる。私の感覚的には2人は余剰でタイミングが悪いとタスクがないみたいな状況になる。期限までにやらないといけないことは溜まっているのに。
workrooms 雑談 月に1回の はんなりPython メタバース会 #4 に参加した。workrooms で雑談会するのもだいぶ慣れてきた。毎月1-2回はやっている。Brave というプライバシーを重視したブラウザがよいみたいな話しがあって、とくに Brave Talk のビデオ通話がよく出来ているという話しがあった。課金しないと4人まで参加できて、$7/月でプレミアムプランになるみたい。コミュニティ用途なら zoom から Brave Talk に移行した方がよいとまで言ってたので、そんなによいものなのか、また後日触ってみたいと思う。</description><content>&lt;p>23時に寝て3時に起きて5時までだらだらしててそのまま起きた。&lt;/p>
&lt;h2 id="タスクがない">タスクがない&lt;/h2>
&lt;p>開発のロードマップ全体の計画が遅れているのに私のタスクが全くないみたいな状態になっている。昨日、開発のリーダーにタスクがないので適当なタスクをアサインしてくださいとお願いして、すぐアサインされるんだと思ってたら1日待ってもアサインされなかった。現スプリントのチケットはたくさんあるのにアサイン可能なチケットがないのか、アサインしなくても他の開発者で間に合うのか、その両方なのか、開発チームは5人いて、そのうち4人が外部の協力会社になる。私の感覚的には2人は余剰でタイミングが悪いとタスクがないみたいな状況になる。期限までにやらないといけないことは溜まっているのに。&lt;/p>
&lt;h2 id="workrooms-雑談">workrooms 雑談&lt;/h2>
&lt;p>月に1回の &lt;a href="https://hannari-python.connpass.com/event/242619/">はんなりPython メタバース会 #4&lt;/a> に参加した。workrooms で雑談会するのもだいぶ慣れてきた。毎月1-2回はやっている。Brave というプライバシーを重視したブラウザがよいみたいな話しがあって、とくに &lt;a href="https://brave.com/ja/talk/">Brave Talk&lt;/a> のビデオ通話がよく出来ているという話しがあった。課金しないと4人まで参加できて、$7/月でプレミアムプランになるみたい。コミュニティ用途なら zoom から Brave Talk に移行した方がよいとまで言ってたので、そんなによいものなのか、また後日触ってみたいと思う。&lt;/p></content></item><item><title>イベント登壇のススメ</title><link>/diary/posts/2022/0322/</link><pubDate>Tue, 22 Mar 2022 08:08:08 +0900</pubDate><guid>/diary/posts/2022/0322/</guid><description>1時に寝て7時に起きた。今日も雨。雨降りの日が増えると春が来たなって感じがしてきた。
cfp のススメ 先日、過去に私が jjug ccc に登壇した資料を紹介していて、そう言えば jjug ccc とかいまぐらいの時期かな？と思って調べたら、ちょうど3月27日が cfp の締め切りになる。「ぼくのかんがえたさいきょうのでぷろい」は java アプリケーション開発の基本には沿っていないやり方なので発表したらおもしろいかもしれないと、slack に軽く書き込んだらわりといいねが付いたので社員さんに cfp 送ったら？と勧めた。その社員さんは島根県在住なのでリモートで登壇できるならいいかも？という話しになってイベントの要項を確認したらオンライン開催なので大丈夫そう。
今日がスクラムのプランニングだったのでチームに共有して業務として cfp を送るための工数も確保した。私が発表してもよいのだけど、なるべく若い人がイベントに登壇すべきだし、業務でやったことはその会社の人が発表すべきだろうというのもあって、私はバックアップにまわって発表は社員さんに任せようと思う。今月末に事例紹介させてほしいという交渉をする予定なので、それがうまくいったら、技術協力として当社のクレジットだけスライドに入れてもらえればみたいところが私の狙い。いずれにしても cfp が採択されないとその展望もないので cfp 作りにも協力していきたい。
JJUG CCC 2022 Spring</description><content>&lt;p>1時に寝て7時に起きた。今日も雨。雨降りの日が増えると春が来たなって感じがしてきた。&lt;/p>
&lt;h2 id="cfp-のススメ">cfp のススメ&lt;/h2>
&lt;p>先日、過去に私が jjug ccc に登壇した資料を紹介していて、そう言えば jjug ccc とかいまぐらいの時期かな？と思って調べたら、ちょうど3月27日が cfp の締め切りになる。「ぼくのかんがえたさいきょうのでぷろい」は java アプリケーション開発の基本には沿っていないやり方なので発表したらおもしろいかもしれないと、slack に軽く書き込んだらわりといいねが付いたので社員さんに cfp 送ったら？と勧めた。その社員さんは島根県在住なのでリモートで登壇できるならいいかも？という話しになってイベントの要項を確認したらオンライン開催なので大丈夫そう。&lt;/p>
&lt;p>今日がスクラムのプランニングだったのでチームに共有して業務として cfp を送るための工数も確保した。私が発表してもよいのだけど、なるべく若い人がイベントに登壇すべきだし、業務でやったことはその会社の人が発表すべきだろうというのもあって、私はバックアップにまわって発表は社員さんに任せようと思う。今月末に事例紹介させてほしいという交渉をする予定なので、それがうまくいったら、技術協力として当社のクレジットだけスライドに入れてもらえればみたいところが私の狙い。いずれにしても cfp が採択されないとその展望もないので cfp 作りにも協力していきたい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://fortee.jp/jjug-ccc-2022-spring">JJUG CCC 2022 Spring&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>github actions の課金金額</title><link>/diary/posts/2022/0321/</link><pubDate>Mon, 21 Mar 2022 11:10:59 +0900</pubDate><guid>/diary/posts/2022/0321/</guid><description>2時に寝て何度か起きてだらだらしながら10時に起きた。
gihtub-api-tools のリファクタリングとデータ分析 実際に使ってみながらリファクタリングしたり、足りない機能を追加したりした。ツールに拡張した機能が使えるかどうかの検証のため、お仕事のプライベートリポジトリのデータを使って分析をし始めて、気付いたら分析ならびに分析結果の資料まで作ってしまった。軽く半日ぐらいのお仕事をやってしまっていた。過去5ヶ月分の課金時間の合計を算出し、単体テストの実行を github actions に追加することで増える課金時間の見積もりと金額を算出した。月間でいまより3時間30分、全体の課金時間に対して20%弱程度の追加が見込まれる。それによる課金金額を算出すると 210 * $0.008 = $1.68 になる。いままで無料枠を超えないように運用してきたわけだが、こんな200円程度の金額を節約するために github actions 上でテスト実行しないといった判断がくだされていた。開発者は誰も実際の課金金額を知らなかったし、課金金額を算出するとあほらしくなった。あと github actions はめちゃくちゃ安い。</description><content>&lt;p>2時に寝て何度か起きてだらだらしながら10時に起きた。&lt;/p>
&lt;h2 id="gihtub-api-tools-のリファクタリングとデータ分析">gihtub-api-tools のリファクタリングとデータ分析&lt;/h2>
&lt;p>実際に使ってみながらリファクタリングしたり、足りない機能を追加したりした。ツールに拡張した機能が使えるかどうかの検証のため、お仕事のプライベートリポジトリのデータを使って分析をし始めて、気付いたら分析ならびに分析結果の資料まで作ってしまった。軽く半日ぐらいのお仕事をやってしまっていた。過去5ヶ月分の課金時間の合計を算出し、単体テストの実行を github actions に追加することで増える課金時間の見積もりと金額を算出した。月間でいまより3時間30分、全体の課金時間に対して20%弱程度の追加が見込まれる。それによる課金金額を算出すると 210 * $0.008 = $1.68 になる。いままで無料枠を超えないように運用してきたわけだが、こんな200円程度の金額を節約するために github actions 上でテスト実行しないといった判断がくだされていた。開発者は誰も実際の課金金額を知らなかったし、課金金額を算出するとあほらしくなった。あと github actions はめちゃくちゃ安い。&lt;/p></content></item><item><title>gihtub-api-tools の拡張</title><link>/diary/posts/2022/0320/</link><pubDate>Sun, 20 Mar 2022 12:11:13 +0900</pubDate><guid>/diary/posts/2022/0320/</guid><description>5時に寝て9時過ぎに起きた。昨日は久しぶりに夜更ししてコードを書いてた。
github actions のいろいろな時間の算出 以前作った github-api-tools を拡張して github actions の実行履歴の分析するための機能を作っている。
Add actions statistics Add gh-cli-actions command for Actions API ひとまずワークフローの実行履歴からジョブのステップの実行時間を積み上げた時間を算出してみた。いくつか API を調べているうちに課金時間は直接 API から取得できることに気付いた。この3つの時間は全然別の意味をもっていて、それぞれの時間は一致しない。
ステップ実行時間: ジョブのそれぞれのステップの実行時間の合計 課金時間: 課金対象として数えられている時間の合計 ワークフロー実行時間: アクションのワークフローの実行にかかった時間 github actions は public リポジトリに関しては課金対象ではないんやね。private リポジトリ且つ github-hosted ランナーを使っている場合のみ課金対象となるみたい。
Viewing job execution time About billing for GitHub Actions</description><content>&lt;p>5時に寝て9時過ぎに起きた。昨日は久しぶりに夜更ししてコードを書いてた。&lt;/p>
&lt;h2 id="github-actions-のいろいろな時間の算出">github actions のいろいろな時間の算出&lt;/h2>
&lt;p>以前作った github-api-tools を拡張して github actions の実行履歴の分析するための機能を作っている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/github-api-tools/issues/2">Add actions statistics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kazamori/github-api-tools/pull/4">Add gh-cli-actions command for Actions API&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ひとまずワークフローの実行履歴からジョブのステップの実行時間を積み上げた時間を算出してみた。いくつか API を調べているうちに課金時間は直接 API から取得できることに気付いた。この3つの時間は全然別の意味をもっていて、それぞれの時間は一致しない。&lt;/p>
&lt;ul>
&lt;li>ステップ実行時間: ジョブのそれぞれのステップの実行時間の合計&lt;/li>
&lt;li>課金時間: 課金対象として数えられている時間の合計&lt;/li>
&lt;li>ワークフロー実行時間: アクションのワークフローの実行にかかった時間&lt;/li>
&lt;/ul>
&lt;p>github actions は public リポジトリに関しては課金対象ではないんやね。private リポジトリ且つ github-hosted ランナーを使っている場合のみ課金対象となるみたい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.github.com/en/actions/monitoring-and-troubleshooting-workflows/viewing-job-execution-time">Viewing job execution time&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions">About billing for GitHub Actions&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>workrooms 雑談会をした</title><link>/diary/posts/2022/0319/</link><pubDate>Sat, 19 Mar 2022 09:36:59 +0900</pubDate><guid>/diary/posts/2022/0319/</guid><description>0時に寝てたぶん夜中に起きて7時に起きた。
映像研には手を出すな 先日から 見始めて1週間ぐらいかけて12話を見終えた。個人的には4話の そのマチェットを強く握れ！ がよかった。最初の4話をみて、この物語の演出や構成の仕組みが理解できて、その後の話しもみてみようという気になった。4話がおもしろかったから8話と12話も期待したんだけど、4話が私の中で一番はまった分だけ、8話と12話は期待し過ぎになってしまった。別におもしろくなかったわけではない。パブリック・エネミー という言葉が出てきて、こんな言葉を使ったことないし、人生で1度は言ってみたい言葉だなと思った。よくよく考えたらクリエイターって既存の価値観に捕われず新しい価値観を創造するのだから、それは従来の価値観や秩序をよしとする人たちからみたら秩序の破壊者にみえることもあって、クリエイターをパブリック・エネミーと呼ぶのはそれほど的外れでもないかもしれないなとか思ったりもした。
ストレッチ 今日の開脚幅は開始前161cmで、ストレッチ後162cmだった。今週もまったくやらなかったので先週より数値が悪くなった。そろそろ暖かくなってきたし、お仕事も一段落ついて落ち着いたので新たに生活のスタイルも変えていきたいと思う。そうやってさぼっていても週に1回はストレッチを受けられて本当にラッキーだと思う。
workrooms 雑談 てらださんが週末は暇だから Horizon Workrooms をしたいと話しているのをみかけて参加してみることにした。workrooms のよいところの1つとして、現時点では仮想空間内でパソコンを扱い難いので内職をしないことがあげられる。私はもはやパソコンを持ち込まないようにしていて、その場での会話に100%集中している。これが普通のオンライン会議ツールだと、自分が関心のない話題なら個人の作業を始めたり、外部とのインタラクションがあったりするとそれに反応したりする。そういったことをしないためのツールとして workrooms がいいなと思うところもある。これはただの運用の話しだけど。
workrooms で2時間ほど4人で雑談した。メタバースや仮想空間の技術への取っ掛かりの1つとして workrooms を始める人が私の周りでは少しずつ増えていて、徐々にメタバースに関するなにかは盛り上がっていくのかもしれないという雰囲気も出てきている。私の場合、月に1-2回は workrooms で雑談会をするようになってきた。私もただのユーザーではなく、なにかしらツールかコンテンツを作ったりする方に行くべきかもしれないけど、まだまだ他の現実のお仕事でできていないことが山ほどあって傍観している程度。</description><content>&lt;p>0時に寝てたぶん夜中に起きて7時に起きた。&lt;/p>
&lt;h2 id="映像研には手を出すな">映像研には手を出すな&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0316/#映像研には手を出すな">先日から&lt;/a> 見始めて1週間ぐらいかけて12話を見終えた。個人的には4話の &lt;a href="http://eizouken-anime.com/story/?id=4">そのマチェットを強く握れ！&lt;/a> がよかった。最初の4話をみて、この物語の演出や構成の仕組みが理解できて、その後の話しもみてみようという気になった。4話がおもしろかったから8話と12話も期待したんだけど、4話が私の中で一番はまった分だけ、8話と12話は期待し過ぎになってしまった。別におもしろくなかったわけではない。&lt;em>パブリック・エネミー&lt;/em> という言葉が出てきて、こんな言葉を使ったことないし、人生で1度は言ってみたい言葉だなと思った。よくよく考えたらクリエイターって既存の価値観に捕われず新しい価値観を創造するのだから、それは従来の価値観や秩序をよしとする人たちからみたら秩序の破壊者にみえることもあって、クリエイターをパブリック・エネミーと呼ぶのはそれほど的外れでもないかもしれないなとか思ったりもした。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前161cmで、ストレッチ後162cmだった。今週もまったくやらなかったので先週より数値が悪くなった。そろそろ暖かくなってきたし、お仕事も一段落ついて落ち着いたので新たに生活のスタイルも変えていきたいと思う。そうやってさぼっていても週に1回はストレッチを受けられて本当にラッキーだと思う。&lt;/p>
&lt;h2 id="workrooms-雑談">workrooms 雑談&lt;/h2>
&lt;p>てらださんが週末は暇だから &lt;a href="https://www.oculus.com/workrooms/">Horizon Workrooms&lt;/a> をしたいと話しているのをみかけて参加してみることにした。workrooms のよいところの1つとして、現時点では仮想空間内でパソコンを扱い難いので内職をしないことがあげられる。私はもはやパソコンを持ち込まないようにしていて、その場での会話に100%集中している。これが普通のオンライン会議ツールだと、自分が関心のない話題なら個人の作業を始めたり、外部とのインタラクションがあったりするとそれに反応したりする。そういったことをしないためのツールとして workrooms がいいなと思うところもある。これはただの運用の話しだけど。&lt;/p>
&lt;p>workrooms で2時間ほど4人で雑談した。メタバースや仮想空間の技術への取っ掛かりの1つとして workrooms を始める人が私の周りでは少しずつ増えていて、徐々にメタバースに関するなにかは盛り上がっていくのかもしれないという雰囲気も出てきている。私の場合、月に1-2回は workrooms で雑談会をするようになってきた。私もただのユーザーではなく、なにかしらツールかコンテンツを作ったりする方に行くべきかもしれないけど、まだまだ他の現実のお仕事でできていないことが山ほどあって傍観している程度。&lt;/p></content></item><item><title>github actions の改善</title><link>/diary/posts/2022/0318/</link><pubDate>Fri, 18 Mar 2022 10:05:06 +0900</pubDate><guid>/diary/posts/2022/0318/</guid><description>0時に寝て3時に起きて6時に起きた。
失敗したジョブの再実行 せらさんのツィートをみかけて調べたら2日ほど前に失敗したジョブからの再実行の改善が行われたらしい。
GitHub Action で失敗したジョブだけ実行できる様になってる。今まで失敗しやすいものは再実行を小さくするために設定を分けたりとかしていたんだけど、そういうことをしなくてもよくなった。
&amp;mdash; Kazuhiro Sera (瀬良) (@seratch_ja) March 18, 2022 Save time with partial re-runs in GitHub Actions たまにだけど、i/o エラーみたいな内容で github actions のワークフロー実行が異常終了することがある。そんなときに途中から再実行できるといいなぁとは思っていた。これはステップ単位ではなく、ジョブ単位の実行みたいだけど、それでも途中から再実行できればワークフローの自由度や効率は上がると思う。github actions がどんどん強力になっていくのが楽しみ。あとやぎさんから教えてもらった GitHub Actions 実践入門 も購入した。ある程度触ったところで雰囲気は掴めてきたので体系的に学んでみる。</description><content>&lt;p>0時に寝て3時に起きて6時に起きた。&lt;/p>
&lt;h2 id="失敗したジョブの再実行">失敗したジョブの再実行&lt;/h2>
&lt;p>せらさんのツィートをみかけて調べたら2日ほど前に失敗したジョブからの再実行の改善が行われたらしい。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">GitHub Action で失敗したジョブだけ実行できる様になってる。今まで失敗しやすいものは再実行を小さくするために設定を分けたりとかしていたんだけど、そういうことをしなくてもよくなった。&lt;/p>&amp;mdash; Kazuhiro Sera (瀬良) (@seratch_ja) &lt;a href="https://twitter.com/seratch_ja/status/1504664461483085826?ref_src=twsrc%5Etfw">March 18, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;ul>
&lt;li>&lt;a href="https://github.blog/2022-03-16-save-time-partial-re-runs-github-actions/">Save time with partial re-runs in GitHub Actions&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>たまにだけど、i/o エラーみたいな内容で github actions のワークフロー実行が異常終了することがある。そんなときに途中から再実行できるといいなぁとは思っていた。これはステップ単位ではなく、ジョブ単位の実行みたいだけど、それでも途中から再実行できればワークフローの自由度や効率は上がると思う。github actions がどんどん強力になっていくのが楽しみ。あとやぎさんから教えてもらった &lt;a href="https://miyajan.booth.pm/items/1865906">GitHub Actions 実践入門&lt;/a> も購入した。ある程度触ったところで雰囲気は掴めてきたので体系的に学んでみる。&lt;/p></content></item><item><title>マージできると開発が楽しい</title><link>/diary/posts/2022/0317/</link><pubDate>Thu, 17 Mar 2022 06:44:18 +0900</pubDate><guid>/diary/posts/2022/0317/</guid><description>0時に寝て3時に起きて5時半に起きた。
開発のコミット/マージのルール改定 過去のスクラムのふりかえりをみていて、12月15日にレビューアが1人のため、Pull Request (以下PR) のレビューにかなり時間がかかっているという指摘をしてから3ヶ月かかって、ようやくレビュー負荷が集中していた社員からレビュープロセスの改善の機会がもたらされた。なぜレビュー負荷が1人に集中するかというと、チームの開発者は5人で、正社員1人で他4人は外部の協力会社であるため、正社員の approve なしでマージすることに躊躇するという状況だった。
大幅にレビュープロセスが緩和された。
軽微な変更は PR を作って自分でマージしてよい (所属問わず) 1人以上のレビューアによる apprve があればマージしてよい PO が最終レビューするものは PR レビューアの approve を得なくてもよい 私の作業時間の1/3は PR レビューの待ち時間だったのでこれだけで私の生産性は1.5倍になる。どんどんコミットしていけると開発していて楽しい。
オンライン飲み会 余りまくっている交際費の予算消化も兼ねて前にお手伝いしていた会社のたにがきさんと雑談した。近況を話したりもしつつ、たにがきさんは私が過去に働いていた会社の親会社で働いていて、その時期も重なっていて、その親会社の話しを主にしていた。その親会社は主力プロダクトの完全な作り直しを宣言して、1000億円ぐらい開発費を投じたものの、実際にはプロダクトの作り直しに失敗して、資金繰りが悪化して事実上の倒産をした。親会社の社長はカリスマ社長で新興宗教の教祖みたいな感じだったんだけど、会社がファンドに買収されて、取締役を退任させられて、しばらくは鳴りを潜めていたけど、最近はまた会社を作って精力的に活動しているらしい。近く OB 会のようなイベントがカリスマ社長から呼びかけられているらしく、どう考えてもリクルーティングの場なんだろうと話していた。また1年ぐらいしたら近況報告会をしてもいいかもしれない。</description><content>&lt;p>0時に寝て3時に起きて5時半に起きた。&lt;/p>
&lt;h2 id="開発のコミットマージのルール改定">開発のコミット/マージのルール改定&lt;/h2>
&lt;p>過去のスクラムのふりかえりをみていて、12月15日にレビューアが1人のため、Pull Request (以下PR) のレビューにかなり時間がかかっているという指摘をしてから3ヶ月かかって、ようやくレビュー負荷が集中していた社員からレビュープロセスの改善の機会がもたらされた。なぜレビュー負荷が1人に集中するかというと、チームの開発者は5人で、正社員1人で他4人は外部の協力会社であるため、正社員の approve なしでマージすることに躊躇するという状況だった。&lt;/p>
&lt;p>大幅にレビュープロセスが緩和された。&lt;/p>
&lt;ul>
&lt;li>軽微な変更は PR を作って自分でマージしてよい&lt;/li>
&lt;li>(所属問わず) 1人以上のレビューアによる apprve があればマージしてよい&lt;/li>
&lt;li>PO が最終レビューするものは PR レビューアの approve を得なくてもよい&lt;/li>
&lt;/ul>
&lt;p>私の作業時間の1/3は PR レビューの待ち時間だったのでこれだけで私の生産性は1.5倍になる。どんどんコミットしていけると開発していて楽しい。&lt;/p>
&lt;h2 id="オンライン飲み会">オンライン飲み会&lt;/h2>
&lt;p>余りまくっている交際費の予算消化も兼ねて前にお手伝いしていた会社のたにがきさんと雑談した。近況を話したりもしつつ、たにがきさんは私が過去に働いていた会社の親会社で働いていて、その時期も重なっていて、その親会社の話しを主にしていた。その親会社は主力プロダクトの完全な作り直しを宣言して、1000億円ぐらい開発費を投じたものの、実際にはプロダクトの作り直しに失敗して、資金繰りが悪化して事実上の倒産をした。親会社の社長はカリスマ社長で新興宗教の教祖みたいな感じだったんだけど、会社がファンドに買収されて、取締役を退任させられて、しばらくは鳴りを潜めていたけど、最近はまた会社を作って精力的に活動しているらしい。近く OB 会のようなイベントがカリスマ社長から呼びかけられているらしく、どう考えてもリクルーティングの場なんだろうと話していた。また1年ぐらいしたら近況報告会をしてもいいかもしれない。&lt;/p></content></item><item><title>最低1000万件のデータがあると思え</title><link>/diary/posts/2022/0316/</link><pubDate>Wed, 16 Mar 2022 07:33:00 +0900</pubDate><guid>/diary/posts/2022/0316/</guid><description>0時に寝て6時半に起きた。
映像研には手を出すな お奨めされたので 映像研には手を出すな を見始めた。あまり現実と空想が入り交じる展開が新鮮と言えば新鮮だし、ストーリーがわかりにくい気もしてもやもやする。浅草氏も「アニメは設定が命」と言っているし、この設定はどうなの？とか思いながら、それでもみているんだからいいんだろうって感じ？最初はごちゃごちゃしててわかりにくい感じがしたんだけど、見続けていると徐々に独特の世界観に慣れてきたのか、ところどころおもしろいなと思うようにはなってきた。また全話みてから総括する。
サブクエリで group by お仕事でたまたま触っているところの sql をみたら次のようなものがあった。サブクエリで group by 句を使っている。仮に mytable_detail が1億件ぐらいあったらこんな sql 動くわけがない。データが溜まるごとに遅くなっていって、しきい値を超えると急激にパフォーマンスが悪化する時限爆弾みたいな sql だと思う。お手伝い先は or mapper を使っていないので開発者が sql を手で書いているにも関わらず、こんな sql が実運用されてしまうような開発体制には大きな課題があるなぁとか考え込んでしまった。
SELECT mytable.*, t.is_some FROM mytable LEFT JOIN LATERAL ( SELECT mytable_id, bool_or(mytable_detail.is_some) as is_some FROM mytable_detail WHERE mytable_detail.mytable_id = mytable.mytable_id GROUP BY mytable_detail.mytable_id ) as t on t.mytable_id = mytable.mytable_id WHERE mytable.foreign_key_id = :foreignKeyId ORDER BY mytable.mytable_id; 以前、お手伝いしていた会社の CTO が社内の開発者のデータの取り扱いの指針として書いた記事が次になる。社内では 最低 1000万件のデータがあると思ってコードを書けと強く啓蒙していた。いまどきのデータ量として1000万件というのはよい指標だと思う。
1000万件オーバーのレコードのデータをカジュアルに扱うための心構え</description><content>&lt;p>0時に寝て6時半に起きた。&lt;/p>
&lt;h2 id="映像研には手を出すな">映像研には手を出すな&lt;/h2>
&lt;p>お奨めされたので &lt;a href="http://eizouken-anime.com/">映像研には手を出すな&lt;/a> を見始めた。あまり現実と空想が入り交じる展開が新鮮と言えば新鮮だし、ストーリーがわかりにくい気もしてもやもやする。浅草氏も「アニメは設定が命」と言っているし、この設定はどうなの？とか思いながら、それでもみているんだからいいんだろうって感じ？最初はごちゃごちゃしててわかりにくい感じがしたんだけど、見続けていると徐々に独特の世界観に慣れてきたのか、ところどころおもしろいなと思うようにはなってきた。また全話みてから総括する。&lt;/p>
&lt;h2 id="サブクエリで-group-by">サブクエリで group by&lt;/h2>
&lt;p>お仕事でたまたま触っているところの sql をみたら次のようなものがあった。サブクエリで group by 句を使っている。仮に mytable_detail が1億件ぐらいあったらこんな sql 動くわけがない。データが溜まるごとに遅くなっていって、しきい値を超えると急激にパフォーマンスが悪化する時限爆弾みたいな sql だと思う。お手伝い先は or mapper を使っていないので開発者が sql を手で書いているにも関わらず、こんな sql が実運用されてしまうような開発体制には大きな課題があるなぁとか考え込んでしまった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sql" data-lang="sql">&lt;span style="color:#66d9ef">SELECT&lt;/span> mytable.&lt;span style="color:#f92672">*&lt;/span>, t.is_some
&lt;span style="color:#66d9ef">FROM&lt;/span> mytable
&lt;span style="color:#66d9ef">LEFT&lt;/span> &lt;span style="color:#66d9ef">JOIN&lt;/span> &lt;span style="color:#66d9ef">LATERAL&lt;/span> (
&lt;span style="color:#66d9ef">SELECT&lt;/span> mytable_id, bool_or(mytable_detail.is_some) &lt;span style="color:#66d9ef">as&lt;/span> is_some
&lt;span style="color:#66d9ef">FROM&lt;/span> mytable_detail
&lt;span style="color:#66d9ef">WHERE&lt;/span> mytable_detail.mytable_id &lt;span style="color:#f92672">=&lt;/span> mytable.mytable_id
&lt;span style="color:#66d9ef">GROUP&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> mytable_detail.mytable_id
) &lt;span style="color:#66d9ef">as&lt;/span> t &lt;span style="color:#66d9ef">on&lt;/span> t.mytable_id &lt;span style="color:#f92672">=&lt;/span> mytable.mytable_id
&lt;span style="color:#66d9ef">WHERE&lt;/span> mytable.foreign_key_id &lt;span style="color:#f92672">=&lt;/span> :foreignKeyId
&lt;span style="color:#66d9ef">ORDER&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> mytable.mytable_id;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以前、お手伝いしていた会社の CTO が社内の開発者のデータの取り扱いの指針として書いた記事が次になる。社内では &lt;strong>最低&lt;/strong> 1000万件のデータがあると思ってコードを書けと強く啓蒙していた。いまどきのデータ量として1000万件というのはよい指標だと思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://joker1007.hatenablog.com/entry/2020/11/04/214646">1000万件オーバーのレコードのデータをカジュアルに扱うための心構え&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>フロントエンド開発着手</title><link>/diary/posts/2022/0315/</link><pubDate>Tue, 15 Mar 2022 07:25:53 +0900</pubDate><guid>/diary/posts/2022/0315/</guid><description>0時に寝て3時に起きて6時に起きた。やっぱり起きてからドラクエタクトしてた。
フロントエンド開発 デプロイ改善が完了したので新しいタスクに取り組み始めた。もともとこの開発チームはバックエンドもフロントエンドも全部やるというチームなので、やりかけ中のタスクのフロントエンド側の変更に着手して、既存の画面に新規項目を追加するといった作業をやってみた。フロントエンドは vue.js + nuxt で開発している。ビルドに30秒ぐらいかかる。ちょっと遅い。宣言型 ui のよいところかもしれないけど、vue.js も nuxt もまったく触ったことないけど、ripgrep で検索してちょちょっとコピペしたらそれっぽく動いた。これはまさにあれだ。
全然わからない。俺たちは雰囲気で開発している。
動いたらラッキーみたいな感じで PR を作って、たまたまレビューも通って、テスト環境で動いたんでラッキーだった。</description><content>&lt;p>0時に寝て3時に起きて6時に起きた。やっぱり起きてからドラクエタクトしてた。&lt;/p>
&lt;h2 id="フロントエンド開発">フロントエンド開発&lt;/h2>
&lt;p>デプロイ改善が完了したので新しいタスクに取り組み始めた。もともとこの開発チームはバックエンドもフロントエンドも全部やるというチームなので、やりかけ中のタスクのフロントエンド側の変更に着手して、既存の画面に新規項目を追加するといった作業をやってみた。フロントエンドは vue.js + nuxt で開発している。ビルドに30秒ぐらいかかる。ちょっと遅い。宣言型 ui のよいところかもしれないけど、vue.js も nuxt もまったく触ったことないけど、ripgrep で検索してちょちょっとコピペしたらそれっぽく動いた。これはまさにあれだ。&lt;/p>
&lt;blockquote>
&lt;p>全然わからない。俺たちは雰囲気で開発している。&lt;/p>
&lt;/blockquote>
&lt;p>動いたらラッキーみたいな感じで PR を作って、たまたまレビューも通って、テスト環境で動いたんでラッキーだった。&lt;/p></content></item><item><title>平穏な一日</title><link>/diary/posts/2022/0314/</link><pubDate>Mon, 14 Mar 2022 07:54:52 +0900</pubDate><guid>/diary/posts/2022/0314/</guid><description>0時に寝て5時半に起きた。一仕事を終えて淡々と前の作業の続きのリファクタリングなどをしていた。
デプロイ改善のタスク完了報告 週末にパイプライン処理の検証やロールバック処理の実装を行った。ドキュメントも一通り書いた。チームの開発者にそれらを説明して3スプリント(3週間)に渡った改善が完了したことを報告した。チケットにすると26、そのうち私が担当したのが22なので、私がイニシアティブをとって完遂させた。github actions を始めとする、github のサービスの理解が深まってそれなりに学びがあった。自分でもいくつかカスタム action を作ってみようと思う。</description><content>&lt;p>0時に寝て5時半に起きた。一仕事を終えて淡々と前の作業の続きのリファクタリングなどをしていた。&lt;/p>
&lt;h2 id="デプロイ改善のタスク完了報告">デプロイ改善のタスク完了報告&lt;/h2>
&lt;p>週末にパイプライン処理の検証やロールバック処理の実装を行った。ドキュメントも一通り書いた。チームの開発者にそれらを説明して3スプリント(3週間)に渡った改善が完了したことを報告した。チケットにすると26、そのうち私が担当したのが22なので、私がイニシアティブをとって完遂させた。github actions を始めとする、github のサービスの理解が深まってそれなりに学びがあった。自分でもいくつかカスタム action を作ってみようと思う。&lt;/p></content></item><item><title>k8s のロールバック</title><link>/diary/posts/2022/0313/</link><pubDate>Sun, 13 Mar 2022 12:07:00 +0900</pubDate><guid>/diary/posts/2022/0313/</guid><description>0時に寝て7時に起きた。
k8s のロールバック Rolling Back to a Previous Revision をみながらすぐできた。ロールバックもこれまでと同様、github actions の workflow dispatch で管理できるようにした。基本的にはこれだけでロールバックできる。
$ kubectl rollout undo deployment/my-app-deploy ちょっと工夫したこととして、デプロイ時に kubernetes.io/change-cause というアノテーションに git のリビジョンもセットしておくと確認するときにちょっと楽ができる。apply した後の deployment リソースに docker イメージのタグ情報 (= git のリビジョン) を書き込んでおく。
$ kubectl apply -k ${{ env.DEPLOYMENT_ENV }} $ kubectl annotate deployment my-app-deploy kubernetes.io/change-cause=${{ env.IMAGE_TAG }} --overwrite=true kubectl から履歴をみたときに k8s のリビジョンがどの git のリビジョンを使っているかがわかりやすい。デフォルトでは何も設定されていないかもしれない。
$ kubectl rollout history deployment/my-app-deploy deployment.apps/my-app-deploy REVISION CHANGE-CAUSE 15 &amp;lt;none&amp;gt; 16 &amp;lt;none&amp;gt; 17 &amp;lt;none&amp;gt; 18 &amp;lt;none&amp;gt; 19 &amp;lt;none&amp;gt; 20 &amp;lt;none&amp;gt; 21 &amp;lt;none&amp;gt; 22 &amp;lt;none&amp;gt; 24 1f17a22a6659ea0714a21fca034645cd191e189b 27 a84e113d8b7c124178b58e2f40f57b00aae65485 28 dcf3552db0668d416ed880f6e896455d7bab194c</description><content>&lt;p>0時に寝て7時に起きた。&lt;/p>
&lt;h2 id="k8s-のロールバック">k8s のロールバック&lt;/h2>
&lt;p>&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#rolling-back-to-a-previous-revision">Rolling Back to a Previous Revision&lt;/a> をみながらすぐできた。ロールバックもこれまでと同様、github actions の workflow dispatch で管理できるようにした。基本的にはこれだけでロールバックできる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl rollout undo deployment/my-app-deploy
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ちょっと工夫したこととして、デプロイ時に &lt;a href="https://kubernetes.io/docs/reference/labels-annotations-taints/#change-cause">kubernetes.io/change-cause&lt;/a> というアノテーションに git のリビジョンもセットしておくと確認するときにちょっと楽ができる。apply した後の deployment リソースに docker イメージのタグ情報 (= git のリビジョン) を書き込んでおく。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -k &lt;span style="color:#e6db74">${&lt;/span>{ env.DEPLOYMENT_ENV &lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
$ kubectl annotate deployment my-app-deploy kubernetes.io/change-cause&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>{ env.IMAGE_TAG &lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#f92672">}&lt;/span> --overwrite&lt;span style="color:#f92672">=&lt;/span>true
&lt;/code>&lt;/pre>&lt;/div>&lt;p>kubectl から履歴をみたときに k8s のリビジョンがどの git のリビジョンを使っているかがわかりやすい。デフォルトでは何も設定されていないかもしれない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl rollout history deployment/my-app-deploy
deployment.apps/my-app-deploy
REVISION CHANGE-CAUSE
&lt;span style="color:#ae81ff">15&lt;/span> &amp;lt;none&amp;gt;
&lt;span style="color:#ae81ff">16&lt;/span> &amp;lt;none&amp;gt;
&lt;span style="color:#ae81ff">17&lt;/span> &amp;lt;none&amp;gt;
&lt;span style="color:#ae81ff">18&lt;/span> &amp;lt;none&amp;gt;
&lt;span style="color:#ae81ff">19&lt;/span> &amp;lt;none&amp;gt;
&lt;span style="color:#ae81ff">20&lt;/span> &amp;lt;none&amp;gt;
&lt;span style="color:#ae81ff">21&lt;/span> &amp;lt;none&amp;gt;
&lt;span style="color:#ae81ff">22&lt;/span> &amp;lt;none&amp;gt;
&lt;span style="color:#ae81ff">24&lt;/span> 1f17a22a6659ea0714a21fca034645cd191e189b
&lt;span style="color:#ae81ff">27&lt;/span> a84e113d8b7c124178b58e2f40f57b00aae65485
&lt;span style="color:#ae81ff">28&lt;/span> dcf3552db0668d416ed880f6e896455d7bab194c
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>デプロイ改善の残作業</title><link>/diary/posts/2022/0312/</link><pubDate>Sat, 12 Mar 2022 09:49:06 +0900</pubDate><guid>/diary/posts/2022/0312/</guid><description>23時に寝て2時に起きて4時ぐらいまでだらだらして寝て6時に起きた。
ストレッチ これまで11時からストレッチを受けていたが、今週から dr.stretch さんの土日の開店時間が10時になったのにあわせる形で時間変更した。朝に予定が入っているとその時間にあわせて起きて身支度して1日が始まるので家で中途半端にだらだらしなくてよい。いつもは11時にあわせて家を出掛けるのが、10時にあわせて出掛けるようになったのでいつもより1時間早く活動できるようになった。私はなんか予定がないとだらだらしてしまって怠惰に過ごしてしまう。そういう怠ける自分の性格もわかっているので適度に予定を入れて怠けないように注意している。
今日の開脚幅は開始前163cmで、ストレッチ後165cmだった。先週とほぼ同じ。今週もお仕事が忙しくて全くできなかったので現状維持といったところ。
デプロイのパイプライン処理 github deployment から workflow dispatch に移行したおかげでせっかく deployments ベースで作ったパイプライン処理のツールを workflow dispatch 向けに移行する必要があった。言うても基本的に同じパラメーターを処理するだけなので大半は再利用できる。ツールのちょっとしたリファクタリングをやってパイプライン処理が動くかどうかの検証をして、ドキュメントを wiki にまとめた。あとはロールバックを自動化するための仕組みを作るだけ。基本的には k8s の kubectl を実行するワークフローを作るだけという想定。</description><content>&lt;p>23時に寝て2時に起きて4時ぐらいまでだらだらして寝て6時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>これまで11時からストレッチを受けていたが、今週から dr.stretch さんの土日の開店時間が10時になったのにあわせる形で時間変更した。朝に予定が入っているとその時間にあわせて起きて身支度して1日が始まるので家で中途半端にだらだらしなくてよい。いつもは11時にあわせて家を出掛けるのが、10時にあわせて出掛けるようになったのでいつもより1時間早く活動できるようになった。私はなんか予定がないとだらだらしてしまって怠惰に過ごしてしまう。そういう怠ける自分の性格もわかっているので適度に予定を入れて怠けないように注意している。&lt;/p>
&lt;p>今日の開脚幅は開始前163cmで、ストレッチ後165cmだった。先週とほぼ同じ。今週もお仕事が忙しくて全くできなかったので現状維持といったところ。&lt;/p>
&lt;h2 id="デプロイのパイプライン処理">デプロイのパイプライン処理&lt;/h2>
&lt;p>github deployment から workflow dispatch に移行したおかげでせっかく deployments ベースで作ったパイプライン処理のツールを workflow dispatch 向けに移行する必要があった。言うても基本的に同じパラメーターを処理するだけなので大半は再利用できる。ツールのちょっとしたリファクタリングをやってパイプライン処理が動くかどうかの検証をして、ドキュメントを wiki にまとめた。あとはロールバックを自動化するための仕組みを作るだけ。基本的には k8s の kubectl を実行するワークフローを作るだけという想定。&lt;/p></content></item><item><title>連日の近況報告</title><link>/diary/posts/2022/0311/</link><pubDate>Fri, 11 Mar 2022 07:34:40 +0900</pubDate><guid>/diary/posts/2022/0311/</guid><description>1時に寝て6時に起きた。朝ちょっとデバッグをやって午後からは来週のオンライン飲み会の手配をしたり、打ち合わせのメモをまとめたりしていた。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。直近の2-3週間でやっていた ci/cd の改善や github actions のことについて共有したりした。次の契約更改のタイミングで契約条件の変更を相手と協議しようと考えている。具体的には単価をあげたり事例紹介を許可してもらったりといった類の交渉をする予定。一般論として業務委託は最初の契約条件から条件変更するのが難しいらしく、なかなかタフな交渉になるっぽいというのをはらさんから助言してもらったりしている。私の中では交渉するネタはいくつかあるし、ダメならダメで最悪のケースなら契約終了して、別の会社のお仕事に切り替えてもよいし、いまは開発者は売り手市場なので楽観的に考えていたりする。
近況報告 元同僚と1年ぶりにオンライン飲み会をした。それぞれ近況を話したりしていた。私が見限ったビジネスはその後うまくいったらしくてなにがうまくいくかわからんものだという話しも聞いた。私が在籍していた頃の早期退職制度は50歳以上が対象だったけど、いまは45歳以上に下がっているらしい。また来期から年配の社員を辞めさせるための追い出し部屋ならぬ追い出し会社がグループ企業として設立されるという話しも聞いた。おそらくは戦力外社員をその会社に集めて待遇を下げるみたいな話なんだろうと推測する。日本の労働基準法では、一方的な解雇や減俸はできないが、配置転換は許されていて、別会社に転籍してその会社の待遇が元の会社よりも悪いというのは法律的に問題ないらしい。本体より待遇の悪いグループ企業を作って、そこに転籍することで事実上の減俸や自主退職を促すような慣習となっている。私が起業した理由の1つは早期退職制度ができて自分の未来もそうなると実感したというのがある。少なくとも自分の会社で自分が解雇されることはない。
元同僚の1人も来期は45歳になるので早期退職制度を使って会社を辞めるかもしれないという話されていた。40代からのキャリアってなかなか難しいなとは思えた。私もいまはなんとかなっているけど、このままお仕事がある保証はないし、引き締めていかないといけない。ただあるとき急に追い出し会社に送られるという組織の論理で生きているわけではないという自由だけは謳歌している。</description><content>&lt;p>1時に寝て6時に起きた。朝ちょっとデバッグをやって午後からは来週のオンライン飲み会の手配をしたり、打ち合わせのメモをまとめたりしていた。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。直近の2-3週間でやっていた ci/cd の改善や github actions のことについて共有したりした。次の契約更改のタイミングで契約条件の変更を相手と協議しようと考えている。具体的には単価をあげたり事例紹介を許可してもらったりといった類の交渉をする予定。一般論として業務委託は最初の契約条件から条件変更するのが難しいらしく、なかなかタフな交渉になるっぽいというのをはらさんから助言してもらったりしている。私の中では交渉するネタはいくつかあるし、ダメならダメで最悪のケースなら契約終了して、別の会社のお仕事に切り替えてもよいし、いまは開発者は売り手市場なので楽観的に考えていたりする。&lt;/p>
&lt;h2 id="近況報告">近況報告&lt;/h2>
&lt;p>元同僚と1年ぶりにオンライン飲み会をした。それぞれ近況を話したりしていた。私が見限ったビジネスはその後うまくいったらしくてなにがうまくいくかわからんものだという話しも聞いた。私が在籍していた頃の早期退職制度は50歳以上が対象だったけど、いまは45歳以上に下がっているらしい。また来期から年配の社員を辞めさせるための追い出し部屋ならぬ追い出し会社がグループ企業として設立されるという話しも聞いた。おそらくは戦力外社員をその会社に集めて待遇を下げるみたいな話なんだろうと推測する。日本の労働基準法では、一方的な解雇や減俸はできないが、配置転換は許されていて、別会社に転籍してその会社の待遇が元の会社よりも悪いというのは法律的に問題ないらしい。本体より待遇の悪いグループ企業を作って、そこに転籍することで事実上の減俸や自主退職を促すような慣習となっている。私が起業した理由の1つは早期退職制度ができて自分の未来もそうなると実感したというのがある。少なくとも自分の会社で自分が解雇されることはない。&lt;/p>
&lt;p>元同僚の1人も来期は45歳になるので早期退職制度を使って会社を辞めるかもしれないという話されていた。40代からのキャリアってなかなか難しいなとは思えた。私もいまはなんとかなっているけど、このままお仕事がある保証はないし、引き締めていかないといけない。ただあるとき急に追い出し会社に送られるという組織の論理で生きているわけではないという自由だけは謳歌している。&lt;/p></content></item><item><title>ばてばての木曜日</title><link>/diary/posts/2022/0310/</link><pubDate>Thu, 10 Mar 2022 07:34:32 +0900</pubDate><guid>/diary/posts/2022/0310/</guid><description>23時に寝てたぶん1回ぐらい起きて6時前に起きた。
GitHub Discussions やぎさんに GitHub Discussions というのがあると教えてもらった。軽くチュートリアルやドキュメントに目を通してみた。stackoverflow のような q&amp;amp;a ができるようなサービスなのかな？著名な oss のコミュニティでたまに盛り上がるネタとして issue がサポートセンターになってしまうという問題がある。経験が少ない開発者が自分の環境で動かなかったときに issue 登録して開発者にサポートを依頼するみたいなことになってしまうケースがある。もちろん経験が少ない開発者にとっては環境要因のエラーとそうじゃないのを見分けるのは難しいことかもしれない。一方で oss コミュニティのメンテナーのリソースも有限なことから初心者質問を回答するために多くの労力をさけないという現実もある。その issue と q&amp;amp;a のギャップを埋めるようなサービスになるのかな？と推測している。試しにいま作っているデプロイツールで discussions を有効にしたのでいろいろ触ってみる。
近況報告 約1年ぶりにやすだ先生とオンライン飲み会をした。3月にやっているので今期の経営的なふりかえりも少ししつつ大半は雑談をしていた。昨年、経営コンサルティングで交際費が少な過ぎるという指摘を受けてからオンライン飲み会や雑談会を始めたときの、身近な相談相手の1人と言える。今期は10人以上とオンライン飲み会やオフラインの雑談会をやっているし、こんな感じで知人と定期的に近況を話す仕組みを継続できればいいなとは思う。今期は交際費として30万円/年の予算を確保しているものの、現時点では83,747円しか消化していない。もう決算まで1ヶ月もないのに。なぜなのか。。。</description><content>&lt;p>23時に寝てたぶん1回ぐらい起きて6時前に起きた。&lt;/p>
&lt;h2 id="github-discussions">GitHub Discussions&lt;/h2>
&lt;p>やぎさんに &lt;a href="https://docs.github.com/en/discussions">GitHub Discussions&lt;/a> というのがあると教えてもらった。軽くチュートリアルやドキュメントに目を通してみた。stackoverflow のような q&amp;amp;a ができるようなサービスなのかな？著名な oss のコミュニティでたまに盛り上がるネタとして issue がサポートセンターになってしまうという問題がある。経験が少ない開発者が自分の環境で動かなかったときに issue 登録して開発者にサポートを依頼するみたいなことになってしまうケースがある。もちろん経験が少ない開発者にとっては環境要因のエラーとそうじゃないのを見分けるのは難しいことかもしれない。一方で oss コミュニティのメンテナーのリソースも有限なことから初心者質問を回答するために多くの労力をさけないという現実もある。その issue と q&amp;amp;a のギャップを埋めるようなサービスになるのかな？と推測している。試しにいま作っているデプロイツールで discussions を有効にしたのでいろいろ触ってみる。&lt;/p>
&lt;h2 id="近況報告">近況報告&lt;/h2>
&lt;p>約1年ぶりにやすだ先生とオンライン飲み会をした。3月にやっているので今期の経営的なふりかえりも少ししつつ大半は雑談をしていた。昨年、経営コンサルティングで交際費が少な過ぎるという指摘を受けてからオンライン飲み会や雑談会を始めたときの、身近な相談相手の1人と言える。今期は10人以上とオンライン飲み会やオフラインの雑談会をやっているし、こんな感じで知人と定期的に近況を話す仕組みを継続できればいいなとは思う。今期は交際費として30万円/年の予算を確保しているものの、現時点では83,747円しか消化していない。もう決算まで1ヶ月もないのに。なぜなのか。。。&lt;/p></content></item><item><title>リーン思考？</title><link>/diary/posts/2022/0309/</link><pubDate>Wed, 09 Mar 2022 07:43:01 +0900</pubDate><guid>/diary/posts/2022/0309/</guid><description>0時に寝て5時半頃に起きて6時半に起きた。
リーン思考 スクラムのふりかえりをしていて、スクラムマスターがふとスクラムっぽいものとスクラムとの違いの1つとしてリーン思考の有無をあげた。私がリーン思考というのを知らなかったので軽く調べてみた。
リーン思考とモジュラー化を実現するための3ステップ リーン思考とは？
リーンという考え方は、ムダを最小限に抑えつつ、顧客価値を最大化することです。そのためには、ムダを削除・削減させるような構造化された「働き方」と、それを継続的に改善し続けることが必要です。つまり、リーンな組織というのは顧客が何に価値を感じているのかを理解しており、継続的な価値向上に繋がるプロセスに注力するものです。繰り返しとなりますが、究極の目標は、ムダゼロな完璧なプロセスを通して、顧客に最大限の価値を提供することです。
引用しておいてなんだが、「リーン思考とは」と節を書いているのに直接な定義を最初に書かない文章は読みにくい。要約すると、リーンという概念を組織として理解していて実践していく考え方や心の動きをリーン思考と呼ぶのだろうか？スクラムマスターがリーン思考が足りないとか言っていたけど、あまりピンとこない。というのは、スクラムマスターは基本的に言うだけで実践はすべて現場に丸投げ。リーン思考が足りないというだけなら誰でも言えるが、日々の具体的な活動や実践にどう落とし込むのかを示さないので現場のメンバーにはあまり響かない。リーダーシップにもいろんなタイプがあると思うが、実践は実践力をみせつけてフォロワーがついてくる。とくに抽象的なよくわからない概念をビジョナリーが提唱するだけではなにも変わらない。
私自身がリーン思考を意識したことはないが、課題管理に関して開発のワークフローを最適化するというのはある種のリーン思考とも言える。チケットのワークフローが洗練すれば洗練するほど効率がよくなってイテレーションのサイクルが多くまわり、結果として価値が速くユーザーに届いたり、試行錯誤の改善が早くなる。キーワードとして一応は覚えておく。</description><content>&lt;p>0時に寝て5時半頃に起きて6時半に起きた。&lt;/p>
&lt;h2 id="リーン思考">リーン思考&lt;/h2>
&lt;p>スクラムのふりかえりをしていて、スクラムマスターがふとスクラムっぽいものとスクラムとの違いの1つとしてリーン思考の有無をあげた。私がリーン思考というのを知らなかったので軽く調べてみた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.modularmanagement.com/ja/blog/%E3%83%AA%E3%83%BC%E3%83%B3%E6%80%9D%E8%80%83%E3%81%A8%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%A9%E3%83%BC%E5%8C%96%E3%82%92%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE3%E3%82%B9%E3%83%86%E3%83%83%E3%83%97">リーン思考とモジュラー化を実現するための3ステップ&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>リーン思考とは？&lt;/p>
&lt;p>リーンという考え方は、ムダを最小限に抑えつつ、顧客価値を最大化することです。そのためには、ムダを削除・削減させるような構造化された「働き方」と、それを継続的に改善し続けることが必要です。つまり、リーンな組織というのは顧客が何に価値を感じているのかを理解しており、継続的な価値向上に繋がるプロセスに注力するものです。繰り返しとなりますが、究極の目標は、ムダゼロな完璧なプロセスを通して、顧客に最大限の価値を提供することです。&lt;/p>
&lt;/blockquote>
&lt;p>引用しておいてなんだが、「リーン思考とは」と節を書いているのに直接な定義を最初に書かない文章は読みにくい。要約すると、リーンという概念を組織として理解していて実践していく考え方や心の動きをリーン思考と呼ぶのだろうか？スクラムマスターがリーン思考が足りないとか言っていたけど、あまりピンとこない。というのは、スクラムマスターは基本的に言うだけで実践はすべて現場に丸投げ。リーン思考が足りないというだけなら誰でも言えるが、日々の具体的な活動や実践にどう落とし込むのかを示さないので現場のメンバーにはあまり響かない。リーダーシップにもいろんなタイプがあると思うが、実践は実践力をみせつけてフォロワーがついてくる。とくに抽象的なよくわからない概念をビジョナリーが提唱するだけではなにも変わらない。&lt;/p>
&lt;p>私自身がリーン思考を意識したことはないが、課題管理に関して開発のワークフローを最適化するというのはある種のリーン思考とも言える。チケットのワークフローが洗練すれば洗練するほど効率がよくなってイテレーションのサイクルが多くまわり、結果として価値が速くユーザーに届いたり、試行錯誤の改善が早くなる。キーワードとして一応は覚えておく。&lt;/p></content></item><item><title>デプロイ改善の成果まとめ</title><link>/diary/posts/2022/0308/</link><pubDate>Tue, 08 Mar 2022 06:24:20 +0900</pubDate><guid>/diary/posts/2022/0308/</guid><description>23時に寝て5時過ぎに起きた。何度か途中で起きたけど、久しぶりによく寝た。前日あまり寝てなかったから19時過ぎには帰ってきてだらだらしてた。
もてなしだけではもう食えない 業界研究を兼ねて もてなしだけではもう食えない -ホテル経営学の本質と実践- を読み始めた。同じ出版社の週刊ホテルレストランという雑誌の連載を書籍化したものらしい。著者は立教大学で社会人向けビジネススクールでホテルマネジメントとホテルインベストメントを教えているらしい。ビジネスの堅い話しを小説調にすれば読みやすいんじゃないかみたいな取り組みなのかな？よくわかてないけど、小説仕立てで業界研究ができるような書籍になっているらしい。第1章プロローグと第2章腐りやすい在庫を読んだ。実際の現場でこんな仕事できない人が改革チームのリーダーなんかになったりしないなと思いながら読んでた。そこは本題じゃない！コンサルティングでありそうな経営の話しが出てくるのでうちの会社の経営の勉強にもなるかもしれない。少しずつ読んでいく。
デプロイ改善の成果 水曜日がすくらむのふりかえりイベントがあるのでそれに間に合わせて簡単にまとめの資料を作った。3スプリント (3週間) もかけて抜本的に開発のワークフローからビルド/デプロイの ci/cd を見直したので開発全般に影響を与えた。
本番環境デプロイ: 実行時間を約72%の短縮 テスト環境デプロイ: 実行時間を約51%の短縮 hotfix デプロイ: 実行時間を約64%の短縮 そもそも従来のやり方では hotfix を出していないので机上の時間ではあるが 単純に github actions の実行時間だけ比較しても速くなっているのだけど、それ以上にブランチ戦略を大きく変えた。従来は3つのブランチで運用していた。
develop test main これを1つのブランチのみで運用できるように開発のワークフローを刷新した。ブランチが1つしかないので ci/cd の戦略もシンプルになって、変則的な運用 (hotfix を出したいとか) をしても、開発全体に影響を与えない。「誰か勝手にブランチを作ってデプロイして」で終わる。従来のやり方は3つのブランチが開発ワークフローと ci/cd に密接であったために本番環境のリリースするときは開発すべてが止まってしまう状態だった。週1回のリリースだったので本番リリース前の1-2日は PR のレビューやマージを止めているという運用になっていた。それは開発速度に大きな影響を与えていた。ブランチ戦略を見直したことでいつでも本番環境にデプロイできるようになって、継続的デリバリーっぽいことがやりたかったらできるよという話しをした。</description><content>&lt;p>23時に寝て5時過ぎに起きた。何度か途中で起きたけど、久しぶりによく寝た。前日あまり寝てなかったから19時過ぎには帰ってきてだらだらしてた。&lt;/p>
&lt;h2 id="もてなしだけではもう食えない">もてなしだけではもう食えない&lt;/h2>
&lt;p>業界研究を兼ねて &lt;a href="https://ec.hoteresonline.com/products/detail.php?product_id=262">もてなしだけではもう食えない -ホテル経営学の本質と実践-&lt;/a> を読み始めた。同じ出版社の週刊ホテルレストランという雑誌の連載を書籍化したものらしい。著者は立教大学で社会人向けビジネススクールでホテルマネジメントとホテルインベストメントを教えているらしい。ビジネスの堅い話しを小説調にすれば読みやすいんじゃないかみたいな取り組みなのかな？よくわかてないけど、小説仕立てで業界研究ができるような書籍になっているらしい。第1章プロローグと第2章腐りやすい在庫を読んだ。実際の現場でこんな仕事できない人が改革チームのリーダーなんかになったりしないなと思いながら読んでた。そこは本題じゃない！コンサルティングでありそうな経営の話しが出てくるのでうちの会社の経営の勉強にもなるかもしれない。少しずつ読んでいく。&lt;/p>
&lt;h2 id="デプロイ改善の成果">デプロイ改善の成果&lt;/h2>
&lt;p>水曜日がすくらむのふりかえりイベントがあるのでそれに間に合わせて簡単にまとめの資料を作った。3スプリント (3週間) もかけて抜本的に開発のワークフローからビルド/デプロイの ci/cd を見直したので開発全般に影響を与えた。&lt;/p>
&lt;ul>
&lt;li>本番環境デプロイ: 実行時間を約72%の短縮&lt;/li>
&lt;li>テスト環境デプロイ: 実行時間を約51%の短縮&lt;/li>
&lt;li>hotfix デプロイ: 実行時間を約64%の短縮
&lt;ul>
&lt;li>そもそも従来のやり方では hotfix を出していないので机上の時間ではあるが&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>単純に github actions の実行時間だけ比較しても速くなっているのだけど、それ以上にブランチ戦略を大きく変えた。従来は3つのブランチで運用していた。&lt;/p>
&lt;ul>
&lt;li>develop&lt;/li>
&lt;li>test&lt;/li>
&lt;li>main&lt;/li>
&lt;/ul>
&lt;p>これを1つのブランチのみで運用できるように開発のワークフローを刷新した。ブランチが1つしかないので ci/cd の戦略もシンプルになって、変則的な運用 (hotfix を出したいとか) をしても、開発全体に影響を与えない。「誰か勝手にブランチを作ってデプロイして」で終わる。従来のやり方は3つのブランチが開発ワークフローと ci/cd に密接であったために本番環境のリリースするときは開発すべてが止まってしまう状態だった。週1回のリリースだったので本番リリース前の1-2日は PR のレビューやマージを止めているという運用になっていた。それは開発速度に大きな影響を与えていた。ブランチ戦略を見直したことでいつでも本番環境にデプロイできるようになって、継続的デリバリーっぽいことがやりたかったらできるよという話しをした。&lt;/p></content></item><item><title>ワークフローの移行説明</title><link>/diary/posts/2022/0307/</link><pubDate>Mon, 07 Mar 2022 08:11:25 +0900</pubDate><guid>/diary/posts/2022/0307/</guid><description>3時に寝て6時半に起きた。朝起きたら github actions のリソース上限に達しているという連絡が slack に書き込まれていて週末に移行作業して1500分ぐらいは浪費しましたと事後報告した。
ワークフロー移行後の説明 週末に移行した新しい ci/cd の仕組みを開発者に説明した。開発のワークフローも大きく変わる。いくつか要望をもらいつつ、とくに混乱も誤解もなく受け入れられた。github actions の管理画面からボタンでデプロイ実行できるため、本番環境にデプロイできるユーザーは制限したいと言われて次のようなステップを追加した。
- name: デプロイユーザーを確認 if: ${{ env.DEPLOYMENT_ENV == &amp;#39;prod&amp;#39; }} run: |[[ &amp;#34;${{ contains(fromJSON(env.DEPLOYABLE_USERS), github.actor) }}&amp;#34; == &amp;#34;true&amp;#34; ]] &amp;amp;&amp;amp; exit 0 echo &amp;#34;デプロイ権限のあるユーザーではありません&amp;#34; exit 1 env: DEPLOYABLE_USERS: &amp;#39;[&amp;#34;user1&amp;#34;, &amp;#34;user2&amp;#34;, &amp;#34;app-bot&amp;#34;]&amp;#39; expressions の Functions に組み込みの関数がいくつか紹介されている。それらを組み合わせるとうまくいきそうと思って書いてみた。たしかにちょっと楽に実装はできるけど、github actions の expression とシェルの文字列との境界が、yaml のコード上では曖昧なため、真偽値などはとくにわかりにくい。例えば、次のコード。
[[ &amp;#34;${{ contains(fromJSON(env.DEPLOYABLE_USERS), github.actor) }}&amp;#34; == &amp;#34;true&amp;#34; ]] ${{ ... }} で囲まれたところは github の expression なので boolean として評価できるが、それをシェルにもってくると文字列になってしまうので文字列で比較しないといけない。普通にコードを書いていて気づきにくいので実行して振る舞いを検証しないと間違うみたいな話し。</description><content>&lt;p>3時に寝て6時半に起きた。朝起きたら github actions のリソース上限に達しているという連絡が slack に書き込まれていて週末に移行作業して1500分ぐらいは浪費しましたと事後報告した。&lt;/p>
&lt;h2 id="ワークフロー移行後の説明">ワークフロー移行後の説明&lt;/h2>
&lt;p>週末に移行した新しい ci/cd の仕組みを開発者に説明した。開発のワークフローも大きく変わる。いくつか要望をもらいつつ、とくに混乱も誤解もなく受け入れられた。github actions の管理画面からボタンでデプロイ実行できるため、本番環境にデプロイできるユーザーは制限したいと言われて次のようなステップを追加した。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">デプロイユーザーを確認&lt;/span>
&lt;span style="color:#f92672">if&lt;/span>: &lt;span style="color:#ae81ff">${{ env.DEPLOYMENT_ENV == &amp;#39;prod&amp;#39; }}&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> [[ &amp;#34;${{ contains(fromJSON(env.DEPLOYABLE_USERS), github.actor) }}&amp;#34; == &amp;#34;true&amp;#34; ]] &amp;amp;&amp;amp; exit 0
&lt;/span>&lt;span style="color:#e6db74"> echo &amp;#34;デプロイ権限のあるユーザーではありません&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> exit 1&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
&lt;span style="color:#f92672">DEPLOYABLE_USERS&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;[&amp;#34;user1&amp;#34;, &amp;#34;user2&amp;#34;, &amp;#34;app-bot&amp;#34;]&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>expressions の &lt;a href="https://docs.github.com/en/actions/learn-github-actions/expressions#functions">Functions&lt;/a> に組み込みの関数がいくつか紹介されている。それらを組み合わせるとうまくいきそうと思って書いてみた。たしかにちょっと楽に実装はできるけど、github actions の expression とシェルの文字列との境界が、yaml のコード上では曖昧なため、真偽値などはとくにわかりにくい。例えば、次のコード。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#f92672">[[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>{ contains(fromJSON(env.DEPLOYABLE_USERS), github.actor) &lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">}&amp;#34;&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#f92672">]]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>${{ ... }}&lt;/code> で囲まれたところは github の expression なので boolean として評価できるが、それをシェルにもってくると文字列になってしまうので文字列で比較しないといけない。普通にコードを書いていて気づきにくいので実行して振る舞いを検証しないと間違うみたいな話し。&lt;/p></content></item><item><title>もっとさいきょうのでぷろい</title><link>/diary/posts/2022/0306/</link><pubDate>Sun, 06 Mar 2022 02:58:35 +0900</pubDate><guid>/diary/posts/2022/0306/</guid><description>ぼくのかんがえたもっとさいきょうのでぷろい 昨日 ぼくのかんがえたさいきょうのでぷろい を実装したんだけど、その後、残っていた残課題に対応しているうちにもっと最強のデプロイ方法があることに気付いた。結論から言って GitHub Deployments を使う必要がなかった。GitHub Deployments で過去のリビジョンを指定したときは次のような 409 エラーが発生する。
gh: Conflict merging main into f0cff65c94c4a242efebc79c8fb1e31d58d2f592. (HTTP 409) これを回避するためにどんな手段があるかなと workflow dispatch event をみていて inputs というパラメーターがあることに気付いた。あれ？workflow dispatch ってパラメーターを受け取ることができたんだっけ？と調べたら2020年7月ぐらいからできるようになってた。
GitHub Actions: Manual triggers with workflow_dispatch GitHub Actions: Input types for manual workflows github actions の web ui とも連動していて画面からもパラメーターを渡せるようになっていた。jenkins で言うところのパラメーター付きビルドと呼ばれる機能。カスタムアクションの inputs と同じような使い勝手で利用できる。workflow dispatch がパラメーターを受け取れるなら GitHub Deployments を使うメリットって何があるっけ？と思ったら何もなかった。GitHub Deployments を使うことで無駄にリソースを浪費してパイプライン処理を複雑化させるデメリットしかなかった。inputs に渡す型に environment を指定すると、環境の制限や権限、protected branch などにも応用できるらしい。但し、この environment は public リポジトリか、github enterprise でしか高度な設定はできないみたい。GitHub Deployments 経由でリソースの作成自体はできる。</description><content>&lt;h2 id="ぼくのかんがえたもっとさいきょうのでぷろい">ぼくのかんがえたもっとさいきょうのでぷろい&lt;/h2>
&lt;p>昨日 &lt;a href="/diary/diary/posts/2022/0305/#ぼくのかんがえたさいきょうのでぷろい">ぼくのかんがえたさいきょうのでぷろい&lt;/a> を実装したんだけど、その後、残っていた残課題に対応しているうちにもっと最強のデプロイ方法があることに気付いた。結論から言って &lt;a href="https://docs.github.com/en/rest/reference/deployments">GitHub Deployments&lt;/a> を使う必要がなかった。GitHub Deployments で過去のリビジョンを指定したときは次のような 409 エラーが発生する。&lt;/p>
&lt;pre tabindex="0">&lt;code>gh: Conflict merging main into f0cff65c94c4a242efebc79c8fb1e31d58d2f592. (HTTP 409)
&lt;/code>&lt;/pre>&lt;p>これを回避するためにどんな手段があるかなと &lt;a href="https://docs.github.com/en/rest/reference/actions#create-a-workflow-dispatch-event">workflow dispatch event&lt;/a> をみていて &lt;code>inputs&lt;/code> というパラメーターがあることに気付いた。あれ？workflow dispatch ってパラメーターを受け取ることができたんだっけ？と調べたら2020年7月ぐらいからできるようになってた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/">GitHub Actions: Manual triggers with workflow_dispatch&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.blog/changelog/2021-11-10-github-actions-input-types-for-manual-workflows/">GitHub Actions: Input types for manual workflows&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>github actions の web ui とも連動していて画面からもパラメーターを渡せるようになっていた。jenkins で言うところのパラメーター付きビルドと呼ばれる機能。カスタムアクションの &lt;a href="https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#inputs">inputs&lt;/a> と同じような使い勝手で利用できる。workflow dispatch がパラメーターを受け取れるなら GitHub Deployments を使うメリットって何があるっけ？と思ったら何もなかった。GitHub Deployments を使うことで無駄にリソースを浪費してパイプライン処理を複雑化させるデメリットしかなかった。inputs に渡す型に &lt;a href="https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment">environment&lt;/a> を指定すると、環境の制限や権限、protected branch などにも応用できるらしい。但し、この environment は public リポジトリか、github enterprise でしか高度な設定はできないみたい。GitHub Deployments 経由でリソースの作成自体はできる。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0306_workflow-dispatch.png"/>
&lt;/figure></content></item><item><title>週末は休出</title><link>/diary/posts/2022/0305/</link><pubDate>Sat, 05 Mar 2022 18:55:18 +0900</pubDate><guid>/diary/posts/2022/0305/</guid><description>2時に寝て8時頃に起きた。前日に深夜まで開発してたせいか、朝起きたら頭痛かった。
ストレッチ お仕事に集中していて今週は1回しかストレッチができなかった。今日の開脚幅は開始前164cmで、ストレッチ後165cmだった。先週と同じぐらいかな。それでも毎週予定が入っているので必ず週に1回はちゃんとしたストレッチを受けられる。もう1年以上続けているのだけど、以前より体調のよい状態をずっと継続できている。私はなにかに集中すると他のことをしばらく放置してそればっかりやってしまう傾向があるから毎週の予約があることが継続的な体調管理に大きく役立っている。太ももの後ろの筋肉と腰のストレッチの2つを楽しみにしている。デスクワークをする人は基本的にこの2つに疲労が蓄積するので疲労が溜まるのは自然と言える。その度合いがどのぐらいかでその週の疲労感や調子がよくわかる。今日は先週よりもその2つはましになっていた。
ぼくのかんがえたさいきょうのでぷろい ここ2週間ほど、ビルドとデプロイの分離のための作業をしている。具体的には GitHub Deployments と GitHub Actions を組み合わせて、新たな開発のワークフローを作るといったもの。main, test, develop と3つのブランチで開発/運用しているのを main ブランチ1つに統合し、ビルドもデプロイも最小限に留めて継続的デリバリーを目指すというもの。移行時は開発を止めてしまうのでこの土日で作業する予定だった。準備は十分にやっていたので問題なく移行を完了させた。今日は単体リポジトリのテスト環境へのデプロイができるところまでできた。あとはデプロイツールや github actions の処理を洗練させていくだけ。テンションが上がっているのでこのまま明日も休出してできるだけ品質をあげていく。</description><content>&lt;p>2時に寝て8時頃に起きた。前日に深夜まで開発してたせいか、朝起きたら頭痛かった。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>お仕事に集中していて今週は1回しかストレッチができなかった。今日の開脚幅は開始前164cmで、ストレッチ後165cmだった。先週と同じぐらいかな。それでも毎週予定が入っているので必ず週に1回はちゃんとしたストレッチを受けられる。もう1年以上続けているのだけど、以前より体調のよい状態をずっと継続できている。私はなにかに集中すると他のことをしばらく放置してそればっかりやってしまう傾向があるから毎週の予約があることが継続的な体調管理に大きく役立っている。太ももの後ろの筋肉と腰のストレッチの2つを楽しみにしている。デスクワークをする人は基本的にこの2つに疲労が蓄積するので疲労が溜まるのは自然と言える。その度合いがどのぐらいかでその週の疲労感や調子がよくわかる。今日は先週よりもその2つはましになっていた。&lt;/p>
&lt;h2 id="ぼくのかんがえたさいきょうのでぷろい">ぼくのかんがえたさいきょうのでぷろい&lt;/h2>
&lt;p>ここ2週間ほど、ビルドとデプロイの分離のための作業をしている。具体的には &lt;a href="https://docs.github.com/en/rest/reference/deployments">GitHub Deployments&lt;/a> と &lt;a href="https://docs.github.com/en/actions">GitHub Actions&lt;/a> を組み合わせて、新たな開発のワークフローを作るといったもの。main, test, develop と3つのブランチで開発/運用しているのを main ブランチ1つに統合し、ビルドもデプロイも最小限に留めて継続的デリバリーを目指すというもの。移行時は開発を止めてしまうのでこの土日で作業する予定だった。準備は十分にやっていたので問題なく移行を完了させた。今日は単体リポジトリのテスト環境へのデプロイができるところまでできた。あとはデプロイツールや github actions の処理を洗練させていくだけ。テンションが上がっているのでこのまま明日も休出してできるだけ品質をあげていく。&lt;/p></content></item><item><title>組織系のイベントにはもう参加しない</title><link>/diary/posts/2022/0304/</link><pubDate>Fri, 04 Mar 2022 08:11:33 +0900</pubDate><guid>/diary/posts/2022/0304/</guid><description>0時に寝て3時40分に起きてそれからの記憶があまりないけど、6時半には起きてた。昼間は久しぶりにシェルスクリプトに熱中してて夜にイベントがあって、それを聞きながらも日付が変わるぐらいまではずっとシェルスクリプトを書いていた。
よくわからないイベント参加 【デブサミ再演】10年後もエンジニアが成長し続けるためにできることを、20年続く組織の中から考える に参加した。なにかの機会でたまたまみかけて中堅社員のキャリア論かなと思って参加したけど、なんかいまいちだった。シェルスクリプトを書きながら聞いてたから大事な話しもしていたかもしれないけど、miro でプレゼン資料が作られていて、参加者が付箋などに書いたコメントをみながら主催者が回答したりもしつつ、スライドで説明したりもしつつ、発表と雑談が混ざった進行で私からはコミュニティの内輪感にみえたし、何が言いたいのかよくわからないイベントだった。コミュニティのメンバー数をみるとそこそこ大きいようにもみえるので、単純に私がコミュニティの対象とする参加者ではなかったんだと思う。パワーポイントなどのスライド資料でプレゼンするのではなく、miro でプレゼンするというスタイルが新鮮で私からはそれがもっとも参考になった点だった。
組織論やキャリアの悩みは私の中では決着がついてしまったのかもしれない。変なことは言っていないし、5年前ぐらいの自分なら関心をもって聞いていたかもしれないけど、自分で会社を作ってみて、組織の論理に振り回されることがなくなって、自分のやりたいことに集中できるようになったからかもしれない。</description><content>&lt;p>0時に寝て3時40分に起きてそれからの記憶があまりないけど、6時半には起きてた。昼間は久しぶりにシェルスクリプトに熱中してて夜にイベントがあって、それを聞きながらも日付が変わるぐらいまではずっとシェルスクリプトを書いていた。&lt;/p>
&lt;h2 id="よくわからないイベント参加">よくわからないイベント参加&lt;/h2>
&lt;p>&lt;a href="https://retrospective.connpass.com/event/240185/">【デブサミ再演】10年後もエンジニアが成長し続けるためにできることを、20年続く組織の中から考える&lt;/a> に参加した。なにかの機会でたまたまみかけて中堅社員のキャリア論かなと思って参加したけど、なんかいまいちだった。シェルスクリプトを書きながら聞いてたから大事な話しもしていたかもしれないけど、miro でプレゼン資料が作られていて、参加者が付箋などに書いたコメントをみながら主催者が回答したりもしつつ、スライドで説明したりもしつつ、発表と雑談が混ざった進行で私からはコミュニティの内輪感にみえたし、何が言いたいのかよくわからないイベントだった。コミュニティのメンバー数をみるとそこそこ大きいようにもみえるので、単純に私がコミュニティの対象とする参加者ではなかったんだと思う。パワーポイントなどのスライド資料でプレゼンするのではなく、miro でプレゼンするというスタイルが新鮮で私からはそれがもっとも参考になった点だった。&lt;/p>
&lt;p>組織論やキャリアの悩みは私の中では決着がついてしまったのかもしれない。変なことは言っていないし、5年前ぐらいの自分なら関心をもって聞いていたかもしれないけど、自分で会社を作ってみて、組織の論理に振り回されることがなくなって、自分のやりたいことに集中できるようになったからかもしれない。&lt;/p></content></item><item><title>裁判の結審</title><link>/diary/posts/2022/0303/</link><pubDate>Thu, 03 Mar 2022 07:57:41 +0900</pubDate><guid>/diary/posts/2022/0303/</guid><description>0時に寝て3時40分に起きて気付いたら6時半だった。
交通事故の裁判 父の交通事故の裁判で保険会社と和解が成立した。交通事故の後、症状固定という、医師の視点からは治療は完了したという診断書をもって加害者の保険会社から任意保険の保険金が支払われる。相手の保険会社の審査のようなものが滞っていて症状固定診断から1年以上経っても支払われないので裁判を起こしていた。弁護士さん曰く、保険会社も多忙なので保険金支払いの裁判を起こすのはよくあることだと当時聞いた。基本的に私は弁護士さんとメールでやり取りしているだけだったが、裁判の傍聴 も1度だけした。10月にもう少しで終わりそうと見積もっていて、実際に結審したのが3月なので5ヶ月ぐらいかかっている。裁判は1-3ヶ月に1回ぐらいの頻度でしか開かれないのでそういう時系列になる。裁判を始めたのが2021年6月頃なので和解という形で結審するまで1年半ぐらいかかったことになる。父が交通事故にあってから約5年が経過していた。保険金は父の財産であり、成年後見人の弁護士さんが管理するもの。保険金支払いは父も含めて家族の生活に変化をもたらすものではない。私が弁護士さんとやり取りする必要がなくなるので自由時間が増えるというぐらいの変化。</description><content>&lt;p>0時に寝て3時40分に起きて気付いたら6時半だった。&lt;/p>
&lt;h2 id="交通事故の裁判">交通事故の裁判&lt;/h2>
&lt;p>父の交通事故の裁判で保険会社と和解が成立した。交通事故の後、症状固定という、医師の視点からは治療は完了したという診断書をもって加害者の保険会社から任意保険の保険金が支払われる。相手の保険会社の審査のようなものが滞っていて症状固定診断から1年以上経っても支払われないので裁判を起こしていた。弁護士さん曰く、保険会社も多忙なので保険金支払いの裁判を起こすのはよくあることだと当時聞いた。基本的に私は弁護士さんとメールでやり取りしているだけだったが、&lt;a href="/diary/diary/posts/2021/1007/#裁判の傍聴">裁判の傍聴&lt;/a> も1度だけした。10月にもう少しで終わりそうと見積もっていて、実際に結審したのが3月なので5ヶ月ぐらいかかっている。裁判は1-3ヶ月に1回ぐらいの頻度でしか開かれないのでそういう時系列になる。裁判を始めたのが2021年6月頃なので和解という形で結審するまで1年半ぐらいかかったことになる。父が交通事故にあってから約5年が経過していた。保険金は父の財産であり、成年後見人の弁護士さんが管理するもの。保険金支払いは父も含めて家族の生活に変化をもたらすものではない。私が弁護士さんとやり取りする必要がなくなるので自由時間が増えるというぐらいの変化。&lt;/p></content></item><item><title>シェルスクリプトも進化する</title><link>/diary/posts/2022/0302/</link><pubDate>Wed, 02 Mar 2022 13:28:44 +0900</pubDate><guid>/diary/posts/2022/0302/</guid><description>23時に寝て2時に起きて6時に起きた。
シェルスクリプト再考 久しぶりにシュルスクリプトを書いていて、ユーティリティ関数をうまいこと実装できないかを調べていたら nameref という仕組みが bash 4.3 以降で使えるらしい。私の bash 環境は 5.0.17 なので、bash 5 以上という制約にしてしまってもよいだろうと思う。例えば、こんなことができる。シェルスクリプトで split を実装するの面倒よね。
function split() { local -n arr=&amp;#34;$1&amp;#34; local values=&amp;#34;$2&amp;#34; local sep=&amp;#34;${3:-,}&amp;#34; IFS=&amp;#34;${sep}&amp;#34; read -a arr &amp;lt;&amp;lt;&amp;lt; $(echo &amp;#34;$values&amp;#34; | tr -d &amp;#39;[:space:]&amp;#39;) } function test() { split mylist &amp;#34;a, b, c&amp;#34; echo &amp;#34;&amp;#39;${mylist[0]}&amp;#39;&amp;#34; echo &amp;#34;&amp;#39;${mylist[1]}&amp;#39;&amp;#34; echo &amp;#34;&amp;#39;${mylist[2]}&amp;#39;&amp;#34; } 実行結果。ちょっと感動した。
$ test &amp;#39;a&amp;#39; &amp;#39;b&amp;#39; &amp;#39;c&amp;#39; How to return an array in bash without using globals? 3.</description><content>&lt;p>23時に寝て2時に起きて6時に起きた。&lt;/p>
&lt;h2 id="シェルスクリプト再考">シェルスクリプト再考&lt;/h2>
&lt;p>久しぶりにシュルスクリプトを書いていて、ユーティリティ関数をうまいこと実装できないかを調べていたら &lt;strong>nameref&lt;/strong> という仕組みが bash 4.3 以降で使えるらしい。私の bash 環境は 5.0.17 なので、bash 5 以上という制約にしてしまってもよいだろうと思う。例えば、こんなことができる。シェルスクリプトで split を実装するの面倒よね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#66d9ef">function&lt;/span> split&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
local -n arr&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local values&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$2&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>3&lt;span style="color:#66d9ef">:-&lt;/span>,&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
IFS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>sep&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
read -a arr &lt;span style="color:#f92672">&amp;lt;&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$values&lt;span style="color:#e6db74">&amp;#34;&lt;/span> | tr -d &lt;span style="color:#e6db74">&amp;#39;[:space:]&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> test&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
split mylist &lt;span style="color:#e6db74">&amp;#34;a, b, c&amp;#34;&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;&amp;#39;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>mylist[0]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#34;&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;&amp;#39;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>mylist[1]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#34;&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;&amp;#39;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>mylist[2]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#34;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>実行結果。ちょっと感動した。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ test
&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;b&amp;#39;&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;c&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/10582763/how-to-return-an-array-in-bash-without-using-globals">How to return an array in bash without using globals?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameters.html">3.4 Shell Parameters&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="bizpy-勉強会">bizpy 勉強会&lt;/h2>
&lt;p>&lt;a href="https://bizpy.connpass.com/event/239471/">Python で機械学習の前処理をやってみる勉強会&lt;/a> を開催した。今回も講師をわたなべさんにお願いした。私が余裕なくて全くなにもできていない。運営が2人いるとすごく助かる。今回は機械学習の前処理に着目して pandas や scikit-learn を使って実際にどういったプログラミングをするかを解説してもらった。&lt;a href="https://colab.research.google.com/">Colab&lt;/a> を使ってデモするのがいまどきのやり方なのかな？私は全く触ったことがないけど、そういうやり方の違いも含めて関心をもてた。Colab 上で普通に git コマンドも使えるのでリポジトリのクローンなんかもできる。次回は私もなにかしら発表をしたいなとは思う。いまのお仕事が一段落ついたら。&lt;/p></content></item><item><title>github apps を調べた</title><link>/diary/posts/2022/0301/</link><pubDate>Tue, 01 Mar 2022 07:56:36 +0900</pubDate><guid>/diary/posts/2022/0301/</guid><description>23時に寝て5時半に起きた。何度か夜中にも起きた。起きてからドラクエタクトやってた。
oauth apps と github apps いまお仕事で ci/cd の改善をやっていて、その一環としてリポジトリをまたがったパイプライン処理を検討している。 ci/cd で使うような認可の仕組みとして github には oauth apps と github apps の2種類がある。
Building OAuth Apps Building GitHub Apps 私はどちらも全く関わったことがなかったので、仕組みがイメージできる oauth apps を使えばよいのだろうと調べ始めた。しかし、一通り調べてみて会社の開発における ci/cd に使うなら github apps の方が適していることがわかった。両者がどう違うのかもドキュメントに記載されている。最初にこのドキュメントを読めば oauth apps を調査する必要はなかった。
Differences between GitHub Apps and OAuth Apps 具体的には、oauth apps は user の権限を認可する仕組みで、github apps は organization の権限を認可する仕組みと言える。github apps も oauth によるユーザー認証もできる上にアプリ自身の認証もできる。さらにアクセスできるリポジトリも制限できることから github actions などで、特定のリポジトリに対してのみアクセス可能なトークンを取得するには github apps の方が向くというわけだ。oauth でユーザーが認可するときに scope を指定するが、その scope を organization が設定できるといったところが github apps と oauth との違いにみえる。取得できる token の有効期限にもその考え方の違いが出ている。</description><content>&lt;p>23時に寝て5時半に起きた。何度か夜中にも起きた。起きてからドラクエタクトやってた。&lt;/p>
&lt;h2 id="oauth-apps-と-github-apps">oauth apps と github apps&lt;/h2>
&lt;p>いまお仕事で ci/cd の改善をやっていて、その一環としてリポジトリをまたがったパイプライン処理を検討している。
ci/cd で使うような認可の仕組みとして github には oauth apps と github apps の2種類がある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.github.com/en/developers/apps/building-oauth-apps">Building OAuth Apps&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.github.com/en/developers/apps/building-github-apps">Building GitHub Apps&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>私はどちらも全く関わったことがなかったので、仕組みがイメージできる oauth apps を使えばよいのだろうと調べ始めた。しかし、一通り調べてみて会社の開発における ci/cd に使うなら github apps の方が適していることがわかった。両者がどう違うのかもドキュメントに記載されている。最初にこのドキュメントを読めば oauth apps を調査する必要はなかった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.github.com/en/developers/apps/getting-started-with-apps/differences-between-github-apps-and-oauth-apps">Differences between GitHub Apps and OAuth Apps&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>具体的には、oauth apps は user の権限を認可する仕組みで、github apps は organization の権限を認可する仕組みと言える。github apps も oauth によるユーザー認証もできる上にアプリ自身の認証もできる。さらにアクセスできるリポジトリも制限できることから github actions などで、特定のリポジトリに対してのみアクセス可能なトークンを取得するには github apps の方が向くというわけだ。oauth でユーザーが認可するときに scope を指定するが、その scope を organization が設定できるといったところが github apps と oauth との違いにみえる。取得できる token の有効期限にもその考え方の違いが出ている。&lt;/p>
&lt;ul>
&lt;li>oauth apps
&lt;ul>
&lt;li>ユーザー/デバイス認証
&lt;ul>
&lt;li>認可コード: 15分&lt;/li>
&lt;li>アクセストークン: 無期限&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>github apps
&lt;ul>
&lt;li>installation 認証
&lt;ul>
&lt;li>認可jwt: 10分&lt;/li>
&lt;li>installation トークン: 1時間&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ユーザー/デバイス認証
&lt;ul>
&lt;li>認可コード: 15分&lt;/li>
&lt;li>アクセストークン: 8時間&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content></item><item><title>kustomize の動的な設定</title><link>/diary/posts/2022/0228/</link><pubDate>Mon, 28 Feb 2022 08:11:25 +0900</pubDate><guid>/diary/posts/2022/0228/</guid><description>23時に寝て2時に起きてそこから断続的に寝たり起きたりを繰り返して6時に半に起きた。ウクライナ情勢のニュースや記事ばかり読んでてあてられた。
kustomize の動的な設定 kustomize で管理している image のタグをデプロイ処理の中で動的に変更したい。パラメーター渡しなり環境変数なり、なにかしらあるだろうとは予測している。Demo: change image names and tags のサンプルによると、次のように実行すればよいみたい。
$ kustomize edit set image busybox=alpine:3.6 次のような kustomization.yaml をセットしてくれるみたい。
images: - name: busybox newName: alpine newTag: 3.6 タグのところをリビジョン指定できればいいだけなのでとくに SECRET を使う必要もない。このやり方で書き換えた newTag が POD のデプロイ対象になってくれればよいはず。</description><content>&lt;p>23時に寝て2時に起きてそこから断続的に寝たり起きたりを繰り返して6時に半に起きた。ウクライナ情勢のニュースや記事ばかり読んでてあてられた。&lt;/p>
&lt;h2 id="kustomize-の動的な設定">kustomize の動的な設定&lt;/h2>
&lt;p>kustomize で管理している image のタグをデプロイ処理の中で動的に変更したい。パラメーター渡しなり環境変数なり、なにかしらあるだろうとは予測している。&lt;a href="https://github.com/kubernetes-sigs/kustomize/blob/master/examples/image.md">Demo: change image names and tags&lt;/a> のサンプルによると、次のように実行すればよいみたい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kustomize edit set image busybox&lt;span style="color:#f92672">=&lt;/span>alpine:3.6
&lt;/code>&lt;/pre>&lt;/div>&lt;p>次のような &lt;code>kustomization.yaml&lt;/code> をセットしてくれるみたい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">images&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">busybox&lt;/span>
&lt;span style="color:#f92672">newName&lt;/span>: &lt;span style="color:#ae81ff">alpine&lt;/span>
&lt;span style="color:#f92672">newTag&lt;/span>: &lt;span style="color:#ae81ff">3.6&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>タグのところをリビジョン指定できればいいだけなのでとくに SECRET を使う必要もない。このやり方で書き換えた &lt;code>newTag&lt;/code> が POD のデプロイ対象になってくれればよいはず。&lt;/p></content></item><item><title>ウクライナ情勢</title><link>/diary/posts/2022/0227/</link><pubDate>Sun, 27 Feb 2022 15:38:22 +0900</pubDate><guid>/diary/posts/2022/0227/</guid><description>0時に寝て7時に起きた。アニメみたりドラクエタクトしたりして11時ぐらいまでだらだらしてた。
保険料率の変更 毎年、社会保険の保険料率が変更されるのでその保険料の計算をして反映しないといけない。多くの会社は3月度の保険料は翌月払いとなるので4月からの反映となるが、うちの会社は当月締めの当月払いなので3月から反映させないといけない。
健康保険料率: 10.24% → 10.13% 介護保険料率: 1.80% → 1.64% 協会けんぽの来期の保険料率は下がるみたい。毎年少しずつ上がっていく一方だと思っていたのでそういうこともあるんだなという印象。
ウクライナ情勢 タイムラインを眺めていると、否応でもウクライナ情勢のニュースやコメントが流れてきてなんとなくみてしまって作業の手がつかなくなってしまった。早めに帰って仕切り直そうとしたけど、精神的に疲れてしまって休んでいた。sns の功罪はいろいろあるけど、ネガティブな情報にたくさん触れるのはなかなかしんどいな。何だったかもう忘れたけど、前にもこんなことがあった気がする。そういうときは sns を見ない方がよいのだろうけど、何もしないでいると気になってついつい見てしまう。情報があり過ぎることも問題なんだなとつくづく実感する。</description><content>&lt;p>0時に寝て7時に起きた。アニメみたりドラクエタクトしたりして11時ぐらいまでだらだらしてた。&lt;/p>
&lt;h2 id="保険料率の変更">保険料率の変更&lt;/h2>
&lt;p>毎年、社会保険の保険料率が変更されるのでその保険料の計算をして反映しないといけない。多くの会社は3月度の保険料は翌月払いとなるので4月からの反映となるが、うちの会社は当月締めの当月払いなので3月から反映させないといけない。&lt;/p>
&lt;ul>
&lt;li>健康保険料率: 10.24% → 10.13%&lt;/li>
&lt;li>介護保険料率: 1.80% → 1.64%&lt;/li>
&lt;/ul>
&lt;p>協会けんぽの来期の保険料率は下がるみたい。毎年少しずつ上がっていく一方だと思っていたのでそういうこともあるんだなという印象。&lt;/p>
&lt;h2 id="ウクライナ情勢">ウクライナ情勢&lt;/h2>
&lt;p>タイムラインを眺めていると、否応でもウクライナ情勢のニュースやコメントが流れてきてなんとなくみてしまって作業の手がつかなくなってしまった。早めに帰って仕切り直そうとしたけど、精神的に疲れてしまって休んでいた。sns の功罪はいろいろあるけど、ネガティブな情報にたくさん触れるのはなかなかしんどいな。何だったかもう忘れたけど、前にもこんなことがあった気がする。そういうときは sns を見ない方がよいのだろうけど、何もしないでいると気になってついつい見てしまう。情報があり過ぎることも問題なんだなとつくづく実感する。&lt;/p></content></item><item><title>github deployments の調査</title><link>/diary/posts/2022/0226/</link><pubDate>Sat, 26 Feb 2022 13:11:13 +0900</pubDate><guid>/diary/posts/2022/0226/</guid><description>22時に寝て23時半に起きて1時に寝て6時に起きた。
ストレッチ 先週に引き続き、右太もも後ろの張り感が強い。もしかしたらここ2-3週間、長時間机に向かっていることが増えて負担がかかっているのかもしれない。2月は寒いから帰って散歩やジョギングすることもなくて余計に筋肉をほぐすこともできていない。今日の開脚幅は開始前164cmで、ストレッチ後160cmで先週と変わらないぐらいだった。調子がよくなかったのか、ストレッチ後にあまり開脚できなかった。たまにこういうときもある。
github deployments の調査 github actions を実行するにはなんらかのトリガーが必要なことから、デプロイのためのトリガーに使えそうなものはないかを Events that trigger workflows で調べていたら deployment と deployment_status というイベントがあることに気付いた。
わりと最近できた仕組みで github deployments という api 群が提供されている。一度ベーダとして出したものの、アルファレベルだったせいか、gh cli でも専用コマンドとして機能追加されていないし、github の slack インテグレーションでも一度提供した deploy サブコマンドを削除するみたいなことが発生している。まだ設計やインタフェースが使いやすいものではないから作り直すみたいな状況にみえる。とはいえ、rest api は提供されているので現状の機能のまま github actions のトリガーとして使う分には問題なさそう。
https://github.com/cli/cli/issues/921 https://github.com/integrations/slack/issues/1150 ビルドとデプロイを分離するにあたって、デプロイのためのトリガーが github 上のサービスとしてみつかったのはよかったと言える。github deployments は現状では中途半端なサービスという位置づけにみえる。
github はどこまでいってもリポジトリ単位というのがボトルネックになるからリポジトリをグルーピングする概念を他のサービスで一貫して扱えるようにならないとサードパーティに頼る場面はまだまだありそうかな。
&amp;mdash; Tetsuya Morimoto (@t2y) February 26, 2022</description><content>&lt;p>22時に寝て23時半に起きて1時に寝て6時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>先週に引き続き、右太もも後ろの張り感が強い。もしかしたらここ2-3週間、長時間机に向かっていることが増えて負担がかかっているのかもしれない。2月は寒いから帰って散歩やジョギングすることもなくて余計に筋肉をほぐすこともできていない。今日の開脚幅は開始前164cmで、ストレッチ後160cmで先週と変わらないぐらいだった。調子がよくなかったのか、ストレッチ後にあまり開脚できなかった。たまにこういうときもある。&lt;/p>
&lt;h2 id="github-deployments-の調査">github deployments の調査&lt;/h2>
&lt;p>github actions を実行するにはなんらかのトリガーが必要なことから、デプロイのためのトリガーに使えそうなものはないかを &lt;a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows">Events that trigger workflows&lt;/a> で調べていたら &lt;code>deployment&lt;/code> と &lt;code>deployment_status&lt;/code> というイベントがあることに気付いた。&lt;/p>
&lt;p>わりと最近できた仕組みで &lt;a href="https://docs.github.com/en/rest/reference/deployments">github deployments&lt;/a> という api 群が提供されている。一度ベーダとして出したものの、アルファレベルだったせいか、gh cli でも専用コマンドとして機能追加されていないし、github の slack インテグレーションでも一度提供した deploy サブコマンドを削除するみたいなことが発生している。まだ設計やインタフェースが使いやすいものではないから作り直すみたいな状況にみえる。とはいえ、rest api は提供されているので現状の機能のまま github actions のトリガーとして使う分には問題なさそう。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/cli/cli/issues/921">https://github.com/cli/cli/issues/921&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/integrations/slack/issues/1150">https://github.com/integrations/slack/issues/1150&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ビルドとデプロイを分離するにあたって、デプロイのためのトリガーが github 上のサービスとしてみつかったのはよかったと言える。github deployments は現状では中途半端なサービスという位置づけにみえる。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">github はどこまでいってもリポジトリ単位というのがボトルネックになるからリポジトリをグルーピングする概念を他のサービスで一貫して扱えるようにならないとサードパーティに頼る場面はまだまだありそうかな。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1497458295602544641?ref_src=twsrc%5Etfw">February 26, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item><item><title>主作用による副作用</title><link>/diary/posts/2022/0225/</link><pubDate>Fri, 25 Feb 2022 10:52:21 +0900</pubDate><guid>/diary/posts/2022/0225/</guid><description>0時に寝て4時半に起きた。6時から金朝ツメトギを聞きながら途中で寝てしまって7時過ぎに起きた。
コミュニケーションについての記事を書く 以前 コミュニケーションコストに考えたこと をベースに、3ヶ月フィードバック の一節としてお手伝い先の社内 wiki に書いた。コミュニケーション一般の話なので私の考えを伝えられるよう、社外秘の部分を削除してブログにまとめておくことにした。ちょっと書き始めたところ、また週末にでも時間があるときに少しずつ推敲したり、洗練させて自身の考えを整理していく。現状でも悪い内容ではないけれど、まだしっくり来ていないところもあって、そのもやもやも見直していきたい。
課題管理の特性 課題管理システムにチケットを作成すると fix しない限り、そのチケットは永遠に残り続ける。未着手の状態でずっと放置することもできるが、それは対応を先送りしているだけで完了するわけでもない。チケットの対応方法として wontfix という選択肢が非常に重要になる。問題があることはわかっていたとしても様々な理由で対応しないという判断はありえる。誰がどういう理由でその判断を下したかという背景や意図さえわかれば、仮に将来的にその問題が看過できない状態になったとしても、過去の判断から新たな対応方法を検討したり、その判断の是非をふりかえることができる。これはチケットを作らずに見てみぬふりをして将来同じことが起きるのとは全く異なる知見が積み重なるので非常に重要な意思決定であると私は考えている。
閑話休題。話しがズレた。ここで fix せずにずっと放置するメンバーもいたりする。様々な理由で課題管理に非協力的な姿勢をとるメンバーがいる。少なからずいる。そういう人を放置すると、真面目に課題管理をやっている人たちが腐ってしまうので、課題管理の専門家を自称する私としては看過できない状況と言える。最初のうちは非協力的なメンバーにお願いしてやってもらうわけだけど、やってくれない人はずっとやってくれない。それを言い続けるのも嫌になるので別の対応方法が求められる。私の経験則では若い人に非協力的なメンバーはほぼいない。いまの若い人は優秀なので上司や先輩のやり方をみて勝手にやる人もいるし、ちゃんと教えれば教えた通りにやってくれる。非協力的なメンバーは往々にしてそれなりの経験をもっている中堅以上の社会人に多い。実はお仕事をさぼっていてあまり作業していないとか、課題管理に馴染みがなければ、それまでの自分の仕事のやり方をアンラーニングできないという人もいるかもしれない。理由はともかく、お願いしてもやってくれない人のチケットが課題管理プロセスの中で浮いてみえてくる。他のメンバーが腐る前に対応しないといけない。私の経験則ではこれはすごく難しい問題であるし、非協力的なメンバーそれぞれの理由にあわせて対応する必要があるので工数もかかる。
課題管理をしたくないというメンバーの中には何らかの理由で自律的に働きたくないという人もいる。課題管理というプロセスにおいては、そういった人たちをあぶり出してしまうため、状況によってはとても難しい人間関係の問題へと発展してしまう。</description><content>&lt;p>0時に寝て4時半に起きた。6時から金朝ツメトギを聞きながら途中で寝てしまって7時過ぎに起きた。&lt;/p>
&lt;h2 id="コミュニケーションについての記事を書く">コミュニケーションについての記事を書く&lt;/h2>
&lt;p>以前 &lt;a href="/diary/diary/posts/2022/0107/#情報共有とコミュニケーションコスト">コミュニケーションコストに考えたこと&lt;/a> をベースに、&lt;a href="/diary/diary/posts/2022/0130/#3ヶ月フィードバック完了">3ヶ月フィードバック&lt;/a> の一節としてお手伝い先の社内 wiki に書いた。コミュニケーション一般の話なので私の考えを伝えられるよう、社外秘の部分を削除してブログにまとめておくことにした。ちょっと書き始めたところ、また週末にでも時間があるときに少しずつ推敲したり、洗練させて自身の考えを整理していく。現状でも悪い内容ではないけれど、まだしっくり来ていないところもあって、そのもやもやも見直していきたい。&lt;/p>
&lt;h2 id="課題管理の特性">課題管理の特性&lt;/h2>
&lt;p>課題管理システムにチケットを作成すると fix しない限り、そのチケットは永遠に残り続ける。未着手の状態でずっと放置することもできるが、それは対応を先送りしているだけで完了するわけでもない。チケットの対応方法として &lt;strong>wontfix&lt;/strong> という選択肢が非常に重要になる。問題があることはわかっていたとしても様々な理由で対応しないという判断はありえる。誰がどういう理由でその判断を下したかという背景や意図さえわかれば、仮に将来的にその問題が看過できない状態になったとしても、過去の判断から新たな対応方法を検討したり、その判断の是非をふりかえることができる。これはチケットを作らずに見てみぬふりをして将来同じことが起きるのとは全く異なる知見が積み重なるので非常に重要な意思決定であると私は考えている。&lt;/p>
&lt;p>閑話休題。話しがズレた。ここで fix せずにずっと放置するメンバーもいたりする。様々な理由で課題管理に非協力的な姿勢をとるメンバーがいる。少なからずいる。そういう人を放置すると、真面目に課題管理をやっている人たちが腐ってしまうので、課題管理の専門家を自称する私としては看過できない状況と言える。最初のうちは非協力的なメンバーにお願いしてやってもらうわけだけど、やってくれない人はずっとやってくれない。それを言い続けるのも嫌になるので別の対応方法が求められる。私の経験則では若い人に非協力的なメンバーはほぼいない。いまの若い人は優秀なので上司や先輩のやり方をみて勝手にやる人もいるし、ちゃんと教えれば教えた通りにやってくれる。非協力的なメンバーは往々にしてそれなりの経験をもっている中堅以上の社会人に多い。実はお仕事をさぼっていてあまり作業していないとか、課題管理に馴染みがなければ、それまでの自分の仕事のやり方をアンラーニングできないという人もいるかもしれない。理由はともかく、お願いしてもやってくれない人のチケットが課題管理プロセスの中で浮いてみえてくる。他のメンバーが腐る前に対応しないといけない。私の経験則ではこれはすごく難しい問題であるし、非協力的なメンバーそれぞれの理由にあわせて対応する必要があるので工数もかかる。&lt;/p>
&lt;p>課題管理をしたくないというメンバーの中には何らかの理由で自律的に働きたくないという人もいる。課題管理というプロセスにおいては、そういった人たちをあぶり出してしまうため、状況によってはとても難しい人間関係の問題へと発展してしまう。&lt;/p></content></item><item><title>継続的デリバリーへの第一歩</title><link>/diary/posts/2022/0224/</link><pubDate>Thu, 24 Feb 2022 08:15:56 +0900</pubDate><guid>/diary/posts/2022/0224/</guid><description>0時に寝て6時に起きた。
docker object labels と git リビジョン 継続的デリバリーのために snapshot jar のマニフェストから取得した git のリビジョンを docker イメージの labels に追加するサンプルコードを jib-sample に実装してみた。jib の gradle プラグインを作って簡略化すれば便利かもしれない。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="docker-object-labels-と-git-リビジョン">docker object labels と git リビジョン&lt;/h2>
&lt;p>継続的デリバリーのために snapshot jar のマニフェストから取得した git のリビジョンを docker イメージの &lt;a href="https://docs.docker.com/config/labels-custom-metadata/">labels&lt;/a> に追加するサンプルコードを &lt;a href="https://github.com/t2y/jib-sample">jib-sample&lt;/a> に実装してみた。jib の gradle プラグインを作って簡略化すれば便利かもしれない。&lt;/p></content></item><item><title>java アプリケーションの継続的デリバリー</title><link>/diary/posts/2022/0223/</link><pubDate>Wed, 23 Feb 2022 08:21:39 +0900</pubDate><guid>/diary/posts/2022/0223/</guid><description>0時に寝て3時に起きて6時ぐらいまでだらだらして寝て7時に起きた。
snapshot jar と継続的デリバリー 昨日 jar に git のリビジョン番号を含める ことについて書いた。jar から git のリビジョン番号を取得できれば、docker イメージを生成するときに labels に jar の artifact id と git のリビジョン番号のラベルを追加して、docker イメージからもソースコードの追跡ができるようになる。いまデプロイは docker イメージのみで運用しているため、maven のバージョン管理ができなくても docker イメージの追跡可能性さえあれば現実の運用で問題にならないのではないかと考えた。つまり、snapshot jar で開発したものをそのまま本番環境にデプロイするということを意味する。こうすれば特定のバージョン番号を付けるだけのビルドとデプロイが不要になって、テスト環境にデプロイされた docker イメージのテストを完了すれば、そのイメージをいつでも本番環境にデプロイできるようになる。デプロイするタイミングでビルドする必要がなくなるので継続的デリバリーに近づくのではないかと考えた。
今日、開発の偉い人やインフラ担当者も含めて、みんなでわいわい打ち合わせして、現状の開発では、インターフェースや互換性の変更にあわせてバージョン番号を付けていないし、古いバージョンに戻すことも現実にはなく、保守は常に最新のリビジョンを更新していくから maven でバージョン管理できなくなっても snapshot jar の運用でがんがん開発していけばいいんちゃうという合意を得られた。
実際にこのやり方がうまくいくかどうか、私も初めての試みなのでやってみないとわからないが、この運用によるワークフローの効率化のメリットも大きいので、引き続き、イニシアティブをもって取り組んでいきたい。</description><content>&lt;p>0時に寝て3時に起きて6時ぐらいまでだらだらして寝て7時に起きた。&lt;/p>
&lt;h2 id="snapshot-jar-と継続的デリバリー">snapshot jar と継続的デリバリー&lt;/h2>
&lt;p>昨日 &lt;a href="/diary/diary/posts/2022/0222/#jar-ファイルと-git-のリビジョン">jar に git のリビジョン番号を含める&lt;/a> ことについて書いた。jar から git のリビジョン番号を取得できれば、docker イメージを生成するときに &lt;a href="https://docs.docker.com/config/labels-custom-metadata/">labels&lt;/a> に jar の artifact id と git のリビジョン番号のラベルを追加して、docker イメージからもソースコードの追跡ができるようになる。いまデプロイは docker イメージのみで運用しているため、maven のバージョン管理ができなくても docker イメージの追跡可能性さえあれば現実の運用で問題にならないのではないかと考えた。つまり、snapshot jar で開発したものをそのまま本番環境にデプロイするということを意味する。こうすれば特定のバージョン番号を付けるだけのビルドとデプロイが不要になって、テスト環境にデプロイされた docker イメージのテストを完了すれば、そのイメージをいつでも本番環境にデプロイできるようになる。デプロイするタイミングでビルドする必要がなくなるので継続的デリバリーに近づくのではないかと考えた。&lt;/p>
&lt;p>今日、開発の偉い人やインフラ担当者も含めて、みんなでわいわい打ち合わせして、現状の開発では、インターフェースや互換性の変更にあわせてバージョン番号を付けていないし、古いバージョンに戻すことも現実にはなく、保守は常に最新のリビジョンを更新していくから maven でバージョン管理できなくなっても snapshot jar の運用でがんがん開発していけばいいんちゃうという合意を得られた。&lt;/p>
&lt;p>実際にこのやり方がうまくいくかどうか、私も初めての試みなのでやってみないとわからないが、この運用によるワークフローの効率化のメリットも大きいので、引き続き、イニシアティブをもって取り組んでいきたい。&lt;/p></content></item><item><title>jar のマニフェストファイル</title><link>/diary/posts/2022/0222/</link><pubDate>Tue, 22 Feb 2022 10:12:08 +0900</pubDate><guid>/diary/posts/2022/0222/</guid><description>0時に寝て3時に起きて5時に起きて6時半に起きた。
jar ファイルと git のリビジョン java パッケージのフォーマットとして jar ファイルがある。開発中の jar ファイルは snapshot という特別なバージョンで管理したりするが、この snapshot と git のリビジョンが対応していないので snapshot jar だけではどのリビジョンのソースからビルドされたかがわからない。jar には JAR File Specification で定義された META-INF/MANIFEST.MF に任意のメタデータを保持できる。maven なら maven git commit id plugin と Apache Maven JAR Plugin を組み合わせれば、ビルド設定だけで git のリポジトリ情報を任意のメタデータとして jar に含めることができる。試しにプラグインの検証も兼ねてやってみた。例えば、次のようなマニフェストを作れる。
Manifest-Version: 1.0 Created-By: Apache Maven 3.6.3 Built-By: t2y Build-Jdk: 11.0.13 Specification-Title: My Nice Product Specification-Version: 1.0 Artifact-Id: my-product Build-Time: 2022-02-21T11:39:07Z Git-Branch: main Git-Commit-Id: 81a4642 Git-Commit-Time: 2022-02-21T19:39:30+0900 Git-Commit-User: Tetsuya Morimoto java のコードからマニフェストを取得するサンプルコードはこんな感じ。ググるといくつかやり方があるようなので他の実装もある。但し、このコードだと複数の jar のマニフェストを取得してしまうので、あとで自分がみたい jar のマニフェストをフィルターする処理が必要になる。</description><content>&lt;p>0時に寝て3時に起きて5時に起きて6時半に起きた。&lt;/p>
&lt;h2 id="jar-ファイルと-git-のリビジョン">jar ファイルと git のリビジョン&lt;/h2>
&lt;p>java パッケージのフォーマットとして jar ファイルがある。開発中の jar ファイルは snapshot という特別なバージョンで管理したりするが、この snapshot と git のリビジョンが対応していないので snapshot jar だけではどのリビジョンのソースからビルドされたかがわからない。jar には &lt;a href="https://docs.oracle.com/javase/10/docs/specs/jar/jar.html">JAR File Specification&lt;/a> で定義された &lt;code>META-INF/MANIFEST.MF&lt;/code> に任意のメタデータを保持できる。maven なら &lt;a href="https://github.com/git-commit-id/git-commit-id-maven-plugin">maven git commit id plugin&lt;/a> と &lt;a href="https://github.com/apache/maven-jar-plugin">Apache Maven JAR Plugin&lt;/a> を組み合わせれば、ビルド設定だけで git のリポジトリ情報を任意のメタデータとして jar に含めることができる。試しにプラグインの検証も兼ねてやってみた。例えば、次のようなマニフェストを作れる。&lt;/p>
&lt;pre tabindex="0">&lt;code>Manifest-Version: 1.0
Created-By: Apache Maven 3.6.3
Built-By: t2y
Build-Jdk: 11.0.13
Specification-Title: My Nice Product
Specification-Version: 1.0
Artifact-Id: my-product
Build-Time: 2022-02-21T11:39:07Z
Git-Branch: main
Git-Commit-Id: 81a4642
Git-Commit-Time: 2022-02-21T19:39:30+0900
Git-Commit-User: Tetsuya Morimoto
&lt;/code>&lt;/pre>&lt;p>java のコードからマニフェストを取得するサンプルコードはこんな感じ。ググるといくつかやり方があるようなので他の実装もある。但し、このコードだと複数の jar のマニフェストを取得してしまうので、あとで自分がみたい jar のマニフェストをフィルターする処理が必要になる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String MANIFEST_PATH &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;META-INF/MANIFEST.MF&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> Map&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">,&lt;/span> Manifest&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">getManifests&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#66d9ef">throws&lt;/span> IOException&lt;span style="color:#f92672">,&lt;/span> URISyntaxException &lt;span style="color:#f92672">{&lt;/span>
var map &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> HashMap&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">,&lt;/span> Manifest&lt;span style="color:#f92672">&amp;gt;();&lt;/span>
var resources &lt;span style="color:#f92672">=&lt;/span> MyUtil&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getClassLoader&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">getResources&lt;/span>&lt;span style="color:#f92672">(&lt;/span>MANIFEST_PATH&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#f92672">(&lt;/span>resources&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">hasMoreElements&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
var elem &lt;span style="color:#f92672">=&lt;/span> resources&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">nextElement&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
var part &lt;span style="color:#f92672">=&lt;/span> elem&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">toURI&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">getSchemeSpecificPart&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>part &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">try&lt;/span> &lt;span style="color:#f92672">(&lt;/span>var stream &lt;span style="color:#f92672">=&lt;/span> elem&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">openStream&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
map&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>part&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Manifest&lt;span style="color:#f92672">(&lt;/span>stream&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> map&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>祝日の勤怠</title><link>/diary/posts/2022/0221/</link><pubDate>Mon, 21 Feb 2022 08:36:31 +0900</pubDate><guid>/diary/posts/2022/0221/</guid><description>1時に寝て6時半に起きた。昨日は夕方に一旦帰ってきて仮眠したらまた作業しようと思っていたけど、なんかバテてそのままだらだらしてた。
カレンダー共有と祝日 お手伝い先の社員さんと開発メンバーとのお休みがあわない問題が気になるようになってきた。というのは、お手伝い先は基本的に祝日は営業日として扱われている。おそらくは祝日に働いたら手当がつくのか、代休を別の日にとっているようにみえる。祝日に働かずに休む社員もいる。祝日に休むという表現もおかしいが。業務委託の開発メンバーは原則として祝日は休んで普通の日に働く。ここで社員さんが祝日に働いて普通の日に代休をとると、休みが異なるのでコミュニケーションコストが高くなる。お互いが働いている時間が減ることでその時間に対する価値が高くなってしまうという話し。国が違わない限り、あまりそういう状況は発生しないので、休日をあわせることの重要性を再認識した。
さらに働き始めた頃から気になっている カレンダー共有の問題 がある。休みが異なる可能性が高いのにメンバーのカレンダーはばらばらなので、お休みするという報告をもらっていても日が経つと忘れてしまっていて、slack でメンションをしてしまう場合がある。金曜日に月曜日はお休みすると聞いていたけど、月曜日になったら忘れてたみたいな。お休みしている社員さんに普通にメンションして、普通にやり取りしていて、あとでお休みだったと気付いて申し訳なく思った。カレンダーを確認してお休みだとわかっていれば slack でメンションはしなかった。</description><content>&lt;p>1時に寝て6時半に起きた。昨日は夕方に一旦帰ってきて仮眠したらまた作業しようと思っていたけど、なんかバテてそのままだらだらしてた。&lt;/p>
&lt;h2 id="カレンダー共有と祝日">カレンダー共有と祝日&lt;/h2>
&lt;p>お手伝い先の社員さんと開発メンバーとのお休みがあわない問題が気になるようになってきた。というのは、お手伝い先は基本的に祝日は営業日として扱われている。おそらくは祝日に働いたら手当がつくのか、代休を別の日にとっているようにみえる。祝日に働かずに休む社員もいる。祝日に休むという表現もおかしいが。業務委託の開発メンバーは原則として祝日は休んで普通の日に働く。ここで社員さんが祝日に働いて普通の日に代休をとると、休みが異なるのでコミュニケーションコストが高くなる。お互いが働いている時間が減ることでその時間に対する価値が高くなってしまうという話し。国が違わない限り、あまりそういう状況は発生しないので、休日をあわせることの重要性を再認識した。&lt;/p>
&lt;p>さらに働き始めた頃から気になっている &lt;a href="/diary/diary/posts/2022/0105/#ふりかえり">カレンダー共有の問題&lt;/a> がある。休みが異なる可能性が高いのにメンバーのカレンダーはばらばらなので、お休みするという報告をもらっていても日が経つと忘れてしまっていて、slack でメンションをしてしまう場合がある。金曜日に月曜日はお休みすると聞いていたけど、月曜日になったら忘れてたみたいな。お休みしている社員さんに普通にメンションして、普通にやり取りしていて、あとでお休みだったと気付いて申し訳なく思った。カレンダーを確認してお休みだとわかっていれば slack でメンションはしなかった。&lt;/p></content></item><item><title>2021年度の確定申告</title><link>/diary/posts/2022/0220/</link><pubDate>Sun, 20 Feb 2022 09:48:18 +0900</pubDate><guid>/diary/posts/2022/0220/</guid><description>0時に寝て6時に起きた。
確定申告 本当は9時から受け付けなんだけど、昨年早めに行ったら受け付けしてくれたので今年も8時半ぐらいから出掛けていった。家から徒歩5分のところに特設の申告会場があって、行ったらすでに100人ぐらいは並んでいた。整理券を配るために行列を誘導している係員に「書類は作成済みで提出だけです」と伝えると「どうぞ、こちらへ」と行列をショートカットして、書類の作成会場の横にある提出会場へ案内される。朝一なので誰も提出してなくてすぐに応対してくれた。書類チェックして提出完了。会場についてから提出するまでに5分。あわせて10分もあれば確定申告できる。電子申告してもよいのだけど、寄付金の領収書の電子化が面倒なのでまだ紙で申告している。寄付金の領収書が電子化されて添付できるような手軽さになったら電子申告してもよいかもしれない。
github container action の検証 jib という java アプリケーション向けの docker イメージをビルドするためのツールがある。お仕事で使い始めたので雰囲気を理解するために私もサンプルアプリケーションを jib-sample として作ってみた。簡単に設定して java アプリケーションを docker 化できるので感触はよさそう。基本的に java アプリケーションと docker は相性が悪くて、たぶん go で開発するような用途と比較するとサイズがめちゃくちゃでかい。それでも jib を使うと作成された docker イメージのサイズも自分でビルドして作るよりは小さくしてくれる。さすが google という感じ。
この jib-sample の docker イメージを使って github actions のカスタム container action を作ってみたのが gh-actions-container-sample になる。Creating a Docker container action のドキュメントには Dockerfile を使ったサンプルしか紹介されていないけど、docker イメージを直接参照して利用することもできる。
検証作業をしているときに jib-sample リポジトリの github packages が private 設定になっていることに気付かなくて少しはまった。リポジトリの visibility 設定と github packages の visibility 設定は連動していないのでそれぞれで別に管理しないといけない。
また jib で作った docker イメージはデフォルトでは manifest を作ってくれない。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="確定申告">確定申告&lt;/h2>
&lt;p>本当は9時から受け付けなんだけど、昨年早めに行ったら受け付けしてくれたので今年も8時半ぐらいから出掛けていった。家から徒歩5分のところに特設の申告会場があって、行ったらすでに100人ぐらいは並んでいた。整理券を配るために行列を誘導している係員に「書類は作成済みで提出だけです」と伝えると「どうぞ、こちらへ」と行列をショートカットして、書類の作成会場の横にある提出会場へ案内される。朝一なので誰も提出してなくてすぐに応対してくれた。書類チェックして提出完了。会場についてから提出するまでに5分。あわせて10分もあれば確定申告できる。電子申告してもよいのだけど、寄付金の領収書の電子化が面倒なのでまだ紙で申告している。寄付金の領収書が電子化されて添付できるような手軽さになったら電子申告してもよいかもしれない。&lt;/p>
&lt;h2 id="github-container-action-の検証">github container action の検証&lt;/h2>
&lt;p>&lt;a href="https://github.com/GoogleContainerTools/jib">jib&lt;/a> という java アプリケーション向けの docker イメージをビルドするためのツールがある。お仕事で使い始めたので雰囲気を理解するために私もサンプルアプリケーションを &lt;a href="https://github.com/t2y/jib-sample">jib-sample&lt;/a> として作ってみた。簡単に設定して java アプリケーションを docker 化できるので感触はよさそう。基本的に java アプリケーションと docker は相性が悪くて、たぶん go で開発するような用途と比較するとサイズがめちゃくちゃでかい。それでも jib を使うと作成された docker イメージのサイズも自分でビルドして作るよりは小さくしてくれる。さすが google という感じ。&lt;/p>
&lt;p>この jib-sample の docker イメージを使って github actions のカスタム container action を作ってみたのが &lt;a href="https://github.com/t2y/gh-actions-container-sample">gh-actions-container-sample&lt;/a> になる。&lt;a href="https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action">Creating a Docker container action&lt;/a> のドキュメントには Dockerfile を使ったサンプルしか紹介されていないけど、docker イメージを直接参照して利用することもできる。&lt;/p>
&lt;p>検証作業をしているときに jib-sample リポジトリの github packages が private 設定になっていることに気付かなくて少しはまった。リポジトリの visibility 設定と github packages の visibility 設定は連動していないのでそれぞれで別に管理しないといけない。&lt;/p>
&lt;p>また jib で作った docker イメージはデフォルトでは manifest を作ってくれない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker manifest inspect --verbose ghcr.io/t2y/jib-sample:latest
no such manifest: ghcr.io/t2y/jib-sample:latest
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/GoogleContainerTools/jib/blob/master/docs/faq.md#how-do-i-specify-a-platform-in-the-manifest-list-or-oci-index-of-a-base-image">How do I specify a platform in the manifest list (or OCI index) of a base image?&lt;/a> のドキュメントによると、manifest に platform 情報を追加するのは incubating feature らしくて、なんか条件付きで設定すれば使えそうにもみえたんだけど、私がやってみた感じだとうまくいかなかった。また必要ならもう一度調べてみる。&lt;/p></content></item><item><title>docker の勉強</title><link>/diary/posts/2022/0219/</link><pubDate>Sat, 19 Feb 2022 12:56:33 +0900</pubDate><guid>/diary/posts/2022/0219/</guid><description>0時に寝て6時に起きた。
ストレッチ ここ1ヶ月ほどお仕事に集中しているのもあるけど、あまりストレッチに意識を割いていない。やるときは集中して注力するのだけど、飽きてくると怠ける性格的なところがある。とはいえ、やめずに続けているといいことがあると経験則からわかっているのでなるべく継続していきたい。今週も特別なことはなにもしていないのだけど、右足の股関節周りに張りがあってあまり調子がよくなかった。今日の開脚幅は開始前163cmで、ストレッチ後167cmで先週よりも数値が悪化している。良くなるときもあれば悪くなるときもある。毎週ストレッチを受けて計測しているとそういう気付きがあること自体、この機会は健康のために役立っているように考えている。
github packages で docker イメージを公開する docker が流行りだした頃に勤めていた会社の貸与端末が docker 禁止だったので私は docker に乗り遅れて、これまでも誰かが用意してくれたコンテナを使うだけでよかったため、最低限の docker コマンドや docker-compose の使い方しか知らなかった。ちょうどインフラの運用を見直す過程で docker コンテナの作成方法から見直すお仕事ができたのでこの機にいろいろ勉強する。いまどき当たり前なんだろうけど、docker の マルチステージビルド をやってみる。
最初に go のバイナリを選択したのは間違いだったのかもしれない。go のビルド環境を作るベースイメージの選択が難しくて、ビルドはできるけど、作成したバイナリが動かないという状況にはまった。ECSのタスク起動時に「standard_init_linux.go」関連のエラーが出た場合の対処方法 であるように、いろんな不具合がある。ベースイメージの選択やビルドに必要なライブラリがないとそういうエラーになるんだと気付くまでに時間がかかった。
最終的に次のような Dockerfile でマルチステージビルドができた。builder としてのベースイメージの選択によってやり方はいろいろ変わってくるように思える。
FROM golang:alpine as builder RUN apk add --no-cache git make gcc musl-dev WORKDIR /work COPY . . RUN go mod download RUN make build FROM alpine:latest WORKDIR / COPY --from=builder /work/bin/sql-executor . CMD [ &amp;quot;/sql-executor&amp;quot; ] Dockerfile ができたら Publishing Docker images を読みながら github actions で自動的に docker イメージを github packages に公開する設定をやってみた。リリースを作成したときに docker イメージをビルドして公開する workflow yml を作成した。ほとんどドキュメントのまま。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>ここ1ヶ月ほどお仕事に集中しているのもあるけど、あまりストレッチに意識を割いていない。やるときは集中して注力するのだけど、飽きてくると怠ける性格的なところがある。とはいえ、やめずに続けているといいことがあると経験則からわかっているのでなるべく継続していきたい。今週も特別なことはなにもしていないのだけど、右足の股関節周りに張りがあってあまり調子がよくなかった。今日の開脚幅は開始前163cmで、ストレッチ後167cmで先週よりも数値が悪化している。良くなるときもあれば悪くなるときもある。毎週ストレッチを受けて計測しているとそういう気付きがあること自体、この機会は健康のために役立っているように考えている。&lt;/p>
&lt;h2 id="github-packages-で-docker-イメージを公開する">github packages で docker イメージを公開する&lt;/h2>
&lt;p>docker が流行りだした頃に勤めていた会社の貸与端末が docker 禁止だったので私は docker に乗り遅れて、これまでも誰かが用意してくれたコンテナを使うだけでよかったため、最低限の docker コマンドや docker-compose の使い方しか知らなかった。ちょうどインフラの運用を見直す過程で docker コンテナの作成方法から見直すお仕事ができたのでこの機にいろいろ勉強する。いまどき当たり前なんだろうけど、docker の &lt;a href="https://matsuand.github.io/docs.docker.jp.onthefly/develop/develop-images/multistage-build/">マルチステージビルド&lt;/a> をやってみる。&lt;/p>
&lt;p>最初に go のバイナリを選択したのは間違いだったのかもしれない。go のビルド環境を作るベースイメージの選択が難しくて、ビルドはできるけど、作成したバイナリが動かないという状況にはまった。&lt;a href="https://dev.classmethod.jp/articles/how-to-fix-standard-init-linux-error/">ECSのタスク起動時に「standard_init_linux.go」関連のエラーが出た場合の対処方法&lt;/a> であるように、いろんな不具合がある。ベースイメージの選択やビルドに必要なライブラリがないとそういうエラーになるんだと気付くまでに時間がかかった。&lt;/p>
&lt;p>最終的に次のような &lt;a href="https://github.com/kazamori/go-sql-executor/blob/main/Dockerfile">Dockerfile&lt;/a> でマルチステージビルドができた。builder としてのベースイメージの選択によってやり方はいろいろ変わってくるように思える。&lt;/p>
&lt;pre tabindex="0">&lt;code>FROM golang:alpine as builder
RUN apk add --no-cache git make gcc musl-dev
WORKDIR /work
COPY . .
RUN go mod download
RUN make build
FROM alpine:latest
WORKDIR /
COPY --from=builder /work/bin/sql-executor .
CMD [ &amp;quot;/sql-executor&amp;quot; ]
&lt;/code>&lt;/pre>&lt;p>Dockerfile ができたら &lt;a href="https://docs.github.com/en/actions/publishing-packages/publishing-docker-images">Publishing Docker images&lt;/a> を読みながら github actions で自動的に docker イメージを github packages に公開する設定をやってみた。リリースを作成したときに docker イメージをビルドして公開する &lt;a href="https://github.com/kazamori/go-sql-executor/blob/main/.github/workflows/publish.yml">workflow yml&lt;/a> を作成した。ほとんどドキュメントのまま。&lt;/p>
&lt;p>github actions の実行結果。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/go-sql-executor/runs/5258037718?check_suite_focus=true">https://github.com/kazamori/go-sql-executor/runs/5258037718?check_suite_focus=true&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>github packages 上で公開された docker イメージ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/go-sql-executor/pkgs/container/go-sql-executor">https://github.com/kazamori/go-sql-executor/pkgs/container/go-sql-executor&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>リリースのタイミングじゃなくてコミットのタイミングでも docker イメージを生成できると思うけど、docker イメージのタグに相当するものをどう付けるかというところは工夫する必要がありそう。&lt;/p></content></item><item><title>予算作り</title><link>/diary/posts/2022/0218/</link><pubDate>Fri, 18 Feb 2022 07:53:46 +0900</pubDate><guid>/diary/posts/2022/0218/</guid><description>23時に寝て1時半に起きてそのまま断続的に寝て起きての繰り返しで6時に起きた。本当は非稼働日だけど、昨日作った pr の機能を検証するための環境を用意してもらったのでそれを動かしたら要件漏れに気付いてその改修をやってた。
隔週の雑談 顧問のはらさんと隔週の打ち合わせの日。今日の議題は2つ。
見積もりの雑談 先日、見積もりについての 私の考え を整理した。それについて第3者の意見も聞いてみたいと考えた。
いろいろ雑談したけど、結論としてはバーンダウンチャートもストーリーポイントも運用が形骸化したら役に立たないという当たり前の話しになった。従来の期限や工数を見積もる方法と比較して得られるメリットはそう多くないという私の印象である。ストーリーポイントが優れている唯一の点は、タスクの見積もりについて話し合う場ができるという、その機会そのものがあげられる。その機会を使ってメンバーとの情報共有や教育の場にもできるという点がある。それ以外のところでストーリーポイントのメリットはさしてないと私は感じた。
ストーリーポイント(以下SP)について雑談していて、あるチームでは事前に見積もったSPをタスク完了後に実績ベースで上書きする運用をしていたという。その理由は見積もったSPに対して進捗や実績が悪いと偉い人からお叱りを受けるため、SPが正しくなかったという解釈で実績から変更しているという。
&amp;mdash; Tetsuya Morimoto (@t2y) February 18, 2022 来期の予算策定 ざっくり試算すると来期は少し赤字になる。経営者として赤字にならないようの対策を講じる。私が予め用意した施策は次の3つ。
既存顧客のお仕事の単価をあげる 赤字分の売上を別のお仕事で稼ぐ 赤字分の経費を削減する はらさんから役員報酬を下げてはどうか？という提案もあったけど、これは却下しようと思う。もともと役員報酬は高くないし、役員報酬を下げると必然的に健康保険や社会保険の再計算やそれらに関連する事務手続きが発生する。いま私は会計士も税理士も雇わず自分ですべてやっているのだけど、専門家に依頼するにしろ、自分でやるにしろ、経費を下げるために別の経費を発生させてしまう。これは本末転倒な気がしてやりたくない。
したがって、お仕事の単価をあげる交渉からまず始めることにする。私はずっと開発者で働いてきたから交渉ごとはほとんど経験がない。交渉の経験を積むという側面でも自分のキャリアにとって新しい取り組みになってよいと考えている。次の契約更新は3月末になるのでそれまでに交渉のための準備を進めていく。</description><content>&lt;p>23時に寝て1時半に起きてそのまま断続的に寝て起きての繰り返しで6時に起きた。本当は非稼働日だけど、昨日作った pr の機能を検証するための環境を用意してもらったのでそれを動かしたら要件漏れに気付いてその改修をやってた。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせの日。今日の議題は2つ。&lt;/p>
&lt;h3 id="見積もりの雑談">見積もりの雑談&lt;/h3>
&lt;p>先日、見積もりについての &lt;a href="/diary/diary/posts/2022/0213/#見積もりのまとめ">私の考え&lt;/a> を整理した。それについて第3者の意見も聞いてみたいと考えた。&lt;/p>
&lt;p>いろいろ雑談したけど、結論としてはバーンダウンチャートもストーリーポイントも運用が形骸化したら役に立たないという当たり前の話しになった。従来の期限や工数を見積もる方法と比較して得られるメリットはそう多くないという私の印象である。ストーリーポイントが優れている唯一の点は、タスクの見積もりについて話し合う場ができるという、その機会そのものがあげられる。その機会を使ってメンバーとの情報共有や教育の場にもできるという点がある。それ以外のところでストーリーポイントのメリットはさしてないと私は感じた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">ストーリーポイント(以下SP)について雑談していて、あるチームでは事前に見積もったSPをタスク完了後に実績ベースで上書きする運用をしていたという。その理由は見積もったSPに対して進捗や実績が悪いと偉い人からお叱りを受けるため、SPが正しくなかったという解釈で実績から変更しているという。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1494511584378769408?ref_src=twsrc%5Etfw">February 18, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h3 id="来期の予算策定">来期の予算策定&lt;/h3>
&lt;p>ざっくり試算すると来期は少し赤字になる。経営者として赤字にならないようの対策を講じる。私が予め用意した施策は次の3つ。&lt;/p>
&lt;ol>
&lt;li>既存顧客のお仕事の単価をあげる&lt;/li>
&lt;li>赤字分の売上を別のお仕事で稼ぐ&lt;/li>
&lt;li>赤字分の経費を削減する&lt;/li>
&lt;/ol>
&lt;p>はらさんから役員報酬を下げてはどうか？という提案もあったけど、これは却下しようと思う。もともと役員報酬は高くないし、役員報酬を下げると必然的に健康保険や社会保険の再計算やそれらに関連する事務手続きが発生する。いま私は会計士も税理士も雇わず自分ですべてやっているのだけど、専門家に依頼するにしろ、自分でやるにしろ、経費を下げるために別の経費を発生させてしまう。これは本末転倒な気がしてやりたくない。&lt;/p>
&lt;p>したがって、お仕事の単価をあげる交渉からまず始めることにする。私はずっと開発者で働いてきたから交渉ごとはほとんど経験がない。交渉の経験を積むという側面でも自分のキャリアにとって新しい取り組みになってよいと考えている。次の契約更新は3月末になるのでそれまでに交渉のための準備を進めていく。&lt;/p></content></item><item><title>Mockito を触ってみた</title><link>/diary/posts/2022/0217/</link><pubDate>Thu, 17 Feb 2022 07:41:24 +0900</pubDate><guid>/diary/posts/2022/0217/</guid><description>0時に寝て4時に起きて6時に起きた。6時過ぎに slack でインフラ担当者から作業の報告があってその対応してた。
Mockito のモック作成 Spring 5 WebClient のテストコードを書いてみた。Mockito というモックライブラリを使っているのをみかけたのでそれを使うことにした。当初は WebClient そのもののモックを用意して、どんなメソッドを呼び出しても Null オブジェクトのように無視すればいいんじゃないかと思ってたんだけど、Mockito はそういう用途に使うものではなく、それぞれのメソッドごとにモックを返すような設定ができる。次のような WebClient のメソッドチェーンでリクエストするようなモックを考える。
var response = this.client .get() .uri(uriBuilder -&amp;gt; uriBuilder .path(path) .queryParam(&amp;#34;param&amp;#34;, param) .build()) .retrieve() .bodyToMono(MyResponse.class) .block(); 他にもっとよいやり方があるかもしれないけど、私がよくわかってなくてこんなやり方しかできなかった。最終的には block() を呼び出したときに任意のレスポンスを取得できればよいのだけど、メソッド単位にモックを呼び出していかないと型チェックやら実行時エラーやらで意図したようにテストできなかった。これだけをみたらメソッドチェーンのモック作りは面倒にみえる。Mockito がどうやってこれを実現しているのかわからないけど、すごい仕組みだなとは思った。
@MockBean WebClient client; @Mock WebClient.RequestHeadersUriSpec requestHeadersUriSpec; @Mock WebClient.RequestHeadersSpec requestHeadersSpec; @Mock WebClient.ResponseSpec responseSpec; @Mock Mono&amp;lt;MyResponse&amp;gt; mono; private void mockWebClientMethodChain(MyResponse response) { Mockito.when(client.get()).thenReturn(requestHeadersUriSpec); Mockito.when(requestHeadersUriSpec.uri((Function&amp;lt;UriBuilder, URI&amp;gt;) Mockito.any())).thenReturn(requestHeadersSpec); Mockito.when(requestHeadersSpec.retrieve()).thenReturn(responseSpec); Mockito.when(responseSpec.bodyToMono(MyResponse.class)).thenReturn(mono); Mockito.when(mono.block()).thenReturn(response); }</description><content>&lt;p>0時に寝て4時に起きて6時に起きた。6時過ぎに slack でインフラ担当者から作業の報告があってその対応してた。&lt;/p>
&lt;h2 id="mockito-のモック作成">Mockito のモック作成&lt;/h2>
&lt;p>&lt;a href="https://www.baeldung.com/spring-5-webclient">Spring 5 WebClient&lt;/a> のテストコードを書いてみた。&lt;a href="https://site.mockito.org/">Mockito&lt;/a> というモックライブラリを使っているのをみかけたのでそれを使うことにした。当初は WebClient そのもののモックを用意して、どんなメソッドを呼び出しても Null オブジェクトのように無視すればいいんじゃないかと思ってたんだけど、Mockito はそういう用途に使うものではなく、それぞれのメソッドごとにモックを返すような設定ができる。次のような WebClient のメソッドチェーンでリクエストするようなモックを考える。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">var response &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">client&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">uri&lt;/span>&lt;span style="color:#f92672">(&lt;/span>uriBuilder &lt;span style="color:#f92672">-&amp;gt;&lt;/span> uriBuilder
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">(&lt;/span>path&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">queryParam&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;param&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> param&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">build&lt;/span>&lt;span style="color:#f92672">())&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">retrieve&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">bodyToMono&lt;/span>&lt;span style="color:#f92672">(&lt;/span>MyResponse&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">block&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>他にもっとよいやり方があるかもしれないけど、私がよくわかってなくてこんなやり方しかできなかった。最終的には &lt;code>block()&lt;/code> を呼び出したときに任意のレスポンスを取得できればよいのだけど、メソッド単位にモックを呼び出していかないと型チェックやら実行時エラーやらで意図したようにテストできなかった。これだけをみたらメソッドチェーンのモック作りは面倒にみえる。Mockito がどうやってこれを実現しているのかわからないけど、すごい仕組みだなとは思った。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#a6e22e">@MockBean&lt;/span>
WebClient client&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#a6e22e">@Mock&lt;/span>
WebClient&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">RequestHeadersUriSpec&lt;/span> requestHeadersUriSpec&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#a6e22e">@Mock&lt;/span>
WebClient&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">RequestHeadersSpec&lt;/span> requestHeadersSpec&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#a6e22e">@Mock&lt;/span>
WebClient&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">ResponseSpec&lt;/span> responseSpec&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#a6e22e">@Mock&lt;/span>
Mono&lt;span style="color:#f92672">&amp;lt;&lt;/span>MyResponse&lt;span style="color:#f92672">&amp;gt;&lt;/span> mono&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">mockWebClientMethodChain&lt;/span>&lt;span style="color:#f92672">(&lt;/span>MyResponse response&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
Mockito&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>&lt;span style="color:#f92672">(&lt;/span>client&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">()).&lt;/span>&lt;span style="color:#a6e22e">thenReturn&lt;/span>&lt;span style="color:#f92672">(&lt;/span>requestHeadersUriSpec&lt;span style="color:#f92672">);&lt;/span>
Mockito&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>&lt;span style="color:#f92672">(&lt;/span>requestHeadersUriSpec&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">uri&lt;/span>&lt;span style="color:#f92672">((&lt;/span>Function&lt;span style="color:#f92672">&amp;lt;&lt;/span>UriBuilder&lt;span style="color:#f92672">,&lt;/span> URI&lt;span style="color:#f92672">&amp;gt;)&lt;/span> Mockito&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">any&lt;/span>&lt;span style="color:#f92672">())).&lt;/span>&lt;span style="color:#a6e22e">thenReturn&lt;/span>&lt;span style="color:#f92672">(&lt;/span>requestHeadersSpec&lt;span style="color:#f92672">);&lt;/span>
Mockito&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>&lt;span style="color:#f92672">(&lt;/span>requestHeadersSpec&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">retrieve&lt;/span>&lt;span style="color:#f92672">()).&lt;/span>&lt;span style="color:#a6e22e">thenReturn&lt;/span>&lt;span style="color:#f92672">(&lt;/span>responseSpec&lt;span style="color:#f92672">);&lt;/span>
Mockito&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>&lt;span style="color:#f92672">(&lt;/span>responseSpec&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">bodyToMono&lt;/span>&lt;span style="color:#f92672">(&lt;/span>MyResponse&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">)).&lt;/span>&lt;span style="color:#a6e22e">thenReturn&lt;/span>&lt;span style="color:#f92672">(&lt;/span>mono&lt;span style="color:#f92672">);&lt;/span>
Mockito&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">when&lt;/span>&lt;span style="color:#f92672">(&lt;/span>mono&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">block&lt;/span>&lt;span style="color:#f92672">()).&lt;/span>&lt;span style="color:#a6e22e">thenReturn&lt;/span>&lt;span style="color:#f92672">(&lt;/span>response&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>ふりかえりとプランニング</title><link>/diary/posts/2022/0216/</link><pubDate>Wed, 16 Feb 2022 08:27:18 +0900</pubDate><guid>/diary/posts/2022/0216/</guid><description>1時に寝て3時過ぎに起きて6時半に起きた。
ふりかえり 今日はスクラムのふりかえりとプランニングの日。1週間が終わり始まる。ふりかえりをしていて、2週連続でスプリントゴールが未達になって、原因を追求する空気になって、最終的にはリーダーを糾弾するみたいな雰囲気になった。昔の私だったら論理的に問題を掘り起こそうとがんばったかもしれないけど、いまはもう歳をとってスラムダンクの安西先生みたいになったのか、もしくは外部パートナーとしてのお手伝いだから真剣ではないのか、その両方かもしれないが、一歩引いたところからできなかったもんしゃーないんちゃう？みたいな心境で見守っていた。うまくできない人や状況に「なぜできなかった？」みたいに迫ると「努力が足りなかった」とか「もっとがんばります」みたいなやり取りしかならないので不毛にみえる。経営者のくせにこんなことを言うと怒られるかもしれないが、仕事なんてやりたい人やできる人が楽しめるように好き勝手やって、そうじゃない人は最低限やるとか、邪魔しないように配慮するとか、もうそれでいいんじゃないとか思ったりもしている。もう人類は会社の半分ぐらいの社員が遊んでても暮らしていけるぐらいの生産性を手に入れたと思うよ。半分は言い過ぎか。いずれにしても私はもう無理なく自分のペースで働きたいと思うようになった感じ。
backlog の管理者権限 お手伝い先で backlog を課題管理システムに使っている。私は課題管理システムのスペシャリストとして、ああしたい、こうしたいといくつも注文を付けて、チームの開発やワークフローを改善している。これまでは管理者権限がなかったのでもっている人に依頼するしかなかったけど、そろそろ私の相手をするのが面倒くさくなってきたのか、私にも backlog の設定を変更する管理者権限をもらえた。さっそくカスタム属性をいくつか作って実験的な検証をしていた。カスタム属性は backlog のフリープランでは使えない機能なので、お手伝い先の実地で用途や振る舞いを検証するしかない。同じプロジェクトでも種別ごとにカスタム属性の設定有無を切り分けられる機能があって、この機能は他の課題管理システムでみたことがない実用的で珍しい機能だと思った。チケットに PR とコミットのカスタム属性を追加して、github actions でコミットや PR のタイミングでそれらの属性に URL を追加すれば github 連携もできそうな気がしてきたところ。週末に時間があったら作ってみる。</description><content>&lt;p>1時に寝て3時過ぎに起きて6時半に起きた。&lt;/p>
&lt;h2 id="ふりかえり">ふりかえり&lt;/h2>
&lt;p>今日はスクラムのふりかえりとプランニングの日。1週間が終わり始まる。ふりかえりをしていて、2週連続でスプリントゴールが未達になって、原因を追求する空気になって、最終的にはリーダーを糾弾するみたいな雰囲気になった。昔の私だったら論理的に問題を掘り起こそうとがんばったかもしれないけど、いまはもう歳をとってスラムダンクの安西先生みたいになったのか、もしくは外部パートナーとしてのお手伝いだから真剣ではないのか、その両方かもしれないが、一歩引いたところからできなかったもんしゃーないんちゃう？みたいな心境で見守っていた。うまくできない人や状況に「なぜできなかった？」みたいに迫ると「努力が足りなかった」とか「もっとがんばります」みたいなやり取りしかならないので不毛にみえる。経営者のくせにこんなことを言うと怒られるかもしれないが、仕事なんてやりたい人やできる人が楽しめるように好き勝手やって、そうじゃない人は最低限やるとか、邪魔しないように配慮するとか、もうそれでいいんじゃないとか思ったりもしている。もう人類は会社の半分ぐらいの社員が遊んでても暮らしていけるぐらいの生産性を手に入れたと思うよ。半分は言い過ぎか。いずれにしても私はもう無理なく自分のペースで働きたいと思うようになった感じ。&lt;/p>
&lt;h2 id="backlog-の管理者権限">backlog の管理者権限&lt;/h2>
&lt;p>お手伝い先で &lt;a href="https://backlog.com/ja/">backlog&lt;/a> を課題管理システムに使っている。私は課題管理システムのスペシャリストとして、ああしたい、こうしたいといくつも注文を付けて、チームの開発やワークフローを改善している。これまでは管理者権限がなかったのでもっている人に依頼するしかなかったけど、そろそろ私の相手をするのが面倒くさくなってきたのか、私にも backlog の設定を変更する管理者権限をもらえた。さっそくカスタム属性をいくつか作って実験的な検証をしていた。カスタム属性は backlog のフリープランでは使えない機能なので、お手伝い先の実地で用途や振る舞いを検証するしかない。同じプロジェクトでも種別ごとにカスタム属性の設定有無を切り分けられる機能があって、この機能は他の課題管理システムでみたことがない実用的で珍しい機能だと思った。チケットに PR とコミットのカスタム属性を追加して、github actions でコミットや PR のタイミングでそれらの属性に URL を追加すれば github 連携もできそうな気がしてきたところ。週末に時間があったら作ってみる。&lt;/p></content></item><item><title>担々麺がおいしい</title><link>/diary/posts/2022/0215/</link><pubDate>Tue, 15 Feb 2022 11:07:06 +0900</pubDate><guid>/diary/posts/2022/0215/</guid><description>0時に寝て4時に起きて6時半に起きた。今回のスプリントは1つの機能拡張のチケットに専念していてとても疲れた。
担々麺 オフィスの近くに 珠しっぴん という坦々麺専門店ができているのに気付いた。半年ぐらい前にオープンしたらしい。あまり通らない場所だったせいか、全然気付いてなくて試しに入ってみたら私の好みの味でとてもおいしかった。食わず嫌いだったのか何なのか、昨年ぐらいまで担々麺はほとんど食べたことなかったんだけど、近所においしい担々麺のお店がいくつかできて、担々麺そのものも好きになってきた。新しい担々麺のお店をみかけるととりあえず入ってみるようになった。
珠辛担々麺 汁なし担々麺</description><content>&lt;p>0時に寝て4時に起きて6時半に起きた。今回のスプリントは1つの機能拡張のチケットに専念していてとても疲れた。&lt;/p>
&lt;h2 id="担々麺">担々麺&lt;/h2>
&lt;p>オフィスの近くに &lt;a href="https://tabelog.com/hyogo/A2801/A280102/28061761/">珠しっぴん&lt;/a> という坦々麺専門店ができているのに気付いた。半年ぐらい前にオープンしたらしい。あまり通らない場所だったせいか、全然気付いてなくて試しに入ってみたら私の好みの味でとてもおいしかった。食わず嫌いだったのか何なのか、昨年ぐらいまで担々麺はほとんど食べたことなかったんだけど、近所においしい担々麺のお店がいくつかできて、担々麺そのものも好きになってきた。新しい担々麺のお店をみかけるととりあえず入ってみるようになった。&lt;/p>
&lt;h4 id="珠辛担々麺">珠辛担々麺&lt;/h4>
&lt;figure>&lt;img src="/diary/diary/img/2022/0215_noodle1.jpg"/>
&lt;/figure>
&lt;h4 id="汁なし担々麺">汁なし担々麺&lt;/h4>
&lt;figure>&lt;img src="/diary/diary/img/2022/0215_noodle2.jpg"/>
&lt;/figure></content></item><item><title>取材商法というビジネス</title><link>/diary/posts/2022/0214/</link><pubDate>Mon, 14 Feb 2022 07:38:37 +0900</pubDate><guid>/diary/posts/2022/0214/</guid><description>1時半に寝て5時半に起きた。いよいよ眠れなくなった感じだな。
取材商法の営業 会社の問い合わせのメールアドレスに取材させてほしいといった問い合わせが届いた。うちみたいな無名の零細会社になんの前触れもなく届く問い合わせの大半は営業に関するもの。
※撮影・インタビュー記事の掲載にあたりまして、費用等は一切発生しませんので、ご安心くださいませ。
WEBにて、お写真と記事でご紹介させていただきたいと考えております。
こんな感じで取材の費用はいりませんと言っている。記事広告と取材商法(タレントインタビュー)で雑誌掲載の効果は？ によると、取材は無料かもしれないが、メディアや雑誌といった媒体に掲載するのに料金を請求するらしい。まさにこの記事で書かれている会社からのメールだ。取材して記事ができてしまうとサンクコストが気になって掲載料を支払ってしまうような心理を利用しているのだと推測する。
いろんなビジネスがあるなぁと世の中の勉強になった。</description><content>&lt;p>1時半に寝て5時半に起きた。いよいよ眠れなくなった感じだな。&lt;/p>
&lt;h2 id="取材商法の営業">取材商法の営業&lt;/h2>
&lt;p>会社の問い合わせのメールアドレスに取材させてほしいといった問い合わせが届いた。うちみたいな無名の零細会社になんの前触れもなく届く問い合わせの大半は営業に関するもの。&lt;/p>
&lt;blockquote>
&lt;p>※撮影・インタビュー記事の掲載にあたりまして、費用等は一切発生しませんので、ご安心くださいませ。&lt;/p>
&lt;p>WEBにて、お写真と記事でご紹介させていただきたいと考えております。&lt;/p>
&lt;/blockquote>
&lt;p>こんな感じで取材の費用はいりませんと言っている。&lt;a href="https://marketing.idegene.com/%E8%A8%98%E4%BA%8B%E5%BA%83%E5%91%8A_%E5%8F%96%E6%9D%90%E5%95%86%E6%B3%95_%E9%9B%91%E8%AA%8C%E6%8E%B2%E8%BC%89%E3%81%AF%E5%8A%B9%E6%9E%9C%E7%9A%84">記事広告と取材商法(タレントインタビュー)で雑誌掲載の効果は？&lt;/a> によると、取材は無料かもしれないが、メディアや雑誌といった媒体に掲載するのに料金を請求するらしい。まさにこの記事で書かれている会社からのメールだ。取材して記事ができてしまうとサンクコストが気になって掲載料を支払ってしまうような心理を利用しているのだと推測する。&lt;/p>
&lt;p>いろんなビジネスがあるなぁと世の中の勉強になった。&lt;/p></content></item><item><title>java のコードレビューサービス</title><link>/diary/posts/2022/0213/</link><pubDate>Sun, 13 Feb 2022 09:27:20 +0900</pubDate><guid>/diary/posts/2022/0213/</guid><description>22時に寝て0時に起きて5時に起きて7時に起きた。なんか体調が微妙。
リファクタリングのチケット作成 これまでは業務に関係しないところの機能拡張をしていたので新規にコードを書くことが多かった。いま業務の開発にも着手し始め、その過程で既存のコードを読むことも多くなった。私からみたらコードの品質が著しく低くて、ただ動いているだけで堅牢でもないし、設計の意図も伝わらないコードが多い。そういうのを自分が変更するときに少しずつ出来る範囲でリファクタリングしたりしている。今日もコードを読んでいて enum の扱いについてチケットを作成した。
前に手伝っていた会社の契約を終了するときに java のコードレビューだけなんらかの契約で依頼できないかという話しはあった。そのときは別件のお仕事が火の車だったので断ってしまった。いまお手伝いしている java のコードをみても、java に慣れていない開発者の書く java のコードはたいていひどい。なぜひどくなるかというと、java は言語仕様が複雑で難しいからだと思う。java の経験が少ないと Effective Java を読んでも理解できないぐらいには java の設計は難しい。その結果として java で開発しているのに設計を練っておらず「動けばいい」コードが散見される。java で開発するなら「これ以外に動かない」コードを書いた方がよいと私は考えている。その意図が伝わるからドキュメントなんか読まなくても「動かすにはこう書けばいい」とわかる。さらにインターフェースが明確であれば、責務や拡張方法も明示的になる。
前から考えてはいたけど、sier や内製始めたばかりの事業会社向けに java のコードレビューのサービスを提供することも考えている。私1人だとたくさん受けられないし、コードレビューサービスのようなものは会社の信頼関係の方が重要なのでビジネスにするのはちょっと難しいかもなぁ。
見積もりのまとめ 先日 見積もりについて考察した 。もともとは社内向けに書こうと書き始めたが、内容の大半は社内に閉じたものではなかったので一般論の記事として書き直した。最終的には1万文字ぐらい書いた。
見積もりをがんばらない</description><content>&lt;p>22時に寝て0時に起きて5時に起きて7時に起きた。なんか体調が微妙。&lt;/p>
&lt;h2 id="リファクタリングのチケット作成">リファクタリングのチケット作成&lt;/h2>
&lt;p>これまでは業務に関係しないところの機能拡張をしていたので新規にコードを書くことが多かった。いま業務の開発にも着手し始め、その過程で既存のコードを読むことも多くなった。私からみたらコードの品質が著しく低くて、ただ動いているだけで堅牢でもないし、設計の意図も伝わらないコードが多い。そういうのを自分が変更するときに少しずつ出来る範囲でリファクタリングしたりしている。今日もコードを読んでいて enum の扱いについてチケットを作成した。&lt;/p>
&lt;p>前に手伝っていた会社の契約を終了するときに java のコードレビューだけなんらかの契約で依頼できないかという話しはあった。そのときは別件のお仕事が火の車だったので断ってしまった。いまお手伝いしている java のコードをみても、java に慣れていない開発者の書く java のコードはたいていひどい。なぜひどくなるかというと、java は言語仕様が複雑で難しいからだと思う。java の経験が少ないと Effective Java を読んでも理解できないぐらいには java の設計は難しい。その結果として java で開発しているのに設計を練っておらず「動けばいい」コードが散見される。java で開発するなら「これ以外に動かない」コードを書いた方がよいと私は考えている。その意図が伝わるからドキュメントなんか読まなくても「動かすにはこう書けばいい」とわかる。さらにインターフェースが明確であれば、責務や拡張方法も明示的になる。&lt;/p>
&lt;p>前から考えてはいたけど、sier や内製始めたばかりの事業会社向けに java のコードレビューのサービスを提供することも考えている。私1人だとたくさん受けられないし、コードレビューサービスのようなものは会社の信頼関係の方が重要なのでビジネスにするのはちょっと難しいかもなぁ。&lt;/p>
&lt;h2 id="見積もりのまとめ">見積もりのまとめ&lt;/h2>
&lt;p>先日 &lt;a href="/diary/diary/posts/2022/0205/##見積もりとは">見積もりについて考察した&lt;/a> 。もともとは社内向けに書こうと書き始めたが、内容の大半は社内に閉じたものではなかったので一般論の記事として書き直した。最終的には1万文字ぐらい書いた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://t2y.hatenablog.jp/entry/2022/02/13/191235">見積もりをがんばらない&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>mysql のデータ移行</title><link>/diary/posts/2022/0212/</link><pubDate>Sat, 12 Feb 2022 10:30:35 +0900</pubDate><guid>/diary/posts/2022/0212/</guid><description>23時に寝て2時前に起きて5時に起きて8時に起きた。あんまり眠れなくなってきた。
もくもく会 【三宮.dev】もくもく会 に参加した。もともとオフラインの予定だったけど、オミクロン株の流行でオンラインに変更された。
お仕事である開発環境の構築をしていて docker-compose を使って mysql の環境構築や共有の開発環境にある db2 に接続するために clpplus のインストール方法などを wiki にまとめてた。コンテナにある mysqldump や mysql コマンドを使ってこんな風にデータ移行もできた。
共有の開発環境からデータをエクスポート。
$ docker-compose exec -T mydb mysqldump -h $DB_HOST -C --set-gtid-purged=OFF --skip-triggers $DB &amp;gt; dump.sql ローカルの mysql にデータをインポート。
$ docker-compose exec -T mydb mysql -h localhost -u root -proot $DB &amp;lt; dump.sql コンテナにある mysqldump と mysql コマンドを使ってデータのインポートするには -T を指定すればいいみたい。そうしないと WARNING とかの文字列が sql ファイルに含まれてしまってインポートできない。https://t.co/JGeDNsWjhx
&amp;mdash; Tetsuya Morimoto (@t2y) February 12, 2022 ストレッチ いつもは11時からなんやけど、今日は17時40分からだった。カレンダーの予定を変更し忘れてて11時に行って間違えた。今週は2日間ぐらいストレッチしたかな。今日の開脚幅は開始前164cmで、ストレッチ後168cmだった。いつも時間帯が違うので数値も変わる。今日は右太ももの内転筋や内側やらがすごく張ってた。あまり調子はよくない。</description><content>&lt;p>23時に寝て2時前に起きて5時に起きて8時に起きた。あんまり眠れなくなってきた。&lt;/p>
&lt;h2 id="もくもく会">もくもく会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/235747/">【三宮.dev】もくもく会&lt;/a> に参加した。もともとオフラインの予定だったけど、オミクロン株の流行でオンラインに変更された。&lt;/p>
&lt;p>お仕事である開発環境の構築をしていて docker-compose を使って mysql の環境構築や共有の開発環境にある db2 に接続するために &lt;a href="https://www.ibm.com/docs/en/db2/10.5?topic=commands-command-line-processor-plus-clpplus">clpplus&lt;/a> のインストール方法などを wiki にまとめてた。コンテナにある mysqldump や mysql コマンドを使ってこんな風にデータ移行もできた。&lt;/p>
&lt;p>共有の開発環境からデータをエクスポート。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker-compose exec -T mydb mysqldump -h $DB_HOST -C --set-gtid-purged&lt;span style="color:#f92672">=&lt;/span>OFF --skip-triggers $DB &amp;gt; dump.sql
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ローカルの mysql にデータをインポート。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker-compose exec -T mydb mysql -h localhost -u root -proot $DB &amp;lt; dump.sql
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">コンテナにある mysqldump と mysql コマンドを使ってデータのインポートするには -T を指定すればいいみたい。そうしないと WARNING とかの文字列が sql ファイルに含まれてしまってインポートできない。&lt;a href="https://t.co/JGeDNsWjhx">https://t.co/JGeDNsWjhx&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1492391598612959234?ref_src=twsrc%5Etfw">February 12, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>いつもは11時からなんやけど、今日は17時40分からだった。カレンダーの予定を変更し忘れてて11時に行って間違えた。今週は2日間ぐらいストレッチしたかな。今日の開脚幅は開始前164cmで、ストレッチ後168cmだった。いつも時間帯が違うので数値も変わる。今日は右太ももの内転筋や内側やらがすごく張ってた。あまり調子はよくない。&lt;/p></content></item><item><title>docker の勉強</title><link>/diary/posts/2022/0211/</link><pubDate>Fri, 11 Feb 2022 08:43:24 +0900</pubDate><guid>/diary/posts/2022/0211/</guid><description>0時に寝て2時過ぎに起きて5時に起きて6時に起きた。珍しく3回ぐらい起きた。
docker のマルチステージビルド これまで docker を使った開発を主導してこなかったので私はあまり docker についての知識をもっていない。いま k8s クラスターで java アプリケーションの運用をしていて、リリース作業の改善には docker イメージのビルドも改善する必要性が迫られてきた。いくつかプラクティスの記事を読んでいると マルチステージビルドの利用 を推奨している記事が多い。マルチステージビルドをうまく活用することで、docker イメージサイズの削減と日々の ci やビルド時間の短縮の2つを図れるようにみえる。docker の仕組みを学ぶちょうどよい機会なので主導的な立場でこの改善に着手しようと考えている。
オフィス内覧 オフィスの引っ越し調査のために エリンサーブ に行ってきた。駅近でもなく市街でもなくちょっと辺鄙な海外沿いにあるせいか、他のレンタルオフィスと比べて全体的に広さに対する家賃は安く設定されている。案内をしてくれた代表の方が「狭い部屋で働かせたくない」といった想いを話されていたので、意図的に窮屈なスペースにならないように広めに設計されているらしい。
オープンスペースでそれぞれの席が別会社という作りは斬新な考えとも言えるし、お互いの信頼関係で成り立っているとも言える。例えば、パソコンのモニターや資料とか、近くを通ったらみえてしまうわけだし。そういったセキュリティも考慮して、一見さんのドロップインには対応していないという。利用者はお互いに面識のある一定の信頼関係を築ける人たちで構成されているらしい。なにか審査があるのかどうかわからないが、人間関係が苦手な人には向かないスペースにもみえる。私は1日のうちにテレビ会議を何度もやるのでオープンスペースだと顧客の情報を守る義務があるのと、そうじゃなくても周りにも迷惑がかかるので、1日のうちの何度も場所を変えてテレビ会議できる部屋に移動しないといけない。それがボトルネックだなと思えた。個室もいくつかみせてもらって、2人向けの窓のある個室があってよさそうにみえた。そこはテレビ会議しても問題ないとのこと。家賃も予算にあうものだった。
Dタイプ(3F)
月額利用料: 66,000円 Eタイプ(3F)
デスクは2つ 月額利用料: 76,000円 いまは他の会社が借りている状態だけど、空きが出たら教えてもらえるようにお願いして帰ってきた。</description><content>&lt;p>0時に寝て2時過ぎに起きて5時に起きて6時に起きた。珍しく3回ぐらい起きた。&lt;/p>
&lt;h2 id="docker-のマルチステージビルド">docker のマルチステージビルド&lt;/h2>
&lt;p>これまで docker を使った開発を主導してこなかったので私はあまり docker についての知識をもっていない。いま k8s クラスターで java アプリケーションの運用をしていて、リリース作業の改善には docker イメージのビルドも改善する必要性が迫られてきた。いくつかプラクティスの記事を読んでいると &lt;a href="https://matsuand.github.io/docs.docker.jp.onthefly/develop/develop-images/multistage-build/">マルチステージビルドの利用&lt;/a> を推奨している記事が多い。マルチステージビルドをうまく活用することで、docker イメージサイズの削減と日々の ci やビルド時間の短縮の2つを図れるようにみえる。docker の仕組みを学ぶちょうどよい機会なので主導的な立場でこの改善に着手しようと考えている。&lt;/p>
&lt;h2 id="オフィス内覧">オフィス内覧&lt;/h2>
&lt;p>オフィスの引っ越し調査のために &lt;a href="https://www.erinserve.com/">エリンサーブ&lt;/a> に行ってきた。駅近でもなく市街でもなくちょっと辺鄙な海外沿いにあるせいか、他のレンタルオフィスと比べて全体的に広さに対する家賃は安く設定されている。案内をしてくれた代表の方が「狭い部屋で働かせたくない」といった想いを話されていたので、意図的に窮屈なスペースにならないように広めに設計されているらしい。&lt;/p>
&lt;p>オープンスペースでそれぞれの席が別会社という作りは斬新な考えとも言えるし、お互いの信頼関係で成り立っているとも言える。例えば、パソコンのモニターや資料とか、近くを通ったらみえてしまうわけだし。そういったセキュリティも考慮して、一見さんのドロップインには対応していないという。利用者はお互いに面識のある一定の信頼関係を築ける人たちで構成されているらしい。なにか審査があるのかどうかわからないが、人間関係が苦手な人には向かないスペースにもみえる。私は1日のうちにテレビ会議を何度もやるのでオープンスペースだと顧客の情報を守る義務があるのと、そうじゃなくても周りにも迷惑がかかるので、1日のうちの何度も場所を変えてテレビ会議できる部屋に移動しないといけない。それがボトルネックだなと思えた。個室もいくつかみせてもらって、2人向けの窓のある個室があってよさそうにみえた。そこはテレビ会議しても問題ないとのこと。家賃も予算にあうものだった。&lt;/p>
&lt;p>Dタイプ(3F)&lt;/p>
&lt;ul>
&lt;li>月額利用料: 66,000円&lt;/li>
&lt;/ul>
&lt;p>Eタイプ(3F)&lt;/p>
&lt;ul>
&lt;li>デスクは2つ&lt;/li>
&lt;li>月額利用料: 76,000円&lt;/li>
&lt;/ul>
&lt;p>いまは他の会社が借りている状態だけど、空きが出たら教えてもらえるようにお願いして帰ってきた。&lt;/p></content></item><item><title>スクラムの窮屈さ</title><link>/diary/posts/2022/0210/</link><pubDate>Thu, 10 Feb 2022 10:33:12 +0900</pubDate><guid>/diary/posts/2022/0210/</guid><description>0時に寝て5時に起きてちょっとだらだらして7時ぐらいにはオフィスにいた。
スプリントの期間とプランニング いまスクラムのスプリントを1週間で運用している。スクラムのスプリントレビューをやっていて、今回のスプリントはスプリントゴールが未達となったという事実がありつつも、ある開発者が本来のスプリント計画にはなかった課題を少し工数を使ってやってしまってたという話題が出た。それはある機能開発の調査の過程でこういうツールがあると業務メンバーの作業効率が上がりそうだとわかって、それをヒアリングしていた開発者が PoC も兼ねてプロトタイプを作っているうちにすぐ運用で使えそうなベータレベルまで作ってしまったという話し。言うても2日ぐらいで作ったと思うのだけど、5日しかないスプリントで2日は40%という大きな工数を占める。スクラムマスターも否定はしなかったけど「スプリントの計画にないタスクに工数を割くのはよくないと、スクラムマスターの立場からはお小言を言わざるを得ない」と言及した。
先日、私も直接はスプリントの計画達成に直接寄与しない リファクタリングに半日を費やした ので、ツールを作ってしまった開発者の気持ちはわかるなと無言で聞いていた。それと同時にスクラムのスプリントは、運用によっては開発者のモチベーションを削ぐことも実感した。やる気の有無で仕事をするのはよくないと一般論では言うけど、実際のところ、人間のモチベーションは制御が難しいのと、知識労働はモチベーションが生産性に大きな影響を与える。開発者のモチベーションが高いときにそのタスクをやるのは理に叶うという側面もある。非開発者は次のプランニングで承認を得て来週のスプリントでやればいいじゃないかと思うかもしれない。でも、違うのだ。いまやってみたいという気持ちが大きいときにいまやるのと来週やるのではモチベーションが異なる可能性がある。この気持ちは開発者にしかわからないと思う。
その開発者がデイリースクラムでツール開発をやることを相談しなかったかの理由も理解できて、合理的に考えたら相談しても承認を得るのは難しいので、黙ってやってしまったのだろうと思う。そして、今回のスプリントのスプリントゴールが未達になったとしても、なにか業務に影響が出るというわけでもないことをメンバーが知っているというのもある。スプリントは全力でやるものだけど、全力でやらなくてゴールが未達になっても、なんら業務に支障がでない事実がスプリントの目的を減衰させている。
そういう業務と実情があっていない現実、ルールに則るとお小言を言わざるを得ない牽制機構、たった2日すら自由に時間を使えない開発者、なんかスクラムって窮屈だなと直観的に感じた。</description><content>&lt;p>0時に寝て5時に起きてちょっとだらだらして7時ぐらいにはオフィスにいた。&lt;/p>
&lt;h2 id="スプリントの期間とプランニング">スプリントの期間とプランニング&lt;/h2>
&lt;p>いまスクラムのスプリントを1週間で運用している。スクラムのスプリントレビューをやっていて、今回のスプリントはスプリントゴールが未達となったという事実がありつつも、ある開発者が本来のスプリント計画にはなかった課題を少し工数を使ってやってしまってたという話題が出た。それはある機能開発の調査の過程でこういうツールがあると業務メンバーの作業効率が上がりそうだとわかって、それをヒアリングしていた開発者が PoC も兼ねてプロトタイプを作っているうちにすぐ運用で使えそうなベータレベルまで作ってしまったという話し。言うても2日ぐらいで作ったと思うのだけど、5日しかないスプリントで2日は40%という大きな工数を占める。スクラムマスターも否定はしなかったけど「スプリントの計画にないタスクに工数を割くのはよくないと、スクラムマスターの立場からはお小言を言わざるを得ない」と言及した。&lt;/p>
&lt;p>先日、私も直接はスプリントの計画達成に直接寄与しない &lt;a href="/diary/diary/posts/2022/0208/#テストコードのリファクタリング">リファクタリングに半日を費やした&lt;/a> ので、ツールを作ってしまった開発者の気持ちはわかるなと無言で聞いていた。それと同時にスクラムのスプリントは、運用によっては開発者のモチベーションを削ぐことも実感した。やる気の有無で仕事をするのはよくないと一般論では言うけど、実際のところ、人間のモチベーションは制御が難しいのと、知識労働はモチベーションが生産性に大きな影響を与える。開発者のモチベーションが高いときにそのタスクをやるのは理に叶うという側面もある。非開発者は次のプランニングで承認を得て来週のスプリントでやればいいじゃないかと思うかもしれない。でも、違うのだ。いまやってみたいという気持ちが大きいときにいまやるのと来週やるのではモチベーションが異なる可能性がある。この気持ちは開発者にしかわからないと思う。&lt;/p>
&lt;p>その開発者がデイリースクラムでツール開発をやることを相談しなかったかの理由も理解できて、合理的に考えたら相談しても承認を得るのは難しいので、黙ってやってしまったのだろうと思う。そして、今回のスプリントのスプリントゴールが未達になったとしても、なにか業務に影響が出るというわけでもないことをメンバーが知っているというのもある。スプリントは全力でやるものだけど、全力でやらなくてゴールが未達になっても、なんら業務に支障がでない事実がスプリントの目的を減衰させている。&lt;/p>
&lt;p>そういう業務と実情があっていない現実、ルールに則るとお小言を言わざるを得ない牽制機構、たった2日すら自由に時間を使えない開発者、なんかスクラムって窮屈だなと直観的に感じた。&lt;/p></content></item><item><title>リリース作業の改善</title><link>/diary/posts/2022/0209/</link><pubDate>Wed, 09 Feb 2022 09:04:51 +0900</pubDate><guid>/diary/posts/2022/0209/</guid><description>1時に寝て6時前には起きてた。昨日がんばったから今日は早めにお仕事を切り上げた。
リリース作業を柔軟に、効率的に 以前から認識していた開発の課題にリリース作業のコストが大きいことがあった。具体的には人間が手動で進捗をみながら処理を実行していて、さらに1つずつの処理に数分かかるので順番に実行していくだけでも確認を含めて30分から1時間ぐらいかかる。リリース後に変更したところの動作確認とかを開発者が集まってやってたらだいたい2-3時間はかかる。だらだら？やっているとリリース作業に開発者全員がハドルに入って半日ぐらいやってたりする。最初のうちは雑談しながらリリース作業のやり方がわかってよかったんだけど、何度か繰り返したらこれを毎週やるのは非効率だわと思うようにはなっていた。
そんな開発側の事情もあったんだけど、スクラムマスターからもいまのリリース作業は柔軟性がないみたいな指摘が入って、その改善のチケットが切られた。開発者も全員それは認識していた。改善するならスプリントを1つ使うぐらいの工数がかかるという背景を説明するために、私が「ぼくのかんがえたさいきょうのりりーすさぎょう」を考えていくつかのタスクをチケットに作った。いま GitHub Actions の無料枠におさまるようにリソース制限を運用で調整しているのもあって予算確保できるなら戦略も変わってくる。それらも含めて然るべき改善の道筋を示したい。</description><content>&lt;p>1時に寝て6時前には起きてた。昨日がんばったから今日は早めにお仕事を切り上げた。&lt;/p>
&lt;h2 id="リリース作業を柔軟に効率的に">リリース作業を柔軟に、効率的に&lt;/h2>
&lt;p>以前から認識していた開発の課題にリリース作業のコストが大きいことがあった。具体的には人間が手動で進捗をみながら処理を実行していて、さらに1つずつの処理に数分かかるので順番に実行していくだけでも確認を含めて30分から1時間ぐらいかかる。リリース後に変更したところの動作確認とかを開発者が集まってやってたらだいたい2-3時間はかかる。だらだら？やっているとリリース作業に開発者全員がハドルに入って半日ぐらいやってたりする。最初のうちは雑談しながらリリース作業のやり方がわかってよかったんだけど、何度か繰り返したらこれを毎週やるのは非効率だわと思うようにはなっていた。&lt;/p>
&lt;p>そんな開発側の事情もあったんだけど、スクラムマスターからもいまのリリース作業は柔軟性がないみたいな指摘が入って、その改善のチケットが切られた。開発者も全員それは認識していた。改善するならスプリントを1つ使うぐらいの工数がかかるという背景を説明するために、私が「ぼくのかんがえたさいきょうのりりーすさぎょう」を考えていくつかのタスクをチケットに作った。いま GitHub Actions の無料枠におさまるようにリソース制限を運用で調整しているのもあって予算確保できるなら戦略も変わってくる。それらも含めて然るべき改善の道筋を示したい。&lt;/p></content></item><item><title>テストコードのリファクタリング</title><link>/diary/posts/2022/0208/</link><pubDate>Tue, 08 Feb 2022 09:04:49 +0900</pubDate><guid>/diary/posts/2022/0208/</guid><description>0時に寝て6時に起きた。今日は7時半から23時過ぎまで集中してコードを書いてた。最近は19-20時には帰って、晩ご飯食べて、ドラクエタクトやったり漫画読んだりだらだらしている。そんな暇あったら積ん読の本読めって感じだ。
テストコードのリファクタリング 業務機能の開発をするにあたって、既存のテストコードをみていて、@BeforeEach というテストメソッド単位に呼ばれるメソッドでテストデータの削除と postgresql の sequence のリセット処理をしていた。こんなの共通処理ですべてのテーブルの truncate と sequence のリセット処理をすればいいやんとか思って、いろいろ調べて2つのリファクタリングの PR を作成した。先日 JUnit5 の拡張 を調べたばかりだから、テストの共通化のノウハウが溜まっている。Testcontainers Postgres Module と連携して、postgresql コンテナに接続して sequence のリセット処理を汎用のテスト拡張として実装した。テストを実装する開発者は、次のように @ExtendWith(DatabaseInitializer.class) をアノテーションに付与すれば、自分で sequence のリセット処理を @BeforeEach のメソッドに実装する必要がなくなる。
@SpringBootTest @Transactional @ExtendWith(SetupDatabaseContainer.class) @ExtendWith(DatabaseInitializer.class) class MyTest { ... } この作業の過程で spring boot の @Transactional はデフォルトでテストメソッドの実行後にロールバックする機能が提供されていて、いままで @BeforeEach のメソッドで明示的にテーブルのデータを削除する必要はなかったんやと気付いた。じゃあ、なぜ削除するコードを書いてたかと言うと、テストの外部で初期データを作成する仕組みがあるから、初期データを削除する目的でそうしていたことが判明した。そして、一部のコードはそこで作った外部の初期データに依存して実装されていた。テストコードの一部が外部のデータに依存しつつ、テストメソッドでは外部のデータに依存しないように削除のコードが書いてある。書いていて何を言っているのかわからないと思うけど、私も調べてて訳がわからんくて、PR に「いまの状況はかなりややこしい」と前置きしつつ、無駄なコードや仕組みを取り除くための修正を行った。本当は機能開発やらないといけないのにテストコードのリファクタリングするのに大きな時間をかけるわけにはいかないだろうという意図で、半日掛けてリファクタリングして23時過ぎまで作業して、既存のテストコードも含めて全部直した。このリファクタリングで数十のテストケースの約300行ぐらいの初期化コードをなくせた。</description><content>&lt;p>0時に寝て6時に起きた。今日は7時半から23時過ぎまで集中してコードを書いてた。最近は19-20時には帰って、晩ご飯食べて、ドラクエタクトやったり漫画読んだりだらだらしている。そんな暇あったら積ん読の本読めって感じだ。&lt;/p>
&lt;h2 id="テストコードのリファクタリング">テストコードのリファクタリング&lt;/h2>
&lt;p>業務機能の開発をするにあたって、既存のテストコードをみていて、&lt;code>@BeforeEach&lt;/code> というテストメソッド単位に呼ばれるメソッドでテストデータの削除と postgresql の sequence のリセット処理をしていた。こんなの共通処理ですべてのテーブルの truncate と sequence のリセット処理をすればいいやんとか思って、いろいろ調べて2つのリファクタリングの PR を作成した。先日 &lt;a href="/diary/diary/posts/2022/0116/">JUnit5 の拡張&lt;/a> を調べたばかりだから、テストの共通化のノウハウが溜まっている。&lt;a href="https://www.testcontainers.org/modules/databases/postgres/">Testcontainers Postgres Module&lt;/a> と連携して、postgresql コンテナに接続して sequence のリセット処理を汎用のテスト拡張として実装した。テストを実装する開発者は、次のように &lt;code>@ExtendWith(DatabaseInitializer.class)&lt;/code> をアノテーションに付与すれば、自分で sequence のリセット処理を &lt;code>@BeforeEach&lt;/code> のメソッドに実装する必要がなくなる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a6e22e">@SpringBootTest&lt;/span>
&lt;span style="color:#a6e22e">@Transactional&lt;/span>
&lt;span style="color:#a6e22e">@ExtendWith&lt;/span>&lt;span style="color:#f92672">(&lt;/span>SetupDatabaseContainer&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#a6e22e">@ExtendWith&lt;/span>&lt;span style="color:#f92672">(&lt;/span>DatabaseInitializer&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyTest&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>この作業の過程で spring boot の &lt;a href="https://spring.pleiades.io/spring-framework/docs/current/reference/html/testing.html#testcontext-tx-enabling-transactions">@Transactional&lt;/a> はデフォルトでテストメソッドの実行後にロールバックする機能が提供されていて、いままで &lt;code>@BeforeEach&lt;/code> のメソッドで明示的にテーブルのデータを削除する必要はなかったんやと気付いた。じゃあ、なぜ削除するコードを書いてたかと言うと、テストの外部で初期データを作成する仕組みがあるから、初期データを削除する目的でそうしていたことが判明した。そして、一部のコードはそこで作った外部の初期データに依存して実装されていた。テストコードの一部が外部のデータに依存しつつ、テストメソッドでは外部のデータに依存しないように削除のコードが書いてある。書いていて何を言っているのかわからないと思うけど、私も調べてて訳がわからんくて、PR に「いまの状況はかなりややこしい」と前置きしつつ、無駄なコードや仕組みを取り除くための修正を行った。本当は機能開発やらないといけないのにテストコードのリファクタリングするのに大きな時間をかけるわけにはいかないだろうという意図で、半日掛けてリファクタリングして23時過ぎまで作業して、既存のテストコードも含めて全部直した。このリファクタリングで数十のテストケースの約300行ぐらいの初期化コードをなくせた。&lt;/p></content></item><item><title>確定申告書類の印刷</title><link>/diary/posts/2022/0207/</link><pubDate>Mon, 07 Feb 2022 09:04:45 +0900</pubDate><guid>/diary/posts/2022/0207/</guid><description>1時に寝て7時に起きた。
確定申告書類の印刷 最近は遅くても8時、速かったら7時過ぎからお仕事している。ちょうど仕事の谷間で手持ちのタスクを終えてしまっていて、今日から別のタスクに着手する予定が、昨日から障害が発生していたらしく、朝忙しそうだったから11時まで確定申告の作業をしていた。昨日、データ入力は終えていたので総勘定元帳をみながら変な数字になっていないかをチェックしたり、源泉徴収税の還付金の計算があうかどうかを検算したりしていた。あとすでに廃棄した固定資産が残っていることに気付いた。耐用年数が過ぎた固定資産の価値は1円として管理される。これを備忘価格と呼ぶらしい。除却の手続きもした。ついでに 固定資産売却益（損）とは の会計手続きも調べたりしていた。
オフィスのプリンタで一通り書類を印刷した。あとは提出するだけ。昨年から住んでいるところの徒歩圏内に申告できる場所ができて、散歩のついでに確定申告する程度の手間しかかからない。このまま電子申告してもよいのだけど、寄付金控除のための領収書を写真か PDF ファイルなどで取り込む必要があって、それだけ面倒なので放置している。このまま今年も紙で提出してくるかなぁ。
業務システムの開発 twitter のタイムラインで業務システムの開発者は「業務系エンジニア」と呼ぶとか言っている人をみかけた。そっか、私は web エンジニアから業務系エンジニアになったんだー、web アプリケーション開発しているけどな、とか思いながら、今週からいよいよお手伝い先の業務システムの開発に着手する。いままでインフラやサーバーサイドのシステム寄りの保守や機能開発のみをしていた。さっそく DB スキーマの定義やドキュメントの書き方、作業の進め方などを確認していた。ひとまず1週間のスプリントで終えられそうなタスクなのでがんばってやりたい。</description><content>&lt;p>1時に寝て7時に起きた。&lt;/p>
&lt;h2 id="確定申告書類の印刷">確定申告書類の印刷&lt;/h2>
&lt;p>最近は遅くても8時、速かったら7時過ぎからお仕事している。ちょうど仕事の谷間で手持ちのタスクを終えてしまっていて、今日から別のタスクに着手する予定が、昨日から障害が発生していたらしく、朝忙しそうだったから11時まで確定申告の作業をしていた。昨日、データ入力は終えていたので総勘定元帳をみながら変な数字になっていないかをチェックしたり、源泉徴収税の還付金の計算があうかどうかを検算したりしていた。あとすでに廃棄した固定資産が残っていることに気付いた。耐用年数が過ぎた固定資産の価値は1円として管理される。これを備忘価格と呼ぶらしい。除却の手続きもした。ついでに &lt;a href="https://advisors-freee.jp/article/category/cat-big-03/cat-small-06/12956/">固定資産売却益（損）とは&lt;/a> の会計手続きも調べたりしていた。&lt;/p>
&lt;p>オフィスのプリンタで一通り書類を印刷した。あとは提出するだけ。昨年から住んでいるところの徒歩圏内に申告できる場所ができて、散歩のついでに確定申告する程度の手間しかかからない。このまま電子申告してもよいのだけど、寄付金控除のための領収書を写真か PDF ファイルなどで取り込む必要があって、それだけ面倒なので放置している。このまま今年も紙で提出してくるかなぁ。&lt;/p>
&lt;h2 id="業務システムの開発">業務システムの開発&lt;/h2>
&lt;p>twitter のタイムラインで業務システムの開発者は「業務系エンジニア」と呼ぶとか言っている人をみかけた。そっか、私は web エンジニアから業務系エンジニアになったんだー、web アプリケーション開発しているけどな、とか思いながら、今週からいよいよお手伝い先の業務システムの開発に着手する。いままでインフラやサーバーサイドのシステム寄りの保守や機能開発のみをしていた。さっそく DB スキーマの定義やドキュメントの書き方、作業の進め方などを確認していた。ひとまず1週間のスプリントで終えられそうなタスクなのでがんばってやりたい。&lt;/p></content></item><item><title>確定申告の準備</title><link>/diary/posts/2022/0206/</link><pubDate>Sun, 06 Feb 2022 10:06:06 +0900</pubDate><guid>/diary/posts/2022/0206/</guid><description>1時に寝て8時に起きた。朝から洗濯と掃除をしてた。姪の大学進学で下宿先を探しに来ると姉が言うからなんか手伝う必要あるのかなと午後は時間をあけてたけど、そうでもなかった。
2021年度の個人の確定申告 夕方から確定申告の作業を始めた。毎年 freee で1ヶ月だけ契約して確定申告の書類を作っている。データ入力の作業は次の2つだけ。
印税の源泉徴収税の明細作成 寄付金の明細作成 書籍の印税収入が定期的に振り込まれる。印税収入は源泉徴収済みとなる。銀行 (出版社) からの明細取り込みに対して、印税と源泉徴収税の明細に分割する必要がある。今年は3社から印税があって、それぞれ数件程度の明細を作成した。クレジットカードで寄付金を支払っているものは明細連携できていないので12ヶ月分の明細を手入力することになる。言うても、それは1団体だけなので12個の明細だけ。会社を作る前は技術書の購入や勉強会の参加費や交通費 (新幹線とか) などにかかった経費なども明細登録していたけど、いまは会社の経費ですべて計上しているので個人で計上するものはなくなった。会社の経費はクレジットカード連携できているし、日々のお仕事で会計処理しているから、確定申告のタイミングでまとめて作業する必要はなくなった。
あと2021年度から 小規模企業共済 に入った。最小1000円/月から最大7万円/月の掛け金を選択する。いくらぐらいが妥当かわからなかったのでひとまず4万円/月で運用している。もちろん掛け金は変更できるが、基本的に20年とか掛け続けるもので、支払った金額は戻ってこないので、あるとき大きなお金が必要となっても融通できない貯金があるみたいものになってしまう。その分のメリットとして、所得控除の対象となる。加入シミュレーション があるので、自分の条件にあわせてやってみるとおもしろい。例えば、納付月数240ヶ月、掛け金7万円/月、課税所得400万円で算出すると24万円/年の節税となる。課税所得が減るので所得税だけでなく住民税も節税となる。</description><content>&lt;p>1時に寝て8時に起きた。朝から洗濯と掃除をしてた。姪の大学進学で下宿先を探しに来ると姉が言うからなんか手伝う必要あるのかなと午後は時間をあけてたけど、そうでもなかった。&lt;/p>
&lt;h2 id="2021年度の個人の確定申告">2021年度の個人の確定申告&lt;/h2>
&lt;p>夕方から確定申告の作業を始めた。毎年 freee で1ヶ月だけ契約して確定申告の書類を作っている。データ入力の作業は次の2つだけ。&lt;/p>
&lt;ul>
&lt;li>印税の源泉徴収税の明細作成&lt;/li>
&lt;li>寄付金の明細作成&lt;/li>
&lt;/ul>
&lt;p>書籍の印税収入が定期的に振り込まれる。印税収入は源泉徴収済みとなる。銀行 (出版社) からの明細取り込みに対して、印税と源泉徴収税の明細に分割する必要がある。今年は3社から印税があって、それぞれ数件程度の明細を作成した。クレジットカードで寄付金を支払っているものは明細連携できていないので12ヶ月分の明細を手入力することになる。言うても、それは1団体だけなので12個の明細だけ。会社を作る前は技術書の購入や勉強会の参加費や交通費 (新幹線とか) などにかかった経費なども明細登録していたけど、いまは会社の経費ですべて計上しているので個人で計上するものはなくなった。会社の経費はクレジットカード連携できているし、日々のお仕事で会計処理しているから、確定申告のタイミングでまとめて作業する必要はなくなった。&lt;/p>
&lt;p>あと2021年度から &lt;a href="https://www.smrj.go.jp/kyosai/skyosai/">小規模企業共済&lt;/a> に入った。最小1000円/月から最大7万円/月の掛け金を選択する。いくらぐらいが妥当かわからなかったのでひとまず4万円/月で運用している。もちろん掛け金は変更できるが、基本的に20年とか掛け続けるもので、支払った金額は戻ってこないので、あるとき大きなお金が必要となっても融通できない貯金があるみたいものになってしまう。その分のメリットとして、所得控除の対象となる。&lt;a href="https://www.smrj.go.jp/kyosai/skyosai/entry/simulation/index.html">加入シミュレーション&lt;/a> があるので、自分の条件にあわせてやってみるとおもしろい。例えば、納付月数240ヶ月、掛け金7万円/月、課税所得400万円で算出すると24万円/年の節税となる。課税所得が減るので所得税だけでなく住民税も節税となる。&lt;/p></content></item><item><title>見積もりの考察</title><link>/diary/posts/2022/0205/</link><pubDate>Sat, 05 Feb 2022 13:03:48 +0900</pubDate><guid>/diary/posts/2022/0205/</guid><description>23時に寝て8時半に起きた。夜中に胃酸が逆流してむせてしんどかった。
ストレッチ 先週の日曜日に自転車でこけて胸を強打してまだ治りきっていない。トレーナーさんに伝えたら主に足のストレッチを重点にしてくれた。今週は2日間ストレッチをやったんだけど、今日の開脚幅は開始前166cmで、ストレッチ後169cmだった。先週と同じなので現状維持といったところ。悪くない数字ではある。今日は左のお尻の後ろの筋肉の張りと右太ももの後ろの筋肉の張りが強かった。
見積もりとは 昨日の バーンダウンしないチャート に関連して「見積もりとはなにか」というタイトルでつらつらと書き始めたら6000文字ほど書いてた。当初はお手伝い先の wiki に書こうと思って書き始めたものの、アウトラインと言いたいことをまとめたら、とくに機密情報はほとんどないことに気付いて、自分のブログのどこかにまとめ直そうと思った。社内向けに書こうとすると、実務の具体例をベースにして自分の論理や考察を展開し、最終的には提案の説得力を高めようと構成する。一方で社外向けに書こうとすると、社内の関係者に対してハラスメントにならないように配慮して書くのをやめた内容を一般論という立て付けで構成できる。文章を書くときに誰向けに書くかは、内容が同じでも話の展開や構成に影響を与えるということにふと気付いた。また数日以内にはどこかのブログに書き直す。</description><content>&lt;p>23時に寝て8時半に起きた。夜中に胃酸が逆流してむせてしんどかった。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>先週の日曜日に自転車でこけて胸を強打してまだ治りきっていない。トレーナーさんに伝えたら主に足のストレッチを重点にしてくれた。今週は2日間ストレッチをやったんだけど、今日の開脚幅は開始前166cmで、ストレッチ後169cmだった。先週と同じなので現状維持といったところ。悪くない数字ではある。今日は左のお尻の後ろの筋肉の張りと右太ももの後ろの筋肉の張りが強かった。&lt;/p>
&lt;h2 id="見積もりとは">見積もりとは&lt;/h2>
&lt;p>昨日の &lt;a href="/diary/diary/posts/2022/0204/">バーンダウンしないチャート&lt;/a> に関連して「見積もりとはなにか」というタイトルでつらつらと書き始めたら6000文字ほど書いてた。当初はお手伝い先の wiki に書こうと思って書き始めたものの、アウトラインと言いたいことをまとめたら、とくに機密情報はほとんどないことに気付いて、自分のブログのどこかにまとめ直そうと思った。社内向けに書こうとすると、実務の具体例をベースにして自分の論理や考察を展開し、最終的には提案の説得力を高めようと構成する。一方で社外向けに書こうとすると、社内の関係者に対してハラスメントにならないように配慮して書くのをやめた内容を一般論という立て付けで構成できる。文章を書くときに誰向けに書くかは、内容が同じでも話の展開や構成に影響を与えるということにふと気付いた。また数日以内にはどこかのブログに書き直す。&lt;/p></content></item><item><title>バーンダウンしないチャート</title><link>/diary/posts/2022/0204/</link><pubDate>Fri, 04 Feb 2022 08:27:32 +0900</pubDate><guid>/diary/posts/2022/0204/</guid><description>0時に寝て4時に起きてドラクエタクトしたり twtter 眺めたりして金朝ツメトギで DX 実践手引書 を読んでた。
スプリントの残チケット スクラム開発でバックログのバーンダウンチャートを表示させるために、スプリントに対して、同じ期間のマイルストーンを設定するように運用が変わった。運用変更に伴い、バーンダウンチャートも表示されるようになり、スプリントの進捗状況の見える化が進められた。そのバーンダウンチャートの運用について SM と話していて、私の過去の開発とスプリントの考え方の大きな違いを発見した。
私がこれまでやってきた開発はマイルストーンの日には残チケットがゼロになるように開発していた。開発が遅延してそのマイルストーンで完了しそうにないチケットはどこかのタイミングで次のマイルストーンに先送りさせることで、いまやっているマイルストーンの開発が計画通りに完了するよう調整していた。作業が期限までに間に合わないチケットは早めに検知して報告して対応を検討する。一般論として、遅延したときは期限を延期するか、次のマイルストーンに先送りするかのどちらかしかない。
スクラムの場合、PO はスプリントを中止する権限をもっているが、基本的にスプリントの計画は変更しない。スプリント内でマイルストーンに間に合わないチケットがわかっていても、マイルストーンは変更せず、次のスプリントプランニングまで放置して、次のスプリントプランニングで遅れたチケットの作業を中止するか、引き続きやるかを検討するという。このやり方だと、スプリント終了日 (マイルストーンの日) に遅延して完了できないとわかっているチケットがすべて残ってしまう。当然バーンダウンチャートはバーンダウンしない。
一方でこれまでマイルストーンこそ設定していなかったものの、様々な理由でスプリントでやる予定だったチケットが遅延することは度々あった。それはデイリースクラムで遅れますとか、予想外のタスクが出てきましたとか、そういう報告をもって実運用では次のスプリントに持ち越ししていた。実運用では持ち越ししているのに、マイルストーンを変えるのは計画の変更だからやってはいけないという話しになって、見える化したのにバーンダウンしないチャートがあって、この運用に何の意味があるのだろう？わからなくなった。</description><content>&lt;p>0時に寝て4時に起きてドラクエタクトしたり twtter 眺めたりして金朝ツメトギで &lt;a href="https://www.ipa.go.jp/files/000094497.pdf">DX 実践手引書&lt;/a> を読んでた。&lt;/p>
&lt;h2 id="スプリントの残チケット">スプリントの残チケット&lt;/h2>
&lt;p>スクラム開発でバックログのバーンダウンチャートを表示させるために、スプリントに対して、同じ期間のマイルストーンを設定するように運用が変わった。運用変更に伴い、バーンダウンチャートも表示されるようになり、スプリントの進捗状況の見える化が進められた。そのバーンダウンチャートの運用について SM と話していて、私の過去の開発とスプリントの考え方の大きな違いを発見した。&lt;/p>
&lt;p>私がこれまでやってきた開発はマイルストーンの日には残チケットがゼロになるように開発していた。開発が遅延してそのマイルストーンで完了しそうにないチケットはどこかのタイミングで次のマイルストーンに先送りさせることで、いまやっているマイルストーンの開発が計画通りに完了するよう調整していた。作業が期限までに間に合わないチケットは早めに検知して報告して対応を検討する。一般論として、遅延したときは期限を延期するか、次のマイルストーンに先送りするかのどちらかしかない。&lt;/p>
&lt;p>スクラムの場合、PO はスプリントを中止する権限をもっているが、基本的にスプリントの計画は変更しない。スプリント内でマイルストーンに間に合わないチケットがわかっていても、マイルストーンは変更せず、次のスプリントプランニングまで放置して、次のスプリントプランニングで遅れたチケットの作業を中止するか、引き続きやるかを検討するという。このやり方だと、スプリント終了日 (マイルストーンの日) に遅延して完了できないとわかっているチケットがすべて残ってしまう。当然バーンダウンチャートはバーンダウンしない。&lt;/p>
&lt;p>一方でこれまでマイルストーンこそ設定していなかったものの、様々な理由でスプリントでやる予定だったチケットが遅延することは度々あった。それはデイリースクラムで遅れますとか、予想外のタスクが出てきましたとか、そういう報告をもって実運用では次のスプリントに持ち越ししていた。実運用では持ち越ししているのに、マイルストーンを変えるのは計画の変更だからやってはいけないという話しになって、見える化したのにバーンダウンしないチャートがあって、この運用に何の意味があるのだろう？わからなくなった。&lt;/p></content></item><item><title>開発の谷間</title><link>/diary/posts/2022/0203/</link><pubDate>Thu, 03 Feb 2022 07:58:53 +0900</pubDate><guid>/diary/posts/2022/0203/</guid><description>0時に寝て6時半に起きた。
ドキュメント作成 今週はあまり開発せず、バックログの wiki にドキュメントを書いてた。バックログの wiki は慣れると書きやすいし、Backlog Power Ups の chrome 拡張をインストールすると PlantUML で UML もレンダリングできる。ドキュメントの階層化はタイトルに / で区切ってグルーピングするというちょっと変なやり方。wiki のタグはフィルター条件として使いやすいように思えた。添付画像のサイズ指定ができないか調べてたら、ヌーラボコミュニティがあることに気付いた。せっかくなので 改善要望 を投稿しておいたけど、過疎っててあまり意味がないかもしれない。</description><content>&lt;p>0時に寝て6時半に起きた。&lt;/p>
&lt;h2 id="ドキュメント作成">ドキュメント作成&lt;/h2>
&lt;p>今週はあまり開発せず、バックログの wiki にドキュメントを書いてた。バックログの wiki は慣れると書きやすいし、&lt;a href="https://chrome.google.com/webstore/detail/backlog-power-ups/oknjgkbkglfeeobjojelkbhfpjkgcndb?hl=ja">Backlog Power Ups&lt;/a> の chrome 拡張をインストールすると &lt;a href="https://plantuml.com/ja/">PlantUML&lt;/a> で UML もレンダリングできる。ドキュメントの階層化はタイトルに &lt;code>/&lt;/code> で区切ってグルーピングするというちょっと変なやり方。wiki のタグはフィルター条件として使いやすいように思えた。添付画像のサイズ指定ができないか調べてたら、ヌーラボコミュニティがあることに気付いた。せっかくなので &lt;a href="https://ja.community.nulab.com/u/tetsuyamorimoto-5hx/activity">改善要望&lt;/a> を投稿しておいたけど、過疎っててあまり意味がないかもしれない。&lt;/p></content></item><item><title>情熱の考察</title><link>/diary/posts/2022/0202/</link><pubDate>Wed, 02 Feb 2022 08:14:55 +0900</pubDate><guid>/diary/posts/2022/0202/</guid><description>0時に寝て4時半に起きてドラクエタクトを1時間ほどやって寝て7時半に起きた。
課題管理の情熱 先日、行った 3ヶ月フィードバック はスクラムマスターには好評だったらしく、他にも3人ほど読んでくれた人たちがいたようだ。いま課題管理のボードの整理をしたり、wiki のドキュメント階層を整理したり、情報共有や書く文化の重要性を説いたり、チームに私のやり方を見本のように示している。チームにも、私のチケットはコメントの量が大幅に違うということは認識され、それを見様見真似でやり始める開発者も現れ始めている。誰もが最初はお手本を模倣しながら学ぶ。いままで課題管理と情報共有というコンテキストで見本を示せる開発者がいなかっただけという話だ。
ふと、なぜ私はここまで課題管理やドキュメントなどを整理したがるのか、自分で考えてもよくわからない。強いて言うと、自分が働く環境やツールに関心をもっていて、それをいまよりもより良く改善したいという気持ちが他人よりも強いのかもしれない。働くからにはよいものを作りたい、ひいてはよい環境があればよいものを作れる、よい環境を作るための投資は惜しまないという姿勢から、課題管理のワークフローと情報共有の最適化を常に考えながら実践している気がする。もっと端的には言えば、仕事がどうこうというのは全く関係なく、日々の活動に関心をもっていると言えるのかもしれないなと思ったりした。採用における特性をみるときの1つの指標として生きていることに関心をもっているか、どういう行動を取っているかとかをヒアリングしてもおもしろいのかもしれない。</description><content>&lt;p>0時に寝て4時半に起きてドラクエタクトを1時間ほどやって寝て7時半に起きた。&lt;/p>
&lt;h2 id="課題管理の情熱">課題管理の情熱&lt;/h2>
&lt;p>先日、行った &lt;a href="/diary/diary/posts/2022/0130/#3ヶ月フィードバック完了">3ヶ月フィードバック&lt;/a> はスクラムマスターには好評だったらしく、他にも3人ほど読んでくれた人たちがいたようだ。いま課題管理のボードの整理をしたり、wiki のドキュメント階層を整理したり、情報共有や書く文化の重要性を説いたり、チームに私のやり方を見本のように示している。チームにも、私のチケットはコメントの量が大幅に違うということは認識され、それを見様見真似でやり始める開発者も現れ始めている。誰もが最初はお手本を模倣しながら学ぶ。いままで課題管理と情報共有というコンテキストで見本を示せる開発者がいなかっただけという話だ。&lt;/p>
&lt;p>ふと、なぜ私はここまで課題管理やドキュメントなどを整理したがるのか、自分で考えてもよくわからない。強いて言うと、自分が働く環境やツールに関心をもっていて、それをいまよりもより良く改善したいという気持ちが他人よりも強いのかもしれない。働くからにはよいものを作りたい、ひいてはよい環境があればよいものを作れる、よい環境を作るための投資は惜しまないという姿勢から、課題管理のワークフローと情報共有の最適化を常に考えながら実践している気がする。もっと端的には言えば、仕事がどうこうというのは全く関係なく、日々の活動に関心をもっていると言えるのかもしれないなと思ったりした。採用における特性をみるときの1つの指標として生きていることに関心をもっているか、どういう行動を取っているかとかをヒアリングしてもおもしろいのかもしれない。&lt;/p></content></item><item><title>wiki のドキュメント整理</title><link>/diary/posts/2022/0201/</link><pubDate>Tue, 01 Feb 2022 07:28:46 +0900</pubDate><guid>/diary/posts/2022/0201/</guid><description>23時に寝て4時半に起きた。昨日の帰りに自転車でこけて胸を強打してひたすら痛い。起き上がるのも痛い。安静にしてた。
kubernetes のログ管理と datadog-agent のログ連携不具合 先日、datadog にログ連携されていない不具合 が発生していて、その1次調査を終えたことについて書いた。緊急対応としては datadog-agent を再起動することで改善することはわかっていたので、その後、kubernetes のログ管理と datadog-agent がどうやって kubernetes クラスター上で実行されているアプリケーションのログを収集しているかを調査していた。今日は wiki に調査してわかったことなどをまとめていた。
kubernetes クラスターはコンテナランタイムに docker を使っていて、アプリケーションの stdout/stderr を docker の logging driver にリダイレクトし、JSON Lines に設定された logging driver が kubernetes ノード上にログファイルとして出力する。datadog-agent は autodiscovery 機能で pod の情報を常にポーリングしていて、pod が新たにデプロイされたらログファイルを pod 内にマウントして、そのマウントしたログファイルを読み込んでログ収集していると思われる。datadog-agent から pod の情報を取得するには kubernetes のサービスアカウントを使っていて、その credential が projected volume としてマウントされて pod 内から利用できる。その credential を使って kubelet api にリクエストすることで pod の情報を取得している。
文章で書けばたったこれだけのことなんだけど、たったこれだけのことを理解するのに次のドキュメントを読んだ。実際の調査のときはわからなかったのでもっと多くのドキュメントを読んでいる。いま書いたことを理解するならこのドキュメントを読めば理解できるはず。
https://kubernetes.io/docs/concepts/overview/components/ https://kubernetes.io/docs/concepts/architecture/control-plane-node-communication/ https://kubernetes.io/docs/concepts/cluster-administration/logging/ https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/ https://kubernetes.io/docs/concepts/storage/projected-volumes/ https://docs.datadoghq.com/agent/kubernetes/log/?tab=helm https://docs.</description><content>&lt;p>23時に寝て4時半に起きた。昨日の帰りに自転車でこけて胸を強打してひたすら痛い。起き上がるのも痛い。安静にしてた。&lt;/p>
&lt;h2 id="kubernetes-のログ管理と-datadog-agent-のログ連携不具合">kubernetes のログ管理と datadog-agent のログ連携不具合&lt;/h2>
&lt;p>先日、&lt;a href="/diary/diary/posts/2022/0127/#ログ連携の不具合調査">datadog にログ連携されていない不具合&lt;/a> が発生していて、その1次調査を終えたことについて書いた。緊急対応としては datadog-agent を再起動することで改善することはわかっていたので、その後、kubernetes のログ管理と datadog-agent がどうやって kubernetes クラスター上で実行されているアプリケーションのログを収集しているかを調査していた。今日は wiki に調査してわかったことなどをまとめていた。&lt;/p>
&lt;p>kubernetes クラスターはコンテナランタイムに docker を使っていて、アプリケーションの stdout/stderr を docker の logging driver にリダイレクトし、JSON Lines に設定された logging driver が kubernetes ノード上にログファイルとして出力する。datadog-agent は autodiscovery 機能で pod の情報を常にポーリングしていて、pod が新たにデプロイされたらログファイルを pod 内にマウントして、そのマウントしたログファイルを読み込んでログ収集していると思われる。datadog-agent から pod の情報を取得するには kubernetes のサービスアカウントを使っていて、その credential が projected volume としてマウントされて pod 内から利用できる。その credential を使って kubelet api にリクエストすることで pod の情報を取得している。&lt;/p>
&lt;p>文章で書けばたったこれだけのことなんだけど、たったこれだけのことを理解するのに次のドキュメントを読んだ。実際の調査のときはわからなかったのでもっと多くのドキュメントを読んでいる。いま書いたことを理解するならこのドキュメントを読めば理解できるはず。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/overview/components/">https://kubernetes.io/docs/concepts/overview/components/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/architecture/control-plane-node-communication/">https://kubernetes.io/docs/concepts/architecture/control-plane-node-communication/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/cluster-administration/logging/">https://kubernetes.io/docs/concepts/cluster-administration/logging/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/">https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/storage/projected-volumes/">https://kubernetes.io/docs/concepts/storage/projected-volumes/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.datadoghq.com/agent/kubernetes/log/?tab=helm">https://docs.datadoghq.com/agent/kubernetes/log/?tab=helm&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.datadoghq.com/getting_started/agent/autodiscovery/?tab=kubernetes">https://docs.datadoghq.com/getting_started/agent/autodiscovery/?tab=kubernetes&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ドキュメントに書いてあることを深く理解するために、kubernetes と datadog-agent のソースコードも読んだ。どちらも go 言語で実装されている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubernetes/kubernetes">https://github.com/kubernetes/kubernetes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/DataDog/datadog-agent">https://github.com/DataDog/datadog-agent&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>kubectl logs&lt;/code> の振る舞いを確認するだけでも、ソースコードからは実際のログファイルを open してストリームを返しているところはわからなかった。api 呼び出しが連携されて抽象化されていて、コンポーネントの役割分担があって、何も知らずにコードを読んでいてもわからなかった。Kubernetes の低レイヤーのところは Container Runtime Interface (CRI) という標準化を行い、1.20 から docker は非推奨となり、将来的に CRI を提供する実装に置き換わるらしい。ログファイルを open する役割は CRI の実装が担うんじゃないかと思うけど、そこまでは調べきれなかった。また機会があれば CRI の実装も読んでみる。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0201_kubectl-logs.png"/>
&lt;/figure></content></item><item><title>ヘルスチェックのレスポンスのステータスコード</title><link>/diary/posts/2022/0131/</link><pubDate>Mon, 31 Jan 2022 07:29:38 +0900</pubDate><guid>/diary/posts/2022/0131/</guid><description>1時に寝て6時に起きた。
404 のレスポンスをヘルスチェック ここ数日はお仕事でインフラ周りの調査をしていた。たまたまログをみていて、ELB のヘルスチェックが 404 になっているのを大量にみつけた。てっきりヘルスチェックを使ってないのだろうと思ってインフラ担当者に問い合わせたら、404 が返ってくることをヘルスチェックしているという。404 をチェックすることになんの意味もなく、ただ急ぎで設定する必要があったからとりあえず動かせるためにそう設定したという。一方でアプリケーション側は spring boot で開発していて、Spring Boot Actuator も導入されているので /actuator/health にアクセスすれば 200 が返ってくるようになっている。どういう経緯だったかはわからないけど、開発者に一言聞けば 404 のレスポンスをヘルスチェックすることは何もない状態でずっと運用されていたことがわかった。
アプリケーション側の Kubernetes: Ingress のマニフェストにもそういった設定が入っていて、インフラ側の CDK のコードにもそういったマニフェストがあって、両方の設定変更が必要なのか、アプリケーション側のものだけでいいのか、少し調査が必要ということになった。私も Ingress というのがなにものなのか、よくわかってないので調べて理解する機会としよう。</description><content>&lt;p>1時に寝て6時に起きた。&lt;/p>
&lt;h2 id="404-のレスポンスをヘルスチェック">404 のレスポンスをヘルスチェック&lt;/h2>
&lt;p>ここ数日はお仕事でインフラ周りの調査をしていた。たまたまログをみていて、ELB のヘルスチェックが 404 になっているのを大量にみつけた。てっきりヘルスチェックを使ってないのだろうと思ってインフラ担当者に問い合わせたら、404 が返ってくることをヘルスチェックしているという。404 をチェックすることになんの意味もなく、ただ急ぎで設定する必要があったからとりあえず動かせるためにそう設定したという。一方でアプリケーション側は spring boot で開発していて、&lt;a href="https://www.baeldung.com/spring-boot-actuators">Spring Boot Actuator&lt;/a> も導入されているので &lt;code>/actuator/health&lt;/code> にアクセスすれば 200 が返ってくるようになっている。どういう経緯だったかはわからないけど、開発者に一言聞けば 404 のレスポンスをヘルスチェックすることは何もない状態でずっと運用されていたことがわかった。&lt;/p>
&lt;p>アプリケーション側の &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/">Kubernetes: Ingress&lt;/a> のマニフェストにもそういった設定が入っていて、インフラ側の CDK のコードにもそういったマニフェストがあって、両方の設定変更が必要なのか、アプリケーション側のものだけでいいのか、少し調査が必要ということになった。私も Ingress というのがなにものなのか、よくわかってないので調べて理解する機会としよう。&lt;/p></content></item><item><title>3ヶ月フィードバック書いた</title><link>/diary/posts/2022/0130/</link><pubDate>Sun, 30 Jan 2022 10:30:49 +0900</pubDate><guid>/diary/posts/2022/0130/</guid><description>1時に寝て7時半に起きた。昨日も半日ぐらいはコードを書いてて pr の草稿を作って帰ってきたら23時ぐらいだった気がする。
3ヶ月フィードバック完了 先日、書き始めた 3ヶ月フィードバック を書き終えた。平日少しずつ書こうと思ってたんだけど、平日は疲れて書かなくて、休日にまとめて書いた。最終的には1万文字ほどになった。見出しはこんな感じ。実質2日しか作業していないけど、2週間かけた。
開発プロジェクトに参加して気付いた3つの大きな課題 初めてスクラム開発をやってみた所感 所感 スクラムのよいところ スクラムのわるいところ 課題管理システム (チケット駆動開発) と情報共有 情報共有とは 課題管理と情報共有 情報共有とコミュニケーションコスト Pull Request のレビューと開発の生産性 明日プロジェクトのメンバーに共有してみる。反響があるのかどうか？もしかしたら誰も読まないかもしれないけど、私自身の思考の整理にもなっている。ここで書いた内容を洗練させてコンテンツとして再利用できるようにもしていきたい。
ストレッチ 本当はこの週末に ワーケーションへ行く予定だったが延期した 。いつもは土曜日の午前中に通っているストレッチを日曜日の夜に変更していた。
最近は日曜日をだらだら過ごす日が多いのだけど、今日は夜にストレッチの予定が入っていたので午前中は自分でストレッチして、午後から3ヶ月フィードバックを書き終えて、夜に Dr.stretch さんでトレーナーさんにストレッチしてもらうといった、平日のような充実した1日となった。休日も予定を作った方がきびきび動ける。いかに自分が怠惰かを思い知る。今日の開脚幅は開始前166cmで、ストレッチ後169cmだった。今週も全然ストレッチしなかった割にはまぁまぁよかった。</description><content>&lt;p>1時に寝て7時半に起きた。昨日も半日ぐらいはコードを書いてて pr の草稿を作って帰ってきたら23時ぐらいだった気がする。&lt;/p>
&lt;h2 id="3ヶ月フィードバック完了">3ヶ月フィードバック完了&lt;/h2>
&lt;p>先日、書き始めた &lt;a href="/diary/diary/posts/2022/0123/">3ヶ月フィードバック&lt;/a> を書き終えた。平日少しずつ書こうと思ってたんだけど、平日は疲れて書かなくて、休日にまとめて書いた。最終的には1万文字ほどになった。見出しはこんな感じ。実質2日しか作業していないけど、2週間かけた。&lt;/p>
&lt;ul>
&lt;li>開発プロジェクトに参加して気付いた3つの大きな課題&lt;/li>
&lt;li>初めてスクラム開発をやってみた所感
&lt;ul>
&lt;li>所感&lt;/li>
&lt;li>スクラムのよいところ&lt;/li>
&lt;li>スクラムのわるいところ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>課題管理システム (チケット駆動開発) と情報共有
&lt;ul>
&lt;li>情報共有とは&lt;/li>
&lt;li>課題管理と情報共有&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>情報共有とコミュニケーションコスト&lt;/li>
&lt;li>Pull Request のレビューと開発の生産性&lt;/li>
&lt;/ul>
&lt;p>明日プロジェクトのメンバーに共有してみる。反響があるのかどうか？もしかしたら誰も読まないかもしれないけど、私自身の思考の整理にもなっている。ここで書いた内容を洗練させてコンテンツとして再利用できるようにもしていきたい。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>本当はこの週末に &lt;a href="/diary/diary/posts/2022/0115/#ワーケーション延期">ワーケーションへ行く予定だったが延期した&lt;/a> 。いつもは土曜日の午前中に通っているストレッチを日曜日の夜に変更していた。&lt;/p>
&lt;p>最近は日曜日をだらだら過ごす日が多いのだけど、今日は夜にストレッチの予定が入っていたので午前中は自分でストレッチして、午後から3ヶ月フィードバックを書き終えて、夜に Dr.stretch さんでトレーナーさんにストレッチしてもらうといった、平日のような充実した1日となった。休日も予定を作った方がきびきび動ける。いかに自分が怠惰かを思い知る。今日の開脚幅は開始前166cmで、ストレッチ後169cmだった。今週も全然ストレッチしなかった割にはまぁまぁよかった。&lt;/p></content></item><item><title>不正の調査報告書を読んだ</title><link>/diary/posts/2022/0129/</link><pubDate>Sat, 29 Jan 2022 13:56:30 +0900</pubDate><guid>/diary/posts/2022/0129/</guid><description>不正の調査報告書 少し前にタイムラインでグレイステクノロジーという会社の粉飾決算が話題になっていたので関心をもっていて、調査報告書が公開されていたので読んでみた。100ページ超あるので目を通すだけでも数時間ほどかかった。
特別調査委員会の調査報告書受領に関するお知らせ うちはマイクロ法人なんでなんのプレッシャーも目標もない、お気楽な会社ではあるけど、失敗事例から経営や会計を学ぶ機会にしている。多くのケースで成功する方法はわからないけど、失敗しない方法はいくつもある。凡人は成功しようとせずに失敗しないように注意するのがよいと私は考えている。これは麻雀で振り込まなかったら勝てるというのに近い考え方だ。
閑話休題。報告書を読んでいて最初は1社員による小さな不正だった。もちろんそれもよくないことだが、経営陣がまともであれば、いくらでも訂正することも立て直すこともできた。しかし、経営陣もおかしかった。すぐに個人の不正が組織ぐるみになり、創業者の虚栄心も拍車をかけて、2-3年後には数億円規模の不正となり、不正を働いた関係者が一蓮托生となった。これは構造的な問題もしくは失敗を学ぶ教材となる。関係者個人の道徳心や正義感などを批判することもできるだろうが、それよりも構造的にそんな状態に陥らないように会社の仕組みを作ることが重要で、一般論ではそれをコーポレートガバナンス (企業統治) と呼ぶのだろう。しかし、経営者がみずから不正をすることに対するガバナンスとはどう在るべきなのか、この問題に対する構造的な対策はなかなか難しいのだと、この調査報告書は語っている。
なんら擁護するものではないが、読み進めていて、関係者みんな辛かっただろうなと不正をしなければいけない状況や心境を察してしまった。目標数値が高過ぎる、過度なパワハラ、コーポレートガバナンスの不備などがその状況を5年も維持し続けてしまった。もっと早く明るみに出ていたら、いまより関係者は苦しまなかっただろうが、歴史に if はないので推測でしかない。不正の中心人物である創業者は急性大動脈解離で急逝しており、それは認知的不協和のストレスによって引き起こされた可能性が高いのではないかと私は考えてしまった。不正に限った話ではないが、なんらかの間違いというのは早期に検出できて、早期に改善のための取り組みをする方が短期的に大きな損害を被ったとしても、中長期的には最大の利益を得るというのを、多くの人は人生の経験の中で学んでいくと思う。たまたまその経験をもっていない人たちがこの会社には集まってしまって、不幸な事件が起きてしまったように私は受け取ってしまった。</description><content>&lt;h2 id="不正の調査報告書">不正の調査報告書&lt;/h2>
&lt;p>少し前にタイムラインでグレイステクノロジーという会社の粉飾決算が話題になっていたので関心をもっていて、調査報告書が公開されていたので読んでみた。100ページ超あるので目を通すだけでも数時間ほどかかった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://ssl4.eir-parts.net/doc/6541/tdnet/2072811/00.pdf">特別調査委員会の調査報告書受領に関するお知らせ&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>うちはマイクロ法人なんでなんのプレッシャーも目標もない、お気楽な会社ではあるけど、失敗事例から経営や会計を学ぶ機会にしている。多くのケースで成功する方法はわからないけど、失敗しない方法はいくつもある。凡人は成功しようとせずに失敗しないように注意するのがよいと私は考えている。これは麻雀で振り込まなかったら勝てるというのに近い考え方だ。&lt;/p>
&lt;p>閑話休題。報告書を読んでいて最初は1社員による小さな不正だった。もちろんそれもよくないことだが、経営陣がまともであれば、いくらでも訂正することも立て直すこともできた。しかし、経営陣もおかしかった。すぐに個人の不正が組織ぐるみになり、創業者の虚栄心も拍車をかけて、2-3年後には数億円規模の不正となり、不正を働いた関係者が一蓮托生となった。これは構造的な問題もしくは失敗を学ぶ教材となる。関係者個人の道徳心や正義感などを批判することもできるだろうが、それよりも構造的にそんな状態に陥らないように会社の仕組みを作ることが重要で、一般論ではそれをコーポレートガバナンス (企業統治) と呼ぶのだろう。しかし、経営者がみずから不正をすることに対するガバナンスとはどう在るべきなのか、この問題に対する構造的な対策はなかなか難しいのだと、この調査報告書は語っている。&lt;/p>
&lt;p>なんら擁護するものではないが、読み進めていて、関係者みんな辛かっただろうなと不正をしなければいけない状況や心境を察してしまった。目標数値が高過ぎる、過度なパワハラ、コーポレートガバナンスの不備などがその状況を5年も維持し続けてしまった。もっと早く明るみに出ていたら、いまより関係者は苦しまなかっただろうが、歴史に if はないので推測でしかない。不正の中心人物である創業者は急性大動脈解離で急逝しており、それは認知的不協和のストレスによって引き起こされた可能性が高いのではないかと私は考えてしまった。不正に限った話ではないが、なんらかの間違いというのは早期に検出できて、早期に改善のための取り組みをする方が短期的に大きな損害を被ったとしても、中長期的には最大の利益を得るというのを、多くの人は人生の経験の中で学んでいくと思う。たまたまその経験をもっていない人たちがこの会社には集まってしまって、不幸な事件が起きてしまったように私は受け取ってしまった。&lt;/p></content></item><item><title>不具合調査の翌日</title><link>/diary/posts/2022/0128/</link><pubDate>Fri, 28 Jan 2022 08:14:50 +0900</pubDate><guid>/diary/posts/2022/0128/</guid><description>1時に寝て4時半に起きた。昨日22時過ぎまで作業して23時頃から晩ご飯食べてから寝たわりに、というかそのせいか、パッと起きて金朝ツメトギみて、そのままオフィス行って、午前中は昨日の続きの不具合調査をしてた。
Kindle 本の返品 ある kindle 本を購入したときにアカウントを間違えていることに気付いた。amazon のアカウントは法人アカウントと個人アカウントがある。アプリでアカウントの切り替えは面倒なので、業務で購入する kindle 本も個人アカウントで購入して読んでいる。誤って法人アカウントで kindle 本を購入してしまったので返品したい。システム的に kindle 本の返品機能は提供されていないが、Kindle本を返品する を読むとカスタマーサービスから返品できる。次の記事はスクリーンショットで操作も説明しているのでわかりやすい。
【しまった】Kindle本の返品(キャンセル)方法を画像付きで解説！読んだ後に返品はできる？ カスタマーサービスのチャットを開いて、ボットの質問にいくつか回答して、購入した kindle 本を選択して「その他」からオペーレーターにつながる。6時過ぎだったのにオペレーターがチャットに出てきて、kindle 本を返品したいと書き込んだらすぐに確認して返品処理してくれた。オペレーターは24時間体制なのかな？おそらく購入してすぐだったし、ダウンロードもしていなかったので返品処理がすぐできたのだと推測する。実際の返金処理には2-3日かかるとのこと。チャットで2-3のコメントを書き込めば手続きできたのでシステムはよくできていると思った。そのことを twtter に書き込んだらすぐ Amazon Help にいいねされて、みてるぞって感じでこれはちょっと怖くなった。
アカウントを間違えて、誤って kindle 本を購入してしまってカスタマーサービスからチャットして返品処理できた。この時間でも担当者がつながったので24時間体制でサポートしているんやな。スムーズに手続きできてよかった #金朝ツメトギ
&amp;mdash; Tetsuya Morimoto (@t2y) January 27, 2022 オフィス内覧 オフィスの引っ越し調査のために fabbit神戸三宮 に行ってきた。フリースペースは開放感があって、外の光も入っていて、雰囲気がよさそうにみえた。サービスで1日分のドロップインチケットをもらったので今度使ってみる。個室は2名と4名部屋の2種類。2名部屋はあまり広くないので1名で利用している会員も多いとのこと。
月額利用料: 66,000円 郵便受けサービス: 1,100円 法人登記サービス: 11,000円 法人のオフィスとして使うときは郵便受けと法人登記サービスに入る必要があるとのこと。個室の設備なども含めて比べると、いまのオフィスより割高な料金設定になっているように感じた。その他デメリットもいくつかわかった。
法人登記の場合、入会するときに入会金が44,000円かかる 部屋に備え付けの机や椅子がいらないときは保管場所を自分で用意しないといけない 椅子を変えたかったら備え付けの椅子を自宅に置いとくとか 個室の仕切りがガラス張りで外から中がみえるので社外秘などのセキュリティがやや気になる 顧客情報が流出する可能性があるのと、マット敷いてお昼寝しているときに外からみられたら恥ずかしい 郵便受けが施設内にあるのでスタッフがいないと郵便が届かない (土日に郵便物を受け取れない)</description><content>&lt;p>1時に寝て4時半に起きた。昨日22時過ぎまで作業して23時頃から晩ご飯食べてから寝たわりに、というかそのせいか、パッと起きて金朝ツメトギみて、そのままオフィス行って、午前中は昨日の続きの不具合調査をしてた。&lt;/p>
&lt;h2 id="kindle-本の返品">Kindle 本の返品&lt;/h2>
&lt;p>ある kindle 本を購入したときにアカウントを間違えていることに気付いた。amazon のアカウントは法人アカウントと個人アカウントがある。アプリでアカウントの切り替えは面倒なので、業務で購入する kindle 本も個人アカウントで購入して読んでいる。誤って法人アカウントで kindle 本を購入してしまったので返品したい。システム的に kindle 本の返品機能は提供されていないが、&lt;a href="https://www.amazon.co.jp/gp/help/customer/display.html?nodeId=G937D322PWZ6L9BL">Kindle本を返品する&lt;/a> を読むとカスタマーサービスから返品できる。次の記事はスクリーンショットで操作も説明しているのでわかりやすい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.kyodotokyo.com/book-movie/kindle-book-return/">【しまった】Kindle本の返品(キャンセル)方法を画像付きで解説！読んだ後に返品はできる？&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>カスタマーサービスのチャットを開いて、ボットの質問にいくつか回答して、購入した kindle 本を選択して「その他」からオペーレーターにつながる。6時過ぎだったのにオペレーターがチャットに出てきて、kindle 本を返品したいと書き込んだらすぐに確認して返品処理してくれた。オペレーターは24時間体制なのかな？おそらく購入してすぐだったし、ダウンロードもしていなかったので返品処理がすぐできたのだと推測する。実際の返金処理には2-3日かかるとのこと。チャットで2-3のコメントを書き込めば手続きできたのでシステムはよくできていると思った。そのことを twtter に書き込んだらすぐ Amazon Help にいいねされて、みてるぞって感じでこれはちょっと怖くなった。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">アカウントを間違えて、誤って kindle 本を購入してしまってカスタマーサービスからチャットして返品処理できた。この時間でも担当者がつながったので24時間体制でサポートしているんやな。スムーズに手続きできてよかった &lt;a href="https://twitter.com/hashtag/%E9%87%91%E6%9C%9D%E3%83%84%E3%83%A1%E3%83%88%E3%82%AE?src=hash&amp;amp;ref_src=twsrc%5Etfw">#金朝ツメトギ&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1486815457428787203?ref_src=twsrc%5Etfw">January 27, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="オフィス内覧">オフィス内覧&lt;/h2>
&lt;p>オフィスの引っ越し調査のために &lt;a href="https://fabbit.co.jp/facility/kobesannomiya/">fabbit神戸三宮&lt;/a> に行ってきた。フリースペースは開放感があって、外の光も入っていて、雰囲気がよさそうにみえた。サービスで1日分のドロップインチケットをもらったので今度使ってみる。個室は2名と4名部屋の2種類。2名部屋はあまり広くないので1名で利用している会員も多いとのこと。&lt;/p>
&lt;ul>
&lt;li>月額利用料: 66,000円&lt;/li>
&lt;li>郵便受けサービス: 1,100円&lt;/li>
&lt;li>法人登記サービス: 11,000円&lt;/li>
&lt;/ul>
&lt;p>法人のオフィスとして使うときは郵便受けと法人登記サービスに入る必要があるとのこと。個室の設備なども含めて比べると、いまのオフィスより割高な料金設定になっているように感じた。その他デメリットもいくつかわかった。&lt;/p>
&lt;ul>
&lt;li>法人登記の場合、入会するときに入会金が44,000円かかる&lt;/li>
&lt;li>部屋に備え付けの机や椅子がいらないときは保管場所を自分で用意しないといけない
&lt;ul>
&lt;li>椅子を変えたかったら備え付けの椅子を自宅に置いとくとか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>個室の仕切りがガラス張りで外から中がみえるので社外秘などのセキュリティがやや気になる
&lt;ul>
&lt;li>顧客情報が流出する可能性があるのと、マット敷いてお昼寝しているときに外からみられたら恥ずかしい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>郵便受けが施設内にあるのでスタッフがいないと郵便が届かない (土日に郵便物を受け取れない)&lt;/li>
&lt;/ul></content></item><item><title>datadog-agent のログ連携の不具合調査</title><link>/diary/posts/2022/0127/</link><pubDate>Thu, 27 Jan 2022 07:47:57 +0900</pubDate><guid>/diary/posts/2022/0127/</guid><description>0時に寝て4時に起きた。朝から1時間ほどドラクエタクトやってた。
ログ連携の不具合調査 少し前に本番環境で datadog-agent からログが (クラウドの) datadog に連携されていないことがわかった。kubectl logs のコマンドで確認すると、アプリケーションのログは出力されているので datadog-agent から datadog にログを送信するところの問題であるように推測された。たまたま今日、同じような現象をテスト環境で確認できた。ちょうどスクラムのプランニングでログ調査のための作業をするチケットの承認を得たところだった。満を持して発生したような障害だったので私が調査すると明言して調査してた。半日ぐらい調査して、pod 内の credential 情報が置き換わってしまうことが原因っぽいと特定できたが、なぜ置き換わってしまうのかはまだわからない。もう少し調査して解決したら会社のテックブログにいいなと思ったので、日記に書いてた内容を移行することにした。</description><content>&lt;p>0時に寝て4時に起きた。朝から1時間ほどドラクエタクトやってた。&lt;/p>
&lt;h2 id="ログ連携の不具合調査">ログ連携の不具合調査&lt;/h2>
&lt;p>少し前に本番環境で &lt;a href="https://github.com/DataDog/datadog-agent">datadog-agent&lt;/a> からログが (クラウドの) datadog に連携されていないことがわかった。kubectl logs のコマンドで確認すると、アプリケーションのログは出力されているので datadog-agent から datadog にログを送信するところの問題であるように推測された。たまたま今日、同じような現象をテスト環境で確認できた。ちょうどスクラムのプランニングでログ調査のための作業をするチケットの承認を得たところだった。満を持して発生したような障害だったので私が調査すると明言して調査してた。半日ぐらい調査して、pod 内の credential 情報が置き換わってしまうことが原因っぽいと特定できたが、なぜ置き換わってしまうのかはまだわからない。もう少し調査して解決したら会社のテックブログにいいなと思ったので、日記に書いてた内容を移行することにした。&lt;/p></content></item><item><title>レビュー待ちのストレス</title><link>/diary/posts/2022/0126/</link><pubDate>Wed, 26 Jan 2022 08:23:50 +0900</pubDate><guid>/diary/posts/2022/0126/</guid><description>0時に寝て6時に起きた。6時半頃に動くバッチ処理がエラーになって朝から原因を調べてた。
ユニットバイアスとツァイガルニク効果 いまのお仕事は火曜日にリリースして水曜日にプランニングしているため、1週間のうちの火曜日と水曜日がだらけがちになっている。火曜日に作成したリリースしない開発途中の PR が保留され、水曜日もプランニングやその後の調整にだらけていると PR が滞留しやすいからだ。昨日と今日で作成した PR が7つレビュー待ちで溜まっていて、他の作業を並行して進めるやる気をなくしてしまった。ここでなぜ作業を中断していると、自分の中でストレスが溜まったり、他の作業のやる気が削がれるのかを考えてみた。私が知っている認知心理学の知見からだと次の2つになる。
ユニットバイアス 量や大きさに関係なく、やり終えることに満足を感じる チケットやタスクを小さく分割することで小さな課題に集中して作業できる ツァイガルニク効果 途中で挫折したり中断してしまったことの方がよく記憶に残る 心理的リアクタンスが高いほどこの効果が発生しやすくなる 他人から行動を制限される反発して自分のやりたい欲求が高まる レビュー待ちが多いと中断している課題のことが気になって集中力を削がれる 普通の開発者は1日3-5個ぐらいのチケットを fix するんじゃないかと思うけど、レビューが止まっているせいでそれが阻害されてストレスを感じる。しかも、レビューが有意義であれば待つ価値もあるが、レビューのほとんどがノーコメントで approve されるだけだと待ち時間だけが積み上がる。
普通のプログラマの普通の設計 タイムラインでたまたまみかけて 普通のプログラマの普通の設計 に参加した。設計の話しはコンテキストやコードがないと抽象的過ぎてふわふわして勉強会で扱うには難しいテーマだけど、その懸念通り、ふわふわした内容だったと思う。おもしろくなかったわけではなく、発表者それぞれの考え方や大事にしている価値観などを知ることで多様性を認めるというか、他人のやり方を受け入れることにもつながるのかなとは思えた。
コードのない設計の話しは言葉から連想される概念が広過ぎてあまりよくわからない。現実の設計でも言葉でやり取りして同意していたのにコードは全然違うみたいなことはたまに発生する。だから言葉で設計のやり取りするよりも、2-3日でプロトタイプを実装できるならコードを先にみせてもらった方がよいとすら私は考えているところがある。あと一度設計をやったら終わりと考える開発者も多い。設計とは運用してからのフィードバックを受けてさらに改善していくことも含まれる。だから開発を継続している限り、設計したということはなくてずっと設計しているという考え方が正しい。matz もコードとは設計であると話していたと思う。</description><content>&lt;p>0時に寝て6時に起きた。6時半頃に動くバッチ処理がエラーになって朝から原因を調べてた。&lt;/p>
&lt;h2 id="ユニットバイアスとツァイガルニク効果">ユニットバイアスとツァイガルニク効果&lt;/h2>
&lt;p>いまのお仕事は火曜日にリリースして水曜日にプランニングしているため、1週間のうちの火曜日と水曜日がだらけがちになっている。火曜日に作成したリリースしない開発途中の PR が保留され、水曜日もプランニングやその後の調整にだらけていると PR が滞留しやすいからだ。昨日と今日で作成した PR が7つレビュー待ちで溜まっていて、他の作業を並行して進めるやる気をなくしてしまった。ここでなぜ作業を中断していると、自分の中でストレスが溜まったり、他の作業のやる気が削がれるのかを考えてみた。私が知っている認知心理学の知見からだと次の2つになる。&lt;/p>
&lt;ul>
&lt;li>ユニットバイアス
&lt;ul>
&lt;li>量や大きさに関係なく、やり終えることに満足を感じる&lt;/li>
&lt;li>チケットやタスクを小さく分割することで小さな課題に集中して作業できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ツァイガルニク効果
&lt;ul>
&lt;li>途中で挫折したり中断してしまったことの方がよく記憶に残る&lt;/li>
&lt;li>心理的リアクタンスが高いほどこの効果が発生しやすくなる
&lt;ul>
&lt;li>他人から行動を制限される反発して自分のやりたい欲求が高まる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>レビュー待ちが多いと中断している課題のことが気になって集中力を削がれる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>普通の開発者は1日3-5個ぐらいのチケットを fix するんじゃないかと思うけど、レビューが止まっているせいでそれが阻害されてストレスを感じる。しかも、レビューが有意義であれば待つ価値もあるが、レビューのほとんどがノーコメントで approve されるだけだと待ち時間だけが積み上がる。&lt;/p>
&lt;h2 id="普通のプログラマの普通の設計">普通のプログラマの普通の設計&lt;/h2>
&lt;p>タイムラインでたまたまみかけて &lt;a href="https://modeling-how-to-learn.connpass.com/event/231669/">普通のプログラマの普通の設計&lt;/a> に参加した。設計の話しはコンテキストやコードがないと抽象的過ぎてふわふわして勉強会で扱うには難しいテーマだけど、その懸念通り、ふわふわした内容だったと思う。おもしろくなかったわけではなく、発表者それぞれの考え方や大事にしている価値観などを知ることで多様性を認めるというか、他人のやり方を受け入れることにもつながるのかなとは思えた。&lt;/p>
&lt;p>コードのない設計の話しは言葉から連想される概念が広過ぎてあまりよくわからない。現実の設計でも言葉でやり取りして同意していたのにコードは全然違うみたいなことはたまに発生する。だから言葉で設計のやり取りするよりも、2-3日でプロトタイプを実装できるならコードを先にみせてもらった方がよいとすら私は考えているところがある。あと一度設計をやったら終わりと考える開発者も多い。設計とは運用してからのフィードバックを受けてさらに改善していくことも含まれる。だから開発を継続している限り、設計したということはなくてずっと設計しているという考え方が正しい。matz もコードとは設計であると話していたと思う。&lt;/p></content></item><item><title>歴史と地政学</title><link>/diary/posts/2022/0125/</link><pubDate>Tue, 25 Jan 2022 07:41:53 +0900</pubDate><guid>/diary/posts/2022/0125/</guid><description>1時に寝て6時半に起きた。今日はリリース日でリリースに間に合わなかった PR 群の説明を書いてそれらをまとめたり、チケットの整理をしたりしていて、あんまり他のことの記憶がない。
地政学に関心がある プーチン大統領が「地政学的に言えば……」という枕詞をよく使う (印象を私が勝手にもっていて、実際にそういう発言をググっても検索ヒットするわけではないので勝手な私の思い込みかもしれないが) ので地政学という分野に以前から関心をもっている。とくにプーチン大統領のファンだというわけではない。地政学といえばプーチン大統領という連想が働くだけだ。たまたまはてブのエントリーでみつけた記事を読んだらおもしろかった。
面白い世界史の本を3人で2時間お薦めしあった中から厳選した12冊（前編） 記事に触発されて 恐怖の地政学 を購入した。いま私が地方都市に住んでいるというのもあって、地方に根付いた産業とか文化とか、いくらかそれは地理的な要因もあるだろうとは思っていて、せっかく地方に住んでいるのだからそういう分野の歴史や背景を調べるのもおもしろそうだと思い始めたところでもある。</description><content>&lt;p>1時に寝て6時半に起きた。今日はリリース日でリリースに間に合わなかった PR 群の説明を書いてそれらをまとめたり、チケットの整理をしたりしていて、あんまり他のことの記憶がない。&lt;/p>
&lt;h2 id="地政学に関心がある">地政学に関心がある&lt;/h2>
&lt;p>プーチン大統領が「地政学的に言えば……」という枕詞をよく使う (印象を私が勝手にもっていて、実際にそういう発言をググっても検索ヒットするわけではないので勝手な私の思い込みかもしれないが) ので地政学という分野に以前から関心をもっている。とくにプーチン大統領のファンだというわけではない。地政学といえばプーチン大統領という連想が働くだけだ。たまたまはてブのエントリーでみつけた記事を読んだらおもしろかった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dain.cocolog-nifty.com/myblog/2022/01/post-1d5097.html">面白い世界史の本を3人で2時間お薦めしあった中から厳選した12冊（前編）&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>記事に触発されて &lt;a href="http://sakurasha.com/2016/11/%E6%81%90%E6%80%96%E3%81%AE%E5%9C%B0%E6%94%BF%E5%AD%A6/">恐怖の地政学&lt;/a> を購入した。いま私が地方都市に住んでいるというのもあって、地方に根付いた産業とか文化とか、いくらかそれは地理的な要因もあるだろうとは思っていて、せっかく地方に住んでいるのだからそういう分野の歴史や背景を調べるのもおもしろそうだと思い始めたところでもある。&lt;/p></content></item><item><title>雑談の効果</title><link>/diary/posts/2022/0124/</link><pubDate>Mon, 24 Jan 2022 21:12:54 +0900</pubDate><guid>/diary/posts/2022/0124/</guid><description>4時に寝て7時半に起きた。休日にだらだら過ごしてたので生活のリズムが狂ってしまった。
開発者同士の雑談 リリース作業前の検証のときにそれぞれの開発者が対応した課題の検証をやりながらハドルで雑談するのが定例になってきた。オンラインミーティングをするときに打ち合わせのリソースを作成する必要がないので、ハドルぐらい手軽にオンラインで繋げられれば雑談もしやすいということが少し理解できてきた。slack アプリは常に開いているので打ち合わせのために特定のアプリ(ブラウザで特定のページ)を開くという作業がないだけで心理的な障壁が下がる気がする。チャットツールに音声通話の機能がつくのは大きなメリットがあるなと、zoom や google meet と比較して思うようになってきた。定例会議やイベントなどは zoom や google meet でかまわない。だけど、「いまからリリースやるからみんな集まって」みたいなノリはハドルの方が集めやすいし、参加しやすい。フルリモートワークはオフィスと同じような雑談がやりにくいという課題の、技術的な課題はハドルが少しずつ解決していきそうな未来があるのかもしれない。
いままでのほほんと雑談していただけだったが、こういう機会にどんな会話をしているか、その会話からどういった情報共有が行われているか、会話することで人間関係や心理的安全性に影響を与えるかなど、雑談の意義や効果に注意を向けながらやってみるとなにかしら発見があるような気もしてきた。</description><content>&lt;p>4時に寝て7時半に起きた。休日にだらだら過ごしてたので生活のリズムが狂ってしまった。&lt;/p>
&lt;h2 id="開発者同士の雑談">開発者同士の雑談&lt;/h2>
&lt;p>リリース作業前の検証のときにそれぞれの開発者が対応した課題の検証をやりながらハドルで雑談するのが定例になってきた。オンラインミーティングをするときに打ち合わせのリソースを作成する必要がないので、ハドルぐらい手軽にオンラインで繋げられれば雑談もしやすいということが少し理解できてきた。slack アプリは常に開いているので打ち合わせのために特定のアプリ(ブラウザで特定のページ)を開くという作業がないだけで心理的な障壁が下がる気がする。チャットツールに音声通話の機能がつくのは大きなメリットがあるなと、zoom や google meet と比較して思うようになってきた。定例会議やイベントなどは zoom や google meet でかまわない。だけど、「いまからリリースやるからみんな集まって」みたいなノリはハドルの方が集めやすいし、参加しやすい。フルリモートワークはオフィスと同じような雑談がやりにくいという課題の、技術的な課題はハドルが少しずつ解決していきそうな未来があるのかもしれない。&lt;/p>
&lt;p>いままでのほほんと雑談していただけだったが、こういう機会にどんな会話をしているか、その会話からどういった情報共有が行われているか、会話することで人間関係や心理的安全性に影響を与えるかなど、雑談の意義や効果に注意を向けながらやってみるとなにかしら発見があるような気もしてきた。&lt;/p></content></item><item><title>フィードバックの書き始め</title><link>/diary/posts/2022/0123/</link><pubDate>Sun, 23 Jan 2022 21:12:52 +0900</pubDate><guid>/diary/posts/2022/0123/</guid><description>0時に寝て8時半に起きた。今日は雨降りだったのもあって1日お休みしてた。
3ヶ月フィードバック はらさんと 雑談したこと を整理しながら wiki に書き始めた。勢いで2つの項目を書いた。書き始めにすごく時間を要するけど、書き出すとわりと推敲もしながら進む。
開発プロジェクトに参加して気付いた3つの大きな課題 初めてスクラム開発をやってみた所感 あと課題管理システムのことや情報共有の考え方やレベル、PR のルールやレビューと開発の生産性について書く。三分の一ぐらい書いたところかな。少しずつ空き時間をみつけて書いていく。</description><content>&lt;p>0時に寝て8時半に起きた。今日は雨降りだったのもあって1日お休みしてた。&lt;/p>
&lt;h2 id="3ヶ月フィードバック">3ヶ月フィードバック&lt;/h2>
&lt;p>はらさんと &lt;a href="/diary/diary/posts/2022/0121/#隔週の雑談">雑談したこと&lt;/a> を整理しながら wiki に書き始めた。勢いで2つの項目を書いた。書き始めにすごく時間を要するけど、書き出すとわりと推敲もしながら進む。&lt;/p>
&lt;ul>
&lt;li>開発プロジェクトに参加して気付いた3つの大きな課題&lt;/li>
&lt;li>初めてスクラム開発をやってみた所感&lt;/li>
&lt;/ul>
&lt;p>あと課題管理システムのことや情報共有の考え方やレベル、PR のルールやレビューと開発の生産性について書く。三分の一ぐらい書いたところかな。少しずつ空き時間をみつけて書いていく。&lt;/p></content></item><item><title>バーで会食</title><link>/diary/posts/2022/0122/</link><pubDate>Sat, 22 Jan 2022 12:42:46 +0900</pubDate><guid>/diary/posts/2022/0122/</guid><description>4時に寝て10時に起きた。昨日は体調悪くて夕方仮眠して、体調よくなった22時頃から作業を再開したので3時ぐらいまでやってた。
ストレッチ 今週もあまりストレッチができなかったものの、今日の開脚幅は開始前172cmで、ストレッチ後170cmだった。特別なことは何もしてないのだけど、数値がよくなった。開脚の仕方によって3cmぐらいは変わってきたりするのかな。開始前に測ったときに172cmになった理由もよくわからなかった。太もも後ろの張りは先週よりよくなっていたものの、腰の疲労は溜まっていて毎週毎週コンディションが違うなというのを実感する。
会員制バーでふりかえり 先日 予約した会員制バー へ行ってきた。バーとか連れられてしか行ったことないので慣れる意図もある。bizpy の機械学習勉強会 のふりかえりも兼ねてわたなべさんと行ってきた。ビジネスパーソンという対象者の属性や前提知識などを確認したり、コンテンツの細分化や進め方、次回の予定など幅広くわいわいやってた。
バーについては思ったより店内は広くて10席ほどのカウンターのみだけど、幅広の椅子が置かれているのでパーソナルスペースが広くてゆったり過ごせる空間な気がした。19時に行ったら他のお客さんは誰もいなくて21時までいて誰も他のお客さんは来なかった。貸し切りみたいな感じだった。オミクロン株が流行も関係しているのだろう。うちらにしたら他のお客さんがいないから感染リスクが減ってよかったと思う。コース料理を頼んでいた。一品一品凝った感じの料理で接待にはちょうどよい。普通の晩ご飯に食べるにはお洒落過ぎて私には無用のものだと思う。量がたくさんあるわけでもないけど、1品ずつ出てきて2時間かけて食べるので割とお腹はいっぱいになって満足した。それなりの値段もするので当然おいしかった。</description><content>&lt;p>4時に寝て10時に起きた。昨日は体調悪くて夕方仮眠して、体調よくなった22時頃から作業を再開したので3時ぐらいまでやってた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週もあまりストレッチができなかったものの、今日の開脚幅は開始前172cmで、ストレッチ後170cmだった。特別なことは何もしてないのだけど、数値がよくなった。開脚の仕方によって3cmぐらいは変わってきたりするのかな。開始前に測ったときに172cmになった理由もよくわからなかった。太もも後ろの張りは先週よりよくなっていたものの、腰の疲労は溜まっていて毎週毎週コンディションが違うなというのを実感する。&lt;/p>
&lt;h2 id="会員制バーでふりかえり">会員制バーでふりかえり&lt;/h2>
&lt;p>先日 &lt;a href="/diary/diary/posts/2022/0118/#会員制バー予約">予約した会員制バー&lt;/a> へ行ってきた。バーとか連れられてしか行ったことないので慣れる意図もある。&lt;a href="/diary/diary/posts/2022/0119/#bizpy-勉強会">bizpy の機械学習勉強会&lt;/a> のふりかえりも兼ねてわたなべさんと行ってきた。ビジネスパーソンという対象者の属性や前提知識などを確認したり、コンテンツの細分化や進め方、次回の予定など幅広くわいわいやってた。&lt;/p>
&lt;p>バーについては思ったより店内は広くて10席ほどのカウンターのみだけど、幅広の椅子が置かれているのでパーソナルスペースが広くてゆったり過ごせる空間な気がした。19時に行ったら他のお客さんは誰もいなくて21時までいて誰も他のお客さんは来なかった。貸し切りみたいな感じだった。オミクロン株が流行も関係しているのだろう。うちらにしたら他のお客さんがいないから感染リスクが減ってよかったと思う。コース料理を頼んでいた。一品一品凝った感じの料理で接待にはちょうどよい。普通の晩ご飯に食べるにはお洒落過ぎて私には無用のものだと思う。量がたくさんあるわけでもないけど、1品ずつ出てきて2時間かけて食べるので割とお腹はいっぱいになって満足した。それなりの値段もするので当然おいしかった。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2022/0122_dish1.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2022/0122_dish2.jpg"/>
&lt;/figure>
&lt;/p></content></item><item><title>第1回オフィス内覧調査</title><link>/diary/posts/2022/0121/</link><pubDate>Fri, 21 Jan 2022 10:13:44 +0900</pubDate><guid>/diary/posts/2022/0121/</guid><description>0時に寝て6時に起きた。起きたときは普通だったけど、午前中に働き始めてからまた頭痛がしてきた。内覧後は帰ってベッドで仮眠してた。夕方に頭痛のピークがきたものの、21時ぐらいにはおさまって元気になったのでそれからまたオフィスに戻って作業してた。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。開発のお手伝いを始めて3ヶ月経つので私の気付き事項のレポートを書こうかと考えている。組織や開発の改善やよくないところは、外部から入ってきたときに一番気付く。だんだんとその組織や文化に慣れていって違和感を感じたかどうかがわからなくなっていく。そのため、11月から働いていて気付いたことをずっとメモし続けてそれが3ヶ月分たまったのでそのメモを総括してレポートにまとめようという話し。そのふりかえりみたいな話しをさらに部外者のはらさんとあーだこーだと話してた。雑談レベルなのでそういう話しをすることで書くときの思考整理の前準備にもなる。
課題管理システムやチケット駆動開発の実践についての話し 聞かなくてもわかる というコミュニケーションコストの話し コードの品質と業務形態の話し PR のルールやレビューと開発の生産性の話し オフィス内覧 オフィス引っ越し調査のために 神戸国際会館のレンタルオフィスの内覧 に申し込みしていたので行ってきた。必須条件は窓があって外がみえること。いま借りているレンタルオフィスもリフォームした後から入っているので新築みたいなもので施設や設備に関しては不満はない。参考までにいま借りているレンタルオフィスの料金はこんな感じ。
月額利用料: 35,000 共益費: 5,000 神戸国際会館というグレードの高いビルにあるレンタルオフィスは普通に文句の付け所がなくて素晴らしい。1人部屋は窓がないけど、いま借りているところより少しだけ広い。一方で料金は3倍ぐらいになる。
月額利用料: 110,000 共益費: 5,000 窓がないと引っ越す意味がないので窓がある部屋は2人部屋になって広さも余裕ができるものの料金も高い。ブラインドを上げたらガラス張りで22階だから見晴らしもよくて気持ちよさそう。
月額利用料: 195,000 共益費: 5,000 いまの財務とお仕事なら払えないような料金ではないけれど、こんな家賃を払っていると、お仕事辞めてしばらく遊ぶみたいな余裕がなくなってサラリーマンと変わらない生活に戻ってしまいそうで不安になる。今期は3ヶ月ほど働かずに遊んでいたけど、そうやってられたのは家賃の固定費が安かったというのもあったんだなとこの料金を聞いて考えたりしていた。幸いにも神戸三ノ宮はレンタルオフィスがいくつもあるのでまだまだ候補はある。おそらく一番グレードが高いのが神戸国際会館なのでこれから行くところは妥当な料金になってくるとは思う。</description><content>&lt;p>0時に寝て6時に起きた。起きたときは普通だったけど、午前中に働き始めてからまた頭痛がしてきた。内覧後は帰ってベッドで仮眠してた。夕方に頭痛のピークがきたものの、21時ぐらいにはおさまって元気になったのでそれからまたオフィスに戻って作業してた。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。開発のお手伝いを始めて3ヶ月経つので私の気付き事項のレポートを書こうかと考えている。組織や開発の改善やよくないところは、外部から入ってきたときに一番気付く。だんだんとその組織や文化に慣れていって違和感を感じたかどうかがわからなくなっていく。そのため、11月から働いていて気付いたことをずっとメモし続けてそれが3ヶ月分たまったのでそのメモを総括してレポートにまとめようという話し。そのふりかえりみたいな話しをさらに部外者のはらさんとあーだこーだと話してた。雑談レベルなのでそういう話しをすることで書くときの思考整理の前準備にもなる。&lt;/p>
&lt;ul>
&lt;li>課題管理システムやチケット駆動開発の実践についての話し&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2022/0107/#情報共有とコミュニケーションコスト">聞かなくてもわかる&lt;/a> というコミュニケーションコストの話し&lt;/li>
&lt;li>コードの品質と業務形態の話し&lt;/li>
&lt;li>PR のルールやレビューと開発の生産性の話し&lt;/li>
&lt;/ul>
&lt;h2 id="オフィス内覧">オフィス内覧&lt;/h2>
&lt;p>オフィス引っ越し調査のために &lt;a href="/diary/diary/posts/2022/0114/#オフィスの引っ越し">神戸国際会館のレンタルオフィスの内覧&lt;/a> に申し込みしていたので行ってきた。必須条件は窓があって外がみえること。いま借りているレンタルオフィスもリフォームした後から入っているので新築みたいなもので施設や設備に関しては不満はない。参考までにいま借りているレンタルオフィスの料金はこんな感じ。&lt;/p>
&lt;ul>
&lt;li>月額利用料: 35,000&lt;/li>
&lt;li>共益費: 5,000&lt;/li>
&lt;/ul>
&lt;p>神戸国際会館というグレードの高いビルにあるレンタルオフィスは普通に文句の付け所がなくて素晴らしい。1人部屋は窓がないけど、いま借りているところより少しだけ広い。一方で料金は3倍ぐらいになる。&lt;/p>
&lt;ul>
&lt;li>月額利用料: 110,000&lt;/li>
&lt;li>共益費: 5,000&lt;/li>
&lt;/ul>
&lt;p>窓がないと引っ越す意味がないので窓がある部屋は2人部屋になって広さも余裕ができるものの料金も高い。ブラインドを上げたらガラス張りで22階だから見晴らしもよくて気持ちよさそう。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0121_room.jpg"/>
&lt;/figure>
&lt;ul>
&lt;li>月額利用料: 195,000&lt;/li>
&lt;li>共益費: 5,000&lt;/li>
&lt;/ul>
&lt;p>いまの財務とお仕事なら払えないような料金ではないけれど、こんな家賃を払っていると、お仕事辞めてしばらく遊ぶみたいな余裕がなくなってサラリーマンと変わらない生活に戻ってしまいそうで不安になる。今期は3ヶ月ほど働かずに遊んでいたけど、そうやってられたのは家賃の固定費が安かったというのもあったんだなとこの料金を聞いて考えたりしていた。幸いにも神戸三ノ宮はレンタルオフィスがいくつもあるのでまだまだ候補はある。おそらく一番グレードが高いのが神戸国際会館なのでこれから行くところは妥当な料金になってくるとは思う。&lt;/p></content></item><item><title>spring boot の xml 変換の仕組み</title><link>/diary/posts/2022/0120/</link><pubDate>Thu, 20 Jan 2022 07:39:24 +0900</pubDate><guid>/diary/posts/2022/0120/</guid><description>0時に寝て吐き気がして3時に起きて、断続的に仮眠をとってみたけど、それでも気分悪くて5時から起きてた。昨日の晩ご飯食べて寝てから吐き気が出てきた。なにかの食べ合わせなのだろうか。コロッケとその後にチョコレート食べたのが悪かったのか。普通にオフィスへ行ってお仕事してたら直った。
spring boot の xml 変換 いまお手伝いしているお仕事で spring boot で SOAP の xml 通信しているサービスがある。任意の文字列を受け取って任意の文字列を返すような仕組みで設計されていて、xml の変換処理を jackson を使ってアプリケーションコードで書いていた。
これをやるならミドルウェアでやるべきだなと思って spring boot のドキュメントを調べてみた。Error Handling のように例外が発生したときの処理をフックする ResponseEntityExceptionHandler のようなミドルウェアに近い仕組みはあるが、通常のレスポンスに対して行う処理はなかった。代わりに HttpMessageConverters という、レスポンスを変換する仕組み自体は操作できないが、変換する変換器は置き換えたり拡張したりできるようになっている。レスポンスのデータフォーマットのカスタマイズをしたい場合は HttpMessageConverters で行うというのが spring boot 的なやり方にみえる。
さらに調べていると Write an XML REST Service に jackson-dataformat-xml がクラスパスにあれば jackson の ObjectMapper を使って xml に変換するよと書いてあって、試しにレスポンスのオブジェクトを返したら自動的に xml に変換されるという振る舞いを確認できた。つまり、アプリケーションコードで xml の変換処理を自前で実装しなくてもほぼ同じことを spring boot のデフォルトの仕組みでやってくれるというわけだ。jackson の ObjectMapper のカスタマイズがしたいときもいくつかやり方がある。例えば、 @Configuration をもつ Config オブジェクトで次のような bean を生成すれば任意の設定にカスタマイズした ObjectMapper が使われるようになる。
@Bean public Jackson2ObjectMapperBuilderCustomizer configureObjectMapper() { return builder -&amp;gt; { builder.</description><content>&lt;p>0時に寝て吐き気がして3時に起きて、断続的に仮眠をとってみたけど、それでも気分悪くて5時から起きてた。昨日の晩ご飯食べて寝てから吐き気が出てきた。なにかの食べ合わせなのだろうか。コロッケとその後にチョコレート食べたのが悪かったのか。普通にオフィスへ行ってお仕事してたら直った。&lt;/p>
&lt;h2 id="spring-boot-の-xml-変換">spring boot の xml 変換&lt;/h2>
&lt;p>いまお手伝いしているお仕事で spring boot で &lt;a href="https://en.wikipedia.org/wiki/SOAP">SOAP&lt;/a> の xml 通信しているサービスがある。任意の文字列を受け取って任意の文字列を返すような仕組みで設計されていて、xml の変換処理を jackson を使ってアプリケーションコードで書いていた。&lt;/p>
&lt;p>これをやるならミドルウェアでやるべきだなと思って spring boot のドキュメントを調べてみた。&lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#web.servlet.spring-mvc.error-handling">Error Handling&lt;/a> のように例外が発生したときの処理をフックする ResponseEntityExceptionHandler のようなミドルウェアに近い仕組みはあるが、通常のレスポンスに対して行う処理はなかった。代わりに &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#web.servlet.spring-mvc.message-converters">HttpMessageConverters&lt;/a> という、レスポンスを変換する仕組み自体は操作できないが、変換する変換器は置き換えたり拡張したりできるようになっている。レスポンスのデータフォーマットのカスタマイズをしたい場合は HttpMessageConverters で行うというのが spring boot 的なやり方にみえる。&lt;/p>
&lt;p>さらに調べていると &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto.spring-mvc.write-xml-rest-service">Write an XML REST Service&lt;/a> に &lt;code>jackson-dataformat-xml&lt;/code> がクラスパスにあれば jackson の ObjectMapper を使って xml に変換するよと書いてあって、試しにレスポンスのオブジェクトを返したら自動的に xml に変換されるという振る舞いを確認できた。つまり、アプリケーションコードで xml の変換処理を自前で実装しなくてもほぼ同じことを spring boot のデフォルトの仕組みでやってくれるというわけだ。jackson の ObjectMapper のカスタマイズがしたいときもいくつかやり方がある。例えば、 &lt;code>@Configuration&lt;/code> をもつ Config オブジェクトで次のような bean を生成すれば任意の設定にカスタマイズした ObjectMapper が使われるようになる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a6e22e">@Bean&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> Jackson2ObjectMapperBuilderCustomizer &lt;span style="color:#a6e22e">configureObjectMapper&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> builder &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
builder&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">serializationInclusion&lt;/span>&lt;span style="color:#f92672">(&lt;/span>JsonInclude&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Include&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">NON_EMPTY&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">};&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>最初のフォロワー</title><link>/diary/posts/2022/0119/</link><pubDate>Wed, 19 Jan 2022 08:14:43 +0900</pubDate><guid>/diary/posts/2022/0119/</guid><description>0時に寝て4時に起きた。1時間ほどだらだらして1時間ほどドラクエタクトして6時半にバッチの初動監視をしてた。
bizpy 勉強会 Python で機械学習をやってみる勉強会 を開催した。わたなべさんに講師を務めていただいた。スタッフが2人いると、1人は勉強会が円滑にまわるようにサポートに注力できる。1人だと、講師として説明するのに精一杯で質問を拾い上げたり、わかりにくい説明を補足したりするといったことがリソース制約上できない。今回は私がサポート役だったので随時、質問をしたりしていた。
今回の勉強会は質問がたくさん出た。いつもは1-2人が数個といった回数なのに、今回は5-6人から十数個の質問がでて、口頭でもいくつものやり取りが発生した。あとで振り返って考えると、おそらくこれは私が質問をぽんぽんしていたからだと考えられる。
TED に デレク・シヴァーズ 「社会運動はどうやって起こすか」 がある。最初のフォロワーが重要という話が出てくる。静かな勉強会で最初に質問するのは勇気がいる。質問して他の人の邪魔にならないか？講師から質問を嫌がられないか？質問が的外れだったら恥をかかないか？など、最初に質問する人が躊躇する理由はたくさんある。私が簡単な質問や的はずれな質問、講義をぽんぽん止めているのをみているうちに、そういうことをやっても大丈夫な勉強会であることが参加者へ自然と伝わる。その結果として参加者から多くの質問が出るような勉強会になったのではないかと考えられる。
質問が多くでる=コミュニケーションが活発だとコミュニティの価値も上がると思う。今後もサポート体制のようなものはうまく仕組み化して勉強会に取り入れていきたい。</description><content>&lt;p>0時に寝て4時に起きた。1時間ほどだらだらして1時間ほどドラクエタクトして6時半にバッチの初動監視をしてた。&lt;/p>
&lt;h2 id="bizpy-勉強会">bizpy 勉強会&lt;/h2>
&lt;p>&lt;a href="https://bizpy.connpass.com/event/234387/">Python で機械学習をやってみる勉強会&lt;/a> を開催した。わたなべさんに講師を務めていただいた。スタッフが2人いると、1人は勉強会が円滑にまわるようにサポートに注力できる。1人だと、講師として説明するのに精一杯で質問を拾い上げたり、わかりにくい説明を補足したりするといったことがリソース制約上できない。今回は私がサポート役だったので随時、質問をしたりしていた。&lt;/p>
&lt;p>今回の勉強会は質問がたくさん出た。いつもは1-2人が数個といった回数なのに、今回は5-6人から十数個の質問がでて、口頭でもいくつものやり取りが発生した。あとで振り返って考えると、おそらくこれは私が質問をぽんぽんしていたからだと考えられる。&lt;/p>
&lt;p>TED に &lt;a href="https://sites.google.com/site/tedjapaneseenglishnote/list/derek_sivers_how_to_start_a_movement">デレク・シヴァーズ 「社会運動はどうやって起こすか」&lt;/a> がある。最初のフォロワーが重要という話が出てくる。静かな勉強会で最初に質問するのは勇気がいる。質問して他の人の邪魔にならないか？講師から質問を嫌がられないか？質問が的外れだったら恥をかかないか？など、最初に質問する人が躊躇する理由はたくさんある。私が簡単な質問や的はずれな質問、講義をぽんぽん止めているのをみているうちに、そういうことをやっても大丈夫な勉強会であることが参加者へ自然と伝わる。その結果として参加者から多くの質問が出るような勉強会になったのではないかと考えられる。&lt;/p>
&lt;p>質問が多くでる=コミュニケーションが活発だとコミュニティの価値も上がると思う。今後もサポート体制のようなものはうまく仕組み化して勉強会に取り入れていきたい。&lt;/p></content></item><item><title>ブロックチェーン考察</title><link>/diary/posts/2022/0118/</link><pubDate>Tue, 18 Jan 2022 11:46:59 +0900</pubDate><guid>/diary/posts/2022/0118/</guid><description>1時に寝て6時半に起きた。昨日はほぼまる一日頭痛でしんどかったけど、寝たら直った。朝から集中してコードを書いてた。
ブロックチェーンは未来なのか 次の記事を読んだ。
ブロックチェーン：膨張する看板に偽りはないか - 誠実なプロセスの必要性 -
最近、私のタイムラインでも Web 3.0 というキーワードをみかけるようになってきて、どうやらこれはブロックチェーン技術をベースにした分散型のなにかを表しているらしい。間違っていたらごめんなさい。暗号資産や NFT といった投機的な目的でビジネスを展開したい人たちも多いようにみえて、真っ当にやっている人たちもいるのだろうけど、儲かればなんでもいいみたいな風潮にみえていて、私の中ではあまり関わりたくないキーワードになってきている。
記事でも書かれている通り、分散と言いながら巨大な台帳になることからインフラを管理できるコンピューティングリソースが大規模化し、運用上は個人がすべてのリソースを保持することは難しいことから、プラットフォーマーや大企業が分散台帳のリソースを管理するような在り方になっていくのではないかと推測する。結局のところ、インフラをすべて大企業が賄うのであれば、そもそも効率の悪いブロックチェーンのような技術を使わなくても既存の中央集権的なシステムで構築する方がはるかに効率的ではないか？という問いに対するアプリケーションの答えは海外送金だけしか私は認識していない。海外送金は中央集権的なシステムが存在してなく、非常にコストが高いため、ブロックチェーン技術で分散台帳を構築しても安価に済む。
いまのところ、グローバルなシステムをブロックチェーン技術をベースにした開発にすることで、各国で独立してシステム開発が進められるメリットがあるという話しでグローバルベンダーはブロックチェーン技術を使ったプラットフォームを開発しているようにはみえる。それはそれで理に適っているようにも聞こえる。一方で個人向けのキラーアプリやキラーコンテンツはまだ私からはみえない。NFT がそれになるのかな？と一瞬思ったけど、ちょっと調べてみただけでは、現時点ではそうなりそうに思えない。研究開発や新しい技術の試行錯誤としてブロックチェーンはまだまだ未知の領域があるのだろうけど、大して便利でも効率がよいわけでもないものを未来であるかのように喧伝しているのは忌避を感じるのでもうしばらくは様子を見守りたい。
会員制バー予約 先日チラシでみかけて 会員制バー に申し込みしてみた。おそらく招待会員というサブスクリプションに入ったので試しに行ってみることにした。明日 bizpy の勉強会があるのでそのふりかえりを兼ねて、土曜日に講師のわたなべさんと一緒に行くのを予約した。2018年に神戸に引っ越してきて近くに知り合いがいなくて、その後、地域の勉強会へ行ったり、会社を辞めたりしながら、コロナがあって、なんやらかんやらで近くに一緒に飲みに行ける知り合いができた。初めて行くお店はわくわくする。楽しみだ。</description><content>&lt;p>1時に寝て6時半に起きた。昨日はほぼまる一日頭痛でしんどかったけど、寝たら直った。朝から集中してコードを書いてた。&lt;/p>
&lt;h2 id="ブロックチェーンは未来なのか">ブロックチェーンは未来なのか&lt;/h2>
&lt;p>次の記事を読んだ。&lt;/p>
&lt;p>&lt;a href="https://shanematsuo.medium.com/%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3-%E8%86%A8%E5%BC%B5%E3%81%99%E3%82%8B%E7%9C%8B%E6%9D%BF%E3%81%AB%E5%81%BD%E3%82%8A%E3%81%AF%E3%81%AA%E3%81%84%E3%81%8B-%E8%AA%A0%E5%AE%9F%E3%81%AA%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E3%81%AE%E5%BF%85%E8%A6%81%E6%80%A7-fe9f5d38eb37">ブロックチェーン：膨張する看板に偽りはないか - 誠実なプロセスの必要性 -&lt;/a>&lt;/p>
&lt;p>最近、私のタイムラインでも &lt;em>Web 3.0&lt;/em> というキーワードをみかけるようになってきて、どうやらこれはブロックチェーン技術をベースにした分散型のなにかを表しているらしい。間違っていたらごめんなさい。暗号資産や NFT といった投機的な目的でビジネスを展開したい人たちも多いようにみえて、真っ当にやっている人たちもいるのだろうけど、儲かればなんでもいいみたいな風潮にみえていて、私の中ではあまり関わりたくないキーワードになってきている。&lt;/p>
&lt;p>記事でも書かれている通り、分散と言いながら巨大な台帳になることからインフラを管理できるコンピューティングリソースが大規模化し、運用上は個人がすべてのリソースを保持することは難しいことから、プラットフォーマーや大企業が分散台帳のリソースを管理するような在り方になっていくのではないかと推測する。結局のところ、インフラをすべて大企業が賄うのであれば、そもそも効率の悪いブロックチェーンのような技術を使わなくても既存の中央集権的なシステムで構築する方がはるかに効率的ではないか？という問いに対するアプリケーションの答えは海外送金だけしか私は認識していない。海外送金は中央集権的なシステムが存在してなく、非常にコストが高いため、ブロックチェーン技術で分散台帳を構築しても安価に済む。&lt;/p>
&lt;p>いまのところ、グローバルなシステムをブロックチェーン技術をベースにした開発にすることで、各国で独立してシステム開発が進められるメリットがあるという話しでグローバルベンダーはブロックチェーン技術を使ったプラットフォームを開発しているようにはみえる。それはそれで理に適っているようにも聞こえる。一方で個人向けのキラーアプリやキラーコンテンツはまだ私からはみえない。NFT がそれになるのかな？と一瞬思ったけど、ちょっと調べてみただけでは、現時点ではそうなりそうに思えない。研究開発や新しい技術の試行錯誤としてブロックチェーンはまだまだ未知の領域があるのだろうけど、大して便利でも効率がよいわけでもないものを未来であるかのように喧伝しているのは忌避を感じるのでもうしばらくは様子を見守りたい。&lt;/p>
&lt;h2 id="会員制バー予約">会員制バー予約&lt;/h2>
&lt;p>先日チラシでみかけて &lt;a href="/diary/diary/posts/2022/0113/#会員制バー">会員制バー&lt;/a> に申し込みしてみた。おそらく招待会員というサブスクリプションに入ったので試しに行ってみることにした。明日 bizpy の勉強会があるのでそのふりかえりを兼ねて、土曜日に講師のわたなべさんと一緒に行くのを予約した。2018年に神戸に引っ越してきて近くに知り合いがいなくて、その後、地域の勉強会へ行ったり、会社を辞めたりしながら、コロナがあって、なんやらかんやらで近くに一緒に飲みに行ける知り合いができた。初めて行くお店はわくわくする。楽しみだ。&lt;/p></content></item><item><title>国民健康保険の保険料</title><link>/diary/posts/2022/0117/</link><pubDate>Mon, 17 Jan 2022 09:27:36 +0900</pubDate><guid>/diary/posts/2022/0117/</guid><description>0時に寝て4時に起きて2度寝して7時に起きた。こんなこと滅多にないんやけど、朝からずっと頭痛があってしんどかった。早めにお仕事を終えて帰ったら少しよくなってそのまま寝てた。
国民健康保険の保険料 以前にも書いた明石市長 の次のツィートをみかけた。
国民健康保険の保険料。
均等割の金額も、今は自治体ごとの判断。
（明石市48830円、神戸市60600円、西宮市53400円など）
県からは、増額（56936円への引き上げ）を求められているが、
明石市長としては、コロナ禍での増額には反対だ。
次年度も増額しないことを、今ここで約束する。#国民健康保険 pic.twitter.com/1SQYbQeXLW
&amp;mdash; 明石市長　泉 房穂（いずみ ふさほ） (@izumi_akashi) January 17, 2022 国民健康保険って自治体ごとに保険料が違うんだとか思って、健康保険の仕組みを調べ直した。健康保険制度は大きく分けて2通りある。会社に勤めていない人のための国民健康保険と、会社に勤めている人のための会社の健康保険。うちの会社の健康保険は 全国健康保険協会 (協会けんぽ) に加入している。中小企業のデフォルトが協会けんぽなのかな？健康保険の運営者を保険者と呼び、どんな会社でも加入できる保険者として協会けんぽがある。有名な保険者として関東ITソフトウェア健康保険組合があるけど、関東ITソフトウェア健康保険組合の加入基準 を満たさないと加入できない。例えば「被保険者数が20名以上であること」という条件があるので社員数が少ない企業は加入できない。一般論として、健康保険組合の方が協会けんぽよりも保険料が安いという利点があるらしい。そうでなければ、健康保険組合を作ったり、そこに加入する利点も小さくなるし。
会社を辞めたり、定年退職したりすると75歳まで国民健康保険に入る必要があるみたい。住むところにこだわりがなければ、保険料の安い自治体に住んでもよいのかもしれない。</description><content>&lt;p>0時に寝て4時に起きて2度寝して7時に起きた。こんなこと滅多にないんやけど、朝からずっと頭痛があってしんどかった。早めにお仕事を終えて帰ったら少しよくなってそのまま寝てた。&lt;/p>
&lt;h2 id="国民健康保険の保険料">国民健康保険の保険料&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0114/#明石市の調査">以前にも書いた明石市長&lt;/a> の次のツィートをみかけた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">国民健康保険の保険料。&lt;br>均等割の金額も、今は自治体ごとの判断。&lt;br>（明石市48830円、神戸市60600円、西宮市53400円など）&lt;br>県からは、増額（56936円への引き上げ）を求められているが、&lt;br>明石市長としては、コロナ禍での増額には反対だ。&lt;br>次年度も増額しないことを、今ここで約束する。&lt;a href="https://twitter.com/hashtag/%E5%9B%BD%E6%B0%91%E5%81%A5%E5%BA%B7%E4%BF%9D%E9%99%BA?src=hash&amp;amp;ref_src=twsrc%5Etfw">#国民健康保険&lt;/a> &lt;a href="https://t.co/1SQYbQeXLW">pic.twitter.com/1SQYbQeXLW&lt;/a>&lt;/p>&amp;mdash; 明石市長　泉 房穂（いずみ ふさほ） (@izumi_akashi) &lt;a href="https://twitter.com/izumi_akashi/status/1482904883506212864?ref_src=twsrc%5Etfw">January 17, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>国民健康保険って自治体ごとに保険料が違うんだとか思って、健康保険の仕組みを調べ直した。健康保険制度は大きく分けて2通りある。会社に勤めていない人のための国民健康保険と、会社に勤めている人のための会社の健康保険。うちの会社の健康保険は &lt;a href="https://www.kyoukaikenpo.or.jp/">全国健康保険協会 (協会けんぽ)&lt;/a> に加入している。中小企業のデフォルトが協会けんぽなのかな？健康保険の運営者を保険者と呼び、どんな会社でも加入できる保険者として協会けんぽがある。有名な保険者として関東ITソフトウェア健康保険組合があるけど、&lt;a href="https://www.its-kenpo.or.jp/kanyu/kijun.html">関東ITソフトウェア健康保険組合の加入基準&lt;/a> を満たさないと加入できない。例えば「被保険者数が20名以上であること」という条件があるので社員数が少ない企業は加入できない。一般論として、健康保険組合の方が協会けんぽよりも保険料が安いという利点があるらしい。そうでなければ、健康保険組合を作ったり、そこに加入する利点も小さくなるし。&lt;/p>
&lt;p>会社を辞めたり、定年退職したりすると75歳まで国民健康保険に入る必要があるみたい。住むところにこだわりがなければ、保険料の安い自治体に住んでもよいのかもしれない。&lt;/p></content></item><item><title>JUnit5 のテスト拡張</title><link>/diary/posts/2022/0116/</link><pubDate>Sun, 16 Jan 2022 10:08:01 +0900</pubDate><guid>/diary/posts/2022/0116/</guid><description>1時に寝て5時に起きて2度寝して9時に起きた。前日呑んでたのであまり眠れなくて体調よくない。
JUnit5 的なロガーのテスト お仕事でログ管理の機能開発をしている。カスタムロガーを使って出力するメッセージを加工している。設計が固まってきて機能も作り込むようになってきたので出力内容が意図した構造化ログになっているかをテストしたい。JUnit5 の機能と log4j の機能を組み合わせてカスタムロガーのテストの仕組みを作ってみた。
まずログ出力した内容を取得するオブジェクトを特定するためのアノテーションを定義する。
@Documented @Target(ElementType.FIELD) @Retention(RetentionPolicy.RUNTIME) public @interface LoggerTestWriter { } JUnit5 の Declarative Extension Registration の仕組みを使って、テストケース非依存な setup/teadown のメソッドを定義する。ExtensionContext から拡張するテストケースのインスタンスを取得できる。テストケースインスタンスに定義されている @LoggerTestWriter アノテーションがついたオブジェクトを lgo4j の Appender としてインジェクションするようなコードを setup/teardown (beforeEach/afterEach メソッド) で定義する。Appender のインジェクション周りは Log4j 2でログ出力をテストするサンプルソース の記事を参考にした。
public class SetupLogAppender implements BeforeEachCallback, AfterEachCallback { private static String APPENDER_NAME = &amp;#34;logger-test-appender&amp;#34;; private Optional&amp;lt;Writer&amp;gt; getWriter(ExtensionContext context) throws IllegalAccessException { var testInstance = context.getRequiredTestInstance(); for (var field : testInstance.getClass().getDeclaredFields()) { if (field.</description><content>&lt;p>1時に寝て5時に起きて2度寝して9時に起きた。前日呑んでたのであまり眠れなくて体調よくない。&lt;/p>
&lt;h2 id="junit5-的なロガーのテスト">JUnit5 的なロガーのテスト&lt;/h2>
&lt;p>お仕事でログ管理の機能開発をしている。カスタムロガーを使って出力するメッセージを加工している。設計が固まってきて機能も作り込むようになってきたので出力内容が意図した構造化ログになっているかをテストしたい。JUnit5 の機能と log4j の機能を組み合わせてカスタムロガーのテストの仕組みを作ってみた。&lt;/p>
&lt;p>まずログ出力した内容を取得するオブジェクトを特定するためのアノテーションを定義する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a6e22e">@Documented&lt;/span>
&lt;span style="color:#a6e22e">@Target&lt;/span>&lt;span style="color:#f92672">(&lt;/span>ElementType&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">FIELD&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#a6e22e">@Retention&lt;/span>&lt;span style="color:#f92672">(&lt;/span>RetentionPolicy&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">RUNTIME&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">@interface&lt;/span> LoggerTestWriter &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>JUnit5 の &lt;a href="https://junit.org/junit5/docs/current/user-guide/#extensions-registration-declarative">Declarative Extension Registration&lt;/a> の仕組みを使って、テストケース非依存な setup/teadown のメソッドを定義する。&lt;a href="https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/extension/ExtensionContext.html">ExtensionContext&lt;/a> から拡張するテストケースのインスタンスを取得できる。テストケースインスタンスに定義されている &lt;code>@LoggerTestWriter&lt;/code> アノテーションがついたオブジェクトを lgo4j の Appender としてインジェクションするようなコードを setup/teardown (beforeEach/afterEach メソッド) で定義する。Appender のインジェクション周りは &lt;a href="https://qiita.com/kazurof/items/abbd42f11bfc125f3190">Log4j 2でログ出力をテストするサンプルソース&lt;/a> の記事を参考にした。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SetupLogAppender&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> BeforeEachCallback&lt;span style="color:#f92672">,&lt;/span> AfterEachCallback &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> String APPENDER_NAME &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;logger-test-appender&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> Optional&lt;span style="color:#f92672">&amp;lt;&lt;/span>Writer&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">getWriter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>ExtensionContext context&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">throws&lt;/span> IllegalAccessException &lt;span style="color:#f92672">{&lt;/span>
var testInstance &lt;span style="color:#f92672">=&lt;/span> context&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getRequiredTestInstance&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>var field &lt;span style="color:#f92672">:&lt;/span> testInstance&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">getDeclaredFields&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>field&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">isAnnotationPresent&lt;/span>&lt;span style="color:#f92672">(&lt;/span>LoggerTestWriter&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> Optional&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">of&lt;/span>&lt;span style="color:#f92672">((&lt;/span>Writer&lt;span style="color:#f92672">)&lt;/span> field&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>testInstance&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> Optional&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">empty&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">beforeEach&lt;/span>&lt;span style="color:#f92672">(&lt;/span>ExtensionContext context&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">throws&lt;/span> Exception &lt;span style="color:#f92672">{&lt;/span>
var writer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getWriter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>context&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">orElseThrow&lt;/span>&lt;span style="color:#f92672">(()&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;span style="color:#66d9ef">new&lt;/span> IllegalStateException&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;@LoggerTestWriter のアノテーションをもつ Writer を定義してください&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
addAppender&lt;span style="color:#f92672">(&lt;/span>writer&lt;span style="color:#f92672">,&lt;/span> APPENDER_NAME&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">afterEach&lt;/span>&lt;span style="color:#f92672">(&lt;/span>ExtensionContext context&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">throws&lt;/span> Exception &lt;span style="color:#f92672">{&lt;/span>
var writer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getWriter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>context&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">orElseThrow&lt;/span>&lt;span style="color:#f92672">(&lt;/span>IllegalStateException&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
removeAppender&lt;span style="color:#f92672">(&lt;/span>APPENDER_NAME&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>writer &lt;span style="color:#66d9ef">instanceof&lt;/span> StringWriter&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
var stringWriter &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>StringWriter&lt;span style="color:#f92672">)&lt;/span> writer&lt;span style="color:#f92672">;&lt;/span>
stringWriter&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getBuffer&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">delete&lt;/span>&lt;span style="color:#f92672">(&lt;/span>0&lt;span style="color:#f92672">,&lt;/span> stringWriter&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getBuffer&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>実際にテストを書くテストクラスは次のようになる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a6e22e">@ExtendWith&lt;/span>&lt;span style="color:#f92672">(&lt;/span>SetupLogAppender&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyLoggerTest&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> MyLogger logger &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> MyLogger&lt;span style="color:#f92672">(&lt;/span>MyLoggerTest&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#a6e22e">@LoggerTestWriter&lt;/span>
StringWriter writer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> StringWriter&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testDebugMap&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
logger&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">debug&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;my-message&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
assertEquals&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;my-message&amp;#34;&lt;/span> writer&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">toString&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>@ExtendWith&lt;/code> で指定した &lt;code>SetupLogAppender&lt;/code> クラスの beforeEach や afterEach がそれぞれのテストメソッドごとに呼ばれて、Appender のインジェクションが &lt;code>@LoggerTestWriter&lt;/code> のアノテーションをもつ writer を使って行われる。この writer にはログ出力した文字列が記録されるようになる。これで、テストメソッドで logger に対して出力したメッセージを writer から取得できるので意図したメッセージが出力されていることをテストできる。カスタムロガーのテストケースごとに再利用可能な拡張をきれいに実装できた。&lt;/p></content></item><item><title>ワーケーション延期</title><link>/diary/posts/2022/0115/</link><pubDate>Sat, 15 Jan 2022 14:32:53 +0900</pubDate><guid>/diary/posts/2022/0115/</guid><description>1時に寝て8時に起きた。
ストレッチ 今週も開発に集中していてあまりストレッチができなかった。今日の開脚幅は開始前165cmで、ストレッチ後166.5cmだった。先週と同じぐらい、もしくはちょっとよくなったぐらい。先週から引き続き、ふくらはぎとふとももの後ろが張っている。ここ最近は開発に集中していて1日あたり10-12時間ぐらい椅子に座っているので疲労しているのだと推測する。毎週ストレッチを受けていると疲労改善になってよい。
ワーケーション延期 これまで 準備を進めてきたワーケーション が2週間後になった。もともとこの企画はオミクロン株が発見される前だったので1月末に予定していた。年末年始を挟んでオミクロン株の感染流行を今週みてきて延期することに決定した。兵庫県 新型コロナウイルスの検査・陽性者の状況 によると、直近の陽性者数は次のように推移している。2週間後は5,000人ぐらいの陽性者数になるのではないか。諸外国の推移をみていると兵庫県のピークの陽性者数は1日1万人ぐらいまで増える可能性がある。
1/10: 167 1/11: 113 1/12: 511 1/13: 903 1/14: 929 1/15: 1191 残念だけど、次回の目処は5-6月ぐらいに3回目のワクチン接種を終えてからになるだろう。
呑み 21時から勉強会に参加して23時過ぎに終わって晩ご飯食べてなかったので、帰りに仲のよい焼き鳥屋さんのお店に寄って晩ご飯を食べた。26時までやっているので24時頃に言っても普通に食べものを出してくれる。1時間ほど飲み食いして法人決算や消費税、共済のこととかを話してた。マスターも個人事業主から法人成りしたようで、話してみたら私と同じで創業2年だった。業界は違っても行政手続きは共通点も多いだろうから情報共有できそう。</description><content>&lt;p>1時に寝て8時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週も開発に集中していてあまりストレッチができなかった。今日の開脚幅は開始前165cmで、ストレッチ後166.5cmだった。先週と同じぐらい、もしくはちょっとよくなったぐらい。先週から引き続き、ふくらはぎとふとももの後ろが張っている。ここ最近は開発に集中していて1日あたり10-12時間ぐらい椅子に座っているので疲労しているのだと推測する。毎週ストレッチを受けていると疲労改善になってよい。&lt;/p>
&lt;h2 id="ワーケーション延期">ワーケーション延期&lt;/h2>
&lt;p>これまで &lt;a href="/diary/diary/posts/2021/1225/#ワーケーション準備">準備を進めてきたワーケーション&lt;/a> が2週間後になった。もともとこの企画はオミクロン株が発見される前だったので1月末に予定していた。年末年始を挟んでオミクロン株の感染流行を今週みてきて延期することに決定した。&lt;a href="https://web.pref.hyogo.lg.jp/kf16/coronavirus_data.html">兵庫県 新型コロナウイルスの検査・陽性者の状況&lt;/a> によると、直近の陽性者数は次のように推移している。2週間後は5,000人ぐらいの陽性者数になるのではないか。諸外国の推移をみていると兵庫県のピークの陽性者数は1日1万人ぐらいまで増える可能性がある。&lt;/p>
&lt;ul>
&lt;li>1/10: 167&lt;/li>
&lt;li>1/11: 113&lt;/li>
&lt;li>1/12: 511&lt;/li>
&lt;li>1/13: 903&lt;/li>
&lt;li>1/14: 929&lt;/li>
&lt;li>1/15: 1191&lt;/li>
&lt;/ul>
&lt;p>残念だけど、次回の目処は5-6月ぐらいに3回目のワクチン接種を終えてからになるだろう。&lt;/p>
&lt;h2 id="呑み">呑み&lt;/h2>
&lt;p>21時から勉強会に参加して23時過ぎに終わって晩ご飯食べてなかったので、帰りに仲のよい焼き鳥屋さんのお店に寄って晩ご飯を食べた。26時までやっているので24時頃に言っても普通に食べものを出してくれる。1時間ほど飲み食いして法人決算や消費税、共済のこととかを話してた。マスターも個人事業主から法人成りしたようで、話してみたら私と同じで創業2年だった。業界は違っても行政手続きは共通点も多いだろうから情報共有できそう。&lt;/p></content></item><item><title>引越考察</title><link>/diary/posts/2022/0114/</link><pubDate>Fri, 14 Jan 2022 07:15:28 +0900</pubDate><guid>/diary/posts/2022/0114/</guid><description>0時半に寝て5時半に起きた。昨日からワールドトリガーのエンディング曲で 雲外憧憬 を聞いている。歌詞がワールドトリガーの世界観ともあっているし、タイトルの雲外憧憬という言葉に驚いた。四字熟語のように読めるけど、たぶん違う？こんな言葉よく思いつくなと感心してしまった。apple music の英語表記だと Aspiration Beyond The Clouds と訳されている。
雲外: 空のはるか遠いところ 憧憬: あこがれること 明石市の調査 1ヶ月ほど前から 泉房穂明石市長 が twitter を始めた。私のタイムラインでもフォロワーの誰かがいいねしたり、リツィートしたりしてちょくちょくみかける。泉氏の暴言などがニュースで取り上げられたりするので地方都市の市長にしては知名度が高い方だろう。神戸市の隣は明石市なのでご近所の関心はある。明石市は日本の標準時子午線があって、学生の頃に 天文科学館 にも行ったことがある。いまも成年後見人の弁護士さんの事務所は明石市にあるし、運転免許センターも明石市にあるので年に数回ぐらい行く機会もある。ツィートを眺めていると58歳の市長が初めてやっているにしてはうまく sns を使いこなしていて、始めて1ヶ月ほどしか経っていないのに8万6千人ものフォロワーがいる。ブレーンが優秀なのか、本人がやっているのかはわからないけど、すごいことだと思う。
ツィートは当然、明石市のアピールが主なのでそれを眺めているうちに明石市よいところだなと好感度があがってきた。高齢者向けのサービスを廃止して育児や教育といった子ども向けのサービスを重視していて、それが子育て世帯にうけて、全国でも有数の人口増の中核都市となっている。当然、子育てに関係ない高齢者からは不満の声もあるみたい。私もその方針は支持したいと考えて、年寄りよりも子どもの教育に行政サービスのリソースを集中すればよいと思う。
いま神戸市に住んでいるのは大阪に通勤するためだった。コロナ禍により、フルリモートワークの世の中に移行したので明石市へ引っ越してもよいかもしれないと考え始めた。明石海峡大橋があるところなので実家の淡路島へ帰るのも少し近くなる。軽く検索していくつかみた雰囲気だと、賃貸マンションの家賃も神戸市より割安感がある。比較サイトによると住民税も神戸市より年間2万円安い。ただシェアオフィスの数、起業文化やベンチャー支援みたいなところは神戸市には相当に及ばない。そこは政令指定都市としての面目躍如といったところか。オフィスさえよい場所があったら住居もオフィスも明石市へ引っ越ししてもよいかもしれない。ひとまずアンテナを張っておく。
オフィスの引っ越し 明石市の話とは別に来期のどこかでオフィスを引っ越ししようかとも考えている。いまのオフィスも大きな不満はないので急いではいない。前に Joel on Software を読んだ ときに窓のないオフィスのストレスについて考えるようになった。気付いたら気付けなかった頃には戻れない。強くはないけど、ストレスの要因はなるべく排除したい。窓以外の不満でいうと働いているうちに備品も増えて部屋が手狭になってきた。引っ越し先候補の1つとして リージャス神戸国際会館ビジネスセンター がある。問い合わせしたら来週に内覧をさせてくれるらしい。交通アクセスやビルのグレードが高いので賃料もかなり高いだろうけど、他のシェアオフィスとの比較も含めて参考のために内覧してくる。</description><content>&lt;p>0時半に寝て5時半に起きた。昨日からワールドトリガーのエンディング曲で &lt;a href="https://www.youtube.com/watch?v=p0RCsmFAXXY">雲外憧憬&lt;/a> を聞いている。歌詞がワールドトリガーの世界観ともあっているし、タイトルの雲外憧憬という言葉に驚いた。四字熟語のように読めるけど、たぶん違う？こんな言葉よく思いつくなと感心してしまった。apple music の英語表記だと Aspiration Beyond The Clouds と訳されている。&lt;/p>
&lt;ul>
&lt;li>雲外: 空のはるか遠いところ&lt;/li>
&lt;li>憧憬: あこがれること&lt;/li>
&lt;/ul>
&lt;h2 id="明石市の調査">明石市の調査&lt;/h2>
&lt;p>1ヶ月ほど前から &lt;a href="https://twitter.com/izumi_akashi">泉房穂明石市長&lt;/a> が twitter を始めた。私のタイムラインでもフォロワーの誰かがいいねしたり、リツィートしたりしてちょくちょくみかける。泉氏の暴言などがニュースで取り上げられたりするので地方都市の市長にしては知名度が高い方だろう。神戸市の隣は明石市なのでご近所の関心はある。明石市は日本の標準時子午線があって、学生の頃に &lt;a href="https://www.am12.jp/">天文科学館&lt;/a> にも行ったことがある。いまも成年後見人の弁護士さんの事務所は明石市にあるし、運転免許センターも明石市にあるので年に数回ぐらい行く機会もある。ツィートを眺めていると58歳の市長が初めてやっているにしてはうまく sns を使いこなしていて、始めて1ヶ月ほどしか経っていないのに8万6千人ものフォロワーがいる。ブレーンが優秀なのか、本人がやっているのかはわからないけど、すごいことだと思う。&lt;/p>
&lt;p>ツィートは当然、明石市のアピールが主なのでそれを眺めているうちに明石市よいところだなと好感度があがってきた。高齢者向けのサービスを廃止して育児や教育といった子ども向けのサービスを重視していて、それが子育て世帯にうけて、全国でも有数の人口増の中核都市となっている。当然、子育てに関係ない高齢者からは不満の声もあるみたい。私もその方針は支持したいと考えて、年寄りよりも子どもの教育に行政サービスのリソースを集中すればよいと思う。&lt;/p>
&lt;p>いま神戸市に住んでいるのは大阪に通勤するためだった。コロナ禍により、フルリモートワークの世の中に移行したので明石市へ引っ越してもよいかもしれないと考え始めた。明石海峡大橋があるところなので実家の淡路島へ帰るのも少し近くなる。軽く検索していくつかみた雰囲気だと、賃貸マンションの家賃も神戸市より割安感がある。比較サイトによると住民税も神戸市より年間2万円安い。ただシェアオフィスの数、起業文化やベンチャー支援みたいなところは神戸市には相当に及ばない。そこは政令指定都市としての面目躍如といったところか。オフィスさえよい場所があったら住居もオフィスも明石市へ引っ越ししてもよいかもしれない。ひとまずアンテナを張っておく。&lt;/p>
&lt;h2 id="オフィスの引っ越し">オフィスの引っ越し&lt;/h2>
&lt;p>明石市の話とは別に来期のどこかでオフィスを引っ越ししようかとも考えている。いまのオフィスも大きな不満はないので急いではいない。&lt;a href="/diary/diary/posts/2021/0930/#joel-on-software">前に Joel on Software を読んだ&lt;/a> ときに窓のないオフィスのストレスについて考えるようになった。気付いたら気付けなかった頃には戻れない。強くはないけど、ストレスの要因はなるべく排除したい。窓以外の不満でいうと働いているうちに備品も増えて部屋が手狭になってきた。引っ越し先候補の1つとして &lt;a href="https://www.regus-office.jp/area-serch/hyogo-kobe-area/kokusai-kaikan/">リージャス神戸国際会館ビジネスセンター&lt;/a> がある。問い合わせしたら来週に内覧をさせてくれるらしい。交通アクセスやビルのグレードが高いので賃料もかなり高いだろうけど、他のシェアオフィスとの比較も含めて参考のために内覧してくる。&lt;/p></content></item><item><title>師範代としての振る舞い</title><link>/diary/posts/2022/0113/</link><pubDate>Thu, 13 Jan 2022 13:29:38 +0900</pubDate><guid>/diary/posts/2022/0113/</guid><description>0時半に寝て6時半に起きた。
課題管理システムの使い方指南 いまお手伝いしているお仕事はスクラム開発をしている。課題管理システムに backlog を使っている。アリエルを退職後、この10年、私より課題管理システムを使いこなす開発者をみたことがない。0-9段階で言うと、師範代として私のレベルが8だとすると、他のメンバーは0から2ぐらいのレベルしかない。このぐらいの差がある。0というのはほとんど使っていないという意味。情報共有とは、メンバー全員がいつでもどこでも同じ情報を取得できる仕組みを確立した上で、情報の提供側ではなく、その情報を必要とする受け手が常に最新の情報を取得し続ける運用ができて初めて成り立つ。情報共有を成功させるには受け手の意識の問題が大きい。まずメンバー全員がやっていない時点で情報共有の価値が大きく毀損する上に、受け手が自律的に検索して最新の情報を取得するようにならなけば実務において生産性を向上させることにもつながらない。
役に立つ情報がないから検索しない、検索しないから役に立つ情報を書かないは表裏一体だ。まず役に立つ情報を溜め、受け手が検索して情報収集するようになり、検索の精度をあげるためにカテゴリやタグでラベリングし、業務に活かすために最新情報を更新するようになる。これをチーム全員でやるようになるのは一朝一夕ではできない。
そのため、私は課題管理システムの運用に関して特異な開発者である (言うてもアリエルなら普通) という前置きをした上で、チームの開発者も非開発者も課題管理システムをうまく使えていない。私が課題管理システムをどう使っているのかをみて、開発者が真似して同じように使い始める。そして、非開発者向けにはどう使えばよいかというプラクティスを機をみて提案したり啓蒙したりしている。これは半年から1年かかる作業だと見積もっている。というのは、私が半年ぐらい働いて実践的な課題管理システムの使い方をみせないと多くの人は学べない。半年ぐらい経って、普段私がやっている価値はどういうものかを実際の実務で理解した後、模倣者がやり始めて慣れてくるのに半年ぐらいはかかる。お手本をみせるのに半年、模倣するのに半年で1年かかる。いろんなチームを指導してきたのでチームがどのような学習曲線を辿るかは概ね推測がつく。これをコンテンツにしてビジネスしようといまは考えているので、こういう実践的な機会にコンテンツとしてのノウハウも溜めていこうと考えている。
みかん 実家からみかんが送られてきた。実家で作っているみかんなのかな？なんか微妙に腐り始めようとしている雰囲気もある。お正月に帰ったときから実家に置いてあったやつだろうと思う。段ボール箱の空きスペースを埋めるために入ってた 「りんちょこ」 というお菓子を初めてみた。冬季限定らしい。軽く食べてみると思いの外おいしい。えびせんべいをチョコレートでコーティングしていてチョコフレークの食感に近い。チョコフレークが好きな人にはうけると思う。お土産にもよさそう。
会員制バー オフィスの郵便受けに KOBE SALON S という会員制バーのチラシが入っていた。新規会員を募集しているらしい。個人だったら全く興味はないけど、経営していると接待する機会がたまにある。前に顧問さんに経営コンサルティングを受けたときに交際費が少な過ぎるという指摘を受けた。交際費は5年後10年後のお仕事をとるための先行投資もしくは調査費用のようなものだという。そこで今期は交際費の予算に30万円を見積もっているが、現時点で46,971円しか使っていない。4月までにあと2-3件は飲みに行くあてはあるけど、このままいくと30万円は消化できない。コロナ禍というのもあるけど、何もしないと私は交際費を使わないので積極的に使っていく仕組みを作らないといけない。その一環として会員制バーは接待にいいかもしれない。すぐ退会するかもしれないけど、チラシをみた縁で入会してみる。</description><content>&lt;p>0時半に寝て6時半に起きた。&lt;/p>
&lt;h2 id="課題管理システムの使い方指南">課題管理システムの使い方指南&lt;/h2>
&lt;p>いまお手伝いしているお仕事はスクラム開発をしている。課題管理システムに &lt;a href="https://backlog.com/ja/">backlog&lt;/a> を使っている。アリエルを退職後、この10年、私より課題管理システムを使いこなす開発者をみたことがない。0-9段階で言うと、師範代として私のレベルが8だとすると、他のメンバーは0から2ぐらいのレベルしかない。このぐらいの差がある。0というのはほとんど使っていないという意味。情報共有とは、メンバー全員がいつでもどこでも同じ情報を取得できる仕組みを確立した上で、情報の提供側ではなく、その情報を必要とする受け手が常に最新の情報を取得し続ける運用ができて初めて成り立つ。情報共有を成功させるには受け手の意識の問題が大きい。まずメンバー全員がやっていない時点で情報共有の価値が大きく毀損する上に、受け手が自律的に検索して最新の情報を取得するようにならなけば実務において生産性を向上させることにもつながらない。&lt;/p>
&lt;p>役に立つ情報がないから検索しない、検索しないから役に立つ情報を書かないは表裏一体だ。まず役に立つ情報を溜め、受け手が検索して情報収集するようになり、検索の精度をあげるためにカテゴリやタグでラベリングし、業務に活かすために最新情報を更新するようになる。これをチーム全員でやるようになるのは一朝一夕ではできない。&lt;/p>
&lt;p>そのため、私は課題管理システムの運用に関して特異な開発者である (言うてもアリエルなら普通) という前置きをした上で、チームの開発者も非開発者も課題管理システムをうまく使えていない。私が課題管理システムをどう使っているのかをみて、開発者が真似して同じように使い始める。そして、非開発者向けにはどう使えばよいかというプラクティスを機をみて提案したり啓蒙したりしている。これは半年から1年かかる作業だと見積もっている。というのは、私が半年ぐらい働いて実践的な課題管理システムの使い方をみせないと多くの人は学べない。半年ぐらい経って、普段私がやっている価値はどういうものかを実際の実務で理解した後、模倣者がやり始めて慣れてくるのに半年ぐらいはかかる。お手本をみせるのに半年、模倣するのに半年で1年かかる。いろんなチームを指導してきたのでチームがどのような学習曲線を辿るかは概ね推測がつく。これをコンテンツにしてビジネスしようといまは考えているので、こういう実践的な機会にコンテンツとしてのノウハウも溜めていこうと考えている。&lt;/p>
&lt;h2 id="みかん">みかん&lt;/h2>
&lt;p>実家からみかんが送られてきた。実家で作っているみかんなのかな？なんか微妙に腐り始めようとしている雰囲気もある。お正月に帰ったときから実家に置いてあったやつだろうと思う。段ボール箱の空きスペースを埋めるために入ってた &lt;a href="http://www.takosato.shop/shopdetail/000000000067/">「りんちょこ」&lt;/a> というお菓子を初めてみた。冬季限定らしい。軽く食べてみると思いの外おいしい。えびせんべいをチョコレートでコーティングしていてチョコフレークの食感に近い。チョコフレークが好きな人にはうけると思う。お土産にもよさそう。&lt;/p>
&lt;h2 id="会員制バー">会員制バー&lt;/h2>
&lt;p>オフィスの郵便受けに &lt;a href="https://kobe-salon-s.localinfo.jp/">KOBE SALON S&lt;/a> という会員制バーのチラシが入っていた。新規会員を募集しているらしい。個人だったら全く興味はないけど、経営していると接待する機会がたまにある。前に顧問さんに経営コンサルティングを受けたときに交際費が少な過ぎるという指摘を受けた。交際費は5年後10年後のお仕事をとるための先行投資もしくは調査費用のようなものだという。そこで今期は交際費の予算に30万円を見積もっているが、現時点で46,971円しか使っていない。4月までにあと2-3件は飲みに行くあてはあるけど、このままいくと30万円は消化できない。コロナ禍というのもあるけど、何もしないと私は交際費を使わないので積極的に使っていく仕組みを作らないといけない。その一環として会員制バーは接待にいいかもしれない。すぐ退会するかもしれないけど、チラシをみた縁で入会してみる。&lt;/p></content></item><item><title>BizSTATION Light の初期設定</title><link>/diary/posts/2022/0112/</link><pubDate>Wed, 12 Jan 2022 08:12:49 +0900</pubDate><guid>/diary/posts/2022/0112/</guid><description>4時半に寝て7時半に起きた。なんか眠れなくてゲームしたり映画みたり記事を読んだりしてた。
BizSTATION Light の契約移行 年末に銀行支店で申し込みした Light の新規契約分の書類が届いた。早速 Windows マシンでログインするための初期設定を行った。セキュリティ設定を変更したり、電子証明書を取得したりとけっこう面倒くさい。流れ的にはこんな感じだけど、なんで Web サービスにログインするために OS の設定変更をしないといけないのかみたいなところの抵抗感がある。セキュリティ意識の高い Web アプリケーションの仕組みを垣間みる。
OS の事前設定 電子証明書の設定 ワンタイムパスワードのデバイス登録 ログイン用パスワードと取引用パスワードの設定 年末年始を挟んだので少し時間がかかるかもしれないと窓口の担当者は言っていたが、そういうこともなく2週間程度で書類が送られてきた。しばらくは有償プランにはせず、無償プランのまま運用する。現時点では、明細が月1-2件ほどしかないので、有償プランが提供する API サービスによる会計システムとの連携をしなくても事務手続きの工数的にもまったく困らない。いずれ明細が増えたときのための準備として契約を移行しておいたという話し。</description><content>&lt;p>4時半に寝て7時半に起きた。なんか眠れなくてゲームしたり映画みたり記事を読んだりしてた。&lt;/p>
&lt;h2 id="bizstation-light-の契約移行">BizSTATION Light の契約移行&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1230/#bizstation-light">年末に銀行支店で申し込みした&lt;/a> Light の新規契約分の書類が届いた。早速 Windows マシンでログインするための初期設定を行った。セキュリティ設定を変更したり、電子証明書を取得したりとけっこう面倒くさい。流れ的にはこんな感じだけど、なんで Web サービスにログインするために OS の設定変更をしないといけないのかみたいなところの抵抗感がある。セキュリティ意識の高い Web アプリケーションの仕組みを垣間みる。&lt;/p>
&lt;ol>
&lt;li>OS の事前設定&lt;/li>
&lt;li>電子証明書の設定&lt;/li>
&lt;li>ワンタイムパスワードのデバイス登録&lt;/li>
&lt;li>ログイン用パスワードと取引用パスワードの設定&lt;/li>
&lt;/ol>
&lt;p>年末年始を挟んだので少し時間がかかるかもしれないと窓口の担当者は言っていたが、そういうこともなく2週間程度で書類が送られてきた。しばらくは有償プランにはせず、無償プランのまま運用する。現時点では、明細が月1-2件ほどしかないので、有償プランが提供する API サービスによる会計システムとの連携をしなくても事務手続きの工数的にもまったく困らない。いずれ明細が増えたときのための準備として契約を移行しておいたという話し。&lt;/p></content></item><item><title>log4j2 の yml 設定</title><link>/diary/posts/2022/0111/</link><pubDate>Tue, 11 Jan 2022 08:27:48 +0900</pubDate><guid>/diary/posts/2022/0111/</guid><description>0時半に寝て6時半に起きた。だいぶ開発に集中してきて朝も起きれるようになってきた。
log4j2.yml を読み込む log4j2 のログ設定を整理していて設定ファイルを読み込む順番は次のようにドキュメントに記載されている。java ライブラリのこういった手厚いルールはややうんざりするところもあるけど、是非はともかく、ファイルフォーマットの違い、ファイル名の違いで読み込む優先順位がある。歴史のあるライブラリだから要求を聞いているうちにこんな感じになったんだろうと推測する。
Log4j will inspect the &amp;ldquo;log4j2.configurationFile&amp;rdquo; system property and, if set, will attempt to load the configuration using the ConfigurationFactory that matches the file extension. Note that this is not restricted to a location on the local file system and may contain a URL. If no system property is set the properties ConfigurationFactory will look for log4j2-test.properties in the classpath. If no such file is found the YAML ConfigurationFactory will look for log4j2-test.</description><content>&lt;p>0時半に寝て6時半に起きた。だいぶ開発に集中してきて朝も起きれるようになってきた。&lt;/p>
&lt;h2 id="log4j2yml-を読み込む">log4j2.yml を読み込む&lt;/h2>
&lt;p>log4j2 のログ設定を整理していて設定ファイルを読み込む順番は次のようにドキュメントに記載されている。java ライブラリのこういった手厚いルールはややうんざりするところもあるけど、是非はともかく、ファイルフォーマットの違い、ファイル名の違いで読み込む優先順位がある。歴史のあるライブラリだから要求を聞いているうちにこんな感じになったんだろうと推測する。&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Log4j will inspect the &amp;ldquo;log4j2.configurationFile&amp;rdquo; system property and, if set, will attempt to load the configuration using the ConfigurationFactory that matches the file extension. Note that this is not restricted to a location on the local file system and may contain a URL.&lt;/li>
&lt;li>If no system property is set the properties ConfigurationFactory will look for log4j2-test.properties in the classpath.&lt;/li>
&lt;li>If no such file is found the YAML ConfigurationFactory will look for log4j2-test.yaml or log4j2-test.yml in the classpath.&lt;/li>
&lt;li>If no such file is found the JSON ConfigurationFactory will look for log4j2-test.json or log4j2-test.jsn in the classpath.&lt;/li>
&lt;li>If no such file is found the XML ConfigurationFactory will look for log4j2-test.xml in the classpath.&lt;/li>
&lt;li>If a test file cannot be located the properties ConfigurationFactory will look for log4j2.properties on the classpath.&lt;/li>
&lt;li>If a properties file cannot be located the YAML ConfigurationFactory will look for log4j2.yaml or log4j2.yml on the classpath.&lt;/li>
&lt;li>If a YAML file cannot be located the JSON ConfigurationFactory will look for log4j2.json or log4j2.jsn on the classpath.&lt;/li>
&lt;li>If a JSON file cannot be located the XML ConfigurationFactory will try to locate log4j2.xml on the classpath.&lt;/li>
&lt;li>If no configuration file could be located the DefaultConfiguration will be used. This will cause logging output to go to the console.&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://logging.apache.org/log4j/2.x/manual/configuration.html#AutomaticConfiguration">log4j2 Automatic Configuration&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>普通 java は xml で設定を書くけど、この設定ファイルの読み込みルールをみたら yml にも対応しているならその方がよさそうとか思うやん。log4j2.xml から log4j2.yml に書き換えて試してみると、ログ設定が有効にならない。どうも log4j2.yml を読み込んでいないようにみえる。ググっていると &lt;code>jackson-dataformat-yaml&lt;/code> を依存関係に追加しろといった内容をみつかるけど、どういう理屈でそういう仕様になっているのか、まったく理解できない。なによりも読み飛ばしたというログが出力されないから設定ファイルを読んでいるのかどうかすら気付けない。これは知ってないとはまるポイントの1つ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml">&lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>com.fasterxml.jackson.dataformat&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>jackson-dataformat-yaml&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>自己肯定感の考察</title><link>/diary/posts/2022/0110/</link><pubDate>Mon, 10 Jan 2022 16:55:23 +0900</pubDate><guid>/diary/posts/2022/0110/</guid><description>0時に寝て8時に起きた。
自己肯定感、高いか低いか 前になにかの記事で読んだことに、自己肯定感が高い人は困難な状況にあってもうまく折り合いをつけてやっていけるという。例えば、パワハラ気質の上司がいても、それは上司がおかしいのだと解釈して、なにを言われても全く自己否定やネガティブな感情にならないという。あるとき、別のイベントで起業家を養成するために幼児の頃から徹底的に自己肯定感を高めるためのカリキュラムを実践しているという話を聞いたことがある。田舎でのほほんと生きてきた人間とは幼児の頃から育ちが違う。
ふと自分の自己肯定感はどうだろう？とか考えるときもある。もうこの歳になって自己肯定感がどうこうで悩んだりすることはないけど、なにか事象が発生したときにまずは自分が悪かったんじゃないかと疑ってかかるところから思考が始まる。ネガティブな事象が起こると、自分が気付けば防げたとか、もっと機転を利かせばうまく対処できたんじゃないかと考えたりする。自己評価は5段階なら、自分で振り返って不満がなかったら3で、なにかあったら2をつける。そのため、多くのケースで360度評価が乖離する。たまたま野球部だったせいもあるかもしれないけど、基本的に監督に叱られるのが普通のような感覚をもっている。もっと言うと、他人から褒められた経験があまりないから褒められてもどう反応していいかもわからない。嬉しくないわけではないけど、相手に気を遣わせてしまって申し訳ないなとか思うこともある。
良くも悪くも私は他人に関心がないし、他人からの評価にはもっと関心がない。自分が取り組んでいる課題を自身の基準でうまくできたかどうかにしか興味がない。わりと他人に素っ気ない態度をとってしまうときもある。一方で他人から咎められると一通り自身の基準に当てはめて理が通っていればへこむときがある。褒められてもそれほど嬉しくないのに咎められたらへこむというのは、自己肯定感の高低によって変わったりするのかな？とか考えたりしていた。言うても、もうこの歳になると褒められることも咎められることもないのであまり気にする機会すらないのだけど。</description><content>&lt;p>0時に寝て8時に起きた。&lt;/p>
&lt;h2 id="自己肯定感高いか低いか">自己肯定感、高いか低いか&lt;/h2>
&lt;p>前になにかの記事で読んだことに、自己肯定感が高い人は困難な状況にあってもうまく折り合いをつけてやっていけるという。例えば、パワハラ気質の上司がいても、それは上司がおかしいのだと解釈して、なにを言われても全く自己否定やネガティブな感情にならないという。あるとき、別のイベントで起業家を養成するために幼児の頃から徹底的に自己肯定感を高めるためのカリキュラムを実践しているという話を聞いたことがある。田舎でのほほんと生きてきた人間とは幼児の頃から育ちが違う。&lt;/p>
&lt;p>ふと自分の自己肯定感はどうだろう？とか考えるときもある。もうこの歳になって自己肯定感がどうこうで悩んだりすることはないけど、なにか事象が発生したときにまずは自分が悪かったんじゃないかと疑ってかかるところから思考が始まる。ネガティブな事象が起こると、自分が気付けば防げたとか、もっと機転を利かせばうまく対処できたんじゃないかと考えたりする。自己評価は5段階なら、自分で振り返って不満がなかったら3で、なにかあったら2をつける。そのため、多くのケースで360度評価が乖離する。たまたま野球部だったせいもあるかもしれないけど、基本的に監督に叱られるのが普通のような感覚をもっている。もっと言うと、他人から褒められた経験があまりないから褒められてもどう反応していいかもわからない。嬉しくないわけではないけど、相手に気を遣わせてしまって申し訳ないなとか思うこともある。&lt;/p>
&lt;p>良くも悪くも私は他人に関心がないし、他人からの評価にはもっと関心がない。自分が取り組んでいる課題を自身の基準でうまくできたかどうかにしか興味がない。わりと他人に素っ気ない態度をとってしまうときもある。一方で他人から咎められると一通り自身の基準に当てはめて理が通っていればへこむときがある。褒められてもそれほど嬉しくないのに咎められたらへこむというのは、自己肯定感の高低によって変わったりするのかな？とか考えたりしていた。言うても、もうこの歳になると褒められることも咎められることもないのであまり気にする機会すらないのだけど。&lt;/p></content></item><item><title>進撃の巨人をみてた</title><link>/diary/posts/2022/0109/</link><pubDate>Sun, 09 Jan 2022 10:54:49 +0900</pubDate><guid>/diary/posts/2022/0109/</guid><description>0時に寝て8時に起きた。
進撃の巨人 進撃の巨人 の最終章の第2クールが始まるみたい。去年、マガジンの連載であと数話で終わりと発表があって、その後、最終話がマガジンに掲載されたときに漫画喫茶で完結したのを読んだので結末がどうなるかはもう知っている。懐かしかったので過去の話しをいくつかみていたらついつい見続けてしまった。アニメは話の展開がスムーズなせいか、視聴者を飽きさせずに次の展開へ引き込める気がする。進撃の巨人は不思議な作品で、初期のときは世界観にすごく衝撃を受けて楽しみにして漫画を読んでいたが、途中から組織のどろどろした内部抗争になって興味が失せてしまった。そして、その後、外の世界のもっとどろどろした国家間抗争になってしまってさらに興味が失せてしまった。何よりも漫画で読んでいると文章が多くて読むのに疲れる漫画になってしまった印象を受けていた。複雑な設定を追加したことで必然的に説明が増えてしまった。アニメをみていてそこまで説明調の台詞が気にならなかったのは制作スタッフがうまく作っているのだろうなとは思えた。完結して振り返ってみると、(私の好みではなくなったけど) 話の展開も伏線の回収もうまくて見事な物語になったなぁと思う。単行本の一気読みやアニメをまとめて見るとすごくおもしろいようにも感じる。こんな複雑なややこしい物語をちゃんと完結させたというところだけでも素晴らしい作品だとは思う。</description><content>&lt;p>0時に寝て8時に起きた。&lt;/p>
&lt;h2 id="進撃の巨人">進撃の巨人&lt;/h2>
&lt;p>&lt;a href="https://shingeki.tv/final/">進撃の巨人&lt;/a> の最終章の第2クールが始まるみたい。去年、マガジンの連載であと数話で終わりと発表があって、その後、最終話がマガジンに掲載されたときに漫画喫茶で完結したのを読んだので結末がどうなるかはもう知っている。懐かしかったので過去の話しをいくつかみていたらついつい見続けてしまった。アニメは話の展開がスムーズなせいか、視聴者を飽きさせずに次の展開へ引き込める気がする。進撃の巨人は不思議な作品で、初期のときは世界観にすごく衝撃を受けて楽しみにして漫画を読んでいたが、途中から組織のどろどろした内部抗争になって興味が失せてしまった。そして、その後、外の世界のもっとどろどろした国家間抗争になってしまってさらに興味が失せてしまった。何よりも漫画で読んでいると文章が多くて読むのに疲れる漫画になってしまった印象を受けていた。複雑な設定を追加したことで必然的に説明が増えてしまった。アニメをみていてそこまで説明調の台詞が気にならなかったのは制作スタッフがうまく作っているのだろうなとは思えた。完結して振り返ってみると、(私の好みではなくなったけど) 話の展開も伏線の回収もうまくて見事な物語になったなぁと思う。単行本の一気読みやアニメをまとめて見るとすごくおもしろいようにも感じる。こんな複雑なややこしい物語をちゃんと完結させたというところだけでも素晴らしい作品だとは思う。&lt;/p></content></item><item><title>初詣</title><link>/diary/posts/2022/0108/</link><pubDate>Sat, 08 Jan 2022 14:51:03 +0900</pubDate><guid>/diary/posts/2022/0108/</guid><description>0時に寝て3時に起きて、2度寝して9時ぐらいに起きた。前日はあまり寝てなくてバテてたんでよく寝てた。
ストレッチ 年末年始を挟んでやや忙しかったのとだらけてたの2重奏であまりストレッチができなかった。今日の開脚幅は開始前164cmで、ストレッチ後167cmと12月よりもかなり数値が悪くなってしまった。気温が下がって寒くなってほとんど外に出掛けなくなってそれも悪影響を及ぼしているのかもしれない。また右足の内転筋まわりの張りが大きくなっているのを実感している。新年になって心機一転して日常生活を改善していかないといけない。
初詣 気分転換に 湊川神社 に初詣してきた。JR 神戸駅のすぐ近くにある。歴史が好きな人なら南北朝時代の武将、楠木正成公を祀っている神社として有名みたい。足利尊氏と戦って敗れた最後の地として 湊川の戦い の「湊川」がこの辺りになるらしい。なので楠木正成の墓所も境内に含まれている。立派な門構えでよく前を通る度にみかけてはいたけど、実際に参拝するのは初めてだった。境内も普通の神社の2-3倍ぐらいは広くて立派な装いをしている。江戸時代に徳川光圀公により立派なお墓が建立され、幕末には維新志士から崇敬の対象となって明治維新の尊王思想にも影響を与えたといったことが掲示されていた。時の権力争いの戦に敗れた武将がいろいろあって主祭神として立派な神社を構えているのも時代の流れを感じた。</description><content>&lt;p>0時に寝て3時に起きて、2度寝して9時ぐらいに起きた。前日はあまり寝てなくてバテてたんでよく寝てた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>年末年始を挟んでやや忙しかったのとだらけてたの2重奏であまりストレッチができなかった。今日の開脚幅は開始前164cmで、ストレッチ後167cmと12月よりもかなり数値が悪くなってしまった。気温が下がって寒くなってほとんど外に出掛けなくなってそれも悪影響を及ぼしているのかもしれない。また右足の内転筋まわりの張りが大きくなっているのを実感している。新年になって心機一転して日常生活を改善していかないといけない。&lt;/p>
&lt;h2 id="初詣">初詣&lt;/h2>
&lt;p>気分転換に &lt;a href="https://www.minatogawajinja.or.jp/">湊川神社&lt;/a> に初詣してきた。JR 神戸駅のすぐ近くにある。歴史が好きな人なら南北朝時代の武将、楠木正成公を祀っている神社として有名みたい。足利尊氏と戦って敗れた最後の地として &lt;a href="https://ja.wikipedia.org/wiki/%E6%B9%8A%E5%B7%9D%E3%81%AE%E6%88%A6%E3%81%84">湊川の戦い&lt;/a> の「湊川」がこの辺りになるらしい。なので楠木正成の墓所も境内に含まれている。立派な門構えでよく前を通る度にみかけてはいたけど、実際に参拝するのは初めてだった。境内も普通の神社の2-3倍ぐらいは広くて立派な装いをしている。江戸時代に徳川光圀公により立派なお墓が建立され、幕末には維新志士から崇敬の対象となって明治維新の尊王思想にも影響を与えたといったことが掲示されていた。時の権力争いの戦に敗れた武将がいろいろあって主祭神として立派な神社を構えているのも時代の流れを感じた。&lt;/p></content></item><item><title>「聞かなくてもわかる」という価値観</title><link>/diary/posts/2022/0107/</link><pubDate>Fri, 07 Jan 2022 08:10:05 +0900</pubDate><guid>/diary/posts/2022/0107/</guid><description>0時に寝て3時に起きた。4時までドラクエタクトしたりもしてたけど、夕方に PoC のデモ打ち合わせがあるのになにも準備できてなくて不安で起きて5時からお仕事してた。久しぶりに早起きしたせいか、打ち合わせ終えたら眠いからすぐに帰って、夜はオンライン飲み会しつつくつろいでいた。
情報共有とコミュニケーションコスト 課題管理システムのことを考えていてふと思いついたことを書き出す。私からみると、多くの人たちは「聞かなくてもわかる」という価値を過小評価しがちである。というのは、その価値を定量化するのは難しいので評価されにくい。そうすると、評価されないことはやらないといった合理的な働き方をすればそうなるのは理解できる。しかし、私はその価値を理解しているので軽く考察してみる。
聞けない 聞けばわかる 聞いてもわからない 聞かないとわからない 聞かなくてもわかる 情報共有の過程でパッと思いつくことを段階ごとに書いてみた。1に近い方が容易で5に近い方が難しいという難易度を表しているとも言えるし、組織の情報共有のレベルを表しているとも言える。少し言葉を補うと次のように解釈してもよいだろう。
(メンターが気難しくて/メンターに無能だと思われたくなくて) 聞けない (メンターに余裕があって) 聞けばわかる (メンターのスキル不足で/担当者が退職してて) 聞いてもわからない (背景が文書化されていなくて) 聞かないとわからない (課題管理システムを検索すれば) 聞かなくてもわかる 昔は1のような状況を発生させる人もちょくちょく職場にいた気がするけど、いまは淘汰されてあまりみかけない。多くの組織は3か4ぐらいのレベルだろう。5まで達している組織は少ない。課題管理システムについて議論していると、たまに「知っている人に聞けばいいじゃない？」という意見があがる。この質問をしている時点で目指している働き方のレベルや生産性が大きく異なっていることがわかる。というのは、他人に聞くというのはコミュニケーションコストが非常に高い。これは他人に聞くなと言っているわけではない。他人に聞かないといけないことを減らすことで生産性を上げるという話しをしているだけだ。他者へ同じ情報を伝えるのに1時間の打ち合わせが済むのか、3時間の打ち合わせを要するのかという比較をしている。当然、打ち合わせ時間を減らしても伝えられる情報量が同じであれば打ち合わせ時間は少ない方が望ましい。そういう話しをしている。
5のレベルに達していれば、例えば、いまのシステムの仕様はなぜこのようになっているのか？変更するとしたら影響範囲はどのぐらいか？どういったモジュールに注意して改修すればいいか。もちろん前任者やリーダーに聞けばわかるだろう。聞くために打ち合わせの予定を調整するかもしれない。するとリーダーは忙しくて時間を調整できるのは来週になるという。もし課題管理システムにそういった情報が残っていれば、来週まで待つ必要がなくなる。理想的にはリーダーとの打ち合わせも必要なくなる。リーダーは他に重要な業務に時間を割ける。これが「聞かなくてもわかる」という価値である。
昔はなんらかの理由で1の状態にあった組織において、職場の風通しがよくなると、コミュニケーションコストを軽視しがちになる。職場の風通しがよいことは重要だが、打ち合わせや会議ばかりするようになると、キーパーソンの時間を湯水のように使う。キーパーソンはすぐに会議だらけになって物理的に実務ができなくなって、結果的に生産性や品質が下がる。ここで重要なのは権限委譲だが、この話しは長くなるのでここで筆をおく。</description><content>&lt;p>0時に寝て3時に起きた。4時までドラクエタクトしたりもしてたけど、夕方に PoC のデモ打ち合わせがあるのになにも準備できてなくて不安で起きて5時からお仕事してた。久しぶりに早起きしたせいか、打ち合わせ終えたら眠いからすぐに帰って、夜はオンライン飲み会しつつくつろいでいた。&lt;/p>
&lt;h2 id="情報共有とコミュニケーションコスト">情報共有とコミュニケーションコスト&lt;/h2>
&lt;p>課題管理システムのことを考えていてふと思いついたことを書き出す。私からみると、多くの人たちは「聞かなくてもわかる」という価値を過小評価しがちである。というのは、その価値を定量化するのは難しいので評価されにくい。そうすると、評価されないことはやらないといった合理的な働き方をすればそうなるのは理解できる。しかし、私はその価値を理解しているので軽く考察してみる。&lt;/p>
&lt;ol>
&lt;li>聞けない&lt;/li>
&lt;li>聞けばわかる&lt;/li>
&lt;li>聞いてもわからない&lt;/li>
&lt;li>聞かないとわからない&lt;/li>
&lt;li>聞かなくてもわかる&lt;/li>
&lt;/ol>
&lt;p>情報共有の過程でパッと思いつくことを段階ごとに書いてみた。1に近い方が容易で5に近い方が難しいという難易度を表しているとも言えるし、組織の情報共有のレベルを表しているとも言える。少し言葉を補うと次のように解釈してもよいだろう。&lt;/p>
&lt;ol>
&lt;li>(メンターが気難しくて/メンターに無能だと思われたくなくて) 聞けない&lt;/li>
&lt;li>(メンターに余裕があって) 聞けばわかる&lt;/li>
&lt;li>(メンターのスキル不足で/担当者が退職してて) 聞いてもわからない&lt;/li>
&lt;li>(背景が文書化されていなくて) 聞かないとわからない&lt;/li>
&lt;li>(課題管理システムを検索すれば) 聞かなくてもわかる&lt;/li>
&lt;/ol>
&lt;p>昔は1のような状況を発生させる人もちょくちょく職場にいた気がするけど、いまは淘汰されてあまりみかけない。多くの組織は3か4ぐらいのレベルだろう。5まで達している組織は少ない。課題管理システムについて議論していると、たまに「知っている人に聞けばいいじゃない？」という意見があがる。この質問をしている時点で目指している働き方のレベルや生産性が大きく異なっていることがわかる。というのは、他人に聞くというのはコミュニケーションコストが非常に高い。これは他人に聞くなと言っているわけではない。他人に聞かないといけないことを減らすことで生産性を上げるという話しをしているだけだ。他者へ同じ情報を伝えるのに1時間の打ち合わせが済むのか、3時間の打ち合わせを要するのかという比較をしている。当然、打ち合わせ時間を減らしても伝えられる情報量が同じであれば打ち合わせ時間は少ない方が望ましい。そういう話しをしている。&lt;/p>
&lt;p>5のレベルに達していれば、例えば、いまのシステムの仕様はなぜこのようになっているのか？変更するとしたら影響範囲はどのぐらいか？どういったモジュールに注意して改修すればいいか。もちろん前任者やリーダーに聞けばわかるだろう。聞くために打ち合わせの予定を調整するかもしれない。するとリーダーは忙しくて時間を調整できるのは来週になるという。もし課題管理システムにそういった情報が残っていれば、来週まで待つ必要がなくなる。理想的にはリーダーとの打ち合わせも必要なくなる。リーダーは他に重要な業務に時間を割ける。これが「聞かなくてもわかる」という価値である。&lt;/p>
&lt;p>昔はなんらかの理由で1の状態にあった組織において、職場の風通しがよくなると、コミュニケーションコストを軽視しがちになる。職場の風通しがよいことは重要だが、打ち合わせや会議ばかりするようになると、キーパーソンの時間を湯水のように使う。キーパーソンはすぐに会議だらけになって物理的に実務ができなくなって、結果的に生産性や品質が下がる。ここで重要なのは権限委譲だが、この話しは長くなるのでここで筆をおく。&lt;/p></content></item><item><title>朋あり遠方より来る</title><link>/diary/posts/2022/0106/</link><pubDate>Thu, 06 Jan 2022 07:35:03 +0900</pubDate><guid>/diary/posts/2022/0106/</guid><description>0時に寝て6時に起きた。起きてはいるんだけど、寒いから布団にくるまってネットで記事を読んだりして7時ぐらいまでだらだらしてしまったりしている。結果として始業時間が遅くなって生産性が下がる。
近況報告 ありえる時代の元同僚のかわのさんから連絡があった。Little Help Agency LLC というマイクロ法人を経営している。1人でやってて、自社サービスで、起業後1年ですでにお客さんが100社を超えているらしい。手放しですごいと言っていいと思う。たまたまお客さんからこんなシステムを開発してほしいという依頼案件があって、うちで受託開発を受けられないかというお話しだった。残念ながら、私も新しいお仕事を始めたばかりなのと、自社プロダクトの開発にも時間を割いていきたい背景もあるので、お手伝いをするお仕事は慎重に検討してからにしている。軽く打ち合わせして物理的な制約と業務のマッチングを考慮すると、今回はお手伝いできませんという結論になった。とはいえ、またいつか一緒にお仕事する機会もあるかもしれない。自分の知っている人たちが活躍しているのを聞くのは嬉しいし励みにもなるな。
かわのさんは、まったくリアクションしないけど、私の facebook の投稿を読んでいると話していた。承認欲求のために facebook やっているのに「いいね」しろよとか思いつつも、そうやってなにかしら書いていると読んでくれている人がいるんだなとわかった。前に何かの記事でブログなどを読んでいると読者が著者に親近感を抱きやすいと書いてあった。もしかしたら、かわのさんが私に連絡してくれたのもそういう効果があったのかもしれない。ここに日記を書くのも自分のためではあるけれど、いつか起点となって縁がつながるのかもしれない。</description><content>&lt;p>0時に寝て6時に起きた。起きてはいるんだけど、寒いから布団にくるまってネットで記事を読んだりして7時ぐらいまでだらだらしてしまったりしている。結果として始業時間が遅くなって生産性が下がる。&lt;/p>
&lt;h2 id="近況報告">近況報告&lt;/h2>
&lt;p>ありえる時代の元同僚のかわのさんから連絡があった。&lt;a href="https://www.littlehelp.co.jp/">Little Help Agency LLC&lt;/a> というマイクロ法人を経営している。1人でやってて、自社サービスで、起業後1年ですでにお客さんが100社を超えているらしい。手放しですごいと言っていいと思う。たまたまお客さんからこんなシステムを開発してほしいという依頼案件があって、うちで受託開発を受けられないかというお話しだった。残念ながら、私も新しいお仕事を始めたばかりなのと、自社プロダクトの開発にも時間を割いていきたい背景もあるので、お手伝いをするお仕事は慎重に検討してからにしている。軽く打ち合わせして物理的な制約と業務のマッチングを考慮すると、今回はお手伝いできませんという結論になった。とはいえ、またいつか一緒にお仕事する機会もあるかもしれない。自分の知っている人たちが活躍しているのを聞くのは嬉しいし励みにもなるな。&lt;/p>
&lt;p>かわのさんは、まったくリアクションしないけど、私の facebook の投稿を読んでいると話していた。承認欲求のために facebook やっているのに「いいね」しろよとか思いつつも、そうやってなにかしら書いていると読んでくれている人がいるんだなとわかった。前に何かの記事でブログなどを読んでいると読者が著者に親近感を抱きやすいと書いてあった。もしかしたら、かわのさんが私に連絡してくれたのもそういう効果があったのかもしれない。ここに日記を書くのも自分のためではあるけれど、いつか起点となって縁がつながるのかもしれない。&lt;/p></content></item><item><title>datadog のログ管理</title><link>/diary/posts/2022/0105/</link><pubDate>Wed, 05 Jan 2022 07:41:18 +0900</pubDate><guid>/diary/posts/2022/0105/</guid><description>0時に寝て5時に起きた。昨日は早く寝たので早く起きた。
ふりかえり お仕事でのスクラムのふりかえり。課題管理システムの一本化 や slack のマルチチャンネルゲスト移行 について、メンバーのよかったコメントがいくつか出た。私は経験者なので、これらの結果がどうなるかは最初からわかっていて、移行中に運用面からもあれこれプラクティスを提案しながら結果が出やすいようにサポートしていた。まだまだもっとうまく運用できるけれど、経験則では、他のメンバーの運用がついてくるには半年ぐらいかかるだろう。仕組みを取り入れただけではまだ効果が半分で、適切な運用を継続することでさらにその効果を実感できるようになる。これからも注力していく。
ともあれ、私がお手伝い始めた初日から非効率だと考えていた3大課題のうちの2つは2ヶ月経って対応された。ついでに書いておくと、最後の1つはカレンダー共有の課題がある。お手伝い先の社内で使っているカレンダーを協力会社のメンバーはみることができない。その逆も然り。したがって、正社員と協力会社でカレンダーを共有できない。これがスケジュール調整コストやコミュニケーションコストを高くしている。カレンダーを共有していると、例えば、slack でメンションして予定が入っていないならすぐに返信がくることを期待するけど、会議中だったらその会議が終わってからかな？といった予測が働く。仮に会議が3つ連続していれば、PR のレビューはすぐできないだろうと推測される。プロジェクトメンバーでカレンダーを共有できないと、相手の行動予測の精度が下がり、結果としてコミュニケーションコストが高くつく。
生産性をあげるには特別なことをやらなくても、当たり前のことを当たり前にしていくだけでも効果がある。同じ職場でずっと働いていると、当たり前じゃないことがわからなくなってしまって非効率になってしまうことも多々ある。そういうところは外部の人間が指摘することで改善できる余地となる。
datadog のログ管理 お仕事で datadog の ログ管理 機能を調べている。メトリクスしか使ったことがなかったけど、ログ管理も一通りの機能は揃っていていろいろできる。なぜか私が手伝う会社は datadog を使っていて、他のサービスも試してみたいという気持ちもあるんだけど、やっぱり datadog は優れたサービスということなのだろうか。</description><content>&lt;p>0時に寝て5時に起きた。昨日は早く寝たので早く起きた。&lt;/p>
&lt;h2 id="ふりかえり">ふりかえり&lt;/h2>
&lt;p>お仕事でのスクラムのふりかえり。&lt;a href="/diary/diary/posts/2021/1222/#課題管理システムを一本化する">課題管理システムの一本化&lt;/a> や &lt;a href="/diary/diary/posts/2021/1224/#slack-のマルチチャンネルゲスト">slack のマルチチャンネルゲスト移行&lt;/a> について、メンバーのよかったコメントがいくつか出た。私は経験者なので、これらの結果がどうなるかは最初からわかっていて、移行中に運用面からもあれこれプラクティスを提案しながら結果が出やすいようにサポートしていた。まだまだもっとうまく運用できるけれど、経験則では、他のメンバーの運用がついてくるには半年ぐらいかかるだろう。仕組みを取り入れただけではまだ効果が半分で、適切な運用を継続することでさらにその効果を実感できるようになる。これからも注力していく。&lt;/p>
&lt;p>ともあれ、私がお手伝い始めた初日から非効率だと考えていた3大課題のうちの2つは2ヶ月経って対応された。ついでに書いておくと、最後の1つはカレンダー共有の課題がある。お手伝い先の社内で使っているカレンダーを協力会社のメンバーはみることができない。その逆も然り。したがって、正社員と協力会社でカレンダーを共有できない。これがスケジュール調整コストやコミュニケーションコストを高くしている。カレンダーを共有していると、例えば、slack でメンションして予定が入っていないならすぐに返信がくることを期待するけど、会議中だったらその会議が終わってからかな？といった予測が働く。仮に会議が3つ連続していれば、PR のレビューはすぐできないだろうと推測される。プロジェクトメンバーでカレンダーを共有できないと、相手の行動予測の精度が下がり、結果としてコミュニケーションコストが高くつく。&lt;/p>
&lt;p>生産性をあげるには特別なことをやらなくても、当たり前のことを当たり前にしていくだけでも効果がある。同じ職場でずっと働いていると、当たり前じゃないことがわからなくなってしまって非効率になってしまうことも多々ある。そういうところは外部の人間が指摘することで改善できる余地となる。&lt;/p>
&lt;h2 id="datadog-のログ管理">datadog のログ管理&lt;/h2>
&lt;p>お仕事で datadog の &lt;a href="https://docs.datadoghq.com/ja/logs/">ログ管理&lt;/a> 機能を調べている。メトリクスしか使ったことがなかったけど、ログ管理も一通りの機能は揃っていていろいろできる。なぜか私が手伝う会社は datadog を使っていて、他のサービスも試してみたいという気持ちもあるんだけど、やっぱり datadog は優れたサービスということなのだろうか。&lt;/p></content></item><item><title>仕事始め</title><link>/diary/posts/2022/0104/</link><pubDate>Tue, 04 Jan 2022 11:42:00 +0900</pubDate><guid>/diary/posts/2022/0104/</guid><description>3時に寝て6時半に起きて2度寝して7時半に起きた。お正月にだらけたのですぐ起きれなかった。
仕事始め 今日から仕事始め。お昼におにぎりを買いに外を歩いたけど、あまり人気がなかった。14時過ぎに散歩がてら 生田神社 へ初詣に向かったが、なかなかの混雑ぶりで断念した。初詣失敗。普通の休日の3倍ぐらいはいたんじゃないかと思う。神社は学生さんも多いとは思うけど、まだ休み中の人も多いのかもしれない。
償却資産の申告 固定資産税を支払う根拠となる固定資産台帳の内容を申告した。毎年1月1日時点の償却資産を1月31日までに申告する。去年は紙の書類で行った手続きを、今年は eLTAX (ダウンロード版) でオンライン手続きした。神戸市は事前にプレ申告データとして去年の申告データを送ってくれるので、それを再利用して手続きをすると去年時点のデータ入力の手間を省ける。実際に手続きしてみたら紙の書類そのままの画面が表示されて、空き項目を埋めていくだけだった。ほんの10分で入力を完了した。あとはマイナンバーカードを使って電子署名して送信するだけ。送信後、受付のメッセージが返ってくる。なにか不備があれば、データチェックをしているオペレーターから数日以内に電話がかかってくる。かかってこなければ問題ないということ。
関連する話題として、No.5408 中小企業者等の少額減価償却資産の取得価額の損金算入の特例 という制度がある。通常、減価償却対象となる固定資産の基準額は単品で10万円になるが、この中小企業向けの特例を用いると30万円を基準額にできる (合計で300万円まで) 。パソコンなどのデバイスは10万円を超えることも多い。そういった固定資産を複数年で減価償却しなくても取得年度で即時償却できる。具体的にはその事業年度で利益がある場合は経費が増えることになるので法人税や地方法人税 (名前に「地方」という文言が入っているがこれは国税) といった国税の節税となる。
他方で、償却資産に対して固定資産税という地方税がある。償却資産として毎年1月に申告する。これは特例で即時償却した固定資産に対しても適用される。例えば、神戸市では次の FAQ に特例とは関係ないという注意書きがある。償却資産の合計金額が150万円未満のときは免税となる。小さい規模の企業なら免税になりやすい制度にみえる。
※租税特別措置法の規定により中小企業者等の少額資産特例を適用して損金算入した資産については申告の対象となります。
Q.申告の対象にならない資産は、どのようなものがありますか。
国税と地方税の違いを理解していないと調べ方を誤る懸念がある。国税庁のサイトには国税のことしか書いていないし、地方税のことは地方自治体のサイトにしか書いていない。というか、私は国税だけを調べて地方税の扱いを誤解していた。</description><content>&lt;p>3時に寝て6時半に起きて2度寝して7時半に起きた。お正月にだらけたのですぐ起きれなかった。&lt;/p>
&lt;h2 id="仕事始め">仕事始め&lt;/h2>
&lt;p>今日から仕事始め。お昼におにぎりを買いに外を歩いたけど、あまり人気がなかった。14時過ぎに散歩がてら &lt;a href="https://ikutajinja.or.jp/">生田神社&lt;/a> へ初詣に向かったが、なかなかの混雑ぶりで断念した。初詣失敗。普通の休日の3倍ぐらいはいたんじゃないかと思う。神社は学生さんも多いとは思うけど、まだ休み中の人も多いのかもしれない。&lt;/p>
&lt;h2 id="償却資産の申告">償却資産の申告&lt;/h2>
&lt;p>固定資産税を支払う根拠となる固定資産台帳の内容を申告した。毎年1月1日時点の償却資産を1月31日までに申告する。去年は紙の書類で行った手続きを、今年は &lt;a href="https://www.eltax.lta.go.jp/">eLTAX&lt;/a> (ダウンロード版) でオンライン手続きした。神戸市は事前にプレ申告データとして去年の申告データを送ってくれるので、それを再利用して手続きをすると去年時点のデータ入力の手間を省ける。実際に手続きしてみたら紙の書類そのままの画面が表示されて、空き項目を埋めていくだけだった。ほんの10分で入力を完了した。あとはマイナンバーカードを使って電子署名して送信するだけ。送信後、受付のメッセージが返ってくる。なにか不備があれば、データチェックをしているオペレーターから数日以内に電話がかかってくる。かかってこなければ問題ないということ。&lt;/p>
&lt;p>関連する話題として、&lt;a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/hojin/5408.htm">No.5408 中小企業者等の少額減価償却資産の取得価額の損金算入の特例&lt;/a> という制度がある。通常、減価償却対象となる固定資産の基準額は単品で10万円になるが、この中小企業向けの特例を用いると30万円を基準額にできる (合計で300万円まで) 。パソコンなどのデバイスは10万円を超えることも多い。そういった固定資産を複数年で減価償却しなくても取得年度で即時償却できる。具体的にはその事業年度で利益がある場合は経費が増えることになるので法人税や地方法人税 (名前に「地方」という文言が入っているがこれは国税) といった国税の節税となる。&lt;/p>
&lt;p>他方で、償却資産に対して固定資産税という地方税がある。償却資産として毎年1月に申告する。これは特例で即時償却した固定資産に対しても適用される。例えば、神戸市では次の FAQ に特例とは関係ないという注意書きがある。償却資産の合計金額が150万円未満のときは免税となる。小さい規模の企業なら免税になりやすい制度にみえる。&lt;/p>
&lt;blockquote>
&lt;p>※租税特別措置法の規定により中小企業者等の少額資産特例を適用して損金算入した資産については申告の対象となります。&lt;/p>
&lt;p>&lt;a href="https://www.city.kobe.lg.jp/a03858/kurashi/tax/kotei/shokyakushisan/syokyaku_faq.html#midashi93387">Q.申告の対象にならない資産は、どのようなものがありますか。&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>国税と地方税の違いを理解していないと調べ方を誤る懸念がある。国税庁のサイトには国税のことしか書いていないし、地方税のことは地方自治体のサイトにしか書いていない。というか、私は国税だけを調べて地方税の扱いを誤解していた。&lt;/p></content></item><item><title>帰省のUターン</title><link>/diary/posts/2022/0103/</link><pubDate>Mon, 03 Jan 2022 08:15:49 +0900</pubDate><guid>/diary/posts/2022/0103/</guid><description>3時に寝て7時に起きた。新撰組の時代劇をみてたら遅くなった。お正月っぽい感じ。午前中に ポツンと一軒家 の再放送を少しみた。この番組はもはや家族紹介の番組になっていてほのぼのするコンテンツになっているなと思えた。
田んぼ作業 草場になる前の田んぼをトラクターで耕した。スケジュールの都合上、3日しか空きがなかったけど、昨晩ふらっと雨が降って土地が湿り、今朝は天気もよく寒さも和らいでちょうどよかった。日頃の行いがよいみたいな話し。野菜を植えていない空きスペースなので耕す面積は少ない。8時半ぐらいから作業を始めて10時半には完了した。今回は草刈り代わりに耕しているだけなので手間がかからない。アルミブリッジを使って少し段差のある隣の田んぼも耕したいという意図もあるのだけど、事前に軽油を購入しておくのを忘れててあまり燃料がなかったので断念した。冬はあまり草が生えることもない。また春にやり直すのでいいだろう。
作業前
作業後
Uターン 午後から高速バスで三ノ宮に戻る。バスの停留所で待っていたら列が並び始めて40人ぐらいと見積もっていた。バスに乗車すると、乗車人数は39人と運転手さんが無線でやり取りしているのが聞こえた。前の停留所から乗ってきた人たちが7人なので、私と同じ停留所で乗った人は32人になる。見送りで一緒に並んでいた人たち (家族の付き添いとか) が数人というのは理屈にあうので、私の目算の40人ぐらいというのはそこそこ信用できる数字だったなと胸を張ってみた。その後も運転手さんが業務連絡で、どこそこの停留所で何人ぐらい待っているかをやり取りしていた。私が載っているバスで43人までは乗せたが、それ以降は臨時バスを出したようで、その後の停留所では別の臨時バスが乗客を乗せていた。高速バスは乗れないとお客さんからのクレームが厳しいと推測する。乗客が1台のバスから溢れそうなら臨時バスを出している。それはバス会社のスタッフが事前に停留所で数えたりして無線でやり取りしながら判断しているみたい。バスの停留所にチェックインする仕組みがあればリアルタイムに乗車人数をカウントして人間が人数を数えるみたいなことはしなくていいんじゃないかとか考えたりしてた。
お手伝い先は今日から働いている人もいたので、バスの中でコードレビューしたり、レビューの指摘事項を修正したりしながら軽く仕事始めのリハビリみたいなこともしてた。
86―エイティシックス― 以前 86―エイティシックス― の第2クールが始まることについて書いた。戻ってきてから、その第21話をみた。dアニメストアでみているので1週間遅れてみている。ここ最近は隔週放送になっていたから、なんとなく制作が難航しているのだろうとは伺えた。22話・23話の放送日時に関してのお知らせ で最終2話が3月以降に延期された。盛り上がってきたところ、残念だけど、職業がら人手不足な現場に感情移入するところもあるので、制作スタッフの方には無理のない形でがんばってもらえればと思う。最初のうちはあまりおもしろいとは感じていなかったけど、音楽と世界観が好きで見続けているうちに思い入れもできてきて、全体としてはよいアニメだと思う。あまりネタバレにならないよう、第2クールの本編とは直接関係ないところの話しをする。第2クールで登場するエルンストという暫定大統領がかっこいい。国家の命運を左右する作戦が失敗しそうになったときに次の台詞がある。
僕なんかを大統領に据え続けた、それが君たちの責任だ。
エルンストは (おそらく) 政治能力に長けていて、且つ人格者なんだけど、ちょっと狂気な思考をもつ人物として描かれている。しかし、だからこそ、自分よりも有能な為政者が統治すべきだと自覚していて、他に適任者がいないから仕方なく自分が長期間責任者をやっているといった設定？になっている。そういう多くの人の期待に応えているうちに精神がすり減っていく、関わる人が増えれば増えるほど、しがらみが大きくなっていく世の中の常みたいなものを伺えて、最後の最後は自分の精神を守るために何がなんでも期待に応えるという考え方よりも、自分なんかを責任者にした人たちが悪いという考え方で自分の精神を守ることに共感できた。現実として、すべての期待には応えられないし、すべての人の利害調整なんかもできない。責任のあるポジションでお仕事するとぶつかる課題だと思う。</description><content>&lt;p>3時に寝て7時に起きた。新撰組の時代劇をみてたら遅くなった。お正月っぽい感じ。午前中に &lt;a href="https://www.asahi.co.jp/potsunto/">ポツンと一軒家&lt;/a> の再放送を少しみた。この番組はもはや家族紹介の番組になっていてほのぼのするコンテンツになっているなと思えた。&lt;/p>
&lt;h2 id="田んぼ作業">田んぼ作業&lt;/h2>
&lt;p>草場になる前の田んぼをトラクターで耕した。スケジュールの都合上、3日しか空きがなかったけど、昨晩ふらっと雨が降って土地が湿り、今朝は天気もよく寒さも和らいでちょうどよかった。日頃の行いがよいみたいな話し。野菜を植えていない空きスペースなので耕す面積は少ない。8時半ぐらいから作業を始めて10時半には完了した。今回は草刈り代わりに耕しているだけなので手間がかからない。アルミブリッジを使って少し段差のある隣の田んぼも耕したいという意図もあるのだけど、事前に軽油を購入しておくのを忘れててあまり燃料がなかったので断念した。冬はあまり草が生えることもない。また春にやり直すのでいいだろう。&lt;/p>
&lt;p>作業前&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0103_field_before.jpg"/>
&lt;/figure>
&lt;p>作業後&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0103_field_after.jpg"/>
&lt;/figure>
&lt;h2 id="uターン">Uターン&lt;/h2>
&lt;p>午後から高速バスで三ノ宮に戻る。バスの停留所で待っていたら列が並び始めて40人ぐらいと見積もっていた。バスに乗車すると、乗車人数は39人と運転手さんが無線でやり取りしているのが聞こえた。前の停留所から乗ってきた人たちが7人なので、私と同じ停留所で乗った人は32人になる。見送りで一緒に並んでいた人たち (家族の付き添いとか) が数人というのは理屈にあうので、私の目算の40人ぐらいというのはそこそこ信用できる数字だったなと胸を張ってみた。その後も運転手さんが業務連絡で、どこそこの停留所で何人ぐらい待っているかをやり取りしていた。私が載っているバスで43人までは乗せたが、それ以降は臨時バスを出したようで、その後の停留所では別の臨時バスが乗客を乗せていた。高速バスは乗れないとお客さんからのクレームが厳しいと推測する。乗客が1台のバスから溢れそうなら臨時バスを出している。それはバス会社のスタッフが事前に停留所で数えたりして無線でやり取りしながら判断しているみたい。バスの停留所にチェックインする仕組みがあればリアルタイムに乗車人数をカウントして人間が人数を数えるみたいなことはしなくていいんじゃないかとか考えたりしてた。&lt;/p>
&lt;p>お手伝い先は今日から働いている人もいたので、バスの中でコードレビューしたり、レビューの指摘事項を修正したりしながら軽く仕事始めのリハビリみたいなこともしてた。&lt;/p>
&lt;h2 id="86エイティシックス">86―エイティシックス―&lt;/h2>
&lt;p>以前 &lt;a href="/diary/diary/posts/2021/1010/">86―エイティシックス―&lt;/a> の第2クールが始まることについて書いた。戻ってきてから、その第21話をみた。dアニメストアでみているので1週間遅れてみている。ここ最近は隔週放送になっていたから、なんとなく制作が難航しているのだろうとは伺えた。&lt;a href="https://anime-86.com/news/?id=59533">22話・23話の放送日時に関してのお知らせ&lt;/a> で最終2話が3月以降に延期された。盛り上がってきたところ、残念だけど、職業がら人手不足な現場に感情移入するところもあるので、制作スタッフの方には無理のない形でがんばってもらえればと思う。最初のうちはあまりおもしろいとは感じていなかったけど、音楽と世界観が好きで見続けているうちに思い入れもできてきて、全体としてはよいアニメだと思う。あまりネタバレにならないよう、第2クールの本編とは直接関係ないところの話しをする。第2クールで登場するエルンストという暫定大統領がかっこいい。国家の命運を左右する作戦が失敗しそうになったときに次の台詞がある。&lt;/p>
&lt;blockquote>
&lt;p>僕なんかを大統領に据え続けた、それが君たちの責任だ。&lt;/p>
&lt;/blockquote>
&lt;p>エルンストは (おそらく) 政治能力に長けていて、且つ人格者なんだけど、ちょっと狂気な思考をもつ人物として描かれている。しかし、だからこそ、自分よりも有能な為政者が統治すべきだと自覚していて、他に適任者がいないから仕方なく自分が長期間責任者をやっているといった設定？になっている。そういう多くの人の期待に応えているうちに精神がすり減っていく、関わる人が増えれば増えるほど、しがらみが大きくなっていく世の中の常みたいなものを伺えて、最後の最後は自分の精神を守るために何がなんでも期待に応えるという考え方よりも、自分なんかを責任者にした人たちが悪いという考え方で自分の精神を守ることに共感できた。現実として、すべての期待には応えられないし、すべての人の利害調整なんかもできない。責任のあるポジションでお仕事するとぶつかる課題だと思う。&lt;/p></content></item><item><title>電源アダプター入手</title><link>/diary/posts/2022/0102/</link><pubDate>Sun, 02 Jan 2022 09:31:47 +0900</pubDate><guid>/diary/posts/2022/0102/</guid><description>3時ぐらいまで本を読んでて、それから寝て8時に起きた。
USB-C の電源アダプター 大晦日、高速バスの乗車待ちの列に並んでいるときにふと気付いた。macbook の電源アダプターを持ってくるのを忘れた。その後の予定も詰まっていたので今更取りに帰るわけにもいかない。これまで10数年帰省してきて1度も忘れたことはなかったが、人間の注意力に頼っていると、いつかは失敗するというよい事例だ。完璧に自分の不注意で電源アダプターをバッグに入れ忘れた。反省はあとでやるとして、列に並びながら amazon のサイトをスマホで開いていた。検索すると、手ごろな価格帯で類似品がいくつか出てくる。調査する時間の余裕がなかったのであまり迷わず互換性があると書かれたものを選択した。3,588円。12月31日の15時過ぎに注文して1月2日の9時半に実家で受け取った。見た目は macbook の電源アダプターとほぼ同じ。この日記は購入した電源アダプターにより充電開始した macbook で書くことができた。お正月にも関わらず届けてくれた物流センターや宅急便の関係者に感謝。
バッタを倒しにアフリカへ 時間があるのと中盤を過ぎたのもあって一気に「第7章彷徨える博士」「第8章「神の罰」に挑む」「第9章我、サハラに死せず」「あとがき」と読み終えた。本書を読み終えてから著者のブログ記事である 『バッタを倒しにアフリカへ』行き、必殺技を見つけてきました を読むとまた違った印象を受ける。本書は著者の研究成果として論文を書くための、下積みの期間の物語と言える。アフリカへ行き、フィールドワークを通じてバッタのデータを収集し、研究資金が底をつきながらも著者の熱意や活動により、研究資金を得て、研究に専念するための環境を、文字通り、自ら作り上げていったという、言わば、著者がこれから評価を得るであろう研究の序章のような位置付けになる。あとがきでも研究内容の詳細は意図的に書いていないと書かれており、それは論文として提出できていれば詳細を書けるが、執筆時点では論文を完成させていなかったので詳細を伏せたとある。
著者は研究資金を得る活動の一環として広報活動やネット上の露出もあったため、そういう活動は時間を取られるため、研究に集中できない期間もあったことが伺える。2018年からSNS断ちして3年間、研究に没頭して論文を仕上げたというのも理解できる。また SNS でファンが増えるにつれ、誹謗中傷も増え、多くの励ましよりも数少ない誹謗中傷で傷つくといった話題も出てくる。私も SNS は時間の無駄だと考え、なるべく利用を減らそうとしているが、暇なときや時間つぶしにはよいサービスであることも確かでなかなか SNS と縁切りするところまではいけていない。
閑話休題。後半は著者の熱意に感情移入して研究がうまくいくといいなと応援しながら読み進めていた。研究がうまくいきそうな雰囲気のところで本書が終わってしまう。おそらく論文発表を一通り終えたら詳細も含めて続編を書いてくれるようだが、それはもう数年、もしかしたら10年以上先のことになるのかもしれない。著者は1980年生まれと私と1つしか違わない。40歳を過ぎて、私も周りもミドルエイジクライシスに悩む人たちをみかけるようになった。本当に価値のあることや世の中の役に立つことを研究できるのは著者にとっても幸せなことだろうというのがひしひしと伝わってくる。誰でもできるお仕事は基本的に受けるつもりはなく、自分の目指すキャリアにつながるお仕事、もしくはやる価値があると自ら判断したお仕事しかしないようにこの1年で方針を調整してきた。なにか新しいことに挑戦してみようという人にとって本書は勇気をもらえる内容だったと思う。
お風呂 実家の近くで うずしお温泉 という温泉が湧いていて、実家に帰ると銭湯へ行く感覚で温泉に入っていたりする。昔からあまり温泉を特別なものに感じていないのは地元にあって珍しくなかったからかもしれない。夜に入りに行って出てから少しストレッチをしてた。</description><content>&lt;p>3時ぐらいまで本を読んでて、それから寝て8時に起きた。&lt;/p>
&lt;h2 id="usb-c-の電源アダプター">USB-C の電源アダプター&lt;/h2>
&lt;p>大晦日、高速バスの乗車待ちの列に並んでいるときにふと気付いた。macbook の電源アダプターを持ってくるのを忘れた。その後の予定も詰まっていたので今更取りに帰るわけにもいかない。これまで10数年帰省してきて1度も忘れたことはなかったが、人間の注意力に頼っていると、いつかは失敗するというよい事例だ。完璧に自分の不注意で電源アダプターをバッグに入れ忘れた。反省はあとでやるとして、列に並びながら amazon のサイトをスマホで開いていた。検索すると、手ごろな価格帯で類似品がいくつか出てくる。調査する時間の余裕がなかったのであまり迷わず互換性があると書かれたものを選択した。3,588円。12月31日の15時過ぎに注文して1月2日の9時半に実家で受け取った。見た目は macbook の電源アダプターとほぼ同じ。この日記は購入した電源アダプターにより充電開始した macbook で書くことができた。お正月にも関わらず届けてくれた物流センターや宅急便の関係者に感謝。&lt;/p>
&lt;p>&lt;a href="https://www.amazon.co.jp/gp/product/B095JGC2J1?&amp;linkCode=li2&amp;tag=t2y-diary-22&amp;linkId=f17f72b5b69b4ead4247a593fd04e931&amp;language=ja_JP&amp;ref_=as_li_ss_il" target="_blank">&lt;img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B095JGC2J1&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=t2y-diary-22&amp;language=ja_JP" >&lt;/a>&lt;img src="https://ir-jp.amazon-adsystem.com/e/ir?t=t2y-diary-22&amp;language=ja_JP&amp;l=li2&amp;o=9&amp;a=B095JGC2J1" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />&lt;/p>
&lt;h2 id="バッタを倒しにアフリカへ">バッタを倒しにアフリカへ&lt;/h2>
&lt;p>時間があるのと中盤を過ぎたのもあって一気に「第7章彷徨える博士」「第8章「神の罰」に挑む」「第9章我、サハラに死せず」「あとがき」と読み終えた。本書を読み終えてから著者のブログ記事である &lt;a href="https://otokomaeno.hatenablog.com/entry/2021/10/30/170343">『バッタを倒しにアフリカへ』行き、必殺技を見つけてきました&lt;/a> を読むとまた違った印象を受ける。本書は著者の研究成果として論文を書くための、下積みの期間の物語と言える。アフリカへ行き、フィールドワークを通じてバッタのデータを収集し、研究資金が底をつきながらも著者の熱意や活動により、研究資金を得て、研究に専念するための環境を、文字通り、自ら作り上げていったという、言わば、著者がこれから評価を得るであろう研究の序章のような位置付けになる。あとがきでも研究内容の詳細は意図的に書いていないと書かれており、それは論文として提出できていれば詳細を書けるが、執筆時点では論文を完成させていなかったので詳細を伏せたとある。&lt;/p>
&lt;p>著者は研究資金を得る活動の一環として広報活動やネット上の露出もあったため、そういう活動は時間を取られるため、研究に集中できない期間もあったことが伺える。2018年からSNS断ちして3年間、研究に没頭して論文を仕上げたというのも理解できる。また SNS でファンが増えるにつれ、誹謗中傷も増え、多くの励ましよりも数少ない誹謗中傷で傷つくといった話題も出てくる。私も SNS は時間の無駄だと考え、なるべく利用を減らそうとしているが、暇なときや時間つぶしにはよいサービスであることも確かでなかなか SNS と縁切りするところまではいけていない。&lt;/p>
&lt;p>閑話休題。後半は著者の熱意に感情移入して研究がうまくいくといいなと応援しながら読み進めていた。研究がうまくいきそうな雰囲気のところで本書が終わってしまう。おそらく論文発表を一通り終えたら詳細も含めて続編を書いてくれるようだが、それはもう数年、もしかしたら10年以上先のことになるのかもしれない。著者は1980年生まれと私と1つしか違わない。40歳を過ぎて、私も周りもミドルエイジクライシスに悩む人たちをみかけるようになった。本当に価値のあることや世の中の役に立つことを研究できるのは著者にとっても幸せなことだろうというのがひしひしと伝わってくる。誰でもできるお仕事は基本的に受けるつもりはなく、自分の目指すキャリアにつながるお仕事、もしくはやる価値があると自ら判断したお仕事しかしないようにこの1年で方針を調整してきた。なにか新しいことに挑戦してみようという人にとって本書は勇気をもらえる内容だったと思う。&lt;/p>
&lt;h2 id="お風呂">お風呂&lt;/h2>
&lt;p>実家の近くで &lt;a href="http://awajiinfo.com/uzusio-onsen/">うずしお温泉&lt;/a> という温泉が湧いていて、実家に帰ると銭湯へ行く感覚で温泉に入っていたりする。昔からあまり温泉を特別なものに感じていないのは地元にあって珍しくなかったからかもしれない。夜に入りに行って出てから少しストレッチをしてた。&lt;/p></content></item><item><title>寝正月</title><link>/diary/posts/2022/0101/</link><pubDate>Sat, 01 Jan 2022 08:14:28 +0900</pubDate><guid>/diary/posts/2022/0101/</guid><description>0時に寝て5時に起きて2度寝して7時半に起きた。マンションより実家の方が部屋の中は寒い。
古札の返納 うちは厄年を気にする家で親が厄払いにいかないとうるさいので前厄・本厄・後厄の3年間、毎年厄払いのお札を授かっていた。近所に 薬王寺 という厄除で有名なお寺がある。今年は後厄のお札を返納するだけなので時間もかからずすぐに終えることができた。その後、ついでに初詣も行こうかと おのころ島神社 に行ってみた。参拝するのに100-200人ぐらい並んでいた。そんなに列も進むようにはみえなかったのでたこ焼きだけ買って離脱した。初詣はまた神戸に戻ってからにしよう。
バッタを倒しにアフリカへ 家に戻ってきてとくにやることもないのでテレビを眺めながら本を読む。「第4章裏切りの大干ばつ」「第5章聖地でのあがき」「第6章地雷の海を越えて」を読んだ。macbook の電源アダプターを持ち帰るのを忘れてきたのでスマホで kindle 本を読んでいる。これまで読んだことなかったけど、他に利用できるデバイスがなかったら読めるもんだなと小さい画面に少ない文字ながら読み進めた。
印象に残った内容を書いていく。干ばつで国中が大変な状況でもモーリタニアは隣国の難民を受け入れていたというエピソードが出てくる。イスラム教の宗教的背景などもあるんだろうなと思いながら読んでいた。日本はいま自己責任が強くなってしまって若ものが困窮していても助けを求めないというニュースを見かけたりもする。一面だけをみてどうこう言うのも適切ではないけど、豊かさとはなにかを考えさせられた。フランスの研究機関へ行った時にファーブル昆虫記のファーブルさんの生家を尋ねたエピソードも出てくる。私はファーブルさんのファンでもないのでとくに感銘を受けることはないけど、著者の思い入れが伝わってくるのでよかったなぁと思いながら読んでた。その後、バッタの群れをみつけて追跡するところとか、1-2年かけて調査してとうとうみつけたのかなと感慨深かった。現地の人から言うと大した群れではないとか、地雷原の先へ逃げられてしまって途中で追跡を断念したり、不完全燃焼ではあったけど、最初はそんなもんで地道にやっていくしかないというところも現実に即した内容でよかったと思う。</description><content>&lt;p>0時に寝て5時に起きて2度寝して7時半に起きた。マンションより実家の方が部屋の中は寒い。&lt;/p>
&lt;h2 id="古札の返納">古札の返納&lt;/h2>
&lt;p>うちは厄年を気にする家で親が厄払いにいかないとうるさいので前厄・本厄・後厄の3年間、毎年厄払いのお札を授かっていた。近所に &lt;a href="https://ykoj.jp/">薬王寺&lt;/a> という厄除で有名なお寺がある。今年は後厄のお札を返納するだけなので時間もかからずすぐに終えることができた。その後、ついでに初詣も行こうかと &lt;a href="http://www.freedom.ne.jp/onokoro/">おのころ島神社&lt;/a> に行ってみた。参拝するのに100-200人ぐらい並んでいた。そんなに列も進むようにはみえなかったのでたこ焼きだけ買って離脱した。初詣はまた神戸に戻ってからにしよう。&lt;/p>
&lt;h2 id="バッタを倒しにアフリカへ">バッタを倒しにアフリカへ&lt;/h2>
&lt;p>家に戻ってきてとくにやることもないのでテレビを眺めながら本を読む。「第4章裏切りの大干ばつ」「第5章聖地でのあがき」「第6章地雷の海を越えて」を読んだ。macbook の電源アダプターを持ち帰るのを忘れてきたのでスマホで kindle 本を読んでいる。これまで読んだことなかったけど、他に利用できるデバイスがなかったら読めるもんだなと小さい画面に少ない文字ながら読み進めた。&lt;/p>
&lt;p>印象に残った内容を書いていく。干ばつで国中が大変な状況でもモーリタニアは隣国の難民を受け入れていたというエピソードが出てくる。イスラム教の宗教的背景などもあるんだろうなと思いながら読んでいた。日本はいま自己責任が強くなってしまって若ものが困窮していても助けを求めないというニュースを見かけたりもする。一面だけをみてどうこう言うのも適切ではないけど、豊かさとはなにかを考えさせられた。フランスの研究機関へ行った時にファーブル昆虫記のファーブルさんの生家を尋ねたエピソードも出てくる。私はファーブルさんのファンでもないのでとくに感銘を受けることはないけど、著者の思い入れが伝わってくるのでよかったなぁと思いながら読んでた。その後、バッタの群れをみつけて追跡するところとか、1-2年かけて調査してとうとうみつけたのかなと感慨深かった。現地の人から言うと大した群れではないとか、地雷原の先へ逃げられてしまって途中で追跡を断念したり、不完全燃焼ではあったけど、最初はそんなもんで地道にやっていくしかないというところも現実に即した内容でよかったと思う。&lt;/p></content></item><item><title>大晦日の帰省</title><link>/diary/posts/2021/1231/</link><pubDate>Fri, 31 Dec 2021 08:14:16 +0900</pubDate><guid>/diary/posts/2021/1231/</guid><description>0時に寝て6時に起きた。朝活やってからまたちょっと寝てた。午後から高速バスで実家に帰った。
朝活: バッタを倒しにアフリカへ 金朝ツメトギ 2021-12-31 AM 6 金曜朝6時開催のもくもく会 に参加した。厳密には朝活のときは、はらさんの振り返りを聞いてた感じで、終わってから「第2章アフリカに染まる」「第3章旅立ちを前に」を読んだ。アフリカでの生活のあれこれが書いてあって、日本に住んでいる自分からは斬新でおもしろい。なにかの記事でアフリカが経済発展しない理由の1つに賄賂や汚職が横行していて云々みたいな記事を読んだことがある気がするけど、本書の中でもちょくちょく賄賂を要求されたり、不正に給料をもらおうとぼったくりされたこととかが書いてある。日本人からみると賄賂やぼったくりの金額もそんなに高くないので払ってしまったりしてそれが返って社会に歪みを与えてたりするのかな？とも思えた。
モーリタニアの公用語がフランス語で著者は英語しか話せなくて、言葉の通じない国で現地の人たちと仲良くなるのは相当の苦労が忍ばれる。著者は文章を読んでいてもおもしろい感じだけど、言葉のスキルとは別にコミュニケーション能力が高い人なんだろうということも伺える。言葉が通じなくても仲良くなれる雰囲気の人はいると思う。あとは日本と比べると生活環境がよくなくて、いまの自分は外国で暮らすとかできないだろうなと読んでて思うこともあった。
高校の同級生と飲む 毎年、大晦日に集まって近況報告をしたりしてた。コロナ禍があって自粛していたので3年ぶりに集まった。とくに変わりなくみんな元気でいた。18時頃から飲みながらだらだらしてた。私は前に焼き鳥屋さんのマスターのおすすめで飲んだ だいやめ を持っていった。そのとき飲んだお湯割もおいしかったけど、今回はソーダ割りを試してみて、それもおいしかった。友だちも初めてだいやめを飲んで、これ芋焼酎なの？と驚いていた。初めて飲んだら驚くという意味でもこの焼酎はお土産に向いている。
友だちの1人はゴルフにはまっているという話。調子がよかったら80台でまわれるぐらいで、私にはわからないけど中級者と言えるだけのレベルに達しているらしい。ゴルフは接待や出世のためのツールみたいなイメージが私にはある。したがって私とは無縁でやることはないような気がする。かなり歩くから健康のためにもよいという話もあるのでゴルフ自体を忌避しているわけでもない。スポーツとして楽しんでやっているのはよいと思う。
夜はテレビで RIZIN をみていた。出場している選手は全然わからないけど、大晦日っぽいなと思いながらみていた。</description><content>&lt;p>0時に寝て6時に起きた。朝活やってからまたちょっと寝てた。午後から高速バスで実家に帰った。&lt;/p>
&lt;h2 id="朝活-バッタを倒しにアフリカへ">朝活: バッタを倒しにアフリカへ&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=WRW2MIbe3uc">金朝ツメトギ 2021-12-31 AM 6 金曜朝6時開催のもくもく会&lt;/a> に参加した。厳密には朝活のときは、はらさんの振り返りを聞いてた感じで、終わってから「第2章アフリカに染まる」「第3章旅立ちを前に」を読んだ。アフリカでの生活のあれこれが書いてあって、日本に住んでいる自分からは斬新でおもしろい。なにかの記事でアフリカが経済発展しない理由の1つに賄賂や汚職が横行していて云々みたいな記事を読んだことがある気がするけど、本書の中でもちょくちょく賄賂を要求されたり、不正に給料をもらおうとぼったくりされたこととかが書いてある。日本人からみると賄賂やぼったくりの金額もそんなに高くないので払ってしまったりしてそれが返って社会に歪みを与えてたりするのかな？とも思えた。&lt;/p>
&lt;p>モーリタニアの公用語がフランス語で著者は英語しか話せなくて、言葉の通じない国で現地の人たちと仲良くなるのは相当の苦労が忍ばれる。著者は文章を読んでいてもおもしろい感じだけど、言葉のスキルとは別にコミュニケーション能力が高い人なんだろうということも伺える。言葉が通じなくても仲良くなれる雰囲気の人はいると思う。あとは日本と比べると生活環境がよくなくて、いまの自分は外国で暮らすとかできないだろうなと読んでて思うこともあった。&lt;/p>
&lt;h2 id="高校の同級生と飲む">高校の同級生と飲む&lt;/h2>
&lt;p>毎年、大晦日に集まって近況報告をしたりしてた。コロナ禍があって自粛していたので3年ぶりに集まった。とくに変わりなくみんな元気でいた。18時頃から飲みながらだらだらしてた。私は前に焼き鳥屋さんのマスターのおすすめで飲んだ &lt;a href="/diary/diary/posts/2021/1109/#呑み">だいやめ&lt;/a> を持っていった。そのとき飲んだお湯割もおいしかったけど、今回はソーダ割りを試してみて、それもおいしかった。友だちも初めてだいやめを飲んで、これ芋焼酎なの？と驚いていた。初めて飲んだら驚くという意味でもこの焼酎はお土産に向いている。&lt;/p>
&lt;p>友だちの1人はゴルフにはまっているという話。調子がよかったら80台でまわれるぐらいで、私にはわからないけど中級者と言えるだけのレベルに達しているらしい。ゴルフは接待や出世のためのツールみたいなイメージが私にはある。したがって私とは無縁でやることはないような気がする。かなり歩くから健康のためにもよいという話もあるのでゴルフ自体を忌避しているわけでもない。スポーツとして楽しんでやっているのはよいと思う。&lt;/p>
&lt;p>夜はテレビで RIZIN をみていた。出場している選手は全然わからないけど、大晦日っぽいなと思いながらみていた。&lt;/p></content></item><item><title>銀行での手続き</title><link>/diary/posts/2021/1230/</link><pubDate>Thu, 30 Dec 2021 08:24:55 +0900</pubDate><guid>/diary/posts/2021/1230/</guid><description>0時に寝て6時に起きた。10時に銀行へ行く予定があったから普通に起きて8時にはオフィスにいた。予定があればちゃんと起きれるのに休日はだらけてしまう。午後から気分転換に漫画喫茶へ行ったら満室で入れなくて、そのまま帰ってだらだらしてた。
BizSTATION Light BizSTATION Light (以下light) という無償サービスを使っているが、このサービスは契約時に OS 縛りがあって macOS と Windows のどちらかでしか使えないサービスとなっている。誤った意識の高さでセキュリティを考えたような制約にみえる。しかし、現状そうなっているので仕方ない。これまで macOS でサービスを利用してきたが、Windows マシンを購入したのでこのサービスも Windows に切り替えることにした。なぜ macOS だとダメかというと、BizSTATION という有償サービスがある。月々1,760円を支払うと light よりも高機能なサービスを受けられる。macOS でも利用できるのだけど、macOS の場合、有償でも API サービスを利用できない。Web サービスでありながら OS で認証方式を変えているため、その仕様制限で API サービスは利用できないという理屈になるらしい。API サービスを利用できなければ会計システムと連携できないため、これまで light しか使ってこなかった。Windows マシンを購入したのでこの機会に macOS から Windows へ契約を変更することに決めた。
ここで macOS から Windows への変更は既存契約を解約して新規契約を結ぶという手順になるらしい。同じ会社・口座なのに OS の変更すらできないというのは不便で、新規契約なので登録手続きに3週間ぐらいはサービスを利用できない期間ができる。いま API サービスを使っていないから全く問題ないけど、こういう利便性の悪さからも有償サービスに切り替えるモチベーションをなくしてしまった。というのは、API サービスなしで1年以上やり繰りしてきて、いまお金を払えば API サービスを利用できると言っても現時点では別に困らないから不要だと考えている。いずれ必要になる可能性もあるので、いまのうちに Windows マシンに契約を切り替えておこうと考えた次第。
昨日、準備した 経営セーフティ共済 の前納付の書類もついでに確認してもらって問題なしということでそのまま提出してきた。</description><content>&lt;p>0時に寝て6時に起きた。10時に銀行へ行く予定があったから普通に起きて8時にはオフィスにいた。予定があればちゃんと起きれるのに休日はだらけてしまう。午後から気分転換に漫画喫茶へ行ったら満室で入れなくて、そのまま帰ってだらだらしてた。&lt;/p>
&lt;h2 id="bizstation-light">BizSTATION Light&lt;/h2>
&lt;p>&lt;a href="https://bizstation.bk.mufg.jp/bizlight/index.html">BizSTATION Light&lt;/a> (以下light) という無償サービスを使っているが、このサービスは契約時に OS 縛りがあって macOS と Windows のどちらかでしか使えないサービスとなっている。誤った意識の高さでセキュリティを考えたような制約にみえる。しかし、現状そうなっているので仕方ない。これまで macOS でサービスを利用してきたが、Windows マシンを購入したのでこのサービスも Windows に切り替えることにした。なぜ macOS だとダメかというと、&lt;a href="https://bizstation.bk.mufg.jp/bizstation/index.html">BizSTATION&lt;/a> という有償サービスがある。月々1,760円を支払うと light よりも高機能なサービスを受けられる。macOS でも利用できるのだけど、macOS の場合、有償でも API サービスを利用できない。Web サービスでありながら OS で認証方式を変えているため、その仕様制限で API サービスは利用できないという理屈になるらしい。API サービスを利用できなければ会計システムと連携できないため、これまで light しか使ってこなかった。Windows マシンを購入したのでこの機会に macOS から Windows へ契約を変更することに決めた。&lt;/p>
&lt;p>ここで macOS から Windows への変更は既存契約を解約して新規契約を結ぶという手順になるらしい。同じ会社・口座なのに OS の変更すらできないというのは不便で、新規契約なので登録手続きに3週間ぐらいはサービスを利用できない期間ができる。いま API サービスを使っていないから全く問題ないけど、こういう利便性の悪さからも有償サービスに切り替えるモチベーションをなくしてしまった。というのは、API サービスなしで1年以上やり繰りしてきて、いまお金を払えば API サービスを利用できると言っても現時点では別に困らないから不要だと考えている。いずれ必要になる可能性もあるので、いまのうちに Windows マシンに契約を切り替えておこうと考えた次第。&lt;/p>
&lt;p>昨日、準備した &lt;a href="/diary/diary/posts/2021/1229/#経営セーフティ共済の前納">経営セーフティ共済&lt;/a> の前納付の書類もついでに確認してもらって問題なしということでそのまま提出してきた。&lt;/p></content></item><item><title>年末の事務手続き</title><link>/diary/posts/2021/1229/</link><pubDate>Wed, 29 Dec 2021 11:39:19 +0900</pubDate><guid>/diary/posts/2021/1229/</guid><description>0時に寝て5時に起きて2度寝して8時に起きた。昨日と全く同じような起き方でだらけてきた。一昨日に作成しておいた PR が approve されたので、お昼にマージしてその続きのコードもちょっと書いたりしてた。
経営セーフティ共済の前納 昨年度から経営セーフティ共済に加入している。3月に前納 (一括納付) しているので、今年度も同様に 掛金の前納 を行う。前納は明示的に申請しない限り、期間が過ぎると月々の支払いに変更されてしまう。決算月で前納するかどうかで経費の損金算入のタイミングが変わってきて、法人税の税金の支払いに影響がある。ある記事によると、2ヶ月前から手続きできると書いてあった。それが正しいなら1月からとなってしまうけど、中小機構のサイトの説明にはいつから手続き可能とは書いていない。ひとまず書類をダウンロードして必要事項を記入した。明日、別件で銀行に行く機会があるので、ついでに前納手続き可能なら書類を提出してくる。
Oculus Link のセットアップ Windows マシンを購入した理由 の1つに Oculus Link を使うことがあった。市販の USB 3.0 ケーブルは購入していたので Oculus Link アプリをインストールしたり、設定したりしていた。久しぶりにヘッドマウントを起動したので OS のアップデートなどもしていた。VRChat もやったことないのでこの機に試してみる。時間に余裕ができたら VR でもなにか活動していきたい。
「Oculus Link」のセットアップを徹底解説 注意点やケーブル選びも</description><content>&lt;p>0時に寝て5時に起きて2度寝して8時に起きた。昨日と全く同じような起き方でだらけてきた。一昨日に作成しておいた PR が approve されたので、お昼にマージしてその続きのコードもちょっと書いたりしてた。&lt;/p>
&lt;h2 id="経営セーフティ共済の前納">経営セーフティ共済の前納&lt;/h2>
&lt;p>昨年度から経営セーフティ共済に加入している。3月に前納 (一括納付) しているので、今年度も同様に &lt;a href="https://www.smrj.go.jp/kyosai/tkyosai/customer/procedure/installment/02.html">掛金の前納&lt;/a> を行う。前納は明示的に申請しない限り、期間が過ぎると月々の支払いに変更されてしまう。決算月で前納するかどうかで経費の損金算入のタイミングが変わってきて、法人税の税金の支払いに影響がある。ある記事によると、2ヶ月前から手続きできると書いてあった。それが正しいなら1月からとなってしまうけど、中小機構のサイトの説明にはいつから手続き可能とは書いていない。ひとまず書類をダウンロードして必要事項を記入した。明日、別件で銀行に行く機会があるので、ついでに前納手続き可能なら書類を提出してくる。&lt;/p>
&lt;h2 id="oculus-link-のセットアップ">Oculus Link のセットアップ&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1103/#asus-rog-zephyrus-g15-ga503qr">Windows マシンを購入した理由&lt;/a> の1つに Oculus Link を使うことがあった。市販の USB 3.0 ケーブルは購入していたので Oculus Link アプリをインストールしたり、設定したりしていた。久しぶりにヘッドマウントを起動したので OS のアップデートなどもしていた。&lt;a href="https://hello.vrchat.com/">VRChat&lt;/a> もやったことないのでこの機に試してみる。時間に余裕ができたら VR でもなにか活動していきたい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.moguravr.com/oculus-link-setup-explanation/">「Oculus Link」のセットアップを徹底解説 注意点やケーブル選びも&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>目標はもうない</title><link>/diary/posts/2021/1228/</link><pubDate>Tue, 28 Dec 2021 10:27:20 +0900</pubDate><guid>/diary/posts/2021/1228/</guid><description>0時に寝て5時に起きて2度寝して8時に起きた。前日やや飲み過ぎて軽い2日酔い。
目標考察 この前ストレッチを受けているときにトレーナーさんから「来年の目標はなんですか？」とふと聞かれた。目標という単語に私は忌避感をもっているなと感じた。というのは、普通の規模の会社でサラリーマンやっていれば、期首に目標設定やって期末に評価して昇格やボーナスの金額が変わるといった制度になっていることが多いと思う。私は昔から目標とか意識して働くよりも、働いている過程や状況の変化の中でそのときに大事だと自分が思ったことに注力するような方だった。なので、期首に立てた目標とは全然異なる業績をあげたりすると、目標とか無関係に評価が決まることが多かった。この評価には高い評価を受けたこともあるし、低い評価を受けたこともある。そして、評価は上長やより上位の人たちのさじ加減で決まることも多かった。目標とか組織の論理よりもプロジェクトの状況にとって大事かどうかを自分で判断して行動するから目標が有名無実化しやすい方だった。そういう働き方をしていると、目標とか評価とか無駄な労力よなと思ってしまう。いまマイクロ法人として独立して、目標と評価という無駄な労力を費やさなくて済むので、そういったストレスからは解放された生活を送れるようになった。
閑話休題。トレーナーさんにはこう回答した。目標とかとくにないです。日々、健康で過ごすぐらいのことしか考えてませんと意識の低い回答をした。一方で私はやりたいと思ったことはすでにやっているところはある。サラリーマン時代の刷り込みからか、目標とは計画を指していて、すでにやっていることは目標に含めないように考えてしまうところがある。進行中であってもやり終えるまでを目標と設定して喧伝してもよいとは思うけど、私がすでにやっていることを目標とみなさないのは、上述したように、やっている過程や状況の変化にあわせて変えていくため、予め事前に立てておいた目標とは異なる結果になることが経験的に多かったことに起因する。もうこの歳になると目標を立てるというよりも、目標となることをやっているかどうかの方が重要になってきたという思いもある。
いずれにしても目標や評価のような行動を私は2度とやることはないだろうという話し。
実践知本の読み直し 課題管理における背景の理論考察を始めたとき、早い段階で読んだ本に 実践知 — エキスパートの知性 がある。8月頃に読んだ。当時は知識にもいろんな分野や研究成果があるとわかった程度だった。その後、認知心理学やスクラム開発の背景を学ぶうちに実践知とも関連があるように思えてきた。背景知識が増えた状態で、いまこの本を読み返せばまた違った理解があるのではないかと考えてまた読み直すことにした。</description><content>&lt;p>0時に寝て5時に起きて2度寝して8時に起きた。前日やや飲み過ぎて軽い2日酔い。&lt;/p>
&lt;h2 id="目標考察">目標考察&lt;/h2>
&lt;p>この前ストレッチを受けているときにトレーナーさんから「来年の目標はなんですか？」とふと聞かれた。目標という単語に私は忌避感をもっているなと感じた。というのは、普通の規模の会社でサラリーマンやっていれば、期首に目標設定やって期末に評価して昇格やボーナスの金額が変わるといった制度になっていることが多いと思う。私は昔から目標とか意識して働くよりも、働いている過程や状況の変化の中でそのときに大事だと自分が思ったことに注力するような方だった。なので、期首に立てた目標とは全然異なる業績をあげたりすると、目標とか無関係に評価が決まることが多かった。この評価には高い評価を受けたこともあるし、低い評価を受けたこともある。そして、評価は上長やより上位の人たちのさじ加減で決まることも多かった。目標とか組織の論理よりもプロジェクトの状況にとって大事かどうかを自分で判断して行動するから目標が有名無実化しやすい方だった。そういう働き方をしていると、目標とか評価とか無駄な労力よなと思ってしまう。いまマイクロ法人として独立して、目標と評価という無駄な労力を費やさなくて済むので、そういったストレスからは解放された生活を送れるようになった。&lt;/p>
&lt;p>閑話休題。トレーナーさんにはこう回答した。目標とかとくにないです。日々、健康で過ごすぐらいのことしか考えてませんと意識の低い回答をした。一方で私はやりたいと思ったことはすでにやっているところはある。サラリーマン時代の刷り込みからか、目標とは計画を指していて、すでにやっていることは目標に含めないように考えてしまうところがある。進行中であってもやり終えるまでを目標と設定して喧伝してもよいとは思うけど、私がすでにやっていることを目標とみなさないのは、上述したように、やっている過程や状況の変化にあわせて変えていくため、予め事前に立てておいた目標とは異なる結果になることが経験的に多かったことに起因する。もうこの歳になると目標を立てるというよりも、目標となることをやっているかどうかの方が重要になってきたという思いもある。&lt;/p>
&lt;p>いずれにしても目標や評価のような行動を私は2度とやることはないだろうという話し。&lt;/p>
&lt;h2 id="実践知本の読み直し">実践知本の読み直し&lt;/h2>
&lt;p>課題管理における背景の理論考察を始めたとき、早い段階で読んだ本に &lt;a href="https://b.kobe-u.ac.jp/books/b007/">実践知 — エキスパートの知性&lt;/a> がある。8月頃に読んだ。当時は知識にもいろんな分野や研究成果があるとわかった程度だった。その後、認知心理学やスクラム開発の背景を学ぶうちに実践知とも関連があるように思えてきた。背景知識が増えた状態で、いまこの本を読み返せばまた違った理解があるのではないかと考えてまた読み直すことにした。&lt;/p></content></item><item><title>仕事納め</title><link>/diary/posts/2021/1227/</link><pubDate>Mon, 27 Dec 2021 08:04:38 +0900</pubDate><guid>/diary/posts/2021/1227/</guid><description>0時に寝て6時に起きた。今日は仕事納めだー。
ミステリと言う勿れ 10巻 読んだのは昨日の夜なんだけど、ミステリと言う勿れの10巻 の電子版があることにたまたま気付いて購入した。そして、読みふけった。第9巻から発生した事件の続きで第10巻で進展して犯人が判明して解決した。もうね。ちょっとこの巻はすごかった。この漫画に出てくる犯人は普通の人間の常識や感覚からちょっとズレた変な人が犯人みたいなところはあった。今回はさらにそれが斜め上にズレて何一つ犯人が語る理屈や動機を理解できなくて、犯人が分かってから解決編をやっている途中でこの漫画の著者はまともな精神状態でこの漫画を描いているの？と著者の健康を心配をしてしまうぐらい、犯人の人間像に私は理解ができなかった。もちろん娯楽作品としては十分におもしろいのだけど、私にとっては理屈がわからんというのは苦痛でもあるのでわかるために読み直そうと思ってしまうので何回か読み直すことになると思う。
仕事納め 対外的には今日が仕事納め。内部的には28-29日は自社のお仕事をして30日に実家に帰るかどうか、まだ決めてない。天気次第でもいいかな。去年はうまくいかなくて31日までお仕事していたことを思うと今年は27日で締められて余裕があるように感じる。ちょうど帰省したおかださんがうちのオフィスまで訪ねて来てくれた。去年はコロナ禍で帰省されなかったので2年ぶり。オフィスの会議室を使ったことなくて、お試しも含めて軽く課題管理のビジネスアイディアについて共有した。とくに反応はなかったけれど、ちゃんと準備もしていないので気軽に雑談した。その後、近くの焼き鳥屋さんとワインバーで飲んでた。ある意味、納会の代わりにもなった。近況、昔話、技術動向、最近読んだ本などの話しをした。1人だったらほぼ100%納会はやらないので最終日に飲み会があって納会のような気分にはなった。今後は仕事納めの日に飲み会を入れるようにしていこうと思った。</description><content>&lt;p>0時に寝て6時に起きた。今日は仕事納めだー。&lt;/p>
&lt;h2 id="ミステリと言う勿れ-10巻">ミステリと言う勿れ 10巻&lt;/h2>
&lt;p>読んだのは昨日の夜なんだけど、&lt;a href="https://www.shogakukan.co.jp/books/09871497">ミステリと言う勿れの10巻&lt;/a> の電子版があることにたまたま気付いて購入した。そして、読みふけった。第9巻から発生した事件の続きで第10巻で進展して犯人が判明して解決した。もうね。ちょっとこの巻はすごかった。この漫画に出てくる犯人は普通の人間の常識や感覚からちょっとズレた変な人が犯人みたいなところはあった。今回はさらにそれが斜め上にズレて何一つ犯人が語る理屈や動機を理解できなくて、犯人が分かってから解決編をやっている途中でこの漫画の著者はまともな精神状態でこの漫画を描いているの？と著者の健康を心配をしてしまうぐらい、犯人の人間像に私は理解ができなかった。もちろん娯楽作品としては十分におもしろいのだけど、私にとっては理屈がわからんというのは苦痛でもあるのでわかるために読み直そうと思ってしまうので何回か読み直すことになると思う。&lt;/p>
&lt;h2 id="仕事納め">仕事納め&lt;/h2>
&lt;p>対外的には今日が仕事納め。内部的には28-29日は自社のお仕事をして30日に実家に帰るかどうか、まだ決めてない。天気次第でもいいかな。去年はうまくいかなくて31日までお仕事していたことを思うと今年は27日で締められて余裕があるように感じる。ちょうど帰省したおかださんがうちのオフィスまで訪ねて来てくれた。去年はコロナ禍で帰省されなかったので2年ぶり。オフィスの会議室を使ったことなくて、お試しも含めて軽く課題管理のビジネスアイディアについて共有した。とくに反応はなかったけれど、ちゃんと準備もしていないので気軽に雑談した。その後、近くの焼き鳥屋さんとワインバーで飲んでた。ある意味、納会の代わりにもなった。近況、昔話、技術動向、最近読んだ本などの話しをした。1人だったらほぼ100%納会はやらないので最終日に飲み会があって納会のような気分にはなった。今後は仕事納めの日に飲み会を入れるようにしていこうと思った。&lt;/p></content></item><item><title>メンタルモデルの参考</title><link>/diary/posts/2021/1226/</link><pubDate>Sun, 26 Dec 2021 13:49:44 +0900</pubDate><guid>/diary/posts/2021/1226/</guid><description>0時過ぎに寝て6時に起きてだらだらしてて8時に起き上がった。
会議室予約 明日おかださんと話すのでシェアオフィスの 会議室予約サイト で会議室を予約した。この予約サイト、リリースされて1年近く経つけど、本当に使いにくい。技術の無駄遣いって言葉がしっくり来る。会議室はオフィスを借りている人には5時間/月まで無料で使える。元町オフィスの会議室を予約するのは初めてかな。どんな使い勝手かを試してみるよい機会でもある。明日に備えて設備やモニターチェックをしていた。
ソフトウェアエンジニアと技術力 そねさんの1ヶ月以上前に公開されたスライドを、あとで読みこじらせて、今日読み直した。課題管理のためのメンタルモデルを確立しないといけないと考えるようになってきた。そのためのヒントになるかな？とちゃんとメモを取りながら精読しようと思って1ヶ月放置していた。他のことに注力していると別のことができなくなる。ソフトウェアエンジニアという定義をあまりみたことがなくて斬新だったり、書いてある内容そのものは共感できるものではあった。一方で精神論や思想的な話しが多くて、もう少し理論的な裏付けや技術的な背景があった方が私の好みだったなと1ヶ月も置いておいたから期待値が上がってしまっていた。
ソフトウェアエンジニアとは、科学 (ソフトウェア) を活用して問題を解決する力をもつ人であり、ソフトウェアを使いこなして最小の労力で問題を解決することを技術力が高いと言う。</description><content>&lt;p>0時過ぎに寝て6時に起きてだらだらしてて8時に起き上がった。&lt;/p>
&lt;h2 id="会議室予約">会議室予約&lt;/h2>
&lt;p>明日おかださんと話すのでシェアオフィスの &lt;a href="https://booking.wooc.co.jp/wooc/">会議室予約サイト&lt;/a> で会議室を予約した。この予約サイト、リリースされて1年近く経つけど、本当に使いにくい。技術の無駄遣いって言葉がしっくり来る。会議室はオフィスを借りている人には5時間/月まで無料で使える。元町オフィスの会議室を予約するのは初めてかな。どんな使い勝手かを試してみるよい機会でもある。明日に備えて設備やモニターチェックをしていた。&lt;/p>
&lt;h2 id="ソフトウェアエンジニアと技術力">ソフトウェアエンジニアと技術力&lt;/h2>
&lt;p>そねさんの1ヶ月以上前に公開されたスライドを、あとで読みこじらせて、今日読み直した。課題管理のためのメンタルモデルを確立しないといけないと考えるようになってきた。そのためのヒントになるかな？とちゃんとメモを取りながら精読しようと思って1ヶ月放置していた。他のことに注力していると別のことができなくなる。ソフトウェアエンジニアという定義をあまりみたことがなくて斬新だったり、書いてある内容そのものは共感できるものではあった。一方で精神論や思想的な話しが多くて、もう少し理論的な裏付けや技術的な背景があった方が私の好みだったなと1ヶ月も置いておいたから期待値が上がってしまっていた。&lt;/p>
&lt;blockquote>
&lt;p>ソフトウェアエンジニアとは、科学 (ソフトウェア) を活用して問題を解決する力をもつ人であり、ソフトウェアを使いこなして最小の労力で問題を解決することを技術力が高いと言う。&lt;/p>
&lt;/blockquote>
&lt;iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/fb6aa6332db84aceafc121588984b95f" title="ソフトウェアエンジニアと技術力 / developer-lifework" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;" data-ratio="1.78343949044586">&lt;/iframe></content></item><item><title>ワーケーションの情報共有</title><link>/diary/posts/2021/1225/</link><pubDate>Sat, 25 Dec 2021 10:49:00 +0900</pubDate><guid>/diary/posts/2021/1225/</guid><description>23時に寝て2時前に起きてまた寝て6時に起きてまた寝て8時に起きた。
ストレッチ 今週もお仕事がいっぱいいっぱいで全然ストレッチできなかった。今日の開脚幅は開始前167cmで、ストレッチ後169.5cmと前回よりも数値が悪くなった。さぼっていたから仕方ない。一方で右股関節の不可動領域が週ごとによくなっていて、可動していなかった領域が稼働することによって、内転筋に張りが出るようになっているとのこと。システムで例えると、ある地点のパフォーマンスが改善することで別の地点にニーポイントが移動するような話しだと思う。日常生活でもなんか違和感があると思ってはいたので改善していきたい。
ワーケーション準備 これまで準備してきた 内容を旅のしおりにまとめている。その内容を参加者4人で共有するための打ち合わせをした。これまで私が更新してきた旅のしおりの内容を一通り確認して、みんなで付近の観光案内などをみたりしていた。城崎温泉は720年開湯というくだりを話すと、歴史好きの人たちは反応して平安京やら平城京やらの年号で盛り上がった。私はもともと学校の書架に置いてある「日本の歴史」というタイトルの漫画を3回ぐらい読み込んでいた児童だったので観光地は歴史から入る癖がある。そんな人じゃなくても、人間、歳をとると歴史の重みみたいなのを感じるようになって、歴史に敬意を払うようになるんじゃないかと勝手に思っている。1泊目の宿は予約済みだけど、2泊目どうする？という話しをしていたら、たまたま宿泊予約サイトで Book store iChi ゲストハウス をみつけた。1部屋4人で宿泊できるし、料金も安いし、ゲストハウスとか泊まったことないという参加者もいるし、おもしろそうみたいなノリになって、ノリのまま予約した。ふるさと応援！ひょうごを旅しようキャンペーン も適用できるという話しなので兵庫在住なら2000円/人の割り引きを受けられる。なにかしら情報共有で他人と話すと新しい行動や調査のヒントがあったりしてモノゴトが進むきっかけになると実感した打ち合わせだった。
たまたま話していて「794 鳴くよウグイス平安京」は共通認識だけど、私は「710 なんと都を移す平城京」で覚えてたんだけど、平城京の語呂合わせはバリエーションがあるみたい。しかもヤフー知恵袋みたら「南都」という名詞バージョンもあるとのこと。へー。https://t.co/IvBLJ30inP
&amp;mdash; Tetsuya Morimoto (@t2y) December 25, 2021</description><content>&lt;p>23時に寝て2時前に起きてまた寝て6時に起きてまた寝て8時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週もお仕事がいっぱいいっぱいで全然ストレッチできなかった。今日の開脚幅は開始前167cmで、ストレッチ後169.5cmと前回よりも数値が悪くなった。さぼっていたから仕方ない。一方で右股関節の不可動領域が週ごとによくなっていて、可動していなかった領域が稼働することによって、内転筋に張りが出るようになっているとのこと。システムで例えると、ある地点のパフォーマンスが改善することで別の地点にニーポイントが移動するような話しだと思う。日常生活でもなんか違和感があると思ってはいたので改善していきたい。&lt;/p>
&lt;h2 id="ワーケーション準備">ワーケーション準備&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1217/#ワーケーション準備">これまで準備してきた&lt;/a> 内容を旅のしおりにまとめている。その内容を参加者4人で共有するための打ち合わせをした。これまで私が更新してきた旅のしおりの内容を一通り確認して、みんなで付近の観光案内などをみたりしていた。城崎温泉は720年開湯というくだりを話すと、歴史好きの人たちは反応して平安京やら平城京やらの年号で盛り上がった。私はもともと学校の書架に置いてある「日本の歴史」というタイトルの漫画を3回ぐらい読み込んでいた児童だったので観光地は歴史から入る癖がある。そんな人じゃなくても、人間、歳をとると歴史の重みみたいなのを感じるようになって、歴史に敬意を払うようになるんじゃないかと勝手に思っている。1泊目の宿は予約済みだけど、2泊目どうする？という話しをしていたら、たまたま宿泊予約サイトで &lt;a href="https://www.bookstoreichi.com/guesthouse">Book store iChi ゲストハウス&lt;/a> をみつけた。1部屋4人で宿泊できるし、料金も安いし、ゲストハウスとか泊まったことないという参加者もいるし、おもしろそうみたいなノリになって、ノリのまま予約した。&lt;a href="https://www.hyogo-tourism.jp/furusato-ouen/">ふるさと応援！ひょうごを旅しようキャンペーン&lt;/a> も適用できるという話しなので兵庫在住なら2000円/人の割り引きを受けられる。なにかしら情報共有で他人と話すと新しい行動や調査のヒントがあったりしてモノゴトが進むきっかけになると実感した打ち合わせだった。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">たまたま話していて「794 鳴くよウグイス平安京」は共通認識だけど、私は「710 なんと都を移す平城京」で覚えてたんだけど、平城京の語呂合わせはバリエーションがあるみたい。しかもヤフー知恵袋みたら「南都」という名詞バージョンもあるとのこと。へー。&lt;a href="https://t.co/IvBLJ30inP">https://t.co/IvBLJ30inP&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1474655368387371008?ref_src=twsrc%5Etfw">December 25, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item><item><title>冒険をするチームにはコックが必要</title><link>/diary/posts/2021/1224/</link><pubDate>Fri, 24 Dec 2021 08:58:51 +0900</pubDate><guid>/diary/posts/2021/1224/</guid><description>0時に寝て4時に起きて、なんとなくドラクエタクトしてたら6時になってそのまま朝活に出てた。sns のタイムラインを眺めていると今日で仕事納めにしている人をちらほらみかけた。私は外向けには月曜日が仕事納めで、内向けには水曜日までは働くかな。30日は実家に帰るか、ゆっくり休むか、まだ決めてない。
朝活: バッタを倒しにアフリカへ 先日たまたまみかけた記事から購入した ことを書いた。積ん読状態だったけど、技術書ばかりも疲れるので気分転換に読み進めることにした。
第1章サハラに青春を賭けるを読んだ。著者はおもしろい人だというのは文章から伝わってくるので何を書いてても驚きはしないが、それでもアフリカ(モーリタニア)の生活や状況などは全く知らないことばかりなので何を読んでも斬新には感じる。モーリタニア・イスラム共和国 という国すら私は知らなかった。
第1章は渡航してフィールワークに出掛けた内容が書いてあった。砂漠へ行くチームにコックが必要というのは、ドラクエ脳の自分には出てこない発想で現実は旅をしながらおいしいものも食べたいという欲求は強いのだなぁという学び？があった。
slack のマルチチャンネルゲスト これまでお手伝い先では slack のシングルチャンネルゲストで参加していた。必然的に1つのチャンネルにすべてのプロジェクトメンバー20人がいる。技術的な話題を気軽に投稿しにくいし、システム通知などもかなり制限されていた。
人間が会話するチャンネルとシステムが通知するチャンネルは分けた方がよい
と、私はプラクティスとして常々言っている。きっと誰もが言っている。システム通知が認知負荷となるという声は業務側のメンバーからも届いていた。これは外部メンバーをマルチチャンネルゲストにすることのコストだけの問題なので、その価値をどう測るかという視点から、中の人がその予算を確保して外部メンバーがマルチチャンネルゲスト化された。その判断を支持する意図でも、slack のチャンネルが複数扱えることでどういった情報共有やシステム間連携の価値があるかというのを、私の経験からも提示していきたいと考えている。情報を監視するという概念、ならびに情報の一元管理にも関わってくるので、課題管理と並ぶ情報共有という文脈で私の強みが活きる分野でもある。いろいろやっていきたい。</description><content>&lt;p>0時に寝て4時に起きて、なんとなくドラクエタクトしてたら6時になってそのまま朝活に出てた。sns のタイムラインを眺めていると今日で仕事納めにしている人をちらほらみかけた。私は外向けには月曜日が仕事納めで、内向けには水曜日までは働くかな。30日は実家に帰るか、ゆっくり休むか、まだ決めてない。&lt;/p>
&lt;h2 id="朝活-バッタを倒しにアフリカへ">朝活: バッタを倒しにアフリカへ&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1030/#サバクトビバッタの研究">先日たまたまみかけた記事から購入した&lt;/a> ことを書いた。積ん読状態だったけど、技術書ばかりも疲れるので気分転換に読み進めることにした。&lt;/p>
&lt;p>第1章サハラに青春を賭けるを読んだ。著者はおもしろい人だというのは文章から伝わってくるので何を書いてても驚きはしないが、それでもアフリカ(モーリタニア)の生活や状況などは全く知らないことばかりなので何を読んでも斬新には感じる。&lt;a href="https://www.mofa.go.jp/mofaj/area/mauritania/index.html">モーリタニア・イスラム共和国&lt;/a> という国すら私は知らなかった。&lt;/p>
&lt;p>第1章は渡航してフィールワークに出掛けた内容が書いてあった。砂漠へ行くチームにコックが必要というのは、ドラクエ脳の自分には出てこない発想で現実は旅をしながらおいしいものも食べたいという欲求は強いのだなぁという学び？があった。&lt;/p>
&lt;h2 id="slack-のマルチチャンネルゲスト">slack のマルチチャンネルゲスト&lt;/h2>
&lt;p>これまでお手伝い先では slack のシングルチャンネルゲストで参加していた。必然的に1つのチャンネルにすべてのプロジェクトメンバー20人がいる。技術的な話題を気軽に投稿しにくいし、システム通知などもかなり制限されていた。&lt;/p>
&lt;blockquote>
&lt;p>人間が会話するチャンネルとシステムが通知するチャンネルは分けた方がよい&lt;/p>
&lt;/blockquote>
&lt;p>と、私はプラクティスとして常々言っている。きっと誰もが言っている。システム通知が認知負荷となるという声は業務側のメンバーからも届いていた。これは外部メンバーをマルチチャンネルゲストにすることのコストだけの問題なので、その価値をどう測るかという視点から、中の人がその予算を確保して外部メンバーがマルチチャンネルゲスト化された。その判断を支持する意図でも、slack のチャンネルが複数扱えることでどういった情報共有やシステム間連携の価値があるかというのを、私の経験からも提示していきたいと考えている。情報を監視するという概念、ならびに情報の一元管理にも関わってくるので、課題管理と並ぶ情報共有という文脈で私の強みが活きる分野でもある。いろいろやっていきたい。&lt;/p></content></item><item><title>maven のバージョンチェック処理の振る舞い</title><link>/diary/posts/2021/1223/</link><pubDate>Thu, 23 Dec 2021 08:35:00 +0900</pubDate><guid>/diary/posts/2021/1223/</guid><description>23時に寝て1時に起きてまた寝て6時半に起きた。変なライフサイクルになってきた。
maven のアップデートポリシー maven が依存解決するとき、例えばバージョンの範囲を指定して最新バージョンを取得するといった設定ができる。実行していると、新しいバージョンをチェックしにいくときとそうじゃないときがあって、どういう仕組みで動いているのかよくわからなかったのでデバッグした。言うても DEBUG ログを出力させて、ログの内容をソースで grep しながら関連するところを読んだだけ。
DefaultUpdateCheckManager.isUpdateRequired の中でポリシーが最終チェック日付を確認していいる。ここから辿っていくと ArtifactRepositoryPolicy という仕組みがある。
return ( lastCheckDate == null ) || policy.checkOutOfDate( lastCheckDate ); ドキュメントでそれっぽい内容を調べると updatePolicy を設定できるようになっている。デフォルトは daily なので日次でチェックしにいくような振る舞いをする。バージョンチェックするときとしないときの何が違うのか、よくわかっていなかった振る舞いを理解できた。これはビルドキャッシュの有無に関係ないのでキャッシュがあるからバージョンチェック処理をスキップできるわけではない。もちろん、更新をチェックさせたくないのであれば never に設定してもいいのかもしれない。
updatePolicy
The frequency for downloading updates - can be &amp;ldquo;always&amp;rdquo;, &amp;ldquo;daily&amp;rdquo; (default), &amp;ldquo;interval:XXX&amp;rdquo; (in minutes) or &amp;ldquo;never&amp;rdquo; (only if it doesn&amp;rsquo;t exist locally).
https://maven.apache.org/ref/3.6.3/maven-settings/settings.html</description><content>&lt;p>23時に寝て1時に起きてまた寝て6時半に起きた。変なライフサイクルになってきた。&lt;/p>
&lt;h2 id="maven-のアップデートポリシー">maven のアップデートポリシー&lt;/h2>
&lt;p>maven が依存解決するとき、例えばバージョンの範囲を指定して最新バージョンを取得するといった設定ができる。実行していると、新しいバージョンをチェックしにいくときとそうじゃないときがあって、どういう仕組みで動いているのかよくわからなかったのでデバッグした。言うても DEBUG ログを出力させて、ログの内容をソースで grep しながら関連するところを読んだだけ。&lt;/p>
&lt;p>&lt;a href="https://github.com/apache/maven/blob/maven-3.6.3/maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java#L110">DefaultUpdateCheckManager.isUpdateRequired&lt;/a> の中でポリシーが最終チェック日付を確認していいる。ここから辿っていくと &lt;a href="https://github.com/apache/maven/blob/maven-3.6.3/maven-artifact/src/main/java/org/apache/maven/artifact/repository/ArtifactRepositoryPolicy.java#L115">ArtifactRepositoryPolicy&lt;/a> という仕組みがある。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">(&lt;/span> lastCheckDate &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">||&lt;/span> policy&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">checkOutOfDate&lt;/span>&lt;span style="color:#f92672">(&lt;/span> lastCheckDate &lt;span style="color:#f92672">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ドキュメントでそれっぽい内容を調べると &lt;code>updatePolicy&lt;/code> を設定できるようになっている。デフォルトは &lt;code>daily&lt;/code> なので日次でチェックしにいくような振る舞いをする。バージョンチェックするときとしないときの何が違うのか、よくわかっていなかった振る舞いを理解できた。これはビルドキャッシュの有無に関係ないのでキャッシュがあるからバージョンチェック処理をスキップできるわけではない。もちろん、更新をチェックさせたくないのであれば &lt;code>never&lt;/code> に設定してもいいのかもしれない。&lt;/p>
&lt;blockquote>
&lt;p>updatePolicy&lt;/p>
&lt;p>The frequency for downloading updates - can be &amp;ldquo;always&amp;rdquo;, &amp;ldquo;daily&amp;rdquo; (default), &amp;ldquo;interval:XXX&amp;rdquo; (in minutes) or &amp;ldquo;never&amp;rdquo; (only if it doesn&amp;rsquo;t exist locally).&lt;/p>
&lt;p>&lt;a href="https://maven.apache.org/ref/3.6.3/maven-settings/settings.html">https://maven.apache.org/ref/3.6.3/maven-settings/settings.html&lt;/a>&lt;/p>
&lt;/blockquote></content></item><item><title>課題管理システムの一本化</title><link>/diary/posts/2021/1222/</link><pubDate>Wed, 22 Dec 2021 08:21:13 +0900</pubDate><guid>/diary/posts/2021/1222/</guid><description>0時に寝て4時過ぎに起きて2度寝して6時前に起きた。
朝活: バッタを倒しにアフリカへ 【三宮.dev オンライン】今年最後のリモート朝活もくもく会 に参加した。スクラム本を読み終えたので気分転換に バッタを倒しにアフリカへ を読むことにした。主に雑談してたら序文しか読めなかった。
課題管理システムを一本化する お仕事でスクラム開発を実践している。プロダクトバックログを backlog で管理し、スプリントバックログを GitHub Issues で管理している。課題を複数のプラットフォームで管理することは情報の一元管理という側面からよくないといったことをお手伝いを始めたときから機をみて指摘していた。そういう状態が2ヶ月ほど続いて、GitHub Issues は機能的に厳しいという共通認識が開発者にはあるため、backlog へ一本化されることに決定した。スクラムと課題管理との関係を追究したい私にとっては朗報で、今後は PO も含めて課題管理システムの用途をメンバーにアドバイスしながら課題管理の高みを目指していきたい。但し、backlog は標準で github 連携機能を提供していないため、チケット駆動開発をするには自前で連携機能を作らないといけないらしい。</description><content>&lt;p>0時に寝て4時過ぎに起きて2度寝して6時前に起きた。&lt;/p>
&lt;h2 id="朝活-バッタを倒しにアフリカへ">朝活: バッタを倒しにアフリカへ&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/234405/">【三宮.dev オンライン】今年最後のリモート朝活もくもく会&lt;/a> に参加した。スクラム本を読み終えたので気分転換に &lt;a href="https://www.kobunsha.com/shelf/book/isbn/9784334039899">バッタを倒しにアフリカへ&lt;/a> を読むことにした。主に雑談してたら序文しか読めなかった。&lt;/p>
&lt;h2 id="課題管理システムを一本化する">課題管理システムを一本化する&lt;/h2>
&lt;p>お仕事でスクラム開発を実践している。プロダクトバックログを &lt;a href="https://backlog.com/ja/">backlog&lt;/a> で管理し、スプリントバックログを &lt;a href="https://docs.github.com/ja/issues">GitHub Issues&lt;/a> で管理している。課題を複数のプラットフォームで管理することは情報の一元管理という側面からよくないといったことをお手伝いを始めたときから機をみて指摘していた。そういう状態が2ヶ月ほど続いて、GitHub Issues は機能的に厳しいという共通認識が開発者にはあるため、backlog へ一本化されることに決定した。スクラムと課題管理との関係を追究したい私にとっては朗報で、今後は PO も含めて課題管理システムの用途をメンバーにアドバイスしながら課題管理の高みを目指していきたい。但し、backlog は標準で github 連携機能を提供していないため、チケット駆動開発をするには自前で連携機能を作らないといけないらしい。&lt;/p></content></item><item><title>誕生石が増えた</title><link>/diary/posts/2021/1221/</link><pubDate>Tue, 21 Dec 2021 07:58:55 +0900</pubDate><guid>/diary/posts/2021/1221/</guid><description>0時に寝て6時に半に起きた。今日は普通に眠れた。お仕事で本番リリース作業のトラブルシューティングのお手伝いをしていてバタバタしてた。
誕生石を63年ぶりに改訂？ 先日コーポレートストーンを ターコイズ に決めたとか、訳のわからないことを書いた。たまたまはてブで 日本の誕生石、63年ぶりに改訂　新たに宝石10石追加、全29石に というニュースをみかけた。誕生石のことをよく知らなくて勝手に月に1つの石があるんだと思い込んでいたら全然そんなことはなくて、今回の追加で多い月は4つの石が設定されたらしい。
全国宝石卸商協同組合（東京都千代田区）は12月20日、63年ぶりに日本の誕生石を見直し、新しい宝石10石を追加したことを発表しました。今回の追加により、日本の誕生石は全29石になりました。
(中略)
日本の誕生石は1958年、アメリカの宝石商組合（現在のジュエラーズ・オブ・アメリカ）が定めたものをベースに全国宝石卸商協同組合が初めて制定しました。
記事によると、業界団体が決めているだけで、最終的な目的は宝石を売りたいだけなのかな。「資本主義ってやつか」 って一言つぶやいたら満足するような記事だった。</description><content>&lt;p>0時に寝て6時に半に起きた。今日は普通に眠れた。お仕事で本番リリース作業のトラブルシューティングのお手伝いをしていてバタバタしてた。&lt;/p>
&lt;h2 id="誕生石を63年ぶりに改訂">誕生石を63年ぶりに改訂？&lt;/h2>
&lt;p>先日コーポレートストーンを &lt;a href="/diary/diary/posts/2021/1213/#ターコイズ">ターコイズ&lt;/a> に決めたとか、訳のわからないことを書いた。たまたまはてブで &lt;a href="https://maidonanews.jp/article/14368447">日本の誕生石、63年ぶりに改訂　新たに宝石10石追加、全29石に&lt;/a> というニュースをみかけた。誕生石のことをよく知らなくて勝手に月に1つの石があるんだと思い込んでいたら全然そんなことはなくて、今回の追加で多い月は4つの石が設定されたらしい。&lt;/p>
&lt;blockquote>
&lt;p>全国宝石卸商協同組合（東京都千代田区）は12月20日、63年ぶりに日本の誕生石を見直し、新しい宝石10石を追加したことを発表しました。今回の追加により、日本の誕生石は全29石になりました。&lt;/p>
&lt;p>(中略)&lt;/p>
&lt;p>日本の誕生石は1958年、アメリカの宝石商組合（現在のジュエラーズ・オブ・アメリカ）が定めたものをベースに全国宝石卸商協同組合が初めて制定しました。&lt;/p>
&lt;/blockquote>
&lt;p>記事によると、業界団体が決めているだけで、最終的な目的は宝石を売りたいだけなのかな。&lt;em>「資本主義ってやつか」&lt;/em> って一言つぶやいたら満足するような記事だった。&lt;/p></content></item><item><title>新型コロナワクチン接種証明書アプリを使ってみた</title><link>/diary/posts/2021/1220/</link><pubDate>Mon, 20 Dec 2021 20:36:47 +0900</pubDate><guid>/diary/posts/2021/1220/</guid><description>23時に寝て1時過ぎに起きて4時半に起きて6時半に起きた。寝てないわけじゃないけど、うまく眠れなくなった。
スマホのマイナンバーカードの読み取りは位置がシビア ワーケーションで ふるさと応援！ひょうごを旅しようキャンペーン を利用する条件の1つにワクチンの接種証明を提示する必要がある。ちょうどデジタル庁から 新型コロナワクチン接種証明書アプリ がリリースされた。このアプリを使えば接種の原本の書類を持っていかなくて済む。
朝からアプリをインストールしてマイナンバーカードを使って接種証明書を発行しようとしたのだけど、マイナンバーカードの読み取りができない。エラーも表示されなくてうんともすんとも動かない。パスワードがロックされていたらエラーが表示されるように思えるのでなんかおかしい状況だった。そのことをツィートしたら、とのきさんがマイナンバーカードの読み取りはシビアで位置があっていないと読み取りできないとアドバイスしてくれた。
スマホ機種によってNFCの搭載位置やカードの当て方などで読み取りが非常にシビアみたいです
NFCチップの位置をスマホとカードで正確に一致させてギリギリ読みとれた、など聞いたことがあります
&amp;mdash; tonoki(demobird) (@tonoki) December 20, 2021 午後から JPKIMobile を用いた有効性の確認方法 を確認しながら再挑戦した。ここに書いてあるようにちょっと離したり、カードの位置を少しずつずらして調整したりしてたら読み取りできた。この時点でパスワードロックではないことを確認できた。
iPhone端末にICカードをセットします。画面が変わらないようであれば、一度ICカードを離してから再度セットしてください。
JPKIMobile で読み取りできたので同じ要領で接種証明書アプリでもやってみたら今度はすんなりと読み取りできて発行できた。位置さえあえば読み取りはすぐできた。今朝はたぶん机に置いて位置を調整せず、読み取りには時間がかかるのかな？とずっと動かさず待っていたのがよくなかったみたい。とのきさんのおかげで区役所に行く無駄な時間を削減できた。感謝。</description><content>&lt;p>23時に寝て1時過ぎに起きて4時半に起きて6時半に起きた。寝てないわけじゃないけど、うまく眠れなくなった。&lt;/p>
&lt;h2 id="スマホのマイナンバーカードの読み取りは位置がシビア">スマホのマイナンバーカードの読み取りは位置がシビア&lt;/h2>
&lt;p>ワーケーションで &lt;a href="https://www.hyogo-tourism.jp/furusato-ouen/">ふるさと応援！ひょうごを旅しようキャンペーン&lt;/a> を利用する条件の1つにワクチンの接種証明を提示する必要がある。ちょうどデジタル庁から &lt;a href="https://www.digital.go.jp/policies/posts/vaccinecert">新型コロナワクチン接種証明書アプリ&lt;/a> がリリースされた。このアプリを使えば接種の原本の書類を持っていかなくて済む。&lt;/p>
&lt;p>朝からアプリをインストールしてマイナンバーカードを使って接種証明書を発行しようとしたのだけど、マイナンバーカードの読み取りができない。エラーも表示されなくてうんともすんとも動かない。パスワードがロックされていたらエラーが表示されるように思えるのでなんかおかしい状況だった。そのことをツィートしたら、とのきさんがマイナンバーカードの読み取りはシビアで位置があっていないと読み取りできないとアドバイスしてくれた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">スマホ機種によってNFCの搭載位置やカードの当て方などで読み取りが非常にシビアみたいです&lt;br>NFCチップの位置をスマホとカードで正確に一致させてギリギリ読みとれた、など聞いたことがあります&lt;/p>&amp;mdash; tonoki(demobird) (@tonoki) &lt;a href="https://twitter.com/tonoki/status/1472760754332127235?ref_src=twsrc%5Etfw">December 20, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>午後から &lt;a href="https://www.jpki.go.jp/download/howto_iphone/certificate_p02.html">JPKIMobile を用いた有効性の確認方法&lt;/a> を確認しながら再挑戦した。ここに書いてあるようにちょっと離したり、カードの位置を少しずつずらして調整したりしてたら読み取りできた。この時点でパスワードロックではないことを確認できた。&lt;/p>
&lt;blockquote>
&lt;p>iPhone端末にICカードをセットします。画面が変わらないようであれば、一度ICカードを離してから再度セットしてください。&lt;/p>
&lt;/blockquote>
&lt;p>JPKIMobile で読み取りできたので同じ要領で接種証明書アプリでもやってみたら今度はすんなりと読み取りできて発行できた。位置さえあえば読み取りはすぐできた。今朝はたぶん机に置いて位置を調整せず、読み取りには時間がかかるのかな？とずっと動かさず待っていたのがよくなかったみたい。とのきさんのおかげで区役所に行く無駄な時間を削減できた。感謝。&lt;/p></content></item><item><title>スクラム開発の所感</title><link>/diary/posts/2021/1219/</link><pubDate>Sun, 19 Dec 2021 12:26:41 +0900</pubDate><guid>/diary/posts/2021/1219/</guid><description>0時に寝て2時過ぎに起きてだらだらして7時に起きてだらだらして8時に起き上がった。休日は自然とだらだらしがち。
log4j2 の脆弱性対応 たまたま sns で新たに脆弱性が発見され 2.17.0 がリリースされたことをみかけた。Apache Log4j Security Vulnerabilities をみて、午前中に対応して pr を作成して dos 攻撃の脆弱性と書いた後に次のツィートをみかけた。私は詳細を理解できていないのでこの内容が 2.17.0 で fix されているのかどうかまでは調査できていない。いずれにしても rce 攻撃はこわいから緊急度が跳ね上がるなとみていた。
【悲報】log4jのRCE脆弱性、2.15で緩和策としてlocalhostにしかlookupできなくしたはずが、127.0.0[.]1#example[.]comのように#を挟むことにより回避可能ということが判明。これにより任意ドメインへのリクエストが可能になり再びリモート実行可能に。みなさん最新版の2.17にアップデートしましょう。 https://t.co/uQhJSnjv7m
&amp;mdash; 暇な女子高専生@1日1食水煮サバ缶ダイエット (@miettal) December 19, 2021 アジャイル開発とスクラム 第2版 昨日の続き。素晴らしい本だったので所感をまとめた。スクラム開発の理解がより進んだ。
アジャイル開発とスクラム 第2版 顧客・技術・経営をつなぐ協調的ソフトウェア開発マネジメント</description><content>&lt;p>0時に寝て2時過ぎに起きてだらだらして7時に起きてだらだらして8時に起き上がった。休日は自然とだらだらしがち。&lt;/p>
&lt;h2 id="log4j2-の脆弱性対応">log4j2 の脆弱性対応&lt;/h2>
&lt;p>たまたま sns で新たに脆弱性が発見され 2.17.0 がリリースされたことをみかけた。&lt;a href="https://logging.apache.org/log4j/2.x/security.html">Apache Log4j Security Vulnerabilities&lt;/a> をみて、午前中に対応して pr を作成して dos 攻撃の脆弱性と書いた後に次のツィートをみかけた。私は詳細を理解できていないのでこの内容が 2.17.0 で fix されているのかどうかまでは調査できていない。いずれにしても rce 攻撃はこわいから緊急度が跳ね上がるなとみていた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">【悲報】log4jのRCE脆弱性、2.15で緩和策としてlocalhostにしかlookupできなくしたはずが、127.0.0[.]1#example[.]comのように#を挟むことにより回避可能ということが判明。これにより任意ドメインへのリクエストが可能になり再びリモート実行可能に。みなさん最新版の2.17にアップデートしましょう。 &lt;a href="https://t.co/uQhJSnjv7m">https://t.co/uQhJSnjv7m&lt;/a>&lt;/p>&amp;mdash; 暇な女子高専生@1日1食水煮サバ缶ダイエット (@miettal) &lt;a href="https://twitter.com/miettal/status/1472372715281858563?ref_src=twsrc%5Etfw">December 19, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="アジャイル開発とスクラム-第2版">アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>昨日の続き。素晴らしい本だったので所感をまとめた。スクラム開発の理解がより進んだ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://t2y.hatenablog.jp/entry/2021/12/19/183339">アジャイル開発とスクラム 第2版 顧客・技術・経営をつなぐ協調的ソフトウェア開発マネジメント&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>スクラム本を読了</title><link>/diary/posts/2021/1218/</link><pubDate>Sat, 18 Dec 2021 17:41:18 +0900</pubDate><guid>/diary/posts/2021/1218/</guid><description>0時に寝て6時に起きてだらだらしてて8時に起き上がった。
ストレッチ 今週もお仕事に注力してた。ストレッチは2-3日/週かな。普通ぐらいの頻度。夜は寒くなって外に出掛けるのが億劫で1日ウォーキングしたかなぐらい。今日の開脚幅は開始前169cmで、ストレッチ後170cmで、久しぶりに170cm台に戻した。いい感じ。右股関節の不可動領域がよくなっているのが実感できるようになってきているので調子はよさそう。今日は全体的に右半身 (太もも後ろ、腰、大胸筋) と張りがあって疲労もやや溜まってそうに思えた。基本的に週末もなにかしら作業していて疲労が蓄積していないのは毎週のストレッチの効果も大きいと考えている。
次の bizpy 勉強会 1月の bizpy 勉強会のイベント、Python で機械学習をやってみる勉強会 を公開した。次回はわたなべさんに講師をやってもらう。このイベントページも作っていただいた。運営が2人になったのでお互いの忙しいときは分担しながらコミュニティを運営していける。本当にありがたい。わたなべさんが担当している間に私も次のネタの下調べや仕込みをする余裕がもてる。メタバースの勉強会やってもいいなとは考えているけど、私だけではコンテンツが弱くて、よそから詳しい人を招いてこないといけない。どうしたものか。
アジャイル開発とスクラム 第2版 読了した。全12章の後にもコラムと対談があって、この内容も読み応えがあっていくつも示唆を与えられるものだった。
コラム 野中理論とスクラム スペシャルトーク 野中氏と平鍋氏の対談 イノベーションに必要なのは、対話を通じて共振・共感・共鳴する実践知リーダーシップであり、それがスクラムの心だ おわりに 12章で出てきた実践知について、実践知とは何か、実践知リーダーシップとはどういうことかというのが対談の中でも繰り返し出てきてその理解が深まった。私の中では暗黙知と実践知の境界が曖昧だったが、暗黙知と形式知を行ったり来たりすること、そして身体性を伴っているというのが実践知であること。そこには「もの」や「こと」の目に見えない関係性を洞察しながら判断し、本質を考え抜く知力が必要であると述べられていた。昔は 知行合一 と言ったらしいが、90年代以降の日本は分析過多、計画過多、コンプライアンス過多になってしまったという。また時間のあるときに所感をまとめようと思う。</description><content>&lt;p>0時に寝て6時に起きてだらだらしてて8時に起き上がった。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週もお仕事に注力してた。ストレッチは2-3日/週かな。普通ぐらいの頻度。夜は寒くなって外に出掛けるのが億劫で1日ウォーキングしたかなぐらい。今日の開脚幅は開始前169cmで、ストレッチ後170cmで、久しぶりに170cm台に戻した。いい感じ。右股関節の不可動領域がよくなっているのが実感できるようになってきているので調子はよさそう。今日は全体的に右半身 (太もも後ろ、腰、大胸筋) と張りがあって疲労もやや溜まってそうに思えた。基本的に週末もなにかしら作業していて疲労が蓄積していないのは毎週のストレッチの効果も大きいと考えている。&lt;/p>
&lt;h2 id="次の-bizpy-勉強会">次の bizpy 勉強会&lt;/h2>
&lt;p>1月の bizpy 勉強会のイベント、&lt;a href="https://bizpy.connpass.com/event/234387/">Python で機械学習をやってみる勉強会&lt;/a> を公開した。次回はわたなべさんに講師をやってもらう。このイベントページも作っていただいた。運営が2人になったのでお互いの忙しいときは分担しながらコミュニティを運営していける。本当にありがたい。わたなべさんが担当している間に私も次のネタの下調べや仕込みをする余裕がもてる。メタバースの勉強会やってもいいなとは考えているけど、私だけではコンテンツが弱くて、よそから詳しい人を招いてこないといけない。どうしたものか。&lt;/p>
&lt;h2 id="アジャイル開発とスクラム-第2版">アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>読了した。全12章の後にもコラムと対談があって、この内容も読み応えがあっていくつも示唆を与えられるものだった。&lt;/p>
&lt;ul>
&lt;li>コラム 野中理論とスクラム&lt;/li>
&lt;li>スペシャルトーク 野中氏と平鍋氏の対談
&lt;ul>
&lt;li>イノベーションに必要なのは、対話を通じて共振・共感・共鳴する実践知リーダーシップであり、それがスクラムの心だ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>おわりに&lt;/li>
&lt;/ul>
&lt;p>12章で出てきた実践知について、実践知とは何か、実践知リーダーシップとはどういうことかというのが対談の中でも繰り返し出てきてその理解が深まった。私の中では暗黙知と実践知の境界が曖昧だったが、暗黙知と形式知を行ったり来たりすること、そして身体性を伴っているというのが実践知であること。そこには「もの」や「こと」の目に見えない関係性を洞察しながら判断し、本質を考え抜く知力が必要であると述べられていた。昔は &lt;a href="https://ja.wikipedia.org/wiki/%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80">知行合一&lt;/a> と言ったらしいが、90年代以降の日本は分析過多、計画過多、コンプライアンス過多になってしまったという。また時間のあるときに所感をまとめようと思う。&lt;/p></content></item><item><title>知識創造と実践知の考察</title><link>/diary/posts/2021/1217/</link><pubDate>Fri, 17 Dec 2021 09:03:56 +0900</pubDate><guid>/diary/posts/2021/1217/</guid><description>0時に寝て6時に起きた。ここ最近は晩ご飯作って食べてアイスクリーム食べてドラクエタクトやって寝るみたいな業後の過ごし方が多い。
朝活: アジャイル開発とスクラム 第2版 金朝ツメトギ 2021-12-17 AM 6 金曜朝6時開催のもくもく会 で第11章スクラムと知識創造と第12章スクラムと実践知リーダーを読んだ。
第11章では知識想像モデルとして SECI モデルが紹介されている。ふと読んでいて、私が課題管理システムでやっていたのはこの「表出化」の活動で、多くのスクラムをやっているチームは「共同化」を主にやっているように思えた。ソフトウェア開発方法論の歴史的に、チケット駆動開発 → イテレーション開発 → アジャイル開発/スクラムの時系列に発展してきた経緯から、私のようなチケット駆動開発をがっつりやってきた開発者が言う対話が重要だと言うことと、最初からスクラム開発で「共同化」しかやらず「表出化」していない開発者が言う対話が重要だと言うことは、背景事情からして根本的に指している内容が違うのではないか？という仮説を思いついた。対話が重要だと言う開発者がドキュメントや文章を書くことをなおざりにするのを見かけて違和感を感じていた。チケット駆動開発をがっつりやってきた開発者は文章を書いた上でそれだけでは解決できなかった問題を解決するために対話が必要だと言っているわけであり、文章すら書けない開発者は対話だけで開発を進められるわけではないと考えると、これまでスクラム開発に抱いていた私の違和感の正体に近づいたように思えた。
第12章では実践知という概念とそのリーダーシップが紹介されている。以前 実践知 — エキスパートの知性 という本を読んで、メタ認知も含めた認知心理学の知見を踏まえた知識創造や実践知を獲得するに至る背景や教育と課題管理との間にある関係性を考えていたことがあった。スクラムにおいても実践知という概念を扱っているのを読んで、ここにはなにかしらの関係性を見出したり体系化を行う余地があるように考えている。やや哲学的な話題も出てくるので人によって賛否がわかれるかもしれないが、私は自分の考えている中長期的な思考や教育への考え方の価値観が合致していて、これが日本的な経営スタイルの鍵だという意見には一定の同意ができる。自分自身も中長期的な展望を大事にしながら課題解決していきたいという想いもあるからだ。
ワーケーション準備 ワーケーション準備 の残タスクを少しずつやっていく。宿泊先の きのいえ に電話してチェックイン前に駐車場にレンタカーをとめさせてもらえないかを問い合わせた。当日に宿泊客がいれば13時以降、いなければそれよりも早めにとめてもよいとのこと。スタッフがいれば声をかけていなくても勝手にとめてよいと教えてもらった。先方からも ふるさと応援！ひょうごを旅しようキャンペーン が本来は12月末で終了だったのが2月28日まで延長されたため、宿泊者が兵庫県在住であればその手続きをしたいとのこと。一旦、オンラインで決済済みの予約をキャンセルして、現地決済で兵庫県の割り引きの手続きをしてくれるという。メンバーは4人中3人が兵庫県在住なので4,000円/人の割り引きで合計12,000円の割り引きになった。</description><content>&lt;p>0時に寝て6時に起きた。ここ最近は晩ご飯作って食べてアイスクリーム食べてドラクエタクトやって寝るみたいな業後の過ごし方が多い。&lt;/p>
&lt;h2 id="朝活-アジャイル開発とスクラム-第2版">朝活: アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>&lt;a href="https://t.co/0erAzQpDzk">金朝ツメトギ 2021-12-17 AM 6 金曜朝6時開催のもくもく会&lt;/a> で第11章スクラムと知識創造と第12章スクラムと実践知リーダーを読んだ。&lt;/p>
&lt;p>第11章では知識想像モデルとして SECI モデルが紹介されている。ふと読んでいて、私が課題管理システムでやっていたのはこの「表出化」の活動で、多くのスクラムをやっているチームは「共同化」を主にやっているように思えた。ソフトウェア開発方法論の歴史的に、チケット駆動開発 → イテレーション開発 → アジャイル開発/スクラムの時系列に発展してきた経緯から、私のようなチケット駆動開発をがっつりやってきた開発者が言う対話が重要だと言うことと、最初からスクラム開発で「共同化」しかやらず「表出化」していない開発者が言う対話が重要だと言うことは、背景事情からして根本的に指している内容が違うのではないか？という仮説を思いついた。対話が重要だと言う開発者がドキュメントや文章を書くことをなおざりにするのを見かけて違和感を感じていた。チケット駆動開発をがっつりやってきた開発者は文章を書いた上でそれだけでは解決できなかった問題を解決するために対話が必要だと言っているわけであり、文章すら書けない開発者は対話だけで開発を進められるわけではないと考えると、これまでスクラム開発に抱いていた私の違和感の正体に近づいたように思えた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1217_seci-model.png"/>
&lt;/figure>
&lt;p>第12章では実践知という概念とそのリーダーシップが紹介されている。以前 &lt;a href="https://b.kobe-u.ac.jp/books/b007/">実践知 — エキスパートの知性&lt;/a> という本を読んで、メタ認知も含めた認知心理学の知見を踏まえた知識創造や実践知を獲得するに至る背景や教育と課題管理との間にある関係性を考えていたことがあった。スクラムにおいても実践知という概念を扱っているのを読んで、ここにはなにかしらの関係性を見出したり体系化を行う余地があるように考えている。やや哲学的な話題も出てくるので人によって賛否がわかれるかもしれないが、私は自分の考えている中長期的な思考や教育への考え方の価値観が合致していて、これが日本的な経営スタイルの鍵だという意見には一定の同意ができる。自分自身も中長期的な展望を大事にしながら課題解決していきたいという想いもあるからだ。&lt;/p>
&lt;h2 id="ワーケーション準備">ワーケーション準備&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1212/#ワーケーション予約">ワーケーション準備&lt;/a> の残タスクを少しずつやっていく。宿泊先の &lt;a href="https://kinosaki-kinoie.com/">きのいえ&lt;/a> に電話してチェックイン前に駐車場にレンタカーをとめさせてもらえないかを問い合わせた。当日に宿泊客がいれば13時以降、いなければそれよりも早めにとめてもよいとのこと。スタッフがいれば声をかけていなくても勝手にとめてよいと教えてもらった。先方からも &lt;a href="https://www.hyogo-tourism.jp/furusato-ouen/">ふるさと応援！ひょうごを旅しようキャンペーン&lt;/a> が本来は12月末で終了だったのが2月28日まで延長されたため、宿泊者が兵庫県在住であればその手続きをしたいとのこと。一旦、オンラインで決済済みの予約をキャンセルして、現地決済で兵庫県の割り引きの手続きをしてくれるという。メンバーは4人中3人が兵庫県在住なので4,000円/人の割り引きで合計12,000円の割り引きになった。&lt;/p></content></item><item><title>traceparent の生成</title><link>/diary/posts/2021/1216/</link><pubDate>Thu, 16 Dec 2021 08:22:54 +0900</pubDate><guid>/diary/posts/2021/1216/</guid><description>1時半に寝て7時半に起きた。ちょっと疲れてて寝坊した。
W3C Trace Context の traceparent ヘッダーの生成 前にお仕事で dapr の分散トレーシングを検証している ことについて書いた。
dapr の分散トレーシングは W3C Trace Context に準拠していて、dapr 経由のリクエストは自動的にこの情報が付与されるが、そうじゃないリクエストもトレーシングできるようにするためには http ヘッダーの traceparent をセットしないといけない。試しにサーバー側に traceparent を生成するのはどうやるのかを調べてみた。Implementations of Trace Context にある java ライブラリを調べていて、Jaeger クライアントは OpenTelemetry に移行したと書いてあって、OpenTracing と OpenCensus は OpenTelemetry に統合されたと書いてあって、どうやら OpenTelemetry を使うのがよさそうだとわかった。
やりたいことは traceparent を生成したいだけだが、OpenTelemetry の Manual Instrumentation を読んでも直接的なやり方は書いてなくて、open-telemetry/opentelemetry-java のテストコードなどもみながら実装した。細かいところの仕様をまだ理解できていないけど、ひとまずこれで生成できたので検証はできると思う。
public class W3cContextUtil { private static final String TRACE_PARENT_VERSION = &amp;#34;00&amp;#34;; private static final OpenTelemetrySdk openTelemetry = OpenTelemetrySdk.builder() .setTracerProvider(SdkTracerProvider.builder().build()) .setPropagators(ContextPropagators.create(W3CTraceContextPropagator.getInstance())) .buildAndRegisterGlobal(); private static final Tracer tracer = openTelemetry.</description><content>&lt;p>1時半に寝て7時半に起きた。ちょっと疲れてて寝坊した。&lt;/p>
&lt;h2 id="w3c-trace-context-の-traceparent-ヘッダーの生成">W3C Trace Context の traceparent ヘッダーの生成&lt;/h2>
&lt;p>前にお仕事で &lt;a href="/diary/diary/posts/2021/1209/#dapr-の分散トレーシングと-w3c-trace-context">dapr の分散トレーシングを検証している&lt;/a> ことについて書いた。&lt;/p>
&lt;p>dapr の分散トレーシングは &lt;a href="https://www.w3.org/TR/trace-context/">W3C Trace Context&lt;/a> に準拠していて、dapr 経由のリクエストは自動的にこの情報が付与されるが、そうじゃないリクエストもトレーシングできるようにするためには http ヘッダーの &lt;code>traceparent&lt;/code> をセットしないといけない。試しにサーバー側に &lt;code>traceparent&lt;/code> を生成するのはどうやるのかを調べてみた。&lt;a href="https://github.com/w3c/trace-context/blob/main/implementations.md">Implementations of Trace Context&lt;/a> にある java ライブラリを調べていて、Jaeger クライアントは OpenTelemetry に移行したと書いてあって、OpenTracing と OpenCensus は OpenTelemetry に統合されたと書いてあって、どうやら OpenTelemetry を使うのがよさそうだとわかった。&lt;/p>
&lt;p>やりたいことは &lt;code>traceparent&lt;/code> を生成したいだけだが、OpenTelemetry の &lt;a href="https://opentelemetry.io/docs/instrumentation/java/manual_instrumentation/">Manual Instrumentation&lt;/a> を読んでも直接的なやり方は書いてなくて、&lt;a href="https://github.com/open-telemetry/opentelemetry-java">open-telemetry/opentelemetry-java&lt;/a> のテストコードなどもみながら実装した。細かいところの仕様をまだ理解できていないけど、ひとまずこれで生成できたので検証はできると思う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">W3cContextUtil&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String TRACE_PARENT_VERSION &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;00&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> OpenTelemetrySdk openTelemetry &lt;span style="color:#f92672">=&lt;/span> OpenTelemetrySdk&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setTracerProvider&lt;/span>&lt;span style="color:#f92672">(&lt;/span>SdkTracerProvider&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">build&lt;/span>&lt;span style="color:#f92672">())&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setPropagators&lt;/span>&lt;span style="color:#f92672">(&lt;/span>ContextPropagators&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>&lt;span style="color:#f92672">(&lt;/span>W3CTraceContextPropagator&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getInstance&lt;/span>&lt;span style="color:#f92672">()))&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">buildAndRegisterGlobal&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> Tracer tracer &lt;span style="color:#f92672">=&lt;/span> openTelemetry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getTracer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;my-tracer&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;1.0.0&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> String &lt;span style="color:#a6e22e">generateTraceParent&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
Span span &lt;span style="color:#f92672">=&lt;/span> tracer&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">spanBuilder&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;parent&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">startSpan&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
SpanContext sc &lt;span style="color:#f92672">=&lt;/span> span&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getSpanContext&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> String&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">format&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;%s-%s-%s-%s&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
TRACE_PARENT_VERSION&lt;span style="color:#f92672">,&lt;/span>
sc&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getTraceId&lt;/span>&lt;span style="color:#f92672">(),&lt;/span>
sc&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getSpanId&lt;/span>&lt;span style="color:#f92672">(),&lt;/span>
sc&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getTraceFlags&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">asHex&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">finally&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
span&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">end&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="大阪python-もくもく会">大阪Python もくもく会&lt;/h2>
&lt;p>&lt;a href="https://osakapython.connpass.com/event/233460/">大阪Python もくもく会 #66&lt;/a> にオンライン参加した。コロナ禍前に大阪へ通勤していた頃はオフライン勉強会に何回か参加したことがある。主催者のやぎさんは一度 bizpy に参加してくれたこともある。11月からオフライン勉強会を再開したとのこと。久しぶりに参加してやぎさんと話していたら &lt;a href="https://neos.com/">neosvr&lt;/a> にも関心をもっているとのこと。私も少し前に oculus quest 2 を購入して触ってみた程度なのでメタバース関連で一緒に勉強会をしてもよいかもしれない。もくもく会では「アジャイル開発とスクラム 第2版」を読んでいて昨日の日記の記事がまさにその成果物。せっかくなので成果発表でこの本の紹介などをした。&lt;/p></content></item><item><title>データと業務の変遷</title><link>/diary/posts/2021/1215/</link><pubDate>Wed, 15 Dec 2021 09:21:52 +0900</pubDate><guid>/diary/posts/2021/1215/</guid><description>23時に寝てこわい夢をみて1時半に起きて、そのまま寝たのか寝てないのかよくわからない仮眠状態で5時半に起きた。
朝活: アジャイル開発とスクラム 第2版 【三宮.dev オンライン】リモート朝活もくもく会 で第10章 竹内・野中のスクラム論文再考を読んだ。1986年に竹内氏と野中氏によって書かれた The New New Product Development Game から得た概念や理論的背景をスクラム創設者のジェフ・サザーランド氏がソフトウェア開発の方法論として体系化したものがスクラムになる。そのため、原点はこの論文にある。第10章ではオリジナルに書かれている内容とスクラム開発を比較している。オリジナルの論文にある TypeC (キヤノンやホンダの新製品開発) のようなチームの特徴として次の6つをあげている。
不安定な状態を保つ
最初に綿密な計画や指示があるわけではない、チームは自由な裁量と同時に困難なゴールを目指す
プロジェクトチームは自ら組織化する
チームは不安定な状態から自己組織化し、対話の中で自律状態を作り出す
開発フェーズを重複させる
開発フェーズを重複させることで、メンバーは専門分野を超えてプロジェクト全体で責任をもつようになる
「マルチ学習」
メンバーはグループ全体として学習し、専門を超えて学習する
柔らかなマネジメント
無管理でも強い管理でもない自主性を尊重した柔らかなマネジメントが重要である
学びを組織で共有する
過去の成功を組織に伝える、もしくは意識的に捨て去る
オリジナルの論文の解説を読んでいると、古きよき日本の家族ぐるみの職場やチームの働き方のように思えてくる。時代が違うのでいまからこういった働き方に戻るのは現実的ではないだろうが、その中で重要だった概念や要素を、いまソフトウェア開発方法論としてのスクラムで実践できるのはいろいろと私の中でも思うことがある。私の考える課題管理の方法論にも竹内・野中氏のオリジナルの論文の概念は影響を受けるように思えた。章末にコラムとしてジェフ・サザーランド氏のインタビュー記事もあった。マイクロファイナンスのプロジェクトを通して、小さなグループに小さくお金を貸し出すことが、貧困から抜けすための小さなきっかけ (ブートストラップ) になるという体験からスクラム開発の動機づけになったという話しは哲学として印象に残った。なにかを成すには哲学が大事だと思う。
データがあると同期したくなる お仕事でスクラムのふりかえりをやっていて miro と backlog のデータ同期という話題が出た。業務チームはブレインストーミングで要件を洗い出したりする作業のときに miro を使っていて、miro ベースでメモを記述した後でバックログアイテムとして backlog に登録する。このとき backlog に登録した後で miro を捨てるならいいが、残したまま次の展望や要件の洗い出しにも再利用したりしていると、miro と backlog のバックログアイテムの内容が乖離したり不整合が発生したりする。チームとしてはバックログアイテムに書いてある内容が正という運用をしているため、miro のみに最新の情報がある状態が続くと課題になる。私の知る限り、miro と課題管理システムのデータ連携のツールはないと思う。
私からみたら最初からすべてバックログアイテムに文章で書けばいいやんで話が終わってしまうが、人によって使い慣れたツールは異なるため、そんな単純な話しでもない。一方で昔は miro や backlog がなかった時代もあって、そのときは物理的な付箋紙をホワイトボードに張りながら作業をしていたから、本来は同期したいという概念もなかったはずという意見も出た。たしかにツールがデジタルになって電子データとなった瞬間からデータの再利用を考えるようになるんだなと私も思えた。あと付箋紙をホワイトボードに貼り付けていた時代は何週間もその状態のまま放置するといったこともなかったのではないか？という気もした。</description><content>&lt;p>23時に寝てこわい夢をみて1時半に起きて、そのまま寝たのか寝てないのかよくわからない仮眠状態で5時半に起きた。&lt;/p>
&lt;h2 id="朝活-アジャイル開発とスクラム-第2版">朝活: アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/233922/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> で第10章 竹内・野中のスクラム論文再考を読んだ。1986年に竹内氏と野中氏によって書かれた &lt;a href="https://hbr.org/1986/01/the-new-new-product-development-game">The New New Product Development Game&lt;/a> から得た概念や理論的背景をスクラム創設者のジェフ・サザーランド氏がソフトウェア開発の方法論として体系化したものがスクラムになる。そのため、原点はこの論文にある。第10章ではオリジナルに書かれている内容とスクラム開発を比較している。オリジナルの論文にある TypeC (キヤノンやホンダの新製品開発) のようなチームの特徴として次の6つをあげている。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>不安定な状態を保つ&lt;/p>
&lt;p>最初に綿密な計画や指示があるわけではない、チームは自由な裁量と同時に困難なゴールを目指す&lt;/p>
&lt;/li>
&lt;li>
&lt;p>プロジェクトチームは自ら組織化する&lt;/p>
&lt;p>チームは不安定な状態から自己組織化し、対話の中で自律状態を作り出す&lt;/p>
&lt;/li>
&lt;li>
&lt;p>開発フェーズを重複させる&lt;/p>
&lt;p>開発フェーズを重複させることで、メンバーは専門分野を超えてプロジェクト全体で責任をもつようになる&lt;/p>
&lt;/li>
&lt;li>
&lt;p>「マルチ学習」&lt;/p>
&lt;p>メンバーはグループ全体として学習し、専門を超えて学習する&lt;/p>
&lt;/li>
&lt;li>
&lt;p>柔らかなマネジメント&lt;/p>
&lt;p>無管理でも強い管理でもない自主性を尊重した柔らかなマネジメントが重要である&lt;/p>
&lt;/li>
&lt;li>
&lt;p>学びを組織で共有する&lt;/p>
&lt;p>過去の成功を組織に伝える、もしくは意識的に捨て去る&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>オリジナルの論文の解説を読んでいると、古きよき日本の家族ぐるみの職場やチームの働き方のように思えてくる。時代が違うのでいまからこういった働き方に戻るのは現実的ではないだろうが、その中で重要だった概念や要素を、いまソフトウェア開発方法論としてのスクラムで実践できるのはいろいろと私の中でも思うことがある。私の考える課題管理の方法論にも竹内・野中氏のオリジナルの論文の概念は影響を受けるように思えた。章末にコラムとしてジェフ・サザーランド氏のインタビュー記事もあった。マイクロファイナンスのプロジェクトを通して、小さなグループに小さくお金を貸し出すことが、貧困から抜けすための小さなきっかけ (ブートストラップ) になるという体験からスクラム開発の動機づけになったという話しは哲学として印象に残った。なにかを成すには哲学が大事だと思う。&lt;/p>
&lt;h2 id="データがあると同期したくなる">データがあると同期したくなる&lt;/h2>
&lt;p>お仕事でスクラムのふりかえりをやっていて &lt;a href="https://miro.com/">miro&lt;/a> と &lt;a href="https://backlog.com/ja/">backlog&lt;/a> のデータ同期という話題が出た。業務チームはブレインストーミングで要件を洗い出したりする作業のときに miro を使っていて、miro ベースでメモを記述した後でバックログアイテムとして backlog に登録する。このとき backlog に登録した後で miro を捨てるならいいが、残したまま次の展望や要件の洗い出しにも再利用したりしていると、miro と backlog のバックログアイテムの内容が乖離したり不整合が発生したりする。チームとしてはバックログアイテムに書いてある内容が正という運用をしているため、miro のみに最新の情報がある状態が続くと課題になる。私の知る限り、miro と課題管理システムのデータ連携のツールはないと思う。&lt;/p>
&lt;p>私からみたら最初からすべてバックログアイテムに文章で書けばいいやんで話が終わってしまうが、人によって使い慣れたツールは異なるため、そんな単純な話しでもない。一方で昔は miro や backlog がなかった時代もあって、そのときは物理的な付箋紙をホワイトボードに張りながら作業をしていたから、本来は同期したいという概念もなかったはずという意見も出た。たしかにツールがデジタルになって電子データとなった瞬間からデータの再利用を考えるようになるんだなと私も思えた。あと付箋紙をホワイトボードに貼り付けていた時代は何週間もその状態のまま放置するといったこともなかったのではないか？という気もした。&lt;/p></content></item><item><title>github actions のワークフローカスタマイズ</title><link>/diary/posts/2021/1214/</link><pubDate>Tue, 14 Dec 2021 11:14:58 +0900</pubDate><guid>/diary/posts/2021/1214/</guid><description>0時に寝て6時半に起きた。
github actions の並行ビルド 1-2日でできると思ったら想定したよりややこしくて3日かかった。既存処理でかかっている時間を40-50%ほど短縮できた。1つの job で複数モジュールのビルドや docker イメージの生成、aws ecr への登録、eks の pod 更新などをしている処理を複数の job に分割する。job を分割すると、ビルド成果物を共有できなかったり、env のスコープも変わってくる。独立した job 環境で効率よく処理できるよう、ビルドキャッシュを導入したり、カスタムの composite アクションで処理を共通化したりと、あれやこれやを変更する量が増えていった。変更すること自体は問題ないけど、動作検証は github actions 上で動かさないと分からないところがあって、その検証に時間がかかる。複雑なワークフローを実装していると、github actions のかゆいところに手が届かないのにも気付けた。まだまだ circleci は企業向けに使われるのかもしれないなと思えた。
ビルドキャッシュを削除できない workflow レベルの env は参照できないフィールドがあったり job の steps で動的に更新できない workflow の再実行で途中の job から再実行できない カスタム action で run.if は使えない</description><content>&lt;p>0時に寝て6時半に起きた。&lt;/p>
&lt;h2 id="github-actions-の並行ビルド">github actions の並行ビルド&lt;/h2>
&lt;p>1-2日でできると思ったら想定したよりややこしくて3日かかった。既存処理でかかっている時間を40-50%ほど短縮できた。1つの job で複数モジュールのビルドや docker イメージの生成、aws ecr への登録、eks の pod 更新などをしている処理を複数の job に分割する。job を分割すると、ビルド成果物を共有できなかったり、env のスコープも変わってくる。独立した job 環境で効率よく処理できるよう、ビルドキャッシュを導入したり、カスタムの composite アクションで処理を共通化したりと、あれやこれやを変更する量が増えていった。変更すること自体は問題ないけど、動作検証は github actions 上で動かさないと分からないところがあって、その検証に時間がかかる。複雑なワークフローを実装していると、github actions のかゆいところに手が届かないのにも気付けた。まだまだ circleci は企業向けに使われるのかもしれないなと思えた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/actions/cache/issues/2">ビルドキャッシュを削除できない&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/actions/runner/issues/480">workflow レベルの env は参照できないフィールドがあったり&lt;/a> job の steps で動的に更新できない&lt;/li>
&lt;li>workflow の再実行で途中の job から再実行できない&lt;/li>
&lt;li>&lt;a href="https://tech.guitarrapc.com/entry/2021/08/01/194007#2-runif-%E3%81%AF%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%84-%E5%88%B6%E7%B4%84">カスタム action で run.if は使えない&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>log4j2 セキュリティ対応</title><link>/diary/posts/2021/1213/</link><pubDate>Mon, 13 Dec 2021 08:21:13 +0900</pubDate><guid>/diary/posts/2021/1213/</guid><description>23時に寝て5時に起きたが、だらだらしているうちに2度寝して6時半に起きた。
log4j2 セキュリティ対応 CVE-2021-44228 が金曜日のお昼から私のタイムラインを賑わしている。私がお手伝いしているお仕事はイントラのシステムなのでやや余裕をもって情報を眺めていた。issue のコメント をみても log4j 1.x にも影響があると書かれて、その後に実際には影響ないと書かれて、さらにその後に条件付きだけど影響はあると二転三転してた。自分で実際に試してなくて世の中の開発者の情報をみているだけ。そのため、公式の情報を信頼するといったポジションでしかない。関係者の方々には敬意を払いたい。私は spring の公式ブログで公開されている Log4J2 Vulnerability and Spring Boot を読みながら対応した。
ターコイズ ふとしたきっかけで ターコイズ の記事を読んだ。12月の誕生石らしく、それでいまの時期に紹介されることも多いのだと推測する。別の記事でターコイズは喉によいと書かれていて、以前 喉に違和感がある ことを書いた。日常生活に困るほどではないけど、もうこの歳だから体調が良くなることはなく悪くなる一方だろうという見通しも含めて験担ぎのような感覚で喉というキーワードでつながったから購入してみた。
近所の原石屋さんに行って尋ねてみたら1-2cmぐらいのサイズ1個240円ほどで売っていたので3個買って、近所のダイソーで入れものを買って、それっぽくオフィスに置いておくことにした。うちのコーポレートカラーはグリーンとブルーなんだけど、ターコイズも ターコイズグリーン と ターコイズブルー の2種類の色がある。創業も12月なので誕生石としても合致する。共通点があって相性がよさそうなのでうちのコーポレートストーン (そんな言葉ない) はターコイズでいいや。</description><content>&lt;p>23時に寝て5時に起きたが、だらだらしているうちに2度寝して6時半に起きた。&lt;/p>
&lt;h2 id="log4j2-セキュリティ対応">log4j2 セキュリティ対応&lt;/h2>
&lt;p>&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228">CVE-2021-44228&lt;/a> が金曜日のお昼から私のタイムラインを賑わしている。私がお手伝いしているお仕事はイントラのシステムなのでやや余裕をもって情報を眺めていた。&lt;a href="https://github.com/apache/logging-log4j2/pull/608#issuecomment-990494126">issue のコメント&lt;/a> をみても log4j 1.x にも影響があると書かれて、その後に実際には影響ないと書かれて、さらにその後に条件付きだけど影響はあると二転三転してた。自分で実際に試してなくて世の中の開発者の情報をみているだけ。そのため、公式の情報を信頼するといったポジションでしかない。関係者の方々には敬意を払いたい。私は spring の公式ブログで公開されている &lt;a href="https://spring.io/blog/2021/12/10/log4j2-vulnerability-and-spring-boot">Log4J2 Vulnerability and Spring Boot&lt;/a> を読みながら対応した。&lt;/p>
&lt;h2 id="ターコイズ">ターコイズ&lt;/h2>
&lt;p>ふとしたきっかけで &lt;a href="https://www.fu-stone.com/blog/turquoise/">ターコイズ&lt;/a> の記事を読んだ。12月の誕生石らしく、それでいまの時期に紹介されることも多いのだと推測する。別の記事でターコイズは喉によいと書かれていて、以前 &lt;a href="/diary/diary/posts/2021/1114/#傾斜枕">喉に違和感がある&lt;/a> ことを書いた。日常生活に困るほどではないけど、もうこの歳だから体調が良くなることはなく悪くなる一方だろうという見通しも含めて験担ぎのような感覚で喉というキーワードでつながったから購入してみた。&lt;/p>
&lt;p>近所の原石屋さんに行って尋ねてみたら1-2cmぐらいのサイズ1個240円ほどで売っていたので3個買って、近所のダイソーで入れものを買って、それっぽくオフィスに置いておくことにした。うちのコーポレートカラーはグリーンとブルーなんだけど、ターコイズも &lt;a href="https://www.colordic.org/colorscheme/4115">ターコイズグリーン&lt;/a> と &lt;a href="https://www.colordic.org/colorscheme/4129">ターコイズブルー&lt;/a> の2種類の色がある。創業も12月なので誕生石としても合致する。共通点があって相性がよさそうなのでうちのコーポレートストーン (そんな言葉ない) はターコイズでいいや。&lt;/p></content></item><item><title>ワーケーション準備</title><link>/diary/posts/2021/1212/</link><pubDate>Sun, 12 Dec 2021 11:53:29 +0900</pubDate><guid>/diary/posts/2021/1212/</guid><description>2時半に寝て7時に起きた。なんか眠れなくてだらだらしてた。
ワーケーション予約 参加予定者に最終確認をとって3人参加してくれることになった。感謝。私を含めて4人で行ってくる。レンタカーと きのいえ の予約を確定させた。1月28-30日で 城崎温泉 でワーケーションしてくる。宿泊は金曜日の夜しか予約があいてなくて4月まで土曜日の夜はすでに予約が埋まっていた。もし金土と連泊で予約するときは3ヶ月以上前に予約をとらないといけないということがわかった。宿泊人数によって料金が変わってくるため、多少の人数変更に対応できる条件で予約できるのが望ましい。今回泊まることでオーナーの人とやり取りできればそういったことも聞いてみようと思う。その後、旅のしおりを作り始めた。まだ1ヶ月あるので調べながらゆっくり準備を進めていく。移動や作業のための時間、食事、親睦会などタイムラインを作りながらやり方を検討していく。
ショコラ・シュバルツ 山梨県北杜市のふるさと納税 の返礼品として ショコラ・シュバルツ（Chocolat Schwartz） が届いた。試しに1本飲んでみた。香りがよくて黒ビールなんだけど、普通の黒ビールとは異なる風味でそれがショコラなのかどうか、私にはよくわかってないけど、あまり味わったことのない黒ビールという点からはおいしかった。毎日飲むようなビールではないと思うが、イベントや記念日など普通のビールとは異なるビールを試したいときには向きそう。お土産などにもよさそう。</description><content>&lt;p>2時半に寝て7時に起きた。なんか眠れなくてだらだらしてた。&lt;/p>
&lt;h2 id="ワーケーション予約">ワーケーション予約&lt;/h2>
&lt;p>参加予定者に最終確認をとって3人参加してくれることになった。感謝。私を含めて4人で行ってくる。レンタカーと &lt;a href="https://kinosaki-kinoie.com/">きのいえ&lt;/a> の予約を確定させた。1月28-30日で &lt;a href="https://kinosaki-spa.gr.jp/">城崎温泉&lt;/a> でワーケーションしてくる。宿泊は金曜日の夜しか予約があいてなくて4月まで土曜日の夜はすでに予約が埋まっていた。もし金土と連泊で予約するときは3ヶ月以上前に予約をとらないといけないということがわかった。宿泊人数によって料金が変わってくるため、多少の人数変更に対応できる条件で予約できるのが望ましい。今回泊まることでオーナーの人とやり取りできればそういったことも聞いてみようと思う。その後、旅のしおりを作り始めた。まだ1ヶ月あるので調べながらゆっくり準備を進めていく。移動や作業のための時間、食事、親睦会などタイムラインを作りながらやり方を検討していく。&lt;/p>
&lt;h2 id="ショコラシュバルツ">ショコラ・シュバルツ&lt;/h2>
&lt;p>&lt;a href="https://www.satofull.jp/products/detail.php?product_id=1256650">山梨県北杜市のふるさと納税&lt;/a> の返礼品として &lt;a href="https://www.yatsugatake-beer.com/?mode=grp&amp;amp;gid=1059669">ショコラ・シュバルツ（Chocolat Schwartz）&lt;/a> が届いた。試しに1本飲んでみた。香りがよくて黒ビールなんだけど、普通の黒ビールとは異なる風味でそれがショコラなのかどうか、私にはよくわかってないけど、あまり味わったことのない黒ビールという点からはおいしかった。毎日飲むようなビールではないと思うが、イベントや記念日など普通のビールとは異なるビールを試したいときには向きそう。お土産などにもよさそう。&lt;/p></content></item><item><title>ワーケーションのシミュレーション</title><link>/diary/posts/2021/1211/</link><pubDate>Sat, 11 Dec 2021 13:13:29 +0900</pubDate><guid>/diary/posts/2021/1211/</guid><description>1時に寝て7時に起きた。久しぶりに遅くまで飲んでたのでやや気分が悪い。全体としてあまり大したことしてなかったんだけど、日記のふりかえりしたり、スクラム談義したり、log4j の脆弱性のその後の状況を静観したりしてた。
ストレッチ 今週もお仕事に注力してたらストレッチは2日/週とあまりできなかった。夜も外に出掛けるのが億劫になったり、勉強会に参加してたりしてウォーキングもやってない。今日の開脚幅は開始前167cmで、ストレッチ後169.5cmだった。さぼってたわりにはまぁまぁだった。特別なことはなにもしてなかったけど、右太もも後ろの筋がやや張っていて右足はあまりよくない。一方で右股関節の不可動領域がよくなっていることが自分でストレッチしててもわかるようになってきて半年以上やってきた甲斐があったと言える。
ワーケーション計画 参加者の目処がついてきたので城崎温泉に出掛けるワーケーションの計画をシミュレーションしていた。たとえば電車とレンタカーでどのぐらい料金の差になるかというと、三ノ宮発でレンタカーを借りて移動 (2泊3日) するときの料金 (高速道路/ガソリン代含む) は 35,648 円、電車は往復11,000円/人になる。3人いればレンタカーと同じぐらいの料金で、4人いればレンタカーで移動した方が安くなる。3人だったとしても移動の勝手の良さを考慮するとレンタカーの方がよさそうに思えた。</description><content>&lt;p>1時に寝て7時に起きた。久しぶりに遅くまで飲んでたのでやや気分が悪い。全体としてあまり大したことしてなかったんだけど、日記のふりかえりしたり、スクラム談義したり、log4j の脆弱性のその後の状況を静観したりしてた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週もお仕事に注力してたらストレッチは2日/週とあまりできなかった。夜も外に出掛けるのが億劫になったり、勉強会に参加してたりしてウォーキングもやってない。今日の開脚幅は開始前167cmで、ストレッチ後169.5cmだった。さぼってたわりにはまぁまぁだった。特別なことはなにもしてなかったけど、右太もも後ろの筋がやや張っていて右足はあまりよくない。一方で右股関節の不可動領域がよくなっていることが自分でストレッチしててもわかるようになってきて半年以上やってきた甲斐があったと言える。&lt;/p>
&lt;h2 id="ワーケーション計画">ワーケーション計画&lt;/h2>
&lt;p>参加者の目処がついてきたので城崎温泉に出掛けるワーケーションの計画をシミュレーションしていた。たとえば電車とレンタカーでどのぐらい料金の差になるかというと、三ノ宮発でレンタカーを借りて移動 (2泊3日) するときの料金 (高速道路/ガソリン代含む) は 35,648 円、電車は往復11,000円/人になる。3人いればレンタカーと同じぐらいの料金で、4人いればレンタカーで移動した方が安くなる。3人だったとしても移動の勝手の良さを考慮するとレンタカーの方がよさそうに思えた。&lt;/p></content></item><item><title>ワーケーションの思いつき</title><link>/diary/posts/2021/1210/</link><pubDate>Fri, 10 Dec 2021 08:43:04 +0900</pubDate><guid>/diary/posts/2021/1210/</guid><description>0時に寝て6時に起きた。
朝活: アジャイル開発とスクラム 第2版 金朝ツメトギ 2021-12-10 AM 6 金曜朝6時開催のもくもく会 に参加した。今回はてらださんも来られていた。第9章を読んだ。KDDI さんの事例紹介で2013年から取り組みしているらしい。フラクタルスプリント を実際の業務で実践している稀な事例としておもしろかった。1週間のスプリントの中に1日のスプリントが4回あるといったフラクタル構造のスプリント。また金曜日は「仕事をしない日」としてレトロスペクティブと OST (オープンスペーステクノロジー、自由な発表と議論の時間) に割当てている。20%ルールに近いものと言えるかもしれないが、自己研鑽のための時間をスプリントの中に組み込むという、組織の理解があってこそできる取り組みを実践していてすごいなと感心した。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。スクラムの話題として だいくしーのスクラム Bar #1 や Scrum Masters Night! Online 〜第10夜〜 に参加してやり取りした内容や考察したことなどをいろいろ話してた。そのうちの話題の1つに、スクラムマスターの役割とは何だろうかがある。スクラムマスターはプロダクトをよくすることに責任をもち、メンバーが働きやすいように支えるような役割である。ここまでは共通認識として、その範囲がどこまでかは人によって意見が異なるように思えた。あくまでプロダクトやチームの範囲内で行動するスクラムマスターと、スクラムを組織全体に広めたり、人事・評価制度や経営にも参加していくスクラムマスターがある。スクラムマスターは社外の人間でもできるという考え方があるが、必然的に後者の役割も担うなら社内の人間に限定される。後者の役割は越権行為ではないか、いやいや、チームのために働いたメンバーの評価が下がってしまえば現場でよりよいプロダクト開発はできないから大事ではないかという意見も出た。便宜上、前者を (普通の) スクラムマスター、後者を「意識の高い」スクラムマスターと呼ぶ。私の考えでは、意識の高いスクラムマスターの言わんとしていることはわかるが、それをやりたいなら部長や役員などになってから職責とともに改善すべきであり、スクラムマスターという組織におけるラインではない人が経営に口出ししたりすることによる、組織の歪みはまた別の問題を引き起こすのではないかとも思えた。私も経営をやっていて経営側の視点でみるとやはりおかしい。
その後にワーケーションについて相談した。城崎温泉にある きのいえ でワーケーションをやってみようかと考えている。参加のお誘いややり方についていくつか相談しながら前向きに検討しようということになった。
忘年会 【初参加大歓迎】三宮.dev＆bizpy 合同忘年会 に参加してきた。忘年会の前に運営に入ってもらった、わたなべさんと軽く bizpy の運営について話してきた。1月はわたなべさんに機械学習の勉強会をやってもらう。私は昨年も三宮.devの忘年会に出てた。昨年は3人だったのが今年は4人になった。名物の大きなポークカツレツ。4人とも勉強会の常連みたいな人たちなのでお酒を飲みながらわいわいやって、コロナ禍になる前のコミュニティの勉強会の飲み会を思い出したりしてた。ワーケーションの話をしたら2人は興味を示してくれて、メンバーが4人集まったので開発合宿の企画をしてみることに決めた。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="朝活-アジャイル開発とスクラム-第2版">朝活: アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=MbpX1LF1fto">金朝ツメトギ 2021-12-10 AM 6 金曜朝6時開催のもくもく会&lt;/a> に参加した。今回はてらださんも来られていた。第9章を読んだ。KDDI さんの事例紹介で2013年から取り組みしているらしい。&lt;a href="/diary/diary/posts/2021/1029/#フラクタルスプリント">フラクタルスプリント&lt;/a> を実際の業務で実践している稀な事例としておもしろかった。1週間のスプリントの中に1日のスプリントが4回あるといったフラクタル構造のスプリント。また金曜日は「仕事をしない日」としてレトロスペクティブと OST (オープンスペーステクノロジー、自由な発表と議論の時間) に割当てている。20%ルールに近いものと言えるかもしれないが、自己研鑽のための時間をスプリントの中に組み込むという、組織の理解があってこそできる取り組みを実践していてすごいなと感心した。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1210-weekly-sprint.png"/>
&lt;/figure>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。スクラムの話題として &lt;a href="https://chatwork.connpass.com/event/231183/">だいくしーのスクラム Bar #1&lt;/a> や &lt;a href="https://smn.connpass.com/event/226002/">Scrum Masters Night! Online 〜第10夜〜&lt;/a> に参加してやり取りした内容や考察したことなどをいろいろ話してた。そのうちの話題の1つに、スクラムマスターの役割とは何だろうかがある。スクラムマスターはプロダクトをよくすることに責任をもち、メンバーが働きやすいように支えるような役割である。ここまでは共通認識として、その範囲がどこまでかは人によって意見が異なるように思えた。あくまでプロダクトやチームの範囲内で行動するスクラムマスターと、スクラムを組織全体に広めたり、人事・評価制度や経営にも参加していくスクラムマスターがある。スクラムマスターは社外の人間でもできるという考え方があるが、必然的に後者の役割も担うなら社内の人間に限定される。後者の役割は越権行為ではないか、いやいや、チームのために働いたメンバーの評価が下がってしまえば現場でよりよいプロダクト開発はできないから大事ではないかという意見も出た。便宜上、前者を (普通の) スクラムマスター、後者を「意識の高い」スクラムマスターと呼ぶ。私の考えでは、意識の高いスクラムマスターの言わんとしていることはわかるが、それをやりたいなら部長や役員などになってから職責とともに改善すべきであり、スクラムマスターという組織におけるラインではない人が経営に口出ししたりすることによる、組織の歪みはまた別の問題を引き起こすのではないかとも思えた。私も経営をやっていて経営側の視点でみるとやはりおかしい。&lt;/p>
&lt;p>その後にワーケーションについて相談した。城崎温泉にある &lt;a href="https://kinosaki-kinoie.com/">きのいえ&lt;/a> でワーケーションをやってみようかと考えている。参加のお誘いややり方についていくつか相談しながら前向きに検討しようということになった。&lt;/p>
&lt;h2 id="忘年会">忘年会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/231602/">【初参加大歓迎】三宮.dev＆bizpy 合同忘年会&lt;/a> に参加してきた。忘年会の前に運営に入ってもらった、わたなべさんと軽く bizpy の運営について話してきた。1月はわたなべさんに機械学習の勉強会をやってもらう。私は昨年も三宮.devの忘年会に出てた。昨年は3人だったのが今年は4人になった。名物の大きなポークカツレツ。4人とも勉強会の常連みたいな人たちなのでお酒を飲みながらわいわいやって、コロナ禍になる前のコミュニティの勉強会の飲み会を思い出したりしてた。ワーケーションの話をしたら2人は興味を示してくれて、メンバーが4人集まったので開発合宿の企画をしてみることに決めた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1210-katsu.jpg"/>
&lt;/figure></content></item><item><title>2年目の創立記念日</title><link>/diary/posts/2021/1209/</link><pubDate>Thu, 09 Dec 2021 11:24:30 +0900</pubDate><guid>/diary/posts/2021/1209/</guid><description>0時半に寝て6時半に起きた。久しぶりに22時までお仕事やって区切りもよかったからそれからお惣菜を買って23時頃から晩ご飯を食べてた。生活が乱れるなぁ。
dapr の分散トレーシングと W3C trace context お仕事で dapr の分散トレーシングを検証してた。知らない人は Dapr Advent Calendar 8日目 - DaprとZipkinで分散トレーシング のチュートリアルをお勧めする。dapr は W3C Trace Context を使って分散トレーシングを扱う。rest api では、具体的には traceparent と tracestore という http ヘッダーにトレース用途の情報を付けて転送する。すごいところは pubsub のメッセージングを経由してもそれらの情報を転送できる。pubsub 間でこれらの情報は CloudEvents という標準化されたデータのフォーマットでやり取りされる。実際には CloudEvents の中に traceparent と tracestore の値を含めて通信するけれど、外部からみたら http ヘッダーを転送できているようにみえる。しかし、http ヘッダーの任意の値を転送したい場合、それができない。tracestore はトレースのためのベンダー独自情報を付与できるとあったので、ここに任意の値をセットして送ってみたけど、http ヘッダーの付け替えは行われなかった。あとで dapr のソースを読んだら publish するときはそのまま送っているけど、subscribe するときに tracestore の仕様を満たしているか検証しながらパースしていて、任意の値を送っても仕様に沿っていなければ捨てられてしまうことがわかった。dapr の issue でも要望として登録されてた。誰もやってないならコントリビュートするチャンスかもしれない。
Propagate arbitrary/configurable http headers from publisher to subscribers #3642 創立記念日 今日が会社の創立記念日。無事に2周年を迎えた。創立記念日をお休みにするしないを考えたのだけど、いま休日も普通に働いている状況で、且つ役員は勤怠管理をする必要はないので平日になんの意味もなく休むメリットが何もないということに行き着いた。創立記念日だから休むのではなく、いつでも必要なときに休めばいい。もっと言うと、休む理由がなければ働くという逆転現象が生じていて、休む理由は私用か疲労ぐらいしかなくて、基本的に疲れてない限りはずっと働くみたいな理屈になってしまっている。社員が増えて会社に余裕が出てから創立記念日は休みみたいな制度を作ればいい。それまではたぶん来年もそれ以降も普通に働いていると思う。
1年目は訳分からず働いていたから経営的なことは全くわからなかったけど、2年目は経営上の諸問題が出てきて、経営的な意思決定や考察も増えてきて、行政手続きも熟れて、会社の実績も増えていっていて、会社を育てるという意識もかなり出てきた。率直に言えば、いまの経営状態は可もなく不可もなくといったものなので何もアピールすることはない。しかし、経営したことない人間が経営というキャリアを積み重ねていることには大きな意義があって、自身のキャリアアップには確かな手応えも感じつつある。これからもがんばっていこう。</description><content>&lt;p>0時半に寝て6時半に起きた。久しぶりに22時までお仕事やって区切りもよかったからそれからお惣菜を買って23時頃から晩ご飯を食べてた。生活が乱れるなぁ。&lt;/p>
&lt;h2 id="dapr-の分散トレーシングと-w3c-trace-context">dapr の分散トレーシングと W3C trace context&lt;/h2>
&lt;p>お仕事で dapr の分散トレーシングを検証してた。知らない人は &lt;a href="https://cero-t.hatenadiary.jp/entry/2021/12/08/071742">Dapr Advent Calendar 8日目 - DaprとZipkinで分散トレーシング&lt;/a> のチュートリアルをお勧めする。dapr は &lt;a href="https://www.w3.org/TR/trace-context/">W3C Trace Context&lt;/a> を使って分散トレーシングを扱う。rest api では、具体的には &lt;code>traceparent&lt;/code> と &lt;code>tracestore&lt;/code> という http ヘッダーにトレース用途の情報を付けて転送する。すごいところは pubsub のメッセージングを経由してもそれらの情報を転送できる。pubsub 間でこれらの情報は &lt;a href="https://github.com/cloudevents/spec">CloudEvents&lt;/a> という標準化されたデータのフォーマットでやり取りされる。実際には CloudEvents の中に &lt;code>traceparent&lt;/code> と &lt;code>tracestore&lt;/code> の値を含めて通信するけれど、外部からみたら http ヘッダーを転送できているようにみえる。しかし、http ヘッダーの任意の値を転送したい場合、それができない。&lt;code>tracestore&lt;/code> はトレースのためのベンダー独自情報を付与できるとあったので、ここに任意の値をセットして送ってみたけど、http ヘッダーの付け替えは行われなかった。あとで dapr のソースを読んだら publish するときはそのまま送っているけど、subscribe するときに &lt;code>tracestore&lt;/code> の仕様を満たしているか検証しながらパースしていて、任意の値を送っても仕様に沿っていなければ捨てられてしまうことがわかった。dapr の issue でも要望として登録されてた。誰もやってないならコントリビュートするチャンスかもしれない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/dapr/dapr/issues/3642">Propagate arbitrary/configurable http headers from publisher to subscribers #3642&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="創立記念日">創立記念日&lt;/h2>
&lt;p>今日が会社の創立記念日。無事に2周年を迎えた。創立記念日をお休みにするしないを考えたのだけど、いま休日も普通に働いている状況で、且つ役員は勤怠管理をする必要はないので平日になんの意味もなく休むメリットが何もないということに行き着いた。創立記念日だから休むのではなく、いつでも必要なときに休めばいい。もっと言うと、休む理由がなければ働くという逆転現象が生じていて、休む理由は私用か疲労ぐらいしかなくて、基本的に疲れてない限りはずっと働くみたいな理屈になってしまっている。社員が増えて会社に余裕が出てから創立記念日は休みみたいな制度を作ればいい。それまではたぶん来年もそれ以降も普通に働いていると思う。&lt;/p>
&lt;p>1年目は訳分からず働いていたから経営的なことは全くわからなかったけど、2年目は経営上の諸問題が出てきて、経営的な意思決定や考察も増えてきて、行政手続きも熟れて、会社の実績も増えていっていて、会社を育てるという意識もかなり出てきた。率直に言えば、いまの経営状態は可もなく不可もなくといったものなので何もアピールすることはない。しかし、経営したことない人間が経営というキャリアを積み重ねていることには大きな意義があって、自身のキャリアアップには確かな手応えも感じつつある。これからもがんばっていこう。&lt;/p></content></item><item><title>整理・整頓・清掃・清潔・躾</title><link>/diary/posts/2021/1208/</link><pubDate>Wed, 08 Dec 2021 07:01:44 +0900</pubDate><guid>/diary/posts/2021/1208/</guid><description>0時に寝て5時に起きた。今日はがんばって起きた！久しぶりに7時半から始業してた。
トヨタの5S スクラムイベントのふりかえりをしていて トヨタの5S の話題が出た。聞いたことがあるようないような、スクラムを勉強しているいま見返すとじわじわ聞いてくる。玄人ぶって「そうそう、こういうのが大事なんだよ」とか言いたくなりそうな雰囲気がある。普通にやっていたら当たり前のことなのに、忙しかったり複雑な問題に対応してたりすると、普通の状態を維持できなくなって混沌がもたらされる気がする。そういう状況のときに初心に戻るにはこういった原則や標榜を使って啓蒙することに意義があるんだと、いまは思うようになってきた。これ自体をよいとかわるいとか言うのは適切ではなくて、うまくいっていない状態からより戻すときに活用するといった考え方の方が正しいのかもしれない。</description><content>&lt;p>0時に寝て5時に起きた。今日はがんばって起きた！久しぶりに7時半から始業してた。&lt;/p>
&lt;h2 id="トヨタの5s">トヨタの5S&lt;/h2>
&lt;p>スクラムイベントのふりかえりをしていて &lt;a href="https://circu.co.jp/pro-sharing/mag/article/2964/">トヨタの5S&lt;/a> の話題が出た。聞いたことがあるようないような、スクラムを勉強しているいま見返すとじわじわ聞いてくる。玄人ぶって「そうそう、こういうのが大事なんだよ」とか言いたくなりそうな雰囲気がある。普通にやっていたら当たり前のことなのに、忙しかったり複雑な問題に対応してたりすると、普通の状態を維持できなくなって混沌がもたらされる気がする。そういう状況のときに初心に戻るにはこういった原則や標榜を使って啓蒙することに意義があるんだと、いまは思うようになってきた。これ自体をよいとかわるいとか言うのは適切ではなくて、うまくいっていない状態からより戻すときに活用するといった考え方の方が正しいのかもしれない。&lt;/p></content></item><item><title>クロスデフォルト</title><link>/diary/posts/2021/1207/</link><pubDate>Tue, 07 Dec 2021 08:14:52 +0900</pubDate><guid>/diary/posts/2021/1207/</guid><description>0時に寝て6時半に起きた。5時台には起きているんだけど、起き上がるところまではなかなかいけない。
恒大集団のデフォルト 11月から利払の期日の日はチェックしていて、支払うときは2-3日前には支払いを完了したというニュースが出ていたように思う。今日の支払いは前日に支払いしたというニュースが出ないからダメなんだろうなと様子をみていた。
中国恒大、猶予期間終了までにオフショア債利払いできず＝関係筋 1つの債務がデフォルトした場合、残りの債務も一括返済しないといけないことを クロスデフォルト と呼ぶらしい。契約書にクロスデフォルト条項として書いてあるらしい。記事によると、クロスデフォルトによって約190億ドル (約2.1兆円) のオフショア債の返済を一括でしないといけないらしい。リーマンショックのようなことは起きないという見通しだけど、うちみたいな零細企業は世の中の影響を諸に受けるのでお仕事に影響がでなければいいなぁといったところ。
アプリケーションログの調査 昨日の続き。ecs-logging-java で JSON Lines でログを制御するところで spring-boot の設定で tomcat のアクセスログの設定ができる。tomcat のアクセスログを log4j のレイアウトの仕組みを使って ecs-logging-java が提供する EcsLayout に変更できないかを3時間ほど調査して、どうもできないようだというのを教えてもらった。tomcat は apache のログを出力するという目的で実装されているから log4j の柔軟なログに対応していないという理屈。
じゃあ、どうやって apache のアクセスログを JSON Lines にするかというと、PatternLayout のパターンに json のフォーマットを直書きしてしまうというやり方がある。なんかプログラミングでスマートに解決したいところだけど、その仕組みがないなら仕方ないかって感じでこれでやろうと思う。
apacheのaccess_logをjson化しtd-agentで集約サーバへ収集する</description><content>&lt;p>0時に寝て6時半に起きた。5時台には起きているんだけど、起き上がるところまではなかなかいけない。&lt;/p>
&lt;h2 id="恒大集団のデフォルト">恒大集団のデフォルト&lt;/h2>
&lt;p>11月から利払の期日の日はチェックしていて、支払うときは2-3日前には支払いを完了したというニュースが出ていたように思う。今日の支払いは前日に支払いしたというニュースが出ないからダメなんだろうなと様子をみていた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://jp.reuters.com/article/evergrande-idJPKBN2IM0F0">中国恒大、猶予期間終了までにオフショア債利払いできず＝関係筋&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>1つの債務がデフォルトした場合、残りの債務も一括返済しないといけないことを &lt;a href="https://www.ifinance.ne.jp/glossary/loan/loa259.html">クロスデフォルト&lt;/a> と呼ぶらしい。契約書にクロスデフォルト条項として書いてあるらしい。記事によると、クロスデフォルトによって約190億ドル (約2.1兆円) のオフショア債の返済を一括でしないといけないらしい。リーマンショックのようなことは起きないという見通しだけど、うちみたいな零細企業は世の中の影響を諸に受けるのでお仕事に影響がでなければいいなぁといったところ。&lt;/p>
&lt;h2 id="アプリケーションログの調査">アプリケーションログの調査&lt;/h2>
&lt;p>昨日の続き。ecs-logging-java で JSON Lines でログを制御するところで spring-boot の設定で tomcat のアクセスログの設定ができる。tomcat のアクセスログを log4j のレイアウトの仕組みを使って ecs-logging-java が提供する EcsLayout に変更できないかを3時間ほど調査して、どうもできないようだというのを教えてもらった。tomcat は apache のログを出力するという目的で実装されているから log4j の柔軟なログに対応していないという理屈。&lt;/p>
&lt;p>じゃあ、どうやって apache のアクセスログを JSON Lines にするかというと、PatternLayout のパターンに json のフォーマットを直書きしてしまうというやり方がある。なんかプログラミングでスマートに解決したいところだけど、その仕組みがないなら仕方ないかって感じでこれでやろうと思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://ogugu.hateblo.jp/entry/2018/08/03/153930">apacheのaccess_logをjson化しtd-agentで集約サーバへ収集する&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>アプリケーションログの調査</title><link>/diary/posts/2021/1206/</link><pubDate>Mon, 06 Dec 2021 08:08:14 +0900</pubDate><guid>/diary/posts/2021/1206/</guid><description>1時に寝て7時に起きた。
アプリケーションログの調査 お仕事でログの整理をやろうとしていて、そのためのライブラリとして ecs-logging-java を調べてた。
ECS Logging Java Reference 1.x » Get started ecs-logging-javaつかってみた 一番のモチベーションは JSON Lines でログを管理したいというところ。この手の実装や読み込んでログ分析したりとかはあちこちでやってきたので親近感はある。既存のログからの移行も含めていろいろ設計していかないといけない。私の感覚だとアプリケーションの開発初期にログの設計や出力周りを作り込むものだけど、そうじゃない文化の開発もあるんだなという印象。あとからログ設計するとか、移行や既存のコードに手を入れたり、開発初期に作り込むより手間暇かかる気がするんだけど、そんな時間もなく開発してたってことなのかなぁ。</description><content>&lt;p>1時に寝て7時に起きた。&lt;/p>
&lt;h2 id="アプリケーションログの調査">アプリケーションログの調査&lt;/h2>
&lt;p>お仕事でログの整理をやろうとしていて、そのためのライブラリとして ecs-logging-java を調べてた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.elastic.co/guide/en/ecs-logging/java/current/setup.html">ECS Logging Java Reference 1.x » Get started&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://speakerdeck.com/shibadog/ecs-logging-javatukatutemita">ecs-logging-javaつかってみた&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>一番のモチベーションは &lt;a href="https://jsonlines.org/">JSON Lines&lt;/a> でログを管理したいというところ。この手の実装や読み込んでログ分析したりとかはあちこちでやってきたので親近感はある。既存のログからの移行も含めていろいろ設計していかないといけない。私の感覚だとアプリケーションの開発初期にログの設計や出力周りを作り込むものだけど、そうじゃない文化の開発もあるんだなという印象。あとからログ設計するとか、移行や既存のコードに手を入れたり、開発初期に作り込むより手間暇かかる気がするんだけど、そんな時間もなく開発してたってことなのかなぁ。&lt;/p></content></item><item><title>頭文字Dを読了</title><link>/diary/posts/2021/1205/</link><pubDate>Sun, 05 Dec 2021 11:47:08 +0900</pubDate><guid>/diary/posts/2021/1205/</guid><description>0時に寝て7時に起きてだらだらやってて午前中は 頭文字D のアニメをみてた。漫画 (アニメも？) はすでに完結しているのでいつか読もうと思いつつ最後まで読んでいない。ゴッドフットやゴッドアームが出てくるぐらいまでは読んだ気がする。その後どうなったのかを知らない。イニシャルDをみていると、ストーリーも絵も演出もまったく派手さはなくて普通なんだけど、なぜかおもしろくて続きをみてしまうという人間の娯楽の本質をついている気がしてくる。なんでなんだろうなぁ。
頭文字D たまたま思い出したので夜に漫画喫茶行って頭文字Dを最後まで読んできた。全48巻で、31巻ぐらいから読み始めて3-4時間ぐらいで読み終えた。漫画なので仕方ないけど、対戦相手がどんどん強くなっていって勝ち方が玄人好みというのか、単純に抜いた・抜かれたの話しではなく、タイヤマネージメントがどうこうとか、恐怖に対する心理がどうこうとか、ドライバーと車のセッティングも含めた駆け引きが強くなっていって、どちらが速いかというよりは戦略通りの展開にもっていって最後はそれがうまくはまるみたいな、これまでもずっとそうだったんだけど、ここからはよりトップレベルのほんの僅かな差が勝敗を分けるといった描き方になっていったように思う。それはそれで現実に近い気はするけど、漫画的には派手な演出にならないので玄人好みなストーリーになっていった気がする。但し、そこまでやってきて最後の対戦相手だけは、個人的には納得感がなくて、ここまで緻密に作り上げてきた理論や個々のドライバーの修練の積み重ねが圧倒的天才の前にひれ伏すみたいな切り口が急展開していて、頭の切り替えができなかった感じがした。とはいえ、最後まで読み終えられてよかったし、作品としてはすごくおもしろかった。作者はモータースポーツが本当に好きなんだろうなというのが伝わってくる漫画だと思う。
ふるさと納税 あまり欲しいものもないし、ふるさと納税の行政手続きも一通り理解したから今年はやらなくてもいいかとも思っていた。しかし、paypayボーナスキャンペーン をみてやってみるかという気になった。paypay はいろんなものと連携していて見かけるたびにすごいなと思う。お得だからと必要もないものを買うことはないけど、ふるさと納税はやらなかったとしても、どのみち納税は必要なものなので還元があるということは節税につながるのかな？理屈はよくわからないけど、言いたいことは paypay はすごいという話でした。
dapr の api トークンを使った認証 Enable API token authentication in Dapr を一通り読んだ。内容はとくに難しくなく、こんな風に dapr の manifest を書けば JWT トークンを設定できますということを書いてある。私はずっとサーバーサイドばっかりやってきたからフロントエンドで使われる技術や仕組みに弱い。JWT トークンもその1つで、自分でちゃんと実装したことがないからちゃんとよく分かってない。これが OAuth2 なら provider を実装したこともあるからその仕組みも意図も理解できる。一度どこかで自分で JWT も実装してみないといけないのだろうな。
少し前にお仕事で kubernetes の secret の移行作業をやった。既存の secret にキーバリューを追加するときは patch を使う。
$ kubectl patch secret mydata -p=&amp;#39;{&amp;#34;stringData&amp;#34;:{&amp;#34;mykey&amp;#34;: &amp;#34;myvalue&amp;#34;}}&amp;#39; secret の内容を確認するときも2つのやり方がある。キーだけを確認するならこれでよい。
$ kubectl describe secrets mydata キーに対応する値もデコードして確認するならこうする。但し、閲覧注意。
$ kubectl get secret mydata -o json | jq &amp;#39;.</description><content>&lt;p>0時に寝て7時に起きてだらだらやってて午前中は &lt;a href="https://ja.wikipedia.org/wiki/%E9%A0%AD%E6%96%87%E5%AD%97D">頭文字D&lt;/a> のアニメをみてた。漫画 (アニメも？) はすでに完結しているのでいつか読もうと思いつつ最後まで読んでいない。ゴッドフットやゴッドアームが出てくるぐらいまでは読んだ気がする。その後どうなったのかを知らない。イニシャルDをみていると、ストーリーも絵も演出もまったく派手さはなくて普通なんだけど、なぜかおもしろくて続きをみてしまうという人間の娯楽の本質をついている気がしてくる。なんでなんだろうなぁ。&lt;/p>
&lt;h2 id="頭文字d">頭文字D&lt;/h2>
&lt;p>たまたま思い出したので夜に漫画喫茶行って頭文字Dを最後まで読んできた。全48巻で、31巻ぐらいから読み始めて3-4時間ぐらいで読み終えた。漫画なので仕方ないけど、対戦相手がどんどん強くなっていって勝ち方が玄人好みというのか、単純に抜いた・抜かれたの話しではなく、タイヤマネージメントがどうこうとか、恐怖に対する心理がどうこうとか、ドライバーと車のセッティングも含めた駆け引きが強くなっていって、どちらが速いかというよりは戦略通りの展開にもっていって最後はそれがうまくはまるみたいな、これまでもずっとそうだったんだけど、ここからはよりトップレベルのほんの僅かな差が勝敗を分けるといった描き方になっていったように思う。それはそれで現実に近い気はするけど、漫画的には派手な演出にならないので玄人好みなストーリーになっていった気がする。但し、そこまでやってきて最後の対戦相手だけは、個人的には納得感がなくて、ここまで緻密に作り上げてきた理論や個々のドライバーの修練の積み重ねが圧倒的天才の前にひれ伏すみたいな切り口が急展開していて、頭の切り替えができなかった感じがした。とはいえ、最後まで読み終えられてよかったし、作品としてはすごくおもしろかった。作者はモータースポーツが本当に好きなんだろうなというのが伝わってくる漫画だと思う。&lt;/p>
&lt;h2 id="ふるさと納税">ふるさと納税&lt;/h2>
&lt;p>あまり欲しいものもないし、ふるさと納税の行政手続きも一通り理解したから今年はやらなくてもいいかとも思っていた。しかし、&lt;a href="https://www.satofull.jp/static/campaign/202112_pcp.php">paypayボーナスキャンペーン&lt;/a> をみてやってみるかという気になった。paypay はいろんなものと連携していて見かけるたびにすごいなと思う。お得だからと必要もないものを買うことはないけど、ふるさと納税はやらなかったとしても、どのみち納税は必要なものなので還元があるということは節税につながるのかな？理屈はよくわからないけど、言いたいことは paypay はすごいという話でした。&lt;/p>
&lt;h2 id="dapr-の-api-トークンを使った認証">dapr の api トークンを使った認証&lt;/h2>
&lt;p>&lt;a href="https://docs.dapr.io/operations/security/api-token/">Enable API token authentication in Dapr&lt;/a> を一通り読んだ。内容はとくに難しくなく、こんな風に dapr の manifest を書けば &lt;a href="https://jwt.io/">JWT&lt;/a> トークンを設定できますということを書いてある。私はずっとサーバーサイドばっかりやってきたからフロントエンドで使われる技術や仕組みに弱い。JWT トークンもその1つで、自分でちゃんと実装したことがないからちゃんとよく分かってない。これが OAuth2 なら provider を実装したこともあるからその仕組みも意図も理解できる。一度どこかで自分で JWT も実装してみないといけないのだろうな。&lt;/p>
&lt;p>少し前にお仕事で kubernetes の secret の移行作業をやった。既存の secret にキーバリューを追加するときは patch を使う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl patch secret mydata -p&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;{&amp;#34;stringData&amp;#34;:{&amp;#34;mykey&amp;#34;: &amp;#34;myvalue&amp;#34;}}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>secret の内容を確認するときも2つのやり方がある。キーだけを確認するならこれでよい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl describe secrets mydata
&lt;/code>&lt;/pre>&lt;/div>&lt;p>キーに対応する値もデコードして確認するならこうする。但し、閲覧注意。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get secret mydata -o json | jq &lt;span style="color:#e6db74">&amp;#39;.data | map_values(@base64d)&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>github actions のビルドキャッシュ運用</title><link>/diary/posts/2021/1204/</link><pubDate>Sat, 04 Dec 2021 13:20:21 +0900</pubDate><guid>/diary/posts/2021/1204/</guid><description>23時に寝て5時に起きてちょっと作業してまた寝て7時に起きた。お仕事も働き始めて1ヶ月が経過して、だいぶチームの雰囲気や業務に慣れてきたところ。稼働日の18日間で作成した pr が16件。入ったときに割当てられた3つの課題から10数件の issue を派生させてちょうどすべて fix した。来週から新しい課題に取り組む。
ストレッチ 今週もお仕事に注力してたらストレッチは2日/週とあまりできなかった。ウォーキングもやってない。今日の開脚幅は開始前165cmで、ストレッチ後167cmだった。さぼってたせいか、数値が悪くなってしまった。右股関節の関節の可動域がよくないところは少しずつまがるようになってきてよくなってきている実感がある。一方で右太ももの後ろの筋が張りが大きいことに気付いた。トレーナーさんに聞くと、この筋は椅子に座っていると張りやすいという話しなので、最近はお仕事に注力して椅子に座っている時間が以前より伸びているせいだと思う。あと会議に出席している時間も増えているため、その時間は椅子に座っておかないといけないという制約も増えている。
actions/cache の exclude 設定 github actions でビルドキャッシュを扱う方法は Caching dependencies to speed up workflows に書いてあって、それは actions/cache という github actions がキャッシュ機能を提供している。ここでドキュメントにはキャッシュの除外設定については何も書かれていないが、リポジトリに含まれる examples.md には次のような説明と設定例が出てくる。
Depending on the environment, huge packages might be pre-installed in the global cache folder. With actions/cache@v2 you can now exclude unwanted packages with exclude pattern
https://github.com/actions/cache/blob/main/examples.md#c---nuget
- uses: actions/cache@v2 with: path: |~/.nuget/packages !~/.nuget/packages/unwanted key: ${{ runner.os }}-nuget-${{ hashFiles(&amp;#39;**/packages.lock.json&amp;#39;) }} restore-keys: | ${{ runner.</description><content>&lt;p>23時に寝て5時に起きてちょっと作業してまた寝て7時に起きた。お仕事も働き始めて1ヶ月が経過して、だいぶチームの雰囲気や業務に慣れてきたところ。稼働日の18日間で作成した pr が16件。入ったときに割当てられた3つの課題から10数件の issue を派生させてちょうどすべて fix した。来週から新しい課題に取り組む。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週もお仕事に注力してたらストレッチは2日/週とあまりできなかった。ウォーキングもやってない。今日の開脚幅は開始前165cmで、ストレッチ後167cmだった。さぼってたせいか、数値が悪くなってしまった。右股関節の関節の可動域がよくないところは少しずつまがるようになってきてよくなってきている実感がある。一方で右太ももの後ろの筋が張りが大きいことに気付いた。トレーナーさんに聞くと、この筋は椅子に座っていると張りやすいという話しなので、最近はお仕事に注力して椅子に座っている時間が以前より伸びているせいだと思う。あと会議に出席している時間も増えているため、その時間は椅子に座っておかないといけないという制約も増えている。&lt;/p>
&lt;h2 id="actionscache-の-exclude-設定">actions/cache の exclude 設定&lt;/h2>
&lt;p>github actions でビルドキャッシュを扱う方法は &lt;a href="https://docs.github.com/ja/actions/advanced-guides/caching-dependencies-to-speed-up-workflows">Caching dependencies to speed up workflows&lt;/a> に書いてあって、それは &lt;a href="https://github.com/actions/cache">actions/cache&lt;/a> という github actions がキャッシュ機能を提供している。ここでドキュメントにはキャッシュの除外設定については何も書かれていないが、リポジトリに含まれる &lt;code>examples.md&lt;/code> には次のような説明と設定例が出てくる。&lt;/p>
&lt;blockquote>
&lt;p>Depending on the environment, huge packages might be pre-installed in the global cache folder. With actions/cache@v2 you can now exclude unwanted packages with &lt;a href="https://github.com/actions/toolkit/tree/main/packages/glob#exclude-patterns">exclude pattern&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/actions/cache/blob/main/examples.md#c---nuget">https://github.com/actions/cache/blob/main/examples.md#c---nuget&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/cache@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">path&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> ~/.nuget/packages
&lt;/span>&lt;span style="color:#e6db74"> !~/.nuget/packages/unwanted&lt;/span>
&lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">${{ runner.os }}-nuget-${{ hashFiles(&amp;#39;**/packages.lock.json&amp;#39;) }}&lt;/span>
&lt;span style="color:#f92672">restore-keys&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> &lt;/span> &lt;span style="color:#ae81ff">${{ runner.os }}-nuget-&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>!&lt;/code> を入れるだけかと思って検証してみたらどうも意図した振る舞いにならない。実はこの設定はバグっていて実際には動かない。なぜ動かないかを追いかけてないけど、issue にも登録されている。&lt;code>path&lt;/code> の記述方法によって動いたり動かなかったりするというのが現状の振る舞いになるらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/actions/cache/issues/494">Excluded sub directory not working #494&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/actions/toolkit/issues/713">Cache - excluding files or folders with ! not working #713&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ちなみに正しい動く設定は次になる。ワイルドカードを使わないといけないらしい。ドキュメントに除外設定について書いていないのはバグってて中途半端な振る舞いをしているからかもしれない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/cache@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">path&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> ~/.nuget/packages/*
&lt;/span>&lt;span style="color:#e6db74"> !~/.nuget/packages/unwanted&lt;/span>
&lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">${{ runner.os }}-nuget-${{ hashFiles(&amp;#39;**/packages.lock.json&amp;#39;) }}&lt;/span>
&lt;span style="color:#f92672">restore-keys&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> &lt;/span> &lt;span style="color:#ae81ff">${{ runner.os }}-nuget-&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>あとビルドキャッシュのキーにパッケージ管理のファイルのハッシュ値を取るようになっている。この背景も github actions がキャッシュをクリアする機能を提供していないからであろう。&lt;a href="https://github.com/actions/cache/issues/2">Clear cache #2&lt;/a> でも議論されているが、キャッシュをクリアできないため、同じキーにパッケージが溜まり続けるような運用は開発者にとっても github 社にとってもリソースを浪費するので好ましくない。いまは7日以上アクセスされていないキャッシュを削除する運用になっているため、なるべくフレッシュなキャッシュが生成されるような運用となるよう、ハッシュ値を取得するようなキーの運用が行われているように推測される。&lt;/p></content></item><item><title>チームごっこ</title><link>/diary/posts/2021/1203/</link><pubDate>Fri, 03 Dec 2021 08:55:15 +0900</pubDate><guid>/diary/posts/2021/1203/</guid><description>0時に寝て6時に起きた。
朝活: アジャイル開発とスクラム 第2版 第7章の残りと第8章を読んだ。事例紹介なので軽く読み流した感じ。インタビュー記事のタイトルが気になった。
「合宿で、「仕事での同僚」から「チームの仲間」になれました
このタイトルと内容に私は違和感があるので反論としてそれを書いていく。
心理的安全性のつくりかた に書いてあったが、MIT のオスターマン教授によると、チームという概念は比較的新しいものらしい。
職場における、チームという概念は1980年以降、最も広まったイノベーションのひとつだ。
「心理的安全性のつくりかた」ではチームとグループの違いは次になる。
チームは共通の目標に向かってともに問題解決やアイディアを出す集団 グループはそうなっていない、ただの寄せ集めの集団 共通の目標に対して互いに対話や協働することでチームになっていく。この考え方は私の経験則とも合致するし支持している。実際の業務や作業を通してチームは築かれていくと私は考える。しかし、コミュニケーションの活性化や親睦を深めればチームになると誤解している人もいるように思う。
件のインタビュー記事では、次の内容があった。
合宿の最大の成果は、何だったのでしょう？
「仕事での同僚」から「チームの仲間」になれたことだと思います。昨今、ハラスメントやプライバシーの観点からなかなか個人の深い話ができないことが多いと思いますが、お互いを信頼した上で自分の生い立ちや経験から「私がなぜここにいるのか」を深掘りできたことが大きいと思います。
具体的には、誰とも話さず、自分を見つめる時間として三浦海岸の浜辺に全員を１時間放置しました（笑）。その時間で自分の今までをふりかえり、再集合したときに１人ずつ語り、お互いのことを尊重し受け入れることで心理的安全性が一気に高まったと思います。
私だったら転職を考えますね。浜辺に放置されて再集合して生い立ちとか語れとか言われて、そんな上司だと懸念を抱くと思う。その場で抗議はしなかったとしても。仕事を通して結果的に信頼関係が深くなって、同じ行動をするなら理解できるが、そうじゃない状態で職位の高い人がメンバーに合宿を半強制参加させてプライベートの内容を話させるのはハラスメントと紙一重かもしれない。おそらくこれはたまたまうまくいったケースだというだけで再現性のあるプラクティスにはまったく思えない。厳しい言い方をすると、偉い人の自己満足によるチームごっこではないかと思う。
「仕事での同僚」から「チームの仲間」になれたというインタビューが書かれていた。私の感覚ではやや違和感がある。グループではなくチームという概念が認識されるようになったのはわりと最近の話だというのはたしか心理的安全性のつくりかたに書いてあった気がする。 #金朝ツメトギ
&amp;mdash; Tetsuya Morimoto (@t2y) December 2, 2021 本番リリース作業 今日は非稼働日なんだけど、インフラ周りの修正をしていたので本番リリースの作業を見守っていた。ハドルで画面共有しながらみんなでわいわいできるので、これはこれでリリース作業の雰囲気を学ぶ機会にもなる。私が本番リリースすることはないだろうけど、担当者がどういった作業でリリースしているかを知っておく方が運用に役に立つ仕組みも導入できるかもしれない。音声通話と画面共有さえあればフルリモートワークでもなにも困ることはない。よい世の中になったと思う。RabbitMQ と Dapr 周りで私が懸念に思っていたことを本番リリースを通して検証したり振る舞いを観察できたので新たな知見を得た。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="朝活-アジャイル開発とスクラム-第2版">朝活: アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>第7章の残りと第8章を読んだ。事例紹介なので軽く読み流した感じ。インタビュー記事のタイトルが気になった。&lt;/p>
&lt;blockquote>
&lt;p>「合宿で、「仕事での同僚」から「チームの仲間」になれました&lt;/p>
&lt;/blockquote>
&lt;p>このタイトルと内容に私は違和感があるので反論としてそれを書いていく。&lt;/p>
&lt;p>&lt;a href="https://pub.jmam.co.jp/book/b517388.html">心理的安全性のつくりかた&lt;/a> に書いてあったが、MIT のオスターマン教授によると、チームという概念は比較的新しいものらしい。&lt;/p>
&lt;blockquote>
&lt;p>職場における、チームという概念は1980年以降、最も広まったイノベーションのひとつだ。&lt;/p>
&lt;/blockquote>
&lt;p>「心理的安全性のつくりかた」ではチームとグループの違いは次になる。&lt;/p>
&lt;ul>
&lt;li>チームは共通の目標に向かってともに問題解決やアイディアを出す集団&lt;/li>
&lt;li>グループはそうなっていない、ただの寄せ集めの集団&lt;/li>
&lt;/ul>
&lt;p>共通の目標に対して互いに対話や協働することでチームになっていく。この考え方は私の経験則とも合致するし支持している。実際の業務や作業を通してチームは築かれていくと私は考える。しかし、コミュニケーションの活性化や親睦を深めればチームになると誤解している人もいるように思う。&lt;/p>
&lt;p>件のインタビュー記事では、次の内容があった。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>合宿の最大の成果は、何だったのでしょう？&lt;/strong>&lt;/p>
&lt;p>「仕事での同僚」から「チームの仲間」になれたことだと思います。昨今、ハラスメントやプライバシーの観点からなかなか個人の深い話ができないことが多いと思いますが、お互いを信頼した上で自分の生い立ちや経験から「私がなぜここにいるのか」を深掘りできたことが大きいと思います。&lt;/p>
&lt;p>具体的には、誰とも話さず、自分を見つめる時間として三浦海岸の浜辺に全員を１時間放置しました（笑）。その時間で自分の今までをふりかえり、再集合したときに１人ずつ語り、お互いのことを尊重し受け入れることで心理的安全性が一気に高まったと思います。&lt;/p>
&lt;/blockquote>
&lt;p>私だったら転職を考えますね。浜辺に放置されて再集合して生い立ちとか語れとか言われて、そんな上司だと懸念を抱くと思う。その場で抗議はしなかったとしても。仕事を通して結果的に信頼関係が深くなって、同じ行動をするなら理解できるが、そうじゃない状態で職位の高い人がメンバーに合宿を半強制参加させてプライベートの内容を話させるのはハラスメントと紙一重かもしれない。おそらくこれはたまたまうまくいったケースだというだけで再現性のあるプラクティスにはまったく思えない。厳しい言い方をすると、偉い人の自己満足によるチームごっこではないかと思う。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">「仕事での同僚」から「チームの仲間」になれたというインタビューが書かれていた。私の感覚ではやや違和感がある。グループではなくチームという概念が認識されるようになったのはわりと最近の話だというのはたしか心理的安全性のつくりかたに書いてあった気がする。 &lt;a href="https://twitter.com/hashtag/%E9%87%91%E6%9C%9D%E3%83%84%E3%83%A1%E3%83%88%E3%82%AE?src=hash&amp;amp;ref_src=twsrc%5Etfw">#金朝ツメトギ&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1466528241661874179?ref_src=twsrc%5Etfw">December 2, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="本番リリース作業">本番リリース作業&lt;/h2>
&lt;p>今日は非稼働日なんだけど、インフラ周りの修正をしていたので本番リリースの作業を見守っていた。ハドルで画面共有しながらみんなでわいわいできるので、これはこれでリリース作業の雰囲気を学ぶ機会にもなる。私が本番リリースすることはないだろうけど、担当者がどういった作業でリリースしているかを知っておく方が運用に役に立つ仕組みも導入できるかもしれない。音声通話と画面共有さえあればフルリモートワークでもなにも困ることはない。よい世の中になったと思う。RabbitMQ と Dapr 周りで私が懸念に思っていたことを本番リリースを通して検証したり振る舞いを観察できたので新たな知見を得た。&lt;/p></content></item><item><title>スクラムイベントにもの思い</title><link>/diary/posts/2021/1202/</link><pubDate>Thu, 02 Dec 2021 07:43:21 +0900</pubDate><guid>/diary/posts/2021/1202/</guid><description>23時に寝て6時半に起きた。昨日は疲労困憊だったのでなんもせずすぐ寝た。
スクラムイベント お仕事のスクラム開発で木曜日はスプリントレビューとプロダクトバックログリファインメントを行う。主にステークホルダーとプロジェクトオーナーがプロダクトバックログアイテムの優先度を議論したり、タスクに細分化されていない課題をタスクにしていくための作業に当てたりしている。本当はタスク化されたイシューをさらにリファイメントするイベントなのだろうだけど、まだそこまで業務やチームの体制が成熟していないため、タスクの細分化のための時間になっていたりしている。
これらのイベントで開発者がイニシアティブをとることはないけど、プロダクトオーナーやその業務チームにいるメンバーたちがどうやって業務をタスク化しているかのやり取りもみえたりする。開発者にとってそのやり取りをみていることに意味があるかどうかはまだ私にはわからないが、業務チームのメンバーがどういった働き方をしているかを知るきっかけにはなる。業務チームは miro を使ってメンバーみんなで同時編集しながら課題を付箋代わりのメモに落としていく。その個々のメモがタスクに近いものになるのだろうけど、私からみたら業務すべてを知っている人がまとめて細分化してドキュメントに書き記して2-3回みんなでレビューすれば終わるようなものを、みんなで付箋紙に書いていって整合性が取れているのかどうかわからないメモの固まりを作っているようにみえる。この作業はみんなでやらないと進捗しないので1週間に1回とかになる。
チームが扱うすべての業務を知っているメンバーはいない 業務に必要な機能の優先順位や優先度を決める権限をもっていない 情報が足りないと思ったときにメンバーが自律的に動いて補う体制が整っていない あとステークホルダーが話す要件や仕様に関わってくる話の大半が口頭で行われていてドキュメントや課題管理に文章として書き記されていない。だから同じ話しを何度も繰り返し聞くようなケースも発生する。わからないことを聞くことも、繰り返し聞くことも問題ではないが、議事録以外にそこで話す内容がドキュメント化されないのはどうしてだろう？という気もした。もっともっと文章を書かないと情報共有やノウハウをためることにはつながっていかないだろうということも垣間みえる。
総括すれば、どんな開発方法論を使っても、リーダーやマネージャークラスが圧倒的に文章を書けないと、その配下のメンバーは自律的に行動できないというだけの話しでしかないが、どうやったら解消できるか？はまだまだこれからの私の課題でもある。</description><content>&lt;p>23時に寝て6時半に起きた。昨日は疲労困憊だったのでなんもせずすぐ寝た。&lt;/p>
&lt;h2 id="スクラムイベント">スクラムイベント&lt;/h2>
&lt;p>お仕事のスクラム開発で木曜日はスプリントレビューとプロダクトバックログリファインメントを行う。主にステークホルダーとプロジェクトオーナーがプロダクトバックログアイテムの優先度を議論したり、タスクに細分化されていない課題をタスクにしていくための作業に当てたりしている。本当はタスク化されたイシューをさらにリファイメントするイベントなのだろうだけど、まだそこまで業務やチームの体制が成熟していないため、タスクの細分化のための時間になっていたりしている。&lt;/p>
&lt;p>これらのイベントで開発者がイニシアティブをとることはないけど、プロダクトオーナーやその業務チームにいるメンバーたちがどうやって業務をタスク化しているかのやり取りもみえたりする。開発者にとってそのやり取りをみていることに意味があるかどうかはまだ私にはわからないが、業務チームのメンバーがどういった働き方をしているかを知るきっかけにはなる。業務チームは &lt;a href="https://miro.com/">miro&lt;/a> を使ってメンバーみんなで同時編集しながら課題を付箋代わりのメモに落としていく。その個々のメモがタスクに近いものになるのだろうけど、私からみたら業務すべてを知っている人がまとめて細分化してドキュメントに書き記して2-3回みんなでレビューすれば終わるようなものを、みんなで付箋紙に書いていって整合性が取れているのかどうかわからないメモの固まりを作っているようにみえる。この作業はみんなでやらないと進捗しないので1週間に1回とかになる。&lt;/p>
&lt;ul>
&lt;li>チームが扱うすべての業務を知っているメンバーはいない&lt;/li>
&lt;li>業務に必要な機能の優先順位や優先度を決める権限をもっていない&lt;/li>
&lt;li>情報が足りないと思ったときにメンバーが自律的に動いて補う体制が整っていない&lt;/li>
&lt;/ul>
&lt;p>あとステークホルダーが話す要件や仕様に関わってくる話の大半が口頭で行われていてドキュメントや課題管理に文章として書き記されていない。だから同じ話しを何度も繰り返し聞くようなケースも発生する。わからないことを聞くことも、繰り返し聞くことも問題ではないが、議事録以外にそこで話す内容がドキュメント化されないのはどうしてだろう？という気もした。もっともっと文章を書かないと情報共有やノウハウをためることにはつながっていかないだろうということも垣間みえる。&lt;/p>
&lt;p>総括すれば、どんな開発方法論を使っても、リーダーやマネージャークラスが圧倒的に文章を書けないと、その配下のメンバーは自律的に行動できないというだけの話しでしかないが、どうやったら解消できるか？はまだまだこれからの私の課題でもある。&lt;/p></content></item><item><title>師走入り</title><link>/diary/posts/2021/1201/</link><pubDate>Wed, 01 Dec 2021 04:13:59 +0900</pubDate><guid>/diary/posts/2021/1201/</guid><description>1時から1時間ほど仮眠をとって2時から4時過ぎまで作業して帰ってお風呂に入ってそのまま6時から 【三宮.dev オンライン】リモート朝活もくもく会 の朝活に参加した。30分ほど雑談して眠くなって7時過ぎから9時前まで寝てた。
dapr の pubsub の dead letter サポート お仕事で dapr を触っている。pubsub で dead letter queue の仕組みを導入しようとしているが、PubSub&amp;rsquo;s DeadLetter Topic #2217 によると v1.6 (2022年1月20日リリース予定) のマイルストーンになっている。本当にその予定ならそろそろベータ版が実装されていて、開発ブランチあったらテストしようかと考えていた。調べてたら rabbitmq はすでに v1.5 で dead letter のサポートがマージされているのを発見した。
Add dead letter support for RabbitMQ pubsub #1844 たまたま、いま使っている pubsub も rabbitmq だった。ドキュメントをみたら確かにその設定が追加されている。
dapr RabbitMQ
Field Required Details Example enableDeadLetter N Enable forwarding Messages that cannot be handled to a dead-letter topic.</description><content>&lt;p>1時から1時間ほど仮眠をとって2時から4時過ぎまで作業して帰ってお風呂に入ってそのまま6時から &lt;a href="https://kobe-sannomiya-dev.connpass.com/event/232426/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> の朝活に参加した。30分ほど雑談して眠くなって7時過ぎから9時前まで寝てた。&lt;/p>
&lt;h2 id="dapr-の-pubsub-の-dead-letter-サポート">dapr の pubsub の dead letter サポート&lt;/h2>
&lt;p>お仕事で dapr を触っている。pubsub で dead letter queue の仕組みを導入しようとしているが、&lt;a href="https://github.com/dapr/dapr/issues/2217">PubSub&amp;rsquo;s DeadLetter Topic #2217&lt;/a> によると v1.6 (2022年1月20日リリース予定) のマイルストーンになっている。本当にその予定ならそろそろベータ版が実装されていて、開発ブランチあったらテストしようかと考えていた。調べてたら rabbitmq はすでに v1.5 で dead letter のサポートがマージされているのを発見した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/dapr/docs/pull/1844">Add dead letter support for RabbitMQ pubsub #1844&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>たまたま、いま使っている pubsub も rabbitmq だった。ドキュメントをみたら確かにその設定が追加されている。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://docs.dapr.io/reference/components-reference/supported-pubsub/setup-rabbitmq/">dapr RabbitMQ&lt;/a>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Required&lt;/th>
&lt;th>Details&lt;/th>
&lt;th>Example&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>enableDeadLetter&lt;/td>
&lt;td>N&lt;/td>
&lt;td>Enable forwarding Messages that cannot be handled to a dead-letter topic. Defaults to &amp;ldquo;false&amp;rdquo;&lt;/td>
&lt;td>&amp;ldquo;true&amp;rdquo;, &amp;ldquo;false&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>maxLen&lt;/td>
&lt;td>N&lt;/td>
&lt;td>The maximum number of messages of a queue and its dead letter queue (if dead letter enabled). If both maxLen and maxLenBytes are set then both will apply; whichever limit is hit first will be enforced. Defaults to no limit.&lt;/td>
&lt;td>&amp;ldquo;1000&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>maxLenBytes&lt;/td>
&lt;td>N&lt;/td>
&lt;td>Maximum length in bytes of a queue and its dead letter queue (if dead letter enabled). If both maxLen and maxLenBytes are set then both will apply; whichever limit is hit first will be enforced. Defaults to no limit.&lt;/td>
&lt;td>&amp;ldquo;1048576&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/blockquote>
&lt;p>enableDeadLetter=true に設定して、適当にエラーが発生しそうなリクエストを作って dead letter にメッセージが入るかどうかを検証してた。ひとまず dead letter にメッセージが入ること自体は確認できた。&lt;/p>
&lt;h2 id="bizpy-勉強会">bizpy 勉強会&lt;/h2>
&lt;p>&lt;a href="https://bizpy.connpass.com/event/229239/">Python で Slack のインテグレーションをやってみる勉強会 #3&lt;/a> を開催した。月曜日から2時間もあればできる資料作成をだらだら先送りしていて夜中に作った。なんか体調を崩しているのかもしれない。たまたま勉強会の前にせらさんから激励のコメントをいただいて嬉しかった。&lt;/p>
&lt;blockquote>
&lt;p>今日の分も含めコンテンツ拝見しましたが、素晴らしいですね&lt;/p>
&lt;/blockquote>
&lt;p>私見だけど、slack インテグレーションで調べものをしているとせらさんの記事や issue のやり取りをみかけることが多い。twitter で slack インテグレーションに関してつぶやくと100%せらさんからレスポンスがある (個人の経験談) 。過去に私は外資の ISV で働きたいと思って活動したこともあったけど、せらさんをみていて自分のレベルでは無理だったなと得心がいった。なにがすごいって、bizpy の勉強会のようなところにもわざわざやってきて、講師にコメントしたりアドバイスしてくれるんだからね。&lt;/p>
&lt;p>2ヶ月に渡り、slack インテグレーションのチュートリアルレベルの記事を実際に設定してみて、サンプルコード書いてみて、動かしてみて、slack でどんなことができそうかの理解を深めることができた。今回の内容はビジネスパーソン向けではなかったのでちょっと敷居が高かったかもしれないが、全3回でやり切ることができてよかった。終わってから運営に新たにわたなべさんが加わったことを参加者に紹介しつつ、次回の企画について雑談していた。次回はわたなべさんから機械学習入門のような勉強会をしてもらうことに決まった。&lt;/p></content></item><item><title>66日目</title><link>/diary/posts/2021/1130/</link><pubDate>Tue, 30 Nov 2021 07:45:30 +0900</pubDate><guid>/diary/posts/2021/1130/</guid><description>23時に寝て3時過ぎに起きて作業しようと思ったものの、やっぱりそのまま寝てしまって7時に起きた。前々日にあまり寝てなかったせいか、睡眠不足を解消したとポジティブに考えとく。
習慣化のための平均66日 前に GIG MINDSET ギグ・マインドセット を読んだときにロンドン大学が行った研究で習慣になるには平均して66日かかるというのをみかけた。「平均して」というのが曖昧なところで、直観的に理解できるけど、対象の難易度によって習慣化に要する日数が異なる。簡単なことはすぐ習慣化できるし、難しいことには時間がかかる。それらをいくつも試してみて平均したら66日だったという話し。66日仮説 でも言及されているようにこの手の研究はあまり鵜呑みにするのもよくない。とはいえ、何らかの基準や目安があること自体は悪いことではないので一般論として参考にするのはよいと私は考えている。日記を書くというのは比較的簡単なことだと私は捉えるが、66日続いたので習慣と化したとみなしていいだろう。
書くこと 日記に関連して「書くこと」そのものを研究対象としている。自分でも日記を書き続けて何が起こるのかを理解するために実践しているという意図もある。
日記だけではなく、私は業務の過程で普通の開発者より、平均的な文章量よりも大量に書く。課題管理システムに私以上にコメントを書く開発者を、この10年で1人もみたことがない。私以上に課題管理システムを使いこなす開発者もこの10年みたことがない。課題管理システムの使い方や応用をメンバーにアドバイスするし、メンバーも私の使い方をみて真似してくれることもあった。これまでそういった行動は無意識にやっていたことだけど、それを意識化して形式知として体系化したいという狙いもある。
書くことは メタ認知を活用して学びのスキルを磨く 手法の1つとして優れていると私は考えている。これを開発者にとって日常的な課題管理 (システム) に取り入れられないかというのが、私の持論であり今後の研究課題である。たまたま、はらさんとそういった話題で話す機会があり、共感してもらえて嬉しかった。
@t2y 先ほどはありがとうございました！色々と参考になることがあり、また久しぶりにお話しできて楽しかったです！また、お願いします。
下記の「書くこと」とか、すごい良いと思い、ライトに始めてめて見ようと思います！https://t.co/WnnQ1JeSG4
&amp;mdash; Hiroshi Hara (@hir_hara) November 30, 2021</description><content>&lt;p>23時に寝て3時過ぎに起きて作業しようと思ったものの、やっぱりそのまま寝てしまって7時に起きた。前々日にあまり寝てなかったせいか、睡眠不足を解消したとポジティブに考えとく。&lt;/p>
&lt;h2 id="習慣化のための平均66日">習慣化のための平均66日&lt;/h2>
&lt;p>前に &lt;a href="https://note.com/t2y1979/n/nb6e36f94b198">GIG MINDSET ギグ・マインドセット&lt;/a> を読んだときにロンドン大学が行った研究で習慣になるには平均して66日かかるというのをみかけた。「平均して」というのが曖昧なところで、直観的に理解できるけど、対象の難易度によって習慣化に要する日数が異なる。簡単なことはすぐ習慣化できるし、難しいことには時間がかかる。それらをいくつも試してみて平均したら66日だったという話し。&lt;a href="http://ishiirikie.jpn.org/article/182619784.html">66日仮説&lt;/a> でも言及されているようにこの手の研究はあまり鵜呑みにするのもよくない。とはいえ、何らかの基準や目安があること自体は悪いことではないので一般論として参考にするのはよいと私は考えている。日記を書くというのは比較的簡単なことだと私は捉えるが、66日続いたので習慣と化したとみなしていいだろう。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1130_diary-dates.png"/>
&lt;/figure>
&lt;h2 id="書くこと">書くこと&lt;/h2>
&lt;p>日記に関連して「書くこと」そのものを研究対象としている。自分でも日記を書き続けて何が起こるのかを理解するために実践しているという意図もある。&lt;/p>
&lt;p>日記だけではなく、私は業務の過程で普通の開発者より、平均的な文章量よりも大量に書く。課題管理システムに私以上にコメントを書く開発者を、この10年で1人もみたことがない。私以上に課題管理システムを使いこなす開発者もこの10年みたことがない。課題管理システムの使い方や応用をメンバーにアドバイスするし、メンバーも私の使い方をみて真似してくれることもあった。これまでそういった行動は無意識にやっていたことだけど、それを意識化して形式知として体系化したいという狙いもある。&lt;/p>
&lt;p>書くことは &lt;a href="https://note.com/t2y1979/n/n4713058f48ce">メタ認知を活用して学びのスキルを磨く&lt;/a> 手法の1つとして優れていると私は考えている。これを開発者にとって日常的な課題管理 (システム) に取り入れられないかというのが、私の持論であり今後の研究課題である。たまたま、はらさんとそういった話題で話す機会があり、共感してもらえて嬉しかった。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">&lt;a href="https://twitter.com/t2y?ref_src=twsrc%5Etfw">@t2y&lt;/a> 先ほどはありがとうございました！色々と参考になることがあり、また久しぶりにお話しできて楽しかったです！また、お願いします。&lt;br>下記の「書くこと」とか、すごい良いと思い、ライトに始めてめて見ようと思います！&lt;a href="https://t.co/WnnQ1JeSG4">https://t.co/WnnQ1JeSG4&lt;/a>&lt;/p>&amp;mdash; Hiroshi Hara (@hir_hara) &lt;a href="https://twitter.com/hir_hara/status/1465631183752949761?ref_src=twsrc%5Etfw">November 30, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item><item><title>辞めるときの余裕</title><link>/diary/posts/2021/1129/</link><pubDate>Mon, 29 Nov 2021 07:53:08 +0900</pubDate><guid>/diary/posts/2021/1129/</guid><description>2時半に寝て6時半に起きた。なぜか眠れなくて鬼滅の刃をみてた。本当は夜に bizpy の資料作りをしようと思っていたけど、前日にあまり寝てなかったせいかバテてそのまま寝てしまった。
お仕事の辞め方 たまたまお手伝いしているところである開発メンバーが今月いっぱいで辞めますという連絡があった。その方は今日お休みだったので明日で辞めますみたいな急な連絡となった。もちろん上司や関係者には前々から話しは伝わっていて、引き止めや調整をしていたのだろうけど、チームとして働くにおいてメンバーはショックを受けるというか驚くというのが普通の感覚だろう。私も少なからず組織を退職してきた。私の場合、有給休暇が余っていたので辞めると言い出すのは実際に辞める3ヶ月ぐらい前で、有給消化が1ヶ月、引き継ぎに1ヶ月、引き止めや調整に2週間、2週間ぐらいはバッファみたいな感じで辞めてきた気がする。組織の規模によるけど、大きい組織は順番に引き止めの打ち合わせがくるので時間がかかる。組織にもよるけど、私の場合は3-4ぐらい、上長、課長、部長、その上の偉い人みたいな感じか。少なくともメンバーが退職を知ってから1ヶ月以内に辞めるということはない。私は過程の記録が課題管理システムに残っているし、ドキュメントも普段からそこそこ書く方なので辞めるときにドタバタすることはほぼない。ドキュメントなくても課題管理システムにやったことはすべて残ってますからと説明できる。上長からも引き継ぎに困るという心配をされたこともない。
辞め方というのはその人の信義を表すように私は思っていて、どういう背景や事情があるにしろ、ひどい辞め方をするのは本人にとって百害あって一利なしだと思う。余裕のない辞め方というのはあまり推奨しない。
忘年会 【初参加大歓迎】三宮.dev＆bizpy 合同忘年会 の日程を12月10日に決定した。オミクロン株の不安などが出てきたところだけど、水際対策をがんばっているのでまだ大丈夫かなといましかできない飲み会をこのまま行うことにする。言うても参加してくれるメンバーは限定的なのでいつも人たちで労をねぎらうみたいな飲み会になりそう。</description><content>&lt;p>2時半に寝て6時半に起きた。なぜか眠れなくて鬼滅の刃をみてた。本当は夜に bizpy の資料作りをしようと思っていたけど、前日にあまり寝てなかったせいかバテてそのまま寝てしまった。&lt;/p>
&lt;h2 id="お仕事の辞め方">お仕事の辞め方&lt;/h2>
&lt;p>たまたまお手伝いしているところである開発メンバーが今月いっぱいで辞めますという連絡があった。その方は今日お休みだったので明日で辞めますみたいな急な連絡となった。もちろん上司や関係者には前々から話しは伝わっていて、引き止めや調整をしていたのだろうけど、チームとして働くにおいてメンバーはショックを受けるというか驚くというのが普通の感覚だろう。私も少なからず組織を退職してきた。私の場合、有給休暇が余っていたので辞めると言い出すのは実際に辞める3ヶ月ぐらい前で、有給消化が1ヶ月、引き継ぎに1ヶ月、引き止めや調整に2週間、2週間ぐらいはバッファみたいな感じで辞めてきた気がする。組織の規模によるけど、大きい組織は順番に引き止めの打ち合わせがくるので時間がかかる。組織にもよるけど、私の場合は3-4ぐらい、上長、課長、部長、その上の偉い人みたいな感じか。少なくともメンバーが退職を知ってから1ヶ月以内に辞めるということはない。私は過程の記録が課題管理システムに残っているし、ドキュメントも普段からそこそこ書く方なので辞めるときにドタバタすることはほぼない。ドキュメントなくても課題管理システムにやったことはすべて残ってますからと説明できる。上長からも引き継ぎに困るという心配をされたこともない。&lt;/p>
&lt;p>辞め方というのはその人の信義を表すように私は思っていて、どういう背景や事情があるにしろ、ひどい辞め方をするのは本人にとって百害あって一利なしだと思う。余裕のない辞め方というのはあまり推奨しない。&lt;/p>
&lt;h2 id="忘年会">忘年会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/231602/">【初参加大歓迎】三宮.dev＆bizpy 合同忘年会&lt;/a> の日程を12月10日に決定した。オミクロン株の不安などが出てきたところだけど、水際対策をがんばっているのでまだ大丈夫かなといましかできない飲み会をこのまま行うことにする。言うても参加してくれるメンバーは限定的なのでいつも人たちで労をねぎらうみたいな飲み会になりそう。&lt;/p></content></item><item><title>slack ペイロードの response_url にはまった</title><link>/diary/posts/2021/1128/</link><pubDate>Sun, 28 Nov 2021 09:40:22 +0900</pubDate><guid>/diary/posts/2021/1128/</guid><description>1時に寝て8時に起きた。昨日は喋り倒して疲れてよく眠れた。午前中は溜まった日記を書き殴って、お仕事でやっているカスタム github actions で気になったコードを修正して、午後から bizpy の勉強会の準備を始めた。なんか気乗りせずにだらだらやって最終的には出来上がった。たいていだらだらやるときは頭の中ではもう出来上がってて集中したら2-3時間でできるのを脳が把握していて、まだ時間に余裕があるから怠けるみたいなときがある。そういうときは作業やめて散歩に出掛けるようにしている。
bizpy 勉強会の資料作り 次の Python で Slack のインテグレーションをやってみる勉強会 #3 のサンプルコードの実装をしていた。内容はだいたい次の通り。あとは資料をまとめるだけ。
slash command の設定と実装 ephemeral メッセージ (本人だけみえるメッセージ) の実装 block kit でモーダルダイアログに入力した情報を使ってチャットに書き込む OpenWeather API を使って天気の情報を連携する たまたまモーダルダイアログを取り上げただけなんだけど、モーダルダイアログを submit したときにチャットに書き込むのは、そのままではできなくて、なんらかの特別な処理が必要になって、そこにはまってた。response_url の扱いはわりとややこしいみたい。
Slack ペイロードに含まれる response_url を完全に理解する</description><content>&lt;p>1時に寝て8時に起きた。昨日は喋り倒して疲れてよく眠れた。午前中は溜まった日記を書き殴って、お仕事でやっているカスタム github actions で気になったコードを修正して、午後から bizpy の勉強会の準備を始めた。なんか気乗りせずにだらだらやって最終的には出来上がった。たいていだらだらやるときは頭の中ではもう出来上がってて集中したら2-3時間でできるのを脳が把握していて、まだ時間に余裕があるから怠けるみたいなときがある。そういうときは作業やめて散歩に出掛けるようにしている。&lt;/p>
&lt;h2 id="bizpy-勉強会の資料作り">bizpy 勉強会の資料作り&lt;/h2>
&lt;p>次の &lt;a href="https://bizpy.connpass.com/event/229239/">Python で Slack のインテグレーションをやってみる勉強会 #3&lt;/a> のサンプルコードの実装をしていた。内容はだいたい次の通り。あとは資料をまとめるだけ。&lt;/p>
&lt;ul>
&lt;li>slash command の設定と実装&lt;/li>
&lt;li>ephemeral メッセージ (本人だけみえるメッセージ) の実装&lt;/li>
&lt;li>block kit でモーダルダイアログに入力した情報を使ってチャットに書き込む
&lt;ul>
&lt;li>&lt;a href="https://openweathermap.org/">OpenWeather API&lt;/a> を使って天気の情報を連携する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>たまたまモーダルダイアログを取り上げただけなんだけど、モーダルダイアログを submit したときにチャットに書き込むのは、そのままではできなくて、なんらかの特別な処理が必要になって、そこにはまってた。response_url の扱いはわりとややこしいみたい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/seratch/items/ed29acd565af36e65072">Slack ペイロードに含まれる response_url を完全に理解する&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>まる一日喋り続けた日</title><link>/diary/posts/2021/1127/</link><pubDate>Sat, 27 Nov 2021 10:04:09 +0900</pubDate><guid>/diary/posts/2021/1127/</guid><description>0時に寝て6時半に起きた。
ストレッチ 先週に引き続き、今週もお仕事でバテてストレッチは2日/週とあまりできなかった。ウォーキングもほとんどできなかった。とはいえ、先週の土日に観光案内でいつもよりかなり歩いたのでその休息と考えればそれほど悲観的にならなくてもよいかもしれない。ウォーキングしなかった背景は寒くなってきて21時頃に帰ってきて、また外に出掛けるのが億劫になってしまった。お仕事を早めに切り上げて早めに帰って来た方がよいかもしれない。
今日の開脚幅は開始前168cmで、ストレッチ後170.5cmだった。また170cmを超えるようになったのでよいサイクルに入ってきた。2週間に渡った中殿筋の張りはおさまった気がする。代わりに腰の筋肉に張りがあって、トレーナーさんも念入りにそこをストレッチしてくれた。生活していると、そのときどきで調子の悪い箇所は移動していて、ストレッチするとそのことに気付くので体調管理を意識する意図でもストレッチは役に立っている。
もくもく会 【三宮.dev】もくもく会 に参加した。今回はオフラインのもくもく会だった。私は bizpy の勉強会の資料作成の準備をしていた。ここ数回は主催者と私の2人だけしかオフラインに来ないといったことが多かったのだけど、今回は8人も参加していて、その8人中5人が勉強会コミュニティに主催者だったりしてちょっとおもしろかった。
コミュニティの主催者は、コミュニティ運営の苦労がわかるから他のコミュニティのよき参加者になり得る。私は 三宮.dev の運営には関わっていないが、コミュニティを盛り上げることに寄与する振る舞いはしていて、それは自分のコミュニティでもこういったやり取りが増えるといいなという願望を他のコミュニティで参加者としてやっていたりする。今回のオフラインの参加者が多かったのも、他の勉強会コミュニティでもオフラインでやりたいよねと思う人たちが集ったのではないかとか考えたりしていた。
ぷち飲み会 終わってからわたなべさんと立ち飲みに行ってきた。最近あまり行ってない はんなりPythonの会 の勉強会で (オンラインで) なんどか話したことがある方で、ずっと京都に住んでいると思っていた方がめっちゃご近所さんだった。わたなべさんは私より1つ学年が上で、世代における価値観に共感するところは多く、自身もマイクロ法人を営んでいた。研究者としてキャリアを積み重ねてこられて昨年、独立したようだ。はんなりPythonの会の運営にも最近入ったそうで、ついでというわけではないが、話していて気が合うなと思ったので bizpy の運営に入ってくれません？と尋ねたら快く了承してくれた。
bizpy の最大の懸念は運営が私1人で、私がお仕事で忙しくなったら休業してしまうという問題があった。なかなか勉強会のコミュニティの運営をできそうなメンバー (スキル、価値観、時間的余裕) をみつけるのは難しいので了承してくれてとても嬉しかった。わたなべさんは博士で研究者のキャリアをもっていて、いまは機械学習などに取り組んでいるのかな？私のキャリアとは全く重なりがないのでお互いに学ぶところがあってよい関係を築けるのではないかと思う。ビジネスパーソン向け機械学習入門みたいな勉強会をしてもよいと思う。
リーンキャンバスレビュー (後半) 前回 の続き。残りの半分を進めるのかなと考えていたけど、前回のおさらいから始めて、私の意図するプロダクトの価値やサービスの特徴の話しをしていたら、このサービスはすぐに顧客に価値が伝わるものでもなければ、急成長するようなビジネスでもないということが伝わって、リーンキャンバスをやる意味はあまりないねという話しで後半戦をやらずに終わったw。どうも新規事業=急成長やスケールするビジネスという考えでリーンキャンバスを持ち出したところがあって、私は最初からそんなことは一言も言ってないし、私が作った資料にもそういった懸念や展望は書いてあったんだけど、リーンキャンバスを通して話しているうちにその意図を理解してもらえたといった様子だった。
そういう意味でリーンキャンバスは急成長やスケールするビジネスを取り扱うときに投資家や顧客にわかりやすく訴求するためのフレームワークと言えるのかもしれない。仮にビジネスがうまくいったとしても、合同会社は投資を受けるのが難しいのでそのときは株式会社を別途作ってやるのかなぁみたいな、取らぬ狸の皮算用みたいな話も知った。</description><content>&lt;p>0時に寝て6時半に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>先週に引き続き、今週もお仕事でバテてストレッチは2日/週とあまりできなかった。ウォーキングもほとんどできなかった。とはいえ、先週の土日に観光案内でいつもよりかなり歩いたのでその休息と考えればそれほど悲観的にならなくてもよいかもしれない。ウォーキングしなかった背景は寒くなってきて21時頃に帰ってきて、また外に出掛けるのが億劫になってしまった。お仕事を早めに切り上げて早めに帰って来た方がよいかもしれない。&lt;/p>
&lt;p>今日の開脚幅は開始前168cmで、ストレッチ後170.5cmだった。また170cmを超えるようになったのでよいサイクルに入ってきた。2週間に渡った中殿筋の張りはおさまった気がする。代わりに腰の筋肉に張りがあって、トレーナーさんも念入りにそこをストレッチしてくれた。生活していると、そのときどきで調子の悪い箇所は移動していて、ストレッチするとそのことに気付くので体調管理を意識する意図でもストレッチは役に立っている。&lt;/p>
&lt;h2 id="もくもく会">もくもく会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/229761/">【三宮.dev】もくもく会&lt;/a> に参加した。今回はオフラインのもくもく会だった。私は bizpy の勉強会の資料作成の準備をしていた。ここ数回は主催者と私の2人だけしかオフラインに来ないといったことが多かったのだけど、今回は8人も参加していて、その8人中5人が勉強会コミュニティに主催者だったりしてちょっとおもしろかった。&lt;/p>
&lt;p>コミュニティの主催者は、コミュニティ運営の苦労がわかるから他のコミュニティのよき参加者になり得る。私は 三宮.dev の運営には関わっていないが、コミュニティを盛り上げることに寄与する振る舞いはしていて、それは自分のコミュニティでもこういったやり取りが増えるといいなという願望を他のコミュニティで参加者としてやっていたりする。今回のオフラインの参加者が多かったのも、他の勉強会コミュニティでもオフラインでやりたいよねと思う人たちが集ったのではないかとか考えたりしていた。&lt;/p>
&lt;h2 id="ぷち飲み会">ぷち飲み会&lt;/h2>
&lt;p>終わってからわたなべさんと立ち飲みに行ってきた。最近あまり行ってない &lt;a href="https://hannari-python.connpass.com/">はんなりPythonの会&lt;/a> の勉強会で (オンラインで) なんどか話したことがある方で、ずっと京都に住んでいると思っていた方がめっちゃご近所さんだった。わたなべさんは私より1つ学年が上で、世代における価値観に共感するところは多く、自身もマイクロ法人を営んでいた。研究者としてキャリアを積み重ねてこられて昨年、独立したようだ。はんなりPythonの会の運営にも最近入ったそうで、ついでというわけではないが、話していて気が合うなと思ったので bizpy の運営に入ってくれません？と尋ねたら快く了承してくれた。&lt;/p>
&lt;p>bizpy の最大の懸念は運営が私1人で、私がお仕事で忙しくなったら休業してしまうという問題があった。なかなか勉強会のコミュニティの運営をできそうなメンバー (スキル、価値観、時間的余裕) をみつけるのは難しいので了承してくれてとても嬉しかった。わたなべさんは博士で研究者のキャリアをもっていて、いまは機械学習などに取り組んでいるのかな？私のキャリアとは全く重なりがないのでお互いに学ぶところがあってよい関係を築けるのではないかと思う。ビジネスパーソン向け機械学習入門みたいな勉強会をしてもよいと思う。&lt;/p>
&lt;h2 id="リーンキャンバスレビュー-後半">リーンキャンバスレビュー (後半)&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1122/#リーンキャンバスレビュー-前半">前回&lt;/a> の続き。残りの半分を進めるのかなと考えていたけど、前回のおさらいから始めて、私の意図するプロダクトの価値やサービスの特徴の話しをしていたら、このサービスはすぐに顧客に価値が伝わるものでもなければ、急成長するようなビジネスでもないということが伝わって、リーンキャンバスをやる意味はあまりないねという話しで後半戦をやらずに終わったw。どうも新規事業=急成長やスケールするビジネスという考えでリーンキャンバスを持ち出したところがあって、私は最初からそんなことは一言も言ってないし、私が作った資料にもそういった懸念や展望は書いてあったんだけど、リーンキャンバスを通して話しているうちにその意図を理解してもらえたといった様子だった。&lt;/p>
&lt;p>そういう意味でリーンキャンバスは急成長やスケールするビジネスを取り扱うときに投資家や顧客にわかりやすく訴求するためのフレームワークと言えるのかもしれない。仮にビジネスがうまくいったとしても、合同会社は投資を受けるのが難しいのでそのときは株式会社を別途作ってやるのかなぁみたいな、取らぬ狸の皮算用みたいな話も知った。&lt;/p></content></item><item><title>朝から晩まで多忙な一日</title><link>/diary/posts/2021/1126/</link><pubDate>Fri, 26 Nov 2021 19:36:04 +0900</pubDate><guid>/diary/posts/2021/1126/</guid><description>0時に寝て5時に起きた。昨日 slack で質問していた内容に5時頃に返信があるのをたまたまみかけた。この時間に起きているんだと思って返信にコメントしてたら別のメンバーからもコメントが書き込まれて、早起きは三文の得みたいな感じで朝5時から slack でやり取りしてた。いま私はだいたい8時から始業している。開発チームの半分ぐらいのメンバーはそのぐらいから始業しているのが課題管理システムや git のコミットログからわかる。このチームは朝早い人たちが多いなと感心した。
朝活: アジャイル開発とスクラム 第2版 2021-11-26 AM 6 金曜朝6時開催のもくもく会 で第6章と第7章を読んだ。第2部は企業において実際にスクラムを導入していったときの四方山話が出てくる。私はあまり他社の事例に興味はないが、対談の過程で本質的に大事なことや難しいことなどがあぶり出されることもあるので、実務を通しての話題も参考になる場合があることは理解できる。大半の事例は実業務で使われているという結論がわかるだけでも十分だと思う。とくに大企業は様々な厳しい制約や要件の中で採用していると推測されるので、それだけで大きなメッセージをもつ。斜め読みでざっと読み進めながら興味のある話題があれば精読するといった程度で読んでた。
大企業あるあるな話しでスクラムイベントを通してお互いの距離感が縮まってうまくいったといった内容があった。開発者からすると距離感の遠近に関係なく、必要なら適切な相手を探し出してコミュニケーションを取るのが普通だけど、みんながみんなそうではないだろうし、(同じ会社の社員でも)よく知らない人とは話さないといった考え方をもつ人もいるだろう。ある人はこれを単純接触効果で説明していたけど、業務ではなく人間の側面からみてスクラムイベントが多いことにも意義があるのかもしれない。
ある事例でスクラムにおいてイベントがたくさんあってそれに参加することでお互いの距離感を縮めたという効果が書かれている。開発者は気になったことは何でも確認するという姿勢をとりがちだけど、関係者のみんながそうではないというのも理解できる #金朝ツメトギ
&amp;mdash; Tetsuya Morimoto (@t2y) November 25, 2021 顧問さんと雑談 隔週で打ち合わせをしている。最近はお手伝いのお仕事が忙しいので今回は雑談になってしまったが、近況としてリーンキャンバス、スクラム実践の話題などを話していた。わりと盛り上がって1時間で切り上げるつもりが1時間半に伸びてしまって、別のお仕事の時間を圧迫したけど、それはそれで意義のある雑談になったので収穫はあった。
ある組織で新規事業を行う上で AARRR (あー) モデル をすごく重視しているといった話題が出た。バケツみたいなイメージがあって、そこに現実の数字を当てはめていってプロジェクト/プロダクトの改善やふりかえりなどに活かしているという。サービスのグロースに責任をもつ人には重要な概念だという。うちのプロダクトはグロースしなくてもよいけど、なんらかのフレームワークに当てはめて抜け・漏れがないかをチェックすることにも使えるかもしれない。世の中でよく使われているフレームワークを調査しておいて損はないと思う。私はビジネスに全く疎いのでリーンキャンバスを通じて、AARRR モデルの話題になって、それがどういった用途で使われているかというお話しは興味深かった。
具体的には AARRR モデルの他に、スクラムの話題からは野中郁次郎氏のオリジナルの論文、大規模アジャイルの方法論などが盛り上がっていくつかキーワードが出た。そういった雑談の中で感性に従って気になったことを深堀りしていくとおもしろい調査や知見になったりすることを経験的に実感しつつある。今後もそういう機会や内容を大事にしていきたい。
カスタム GitHub Actions の開発 先日 調査していたものをベースに、普通にやる方法と カスタム GitHub Actions の compoiste action で実装する場合の検討資料などを作って、カスタム GitHub Actions を実装してよいといった許可をもらった。企業における唯一の懸念は (原則) public リポジトリで運用するところで、CI のような処理に社外秘は含まれないが、public そのものに審査や承認を必要とするような組織では腰が重くなるようなこともあるかもしれない。ロードマップにも private リポジトリでカスタム GitHub Actoins を動かせるようにしようという課題は作成されている。
Actions: Use actions from internal repositories #74</description><content>&lt;p>0時に寝て5時に起きた。昨日 slack で質問していた内容に5時頃に返信があるのをたまたまみかけた。この時間に起きているんだと思って返信にコメントしてたら別のメンバーからもコメントが書き込まれて、早起きは三文の得みたいな感じで朝5時から slack でやり取りしてた。いま私はだいたい8時から始業している。開発チームの半分ぐらいのメンバーはそのぐらいから始業しているのが課題管理システムや git のコミットログからわかる。このチームは朝早い人たちが多いなと感心した。&lt;/p>
&lt;h2 id="朝活-アジャイル開発とスクラム-第2版">朝活: アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=3T8CTKDFd9g">2021-11-26 AM 6 金曜朝6時開催のもくもく会&lt;/a> で第6章と第7章を読んだ。第2部は企業において実際にスクラムを導入していったときの四方山話が出てくる。私はあまり他社の事例に興味はないが、対談の過程で本質的に大事なことや難しいことなどがあぶり出されることもあるので、実務を通しての話題も参考になる場合があることは理解できる。大半の事例は実業務で使われているという結論がわかるだけでも十分だと思う。とくに大企業は様々な厳しい制約や要件の中で採用していると推測されるので、それだけで大きなメッセージをもつ。斜め読みでざっと読み進めながら興味のある話題があれば精読するといった程度で読んでた。&lt;/p>
&lt;p>大企業あるあるな話しでスクラムイベントを通してお互いの距離感が縮まってうまくいったといった内容があった。開発者からすると距離感の遠近に関係なく、必要なら適切な相手を探し出してコミュニケーションを取るのが普通だけど、みんながみんなそうではないだろうし、(同じ会社の社員でも)よく知らない人とは話さないといった考え方をもつ人もいるだろう。ある人はこれを単純接触効果で説明していたけど、業務ではなく人間の側面からみてスクラムイベントが多いことにも意義があるのかもしれない。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">ある事例でスクラムにおいてイベントがたくさんあってそれに参加することでお互いの距離感を縮めたという効果が書かれている。開発者は気になったことは何でも確認するという姿勢をとりがちだけど、関係者のみんながそうではないというのも理解できる &lt;a href="https://twitter.com/hashtag/%E9%87%91%E6%9C%9D%E3%83%84%E3%83%A1%E3%83%88%E3%82%AE?src=hash&amp;amp;ref_src=twsrc%5Etfw">#金朝ツメトギ&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1463982173212459019?ref_src=twsrc%5Etfw">November 25, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="顧問さんと雑談">顧問さんと雑談&lt;/h2>
&lt;p>隔週で打ち合わせをしている。最近はお手伝いのお仕事が忙しいので今回は雑談になってしまったが、近況としてリーンキャンバス、スクラム実践の話題などを話していた。わりと盛り上がって1時間で切り上げるつもりが1時間半に伸びてしまって、別のお仕事の時間を圧迫したけど、それはそれで意義のある雑談になったので収穫はあった。&lt;/p>
&lt;p>ある組織で新規事業を行う上で &lt;a href="https://www.innovation.co.jp/urumo/aarrr/">AARRR (あー) モデル&lt;/a> をすごく重視しているといった話題が出た。バケツみたいなイメージがあって、そこに現実の数字を当てはめていってプロジェクト/プロダクトの改善やふりかえりなどに活かしているという。サービスのグロースに責任をもつ人には重要な概念だという。うちのプロダクトはグロースしなくてもよいけど、なんらかのフレームワークに当てはめて抜け・漏れがないかをチェックすることにも使えるかもしれない。世の中でよく使われているフレームワークを調査しておいて損はないと思う。私はビジネスに全く疎いのでリーンキャンバスを通じて、AARRR モデルの話題になって、それがどういった用途で使われているかというお話しは興味深かった。&lt;/p>
&lt;p>具体的には AARRR モデルの他に、スクラムの話題からは野中郁次郎氏のオリジナルの論文、大規模アジャイルの方法論などが盛り上がっていくつかキーワードが出た。そういった雑談の中で感性に従って気になったことを深堀りしていくとおもしろい調査や知見になったりすることを経験的に実感しつつある。今後もそういう機会や内容を大事にしていきたい。&lt;/p>
&lt;h2 id="カスタム-github-actions-の開発">カスタム GitHub Actions の開発&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1116/#カスタム-github-actions-作成">先日&lt;/a> 調査していたものをベースに、普通にやる方法と カスタム GitHub Actions の compoiste action で実装する場合の検討資料などを作って、カスタム GitHub Actions を実装してよいといった許可をもらった。企業における唯一の懸念は (原則) public リポジトリで運用するところで、CI のような処理に社外秘は含まれないが、public そのものに審査や承認を必要とするような組織では腰が重くなるようなこともあるかもしれない。ロードマップにも private リポジトリでカスタム GitHub Actoins を動かせるようにしようという課題は作成されている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/github/roadmap/issues/74">Actions: Use actions from internal repositories #74&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>コーディングスタイルの共通化</title><link>/diary/posts/2021/1125/</link><pubDate>Thu, 25 Nov 2021 07:58:17 +0900</pubDate><guid>/diary/posts/2021/1125/</guid><description>1時半に寝て6時に起きた
ソースコードのフォーマッター go 言語の gofmt が成功をおさめたことからどんなプログラミング言語でもコーディングスタイルはツールで自動整形するのがよいという雰囲気が醸成され、とくに業務の開発においては統一すべしというルールを設けている組織が多いと思う。java はこの領域では後塵を拝していると言ってよいと思う。歴史的に java の言語仕様と ide は相性がよかったため、ide がコーディングスタイルを自動整形していた結果、ide ごとに互換性のない異なるコーディングスタイルが使われるようになってしまった。私がアリエルで開発していた頃、開発者はみんな eclipse しか使ってなかったので問題にならなかった。しかし、いまや私が知っている ide だけでも次のものがある。
eclipse intellij idea netbeans vscode この問題を解決するツールとして最もメジャーなのは google-java-format で、当初はこのツールを導入しようと考えていた。しかし、開発チームのテックリードから google-java-format のコーディングスタイルはひどい、一番優れているのは intellij idea だというお気持ちを表明された。導入を止めろと言われたわけではないが、チームに入ったばかりの私はテックリードのお気持ちに忖度して google-java-format の導入を断念した。代わりに intellij idea のデフォルトフォーマットをどうやって他の ide を共有するかを調べたところ、Manage code style on a directory level with EditorConfig で EditorConfig の設定 (.editorconfig) を intellij idea で再利用できることがわかった。
うちの開発チームのメンバーは intellij idea と vscode しか使っていないため、現状はこれで解決できるように思えた。intellij idea にはデフォルトで EditorConfig プラグインがバンドルされていて有効になっている。リポジトリのルートディレクトリに .editorconfig があれば自動的にそれを読み込んでくれる。そこで intellij idea のデフォルト設定を .</description><content>&lt;p>1時半に寝て6時に起きた&lt;/p>
&lt;h2 id="ソースコードのフォーマッター">ソースコードのフォーマッター&lt;/h2>
&lt;p>go 言語の &lt;a href="https://pkg.go.dev/cmd/gofmt">gofmt&lt;/a> が成功をおさめたことからどんなプログラミング言語でもコーディングスタイルはツールで自動整形するのがよいという雰囲気が醸成され、とくに業務の開発においては統一すべしというルールを設けている組織が多いと思う。java はこの領域では後塵を拝していると言ってよいと思う。歴史的に java の言語仕様と ide は相性がよかったため、ide がコーディングスタイルを自動整形していた結果、ide ごとに互換性のない異なるコーディングスタイルが使われるようになってしまった。私がアリエルで開発していた頃、開発者はみんな eclipse しか使ってなかったので問題にならなかった。しかし、いまや私が知っている ide だけでも次のものがある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.eclipse.org/">eclipse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jetbrains.com/idea/">intellij idea&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://netbeans.apache.org/">netbeans&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://code.visualstudio.com/">vscode&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>この問題を解決するツールとして最もメジャーなのは &lt;a href="https://github.com/google/google-java-format">google-java-format&lt;/a> で、当初はこのツールを導入しようと考えていた。しかし、開発チームのテックリードから google-java-format のコーディングスタイルはひどい、一番優れているのは intellij idea だというお気持ちを表明された。導入を止めろと言われたわけではないが、チームに入ったばかりの私はテックリードのお気持ちに忖度して google-java-format の導入を断念した。代わりに intellij idea のデフォルトフォーマットをどうやって他の ide を共有するかを調べたところ、&lt;a href="https://www.jetbrains.com/help/idea/configuring-code-style.html#editorconfig">Manage code style on a directory level with EditorConfig&lt;/a> で &lt;a href="https://editorconfig.org/">EditorConfig&lt;/a> の設定 (&lt;code>.editorconfig&lt;/code>) を intellij idea で再利用できることがわかった。&lt;/p>
&lt;p>うちの開発チームのメンバーは intellij idea と vscode しか使っていないため、現状はこれで解決できるように思えた。intellij idea にはデフォルトで EditorConfig プラグインがバンドルされていて有効になっている。リポジトリのルートディレクトリに &lt;code>.editorconfig&lt;/code> があれば自動的にそれを読み込んでくれる。そこで intellij idea のデフォルト設定を &lt;code>.editorconfig&lt;/code> 形式でエクスポートして、それをリポジトリのルートディレクトリに配置することでコーディングスタイルのフォーマッターを共通化できた。&lt;/p></content></item><item><title>eLTAX 触ってみた</title><link>/diary/posts/2021/1124/</link><pubDate>Wed, 24 Nov 2021 08:02:59 +0900</pubDate><guid>/diary/posts/2021/1124/</guid><description>0時半に寝て6時半に起きた。水曜日は朝活の日だったけど、申し込み忘れてカレンダーに入ってなかったから忘れてた。カレンダーの予定に従って生活していることがわかる。
ふりかえり 今日はお仕事でスクラムイベントのレトロスペクティブがあった。最近は日本語でそのまま「ふりかえり」と呼ぶみたいやね。他の用語が英語なのであわせて英語で読んでたけど、ふりかえりの方が日本人的にはしっくりくるのでそれでいいと思う。
開発の情報共有のやり取りが活発になったという意見が出た。私は11月から働き始めてまだ3週間ほどなので以前がどうだったのかわからない。2週間前に本格的にスクラム開発に移行して、POや開発者のリーダーが新任したり、開発者に新規メンバー (私のこと) が追加したりと、いろんな状況が変わっている。なにか特別なことをしたというわけではないけど、自然にコミュニケーションがよい方に改善されているなら全体としてよい傾向に思える。私はまだ業務のことが全くわからないのでインフラやテストなどの非機能要件のタスクをやっているだけ。開発者からみて負債というほど大きなものではないが、やった方がよい技術的な残タスクのようなものを私がどんどん fix しているので開発環境がよくなっている気がするといったコメントを名指しでいただいた。スクラムマスターによると、ふりかえりでは、個人名で問題を指摘するのはよくないが、個人名で感謝を伝えるのはよいという。なので、よいことには個人名が前面に出る。褒められて悪い気がする人はそうそういないので、このプラクティスはチームの雰囲気をよくすることに寄与するのだろうと思えた。
続: 年末調整と住民税の納付 昨日 の続き。eLTAX のソフト版をダウンロードして年末調整の給与支払報告書の申請、住民税の特別徴収の納付も行った。アプリケーションの操作方法と手続きのドキュメントは懇切丁寧な内容なので、アプリケーションそのものの使い勝手はいまいちだけど、とくに手続きに迷うこともなく、順番に操作していけば問題なく申請や納付を完了できた。この2つの手続きは、昨年は紙で申請したり納付したりしていたのが、今年は電子申告になったのでちょっとクラスチェンジしたような感覚で気分がよかった。定期的な行政手続きを毎年やりながら少しずつやり方を洗練させていったり、異なる手続きに挑戦してみたり、制度の仕組みを理解したり、そういう少しずつ改善して学びを深めていくことそのものに幸せ感がある。人に依るんだろうけど、わりと私はマイクロ法人の行政手続きを楽しんでいる。</description><content>&lt;p>0時半に寝て6時半に起きた。水曜日は朝活の日だったけど、申し込み忘れてカレンダーに入ってなかったから忘れてた。カレンダーの予定に従って生活していることがわかる。&lt;/p>
&lt;h2 id="ふりかえり">ふりかえり&lt;/h2>
&lt;p>今日はお仕事でスクラムイベントのレトロスペクティブがあった。最近は日本語でそのまま「ふりかえり」と呼ぶみたいやね。他の用語が英語なのであわせて英語で読んでたけど、ふりかえりの方が日本人的にはしっくりくるのでそれでいいと思う。&lt;/p>
&lt;p>開発の情報共有のやり取りが活発になったという意見が出た。私は11月から働き始めてまだ3週間ほどなので以前がどうだったのかわからない。2週間前に本格的にスクラム開発に移行して、POや開発者のリーダーが新任したり、開発者に新規メンバー (私のこと) が追加したりと、いろんな状況が変わっている。なにか特別なことをしたというわけではないけど、自然にコミュニケーションがよい方に改善されているなら全体としてよい傾向に思える。私はまだ業務のことが全くわからないのでインフラやテストなどの非機能要件のタスクをやっているだけ。開発者からみて負債というほど大きなものではないが、やった方がよい技術的な残タスクのようなものを私がどんどん fix しているので開発環境がよくなっている気がするといったコメントを名指しでいただいた。スクラムマスターによると、ふりかえりでは、個人名で問題を指摘するのはよくないが、個人名で感謝を伝えるのはよいという。なので、よいことには個人名が前面に出る。褒められて悪い気がする人はそうそういないので、このプラクティスはチームの雰囲気をよくすることに寄与するのだろうと思えた。&lt;/p>
&lt;h2 id="続-年末調整と住民税の納付">続: 年末調整と住民税の納付&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1123/#年末調整と住民税の納付">昨日&lt;/a> の続き。eLTAX のソフト版をダウンロードして年末調整の給与支払報告書の申請、住民税の特別徴収の納付も行った。アプリケーションの操作方法と手続きのドキュメントは懇切丁寧な内容なので、アプリケーションそのものの使い勝手はいまいちだけど、とくに手続きに迷うこともなく、順番に操作していけば問題なく申請や納付を完了できた。この2つの手続きは、昨年は紙で申請したり納付したりしていたのが、今年は電子申告になったのでちょっとクラスチェンジしたような感覚で気分がよかった。定期的な行政手続きを毎年やりながら少しずつやり方を洗練させていったり、異なる手続きに挑戦してみたり、制度の仕組みを理解したり、そういう少しずつ改善して学びを深めていくことそのものに幸せ感がある。人に依るんだろうけど、わりと私はマイクロ法人の行政手続きを楽しんでいる。&lt;/p></content></item><item><title>スクラムの起源</title><link>/diary/posts/2021/1123/</link><pubDate>Tue, 23 Nov 2021 10:57:15 +0900</pubDate><guid>/diary/posts/2021/1123/</guid><description>5時に寝て7時半に起きた。前週末は遊んでたので夜はいろいろ作業してた。朝起きる習慣がついてきたので何時に寝ても起きれる感じになってきた。うまく体調管理もできている。
年末調整と住民税の納付 年末調整は1月末まで、住民税の特別徴収は納付の特例を使うと6-11月の6ヶ月分を12月10日までに納める。年末調整も11月の給与を確定したら調整額を算出して12月の給与に反映する。必要な情報を入力したら会計システム (freee) で自動算出してくれて書類も一通り作ってくれるので難しくない。ここで出力される給与支払報告書を市役所と税務署のそれぞれに申請する。市役所向けの手続きは eLTAX で行い、税務署向けの手続きは e-Tax で行う。先日 Windows マシンを購入 したので、今回は eLTAX の DL 版で完全な手続きができるはず。ただし、e-Tax も eLTAX も祝日・日曜日は利用できないのでやろうと思ったものの、今日は祝日だからできなかった。
住民税の特別徴収の納付も今回が初めての試み。企業が社員に代わり住民税を納付するのが原則であり、これを特別徴収と呼ぶ。昨年は特別徴収への切り替え申請をしないといけないのを私が知らなくて手続きが遅れた結果、個人宛に届いた納付書でそのまま支払いした。納付自体はそれでも問題はない。おそらく徴税側からみたら源泉徴収して企業の担当者が納付した方が誤りがなく確実でサポートコストを削減できるという狙いなんだろうと推測する。住民税の納付も eLTAX でできるようなので後日挑戦してみる。
アジャイル開発とスクラム 第2版 顧客・技術・経営をつなぐ協調的ソフトウェア開発マネジメント 4日前から読み進めていて、第1部アジャイル開発とは何か、スクラムとは何か (第1章から第5章) を読み終えた。
冒頭の序論を読んでいて、スクラムは 1980 年代の日本の製造業の (革新的な) 製品開発スタイルの論文がオリジナルだというのを知った。ソフトウェア開発の文脈だと、米国から輸入した方法論のようにみえるが、もとは日本で編み出された方法論だったという。1986年に書かれたハーバード・ビジネス・レビューに投稿された論文がオリジナルらしい。
The New New Product Development Game by Hirotaka Takeuchi and Ikujiro Nonaka 前に スクラムガイド2020 を一通り読んでいたので、スクラムについての内容はだいたい理解できた。補足でよかったのは、スクラムガイド 2017 から 2020 で改訂された内容やその背景や意図などがコラムで紹介されていた。それらを知ることで、よりスクラムで陥りやすい失敗や誤解されがちなところを理解できた。たとえば「開発チーム」という用語から「開発者」に改められた。スクラムチームの中に別のチームがあるようにみえ、プロダクトオーナー vs 開発チームのような対立構造にならないよう、チームはスクラムチームという1つしかないという意図だという。そして、開発チームの自己組織化 (Self-organized) というキーワードが、スクラムチームの自己管理型 (Self-managed) へといったように、主体である開発チームだけ自律的且つ協働するように読めたのを、スクラムチームという1つのチームしかないと強調されている。
コラム: 2020 スクラムガイド改訂とスクラムの3つの罠 スクラムが形式的、儀式的になってしまっている 目的を理解せずにハウツーをなぞるだけのチームが増えたので抽象的な表現に変更した 例) デイリースクラムがただの報告するだけになっている デイリースクラムの目的は状況にあわせた再計画であるため、形式的な報告ではいけない プロダクトオーナー vs 開発チームの構図に陥ってしまっている チーム内の分断をなくし、ワンチームになることが強調されている 開発チームから開発者へ、チームはスクラムチームが唯一 プロダクトオーナー vs 開発者が対立構図になることが多かった 「開発チームの自己組織化」から「スクラムチームの自己管理」へ スクラムは役割を超えて協力していくことが欠かせない 問題 vs 私たち (スクラムチーム) という構図を引き出すことが重要 スクラムマスターがスクラム警察もしくは雑用係になってしまっている スクラムマスターが「サーバントリーダー」とされていたが、単にサーバントになってしまうことがあった スクラムマスターはプロダクトの成果や組織の目標にコミットメントしないといけない ただスクラムルールを守らせたり、会議の司会役をするだけではない 「真のリーダー」としての資質とプロダクトの成果や組織の目標にコミットメントしていくための熱量を重視して専任していく必要がある これらのコラムを読むと、私が傍からみていたスクラムは本来の意図したスクラムの開発方法論ではなく、正しく運用されていなかったスクラムなのかもしれないとも思えてきた。本書の第1部を読み進めてみて、スクラムの意図している目的や価値には私が共感できるところが多々あった。</description><content>&lt;p>5時に寝て7時半に起きた。前週末は遊んでたので夜はいろいろ作業してた。朝起きる習慣がついてきたので何時に寝ても起きれる感じになってきた。うまく体調管理もできている。&lt;/p>
&lt;h2 id="年末調整と住民税の納付">年末調整と住民税の納付&lt;/h2>
&lt;p>年末調整は1月末まで、住民税の特別徴収は納付の特例を使うと6-11月の6ヶ月分を12月10日までに納める。年末調整も11月の給与を確定したら調整額を算出して12月の給与に反映する。必要な情報を入力したら会計システム (freee) で自動算出してくれて書類も一通り作ってくれるので難しくない。ここで出力される給与支払報告書を市役所と税務署のそれぞれに申請する。市役所向けの手続きは &lt;a href="https://www.eltax.lta.go.jp/">eLTAX&lt;/a> で行い、税務署向けの手続きは &lt;a href="https://www.e-tax.nta.go.jp/">e-Tax&lt;/a> で行う。先日 &lt;a href="/diary/diary/posts/2021/1103/#asus-rog-zephyrus-g15-ga503qr">Windows マシンを購入&lt;/a> したので、今回は eLTAX の DL 版で完全な手続きができるはず。ただし、e-Tax も eLTAX も祝日・日曜日は利用できないのでやろうと思ったものの、今日は祝日だからできなかった。&lt;/p>
&lt;p>住民税の特別徴収の納付も今回が初めての試み。企業が社員に代わり住民税を納付するのが原則であり、これを特別徴収と呼ぶ。昨年は特別徴収への切り替え申請をしないといけないのを私が知らなくて手続きが遅れた結果、個人宛に届いた納付書でそのまま支払いした。納付自体はそれでも問題はない。おそらく徴税側からみたら源泉徴収して企業の担当者が納付した方が誤りがなく確実でサポートコストを削減できるという狙いなんだろうと推測する。住民税の納付も eLTAX でできるようなので後日挑戦してみる。&lt;/p>
&lt;h2 id="アジャイル開発とスクラム-第2版-顧客技術経営をつなぐ協調的ソフトウェア開発マネジメント">アジャイル開発とスクラム 第2版 顧客・技術・経営をつなぐ協調的ソフトウェア開発マネジメント&lt;/h2>
&lt;p>4日前から読み進めていて、第1部アジャイル開発とは何か、スクラムとは何か (第1章から第5章) を読み終えた。&lt;/p>
&lt;p>冒頭の序論を読んでいて、スクラムは 1980 年代の日本の製造業の (革新的な) 製品開発スタイルの論文がオリジナルだというのを知った。ソフトウェア開発の文脈だと、米国から輸入した方法論のようにみえるが、もとは日本で編み出された方法論だったという。1986年に書かれたハーバード・ビジネス・レビューに投稿された論文がオリジナルらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hbr.org/1986/01/the-new-new-product-development-game">The New New Product Development Game by Hirotaka Takeuchi and Ikujiro Nonaka&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>前に &lt;a href="https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf">スクラムガイド2020&lt;/a> を一通り読んでいたので、スクラムについての内容はだいたい理解できた。補足でよかったのは、スクラムガイド 2017 から 2020 で改訂された内容やその背景や意図などがコラムで紹介されていた。それらを知ることで、よりスクラムで陥りやすい失敗や誤解されがちなところを理解できた。たとえば「開発チーム」という用語から「開発者」に改められた。スクラムチームの中に別のチームがあるようにみえ、プロダクトオーナー vs 開発チームのような対立構造にならないよう、チームはスクラムチームという1つしかないという意図だという。そして、開発チームの自己組織化 (Self-organized) というキーワードが、スクラムチームの自己管理型 (Self-managed) へといったように、主体である開発チームだけ自律的且つ協働するように読めたのを、スクラムチームという1つのチームしかないと強調されている。&lt;/p>
&lt;blockquote>
&lt;h5 id="コラム-2020-スクラムガイド改訂とスクラムの3つの罠">コラム: 2020 スクラムガイド改訂とスクラムの3つの罠&lt;/h5>
&lt;ul>
&lt;li>スクラムが形式的、儀式的になってしまっている
&lt;ul>
&lt;li>目的を理解せずにハウツーをなぞるだけのチームが増えたので抽象的な表現に変更した&lt;/li>
&lt;li>例) デイリースクラムがただの報告するだけになっている
&lt;ul>
&lt;li>デイリースクラムの目的は状況にあわせた再計画であるため、形式的な報告ではいけない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>プロダクトオーナー vs 開発チームの構図に陥ってしまっている
&lt;ul>
&lt;li>チーム内の分断をなくし、ワンチームになることが強調されている&lt;/li>
&lt;li>開発チームから開発者へ、チームはスクラムチームが唯一&lt;/li>
&lt;li>プロダクトオーナー vs 開発者が対立構図になることが多かった
&lt;ul>
&lt;li>「開発チームの自己組織化」から「スクラムチームの自己管理」へ&lt;/li>
&lt;li>スクラムは役割を超えて協力していくことが欠かせない
&lt;ul>
&lt;li>問題 vs 私たち (スクラムチーム) という構図を引き出すことが重要&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>スクラムマスターがスクラム警察もしくは雑用係になってしまっている
&lt;ul>
&lt;li>スクラムマスターが「サーバントリーダー」とされていたが、単にサーバントになってしまうことがあった&lt;/li>
&lt;li>スクラムマスターはプロダクトの成果や組織の目標にコミットメントしないといけない
&lt;ul>
&lt;li>ただスクラムルールを守らせたり、会議の司会役をするだけではない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>「真のリーダー」としての資質とプロダクトの成果や組織の目標にコミットメントしていくための熱量を重視して専任していく必要がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>これらのコラムを読むと、私が傍からみていたスクラムは本来の意図したスクラムの開発方法論ではなく、正しく運用されていなかったスクラムなのかもしれないとも思えてきた。本書の第1部を読み進めてみて、スクラムの意図している目的や価値には私が共感できるところが多々あった。&lt;/p></content></item><item><title>kustomize のパッチ適用の違い</title><link>/diary/posts/2021/1122/</link><pubDate>Mon, 22 Nov 2021 13:40:40 +0900</pubDate><guid>/diary/posts/2021/1122/</guid><description>22時ぐらいには寝て6時半に起きた。昨日はお出かけしてきてバテたんで19時頃からうたた寝を繰り返してずっと寝てた。実家に帰っていた期間を除いて、土日のどちらかを休むのはここ3ヶ月はなかったと思うし、土日の2日間ほとんど仕事をしなかったのは半年ぐらいはなかったと思う。久しぶりに土日に仕事しなかったなという印象で、その理由は業務委託のお仕事の契約が決まって余裕があるからだと思う。
kustomize の Inline Patch Inline Patch に次の3つのやり方が説明されている。
patchesStrategicMerge: Strategic Merge Patch として解析されるパッチファイルのリスト patchesJSON6902: 1つのターゲットリソースのみに適用可能な JSON Patch として解析されるパッチと関連付けされるターゲットのリスト patches: 関連付けされるターゲットとパッチのリスト。このパッチは複数のオブジェクトに適用でき、パッチが Strategic Merge Patch なのか JSON Patch かは自動的に検出 patches は patchesStrategicMerge と patchesJSON6902 の両方を記述できる。運用上は patchesStrategicMerge か patchesJSON6902 を適用したいパッチの内容によって使い分けることになる。おそらく前者は base にない要素を追加したり、base の要素をすべて置き換えたりするときに使う。後者は base にある map や list の一部の要素のみを限定して置き換えたり、削除したりするときに使う。ちなみに patchesJSON6902 の 6902 というのは RFC 6902 JavaScript Object Notation (JSON) Patch に由来する。
patchesJson6902 の例として次のような設定にパッチを適用する。base から読まれた metadata の要素から namespace のみを削除したり、spec.metadata の1番目のリストの secretKeyRef が参照する Secret を my-secret で置き換えたりできる。こういったパッチを patchesStrategicMerge で実現することはできないのではないかと思う (詳しくないので私が間違っているかもしれない) 。</description><content>&lt;p>22時ぐらいには寝て6時半に起きた。昨日はお出かけしてきてバテたんで19時頃からうたた寝を繰り返してずっと寝てた。実家に帰っていた期間を除いて、土日のどちらかを休むのはここ3ヶ月はなかったと思うし、土日の2日間ほとんど仕事をしなかったのは半年ぐらいはなかったと思う。久しぶりに土日に仕事しなかったなという印象で、その理由は業務委託のお仕事の契約が決まって余裕があるからだと思う。&lt;/p>
&lt;h2 id="kustomize-の-inline-patch">kustomize の Inline Patch&lt;/h2>
&lt;p>&lt;a href="https://kubectl.docs.kubernetes.io/guides/example/inline_patch/">Inline Patch&lt;/a> に次の3つのやり方が説明されている。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>patchesStrategicMerge: Strategic Merge Patch として解析されるパッチファイルのリスト&lt;/li>
&lt;li>patchesJSON6902: 1つのターゲットリソースのみに適用可能な JSON Patch として解析されるパッチと関連付けされるターゲットのリスト&lt;/li>
&lt;li>patches: 関連付けされるターゲットとパッチのリスト。このパッチは複数のオブジェクトに適用でき、パッチが Strategic Merge Patch なのか JSON Patch かは自動的に検出&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>patches は patchesStrategicMerge と patchesJSON6902 の両方を記述できる。運用上は patchesStrategicMerge か patchesJSON6902 を適用したいパッチの内容によって使い分けることになる。おそらく前者は base にない要素を追加したり、base の要素をすべて置き換えたりするときに使う。後者は base にある map や list の一部の要素のみを限定して置き換えたり、削除したりするときに使う。ちなみに patchesJSON6902 の 6902 というのは &lt;a href="https://datatracker.ietf.org/doc/html/rfc6902">RFC 6902 JavaScript Object Notation (JSON) Patch&lt;/a> に由来する。&lt;/p>
&lt;p>patchesJson6902 の例として次のような設定にパッチを適用する。base から読まれた metadata の要素から namespace のみを削除したり、spec.metadata の1番目のリストの secretKeyRef が参照する Secret を my-secret で置き換えたりできる。こういったパッチを patchesStrategicMerge で実現することはできないのではないかと思う (詳しくないので私が間違っているかもしれない) 。&lt;/p>
&lt;h5 id="baseyml">base.yml&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">my-component&lt;/span>
&lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">metadata&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">username&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">user&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">password&lt;/span>
&lt;span style="color:#f92672">secretKeyRef&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">base-secret&lt;/span>
&lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">password&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="kustomizationyml">kustomization.yml&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">...
&lt;span style="color:#f92672">patchesJson6902&lt;/span>:
- &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">my-patch.yaml&lt;/span>
&lt;span style="color:#f92672">target&lt;/span>:
&lt;span style="color:#f92672">group&lt;/span>: &lt;span style="color:#ae81ff">apps&lt;/span>
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Component&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">my-component&lt;/span>
...
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="my-patchyaml">my-patch.yaml&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">- &lt;span style="color:#f92672">op&lt;/span>: &lt;span style="color:#ae81ff">remove&lt;/span>
&lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/metadata/namespace&lt;/span>
- &lt;span style="color:#f92672">op&lt;/span>: &lt;span style="color:#ae81ff">replace&lt;/span>
&lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/spec/metadata/1/secretKeyRef/name&lt;/span>
&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">my-secret&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="リーンキャンバスレビュー-前半">リーンキャンバスレビュー (前半)&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1114/#リーンキャンバス">前に作ったリーンキャンバス&lt;/a> を使って友だちにプロダクトの設計をレビューしてもらった。私がリーンキャンバスを作ったことがなかったので、この項目にはどういった内容を書くか、それぞれの項目がどういった関連付けや粒度で整理するかといった、リーンキャンバスの書き方そのものも含めて教えてもらった。&lt;/p>
&lt;p>私が設計のために作った40枚のスライドを話すと2時間必要とするが、リーンキャンバスを使えば要点のみ15分で話せるようになるのが狙いになるみたい。とはいえ、リーンキャンバスの書いてある内容の半分を確認するだけで今日は2時間弱かかってしまった。議事録を取りながらだったので話すだけならもっと短くなったかもしれないし、その背景や根拠を細かくツッコミしていくとそれなりの時間はかかるのかもしれない。リーンキャンバス上は数枚の付箋で簡潔に書いてあるが、これどういうこと？みたいな問いになると詳細を説明しないといけないので時間がかかったように思う。リーンキャンバスの精度や品質が上がれば、読み手が詳細を確認しなくても意図を理解しやすくて詳細のツッコミが不要になるのかもしれない。これまで使ったことがないツールでおもしろいので週末に後半を行う。課題管理の背景には実践知、認知心理学、情報共有、組織論といった様々な分野にまたがるのでそのコンテキストを共有するのはなかなか難しいのではないかという思いもある。&lt;/p></content></item><item><title>六甲山と灘五郷</title><link>/diary/posts/2021/1121/</link><pubDate>Sun, 21 Nov 2021 13:40:43 +0900</pubDate><guid>/diary/posts/2021/1121/</guid><description>1時ぐらいに寝て6時に起きた。
オリックスレンタカー 昨日、9:00 - 17:00 で予約したものの、8時には出掛けられる状態になったので電話で確認したら早くてもよいと言う話だったので 8:15 から車を借りる。車種は トヨタ・ヴィッツ 1.3l だった。wikipedia によると、2020年3月31日で販売終了になっているみたい。六甲山のような山登りを普通に走る分にはコンパクトな車体で快適に走行できた。私は車に全くこだわりがないのでこのぐらいのサイズの車で十分だと感じた。保険やWeb割引を含めて8時間レンタルして7,700円だった。
神戸市立森林植物園 三ノ宮市内から約30分ほどで 神戸市立森林植物園 に着いた。8時15分ぐらいに出発したので比較的車が少なくて渋滞にあわずに行けたのもある。六甲山の山道は2車線しかなく、森林植物園の少し手前で渋滞になった。なぜ渋滞しているかというと、駐車場に入るところで料金の支払いが手作業だから。私が行った9時前の時間帯では駐車場のキャパシティは十分にあったが、駐車場の料金支払いで渋滞を引き起こしていたようにみえた。ネットワーク回線がどのような状態かわからないけど、ETC のような機器があれば渋滞を緩和できるのだろうと推測する。六甲山行くならなるべく朝早く出発した方がよいとわかった。
森林植物園全体の1/3ぐらいしかまわれなかったけど、写真とかでみる想像通りの場所でとてもよかった。11月は紅葉シーズンでライトアップもしているらしい。朝みても紅葉がすごくきれいだったのでライトアップも期待して見に行ってよさそうに思えた。時間があれば3時間ぐらいハイキングしても楽しめると思う。
六甲山牧場 森林植物園から10分ちょっとぐらいで 六甲山牧場 に着いた。ここも北エリアしかまわれなかったけど、山羊と羊と馬と牛に触れながらのほほんできるような場所。小さい子ども連れの家族が多かったので、子どもが動物と遊んでいるところの邪魔をしないように配慮しながら楽しむ感じ。
ちょっと前に山羊は草を食べてくれるという榛葉賀津也氏のツィートをみかけた。実家に草刈りのために定期的に帰るのが面倒だと常々思っていたので山羊を飼えばいいんじゃないかと考えている。そのためには山羊が生活する場所を作ってあげないといけない。田んぼの余っているスペースに柵を設け、一緒に山羊小屋も作ってあげればよさそう。六甲山牧場でも山羊はずっと草を食べていた。その辺に生えている雑草を食べるのかどうかわからないけど、確かに草を食べてくれそうな雰囲気はした。すぐに出来ることではないけど、段階的に実家で山羊を飼うための調査をしていこうと思う。
【スタッフ】注目！！4月15日読売新聞夕刊に「ヤギのおじさん！」として紹介されました！ pic.twitter.com/3lIObrub4X
&amp;mdash; 参議院議員 榛葉賀津也 (@SHIMBA_OFFICE) April 16, 2021 六甲山天覧台 六甲山天覧台 も行こうと予定していたが、道を間違えて辿り着けなかった。次回の機会があれば挑戦する。
菊正宗酒造記念館と櫻正宗記念館 お昼ごろに六甲山を降ってきたので 菊正宗酒造記念館 に行ってみた。お酒造りの道具や作業方法などの展示があって、お土産コーナーで無料試飲と有料試飲があって、無料でも2種類のきき酒ができる。お金を払うと4種類+つまみやアイスなどが付いてくるみたい。私は運転しないといけないのできき酒は飲めなかったけど、お酒が好きな人はいろんなお酒を試せておもしろそうに思う。
ついでにすぐ近くにある 櫻正宗記念館“櫻宴” にも寄ってみた。ここは菊正宗記念館に比べると展示類などは少ないが、お土産コーナーは充実していたのとカフェと食事処は充実していた。また無料試飲はなく有料試飲のみだった。
灘五郷にはこういった記念館がたくさんあるので 灘五郷酒蔵めぐり をしても楽しそうに思えた。
人と防災未来センター レンタカーのレンタル時間がまだ少しあったので 人と防災未来センター に行ってみた。西館と東館に分かれていて、西館は阪神・淡路大震災の映像や展示など、東館は地震や津波一般の展示が行われているらしい。西館だけみてきた。10分ぐらいの阪神・淡路大震災の再現映像をみたけど、これはかなり迫力があって、震度7という地震の恐ろしさが伝わってきた。私は南あわじ市で15歳のときに震災を経験したけど、南あわじ市は震度4で大した被害がなかったと思う。震度7とか死んでてもおかしくないというのが再現映像から受け取れた。この映像をみて防災意識を高めるだけでも価値があったように思う。</description><content>&lt;p>1時ぐらいに寝て6時に起きた。&lt;/p>
&lt;h2 id="オリックスレンタカー">オリックスレンタカー&lt;/h2>
&lt;p>昨日、9:00 - 17:00 で予約したものの、8時には出掛けられる状態になったので電話で確認したら早くてもよいと言う話だったので 8:15 から車を借りる。車種は &lt;a href="https://ja.wikipedia.org/wiki/%E3%83%88%E3%83%A8%E3%82%BF%E3%83%BB%E3%83%B4%E3%82%A3%E3%83%83%E3%83%84">トヨタ・ヴィッツ&lt;/a> 1.3l だった。wikipedia によると、2020年3月31日で販売終了になっているみたい。六甲山のような山登りを普通に走る分にはコンパクトな車体で快適に走行できた。私は車に全くこだわりがないのでこのぐらいのサイズの車で十分だと感じた。保険やWeb割引を含めて8時間レンタルして7,700円だった。&lt;/p>
&lt;h2 id="神戸市立森林植物園">神戸市立森林植物園&lt;/h2>
&lt;p>三ノ宮市内から約30分ほどで &lt;a href="https://www.kobe-park.or.jp/shinrin/">神戸市立森林植物園&lt;/a> に着いた。8時15分ぐらいに出発したので比較的車が少なくて渋滞にあわずに行けたのもある。六甲山の山道は2車線しかなく、森林植物園の少し手前で渋滞になった。なぜ渋滞しているかというと、駐車場に入るところで料金の支払いが手作業だから。私が行った9時前の時間帯では駐車場のキャパシティは十分にあったが、駐車場の料金支払いで渋滞を引き起こしていたようにみえた。ネットワーク回線がどのような状態かわからないけど、ETC のような機器があれば渋滞を緩和できるのだろうと推測する。六甲山行くならなるべく朝早く出発した方がよいとわかった。&lt;/p>
&lt;p>森林植物園全体の1/3ぐらいしかまわれなかったけど、写真とかでみる想像通りの場所でとてもよかった。11月は紅葉シーズンでライトアップもしているらしい。朝みても紅葉がすごくきれいだったのでライトアップも期待して見に行ってよさそうに思えた。時間があれば3時間ぐらいハイキングしても楽しめると思う。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2021/1121_forest1.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2021/1121_forest2.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2021/1121_forest3.jpg"/>
&lt;/figure>
&lt;/p>
&lt;h2 id="六甲山牧場">六甲山牧場&lt;/h2>
&lt;p>森林植物園から10分ちょっとぐらいで &lt;a href="https://rokkosan.jp/">六甲山牧場&lt;/a> に着いた。ここも北エリアしかまわれなかったけど、山羊と羊と馬と牛に触れながらのほほんできるような場所。小さい子ども連れの家族が多かったので、子どもが動物と遊んでいるところの邪魔をしないように配慮しながら楽しむ感じ。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1121_goat.jpg"/>
&lt;/figure>
&lt;p>ちょっと前に山羊は草を食べてくれるという榛葉賀津也氏のツィートをみかけた。実家に草刈りのために定期的に帰るのが面倒だと常々思っていたので山羊を飼えばいいんじゃないかと考えている。そのためには山羊が生活する場所を作ってあげないといけない。田んぼの余っているスペースに柵を設け、一緒に山羊小屋も作ってあげればよさそう。六甲山牧場でも山羊はずっと草を食べていた。その辺に生えている雑草を食べるのかどうかわからないけど、確かに草を食べてくれそうな雰囲気はした。すぐに出来ることではないけど、段階的に実家で山羊を飼うための調査をしていこうと思う。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">【スタッフ】注目！！4月15日読売新聞夕刊に「ヤギのおじさん！」として紹介されました！ &lt;a href="https://t.co/3lIObrub4X">pic.twitter.com/3lIObrub4X&lt;/a>&lt;/p>&amp;mdash; 参議院議員 榛葉賀津也 (@SHIMBA_OFFICE) &lt;a href="https://twitter.com/SHIMBA_OFFICE/status/1382868429384806401?ref_src=twsrc%5Etfw">April 16, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="六甲山天覧台">六甲山天覧台&lt;/h2>
&lt;p>&lt;a href="https://www.rokkosan.com/tenrandai/">六甲山天覧台&lt;/a> も行こうと予定していたが、道を間違えて辿り着けなかった。次回の機会があれば挑戦する。&lt;/p>
&lt;h2 id="菊正宗酒造記念館と櫻正宗記念館">菊正宗酒造記念館と櫻正宗記念館&lt;/h2>
&lt;p>お昼ごろに六甲山を降ってきたので &lt;a href="https://www.kikumasamune.co.jp/kinenkan/">菊正宗酒造記念館&lt;/a> に行ってみた。お酒造りの道具や作業方法などの展示があって、お土産コーナーで無料試飲と有料試飲があって、無料でも2種類のきき酒ができる。お金を払うと4種類+つまみやアイスなどが付いてくるみたい。私は運転しないといけないのできき酒は飲めなかったけど、お酒が好きな人はいろんなお酒を試せておもしろそうに思う。&lt;/p>
&lt;p>ついでにすぐ近くにある &lt;a href="https://www.sakuramasamune.co.jp/sakuraen/sakuraen_index.html">櫻正宗記念館“櫻宴”&lt;/a> にも寄ってみた。ここは菊正宗記念館に比べると展示類などは少ないが、お土産コーナーは充実していたのとカフェと食事処は充実していた。また無料試飲はなく有料試飲のみだった。&lt;/p>
&lt;p>灘五郷にはこういった記念館がたくさんあるので &lt;a href="https://www.hyogo-tourism.jp/course/result/35">灘五郷酒蔵めぐり&lt;/a> をしても楽しそうに思えた。&lt;/p>
&lt;h2 id="人と防災未来センター">人と防災未来センター&lt;/h2>
&lt;p>レンタカーのレンタル時間がまだ少しあったので &lt;a href="https://www.dri.ne.jp/">人と防災未来センター&lt;/a> に行ってみた。西館と東館に分かれていて、西館は阪神・淡路大震災の映像や展示など、東館は地震や津波一般の展示が行われているらしい。西館だけみてきた。10分ぐらいの阪神・淡路大震災の再現映像をみたけど、これはかなり迫力があって、震度7という地震の恐ろしさが伝わってきた。私は南あわじ市で15歳のときに震災を経験したけど、南あわじ市は震度4で大した被害がなかったと思う。震度7とか死んでてもおかしくないというのが再現映像から受け取れた。この映像をみて防災意識を高めるだけでも価値があったように思う。&lt;/p></content></item><item><title>レンタカーを予約した</title><link>/diary/posts/2021/1120/</link><pubDate>Sat, 20 Nov 2021 20:27:20 +0900</pubDate><guid>/diary/posts/2021/1120/</guid><description>1時前後に寝て6時に起きた。前日から母が泊まっていて、母は5時ぐらい起きて作業し始めるので必然的に朝起こされる。部屋を掃除してくれたのできれいになった。
ストレッチ 今週もお仕事に忙しくてあまりストレッチもウォーキングはできなかったものの、前週から中殿筋 (ちゅうでんきん) の張りはずっと残っていて、今日もトレーナーさんによく伸ばしてもらったものの張りが強いなと言う印象がある。今日の開脚幅は開始前168cmで、ストレッチ後169.5cmだった。前週とほぼ同じで現状維持ちょっとよくなったぐらいかな。ボールを使った中殿筋のストレッチが気持ちよくて疲れたときによくやっているけど、やっぱり1人でやるストレッチには限界があって、誰かに押してもらったり伸ばしてもらったりする方がよく効く。
三ノ宮・元町観光 親族が来ているので観光案内してきた。うちの会社のオフィスなども紹介した。三ノ宮・元町でショッピングして、南京町で豚まんや小籠包を買い食いしてきた。お昼は 饂飩の四國 という老舗のうどん屋さんに入った。前からお店は知っていて、いつか入りたいなと思いつつ、やや価格帯も高いのでうどんだとちょっと高いかな？とも思っていたけど、今日初めて入ってみて食べたらおいしかったので価格は妥当と言える。私はおろし醤油焼きなすうどんを食べた。コシがあって長い麺はそれだけでもおいしかった。天ぷらが豪華だったので、接待などで天ざるや天丼をお勧めするのもよさそう。
オリックスレンタカー 住んでいるところに一番近いレンタカーに オリックスレンタカー がある。前に一度借りたことがあって、そのときは普通にお店に行って明日借りたいと言えば予約できた。今日も同じノリで明日借りたいと言ったら予約が埋まってますと返された。仕方ないと思って次に近いトヨタレンタカーで尋ねてみたけど、同様に予約が埋まっていますと返された。ネットで探すかなぁと思って、試しにオリックスレンタカーのアカウント作成して、予約検索してみたらちょうど探していたコンパクトサイズで予約できた。ほんの1時間前は予約で埋まっていると店員さんが言っていたのに、、、と思い返しながらいくつかのケースを考察した。
私が質問して帰った後にたまたまキャンセルが出た 店舗予約とネット予約の在庫を別で管理していて、店舗予約在庫はなくなっていたが、ネット予約在庫だけ残っていた 店員さんが在庫を勘違いしていて実は1車だけ残っていた Web の予約システムがバグっていて実は在庫がないのにネットから予約できてしまった ネット予約すると近くの他の支店で余っている車両を再配置するワークフローがあるために予約できた 昨日のメタ認知が暴走するではないけど、メタ認知を働かせるといろんなケースが出てくる。明日お店に行ってちゃんと配車されることを期待する。</description><content>&lt;p>1時前後に寝て6時に起きた。前日から母が泊まっていて、母は5時ぐらい起きて作業し始めるので必然的に朝起こされる。部屋を掃除してくれたのできれいになった。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週もお仕事に忙しくてあまりストレッチもウォーキングはできなかったものの、前週から中殿筋 (ちゅうでんきん) の張りはずっと残っていて、今日もトレーナーさんによく伸ばしてもらったものの張りが強いなと言う印象がある。今日の開脚幅は開始前168cmで、ストレッチ後169.5cmだった。前週とほぼ同じで現状維持ちょっとよくなったぐらいかな。ボールを使った中殿筋のストレッチが気持ちよくて疲れたときによくやっているけど、やっぱり1人でやるストレッチには限界があって、誰かに押してもらったり伸ばしてもらったりする方がよく効く。&lt;/p>
&lt;h2 id="三ノ宮元町観光">三ノ宮・元町観光&lt;/h2>
&lt;p>親族が来ているので観光案内してきた。うちの会社のオフィスなども紹介した。三ノ宮・元町でショッピングして、南京町で豚まんや小籠包を買い食いしてきた。お昼は &lt;a href="https://www.udonnoshikoku.com/">饂飩の四國&lt;/a> という老舗のうどん屋さんに入った。前からお店は知っていて、いつか入りたいなと思いつつ、やや価格帯も高いのでうどんだとちょっと高いかな？とも思っていたけど、今日初めて入ってみて食べたらおいしかったので価格は妥当と言える。私はおろし醤油焼きなすうどんを食べた。コシがあって長い麺はそれだけでもおいしかった。天ぷらが豪華だったので、接待などで天ざるや天丼をお勧めするのもよさそう。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1120_udon.jpg"/>
&lt;/figure>
&lt;h2 id="オリックスレンタカー">オリックスレンタカー&lt;/h2>
&lt;p>住んでいるところに一番近いレンタカーに &lt;a href="https://car.orix.co.jp/">オリックスレンタカー&lt;/a> がある。前に一度借りたことがあって、そのときは普通にお店に行って明日借りたいと言えば予約できた。今日も同じノリで明日借りたいと言ったら予約が埋まってますと返された。仕方ないと思って次に近いトヨタレンタカーで尋ねてみたけど、同様に予約が埋まっていますと返された。ネットで探すかなぁと思って、試しにオリックスレンタカーのアカウント作成して、予約検索してみたらちょうど探していたコンパクトサイズで予約できた。ほんの1時間前は予約で埋まっていると店員さんが言っていたのに、、、と思い返しながらいくつかのケースを考察した。&lt;/p>
&lt;ul>
&lt;li>私が質問して帰った後にたまたまキャンセルが出た&lt;/li>
&lt;li>店舗予約とネット予約の在庫を別で管理していて、店舗予約在庫はなくなっていたが、ネット予約在庫だけ残っていた&lt;/li>
&lt;li>店員さんが在庫を勘違いしていて実は1車だけ残っていた&lt;/li>
&lt;li>Web の予約システムがバグっていて実は在庫がないのにネットから予約できてしまった&lt;/li>
&lt;li>ネット予約すると近くの他の支店で余っている車両を再配置するワークフローがあるために予約できた&lt;/li>
&lt;/ul>
&lt;p>昨日のメタ認知が暴走するではないけど、メタ認知を働かせるといろんなケースが出てくる。明日お店に行ってちゃんと配車されることを期待する。&lt;/p></content></item><item><title>メタ認知にもの思い</title><link>/diary/posts/2021/1119/</link><pubDate>Fri, 19 Nov 2021 10:02:43 +0900</pubDate><guid>/diary/posts/2021/1119/</guid><description>0時に寝て6時に起きた。昨日も疲れててウォーキングには出掛けられなくて寝て、3時や4時に起きつつも気付いたら5時半に起きてて、そう言えばと思い出したときに6時だったというふわふわした寝起きだった。
朝活: ミクロ経済学入門の入門 ［金朝ツメトギ］ 2021-11-19 AM 6 で第10章の再分配を読んだ。この本はほとんど朝活で読み終えた。
市場は社会的余剰が最大化されるので社会全体の富を増やす働きの強い制度だという。その増える富の方向性をタテとヨコで表現しているが、タテ方向に増やす働き (資本家が莫大な富をもつ) はあっても、ヨコ方向に拡げていく (みんなが裕福になる) 機能はないという。本章では所得の再分配と、再分配が適正かどうかを測るための指標として ジニ係数 について説明されている。ジニ係数を使うと、所得分布から不平等の状態を客観的に把握することに優れているという。富める者から貧しい者へ所得を移転することでジニ係数が下がる。ただし、両者の貧富を逆転させないものを ピグー・ドールトン移転 と呼ぶ。このピグー・ドールトン移転を実行し続けると、最終的に所得分布は全員が同じである 完全平等分布 になる。このときのジニ係数はゼロになる。その逆に、1人がこの世すべての所得を独り占めすると 完全不平等分布 となり、そのジニ係数は 1 (に近い値) となる。
絶対的貧困: 世界銀行は生命の維持に必要な基準として1日の所得1.25ドルと定めている、絶対的貧困の指標の1つと考えられる 相対的貧困: 所得分布の真ん中の50%と OECD が定めている 相対的貧困の基準に満たない人口の占める割合を 相対的貧困率 と呼ぶ 2019年 国民生活基礎調査の概況 によると、2019年の値は 15.7% になるらしい。6-7人に1人ぐらいの割合になる メタ認知が暴走 あんちぽさんの日記 に次の動画が紹介されてた。メタ認知で〈学ぶ力〉を高める：認知心理学が解き明かす効果的学習法 を読んでから、学びや書くことについてメタ認知というキーワードを意識して考えるようになっている。この動画ではメタ認知を「相対化」と説明していた。自己を相対化して、様々な文脈や状況、相手の意図なども考慮して結論が出せなくなったり、思考がまとまらなくなってしまうという。そういうメタ認知が暴走する人間を メタモン と名付けていた。ここでいう「モン」はモンスターの短縮なのかな？なかなかおもしろい。こんな極端ではないけど、私も相手の意図や状況を深読みしてしまって静観の姿勢を取るものの、なにも考えてない人だったりすると無駄に時間を浪費してしまうこともある。他にも 銃・病原菌・鉄 の話題が気になって wikipedia を軽く読んだりした。
会食 姪が大学に進学するそうでその面接に来たので一緒に晩ご飯することに。姉の勤め先の関係会社で 神戸プレジール という神戸牛ステーキのややたっかい系のレストランで食べてきた。コース料理で1万円/人で飲みものやデザートなどは別途6千円ほどだった。但馬牛や神戸牛のステーキはもちろんとてもおいしかったんだけど、もう自分はこういう料理を求めてないなというのも感じた。個室で食べてたんやけど、姉の仕事の関係者が5-6人ぐらい、入れ代わり立ち代わりにやってきて、姉は直売所のパートだったのが、いつの間にか社員になって、いつの間にかナンバー2になっているらしい。おまけでフォークリフト免許まで取っている。なんやかんやも含めて、この場所を晩ご飯に選んでいるのもあるんだろうけど、職場の周りの人にしか言っていない今日の予定を、どこかで聞きつけて挨拶にくる関係者の人たち。私が学生の頃「田舎の噂は isdn より速い」と言ったものだけど、いまは「光回線よりも速い」と言うらしい。姉がいろんな関係者に挨拶しているのをみながら、もう自分はこういう仕事もたぶんできないなと実感した。</description><content>&lt;p>0時に寝て6時に起きた。昨日も疲れててウォーキングには出掛けられなくて寝て、3時や4時に起きつつも気付いたら5時半に起きてて、そう言えばと思い出したときに6時だったというふわふわした寝起きだった。&lt;/p>
&lt;h2 id="朝活-ミクロ経済学入門の入門">朝活: ミクロ経済学入門の入門&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=g9-KQ76QmtI">［金朝ツメトギ］ 2021-11-19 AM 6&lt;/a> で第10章の再分配を読んだ。この本はほとんど朝活で読み終えた。&lt;/p>
&lt;p>市場は社会的余剰が最大化されるので社会全体の富を増やす働きの強い制度だという。その増える富の方向性をタテとヨコで表現しているが、タテ方向に増やす働き (資本家が莫大な富をもつ) はあっても、ヨコ方向に拡げていく (みんなが裕福になる) 機能はないという。本章では所得の再分配と、再分配が適正かどうかを測るための指標として &lt;strong>ジニ係数&lt;/strong> について説明されている。ジニ係数を使うと、所得分布から不平等の状態を客観的に把握することに優れているという。富める者から貧しい者へ所得を移転することでジニ係数が下がる。ただし、両者の貧富を逆転させないものを &lt;strong>ピグー・ドールトン移転&lt;/strong> と呼ぶ。このピグー・ドールトン移転を実行し続けると、最終的に所得分布は全員が同じである &lt;strong>完全平等分布&lt;/strong> になる。このときのジニ係数はゼロになる。その逆に、1人がこの世すべての所得を独り占めすると &lt;strong>完全不平等分布&lt;/strong> となり、そのジニ係数は 1 (に近い値) となる。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1119_gini-coefficient.png"/>
&lt;/figure>
&lt;ul>
&lt;li>絶対的貧困: 世界銀行は生命の維持に必要な基準として1日の所得1.25ドルと定めている、絶対的貧困の指標の1つと考えられる&lt;/li>
&lt;li>相対的貧困: 所得分布の真ん中の50%と OECD が定めている
&lt;ul>
&lt;li>相対的貧困の基準に満たない人口の占める割合を &lt;strong>相対的貧困率&lt;/strong> と呼ぶ&lt;/li>
&lt;li>&lt;a href="https://www.mhlw.go.jp/toukei/saikin/hw/k-tyosa/k-tyosa19/dl/03.pdf">2019年 国民生活基礎調査の概況&lt;/a> によると、2019年の値は 15.7% になるらしい。6-7人に1人ぐらいの割合になる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="メタ認知が暴走">メタ認知が暴走&lt;/h2>
&lt;p>&lt;a href="https://kentarokuribayashi.com/journal/2021/11/18/2021%e5%b9%b411%e6%9c%8818%e6%97%a5">あんちぽさんの日記&lt;/a> に次の動画が紹介されてた。&lt;a href="https://note.com/t2y1979/n/n4713058f48ce">メタ認知で〈学ぶ力〉を高める：認知心理学が解き明かす効果的学習法&lt;/a> を読んでから、学びや書くことについてメタ認知というキーワードを意識して考えるようになっている。この動画ではメタ認知を「相対化」と説明していた。自己を相対化して、様々な文脈や状況、相手の意図なども考慮して結論が出せなくなったり、思考がまとまらなくなってしまうという。そういうメタ認知が暴走する人間を &lt;em>メタモン&lt;/em> と名付けていた。ここでいう「モン」はモンスターの短縮なのかな？なかなかおもしろい。こんな極端ではないけど、私も相手の意図や状況を深読みしてしまって静観の姿勢を取るものの、なにも考えてない人だったりすると無駄に時間を浪費してしまうこともある。他にも &lt;a href="https://ja.wikipedia.org/wiki/%E9%8A%83%E3%83%BB%E7%97%85%E5%8E%9F%E8%8F%8C%E3%83%BB%E9%89%84">銃・病原菌・鉄&lt;/a> の話題が気になって wikipedia を軽く読んだりした。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/sj7eer2tArs" allowfullscreen title="意図せずメタ認知が暴走する悲しき怪物【ミーム提案委員会2】＃71">&lt;/iframe>
&lt;/div>
&lt;h2 id="会食">会食&lt;/h2>
&lt;p>姪が大学に進学するそうでその面接に来たので一緒に晩ご飯することに。姉の勤め先の関係会社で &lt;a href="https://kobe-plaisir.jp/">神戸プレジール&lt;/a> という神戸牛ステーキのややたっかい系のレストランで食べてきた。コース料理で1万円/人で飲みものやデザートなどは別途6千円ほどだった。但馬牛や神戸牛のステーキはもちろんとてもおいしかったんだけど、もう自分はこういう料理を求めてないなというのも感じた。個室で食べてたんやけど、姉の仕事の関係者が5-6人ぐらい、入れ代わり立ち代わりにやってきて、姉は直売所のパートだったのが、いつの間にか社員になって、いつの間にかナンバー2になっているらしい。おまけでフォークリフト免許まで取っている。なんやかんやも含めて、この場所を晩ご飯に選んでいるのもあるんだろうけど、職場の周りの人にしか言っていない今日の予定を、どこかで聞きつけて挨拶にくる関係者の人たち。私が学生の頃「田舎の噂は isdn より速い」と言ったものだけど、いまは「光回線よりも速い」と言うらしい。姉がいろんな関係者に挨拶しているのをみながら、もう自分はこういう仕事もたぶんできないなと実感した。&lt;/p></content></item><item><title>今年は忘年会やる</title><link>/diary/posts/2021/1118/</link><pubDate>Thu, 18 Nov 2021 07:19:22 +0900</pubDate><guid>/diary/posts/2021/1118/</guid><description>1時に寝て3時に起きて2度寝して6時に起きた。起き上がれなくて6時半までだらだらしてから起きた。
リポジトリの改行コード指定 git のリポジトリ設定で .gitattributes という設定方法がある。ざっくり理解するには .gitattributesによる改行コードの変換設定 を読むのが早い。とりあえずこんな設定にしてみた。すでに crlf の改行コードでコミットされたファイルがあるため、それらを lf に変換しないといけない。eol=lf にすると crlf でコミットされている既存ファイルも変換してくれるみたい。おそらくチェックアウトしたときにそうなるのかな？
* text=auto eol=lf *.jar binary ここ数年は Windows マシンを開発に使っている開発者と一緒に働いたことがなかったけど、OS 混在環境だとリポジトリ設定が必要だということに気付いた。多様性は大事。
忘年会 三宮.dev＆bizpy 合同忘年会 に参加登録した。bizpy だけだと、忘年会の参加者を集めるのは厳しそうなので三ノ宮.devと共同でやる。これなら最低でも2人は確定しているのでイベントがなくなることはない。日程は参加者の希望を聞きながら水曜か金曜でやるみたい。いましか飲み会できないだろうからいいと思う。
ミクロ経済学入門の入門 第9章の公共財を読んだ。市場を考察するときに扱う財は一般論として 私的財 を想定している。私的財は次の2つの性質を満たす。
競合的: 複数の人々が同時に利用できない 排除的: 拠出に貢献した特定のメンバーしか利用できない 一方で私的財と対偶の関係にある競合的でも排除的でもない財を 公共財 と呼ぶ。例えば、国防サービスや一般道路などが相当する。侵攻してくる敵国から自国を防衛するときにすべての国民、納税していない人であっても国防の利益にあずかれる。非競合的だが、排除的である財を クラブ財 と呼ぶ。高速道路などが相当する。みんなが利用できるが、利用料金を収めないと利用できない。競合的だが非排除的な財を コモンプール財 と呼ぶ。漁場などが相当する。どの漁師が魚を獲るかは競合しているが、漁業権をもっている限り漁そのものは制限されない。
これをまとめると、財は次の4つの分類になる。
競合的 非競合的 排除的 私的財 クラブ財 非排除的 コモンプール財 公共財 公共財の自発的供給の問いとして、排除的でも競合的でもない公共財が人々の自発的な行動で十分に供給できるかを考える。自分のお金を寄付する・寄付しないの2択でマトリクスを作成する。自分は寄付せず、他人の寄付から利益を得ることを フリーライド と呼ぶ。みんながフリーライドをしようとすると公共財はまったく供給されない。A と B の2者間における利得表を表すと次のようになる。相手が寄付して、自分が寄付しないときに最大の利益となり、どちらも寄付しないよりは両者が寄付した方が利益が大きくなる。</description><content>&lt;p>1時に寝て3時に起きて2度寝して6時に起きた。起き上がれなくて6時半までだらだらしてから起きた。&lt;/p>
&lt;h2 id="リポジトリの改行コード指定">リポジトリの改行コード指定&lt;/h2>
&lt;p>git のリポジトリ設定で &lt;a href="https://git-scm.com/docs/gitattributes">.gitattributes&lt;/a> という設定方法がある。ざっくり理解するには &lt;a href="https://kiririmode.hatenablog.jp/entry/20170416/1492300735">.gitattributesによる改行コードの変換設定&lt;/a> を読むのが早い。とりあえずこんな設定にしてみた。すでに crlf の改行コードでコミットされたファイルがあるため、それらを lf に変換しないといけない。&lt;code>eol=lf&lt;/code> にすると crlf でコミットされている既存ファイルも変換してくれるみたい。おそらくチェックアウトしたときにそうなるのかな？&lt;/p>
&lt;pre tabindex="0">&lt;code>* text=auto eol=lf
*.jar binary
&lt;/code>&lt;/pre>&lt;p>ここ数年は Windows マシンを開発に使っている開発者と一緒に働いたことがなかったけど、OS 混在環境だとリポジトリ設定が必要だということに気付いた。多様性は大事。&lt;/p>
&lt;h2 id="忘年会">忘年会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/231602/">三宮.dev＆bizpy 合同忘年会&lt;/a> に参加登録した。bizpy だけだと、忘年会の参加者を集めるのは厳しそうなので三ノ宮.devと共同でやる。これなら最低でも2人は確定しているのでイベントがなくなることはない。日程は参加者の希望を聞きながら水曜か金曜でやるみたい。いましか飲み会できないだろうからいいと思う。&lt;/p>
&lt;h2 id="ミクロ経済学入門の入門">ミクロ経済学入門の入門&lt;/h2>
&lt;p>第9章の公共財を読んだ。市場を考察するときに扱う財は一般論として &lt;strong>私的財&lt;/strong> を想定している。私的財は次の2つの性質を満たす。&lt;/p>
&lt;ul>
&lt;li>競合的: 複数の人々が同時に利用できない&lt;/li>
&lt;li>排除的: 拠出に貢献した特定のメンバーしか利用できない&lt;/li>
&lt;/ul>
&lt;p>一方で私的財と対偶の関係にある競合的でも排除的でもない財を &lt;strong>公共財&lt;/strong> と呼ぶ。例えば、国防サービスや一般道路などが相当する。侵攻してくる敵国から自国を防衛するときにすべての国民、納税していない人であっても国防の利益にあずかれる。非競合的だが、排除的である財を &lt;strong>クラブ財&lt;/strong> と呼ぶ。高速道路などが相当する。みんなが利用できるが、利用料金を収めないと利用できない。競合的だが非排除的な財を &lt;strong>コモンプール財&lt;/strong> と呼ぶ。漁場などが相当する。どの漁師が魚を獲るかは競合しているが、漁業権をもっている限り漁そのものは制限されない。&lt;/p>
&lt;p>これをまとめると、財は次の4つの分類になる。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">競合的&lt;/th>
&lt;th style="text-align:center">非競合的&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">排除的&lt;/td>
&lt;td style="text-align:center">私的財&lt;/td>
&lt;td style="text-align:center">クラブ財&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">非排除的&lt;/td>
&lt;td style="text-align:center">コモンプール財&lt;/td>
&lt;td style="text-align:center">公共財&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>公共財の自発的供給の問いとして、排除的でも競合的でもない公共財が人々の自発的な行動で十分に供給できるかを考える。自分のお金を寄付する・寄付しないの2択でマトリクスを作成する。自分は寄付せず、他人の寄付から利益を得ることを &lt;strong>フリーライド&lt;/strong> と呼ぶ。みんながフリーライドをしようとすると公共財はまったく供給されない。A と B の2者間における利得表を表すと次のようになる。相手が寄付して、自分が寄付しないときに最大の利益となり、どちらも寄付しないよりは両者が寄付した方が利益が大きくなる。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">A \ B&lt;/th>
&lt;th style="text-align:center">寄付する&lt;/th>
&lt;th style="text-align:center">寄付しない&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">寄付する&lt;/td>
&lt;td style="text-align:center">4, 4&lt;/td>
&lt;td style="text-align:center">2, 5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">寄付しない&lt;/td>
&lt;td style="text-align:center">5, 2&lt;/td>
&lt;td style="text-align:center">3, 3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>A が寄付するか・しないかの選択は、B の寄付の有無に関係なく、A は寄付しない方が寄付したよりもトクすることになる。相手がどういった選択をしても自分にとって一番トクな選択肢が同じときにその選択肢を &lt;strong>支配戦略&lt;/strong> という。この話は B からみても同じになる。A も B も寄付しないがトクする状態のことを &lt;strong>支配戦略均衡&lt;/strong> という。この状態が最善かと言えば、そうではなく、両者が寄付した方が両者が寄付しないよりもトクする状態になる。このように公共財の供給を個々のプレイヤーに任せていては &lt;strong>パレート劣位&lt;/strong> な結果となってしまう。この状態からどうやって両者が寄付する &lt;strong>パレート優位&lt;/strong> な状態に移行できるかを考えるのが、政府の徴税の方策と言える。&lt;/p>
&lt;p>政府が誰にいくらの税を課して、どの程度の量の公共財を適切と決めるのかは難しい問題である。放っておいて上手くいかないものの、政府に任せて上手くいくことも保証されない。このようなゲーム理論を制度設計に活用する &lt;strong>メカニズムデザイン&lt;/strong> という専門分野がある。&lt;/p></content></item><item><title>Testcontainers を触ってみた</title><link>/diary/posts/2021/1117/</link><pubDate>Wed, 17 Nov 2021 08:12:12 +0900</pubDate><guid>/diary/posts/2021/1117/</guid><description>23時頃に寝て3時に起きて、そこから寝たり起きたりしながら6時に半に起きた。怖い夢をみて眠れなくなって中途半端に寝てた。
朝活: 雑談 【三宮.dev オンライン】リモート朝活もくもく会 に参加した。寝坊、、、というよりは起きてたけど、イベントを忘れていて6時45分ぐらいから参加して主催者しかいなかったのでそのまま7時半まで雑談してた。始めが悪いとだらだらしてしまう。気をつけねば。
三宮.dev の主催者や参加者の常連さんたちとはだいぶ身近に話すにようになってきた。コミュニティって人間関係だと思っていて、話したり顔をあわせたりする回数が増えるに従って身近な知人になっていって、それ自体が価値の1つだったりすると思う。いま忘年会の企画を三宮.dev でも行っているが、bizpy と合同でやっていいんじゃないかと考えている。
Testcontainers DB を使ったユニットテストのために Testcontainers Postgres Module を使ってみた。docker hub からイメージを取得して JUnit のテストプロセスの中からアクセスできるようにするためのライブラリになる。コンテナの扱いをテストコードから管理したいときなどに便利。ちょっと調べて簡単に設定できたのでまた時間のあるときに会社のブログに記事を書こうと思う。</description><content>&lt;p>23時頃に寝て3時に起きて、そこから寝たり起きたりしながら6時に半に起きた。怖い夢をみて眠れなくなって中途半端に寝てた。&lt;/p>
&lt;h2 id="朝活-雑談">朝活: 雑談&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/231078/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> に参加した。寝坊、、、というよりは起きてたけど、イベントを忘れていて6時45分ぐらいから参加して主催者しかいなかったのでそのまま7時半まで雑談してた。始めが悪いとだらだらしてしまう。気をつけねば。&lt;/p>
&lt;p>三宮.dev の主催者や参加者の常連さんたちとはだいぶ身近に話すにようになってきた。コミュニティって人間関係だと思っていて、話したり顔をあわせたりする回数が増えるに従って身近な知人になっていって、それ自体が価値の1つだったりすると思う。いま忘年会の企画を三宮.dev でも行っているが、bizpy と合同でやっていいんじゃないかと考えている。&lt;/p>
&lt;h2 id="testcontainers">Testcontainers&lt;/h2>
&lt;p>DB を使ったユニットテストのために &lt;a href="https://www.testcontainers.org/modules/databases/postgres/">Testcontainers Postgres Module&lt;/a> を使ってみた。docker hub からイメージを取得して JUnit のテストプロセスの中からアクセスできるようにするためのライブラリになる。コンテナの扱いをテストコードから管理したいときなどに便利。ちょっと調べて簡単に設定できたのでまた時間のあるときに会社のブログに記事を書こうと思う。&lt;/p></content></item><item><title>カスタム GitHub Actions のサンプルを作ってみた</title><link>/diary/posts/2021/1116/</link><pubDate>Tue, 16 Nov 2021 07:00:17 +0900</pubDate><guid>/diary/posts/2021/1116/</guid><description>23時半に寝て5時半に起きた。昨夜は夜にウォーキングに出掛けようと思いつつ、22時頃に1時間ほど寝てしまった。それで出掛けるのが面倒になってそのまま寝てた。早く寝た分、早く起きた。せっかく早起きしたのでドラクエタクトのデイリーミッションやって、それから起きて7時ぐらいにはオフィスに着いてたと思う。
カスタム GitHub Actions 作成 GitHub Docs の アクションの作成 をみながらサンプルを作ってみた。カスタムアクションは3つの作成方法がある。
docker コンテナを使ったアクション javascript を使ったアクション シェルスクリプトなどを使ったアクション (composite アクション) たぶんランタイムに何を使うかでアクションの作り方が異なるようにみえる。最後の composite アクションは呼び出される環境で動くことを想定しているのかな？サンプルには bash 上で動くものを紹介していた。ほとんどチュートリアルの内容そのままんだけど、動かして雰囲気を掴むために自分で composite アクションを作ってみた。単一のリポジトリに閉じたものなら通常のワークフローの設定に書けばいいけど、複数のリポジトリで同じ処理をしたい場合は composite アクションとして再利用できるようにするとよさそう。
https://github.com/t2y/gh-actions-sample</description><content>&lt;p>23時半に寝て5時半に起きた。昨夜は夜にウォーキングに出掛けようと思いつつ、22時頃に1時間ほど寝てしまった。それで出掛けるのが面倒になってそのまま寝てた。早く寝た分、早く起きた。せっかく早起きしたのでドラクエタクトのデイリーミッションやって、それから起きて7時ぐらいにはオフィスに着いてたと思う。&lt;/p>
&lt;h2 id="カスタム-github-actions-作成">カスタム GitHub Actions 作成&lt;/h2>
&lt;p>GitHub Docs の &lt;a href="https://docs.github.com/ja/actions/creating-actions">アクションの作成&lt;/a> をみながらサンプルを作ってみた。カスタムアクションは3つの作成方法がある。&lt;/p>
&lt;ul>
&lt;li>docker コンテナを使ったアクション&lt;/li>
&lt;li>javascript を使ったアクション&lt;/li>
&lt;li>シェルスクリプトなどを使ったアクション (composite アクション)&lt;/li>
&lt;/ul>
&lt;p>たぶんランタイムに何を使うかでアクションの作り方が異なるようにみえる。最後の composite アクションは呼び出される環境で動くことを想定しているのかな？サンプルには bash 上で動くものを紹介していた。ほとんどチュートリアルの内容そのままんだけど、動かして雰囲気を掴むために自分で composite アクションを作ってみた。単一のリポジトリに閉じたものなら通常のワークフローの設定に書けばいいけど、複数のリポジトリで同じ処理をしたい場合は composite アクションとして再利用できるようにするとよさそう。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/gh-actions-sample">https://github.com/t2y/gh-actions-sample&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>お仕事しかしなかった一日</title><link>/diary/posts/2021/1115/</link><pubDate>Mon, 15 Nov 2021 13:13:44 +0900</pubDate><guid>/diary/posts/2021/1115/</guid><description>2時に寝て6時半に起きた。寝る前にウォーキングしてくるとよく眠れる気がする。お仕事で簡単に終わると思ってた作業にちょっとはまってトラブルシューティングしてたら疲れた。原因はわかって自己解決できたのはよかったけど、消耗して早くお仕事を終えて帰ってくつろいでた。
ローカル開発環境の整備 お仕事でローカルの k8s 環境の保守の作業をしている。minikube でローカルの k8s クラスターを作成して kubectl コマンドで制御する。k8s の yaml の設定ファイルのことをマニフェストと呼ぶのかな？そのテンプレート？ジェネレーター的なツールに kustomize を使っている。先週から1週間触っていたので cli の操作にはだいぶ慣れてきた。
まだ基本的な delete &amp;amp; apply みたいなことしかやってないけど、また余裕のあるときに細かいコマンドやロールバックのやり方なども学習しようと思う。デプロイで一番重要なのはロールバック、次にローリングアップデート、ローリングアップデートができればカナリアリリースもできるかな？その2つがあれば運用は大幅にコスト削減できるし、開発のアジリティも上げられる。たぶん k8s を使えば簡単にできるんだろうなというのは delete &amp;amp; apply だけみてもそう受け取れる。k8s クラスターさえマネージドならよく出来た仕組みだなと感心した。</description><content>&lt;p>2時に寝て6時半に起きた。寝る前にウォーキングしてくるとよく眠れる気がする。お仕事で簡単に終わると思ってた作業にちょっとはまってトラブルシューティングしてたら疲れた。原因はわかって自己解決できたのはよかったけど、消耗して早くお仕事を終えて帰ってくつろいでた。&lt;/p>
&lt;h2 id="ローカル開発環境の整備">ローカル開発環境の整備&lt;/h2>
&lt;p>お仕事でローカルの k8s 環境の保守の作業をしている。&lt;a href="https://minikube.sigs.k8s.io/docs/">minikube&lt;/a> でローカルの k8s クラスターを作成して &lt;a href="https://kubernetes.io/docs/reference/kubectl/overview/">kubectl&lt;/a> コマンドで制御する。k8s の yaml の設定ファイルのことをマニフェストと呼ぶのかな？そのテンプレート？ジェネレーター的なツールに &lt;a href="https://kustomize.io/">kustomize&lt;/a> を使っている。先週から1週間触っていたので cli の操作にはだいぶ慣れてきた。&lt;/p>
&lt;p>まだ基本的な delete &amp;amp; apply みたいなことしかやってないけど、また余裕のあるときに細かいコマンドやロールバックのやり方なども学習しようと思う。デプロイで一番重要なのはロールバック、次にローリングアップデート、ローリングアップデートができればカナリアリリースもできるかな？その2つがあれば運用は大幅にコスト削減できるし、開発のアジリティも上げられる。たぶん k8s を使えば簡単にできるんだろうなというのは delete &amp;amp; apply だけみてもそう受け取れる。k8s クラスターさえマネージドならよく出来た仕組みだなと感心した。&lt;/p></content></item><item><title>リーンキャンバスやってみた</title><link>/diary/posts/2021/1114/</link><pubDate>Sun, 14 Nov 2021 12:11:23 +0900</pubDate><guid>/diary/posts/2021/1114/</guid><description>2時に寝て8時に起きた。起きてからドラクエタクトのダイの大冒険コラボイベントをお昼前までやってた。午前中遊んでた割には今日はいろいろ作業した。ゆっくり寝たせいか、個々の作業は集中してできた。
リーンキャンバス 友だちにプロダクトの設計についてレビューしてもらう機会を調整してたらリーンキャンバス作るとよいとアドバイスをもらった。全然やったことがないので試しに自分でもやってみることにした。リーンキャンバス（Lean Canvas）を活用した企画書の書き方【テンプレート付】 を読みながら Canvanizer というツールで作成してみた。リーンキャンバスの利点の1つとしてA4サイズ1枚程度におさめるので短時間で作成できるというのがある。プロダクトの要件定義と設計はすでにできているので、リーンキャンバスは1時間も経たないうちにたたき台を作成できた。また友だちにレビューしてもらうときにフィードバックをもらいながら精度をあげていく。
データ指向アプリケーションデザイン 昨日から 9.4 分散トランザクションと合意の後半の3つの節を読んだ。第Ⅱ部、400ページを超えたので2/3ほど読み終えた。
9.4.3 耐障害性を持つ合意 9.4.4 メンバーシップと協調サービス まとめ 合意の問題は、次のように形式化される。1つ以上のノードが値を 提案（propose） し、合意アルゴリズムはそれらの値の中から1つを 決定（deside） する。この形式化においては、合意アルゴリズムは次の性質を満たさなければならない。
一様同意（uniform agreement） : 2 つのノードが異なる決定をしていないこと 整合性（integrity） : 2 回決定をしているノードがないこと 妥当性（validity） : ノードが値 v を決定したら、 v を提案しているノードがあること 終了性（termination） : クラッシュしていないすべてのノードは、最終的に何らかの値を決定すること 耐障害性を持つ合意アルゴリズムで最も広く知られているのは、Viewstamped Replication（ VSR ）、Paxos、Raft、Zab であり、こういった合意のアルゴリズムは全順序ブロードキャストを実装しており、複数回にわたって合意が行われる。全順序ブロードキャストによって耐障害性を保ちながら線形化可能でアトミックな操作を実装できる。ZooKeeper のようなツールが、アプリケーションから利用できる合意、障害検出、メンバーシップの「アウトソーシング」サービスを提供する上で、重要な役割を果たしている。分散システムにおける様々な問題に耐えうるようなアルゴリズムを独自に開発するよりははるかによいといえる。合意へと落とし込めるような問題の処理が必要で、さらに耐障害性が求められるなら ZooKeeper のようなサービスを使うとよい。
神戸駆動開発イベント 大阪駆動開発 という xr (vr/ar/mr) のコミュニティがあって、いろんな地域に拡張しているようで、その支部？の1つに神戸駆動開発ができて、そのイベントとして 【神戸】XR体験&amp;amp;交流会 に参加してきた。会場が 神戸電子専門学校 だったのでどんなところかを見に行く意図でも出かけてきた。三宮.dev の主催者も神戸電子専門学校の中の人とつながりがあるらしく、今度オフラインの勉強会をそこでしようか検討しているといった話しもあった。bizpy もコロナが落ち着いたらオフラインの勉強会をやってもいいかなとは考えているので接点を作っておいてもいいかもしれない。神戸なんて狭い地域なのでコミュニティ関係者はすぐにつながるけど、神戸でオフラインの勉強会を開くに当たって適当な場所がないというのはあちこちで聞く話しでもあるので、神戸電子専門学校がそういったコミュニティをつなぐハブ的な場になるならそれはそれでいいのかもしれない。
HoloLens 2 と Nreal Light と iphone や apple watch とレンズやミラーを組み合わせて作った手作りのデバイスなども体験させてもらった。HoloLens が思ったよりも映像がみえにくくて、ロボットを操作してロケットを発射させるコンテンツをやってみたんだけど、操作よりもコンテンツが明確にみえなくて難しかった。もしかしたら装着の仕方が悪かったのかもしれない。それに比べて Nreal Light はアイドルのライブみたいなコンテンツをみたんだけど、映像も音声もはっきりしていたので印象はよかった。</description><content>&lt;p>2時に寝て8時に起きた。起きてからドラクエタクトのダイの大冒険コラボイベントをお昼前までやってた。午前中遊んでた割には今日はいろいろ作業した。ゆっくり寝たせいか、個々の作業は集中してできた。&lt;/p>
&lt;h2 id="リーンキャンバス">リーンキャンバス&lt;/h2>
&lt;p>友だちにプロダクトの設計についてレビューしてもらう機会を調整してたらリーンキャンバス作るとよいとアドバイスをもらった。全然やったことがないので試しに自分でもやってみることにした。&lt;a href="https://monstar-lab.com/dx/solution/lean-canvas/">リーンキャンバス（Lean Canvas）を活用した企画書の書き方【テンプレート付】&lt;/a> を読みながら &lt;a href="https://canvanizer.com/">Canvanizer&lt;/a> というツールで作成してみた。リーンキャンバスの利点の1つとしてA4サイズ1枚程度におさめるので短時間で作成できるというのがある。プロダクトの要件定義と設計はすでにできているので、リーンキャンバスは1時間も経たないうちにたたき台を作成できた。また友だちにレビューしてもらうときにフィードバックをもらいながら精度をあげていく。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>昨日から 9.4 分散トランザクションと合意の後半の3つの節を読んだ。第Ⅱ部、400ページを超えたので2/3ほど読み終えた。&lt;/p>
&lt;ul>
&lt;li>9.4.3 耐障害性を持つ合意&lt;/li>
&lt;li>9.4.4 メンバーシップと協調サービス&lt;/li>
&lt;li>まとめ&lt;/li>
&lt;/ul>
&lt;p>合意の問題は、次のように形式化される。1つ以上のノードが値を &lt;strong>提案（propose）&lt;/strong> し、合意アルゴリズムはそれらの値の中から1つを &lt;strong>決定（deside）&lt;/strong> する。この形式化においては、合意アルゴリズムは次の性質を満たさなければならない。&lt;/p>
&lt;ul>
&lt;li>一様同意（uniform agreement） : 2 つのノードが異なる決定をしていないこと&lt;/li>
&lt;li>整合性（integrity） : 2 回決定をしているノードがないこと&lt;/li>
&lt;li>妥当性（validity） : ノードが値 v を決定したら、 v を提案しているノードがあること&lt;/li>
&lt;li>終了性（termination） : クラッシュしていないすべてのノードは、最終的に何らかの値を決定すること&lt;/li>
&lt;/ul>
&lt;p>耐障害性を持つ合意アルゴリズムで最も広く知られているのは、Viewstamped Replication（ VSR ）、Paxos、Raft、Zab であり、こういった合意のアルゴリズムは全順序ブロードキャストを実装しており、複数回にわたって合意が行われる。全順序ブロードキャストによって耐障害性を保ちながら線形化可能でアトミックな操作を実装できる。ZooKeeper のようなツールが、アプリケーションから利用できる合意、障害検出、メンバーシップの「アウトソーシング」サービスを提供する上で、重要な役割を果たしている。分散システムにおける様々な問題に耐えうるようなアルゴリズムを独自に開発するよりははるかによいといえる。合意へと落とし込めるような問題の処理が必要で、さらに耐障害性が求められるなら ZooKeeper のようなサービスを使うとよい。&lt;/p>
&lt;h2 id="神戸駆動開発イベント">神戸駆動開発イベント&lt;/h2>
&lt;p>&lt;a href="https://osaka-driven-dev.connpass.com/">大阪駆動開発&lt;/a> という xr (vr/ar/mr) のコミュニティがあって、いろんな地域に拡張しているようで、その支部？の1つに神戸駆動開発ができて、そのイベントとして &lt;a href="https://kobe-driven-dev.connpass.com/event/230296/">【神戸】XR体験&amp;amp;交流会&lt;/a> に参加してきた。会場が &lt;a href="https://www.kobedenshi.ac.jp/">神戸電子専門学校&lt;/a> だったのでどんなところかを見に行く意図でも出かけてきた。三宮.dev の主催者も神戸電子専門学校の中の人とつながりがあるらしく、今度オフラインの勉強会をそこでしようか検討しているといった話しもあった。bizpy もコロナが落ち着いたらオフラインの勉強会をやってもいいかなとは考えているので接点を作っておいてもいいかもしれない。神戸なんて狭い地域なのでコミュニティ関係者はすぐにつながるけど、神戸でオフラインの勉強会を開くに当たって適当な場所がないというのはあちこちで聞く話しでもあるので、神戸電子専門学校がそういったコミュニティをつなぐハブ的な場になるならそれはそれでいいのかもしれない。&lt;/p>
&lt;p>&lt;a href="https://www.microsoft.com/en-us/hololens">HoloLens 2&lt;/a> と &lt;a href="https://www.nreal.ai/light/">Nreal Light&lt;/a> と iphone や apple watch とレンズやミラーを組み合わせて作った手作りのデバイスなども体験させてもらった。HoloLens が思ったよりも映像がみえにくくて、ロボットを操作してロケットを発射させるコンテンツをやってみたんだけど、操作よりもコンテンツが明確にみえなくて難しかった。もしかしたら装着の仕方が悪かったのかもしれない。それに比べて Nreal Light はアイドルのライブみたいなコンテンツをみたんだけど、映像も音声もはっきりしていたので印象はよかった。&lt;/p>
&lt;p>適当にスタッフの人と話していて、センサーを使って現実のモノや事象を vr 空間に持ち込むと vr コンテンツを作るのは簡単かも？という話しをした。なんかセンサーを探してもいいかもしれない。そのスタッフの人はピアノを弾くのでピアノ音を取り込んで加工したりしていると話していた。&lt;/p>
&lt;h2 id="傾斜枕">傾斜枕&lt;/h2>
&lt;blockquote>
&lt;p>胃食道逆流症（英語表記Gastro Esophageal Reflux DiseaseからGERD（ガード）とも呼ばれています）は、主に胃の中の酸が食道へ逆流することにより、胸やけ（みぞおちの上の焼けるようなジリジリする感じ、しみる感じなど）や呑酸（酸っぱい液体が上がってくる感じ）などの不快な自覚症状を感じたり、食道の粘膜がただれたり（食道炎）する病気です。胸が詰まるような痛みを感じたり、のどの違和感や慢性的に咳が持続する患者さんもいます。胃酸の逆流は食後2～3時間までに起こることが多いため、食後にこれらの症状を感じたときは胃酸の逆流が起きている可能性を考える必要があります。&lt;/p>
&lt;p>(&amp;hellip;)&lt;/p>
&lt;p>現在では成人の10～20％がこの病気にかかっていると推測されています。&lt;/p>
&lt;p>&lt;a href="https://www.jsge.or.jp/guideline/disease/gerd.html">胃食道逆流症(GERD)&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>ここ1-2年、睡眠がうまくとれなくなったことと関連して、寝ていて胃酸が逆流してむせるといったことも2-3ヶ月に1回ぐらいと稀ではあるけれど、起きるということに気付いた。2年ほど前、健康診断で胃カメラを受診したときに医師から胃の入り口の弁が、普通の人は逆流しないように閉じているものが私のは開いているという話があった。そのときは特に日常生活に困ってないからいいんじゃないで流してたんだけど、加齢とともに胃食道逆流症が起こっているのかもしれないと、いくつかの事象を認識して思うようになってきた。喉の違和感も気になるようになっていた。その症状の軽減に逆流しにくいように傾斜を付けて寝るとよさそうというのをみつけて、傾斜枕を買ってみた。しばらく試してみて寝心地や胃食道逆流症がどうなるかを観察してみる。&lt;/p>
&lt;p>&lt;a href="https://www.amazon.co.jp/dp/B07VNDPD8Y?&amp;linkCode=li2&amp;tag=t2y-diary-22&amp;linkId=f2a28286ce04219213b577e23c7d45c4&amp;language=ja_JP&amp;ref_=as_li_ss_il" target="_blank">&lt;img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B07VNDPD8Y&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=t2y-diary-22&amp;language=ja_JP" >&lt;/a>&lt;img src="https://ir-jp.amazon-adsystem.com/e/ir?t=t2y-diary-22&amp;language=ja_JP&amp;l=li2&amp;o=9&amp;a=B07VNDPD8Y" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />&lt;/p></content></item><item><title>寝てた</title><link>/diary/posts/2021/1113/</link><pubDate>Sat, 13 Nov 2021 11:28:58 +0900</pubDate><guid>/diary/posts/2021/1113/</guid><description>1時に寝て8時に起きた。もっと早く目覚めてはいたけど、休日なんでゆっくりするかとのんびりしてた。本を読んで眠くなってきたので夕方から帰って寝てた。
ストレッチ 今週は勉強会の発表や週の真ん中で飲みにいってバテてしまってウォーキングは4日ぐらいしかできてなかった。前の週よりはあまり運動ができていない。前週からの右足太もも後ろの筋が張りはまだ少し残っているものの、ちょっとよくなった気がする。今日の開脚幅は開始前168cmで、ストレッチ後169cmだった。前週よりは数値がよくなって、また170cmの大台にのりそうな雰囲気になってきた。
中殿筋 (ちゅうでんきん) という、お尻の横の筋肉があまりよくなくて、ここが悪いと腰痛の原因になるらしい。歩いたり走ったりするときにも使う筋肉だという。中殿筋のストレッチとトレーニング のようなストレッチはいまもやっているけど、トレーニングはやってなかったのでまたやってみようと思う。
勉強会兼もくもく会 【三宮.dev オンライン】ついに出たぜNuxt3！Nuxt.js LT大会 に参加した。LT 発表する人が少なかったのでもくもく会になって本を読んでた。70歳の参加者の方がいて web 開発をするのに vue.js と react.js のどちらを選べばいいか？といった話題で盛り上がりつつ、その方の背景などを聞いていた。技術の話しは通じたのである程度、開発の素養もあってちゃんと勉強している人にみえた。私と同じマイクロ法人をやっているようで、自分のビジネスのアプリケーションを自分で開発するといったスタンスで取り組まれていて、70歳になってもやっている姿勢に敬意をもてた。</description><content>&lt;p>1時に寝て8時に起きた。もっと早く目覚めてはいたけど、休日なんでゆっくりするかとのんびりしてた。本を読んで眠くなってきたので夕方から帰って寝てた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週は勉強会の発表や週の真ん中で飲みにいってバテてしまってウォーキングは4日ぐらいしかできてなかった。前の週よりはあまり運動ができていない。前週からの右足太もも後ろの筋が張りはまだ少し残っているものの、ちょっとよくなった気がする。今日の開脚幅は開始前168cmで、ストレッチ後169cmだった。前週よりは数値がよくなって、また170cmの大台にのりそうな雰囲気になってきた。&lt;/p>
&lt;p>中殿筋 (ちゅうでんきん) という、お尻の横の筋肉があまりよくなくて、ここが悪いと腰痛の原因になるらしい。歩いたり走ったりするときにも使う筋肉だという。&lt;a href="https://kaiseihp.jp/news/id_14953">中殿筋のストレッチとトレーニング&lt;/a> のようなストレッチはいまもやっているけど、トレーニングはやってなかったのでまたやってみようと思う。&lt;/p>
&lt;h2 id="勉強会兼もくもく会">勉強会兼もくもく会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/227757/">【三宮.dev オンライン】ついに出たぜNuxt3！Nuxt.js LT大会&lt;/a> に参加した。LT 発表する人が少なかったのでもくもく会になって本を読んでた。70歳の参加者の方がいて web 開発をするのに vue.js と react.js のどちらを選べばいいか？といった話題で盛り上がりつつ、その方の背景などを聞いていた。技術の話しは通じたのである程度、開発の素養もあってちゃんと勉強している人にみえた。私と同じマイクロ法人をやっているようで、自分のビジネスのアプリケーションを自分で開発するといったスタンスで取り組まれていて、70歳になってもやっている姿勢に敬意をもてた。&lt;/p></content></item><item><title>打ち合わせでズタズタ</title><link>/diary/posts/2021/1112/</link><pubDate>Fri, 12 Nov 2021 07:57:18 +0900</pubDate><guid>/diary/posts/2021/1112/</guid><description>1時に寝て5時半に起きた。体調はよいが、新しい環境で働き始めたのと勉強会が続いたのでややバテた。今日は軽めの活動で休むことにした。今日は打ち合わせが3つ入って、作業が途中でズタズタになって集中力を書いた。打ち合わせするなら固めて連続的にやらないとなかなか難しいな。今週は新しい環境での仕事もあって疲れてたので17時にお仕事を終えて、夕方にお昼寝して、夜にオンライン飲み会でだべってた。
朝活: ミクロ経済学入門の入門 [金朝ツメトギ] 2021-11-12 AM 6 金曜朝6時開催のもくもく会 で第8章のリスクと保険を読んだ。用語を次にまとめる。
条件付き財: 将来に特定の条件が成立したときのみ特定の行為を可能とする財 例) 保険、賭けごと、宝くじ、投資など 確実性等価: 不確実な対価と、それと無差別になる確実な金額における経済価値 例) 50%の確率で1万円もらえるくじを、千円払って購入するときのくじの価格を確実性等価という 人々のリスクへの態度を分類する上で便利な概念になる ある人は、それぞれの金額 m について、満足度の指標 U(m) をもっているとする。このとき U(m) を効用、U を効用関数と呼ぶ。
m が増えると U(m) 、つまり効用も高まるが、それには限界がある。増える量は 限界効用逓減 の形になる。次の図では U(5) から U(10) になると m は2倍になるが、効用は2倍にはならない。ここで 期待効用理論 では「人は条件付き財を、効用を発生確率で加重和した 期待効用 で評価する」と考える。この 期待値 は 0.5 * 1万円 + 0.5 * 0円 = 5千円となる。効用は 0.5 x U(10) + 0.5 * U(0) となる。
確実性等価が期待値より高いか低いかは個人によって異なり、少額でも確実にもらえるお金を好むと確実性等価が期待値より低くなる。これを リスク回避的 と呼び、多くの人々がリスク回避的だからこそ保険という商品が成立する。その逆で確実性等価が期待値より高くなることを リウス愛好的 と呼ぶ。また確実性等価が期待値が等しいときは リスク中立的 と呼ぶ。そして確実性等価と期待値の差額を リスクプレミアム と呼ぶ。</description><content>&lt;p>1時に寝て5時半に起きた。体調はよいが、新しい環境で働き始めたのと勉強会が続いたのでややバテた。今日は軽めの活動で休むことにした。今日は打ち合わせが3つ入って、作業が途中でズタズタになって集中力を書いた。打ち合わせするなら固めて連続的にやらないとなかなか難しいな。今週は新しい環境での仕事もあって疲れてたので17時にお仕事を終えて、夕方にお昼寝して、夜にオンライン飲み会でだべってた。&lt;/p>
&lt;h2 id="朝活-ミクロ経済学入門の入門">朝活: ミクロ経済学入門の入門&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=ddTgbwdpRzg">[金朝ツメトギ] 2021-11-12 AM 6 金曜朝6時開催のもくもく会&lt;/a> で第8章のリスクと保険を読んだ。用語を次にまとめる。&lt;/p>
&lt;ul>
&lt;li>条件付き財: 将来に特定の条件が成立したときのみ特定の行為を可能とする財
&lt;ul>
&lt;li>例) 保険、賭けごと、宝くじ、投資など&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>確実性等価: 不確実な対価と、それと無差別になる確実な金額における経済価値
&lt;ul>
&lt;li>例) 50%の確率で1万円もらえるくじを、千円払って購入するときのくじの価格を確実性等価という&lt;/li>
&lt;li>人々のリスクへの態度を分類する上で便利な概念になる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>ある人は、それぞれの金額 &lt;em>m&lt;/em> について、満足度の指標 &lt;em>U(m)&lt;/em> をもっているとする。このとき &lt;em>U(m)&lt;/em> を効用、&lt;em>U&lt;/em> を効用関数と呼ぶ。&lt;/p>
&lt;p>&lt;em>m&lt;/em> が増えると &lt;em>U(m)&lt;/em> 、つまり効用も高まるが、それには限界がある。増える量は &lt;strong>限界効用逓減&lt;/strong> の形になる。次の図では &lt;em>U(5)&lt;/em> から &lt;em>U(10)&lt;/em> になると &lt;em>m&lt;/em> は2倍になるが、効用は2倍にはならない。ここで &lt;strong>期待効用理論&lt;/strong> では「人は条件付き財を、効用を発生確率で加重和した &lt;strong>期待効用&lt;/strong> で評価する」と考える。この &lt;strong>期待値&lt;/strong> は 0.5 * 1万円 + 0.5 * 0円 = 5千円となる。効用は 0.5 x U(10) + 0.5 * U(0) となる。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1112_Um.png"/>
&lt;/figure>
&lt;p>確実性等価が期待値より高いか低いかは個人によって異なり、少額でも確実にもらえるお金を好むと確実性等価が期待値より低くなる。これを &lt;strong>リスク回避的&lt;/strong> と呼び、多くの人々がリスク回避的だからこそ保険という商品が成立する。その逆で確実性等価が期待値より高くなることを &lt;strong>リウス愛好的&lt;/strong> と呼ぶ。また確実性等価が期待値が等しいときは &lt;strong>リスク中立的&lt;/strong> と呼ぶ。そして確実性等価と期待値の差額を &lt;strong>リスクプレミアム&lt;/strong> と呼ぶ。&lt;/p>
&lt;p>保険会社がある疾病の保険を提供し、顧客が加入する。顧客は自分がその疾病にかかりやすいかどうかを知っているが保険会社からはわからない。そのため一律の価格で保険を販売する。これを &lt;strong>情報の非対称性&lt;/strong> と呼ぶ。この状態で疾病のリスクが高い人たちが増えていくと、保険会社はさらに保険料を引き上げる。それによってリスクの低い人たちが加入しなくなり、さらにリスクの高い人たちの割合を高めてしまう。これを &lt;strong>逆選抜&lt;/strong> と呼ぶ。逆選抜の解消方法は、個々人のリスクとは無関係に強制的に保険に加入させてしまう。これが日本の国民皆保険制度と言える。さまざまな人のリスクを社会全体でヘッジ (低減) する仕組みであり、リスクの社会化と言える。&lt;/p>
&lt;p>民間の保険会社が遺伝子検査などにより、利潤の追求のため、ハイリスクな顧客を除外しようとすることは不当なのかどうか、保険倫理に関わる難問である。この難問の存在が公的保険制度の意義が高めている。&lt;/p></content></item><item><title>PMBOK セミナー</title><link>/diary/posts/2021/1111/</link><pubDate>Thu, 11 Nov 2021 07:56:49 +0900</pubDate><guid>/diary/posts/2021/1111/</guid><description>22時に寝て4時半に起きた。昨日は勉強会を連日でやって疲れ果ててからバテてすぐに寝た。久しぶりによく眠れた。起きてから1時間ほどドラクエタクトやって、ストレッチやって、7時半にはオフィスに行って8時からお仕事してた。
スクラム談義 お仕事で本格的なスクラム開発に参加することになった。スクラムマスターのかわのさんと少しスクラムで雑談した。アジャイル、スクラム、チケット駆動、課題管理などの話題であれこれ話してた。かわのさんはスクラムやアジャイルのアーリーアダプターのようで、かなり昔からやっているから経験や実績が多そうなので私の疑問や懸念に的確に返答をくれた。実際の現場でどう応用するかは別の話題としても、スクラムはそもそも「良い結果」を出すためのものではく「現状をありのままに見る」ものらしい。うまくやろうと思ったらスクラムにプラクティスや開発方法論を組み合わせないといけないし、そのための軽量フレームワークになっているのに、スクラムだけ実践すればうまくいくと誤解している人たちもいるといった話題もあった。私がスクラムうまくいってなさそうなチームをみていて微妙だと感じたのは、自分たちの課題に向き合ったプラクティスや改善に取り組んでなくて、スクラムの方法論を守ることに注力しているようにみえたからかもしれない。
紙の契約書に挑戦 新しいお仕事の契約は紙の契約で結ぶ。実はこれまで クラウドサイン で電子契約しかしたことなくて、紙の契約書は初めてでどきどきした。言うても印鑑を押すだけなんやけどな。でも、印鑑押すのってきれいに押したいという気持ちが出てちょっと緊張するからあまり好きではない。
PMBOK セミナー PMBOK®ガイド第7版 Quick Review に参加した。
参加者は60人で、すでに PMBOK ガイド第7版を購入またはダウンロードした人が十数人だったらしい。 PMBOK ガイドは4-5年ごとに更新されるものらしい。 本セミナーでは第6版と第7版の違いがどういったものかの概要を説明していた。第7版は第6版の拡張であり、実務で PMBOK ガイドが必要な人は依然として第6版も購入した方がよいと話されていた。
というのは、第7版は過去のガイドを更新したものではなく、PMP 試験は第6版の時点でアジャイルな要素も取り入れているため、第7版のために変更を加えるといった予定は現時点ではない。 つまり、少なくとも PMP 試験やプロジェクトマネジメントの国際規格である ISO 21500 は第6版をベースにした内容があるため、それらが急になくなったりすることはないらしい。第6版と第7版の違いとして次のような話しをされていた。
プロジェクトマネジメントの節目の切り口が変わった？ 第6版: プロセスベース 第7版: 原理原則 第7版でガイドに チーム が登場するようになった 主語がチームとなり、チームが○○するための原理原則はこうであるといった内容に変わった 主役はプロセスではなくチーム プロジェクトにチームが寄り添うようになった これらの違いは、第6版と第7版をテキストマイニングして、共起ネットワークを構築して比較してみるとよくわかると分析されていた。あとおもしろかったのが、第6版と第7版ではページ数は半減したものの、文字数は3割減程度となっており、箇条書きが多かった内容が説明ベースの文章に変わったためだろうといった話しもあった。</description><content>&lt;p>22時に寝て4時半に起きた。昨日は勉強会を連日でやって疲れ果ててからバテてすぐに寝た。久しぶりによく眠れた。起きてから1時間ほどドラクエタクトやって、ストレッチやって、7時半にはオフィスに行って8時からお仕事してた。&lt;/p>
&lt;h2 id="スクラム談義">スクラム談義&lt;/h2>
&lt;p>お仕事で本格的なスクラム開発に参加することになった。スクラムマスターのかわのさんと少しスクラムで雑談した。アジャイル、スクラム、チケット駆動、課題管理などの話題であれこれ話してた。かわのさんはスクラムやアジャイルのアーリーアダプターのようで、かなり昔からやっているから経験や実績が多そうなので私の疑問や懸念に的確に返答をくれた。実際の現場でどう応用するかは別の話題としても、スクラムはそもそも「良い結果」を出すためのものではく「現状をありのままに見る」ものらしい。うまくやろうと思ったらスクラムにプラクティスや開発方法論を組み合わせないといけないし、そのための軽量フレームワークになっているのに、スクラムだけ実践すればうまくいくと誤解している人たちもいるといった話題もあった。私がスクラムうまくいってなさそうなチームをみていて微妙だと感じたのは、自分たちの課題に向き合ったプラクティスや改善に取り組んでなくて、スクラムの方法論を守ることに注力しているようにみえたからかもしれない。&lt;/p>
&lt;h2 id="紙の契約書に挑戦">紙の契約書に挑戦&lt;/h2>
&lt;p>新しいお仕事の契約は紙の契約で結ぶ。実はこれまで &lt;a href="https://www.cloudsign.jp/">クラウドサイン&lt;/a> で電子契約しかしたことなくて、紙の契約書は初めてでどきどきした。言うても印鑑を押すだけなんやけどな。でも、印鑑押すのってきれいに押したいという気持ちが出てちょっと緊張するからあまり好きではない。&lt;/p>
&lt;h2 id="pmbok-セミナー">PMBOK セミナー&lt;/h2>
&lt;p>&lt;a href="https://aitrainingcenter.axis-ing.com/pmbok-quick">PMBOK®ガイド第7版 Quick Review&lt;/a> に参加した。&lt;/p>
&lt;p>参加者は60人で、すでに PMBOK ガイド第7版を購入またはダウンロードした人が十数人だったらしい。
PMBOK ガイドは4-5年ごとに更新されるものらしい。
本セミナーでは第6版と第7版の違いがどういったものかの概要を説明していた。第7版は第6版の拡張であり、実務で PMBOK ガイドが必要な人は依然として第6版も購入した方がよいと話されていた。&lt;/p>
&lt;p>というのは、第7版は過去のガイドを更新したものではなく、PMP 試験は第6版の時点でアジャイルな要素も取り入れているため、第7版のために変更を加えるといった予定は現時点ではない。
つまり、少なくとも PMP 試験やプロジェクトマネジメントの国際規格である ISO 21500 は第6版をベースにした内容があるため、それらが急になくなったりすることはないらしい。第6版と第7版の違いとして次のような話しをされていた。&lt;/p>
&lt;ul>
&lt;li>プロジェクトマネジメントの節目の切り口が変わった？
&lt;ul>
&lt;li>第6版: プロセスベース&lt;/li>
&lt;li>第7版: 原理原則&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>第7版でガイドに &lt;strong>チーム&lt;/strong> が登場するようになった
&lt;ul>
&lt;li>主語がチームとなり、チームが○○するための原理原則はこうであるといった内容に変わった
&lt;ul>
&lt;li>主役はプロセスではなくチーム&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>プロジェクトにチームが寄り添うようになった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>これらの違いは、第6版と第7版をテキストマイニングして、共起ネットワークを構築して比較してみるとよくわかると分析されていた。あとおもしろかったのが、第6版と第7版ではページ数は半減したものの、文字数は3割減程度となっており、箇条書きが多かった内容が説明ベースの文章に変わったためだろうといった話しもあった。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1111_pmbok-text-mining.png"/>
&lt;/figure></content></item><item><title>低空飛行</title><link>/diary/posts/2021/1110/</link><pubDate>Wed, 10 Nov 2021 08:17:52 +0900</pubDate><guid>/diary/posts/2021/1110/</guid><description>3時に寝て7時半に起きた。昨日2時まで呑んだくれてたので水曜日の朝活はお休み。完全に忘れてたし寝坊した。やや2日酔いでしんどかったけど、朝にはちゃんと起きれたので体調はよい。お仕事では会議体の見直しがあって、私が必要な会議に invite されてなくてバタバタしてた。
bizpy 勉強会 Python で Slack のインテグレーションをやってみる勉強会 #2 を開催した。10人ほど参加してくれた。資料は作ってあったし、内容も難しくないものだったので管理画面の設定とコードをみながら1時間ほどで説明して、30分ほど質疑応答や雑談をしながら8時半には勉強会を終えた。前日の睡眠不足でしんどかったので早く終えて帰りたかったのもある。あと一回 Block Kit の開発をやって slack インテグレーションの勉強会は終えようと思う。次は12月1日なので年内はそれで終わりでいいかな。いまのうちに忘年会やりたい気持ちがあるけど、神戸だと人が集まらんやろなぁ。</description><content>&lt;p>3時に寝て7時半に起きた。昨日2時まで呑んだくれてたので水曜日の朝活はお休み。完全に忘れてたし寝坊した。やや2日酔いでしんどかったけど、朝にはちゃんと起きれたので体調はよい。お仕事では会議体の見直しがあって、私が必要な会議に invite されてなくてバタバタしてた。&lt;/p>
&lt;h2 id="bizpy-勉強会">bizpy 勉強会&lt;/h2>
&lt;p>&lt;a href="https://bizpy.connpass.com/event/229091/">Python で Slack のインテグレーションをやってみる勉強会 #2&lt;/a> を開催した。10人ほど参加してくれた。資料は作ってあったし、内容も難しくないものだったので管理画面の設定とコードをみながら1時間ほどで説明して、30分ほど質疑応答や雑談をしながら8時半には勉強会を終えた。前日の睡眠不足でしんどかったので早く終えて帰りたかったのもある。あと一回 Block Kit の開発をやって slack インテグレーションの勉強会は終えようと思う。次は12月1日なので年内はそれで終わりでいいかな。いまのうちに忘年会やりたい気持ちがあるけど、神戸だと人が集まらんやろなぁ。&lt;/p></content></item><item><title>呑んだくれ</title><link>/diary/posts/2021/1109/</link><pubDate>Tue, 09 Nov 2021 07:19:29 +0900</pubDate><guid>/diary/posts/2021/1109/</guid><description>1時半に寝て6時に起きた。夜にウォーキングに出かけようとしたらたまたま雨が降ってきて諦めた。そしたら寝付けなかった。やっぱり歩いて疲弊すると寝付けやすいのかもしれない。ストレッチしたりしてたら寝るの遅くなった。
中間申告の納付 法人税・地方法人税の申告用紙が届いていたので内容を確認しながら e-tax で申請して pay-easy で税金の支払いを完了した。国税は一番最後に書類が届く。今年の書類が届いた日はこんな感じ。毎年記録しているから届く時期に準備していて慌てなくて済む。
法人市民税: 10月16日 法人県民税: 10月20日 法人税・地方法人税: 11月8日 国税の納付をもって中間申告をすべて終えた。中間申告は税金の先払いだからキャッシュフローが悪いと払えないみたいなことが起きる可能性がある。そうすると仮決算して支払い金額を抑えるみたいなことが必要になるんだろうな。まさに貧乏暇無し。
GitHub + Slack Integration integrations/slack の内容をみて subscribe する内容を確認した。4月頃にアップグレードしてそれまでの設定の互換性をなくして、その影響でうまく動かなかったりしてた。
github の slack 連携のときの commits:all が commits:* に変更されたみたい。4月中旬のバージョンアップ以降に作ったリポジトリか設定だと commits:all だと連携されないみたい。https://t.co/mGVUyEbgGQ
&amp;mdash; Tetsuya Morimoto (@t2y) April 30, 2021 その後、追いかけてなかったけど、いま README をみたら次の5つのイベントはデフォルトで有効になるみたい。
issues pulls commits releases deployments 必要に応じて他のイベントも追加するとよいみたい。私は次の3つかな。
reviews comments commits:* デフォルトのイベントは指定しなくてもよいけど、コピペですべて明示的に設定するならこんな感じ。
/github subscribe owner/repo issues,pulls,commits:*,releases,deployments,reviews,comments みんなの Python 勉強会 みんなのPython勉強会#75 で発表した。参加者は190人となっているけど、実際に zoom に参加していた人の最高値は110人ぐらいだったかな。190 * 0.</description><content>&lt;p>1時半に寝て6時に起きた。夜にウォーキングに出かけようとしたらたまたま雨が降ってきて諦めた。そしたら寝付けなかった。やっぱり歩いて疲弊すると寝付けやすいのかもしれない。ストレッチしたりしてたら寝るの遅くなった。&lt;/p>
&lt;h2 id="中間申告の納付">中間申告の納付&lt;/h2>
&lt;p>法人税・地方法人税の申告用紙が届いていたので内容を確認しながら e-tax で申請して pay-easy で税金の支払いを完了した。国税は一番最後に書類が届く。今年の書類が届いた日はこんな感じ。毎年記録しているから届く時期に準備していて慌てなくて済む。&lt;/p>
&lt;ul>
&lt;li>法人市民税: 10月16日&lt;/li>
&lt;li>法人県民税: 10月20日&lt;/li>
&lt;li>法人税・地方法人税: 11月8日&lt;/li>
&lt;/ul>
&lt;p>国税の納付をもって中間申告をすべて終えた。中間申告は税金の先払いだからキャッシュフローが悪いと払えないみたいなことが起きる可能性がある。そうすると仮決算して支払い金額を抑えるみたいなことが必要になるんだろうな。まさに貧乏暇無し。&lt;/p>
&lt;h2 id="github--slack-integration">GitHub + Slack Integration&lt;/h2>
&lt;p>&lt;a href="https://github.com/integrations/slack">integrations/slack&lt;/a> の内容をみて subscribe する内容を確認した。4月頃にアップグレードしてそれまでの設定の互換性をなくして、その影響でうまく動かなかったりしてた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">github の slack 連携のときの commits:all が commits:* に変更されたみたい。4月中旬のバージョンアップ以降に作ったリポジトリか設定だと commits:all だと連携されないみたい。&lt;a href="https://t.co/mGVUyEbgGQ">https://t.co/mGVUyEbgGQ&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1387999605959188481?ref_src=twsrc%5Etfw">April 30, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>その後、追いかけてなかったけど、いま README をみたら次の5つのイベントはデフォルトで有効になるみたい。&lt;/p>
&lt;ul>
&lt;li>issues&lt;/li>
&lt;li>pulls&lt;/li>
&lt;li>commits&lt;/li>
&lt;li>releases&lt;/li>
&lt;li>deployments&lt;/li>
&lt;/ul>
&lt;p>必要に応じて他のイベントも追加するとよいみたい。私は次の3つかな。&lt;/p>
&lt;ul>
&lt;li>reviews&lt;/li>
&lt;li>comments&lt;/li>
&lt;li>commits:*&lt;/li>
&lt;/ul>
&lt;p>デフォルトのイベントは指定しなくてもよいけど、コピペですべて明示的に設定するならこんな感じ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">/github subscribe owner/repo issues,pulls,commits:*,releases,deployments,reviews,comments
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="みんなの-python-勉強会">みんなの Python 勉強会&lt;/h2>
&lt;p>&lt;a href="https://startpython.connpass.com/event/228136/">みんなのPython勉強会#75&lt;/a> で発表した。参加者は190人となっているけど、実際に zoom に参加していた人の最高値は110人ぐらいだったかな。190 * 0.6 = 114 なので無料イベントの参加者数は6割前後の法則に合致する。人数が増えるほどこの法則は精度が高いように思う。発表者は3人いて、私は2番目に発表して、持ち時間は30分だった。録画していたので後でアーカイブをみれるようにするみたい。私は録画否定派で録画すると参加者がオンタイムで見なくなるのと、いつでも見れるものは見ないということもあるので勉強会のレベルは録画しなくてもいいんじゃないかと考えている。もちろん大きなカンファレンスは録画があった方が参加できない人も後から興味のある発表を見返せていいとは思う。25分発表で質疑応答5分で発表の時間配分はうまくいった。あまり準備できなかった割には伝えたいことはだいたい話せたと思う。なんか質疑応答で「カザモリ社は python のお仕事を受けてくれますか？」といった質問があってちょっと驚いた。ここ数年 python をメインにしたお仕事してなくて、仕事は java, go が多いと言っているせいか、python の仕事はやってないようにみえてしまうのかもしれない。python, java, go の3つの言語のお仕事は受けますよと回答した。発表終わってから1時間ほど懇親会をした。ほとんどコミュニティの主催者と発表者で雑談してた。久しぶりに外部の勉強会でいろんな人とお話することができて楽しかった。たまには外に出かけていくことに重要性も認識できた。またネタがあったら発表したいなとは思う。&lt;/p>
&lt;h2 id="呑み">呑み&lt;/h2>
&lt;p>懇親会が終わったのが22時で、疲れと空腹から仲のよい焼き鳥屋さんのお店に寄って晩ご飯を食べることにした。時短が終わっているので22時からでも飲みに行ける。お店は翌2時まで営業している。22時過ぎに行ったらお客さんは誰もいなくて、野菜サラダと焼き鳥を注文してマスターと雑談してた。&lt;/p>
&lt;p>時短が終わってから景気はどうかを聞いてみると、まだまだお客さんの戻りはコロナ前とくらべてまだまだだという。0時まわってから他の飲食店で働いている人たちが店内を埋まるぐらいは来てくれていたそうだけど、まだまだ余裕がないのか全然戻ってきてないと話されていた。0時半頃に2人組で「○○さんの紹介で来ました」みたいな既に酔っ払っているお客さんが来たりして、終電終わってからこういうお客さんが来たりしていたんだなと雰囲気は理解できた。マスターも2時に閉店して5時まで開いている他の飲食店に飲みに行くと話してた。そうやってお互いにお店に飲みに行って付き合いのようなものができているんだというのが理解できた。どこかのスナック行って3万円ほど使っても、必ずそのスナックの人がお店に来てくれて3万円以上使ってくれるという。お金をまわすってそういうことなんやなとマスターの話しを聞いていて理解できた。自分のお店を2時に閉店して、5時まで飲み歩いて、それから寝てまた次の日に仕事というのは体力的にすごくしんどそうで、マスター自身もコロナ明けは体調をみながら飲み歩いているとも話されてた。結局、2時前までマスターと雑談してて、私も22時から4時間弱ほど居座ってた。久しぶりに外で飲んでハイになっていたかもしれない。&lt;/p>
&lt;p>マスターのお勧めで &lt;a href="https://www.hamadasyuzou.co.jp/daiyame_brand">だいやめ&lt;/a> という芋焼酎をお湯割りで飲んだ。香熟芋という珍し？芋を使っていて、ライチのような香りのする芋焼酎でおいしかった。お土産によさそうなので覚えておこうと思う。&lt;/p></content></item><item><title>Kubernetes 使い始めの雑感</title><link>/diary/posts/2021/1108/</link><pubDate>Mon, 08 Nov 2021 08:40:51 +0900</pubDate><guid>/diary/posts/2021/1108/</guid><description>1時に寝て7時に起きた。夜にウォーキングし始めてからよく眠れるようになった気がする。
udemy: Kubernetes入門 昨日 の続き。今日はセクション6から最後まで。CI/CD のセクションだけスキップして、他は一通り目を通した。
セクション6 Kubernetes実践 1つずつ書くのは大変だけど、数をこなして徐々に覚えていけばよい。手で書くのもよいが、別のやり方としてクライアント側で dry run すると、設定のひな型を作ってくれるのでそれに必要な設定を足すのもよい。
$ kubectl create deploy mysql --image=mysql:5.7 --dry-run=client -o yaml $ kubectl exec -n database -it mysql-787f86d65c-nflxx -- mysql -uroot -ppassword データベースとアプリケーションを異なる namespace にデプロイして、それらが通信できるような設定を行う。基本的には --dry-run=client でひな型を作りつつ、必要な設定を追加していくやり方が簡単そうにみえた。とはいえ、実際に設定していくときはどういう設定を追加するとどういう振る舞いになるかを調べながら作業すると思うのでこんな簡単にはできないとは思う。次のようなアプリケーションをデプロイする一覧の流れを理解できた。
namespace 作成 Deployment 作成 ConfigMap 作成 Secret 作成 Deployment, ConfigMap, Secret 適用 Service 適用 port-forward でローカルからアクセス (作成したリソースをすべて削除) セクション7 KubernetesのDebug 基本は pod のステータスを確認しながら問題があれば、その箇所を追いかけていって原因を調査する。
$ kubectl get pod -A $ kubectl get pod -A --selector run=nginx k8s 上で実行しているアプリケーションの依存先へ接続できない場合は Service の確認が必要となる。kubectl の get, describe, logs などのサブコマンドをあれこれみながらエラーの原因を把握して、yaml の設定を変更していく。k8s のアーキテクチャとコマンドを覚えていないとなかなか難しそう。</description><content>&lt;p>1時に寝て7時に起きた。夜にウォーキングし始めてからよく眠れるようになった気がする。&lt;/p>
&lt;h2 id="udemy-kubernetes入門">udemy: Kubernetes入門&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1107/#udemy-kubernetes入門">昨日&lt;/a> の続き。今日はセクション6から最後まで。CI/CD のセクションだけスキップして、他は一通り目を通した。&lt;/p>
&lt;h3 id="セクション6-kubernetes実践">セクション6 Kubernetes実践&lt;/h3>
&lt;p>1つずつ書くのは大変だけど、数をこなして徐々に覚えていけばよい。手で書くのもよいが、別のやり方としてクライアント側で dry run すると、設定のひな型を作ってくれるのでそれに必要な設定を足すのもよい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl create deploy mysql --image&lt;span style="color:#f92672">=&lt;/span>mysql:5.7 --dry-run&lt;span style="color:#f92672">=&lt;/span>client -o yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl exec -n database -it mysql-787f86d65c-nflxx -- mysql -uroot -ppassword
&lt;/code>&lt;/pre>&lt;/div>&lt;p>データベースとアプリケーションを異なる namespace にデプロイして、それらが通信できるような設定を行う。基本的には &lt;code>--dry-run=client&lt;/code> でひな型を作りつつ、必要な設定を追加していくやり方が簡単そうにみえた。とはいえ、実際に設定していくときはどういう設定を追加するとどういう振る舞いになるかを調べながら作業すると思うのでこんな簡単にはできないとは思う。次のようなアプリケーションをデプロイする一覧の流れを理解できた。&lt;/p>
&lt;ol>
&lt;li>namespace 作成&lt;/li>
&lt;li>Deployment 作成&lt;/li>
&lt;li>ConfigMap 作成&lt;/li>
&lt;li>Secret 作成&lt;/li>
&lt;li>Deployment, ConfigMap, Secret 適用&lt;/li>
&lt;li>Service 適用&lt;/li>
&lt;li>port-forward でローカルからアクセス&lt;/li>
&lt;li>(作成したリソースをすべて削除)&lt;/li>
&lt;/ol>
&lt;h3 id="セクション7-kubernetesのdebug">セクション7 KubernetesのDebug&lt;/h3>
&lt;p>基本は pod のステータスを確認しながら問題があれば、その箇所を追いかけていって原因を調査する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get pod -A
$ kubectl get pod -A --selector run&lt;span style="color:#f92672">=&lt;/span>nginx
&lt;/code>&lt;/pre>&lt;/div>&lt;p>k8s 上で実行しているアプリケーションの依存先へ接続できない場合は Service の確認が必要となる。kubectl の get, describe, logs などのサブコマンドをあれこれみながらエラーの原因を把握して、yaml の設定を変更していく。k8s のアーキテクチャとコマンドを覚えていないとなかなか難しそう。&lt;/p>
&lt;p>とりあえず動かした後にまとめて全部削除できるのがテストやデバッグに便利そう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl delete -f .
&lt;/code>&lt;/pre>&lt;/div>&lt;p>もしくは開発用に独自の namespace を作成して、あとで丸ごと namespace を削除するのでもよさそう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl delete ns mynamespace
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="k8s-の調査">k8s の調査&lt;/h2>
&lt;p>業務のアプリケーションを minikube で作ったローカル k8s クラスターで動かしてみた。ローカルの開発環境の構築方法をメンテナンスして、自分でも一通り k8s の yaml を書いて、デプロイして、振る舞いを確認したりしていた。最初なのでおもしろい。自分で一通りやってみて、k8s が難しいとみんなが言っているのは k8s クラスターを自前で構築するのが難しいのだとようやく理解できた。k8s クラスターがすでにある状態なら kubectl の使い方を覚えるだけで全く難しくない。GKE や EKS を使って運用するなら k8s の運用コストは大したことがないと理解できた。k8s クラスター向けの yaml はたくさん書かないといけないけど、どうせ ECS や EC2 でやっていても CDK や Terraform などのインフラ設定を書くのは同じなのでそこはあまり差がない。k8s はコンテナオーケストレーションをやってくれるメリットが大きいので minikube と EKS の環境の差異があまり問題にならないようなアプリケーション開発であれば、普通に使っていって問題ないように思えた。ローカルで環境作るのが大変なんじゃないかという先入観があったけど、全然そんなことはなかった。コンテナのイメージをビルドしないといけないのが追加のコストかな。&lt;/p></content></item><item><title>普通の休日の翌日</title><link>/diary/posts/2021/1107/</link><pubDate>Sun, 07 Nov 2021 11:21:21 +0900</pubDate><guid>/diary/posts/2021/1107/</guid><description>5時に寝て10時に起きた。昨日は夕方に2-3時間寝てたのでその分、夜に調べものをしていた。休みたい気持ちもあるけど、調べるものが多過ぎて全然時間が足りない。
bizpy 勉強会の資料作り 昨日 の続き。昨日サンプルコードを実装したので、その設定や要点を 資料 に作成した。現時点で Python で Slack のインテグレーションをやってみる勉強会 #2 の参加者は10人。連続シリーズは回を重ねるごとに減っていくものなのでこんなもんかな。あともう1回やったら終わりにする。
udemy: Kubernetes入門 友だちから udemy の k8s のコースがよいと聞いたんだけど、そのコースはいまは提供されていなくて、せっかくなので適当に検索してヒットした Kubernetes入門 を受講することに決めた。本当は英語の本格的なコースを受講した方がよいのだろうけど、余裕のあるときはそれでいいけど、いま数日で概要を把握して使えるようにしたいので日本語のコースにしてみた。
Udemy の Learning Docker and Kubernetes by Lab がとてもよい Docker, Kubernetes 学習とツールとコンピュータサイエンス 昨日インストールした minikube のクラスターを使って「Kubernetes入門」のセクション1からセクション5までやった。だいたい半分ぐらい。所感としては、全く何も知らない人には要点をかいつまんで教えてくれるのと、最初に覚えるとよい基本的な CLI のコマンドとその振る舞いや設定を紹介してくれるのでよかった。初めて k8s に挑戦する自分にとってはちょうどよいレベル感だった。全体像の概念を捉えてコンテキストに沿って順番にハンズオン形式で学習していくスタイル。nakamasato/kubernetes-basics を使って自分でも CLI でコマンドを打ちながら進めてみた。yaml ファイルを定義するのもこれはこれで面倒だけど、この辺は慣れの問題かな？とも思う。いくつか学んだことを整理しておく。
セクション1 Introduction k8s には2つのコンポーネントがあり、これを k8s クラスターと呼んでいる。
Control Plane (API サーバー) 複数の Worker (Kubelet) yaml で設定する Desired State (理想状態) と呼ばれる設定が登録されると、Control Plane の API サーバーと Worker の kubelet が通信してそれを実現しようとする。pod とは k8s のデプロイの最小単位となる。コンテナ、ポート、レプリカ数などを設定する。pod をそれぞれの Worker にデプロイしたり、Worker がダウンしたときに別の Worker で起動させたりする。</description><content>&lt;p>5時に寝て10時に起きた。昨日は夕方に2-3時間寝てたのでその分、夜に調べものをしていた。休みたい気持ちもあるけど、調べるものが多過ぎて全然時間が足りない。&lt;/p>
&lt;h2 id="bizpy-勉強会の資料作り">bizpy 勉強会の資料作り&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1106/#slack-apps-の調査">昨日&lt;/a> の続き。昨日サンプルコードを実装したので、その設定や要点を &lt;a href="https://github.com/t2y/python-study/tree/master/BizPy/slack/20211027">資料&lt;/a> に作成した。現時点で &lt;a href="https://bizpy.connpass.com/event/229091/">Python で Slack のインテグレーションをやってみる勉強会 #2&lt;/a> の参加者は10人。連続シリーズは回を重ねるごとに減っていくものなのでこんなもんかな。あともう1回やったら終わりにする。&lt;/p>
&lt;h2 id="udemy-kubernetes入門">udemy: Kubernetes入門&lt;/h2>
&lt;p>友だちから udemy の k8s のコースがよいと聞いたんだけど、そのコースはいまは提供されていなくて、せっかくなので適当に検索してヒットした &lt;a href="https://www.udemy.com/course/kubernetes-basics-2021/">Kubernetes入門&lt;/a> を受講することに決めた。本当は英語の本格的なコースを受講した方がよいのだろうけど、余裕のあるときはそれでいいけど、いま数日で概要を把握して使えるようにしたいので日本語のコースにしてみた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.ayakumo.net/entry/2018/01/27/010000">Udemy の Learning Docker and Kubernetes by Lab がとてもよい&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.ayakumo.net/entry/2018/02/15/232918">Docker, Kubernetes 学習とツールとコンピュータサイエンス&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>昨日インストールした minikube のクラスターを使って「Kubernetes入門」のセクション1からセクション5までやった。だいたい半分ぐらい。所感としては、全く何も知らない人には要点をかいつまんで教えてくれるのと、最初に覚えるとよい基本的な CLI のコマンドとその振る舞いや設定を紹介してくれるのでよかった。初めて k8s に挑戦する自分にとってはちょうどよいレベル感だった。全体像の概念を捉えてコンテキストに沿って順番にハンズオン形式で学習していくスタイル。&lt;a href="https://github.com/nakamasato/kubernetes-basics">nakamasato/kubernetes-basics&lt;/a> を使って自分でも CLI でコマンドを打ちながら進めてみた。yaml ファイルを定義するのもこれはこれで面倒だけど、この辺は慣れの問題かな？とも思う。いくつか学んだことを整理しておく。&lt;/p>
&lt;h3 id="セクション1-introduction">セクション1 Introduction&lt;/h3>
&lt;p>k8s には2つのコンポーネントがあり、これを k8s クラスターと呼んでいる。&lt;/p>
&lt;ul>
&lt;li>Control Plane (API サーバー)&lt;/li>
&lt;li>複数の Worker (Kubelet)&lt;/li>
&lt;/ul>
&lt;p>yaml で設定する Desired State (理想状態) と呼ばれる設定が登録されると、Control Plane の API サーバーと Worker の kubelet が通信してそれを実現しようとする。pod とは k8s のデプロイの最小単位となる。コンテナ、ポート、レプリカ数などを設定する。pod をそれぞれの Worker にデプロイしたり、Worker がダウンしたときに別の Worker で起動させたりする。&lt;/p>
&lt;h3 id="セクション2-kubernets-概要">セクション2 Kubernets 概要&lt;/h3>
&lt;p>k8s はコンテナ化したアプリケーションのデプロイ、スケーリング、管理を行うためのオープンソースのコンテナオーケストレーションシステムである。&lt;/p>
&lt;ul>
&lt;li>コンテナ
&lt;ul>
&lt;li>独立した環境でアプリケーションを実行する仕組み&lt;/li>
&lt;li>コンテナの実態はプロセス&lt;/li>
&lt;li>Kernel Namespaces を利用し、プロセスID、ネットワークインターフェース、リソースなどを分離してコンテナ間で干渉しない&lt;/li>
&lt;li>ホストマシンへの依存度を最小化してアプリケーションをどこでも実行可能にする
&lt;ul>
&lt;li>従来のやり方の最大の違いはライブラリがホストマシンにインストールされるのではなく、コンテナの内部にインストールされる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>オーケストレーション
&lt;ul>
&lt;li>デプロイ、スケーリング、管理などの仕組み&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>1つのアプリケーションは複数のマシン上で動かすことで可用性を高めたいが、コンテナを動かすために考えることが増えていくと管理コストも増えていく。コンテナオーケストレーション機能により次のようなシステム管理者が行っていたことが自動化される。&lt;/p>
&lt;ul>
&lt;li>デプロイメント&lt;/li>
&lt;li>スケジューリング&lt;/li>
&lt;li>オートスケーリング
&lt;ul>
&lt;li>負荷に応じてコンテナ数やマシン数を増減させる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ネットワーク&lt;/li>
&lt;li>リソースマネジメント&lt;/li>
&lt;li>セキュリティ
&lt;ul>
&lt;li>ネットワークポリシーやリソースの権限定義&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>k8s クラスターの構造は次になる。&lt;/p>
&lt;ul>
&lt;li>Control Plane
&lt;ul>
&lt;li>api: kubelet と通信するサーバー&lt;/li>
&lt;li>etcd: 設定などを格納するキーバリューストア&lt;/li>
&lt;li>shed: kube スケジューラー&lt;/li>
&lt;li>c-m: コントロールマネージャー&lt;/li>
&lt;li>c-c-m: クラウドプロバイダと api 連携する
&lt;ul>
&lt;li>ローカルで使うときは必要ない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Worker ノードはコンテナランタイムをいインストールしておく必要がある
&lt;ul>
&lt;li>kubelet は Control Plane と通信するためのエージェントとして動作する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>一番需要なこととして、k8s は理想状態と現実状態を比較して、理想状態に近づけようとする。app.yaml の理想状態を kubectl を用いて api サーバーを介して etcd に格納する。現実状態は kubelet から api サーバーを介して etcd に格納される。c-m は理想状態と現実状態のチェックを行い、異なっていれば理想状態に近づけることをしていく。&lt;/p>
&lt;h3 id="セクション4-kubectl">セクション4 kubectl&lt;/h3>
&lt;p>minikube で最初に起動しているのは Control Plane を起動していることが理解できた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ minikube start
$ kubectl config current-context
minikube
&lt;/code>&lt;/pre>&lt;/div>&lt;p>同時に ~/.kube/config に kubectl の設定も追加される。&lt;code>minikube&lt;/code> という名前でクラスター、ユーザー、コンテキストが設定される。&lt;/p>
&lt;p>リソース一覧の確認。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl api-resources
&lt;/code>&lt;/pre>&lt;/div>&lt;p>出力フォーマットも様々。例えば、デフォルトの表示は次になる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get node
NAME STATUS ROLES AGE VERSION
minikube Ready control-plane,master 7m21s v1.22.2
$ kubectl get node -o wide
NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME
minikube Ready control-plane,master 8m38s v1.22.2 192.168.49.2 &amp;lt;none&amp;gt; Ubuntu 20.04.2 LTS 5.11.0-38-generic docker://20.10.8
&lt;/code>&lt;/pre>&lt;/div>&lt;p>より詳細な情報をそれぞれのフォーマットで表示する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get node -o json
$ kubectl get node -o yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>namespace を確認する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get namespace
NAME STATUS AGE
default Active 10m
kube-node-lease Active 10m
kube-public Active 10m
kube-system Active 10m
&lt;/code>&lt;/pre>&lt;/div>&lt;p>namespace を指定して pod 一覧を取得する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get pod --namespace kube-system
NAME READY STATUS RESTARTS AGE
coredns-78fcd69978-qxqbn 1/1 Running &lt;span style="color:#ae81ff">0&lt;/span> 11m
etcd-minikube 1/1 Running &lt;span style="color:#ae81ff">0&lt;/span> 11m
kube-apiserver-minikube 1/1 Running &lt;span style="color:#ae81ff">0&lt;/span> 11m
kube-controller-manager-minikube 1/1 Running &lt;span style="color:#ae81ff">0&lt;/span> 11m
kube-proxy-g55hg 1/1 Running &lt;span style="color:#ae81ff">0&lt;/span> 11m
kube-scheduler-minikube 1/1 Running &lt;span style="color:#ae81ff">0&lt;/span> 11m
storage-provisioner 1/1 Running &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">(&lt;/span>10m ago&lt;span style="color:#f92672">)&lt;/span> 11m
&lt;/code>&lt;/pre>&lt;/div>&lt;p>グローバルな CLI のオプションを確認する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl options
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ノードの詳細を表示する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl describe node
&lt;/code>&lt;/pre>&lt;/div>&lt;p>describe は名前の接頭辞を指定できるので namespace ならこんな感じに実行できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl describe namespace kube-
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="セクション5-kubernetes-リソース">セクション5 Kubernetes リソース&lt;/h3>
&lt;p>pod とは k8s 上のデプロイの最小単位である。&lt;/p>
&lt;ul>
&lt;li>1つまたは複数のコンテナをもつ&lt;/li>
&lt;li>ネットワークやストレージを共有リソースとしてもつ&lt;/li>
&lt;li>コンテナの実行方法に関する仕様をもつ&lt;/li>
&lt;/ul>
&lt;p>pod が使えなくなった場合に他のノードにデプロイされることもある。1つのアプリケーションを複数の pod でデプロイすることが多い。なるべく複数のアプリケーションを1つの pod に入れない。個別の pod を直接操作しない。&lt;/p>
&lt;p>共有コンテキスト&lt;/p>
&lt;ul>
&lt;li>同一 pod 内のコンテナは同じストレージにアクセスできる&lt;/li>
&lt;li>同一 pod 内のコンテナは ip アドレスとポートを含むネットワーク名前空間を共有する&lt;/li>
&lt;/ul>
&lt;p>k8s オブジェクト&lt;/p>
&lt;ul>
&lt;li>クラスタの状態を表現する&lt;/li>
&lt;li>2つのフィールドをもつ
&lt;ul>
&lt;li>spec: 理想状態 (desired status)&lt;/li>
&lt;li>status: 現実状態 (current status)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>pod の作成は k8s オブジェクトを作成している。オブジェクト作成時の必須フィールドが4つある。&lt;/p>
&lt;ul>
&lt;li>apiVersion&lt;/li>
&lt;li>kind&lt;/li>
&lt;li>metadata&lt;/li>
&lt;li>spec&lt;/li>
&lt;/ul>
&lt;p>namespace は同一クラスター上で複数の仮想クラスターの動作をサポートする。&lt;/p>
&lt;ul>
&lt;li>仮想クラスターとは、物理的には同じマシンで動いているかもしれないが、仮想的に環境を分離している
&lt;ul>
&lt;li>1つのクラスターを論理的にわける&lt;/li>
&lt;li>チームや部署ごとにわけて使い分けたりすることも多い&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>namespace を使うメリットは次になる。&lt;/p>
&lt;ul>
&lt;li>pod やコンテナのリソースの範囲設定&lt;/li>
&lt;li>namespace 全体の総リソース制限&lt;/li>
&lt;li>権限管理&lt;/li>
&lt;/ul>
&lt;p>初期の namespace として4つあるが、初心者は最初の2つだけをまず覚えておく。&lt;/p>
&lt;ul>
&lt;li>default:&lt;/li>
&lt;li>kube-system:&lt;/li>
&lt;li>kube-public:&lt;/li>
&lt;li>kube-node-lease&lt;/li>
&lt;/ul>
&lt;p>namespace と cluster の違い。&lt;/p>
&lt;ul>
&lt;li>Namespace-scoped リソース
&lt;ul>
&lt;li>namespace に属しているリソース&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cluster-scoped リソース
&lt;ul>
&lt;li>クラスター全体で使われるもの&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>次のコマンドで確認できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl api-resources --namespaced&lt;span style="color:#f92672">=&lt;/span>true
&lt;/code>&lt;/pre>&lt;/div>&lt;p>namespace の作成&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl create namespace my-namespace
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ワークロードリソースとは複数の pod を作成・管理するためのリソース。ワークロードリソースは pod テンプレートを使って pod を作成する。&lt;/p>
&lt;ul>
&lt;li>ReplicaSet
&lt;ul>
&lt;li>常に指定したレプリカ数の pod を保つ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Deployment
&lt;ul>
&lt;li>ローリングアップデートやロールバックなどのアップデート機能を提供&lt;/li>
&lt;li>ReplicaSet のロールアウト&lt;/li>
&lt;li>不安定な場合の前のバージョンへロールバック&lt;/li>
&lt;li>使用頻度が高い
&lt;ul>
&lt;li>ほとんどのアプリケーションは Deployment で管理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Secret
&lt;ul>
&lt;li>機密情報を保存・管理し、Pod から参照可能&lt;/li>
&lt;li>主な使用方法としてコンテナの環境変数の設定
&lt;ul>
&lt;li>アプリケーションの DB のパスワードなどに使う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Service
&lt;ul>
&lt;li>pod の集合を抽象化して公開する
&lt;ul>
&lt;li>pod の集合に対する DNS 名&lt;/li>
&lt;li>pod の集合に対する負荷分散&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content></item><item><title>普通の休日</title><link>/diary/posts/2021/1106/</link><pubDate>Sat, 06 Nov 2021 12:52:56 +0900</pubDate><guid>/diary/posts/2021/1106/</guid><description>0時に寝て5時半に起きたが、休日だからゆっくりするかと思って二度寝して8時に起きた。知人のタイムラインで紹介されていていい言葉だなと思ったので書いておく。日記があるとこういう流れていくちょっとしたことを書く場所にもなるな。コミュニティ活動の本質はこれなんじゃないかという気もする。
自分にまったく利益をもたらさない人間を、どう扱うかでその人がどんな人間かがはっきりわかる
サミュエル・ジョンソン
ストレッチ 今週もジョギングの代わりにウォーキングをしてた。ジョギングやると筋肉痛や疲労から他の日を休みがちになるけど、ウォーキングならジョギングよりは継続しやすい。今週は4-5日ほど歩いた。ただストレッチはさぼってて2日しかできなかった。ウォーキングのせいかわからないけど、右足太もも後ろの筋が張るようになった。ストレッチを始めてから日々の運動や生活の変化と関節や筋肉の張りが変化するのも意識するようにもなってきた。今日の開脚幅は開始前167.5cmで、ストレッチ後168cmだった。前週よりは数値がよくなっているのでこんなもんかもしれない。
神戸のコワーキングスペースの半歩先の未来を考える たまたまタイムラインでみかけたので 神戸のコワーキングスペースの半歩先の未来を考える を視聴していた。私はシェアオフィスとコワーキングスペースが併設された場所で働いているのでテーマには関心がある。途中からだけど、13時半から15時までみていた。
第一部はコワーキングスペースの運営者が登壇して、どちらかというそれぞれの運営者がやっていることの、宣伝的な要素が強かったように思う。ある運営者が起業家を育てるのは大学生からでは遅くて、保育園から起業家教育をしているという話題があった。そこで何を教えているかというと、子どもの頃から徹底的に自己肯定感を高めるための教育をしているらしい。たまたま 自己肯定感が高い人の4大特徴が明らかに！ の記事をみたら、自己肯定感が高い人は他人も肯定するという内容がある。たしかに日本/日本人の同調圧力は異質なものを拒む傾向があると考えると、自己肯定感の高低がそういった文化の背景にも現れているのかもしれないと思えた。
第二部はコワーキングスペースの利用者として、二地域居住シェアハウスプロジェクトの研究/実践をしている佐藤さんと、メディアアートをされている 浅井宣通 さんが登壇していた。佐藤さんが冒頭でコワーキングスペースにはびっくりするほどすごい人がいるみたいな話しをした後で、浅井さんが登場するといった流れが偶然できてて、ほんとだ、これはすごいとなったw 浅井さんはメディアアートを言葉で説明しても伝わりにくいので動画でみてもらうようにしていると話されていた。私もみてこれはすごい人だとすぐに理解できた。私が興味をもつ作品だと 攻殻機動隊 新劇場版Virtual Reality Diver の Creative Director も務められたらしい。企業やイベントの PR のための映像で浅井さんが手伝っている作品はいくつもあるそうだ。
浅井さんは東京を脱出したいという想いがずっとあって、コロナでリモートワークが普通になり、奥さんの実家の須磨に引っ越してきたらしい。ただ自身は神戸にはほとんど知り合いがいない状態でコワーキングスペースを利用しているうちに、人を紹介してもらって人脈を形成することができたという。東京は大半が地方から出てきた人たちの集まりなので必然として孤立しており、競争関係になってしまうという。神戸の人たちは地元で育ってそのつながりが強いという違いを感じているらしい。地元の人なので協力の関係を築きやすい。コワーキングスペースがその触媒になっていると話されていた。人がつながるには、場所や触媒が必要でコミュニティマネージャーもそういった役割を担っていて大事だという。
多様性は大事だが、多様性だけでも人のつながりができない。同じ分野だとライバル関係になってしまったりする。そこで対話の深さが重要だと話されていた。同じ分野であってもお互いが対話を通して理解を深めると、共通項があったり、細かい得意分野が違ったりもする。デザイナー同士がかぶってしまうと、よく競争の関係になってしまうし、全然違う人と話しても話が噛みあわなくて仕事で苦労することもあったという話があった。それで対話の深さが大事ということに気付いたといった話だった。もう1点、おもしろかった話が地元の人は土地への感情として、この場所・土地が好きだという共通項があるので協力の関係を築きやすいのではないかと。東京は多くの人が生まれ育った土地ではないのでそういった感情は抱きにくいが、神戸っ子という言葉があるように神戸の人たちにはそういった土地に根ざした愛着があり、それを媒介につながるのも美しいといったことを話されていた。
第三部はコワーキングスペースを支える人たちとして、カフーツ の伊藤さん、ANCHOR KOBE の立ち上げ に関わった神戸市のイノベーション専門官の松山さん、fixU というサービスを提供している山岡さんが登壇していた。
私がもっとも興味深かったのは伊藤さんの話しだったのでそれをまとめておく。コワーキングスペースはただ作業する場所ではなく、課題を解決したい人がいて、それを手伝いたいという人がつながることで価値が生まれるという。長い間、コワーキングスペースに関わってきたことから経験が積み重なってわかってきたことがあると話されていた。「コミュニティはどうやって作るんですか？」という質問に答えるのは難しいものの、その取っ掛かりとして、まず課題をみえる化するのが大事だという話しをされていた。イベントなどで課題を表明して、多くの人たちに知ってもらうことで、その課題の解決に興味をもつ人たちが集まってきて、それが協調となり、コミュニティへとつながっていくという。Facebook 社が Meta 社に社名変更して、Microsoft もそれに追従し、メタバースの話題が盛り上がっている。ビッグワードに流されるつもりはないが、コロナによりオンラインでできることの幅が広いことを、仕事はオンラインでよいと多くの人たちは気付いた。じゃあ人と人との関わりがどんな価値をもつのか、コロナが落ち着いてくる時期 (この先1-2年) でそういう方法論も新たに出てくるんじゃないかとも話されていた。
Slack apps の調査 次回の bizpy 勉強会向けに 新機能、アプリのホーム・ヴューを活用しよう🏡 を読んで実際に bolt-python やってみた。UI の設定は JSON で記述できるようになっていて、Block Kit Builder でぽちぽちやるとどんな JSON を書けばよいかのサンプルのペイロードを確認できる。これらの UI に対して操作すると、プログラミングの用語で言えば、すべてイベントが発生してリクエストが届くような仕組みになっている。bolt のコード上ではそれぞれ event と action と view という名前が付いたイベントを扱うことで任意のモーダル画面を表示したり、そのフォームのユーザー入力を取得したりできる。一通りサンプルコードはできた。あとは簡単に資料をまとめるだけ。</description><content>&lt;p>0時に寝て5時半に起きたが、休日だからゆっくりするかと思って二度寝して8時に起きた。知人のタイムラインで紹介されていていい言葉だなと思ったので書いておく。日記があるとこういう流れていくちょっとしたことを書く場所にもなるな。コミュニティ活動の本質はこれなんじゃないかという気もする。&lt;/p>
&lt;blockquote>
&lt;p>自分にまったく利益をもたらさない人間を、どう扱うかでその人がどんな人間かがはっきりわかる&lt;/p>
&lt;p>&lt;a href="https://ja.wikipedia.org/wiki/%E3%82%B5%E3%83%9F%E3%83%A5%E3%82%A8%E3%83%AB%E3%83%BB%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%BD%E3%83%B3">サミュエル・ジョンソン&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週もジョギングの代わりにウォーキングをしてた。ジョギングやると筋肉痛や疲労から他の日を休みがちになるけど、ウォーキングならジョギングよりは継続しやすい。今週は4-5日ほど歩いた。ただストレッチはさぼってて2日しかできなかった。ウォーキングのせいかわからないけど、右足太もも後ろの筋が張るようになった。ストレッチを始めてから日々の運動や生活の変化と関節や筋肉の張りが変化するのも意識するようにもなってきた。今日の開脚幅は開始前167.5cmで、ストレッチ後168cmだった。前週よりは数値がよくなっているのでこんなもんかもしれない。&lt;/p>
&lt;h2 id="神戸のコワーキングスペースの半歩先の未来を考える">神戸のコワーキングスペースの半歩先の未来を考える&lt;/h2>
&lt;p>たまたまタイムラインでみかけたので &lt;a href="https://2021.078kobe.jp/events/16089/">神戸のコワーキングスペースの半歩先の未来を考える&lt;/a> を視聴していた。私はシェアオフィスとコワーキングスペースが併設された場所で働いているのでテーマには関心がある。途中からだけど、13時半から15時までみていた。&lt;/p>
&lt;p>第一部はコワーキングスペースの運営者が登壇して、どちらかというそれぞれの運営者がやっていることの、宣伝的な要素が強かったように思う。ある運営者が起業家を育てるのは大学生からでは遅くて、保育園から起業家教育をしているという話題があった。そこで何を教えているかというと、子どもの頃から徹底的に自己肯定感を高めるための教育をしているらしい。たまたま &lt;a href="https://studyhacker.net/self-esteem-high">自己肯定感が高い人の4大特徴が明らかに！&lt;/a> の記事をみたら、自己肯定感が高い人は他人も肯定するという内容がある。たしかに日本/日本人の同調圧力は異質なものを拒む傾向があると考えると、自己肯定感の高低がそういった文化の背景にも現れているのかもしれないと思えた。&lt;/p>
&lt;p>第二部はコワーキングスペースの利用者として、二地域居住シェアハウスプロジェクトの研究/実践をしている佐藤さんと、メディアアートをされている &lt;a href="https://www.nobumichiasai.com/">浅井宣通&lt;/a> さんが登壇していた。佐藤さんが冒頭でコワーキングスペースにはびっくりするほどすごい人がいるみたいな話しをした後で、浅井さんが登場するといった流れが偶然できてて、ほんとだ、これはすごいとなったw 浅井さんはメディアアートを言葉で説明しても伝わりにくいので動画でみてもらうようにしていると話されていた。私もみてこれはすごい人だとすぐに理解できた。私が興味をもつ作品だと &lt;a href="http://www.sign.site/koukaku_vr/">攻殻機動隊 新劇場版Virtual Reality Diver&lt;/a> の Creative Director も務められたらしい。企業やイベントの PR のための映像で浅井さんが手伝っている作品はいくつもあるそうだ。&lt;/p>
&lt;p>浅井さんは東京を脱出したいという想いがずっとあって、コロナでリモートワークが普通になり、奥さんの実家の須磨に引っ越してきたらしい。ただ自身は神戸にはほとんど知り合いがいない状態でコワーキングスペースを利用しているうちに、人を紹介してもらって人脈を形成することができたという。東京は大半が地方から出てきた人たちの集まりなので必然として孤立しており、競争関係になってしまうという。神戸の人たちは地元で育ってそのつながりが強いという違いを感じているらしい。地元の人なので協力の関係を築きやすい。コワーキングスペースがその触媒になっていると話されていた。人がつながるには、場所や触媒が必要でコミュニティマネージャーもそういった役割を担っていて大事だという。&lt;/p>
&lt;p>多様性は大事だが、多様性だけでも人のつながりができない。同じ分野だとライバル関係になってしまったりする。そこで対話の深さが重要だと話されていた。同じ分野であってもお互いが対話を通して理解を深めると、共通項があったり、細かい得意分野が違ったりもする。デザイナー同士がかぶってしまうと、よく競争の関係になってしまうし、全然違う人と話しても話が噛みあわなくて仕事で苦労することもあったという話があった。それで対話の深さが大事ということに気付いたといった話だった。もう1点、おもしろかった話が地元の人は土地への感情として、この場所・土地が好きだという共通項があるので協力の関係を築きやすいのではないかと。東京は多くの人が生まれ育った土地ではないのでそういった感情は抱きにくいが、神戸っ子という言葉があるように神戸の人たちにはそういった土地に根ざした愛着があり、それを媒介につながるのも美しいといったことを話されていた。&lt;/p>
&lt;p>第三部はコワーキングスペースを支える人たちとして、&lt;a href="http://cahootz.jp/">カフーツ&lt;/a> の伊藤さん、&lt;a href="https://jocr.jp/sunday/repo/1656/">ANCHOR KOBE の立ち上げ&lt;/a> に関わった神戸市のイノベーション専門官の松山さん、&lt;a href="https://fixu.jp/">fixU&lt;/a> というサービスを提供している山岡さんが登壇していた。&lt;/p>
&lt;p>私がもっとも興味深かったのは伊藤さんの話しだったのでそれをまとめておく。コワーキングスペースはただ作業する場所ではなく、課題を解決したい人がいて、それを手伝いたいという人がつながることで価値が生まれるという。長い間、コワーキングスペースに関わってきたことから経験が積み重なってわかってきたことがあると話されていた。「コミュニティはどうやって作るんですか？」という質問に答えるのは難しいものの、その取っ掛かりとして、まず課題をみえる化するのが大事だという話しをされていた。イベントなどで課題を表明して、多くの人たちに知ってもらうことで、その課題の解決に興味をもつ人たちが集まってきて、それが協調となり、コミュニティへとつながっていくという。Facebook 社が Meta 社に社名変更して、Microsoft もそれに追従し、メタバースの話題が盛り上がっている。ビッグワードに流されるつもりはないが、コロナによりオンラインでできることの幅が広いことを、仕事はオンラインでよいと多くの人たちは気付いた。じゃあ人と人との関わりがどんな価値をもつのか、コロナが落ち着いてくる時期 (この先1-2年) でそういう方法論も新たに出てくるんじゃないかとも話されていた。&lt;/p>
&lt;h2 id="slack-apps-の調査">Slack apps の調査&lt;/h2>
&lt;p>次回の bizpy 勉強会向けに &lt;a href="https://api.slack.com/lang/ja-jp/app-home-with-modal">新機能、アプリのホーム・ヴューを活用しよう🏡&lt;/a> を読んで実際に &lt;a href="https://github.com/slackapi/bolt-python">bolt-python&lt;/a> やってみた。UI の設定は JSON で記述できるようになっていて、&lt;a href="https://app.slack.com/block-kit-builder/">Block Kit Builder&lt;/a> でぽちぽちやるとどんな JSON を書けばよいかのサンプルのペイロードを確認できる。これらの UI に対して操作すると、プログラミングの用語で言えば、すべてイベントが発生してリクエストが届くような仕組みになっている。bolt のコード上ではそれぞれ &lt;code>event&lt;/code> と &lt;code>action&lt;/code> と &lt;code>view&lt;/code> という名前が付いたイベントを扱うことで任意のモーダル画面を表示したり、そのフォームのユーザー入力を取得したりできる。一通りサンプルコードはできた。あとは簡単に資料をまとめるだけ。&lt;/p></content></item><item><title>調べものだらけ</title><link>/diary/posts/2021/1105/</link><pubDate>Fri, 05 Nov 2021 09:29:52 +0900</pubDate><guid>/diary/posts/2021/1105/</guid><description>1時半に寝て6時に起きた。昨日の夜はウォーキングして (朝活あるから) すぐに寝たんで早く起きた分、朝からストレッチをしてた。今週はバタバタしていてあまりストレッチできてない。
朝活: ミクロ経済学入門の入門 [金朝ツメトギ] 2021-11-05 AM 6 金曜朝6時開催のもくもく会 で第7章の独占と寡占を読んだ。用語を次にまとめる。
プライステイカー: 生産量を増やしたり減らしたりしても価格に影響を与えられない会社 完全市場: すべての会社がプライステイカーである市場 不完全市場: 完全市場ではない市場、プライステイカーではない会社がいる 独占市場: 1つの独占企業だけが存在する市場 クルーノー寡占市場: 同じ財を生産する少数の会社の総生産量から市場の価格が決まる市場 寡占: 少数の企業がいる市場 複占: 企業が2つだけの市場 前に出てきた市場均衡の話から、供給量を下げると価格が上昇する。生産者余剰がが大きくなり、生産者は得をする。実際にあった事例として、2016年に石油輸出機構 (OPEC) が石油の減産に合意して価格が上昇した。2012年に豊作だった歳に値崩れが起きるのをおそれて、全国農業組合連合会は価格を上げるために農家に野菜の廃棄処分を要請した。
独占市場にいる会社は高い価格で高い利潤を得ることはできるが、やがて価格競争を仕掛けてくる新規参入者を招き、長期的な利益を低めてしまう懸念がある。一方で高品質な財を低い利潤で販売していると、新規参入者が現れずに長期的な利益を得られる可能性がある。一概にどちらが正しいとは言えない。こうした状況を端的に描く 展開型ゲーム を考えると、財を高値にするか安値にするかの思考実験ができるう。 ゲームツリー という図でこのゲームを表している。
A は安値を選び、B が参入しないという選択の組み合わせは、「自分がこう選択したら相手はこう選択してくる」とプレイヤーが予想して、そのうえで自分にとって最も利潤が高まる選択をする状況を表している。これを サブゲーム完全均衡 の結果と呼ぶ。また、このような推論のやり方を 逆向き帰納法 (バックワード・インダクション) と呼ぶ。サブゲーム完全均衡の結果は逆向き帰納法により求められる。
RabbitMQ の dead letter exchange の調査 昨日の続き。RabbitMQ には exchange という概念がある。私が過去に使ったメッセージキュー (Kafka, AWS SQS) にはない概念でトピックをグルーピングしたり、メッセージのルーティングを制御する仕組みになる。普通のメッセージキューではデッドレターキューと呼ばれるものが RabbitMQ だと Dead Letter Exchanges になる。ドキュメントの概要はこんな感じ。</description><content>&lt;p>1時半に寝て6時に起きた。昨日の夜はウォーキングして (朝活あるから) すぐに寝たんで早く起きた分、朝からストレッチをしてた。今週はバタバタしていてあまりストレッチできてない。&lt;/p>
&lt;h2 id="朝活-ミクロ経済学入門の入門">朝活: ミクロ経済学入門の入門&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=33vXvmnAHq0">[金朝ツメトギ] 2021-11-05 AM 6 金曜朝6時開催のもくもく会&lt;/a> で第7章の独占と寡占を読んだ。用語を次にまとめる。&lt;/p>
&lt;ul>
&lt;li>プライステイカー: 生産量を増やしたり減らしたりしても価格に影響を与えられない会社&lt;/li>
&lt;li>完全市場: すべての会社がプライステイカーである市場&lt;/li>
&lt;li>不完全市場: 完全市場ではない市場、プライステイカーではない会社がいる&lt;/li>
&lt;li>独占市場: 1つの独占企業だけが存在する市場&lt;/li>
&lt;li>クルーノー寡占市場: 同じ財を生産する少数の会社の総生産量から市場の価格が決まる市場
&lt;ul>
&lt;li>寡占: 少数の企業がいる市場
&lt;ul>
&lt;li>複占: 企業が2つだけの市場&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>前に出てきた市場均衡の話から、供給量を下げると価格が上昇する。生産者余剰がが大きくなり、生産者は得をする。実際にあった事例として、2016年に石油輸出機構 (OPEC) が石油の減産に合意して価格が上昇した。2012年に豊作だった歳に値崩れが起きるのをおそれて、全国農業組合連合会は価格を上げるために農家に野菜の廃棄処分を要請した。&lt;/p>
&lt;p>独占市場にいる会社は高い価格で高い利潤を得ることはできるが、やがて価格競争を仕掛けてくる新規参入者を招き、長期的な利益を低めてしまう懸念がある。一方で高品質な財を低い利潤で販売していると、新規参入者が現れずに長期的な利益を得られる可能性がある。一概にどちらが正しいとは言えない。こうした状況を端的に描く &lt;strong>展開型ゲーム&lt;/strong> を考えると、財を高値にするか安値にするかの思考実験ができるう。 &lt;strong>ゲームツリー&lt;/strong> という図でこのゲームを表している。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1105_game-tree.png"/>
&lt;/figure>
&lt;p>A は安値を選び、B が参入しないという選択の組み合わせは、「自分がこう選択したら相手はこう選択してくる」とプレイヤーが予想して、そのうえで自分にとって最も利潤が高まる選択をする状況を表している。これを &lt;strong>サブゲーム完全均衡&lt;/strong> の結果と呼ぶ。また、このような推論のやり方を &lt;strong>逆向き帰納法 (バックワード・インダクション)&lt;/strong> と呼ぶ。サブゲーム完全均衡の結果は逆向き帰納法により求められる。&lt;/p>
&lt;h2 id="rabbitmq-の-dead-letter-exchange-の調査">RabbitMQ の dead letter exchange の調査&lt;/h2>
&lt;p>昨日の続き。RabbitMQ には exchange という概念がある。私が過去に使ったメッセージキュー (Kafka, AWS SQS) にはない概念でトピックをグルーピングしたり、メッセージのルーティングを制御する仕組みになる。普通のメッセージキューではデッドレターキューと呼ばれるものが RabbitMQ だと &lt;a href="https://www.rabbitmq.com/dlx.html">Dead Letter Exchanges&lt;/a> になる。ドキュメントの概要はこんな感じ。&lt;/p>
&lt;blockquote>
&lt;p>次のイベントが発生したときに &amp;ldquo;デッドレター&amp;rdquo; とみなす。&lt;/p>
&lt;ul>
&lt;li>consumer が basic.reject または requeue=false の basic.nack を ack で返したとき&lt;/li>
&lt;li>メッセージの TTL の期限切れになったとき&lt;/li>
&lt;li>queue の最大長さを超えてメッセージが drop されたとき&lt;/li>
&lt;/ul>
&lt;p>注意事項として queue の有効期限が切れても queue 内のメッセージはデッドレターとならない。&lt;/p>
&lt;h4 id="設定方法">設定方法&lt;/h4>
&lt;p>デッドレター exchange (DLXs) は普通の exchange であり、普通に宣言して通常の種別をセットする。任意の queue に対して2通りの設定方法がある。&lt;/p>
&lt;ul>
&lt;li>クライアント: queue の引数を使って定義する&lt;/li>
&lt;li>サーバー: ポリシーを使って定義する&lt;/li>
&lt;/ul>
&lt;p>詳細は割愛。&lt;/p>
&lt;h4 id="ルーティング">ルーティング&lt;/h4>
&lt;p>デッドレターメッセージのルーティングは、次のどちらかで行われる。&lt;/p>
&lt;ul>
&lt;li>デッドレターの queue に routingKey が設定されていればそれを使う&lt;/li>
&lt;li>デッドレターの queue に routingKey が設定されていなければ、オリジナルのメッセージが publish されたときの routingKey を使う&lt;/li>
&lt;/ul>
&lt;p>例えば、foo という routingKey をもつ exchange にメッセージを publish して、そのメッセージがデッドレターになった場合、foo という routingKey をもつデッドレターの exchange に publish される。もしそのメッセージが x-dead-letter-routing-key を bar にセットした queue に届いた場合は、そのメッセージは bar という routingKey をもつデッドレター exchange に publish される。&lt;/p>
&lt;p>queue に特定の routingKey が設定されていなかった場合、その queue のメッセージは、すべてオリジナルの routingKey でデッドレター化されることに注意してください。これには CC および BCC ヘッダによって追加された routingKey も含む (詳細は割愛) 。&lt;/p>
&lt;p>デッドレターメッセージが循環する可能性がある。例えば、queue がデッドレター用のルーティングキーを指定せずに、デフォルトの exchange にメッセージをデッドレターした場合などに起こる。このとき同じ queue に2回届いたメッセージは no rejections in the entire cycle だった場合にドロップされる。&lt;/p>
&lt;h4 id="安全性">安全性&lt;/h4>
&lt;p>デッドレターメッセージは内部的に publisher confirm を行わずに re-publish される。クラスタ環境の rabbitmq でデッドレターキューを使ったとしても安全性は保証されない。メッセージはデッドレターキューの対象の queue に publish された後でオリジナルの queue からは削除される。このときに対象の queue が受け取れなければメッセージがなくなってしまう可能性がある。&lt;/p>
&lt;h4 id="デッドレターメッセージの副作用">デッドレターメッセージの副作用&lt;/h4>
&lt;p>デッドレターメッセージはヘッダーを変更する。&lt;/p>
&lt;ul>
&lt;li>exchange の名前がデッドレター exchange の名前に置き換わる&lt;/li>
&lt;li>routingKey がデッドレターキューの routingKey に置き換わる可能性がある&lt;/li>
&lt;li>↑ が起きると、CC ヘッダーが削除される&lt;/li>
&lt;li>Sender-selected Distribution ごとに BCC ヘッダーは削除される&lt;/li>
&lt;/ul>
&lt;p>デッドレターの処理では x-death という名前の配列を、それぞれのデッドレタリングされたメッセージのヘッダに追加する。この配列には {queue, reason} のペアで識別される各デッドレタリングイベントのエントリが含まれる。詳細は割愛。&lt;/p>
&lt;/blockquote>
&lt;h2 id="dapr-の調査">dapr の調査&lt;/h2>
&lt;p>&lt;a href="https://docs.dapr.io/">dapr&lt;/a> について調べた。dapr は分散システム (アプリケーション) の複雑さを解決することを目的としている。様々なミドルウェア (分散システム) とのやり取りを http/grpc の api 呼び出し経由にして、その詳細を隠蔽する。ミドルウェアの上位に抽象化レイヤーを設けて統合的なインターフェースを提供したり、それぞれのミドルウェアにおける設定や運用の面倒なことなどを簡略化してくれる。サイドカーパターンを採用しているので言語に依らず、アプリケーションに dapr のコードを書く必要もない。dapr cli をインストールして dapr init すると docker で dapr プロセスが動いて、それだけで dapr にリクエストできるようになる。使い始めの学習コストは低いし、デプロイも簡単だし、意図している目的もわかりやすい。マイクロソフト社がスポンサーしていてプロジェクトの運営も安定してそうだし、おもしろいツールだと思う。&lt;/p>
&lt;h2 id="k8s-の調査">k8s の調査&lt;/h2>
&lt;p>せっかくの機会なのでちゃんと勉強することにした。今日は &lt;a href="https://github.com/kubernetes/minikube">minikube&lt;/a> の &lt;a href="https://minikube.sigs.k8s.io/docs/start/">Get Started!&lt;/a> やっただけ。&lt;/p></content></item><item><title>新しい職場で働き始め</title><link>/diary/posts/2021/1104/</link><pubDate>Thu, 04 Nov 2021 08:14:51 +0900</pubDate><guid>/diary/posts/2021/1104/</guid><description>0時に寝て6時半に起きた。朝活の日以外に6時に起きるのは難しいけど、だいたい6-7時の間には起きているような気がする。とはいえ、休日は8時に起きたりもしてたけど。10月25日 から生活リズムの移行を促してちょっとずつ近づいている気はする。
働き始め 今日から新しい職場で働き始め。3ヶ月ほど自社のお仕事をしていたが、ずっとやっていると会社が倒産するので出稼ぎに行くことに決めた。まずは開発の定例会議に出てみた。最初なんで話していることがなんもわからん。3ヶ月ぐらいは業務のキャッチアップに集中する。intellij idea のコードフォーマッターで開発しているそうなので intellij idea を使うことにした。eclipse をやめて vscode に移行したいとは思っていたが、コードフォーマッターの問題は厄介なので仕方ない。コミュニティエディションを使う。
RabbitMQ のチュートリアル を1から5までやった。チュートリアルのサンプルコードはそのままだけど maven でビルドできるようにして https://github.com/t2y/rabbitmq-sample に置いた。今日のところはチュートリアルに書いてあることの振る舞いなどを確認していた。なんか調査や検証するときにまた使うと思う。</description><content>&lt;p>0時に寝て6時半に起きた。朝活の日以外に6時に起きるのは難しいけど、だいたい6-7時の間には起きているような気がする。とはいえ、休日は8時に起きたりもしてたけど。&lt;a href="/diary/diary/posts/2021/1025/">10月25日&lt;/a> から生活リズムの移行を促してちょっとずつ近づいている気はする。&lt;/p>
&lt;h2 id="働き始め">働き始め&lt;/h2>
&lt;p>今日から新しい職場で働き始め。3ヶ月ほど自社のお仕事をしていたが、ずっとやっていると会社が倒産するので出稼ぎに行くことに決めた。まずは開発の定例会議に出てみた。最初なんで話していることがなんもわからん。3ヶ月ぐらいは業務のキャッチアップに集中する。intellij idea のコードフォーマッターで開発しているそうなので intellij idea を使うことにした。eclipse をやめて vscode に移行したいとは思っていたが、コードフォーマッターの問題は厄介なので仕方ない。コミュニティエディションを使う。&lt;/p>
&lt;p>&lt;a href="https://www.rabbitmq.com/tutorials/tutorial-one-java.html">RabbitMQ のチュートリアル&lt;/a> を1から5までやった。チュートリアルのサンプルコードはそのままだけど maven でビルドできるようにして &lt;a href="https://github.com/t2y/rabbitmq-sample">https://github.com/t2y/rabbitmq-sample&lt;/a> に置いた。今日のところはチュートリアルに書いてあることの振る舞いなどを確認していた。なんか調査や検証するときにまた使うと思う。&lt;/p></content></item><item><title>ASUS ROG Zephyrus G15 GA503QR</title><link>/diary/posts/2021/1103/</link><pubDate>Wed, 03 Nov 2021 09:55:10 +0900</pubDate><guid>/diary/posts/2021/1103/</guid><description>1時に寝て6時に起きた。朝活があると起きれるな。
朝活: ミクロ経済学入門の入門 【三宮.dev オンライン】リモート朝活もくもく会 で第5章の市場均衡と第6章の外部性を読んだ。
まず第5章から。用語を次にまとめる。
完全市場: 誰もがプライステイカー (自分の生産量が価格に影響を与えられない) である市場 社会的余剰: 消費者余剰 (価格より多めに払ってよいと考える金額の和) と生産者余剰 (利潤の和) を足し合わせたもの 従量税: 販売する量に応じて一定の金額を納める税 例) たばこ税、酒税、揮発油税 (ガソリン) これまでの章で学んだ内容から価格は需要曲線Dと供給曲線Sが交差する点p*になる。この価格を 市場均衡価格 と呼ぶ。市場全体のよさを測るモノサシとして 社会的余剰 を使う。市場均衡価格に対して価格を上げたり下げたりしたときにできる社会的余剰の差額を 死荷重 と呼ぶ。次の図の C の面積に相当する。
図から市場均衡価格は社会的余剰を最大化させた価格だとわかる。
生産者や消費者に従量税を課すと市場にどのようなことが起きるかを考察する。納税方法として、生産者が納税する方式 (価格に税を含める) と消費者が納税する方式 (価格と税は別) があるが、どちらも社会的余剰が C の分だけ減少するグラフとなり、社会的損失が発生していると言える。余剰の視点からはどちらの方式も全く同じだが、政府が徴税するしやすさの視点だと、相対的に数の少ない生産者から納税する方が管理しやすい。
狙い撃ち課税のダメな点として酒税を例にあげている。ビールの酒税を逃れるために、メーカーは1990年代に発泡酒、2003年に第3のビールを開発した。2016年時点での350ml (1缶) あたりの酒税は、ビール77円、発泡酒47円、第3のビール28円となった。同年、政府はすべて55円へ統一していく方針を発表した。ビールへの従量税が与えた社会的損失として死荷重だけでなく、発泡酒や第3のビールのような劣化ビールの技術開発のコストがあげられる。特定の品目を狙い撃つ従量税は社会的損失を生みやすいと述べられてる。
次に第6章から。用語を次にまとめる。
負の外部性: ある生産活動が他者へマイナスの影響を与える 例) 公害や花粉症など 正の外部生: ある生産活動が市場取引を経ずにプラスの影響を与える 例) 電鉄会社が駅や路線を開通させるとその地域に経済効果をもたらすなど 限界被害: 企業の生産活動が住民に与える被害の生産量に対する総和の金額 ピグー税: 住民に補償を与える環境税 ネットワーク外部性: SNS など、サービスの価値がユーザー数に大きく既存する性質 調整ゲーム: 何を選ぶかよりも、他人と同じものを選ぶことが重要な状況 ナッシュ均衡: 自分の行動を変えると損になるので誰も行動を変えない状況 企業の生産活動が住民に被害をもたらせていた場合、その被害をピグー税を通じて企業が支払う。これを 外部性の内部化 と呼ぶ。負の外部性は社会問題となるが、対して正の外部性は社会問題とならない。</description><content>&lt;p>1時に寝て6時に起きた。朝活があると起きれるな。&lt;/p>
&lt;h2 id="朝活-ミクロ経済学入門の入門">朝活: ミクロ経済学入門の入門&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/229642/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> で第5章の市場均衡と第6章の外部性を読んだ。&lt;/p>
&lt;p>まず第5章から。用語を次にまとめる。&lt;/p>
&lt;ul>
&lt;li>完全市場: 誰もがプライステイカー (自分の生産量が価格に影響を与えられない) である市場&lt;/li>
&lt;li>社会的余剰: 消費者余剰 (価格より多めに払ってよいと考える金額の和) と生産者余剰 (利潤の和) を足し合わせたもの&lt;/li>
&lt;li>従量税: 販売する量に応じて一定の金額を納める税
&lt;ul>
&lt;li>例) たばこ税、酒税、揮発油税 (ガソリン)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>これまでの章で学んだ内容から価格は需要曲線Dと供給曲線Sが交差する点p*になる。この価格を &lt;strong>市場均衡価格&lt;/strong> と呼ぶ。市場全体のよさを測るモノサシとして &lt;strong>社会的余剰&lt;/strong> を使う。市場均衡価格に対して価格を上げたり下げたりしたときにできる社会的余剰の差額を &lt;strong>死荷重&lt;/strong> と呼ぶ。次の図の C の面積に相当する。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1103_market-equilibrium.png"/>
&lt;/figure>
&lt;p>図から市場均衡価格は社会的余剰を最大化させた価格だとわかる。&lt;/p>
&lt;p>生産者や消費者に従量税を課すと市場にどのようなことが起きるかを考察する。納税方法として、生産者が納税する方式 (価格に税を含める) と消費者が納税する方式 (価格と税は別) があるが、どちらも社会的余剰が C の分だけ減少するグラフとなり、社会的損失が発生していると言える。余剰の視点からはどちらの方式も全く同じだが、政府が徴税するしやすさの視点だと、相対的に数の少ない生産者から納税する方が管理しやすい。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1103_specific-duty.png"/>
&lt;/figure>
&lt;p>狙い撃ち課税のダメな点として酒税を例にあげている。ビールの酒税を逃れるために、メーカーは1990年代に発泡酒、2003年に第3のビールを開発した。2016年時点での350ml (1缶) あたりの酒税は、ビール77円、発泡酒47円、第3のビール28円となった。同年、政府はすべて55円へ統一していく方針を発表した。ビールへの従量税が与えた社会的損失として死荷重だけでなく、発泡酒や第3のビールのような劣化ビールの技術開発のコストがあげられる。特定の品目を狙い撃つ従量税は社会的損失を生みやすいと述べられてる。&lt;/p>
&lt;p>次に第6章から。用語を次にまとめる。&lt;/p>
&lt;ul>
&lt;li>負の外部性: ある生産活動が他者へマイナスの影響を与える
&lt;ul>
&lt;li>例) 公害や花粉症など&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>正の外部生: ある生産活動が市場取引を経ずにプラスの影響を与える
&lt;ul>
&lt;li>例) 電鉄会社が駅や路線を開通させるとその地域に経済効果をもたらすなど&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>限界被害: 企業の生産活動が住民に与える被害の生産量に対する総和の金額&lt;/li>
&lt;li>ピグー税: 住民に補償を与える環境税&lt;/li>
&lt;li>ネットワーク外部性: SNS など、サービスの価値がユーザー数に大きく既存する性質&lt;/li>
&lt;li>調整ゲーム: 何を選ぶかよりも、他人と同じものを選ぶことが重要な状況&lt;/li>
&lt;li>ナッシュ均衡: 自分の行動を変えると損になるので誰も行動を変えない状況&lt;/li>
&lt;/ul>
&lt;p>企業の生産活動が住民に被害をもたらせていた場合、その被害をピグー税を通じて企業が支払う。これを &lt;strong>外部性の内部化&lt;/strong> と呼ぶ。負の外部性は社会問題となるが、対して正の外部性は社会問題とならない。&lt;/p>
&lt;p>調整ゲームにおいて、一方がもう一方よりも好ましい状態を &lt;strong>パレート優位&lt;/strong>、またその逆の状態を &lt;strong>パレート劣位&lt;/strong> と呼ぶ。ネットワーク外部性においては優勝劣敗が必ずしも正しいとは限らない。先行者としてユーザー数を獲得し、ナッシュ均衡の座をつかむことが勝ちにつながる。&lt;/p>
&lt;h2 id="asus-rog-zephyrus-g15-ga503qr">ASUS ROG Zephyrus G15 GA503QR&lt;/h2>
&lt;p>今日届いたのでセットアップだけ終えた。Windows アップデートすると次々に更新が出てくる仕組みは昔と変わってなかった。4回再起動した。&lt;/p>
&lt;p>前々から Windows マシンがほしいと思っていて、次のお仕事が決まったので思い切って購入することにした。買おうかどうしようかを迷っている心の中の動きのコストというか、検討事項としてずっと残り続けるのもあまり生産的ではないなと最近は思うようになっていた。私が Widnows マシンが必要になった背景はこれら。&lt;/p>
&lt;ul>
&lt;li>行政の電子申請・手続きはまだまだ Windows アプリが主流&lt;/li>
&lt;/ul>
&lt;p>最近は Windows アプリ版とは別に、Web 版というブラウザベースのアプリケーションが提供されつつあるが、まだまだ黎明期で一部の機能しか対応してなかったり、不具合で macos だと動きませんと障害情報が出てたり、ひどい場合だとブラウザベースなのに Linux はサポートしてませんとか言われたりする。毎年この申請は Web 版で対応したやろか？と調べて、やっぱりまだできんかったと紙ベースの申請に切り替えるときの、調べるコスト (とがっかりするコスト) がしんどくなった。&lt;/p>
&lt;ul>
&lt;li>VR 系アプリケーションのプラットフォームは Windows&lt;/li>
&lt;/ul>
&lt;p>Facebook 社が Meta 社になって、ややメタバースが盛り上がりをみせつつある。&lt;a href="https://www.oculus.com/quest-2/">Oculus Quest 2&lt;/a> を買ったものの、VR 系アプリケーションは Windows がメインターゲットらしく macos や linux は、現時点ではサポートしていないことが多い。&lt;a href="https://www.oculus.com/accessories/oculus-link/">Oclus Link&lt;/a> も Windows しかサポートしていない。せっかくヘッドマウントディスプレイを購入したので、そのデバイスをもっと活用するためにも Windows マシンがあった方がよいと考えた。&lt;/p>
&lt;ul>
&lt;li>Microsoft Teams を使いたい&lt;/li>
&lt;/ul>
&lt;p>私の周りでも &lt;a href="https://www.microsoft.com/ja-jp/microsoft-teams/group-chat-software">Microsoft Teams&lt;/a> を使うことが増えてきた。ゲストアカウントでも会議できるのでエージェントと打ち合わせするときは Teams を使ったりしていた。社内システムを MS 系のプロダクトで固めている企業は普通に Teams を使っているし、顧問さんから聞く話しでも Teams (と MS 製品とのインテグレーション) の評判はよい。チャットツールを対象としたプロダクトを作っていくにあたり、今後は Slack だけではなく Teams 対応も必須になっていく気がする。実際に私も Slack/Teams 両対応のプロダクトもみかけるようになりつつある。Microsoft Teams を Linux で使えるかどうかは調べてないのでわからないけど、Windows マシンが1台あった方が手っ取り早いと考えた。&lt;/p>
&lt;ul>
&lt;li>オフィスと自宅にパソコンを据え置きたい&lt;/li>
&lt;/ul>
&lt;p>オフィスでは普段デスクトップマシンを使いつつ、macbook をサブマシンとして使っている。自宅で作業するときは macbook を持ち帰ったりしていた。人間はどんどん怠惰になるのでこの持ち運びが面倒になってきたり、持ち帰ってないときにパソコンで作業したくなったりしたときは、オフィスに出かけるといったことをするようになってストレスにもなってた。徒歩でも15分あれば行ける場所にオフィスがあるので、タブレットやスマホでの作業効率を考えたらオフィスに行ってしまう。ラップトップを自宅とオフィスに置いておけるといいなぁとは薄々思っていた。これを機にオフィスには asus マシンを、自宅には macbook を据え置くようにしたい。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>9.4 分散トランザクションと合意の前半の2つの節を読んだ。&lt;/p>
&lt;ul>
&lt;li>9.4.1 アトミックなコミットと2相コミット（2PC）&lt;/li>
&lt;li>9.4.2 分散トランザクションの実際&lt;/li>
&lt;/ul>
&lt;p>分散トランザクションという扱っているテーマが難しいけど、書いてある内容は1つずつ追っていけば理解できるのでそこまで難しくはない。一言で分散トランザクションと言っても次の2つに大別される。&lt;/p>
&lt;ul>
&lt;li>データベース内部の分散トランザクション&lt;/li>
&lt;li>ヘテロジニアスな分散トランザクション&lt;/li>
&lt;/ul>
&lt;p>前者は特定のデータベースシステムだけで動くので相対的に最適化ができたり、うまく運用できるケースもある。後者は複数のシステムを介した汎用の仕組みになるので2相コミットのような プロトコル を使って &lt;strong>アトミックなコミット&lt;/strong> を保証しなければならない。2PC はコーディネータの障害が運用上の大きな問題となることがわかっている。ヘテロジニアスな技術間での2相コミットの標準を &lt;strong>X/Open XA（eXtended Architecture の省略）&lt;/strong> と呼ぶ。多くの RDB やメッセージブローカーでもサポートされているらしい。Java EE アプリケーションの世界だと Java Transaction API （ JTA ）で実装されているらしい。全く聞いたことがなくて、私はいままでこの技術に関わることがなかった。&lt;/p></content></item><item><title>ワイヤレス REALFORCE</title><link>/diary/posts/2021/1102/</link><pubDate>Tue, 02 Nov 2021 09:22:30 +0900</pubDate><guid>/diary/posts/2021/1102/</guid><description>3時に寝て7時に起きた。ウォーキングから帰ってきて0時にベッドに入ったものの、選挙結果の総括記事を読んだり、宇宙よりも遠い場所 をみたりしていたら3時になってしまった。全13話すべてみた。どちらかと言えばおもしろかったけど、ツィートみて期待値が高かった分、そこまで私の中に響くものはなかったかな。南極へ行く道中や南極の生活がわりと遊んでいるようにみえてあまり大変そうにみえなかった。とはいえ、実際の船上や南極でもやることなくて娯楽ないと持て余すのかなとも思えた。南極地域観測隊 って現実にあるんだなとみてた。
僕はだいたいプログラミングしてるときは既に内容を知ってるアニメを常に流してるんですが今週はまた「宇宙よりも遠い場所」を観ていました。これほどまでに13話すべて足すところも引くところもない完璧な作品は他に早々思いつかないです。
&amp;mdash; 父 (@fushiroyama) October 28, 2021 データ指向アプリケーションデザイン 9.3 順序の保証を読んだ。
データベースや分散システムにおいて順序付けは重要な基本的概念である。順序と線形化可能性、合意との間には深い関係がある。順序付けが重要なのは 因果関係 を保つのに役立つことがあげられる。
全順序 があれば任意の2つの数を比較して大小関係を必ず判断できる。たとえば自然数には全順序があると言える。線形化可能なシステムは操作に全順序がある。一方で因果律には並行という概念があり、どちらが先に行われたかが重要ではない場合に操作が並行に行われたとみなせる。したがって、因果律は全順序ではなく、 半順序 を定義すると言える。半順序とは、大小関係を比較できる場合もあるしできない場合もあることを指す。
因果律に基づく順序と線形化可能性との関係は、線形化可能性は因果関係を 暗に含む といえる。線形化可能性を持つシステムは、因果律を正しく保持する。しかし、システムを線形化可能にすればパフォーマンスや可用性が損なわれる可能性がある。特にネットワークの遅延が大きい（たとえば地理的に分散している）システムで問題になる。そのため、分散データシステムの中には線形化可能性をあきらめることでパフォーマンスを向上させたものの、扱いが難しいものもある。因果律を保持する方法は、線形化可能性が唯一というわけではなく他の方法もある。多くの場合、システムに本当に必要なのは線形化可能性ではなく因果律における一貫性だけであり、これは線形化可能性よりも効率の良い実装が可能となる。
因果律における一貫性を保持する方法として次のものがあげられている。
シーケンス番号またはタイムスタンプ ランポートタイムスタンプ（Lamport timestamp） しかし、分散システムではネットワークを介して他のノードの状態を確認しないと因果律の一貫性を確定できない。たとえシングルリーダーアプリケーションであっても、リーダーに障害が発生したときにリーダーのフェイルオーバーが必要となる。この問題は 全順序のブロードキャスト と呼ばれる。ZooKeeper や etcd のような合意サービスが全順序ブロードキャストを実装している。
詳細は省くが、ネットワークを介した分散システムで線形化可能な compare-and-set （あるいは increment-and-get ）を実装しようとすると、必然的に合意アルゴリズムに行き着く。これらと全順序ブロードキャストは等価であることが証明できる。したがって、これらの問題のいずれかを解決できれば、他方の問題の解決策に変換できるという点は重大な知見である。
REALFORCE のワイヤレスモデル ユーザーから待望されていた REALFORCE のワイヤレスモデルがとうとう発売された。
高級キーボードREALFORCEから待望のワイヤレス機「R3」が登場、見どころは？ 先週から amazon で予約販売を受け付けていたので REALFORCE 東プレ R3 キーボード 静音 ハイブリッドモデル 日本語配列 91キー ブラック R3HC12 を予約して、本日届いた。私はとくに必要ないけど、bluetooth のマルチペアリングに対応していて最大4つまで接続できる。オフィスの机はそこそこ広いけれど、本とラップトップとモニター2台置いたらスペースが埋まってしまっている。ご飯を食べるときや書類を作成するときにキーボードを立てかけたりしてスペースを確保していて不便に感じていた。
ubuntu 環境での bluetooth の設定に少し手こずった。GUI の設定マネージャー (blueman) でペアリングしようとしても失敗する。キーボードの情報は取得できるけど、ペアリングは失敗する。試しに macos でペアリングしてみたらパスキーの入力画面が表示されて、6桁の数字を入力して ENTER した後に接続するとペアリングできた。blueman だとパスキーが表示されないなと気付いてググってたら [SOLVED] Bluetooth keyboard: Unable to pair (authentication timeout) を見かけて、bluetoothctl でも設定できそうなのでやってみた。</description><content>&lt;p>3時に寝て7時に起きた。ウォーキングから帰ってきて0時にベッドに入ったものの、選挙結果の総括記事を読んだり、&lt;a href="http://yorimoi.com/story/">宇宙よりも遠い場所&lt;/a> をみたりしていたら3時になってしまった。全13話すべてみた。どちらかと言えばおもしろかったけど、ツィートみて期待値が高かった分、そこまで私の中に響くものはなかったかな。南極へ行く道中や南極の生活がわりと遊んでいるようにみえてあまり大変そうにみえなかった。とはいえ、実際の船上や南極でもやることなくて娯楽ないと持て余すのかなとも思えた。&lt;a href="https://www.nipr.ac.jp/antarctic/">南極地域観測隊&lt;/a> って現実にあるんだなとみてた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">僕はだいたいプログラミングしてるときは既に内容を知ってるアニメを常に流してるんですが今週はまた「宇宙よりも遠い場所」を観ていました。これほどまでに13話すべて足すところも引くところもない完璧な作品は他に早々思いつかないです。&lt;/p>&amp;mdash; 父 (@fushiroyama) &lt;a href="https://twitter.com/fushiroyama/status/1453610090632663048?ref_src=twsrc%5Etfw">October 28, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>9.3 順序の保証を読んだ。&lt;/p>
&lt;blockquote>
&lt;p>データベースや分散システムにおいて順序付けは重要な基本的概念である。順序と線形化可能性、合意との間には深い関係がある。順序付けが重要なのは &lt;strong>因果関係&lt;/strong> を保つのに役立つことがあげられる。&lt;/p>
&lt;p>&lt;strong>全順序&lt;/strong> があれば任意の2つの数を比較して大小関係を必ず判断できる。たとえば自然数には全順序があると言える。線形化可能なシステムは操作に全順序がある。一方で因果律には並行という概念があり、どちらが先に行われたかが重要ではない場合に操作が並行に行われたとみなせる。したがって、因果律は全順序ではなく、 &lt;strong>半順序&lt;/strong> を定義すると言える。半順序とは、大小関係を比較できる場合もあるしできない場合もあることを指す。&lt;/p>
&lt;p>因果律に基づく順序と線形化可能性との関係は、線形化可能性は因果関係を &lt;strong>暗に含む&lt;/strong> といえる。線形化可能性を持つシステムは、因果律を正しく保持する。しかし、システムを線形化可能にすればパフォーマンスや可用性が損なわれる可能性がある。特にネットワークの遅延が大きい（たとえば地理的に分散している）システムで問題になる。そのため、分散データシステムの中には線形化可能性をあきらめることでパフォーマンスを向上させたものの、扱いが難しいものもある。因果律を保持する方法は、線形化可能性が唯一というわけではなく他の方法もある。多くの場合、システムに本当に必要なのは線形化可能性ではなく因果律における一貫性だけであり、これは線形化可能性よりも効率の良い実装が可能となる。&lt;/p>
&lt;p>因果律における一貫性を保持する方法として次のものがあげられている。&lt;/p>
&lt;ul>
&lt;li>シーケンス番号またはタイムスタンプ&lt;/li>
&lt;li>ランポートタイムスタンプ（Lamport timestamp）&lt;/li>
&lt;/ul>
&lt;p>しかし、分散システムではネットワークを介して他のノードの状態を確認しないと因果律の一貫性を確定できない。たとえシングルリーダーアプリケーションであっても、リーダーに障害が発生したときにリーダーのフェイルオーバーが必要となる。この問題は &lt;strong>全順序のブロードキャスト&lt;/strong> と呼ばれる。ZooKeeper や etcd のような合意サービスが全順序ブロードキャストを実装している。&lt;/p>
&lt;p>詳細は省くが、ネットワークを介した分散システムで線形化可能な compare-and-set （あるいは increment-and-get ）を実装しようとすると、必然的に合意アルゴリズムに行き着く。これらと全順序ブロードキャストは等価であることが証明できる。したがって、これらの問題のいずれかを解決できれば、他方の問題の解決策に変換できるという点は重大な知見である。&lt;/p>
&lt;/blockquote>
&lt;h2 id="realforce-のワイヤレスモデル">REALFORCE のワイヤレスモデル&lt;/h2>
&lt;p>ユーザーから待望されていた REALFORCE のワイヤレスモデルがとうとう発売された。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://weekly.ascii.jp/elem/000/004/073/4073042/">高級キーボードREALFORCEから待望のワイヤレス機「R3」が登場、見どころは？&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>先週から amazon で予約販売を受け付けていたので &lt;a href="https://amzn.to/3EJivAF">REALFORCE 東プレ R3 キーボード 静音 ハイブリッドモデル 日本語配列 91キー ブラック R3HC12&lt;/a> を予約して、本日届いた。私はとくに必要ないけど、bluetooth のマルチペアリングに対応していて最大4つまで接続できる。オフィスの机はそこそこ広いけれど、本とラップトップとモニター2台置いたらスペースが埋まってしまっている。ご飯を食べるときや書類を作成するときにキーボードを立てかけたりしてスペースを確保していて不便に感じていた。&lt;/p>
&lt;p>ubuntu 環境での bluetooth の設定に少し手こずった。GUI の設定マネージャー (blueman) でペアリングしようとしても失敗する。キーボードの情報は取得できるけど、ペアリングは失敗する。試しに macos でペアリングしてみたらパスキーの入力画面が表示されて、6桁の数字を入力して ENTER した後に接続するとペアリングできた。blueman だとパスキーが表示されないなと気付いてググってたら &lt;a href="https://bbs.archlinux.org/viewtopic.php?id=174239">[SOLVED] Bluetooth keyboard: Unable to pair (authentication timeout)&lt;/a> を見かけて、bluetoothctl でも設定できそうなのでやってみた。&lt;/p>
&lt;pre tabindex="0">&lt;code>キーボードの情報を表示
[REALFORCE_3]# info F6:9D:A5:80:B7:1F
Device F6:9D:A5:80:B7:1F (random)
Name: REALFORCE_3
Alias: REALFORCE_3
Appearance: 0x03c1
Icon: input-keyboard
Paired: no
Trusted: yes
Blocked: no
Connected: yes
LegacyPairing: no
UUID: Generic Access Profile (00001800-0000-1000-8000-00805f9b34fb)
UUID: Generic Attribute Profile (00001801-0000-1000-8000-00805f9b34fb)
UUID: Device Information (0000180a-0000-1000-8000-00805f9b34fb)
UUID: Battery Service (0000180f-0000-1000-8000-00805f9b34fb)
UUID: Human Interface Device (00001812-0000-1000-8000-00805f9b34fb)
RSSI: -45
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>ペアリングを実行
* エージェントからパスキーが表示されて、キーボードで入力して ENTER したらペアリングに成功した
[bluetooth]# pair F6:9D:A5:80:B7:1F
Attempting to pair with F6:9D:A5:80:B7:1F
[CHG] Device F6:9D:A5:80:B7:1F Connected: yes
[agent] Passkey: 323759
[CHG] Device F6:9D:A5:80:B7:1F Paired: yes
Pairing successful
[CHG] Device F6:9D:A5:80:B7:1F Modalias: usb:v08ACp0302d0001
[CHG] Device F6:9D:A5:80:B7:1F ServicesResolved: yes
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>キーボードを信頼する
[REALFORCE_3]# trust F6:9D:A5:80:B7:1F
Changing F6:9D:A5:80:B7:1F trust succeeded
&lt;/code>&lt;/pre>&lt;h2 id="契約書の確認">契約書の確認&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1026/#選考面談">先日&lt;/a> の業務委託案件の契約書が届いたので内容を確認した。&lt;/p>
&lt;p>これまで &lt;a href="https://www.cloudsign.jp/">クラウドサイン&lt;/a> でしか契約したことがなくて、紙の契約書で契約を締結するのは初めての挑戦でもある。&lt;a href="https://www.post.japanpost.jp/service/letterpack/">レターパック&lt;/a> を使って郵送するのがお作法？といったところから調べてた。明後日から働き始める。フルリモートなので物理的な職場は変わらないけど、新しい職場は緊張するな。うまく入っていけるやろか。フルリモートの経験もだいぶたまってきたし、体調も万全だし、憂うことは何もないはず。いまの状況は純粋に私ががんばるだけだ。&lt;/p></content></item><item><title>資料作り完了</title><link>/diary/posts/2021/1101/</link><pubDate>Mon, 01 Nov 2021 11:38:17 +0900</pubDate><guid>/diary/posts/2021/1101/</guid><description>4時に寝て8時に起きた。夜に資料作りに集中していたので家に帰ってきたのが3時頃で、くつろいだりアニメみたりしてから寝た。遅くに帰ってきてもすぐに寝るわけじゃなくて、だらだらして実際に寝るまで1-2時間はかかる。こういうところ、生活が堕落していて改善していくべきなのかもしれない。良かったこととして、ウォーキングのせいか、夜はよく眠れた。
みんなの Python 勉強会の資料作り 昨日の続き。一晩寝てから最後の仕上げをした。時間を置く、とくに一度寝てから資料を洗練させると改善点があちこち出てきてより良いものになっていく気がする。午前中に主催者に連絡したものの、午後になってから思い付いたことをちょくちょく修正したりもした。オンラインの資料だと、先方に連絡した後でも微修正できるところがよい。業務の資料だとさらに2-3日かけて洗練させていくけど、勉強会の資料だからこれでいいかな。タイトルはすごく気に入っているというわけではないけど「本と学びの段階」とした。ひとまず完成したので自分のやりたいことに取り組める。
神戸市長選 神戸市は衆議院選挙とは別に市長選挙も一緒にあった。神戸市長選 によると、投票率は53.79％で439,749 (67.7%)の得票を得た現職の市長が完勝した。3回目の当選になるらしい。私が神戸に戻ってきてから初めての市長選挙だった。起業してから手続きなどで行政が身近になったことから関心をもつようになってきた。自分ごとで考えるというのか、どんなものでも身近なことは関心をもつのかもしれない。
データ指向アプリケーションデザイン 9.2 線形化可能性を読んだ。
線形化可能性 とは、データのコピーが1つしかなく、そのデータに対する操作がすべてアトミックであるかのようにシステムにみせることを指す。古くなったキャッシュやレプリカからの値ではないことを保証する、最新性の保証（recency guarantee） と言える。トランザクションの章に出てきた 直列化可能性 とはまったく異なる。直列化可能性が保証するのは、複数のトランザクションが何らかの順序で実行された場合に同じ結果になることを保証するもの。
あと「役に立たない CAP 定理」というコラムもおもしろい。CAP 定理とは次の3つはすべて成り立たず、2つを選択することを強いる。
一貫性（Consistency） 可用性（Availability） 分断耐性（Partition tolerance） CAP 定理は歴史的にデータベースのトランザクションのトレードオフについての議論の出発点として引用され、有名な定理ではあるが、分散データベースの研究者の中では1970年代から知られていたことであったらしい。そして、ネットワークを介した分散システムは、分断耐性が必須 (ネットワークが切断しないことはないから) であることから一貫性か可用性のどちらかを選択するしかない。ここで一貫性とは線形化可能なシステムを実装することだが、これはパフォーマンスのデメリットが大きい。そのため、現代の多くの分散データベースは線形化可能性を提供しないことを選択しており、結果として可用性と分断耐性を選択することになっている。したがって、CAP 定理から議論を始めることは無意味であると言う。</description><content>&lt;p>4時に寝て8時に起きた。夜に資料作りに集中していたので家に帰ってきたのが3時頃で、くつろいだりアニメみたりしてから寝た。遅くに帰ってきてもすぐに寝るわけじゃなくて、だらだらして実際に寝るまで1-2時間はかかる。こういうところ、生活が堕落していて改善していくべきなのかもしれない。良かったこととして、ウォーキングのせいか、夜はよく眠れた。&lt;/p>
&lt;h2 id="みんなの-python-勉強会の資料作り">みんなの Python 勉強会の資料作り&lt;/h2>
&lt;p>昨日の続き。一晩寝てから最後の仕上げをした。時間を置く、とくに一度寝てから資料を洗練させると改善点があちこち出てきてより良いものになっていく気がする。午前中に主催者に連絡したものの、午後になってから思い付いたことをちょくちょく修正したりもした。オンラインの資料だと、先方に連絡した後でも微修正できるところがよい。業務の資料だとさらに2-3日かけて洗練させていくけど、勉強会の資料だからこれでいいかな。タイトルはすごく気に入っているというわけではないけど「本と学びの段階」とした。ひとまず完成したので自分のやりたいことに取り組める。&lt;/p>
&lt;h2 id="神戸市長選">神戸市長選&lt;/h2>
&lt;p>神戸市は衆議院選挙とは別に市長選挙も一緒にあった。&lt;a href="https://www.nhk.or.jp/senkyo2/kobe/17581/skh50331.html">神戸市長選&lt;/a> によると、投票率は53.79％で439,749 (67.7%)の得票を得た現職の市長が完勝した。3回目の当選になるらしい。私が神戸に戻ってきてから初めての市長選挙だった。起業してから手続きなどで行政が身近になったことから関心をもつようになってきた。自分ごとで考えるというのか、どんなものでも身近なことは関心をもつのかもしれない。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>9.2 線形化可能性を読んだ。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>線形化可能性&lt;/strong> とは、データのコピーが1つしかなく、そのデータに対する操作がすべてアトミックであるかのようにシステムにみせることを指す。古くなったキャッシュやレプリカからの値ではないことを保証する、&lt;strong>最新性の保証（recency guarantee）&lt;/strong> と言える。トランザクションの章に出てきた &lt;strong>直列化可能性&lt;/strong> とはまったく異なる。直列化可能性が保証するのは、複数のトランザクションが何らかの順序で実行された場合に同じ結果になることを保証するもの。&lt;/p>
&lt;p>あと「役に立たない CAP 定理」というコラムもおもしろい。CAP 定理とは次の3つはすべて成り立たず、2つを選択することを強いる。&lt;/p>
&lt;ul>
&lt;li>一貫性（Consistency）&lt;/li>
&lt;li>可用性（Availability）&lt;/li>
&lt;li>分断耐性（Partition tolerance）&lt;/li>
&lt;/ul>
&lt;p>CAP 定理は歴史的にデータベースのトランザクションのトレードオフについての議論の出発点として引用され、有名な定理ではあるが、分散データベースの研究者の中では1970年代から知られていたことであったらしい。そして、ネットワークを介した分散システムは、分断耐性が必須 (ネットワークが切断しないことはないから) であることから一貫性か可用性のどちらかを選択するしかない。ここで一貫性とは線形化可能なシステムを実装することだが、これはパフォーマンスのデメリットが大きい。そのため、現代の多くの分散データベースは線形化可能性を提供しないことを選択しており、結果として可用性と分断耐性を選択することになっている。したがって、CAP 定理から議論を始めることは無意味であると言う。&lt;/p>
&lt;/blockquote></content></item><item><title>ほぼ一日資料作り</title><link>/diary/posts/2021/1031/</link><pubDate>Sun, 31 Oct 2021 13:40:30 +0900</pubDate><guid>/diary/posts/2021/1031/</guid><description>昨日はいつ寝たんだろう？たぶん0時ぐらいに寝て7時に起きたものの二度寝して9時に起きて、それでも眠くてそのままお昼前まで寝てた。今週はなるべく6時に起きる生活リズムの移行をやっていたのでそろそろ疲れたのかもしれない。お昼から起き上がって活動を開始した。昨日に期日前投票を済ませておいたから今日はゆっくり過ごせた。本当は夜に選挙の総括をみたかった気持ちもあったけど、また明日でもいいか。
みんなの Python 勉強会の資料作り 昨日の続き。午後からオフィスで資料を作り始めた。夕方に晩ご飯食べに帰ってくつろいでからまた夜にウォーキングの途中でオフィスに戻ってきて資料を作っていた。気付いたら3時間ほどやってて9割ほどできた。本と読者と学びの段階みたいな、何が言いたいのか自分でもまだ明確ではない、学びの視点を考慮したプログラミングの話しを組み立ててみた。まだふわふわしているのでもう少し洗練させて詰めようと思う。資料の中に3つの話題があるのでなんかうまくまとまっていないような気がしている。タイトルも決まらない。</description><content>&lt;p>昨日はいつ寝たんだろう？たぶん0時ぐらいに寝て7時に起きたものの二度寝して9時に起きて、それでも眠くてそのままお昼前まで寝てた。今週はなるべく6時に起きる生活リズムの移行をやっていたのでそろそろ疲れたのかもしれない。お昼から起き上がって活動を開始した。昨日に期日前投票を済ませておいたから今日はゆっくり過ごせた。本当は夜に選挙の総括をみたかった気持ちもあったけど、また明日でもいいか。&lt;/p>
&lt;h2 id="みんなの-python-勉強会の資料作り">みんなの Python 勉強会の資料作り&lt;/h2>
&lt;p>昨日の続き。午後からオフィスで資料を作り始めた。夕方に晩ご飯食べに帰ってくつろいでからまた夜にウォーキングの途中でオフィスに戻ってきて資料を作っていた。気付いたら3時間ほどやってて9割ほどできた。本と読者と学びの段階みたいな、何が言いたいのか自分でもまだ明確ではない、学びの視点を考慮したプログラミングの話しを組み立ててみた。まだふわふわしているのでもう少し洗練させて詰めようと思う。資料の中に3つの話題があるのでなんかうまくまとまっていないような気がしている。タイトルも決まらない。&lt;/p></content></item><item><title>勉強会のコンテンツ思案</title><link>/diary/posts/2021/1030/</link><pubDate>Sat, 30 Oct 2021 10:15:17 +0900</pubDate><guid>/diary/posts/2021/1030/</guid><description>0時からウォーキングに出て1時に帰ってきて軽くストレッチして 宇宙よりも遠い場所 を3話までみた。たまたまタイムラインでツィートをみかけて気になってみたら確かにおもしろい。3時ぐらいから寝て6時半に一度起きたものの、2度寝して8時ぐらいまで寝てた。夕方に期日前投票やって、初めて出口調査に声を掛けられたのでそれもやってみた。
僕はだいたいプログラミングしてるときは既に内容を知ってるアニメを常に流してるんですが今週はまた「宇宙よりも遠い場所」を観ていました。これほどまでに13話すべて足すところも引くところもない完璧な作品は他に早々思いつかないです。
&amp;mdash; 父 (@fushiroyama) October 28, 2021 消防設備点検 点検があるとのことだったので軽く部屋を掃除した。朝ゴミ捨てに行ったらたまたま管理人さんがいて、点検の時間帯でもしいなかったら勝手に部屋に入ってやってもらってよいですと連絡してたら、点検員さんに掛け合ってくれてすぐに設備点検してもらえた。部屋とキッチンにある火災探知機がちゃんと作動するかどうかをテストしてた。2分ぐらいで完了した。おかげで今日の家を出る予定を前倒しできた。感謝。
ストレッチ 今週はジョギングしてない代わりにウォーキングをして筋肉痛を軽減しつつ臨んだ。平日のストレッチも3回ぐらいやっているので現状維持ぐらいかな？と思ったけど、開始前166cmで、ストレッチ後167cmで前回よりも数値は悪くなってた。物理的な体調はよいつもりだったけど、数値が悪化したのでなにか不足があるのか、平日のストレッチの時間が足りないのかもしれない。もしくは、ストレッチを受けていると、まだ右股関節の違和感とお尻の筋肉の張りは根強い。今週は5日ぐらいウォーキングしているのでその疲労もあるのかもしれない。トレーナーさんに夜にウォーキングするとよく眠れるという話しをしたら、ジョギングよりもウォーキングの方がリラックスできて、ジョギングや筋トレ (激しい運動) は交感神経を刺激して睡眠にはよくないといった話だった。ググったら ジョギングよりもウォーキングがお勧め という記事も出てきた。
みんなの Python 勉強会の資料作り 昨日の続き。発表の内容の構成を考えながら、過去に書いた本や資料、サンプルコードなどを見返していた。コンテンツはだいたい頭の中で固まってきた。あとは構成を練りながら実際にスライドとして仕上げていくだけ。いつもそうなんだけど、スライドの作り始めが一番難しい。何から書くか、どこから作り始めるのかに最も時間を割く。もう少し悩みながら考えておく。
サバクトビバッタの研究 たまたまタイムラインでみかけて 『バッタを倒しにアフリカへ』行き、必殺技を見つけてきました を読んでみたらすごくおもしろかった。国連にはバッタ予報官という専門職？があるのを記事などでみかけていた。日本だとイナゴになるんだろうけど、世界的にはバッタなんよね。そんなバッタの研究に、全然関係ない日本の若手研究者が、過去40年間誰もアフリカで腰を据えて研究しておらず、バッタ研究の歴史が止まったままであることに気付いて、何年もかけてシンプルな観察をメインにしたフィールドワークで成果をあげたという、ミドルエイジクライシスな自分にとっては痛快で元気がでる記事だった。著者のノリもおもしろいので、おそらく陽気な人なんだろうと思う。応援する意図でも バッタを倒しにアフリカへ を購入した。</description><content>&lt;p>0時からウォーキングに出て1時に帰ってきて軽くストレッチして &lt;a href="http://yorimoi.com/story/">宇宙よりも遠い場所&lt;/a> を3話までみた。たまたまタイムラインでツィートをみかけて気になってみたら確かにおもしろい。3時ぐらいから寝て6時半に一度起きたものの、2度寝して8時ぐらいまで寝てた。夕方に期日前投票やって、初めて出口調査に声を掛けられたのでそれもやってみた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">僕はだいたいプログラミングしてるときは既に内容を知ってるアニメを常に流してるんですが今週はまた「宇宙よりも遠い場所」を観ていました。これほどまでに13話すべて足すところも引くところもない完璧な作品は他に早々思いつかないです。&lt;/p>&amp;mdash; 父 (@fushiroyama) &lt;a href="https://twitter.com/fushiroyama/status/1453610090632663048?ref_src=twsrc%5Etfw">October 28, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="消防設備点検">消防設備点検&lt;/h2>
&lt;p>点検があるとのことだったので軽く部屋を掃除した。朝ゴミ捨てに行ったらたまたま管理人さんがいて、点検の時間帯でもしいなかったら勝手に部屋に入ってやってもらってよいですと連絡してたら、点検員さんに掛け合ってくれてすぐに設備点検してもらえた。部屋とキッチンにある火災探知機がちゃんと作動するかどうかをテストしてた。2分ぐらいで完了した。おかげで今日の家を出る予定を前倒しできた。感謝。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週はジョギングしてない代わりにウォーキングをして筋肉痛を軽減しつつ臨んだ。平日のストレッチも3回ぐらいやっているので現状維持ぐらいかな？と思ったけど、開始前166cmで、ストレッチ後167cmで前回よりも数値は悪くなってた。物理的な体調はよいつもりだったけど、数値が悪化したのでなにか不足があるのか、平日のストレッチの時間が足りないのかもしれない。もしくは、ストレッチを受けていると、まだ右股関節の違和感とお尻の筋肉の張りは根強い。今週は5日ぐらいウォーキングしているのでその疲労もあるのかもしれない。トレーナーさんに夜にウォーキングするとよく眠れるという話しをしたら、ジョギングよりもウォーキングの方がリラックスできて、ジョギングや筋トレ (激しい運動) は交感神経を刺激して睡眠にはよくないといった話だった。ググったら &lt;a href="https://kenja-club.com/column/201605kobayashi/">ジョギングよりもウォーキングがお勧め&lt;/a> という記事も出てきた。&lt;/p>
&lt;h2 id="みんなの-python-勉強会の資料作り">みんなの Python 勉強会の資料作り&lt;/h2>
&lt;p>昨日の続き。発表の内容の構成を考えながら、過去に書いた本や資料、サンプルコードなどを見返していた。コンテンツはだいたい頭の中で固まってきた。あとは構成を練りながら実際にスライドとして仕上げていくだけ。いつもそうなんだけど、スライドの作り始めが一番難しい。何から書くか、どこから作り始めるのかに最も時間を割く。もう少し悩みながら考えておく。&lt;/p>
&lt;h2 id="サバクトビバッタの研究">サバクトビバッタの研究&lt;/h2>
&lt;p>たまたまタイムラインでみかけて &lt;a href="https://otokomaeno.hatenablog.com/entry/2021/10/30/170343">『バッタを倒しにアフリカへ』行き、必殺技を見つけてきました&lt;/a> を読んでみたらすごくおもしろかった。国連にはバッタ予報官という専門職？があるのを記事などでみかけていた。日本だとイナゴになるんだろうけど、世界的にはバッタなんよね。そんなバッタの研究に、全然関係ない日本の若手研究者が、過去40年間誰もアフリカで腰を据えて研究しておらず、バッタ研究の歴史が止まったままであることに気付いて、何年もかけてシンプルな観察をメインにしたフィールドワークで成果をあげたという、ミドルエイジクライシスな自分にとっては痛快で元気がでる記事だった。著者のノリもおもしろいので、おそらく陽気な人なんだろうと思う。応援する意図でも &lt;a href="https://www.amazon.co.jp/exec/obidos/ASIN/B072FGTM65/hatena-blog-22/">バッタを倒しにアフリカへ&lt;/a> を購入した。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/Eq1RP7t1ZOw" allowfullscreen title="国連食糧農業機関（FAO）の上級バッタ予報官キース・クレスマンさんインタビュー">&lt;/iframe>
&lt;/div></content></item><item><title>フラクタルスプリントの調査</title><link>/diary/posts/2021/1029/</link><pubDate>Fri, 29 Oct 2021 01:40:10 +0900</pubDate><guid>/diary/posts/2021/1029/</guid><description>2時から Connect 2021 のイベントをみてた。3時過ぎぐらいには眠くて耐えられなくなってそのまま寝落ちしたら7時に起きた。本当は6時から金朝ツメトギの朝活の日だったのに寝坊して参加できなかった。なんか疲れて家に帰って13時から17時まで寝てた。生活のリズムを崩すと大きく集中力がなくなる。その後、またオフィスに行って作業してた。
Connect 2021 マーク・ザッカーバーグの基調講演を聞いていると、機械学習の次のテックの波はメタバースなのかなぁとか思ったりもしたけど、あとで メタバースはディストピアの悪夢です。より良い現実の構築に焦点を当てましょう。 を読んでいて、やっぱり違うよなぁとも思った。自分がメタバースの世界で活動したり、アプリケーション開発をやってないから他人の意見に引っ張らられる。いずれにしても自分でちょっとやってみて、メタバースとの今後の付き合い方を考えないといけないということだけは理解した。今日の時点ではこのツィートがおもしろかった。
pic.twitter.com/4UHSycJ9HR
&amp;mdash; seya (@sekikazu01) October 29, 2021 みんなの Python 勉強会 あべさんから依頼がきて みんなのPython勉強会#75 で発表することになった。いつだったか忘れたけど、コロナ禍になる前だったと思うけど、いつか発表してほしいみたいな話しをしたりしながら機会がなくていまに至るというのもあって、内容があうならいっかという感じで引き受けた。20-30分程度でできるPyとエキPy第3版の話しを半々ずつみたいな内容でやるつもり。週末に内容を詰めて資料を作るつもり。Python は普段使いのツールとして使っているものの、お仕事で Go や Java で開発するようになってからあまり深く関わらないようになってしまった。ずっと Python コミュニティの勉強会に行ってたから、いまでも Python の人とみられるのは仕方ないかなとも思う。
フラクタルスプリント ある記事で フラクタルスプリント というキーワードをみかけて、なんのことか分からなかったので調べてみた。47機関というチームが実践しているスクラムをベースにした開発方法論と言えるのかな？次の発表動画をみて雰囲気は理解できた。
15分スプリントの具体的な進め方について動画で話した #15min_sprint フラクタルスプリントのやり方はこんな感じ。
基本はスクラムのイベントをそれぞれのスプリントで行う スプリントの中にスプリントを含めるという入れ子構造をとる 1ヶ月 → 1週間 → 1日 → 1時間 → 15分の入れ子 それぞれのスプリントの20%程度の時間は自由時間にしてバッファをとる 例えば、1時間のスプリントに含むのは 15分 x 3 のスプリントと残り時間は自由なスプリントの時間にする 15分スプリントは10分タスクを1つだけやるスプリントと言える 残りの5分をスクラムイベントにあてる 極端にイテレーション期間の短いスプリントをすることで、通常のスクラムの開発方法論になかったイノベーションが起きるのではないか？といったところを狙いに47機関さんが業務で実践的にやっているプラクティスと言えるみたい。実際にやってみてうまくいったことなどを話しているので、ある種の学習コストを要求するものの、よいところもあるようには思える。おそらくは意図的に悪いところを話してなかったようには思える。例えば、それぞれのスプリントのイベントにおけるオーバーヘッドは大きくなるので作業時間が減るとか、10分タスクですべてチケット化すると、チケット数が増えるので必然的に過程の記録はチケットに残ってないはず。スプリントバックログを付箋の代わりに使うだけというのはスクラム開発一般の話ではあるけど、このやり方では開発者が何をやっているかを書く場所としてチケットは適切な場所ではなくなる。代わりに wiki にまとめるとは話してた。wiki だとフロー情報を監視するのが難しくなるが、その分、短いスプリントでのイベント (プランニング、レビュー、レトロスペクティブ) が頻繁にあるのでそれをフロー情報の監視の代替として機能するようにみえる。いわば強制で。</description><content>&lt;p>2時から &lt;a href="https://www.facebookconnect.com/ja-jp/">Connect 2021&lt;/a> のイベントをみてた。3時過ぎぐらいには眠くて耐えられなくなってそのまま寝落ちしたら7時に起きた。本当は6時から金朝ツメトギの朝活の日だったのに寝坊して参加できなかった。なんか疲れて家に帰って13時から17時まで寝てた。生活のリズムを崩すと大きく集中力がなくなる。その後、またオフィスに行って作業してた。&lt;/p>
&lt;h2 id="connect-2021">Connect 2021&lt;/h2>
&lt;p>マーク・ザッカーバーグの基調講演を聞いていると、機械学習の次のテックの波はメタバースなのかなぁとか思ったりもしたけど、あとで &lt;a href="https://nianticlabs.com/blog/real-world-metaverse/">メタバースはディストピアの悪夢です。より良い現実の構築に焦点を当てましょう。&lt;/a> を読んでいて、やっぱり違うよなぁとも思った。自分がメタバースの世界で活動したり、アプリケーション開発をやってないから他人の意見に引っ張らられる。いずれにしても自分でちょっとやってみて、メタバースとの今後の付き合い方を考えないといけないということだけは理解した。今日の時点ではこのツィートがおもしろかった。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="und" dir="ltr">&lt;a href="https://t.co/4UHSycJ9HR">pic.twitter.com/4UHSycJ9HR&lt;/a>&lt;/p>&amp;mdash; seya (@sekikazu01) &lt;a href="https://twitter.com/sekikazu01/status/1453963389420531714?ref_src=twsrc%5Etfw">October 29, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="みんなの-python-勉強会">みんなの Python 勉強会&lt;/h2>
&lt;p>あべさんから依頼がきて &lt;a href="https://startpython.connpass.com/event/228136/">みんなのPython勉強会#75&lt;/a> で発表することになった。いつだったか忘れたけど、コロナ禍になる前だったと思うけど、いつか発表してほしいみたいな話しをしたりしながら機会がなくていまに至るというのもあって、内容があうならいっかという感じで引き受けた。20-30分程度でできるPyとエキPy第3版の話しを半々ずつみたいな内容でやるつもり。週末に内容を詰めて資料を作るつもり。Python は普段使いのツールとして使っているものの、お仕事で Go や Java で開発するようになってからあまり深く関わらないようになってしまった。ずっと Python コミュニティの勉強会に行ってたから、いまでも Python の人とみられるのは仕方ないかなとも思う。&lt;/p>
&lt;h2 id="フラクタルスプリント">フラクタルスプリント&lt;/h2>
&lt;p>ある記事で &lt;strong>フラクタルスプリント&lt;/strong> というキーワードをみかけて、なんのことか分からなかったので調べてみた。47機関というチームが実践しているスクラムをベースにした開発方法論と言えるのかな？次の発表動画をみて雰囲気は理解できた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kyon-mm.hatenablog.com/entry/2020/10/18/171650">15分スプリントの具体的な進め方について動画で話した #15min_sprint&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>フラクタルスプリントのやり方はこんな感じ。&lt;/p>
&lt;ul>
&lt;li>基本はスクラムのイベントをそれぞれのスプリントで行う&lt;/li>
&lt;li>スプリントの中にスプリントを含めるという入れ子構造をとる
&lt;ul>
&lt;li>1ヶ月 → 1週間 → 1日 → 1時間 → 15分の入れ子&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>それぞれのスプリントの20%程度の時間は自由時間にしてバッファをとる
&lt;ul>
&lt;li>例えば、1時間のスプリントに含むのは 15分 x 3 のスプリントと残り時間は自由なスプリントの時間にする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>15分スプリントは10分タスクを1つだけやるスプリントと言える
&lt;ul>
&lt;li>残りの5分をスクラムイベントにあてる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>極端にイテレーション期間の短いスプリントをすることで、通常のスクラムの開発方法論になかったイノベーションが起きるのではないか？といったところを狙いに47機関さんが業務で実践的にやっているプラクティスと言えるみたい。実際にやってみてうまくいったことなどを話しているので、ある種の学習コストを要求するものの、よいところもあるようには思える。おそらくは意図的に悪いところを話してなかったようには思える。例えば、それぞれのスプリントのイベントにおけるオーバーヘッドは大きくなるので作業時間が減るとか、10分タスクですべてチケット化すると、チケット数が増えるので必然的に過程の記録はチケットに残ってないはず。スプリントバックログを付箋の代わりに使うだけというのはスクラム開発一般の話ではあるけど、このやり方では開発者が何をやっているかを書く場所としてチケットは適切な場所ではなくなる。代わりに wiki にまとめるとは話してた。wiki だとフロー情報を監視するのが難しくなるが、その分、短いスプリントでのイベント (プランニング、レビュー、レトロスペクティブ) が頻繁にあるのでそれをフロー情報の監視の代替として機能するようにみえる。いわば強制で。&lt;/p>
&lt;p>15分スプリントと聞いて先入観でイメージするよりも、合理的なところも理解できたのでチームの学習コストとスプリントイベントのオーバーヘッドを受け入れるなら悪くない開発方法論かもしれない。良い・悪いといった是非ではなく、47機関さんが大事にしているチームの価値観や文化、そしてチームをよくするための実践的な方法論と一緒に理解することでこの開発方法論は活きてくる。開発方法論だけをみてあれこれ言うのは適切ではないとも思えた。自分たちの業務や働き方にあった開発方法論を開発チームはずっと考え続けていくべきだと私は考えていて、47機関というチームはフラクタルスプリントという手法を編み出して、それ自体が素晴らしいなと思えた。&lt;/p></content></item><item><title>変哲もない日</title><link>/diary/posts/2021/1028/</link><pubDate>Thu, 28 Oct 2021 07:57:24 +0900</pubDate><guid>/diary/posts/2021/1028/</guid><description>0時に寝て6時半に起きた。久しぶりに勉強会でたくさん話したせいか、疲れて抜け殻になってた。昨日もよく眠れた。今日は調整作業が多かったので集中力を欠いてチケットの業務は進められなかった。
データ指向アプリケーションデザイン 第Ⅱ部の最後の章である9章の一貫性と合意を読み始めた。この章も内容は難しそう。9.1 まで読み終えた。時間をかけて1節ずつ読んでいく。
間違っているかもしれなくても動き続ける方が良いのか、それとも正しくあるべく停止してしまう方が良いのか？
―― Jay Kreps, “A Few Notes on Kafka and Jepsen” （ 2013 ）
冒頭の格言で kafka というキーワードが気になったので原文を探して (deepl で翻訳して) 読んでみた。一般論で考えたらこの問いの答えは停止してしまう方を選択するように私は考えてしまったが、原文の記事によると、この答えはアプリケーションに依るという。ダウンタイム=データの損失という特性のアプリケーションであれば、間違っている可能性があってもすぐに復旧して動かした方がよいという場合もあると言っている。kafka はどちらかと言えば、間違っていても動き続ける方のシステムに分類されると思う。メッセージの到達保証も At Least Once だし。
もう1点、意識しておかないといけないのはレプリケーションを行うデータベースの大半は 結果整合性（eventual consistency） であること。私は本書を読むまで、結果整合性をスケーラビリティやスループットの高い分散システムのキーバリューストアの特性だと考えていたが、RDB であってもレプリケーションはリアルタイムに行われるわけではなく、ネットワークという遅延の上限が保証されないインフラの上に構築されたものである以上、結果整合性で同期される。レプリケーションをしないデータベースシステム以外はすべて結果整合性の特性があると考えて設計や開発をする必要がある。
PMBOK ガイド第7版 プロジェクトマネジメント知識体系ガイド（PMBOKガイド）第7版＋プロジェクトマネジメント標準 を購入して届いた。たぶんいつか電子版も出ると思うけど、現時点では紙の本しかなさそう。ぱらぱらとめくりながら中身を眺めているとそんなに文字がびっしり書いてあるような本ではないので読むのはそんなに大変ではなさそうな印象を受けた。索引で知りたいキーワードを探しながらその箇所を拾い読みしたりしてた。またがっつり読み込んでまとめていきたい。
選考面談の最終決定 先日受けた 選考面談 で2社ともオファーをいただいた。感謝。自分の中では決まっていたが、顧問さんにも双方の案件の概要を話してアドバイスをもらった。その結果、私の意思と顧問さんのアドバイスも一致した。何の憂いもなく Java の開発案件の方を選択した。11月上旬から働き始める予定。3ヶ月ほど課題管理の調査・研究みたいなことをやっていたけど、いつまでもやれるほど財務に余裕がないので普通に働きながら自社のプロダクト開発も並行してやっていく。以前は2社のお仕事を引き受けて他のことをやる余裕がなくなってしまっていただけど、その失敗を教訓に今回は1社の仕事だけを専念しつつ、自社の仕事も少しずつ進めていきたい。</description><content>&lt;p>0時に寝て6時半に起きた。久しぶりに勉強会でたくさん話したせいか、疲れて抜け殻になってた。昨日もよく眠れた。今日は調整作業が多かったので集中力を欠いてチケットの業務は進められなかった。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>第Ⅱ部の最後の章である9章の一貫性と合意を読み始めた。この章も内容は難しそう。9.1 まで読み終えた。時間をかけて1節ずつ読んでいく。&lt;/p>
&lt;blockquote>
&lt;p>間違っているかもしれなくても動き続ける方が良いのか、それとも正しくあるべく停止してしまう方が良いのか？&lt;/p>
&lt;p>―― &lt;a href="https://blog.empathybox.com/post/62279088548/a-few-notes-on-kafka-and-jepsen">Jay Kreps, “A Few Notes on Kafka and Jepsen” （ 2013 ）&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>冒頭の格言で kafka というキーワードが気になったので原文を探して (deepl で翻訳して) 読んでみた。一般論で考えたらこの問いの答えは停止してしまう方を選択するように私は考えてしまったが、原文の記事によると、この答えはアプリケーションに依るという。ダウンタイム=データの損失という特性のアプリケーションであれば、間違っている可能性があってもすぐに復旧して動かした方がよいという場合もあると言っている。kafka はどちらかと言えば、間違っていても動き続ける方のシステムに分類されると思う。メッセージの到達保証も At Least Once だし。&lt;/p>
&lt;p>もう1点、意識しておかないといけないのはレプリケーションを行うデータベースの大半は &lt;strong>結果整合性（eventual consistency）&lt;/strong> であること。私は本書を読むまで、結果整合性をスケーラビリティやスループットの高い分散システムのキーバリューストアの特性だと考えていたが、RDB であってもレプリケーションはリアルタイムに行われるわけではなく、ネットワークという遅延の上限が保証されないインフラの上に構築されたものである以上、結果整合性で同期される。レプリケーションをしないデータベースシステム以外はすべて結果整合性の特性があると考えて設計や開発をする必要がある。&lt;/p>
&lt;h2 id="pmbok-ガイド第7版">PMBOK ガイド第7版&lt;/h2>
&lt;p>&lt;a href="https://www.pmi-japan.shop/shopdetail/000000000028/">プロジェクトマネジメント知識体系ガイド（PMBOKガイド）第7版＋プロジェクトマネジメント標準&lt;/a> を購入して届いた。たぶんいつか電子版も出ると思うけど、現時点では紙の本しかなさそう。ぱらぱらとめくりながら中身を眺めているとそんなに文字がびっしり書いてあるような本ではないので読むのはそんなに大変ではなさそうな印象を受けた。索引で知りたいキーワードを探しながらその箇所を拾い読みしたりしてた。またがっつり読み込んでまとめていきたい。&lt;/p>
&lt;h2 id="選考面談の最終決定">選考面談の最終決定&lt;/h2>
&lt;p>先日受けた &lt;a href="/diary/diary/posts/2021/1026/#選考面談">選考面談&lt;/a> で2社ともオファーをいただいた。感謝。自分の中では決まっていたが、顧問さんにも双方の案件の概要を話してアドバイスをもらった。その結果、私の意思と顧問さんのアドバイスも一致した。何の憂いもなく Java の開発案件の方を選択した。11月上旬から働き始める予定。3ヶ月ほど課題管理の調査・研究みたいなことをやっていたけど、いつまでもやれるほど財務に余裕がないので普通に働きながら自社のプロダクト開発も並行してやっていく。以前は2社のお仕事を引き受けて他のことをやる余裕がなくなってしまっていただけど、その失敗を教訓に今回は1社の仕事だけを専念しつつ、自社の仕事も少しずつ進めていきたい。&lt;/p></content></item><item><title>bizpy 再開</title><link>/diary/posts/2021/1027/</link><pubDate>Wed, 27 Oct 2021 08:10:21 +0900</pubDate><guid>/diary/posts/2021/1027/</guid><description>2時に寝て6時に起きた。前日の夜にウォーキングしたせいか、よく眠れた。朝活を終えてから朝ご飯を作って食べてそのままオフィスに出社した。6時起きを日課にした方が生活のリズムがよい。夕方に眠くなって1時間ほど昼寝した。
朝活: ミクロ経済学入門の入門 【三宮.dev オンライン】リモート朝活もくもく会 で第4章の供給曲線を読んだ。需要曲線の逆からの視点なので考え方は同じで図の形が異なる。用語がいくつか出てきたのでまとめる。
収穫逓減 (しゅうかくていげん): 製品をより多く生産するのにかかる経費が増大していくこと 生産活動において2倍の生産量を生み出すには2倍以上の経費がかかる 費用関数: 生産量と費用との関係をあらわす 限界費用: 追加的に1単位生産する費用 3個を生産する費用は、1個目の限界費用 + 2個目の限界費用 + 3個目の限界費用 個数が増えるごとに費用は高くなっていく 費用を図示するときは限界費用に分解した方が視覚的にわかりやすい 限界費用逓増: 生産するごとに限界費用が高まっていくこと 「逓」という漢字は「つぎつぎ」や「だんだん」という意味をもつ。
プライステイカー: 自分の生産量が価格に影響を与えられない 減産により希少価値を高め価格を吊り上げる市場操作ができない 独占企業: プライステイカーの反対。 利潤: 売上 - 経費 最適解: 利潤を最大化する生産量 あと1個追加して生産すると利益がマイナスになるところ 生産者余剰: すべての企業の利潤の和 供給曲線: すべての企業の限界費用をヨコに足し合わせた曲線 データ指向アプリケーションデザイン 昨日の続き。8.4 を読んで8章分散システムの問題を読み終えた。全体としても学びになったけれど、とくに 8.3 信頼性の低いクロックの節が全く開発・運用で意識したことがなかったので私にとっては学びになった。
分散システムにおいて発生する厄介な問題がある。
ネットワーク経由でパケットを送信しようとした場合、そのパケットはロストしたり、どれほど遅延するか分からない。同様に、レスポンスもロストしたり遅延したりするので、レスポンスを受け取れなかった場合には元々のメッセージが到達したかどうかも分からない</description><content>&lt;p>2時に寝て6時に起きた。前日の夜にウォーキングしたせいか、よく眠れた。朝活を終えてから朝ご飯を作って食べてそのままオフィスに出社した。6時起きを日課にした方が生活のリズムがよい。夕方に眠くなって1時間ほど昼寝した。&lt;/p>
&lt;h2 id="朝活-ミクロ経済学入門の入門">朝活: ミクロ経済学入門の入門&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/228969/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> で第4章の供給曲線を読んだ。需要曲線の逆からの視点なので考え方は同じで図の形が異なる。用語がいくつか出てきたのでまとめる。&lt;/p>
&lt;ul>
&lt;li>収穫逓減 (しゅうかくていげん): 製品をより多く生産するのにかかる経費が増大していくこと
&lt;ul>
&lt;li>生産活動において2倍の生産量を生み出すには2倍以上の経費がかかる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>費用関数: 生産量と費用との関係をあらわす&lt;/li>
&lt;li>限界費用: 追加的に1単位生産する費用
&lt;ul>
&lt;li>3個を生産する費用は、1個目の限界費用 + 2個目の限界費用 + 3個目の限界費用
&lt;ul>
&lt;li>個数が増えるごとに費用は高くなっていく&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>費用を図示するときは限界費用に分解した方が視覚的にわかりやすい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>限界費用逓増: 生産するごとに限界費用が高まっていくこと&lt;/li>
&lt;/ul>
&lt;p>「&lt;a href="https://dictionary.goo.ne.jp/word/kanji/%E9%80%93/">逓&lt;/a>」という漢字は「つぎつぎ」や「だんだん」という意味をもつ。&lt;/p>
&lt;ul>
&lt;li>プライステイカー: 自分の生産量が価格に影響を与えられない
&lt;ul>
&lt;li>減産により希少価値を高め価格を吊り上げる市場操作ができない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>独占企業: プライステイカーの反対。&lt;/li>
&lt;li>利潤: 売上 - 経費&lt;/li>
&lt;li>最適解: 利潤を最大化する生産量
&lt;ul>
&lt;li>あと1個追加して生産すると利益がマイナスになるところ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>生産者余剰: すべての企業の利潤の和&lt;/li>
&lt;li>供給曲線: すべての企業の限界費用をヨコに足し合わせた曲線&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="/diary/diary/img/2021/1027_supply-curve.png"/>
&lt;/figure>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>昨日の続き。8.4 を読んで8章分散システムの問題を読み終えた。全体としても学びになったけれど、とくに 8.3 信頼性の低いクロックの節が全く開発・運用で意識したことがなかったので私にとっては学びになった。&lt;/p>
&lt;blockquote>
&lt;p>分散システムにおいて発生する厄介な問題がある。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ネットワーク経由でパケットを送信しようとした場合、そのパケットはロストしたり、どれほど遅延するか分からない。同様に、レスポンスもロストしたり遅延したりするので、レスポンスを受け取れなかった場合には元々のメッセージが到達したかどうかも分からない&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ノードのクロックは他のノードと大きくずれているかもしれない（できる限りの努力をして NTP をセットアップしたとしても）。クロックは急に進んだり戻ったりするかもしれず、たいていはクロックの誤差をうまく計る方法がないので、クロックに依存するのは危険&lt;/p>
&lt;/li>
&lt;li>
&lt;p>プロセスは処理中にいつどれほどの長さ一時停止するかもしれず（おそらくはstop-the-worldガベージコレクタのため）、他のノードから落ちていると見なされた後に自身に一時停止があったことを理解しないままに復活するかもしれない。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>こういった &lt;strong>部分障害&lt;/strong> が生じうるのが分散システムの特徴と言える。ソフトウェアが他のノードが関わる何かをしようとした場合、それは時おり失敗したり、ランダムに速度が落ちたり、まったくレスポンスが返されない（そして最終的にはタイムアウトする）といった可能性がある。分散システムでは、部分障害への耐性をソフトウェアに組み込み、システムの構成要素が一部破損していてもシステム全体としては機能し続けられるようにする。&lt;/p>
&lt;p>フォールトに耐えるための最初のステップはフォールトを &lt;strong>検出&lt;/strong> することだが、それさえも難しい。多くのシステムは、ノードに障害が生じていることを検出する正確な仕組みを持たないので、ほとんどの分散アルゴリズムはリモートノードが生きているかどうかを判断するのにタイムアウトに頼る。しかし、タイムアウトはネットワークの障害とノードの障害を区別できず、ネットワークの遅延変動のために間違ってノードがクラッシュしていると誤検知することもある。弱っているものの落ちてはいないノードは、きれいに落ちているノードよりもさらに扱いが難しくなる可能性がある。&lt;/p>
&lt;p>フォールトが検出されたとして、システムがそれに耐えられるようにすることも簡単ではない。マシン間にはグローバルな変数も、共有メモリも、共通の情報やその他何らかの共有された状態もない。ノードは現在の時刻についてさえ合意できず、ましてやもっと重大なことに合意することなどできない。あるノードから他のノードへ情報を流せる唯一の方法は、その情報を信頼できないネットワークを通じて送ることだけである。重要な判断は単一のノードだけで安全に下すことができないので、他のノードの助けを得てクオラムが合意に至るようにするためのプロトコルが必要となる。&lt;/p>
&lt;p>同じ操作をすれば決まって同じ結果を返してくれるような、単一コンピュータにおける理想化された数学的な完全さの中でソフトウェアを書くのに慣れていると、分散システムの雑然とした物理的な現実への移行はちょっとしたショックを伴う。一方、分散システムのエンジニアは、しばしば単一のコンピュータ上で解決できる問題を簡単なものだと見なすが、実際のところ今日では単一のコンピュータがこなせる仕事量はかなりのものになっている。単一のマシンでシンプルにことを済ませられるなら、概してそうする価値はある。&lt;/p>
&lt;p>分散システムを利用する理由はスケーラビリティだけではない。耐障害性や低レイテンシ（地理的にユーザーの近くにデータを置けることによる）も同様に重要な目標であり、こういったことは単一ノードでは実現できない。本章ではネットワーク、クロック、プロセスの信頼性の低さが避けがたい自然の法則なのかも調べた。安全ではなく、クリティカルではないシステムの多くでは、高価な高信頼性よりも安価な低信頼性が選択される。また、信頼性の高いコンポーネントを前提としているスーパーコンピュータも取り上げました。スーパーコンピュータはその前提が故に、コンポーネントに障害が生じてしまった場合には完全に停止させて再起動することになる。これに対し、分散システムはサービスレベルでは中断することなくいつまでも動作し続けられる。これは、少なくとも理論上はすべてのフォールトやメンテナンスはノードレベルで処理できるためである。&lt;/p>
&lt;/blockquote>
&lt;h2 id="お昼ご飯">お昼ご飯&lt;/h2>
&lt;p>気分でスーパー寄って買いものして家に帰り、お昼ご飯を作って食べた。前に適当に作った &lt;a href="/diary/diary/posts/2021/1025/#お昼寝">かぼちゃの煮物&lt;/a> がおいしかったので再挑戦してみた。今度は圧力鍋を使っていろいろ具材を入れてみた。過去に作っておいしかった料理のレシピを evernote に書いたりしていたけど、もういまは書いてないので気が向いたら日記に書くようにする。&lt;/p>
&lt;p>材料&lt;/p>
&lt;ul>
&lt;li>A
&lt;ul>
&lt;li>水 900cc&lt;/li>
&lt;li>めんつゆ 100c&lt;/li>
&lt;li>醤油 適量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>B
&lt;ul>
&lt;li>かぼちゃ 1/4切れ&lt;/li>
&lt;li>なす 3個&lt;/li>
&lt;li>にんじん 2本&lt;/li>
&lt;li>玉ねぎ 1個&lt;/li>
&lt;li>しめじ 1パック&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>C
&lt;ul>
&lt;li>卵 2個&lt;/li>
&lt;li>豆苗&lt;/li>
&lt;li>せみ餃子&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>作り方&lt;/p>
&lt;ol>
&lt;li>圧力鍋に A を入れて火にかける&lt;/li>
&lt;li>B の野菜を切りながら圧力鍋に入れていく&lt;/li>
&lt;li>圧力鍋に B をすべて入れたら圧をかける (高圧30秒)&lt;/li>
&lt;li>圧が下がったら蓋をあけて C を入れる&lt;/li>
&lt;li>C に火が通るまで2分ほど煮込む&lt;/li>
&lt;/ol>
&lt;p>所感&lt;/p>
&lt;p>圧力が強過ぎたのか、かぼちゃが煮汁に溶け出してしまって原形がなくなってしまった。スープとして飲んでもおいしいけれども、水を入れ過ぎたのかもしれない。肉の代わりに餃子を使ってみた。水餃子っぽくなるので焼き餃子で油使うよりヘルシーな気持ちになっておいしい。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1027_pumpkin.jpg"/>
&lt;/figure>
&lt;h2 id="bizpy-勉強会">bizpy 勉強会&lt;/h2>
&lt;p>&lt;a href="https://bizpy.connpass.com/event/198717/">Python で Slack のインテグレーションをやってみる勉強会 #1&lt;/a> を開催した。半年以上開催してなかったので億劫になってしまっていたけど、再開できてよかった。10名ほどが参加してくれた。用意したコンテンツを話し終えたら8時半ぐらいで時間もちょうどよかった。初参加者も数人いた。slack インテグレーションの調査も兼ねてあと2-3回は集中的にやっていきたい。&lt;/p></content></item><item><title>韃靼そば茶</title><link>/diary/posts/2021/1026/</link><pubDate>Tue, 26 Oct 2021 08:48:44 +0900</pubDate><guid>/diary/posts/2021/1026/</guid><description>4時に寝て7時に起きた。やや寝坊したけど、夜中に作業してよく眠れたのでまぁいっかとしておく。昨日のかぼちゃの煮物が残っていたので19時に帰って晩ご飯食べて、ちょっと休んでからウォーキングに出た。ウォーキングの途中でオフィスに寄って一作業してからまたウォーキングして帰るという、運動と作業の一石二鳥になることを思いついた。ちょっと天才。ウォーキングの合計時間は1時間強ぐらい。
データ指向アプリケーションデザイン 8章分散システムの問題のうち、8.1, 8.2, 8.3を読んだ。
とくに 8.3 信頼性の低いクロックは私がこれまでアプリケーションを開発していて全く意識したことがなかった問題を扱っていてすごく勉強になった。おそらくミリ秒レベルでの障害調査をほとんどやったことがなかったので気にしてなかったのかもしれない。Cassandra が採用している LWW (last write wins、最後の書き込みを勝たせる) だと、短時間に連続して行われた書き込みと、本当に並行して行われた書き込みとの区別がつかないのでクロックの同期の状況によって因果律違反が発生する懸念がある。
NTP を使っていてもクロックの同期はミリ秒から秒レベルで正確ではない可能性があり、そこにプロセスの一時停止なんかも加わると容易に数秒の時間がズレてしまい、トランザクションにおける因果律違反が発生する可能性があるという話が丁寧に説明されている。実際に同じリソースに対してミリ秒レベルでトランザクションを発行するというのはあまりない状況だろうし、状態がよければあっても正常に動作する。但し、正常にトランザクションが実行されない懸念があるという理屈を知っておくのは大事なことに思えた。Google の Spanner が原子時計を導入して精度の高い時刻同期をしているというのは記事を見聞きして知っていたが、それがないとどんな問題が発生するのかが 8.3 節を読むと理解できる。
選考面談 そろそろお仕事をしないと会社の財務がやばいので選考を受けている。今日は2社の選考を受けた。1つは Go の開発案件、もう1つは Java の開発案件。どちらも業務内容はマッチングしていて勤務形態もフルリモートなのでいまの生活のまま、お仕事ができる。1社は正式にオファーが届いて、もう1社もおそらくオファーがくる想定。どちらかを選択する。転職だと面接を何回もして選考を受ける必要があるけど、業務委託だと大半が1回で決まる。昔フリーランスやってたときもそうだったかな？調整の管理コストが下がって望ましいことではある。もう私の中では承諾する方の案件は決まっているけど、念のため、1日寝かして顧問さんとも相談した後、最終決定しようと思う。
韃靼そば茶 少し前から家では 大阿蘇万能茶 を煮出して冷やして飲んでいる。村田園のサイトにはないので商品名が変わった？のかもしれない。この万能茶は、よく言えば後味すっきり、わるく言えば刺激がないと言える。おいしくないわけではない。近所のドラッグストアでノンカフェインのお茶を求めて購入した。もう少しお茶の主張がほしいなと思って、にっこくの 韃靼そば茶 を購入した。そば茶もノンカフェイン。これは水出しもできる。試しに水筒にティーパックを入れて、オフィスのウォーターサーバーで水を入れて作ってみた。時間が経つごとにそば茶の味が濃くなっていくけど、これはこれで私は好みなので問題なさそう。なるべく1日で飲みきって水筒を洗えばよさそう。
夜にうまく眠れなくなってから、夜にカフェインの入った飲みものを避けるようになった。ノンカフェインだとわかっているお茶なら安心して飲める。しばらく試してみる。</description><content>&lt;p>4時に寝て7時に起きた。やや寝坊したけど、夜中に作業してよく眠れたのでまぁいっかとしておく。昨日のかぼちゃの煮物が残っていたので19時に帰って晩ご飯食べて、ちょっと休んでからウォーキングに出た。ウォーキングの途中でオフィスに寄って一作業してからまたウォーキングして帰るという、運動と作業の一石二鳥になることを思いついた。ちょっと天才。ウォーキングの合計時間は1時間強ぐらい。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>8章分散システムの問題のうち、8.1, 8.2, 8.3を読んだ。&lt;/p>
&lt;p>とくに 8.3 信頼性の低いクロックは私がこれまでアプリケーションを開発していて全く意識したことがなかった問題を扱っていてすごく勉強になった。おそらくミリ秒レベルでの障害調査をほとんどやったことがなかったので気にしてなかったのかもしれない。Cassandra が採用している LWW (last write wins、最後の書き込みを勝たせる) だと、短時間に連続して行われた書き込みと、本当に並行して行われた書き込みとの区別がつかないのでクロックの同期の状況によって因果律違反が発生する懸念がある。&lt;/p>
&lt;p>NTP を使っていてもクロックの同期はミリ秒から秒レベルで正確ではない可能性があり、そこにプロセスの一時停止なんかも加わると容易に数秒の時間がズレてしまい、トランザクションにおける因果律違反が発生する可能性があるという話が丁寧に説明されている。実際に同じリソースに対してミリ秒レベルでトランザクションを発行するというのはあまりない状況だろうし、状態がよければあっても正常に動作する。但し、正常にトランザクションが実行されない懸念があるという理屈を知っておくのは大事なことに思えた。Google の Spanner が原子時計を導入して精度の高い時刻同期をしているというのは記事を見聞きして知っていたが、それがないとどんな問題が発生するのかが 8.3 節を読むと理解できる。&lt;/p>
&lt;h2 id="選考面談">選考面談&lt;/h2>
&lt;p>そろそろお仕事をしないと会社の財務がやばいので選考を受けている。今日は2社の選考を受けた。1つは Go の開発案件、もう1つは Java の開発案件。どちらも業務内容はマッチングしていて勤務形態もフルリモートなのでいまの生活のまま、お仕事ができる。1社は正式にオファーが届いて、もう1社もおそらくオファーがくる想定。どちらかを選択する。転職だと面接を何回もして選考を受ける必要があるけど、業務委託だと大半が1回で決まる。昔フリーランスやってたときもそうだったかな？調整の管理コストが下がって望ましいことではある。もう私の中では承諾する方の案件は決まっているけど、念のため、1日寝かして顧問さんとも相談した後、最終決定しようと思う。&lt;/p>
&lt;h2 id="韃靼そば茶">韃靼そば茶&lt;/h2>
&lt;p>少し前から家では &lt;a href="https://www.murataen.com/item/1110/">大阿蘇万能茶&lt;/a> を煮出して冷やして飲んでいる。村田園のサイトにはないので商品名が変わった？のかもしれない。この万能茶は、よく言えば後味すっきり、わるく言えば刺激がないと言える。おいしくないわけではない。近所のドラッグストアでノンカフェインのお茶を求めて購入した。もう少しお茶の主張がほしいなと思って、にっこくの &lt;a href="https://www.nikkoku.co.jp/products/homeuse/dattan/">韃靼そば茶&lt;/a> を購入した。そば茶もノンカフェイン。これは水出しもできる。試しに水筒にティーパックを入れて、オフィスのウォーターサーバーで水を入れて作ってみた。時間が経つごとにそば茶の味が濃くなっていくけど、これはこれで私は好みなので問題なさそう。なるべく1日で飲みきって水筒を洗えばよさそう。&lt;/p>
&lt;p>夜にうまく眠れなくなってから、夜にカフェインの入った飲みものを避けるようになった。ノンカフェインだとわかっているお茶なら安心して飲める。しばらく試してみる。&lt;/p></content></item><item><title>新しい生活リズムへの移行</title><link>/diary/posts/2021/1025/</link><pubDate>Mon, 25 Oct 2021 07:25:33 +0900</pubDate><guid>/diary/posts/2021/1025/</guid><description>3時に寝て6時に起きた。今日はちゃんと起き上がって朝からお茶を煮出して粗熱とって冷やしたりしてた。その後、準備してオフィスに着いたのが7時20分。いつもより1時間早く起きているのでオフィスに着くのも1時間早くなる。先週 の水曜日と金曜日だけ朝活やってみて逆に生活のリズムが乱れてよくない感じがした。今週は毎日6時に起きて朝活に参加してみるのを試す。
ミクロ経済学入門の入門 早起きしたので打ち合わせ前の隙間時間に第3章の需要曲線を読んだ。まずは用語の整理から。
上級財: 所得が増えたときに消費が増える財 下級財: 所得が増えたときに消費が減る財 一般的な傾向として、ものは消費するほど有り難みが減る。たとえば僕はコーヒー1杯目に最大4ドルまでなら払ってよいけれど、2杯目には最大2ドルまでしか払いたくない、そして3杯目には最大1ドルまでしか払いたくない、というように。
食べものとか実際にボリュームディスカウントされることが多いので食べものだとイメージしやすい。スーパーで半額になった豚カツを2枚買うときの私の気持ちはこんな感じ。定価なら1枚しか買わないのに半額なら2枚買ってもいいかと思ったりする。たまに2枚を一度に食べて気分悪くなって後悔する。たいていは晩ご飯に1枚、翌日のお昼ゴハンに1枚を分けて食べる。
余剰: 価格と消費者がお金を払ってもよい金額との差額 コーヒー1杯に400円払ってよいと考えていて、100円のコーヒーを買うなら300円が余剰といえる さらにコーヒー2杯目を50円で買ってよいと考えるなら350円が余剰と言える すべての消費者の余剰を計算したものを消費者余剰という。需要曲線からある価格 p を取るときの次のグラフにおける面積を消費者余剰と呼ぶ。グラフにすると直観的にわかりやすい。
消費者余剰に対して、売る側の利潤の合計を生産者余剰と呼ぶ。消費者余剰と生産者余剰との和を社会的余剰と呼ぶ。社会的余剰を「市場のよさ」のモノサシとして使うと談合は禁止すべしということになる。
ベルトラン価格競争 同品質で同費用の業者が価格競争をした場合、顧客は価格が安い方から商品を購入する。こうした市場をベルトラン寡占市場と呼ぶ このとき業者間の価格競争は最終的に「底辺への競争」が起こり、経費と同じ価格に近づく この状態をベルトラン均衡と呼ぶ 業者間で談合して価格を据え置けばよいが、業者の数が多くなるとこれは難しい 裏切りが発生したり、信頼関係を維持するのが難しかったりして、長期的な利益や全体の利益を追求するのが難しい ゲーム理論の話しのように読めた 価格弾力性 価格の変化によって需要がどのぐらい弾んで動くかをあらわす 弾力性が低いというと、価格が動いても需要はあまり変わらない状態をいう 弾力性が高い財は値上げすると需要が大幅に下がる 必需品は値上げしても需要が下がりにくい 課税で考えると、必需品への課税は貧しい人の生活に与えるダメージが大きい ギッフェン財 需要曲線は右下がりのカーブになるのが通常だが、経験的事実に即している そうした財を正常財と呼ぶ ごく稀に価格が上がるにつれ売れ行きが増すものがある、それをギッフェン財と呼ぶ 代替効果: ある商品が値上げしたときに別の商品に置き換えたくなる 所得効果: 生活にゆとりがなくなると、高いものは買えなくなり、安いものを買おうとする 内容はそう難しくないが、急にたくさんの用語が出てきて読み解くのに時間がかかった。</description><content>&lt;p>3時に寝て6時に起きた。今日はちゃんと起き上がって朝からお茶を煮出して粗熱とって冷やしたりしてた。その後、準備してオフィスに着いたのが7時20分。いつもより1時間早く起きているのでオフィスに着くのも1時間早くなる。&lt;a href="/diary/diary/posts/2021/1022/">先週&lt;/a> の水曜日と金曜日だけ朝活やってみて逆に生活のリズムが乱れてよくない感じがした。今週は毎日6時に起きて朝活に参加してみるのを試す。&lt;/p>
&lt;h2 id="ミクロ経済学入門の入門">ミクロ経済学入門の入門&lt;/h2>
&lt;p>早起きしたので打ち合わせ前の隙間時間に第3章の需要曲線を読んだ。まずは用語の整理から。&lt;/p>
&lt;ul>
&lt;li>上級財: 所得が増えたときに消費が増える財&lt;/li>
&lt;li>下級財: 所得が増えたときに消費が減る財&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>一般的な傾向として、ものは消費するほど有り難みが減る。たとえば僕はコーヒー1杯目に最大4ドルまでなら払ってよいけれど、2杯目には最大2ドルまでしか払いたくない、そして3杯目には最大1ドルまでしか払いたくない、というように。&lt;/p>
&lt;/blockquote>
&lt;p>食べものとか実際にボリュームディスカウントされることが多いので食べものだとイメージしやすい。スーパーで半額になった豚カツを2枚買うときの私の気持ちはこんな感じ。定価なら1枚しか買わないのに半額なら2枚買ってもいいかと思ったりする。たまに2枚を一度に食べて気分悪くなって後悔する。たいていは晩ご飯に1枚、翌日のお昼ゴハンに1枚を分けて食べる。&lt;/p>
&lt;ul>
&lt;li>余剰: 価格と消費者がお金を払ってもよい金額との差額
&lt;ul>
&lt;li>コーヒー1杯に400円払ってよいと考えていて、100円のコーヒーを買うなら300円が余剰といえる
&lt;ul>
&lt;li>さらにコーヒー2杯目を50円で買ってよいと考えるなら350円が余剰と言える&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>すべての消費者の余剰を計算したものを消費者余剰という。需要曲線からある価格 p を取るときの次のグラフにおける面積を消費者余剰と呼ぶ。グラフにすると直観的にわかりやすい。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1025_consumer-surplus.png"/>
&lt;/figure>
&lt;p>消費者余剰に対して、売る側の利潤の合計を生産者余剰と呼ぶ。消費者余剰と生産者余剰との和を社会的余剰と呼ぶ。社会的余剰を「市場のよさ」のモノサシとして使うと談合は禁止すべしということになる。&lt;/p>
&lt;ul>
&lt;li>ベルトラン価格競争
&lt;ul>
&lt;li>同品質で同費用の業者が価格競争をした場合、顧客は価格が安い方から商品を購入する。こうした市場をベルトラン寡占市場と呼ぶ&lt;/li>
&lt;li>このとき業者間の価格競争は最終的に「底辺への競争」が起こり、経費と同じ価格に近づく
&lt;ul>
&lt;li>この状態をベルトラン均衡と呼ぶ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>業者間で談合して価格を据え置けばよいが、業者の数が多くなるとこれは難しい
&lt;ul>
&lt;li>裏切りが発生したり、信頼関係を維持するのが難しかったりして、長期的な利益や全体の利益を追求するのが難しい
&lt;ul>
&lt;li>ゲーム理論の話しのように読めた&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>価格弾力性
&lt;ul>
&lt;li>価格の変化によって需要がどのぐらい弾んで動くかをあらわす&lt;/li>
&lt;li>弾力性が低いというと、価格が動いても需要はあまり変わらない状態をいう&lt;/li>
&lt;li>弾力性が高い財は値上げすると需要が大幅に下がる
&lt;ul>
&lt;li>必需品は値上げしても需要が下がりにくい
&lt;ul>
&lt;li>課税で考えると、必需品への課税は貧しい人の生活に与えるダメージが大きい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ギッフェン財
&lt;ul>
&lt;li>需要曲線は右下がりのカーブになるのが通常だが、経験的事実に即している
&lt;ul>
&lt;li>そうした財を正常財と呼ぶ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ごく稀に価格が上がるにつれ売れ行きが増すものがある、それをギッフェン財と呼ぶ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>代替効果: ある商品が値上げしたときに別の商品に置き換えたくなる&lt;/li>
&lt;li>所得効果: 生活にゆとりがなくなると、高いものは買えなくなり、安いものを買おうとする&lt;/li>
&lt;/ul>
&lt;p>内容はそう難しくないが、急にたくさんの用語が出てきて読み解くのに時間がかかった。&lt;/p>
&lt;h2 id="設計ドキュメントレビュー">設計ドキュメントレビュー&lt;/h2>
&lt;p>先週から作っていた設計ドキュメントを顧問さんと一緒にレビューした。スライド40枚を2時間がっつり話してめっちゃ疲れた。話し終えて20-30分抜け殻になって軽く散歩してきた。ここ3ヶ月、調べものをしてきた内容の集大成でもあり、頭の中にしかなかった課題管理の実践知を明文化するといった取り組みの (途中) 結果でもある。品質の良し悪しで言えば、たった3ヶ月で出来たものなので大したことはない。あくまで途上における段階でしかないのだけど、私の中でも納得感は出てきたし、レビューしてもらって厳しい指摘もなかったので方向性は出てきた感じがある。このまま時間のあるときに進めていく。&lt;/p>
&lt;h2 id="slack-apps-の調査">Slack apps の調査&lt;/h2>
&lt;p>この水曜日にある勉強会の &lt;a href="https://github.com/t2y/python-study/tree/master/BizPy/slack/20211027">資料作成&lt;/a> が完了した。Slack apps の調査を勢いよくやりたいので2週間ごとに開催することにする。ドキュメントを眺めていて次回は &lt;a href="https://api.slack.com/lang/ja-jp/app-home-with-modal">新機能、アプリのホーム・ヴューを活用しよう:house_with_garden:&lt;/a> のチュートリアルをやってみることに決めた。&lt;/p>
&lt;h2 id="お昼寝">お昼寝&lt;/h2>
&lt;p>睡眠時間が短かったせいか、朝早かったせいか、夕方に集中力がなくなったので17時に切り上げて帰って寝てた。今日は雨だったので徒歩通勤だったのもありウォーキングにもなった。途中でスーパーに寄って買いものして帰った。運動目的だと1時間ぐらい歩いても平気なのに通勤だと15分歩くだけで疲れる。同じ行動をしていても目的意識で変わってくる。18時ぐらいには家に着いてそのまま4時間ほど寝てた。その後、また起きて夜の作業に入った。起きてからお腹すいて即席でめんつゆと醤油とかぼちゃとささみと卵で煮物を作ってみたら意外とおいしかった。お腹すいているとちょっとしたものでもおいしい。気に入ったのでカバー画像にしてみた。&lt;/p></content></item><item><title>bolt アプリ開発</title><link>/diary/posts/2021/1024/</link><pubDate>Sun, 24 Oct 2021 11:20:18 +0900</pubDate><guid>/diary/posts/2021/1024/</guid><description>2時に寝て9時に起きた。寝る前に1時間ほどウォーキングしてきたせいか、よく眠れた。田んぼをしたり運動をしたり体を動かして疲れた方がよく眠れるような気がしてきた。しばらく続けてみようと思う。お昼は調べものをしていて夕方に眠くなって2時間ほど寝てまた夜も調べものをしていた。
Slack apps の調査 この水曜日に勉強会があるので調査と 資料作成 をしていた。いつの間にか slack app 作成のためのドキュメントもいくつか 日本語化 されていることに気付いた。Bolt フレームワークを使って Slack Bot を作ろう のドキュメントをみながら bolt-python を使って簡単な bot アプリを作成した。アプリの設定・開発の流れはだいたいこんな感じ。
slack app 作成 bot ユーザー作成 oauth スコープの設定 bolt アプリケーションの実装 イベントサブスクリプションの設定 bolt とは別に python-slack-sdk というライブラリが提供されていて、このライブラリを使って bolt というフレームワークが実装されている。bolt でやりにくいことがあったら直接 sdk を触ることもあるのかもしれない。
現時点で勉強会の参加者は17人もいる。半年以上さぼっていたけど、けっこうな人数が参加してくれている。slack app の調査も兼ねて3-4回ぐらいは勉強会を開く予定。初回はアプリを作成するときの雰囲気を学んでもらえればと思う。</description><content>&lt;p>2時に寝て9時に起きた。寝る前に1時間ほどウォーキングしてきたせいか、よく眠れた。田んぼをしたり運動をしたり体を動かして疲れた方がよく眠れるような気がしてきた。しばらく続けてみようと思う。お昼は調べものをしていて夕方に眠くなって2時間ほど寝てまた夜も調べものをしていた。&lt;/p>
&lt;h2 id="slack-apps-の調査">Slack apps の調査&lt;/h2>
&lt;p>この水曜日に勉強会があるので調査と &lt;a href="https://github.com/t2y/python-study/blob/master/BizPy/slack/20211027/README.md#slack-apps">資料作成&lt;/a> をしていた。いつの間にか slack app 作成のためのドキュメントもいくつか &lt;a href="https://api.slack.com/lang/ja-jp">日本語化&lt;/a> されていることに気付いた。&lt;a href="https://api.slack.com/lang/ja-jp/hello-world-bolt">Bolt フレームワークを使って Slack Bot を作ろう&lt;/a> のドキュメントをみながら &lt;a href="https://github.com/slackapi/bolt-python">bolt-python&lt;/a> を使って簡単な bot アプリを作成した。アプリの設定・開発の流れはだいたいこんな感じ。&lt;/p>
&lt;ol>
&lt;li>slack app 作成&lt;/li>
&lt;li>bot ユーザー作成&lt;/li>
&lt;li>oauth スコープの設定&lt;/li>
&lt;li>bolt アプリケーションの実装&lt;/li>
&lt;li>イベントサブスクリプションの設定&lt;/li>
&lt;/ol>
&lt;p>bolt とは別に &lt;a href="https://github.com/slackapi/python-slack-sdk">python-slack-sdk&lt;/a> というライブラリが提供されていて、このライブラリを使って bolt というフレームワークが実装されている。bolt でやりにくいことがあったら直接 sdk を触ることもあるのかもしれない。&lt;/p>
&lt;p>現時点で勉強会の参加者は17人もいる。半年以上さぼっていたけど、けっこうな人数が参加してくれている。slack app の調査も兼ねて3-4回ぐらいは勉強会を開く予定。初回はアプリを作成するときの雰囲気を学んでもらえればと思う。&lt;/p></content></item><item><title>普通の休日</title><link>/diary/posts/2021/1023/</link><pubDate>Sat, 23 Oct 2021 02:06:59 +0900</pubDate><guid>/diary/posts/2021/1023/</guid><description>3時に寝て9時に起きた。前日の夕方お昼寝して21時から2時ぐらいまで作業してから寝たので生活のリズムが狂ってしまったかもしれない。それでもよく眠れたので体調は良いように感じた。
ストレッチ 先週は木・金と連日にジョギングして筋肉痛になってた ので、今週は木曜日だけジョギングして金曜日はお休みしてストレッチを受けた。それでもまだ右股関節の違和感と若干の筋肉の張りは残っている。終わってから少し体が楽になったので疲れが溜まっていたのかもしれない。今日の開脚幅は開始前168cmで、ストレッチ後170cmだった。先週とほぼ変わらないので股関節の可動域は現状維持。トレーナーさんに自分でストレッチしていて感じた左右の違いや右股関節の違和感を相談してみてもらったりした。物理的な身体の変化や状態を相談できるというのもこのサービスの価値の1つでもあると思う。相談してこういうストレッチするとよいですよというアドバイスをもらうだけでも安心した気持ちになるように感じた。
設計ドキュメント修正 先日たたき台として作成したもの を見直しながら手直したしたりしてた。資料を作ってから2-3日寝かせてから見返すと粗がみえたり不足している内容を思いついたりする。事前に資料を作って余裕があるときはよくそうやって洗練させている。リファクタリングをやるような感覚。カバー画像にあるスライドを追加した。自分の頭の中にあるイメージを図として具現化できると、それ自体を楽しい・嬉しいといったポジティブな感情に捉えられる。資料を作成していて頭の中にある情報をうまく整理できないときに苦痛やしんどさを感じる。言いたいことがあり過ぎたり曖昧だったりしてまとめられないことがある。その反対だから快ちよく感じるのかもしれない。
ウォーキング ジョギングしない日でもなるべく運動した方がいいかと思い始め、23時をまわってから歩くために出かけた。いまオフィスに着いてこれを書いている。19時頃に家に帰れば近所の公園へ行ってジョギングをする。21時をまわると晩ご飯を食べるのが遅くなってしまうから先に食べてしまって、くつろぐと面倒くさくなって外に出なくなる。あと夜遅くに公園で一人走るのも周りに人がいたらこわがられるんじゃないかと思ったりする。前に深夜2時に走りに行ったことがあるんだけど、最初は私1人しか走ってなかったのに途中でもう1人いるようになった。誰もいないと思って走ってて人がいるとなんかこわくなったので夜遅くに走るのはやめようと思った。ジョギングしなくても1時間ほど歩くだけでも健康にはよさそうだし、なるべく続けられるよう努めてみよう。
たまたま繁華街の付近を歩いてみたら、飲食店の営業時間制限が解除されていて、昔のように飲み歩くお客さんで賑わっていた。お店の中を覗くと繁盛しているお店もあれば、全然お客さんが入っていないお店もあった。完全にお客さんが戻ってくるのはちょっと時間がかかるのかな。いまは一時の休息のようなものなんだろうけど、コロナ禍で寂しかった街並みに活気が戻ったようでなんか気分がよかった。でも、狭い店舗でマスクせずに飲食しててまた感染者増えるんじゃないかと不安に思ったりもする。</description><content>&lt;p>3時に寝て9時に起きた。前日の夕方お昼寝して21時から2時ぐらいまで作業してから寝たので生活のリズムが狂ってしまったかもしれない。それでもよく眠れたので体調は良いように感じた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1016/#ストレッチ">先週は木・金と連日にジョギングして筋肉痛になってた&lt;/a> ので、今週は木曜日だけジョギングして金曜日はお休みしてストレッチを受けた。それでもまだ右股関節の違和感と若干の筋肉の張りは残っている。終わってから少し体が楽になったので疲れが溜まっていたのかもしれない。今日の開脚幅は開始前168cmで、ストレッチ後170cmだった。先週とほぼ変わらないので股関節の可動域は現状維持。トレーナーさんに自分でストレッチしていて感じた左右の違いや右股関節の違和感を相談してみてもらったりした。物理的な身体の変化や状態を相談できるというのもこのサービスの価値の1つでもあると思う。相談してこういうストレッチするとよいですよというアドバイスをもらうだけでも安心した気持ちになるように感じた。&lt;/p>
&lt;h2 id="設計ドキュメント修正">設計ドキュメント修正&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1021/#設計ドキュメント作成">先日たたき台として作成したもの&lt;/a> を見直しながら手直したしたりしてた。資料を作ってから2-3日寝かせてから見返すと粗がみえたり不足している内容を思いついたりする。事前に資料を作って余裕があるときはよくそうやって洗練させている。リファクタリングをやるような感覚。カバー画像にあるスライドを追加した。自分の頭の中にあるイメージを図として具現化できると、それ自体を楽しい・嬉しいといったポジティブな感情に捉えられる。資料を作成していて頭の中にある情報をうまく整理できないときに苦痛やしんどさを感じる。言いたいことがあり過ぎたり曖昧だったりしてまとめられないことがある。その反対だから快ちよく感じるのかもしれない。&lt;/p>
&lt;h2 id="ウォーキング">ウォーキング&lt;/h2>
&lt;p>ジョギングしない日でもなるべく運動した方がいいかと思い始め、23時をまわってから歩くために出かけた。いまオフィスに着いてこれを書いている。19時頃に家に帰れば近所の公園へ行ってジョギングをする。21時をまわると晩ご飯を食べるのが遅くなってしまうから先に食べてしまって、くつろぐと面倒くさくなって外に出なくなる。あと夜遅くに公園で一人走るのも周りに人がいたらこわがられるんじゃないかと思ったりする。前に深夜2時に走りに行ったことがあるんだけど、最初は私1人しか走ってなかったのに途中でもう1人いるようになった。誰もいないと思って走ってて人がいるとなんかこわくなったので夜遅くに走るのはやめようと思った。ジョギングしなくても1時間ほど歩くだけでも健康にはよさそうだし、なるべく続けられるよう努めてみよう。&lt;/p>
&lt;p>たまたま繁華街の付近を歩いてみたら、飲食店の営業時間制限が解除されていて、昔のように飲み歩くお客さんで賑わっていた。お店の中を覗くと繁盛しているお店もあれば、全然お客さんが入っていないお店もあった。完全にお客さんが戻ってくるのはちょっと時間がかかるのかな。いまは一時の休息のようなものなんだろうけど、コロナ禍で寂しかった街並みに活気が戻ったようでなんか気分がよかった。でも、狭い店舗でマスクせずに飲食しててまた感染者増えるんじゃないかと不安に思ったりもする。&lt;/p></content></item><item><title>睡眠不良</title><link>/diary/posts/2021/1022/</link><pubDate>Fri, 22 Oct 2021 13:29:09 +0900</pubDate><guid>/diary/posts/2021/1022/</guid><description>4時に寝て6時に起きた。朝活があると何時に寝ても6時に起きれる。終わってからやっぱり眠くなって1時間ほど寝てた。お昼の外出から戻ってきて雑務やってから、なんか集中できなくて15時から帰ってお昼ご飯食べて2-3時間寝てた。寝る時間帯がずれると生活のリズムが狂ってしまい、全体でみると生産性が落ちるように思えてきた。水と金だけ6時に起きるのをやめて毎日6時に起きるべきだと強く思うようになった。
朝活 Webデザイントレンドのよりみち の金朝ツメトギに参加した。今回から「つめとぎ」から「ツメトギ」のカタカナに名前変更してパワーアップ？したみたい。本を読んでもよかったんだけど、チャット欄でコメントしながら live をみてみようと思って普通に聴いていた。#金朝ツメトギ というハッシュタグは私がコメントして生まれた。コミュニティ的に盛り上げるならタイムラインを共有した方がよいとは思う。youtube live のチャットにコメントした方がいいか、twitter で気軽にコメントした方がいいか、まだよくわかってない。youtube のチャット欄のコメントの一覧性とか、普段使いのツールになっていないせいか、なんとなく抵抗感がある。いま参加者が少ないせいか、コメントするとスピーカーがコメントに反応して返答したりするので、あまりカジュアルに書き過ぎるとスピーカーの作業の邪魔にならないかな？とか思ったりもした。youtube live という勉強会の人間関係の距離感が難しい。
あと Facebook Connect 2021 というイベントがあることを教えてもらった。友だちに共有したら会社を休んで参加するとか言っているので私も参加してみることにした。どうしようか迷ってたけど、身近な人たちが参加するとつられるのかもしれない。
法人県民税と法人市民税の中間申告と納付 前日(というか今日)に4時まで起きてたのは申告書の内容確認や記入をしてたから。せっかく申告書を作成したのですぐ納付したくなった。それで新長田の合同庁舎まで申告に行ってきた。eltax は相変わらず windows 向けの DL 版でないと申告できそうにない。WEB 版もあって一部対応しているようだけど、よくよく調べていくと DL 版でしかできないようにみえる。毎年 WEB 版でできるようになっているかどうかを調べている。この互換性を調べるような作業を都度やるのが面倒になってきた。vr 用途 (oculus link を使いたい) にも使えるので windows マシンを購入してもいいかもしれないと考えるようになってきた。申告書を郵送してもよいけど、1時間もあれば往復できる距離なので気分転換も兼ねて合同庁舎に出向いてきた。
帰りに新長田駅の近くの三菱UFJ銀行の支店で納付する。前回は窓口納付をしたが、今回は STM (Store Teller Machine) での納付に初挑戦した。STM(Store Teller Machine)の存在意義とは のブログ記事にも書かれている通り、納付書を OCR でスキャンすることでどんな納付書でも対応できるという汎用性はすごいと思うものの、その裏で人間がチェックしているんじゃないかと思えるメッセージや引き落とす合計金額はユーザーが手入力で決定する (OCR で合計がどの金額かわからなかった場合のみ？) といったオペレーションになっていて、なんか全く自動化されてない感があって残念に思った。見た目上、機械化されているけど、運用には人手がかかっているようにみえた。まぁでも、初めて使ってみて経験としてはおもしろかった。
Jira のフィルターとリマインダー 所得税や住民税の納付は原則毎月納付する必要があるけど、小さい企業は納付の特例という制度があって6ヶ月単位にまとめて納付できる。小さい企業の事務手続きの工数削減を狙いとしてある制度だと思う。うちもその特例制度を利用して6ヶ月ごとに納付している。カレンダーに繰り返し予定として登録してあるのでカレンダーをみていれば見落とすことはないのだけど、そのときに都度チケットを作ってやるのも面倒なので納付の親チケットを作っておいて、子タスクとして毎回作業するようにしている。それをみていて、納付期限を設定しておいてリマインダーしたら課題管理システムっぽくていいなと思って Jira でのやり方を調べてみた。Jiraにて期限の近い課題の通知を受け取りたい というのがあって、任意の JQL で期限を調べるフィルターを書いて、そのフィルターに対してサブスクリプションというメール配信設定を行う仕組みになっている。これはこれでよくできたうまい仕組みだと思う。しかし、いまチケットのイベントに対してメールを送る設定は無効にしていて、Slack インテグレーションを使ってすべて Slack の通知チャンネルにイベントを流すようにしている。できれば、Slack インテグレーションで期限のリマインダーを通知できるのが望ましいた。公式の Jira Slack app だと、JQL でフィルターはできるけど、イベント発生時に通知する仕組みなので毎週フィルター実行するような用途には使えない。
たまたまそんな話しをツィートしてたら Jira API と Slack API を使ってスクリプトを書いているというのを教えてもらった。これはこれで便利そう。</description><content>&lt;p>4時に寝て6時に起きた。朝活があると何時に寝ても6時に起きれる。終わってからやっぱり眠くなって1時間ほど寝てた。お昼の外出から戻ってきて雑務やってから、なんか集中できなくて15時から帰ってお昼ご飯食べて2-3時間寝てた。寝る時間帯がずれると生活のリズムが狂ってしまい、全体でみると生産性が落ちるように思えてきた。水と金だけ6時に起きるのをやめて毎日6時に起きるべきだと強く思うようになった。&lt;/p>
&lt;h2 id="朝活">朝活&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/channel/UC1rVx0vAg66su1WvH3X-RJg">Webデザイントレンドのよりみち&lt;/a> の金朝ツメトギに参加した。今回から「つめとぎ」から「ツメトギ」のカタカナに名前変更してパワーアップ？したみたい。本を読んでもよかったんだけど、チャット欄でコメントしながら live をみてみようと思って普通に聴いていた。&lt;a href="https://twitter.com/hashtag/%E9%87%91%E6%9C%9D%E3%83%84%E3%83%A1%E3%83%88%E3%82%AE?src=hashtag_click&amp;amp;f=live">#金朝ツメトギ&lt;/a> というハッシュタグは私がコメントして生まれた。コミュニティ的に盛り上げるならタイムラインを共有した方がよいとは思う。youtube live のチャットにコメントした方がいいか、twitter で気軽にコメントした方がいいか、まだよくわかってない。youtube のチャット欄のコメントの一覧性とか、普段使いのツールになっていないせいか、なんとなく抵抗感がある。いま参加者が少ないせいか、コメントするとスピーカーがコメントに反応して返答したりするので、あまりカジュアルに書き過ぎるとスピーカーの作業の邪魔にならないかな？とか思ったりもした。youtube live という勉強会の人間関係の距離感が難しい。&lt;/p>
&lt;p>あと &lt;a href="https://www.facebookconnect.com/ja-jp/">Facebook Connect 2021&lt;/a> というイベントがあることを教えてもらった。友だちに共有したら会社を休んで参加するとか言っているので私も参加してみることにした。どうしようか迷ってたけど、身近な人たちが参加するとつられるのかもしれない。&lt;/p>
&lt;h2 id="法人県民税と法人市民税の中間申告と納付">法人県民税と法人市民税の中間申告と納付&lt;/h2>
&lt;p>前日(というか今日)に4時まで起きてたのは申告書の内容確認や記入をしてたから。せっかく申告書を作成したのですぐ納付したくなった。それで新長田の合同庁舎まで申告に行ってきた。&lt;a href="https://www.eltax.lta.go.jp/">eltax&lt;/a> は相変わらず windows 向けの DL 版でないと申告できそうにない。WEB 版もあって一部対応しているようだけど、よくよく調べていくと DL 版でしかできないようにみえる。毎年 WEB 版でできるようになっているかどうかを調べている。この互換性を調べるような作業を都度やるのが面倒になってきた。vr 用途 (oculus link を使いたい) にも使えるので windows マシンを購入してもいいかもしれないと考えるようになってきた。申告書を郵送してもよいけど、1時間もあれば往復できる距離なので気分転換も兼ねて合同庁舎に出向いてきた。&lt;/p>
&lt;p>帰りに新長田駅の近くの三菱UFJ銀行の支店で納付する。前回は窓口納付をしたが、今回は STM (Store Teller Machine) での納付に初挑戦した。&lt;a href="https://life-is-miracle-wind.blog.jp/archives/22922687.html">STM(Store Teller Machine)の存在意義とは&lt;/a> のブログ記事にも書かれている通り、納付書を OCR でスキャンすることでどんな納付書でも対応できるという汎用性はすごいと思うものの、その裏で人間がチェックしているんじゃないかと思えるメッセージや引き落とす合計金額はユーザーが手入力で決定する (OCR で合計がどの金額かわからなかった場合のみ？) といったオペレーションになっていて、なんか全く自動化されてない感があって残念に思った。見た目上、機械化されているけど、運用には人手がかかっているようにみえた。まぁでも、初めて使ってみて経験としてはおもしろかった。&lt;/p>
&lt;h2 id="jira-のフィルターとリマインダー">Jira のフィルターとリマインダー&lt;/h2>
&lt;p>所得税や住民税の納付は原則毎月納付する必要があるけど、小さい企業は納付の特例という制度があって6ヶ月単位にまとめて納付できる。小さい企業の事務手続きの工数削減を狙いとしてある制度だと思う。うちもその特例制度を利用して6ヶ月ごとに納付している。カレンダーに繰り返し予定として登録してあるのでカレンダーをみていれば見落とすことはないのだけど、そのときに都度チケットを作ってやるのも面倒なので納付の親チケットを作っておいて、子タスクとして毎回作業するようにしている。それをみていて、納付期限を設定しておいてリマインダーしたら課題管理システムっぽくていいなと思って Jira でのやり方を調べてみた。&lt;a href="https://community.atlassian.com/t5/Jira-articles/Jira%E3%81%AB%E3%81%A6%E6%9C%9F%E9%99%90%E3%81%AE%E8%BF%91%E3%81%84%E8%AA%B2%E9%A1%8C%E3%81%AE%E9%80%9A%E7%9F%A5%E3%82%92%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8A%E3%81%9F%E3%81%84/ba-p/770716">Jiraにて期限の近い課題の通知を受け取りたい&lt;/a> というのがあって、任意の JQL で期限を調べるフィルターを書いて、そのフィルターに対してサブスクリプションというメール配信設定を行う仕組みになっている。これはこれでよくできたうまい仕組みだと思う。しかし、いまチケットのイベントに対してメールを送る設定は無効にしていて、Slack インテグレーションを使ってすべて Slack の通知チャンネルにイベントを流すようにしている。できれば、Slack インテグレーションで期限のリマインダーを通知できるのが望ましいた。公式の &lt;a href="https://www.atlassian.com/partnerships/slack">Jira Slack app&lt;/a> だと、JQL でフィルターはできるけど、イベント発生時に通知する仕組みなので毎週フィルター実行するような用途には使えない。&lt;/p>
&lt;p>たまたまそんな話しをツィートしてたら Jira API と Slack API を使ってスクリプトを書いているというのを教えてもらった。これはこれで便利そう。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">こんな感じのスクリプトでJIRAからslackに通知してます &lt;a href="https://t.co/UzeIZ9Nbol">https://t.co/UzeIZ9Nbol&lt;/a>&lt;/p>&amp;mdash; Takanori Suzuki (@takanory) &lt;a href="https://twitter.com/takanory/status/1451572269768003589?ref_src=twsrc%5Etfw">October 22, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item><item><title>読書はお休み2日目</title><link>/diary/posts/2021/1021/</link><pubDate>Thu, 21 Oct 2021 08:45:31 +0900</pubDate><guid>/diary/posts/2021/1021/</guid><description>0時に寝て7時に起きた。昨日は寝不足だったせいかぐっすり眠れた。
設計ドキュメント作成 昨日の続き。着手すると徐々に興が乗ってくる。朝からずっとやり続けて17時ぐらいに一通りたたき台ができた。なぜか朝ご飯もお昼ご飯も食べずに資料を作り続けてた。お腹もあまりすかなかった。経緯や背景、設計の意図やシステム構成、展望やビジネス戦略など、スライドで39枚になった。顧問さんに情報共有するための資料なんだけど、自分一人の会社で自分一人で開発するのに2日もかけて資料作る必要あるのだろうかと考える人も多いと思う。この資料に書いた内容はすべて課題管理システム上のチケットのどこかに書いてあることなので、私の視点からは全部知っている内容ではある。ちょうど100を超えたばかりのチケット上のどこかに書いてあることを、39枚のスライドにまとめて今日の時点でのスナップショットを作るというのは思考の整理に役立っている。去年はそういうことをやらなかったので何かうまくいかなくなったのを リモートワークと相談相手 に書いた。今年はうまくいってないという感覚がないので気持ちに余裕がある。気持ちに余裕があるから新しい施策やアイディアに集中できているように考えている。
ジョギング 資料できたのが嬉しくて気分がよかったのでそのまま帰ってジョギングしてきた。今週初めて。19時までに帰ってくると行く気するんだけど、それよりも遅く帰ってくるとお腹空いて晩ご飯を先に食べてしまい、晩ご飯を食べると走りに行く気力がなくなってしまう。前に軽く調べたら健康的には食べる前に走った方がよいみたい。先週とだいたい同じ時間帯に行った んやけど、陸上部の人たちが減ってて走りやすかった。曜日じゃなくて何か別のサイクルがあるのかな。ちょっと寒いぐらいだから走っててもあまり汗も書かないし、走った後にストレッチするのも汗だくにはならない。
Slack Community Slack Community というのがあるのをみかけたので参加してみた。これからしばらく Slack apps についてがっつり調べていく予定。困ったときに相談できるように。</description><content>&lt;p>0時に寝て7時に起きた。昨日は寝不足だったせいかぐっすり眠れた。&lt;/p>
&lt;h2 id="設計ドキュメント作成">設計ドキュメント作成&lt;/h2>
&lt;p>昨日の続き。着手すると徐々に興が乗ってくる。朝からずっとやり続けて17時ぐらいに一通りたたき台ができた。なぜか朝ご飯もお昼ご飯も食べずに資料を作り続けてた。お腹もあまりすかなかった。経緯や背景、設計の意図やシステム構成、展望やビジネス戦略など、スライドで39枚になった。顧問さんに情報共有するための資料なんだけど、自分一人の会社で自分一人で開発するのに2日もかけて資料作る必要あるのだろうかと考える人も多いと思う。この資料に書いた内容はすべて課題管理システム上のチケットのどこかに書いてあることなので、私の視点からは全部知っている内容ではある。ちょうど100を超えたばかりのチケット上のどこかに書いてあることを、39枚のスライドにまとめて今日の時点でのスナップショットを作るというのは思考の整理に役立っている。去年はそういうことをやらなかったので何かうまくいかなくなったのを &lt;a href="https://note.com/t2y1979/n/n84deed5fd934">リモートワークと相談相手&lt;/a> に書いた。今年はうまくいってないという感覚がないので気持ちに余裕がある。気持ちに余裕があるから新しい施策やアイディアに集中できているように考えている。&lt;/p>
&lt;h2 id="ジョギング">ジョギング&lt;/h2>
&lt;p>資料できたのが嬉しくて気分がよかったのでそのまま帰ってジョギングしてきた。今週初めて。19時までに帰ってくると行く気するんだけど、それよりも遅く帰ってくるとお腹空いて晩ご飯を先に食べてしまい、晩ご飯を食べると走りに行く気力がなくなってしまう。前に軽く調べたら健康的には食べる前に走った方がよいみたい。&lt;a href="/diary/diary/posts/2021/1014/#ジョギング">先週とだいたい同じ時間帯に行った&lt;/a> んやけど、陸上部の人たちが減ってて走りやすかった。曜日じゃなくて何か別のサイクルがあるのかな。ちょっと寒いぐらいだから走っててもあまり汗も書かないし、走った後にストレッチするのも汗だくにはならない。&lt;/p>
&lt;h2 id="slack-community">Slack Community&lt;/h2>
&lt;p>&lt;a href="https://qiita.com/seratch/items/d67f36d0ff7dfaadcc3b#slack-community-%E6%97%A7-slack-platform-community">Slack Community&lt;/a> というのがあるのをみかけたので参加してみた。これからしばらく Slack apps についてがっつり調べていく予定。困ったときに相談できるように。&lt;/p></content></item><item><title>読書はお休み</title><link>/diary/posts/2021/1020/</link><pubDate>Wed, 20 Oct 2021 13:50:43 +0900</pubDate><guid>/diary/posts/2021/1020/</guid><description>4-5時に6時に起きた。寝られなかったというよりは寝る気がなくて3時頃にお茶を沸かして冷ましたりしてた。6時から 【三宮.dev オンライン】リモート朝活もくもく会 に参加してメンバーと雑談してた。もはや朝活というよりは雑談会になっているw 普通に起きたら7時まわってから起きるのが、イベントがあると6時に起きれるのでそれはそれで早起きするモチベーションになっていいかとは思っている。とはいえ、お昼やっぱり眠くなって1時間ほど昼寝した。昨日あまり寝てなかったら夜も集中力なくなってバテた。
Slack apps の調査 日記に書くの忘れてた。さらに3つのアプリを試してみた。
ToDoBot
Task Management App for Slack
これは基本的には個人向けのタスク管理ツール。タスクをグルーピングする機能をもっているのでそれを共有することでチーム単位でも使えるとは思うけど、あまりチーム向けに機能が用意されているようにはみえない。
Sidequest
Meet the Missing Task Manager for Slack.
個人/グループのタスク管理とチームでタスクを共有する用途にも機能が提供されている。タスクを作る際にチャンネルに作成すると、そのチャンネルにいるユーザーが確認して適切な人を担当者として割り当てるといった運用になる。タスク作成からの導線と担当者を割り当てる UI が自然な流れになっていてよさそうに思えた。課題管理システムの代わりにはならないけど、ヘルプデスクの用途にはちょうどよさそうにみえる。
Streamly
A complete task management suite in Slack
目指しているものは課題管理システムではあるけど、Stream (プロジェクト)、Request (チケット) といった新しい名前 (概念) を導入しているので、まず用語からして学習コストが上がる。プロジェクトはチャンネルごとに設定して、Request の接頭辞やカスタムフィールドも設定できるようになっていて、課題管理システムを目指しているんだなという雰囲気はする。UI は Slack のフォームを使っているので1つ1つの操作が API 呼び出しになって操作量やフォーム入力が増えてあまり使いやすくは感じなかった。同じような操作を何度もさせられるといった印象を受ける。
一旦、これで Slack apps で適当に検索した課題管理システムに近いツールの調査を終える。1-2時間さらっと表面的なところしか触ってないけど、どれもプロダクション品質になっているのだから、内部はよく作り込まれているんだと推測する。
設計ドキュメント着手 課題管理システムの設計を資料にまとめ始めた。先週ぐらいからチケットに設計の要素を書き始めてだいたいのイメージは頭の中では固まっている。これまで3ヶ月調べた内容もあるのでそれなりの背景をもった設計資料にはなる。頭の中のイメージはできているけど、それを言語化する作業を今日・明日ぐらいでやりたい。書くことの難しいところはいざ言語化しようとするとやっぱり時間がかかる。たぶんわかった気になって本当のところはちゃんと分かってないことの裏返しだと思う。
VR イベント参加 【大阪オンライン】XRミーティング 2021/10/20【AR/CR/MR/SR/VR】 に参加した。zoom を複数地域と接続して youtube live で配信していたせいか、始まるまで時間がかかった。参加者のアバターがそれぞれ独自のものでかっこいいなと思って眺めてた。登壇者が5名いて全員が HoloLens を使っていた。電話してたり調べものしてたりしたので断片的にみていた。長めの発表と LT のような短い発表とバラバラ。適当に所感を書いていく。HoloLens の Moving Platform Mode の紹介はあまり見た目は派手ではなかったけど、どういう仕組みかを説明して動画で実際の振る舞いを説明してた。へーって感じで聞いていた。次に HoloLens 触ってはまって20年働いた会社をやめて VR 系の会社に転職した人。前職が大企業だったので給料もだいぶ下がったけど、家族を説得したらしい。給与以上に HoloLens の将来性を感じたとのこと。HoloLens で OpenCV や Azure Face API を使って顔認識するアプリケーションの紹介してた。おもしろそうだった。最後は HoloLens のアプリ開発の発表だった。Microsoft が Mixed Reality Tool Kit というライブラリを提供していて、クラウスプラットフォームで開発できる。ライブラリの Plane Finding という機能を紹介してた。空間の平面だしをする部品。水平面や垂直面を抽出したりできる。この機能を使ってアプリケーション開発のサンプルなどの話をしてた。</description><content>&lt;p>4-5時に6時に起きた。寝られなかったというよりは寝る気がなくて3時頃にお茶を沸かして冷ましたりしてた。6時から &lt;a href="https://kobe-sannomiya-dev.connpass.com/event/228152/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> に参加してメンバーと雑談してた。もはや朝活というよりは雑談会になっているw 普通に起きたら7時まわってから起きるのが、イベントがあると6時に起きれるのでそれはそれで早起きするモチベーションになっていいかとは思っている。とはいえ、お昼やっぱり眠くなって1時間ほど昼寝した。昨日あまり寝てなかったら夜も集中力なくなってバテた。&lt;/p>
&lt;h2 id="slack-apps-の調査">Slack apps の調査&lt;/h2>
&lt;p>日記に書くの忘れてた。さらに3つのアプリを試してみた。&lt;/p>
&lt;p>&lt;a href="https://www.thetodobot.com/">ToDoBot&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Task Management App for Slack&lt;/p>
&lt;/blockquote>
&lt;p>これは基本的には個人向けのタスク管理ツール。タスクをグルーピングする機能をもっているのでそれを共有することでチーム単位でも使えるとは思うけど、あまりチーム向けに機能が用意されているようにはみえない。&lt;/p>
&lt;p>&lt;a href="https://www.getsidequest.app/">Sidequest&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Meet the Missing Task Manager for Slack.&lt;/p>
&lt;/blockquote>
&lt;p>個人/グループのタスク管理とチームでタスクを共有する用途にも機能が提供されている。タスクを作る際にチャンネルに作成すると、そのチャンネルにいるユーザーが確認して適切な人を担当者として割り当てるといった運用になる。タスク作成からの導線と担当者を割り当てる UI が自然な流れになっていてよさそうに思えた。課題管理システムの代わりにはならないけど、ヘルプデスクの用途にはちょうどよさそうにみえる。&lt;/p>
&lt;p>&lt;a href="https://happybara.io/apps/streamly/">Streamly&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>A complete task management suite in Slack&lt;/p>
&lt;/blockquote>
&lt;p>目指しているものは課題管理システムではあるけど、Stream (プロジェクト)、Request (チケット) といった新しい名前 (概念) を導入しているので、まず用語からして学習コストが上がる。プロジェクトはチャンネルごとに設定して、Request の接頭辞やカスタムフィールドも設定できるようになっていて、課題管理システムを目指しているんだなという雰囲気はする。UI は Slack のフォームを使っているので1つ1つの操作が API 呼び出しになって操作量やフォーム入力が増えてあまり使いやすくは感じなかった。同じような操作を何度もさせられるといった印象を受ける。&lt;/p>
&lt;p>一旦、これで Slack apps で適当に検索した課題管理システムに近いツールの調査を終える。1-2時間さらっと表面的なところしか触ってないけど、どれもプロダクション品質になっているのだから、内部はよく作り込まれているんだと推測する。&lt;/p>
&lt;h2 id="設計ドキュメント着手">設計ドキュメント着手&lt;/h2>
&lt;p>課題管理システムの設計を資料にまとめ始めた。先週ぐらいからチケットに設計の要素を書き始めてだいたいのイメージは頭の中では固まっている。これまで3ヶ月調べた内容もあるのでそれなりの背景をもった設計資料にはなる。頭の中のイメージはできているけど、それを言語化する作業を今日・明日ぐらいでやりたい。書くことの難しいところはいざ言語化しようとするとやっぱり時間がかかる。たぶんわかった気になって本当のところはちゃんと分かってないことの裏返しだと思う。&lt;/p>
&lt;h2 id="vr-イベント参加">VR イベント参加&lt;/h2>
&lt;p>&lt;a href="https://osaka-driven-dev.connpass.com/event/226481/">【大阪オンライン】XRミーティング 2021/10/20【AR/CR/MR/SR/VR】&lt;/a> に参加した。zoom を複数地域と接続して youtube live で配信していたせいか、始まるまで時間がかかった。参加者のアバターがそれぞれ独自のものでかっこいいなと思って眺めてた。登壇者が5名いて全員が HoloLens を使っていた。電話してたり調べものしてたりしたので断片的にみていた。長めの発表と LT のような短い発表とバラバラ。適当に所感を書いていく。HoloLens の Moving Platform Mode の紹介はあまり見た目は派手ではなかったけど、どういう仕組みかを説明して動画で実際の振る舞いを説明してた。へーって感じで聞いていた。次に HoloLens 触ってはまって20年働いた会社をやめて VR 系の会社に転職した人。前職が大企業だったので給料もだいぶ下がったけど、家族を説得したらしい。給与以上に HoloLens の将来性を感じたとのこと。HoloLens で OpenCV や Azure Face API を使って顔認識するアプリケーションの紹介してた。おもしろそうだった。最後は HoloLens のアプリ開発の発表だった。Microsoft が Mixed Reality Tool Kit というライブラリを提供していて、クラウスプラットフォームで開発できる。ライブラリの Plane Finding という機能を紹介してた。空間の平面だしをする部品。水平面や垂直面を抽出したりできる。この機能を使ってアプリケーション開発のサンプルなどの話をしてた。&lt;/p></content></item><item><title>改正法人税法等の説明会</title><link>/diary/posts/2021/1019/</link><pubDate>Tue, 19 Oct 2021 08:52:42 +0900</pubDate><guid>/diary/posts/2021/1019/</guid><description>0-1時ぐらいに寝て7時半に起きた。よく眠れたか眠れてないかもわからないような目覚め方をして少しぼおっとしてた。朝ゆっくりしてもいいかと思いつつ準備して移動したら9時前にはオフィスにいたので普通の日とそう変わらない一日の始めだった。夜にジョギング行こうかと思ってたけど、ちょうど通り雨が降ったりやんだりしててやめた。代わりに雨やんでからオフィス行って調べてものしてた。
データ指向アプリケーションデザイン 7.3を読んで7章トランザクションを読み終えた。トランザクションの章は言葉も知らないし、あまりクリティカルなアプリケーションの開発に関わってこなかったのでそこまで意識したことがなかった。トランザクションで問題が発生する分離レベルと典型的なパターンが体系的に整理されていてすごく勉強になった。結果的にトランザクションを使わないとしても、トランザクションの要否や起きうる整合性の問題を理解しておくとデータ定義やアプリケーションの設計にも活かせる気がする。7章まで読んだ中でもっとも知らないことが多かった。約300ページなのでだいたい半分読み終えた。まだまだ先は長い。
トランザクションの開始時点でロックをかけるべきオブジェクトが存在せず、あるトランザクションでの書き込みが他のトランザクションの検索クエリの結果を変化させてしまう問題を ファントム と呼ぶ。ファントムの対策の1つとして、あらかじめそのデータを作っておき SELECT FOR UPDATE でロックを取得するやり方を 衝突の実体化 (materializing conflicts) と呼ぶらしい。グループウェアの開発をしていた頃、1つのスレッドしかトランザクションを実行できないことを保証するための切り札として、ロック用途のテーブルを設けておき、そのロックを獲得したスレッドだけ処理できるようにしていた。当時はわからなかったけど、あれは衝突の実体化という手法だったんだといま気付いた。
データベースのクラッシュや整合性に関する問題に対する信頼性を保つために、それらの問題を単純化するために、この数十年にわたって選択されてきた仕組みが トランザクション である。トランザクションは、アプリケーションが複数の読み書きを論理的な単位としてまとめる方法である。概念的には、トランザクション中のすべての読み書きは1つの操作として実行される。トランザクションは抽象化のレイヤーであり、アプリケーションはある種の並行性の問題や、ある種のハードウェアやソフトウェアの問題が存在しないかのように振る舞えるようになる。
トランザクションは全体として成功（ コミット（commit） ）もしくは失敗（ 中断（abort） 、 ロールバック（rollback） ）する。トランザクションが失敗した場合には、アプリケーションは安全にリトライできる。トランザクションは自然法則ではなく、データベースにアクセスするアプリケーションのためのプログラミングモデルをシンプルにするという目的を持って生み出された。トランザクションを利用すれば、ある種の潜在的なエラーの状況や並行性の問題はデータベースが面倒を見てくれるので、アプリケーションはそれらを気にしなくてよくなる（このことは 安全性の保証 と呼ばれる）。
トランザクションが提供する安全性の保証は ACID で示される。
原子性 (Atomicity) 原子（アトミック） はそれ以上小さな部分に分割できないものを指して使われる言葉 マルチスレッドのプログラミングにおいては、あるスレッドがアトミックな処理を実行しているというなら、それは他のスレッドからはその処理の半分だけ完了した途中の状態を見る方法が存在しないことを意味する。システムが取りえる状態は、その処理が始まる前と終わった後の状態だけであり、その中間の状態になることはない 前にメモリモデルの文脈で、あるプロセスが書き込み完了したデータが、他のプロセスからも確実に読めることをアトミックな操作と習ったことがある 原子性と並行性は関係がない エラーの際にトランザクションを中断し、そのトランザクションのすべての書き込みを破棄できることが、 ACID の原子性を決定づける特徴と言える アプリケーションがリトライしても安全であることを保証する 中断可能性（abortability） の方が原子性よりも良い言葉だったと思われる 一貫性 (Consistency) 一貫性は多くの意味で使われる とくに日本語では整合性とも訳される 非同期のレプリケーションシステムでは結果整合性の問題が発生する (5章) コンシステントハッシュ法は、リバランシングのためにいくつかのシステムで利用されているパーティショニングのアプローチ CAP 定理では、一貫性という言葉は線形化可能性の意味で使われる (9章) ACID の文脈における一貫性は、データベースが「良い状態」にあることを示すアプリケーション固有の概念を指す 同じ言葉を少なくとも4つの異なる意味で使われている。ACID における一貫性という概念は、データについて常に真でなければならない何らかの言明（ 不変性 ）があることを指す。たとえば、会計システムの場合、すべてのアカウントでまとめれば常に貸方と借方は等しくならなければならない。この一貫性の概念はアプリケーション固有の不変性の概念に依存しており、一貫性を保つようにトランザクションを適切に定義することはアプリケーションの責任となる。原子性、分離性、永続性はデータベースの特性だが、一貫性は（ ACID という考え方においては）アプリケーションの特性である。したがって、 C は実際には ACID に属していない。</description><content>&lt;p>0-1時ぐらいに寝て7時半に起きた。よく眠れたか眠れてないかもわからないような目覚め方をして少しぼおっとしてた。朝ゆっくりしてもいいかと思いつつ準備して移動したら9時前にはオフィスにいたので普通の日とそう変わらない一日の始めだった。夜にジョギング行こうかと思ってたけど、ちょうど通り雨が降ったりやんだりしててやめた。代わりに雨やんでからオフィス行って調べてものしてた。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>7.3を読んで7章トランザクションを読み終えた。トランザクションの章は言葉も知らないし、あまりクリティカルなアプリケーションの開発に関わってこなかったのでそこまで意識したことがなかった。トランザクションで問題が発生する分離レベルと典型的なパターンが体系的に整理されていてすごく勉強になった。結果的にトランザクションを使わないとしても、トランザクションの要否や起きうる整合性の問題を理解しておくとデータ定義やアプリケーションの設計にも活かせる気がする。7章まで読んだ中でもっとも知らないことが多かった。約300ページなのでだいたい半分読み終えた。まだまだ先は長い。&lt;/p>
&lt;p>トランザクションの開始時点でロックをかけるべきオブジェクトが存在せず、あるトランザクションでの書き込みが他のトランザクションの検索クエリの結果を変化させてしまう問題を &lt;strong>ファントム&lt;/strong> と呼ぶ。ファントムの対策の1つとして、あらかじめそのデータを作っておき &lt;code>SELECT FOR UPDATE&lt;/code> でロックを取得するやり方を &lt;strong>衝突の実体化 (materializing conflicts)&lt;/strong> と呼ぶらしい。グループウェアの開発をしていた頃、1つのスレッドしかトランザクションを実行できないことを保証するための切り札として、ロック用途のテーブルを設けておき、そのロックを獲得したスレッドだけ処理できるようにしていた。当時はわからなかったけど、あれは衝突の実体化という手法だったんだといま気付いた。&lt;/p>
&lt;blockquote>
&lt;p>データベースのクラッシュや整合性に関する問題に対する信頼性を保つために、それらの問題を単純化するために、この数十年にわたって選択されてきた仕組みが &lt;strong>トランザクション&lt;/strong> である。トランザクションは、アプリケーションが複数の読み書きを論理的な単位としてまとめる方法である。概念的には、トランザクション中のすべての読み書きは1つの操作として実行される。トランザクションは抽象化のレイヤーであり、アプリケーションはある種の並行性の問題や、ある種のハードウェアやソフトウェアの問題が存在しないかのように振る舞えるようになる。&lt;/p>
&lt;p>トランザクションは全体として成功（ &lt;strong>コミット（commit）&lt;/strong> ）もしくは失敗（ &lt;strong>中断（abort）&lt;/strong> 、 &lt;strong>ロールバック（rollback）&lt;/strong> ）する。トランザクションが失敗した場合には、アプリケーションは安全にリトライできる。トランザクションは自然法則ではなく、データベースにアクセスするアプリケーションのためのプログラミングモデルをシンプルにするという目的を持って生み出された。トランザクションを利用すれば、ある種の潜在的なエラーの状況や並行性の問題はデータベースが面倒を見てくれるので、アプリケーションはそれらを気にしなくてよくなる（このことは &lt;strong>安全性の保証&lt;/strong> と呼ばれる）。&lt;/p>
&lt;p>トランザクションが提供する安全性の保証は &lt;strong>ACID&lt;/strong> で示される。&lt;/p>
&lt;h5 id="原子性-atomicity">原子性 (Atomicity)&lt;/h5>
&lt;ul>
&lt;li>&lt;strong>原子（アトミック）&lt;/strong> はそれ以上小さな部分に分割できないものを指して使われる言葉&lt;/li>
&lt;li>マルチスレッドのプログラミングにおいては、あるスレッドがアトミックな処理を実行しているというなら、それは他のスレッドからはその処理の半分だけ完了した途中の状態を見る方法が存在しないことを意味する。システムが取りえる状態は、その処理が始まる前と終わった後の状態だけであり、その中間の状態になることはない
&lt;ul>
&lt;li>前にメモリモデルの文脈で、あるプロセスが書き込み完了したデータが、他のプロセスからも確実に読めることをアトミックな操作と習ったことがある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>原子性と並行性は関係がない&lt;/li>
&lt;li>エラーの際にトランザクションを中断し、そのトランザクションのすべての書き込みを破棄できることが、 ACID の原子性を決定づける特徴と言える
&lt;ul>
&lt;li>アプリケーションがリトライしても安全であることを保証する&lt;/li>
&lt;li>&lt;strong>中断可能性（abortability）&lt;/strong> の方が原子性よりも良い言葉だったと思われる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="一貫性-consistency">一貫性 (Consistency)&lt;/h4>
&lt;ul>
&lt;li>一貫性は多くの意味で使われる
&lt;ul>
&lt;li>とくに日本語では整合性とも訳される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>非同期のレプリケーションシステムでは結果整合性の問題が発生する (5章)&lt;/li>
&lt;li>コンシステントハッシュ法は、リバランシングのためにいくつかのシステムで利用されているパーティショニングのアプローチ&lt;/li>
&lt;li>CAP 定理では、一貫性という言葉は線形化可能性の意味で使われる (9章)&lt;/li>
&lt;li>ACID の文脈における一貫性は、データベースが「良い状態」にあることを示すアプリケーション固有の概念を指す&lt;/li>
&lt;/ul>
&lt;p>同じ言葉を少なくとも4つの異なる意味で使われている。ACID における一貫性という概念は、データについて常に真でなければならない何らかの言明（ &lt;strong>不変性&lt;/strong> ）があることを指す。たとえば、会計システムの場合、すべてのアカウントでまとめれば常に貸方と借方は等しくならなければならない。この一貫性の概念はアプリケーション固有の不変性の概念に依存しており、一貫性を保つようにトランザクションを適切に定義することはアプリケーションの責任となる。原子性、分離性、永続性はデータベースの特性だが、一貫性は（ ACID という考え方においては）アプリケーションの特性である。したがって、 C は実際には ACID に属していない。&lt;/p>
&lt;h4 id="分離性-isolation">分離性 (Isolation)&lt;/h4>
&lt;p>多くのデータベースは、同時に複数のクライアントからアクセスされる。データベース中の同じレコードにアクセスするときに並行性の問題（レース条件［ race condition ］）が生じる可能性がある。データベース中に保存されているカウンタを、2つのクライアントが同時にインクリメントすると仮定する。それぞれのクライアントは現在の値を読み取り、1を加え、新しい値を書き戻す。ACID における分離性とは、並行して実行されたトランザクションがお互いから分離されており、お互いのつま先を踏みつけあうようなことがないという意味である。実際の運用では、パフォーマンスの制約から分離レベルによって保証される分離性が変わってくる。&lt;/p>
&lt;h4 id="永続性-durability">永続性 (Durability)&lt;/h4>
&lt;p>データベースシステムが目的とするのは、データを失う恐れなく保存できる安全な場所を提供すること。永続性は、トランザクションのコミットが成功したら、仮にハードウェアの障害やデータベースのクラッシュがあったとしても、そのトランザクションで書き込まれたすべてのデータは失われないことを約束する。&lt;/p>
&lt;h4 id="用語の整理">用語の整理&lt;/h4>
&lt;p>トランザクションはデータモデルがどういったものであるかにかかわらず、価値あるデータベースの機能と言える。並行に実行されたトランザクションがお互いに影響しあわない分離性における保証を &lt;strong>分離レベル&lt;/strong> と呼ぶ。&lt;/p>
&lt;ul>
&lt;li>read committed&lt;/li>
&lt;li>スナップショット分離（repeatable read とも呼ばれる）&lt;/li>
&lt;li>直列化可能&lt;/li>
&lt;/ul>
&lt;p>これらの分離レベルに対してトランザクションで発生する様々なレース条件がある。&lt;/p>
&lt;ul>
&lt;li>ダーティリード
&lt;ul>
&lt;li>あるクライアントが他のクライアントのまだコミットされていない書き込みを読める&lt;/li>
&lt;li>read committed 分離レベル及びそれ以上に強い分離レベルはダーティリードは生じない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ダーティライト
&lt;ul>
&lt;li>あるクライアントが他のクライアントによるまだコミットされていない書き込みの内容を上書きしてしまう&lt;/li>
&lt;li>ほぼすべてのトランザクションの実装は、ダーティライトを生じない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>読み取りスキュー（nonrepeatable read）
&lt;ul>
&lt;li>クライアントが異なる時刻にデータベースの異なる部分を見ること&lt;/li>
&lt;li>この問題の最も一般的な回避策はスナップショット分離によるもので、これはトランザクションがある時点での一貫したスナップショットから読み取りを行えるようにする&lt;/li>
&lt;li>通常、MVCC（multi-version concurrency control）を利用して実装される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>更新のロスト
&lt;ul>
&lt;li>2つのクライアントが並行して read-modify-write サイクルを実行するとき、片方が他方の書き込みをその変更内容を考慮せずに上書きしてしまい、データが失われること&lt;/li>
&lt;li>スナップショット分離レベルの実装にはこの異常を自動的に回避してくれるものもあるが、明示的なロック（ SELECT FOR UPDATE ）をしなければならない実装もある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>書き込みスキュー
&lt;ul>
&lt;li>トランザクションが何かを読み取り、その値に基づいて判断を下し、その結果をデータベースに書き込む&lt;/li>
&lt;li>この状況で、書き込みが行われた時点で判断の根拠となったプレミスが真ではなくなっている場合を指す&lt;/li>
&lt;li>直列化可能分離レベルのみがこの異常を回避できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ファントムリード
&lt;ul>
&lt;li>トランザクションが何らかの検索条件にマッチするオブジェクトを読み取り、他のクライアントはその検索結果に影響する書き込みを行う&lt;/li>
&lt;li>スナップショット分離レベルは単純なファントムリードを回避してくれるが、書き込みスキューを伴うファントムに対してはインデックス範囲ロックのような特別な対応が必要となる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>弱い分離レベルは、これらの異常のいくつかを防いでくれるが、それ以外はアプリケーション開発者に対処する必要がある（たとえば明示的なロックなど）。すべての問題に対する保護を提供してくれるのは直列化可能分離レベルのみ。直列化可能なトランザクションの実装方法は、3 種類ある。&lt;/p>
&lt;ul>
&lt;li>トランザクションを順次実行する
&lt;ul>
&lt;li>それぞれのトランザクションをきわめて高速に実行でき、加えて単一の CPU コアで十分処理できる程度にトランザクションのスループットが低いのであれば、これはシンプルで効果的な選択肢となる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ツーフェーズロック
&lt;ul>
&lt;li>数十年にわたって直列化可能分離レベルの実装において標準的な方法であった&lt;/li>
&lt;li>パフォーマンス上の特性から多くのアプリケーションがツーフェーズロックの利用は避けている&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>直列化可能スナップショット分離（SSI、serializable snapshot isolation）
&lt;ul>
&lt;li>新しいアルゴリズムであり、これまでのアプローチが持つ欠点のほとんどを回避している&lt;/li>
&lt;li>SSI は楽観的アプローチを取っており、トランザクションはブロックされることなく処理を進められる&lt;/li>
&lt;li>トランザクションはコミットの時点でチェックされ、その実行が直列化可能になっていなければ中断される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="改正法人税法等の説明会">改正法人税法等の説明会&lt;/h2>
&lt;p>&lt;a href="https://www.nk-net.co.jp/kobe/assets/files/schedule/2021/211019.pdf">改正法人税法等の説明会&lt;/a> に参加してきた。所感からまとめるとこんな感じ。&lt;/p>
&lt;ul>
&lt;li>神戸文化ホールについて
&lt;ul>
&lt;li>電源がない&lt;/li>
&lt;li>FREESPOT が提供されていてフリー wifi として利用できるが、通信品質は不安定
&lt;ul>
&lt;li>スマホでテザリングもやってみたが、電波状態がよくなくてもっと不安定&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ラップトップ向きの場所ではない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>税制を身近にするイベントとしては参加してもよい&lt;/li>
&lt;li>もらった資料をたんたんと説明するだけなのでイベントに参加することで得られる付加価値はとくにない&lt;/li>
&lt;li>気分転換や時間があれば参加すればいい、忙しかったら参加しなくてもよさそう&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.nk-net.co.jp/kobe/index.html">公益社団法人 神戸納税協会&lt;/a> という組織がある。年会費 (うちの会社だと7,800円) がいるのでいまは入らないけど、無料税務相談があるので余裕ができたら困ったときの相談相手になってもらう意図で入会してもよいかもしれない。冒頭の神戸税務署長の挨拶で法人税の申告における e-tax の利用率は 88.4% だと話してた。うちは紙で申請しているので意外とみんな e-tax 使っているんだなと自社を恥じた。だって Windows マシンないとできへんねんもん。参加したことによる学びとして書いていくとこれらかな。&lt;/p>
&lt;ul>
&lt;li>「研究開発費」は会計上の用語、「試験研究費」は税法上の用語&lt;/li>
&lt;li>DX 投資促進税制の創設&lt;/li>
&lt;/ul>
&lt;p>内容は基本知らないことなので、知らないことに触れるイベントという点では斬新ではあった。ほうほうと聞いてただけなんだけど。直接うちの会社に影響を与える税法の改正はインボイス制度ぐらいかな。&lt;/p></content></item><item><title>とくに何もない一日</title><link>/diary/posts/2021/1018/</link><pubDate>Mon, 18 Oct 2021 09:56:19 +0900</pubDate><guid>/diary/posts/2021/1018/</guid><description>いつ寝たのか覚えてないけど、スマホをみたら1時過ぎに寝て6時に起きたことになっている。だいたいいつも5-6時には一度目が覚める。そのまま起きるときもあれば起きないときもある。今日はちゃんと起き上がったのは7-8時ぐらいだった気がする。夜にジョギング行こうかとも考えていただけど、帰って先に晩ご飯食べたら疲れてそのままだらだらしてた。
エージェント面談 そろそろ次のお仕事を探す準備のために エンジニアファクトリー というサービスに登録してみた。KOBE JOB PORT で紹介されていたのをみつけた。前に Remogu さんで探していた ように、プロジェクトマネージャー案件か、リモートワークの開発者案件を探している。マネージャーだと常駐系の方が多かったり、実務経験必須だったりすることが多いため、神戸から通える範囲の案件も探してみようという意図になる。だいたいこんな内容を話してた。
職務経歴の内容から個人を特定できないよう、エージェントがブラインド化した資料を企業に公開する 単価が高い案件は東京の会社のリモートワークに多い 契約は準委任契約がほとんどである 法人として契約もできる 6ヶ月や1年といった短期開発案件も多い 求職者の情報を匿名化する背景は、企業が直接交渉するのを避けるためなのかな？求人プラットフォームごとに情報入力しないといけないのが面倒なところ。
データ指向アプリケーションデザイン 7章トランザクションのうち、7.1と7.2を読んだ。トランザクションの章は内容も難しく量も多いので2日にかけて読むことにする。昔、業務アプリケーションやグループウェアを開発していたときはトランザクションを意識してコードを書いていたけど、Web アプリケーションを開発していると、あまりクリティカルな処理を実装することが少ないせいか、トランザクションをそんな意識しなくなったなと漠然と思えた。Cassandra だとトランザクションもないし。非同期 + 結果整合性で運用できるアプリケーションであればトランザクションいらないというのはそうなのかもしれない。</description><content>&lt;p>いつ寝たのか覚えてないけど、スマホをみたら1時過ぎに寝て6時に起きたことになっている。だいたいいつも5-6時には一度目が覚める。そのまま起きるときもあれば起きないときもある。今日はちゃんと起き上がったのは7-8時ぐらいだった気がする。夜にジョギング行こうかとも考えていただけど、帰って先に晩ご飯食べたら疲れてそのままだらだらしてた。&lt;/p>
&lt;h2 id="エージェント面談">エージェント面談&lt;/h2>
&lt;p>そろそろ次のお仕事を探す準備のために &lt;a href="https://www.engineer-factory.com/">エンジニアファクトリー&lt;/a> というサービスに登録してみた。&lt;a href="https://www.city.kobe.lg.jp/life/livelihood/kobejobport/index.html">KOBE JOB PORT&lt;/a> で紹介されていたのをみつけた。&lt;a href="/diary/diary/posts/2021/0930/#カジュアル面談準備">前に Remogu さんで探していた&lt;/a> ように、プロジェクトマネージャー案件か、リモートワークの開発者案件を探している。マネージャーだと常駐系の方が多かったり、実務経験必須だったりすることが多いため、神戸から通える範囲の案件も探してみようという意図になる。だいたいこんな内容を話してた。&lt;/p>
&lt;ul>
&lt;li>職務経歴の内容から個人を特定できないよう、エージェントがブラインド化した資料を企業に公開する&lt;/li>
&lt;li>単価が高い案件は東京の会社のリモートワークに多い&lt;/li>
&lt;li>契約は準委任契約がほとんどである&lt;/li>
&lt;li>法人として契約もできる&lt;/li>
&lt;li>6ヶ月や1年といった短期開発案件も多い&lt;/li>
&lt;/ul>
&lt;p>求職者の情報を匿名化する背景は、企業が直接交渉するのを避けるためなのかな？求人プラットフォームごとに情報入力しないといけないのが面倒なところ。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>7章トランザクションのうち、7.1と7.2を読んだ。トランザクションの章は内容も難しく量も多いので2日にかけて読むことにする。昔、業務アプリケーションやグループウェアを開発していたときはトランザクションを意識してコードを書いていたけど、Web アプリケーションを開発していると、あまりクリティカルな処理を実装することが少ないせいか、トランザクションをそんな意識しなくなったなと漠然と思えた。Cassandra だとトランザクションもないし。非同期 + 結果整合性で運用できるアプリケーションであればトランザクションいらないというのはそうなのかもしれない。&lt;/p></content></item><item><title>豆苗再生</title><link>/diary/posts/2021/1017/</link><pubDate>Sun, 17 Oct 2021 13:54:30 +0900</pubDate><guid>/diary/posts/2021/1017/</guid><description>3時に寝て8時半に起きた。夜眠れなくて、野菜サラダに目玉焼きをのせて食べたり、お茶をわかしてボトルに入れ替えたりしてた。休日だと時間に余裕があるせいか、空き時間に自炊してなにか作ることが多い。
豆苗の再生栽培 朝ご飯は野菜サラダと納豆を、お昼ご飯は豚肉としめじと2回目の豆苗を炒めたものを目玉焼きでとじたものを食べた。豆苗のパッケージに食べた後の根を水に浸しておけばまた生えてくるとあったので試しにやってみた。キッチンという日当たりのよくない場所で育てたせいか、薄い緑色の苗が生えてきた。
水に浸して2日目
水に浸して6日目
今回は適当に育てた。再生栽培のコツ を読んで次はもうちょっとちゃんと育ててみよう。
データ指向アプリケーションデザイン 6章パーティショニングを読んだ。昔からパーティショニングとシャーディングの違いはなんだろう？と漠然と思っていた。パーティションの設計 を読むと、3つのパーティション分割があげられている。
水平的パーティション分割 (シャーディング) 列方向のパーティション分割 機能的パーティション分割 パーティショニングは大規模なデータセットをデータ分割するための手法または概念として広い意味をもって使われるように読める。一方でシャーディングと呼ばれるものは水平パーティショニングのことを指している。いま分散データベースで一般的に使われている仕組みがそうなのかもしれない。本書では水平・垂直のパーティショニングの定義は行われていないが、次の説明が出てくる。おそらく主に水平パーティショニングを意図しているのではないかと思う。まとめはこんな感じ。
用語の混乱
ここで パーティション と呼んでいるものは、 MongoDB 、 Elasticsearch 、 SolrCloud では シャード と呼ばれています。これは HBase では リージョン 、 Bigtable では タブレット 、Cassandra や Riak では vnode 、 Couchbase では vBucket と呼ばれています。とはいえ最も確立されている用語は パーティショニング なので、本書ではこの呼び方を使っていきます。
パーティショニングも普通に開発をしていたらデータベースの設計で必要になるので身近な概念と言える。だいたいは知っている内容ではあったけど、パーティショニングとセカンダリインデックスの仕組みとか考えたことがなかった。Cassandra ではセカンダリインデックスをうまく設計しないとパフォーマンスに影響を与えることからあまり使われない傾向にあると思う。
大規模なデータセットを小さな部分集合にデータ分割することをパーティショニングと呼ぶ。パーティショニングが必要になるのは、単一のマシンで保存や処理をするのが現実的ではないほどのデータがある場合になる。パーティショニングが目標とするのは、データやクエリの負荷を複数のマシン間で均等に分配し、ホットスポット（不均衡に高い負荷がかかるノード）が生じないようにすること。パーティショニングが均等になっておらず、一部のパーティションが他に比べて多くのデータやクエリを受け持っているような状態は スキュー（skew） と呼ばれる。そのためには、データに適したパーティショニングのスキームを選択し、クラスタへのノードの追加やクラスタからのノードの削除が生じたときにパーティション群をリバランシングする。
パーティショニングのアプローチとして主に2つがある。
キーの範囲によるパーティショニング キーはソートされ、1つのパーティションには何らかの最小値と最大値の間にあるすべてのキーが保存される キーをソートすることで、範囲に対するクエリが効率的に処理できるというメリットがある アプリケーションが頻繁にアクセスするキーがソート順の中で近接していると、ホットスポットが生じるリスクがある 通常このアプローチでは、パーティションのリバランシングはパーティションが大きくなりすぎたときにその範囲を2つに分割することによって動的に行われる ハッシュパーティショニング ハッシュ関数がそれぞれのキーに対して適用され、1つのパーティションにはハッシュの一定の範囲を保存される この方法ではキーの順序が失われるので範囲に対するクエリは非効率になるが、負荷分散より均等にしやすい ハッシュによってパーティショニングを行う場合は、事前に固定数のパーティションを作成し、各ノードに複数のパーティションを割り当てておき、ノードの追加や削除が行われた場合にはパーティションをそのままあるノードから他のノードに移動させるのが一般的となる。また、動的パーティショニングも利用できる ハイブリッドなアプローチを取ることもできる。たとえば複合キーを使い、キーの一部でパーティションを決め、他の部分でソート順を決めるといったやり方がある。Cassandra のプライマリーキーはこのアプローチを採用している。また、セカンダリインデックスもパーティショニングする方法が2つある。</description><content>&lt;p>3時に寝て8時半に起きた。夜眠れなくて、野菜サラダに目玉焼きをのせて食べたり、お茶をわかしてボトルに入れ替えたりしてた。休日だと時間に余裕があるせいか、空き時間に自炊してなにか作ることが多い。&lt;/p>
&lt;h2 id="豆苗の再生栽培">豆苗の再生栽培&lt;/h2>
&lt;p>朝ご飯は野菜サラダと納豆を、お昼ご飯は豚肉としめじと2回目の豆苗を炒めたものを目玉焼きでとじたものを食べた。豆苗のパッケージに食べた後の根を水に浸しておけばまた生えてくるとあったので試しにやってみた。キッチンという日当たりのよくない場所で育てたせいか、薄い緑色の苗が生えてきた。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2021/1017_pea-sprout1.jpg"
alt="水に浸して2日目"/>&lt;figcaption>
&lt;p>水に浸して2日目&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2021/1017_pea-sprout2.jpg"
alt="水に浸して6日目"/>&lt;figcaption>
&lt;p>水に浸して6日目&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>今回は適当に育てた。&lt;a href="https://www.murakamifarm.com/myouken/grow/technique/#where">再生栽培のコツ&lt;/a> を読んで次はもうちょっとちゃんと育ててみよう。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>6章パーティショニングを読んだ。昔からパーティショニングとシャーディングの違いはなんだろう？と漠然と思っていた。&lt;a href="https://docs.microsoft.com/ja-jp/azure/architecture/best-practices/data-partitioning#designing-partitions">パーティションの設計&lt;/a> を読むと、3つのパーティション分割があげられている。&lt;/p>
&lt;ul>
&lt;li>水平的パーティション分割 (シャーディング)&lt;/li>
&lt;li>列方向のパーティション分割&lt;/li>
&lt;li>機能的パーティション分割&lt;/li>
&lt;/ul>
&lt;p>パーティショニングは大規模なデータセットをデータ分割するための手法または概念として広い意味をもって使われるように読める。一方でシャーディングと呼ばれるものは水平パーティショニングのことを指している。いま分散データベースで一般的に使われている仕組みがそうなのかもしれない。本書では水平・垂直のパーティショニングの定義は行われていないが、次の説明が出てくる。おそらく主に水平パーティショニングを意図しているのではないかと思う。まとめはこんな感じ。&lt;/p>
&lt;blockquote>
&lt;p>用語の混乱&lt;/p>
&lt;p>ここで パーティション と呼んでいるものは、 MongoDB 、 Elasticsearch 、 SolrCloud では &lt;strong>シャード&lt;/strong> と呼ばれています。これは HBase では &lt;strong>リージョン&lt;/strong> 、 Bigtable では &lt;strong>タブレット&lt;/strong> 、Cassandra や Riak では &lt;strong>vnode&lt;/strong> 、 Couchbase では &lt;strong>vBucket&lt;/strong> と呼ばれています。とはいえ最も確立されている用語は &lt;strong>パーティショニング&lt;/strong> なので、本書ではこの呼び方を使っていきます。&lt;/p>
&lt;/blockquote>
&lt;p>パーティショニングも普通に開発をしていたらデータベースの設計で必要になるので身近な概念と言える。だいたいは知っている内容ではあったけど、パーティショニングとセカンダリインデックスの仕組みとか考えたことがなかった。Cassandra ではセカンダリインデックスをうまく設計しないとパフォーマンスに影響を与えることからあまり使われない傾向にあると思う。&lt;/p>
&lt;blockquote>
&lt;p>大規模なデータセットを小さな部分集合にデータ分割することをパーティショニングと呼ぶ。パーティショニングが必要になるのは、単一のマシンで保存や処理をするのが現実的ではないほどのデータがある場合になる。パーティショニングが目標とするのは、データやクエリの負荷を複数のマシン間で均等に分配し、&lt;strong>ホットスポット&lt;/strong>（不均衡に高い負荷がかかるノード）が生じないようにすること。パーティショニングが均等になっておらず、一部のパーティションが他に比べて多くのデータやクエリを受け持っているような状態は &lt;strong>スキュー（skew）&lt;/strong> と呼ばれる。そのためには、データに適したパーティショニングのスキームを選択し、クラスタへのノードの追加やクラスタからのノードの削除が生じたときにパーティション群をリバランシングする。&lt;/p>
&lt;p>パーティショニングのアプローチとして主に2つがある。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>キーの範囲によるパーティショニング&lt;/strong>
&lt;ul>
&lt;li>キーはソートされ、1つのパーティションには何らかの最小値と最大値の間にあるすべてのキーが保存される&lt;/li>
&lt;li>キーをソートすることで、範囲に対するクエリが効率的に処理できるというメリットがある&lt;/li>
&lt;li>アプリケーションが頻繁にアクセスするキーがソート順の中で近接していると、ホットスポットが生じるリスクがある&lt;/li>
&lt;li>通常このアプローチでは、パーティションのリバランシングはパーティションが大きくなりすぎたときにその範囲を2つに分割することによって動的に行われる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>ハッシュパーティショニング&lt;/strong>
&lt;ul>
&lt;li>ハッシュ関数がそれぞれのキーに対して適用され、1つのパーティションにはハッシュの一定の範囲を保存される&lt;/li>
&lt;li>この方法ではキーの順序が失われるので範囲に対するクエリは非効率になるが、負荷分散より均等にしやすい&lt;/li>
&lt;li>ハッシュによってパーティショニングを行う場合は、事前に固定数のパーティションを作成し、各ノードに複数のパーティションを割り当てておき、ノードの追加や削除が行われた場合にはパーティションをそのままあるノードから他のノードに移動させるのが一般的となる。また、動的パーティショニングも利用できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>ハイブリッドなアプローチを取ることもできる。たとえば複合キーを使い、キーの一部でパーティションを決め、他の部分でソート順を決めるといったやり方がある。Cassandra のプライマリーキーはこのアプローチを採用している。また、セカンダリインデックスもパーティショニングする方法が2つある。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ドキュメントによってパーティショニングされたインデックス（ローカルインデックス）&lt;/strong>
&lt;ul>
&lt;li>セカンダリインデックスをプライマリキー及び値と同じパーティションに保存する&lt;/li>
&lt;li>書き込みの際に更新しなければならないパーティションが1つですむ&lt;/li>
&lt;li>セカンダリインデックスの読み取りにはすべてのパーティションに対する &lt;strong>スキャッタ/ギャザー&lt;/strong> が必要となる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>語によってパーティショニングされたインデックス（グローバルインデックス）&lt;/strong>
&lt;ul>
&lt;li>セカンダリインデックスはインデックスが張られた値を使って独立にパーティショニングされる&lt;/li>
&lt;li>セカンダリインデックスのエントリには、プライマリキーのあらゆるパーティションのレコード群が含まれる&lt;/li>
&lt;li>ドキュメントが書き込まれる際には、セカンダリインデックスの複数のパーティションを更新しなければならない&lt;/li>
&lt;li>読み取りは単一のパーティションだけで処理できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>クエリを適切なパーティションにルーティングする手法は、データベースに限った話題ではなく、&lt;strong>サービスディスカバリ&lt;/strong> と呼ばれる一般的な問題である。有名な OSS として &lt;a href="https://zookeeper.apache.org/">ZooKeeper&lt;/a> がある。これにはシンプルなパーティションを認識するロードバランシングから、洗練された並列クエリ実行エンジンまで様々である。すべてのパーティションは、ほぼ独立に動作できるように設計されている。パーティショニングされたデータベースが複数のマシンにまでスケールできるのはそのおかげである。&lt;/p>
&lt;/blockquote></content></item><item><title>閃光のハサウェイ見直し</title><link>/diary/posts/2021/1016/</link><pubDate>Sat, 16 Oct 2021 09:56:41 +0900</pubDate><guid>/diary/posts/2021/1016/</guid><description>2時に寝て6時半に起きた。連日ジョギングして体を動かしたせいか、よく眠れて体調がよい気がした。機動戦士ガンダム 閃光のハサウェイ が今日からオンライン配信を開始した。私は載っているどの動画配信プラットフォームも使ってないが、iTunes Store で普通に購入できるようになっているのに気付いた。昨日の夜は閃光のハサウェイをみながら寝落ちしたので朝起きてから途中から見直した。映画館でみてたけど、戦闘のシーンは暗くてよくわからなかったので何回かみた方が発見もあるかもしれない。市街地の降ってくる炎を避けて逃げるシーンが好き。
ストレッチ 一昨日、昨日と連日でジョギングしたせいか、右股関節からお尻と右ももにかけて筋肉痛で張りがあった。そのせいかもしれないけど、今日の開脚幅は開始前168cmで、ストレッチ後170cmだった。先週とほぼ変わらないので股関節の可動域は現状維持だった。それでもトレーナーさんに筋肉痛だったところをストレッチしてもらってかなり楽になった。ジョギングして痛くなる内容が、最近は関節の痛みから筋肉の張りになっている気がしてこれはよい傾向かもしれない。前は腰にも負担がきていたけど、それも少しましになった。今日は可もなく不可もなくといったところか。
VR イベント参加 【三宮.dev オンライン】３周年記念交流会 に参加した。cluster のイベントを開いた。Oculus Quest で VR 参加できるのは Windows 向けのアプリだけっぽく macOS では VR 参加できなかった。
オープンなイベントとして開催したので誰でも参加することができて、途中で子どもが入ってきて参加者に無邪気に質問して微笑ましいカオスをもたらしていた。大人はよく知らないイベントに入って、なんの前提知識もなく参加者に話しかけたりしないだろう。そういうやり取りをみていて、子どものときから VR 空間でいろんな人と接すると子どもたちはどんな大人になるんだろう？私では想像もつかないイノベーションを起こすんだろうな。
1.5年前に1度だけ macOS のアプリで cluster イベント参加したことがあった。アプリは3回ぐらい落ちて不安定なので途中で Web でみたりしてた。そのときに比べたら今日は1度も落ちなかったので安定していた。参加者数の違いによるものかもしれないけど。前回から1.5年も経っているのに機能的なものは何も変わってないようにみえてあんまり流行ってないのかな？とも思えた。
参加者にたぬきのアバターがいて「たぬきさん、いますね」みたいな感じで和んでた。動物のアバターいいなと思って、カスタムアバターに興味がでた。VRoidStudio を使えば作れるらしい。また REALITY で作ったアバターを cluster で REALITY 連携 して使うこともできるらしい。Oculus ブログの記事 をみてたら Oculus は Oculus で独自のアバターの仕組みになるのかな。外部のツールで作ったカスタムアバターを持ち込めるようにはみえない。
Slack apps の調査 Wrangle を試してみた。
Approval and Ticketing Workflows in Slack
3つの機能をもっている。
ちょっとした ToDo リスト管理 承認依頼を管理 ステップと承認のワークフローを管理 とくに SaaS 型の Web アプリケーションもなく Slack app 単体で完結するアプリケーションにみえる。組織として承認履歴を残したいといったときにチャットツール上でワークフローを定義してちゃちゃっとできるといったところが売りなのではないかと推測する。課題管理として使うアプリケーションではなかった。</description><content>&lt;p>2時に寝て6時半に起きた。連日ジョギングして体を動かしたせいか、よく眠れて体調がよい気がした。&lt;a href="http://gundam-hathaway.net/news.php?id=19157">機動戦士ガンダム 閃光のハサウェイ&lt;/a> が今日からオンライン配信を開始した。私は載っているどの動画配信プラットフォームも使ってないが、iTunes Store で普通に購入できるようになっているのに気付いた。昨日の夜は閃光のハサウェイをみながら寝落ちしたので朝起きてから途中から見直した。映画館でみてたけど、戦闘のシーンは暗くてよくわからなかったので何回かみた方が発見もあるかもしれない。市街地の降ってくる炎を避けて逃げるシーンが好き。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>一昨日、昨日と連日でジョギングしたせいか、右股関節からお尻と右ももにかけて筋肉痛で張りがあった。そのせいかもしれないけど、今日の開脚幅は開始前168cmで、ストレッチ後170cmだった。先週とほぼ変わらないので股関節の可動域は現状維持だった。それでもトレーナーさんに筋肉痛だったところをストレッチしてもらってかなり楽になった。ジョギングして痛くなる内容が、最近は関節の痛みから筋肉の張りになっている気がしてこれはよい傾向かもしれない。前は腰にも負担がきていたけど、それも少しましになった。今日は可もなく不可もなくといったところか。&lt;/p>
&lt;h2 id="vr-イベント参加">VR イベント参加&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/225590/">【三宮.dev オンライン】３周年記念交流会&lt;/a> に参加した。&lt;a href="https://cluster.mu/">cluster&lt;/a> のイベントを開いた。Oculus Quest で VR 参加できるのは Windows 向けのアプリだけっぽく macOS では VR 参加できなかった。&lt;/p>
&lt;p>オープンなイベントとして開催したので誰でも参加することができて、途中で子どもが入ってきて参加者に無邪気に質問して微笑ましいカオスをもたらしていた。大人はよく知らないイベントに入って、なんの前提知識もなく参加者に話しかけたりしないだろう。そういうやり取りをみていて、子どものときから VR 空間でいろんな人と接すると子どもたちはどんな大人になるんだろう？私では想像もつかないイノベーションを起こすんだろうな。&lt;/p>
&lt;p>1.5年前に1度だけ macOS のアプリで cluster イベント参加したことがあった。アプリは3回ぐらい落ちて不安定なので途中で Web でみたりしてた。そのときに比べたら今日は1度も落ちなかったので安定していた。参加者数の違いによるものかもしれないけど。前回から1.5年も経っているのに機能的なものは何も変わってないようにみえてあんまり流行ってないのかな？とも思えた。&lt;/p>
&lt;p>参加者にたぬきのアバターがいて「たぬきさん、いますね」みたいな感じで和んでた。動物のアバターいいなと思って、カスタムアバターに興味がでた。&lt;a href="https://vroid.com/en/studio">VRoidStudio&lt;/a> を使えば作れるらしい。また &lt;a href="https://reality.app/">REALITY&lt;/a> で作ったアバターを cluster で &lt;a href="https://clusterhelp.zendesk.com/hc/ja/articles/360044037491-REALITY-%E9%80%A3%E6%90%BA%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">REALITY 連携&lt;/a> して使うこともできるらしい。&lt;a href="https://www.oculus.com/blog/new-day-new-you-avatars-are-more-expressive-and-customizable-starting-today/">Oculus ブログの記事&lt;/a> をみてたら Oculus は Oculus で独自のアバターの仕組みになるのかな。外部のツールで作ったカスタムアバターを持ち込めるようにはみえない。&lt;/p>
&lt;h2 id="slack-apps-の調査">Slack apps の調査&lt;/h2>
&lt;p>&lt;a href="https://www.wrangle.io/">Wrangle&lt;/a> を試してみた。&lt;/p>
&lt;blockquote>
&lt;p>Approval and Ticketing Workflows in Slack&lt;/p>
&lt;/blockquote>
&lt;p>3つの機能をもっている。&lt;/p>
&lt;ul>
&lt;li>ちょっとした ToDo リスト管理&lt;/li>
&lt;li>承認依頼を管理&lt;/li>
&lt;li>ステップと承認のワークフローを管理&lt;/li>
&lt;/ul>
&lt;p>とくに SaaS 型の Web アプリケーションもなく Slack app 単体で完結するアプリケーションにみえる。組織として承認履歴を残したいといったときにチャットツール上でワークフローを定義してちゃちゃっとできるといったところが売りなのではないかと推測する。課題管理として使うアプリケーションではなかった。&lt;/p></content></item><item><title>日本酒いただきもの</title><link>/diary/posts/2021/1015/</link><pubDate>Fri, 15 Oct 2021 09:39:41 +0900</pubDate><guid>/diary/posts/2021/1015/</guid><description>0時に寝て6時に起きた。だいたい夜中に2-3回は起きるのが普通になりつつあって、前日ジョギングしてたせいか腰やお尻の筋肉に張りがあったので3時頃起きてストレッチして張りの箇所を伸ばしたりしながら寝てた。午前中、いけさんから上等なお酒をいただいた。造り酒屋の一族らしい。感謝。
朝活 朝起きる目的にいいかも？と思って Webデザイントレンドのよりみち の金朝つめとぎに参加してみた。やっぱり目的があれば6時に起きれる。でも、終わってから1時間ほど寝てたので今日はプラスマイナスゼロ。前回の朝活 と同様、ミクロ経済学の入門書を読んでた。第2章の予算線と最適化を読んだ。経済学とはこういうものだという説明が腑におちた。当たるかどうかよりも考え方を理解しておく方が大事なように思えた。
ときどき経済学に対して「経済学が想定するほど実際の消費者は懸命に選択しているとは限らない」といった批判がなされることがある。でもこれまでの説明から明らかなように、その批判は勘違いにもとづくものだ。批判したいなら「経済学は、消費者がはたから見て確実に愚かな選択をしても、それを非難しない傾向が強い」というほうが適切だろう。
もう1つおもしろかったのがこの一節。
予算線と選好を用いたミクロ経済学的分析は、現金給付のよさを指摘する。ただし、制度の悪用、人々の支持、必要原理といったことを考えると、現物給付のほうが好ましいとなる。現金給付と現物給付のどちらが総合的によいのか、これらの話だけで結論づけることはできない。とはいえここで、ミクロ経済学が有用な政策分析ツールたりえること、またミクロ経済学だけで政策を論じるのは不十分ということが分かったのは十分な収穫である。
人間の活動を予測するような学問の便宜上、前提条件や制約を課している。経済という人間にとって重要な社会システムを扱う経済学への期待値が大き過ぎるがために経済学の言うことが当たった・当たってないといった議論になりがちなのかもしれないと思えた。
データ指向アプリケーションデザイン 5章レプリケーションを読んだ。200ページ超えたことで1/3を読み終えた。まだまだ先は長い。
シングルリーダーレプリケーションは一般的なものだし、Cassandra の運用をしていたのでリーダーレスレプリケーションもだいたいは知っていた。並行書き込みの問題は意識したことがなかった。そういう状況が発生するアプリケーションにおいてはとても難しい問題なことが理解できた。Cassandra で採用されている衝突解決アルゴリズムは 最後の書き込みを勝たせる（last write wins、LWW） というものであり、これで十分なように考えていたけど、不十分なケースもあることがわかった。
レプリケーションとは、ネットワークで接続された複数のマシンに同じデータのコピーを保持しておくこと。
データを地理的にユーザーの近くで保持しておく =&amp;gt; レイテンシを下げる 一部に障害があってもシステムが動作し続けられる =&amp;gt; 可用性を高める 読み取りクエリを処理するマシンをスケールアウトする =&amp;gt; スループットを高める レプリケーションはいくつかの目的で使われる。
高可用性/耐障害性 レイテンシ スケーラビリティ 対象のデータが時間が経っても変化しないのであれば、レプリケーションは容易。単にデータのコピーを各ノードに一度だけコピーすれば完了するから。レプリケーションの難しさは、すべてレプリケーションされたデータへの変更の扱いから生じる。変更をノード間でレプリケーションするのに広く使われているアルゴリズムは次の3つになる。
シングルリーダーレプリケーション クライアントはすべての書き込みを1つのノード（リーダー）に送り、リーダーはデータ変更イベントのストリームを他のレプリカ（フォロワー）に送る 読み取りは任意のレプリカから行えるが、フォロワーから読み取るデータは古い可能性がある マルチリーダーレプリケーション クライアント群は、それぞれの書き込みを複数あるリーダーノードのいずれかに送信する これらのリーダーノードはどれも書き込みを受け付ける リーダー群は、データ変更イベントのストリームをお互いに、そしてすべてのフォロワーノードに送信する リーダーレスレプリケーション クライアントは、それぞれの書き込みを複数のノードに送信し、古いデータを持つノードを修正するために読み取りを複数のノードから並列に行う データベースのレプリケーションの原理は1970年代から研究されていてそれほど変わっていない。とはいえ、分散データベースがメインストリームで利用されるようになったのは最近のこと。アプリケーション開発者の経験不足により 結果整合性 のような問題に関しては多くの誤解が生じた。いずれのレプリケーションのアプローチにもメリットとデメリットがある。シングルリーダーレプリケーションは理解しやすく、衝突解決を気にする必要がないことから、広く使われている。マルチリーダーとリーダーレスのレプリケーションは、ノードの障害、ネットワークの障害、レイテンシのスパイクがあっても頑健になる。しかし障害の理由を説明するのが難しく、一貫性についても弱い保証しか示せない。
レプリケーションは、 同期 で行うことも 非同期 で行うこともできる。どちらにするのかは、障害があったときのシステムの振る舞いに大きく影響する。非同期のレプリケーションは、システムがスムーズに動作しているときには高速に動作するが、重要なのはレプリケーションのラグが大きくなったり、サーバーに障害が生じたりしたときに何が起こるのかを理解しておくことになる。リーダーに障害が発生し、非同期に更新されていたフォロワーを新しいリーダーに昇格させたら、直前にコミットされたデータは失われてしまう可能性がある。</description><content>&lt;p>0時に寝て6時に起きた。だいたい夜中に2-3回は起きるのが普通になりつつあって、前日ジョギングしてたせいか腰やお尻の筋肉に張りがあったので3時頃起きてストレッチして張りの箇所を伸ばしたりしながら寝てた。午前中、いけさんから上等なお酒をいただいた。造り酒屋の一族らしい。感謝。&lt;/p>
&lt;h2 id="朝活">朝活&lt;/h2>
&lt;p>朝起きる目的にいいかも？と思って &lt;a href="https://www.youtube.com/channel/UC1rVx0vAg66su1WvH3X-RJg">Webデザイントレンドのよりみち&lt;/a> の金朝つめとぎに参加してみた。やっぱり目的があれば6時に起きれる。でも、終わってから1時間ほど寝てたので今日はプラスマイナスゼロ。&lt;a href="/diary/diary/posts/2021/1013/#朝活">前回の朝活&lt;/a> と同様、ミクロ経済学の入門書を読んでた。第2章の予算線と最適化を読んだ。経済学とはこういうものだという説明が腑におちた。当たるかどうかよりも考え方を理解しておく方が大事なように思えた。&lt;/p>
&lt;blockquote>
&lt;p>ときどき経済学に対して「経済学が想定するほど実際の消費者は懸命に選択しているとは限らない」といった批判がなされることがある。でもこれまでの説明から明らかなように、その批判は勘違いにもとづくものだ。批判したいなら「経済学は、消費者がはたから見て確実に愚かな選択をしても、それを非難しない傾向が強い」というほうが適切だろう。&lt;/p>
&lt;/blockquote>
&lt;p>もう1つおもしろかったのがこの一節。&lt;/p>
&lt;blockquote>
&lt;p>予算線と選好を用いたミクロ経済学的分析は、現金給付のよさを指摘する。ただし、制度の悪用、人々の支持、必要原理といったことを考えると、現物給付のほうが好ましいとなる。現金給付と現物給付のどちらが総合的によいのか、これらの話だけで結論づけることはできない。とはいえここで、ミクロ経済学が有用な政策分析ツールたりえること、またミクロ経済学だけで政策を論じるのは不十分ということが分かったのは十分な収穫である。&lt;/p>
&lt;/blockquote>
&lt;p>人間の活動を予測するような学問の便宜上、前提条件や制約を課している。経済という人間にとって重要な社会システムを扱う経済学への期待値が大き過ぎるがために経済学の言うことが当たった・当たってないといった議論になりがちなのかもしれないと思えた。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>5章レプリケーションを読んだ。200ページ超えたことで1/3を読み終えた。まだまだ先は長い。&lt;/p>
&lt;p>シングルリーダーレプリケーションは一般的なものだし、Cassandra の運用をしていたのでリーダーレスレプリケーションもだいたいは知っていた。並行書き込みの問題は意識したことがなかった。そういう状況が発生するアプリケーションにおいてはとても難しい問題なことが理解できた。Cassandra で採用されている衝突解決アルゴリズムは &lt;strong>最後の書き込みを勝たせる（last write wins、LWW）&lt;/strong> というものであり、これで十分なように考えていたけど、不十分なケースもあることがわかった。&lt;/p>
&lt;blockquote>
&lt;p>レプリケーションとは、ネットワークで接続された複数のマシンに同じデータのコピーを保持しておくこと。&lt;/p>
&lt;ul>
&lt;li>データを地理的にユーザーの近くで保持しておく =&amp;gt; レイテンシを下げる&lt;/li>
&lt;li>一部に障害があってもシステムが動作し続けられる =&amp;gt; 可用性を高める&lt;/li>
&lt;li>読み取りクエリを処理するマシンをスケールアウトする =&amp;gt; スループットを高める&lt;/li>
&lt;/ul>
&lt;p>レプリケーションはいくつかの目的で使われる。&lt;/p>
&lt;ul>
&lt;li>高可用性/耐障害性&lt;/li>
&lt;li>レイテンシ&lt;/li>
&lt;li>スケーラビリティ&lt;/li>
&lt;/ul>
&lt;p>対象のデータが時間が経っても変化しないのであれば、レプリケーションは容易。単にデータのコピーを各ノードに一度だけコピーすれば完了するから。レプリケーションの難しさは、すべてレプリケーションされたデータへの変更の扱いから生じる。変更をノード間でレプリケーションするのに広く使われているアルゴリズムは次の3つになる。&lt;/p>
&lt;ul>
&lt;li>シングルリーダーレプリケーション
&lt;ul>
&lt;li>クライアントはすべての書き込みを1つのノード（リーダー）に送り、リーダーはデータ変更イベントのストリームを他のレプリカ（フォロワー）に送る&lt;/li>
&lt;li>読み取りは任意のレプリカから行えるが、フォロワーから読み取るデータは古い可能性がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>マルチリーダーレプリケーション
&lt;ul>
&lt;li>クライアント群は、それぞれの書き込みを複数あるリーダーノードのいずれかに送信する&lt;/li>
&lt;li>これらのリーダーノードはどれも書き込みを受け付ける&lt;/li>
&lt;li>リーダー群は、データ変更イベントのストリームをお互いに、そしてすべてのフォロワーノードに送信する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>リーダーレスレプリケーション
&lt;ul>
&lt;li>クライアントは、それぞれの書き込みを複数のノードに送信し、古いデータを持つノードを修正するために読み取りを複数のノードから並列に行う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>データベースのレプリケーションの原理は1970年代から研究されていてそれほど変わっていない。とはいえ、分散データベースがメインストリームで利用されるようになったのは最近のこと。アプリケーション開発者の経験不足により &lt;strong>結果整合性&lt;/strong> のような問題に関しては多くの誤解が生じた。いずれのレプリケーションのアプローチにもメリットとデメリットがある。シングルリーダーレプリケーションは理解しやすく、衝突解決を気にする必要がないことから、広く使われている。マルチリーダーとリーダーレスのレプリケーションは、ノードの障害、ネットワークの障害、レイテンシのスパイクがあっても頑健になる。しかし障害の理由を説明するのが難しく、一貫性についても弱い保証しか示せない。&lt;/p>
&lt;p>レプリケーションは、 &lt;strong>同期&lt;/strong> で行うことも &lt;strong>非同期&lt;/strong> で行うこともできる。どちらにするのかは、障害があったときのシステムの振る舞いに大きく影響する。非同期のレプリケーションは、システムがスムーズに動作しているときには高速に動作するが、重要なのはレプリケーションのラグが大きくなったり、サーバーに障害が生じたりしたときに何が起こるのかを理解しておくことになる。リーダーに障害が発生し、非同期に更新されていたフォロワーを新しいリーダーに昇格させたら、直前にコミットされたデータは失われてしまう可能性がある。&lt;/p>
&lt;p>レプリケーションラグが生じている状況下でアプリケーションがどのように振る舞うべきなのかを決める際に役立つ一貫性モデル。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>書き込み後読み取り (read-your-writes)&lt;/strong>
&lt;ul>
&lt;li>ユーザーは、自分自身が投入したデータを常に見れる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>モノトニック読み取り (monotonic reads)&lt;/strong>
&lt;ul>
&lt;li>ある時点のデータをユーザーが一度見たら、それ以前の時点のデータは見れない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>一貫性のあるプレフィックス読み取り&lt;/strong>
&lt;ul>
&lt;li>ユーザーは、たとえば質問とその質問への回答を適切な順序でといったように、適切な因果関係を保持した状態でデータを見れる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>マルチリーダーとリーダーレスのアプローチは本質的に並行性の問題を抱えている。複数の書き込みが並列に行われることがあるので、衝突が生じる場合がある。ある操作が他の操作よりも先に行われたのか、あるいはそれらが並行して行われたかを判断するためのアルゴリズムについて説明されている。&lt;/p>
&lt;/blockquote>
&lt;h2 id="slack-apps-の調査">Slack apps の調査&lt;/h2>
&lt;p>&lt;a href="https://www.instagram.com/workstreams.ai/">Workstreams.ai&lt;/a> を試してみた。&lt;/p>
&lt;blockquote>
&lt;p>Results-driven task management for Slack, Microsoft Teams and Google&lt;/p>
&lt;/blockquote>
&lt;p>結果駆動タスクマネジメントという聞いたことない用語が書いてある。SaaS 型の Web アプリケーションとしての課題管理システムとチャットツールとの連携が密になったプロダクトにみえる。UI もよく作り込まれている。Workstreams.ai のアカウント管理は &lt;a href="https://api.slack.com/authentication/sign-in-with-slack">Sign in with Slack&lt;/a> を使っている。ドキュメントによると openid connect と oauth 2.0 の仕組みを組み合わせているのかな。認証よくわかってないので背景も勉強しないといけない。簡単にタスク作成やコメント、更新などを Slack クライアントと Web アプリケーション上で触ってみた。&lt;/p>
&lt;p>もう1つ &lt;a href="https://slack.com/app-pages/google-sheets">Google Sheets for Workflow Builder&lt;/a> というのも試してみた。ワークフロービルダーのステップに簡単に Google Sheet との連携を実装できるのでめっちゃ簡単。ワークフロービルダーは本当によくできているな。&lt;/p>
&lt;h2 id="ジョギング">ジョギング&lt;/h2>
&lt;p>今日は調子はよかったけど、お仕事の区切りがよかったので19時に終えて近所の公園にジョギングしてきた。昨日も走ってたのでやや筋肉痛が残りつつ、走り始めは筋肉がきしむ感じだったけど、走っているうちに体があたたまってきて気にならなくなった。時間帯は同じだけど、昨日より陸上部の人たちが半分ぐらい少なかった。曜日によって違うのかなぁ。&lt;/p></content></item><item><title>霖</title><link>/diary/posts/2021/1014/</link><pubDate>Thu, 14 Oct 2021 08:31:32 +0900</pubDate><guid>/diary/posts/2021/1014/</guid><description>0時過ぎに寝て7時に起きた。けれど、なんかしんどくて起き上がれなくてそのまま2度寝した。1時間ほど寝たらすぐに起きれた。あのしんどさは何だったのか。とはいえ、気付いたら8時半にはオフィスにいたので普段の仕事始めと変わらない見た目になった。お昼に体温を測っていたら37.1℃になってたので熱っぽい雰囲気。日中は特にしんどくはないんだけど。
データ指向アプリケーションデザイン 4章エンコーディングと進化を読んだ。だんだん内容が難しくなってきて読むのに時間がかかる。これで第一部のデータシステムの基礎を読了した。4章のまとめ。
データシステムの変更のしやすさ、アジリティのことを本書では 進化性 を呼んでいる。
進化性を高めるには、システムのバージョンアップが容易にできなくてはならない。このとき、サーバーサイドアプリケーションは、大抵の場合、一度にすべてのノードをのバージョンアップができないことから、 ローリングアップグレード という手法を用いる。ローリングアップグレードを可能にするには、データフォーマットやスキーマの変更に対して、新旧どちらのフォーマットも、新旧どちらのコードからも扱えないといけない。データフォーマットやスキーマの 前方/後方互換性 を維持することが進化性を高めることに大きく影響する。
メモリを共有していないプロセス間でデータを渡すとき、そのデータをバイト列へエンコードしないといけない。通常プログラムはデータを (少なくとも) 2つの異なる表現で扱う。
CPU によるアクセスや操作が効率的になるよう最適化されてメモリ内で表現される ファイルやネットワーク経由でデータをやり取りするにはバイト列にエンコードしないといけない
この表現はメモリ内のデータ構造とはまったく異なる この2つの表現の間で何らかの変換が必要になる。インメモリの表現からバイトの並びへの変換は エンコーディング (シリアライゼーション、マーシャリングとも呼ぶ) 、その逆は デコーディング (パース、デシリアライぜーション、アンマーシャリングとも呼ぶ) と呼ぶ。
データエンコーディングフォーマットと、それらの互換性に関する特性。
プログラミング言語固有のエンコーディングは1つのプログラミング言語に限定され、しばしば前方及び後方互換性を欠く JSON, XML, CSV といったテキストフォーマットは広く利用されており、その互換性は利用の方法に依存する オプションのスキーマ言語はあるが、それらは助けになることもあればむしろ障害になることもある これらのフォーマットはデータ型について多少の曖昧さがあるので、数値やバイナリ文字列などについては注意が必要 thrift, protocol buﬀers, aro といったスキーマを持つバイナリフォーマットではコンパクトで効率的なエンコーディングが可能であり、前方及び後方互換性のセマンティクスも明確に定義されている これらのスキーマは、ドキュメンテーションと静的型付き言語でのコード生成に役立つ ただし、バイナリフォーマットにはデコードしなければ人にはデータが読めないという欠点もある データフローの形態とエンコーディング。
データベースでは、データベースへの書き込みを行うプロセスがデータをエンコードし、データベースからの読み取りを行うプロセスがそのデータをデコードする RPC と REST API では、クライアントがリクエストをエンコードし、サーバーはそのリクエストをデコードしてレスポンスをエンコードする。そして最後にクライアントがレスポンスをデコードする 非同期のメッセージパッシング（メッセージブローカーあるいはアクター）では、ノードはお互いにメッセージを送信することによって通信し、送信側がメッセージをエンコードし、受信側がそのメッセージをデコードする kafka などを使ったイベント駆動アーキテクチャはこの形態になる 多少の注意を払うことで前方/後方互換性やローリングアップグレードは十分に実現可能となる。
霖 (ながめ) プロダクトの名前を考えるために万葉集を眺めてた。ふとみつけた 霖 ということばを気に入った。一文字だと「ながめ」または「ながあめ」と読む。霖雨と書くと「りんう」と読むらしい。万葉集では次の和歌で詠まれている。和歌では「長雨」と「眺め」をかけて使うのが常套句らしい。また古文でいうところの眺めはぼんやり見ながら物思いに耽るという意味になるそうだ。</description><content>&lt;p>0時過ぎに寝て7時に起きた。けれど、なんかしんどくて起き上がれなくてそのまま2度寝した。1時間ほど寝たらすぐに起きれた。あのしんどさは何だったのか。とはいえ、気付いたら8時半にはオフィスにいたので普段の仕事始めと変わらない見た目になった。お昼に体温を測っていたら37.1℃になってたので熱っぽい雰囲気。日中は特にしんどくはないんだけど。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>4章エンコーディングと進化を読んだ。だんだん内容が難しくなってきて読むのに時間がかかる。これで第一部のデータシステムの基礎を読了した。4章のまとめ。&lt;/p>
&lt;blockquote>
&lt;p>データシステムの変更のしやすさ、アジリティのことを本書では &lt;strong>進化性&lt;/strong> を呼んでいる。&lt;/p>
&lt;p>進化性を高めるには、システムのバージョンアップが容易にできなくてはならない。このとき、サーバーサイドアプリケーションは、大抵の場合、一度にすべてのノードをのバージョンアップができないことから、 &lt;strong>ローリングアップグレード&lt;/strong> という手法を用いる。ローリングアップグレードを可能にするには、データフォーマットやスキーマの変更に対して、新旧どちらのフォーマットも、新旧どちらのコードからも扱えないといけない。データフォーマットやスキーマの &lt;strong>前方/後方互換性&lt;/strong> を維持することが進化性を高めることに大きく影響する。&lt;/p>
&lt;p>メモリを共有していないプロセス間でデータを渡すとき、そのデータをバイト列へエンコードしないといけない。通常プログラムはデータを (少なくとも) 2つの異なる表現で扱う。&lt;/p>
&lt;ol>
&lt;li>CPU によるアクセスや操作が効率的になるよう最適化されてメモリ内で表現される&lt;/li>
&lt;li>ファイルやネットワーク経由でデータをやり取りするにはバイト列にエンコードしないといけない&lt;br>
この表現はメモリ内のデータ構造とはまったく異なる&lt;/li>
&lt;/ol>
&lt;p>この2つの表現の間で何らかの変換が必要になる。インメモリの表現からバイトの並びへの変換は &lt;strong>エンコーディング&lt;/strong> (シリアライゼーション、マーシャリングとも呼ぶ) 、その逆は &lt;strong>デコーディング&lt;/strong> (パース、デシリアライぜーション、アンマーシャリングとも呼ぶ) と呼ぶ。&lt;/p>
&lt;p>データエンコーディングフォーマットと、それらの互換性に関する特性。&lt;/p>
&lt;ul>
&lt;li>プログラミング言語固有のエンコーディングは1つのプログラミング言語に限定され、しばしば前方及び後方互換性を欠く&lt;/li>
&lt;li>JSON, XML, CSV といったテキストフォーマットは広く利用されており、その互換性は利用の方法に依存する
&lt;ul>
&lt;li>オプションのスキーマ言語はあるが、それらは助けになることもあればむしろ障害になることもある&lt;/li>
&lt;li>これらのフォーマットはデータ型について多少の曖昧さがあるので、数値やバイナリ文字列などについては注意が必要&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>thrift, protocol buﬀers, aro といったスキーマを持つバイナリフォーマットではコンパクトで効率的なエンコーディングが可能であり、前方及び後方互換性のセマンティクスも明確に定義されている
&lt;ul>
&lt;li>これらのスキーマは、ドキュメンテーションと静的型付き言語でのコード生成に役立つ&lt;/li>
&lt;li>ただし、バイナリフォーマットにはデコードしなければ人にはデータが読めないという欠点もある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>データフローの形態とエンコーディング。&lt;/p>
&lt;ul>
&lt;li>データベースでは、データベースへの書き込みを行うプロセスがデータをエンコードし、データベースからの読み取りを行うプロセスがそのデータをデコードする&lt;/li>
&lt;li>RPC と REST API では、クライアントがリクエストをエンコードし、サーバーはそのリクエストをデコードしてレスポンスをエンコードする。そして最後にクライアントがレスポンスをデコードする&lt;/li>
&lt;li>非同期のメッセージパッシング（メッセージブローカーあるいはアクター）では、ノードはお互いにメッセージを送信することによって通信し、送信側がメッセージをエンコードし、受信側がそのメッセージをデコードする
&lt;ul>
&lt;li>kafka などを使ったイベント駆動アーキテクチャはこの形態になる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>多少の注意を払うことで前方/後方互換性やローリングアップグレードは十分に実現可能となる。&lt;/p>
&lt;/blockquote>
&lt;h2 id="霖-ながめ">霖 (ながめ)&lt;/h2>
&lt;p>プロダクトの名前を考えるために万葉集を眺めてた。ふとみつけた &lt;strong>霖&lt;/strong> ということばを気に入った。一文字だと「ながめ」または「ながあめ」と読む。霖雨と書くと「りんう」と読むらしい。万葉集では次の和歌で詠まれている。和歌では「長雨」と「眺め」をかけて使うのが常套句らしい。また古文でいうところの眺めはぼんやり見ながら物思いに耽るという意味になるそうだ。&lt;/p>
&lt;blockquote>
&lt;p>4217 卯(う)の花を　腐(くた)す霖雨(ながめ)の　始水(みずはな)に　寄るこつみなす　寄らむ児(こ)もがも　大伴家持&lt;/p>
&lt;p>(現代語訳) 卯の花を腐らせるほどに痛めつける長雨、この雨のせいで流れ出す大水の鼻先に寄りつく木っ端のように、私に寄り添ってくれる娘でもいてくれたらなあ&lt;/p>
&lt;p>&lt;a href="https://www.kadokawa.co.jp/product/200803000453/">新版　万葉集　四　現代語訳付き&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">この季節の長雨には「卯の花腐し」という別名があります。画像は改元でも話題となった『万葉集』より「卯の花を腐す霖雨の…」という大伴家持の和歌。初夏の卯の花が枯れてしまうような長雨の表現です。詳しくは7月から始まる企画展「雨に詠えば―空模様の古典文学―」にて！ &lt;a href="https://t.co/ZyU1h8TyNv">https://t.co/ZyU1h8TyNv&lt;/a> &lt;a href="https://t.co/VaXKX0FGEI">pic.twitter.com/VaXKX0FGEI&lt;/a>&lt;/p>&amp;mdash; 国立公文書館 (@JPNatArchives) &lt;a href="https://twitter.com/JPNatArchives/status/1130805663444213760?ref_src=twsrc%5Etfw">May 21, 2019&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="ジョギング">ジョギング&lt;/h2>
&lt;p>あまり調子がよくなかったので19時にお仕事を終えて近所の公園にジョギングに行ってきた。ワクチンを接種してから運動を控えていたのでジョギングしたのは初めてかな。2-3日に1回ぐらいの頻度でジョギングしている。ワクチン接種した週はウォーキングに留め、次の週は実家で田んぼ仕事でバテてて、今週は初めて行ってきた。ちょっと早い時間帯だったせいか、2つの陸上部が練習していてやや人が多かった。400m級のトラックがあって陸上部の人たちが練習している。練習の邪魔にならないよう、トラックの内側を20-30分とぼとぼジョギングしている。疲れたら歩きながらなのでそんなに距離は走ってない。ジョギング終えてから30分ぐらいストレッチをした。&lt;/p></content></item><item><title>vimgrep 検索の嬉しさ</title><link>/diary/posts/2021/1013/</link><pubDate>Wed, 13 Oct 2021 09:02:46 +0900</pubDate><guid>/diary/posts/2021/1013/</guid><description>2時頃に寝て6時に起きる。普段、日記は vim で書いている。ちょっとした過去の日記の検索に vimgrep でこと足りるのが嬉しい。テキストで日記を書いていることの利点かな。夜に fin-pyコードリーディング会#4 に参加した。事前に hackmd に発表内容のメモを書いてた。いろんな発表者の視点があってコードリーディングのイベントはおもしろかった。
朝活 【三宮.dev オンライン】リモート朝活もくもく会 に参加してみた。何もなかったらだいたい7時頃に起きるのがなにか目的があると6時に起きれる。人体の不思議。せっかく起きたので 前に More Joel on Software を読んだとき に学生向けのアドバイスにあったミクロ経済学の勉強のためにその入門書を読み始めた。参加者が勉強会の常連ばかりだったので朝からわりと雑談してた。2人転職するという話で2人とも東京の会社でフルリモートワークで働くらしい。働き方が変わったなと感じる。その後、第1章の無差別曲線を読んだ。
YouTube 配信と集中力 あんちぽさんの 2021年10月9日 の日記でスライド作成の興がのらないので YouTube 配信しながらやったら集中できてよかったと書いてあったのでちょっと眺めてみた。なんかスライドの作成のやり方とか、自分と違うのかな？とか思いながらみたけど、やり方自体は普通だった。ただ集中できてよかったとあるので普段のやり方とは異なることをすることに意義があるのかな？とも思えた。試しに YouTube Live やってみようとしたら初期設定？に24時間かかるとのこと。代わりに kazam というスクリーンリコーダーの使い方を調べてた。勉強会で作業したログとかを録画しておいてなにかに使えたりするかもしれない。
データ指向アプリケーションデザイン 半日ほどかかって3章ストレージと抽出を読んだ。読みながら書いているので時間がかかる。今日はこれだけ。まとめはこんな感じ。
データベースのシステムには2つの用途があり、その特性やパフォーマンスを最適化するためにストレージエンジンやデータ構造が異なるもので運用されるようになってきた。
オンライントランザクション処理 (OLTP) 行指向、トランザクション処理 オンライン分析処理 (OLAP) 列指向、分析クエリ OLTP には2つの主要なストレージエンジンがある。
B ツリー 1970年代からあり、成熟していて且つ効率的なインデックスのデータ構造 LSM ツリー 比較的最近開発された、ディスク上でのランダムアクセスをシステム的にシーケンシャルアクセスに変換して、書き込みのスループットを高める手法。もとは Google の BigTable の論文？ OLAP の典型的なデータウェアハウスの高レベルでのアーキテクチャでは、大量の行をシーケンシャルにスキャンしなければならないクエリの場合、インデックスはあまり関係なく、データを非常にコンパクトにエンコードし、クエリがディスクから読まなければならないデータの量を最小限にとどめることが重要となる。この目標を達成するのに列指向のストレージが役立つ。</description><content>&lt;p>2時頃に寝て6時に起きる。普段、日記は vim で書いている。ちょっとした過去の日記の検索に &lt;code>vimgrep&lt;/code> でこと足りるのが嬉しい。テキストで日記を書いていることの利点かな。夜に &lt;a href="https://fin-py.connpass.com/event/226933/">fin-pyコードリーディング会#4&lt;/a> に参加した。事前に &lt;a href="https://hackmd.io/bFBFaPbYS1Kqfc97HMlp7Q?view">hackmd&lt;/a> に発表内容のメモを書いてた。いろんな発表者の視点があってコードリーディングのイベントはおもしろかった。&lt;/p>
&lt;h2 id="朝活">朝活&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/227678/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> に参加してみた。何もなかったらだいたい7時頃に起きるのがなにか目的があると6時に起きれる。人体の不思議。せっかく起きたので &lt;a href="/diary/diary/posts/2021/0929/#joel-on-software">前に More Joel on Software を読んだとき&lt;/a> に学生向けのアドバイスにあったミクロ経済学の勉強のためにその入門書を読み始めた。参加者が勉強会の常連ばかりだったので朝からわりと雑談してた。2人転職するという話で2人とも東京の会社でフルリモートワークで働くらしい。働き方が変わったなと感じる。その後、第1章の無差別曲線を読んだ。&lt;/p>
&lt;h2 id="youtube-配信と集中力">YouTube 配信と集中力&lt;/h2>
&lt;p>あんちぽさんの &lt;a href="https://kentarokuribayashi.com/journal/2021/10/09/2021%e5%b9%b410%e6%9c%889%e6%97%a5">2021年10月9日&lt;/a> の日記でスライド作成の興がのらないので YouTube 配信しながらやったら集中できてよかったと書いてあったのでちょっと眺めてみた。なんかスライドの作成のやり方とか、自分と違うのかな？とか思いながらみたけど、やり方自体は普通だった。ただ集中できてよかったとあるので普段のやり方とは異なることをすることに意義があるのかな？とも思えた。試しに YouTube Live やってみようとしたら初期設定？に24時間かかるとのこと。代わりに &lt;a href="https://launchpad.net/kazam">kazam&lt;/a> というスクリーンリコーダーの使い方を調べてた。勉強会で作業したログとかを録画しておいてなにかに使えたりするかもしれない。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>半日ほどかかって3章ストレージと抽出を読んだ。読みながら書いているので時間がかかる。今日はこれだけ。まとめはこんな感じ。&lt;/p>
&lt;blockquote>
&lt;p>データベースのシステムには2つの用途があり、その特性やパフォーマンスを最適化するためにストレージエンジンやデータ構造が異なるもので運用されるようになってきた。&lt;/p>
&lt;ul>
&lt;li>オンライントランザクション処理 (OLTP)
&lt;ul>
&lt;li>行指向、トランザクション処理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>オンライン分析処理 (OLAP)
&lt;ul>
&lt;li>列指向、分析クエリ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>OLTP には2つの主要なストレージエンジンがある。&lt;/p>
&lt;ul>
&lt;li>B ツリー
&lt;ul>
&lt;li>1970年代からあり、成熟していて且つ効率的なインデックスのデータ構造&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>LSM ツリー
&lt;ul>
&lt;li>比較的最近開発された、ディスク上でのランダムアクセスをシステム的にシーケンシャルアクセスに変換して、書き込みのスループットを高める手法。もとは Google の BigTable の論文？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>OLAP の典型的なデータウェアハウスの高レベルでのアーキテクチャでは、大量の行をシーケンシャルにスキャンしなければならないクエリの場合、インデックスはあまり関係なく、データを非常にコンパクトにエンコードし、クエリがディスクから読まなければならないデータの量を最小限にとどめることが重要となる。この目標を達成するのに列指向のストレージが役立つ。&lt;/p>
&lt;/blockquote>
&lt;p>過去に Cassandra を使ったプロダクトの開発に関わっていたから B ツリーと LSM ツリーの概要は知っていて3章で書いてあることはだいたい理解できた。データウェアハウスに関しては、前にお手伝いしていた会社で普通のログを Amazon Athena で処理すると1時間とかかかって分析クエリが Parquet に変換すると数分で完了したりするのを目の当たりにしてた。分析処理で読み込むデータ量を削減する列指向の考え方は理解しておく必要がある。行指向のデータを列指向フォーマットである &lt;a href="https://parquet.apache.org/">Parquet&lt;/a> に変換する &lt;a href="https://github.com/reproio/columnify">columnify&lt;/a> のコードも読んだことがあったので内容のイメージはできるけど、実務経験が少ないと全体像がわかっておらず、本書を読みながら学び直ししてた。&lt;/p></content></item><item><title>やや疲れ気味</title><link>/diary/posts/2021/1012/</link><pubDate>Tue, 12 Oct 2021 12:12:34 +0900</pubDate><guid>/diary/posts/2021/1012/</guid><description>昨日は1時半に寝て7時半に起きた。なんか疲れが溜まっているのか寝不足なのか、しゃきっとしなくて15時頃にお昼ご飯食べてきて、戻ってきて2時間ほど寝てた。夕方に寝ると夜の睡眠が悪くなるかもしれない。
データ指向アプリケーションデザイン データ指向アプリケーションデザイン -信頼性、拡張性、保守性の高い分散システム設計の原理
先週末から読み始めようと思いつつ、ダラダラしていて今日から読み始めた。600ページ超と分量が多いので少しずつ読んでいく。買ったのは2019年7月なので2年越しの積ん読。前職で書籍購入の補助制度があったのでその予算消化のために買ったみたいなもの。でも買っておくといつか読むので買っておいてよかった。今日は2章まで読んだ。
「データ指向」という用語は、cpu のデータ処理がボトルネックとなり、且つそのデータ量や複雑さなどが主な課題となるアプリケーションのことをデータ指向と定義している。ソフトウェアシステムにおける3つの課題。これはすべて非機能要件になる。
信頼性 スケーラビリティ メンテンナンス性 リレーショナルデータベースと NoSQL の台頭から始まり、ドキュメントデータベースやグラフデータベースの概要やリレーショナルデータベースとの比較などが書いてある。また NoSQL 系のデータベースのクエリ言語とか、よく知らないので勉強になった。12章あるので1日1-2章ぐらいのペースで今月中に読めたらいいや。
Slack のワークフロービルダーの調査 今度、勉強会をするので調べ始めた。ワークフロービルダーは簡単に定型的な処理を作成できるけど、有料プランでしか使えないのでコミュニティなどでは使いにくい。試しにいくつかワークフローを作ってみて感触を理解した。おそらくワークフロービルダーは Slack app を作成するためのフレームワークにみえる。作成したワークフローの1つ1つが Slack app になるのではないか。
https://github.com/t2y/python-study/tree/master/BizPy/slack/20211027 Slack native? first? な課題管理システムもいくつかみつけた。非開発者に課題管理システムを使ってもらうのはかなり難しいので Slack と課題管理システムが連携すれば課題管理の方法論に新しい価値が出てくるのではないかと考え始めた。この機会に Slack app で構築されば課題管理システムも調べてみようと思う。</description><content>&lt;p>昨日は1時半に寝て7時半に起きた。なんか疲れが溜まっているのか寝不足なのか、しゃきっとしなくて15時頃にお昼ご飯食べてきて、戻ってきて2時間ほど寝てた。夕方に寝ると夜の睡眠が悪くなるかもしれない。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>&lt;a href="https://www.oreilly.co.jp/books/9784873118703/">データ指向アプリケーションデザイン -信頼性、拡張性、保守性の高い分散システム設計の原理&lt;/a>&lt;/p>
&lt;p>先週末から読み始めようと思いつつ、ダラダラしていて今日から読み始めた。600ページ超と分量が多いので少しずつ読んでいく。買ったのは2019年7月なので2年越しの積ん読。前職で書籍購入の補助制度があったのでその予算消化のために買ったみたいなもの。でも買っておくといつか読むので買っておいてよかった。今日は2章まで読んだ。&lt;/p>
&lt;p>「データ指向」という用語は、cpu のデータ処理がボトルネックとなり、且つそのデータ量や複雑さなどが主な課題となるアプリケーションのことをデータ指向と定義している。ソフトウェアシステムにおける3つの課題。これはすべて非機能要件になる。&lt;/p>
&lt;ul>
&lt;li>信頼性&lt;/li>
&lt;li>スケーラビリティ&lt;/li>
&lt;li>メンテンナンス性&lt;/li>
&lt;/ul>
&lt;p>リレーショナルデータベースと NoSQL の台頭から始まり、ドキュメントデータベースやグラフデータベースの概要やリレーショナルデータベースとの比較などが書いてある。また NoSQL 系のデータベースのクエリ言語とか、よく知らないので勉強になった。12章あるので1日1-2章ぐらいのペースで今月中に読めたらいいや。&lt;/p>
&lt;h2 id="slack-のワークフロービルダーの調査">Slack のワークフロービルダーの調査&lt;/h2>
&lt;p>今度、勉強会をするので調べ始めた。ワークフロービルダーは簡単に定型的な処理を作成できるけど、有料プランでしか使えないのでコミュニティなどでは使いにくい。試しにいくつかワークフローを作ってみて感触を理解した。おそらくワークフロービルダーは Slack app を作成するためのフレームワークにみえる。作成したワークフローの1つ1つが Slack app になるのではないか。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/python-study/tree/master/BizPy/slack/20211027">https://github.com/t2y/python-study/tree/master/BizPy/slack/20211027&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Slack native? first? な課題管理システムもいくつかみつけた。非開発者に課題管理システムを使ってもらうのはかなり難しいので Slack と課題管理システムが連携すれば課題管理の方法論に新しい価値が出てくるのではないかと考え始めた。この機会に Slack app で構築されば課題管理システムも調べてみようと思う。&lt;/p></content></item><item><title>BizPy 再始動</title><link>/diary/posts/2021/1011/</link><pubDate>Mon, 11 Oct 2021 08:37:53 +0900</pubDate><guid>/diary/posts/2021/1011/</guid><description>昨日は晩ご飯食べてからのんびりしていた。寝て起きての繰り返しだったので何時に寝たのかよくわからない。夜、本を読もうと思っていたのにダラダラ過ごしてしまった。朝は7時半に起きた。朝起きたら Python で Unicode 正規化 NFC/NFD の文字列を扱う がはてブでホットエントリ化してた。昨日、書評を書いたからその記事かと期待したけど、なぜか2年ほど前に書いた古い記事だった。なんかがっかり。そして、その理由は全くわからない。1日経って夜の時点ではてブが82個ついている。昔は10個もついたら嬉しかったものだけど、いまは100個ぐらいついてもなんとも思わない。
fin-pyコードリーディング会に発表準備 fin-pyコードリーディング会#4 に参加することにした。過去にオブジェクトストレージの開発に関わっていたからデータストアやストレージに関することは興味がある。たまたまツールの store.py を題材にしていたので読んでしまった。簡単にコードを読んで気になったところをイベントの hackmd に記載した。やっていることの詳細をよくわかっていないので、コードレビューみたいになってしまった。
https://hackmd.io/bFBFaPbYS1Kqfc97HMlp7Q?view BizPy のコミュニティ活動を再開 前にやってたお仕事がうまくいかなくて他のことに時間を費やす余裕がなくてお休みしてた。本当はもっと早く再開してもよかったんだけど、新しいことに挑戦しているときにあまり他のことに注意を取られたくないという考えもあって少し保留していた。新しいことへの活動も一段落して方向性や展望もみえてきたので BizPy も再開することにした。ちょうど Slack のインテグレーションを調べようと思ったところだったので弾みを付ける意図でも都合がよい。複数の意味でタイミングがよかった。また参加者が戻ってきてくれると嬉しい。
Python で Slack のインテグレーションをやってみる勉強会 #1 プロコンの続き ネットで話題になったせいか、当事者同士で話し合う場が設けられたという公式発表が行われた。
第32回高専プロコン秋田大会自由部門プレゼン審査発表順番号５の質疑応答について、発表者・質問者双方の相互理解の場を設けさせて頂きました。#procon32 pic.twitter.com/nlzujvJ7Hv
&amp;mdash; KosenProcon (@KosenProcon) October 10, 2021 これ以上、外野がとやかく言う必要はないと思うけど、一方で立場の強い人が有利になってしまうため、運営はハラスメント行為を行った審査員へ然るべき措置をすべきといった意見もみられた。一理あるかもしれないが、そこまでするほどの問題かというのは個人的に思う。タイムラインを眺めていると、ハラスメントを問題視する人は、その背景や経緯や意図はすべて横に置いておいてハラスメント的言動や態度を糾弾する。この人たちと背景も考慮して整理しようとする人たちとは全く議論が噛み合わない。ハラスメントは絶対許すまじという社会の変化や誤った人への行き過ぎたキャンセルカルチャーに私はやや圧倒される。
そう思っていると、私のタイムラインでは「まさかりを投げる」という表現そのものや行為のハラスメントの是非の議論も巻き起こっていた。あまり最近はまさかりを投げるという表現は見かけないんだけど、「マウント禁止」というのをちょくちょくみかける。ハラスメントと根っこは同じで悪気の有無に関係なく発信側が責めを負うようになったんだなと感じる。
まさかりの議論とは別に、最近勉強会で「マウント禁止」というルールもよくみかける。これもマウントされたと感じる人と、知っていることを教えようとする人との関係の難しさを感じる。多少の間違いやもっとこうした方がいいよといったアドバイスをしなくなる人も多いのでは？という気はする。
&amp;mdash; Tetsuya Morimoto (@t2y) October 11, 2021</description><content>&lt;p>昨日は晩ご飯食べてからのんびりしていた。寝て起きての繰り返しだったので何時に寝たのかよくわからない。夜、本を読もうと思っていたのにダラダラ過ごしてしまった。朝は7時半に起きた。朝起きたら &lt;a href="https://t2y.hatenablog.jp/entry/2019/06/29/150125">Python で Unicode 正規化 NFC/NFD の文字列を扱う&lt;/a> がはてブでホットエントリ化してた。昨日、書評を書いたからその記事かと期待したけど、なぜか2年ほど前に書いた古い記事だった。なんかがっかり。そして、その理由は全くわからない。1日経って夜の時点ではてブが82個ついている。昔は10個もついたら嬉しかったものだけど、いまは100個ぐらいついてもなんとも思わない。&lt;/p>
&lt;h2 id="fin-pyコードリーディング会に発表準備">fin-pyコードリーディング会に発表準備&lt;/h2>
&lt;p>&lt;a href="https://fin-py.connpass.com/event/226933/">fin-pyコードリーディング会#4&lt;/a> に参加することにした。過去にオブジェクトストレージの開発に関わっていたからデータストアやストレージに関することは興味がある。たまたまツールの &lt;code>store.py&lt;/code> を題材にしていたので読んでしまった。簡単にコードを読んで気になったところをイベントの hackmd に記載した。やっていることの詳細をよくわかっていないので、コードレビューみたいになってしまった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hackmd.io/bFBFaPbYS1Kqfc97HMlp7Q?view">https://hackmd.io/bFBFaPbYS1Kqfc97HMlp7Q?view&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="bizpy-のコミュニティ活動を再開">BizPy のコミュニティ活動を再開&lt;/h2>
&lt;p>前にやってたお仕事がうまくいかなくて他のことに時間を費やす余裕がなくてお休みしてた。本当はもっと早く再開してもよかったんだけど、新しいことに挑戦しているときにあまり他のことに注意を取られたくないという考えもあって少し保留していた。新しいことへの活動も一段落して方向性や展望もみえてきたので BizPy も再開することにした。ちょうど Slack のインテグレーションを調べようと思ったところだったので弾みを付ける意図でも都合がよい。複数の意味でタイミングがよかった。また参加者が戻ってきてくれると嬉しい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://bizpy.connpass.com/event/198717/">Python で Slack のインテグレーションをやってみる勉強会 #1&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="プロコンの続き">プロコンの続き&lt;/h2>
&lt;p>ネットで話題になったせいか、当事者同士で話し合う場が設けられたという公式発表が行われた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">第32回高専プロコン秋田大会自由部門プレゼン審査発表順番号５の質疑応答について、発表者・質問者双方の相互理解の場を設けさせて頂きました。&lt;a href="https://twitter.com/hashtag/procon32?src=hash&amp;amp;ref_src=twsrc%5Etfw">#procon32&lt;/a> &lt;a href="https://t.co/nlzujvJ7Hv">pic.twitter.com/nlzujvJ7Hv&lt;/a>&lt;/p>&amp;mdash; KosenProcon (@KosenProcon) &lt;a href="https://twitter.com/KosenProcon/status/1447192976946384901?ref_src=twsrc%5Etfw">October 10, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>これ以上、外野がとやかく言う必要はないと思うけど、一方で立場の強い人が有利になってしまうため、運営はハラスメント行為を行った審査員へ然るべき措置をすべきといった意見もみられた。一理あるかもしれないが、そこまでするほどの問題かというのは個人的に思う。タイムラインを眺めていると、ハラスメントを問題視する人は、その背景や経緯や意図はすべて横に置いておいてハラスメント的言動や態度を糾弾する。この人たちと背景も考慮して整理しようとする人たちとは全く議論が噛み合わない。ハラスメントは絶対許すまじという社会の変化や誤った人への行き過ぎたキャンセルカルチャーに私はやや圧倒される。&lt;/p>
&lt;p>そう思っていると、私のタイムラインでは「まさかりを投げる」という表現そのものや行為のハラスメントの是非の議論も巻き起こっていた。あまり最近はまさかりを投げるという表現は見かけないんだけど、「マウント禁止」というのをちょくちょくみかける。ハラスメントと根っこは同じで悪気の有無に関係なく発信側が責めを負うようになったんだなと感じる。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">まさかりの議論とは別に、最近勉強会で「マウント禁止」というルールもよくみかける。これもマウントされたと感じる人と、知っていることを教えようとする人との関係の難しさを感じる。多少の間違いやもっとこうした方がいいよといったアドバイスをしなくなる人も多いのでは？という気はする。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1447429693959860236?ref_src=twsrc%5Etfw">October 11, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item><item><title>86―エイティシックス―</title><link>/diary/posts/2021/1010/</link><pubDate>Sun, 10 Oct 2021 11:50:09 +0900</pubDate><guid>/diary/posts/2021/1010/</guid><description>2時に寝て7時に起きる。昨日 86―エイティシックス― の第2クールの初回をみた。起きてから第1クールの後半の内容を見返したりしてた。内容がすごくおもしろいというわけではないんだけど、作品の世界観と音楽がよい。というか、澤野弘之 氏のファンなので彼が音楽を手がける作品はみてしまう。第1クールの音楽も素晴らしかった。音楽がよいと映画やアニメのシーンが盛り上がるし、音楽だけを聞いているときにもそのシーンのイメージが想起されて音楽そのものにも深みが出るような気がする。
Terminal のカスタマイズ 月別一覧のページを作成した。Hugo には Taxonomies という仕組みがあって、任意のラベルでカテゴライズできる。デフォルトでは categories と tags が提供されている。設定ファイルに dates というカスタム Taxonomies を定義する。
[taxonomies] date = &amp;#34;dates&amp;#34; tag = &amp;#34;tags&amp;#34; コンテンツのメタデータには次のように年月のラベルを付与する。
dates: [2021/10] これは hugo new したときに自動生成されるので自分で明示的に設定する必要はない。
dates: [{{ dateFormat &amp;quot;2006/01&amp;quot; .Date }}] ラベル名に / を含めると自動的に月ごとのサブディレクトリになってくれるので月別のアーカイブを生成するのに都合がよい。
$ tree -L 3 public/dates/ public/dates/ ├── 2021 │ ├── 09 │ │ ├── index.html │ │ ├── index.xml │ │ └── page │ └── 10 │ ├── index.html │ ├── index.</description><content>&lt;p>2時に寝て7時に起きる。昨日 &lt;a href="https://anime-86.com/">86―エイティシックス―&lt;/a> の第2クールの初回をみた。起きてから第1クールの後半の内容を見返したりしてた。内容がすごくおもしろいというわけではないんだけど、作品の世界観と音楽がよい。というか、&lt;a href="https://www.sawanohiroyuki.com/">澤野弘之&lt;/a> 氏のファンなので彼が音楽を手がける作品はみてしまう。第1クールの音楽も素晴らしかった。音楽がよいと映画やアニメのシーンが盛り上がるし、音楽だけを聞いているときにもそのシーンのイメージが想起されて音楽そのものにも深みが出るような気がする。&lt;/p>
&lt;h2 id="terminal-のカスタマイズ">Terminal のカスタマイズ&lt;/h2>
&lt;p>月別一覧のページを作成した。Hugo には &lt;a href="https://gohugo.io/content-management/taxonomies/">Taxonomies&lt;/a> という仕組みがあって、任意のラベルでカテゴライズできる。デフォルトでは &lt;code>categories&lt;/code> と &lt;code>tags&lt;/code> が提供されている。設定ファイルに &lt;code>dates&lt;/code> というカスタム Taxonomies を定義する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">[&lt;span style="color:#a6e22e">taxonomies&lt;/span>]
&lt;span style="color:#a6e22e">date&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;dates&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">tag&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;tags&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンテンツのメタデータには次のように年月のラベルを付与する。&lt;/p>
&lt;pre tabindex="0">&lt;code>dates: [2021/10]
&lt;/code>&lt;/pre>&lt;p>これは &lt;code>hugo new&lt;/code> したときに自動生成されるので自分で明示的に設定する必要はない。&lt;/p>
&lt;pre tabindex="0">&lt;code>dates: [{{ dateFormat &amp;quot;2006/01&amp;quot; .Date }}]
&lt;/code>&lt;/pre>&lt;p>ラベル名に &lt;code>/&lt;/code> を含めると自動的に月ごとのサブディレクトリになってくれるので月別のアーカイブを生成するのに都合がよい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ tree -L &lt;span style="color:#ae81ff">3&lt;/span> public/dates/
public/dates/
├── &lt;span style="color:#ae81ff">2021&lt;/span>
│   ├── &lt;span style="color:#ae81ff">09&lt;/span>
│   │   ├── index.html
│   │   ├── index.xml
│   │   └── page
│   └── &lt;span style="color:#ae81ff">10&lt;/span>
│   ├── index.html
│   ├── index.xml
│   └── page
&lt;/code>&lt;/pre>&lt;/div>&lt;p>タグ一覧とは異なり、年単位・月単位にまとめて一覧表示するためにテンプレートをカスタマイズする。&lt;a href="https://gohugo.io/templates/taxonomy-templates/">Taxonomy Templates&lt;/a> は &lt;code>terms.html&lt;/code> によって提供されている。Terminal が提供しているこのテンプレートをカスタマイズすることで月別一覧を次のような表示になるようカスタマイズした。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1010_dates.png"/>
&lt;/figure>
&lt;p>実際の修正内容は次になる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/diary/commit/783d9685ae3698b85e428bce178bdd9ebe2c3dca">https://github.com/t2y/diary/commit/783d9685ae3698b85e428bce178bdd9ebe2c3dca&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>職質された</title><link>/diary/posts/2021/1009/</link><pubDate>Sat, 09 Oct 2021 09:12:12 +0900</pubDate><guid>/diary/posts/2021/1009/</guid><description>0時に寝て6時に起きる。昨日も田んぼ仕事の疲れが残っていたのでよく眠れた。1週間で6時頃に起きる癖がついたのですぐに起きれた。
Terminal のカスタマイズ 昨日からいくつか修正をしていた。
画像のパス問題の修正 favicon の追加 タグ一覧リンクの追加 atom フィードに icon 要素の追加 (feedly では読み取れない) atom フィードに favicon を指す要素を埋め込んでみたんだけど、feedly ではダメっぽい。たまたまヒットした GitHub issue でもそういったコメントをみかけた。
https://github.com/huginn/huginn/issues/1628#issuecomment-882103625 ストレッチ 毎週土曜日はストレッチの日。田んぼ仕事のおかげで全身軽い筋肉痛になっている。ストレッチを受けると、いつものときとの違いから、股関節から右ももと腕の筋肉がすごく張っているのに気付く。田んぼのような突発的に体を動かして疲労が溜まったときにもストレッチでほぐせるのがよい。今日の開脚幅は開始前169cmで、ストレッチ後170cmかな。前より少し落ちたのは田んぼ仕事に疲れて平日にあまりストレッチが出来なかったのと筋肉痛のせいかもしれない。
Joel on Software 本当は実家に帰っているときに書き上げようと考えていたものの、田んぼ作業での疲れと実家のパソコンを使って作業する環境の悪さから書くことに集中できなくなって断念していた。集中できる環境なら3時間ほどで書けた。動機づけよりも価値観、価値観がブレないならその次は集中できる環境作りにこだわっていきたい。
https://t2y.hatenablog.jp/entry/2021/10/09/162618 職務質問 買いものして帰ろうとしてたら警察官に止められて職務質問をうけた。自転車の盗難が多いので防犯登録を調べたいとのこと。はいはいって感じで免許証を提示する。自転車は東京で購入したもので10年以上乗っている。防犯登録は警視庁になっているらしく、兵庫県警の警察官では調べられないみたい。次に車体番号も読み取って調べていたけど、よくわからなかったみたい。結局、私が本物の持ち主とその場で調べることができなくて、警察官もたぶん本物だと思いますみたいな歯切れの悪い結果で職務質問を終えた。仮にその自転車が盗難にあってもその防犯登録から私を辿ることはできないので近所の自転車屋さんで防犯登録入り直してくださいと言われた。あー、またこの件か。都道府県の防犯登録のシステムが全国で統合されていればいい話しなのに、なんで引っ越したら防犯登録をやり直さないとあかんねんと。現場の警察官に言っても仕方ないので何も言わないことにした。
プロコン たまたまタイムラインでみかけてちょっと眺めてた。動画で同じ内容をみて、ハラスメントを問題視する人と、プロダクトの新規性について言及する人がいて、感じ方は人それぞれだなぁと思いながら ハッシュタグ を眺めてた。</description><content>&lt;p>0時に寝て6時に起きる。昨日も田んぼ仕事の疲れが残っていたのでよく眠れた。1週間で6時頃に起きる癖がついたのですぐに起きれた。&lt;/p>
&lt;h2 id="terminal-のカスタマイズ">Terminal のカスタマイズ&lt;/h2>
&lt;p>昨日からいくつか修正をしていた。&lt;/p>
&lt;ul>
&lt;li>画像のパス問題の修正&lt;/li>
&lt;li>favicon の追加&lt;/li>
&lt;li>タグ一覧リンクの追加&lt;/li>
&lt;li>atom フィードに icon 要素の追加 (feedly では読み取れない)&lt;/li>
&lt;/ul>
&lt;p>atom フィードに favicon を指す要素を埋め込んでみたんだけど、feedly ではダメっぽい。たまたまヒットした GitHub issue でもそういったコメントをみかけた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/huginn/huginn/issues/1628#issuecomment-882103625">https://github.com/huginn/huginn/issues/1628#issuecomment-882103625&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>毎週土曜日はストレッチの日。田んぼ仕事のおかげで全身軽い筋肉痛になっている。ストレッチを受けると、いつものときとの違いから、股関節から右ももと腕の筋肉がすごく張っているのに気付く。田んぼのような突発的に体を動かして疲労が溜まったときにもストレッチでほぐせるのがよい。今日の開脚幅は開始前169cmで、ストレッチ後170cmかな。前より少し落ちたのは田んぼ仕事に疲れて平日にあまりストレッチが出来なかったのと筋肉痛のせいかもしれない。&lt;/p>
&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>本当は実家に帰っているときに書き上げようと考えていたものの、田んぼ作業での疲れと実家のパソコンを使って作業する環境の悪さから書くことに集中できなくなって断念していた。集中できる環境なら3時間ほどで書けた。動機づけよりも価値観、価値観がブレないならその次は集中できる環境作りにこだわっていきたい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://t2y.hatenablog.jp/entry/2021/10/09/162618">https://t2y.hatenablog.jp/entry/2021/10/09/162618&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="職務質問">職務質問&lt;/h2>
&lt;p>買いものして帰ろうとしてたら警察官に止められて職務質問をうけた。自転車の盗難が多いので防犯登録を調べたいとのこと。はいはいって感じで免許証を提示する。自転車は東京で購入したもので10年以上乗っている。防犯登録は警視庁になっているらしく、兵庫県警の警察官では調べられないみたい。次に車体番号も読み取って調べていたけど、よくわからなかったみたい。結局、私が本物の持ち主とその場で調べることができなくて、警察官もたぶん本物だと思いますみたいな歯切れの悪い結果で職務質問を終えた。仮にその自転車が盗難にあってもその防犯登録から私を辿ることはできないので近所の自転車屋さんで防犯登録入り直してくださいと言われた。あー、またこの件か。都道府県の防犯登録のシステムが全国で統合されていればいい話しなのに、なんで引っ越したら防犯登録をやり直さないとあかんねんと。現場の警察官に言っても仕方ないので何も言わないことにした。&lt;/p>
&lt;h2 id="プロコン">プロコン&lt;/h2>
&lt;p>たまたまタイムラインでみかけてちょっと眺めてた。動画で同じ内容をみて、ハラスメントを問題視する人と、プロダクトの新規性について言及する人がいて、感じ方は人それぞれだなぁと思いながら &lt;a href="https://twitter.com/search?q=%23procon32&amp;amp;src=typed_query&amp;amp;f=top">ハッシュタグ&lt;/a> を眺めてた。&lt;/p></content></item><item><title>畝作り</title><link>/diary/posts/2021/1008/</link><pubDate>Fri, 08 Oct 2021 06:45:23 +0900</pubDate><guid>/diary/posts/2021/1008/</guid><description>23時頃に寝て6時頃に起きた。田んぼは朝の方が涼しくて作業しやすいので朝起きるインセンティブになる。電車乗らなくなって早起きできなくなってたけど、やっぱり朝起きるインセンティブがあると起きれる。徐々に暑くなるせいか10時が感覚的に暑さのピークでそれ以降はあまり変わらない気がする。
畑の水やり 7時半から8時まで水やり。昨日、amazon で購入した13リットル入るじょうろが届いたので初めて使ってみた。とくに問題なくて大きいので畑に水をやるときに往復する回数が減る。私が調べた限りだと、一番大きいジョウロが13リットルだった。よさそう。
田んぼの肥料撒きと畝作り 8時から15時までお昼休憩を挟みつつ田んぼの作業。畝作りする前に堆肥を土に撒かないといけないらしい。鶏糞と苦土石灰 (くどせっかい) を撒いた。本当は一反あたり鶏糞を2-3t撒くとあったけど、しんどいので100kgぐらいにしといた。苦土石灰は50kg撒いた。撒き終わったのがお昼前で少し雑用もやって、お昼からトラクターで畝作りを12時半から15時ぐらいまでやってた。この後、母が菜の花を植えるらしい。菜の花は9-10月頃に植えて4-5月頃に収穫を迎える。なんか菜種油を淡路島の特産にしたい運動？をやっていて、菜の花の種を無料で配っているらしい。試しにやってみるとのこと。
耕し終えたら、再度アルミブリッジを使って田んぼから畔を跨いで出る。ブリッジの配置がよくなかったのか、ウィリー状態になってひっくり返りそうになった。危なかった。
三ノ宮へ 17時の高速バスに乗って三ノ宮へ戻る。一旦、家に戻って荷物を置いて、キングダムのアニメをみて、20時からオフィスで今週の仕事始め。隔週で顧問さんと打ち合わせしている。次の月曜日は打ち合わせの日なのでそれまでに打ち合わせの議題の準備をしておく。いつもは水曜か木曜には打ち合わせする内容を連絡している。今週は全然仕事できなくて金曜日に話したいチケットを連絡した。そのチケットの仕上げをいまから片付ける。</description><content>&lt;p>23時頃に寝て6時頃に起きた。田んぼは朝の方が涼しくて作業しやすいので朝起きるインセンティブになる。電車乗らなくなって早起きできなくなってたけど、やっぱり朝起きるインセンティブがあると起きれる。徐々に暑くなるせいか10時が感覚的に暑さのピークでそれ以降はあまり変わらない気がする。&lt;/p>
&lt;h2 id="畑の水やり">畑の水やり&lt;/h2>
&lt;p>7時半から8時まで水やり。昨日、amazon で購入した13リットル入るじょうろが届いたので初めて使ってみた。とくに問題なくて大きいので畑に水をやるときに往復する回数が減る。私が調べた限りだと、一番大きいジョウロが13リットルだった。よさそう。&lt;/p>
&lt;h2 id="田んぼの肥料撒きと畝作り">田んぼの肥料撒きと畝作り&lt;/h2>
&lt;p>8時から15時までお昼休憩を挟みつつ田んぼの作業。畝作りする前に堆肥を土に撒かないといけないらしい。鶏糞と苦土石灰 (くどせっかい) を撒いた。本当は一反あたり鶏糞を2-3t撒くとあったけど、しんどいので100kgぐらいにしといた。苦土石灰は50kg撒いた。撒き終わったのがお昼前で少し雑用もやって、お昼からトラクターで畝作りを12時半から15時ぐらいまでやってた。この後、母が菜の花を植えるらしい。菜の花は9-10月頃に植えて4-5月頃に収穫を迎える。なんか菜種油を淡路島の特産にしたい運動？をやっていて、菜の花の種を無料で配っているらしい。試しにやってみるとのこと。&lt;/p>
&lt;p>耕し終えたら、再度アルミブリッジを使って田んぼから畔を跨いで出る。ブリッジの配置がよくなかったのか、ウィリー状態になってひっくり返りそうになった。危なかった。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1008_tractor-bridge.jpg"/>
&lt;/figure>
&lt;h2 id="三ノ宮へ">三ノ宮へ&lt;/h2>
&lt;p>17時の高速バスに乗って三ノ宮へ戻る。一旦、家に戻って荷物を置いて、キングダムのアニメをみて、20時からオフィスで今週の仕事始め。隔週で顧問さんと打ち合わせしている。次の月曜日は打ち合わせの日なのでそれまでに打ち合わせの議題の準備をしておく。いつもは水曜か木曜には打ち合わせする内容を連絡している。今週は全然仕事できなくて金曜日に話したいチケットを連絡した。そのチケットの仕上げをいまから片付ける。&lt;/p></content></item><item><title>傍聴</title><link>/diary/posts/2021/1007/</link><pubDate>Thu, 07 Oct 2021 06:46:46 +0900</pubDate><guid>/diary/posts/2021/1007/</guid><description>1時頃に寝て6時に起きる。実家なんで久しぶりにテレビみてて、新潟ロシア村の廃墟に潜入するのをやっててちょっとおもしろかった。バブル末期のテーマパークが休業状態になって廃墟と化したらしい。
新潟ロシア村は心霊スポットに！廃墟と化したテーマパークの現在は？ 畑の水やり 7時から8時まで水やり。軽トラに水を入れた雨水タンクとバケツを畑まで運び、じょうろに水を入れて何往復かして水をやる。手間隙がかかるだけでそんな大変ではない。この作業は慣れた。
田んぼの草焼きと耕起 昨日の続き。朝は露が降りて湿っていて草に火がつきにくい。昨日、焼いた半分の田んぼをトラクターで耕すことから始める。半分終えてから残りの半分の草も順次焼いていった。火のコントロールの慣れたのと、燃え拡がるほどの領域はないので安心して火を放つことができた。終えてから残りの半分もトラクターで耕した。だいたい8時から13時まで草焼きと田んぼを耕していた。
裁判の傍聴 15時から父の交通事故に関する裁判に行く。裁判所行くのも初めて。裁判官から母に意見を聞きたいという機会で、たまたま私も帰っているので一緒に傍聴させてもらうことにした。普段の裁判は事前に質疑応答のやり取りが弁護士間で行われており、実際の裁判は5-10分で内容だけ確認したら次回の予定を決めているだけだという。
待合室で父の成年後見人の弁護士さんと話していたら、裁判も徐々にリモート化の流れになってきていて、実際のこの裁判では相手の弁護士さんはテレビ会議で参加している。関係者もリモート会議でも構わないけれど、裁判は関係者しか参加してはいけないという制限があって、リモートだと周りに関係ない人がいないことを証明するのが難しいと仰っていた。裁判のときに裁判所のスタッフが相手の弁護士に電話を繋いだとき「周りに誰もいませんか？」と確認していた。
裁判官と書記のようなスタッフと母と父の成年後見人の弁護士さん、私の5人で裁判が始まった。言うても普通の会議室のような場所で、裁判官が進行を進めながら、普通に会議をやるような感じだった。出席者は誰もノートPCをもっておらず、紙の分厚い資料が2-3束置いてあって、書記さんも手書きで紙のノートにメモをとっていた。私がスマホでメモをとってたらスマホは使うなと怒られた。あとで弁護士さんに確認したら、通常の裁判だったらメモをとってもいいけど、傍聴人は電子機器を使うのはダメみたい。弁護士だったらノートPCでメモをとる人もいるらしい。成年後見人の弁護士さんは、裁判のときに紙の資料の方がぱらぱらめくって見つけるのが速いのでノートPCを使わないと話してた。そんなもんかな。
裁判官の進行や説明がぐだぐだ過ぎてちょっと驚いた。見た目30代ぐらいの裁判官。裁判官って司法試験をパスした優秀な人がなっているであろうになんか拍子抜けした。あとで弁護士さんと雑談していたときに「和解案は支部のそこそこ優秀な人たちが作るのであまり変なものは出てこない。本当に優秀な人たちは東京や大阪で働いているけど、、、」みたいなことをさらっと話してた。
地方裁判所の裁判官とかは、相対的に優秀な人は少ないという話なのかな？裁判官がぐだぐだ過ぎるので弁護士さんがちょくちょくツッコミを入れながら進行をサポートしていた。もしくは多くの案件を抱え過ぎていて、個々の裁判の経緯や内容をいちいち覚えてないのかもしれない。当初、こちらは被害者側なので言葉に配慮して柔らかく話すように努めているのかな？と思って聞いてたけど、進行もぐだぐだなんで、どうも違うのかな？と思うようになった。話すときに、順接、逆説、指示語が多くて何が言いたいのかさっぱりわからなくて1つのことを伝えるのに無駄に言葉数が多いように感じたけど、それは端的に要点のみを話すのに慣れた、私の職業病なんやろかとかも思いながら聞いてた。
交通事故の裁判の場合、よほど変なのが出てこない限り、和解案で決めておいた方がよいと弁護士さんは仰っていた。それは裁判所が被害者側に寄り添って作るものなのでそれを拒否して判決まで行ってもそれよりもよい内容にはならず、悪くなる可能性が高いという。次回かその次ぐらいで和解案が出てくるみたい。もう少しでこの裁判は終わりそう。</description><content>&lt;p>1時頃に寝て6時に起きる。実家なんで久しぶりにテレビみてて、新潟ロシア村の廃墟に潜入するのをやっててちょっとおもしろかった。バブル末期のテーマパークが休業状態になって廃墟と化したらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://travel-noted.jp/posts/21044">新潟ロシア村は心霊スポットに！廃墟と化したテーマパークの現在は？&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="畑の水やり">畑の水やり&lt;/h2>
&lt;p>7時から8時まで水やり。軽トラに水を入れた雨水タンクとバケツを畑まで運び、じょうろに水を入れて何往復かして水をやる。手間隙がかかるだけでそんな大変ではない。この作業は慣れた。&lt;/p>
&lt;h2 id="田んぼの草焼きと耕起">田んぼの草焼きと耕起&lt;/h2>
&lt;p>昨日の続き。朝は露が降りて湿っていて草に火がつきにくい。昨日、焼いた半分の田んぼをトラクターで耕すことから始める。半分終えてから残りの半分の草も順次焼いていった。火のコントロールの慣れたのと、燃え拡がるほどの領域はないので安心して火を放つことができた。終えてから残りの半分もトラクターで耕した。だいたい8時から13時まで草焼きと田んぼを耕していた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1007_field.jpg"/>
&lt;/figure>
&lt;h2 id="裁判の傍聴">裁判の傍聴&lt;/h2>
&lt;p>15時から父の交通事故に関する裁判に行く。裁判所行くのも初めて。裁判官から母に意見を聞きたいという機会で、たまたま私も帰っているので一緒に傍聴させてもらうことにした。普段の裁判は事前に質疑応答のやり取りが弁護士間で行われており、実際の裁判は5-10分で内容だけ確認したら次回の予定を決めているだけだという。&lt;/p>
&lt;p>待合室で父の成年後見人の弁護士さんと話していたら、裁判も徐々にリモート化の流れになってきていて、実際のこの裁判では相手の弁護士さんはテレビ会議で参加している。関係者もリモート会議でも構わないけれど、裁判は関係者しか参加してはいけないという制限があって、リモートだと周りに関係ない人がいないことを証明するのが難しいと仰っていた。裁判のときに裁判所のスタッフが相手の弁護士に電話を繋いだとき「周りに誰もいませんか？」と確認していた。&lt;/p>
&lt;p>裁判官と書記のようなスタッフと母と父の成年後見人の弁護士さん、私の5人で裁判が始まった。言うても普通の会議室のような場所で、裁判官が進行を進めながら、普通に会議をやるような感じだった。出席者は誰もノートPCをもっておらず、紙の分厚い資料が2-3束置いてあって、書記さんも手書きで紙のノートにメモをとっていた。私がスマホでメモをとってたらスマホは使うなと怒られた。あとで弁護士さんに確認したら、通常の裁判だったらメモをとってもいいけど、傍聴人は電子機器を使うのはダメみたい。弁護士だったらノートPCでメモをとる人もいるらしい。成年後見人の弁護士さんは、裁判のときに紙の資料の方がぱらぱらめくって見つけるのが速いのでノートPCを使わないと話してた。そんなもんかな。&lt;/p>
&lt;p>裁判官の進行や説明がぐだぐだ過ぎてちょっと驚いた。見た目30代ぐらいの裁判官。裁判官って司法試験をパスした優秀な人がなっているであろうになんか拍子抜けした。あとで弁護士さんと雑談していたときに「和解案は支部のそこそこ優秀な人たちが作るのであまり変なものは出てこない。本当に優秀な人たちは東京や大阪で働いているけど、、、」みたいなことをさらっと話してた。&lt;/p>
&lt;p>地方裁判所の裁判官とかは、相対的に優秀な人は少ないという話なのかな？裁判官がぐだぐだ過ぎるので弁護士さんがちょくちょくツッコミを入れながら進行をサポートしていた。もしくは多くの案件を抱え過ぎていて、個々の裁判の経緯や内容をいちいち覚えてないのかもしれない。当初、こちらは被害者側なので言葉に配慮して柔らかく話すように努めているのかな？と思って聞いてたけど、進行もぐだぐだなんで、どうも違うのかな？と思うようになった。話すときに、順接、逆説、指示語が多くて何が言いたいのかさっぱりわからなくて1つのことを伝えるのに無駄に言葉数が多いように感じたけど、それは端的に要点のみを話すのに慣れた、私の職業病なんやろかとかも思いながら聞いてた。&lt;/p>
&lt;p>交通事故の裁判の場合、よほど変なのが出てこない限り、和解案で決めておいた方がよいと弁護士さんは仰っていた。それは裁判所が被害者側に寄り添って作るものなのでそれを拒否して判決まで行ってもそれよりもよい内容にはならず、悪くなる可能性が高いという。次回かその次ぐらいで和解案が出てくるみたい。もう少しでこの裁判は終わりそう。&lt;/p></content></item><item><title>草焼き</title><link>/diary/posts/2021/1006/</link><pubDate>Wed, 06 Oct 2021 07:15:22 +0900</pubDate><guid>/diary/posts/2021/1006/</guid><description>23時頃に寝て7時に起きる。蚊取り線香のおかげでよく眠れるようになった。やや筋肉痛。
畑の水やり 昨日と同様に雨水タンクからポリタンクへの水の移し替えをした。入れ物からホースが外れないように釣りの重りを買ってきてつけてみた。ダイソーで25号の重りとキーホルダーの輪っかとタイラップを購入した。もう少し重い方がよかったけど、ないよりはましかな。
田んぼの草集めと草焼き 昨日、草刈りが完了したので乾かした草を焼いていく。草が乾いていないとなかなか火がつかなかったり、ついても火力がないと消えてしまう。また逆に草がよく乾いていると火の回りが早く一気に燃え拡がるので火のコントロールができない。隣の田んぼや周りに燃え広がらないように注意してやらないと家事になりそうで危ない。
田んぼの周囲の草を内側に集めて、周囲を先にトラクターで耕すことにした。草がなければ燃え拡がることはないので結界のようなものを作る。まずトラクターを田んぼに入れる。あらかじめ3mのアルミブリッジを用意してあったので畔の谷をまたいで橋を渡る。
先に周囲だけぐるりと耕す。
慣れてきて草の帯を作って風上から風下へ燃やしていく。
煙に巻かれないようにしながら半分ぐらいの草を焼けた。都会で暮らしていると火をつけるという作業をすることはあまりない気がするけど、火を育てながら燃やしていくのが割とおもしろかった。</description><content>&lt;p>23時頃に寝て7時に起きる。蚊取り線香のおかげでよく眠れるようになった。やや筋肉痛。&lt;/p>
&lt;h2 id="畑の水やり">畑の水やり&lt;/h2>
&lt;p>昨日と同様に雨水タンクからポリタンクへの水の移し替えをした。入れ物からホースが外れないように釣りの重りを買ってきてつけてみた。ダイソーで25号の重りとキーホルダーの輪っかとタイラップを購入した。もう少し重い方がよかったけど、ないよりはましかな。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1006_hose-weight.jpg"/>
&lt;/figure>
&lt;h2 id="田んぼの草集めと草焼き">田んぼの草集めと草焼き&lt;/h2>
&lt;p>昨日、草刈りが完了したので乾かした草を焼いていく。草が乾いていないとなかなか火がつかなかったり、ついても火力がないと消えてしまう。また逆に草がよく乾いていると火の回りが早く一気に燃え拡がるので火のコントロールができない。隣の田んぼや周りに燃え広がらないように注意してやらないと家事になりそうで危ない。&lt;/p>
&lt;p>田んぼの周囲の草を内側に集めて、周囲を先にトラクターで耕すことにした。草がなければ燃え拡がることはないので結界のようなものを作る。まずトラクターを田んぼに入れる。あらかじめ3mのアルミブリッジを用意してあったので畔の谷をまたいで橋を渡る。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1006_tractor-bridge.jpg"/>
&lt;/figure>
&lt;p>先に周囲だけぐるりと耕す。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1006_turn-over.jpg"/>
&lt;/figure>
&lt;p>慣れてきて草の帯を作って風上から風下へ燃やしていく。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1006_burn-grass.jpg"/>
&lt;/figure>
&lt;p>煙に巻かれないようにしながら半分ぐらいの草を焼けた。都会で暮らしていると火をつけるという作業をすることはあまりない気がするけど、火を育てながら燃やしていくのが割とおもしろかった。&lt;/p></content></item><item><title>草刈り完了</title><link>/diary/posts/2021/1005/</link><pubDate>Tue, 05 Oct 2021 07:19:59 +0900</pubDate><guid>/diary/posts/2021/1005/</guid><description>22時頃に寝て6時に起きる。昨日は蚊取り線香をセットしたのでよく眠れた。田んぼ作業して疲れ果てたせいか、早く寝て途中で起きることもなかった。最近はたいてい夜中に1-2度は起きるけれど、昨日は疲れていたので起きなかった。やっぱり体力を使うとよく眠れるみたい。平日ももっと運動して疲れた方がいいのかもしれない。
畑の水やり 昨日より遅く起きたので7時半から。午後から一緒に畑の面倒をみてくれている人が手伝ってくれるらしい。その人が水やりできるよう雨水タンクから畑に置いてあるポリタンクへの水の移し替えを自動化してみた。
あとは軽く水やりして細々した作業をしてた。じょうろで水をやっていると、ゴミのせいか目が詰まってあまり水が出なくなる。こし網つきのじょうろがないか探したら2-3候補が出てきた。レビューをみながら次のものを購入した。
トンボじょうろ13型 選定理由はこれら。レビューみてたらサイズの大きいじょうろは使っているとすぐヒビが入るとか壊れるとかのコメントもみかけた。
水をたくさん入れられる こし網がついている 普通に使ってて壊れない 田んぼの草刈り 昨日の続き。8時ぐらいから始めて11時過ぎまでひたすら草刈機で草刈りしてた。10時ぐらいが暑さのピークでバテて残りを夕方にしようかと考えていたけど、その後、涼しくなったんで草刈りは全部終えた。草刈機やったことなかったんでまだあまりうまく使いこなせない。身長と機械の竿の長さがあってなくて微妙にやりにくい。あと草の倒れている方向と草刈機の刃の入れ方を調整したりしながら試行錯誤してた。なかなか難しい。草を刈らずに放置していると、草を刈って燃やすという余分な手間隙がかかる。システムで例えると、メジャーバージョンを2つぐらいまとめてあげるみたいなもん。草が伸びてしまう前に田んぼ耕しておくべきだったと反省した。今後は気をつけよう。
お見舞い 15時から父のお見舞い。病院はまだ直接の面会を再会していないので会議室のようなところでタブレットでリモート面会する。父は喉を気管切開してて話せないのでリモート面会しても会話はできない。定期的に顔を出しにいくみたいなもの。帰りにあちこち寄って細々したことをやってたら18時ぐらいになって田んぼできなかった。最近は18時まわると暗くなるな。気付いてなかった。</description><content>&lt;p>22時頃に寝て6時に起きる。昨日は蚊取り線香をセットしたのでよく眠れた。田んぼ作業して疲れ果てたせいか、早く寝て途中で起きることもなかった。最近はたいてい夜中に1-2度は起きるけれど、昨日は疲れていたので起きなかった。やっぱり体力を使うとよく眠れるみたい。平日ももっと運動して疲れた方がいいのかもしれない。&lt;/p>
&lt;h2 id="畑の水やり">畑の水やり&lt;/h2>
&lt;p>昨日より遅く起きたので7時半から。午後から一緒に畑の面倒をみてくれている人が手伝ってくれるらしい。その人が水やりできるよう雨水タンクから畑に置いてあるポリタンクへの水の移し替えを自動化してみた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1005_watertank.jpg"/>
&lt;/figure>
&lt;p>あとは軽く水やりして細々した作業をしてた。じょうろで水をやっていると、ゴミのせいか目が詰まってあまり水が出なくなる。こし網つきのじょうろがないか探したら2-3候補が出てきた。レビューをみながら次のものを購入した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.amazon.co.jp/gp/product/B00762ACJE/">トンボじょうろ13型&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>選定理由はこれら。レビューみてたらサイズの大きいじょうろは使っているとすぐヒビが入るとか壊れるとかのコメントもみかけた。&lt;/p>
&lt;ul>
&lt;li>水をたくさん入れられる&lt;/li>
&lt;li>こし網がついている&lt;/li>
&lt;li>普通に使ってて壊れない&lt;/li>
&lt;/ul>
&lt;h2 id="田んぼの草刈り">田んぼの草刈り&lt;/h2>
&lt;p>昨日の続き。8時ぐらいから始めて11時過ぎまでひたすら草刈機で草刈りしてた。10時ぐらいが暑さのピークでバテて残りを夕方にしようかと考えていたけど、その後、涼しくなったんで草刈りは全部終えた。草刈機やったことなかったんでまだあまりうまく使いこなせない。身長と機械の竿の長さがあってなくて微妙にやりにくい。あと草の倒れている方向と草刈機の刃の入れ方を調整したりしながら試行錯誤してた。なかなか難しい。草を刈らずに放置していると、草を刈って燃やすという余分な手間隙がかかる。システムで例えると、メジャーバージョンを2つぐらいまとめてあげるみたいなもん。草が伸びてしまう前に田んぼ耕しておくべきだったと反省した。今後は気をつけよう。&lt;/p>
&lt;h2 id="お見舞い">お見舞い&lt;/h2>
&lt;p>15時から父のお見舞い。病院はまだ直接の面会を再会していないので会議室のようなところでタブレットでリモート面会する。父は喉を気管切開してて話せないのでリモート面会しても会話はできない。定期的に顔を出しにいくみたいなもの。帰りにあちこち寄って細々したことをやってたら18時ぐらいになって田んぼできなかった。最近は18時まわると暗くなるな。気付いてなかった。&lt;/p></content></item><item><title>草刈り</title><link>/diary/posts/2021/1004/</link><pubDate>Mon, 04 Oct 2021 04:46:32 +0900</pubDate><guid>/diary/posts/2021/1004/</guid><description>3時に寝て4時半に起きる。ほとんど寝てない。蚊がいて飛んでいるのが気になったり刺されてかゆかったりして寝るの諦めた。もう涼しくなって大丈夫かと思ってたけど、まだ蚊取り線香が必要だった。
畑の水やり 6時半から7時半まで。玉ねぎ、茄子、大根、ミニトマトなど、いろいろ野菜が植えてある。玉ねぎはいま芽が出てきたところで水をたくさんやらないといけないらしい。
Joel on Software 書評の続き。空き時間に少し書いた。実家だとオフィスより環境がよくないので集中力が下がり、その結果として効率が落ちる。本書の中でもオフィスのこだわりの章があったけど、環境が大事ということが実感できた。
田んぼの草刈り 午後から草場となった田んぼの草刈り。ある程度草を刈っておかないとトラクターの爪に巻き込むので耕すことができない。草刈機で刈り取りつつ、それを集めてきて、乾かして焼く。焼畑農業みたいなことをしないといけない。刈ったばかりの草は水分を含むのですぐには焼けない。一方で乾いた草はよく燃えるので燃え拡がってしまう。下手すると周りに燃え拡がって火事になってしまう。刈り取った草の集約や配置を調整しないといけない。日中、暑かったし、あまり寝てなかったから夕方は眠くてバテてた。</description><content>&lt;p>3時に寝て4時半に起きる。ほとんど寝てない。蚊がいて飛んでいるのが気になったり刺されてかゆかったりして寝るの諦めた。もう涼しくなって大丈夫かと思ってたけど、まだ蚊取り線香が必要だった。&lt;/p>
&lt;h2 id="畑の水やり">畑の水やり&lt;/h2>
&lt;p>6時半から7時半まで。玉ねぎ、茄子、大根、ミニトマトなど、いろいろ野菜が植えてある。玉ねぎはいま芽が出てきたところで水をたくさんやらないといけないらしい。&lt;/p>
&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>書評の続き。空き時間に少し書いた。実家だとオフィスより環境がよくないので集中力が下がり、その結果として効率が落ちる。本書の中でもオフィスのこだわりの章があったけど、環境が大事ということが実感できた。&lt;/p>
&lt;h2 id="田んぼの草刈り">田んぼの草刈り&lt;/h2>
&lt;p>午後から草場となった田んぼの草刈り。ある程度草を刈っておかないとトラクターの爪に巻き込むので耕すことができない。草刈機で刈り取りつつ、それを集めてきて、乾かして焼く。焼畑農業みたいなことをしないといけない。刈ったばかりの草は水分を含むのですぐには焼けない。一方で乾いた草はよく燃えるので燃え拡がってしまう。下手すると周りに燃え拡がって火事になってしまう。刈り取った草の集約や配置を調整しないといけない。日中、暑かったし、あまり寝てなかったから夕方は眠くてバテてた。&lt;/p></content></item><item><title>帰省</title><link>/diary/posts/2021/1003/</link><pubDate>Sun, 03 Oct 2021 11:40:58 +0900</pubDate><guid>/diary/posts/2021/1003/</guid><description>0時に寝て9時頃に起きる。今朝は寝起きが悪くてベッドでぐだぐだしてた。ダイの大冒険をみて家事をした。数日、家を空けるので冷蔵庫の中を空にして、洗いものやゴミの始末をする。11時半頃にオフィスに着く。
OMRON connect グラフは今週の平均体温の推移を示したもの。ワクチン摂取後の体温は36.5-37.0℃の間を行ったり来たりしているものの、体調はまったくしんどくないのであまり気にしてない。そもそも摂取後に体温を測り始めたので自分の平熱がどのぐらいなのかすら把握してないことに気付いた。音波通信体温計 MC-6800B　けんおんくん を使っていて OMRON connect というスマホアプリで計測した体温を記録できる。
Joel on Software 書評を書き始めた。自分が学んだところや関心をひいたところは、読みながらメモ書きで課題管理システムのチケットに書いてある。それらを見返しながら、一般向けの書評にまとめる。自分にしかわからない内容を補足したり、見返すと言及するほどではないことを取り除いたり。あとは書く根気と時間次第になるわけだが、いまは時間がたっぷりあるので比較的、時間がかかっても学びの質をあげるためになるべく書くようにしている。5時間ほどかけて1/3ぐらい書けた。まだ途中。
実家へ 16時30分の高速バスで実家へ帰る。18時前ぐらいに実家の最寄りのバス停につく。そこから車で10分ほど。片道が2,090円で、往復券だと割引で3,760円になり、420円お得になる。この距離だと大した金額ではない。東京にいたら新幹線が往復で3万円ほどで、乗り継ぎの時間を入れると移動時間も6-7時間になってしまう。東京から神戸に戻ってきた理由として実家に気軽に帰りやすいというメリットがある。
今回の帰省の目的は田んぼの一部が草場になっているので耕さないといけない。本当は9月中にやりたかったが、天候とワクチン摂取などを調整してたら10月になってしまった。自分の会社でよいのは、(他社の仕事を受けてなければ) 自分の都合で休日・平日関係なく業務の調整ができること。来週は実家の雑務: 田んぼや裁判の傍聴などをやりながら隙間に会社の仕事をする。</description><content>&lt;p>0時に寝て9時頃に起きる。今朝は寝起きが悪くてベッドでぐだぐだしてた。ダイの大冒険をみて家事をした。数日、家を空けるので冷蔵庫の中を空にして、洗いものやゴミの始末をする。11時半頃にオフィスに着く。&lt;/p>
&lt;h2 id="omron-connect">OMRON connect&lt;/h2>
&lt;p>グラフは今週の平均体温の推移を示したもの。ワクチン摂取後の体温は36.5-37.0℃の間を行ったり来たりしているものの、体調はまったくしんどくないのであまり気にしてない。そもそも摂取後に体温を測り始めたので自分の平熱がどのぐらいなのかすら把握してないことに気付いた。&lt;a href="https://www.healthcare.omron.co.jp/product/mc/mc-6800b.html">音波通信体温計 MC-6800B　けんおんくん&lt;/a> を使っていて OMRON connect というスマホアプリで計測した体温を記録できる。&lt;/p>
&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>書評を書き始めた。自分が学んだところや関心をひいたところは、読みながらメモ書きで課題管理システムのチケットに書いてある。それらを見返しながら、一般向けの書評にまとめる。自分にしかわからない内容を補足したり、見返すと言及するほどではないことを取り除いたり。あとは書く根気と時間次第になるわけだが、いまは時間がたっぷりあるので比較的、時間がかかっても学びの質をあげるためになるべく書くようにしている。5時間ほどかけて1/3ぐらい書けた。まだ途中。&lt;/p>
&lt;h2 id="実家へ">実家へ&lt;/h2>
&lt;p>16時30分の高速バスで実家へ帰る。18時前ぐらいに実家の最寄りのバス停につく。そこから車で10分ほど。片道が2,090円で、往復券だと割引で3,760円になり、420円お得になる。この距離だと大した金額ではない。東京にいたら新幹線が往復で3万円ほどで、乗り継ぎの時間を入れると移動時間も6-7時間になってしまう。東京から神戸に戻ってきた理由として実家に気軽に帰りやすいというメリットがある。&lt;/p>
&lt;p>今回の帰省の目的は田んぼの一部が草場になっているので耕さないといけない。本当は9月中にやりたかったが、天候とワクチン摂取などを調整してたら10月になってしまった。自分の会社でよいのは、(他社の仕事を受けてなければ) 自分の都合で休日・平日関係なく業務の調整ができること。来週は実家の雑務: 田んぼや裁判の傍聴などをやりながら隙間に会社の仕事をする。&lt;/p></content></item><item><title>テーマスタイルのカスタマイズ</title><link>/diary/posts/2021/1002/</link><pubDate>Sat, 02 Oct 2021 13:24:56 +0900</pubDate><guid>/diary/posts/2021/1002/</guid><description>昨日の夜は早めに仕事を終えて 第一回関数型プログラミング（仮）の会 の、やましたさんとみずしまさんの発表の2つだけ聞いて、疲れてそのまま帰ってゆっくりしてた。ドラクエタクトの新しいイベントやってたかな。あと今秋初めて買った梨を食べてた。たぶん0時ぐらいには寝て8時ぐらいに起きた。
あさパラS は総裁選の振り返りや役員人事の解説やっててほむほむと見てた。河野さんが官僚に嫌われる要因の1つとしてちょっと前にパワハラ音声が流出してたけど、言葉遣いがきついのに加え、正論をきつく言うから官僚の逃げ道をなくして追い詰めてしまうといったことが話されてた。心理的安全性の文脈で、お互いに信頼関係が築けた上で厳しいことを指摘するのは構わない (言い方は配慮すべき) が、そうじゃないと相手を追い詰めてしまう。過去に私も不誠実な相手に対して正論を言って追い詰めがちだったのでいまは反省している。目的は課題を解決することであって、相手を追い詰めても目的を果たせないということがようやく経験から理解できるようになってきた。
ストレッチ 毎週土曜日は Dr.stretch さんでストレッチしてる。開脚の幅が目標 (メトリクス) になっていて毎週測っている。目標は自分の身長と同じぐらいということで178cm。ストレッチの開始前に測って、ストレッチを受けてから再計測する。今日は開始前169cm、ストレッチ後171cmと初めて170cmの大台に到達した。このままうまくいけば、あと3-6ヶ月ぐらいあれば目標の身長と同じぐらいの開脚幅になるかもしれない。家でも毎日ではないけど、2日に1回ぐらいのペースでストレッチをするのが習慣になりつつある。いまジョギングをすると腰に負担がくるんやけど、トレーナーさんが言うには、開脚幅が広がると股関節の可動域があがって腰の負担も減るという。本来、腰の筋肉は動かない方の筋肉だが、股関節の可動域が小さいとそれを補うために腰の筋肉が動いてしまい、その結果として腰に負担がかかる。なので、股関節が本来の意図した動きをしていれば、自然に腰の負担も下がるという理屈らしい。
価値観を育てる あんちぽさんのスライドを眺めて共感してた。日記を書き始めたのも あんちぽさんの日記 を読んでて、毎日やっていることを「書くこと」は何かしら意味や意義があるんじゃないかと思うようになったから。
歳を経て難しく感じるようになったことの1つに 動機づけ (モチベーションコントロール) がある。
私は基本的に忙しいという言葉を使わない。やらないといけないことの何かが進捗していないとき、それは「やる気がない」と受け止めている。もちろん相手がいるときにやる気がないとそのまま表現すると横柄だったり失礼だったりすることもあるので余裕がないと答える場合もある。しかし、本質的にはやる気がないが正しい。もう少し補足すると、いまやっていることの方が自分にとって優先度が高く (やる気があり)、それ以外の別のことを先送りしているだけだと捉えている。もし別のことにやる気があるならば、いまやっていることを後回しにすればいいだけだからだ。
ここで、何をやってもいいとしたら、何をやりたいかという課題が出てくる。適当にあれこれやってみても、実際にやってみるとうまくいかなくて、やる気が持続しなかったりすることがある。多くのケースで、若い頃ほどなにかに夢中になってやっていた経験が誰しもあると思うが、あのときはなぜそんなに夢中になってできたのか。いま思い返しながら、自分にとっての動機づけの源泉を探るようなことをしていかないとわからないのだ。まったく自分のことなのに。2021年に入ってからそういったことを考え続けていたところ、このスライドを眺めてたら動機よりも価値観なんだよと書いてあって、私がこの9ヶ月間、掘り返し続けてた動機づけの源泉=価値観という考え方はしっくりきて、価値観がブレると動機づけもうまくいかないなと思えた。
Hugo/Terminalのカスタマイズ Speaker Deck のスライドの埋め込みができなくて調べた。HUGOで埋め込みができない時の対処法 によると、config.toml に次の設定を追加すると表示された。
[markup] [markup.goldmark] [markup.goldmark.renderer] unsafe = true Terminal のテーマだと本文と引用の違いわかりにくかったのでスタイルを変えてみた。
blockquote { background: #eafff4; color: #2d3330; font-style: italic; } 変更前
変更後
日付の表記を少し大きくして目立つようにした。
.post-date { font-weight: bold; font-size: 1.3rem; }</description><content>&lt;p>昨日の夜は早めに仕事を終えて &lt;a href="https://opt.connpass.com/event/222709/">第一回関数型プログラミング（仮）の会&lt;/a> の、やましたさんとみずしまさんの発表の2つだけ聞いて、疲れてそのまま帰ってゆっくりしてた。ドラクエタクトの新しいイベントやってたかな。あと今秋初めて買った梨を食べてた。たぶん0時ぐらいには寝て8時ぐらいに起きた。&lt;/p>
&lt;p>&lt;a href="https://www.ytv.co.jp/asapara/">あさパラS&lt;/a> は総裁選の振り返りや役員人事の解説やっててほむほむと見てた。河野さんが官僚に嫌われる要因の1つとしてちょっと前にパワハラ音声が流出してたけど、言葉遣いがきついのに加え、正論をきつく言うから官僚の逃げ道をなくして追い詰めてしまうといったことが話されてた。心理的安全性の文脈で、お互いに信頼関係が築けた上で厳しいことを指摘するのは構わない (言い方は配慮すべき) が、そうじゃないと相手を追い詰めてしまう。過去に私も不誠実な相手に対して正論を言って追い詰めがちだったのでいまは反省している。目的は課題を解決することであって、相手を追い詰めても目的を果たせないということがようやく経験から理解できるようになってきた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>毎週土曜日は &lt;a href="https://doctorstretch.com/">Dr.stretch&lt;/a> さんでストレッチしてる。開脚の幅が目標 (メトリクス) になっていて毎週測っている。目標は自分の身長と同じぐらいということで178cm。ストレッチの開始前に測って、ストレッチを受けてから再計測する。今日は開始前169cm、ストレッチ後171cmと初めて170cmの大台に到達した。このままうまくいけば、あと3-6ヶ月ぐらいあれば目標の身長と同じぐらいの開脚幅になるかもしれない。家でも毎日ではないけど、2日に1回ぐらいのペースでストレッチをするのが習慣になりつつある。いまジョギングをすると腰に負担がくるんやけど、トレーナーさんが言うには、開脚幅が広がると股関節の可動域があがって腰の負担も減るという。本来、腰の筋肉は動かない方の筋肉だが、股関節の可動域が小さいとそれを補うために腰の筋肉が動いてしまい、その結果として腰に負担がかかる。なので、股関節が本来の意図した動きをしていれば、自然に腰の負担も下がるという理屈らしい。&lt;/p>
&lt;h2 id="価値観を育てる">価値観を育てる&lt;/h2>
&lt;p>あんちぽさんのスライドを眺めて共感してた。日記を書き始めたのも &lt;a href="https://kentarokuribayashi.com/">あんちぽさんの日記&lt;/a> を読んでて、毎日やっていることを「書くこと」は何かしら意味や意義があるんじゃないかと思うようになったから。&lt;/p>
&lt;iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/422f05833bc64c1a978c1ba92020a249" title="自分の人生を生きる - 遊びで生きて価値観を育てよう / Live Your Own Life - Live for Fun and Develop Your Values" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;">&lt;/iframe>
&lt;p>歳を経て難しく感じるようになったことの1つに &lt;strong>動機づけ (モチベーションコントロール)&lt;/strong> がある。&lt;/p>
&lt;p>私は基本的に忙しいという言葉を使わない。やらないといけないことの何かが進捗していないとき、それは「やる気がない」と受け止めている。もちろん相手がいるときにやる気がないとそのまま表現すると横柄だったり失礼だったりすることもあるので余裕がないと答える場合もある。しかし、本質的にはやる気がないが正しい。もう少し補足すると、いまやっていることの方が自分にとって優先度が高く (やる気があり)、それ以外の別のことを先送りしているだけだと捉えている。もし別のことにやる気があるならば、いまやっていることを後回しにすればいいだけだからだ。&lt;/p>
&lt;p>ここで、何をやってもいいとしたら、何をやりたいかという課題が出てくる。適当にあれこれやってみても、実際にやってみるとうまくいかなくて、やる気が持続しなかったりすることがある。多くのケースで、若い頃ほどなにかに夢中になってやっていた経験が誰しもあると思うが、あのときはなぜそんなに夢中になってできたのか。いま思い返しながら、自分にとっての動機づけの源泉を探るようなことをしていかないとわからないのだ。まったく自分のことなのに。2021年に入ってからそういったことを考え続けていたところ、このスライドを眺めてたら動機よりも価値観なんだよと書いてあって、私がこの9ヶ月間、掘り返し続けてた動機づけの源泉=価値観という考え方はしっくりきて、価値観がブレると動機づけもうまくいかないなと思えた。&lt;/p>
&lt;h2 id="hugoterminalのカスタマイズ">Hugo/Terminalのカスタマイズ&lt;/h2>
&lt;p>Speaker Deck のスライドの埋め込みができなくて調べた。&lt;a href="https://chizuchizu.com/blog/tag_hugo/">HUGOで埋め込みができない時の対処法&lt;/a> によると、&lt;code>config.toml&lt;/code> に次の設定を追加すると表示された。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">[&lt;span style="color:#a6e22e">markup&lt;/span>]
[&lt;span style="color:#a6e22e">markup&lt;/span>.&lt;span style="color:#a6e22e">goldmark&lt;/span>]
[&lt;span style="color:#a6e22e">markup&lt;/span>.&lt;span style="color:#a6e22e">goldmark&lt;/span>.&lt;span style="color:#a6e22e">renderer&lt;/span>]
&lt;span style="color:#a6e22e">unsafe&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Terminal のテーマだと本文と引用の違いわかりにくかったのでスタイルを変えてみた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#f92672">blockquote&lt;/span> {
&lt;span style="color:#66d9ef">background&lt;/span>: &lt;span style="color:#ae81ff">#eafff4&lt;/span>;
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#2d3330&lt;/span>;
&lt;span style="color:#66d9ef">font-style&lt;/span>: &lt;span style="color:#66d9ef">italic&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>変更前&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1002_blockquote-before.png"/>
&lt;/figure>
&lt;/li>
&lt;li>
&lt;p>変更後&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1002_blockquote-after.png"/>
&lt;/figure>
&lt;/li>
&lt;/ul>
&lt;p>日付の表記を少し大きくして目立つようにした。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#a6e22e">post-date&lt;/span> {
&lt;span style="color:#66d9ef">font-weight&lt;/span>: &lt;span style="color:#66d9ef">bold&lt;/span>;
&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#ae81ff">1.3&lt;/span>&lt;span style="color:#66d9ef">rem&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>インボイス制度への準備</title><link>/diary/posts/2021/1001/</link><pubDate>Fri, 01 Oct 2021 09:50:20 +0900</pubDate><guid>/diary/posts/2021/1001/</guid><description>夜はドラクエタクトやってて2時過ぎに寝て7時に起きた。気のせいか、日記を書くようになってから早く寝付けるようになった。まつのさんが twitter で久しぶりに Python 書いたとツィートしていて、何気なくふと Implement experimental asyncio support #101 #340 をみて、そのツールの関係者でもないのに勝手にクソリプ的なレビューコメントをした。気付いてしまったらみなかった振りするのも気持ち悪いので。
インボイス制度の準備 2023年10月1日から 消費税の軽減税率制度・適格請求書等保存方式（いわゆるインボイス制度） が開始される。開始される前に適格請求書発行事業者に登録しておく必要があり、その登録受付が今日から開始された。前に知人が教えてもらった解説動画を見返した。
ちなみにうちの会社は今期から課税事業者になるのでインボイス制度開始による益税の影響は受けない。前期の決算で消費税を算出したとき、本則課税と簡易課税なら後者の方が46%の納税金額が少なくなることがわかった。IT 業界は経費に占める人件費の割合が大きい (人件費は消費税がかからない) ので簡易課税の方が節税になるのではないかという気がする。そのため、簡易課税で申請している。一度、申請すると2年間適用され、不適用届出を出さない限りはずっと簡易課税で継続される。
国税庁の 申請手続 をみながら￼e-Tax (WEB 版) で申請した。
個人で副業を受けることを想定すると、個人でも適格請求書発行事業者に登録した方がよいのだけど、私の場合、自分の会社なので法人で仕事を受けるのと個人で仕事を受けることの違いって何だろう？とわからなくなった。法人税と個人の所得税の税率の違いの話しは一旦置いておいて、最も大きな違いは会社で仕事を受けても(直近の)給与は増えないのでその報酬を自由には使えない。個人で仕事を受けたらその報酬を自由に使えるぐらいかな？もうちょっとその違いを調べ直してから考えよう。先の youtube 動画の中で税理士さんが「免税事業者という制度をやめたらいいのに。。。」と言ってたけど、個人はどうしよう？と悩んでしまう本質は免税事業者という概念があるからというのは正しいと思う。
Terminal のカスタマイズ hugo の Shortcodes で class で任意の CSS クラスを指定できる。
{{&amp;lt; youtube id=&amp;#34;E0lOsLfj1T0&amp;#34; class=&amp;#34;video-container&amp;#34; &amp;gt;}} static/style.css をカスタムの CSS として読み込んでくれる。youtube のビデオサイズをよしなに調整するために次のスタイルを定義した。なかなか難しい。
.video-container iframe { border:0; max-width: 600px; max-height: 338px; width: 100%; height: 50vh; } Joel on Software 読み終えた。ソフトウェアの本で test of time (時の試練？) に耐えるのは相当に難しい。本書だとマネジメントや教育、ビジネスや経営に関する内容はいまでも有効でおもしろかった。また後日ブログに書評を書く。いまとなっては手放しでお勧めできる本ではないため、どういう切り口で書くかが難しい。自分にとって学びとして身につけたいと思った本はなるべく書評を書いて自分の言葉で説明できるようになっていきたい。</description><content>&lt;p>夜はドラクエタクトやってて2時過ぎに寝て7時に起きた。気のせいか、日記を書くようになってから早く寝付けるようになった。まつのさんが twitter で久しぶりに Python 書いたとツィートしていて、何気なくふと &lt;a href="https://github.com/line/line-bot-sdk-python/pull/340">Implement experimental asyncio support #101 #340&lt;/a> をみて、そのツールの関係者でもないのに勝手にクソリプ的なレビューコメントをした。気付いてしまったらみなかった振りするのも気持ち悪いので。&lt;/p>
&lt;h2 id="インボイス制度の準備">インボイス制度の準備&lt;/h2>
&lt;p>2023年10月1日から &lt;a href="https://www.nta.go.jp/taxes/shiraberu/zeimokubetsu/shohi/keigenzeiritsu/index.htm">消費税の軽減税率制度・適格請求書等保存方式（いわゆるインボイス制度）&lt;/a> が開始される。開始される前に適格請求書発行事業者に登録しておく必要があり、その登録受付が今日から開始された。前に知人が教えてもらった解説動画を見返した。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/E0lOsLfj1T0" allowfullscreen title="消費税インボイス方式対策として今からやっておくべき３つのことをお話します。【簡易課税で税負担1/2に！？】">&lt;/iframe>
&lt;/div>
&lt;p>ちなみにうちの会社は今期から課税事業者になるのでインボイス制度開始による益税の影響は受けない。前期の決算で消費税を算出したとき、本則課税と簡易課税なら後者の方が46%の納税金額が少なくなることがわかった。IT 業界は経費に占める人件費の割合が大きい (人件費は消費税がかからない) ので簡易課税の方が節税になるのではないかという気がする。そのため、簡易課税で申請している。一度、申請すると2年間適用され、不適用届出を出さない限りはずっと簡易課税で継続される。&lt;/p>
&lt;p>国税庁の &lt;a href="https://www.nta.go.jp/taxes/shiraberu/zeimokubetsu/shohi/keigenzeiritsu/invoice_shinei.htm">申請手続&lt;/a> をみながら￼e-Tax (WEB 版) で申請した。&lt;/p>
&lt;p>個人で副業を受けることを想定すると、個人でも適格請求書発行事業者に登録した方がよいのだけど、私の場合、自分の会社なので法人で仕事を受けるのと個人で仕事を受けることの違いって何だろう？とわからなくなった。法人税と個人の所得税の税率の違いの話しは一旦置いておいて、最も大きな違いは会社で仕事を受けても(直近の)給与は増えないのでその報酬を自由には使えない。個人で仕事を受けたらその報酬を自由に使えるぐらいかな？もうちょっとその違いを調べ直してから考えよう。先の youtube 動画の中で税理士さんが「免税事業者という制度をやめたらいいのに。。。」と言ってたけど、個人はどうしよう？と悩んでしまう本質は免税事業者という概念があるからというのは正しいと思う。&lt;/p>
&lt;h2 id="terminal-のカスタマイズ">Terminal のカスタマイズ&lt;/h2>
&lt;p>hugo の Shortcodes で &lt;code>class&lt;/code> で任意の CSS クラスを指定できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{{&amp;lt; &lt;span style="color:#f92672">youtube&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;E0lOsLfj1T0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;video-container&amp;#34;&lt;/span> &amp;gt;}}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>static/style.css&lt;/code> をカスタムの CSS として読み込んでくれる。youtube のビデオサイズをよしなに調整するために次のスタイルを定義した。なかなか難しい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#a6e22e">video-container&lt;/span> &lt;span style="color:#f92672">iframe&lt;/span> {
&lt;span style="color:#66d9ef">border&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">max-width&lt;/span>: &lt;span style="color:#ae81ff">600&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">max-height&lt;/span>: &lt;span style="color:#ae81ff">338&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>&lt;span style="color:#66d9ef">vh&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>読み終えた。ソフトウェアの本で test of time (時の試練？) に耐えるのは相当に難しい。本書だとマネジメントや教育、ビジネスや経営に関する内容はいまでも有効でおもしろかった。また後日ブログに書評を書く。いまとなっては手放しでお勧めできる本ではないため、どういう切り口で書くかが難しい。自分にとって学びとして身につけたいと思った本はなるべく書評を書いて自分の言葉で説明できるようになっていきたい。&lt;/p>
&lt;h2 id="カジュアル面談">カジュアル面談&lt;/h2>
&lt;p>プロジェクトマネージャーを募集している会社の CTO と面談。先方の時間が15分しかないという話しだったので事前に質問は連絡しつつ、バックエンドは Go 言語を使っているという話しだったので私が過去に書いたブログ記事やちょっと前に作った &lt;a href="https://github.com/kazamori/go-sql-executor">go-sql-executor&lt;/a> を連絡して、技術選考の参考にしてほしいと伝えた。募集要項からスクラムを採用するように読めたのでその背景を聞いたところ、外部の技術顧問が推奨しただけでとくにこだわりはないという。いまもメンバーは8人いて1週間のスプリントでスクラムっぽい運用はしているとのこと。私の言う、課題管理とイテレーション開発の概要を軽く説明しつつ、それを実践するためにプロジェクトマネージャーをやりたくて、その実践の場を探しているといった話しをした。外部の技術顧問が欠席したせいか、Go 言語の開発に関する質問はとくになかった。メンバーはすべて業務委託という話しなので寄せ集めグループのドタバタプロジェクトなんだろうなという印象を受けた。心理的安全性や一体化マネジメント法とか勉強したんで &lt;em>グループ&lt;/em> じゃなくて &lt;em>チーム&lt;/em> 開発できるマネジメントがやりたいなぁ。&lt;/p></content></item><item><title>窓のある部屋</title><link>/diary/posts/2021/0930/</link><pubDate>Thu, 30 Sep 2021 08:37:37 +0900</pubDate><guid>/diary/posts/2021/0930/</guid><description>夜は自民党総裁選の総括の記事を読んでた。政治に関心があるわけではないが、選挙後の総括にはとても関心がある。とくに負けた人がどんなことを言うのか、敗因をどう分析するのか。シンゴジラで矢口の発した 「政界は敵か味方しかいない。シンプルだ。性に合ってる」 という言葉が好き。選挙というわかりやすい勝ち負けが明確に出る仕組みは確かにシンプルだ。その後、3時まで本を読んで寝て7時ぐらいに起きた。
カジュアル面談準備 課題管理と開発方法論の体系化のため、プロジェクトマネージャーの案件を探している。Remogu というリモートワークxエンジニア専門のサイトでギグワークできないかを検討中。ある会社を提案されたのでその会社のサイトとサービス内容を調べてた。飲食業界向けに提供しているサービスを、これまではアウトソースで開発していたシステムを内製化するために開発者を募集しているようだった。いま風に言えば、DX の1つと言えるだろう。これから内製の開発チームを作っていくとのこと。言うても CTO (PMO) 以外はすべて業務委託で集めるとのこと。デメリットはチームにならず、寄せ集めの集団になってしまう懸念がある一方、メリットとして採用したものの、マッチングしなかったメンバーの契約更新しないことで入れ替えることができる。明日、その会社の人たちとカジュアル面談をして双方のマッチングをみてみる。
Joel on Software 昨日の続き。夜に読み切ろうと思っていたけど、ドラクエタクトの新しいイベントがリリースされて、それやってたら疲れて寝てしまった。あともうちょと。特定の技術に言及している内容は2000年代半ばの話しなのでいまとなっては有効ではないものや歴史書のように読めたりもする。中盤からソフトウェアビジネスやソフトウェア会社の運営などが書いてあって、マイクロ法人を始めたばかりの私にとっては興味深い。例えば、オフィスの要件は次の内容をあげている。
1人1人にちゃんとドアの付いた個室があること、絶対条件 コンセントがたくさん必要、新しいおもちゃを机の上でつなげられる データケーブルを簡単につなぎ直せる ペアプログラミングが可能であること (L字型の大きい机を用意する) 遠くのものを眺めて目を休められるよう窓を設け、ディスプレイを壁に向かって置いてはいけない オフィスはそこで時を過ごすのが快適なたまり場のような場所であるべき その上で、会社の成功は、ある部分までプログラマーが実質オフィスに暮らすようになるかどうかにかかっているので、オフィスが平均的なプログラマーの家よりも素敵な場所である必要があると述べている。実際、私は過去に働いた6社すべてで泊まり込みで働いたこともあるのでまさに暮らすように働いていた時期もあったかもしれない。机に伏して寝たり椅子を並べて寝るよりは、ソファやくつろぎスペースで寝る方が快適だった。あと、いまのオフィスの唯一の欠点は窓がないことだと1年ほど働いて、ちょうど私も実感していた。窓がないと1日の天候の移り変わりや季節の移り変わりがみえなくて気分転換ができないのだ。次にオフィスを引っ越すときは窓がある部屋を条件に加えようとまさに考えていた。
あと自分にとっての課題管理の原点をみつけた。過去に働いていた会社で、課題管理システムに顧客からの問い合わせや開発者のTODOやシステム管理のメモなど、すべての情報を入れられていた。こういった課題管理システムの使い方は次の記事に影響を受けて実践されたものだったと当時の上司に確認した。たったこれだけの話なんだけど、私にとっては原点なので宝ものを発見したかのような嬉しい気持ちになった。
Half a million bugs!</description><content>&lt;p>夜は自民党総裁選の総括の記事を読んでた。政治に関心があるわけではないが、選挙後の総括にはとても関心がある。とくに負けた人がどんなことを言うのか、敗因をどう分析するのか。シンゴジラで矢口の発した &lt;em>「政界は敵か味方しかいない。シンプルだ。性に合ってる」&lt;/em> という言葉が好き。選挙というわかりやすい勝ち負けが明確に出る仕組みは確かにシンプルだ。その後、3時まで本を読んで寝て7時ぐらいに起きた。&lt;/p>
&lt;h2 id="カジュアル面談準備">カジュアル面談準備&lt;/h2>
&lt;p>課題管理と開発方法論の体系化のため、プロジェクトマネージャーの案件を探している。&lt;a href="https://remogu.jp/">Remogu&lt;/a> というリモートワークxエンジニア専門のサイトでギグワークできないかを検討中。ある会社を提案されたのでその会社のサイトとサービス内容を調べてた。飲食業界向けに提供しているサービスを、これまではアウトソースで開発していたシステムを内製化するために開発者を募集しているようだった。いま風に言えば、DX の1つと言えるだろう。これから内製の開発チームを作っていくとのこと。言うても CTO (PMO) 以外はすべて業務委託で集めるとのこと。デメリットはチームにならず、寄せ集めの集団になってしまう懸念がある一方、メリットとして採用したものの、マッチングしなかったメンバーの契約更新しないことで入れ替えることができる。明日、その会社の人たちとカジュアル面談をして双方のマッチングをみてみる。&lt;/p>
&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>昨日の続き。夜に読み切ろうと思っていたけど、ドラクエタクトの新しいイベントがリリースされて、それやってたら疲れて寝てしまった。あともうちょと。特定の技術に言及している内容は2000年代半ばの話しなのでいまとなっては有効ではないものや歴史書のように読めたりもする。中盤からソフトウェアビジネスやソフトウェア会社の運営などが書いてあって、マイクロ法人を始めたばかりの私にとっては興味深い。例えば、オフィスの要件は次の内容をあげている。&lt;/p>
&lt;ol>
&lt;li>1人1人にちゃんとドアの付いた個室があること、絶対条件&lt;/li>
&lt;li>コンセントがたくさん必要、新しいおもちゃを机の上でつなげられる&lt;/li>
&lt;li>データケーブルを簡単につなぎ直せる&lt;/li>
&lt;li>ペアプログラミングが可能であること (L字型の大きい机を用意する)&lt;/li>
&lt;li>遠くのものを眺めて目を休められるよう窓を設け、ディスプレイを壁に向かって置いてはいけない&lt;/li>
&lt;li>オフィスはそこで時を過ごすのが快適なたまり場のような場所であるべき&lt;/li>
&lt;/ol>
&lt;p>その上で、会社の成功は、ある部分までプログラマーが実質オフィスに暮らすようになるかどうかにかかっているので、オフィスが平均的なプログラマーの家よりも素敵な場所である必要があると述べている。実際、私は過去に働いた6社すべてで泊まり込みで働いたこともあるのでまさに暮らすように働いていた時期もあったかもしれない。机に伏して寝たり椅子を並べて寝るよりは、ソファやくつろぎスペースで寝る方が快適だった。あと、いまのオフィスの唯一の欠点は窓がないことだと1年ほど働いて、ちょうど私も実感していた。窓がないと1日の天候の移り変わりや季節の移り変わりがみえなくて気分転換ができないのだ。次にオフィスを引っ越すときは窓がある部屋を条件に加えようとまさに考えていた。&lt;/p>
&lt;p>あと自分にとっての課題管理の原点をみつけた。過去に働いていた会社で、課題管理システムに顧客からの問い合わせや開発者のTODOやシステム管理のメモなど、すべての情報を入れられていた。こういった課題管理システムの使い方は次の記事に影響を受けて実践されたものだったと当時の上司に確認した。たったこれだけの話なんだけど、私にとっては原点なので宝ものを発見したかのような嬉しい気持ちになった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.joelonsoftware.com/2006/12/20/half-a-million-bugs/">Half a million bugs!&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>読書とイベント参加</title><link>/diary/posts/2021/0929/</link><pubDate>Wed, 29 Sep 2021 08:59:17 +0900</pubDate><guid>/diary/posts/2021/0929/</guid><description>0時頃に寝て8時ぐらいに起きる。やや発熱して疲れてたせいか、久しぶりに早く寝付けた。一日を通して体温は平均36.7℃なのでもう副反応は過ぎたみたい。体調もまったく悪くない。
Joel on Software 過去に働いていた会社での課題管理のやり方や開発方法論について、当時の上司と雑談したところ Joel Spolsky に由来するということを聞いた。そこで今更ながらに More Joel on Software を読むことにした。2000年代に書かれた記事の内容なのでいまとなっては古典に分類される本かもしれない。だいたい半分ぐらい読んだ。技術の詳細に言及した内容は古くなっていてあまり有用ではないものも多いけど、マネジメントや優秀なプログラマーの特性などはいまでも通用する内容に思えた。あとで私が関心をもった内容をブログでまとめることにする。
第10章コンピュータサイエンスの学生へのアドバイスで「卒業するまでにミクロ経済学を学ぶこと」という節がある。著者がミクロ経済学を推奨する理由を引用するとこれら。
ミクロ経済学はビジネスで重要な理論すべての基礎となっている。需要と供給とか、競争優位とか、NPV とか割り引きとか限界効能について知らなければ、ビジネスの仕組みが全然理解できないからだ。
マクロ経済学は、当たっているよりもはずれていることの方が多い。スキップしてよい。それ以降はただ悪くなっていく一方。
ビジネスの基礎を理解しているプログラマは、理解していないプログラマよりもビジネスにおいてずっと価値が高いからだ。
学んだことがなかったので簡単そうな ミクロ経済学入門の入門 を購入した。
読んでて気づきを得てふとツィートした。
なので、システムのコンポーネントに関しての意思決定をするとき、必ずしも上位の意思決定者の判断が正しいわけではなく、現場のメンバーに判断を委ねる状況が最適な場合もある。一方向じゃなく、双方向の情報の非対称性を解消する取り組みが大事。
&amp;mdash; Tetsuya Morimoto (@t2y) September 29, 2021 Java 17 リリースイベント 【オンライン】 JJUGナイトセミナー「Java 17 リリース記念イベント with Foojay」9/29(水) 開催 に参加した。Java の LTS はいま過渡期でややこしいことになって、8, 11, 17 になる。リリースされたばかりの Java 17 は LTS で重要なバージョンになる。Oracle Java SE Supportロードマップ から Premier Support 期限が次になる。
8: 2022年3月 11: 2023年9月 17: 2026年9月 いま 11 を使っている組織はいいが、8 を使っている組織もまだまだ多いと推測する。8 と 11 の Premier Support 期限が近いことから 8 を使っている組織は 17 に一気にバージョンアップすることが想定される。どこかのタイミングで Java 17 を前提した開発に切り替わっていくだろうと思われる。</description><content>&lt;p>0時頃に寝て8時ぐらいに起きる。やや発熱して疲れてたせいか、久しぶりに早く寝付けた。一日を通して体温は平均36.7℃なのでもう副反応は過ぎたみたい。体調もまったく悪くない。&lt;/p>
&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>過去に働いていた会社での課題管理のやり方や開発方法論について、当時の上司と雑談したところ &lt;a href="https://en.wikipedia.org/wiki/Joel_Spolsky">Joel Spolsky&lt;/a> に由来するということを聞いた。そこで今更ながらに &lt;a href="https://www.shoeisha.co.jp/book/detail/9784798118925">More Joel on Software&lt;/a> を読むことにした。2000年代に書かれた記事の内容なのでいまとなっては古典に分類される本かもしれない。だいたい半分ぐらい読んだ。技術の詳細に言及した内容は古くなっていてあまり有用ではないものも多いけど、マネジメントや優秀なプログラマーの特性などはいまでも通用する内容に思えた。あとで私が関心をもった内容をブログでまとめることにする。&lt;/p>
&lt;p>第10章コンピュータサイエンスの学生へのアドバイスで「卒業するまでにミクロ経済学を学ぶこと」という節がある。著者がミクロ経済学を推奨する理由を引用するとこれら。&lt;/p>
&lt;blockquote>
&lt;p>ミクロ経済学はビジネスで重要な理論すべての基礎となっている。需要と供給とか、競争優位とか、NPV とか割り引きとか限界効能について知らなければ、ビジネスの仕組みが全然理解できないからだ。&lt;/p>
&lt;p>マクロ経済学は、当たっているよりもはずれていることの方が多い。スキップしてよい。それ以降はただ悪くなっていく一方。&lt;/p>
&lt;p>ビジネスの基礎を理解しているプログラマは、理解していないプログラマよりもビジネスにおいてずっと価値が高いからだ。&lt;/p>
&lt;/blockquote>
&lt;p>学んだことがなかったので簡単そうな &lt;a href="https://www.iwanami.co.jp/book/b285381.html">ミクロ経済学入門の入門&lt;/a> を購入した。&lt;/p>
&lt;p>読んでて気づきを得てふとツィートした。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">なので、システムのコンポーネントに関しての意思決定をするとき、必ずしも上位の意思決定者の判断が正しいわけではなく、現場のメンバーに判断を委ねる状況が最適な場合もある。一方向じゃなく、双方向の情報の非対称性を解消する取り組みが大事。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1443024587944464388?ref_src=twsrc%5Etfw">September 29, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="java-17-リリースイベント">Java 17 リリースイベント&lt;/h2>
&lt;p>&lt;a href="https://jjug.doorkeeper.jp/events/127204">【オンライン】 JJUGナイトセミナー「Java 17 リリース記念イベント with Foojay」9/29(水) 開催&lt;/a> に参加した。Java の LTS はいま過渡期でややこしいことになって、8, 11, 17 になる。リリースされたばかりの Java 17 は LTS で重要なバージョンになる。&lt;a href="https://www.oracle.com/jp/java/technologies/java-se-support-roadmap.html">Oracle Java SE Supportロードマップ&lt;/a> から Premier Support 期限が次になる。&lt;/p>
&lt;ul>
&lt;li>8: 2022年3月&lt;/li>
&lt;li>11: 2023年9月&lt;/li>
&lt;li>17: 2026年9月&lt;/li>
&lt;/ul>
&lt;p>いま 11 を使っている組織はいいが、8 を使っている組織もまだまだ多いと推測する。8 と 11 の Premier Support 期限が近いことから 8 を使っている組織は 17 に一気にバージョンアップすることが想定される。どこかのタイミングで Java 17 を前提した開発に切り替わっていくだろうと思われる。&lt;/p>
&lt;p>最初の発表は Pattern Matching &amp;amp; Sealed Classes に特化した内容。これまでは instanceof と共に使う機能だった。switch 構文とパターンマッチングを組み合わせると、コードが簡潔になって &lt;a href="https://en.wikipedia.org/wiki/Cognitive_complexity">Cognitive complexity&lt;/a> を下げるという。発表者が Type Guard という呼び方をしていた。Type Guard をググると TypeScript の記事がヒットする。&lt;a href="https://openjdk.java.net/jeps/406">JEP 406: Pattern Matching for switch (Preview)&lt;/a> ではこれを &lt;em>guarded pattern&lt;/em> と呼んでいる。まだあまり一般的な用語ではないのかもしれない。あとは Sealed クラスと組み合わせた switch 構文のコード例では、すべてのパターンが網羅されていることをコンパイラが検出して &lt;em>default&lt;/em> 句が不要になるコード例も紹介されててよさそうにみえた。但し、switch 構文のパターンマッチングは preview なので実際には 17 ではまだ使われないのかもしれない。今後もさらに switch 構文とパターンマッチングの機能拡張が行われる展望らしい。&lt;/p>
&lt;p>2番目の発表は Java 17 の全体的な話し。fix した issues のツリーマップで contributor の分布を紹介していた。oracle, redhat, independent の順番に多い。oracle が過半数以上。日本だと ntt data が一番貢献してた。spring フレームワークの次期バージョンは Java 17 がベースラインになる。java のアップグレードを促す要因の1つにはなるはず。lts なのになぜ preview や incubator があるのか？openjdk 開発側は6ヶ月というリリースサイクルを守っている。lts にするか否かは開発者が決めているらしい。graalvm のリリースサイクルは java とは異なる。こちらは年3回のリリースなので次のリリースで出てくるはず？いくつか jep の内容を紹介してた。jep の概要は &lt;a href="https://qiita.com/ReiTsukikazu/items/407d61cb66fa4f562bf9">Java17の新機能をざっくり紹介&lt;/a> にまとまっている。さくらばさんがパッケージの api レベルでの変更を &lt;a href="http://www.javainthebox.com/2021/09/jepjava-17.html">JEPでは語れないJava 17&lt;/a> にまとめている。ざっと目を通して興味があるものがあればみとくぐらい。8 から 17 への移行の記事やドキュメントなども紹介されてた。移行について基本は &lt;a href="https://docs.oracle.com/en/java/javase/17/migrate/getting-started.html">Oracle JDK Migration Guide&lt;/a> を読めとのこと。8 から 17 の移行せずにその次の 23 を待つと作り直しになってしまいますよと 17 への移行を推奨してた。&lt;/p></content></item><item><title>副反応はいずこ？</title><link>/diary/posts/2021/0928/</link><pubDate>Tue, 28 Sep 2021 08:35:36 +0900</pubDate><guid>/diary/posts/2021/0928/</guid><description>2時過ぎぐらいに寝て5時前ぐらいに起きる。やや熱っぽいかなぁぐらいの印象でもう一度寝る。8時前に起きるともう平気になってた。昨日、書籍や macbook を持って帰ってきて引きこもり対策してたけど、体調が悪くないのでオフィスへ行くことにした。お昼から1時間おきに熱を測ってみたら37℃前後なので少し熱は出ていたみたい。とくにしんどくなかったので普通にお仕事してた。
水分補給 副反応対策として、ポカリスエットイオンウォーターの粉末をウォーターサーバーの水に混ぜて飲んでみる。イオンウォーターと普通の ポカリスエットとの違いは何ですか？ によると、基本的な成分は同じで低カロリーという違いがあるらしい。
日記サイト構築 diary リポジトリに push すると GitHub Actions で静的サイトをビルドして GitHub Pages で扱うための gh-pages ブランチに push される。GitHub Actions による GitHub Pages への自動デプロイ を参考にした。gh-pages ブランチにあるものが次の URL で参照される。リポジトリ名の diary がパスになるらしい。
https://t2y.github.io/diary/ まだ設定は不完全だけど、運用しながらおいおい設定を詰めていく。Hugo は会社のホームページにも使っているので慣れているのと、使い心地も気に入っているのでこのまま使い続ける。会社のサイトはたまにしか更新しないので日記を書く方が更新頻度があがって Hugo を触るインセンティブになるかもしれない。
ジャーナリングとは 読みかけで放置していた 「手で書くこと」が知性を引き出す 心を整え、思考を解き放つ新習慣「ジャーナリング」入門 を読み終えた。この日記も簡易的なジャーナリングになればよいと願っていたりする。「書くこと」への期待値を高くもって読み進めたせいか、内容が薄かったように思えた。ジャーナリングを行うテーマのワークシートが24個ついていて、ページ数を稼いでいるように感じた。日常生活であまり書いていない人には関心をそそるかもしれないけど、プログラマーは日常生活で平均以上の文字数を書いていると推測する。私にとってはあまり目新しいことはなかった。
マインドフルネス (気づき) を得るための方法論の1つとして書く瞑想=ジャーナリングを推奨している。手書きとキーボードのタイピングでは効果が異なるという研究成果はおもしろかった。手書きの方が記憶力や理解力を高める、脳波はアルファ波が出るといった研究があるという。従って、より創造的な仕事に向くかもしれない。ジャーナリングの研究によって、わかってきたことの1つは、自己や他者、社会への適応力を高めると示唆されている。ここでいう「適応力が高まる」というのは、課題や問題をどうとらえ、これからどう行動すればよいかのヒントにつながる可能性があるという意図らしい。ジャーナリングは心身の健全性にもプラスの影響をもたらされる可能性が高いといった研究も紹介されている。私の感覚的にも、書くことで課題や問題を明確化することはストレスを軽減して健康になるような気がする。
ジャーナリングをする際に大事なことは「考えない」 ということです。
書く瞑想とも言われる所以にも思える。そのままの状態を観察して気づきとするような、そういう姿勢を説いている。この内容は業務の取り組みへの応用からは離れてしまう。
前に メタ認知で〈学ぶ力〉を高める：認知心理学が解き明かす効果的学習法 の著者が タイピング思考法の開発とその有効性の検討 という研究発表をしていた。この研究は、思考過程を推測する手法として、発話思考法における問題を解決するタイピング思考法を提案し、既知の問題を解決しつつ、発想の促進効果もみられてそこそこよい結果が出たというものであった。思考過程を発話とタイピングの2つで比較している。比較項目に手書きがあると少し結果に差異が出たりしたのかなぁとか思った。
Atlassian Community Online MeetUp の参加 課題管理システムとチャットツールを連携する Halp というツールがあるらしい。うちは課題管理システムにクラウド jira を使っていて、Atlassian 社から届くメールで本イベントのことを知った。Atlassian Community Event の頭文字をとって ACE と呼ぶらしい。</description><content>&lt;p>2時過ぎぐらいに寝て5時前ぐらいに起きる。やや熱っぽいかなぁぐらいの印象でもう一度寝る。8時前に起きるともう平気になってた。昨日、書籍や macbook を持って帰ってきて引きこもり対策してたけど、体調が悪くないのでオフィスへ行くことにした。お昼から1時間おきに熱を測ってみたら37℃前後なので少し熱は出ていたみたい。とくにしんどくなかったので普通にお仕事してた。&lt;/p>
&lt;h2 id="水分補給">水分補給&lt;/h2>
&lt;p>副反応対策として、ポカリスエットイオンウォーターの粉末をウォーターサーバーの水に混ぜて飲んでみる。イオンウォーターと普通の &lt;a href="https://www.otsuka.co.jp/faq/ionwater/01.html">ポカリスエットとの違いは何ですか？&lt;/a> によると、基本的な成分は同じで低カロリーという違いがあるらしい。&lt;/p>
&lt;h2 id="日記サイト構築">日記サイト構築&lt;/h2>
&lt;p>&lt;a href="https://github.com/t2y/diary">diary&lt;/a> リポジトリに push すると GitHub Actions で静的サイトをビルドして GitHub Pages で扱うための gh-pages ブランチに push される。&lt;a href="https://qiita.com/peaceiris/items/d401f2e5724fdcb0759d">GitHub Actions による GitHub Pages への自動デプロイ&lt;/a> を参考にした。gh-pages ブランチにあるものが次の URL で参照される。リポジトリ名の &lt;code>diary&lt;/code> がパスになるらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://t2y.github.io/diary/">https://t2y.github.io/diary/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>まだ設定は不完全だけど、運用しながらおいおい設定を詰めていく。&lt;a href="https://gohugo.io/">Hugo&lt;/a> は会社のホームページにも使っているので慣れているのと、使い心地も気に入っているのでこのまま使い続ける。会社のサイトはたまにしか更新しないので日記を書く方が更新頻度があがって Hugo を触るインセンティブになるかもしれない。&lt;/p>
&lt;h2 id="ジャーナリングとは">ジャーナリングとは&lt;/h2>
&lt;p>読みかけで放置していた &lt;a href="https://bunkyosha.com/books/9784866510149">「手で書くこと」が知性を引き出す 心を整え、思考を解き放つ新習慣「ジャーナリング」入門&lt;/a> を読み終えた。この日記も簡易的なジャーナリングになればよいと願っていたりする。「書くこと」への期待値を高くもって読み進めたせいか、内容が薄かったように思えた。ジャーナリングを行うテーマのワークシートが24個ついていて、ページ数を稼いでいるように感じた。日常生活であまり書いていない人には関心をそそるかもしれないけど、プログラマーは日常生活で平均以上の文字数を書いていると推測する。私にとってはあまり目新しいことはなかった。&lt;/p>
&lt;p>マインドフルネス (気づき) を得るための方法論の1つとして書く瞑想=&lt;strong>ジャーナリング&lt;/strong>を推奨している。手書きとキーボードのタイピングでは効果が異なるという研究成果はおもしろかった。手書きの方が記憶力や理解力を高める、脳波はアルファ波が出るといった研究があるという。従って、より創造的な仕事に向くかもしれない。ジャーナリングの研究によって、わかってきたことの1つは、自己や他者、社会への適応力を高めると示唆されている。ここでいう「適応力が高まる」というのは、課題や問題をどうとらえ、これからどう行動すればよいかのヒントにつながる可能性があるという意図らしい。ジャーナリングは心身の健全性にもプラスの影響をもたらされる可能性が高いといった研究も紹介されている。私の感覚的にも、書くことで課題や問題を明確化することはストレスを軽減して健康になるような気がする。&lt;/p>
&lt;blockquote>
&lt;p>ジャーナリングをする際に大事なことは「考えない」 ということです。&lt;/p>
&lt;/blockquote>
&lt;p>書く瞑想とも言われる所以にも思える。そのままの状態を観察して気づきとするような、そういう姿勢を説いている。この内容は業務の取り組みへの応用からは離れてしまう。&lt;/p>
&lt;p>前に &lt;a href="https://note.com/t2y1979/n/n4713058f48ce">メタ認知で〈学ぶ力〉を高める：認知心理学が解き明かす効果的学習法&lt;/a> の著者が &lt;a href="https://www.jstage.jst.go.jp/article/jjet/37/Suppl./37_KJ00009957528/_article/-char/ja">タイピング思考法の開発とその有効性の検討&lt;/a> という研究発表をしていた。この研究は、思考過程を推測する手法として、発話思考法における問題を解決するタイピング思考法を提案し、既知の問題を解決しつつ、発想の促進効果もみられてそこそこよい結果が出たというものであった。思考過程を発話とタイピングの2つで比較している。比較項目に手書きがあると少し結果に差異が出たりしたのかなぁとか思った。&lt;/p>
&lt;h2 id="atlassian-community-online-meetup-の参加">Atlassian Community Online MeetUp の参加&lt;/h2>
&lt;p>課題管理システムとチャットツールを連携する &lt;a href="https://halp.com/">Halp&lt;/a> というツールがあるらしい。うちは課題管理システムにクラウド jira を使っていて、Atlassian 社から届くメールで本イベントのことを知った。Atlassian Community Event の頭文字をとって ACE と呼ぶらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://ace.atlassian.com/events/details/atlassian-tokyo-presents-48-tokyo-atlassian-community-online-meetup-dian-pu-bizinesudenohuo-yong-shi-li-halphuo-yong-tipsxin-aceridafa-biao/">#48 Tokyo Atlassian Community Online MeetUp - 店舗ビジネスでの活用事例＆Halp活用Tips＆新ACEリーダー発表&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>初めて ACE イベントに参加した。コミュニティ (ユーザー) 主体のイベントになるらしい。運営メンバーの中に前職での jira チームのリーダーが出ていてちょっとびっくりした。何度かやり取りしてお世話になった方だったのでこういうところでも活動しているんだと思ってさらに尊敬の念が深くなった。halp については、想像通り、非開発者向けに slack の操作だけで jira の課題管理システムと連携するためのサービスとしてよさそうだった。slack (halp) と jira は双方向にデータの同期ができる。いまのところ、halp の無料プランがないので試せてないけど、なにかの機会で一通り触ってみたいと思うサービスだった。&lt;/p></content></item><item><title>コロナワクチン2回目</title><link>/diary/posts/2021/0927/</link><pubDate>Mon, 27 Sep 2021 23:08:08 +0900</pubDate><guid>/diary/posts/2021/0927/</guid><description>土曜日は昼寝してたくさん寝たせいか、昨日はうまく寝れなかった。4時頃に 「手で書くこと」が知性を引き出す 心を整え、思考を解き放つ新習慣「ジャーナリング」入門 の序章と1章を読んだ。手で書くのとキーボードをタイピングするのでは前者の方が脳が活性化されるらしい。指先の細かい制御が脳に効果的なようだ。5時ぐらいから寝て8時前に起きる。
Horizon Workrooms Oculus Quest 2 を使って顧問の知人と workrooms を使って仕事の打ち合わせをやってみた。
https://www.oculus.com/workrooms/ 9時から1時間強ほど打ち合わせ。
macbook を Oculus リモートデスクトップで接続して、ホワイトボード (スクリーン) で共有しながらの会話をやってみた。所感としてはこんなところ。
リモートデスクトップと画面共有 目の前の画面を大きくできるのでホワイトボード (スクリーン) よりみやすい 眼の前の画面をみて説明すると、相手の顔が見えないので vr のメリットが半減する 半仮想モードで話しながらメモをとるのは可能ではあるが、現実でやるよりも難しいので効率が悪化する パソコンの操作が現実よりも難しいので、操作しないインセンティブになりがち リモートデスクトップで画面共有をしていたせいか、
フル充電した状態から1.5 時間ぐらいでバッテリーが少ない警告が出た ヘッドセットの位置調整がうまくいかないと画面の文字がぼやけたりする ヘッドセットの固定がうまくいかないと、会議に集中できず、ストレスになる 1時間程度の会議であれば、とくに vr による疲れなどは気にならない 打ち合わせ終わってから NeosVR をするために Linux マシンと Oculus Quest 2 を接続する方法を検討。
https://neosvrjp.memo.wiki/ Oculus Link アプリを PC にインストールする必要があるが、Windows 向けにしか提供されていない。wine で動かない、一通りツール類をインストールして試してみたつもりだけど、このエラーを解決できなかった。諦める。
$ wine --version wine-5.0 (Ubuntu 5.0-3ubuntu1) $ wine ~/Downloads/OculusSetup.</description><content>&lt;p>土曜日は昼寝してたくさん寝たせいか、昨日はうまく寝れなかった。4時頃に &lt;a href="https://bunkyosha.com/books/9784866510149">「手で書くこと」が知性を引き出す 心を整え、思考を解き放つ新習慣「ジャーナリング」入門&lt;/a> の序章と1章を読んだ。手で書くのとキーボードをタイピングするのでは前者の方が脳が活性化されるらしい。指先の細かい制御が脳に効果的なようだ。5時ぐらいから寝て8時前に起きる。&lt;/p>
&lt;h2 id="horizon-workrooms">Horizon Workrooms&lt;/h2>
&lt;p>Oculus Quest 2 を使って顧問の知人と workrooms を使って仕事の打ち合わせをやってみた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.oculus.com/workrooms/">https://www.oculus.com/workrooms/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>9時から1時間強ほど打ち合わせ。&lt;/p>
&lt;p>macbook を Oculus リモートデスクトップで接続して、ホワイトボード (スクリーン) で共有しながらの会話をやってみた。所感としてはこんなところ。&lt;/p>
&lt;ul>
&lt;li>リモートデスクトップと画面共有
&lt;ul>
&lt;li>目の前の画面を大きくできるのでホワイトボード (スクリーン) よりみやすい&lt;/li>
&lt;li>眼の前の画面をみて説明すると、相手の顔が見えないので vr のメリットが半減する&lt;/li>
&lt;li>半仮想モードで話しながらメモをとるのは可能ではあるが、現実でやるよりも難しいので効率が悪化する&lt;/li>
&lt;li>パソコンの操作が現実よりも難しいので、操作しないインセンティブになりがち&lt;/li>
&lt;li>リモートデスクトップで画面共有をしていたせいか、&lt;br>
フル充電した状態から1.5 時間ぐらいでバッテリーが少ない警告が出た&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ヘッドセットの位置調整がうまくいかないと画面の文字がぼやけたりする&lt;/li>
&lt;li>ヘッドセットの固定がうまくいかないと、会議に集中できず、ストレスになる&lt;/li>
&lt;li>1時間程度の会議であれば、とくに vr による疲れなどは気にならない&lt;/li>
&lt;/ul>
&lt;p>打ち合わせ終わってから NeosVR をするために Linux マシンと Oculus Quest 2 を接続する方法を検討。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://neosvrjp.memo.wiki/">https://neosvrjp.memo.wiki/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Oculus Link アプリを PC にインストールする必要があるが、Windows 向けにしか提供されていない。wine で動かない、一通りツール類をインストールして試してみたつもりだけど、このエラーを解決できなかった。諦める。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ wine --version
wine-5.0 &lt;span style="color:#f92672">(&lt;/span>Ubuntu 5.0-3ubuntu1&lt;span style="color:#f92672">)&lt;/span>
$ wine ~/Downloads/OculusSetup.exe
002a:err:mscoree:CLRRuntimeInfo_GetRuntimeHost Wine Mono is not installed
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Windows マシンを買うにしても PCVR をするにはそこそこのスペックが必要になり、ざっと調べると10-20万円ぐらい。ノートPCでも15-16インチぐらいのを購入すればスペック的には大丈夫そうといった記事がいくつかみつかった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vr-game.pw/blog/how-to-chooes-vr-pc/">https://vr-game.pw/blog/how-to-chooes-vr-pc/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kimono-oyaji.com/laptoppc-for-hmd-01/">https://kimono-oyaji.com/laptoppc-for-hmd-01/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>このために Windows マシンを買ってまでやるほどのことでもないので PCVR は断念して普通に Linux マシンで NeosVR に挑戦することに決めた。&lt;/p>
&lt;h2 id="お昼">お昼&lt;/h2>
&lt;p>14時前ぐらいにお昼ご飯に出かけた。近所の居酒屋さんが緊急事態宣言の期間だけお弁当を販売している。いつもは13時頃には売り切れているのに、今日はたまたま14時なのに3個も残ってた。500円でおかずがいろいろ入っててコスパがいい。そのままお弁当を買ってオフィスで食べることにした。&lt;/p>
&lt;h2 id="日記を書く環境を決める">日記を書く環境を決める&lt;/h2>
&lt;p>この後、コロナワクチン2回目摂取があるので、副反応の発熱でいつ作業が中断してもよいように日記を書くための環境を構築することにした。&lt;/p>
&lt;p>ざっくり条件はこんな感じ。&lt;/p>
&lt;ul>
&lt;li>目的は「書くこと」そのもの&lt;/li>
&lt;li>シンプルに自分が読むためだけの文章を書ければよい&lt;/li>
&lt;li>エディターやビューアをロックインされたくない&lt;/li>
&lt;li>コンテンツをテキスト (markdown) で扱いたい&lt;/li>
&lt;li>コンテンツをサービスにロックインされたくない&lt;/li>
&lt;/ul>
&lt;p>それぞれのツールを検討してたときのメモ。&lt;/p>
&lt;ul>
&lt;li>ブログプラットフォームは使いたくない
&lt;ul>
&lt;li>hatena, medium, note はすでに使っているので除外&lt;/li>
&lt;li>広告やガジェットや管理ツールとかいらない&lt;/li>
&lt;li>シンプルさがなくなってしまう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>メモツールに書く
&lt;ul>
&lt;li>&lt;a href="https://obsidian.md/">obsidian&lt;/a> や &lt;a href="https://hackmd.io/">hackmd&lt;/a> など&lt;/li>
&lt;li>メモツールなので日記を書く用途とはちょっとズレる&lt;/li>
&lt;li>シンプルさがなくなってしまう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>wiki に書く
&lt;ul>
&lt;li>&lt;a href="https://www.notion.so/">notion&lt;/a> や &lt;a href="https://github.com/weseek/growi">growi&lt;/a> など&lt;/li>
&lt;li>シンプルさがなくなってしまう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ジャーナルアプリに書く
&lt;ul>
&lt;li>まさに日記そのものだけど、有償のプロダクトが多い&lt;/li>
&lt;li>エディターは専用アプリになりそう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>自分で日記ツールを作る
&lt;ul>
&lt;li>headless CMS とフロントエンドを実装する&lt;/li>
&lt;li>いま日記を書き始めたいのにいつ書き始められるかわからない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>最終的に残ったのは &lt;a href="https://docs.github.com/ja/pages">GitHub Pages&lt;/a> だった。&lt;/p>
&lt;ul>
&lt;li>静的サイトジェネレーターに &lt;a href="https://gohugo.io/">Hugo&lt;/a> を使う&lt;/li>
&lt;li>Hugo のテーマをカスタマイズすればシンプルにできそう？&lt;/li>
&lt;li>自分の好きなエディターで書ける&lt;/li>
&lt;li>自分の好きなビューア (ブラウザ) で読める&lt;/li>
&lt;li>Git リポジトリなのでサービスにロックインされない&lt;/li>
&lt;/ul>
&lt;h2 id="コロナワクチン2回目摂取">コロナワクチン2回目摂取&lt;/h2>
&lt;p>1回目の後、最速の日程から1週間ほど遅れてネット予約が取れた。摂取会場のクリニックでは、午前中は1回目、午後は診療やって、夕方に2回目摂取の時間帯になっているみたい。したがって17時という遅い時間帯に摂取した。私を含め、6人しか患者がいなかったので混雑も待ち時間もなくすぐに摂取して、15分ほど様子をみて帰ることができた。&lt;/p>
&lt;p>ワクチン打った後、facebook にコメントを残したり、家族へ LINE でメッセージを送った。&lt;/p>
&lt;p>それで何が変わるかわかってないけど、一人暮らしなので万が一、体調が悪くなって誰も気づかないままそのまま死んだとしても、ワクチンで運が悪くてしんだんやなと周りの人が気付けるようにという意図がある。一体、誰に気を使っているのか、自分でもよくわからないけど、自分が不慮の事故で死んでしまったとして、身近な人には多少なりとも背景が伝わることでお別れの挨拶変わりにはなるかな？という、変な気遣いをしている。&lt;/p>
&lt;h2 id="terminal-のカスタマイズ">Terminal のカスタマイズ&lt;/h2>
&lt;p>副反応の発熱でいつ作業が中断してもよいように日記を書くための Hugo の Terminal というテーマの設定を始めた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/panr/hugo-theme-terminal">https://github.com/panr/hugo-theme-terminal&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>18時から20時ぐらいまでオフィスで作業して、買い物して帰ってきて晩ご飯食べて、その後も環境構築の作業をした。翌2時の時点で全くしんどくない。&lt;code>config.toml&lt;/code> の設定項目に対するドキュメントがないけど、直接 grep で html のソースをみた方が早いことに気づいた。&lt;/p>
&lt;p>とりあえずコンテンツを書いてみて、そこそこの見た目で表示できるようになった。まだ完全ではないので随時、後日、ソースを読みながら設定していく。&lt;/p></content></item><item><title>iostat-tool メンテ</title><link>/diary/posts/2021/0926/</link><pubDate>Sun, 26 Sep 2021 21:35:06 +0900</pubDate><guid>/diary/posts/2021/0926/</guid><description>再現調査 お昼ぐらいオフィスに行って事前に下調べしてあった iostat-tool の不具合修正をする。
https://github.com/t2y/iostat-tool/issues/3 前職でディスクI/Oの振る舞いを調査していたときに iostat のアウトプットを直接みてもわからないので視覚化するツールを作った。例えば、iostat -ymxt 1 のアウトプットは次のようなログになる。
06/13/2018 02:10:50 PM avg-cpu: %user %nice %system %iowait %steal %idle 0.47 0.00 0.24 0.18 0.00 99.11 Device: rrqm/s wrqm/s r/s w/s rMB/s wMB/s avgrq-sz avgqu-sz await r_await w_await svctm %util sdd 0.07 45.88 1.57 0.59 0.08 0.18 246.55 0.26 121.04 1.28 436.94 2.07 0.45 sdh 0.07 45.78 1.59 0.60 0.08 0.18 245.64 0.22 101.97 1.17 367.51 1.89 0.</description><content>&lt;h2 id="再現調査">再現調査&lt;/h2>
&lt;p>お昼ぐらいオフィスに行って事前に下調べしてあった iostat-tool の不具合修正をする。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/iostat-tool/issues/3">https://github.com/t2y/iostat-tool/issues/3&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>前職でディスクI/Oの振る舞いを調査していたときに iostat のアウトプットを直接みてもわからないので視覚化するツールを作った。例えば、&lt;code>iostat -ymxt 1&lt;/code> のアウトプットは次のようなログになる。&lt;/p>
&lt;pre tabindex="0">&lt;code>06/13/2018 02:10:50 PM
avg-cpu: %user %nice %system %iowait %steal %idle
0.47 0.00 0.24 0.18 0.00 99.11
Device: rrqm/s wrqm/s r/s w/s rMB/s wMB/s avgrq-sz avgqu-sz await r_await w_await svctm %util
sdd 0.07 45.88 1.57 0.59 0.08 0.18 246.55 0.26 121.04 1.28 436.94 2.07 0.45
sdh 0.07 45.78 1.59 0.60 0.08 0.18 245.64 0.22 101.97 1.17 367.51 1.89 0.41
sdb 0.25 74.42 5.70 0.87 0.57 0.29 268.00 0.32 49.24 38.06 123.00 1.83 1.20
sdg 0.07 45.84 1.57 0.60 0.08 0.18 246.12 0.26 118.32 1.24 426.10 2.05 0.44
sdc 0.10 46.79 1.62 0.63 0.09 0.19 246.47 0.16 72.62 11.13 232.29 1.39 0.31
sde 0.07 45.79 1.56 0.60 0.08 0.18 246.16 0.21 98.68 1.10 351.50 1.83 0.39
sdj 0.07 45.88 1.56 0.60 0.08 0.18 245.68 0.21 95.91 1.07 341.03 1.80 0.39
sdf 0.07 45.76 1.58 0.60 0.08 0.18 245.70 0.19 85.95 1.03 308.11 1.79 0.39
sdk 0.07 46.68 1.56 0.61 0.08 0.18 247.68 0.28 128.43 1.25 455.92 2.17 0.47
sdi 0.07 45.67 1.57 0.60 0.08 0.18 244.58 0.21 96.74 1.11 344.99 1.84 0.40
sda 0.16 15.06 0.15 1.95 0.01 0.07 72.69 0.13 61.45 3.77 65.84 8.24 1.73
&lt;/code>&lt;/pre>&lt;p>当時 rhel6 相当のディストリビューションで検証していた。そのため、その iostat のバージョンしかテストしてなかった。その後、時間が経って新しい項目が増えたり、同じ項目でも名前が変わったりしたみたい。vagrant で &lt;a href="https://app.vagrantup.com/bento/boxes/centos-8">bento/centos-8&lt;/a> の環境を構築して &lt;code>man iostat&lt;/code> や iostat のアウトプットを出力しながら確認した。&lt;/p>
&lt;p>CentOS 8.3 の systat 11.7.3 のバージョンのアウトプットはこんな感じ。&lt;/p>
&lt;pre tabindex="0">&lt;code>09/26/21 03:35:19
avg-cpu: %user %nice %system %iowait %steal %idle
0.00 0.00 0.00 0.00 0.00 1.00
Device r/s w/s rMB/s wMB/s rrqm/s wrqm/s %rrqm %wrqm r_await w_await aqu-sz rareq-sz wareq-sz svctm %util
sda 1.00 0.00 0.01 0.00 0.00 0.00 0.00 0.00 1.00 0.00 0.00 8.00 0.00 2.00 0.20
&lt;/code>&lt;/pre>&lt;h2 id="時刻のフォーマットが違う">時刻のフォーマットが違う&lt;/h2>
&lt;p>これは sysstat のバージョンによるものではないけど、ロケールの &lt;code>LC_TIME&lt;/code> のエンコーディング指定を変えると時刻のフォーマットが変わることに気づいた。これも en 環境しかチェックしてなかったから今回 ja でも正しく時刻をパースできるように修正した。&lt;/p>
&lt;pre tabindex="0">&lt;code>old: 06/13/2018 02:10:50 PM # LC_TIME=&amp;quot;en_US.UTF-8&amp;quot;
new: 09/26/21 03:35:19 # LC_TIME=&amp;quot;ja_JP.UTF-8&amp;quot;
&lt;/code>&lt;/pre>&lt;h2 id="device-の軽微な変更と項目の変更">Device の軽微な変更と項目の変更&lt;/h2>
&lt;p>新しいフォーマットだと &lt;code>Device:&lt;/code> のコロン文字がなくなってたりしてパースできなくなっていた。あと次の項目が名前変更、または新規追加されてた。&lt;/p>
&lt;ul>
&lt;li>aqu-sz&lt;/li>
&lt;li>rareq-sz&lt;/li>
&lt;li>wareq-sz&lt;/li>
&lt;li>%rrqm&lt;/li>
&lt;li>%wrqm&lt;/li>
&lt;/ul>
&lt;p>基本的にパーサーをいじる必要はなくて項目の追加などで対応できた。当時、検証していたとき、作業がうまくいってなくて2-3日で突貫で作ったツールなのでパーサーはあまりきれいに実装はされていない。作った本人がみても1-2時間デバッグしながら直す必要があった。今後も iostat のアウトプットに大きな変更があるとは思えないからまぁいいかな。&lt;/p>
&lt;h2 id="generator-based-coroutines-の-deprecated">generator-based coroutines の deprecated&lt;/h2>
&lt;p>このツールを作った当時、python 3.4 以上をサポートする必要があったの generator-based coroutines で実装した気がする。それが 3.8 以降は deprecated になっているみたい。今回保守するときにサポート対象を 3.6 以上に変更したのですべて &lt;code>async def&lt;/code> で書き直せるようになった。そう急ぐ必要もないのでまた今後、気が向いたら async 周りの実装も見直しながらやってみる。覚えていたら。&lt;/p>
&lt;blockquote>
&lt;p>Deprecated since version 3.8, will be removed in version 3.10: Use async def instead.&lt;/p>
&lt;p>&lt;a href="https://docs.python.org/ja/3/library/asyncio-task.html#asyncio.coroutine">https://docs.python.org/ja/3/library/asyncio-task.html#asyncio.coroutine&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="iostat-tool-030-リリース">iostat-tool 0.3.0 リリース&lt;/h2>
&lt;p>2018年から約3年ぶりに保守した。ついでに GitHub Actions で lint check と doctest の CI を実行するように変更した。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">新しい iostat のログフォーマットにも対応して 0.3.0 をリリースした。&lt;a href="https://t.co/zwFuomvStO">https://t.co/zwFuomvStO&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1442023934195421185?ref_src=twsrc%5Etfw">September 26, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item></channel></rss>