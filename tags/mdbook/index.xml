<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mdbook on forest nook</title><link>/diary/tags/mdbook/</link><description>Recent content in Mdbook on forest nook</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Fri, 21 Apr 2023 08:51:29 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/mdbook/index.xml" rel="self" type="application/rss+xml"/><item><title>1日中ドキュメントを書いていた</title><link>/diary/posts/2023/0421/</link><pubDate>Fri, 21 Apr 2023 08:51:29 +0900</pubDate><guid>/diary/posts/2023/0421/</guid><description>一昨日あまり寝てなかったので昨日は早く帰ってきて20時から22時ぐらいまで寝て、その後0時ぐらいから寝て何度か起きて7時に起きた。久しぶりによく寝た。
プロダクトのドキュメント プロダクトのインストールや設定のドキュメントを mdBook で書いている。チームのメンバーが reStructuredText を知らないというので markdown で書ける方がいいかと思って採用した。4月上旬から環境作り して時間のあるときに少しずつ書き足したり、メンバーにも書いてもらうように促したりしていた。情報としてはだいたい半分ぐらい書けたかなぁといったところ。まだまだ内容は足りていない。
内容とは別に、ある程度まとまったドキュメントとしてのわかりやすさを、例えば Sphinx のようなツールと比較してどうかというのを書き終えたら比較してみようと思う。1つ懸念点としてわかったことに SUMMARY.md からリンクされていない md ファイルはレンダリングされないという仕様になっていて、この仕様の是非や目次の作り方の構成に制約が課せられることへの懸念がある。次の issue でも議論されている。
It is recommended that all md files in the directory be converted to html #830 Files not in SUMMARY.md are not parsed #702 mdbook は私が想定したほど普通のドキュメントツールが備えているような機能を実装していなくて、それは markdown を独自拡張したくないという意志なのかもしれないけれど、本当に最低限の体裁だけでドキュメントのようにみえるようにするといったところしか関心がないのかもしれない。ちょっと触った雰囲気でも本格的なドキュメントを書くツールではないと感じている。私がまだわかっていないだけかもしれないのでもうちょっと触ってみてまた所感をまとめる。
チーム勉強会 2週間ぶりのチーム勉強会。メンバーが Stable Diffusion の話しをしてくれた。学生時代に関連する研究をしていたらしい。本人は研究していたから内容を理解しているのだろうけど、一般人の私には全然ついていけなくて説明そのものが難しいなと思いながら聞いていた。そして、最近の研究成果などを紹介しながら15分ぐらいで終わった。論文の内容を理解できているのなら、その内容を解説してもよかったのでは？と思ったりもした。1時間の枠があるのだからもっと話してもらってよかったのだけど、準備も大変だったのかもしれない。時間が余っていたので私がモデレーターとして質問したり、他の参加者に質問を促したりしながら残り時間の40分ほど雑談していた。そういう意味では雑談会としては多くの質問やコメントが出てよかったと思う。意図的に発表時間を短くして雑談会にもっていくというやり方もあるのかな？と勉強会の運営の学びにもなった。</description><content>&lt;p>一昨日あまり寝てなかったので昨日は早く帰ってきて20時から22時ぐらいまで寝て、その後0時ぐらいから寝て何度か起きて7時に起きた。久しぶりによく寝た。&lt;/p>
&lt;h2 id="プロダクトのドキュメント">プロダクトのドキュメント&lt;/h2>
&lt;p>プロダクトのインストールや設定のドキュメントを &lt;a href="https://rust-lang.github.io/mdBook/">mdBook&lt;/a> で書いている。チームのメンバーが reStructuredText を知らないというので markdown で書ける方がいいかと思って採用した。&lt;a href="/diary/diary/posts/2023/0403/#mdbook-の初期設定">4月上旬から環境作り&lt;/a> して時間のあるときに少しずつ書き足したり、メンバーにも書いてもらうように促したりしていた。情報としてはだいたい半分ぐらい書けたかなぁといったところ。まだまだ内容は足りていない。&lt;/p>
&lt;p>内容とは別に、ある程度まとまったドキュメントとしてのわかりやすさを、例えば &lt;a href="https://www.sphinx-doc.org/ja/master/">Sphinx&lt;/a> のようなツールと比較してどうかというのを書き終えたら比較してみようと思う。1つ懸念点としてわかったことに SUMMARY.md からリンクされていない md ファイルはレンダリングされないという仕様になっていて、この仕様の是非や目次の作り方の構成に制約が課せられることへの懸念がある。次の issue でも議論されている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rust-lang/mdBook/issues/830">It is recommended that all md files in the directory be converted to html #830&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/rust-lang/mdBook/issues/702">Files not in SUMMARY.md are not parsed #702&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>mdbook は私が想定したほど普通のドキュメントツールが備えているような機能を実装していなくて、それは markdown を独自拡張したくないという意志なのかもしれないけれど、本当に最低限の体裁だけでドキュメントのようにみえるようにするといったところしか関心がないのかもしれない。ちょっと触った雰囲気でも本格的なドキュメントを書くツールではないと感じている。私がまだわかっていないだけかもしれないのでもうちょっと触ってみてまた所感をまとめる。&lt;/p>
&lt;h2 id="チーム勉強会">チーム勉強会&lt;/h2>
&lt;p>2週間ぶりのチーム勉強会。メンバーが &lt;a href="https://en.wikipedia.org/wiki/Stable_Diffusion">Stable Diffusion&lt;/a> の話しをしてくれた。学生時代に関連する研究をしていたらしい。本人は研究していたから内容を理解しているのだろうけど、一般人の私には全然ついていけなくて説明そのものが難しいなと思いながら聞いていた。そして、最近の研究成果などを紹介しながら15分ぐらいで終わった。論文の内容を理解できているのなら、その内容を解説してもよかったのでは？と思ったりもした。1時間の枠があるのだからもっと話してもらってよかったのだけど、準備も大変だったのかもしれない。時間が余っていたので私がモデレーターとして質問したり、他の参加者に質問を促したりしながら残り時間の40分ほど雑談していた。そういう意味では雑談会としては多くの質問やコメントが出てよかったと思う。意図的に発表時間を短くして雑談会にもっていくというやり方もあるのかな？と勉強会の運営の学びにもなった。&lt;/p></content></item><item><title>ローカルにコンテナレジストリを構築する</title><link>/diary/posts/2023/0403/</link><pubDate>Mon, 03 Apr 2023 11:34:18 +0900</pubDate><guid>/diary/posts/2023/0403/</guid><description>出張する日は寝ないで資料を作ったりバグ修正したりして始発の新幹線の中で寝てた。寝てなくて疲れているせいか、新幹線で寝るのに慣れたのか、わりと2-3時間ぐっすり新幹線で眠れるようになってきた。普通にベッドで寝ても3時間ぐらいしか眠れないので睡眠時間はあまり変わらない。
docker registry の構築 先日の調査 の続き。Deploy a registry server に書いてあることを実際にローカルで検証した。
tls の自己証明書の作成。subjectAltName という設定をするように書いてある。
$ openssl req -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key -addext &amp;#34;subjectAltName = DNS:myhost.mydomain.example.com&amp;#34; -x509 -days 365 -out certs/domain.crt basic 認証のための htpasswd の設定。htpasswd とか懐かしいなと思いながら実行した。
$ docker run --entrypoint htpasswd httpd:2 -Bbn user1 secret1 &amp;gt;&amp;gt; dot_htpasswd $ docker run --entrypoint htpasswd httpd:2 -Bbn user2 secret2 &amp;gt;&amp;gt; dot_htpasswd docker 社が提供する oss な docker registry サーバーを使って起動する。
$ mkdir /mnt/registry # docker image を永続化する場所 $ sudo docker run -d \ --restart=always \ --name registry \ -v &amp;#34;$(pwd)&amp;#34;/auth:/auth \ -e &amp;#34;REGISTRY_AUTH=htpasswd&amp;#34; \ -e &amp;#34;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&amp;#34; \ -e &amp;#34;REGISTRY_AUTH_HTPASSWD_PATH=/auth/dot_htpasswd&amp;#34; \ -v &amp;#34;$(pwd)&amp;#34;/certs:/certs \ -e &amp;#34;REGISTRY_HTTP_ADDR=0.</description><content>&lt;p>出張する日は寝ないで資料を作ったりバグ修正したりして始発の新幹線の中で寝てた。寝てなくて疲れているせいか、新幹線で寝るのに慣れたのか、わりと2-3時間ぐっすり新幹線で眠れるようになってきた。普通にベッドで寝ても3時間ぐらいしか眠れないので睡眠時間はあまり変わらない。&lt;/p>
&lt;h2 id="docker-registry-の構築">docker registry の構築&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0330/#外部向けコンテナレジストリ">先日の調査&lt;/a> の続き。&lt;a href="https://docs.docker.com/registry/deploying/">Deploy a registry server&lt;/a> に書いてあることを実際にローカルで検証した。&lt;/p>
&lt;p>tls の自己証明書の作成。subjectAltName という設定をするように書いてある。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ openssl req -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key -addext &lt;span style="color:#e6db74">&amp;#34;subjectAltName = DNS:myhost.mydomain.example.com&amp;#34;&lt;/span> -x509 -days &lt;span style="color:#ae81ff">365&lt;/span> -out certs/domain.crt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>basic 認証のための htpasswd の設定。htpasswd とか懐かしいなと思いながら実行した。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bsah" data-lang="bsah">$ docker run --entrypoint htpasswd httpd:2 -Bbn user1 secret1 &amp;gt;&amp;gt; dot_htpasswd
$ docker run --entrypoint htpasswd httpd:2 -Bbn user2 secret2 &amp;gt;&amp;gt; dot_htpasswd
&lt;/code>&lt;/pre>&lt;p>docker 社が提供する oss な docker registry サーバーを使って起動する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ mkdir /mnt/registry &lt;span style="color:#75715e"># docker image を永続化する場所&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo docker run -d &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --restart&lt;span style="color:#f92672">=&lt;/span>always &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --name registry &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>pwd&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>/auth:/auth &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;REGISTRY_AUTH=htpasswd&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;REGISTRY_AUTH_HTPASSWD_PATH=/auth/dot_htpasswd&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>pwd&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>/certs:/certs &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;REGISTRY_HTTP_ADDR=0.0.0.0:443&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;REGISTRY_HTTP_TLS_KEY=/certs/domain.key&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -p 8443:443 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /mnt/registry:/var/lib/registry &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> registry:2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで basic 認証付きで https で通信できる docker registry サーバーができた。&lt;/p>
&lt;p>外部のマシンから dokcer login しようとすると次のようなエラーが発生する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker login myhost.mydomain.example.com:8443
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Username: user2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Password: ***
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Error response from daemon: Get &lt;span style="color:#e6db74">&amp;#34;https://myhost.mydomain.example.com:8443/v2/&amp;#34;&lt;/span>: x509: certificate signed by unknown authority
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://docs.docker.com/registry/insecure/">Test an insecure registry&lt;/a> によると、自己証明書を使って外部からアクセスできるようにするためには docker client 側にさっき作った domain.crt をコピーする必要がある。&lt;/p>
&lt;p>linux だとこんな設定。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cp domain.crt /etc/docker/certs.d/myhost.mydomain.example.com:8443/ca.crt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Docker Desktop for Mac を使っている場合はこんな感じ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-zsh" data-lang="zsh">&lt;span style="display:flex;">&lt;span>&amp;gt; security add-trusted-cert -d -r trustRoot -k ~/Library/Keychains/login.keychain path/to/certs/domain.crt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで外部からも docker login して任意の docker image を push/pull できるようになる。docker registry サーバーは Let’s Encrypt をサポートしているそうなので &lt;a href="https://letsencrypt.org/how-it-works/">How It Works&lt;/a> を参照して設定すればよいと書いてあった。&lt;/p>
&lt;h2 id="mdbook-の初期設定">mdbook の初期設定&lt;/h2>
&lt;p>mdbook は新しい rust のバージョンだとビルドできなかったりするので rustup を使ってローカルに rustc をインストールするのがよいかもしれない。プラグインとしては &lt;a href="https://github.com/badboy/mdbook-mermaid">mdbook-mermaid&lt;/a> を使う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ curl --proto &lt;span style="color:#e6db74">&amp;#39;=https&amp;#39;&lt;/span> --tlsv1.2 -sSf https://sh.rustup.rs | sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ~/.cargo/bin/rustc --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cargo install mdbook mdbook-mermaid
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>mdbook-mermaid の設定も簡単でドキュメントルート配下に mermaid の js ファイルを配置すると動いた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ vi book.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>preprocessor.mermaid&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>command &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;mdbook-mermaid&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>output.html&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>additional-js &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;mermaid.min.js&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;mermaid-init.js&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item></channel></rss>