<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Recipe on forest nook</title><link>/diary/tags/recipe/</link><description>Recent content in Recipe on forest nook</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Mon, 12 Feb 2024 12:52:28 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/recipe/index.xml" rel="self" type="application/rss+xml"/><item><title>ホットクックのレシピを upnote で書く</title><link>/diary/posts/2024/0212/</link><pubDate>Mon, 12 Feb 2024 12:52:28 +0900</pubDate><guid>/diary/posts/2024/0212/</guid><description>2時半に寝て５時過ぎに起きた。それから二度寝して7時に起きた。
今日の運動はレッグレイズ(椅子),腹筋ローラー,腕立て,散歩をした。統計を 運動の記録 にまとめる。
トランクルームの契約 家電を購入すると大きな箱が付いてきて物理的にその置き場所がない。箱を捨てるという戦略もあるが、オリジナルの箱があると引っ越しや売買／処分するときに便利なのでできれば残しておきたい。これまでデスクトップマシンの箱やオフィス備え付けの椅子などをマンションの部屋に保管したりしていたけど、家電の箱が増えてくると邪魔になってきて、トランクルームを借りることにした。面倒なのであまり調べていないが、スペラボ というサービスの屋内型トランクルームをレンタルすることにした。0.7畳で6,450円/月(税込)になる。会社の経費だしこのぐらいの金額ならいいかと思って、朝から内見に行って問題なさそうなので即決した。
ホットクックレシピの公開 ホットクックのレシピをどこかに整理したい。スマホ上でも調理しながら簡単に確認したいとなると web よりもアプリの方がよい。そこで evernote から移行した upnote に書くことにした。実際に調理してみて、デスクトップマシンでレシピを編集・整理して、写真はスマホアプリからアップロードするといった使い方ができる。View shared notes によると、ノート単位で web 公開もできる。試しに次のレシピを公開してみた。ノートブック単位で公開設定して一覧ページがあるともっとよいが、その機能はないみたい。公開リンクを作成する一手間はあるけれど、そんなにレシピノートを書くわけでもないから気にはならない。
野菜スープ 玄米ごはん 豚肉のトマト煮こみ ホットクック調理は材料入れてボタン押したら終わりではないか？と思うかもしれない。いや、そうでもないようだ。たしかに材料を内鍋に入れてボタン押したら人間ができることは何もない。だからこそ、ボタンを押す前の過程が大事になってくる。どんな切り方をするのか、素材のサイズはどうか、初期配置はどうか。例えば、豚ロース肉の生姜焼き用を買ってきて、適当に切って3枚4枚重なった状態で投入したらそのままの状態で出来上がった。かき混ぜ棒があるからうまいこと豚肉もバラけるだろうと期待したが、ぴったりくっついているようなお肉をバラかすほどのパワーはないようだ。人間が最初からバラかした状態で内鍋に投入すると、出来上がりのときに豚肉のかたまりがなくなってよいと思う。
あと気付いたこととして、野菜もお肉も素材を少し小さめに切った方がおいしいように感じる。というのは、ホットクックは圧力鍋ほどの火力で調理しない。圧力鍋に慣れていると、少し大きめに切っても原形がなくなって溶けてしまったり、出来上がり時点で原形があっても混ぜたりしているうちに角がとれて、どんどん小さくなっていく。小さくならなくても口の中でとろけるので大きいままでも問題ない。相対的にホットクックはそこまでの火力はないから、小さめで味が染み込むような出来上がりになるため、小さめに切っても原形は保ったままで溶けてなくなってしまうことはない。これは良い悪いではなくて、それぞれの製品の特徴と言えるだろう。ホットクック調理は素材を小さめに切るというのが、いまところ、私が作ったレシピではうまくいっている。ホットクックでは、小さく切った複数の素材をほお張って食べるのがおいしい。
go-ldap への context 導入の考察 go-ldap の issue は subscribe しているので、たまたま initial cut of context support #406 の draft pr のコメントに気付いた。過去に context を導入しようとして途中で断念した残骸みたいな pr になっている。いまの go の api は context を受け取るのが当たり前になっているので確かにほしいというのは理解できる。
代わりに私がやってみようかとソースコードを読んでみた。オリジナルの draft pr は client の interface に WithContext なメソッドを追加しようというもの。go の context の扱いとしてもっとも基本的なもの。それでもよいけれど、net/http の実装はどうなっているのかを調べていたら Request 構造体のメンバーとして context を保持していることがわかった。このやり方は原則のルールに反するものだけど、context を状態として扱わず、限定的な用途にのみ使っている。これは既存の interface を変えずに context 導入をしようという意図があると推測する。この考え方でいくと、go-ldap の Request 構造体に context を保持するように変更する方が既存の API の変更を少なくして net/http の Request も同様にやっているからと説明もしやすいように思えた。</description><content>&lt;p>2時半に寝て５時過ぎに起きた。それから二度寝して7時に起きた。&lt;/p>
&lt;p>今日の運動はレッグレイズ(椅子),腹筋ローラー,腕立て,散歩をした。統計を &lt;a href="https://docs.google.com/spreadsheets/d/1bg85QtM-LciUgey8I79uI7vW2PEwsP6TVdeIRVkACBg/edit?usp=sharing">運動の記録&lt;/a> にまとめる。&lt;/p>
&lt;h2 id="トランクルームの契約">トランクルームの契約&lt;/h2>
&lt;p>家電を購入すると大きな箱が付いてきて物理的にその置き場所がない。箱を捨てるという戦略もあるが、オリジナルの箱があると引っ越しや売買／処分するときに便利なのでできれば残しておきたい。これまでデスクトップマシンの箱やオフィス備え付けの椅子などをマンションの部屋に保管したりしていたけど、家電の箱が増えてくると邪魔になってきて、トランクルームを借りることにした。面倒なのであまり調べていないが、&lt;a href="https://spalab-chintai.uk-corp.co.jp/">スペラボ&lt;/a> というサービスの屋内型トランクルームをレンタルすることにした。0.7畳で6,450円/月(税込)になる。会社の経費だしこのぐらいの金額ならいいかと思って、朝から内見に行って問題なさそうなので即決した。&lt;/p>
&lt;h2 id="ホットクックレシピの公開">ホットクックレシピの公開&lt;/h2>
&lt;p>ホットクックのレシピをどこかに整理したい。スマホ上でも調理しながら簡単に確認したいとなると web よりもアプリの方がよい。そこで &lt;a href="/diary/diary/posts/2024/0108/#upnote-への移行">evernote から移行した upnote&lt;/a> に書くことにした。実際に調理してみて、デスクトップマシンでレシピを編集・整理して、写真はスマホアプリからアップロードするといった使い方ができる。&lt;a href="https://help.getupnote.com/import-export-share-and-print/share-notes-via-web-link#view-shared-notes">View shared notes&lt;/a> によると、ノート単位で web 公開もできる。試しに次のレシピを公開してみた。ノートブック単位で公開設定して一覧ページがあるともっとよいが、その機能はないみたい。公開リンクを作成する一手間はあるけれど、そんなにレシピノートを書くわけでもないから気にはならない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://getupnote.com/share/notes/3ztcTpBat7RA2IpEjuoFzq1JKMf2/49d1c703-60b0-4a27-b379-0b9da98c4a8f">野菜スープ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://getupnote.com/share/notes/3ztcTpBat7RA2IpEjuoFzq1JKMf2/8b321682-006e-4408-ae03-2aaf112a76cc">玄米ごはん&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://getupnote.com/share/notes/3ztcTpBat7RA2IpEjuoFzq1JKMf2/96b9c543-a134-4773-8b1e-25cd2969f2f6">豚肉のトマト煮こみ&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ホットクック調理は材料入れてボタン押したら終わりではないか？と思うかもしれない。いや、そうでもないようだ。たしかに材料を内鍋に入れてボタン押したら人間ができることは何もない。だからこそ、ボタンを押す前の過程が大事になってくる。どんな切り方をするのか、素材のサイズはどうか、初期配置はどうか。例えば、豚ロース肉の生姜焼き用を買ってきて、適当に切って3枚4枚重なった状態で投入したらそのままの状態で出来上がった。かき混ぜ棒があるからうまいこと豚肉もバラけるだろうと期待したが、ぴったりくっついているようなお肉をバラかすほどのパワーはないようだ。人間が最初からバラかした状態で内鍋に投入すると、出来上がりのときに豚肉のかたまりがなくなってよいと思う。&lt;/p>
&lt;p>あと気付いたこととして、野菜もお肉も素材を少し小さめに切った方がおいしいように感じる。というのは、ホットクックは圧力鍋ほどの火力で調理しない。圧力鍋に慣れていると、少し大きめに切っても原形がなくなって溶けてしまったり、出来上がり時点で原形があっても混ぜたりしているうちに角がとれて、どんどん小さくなっていく。小さくならなくても口の中でとろけるので大きいままでも問題ない。相対的にホットクックはそこまでの火力はないから、小さめで味が染み込むような出来上がりになるため、小さめに切っても原形は保ったままで溶けてなくなってしまうことはない。これは良い悪いではなくて、それぞれの製品の特徴と言えるだろう。ホットクック調理は素材を小さめに切るというのが、いまところ、私が作ったレシピではうまくいっている。ホットクックでは、小さく切った複数の素材をほお張って食べるのがおいしい。&lt;/p>
&lt;h2 id="go-ldap-への-context-導入の考察">go-ldap への context 導入の考察&lt;/h2>
&lt;p>go-ldap の issue は subscribe しているので、たまたま &lt;a href="https://github.com/go-ldap/ldap/pull/406#issuecomment-1930953422">initial cut of context support #406&lt;/a> の draft pr のコメントに気付いた。過去に context を導入しようとして途中で断念した残骸みたいな pr になっている。いまの go の api は context を受け取るのが当たり前になっているので確かにほしいというのは理解できる。&lt;/p>
&lt;p>代わりに私がやってみようかとソースコードを読んでみた。オリジナルの draft pr は client の interface に &lt;em>WithContext&lt;/em> なメソッドを追加しようというもの。go の context の扱いとしてもっとも基本的なもの。それでもよいけれど、net/http の実装はどうなっているのかを調べていたら &lt;a href="https://pkg.go.dev/net/http@go1.22.0#Request">Request&lt;/a> 構造体のメンバーとして context を保持していることがわかった。このやり方は原則のルールに反するものだけど、context を状態として扱わず、限定的な用途にのみ使っている。これは既存の interface を変えずに context 導入をしようという意図があると推測する。この考え方でいくと、go-ldap の Request 構造体に context を保持するように変更する方が既存の API の変更を少なくして net/http の Request も同様にやっているからと説明もしやすいように思えた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Request&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ctx is either the client or server context. It should only
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// be modified via copying the whole Request using Clone or WithContext.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// It is unexported to prevent people from using Context wrong
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// and mutating the contexts held by callers of the same request.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>今日のところは go-ldap と net/http のソースコードを読んで設計をしていた。また明日余裕があったらサンプル実装してみる。&lt;/p></content></item><item><title>言語化能力と仕事のパフォーマンス</title><link>/diary/posts/2024/0201/</link><pubDate>Thu, 01 Feb 2024 10:43:51 +0900</pubDate><guid>/diary/posts/2024/0201/</guid><description>1時に寝て5時前に起きて6時半に起きた。起きてからホットクックで玄米を炊いてみた。2合で40分前後といったところ。
今日の筋トレは腕立て:20x1,スクワット:20x1,背筋:10x2をした。
社内版テックブログを読む会の2回目 新しい取り組みの2回目。前回の所感はここ 。淡々と始めて淡々と終えた。これはそういうイベント。一方でマネージャーの視点からメンバーの取り組みをみていて1つ気付いたことがある。読解力、文章力、言語化力に個人差がある。そんなことは当たり前だが、たまたま最近ある動画をみた。8分20秒ぐらいからみてほしい。
この先輩が後輩に指導している中で日経新聞を題材に、情報処理能力を鍛えることの重要性を説明している。言語化能力を鍛えるために新聞を読む、映画をみる、日記も書く、文章能力を上げなさいと指導している。本当にこの通り。私が働いてきた組織では開発者で半分ぐらいの人しか文章を書けず、ビジネスの人に限ってはもっと多くの割合の人たちが書けない。そして若い人よりも年配の人たちの方ができない割合が多かった。それではビジネスで勝てないよという話し。テックブログを読む会はこの視点からも言語化能力を養うよい練習になるように思えた。
野菜スープのレシピ改改 先日つくった野菜スープ のさらなる改善。前回のレシピをさらにアレンジして今日のレシピはこれ。
にんじん x 1 新玉ねぎ x 1 かぼちゃ 1/4切れ ミディアムトマト x 8 セロリ x 1 の葉っぱ部分 しめじ 1袋 えのき 1袋 鶏肉 ローリエ 1枚 塩コショウ 適当 コンソメ (小さじ4杯) 水 600cc 調理のワークフローもだいぶわかってきて、食材を切って内鍋へ入れるのも次の順番がよいように思う。
水を 600cc を入れる コンソメを小さじ4杯入れる ローリエを入れる 塩コショウを少々入れる にんじんをさいの目に切って入れる 新玉ねぎを細目にくし切りして入れる かぼちゃをさいの目に切って入れる しめじの石づきを切り落として、個々の房を分解しながら入れる えのきの石づきを切り落として、半分のところで切って、ばらかしながら入れる ミディアムトマトを洗って入れる (出来たては熱過ぎて火傷するから半分に切った方がよいかも？) 鶏肉の身と皮を分離して、それぞれをさいの目のサイズに小さく切って入れる セロリの葉っぱ部分を切って、適当なサイズで入れる これで内鍋の水位 MAX の線がちょっと隠れるぐらい。ちょうどいっぱいになる。あとはホットクックの調理ボタンを押すだけ。だいたい40分程度。
スクラムマスターという功罪 QAエンジニアがスクラムマスターに憧れてしくじった話 に参加した。
失敗経験の共有をするという意味で発表そのものはおもしろかった。regional scrum gathering tokyo (rsgt) 2024 の発表の再演だったみたい。開発経験の浅い人がスクラムに馴染んでいない会社に転職していきなりスクラムマスターに挑戦してみて、全然うまくいきませんでしたといった失敗談の共有。その会社では、その後、組織改編されてスクラム導入も断念して、その発表者も結果的に退職してしまったとのこと。いろいろ悲しい。スクラムマスターは組織のライン上もチームの役割としても、実務に対しての責任を負っていない (建前上はチームの成功にコミットとあるけど、スクラムの運営をうまくやるための支援をするといった活動がメインになる) ため、若い人がいきなりスクラムマスターをやるというのは難しいのではないかと感じた。スクラムマスターの役割の1つにファシリテーションをうまくやってチームを誘導するみたいな風潮がある。しかし、私の感覚的には、ファシリテーションをうまくやっただけで開発がうまくいくわけないだろと自分の経験則からの反発もある。
私からみたら、この例は経験不足／実力不足の人が開発のマネジメントに影響力を及ぼそうとして、しかも転職したばかりの組織も開発もよくわかっていないチームで、そんなことそうそうできないってだけの話しにみえた。にもかかわらず、このイベントに参加している人たちはみんな優しくて、どうすればうまくいったか？を親身に相談にのってあげたり、その組織や会社の問題点をあげてフォローしたり、それはそれでやさしい世界ではあるけれど、社会人としての責任感といったところで私は相容れないものがあった。私自身、いろんな組織やチームで課題管理の価値を共有してきたけど、それも半年〜1年、私が実際に現実の開発の中で実践して、その価値が伝わっていく。こういった開発の運用を変えるというのをファシリテーションと啓蒙の (いわば) 口先介入だけで実現するのは相当のスキルや経験がいるのではないかとも思えた。</description><content>&lt;p>1時に寝て5時前に起きて6時半に起きた。起きてからホットクックで玄米を炊いてみた。2合で40分前後といったところ。&lt;/p>
&lt;p>今日の筋トレは腕立て:20x1,スクワット:20x1,背筋:10x2をした。&lt;/p>
&lt;h2 id="社内版テックブログを読む会の2回目">社内版テックブログを読む会の2回目&lt;/h2>
&lt;p>新しい取り組みの2回目。&lt;a href="/diary/diary/posts/2024/0125/#社内版テックブログを読む会をやってみた">前回の所感はここ&lt;/a> 。淡々と始めて淡々と終えた。これはそういうイベント。一方でマネージャーの視点からメンバーの取り組みをみていて1つ気付いたことがある。読解力、文章力、言語化力に個人差がある。そんなことは当たり前だが、たまたま最近ある動画をみた。8分20秒ぐらいからみてほしい。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/SB8-MOxFFCY" allowfullscreen title="【ビフォアフ】鬼才が売れないホストをプロデュース">&lt;/iframe>
&lt;/div>
&lt;p>この先輩が後輩に指導している中で日経新聞を題材に、情報処理能力を鍛えることの重要性を説明している。言語化能力を鍛えるために新聞を読む、映画をみる、日記も書く、文章能力を上げなさいと指導している。本当にこの通り。私が働いてきた組織では開発者で半分ぐらいの人しか文章を書けず、ビジネスの人に限ってはもっと多くの割合の人たちが書けない。そして若い人よりも年配の人たちの方ができない割合が多かった。それではビジネスで勝てないよという話し。テックブログを読む会はこの視点からも言語化能力を養うよい練習になるように思えた。&lt;/p>
&lt;h2 id="野菜スープのレシピ改改">野菜スープのレシピ改改&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2024/0129/#野菜スープのレシピ改">先日つくった野菜スープ&lt;/a> のさらなる改善。前回のレシピをさらにアレンジして今日のレシピはこれ。&lt;/p>
&lt;ul>
&lt;li>にんじん x 1&lt;/li>
&lt;li>新玉ねぎ x 1&lt;/li>
&lt;li>かぼちゃ 1/4切れ&lt;/li>
&lt;li>ミディアムトマト x 8&lt;/li>
&lt;li>セロリ x 1 の葉っぱ部分&lt;/li>
&lt;li>しめじ 1袋&lt;/li>
&lt;li>えのき 1袋&lt;/li>
&lt;li>鶏肉&lt;/li>
&lt;li>ローリエ 1枚&lt;/li>
&lt;li>塩コショウ 適当&lt;/li>
&lt;li>コンソメ (小さじ4杯)&lt;/li>
&lt;li>水 600cc&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="/diary/diary/img/2024/0201_vegisoup.jpg"/>
&lt;/figure>
&lt;p>調理のワークフローもだいぶわかってきて、食材を切って内鍋へ入れるのも次の順番がよいように思う。&lt;/p>
&lt;ol>
&lt;li>水を 600cc を入れる&lt;/li>
&lt;li>コンソメを小さじ4杯入れる&lt;/li>
&lt;li>ローリエを入れる&lt;/li>
&lt;li>塩コショウを少々入れる&lt;/li>
&lt;li>にんじんをさいの目に切って入れる&lt;/li>
&lt;li>新玉ねぎを細目にくし切りして入れる&lt;/li>
&lt;li>かぼちゃをさいの目に切って入れる&lt;/li>
&lt;li>しめじの石づきを切り落として、個々の房を分解しながら入れる&lt;/li>
&lt;li>えのきの石づきを切り落として、半分のところで切って、ばらかしながら入れる&lt;/li>
&lt;li>ミディアムトマトを洗って入れる (出来たては熱過ぎて火傷するから半分に切った方がよいかも？)&lt;/li>
&lt;li>鶏肉の身と皮を分離して、それぞれをさいの目のサイズに小さく切って入れる&lt;/li>
&lt;li>セロリの葉っぱ部分を切って、適当なサイズで入れる&lt;/li>
&lt;/ol>
&lt;p>これで内鍋の水位 MAX の線がちょっと隠れるぐらい。ちょうどいっぱいになる。あとはホットクックの調理ボタンを押すだけ。だいたい40分程度。&lt;/p>
&lt;h2 id="スクラムマスターという功罪">スクラムマスターという功罪&lt;/h2>
&lt;p>&lt;a href="https://distributed-agile-team.connpass.com/event/300798/">QAエンジニアがスクラムマスターに憧れてしくじった話&lt;/a> に参加した。&lt;/p>
&lt;iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/c20bb9169e284b0fb23f8dbf03fe9ce1" title="QAエンジニアがSMに憧れてしくじった話" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 600px; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777">&lt;/iframe>
&lt;p>失敗経験の共有をするという意味で発表そのものはおもしろかった。regional scrum gathering tokyo (rsgt) 2024 の発表の再演だったみたい。開発経験の浅い人がスクラムに馴染んでいない会社に転職していきなりスクラムマスターに挑戦してみて、全然うまくいきませんでしたといった失敗談の共有。その会社では、その後、組織改編されてスクラム導入も断念して、その発表者も結果的に退職してしまったとのこと。いろいろ悲しい。スクラムマスターは組織のライン上もチームの役割としても、実務に対しての責任を負っていない (建前上はチームの成功にコミットとあるけど、スクラムの運営をうまくやるための支援をするといった活動がメインになる) ため、若い人がいきなりスクラムマスターをやるというのは難しいのではないかと感じた。スクラムマスターの役割の1つにファシリテーションをうまくやってチームを誘導するみたいな風潮がある。しかし、私の感覚的には、ファシリテーションをうまくやっただけで開発がうまくいくわけないだろと自分の経験則からの反発もある。&lt;/p>
&lt;p>私からみたら、この例は経験不足／実力不足の人が開発のマネジメントに影響力を及ぼそうとして、しかも転職したばかりの組織も開発もよくわかっていないチームで、そんなことそうそうできないってだけの話しにみえた。にもかかわらず、このイベントに参加している人たちはみんな優しくて、どうすればうまくいったか？を親身に相談にのってあげたり、その組織や会社の問題点をあげてフォローしたり、それはそれでやさしい世界ではあるけれど、社会人としての責任感といったところで私は相容れないものがあった。私自身、いろんな組織やチームで課題管理の価値を共有してきたけど、それも半年〜1年、私が実際に現実の開発の中で実践して、その価値が伝わっていく。こういった開発の運用を変えるというのをファシリテーションと啓蒙の (いわば) 口先介入だけで実現するのは相当のスキルや経験がいるのではないかとも思えた。&lt;/p></content></item><item><title>野菜スープ改</title><link>/diary/posts/2024/0129/</link><pubDate>Mon, 29 Jan 2024 08:39:37 +0900</pubDate><guid>/diary/posts/2024/0129/</guid><description>2時前に寝て6時半に起きた。たぶん夜中には起きていない。夜は野菜スープしか食べてないから安眠できたのかもしれない。
今日の筋トレはレッグレイズ(椅子):20x1,スクワット:20x1,縄跳び(両足跳:50x2,駆け足跳び:10x3)をした。今日もお昼休みに公園へ行って縄跳びした。昨日縄跳びしたせいだと思うが跳ぶと膝の後ろの筋が痛い。普段やらないことしたら変なところの筋肉が痛くなる。
scim パーサーの実装 半年ほど前に scim 向け urn パーサーの提案 を PR で送っていた。これまでその PR は放置されていた。数日前からライブラリの作者が PR をみてくれたようだ。私が送った PR 自体は作者の意図したものではなかったようでクローズされたが、作者が scim の仕様を把握して代わりに作ってくれた。パーサーの実装が automaton? のようになっていてパッと見ではロジックがよくわからない。
feat: support SCIM (RFC 7643) #37 せっかく作ってくれたのでこの機能を使って、お手伝いしている会社のアプリケーションの scim urn のパース処理を書き直した。これまでは正規表現で実装されていた。rfc に準拠した go-urn を使うことでバリデーションもできるし、パフォーマンスもよいし、urn の部分文字列も参照できる。ライブラリの学習コストや依存ライブラリを増やすデメリット以外はとくに問題はない。
テックブログを読む会談義 テックブログ一気読み選手権20240129杯 に参加した。イベントが終わってから軽くにしはらさんに お手伝い先で社内イベント を始めたことを情報共有した。にしはらさんが知る限り、このイベントを他社でもやり始めたというのは初めてのことらしい。とても洗練されたよいイベントなのに社内でもその価値を理解できる人たちは少ないという。前にも書いたけど、まさにこれだと思う。
恐ろしく速い手刀。オレでなきゃ見逃しちゃうね
お手伝い先ではまだ始まったばかり。1回目はそれなりにうまくいったつもり。毎週30分を4週やってみてメンバーに感想を聞いてみる。そして継続しようと決まったらまたブログにでもそのことを書こうと思う。
野菜スープのレシピ改 昨日初めて作った野菜スープ はいくつか気付きがあったので再挑戦。
メニューから「野菜スープ」を選択すると最初から画面に約25分と表示されて急加熱しているようにみえる。残り20分ぐらいのところからスマホのタイマーと一緒に比較しながら画面の時間がどう遷移するのかを観察していた。すると、スマホのタイマーと比べてホットクックの時間経過は遅くなっていった。残り13分の状態がもっとも長かった。残り7分のところでスマホのタイマーは20分経過した。残り7分で画面上に残り時間が大きく表示される。この後の時間の推移はスマホのタイマーとだいたい同じぐらいだったので信頼できる残り時間のようにみえる。したがって、ホットクックの調理をスタートした時点での、残り時間表記は目安であってまったく信頼できない。この野菜スープの調理時間は約25分とあるけど、今日作った分量とレシピでは約40分ほどかかっていた。ホットクックは内鍋を加熱して予熱したり、水があれば沸騰させたりする時間が必要らしい。その予熱時間が10分強はかかるとみておくとよさそう。
圧力鍋と比べるとホットクックの方が調理時間そのものは大きいというのは概ね正しいとは思う。しかし、ホットクックは基本的にスタートボタンを押下したら他にやることないので放ったらかしにする感覚でよいと思う。圧力鍋は圧力がかかったら火加減を調整したり圧力を下げて蓋を開けたらかきまぜしたりしないといけない。その「かきまぜ」の手間暇がホットクックはないのだから多少調理時間がかかっても全体としては気にならないと思う。
昨日のオリジナルを改変したレシピをさらに改変して今日のレシピはこれ。
にんじん x 1 新玉ねぎ x 1 かぼちゃ 1/4切れ ミディアムトマト x 8 セロリ x 1 の葉っぱ部分 しめじ 1袋 えのき 1袋 ローリエ 1枚 塩コショウ 適当 コンソメ (小さじ4杯) 水 600cc にんじんは乱切りをやめて 1cm 程度の正方形に切る。かぼちゃもにんじん同様、1-2cm の正方形に切る。セロリの茎の部分は使うのをやめて、葉っぱが付いている部分を適当なサイズに切って入れる。野菜を小さくしたことで、いろいろな食材を一緒に口に運べるようになって、にんじんやかぼちゃだけ頬張るのではなく、複数の素材の味を一緒に楽しめるようになった。そうすると、えのきは石づきを切り離してそのままの長さで入れていたが、他の野菜と一緒に食べやすくしようと思ったらもう半分ぐらいに切り落として短くした方がよいのではないかと思えた。あとスープも少なかったので昨日よりも水を 200cc 増やした。</description><content>&lt;p>2時前に寝て6時半に起きた。たぶん夜中には起きていない。夜は野菜スープしか食べてないから安眠できたのかもしれない。&lt;/p>
&lt;p>今日の筋トレはレッグレイズ(椅子):20x1,スクワット:20x1,縄跳び(両足跳:50x2,駆け足跳び:10x3)をした。今日もお昼休みに公園へ行って縄跳びした。昨日縄跳びしたせいだと思うが跳ぶと膝の後ろの筋が痛い。普段やらないことしたら変なところの筋肉が痛くなる。&lt;/p>
&lt;h2 id="scim-パーサーの実装">scim パーサーの実装&lt;/h2>
&lt;p>半年ほど前に &lt;a href="/diary/diary/posts/2023/0723/#scim-向けの-urn-パーサーの拡張">scim 向け urn パーサーの提案&lt;/a> を PR で送っていた。これまでその PR は放置されていた。数日前からライブラリの作者が PR をみてくれたようだ。私が送った PR 自体は作者の意図したものではなかったようでクローズされたが、作者が scim の仕様を把握して代わりに作ってくれた。パーサーの実装が automaton? のようになっていてパッと見ではロジックがよくわからない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/leodido/go-urn/pull/37">feat: support SCIM (RFC 7643) #37&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>せっかく作ってくれたのでこの機能を使って、お手伝いしている会社のアプリケーションの scim urn のパース処理を書き直した。これまでは正規表現で実装されていた。rfc に準拠した &lt;a href="https://github.com/leodido/go-urn">go-urn&lt;/a> を使うことでバリデーションもできるし、パフォーマンスもよいし、urn の部分文字列も参照できる。ライブラリの学習コストや依存ライブラリを増やすデメリット以外はとくに問題はない。&lt;/p>
&lt;h2 id="テックブログを読む会談義">テックブログを読む会談義&lt;/h2>
&lt;p>&lt;a href="https://blogreading.connpass.com/event/308512/">テックブログ一気読み選手権20240129杯&lt;/a> に参加した。イベントが終わってから軽くにしはらさんに &lt;a href="/diary/diary/posts/2024/0125/#社内版テックブログを読む会をやってみた">お手伝い先で社内イベント&lt;/a> を始めたことを情報共有した。にしはらさんが知る限り、このイベントを他社でもやり始めたというのは初めてのことらしい。とても洗練されたよいイベントなのに社内でもその価値を理解できる人たちは少ないという。前にも書いたけど、まさにこれだと思う。&lt;/p>
&lt;blockquote>
&lt;p>恐ろしく速い手刀。オレでなきゃ見逃しちゃうね&lt;/p>
&lt;/blockquote>
&lt;p>お手伝い先ではまだ始まったばかり。1回目はそれなりにうまくいったつもり。毎週30分を4週やってみてメンバーに感想を聞いてみる。そして継続しようと決まったらまたブログにでもそのことを書こうと思う。&lt;/p>
&lt;h2 id="野菜スープのレシピ改">野菜スープのレシピ改&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2024/0128/#野菜スープのレシピ">昨日初めて作った野菜スープ&lt;/a> はいくつか気付きがあったので再挑戦。&lt;/p>
&lt;p>メニューから「野菜スープ」を選択すると最初から画面に約25分と表示されて急加熱しているようにみえる。残り20分ぐらいのところからスマホのタイマーと一緒に比較しながら画面の時間がどう遷移するのかを観察していた。すると、スマホのタイマーと比べてホットクックの時間経過は遅くなっていった。残り13分の状態がもっとも長かった。残り7分のところでスマホのタイマーは20分経過した。残り7分で画面上に残り時間が大きく表示される。この後の時間の推移はスマホのタイマーとだいたい同じぐらいだったので信頼できる残り時間のようにみえる。したがって、ホットクックの調理をスタートした時点での、残り時間表記は目安であってまったく信頼できない。この野菜スープの調理時間は約25分とあるけど、今日作った分量とレシピでは約40分ほどかかっていた。ホットクックは内鍋を加熱して予熱したり、水があれば沸騰させたりする時間が必要らしい。その予熱時間が10分強はかかるとみておくとよさそう。&lt;/p>
&lt;p>圧力鍋と比べるとホットクックの方が調理時間そのものは大きいというのは概ね正しいとは思う。しかし、ホットクックは基本的にスタートボタンを押下したら他にやることないので放ったらかしにする感覚でよいと思う。圧力鍋は圧力がかかったら火加減を調整したり圧力を下げて蓋を開けたらかきまぜしたりしないといけない。その「かきまぜ」の手間暇がホットクックはないのだから多少調理時間がかかっても全体としては気にならないと思う。&lt;/p>
&lt;p>昨日のオリジナルを改変したレシピをさらに改変して今日のレシピはこれ。&lt;/p>
&lt;ul>
&lt;li>にんじん x 1&lt;/li>
&lt;li>新玉ねぎ x 1&lt;/li>
&lt;li>かぼちゃ 1/4切れ&lt;/li>
&lt;li>ミディアムトマト x 8&lt;/li>
&lt;li>セロリ x 1 の葉っぱ部分&lt;/li>
&lt;li>しめじ 1袋&lt;/li>
&lt;li>えのき 1袋&lt;/li>
&lt;li>ローリエ 1枚&lt;/li>
&lt;li>塩コショウ 適当&lt;/li>
&lt;li>コンソメ (小さじ4杯)&lt;/li>
&lt;li>水 600cc&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="/diary/diary/img/2024/0129_vegisoup.jpg"/>
&lt;/figure>
&lt;p>にんじんは乱切りをやめて 1cm 程度の正方形に切る。かぼちゃもにんじん同様、1-2cm の正方形に切る。セロリの茎の部分は使うのをやめて、葉っぱが付いている部分を適当なサイズに切って入れる。野菜を小さくしたことで、いろいろな食材を一緒に口に運べるようになって、にんじんやかぼちゃだけ頬張るのではなく、複数の素材の味を一緒に楽しめるようになった。そうすると、えのきは石づきを切り離してそのままの長さで入れていたが、他の野菜と一緒に食べやすくしようと思ったらもう半分ぐらいに切り落として短くした方がよいのではないかと思えた。あとスープも少なかったので昨日よりも水を 200cc 増やした。&lt;/p>
&lt;p>昨日作ったものは薄味の、なにかひと味足りないというところに、コンソメはうまくはまった。レシピに入れろと書いてあるものを勝手に抜くのよくない。足りなかった旨味が揃ったことで他の食材とのバランスも断然によくなった。セロリを減らしたことでセロリの癖も弱くなってちょうどよくなったと思う。昨日と比べて、お料理ベーコンを買い忘れてなしで作ったが、あってもなくてもそんな変わらない気がする。コンソメにより肉エキスも入ったことで鶏もも肉をちょっと入れてみてもよいような気がした。お肉的なたんぱく質のアクセントがあってもよいんじゃないかと思えた。次に作るときに試してみる。&lt;/p>
&lt;p>昨日作ったものよりもおいしくなって料理としての完成度は増したように思う。野菜スープと一緒におにぎりを2個食べた。100 kcal + (200 kcal * 2) = 500 kcal ぐらいかな。晩ご飯のカロリーとしてちょうどよい。&lt;/p>
&lt;p>仮に調理の味付けを失敗したときでもなにかふりかけのようにかけて味変できるものがあるとよいと思う。昨日のコンソメ抜きの野菜スープも鰹節をふりかけたらおいしくなった。フレークタイプのカレーで市販のカレールウに比べて油脂分が少ないらしい。こういうのも容易しておくと失敗したときに誤魔化せるかもしれない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://tokubai.co.jp/news/articles/5910">リピ決定【成城石井】「大人気無添加カレー」フレーク状でサーッと溶けて洗い物もラク&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>縄跳びとホットクック調理が楽しい</title><link>/diary/posts/2024/0128/</link><pubDate>Sun, 28 Jan 2024 00:20:56 +0900</pubDate><guid>/diary/posts/2024/0128/</guid><description>4時半に寝て8時過ぎに起きた。23時頃に晩ご飯を食べてそのまま寝ると吐くので3時半ぐらいまでオフィスで作業していた。
今日の筋トレは腕立て:20x1,縄跳び(両足跳:50x3,駆け足跳び:20x2,スキーヤー:10x1)をした。縄跳びをコンクリートの駐車場と公園の土の上の両方でやってみた。やはり土の方がひざへの衝撃が緩和されて身体の負荷が軽減されてよさそうに思える。おっさんが公園で縄跳びするのはちょっと恥ずかしいけれど、健康のためなので仕方ない。息が切れたら休みながら20分ほど縄跳びしてた。やり始めるとけっこう楽しい。
physical なエクササイズのことを、英語ではワークアウトと呼ぶらしい。トレーニング動画をみているとその用語が出てくる。日本語で言う筋トレを英語で言うとワークアウトが適切らしい。
ワークアウトとは？トレーニングとの違いは？ hugo のハンズオン資料作り 先日の続き 。空き時間をみつけてやろうと思っていたのに、平日の夜に書く余裕がないぐらいは今週はなぜか忙しかった。いくつか遂行したり、上級者向けのコンテンツ作成に着手した。おっさんなので取り掛かることに一番時間がかかる。やり始めたらさくさく書いていくのに、、、。もし誰かから「なぜもっと早くから着手しないのか」と聞かれたら答えに困ってしまう。
https://t2y.github.io/hugo-hands-on/ 野菜スープのレシピ ホットクック調理の続き 。ホットクックの取説と一緒に付いていたレシピ本をみながら次は 野菜スープ に挑戦してみた。
材料を入れてから手動でスープを25分に設定してしばらく放置したものの、あまり手応えがなくて、取り消ししてメニューの「野菜スープ」でやり直した。メニューから選択すると画面に後◯◯分と表示されるからわかりやすい。やり直したらレシピは25分なのがセンサーが検知して7分まで下がったので、手動でもそこそこ火を通していた模様。これも後から調べたら手動でスープをやると、スープが沸騰するまでの時間はカウントされないようで、その分が加熱されていないようにみえたのかもしれない。
オリジナルを改変してレシピはこんなところ。
にんじん x 1 新玉ねぎ x 1 かぼちゃ 1/4切れ ミディアムトマト x 8 セロリ x 1 しめじ 1袋 えのき 1袋 お料理ベーコン 1パック ローリエ 1枚 塩コショウ 適当 水 400cc 完成したらローリエ (ローレル) を鍋から取り出す。薄味のポトフのような優しい野菜スープになった。イメージ通りではある。本当はコンソメ入れろと書いてあるところを、これだけ野菜ときのこを入れたら出汁でるでしょ？と思って省いた。そしたら美味しくないわけではないけれど、薄味の、なにかひと味足りないと感じたのでやはりコンソメは必要だった。コンソメじゃなくても鶏ガラか鰹節か、なにかしら出汁がいる。ホットクックは材料入れたら他にやることないから味付けの調整が難しい (このままでも十分おいしいけど) 。分量や食材の組み合わせを工夫して出来上がりの精度を上げていく取り組みが必要になる。
セロリを丸1本入れてみたらアクセントが強過ぎて、葉っぱのみにして茎の部分はあまり入れないようにしてもよいかもしれない。ミディアムトマトも酸味のアクセントがあって美味しい。完成した直後だと熱くてほうばると火傷注意だけ。にんじんはもっと小さく切った方がよい。圧力鍋と違ってホットクックはにんじんがとろとろになるまでは加熱されない。一口大ぐらいのサイズは食べ応えはあるが、他の野菜と一緒に食べにくい。次はもっと小さく切ってみる。その他の食材は全体と調和して馴染んでいた気がする。鍋の水位MAXまで食材入れたせいか、水ももう少し増やしてスープ多めでもよいかもしれない。
トレーニングして体重を落としていくために、夜はこういった低カロリーでお腹に優しそうな料理をメインにしていきたい。</description><content>&lt;p>4時半に寝て8時過ぎに起きた。23時頃に晩ご飯を食べてそのまま寝ると吐くので3時半ぐらいまでオフィスで作業していた。&lt;/p>
&lt;p>今日の筋トレは腕立て:20x1,縄跳び(両足跳:50x3,駆け足跳び:20x2,スキーヤー:10x1)をした。縄跳びをコンクリートの駐車場と公園の土の上の両方でやってみた。やはり土の方がひざへの衝撃が緩和されて身体の負荷が軽減されてよさそうに思える。おっさんが公園で縄跳びするのはちょっと恥ずかしいけれど、健康のためなので仕方ない。息が切れたら休みながら20分ほど縄跳びしてた。やり始めるとけっこう楽しい。&lt;/p>
&lt;p>physical なエクササイズのことを、英語ではワークアウトと呼ぶらしい。トレーニング動画をみているとその用語が出てくる。日本語で言う筋トレを英語で言うとワークアウトが適切らしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://tabi-labo.com/297176/workout">ワークアウトとは？トレーニングとの違いは？&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="hugo-のハンズオン資料作り">hugo のハンズオン資料作り&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2024/0116/">先日の続き&lt;/a> 。空き時間をみつけてやろうと思っていたのに、平日の夜に書く余裕がないぐらいは今週はなぜか忙しかった。いくつか遂行したり、上級者向けのコンテンツ作成に着手した。おっさんなので取り掛かることに一番時間がかかる。やり始めたらさくさく書いていくのに、、、。もし誰かから「なぜもっと早くから着手しないのか」と聞かれたら答えに困ってしまう。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://t2y.github.io/hugo-hands-on/">https://t2y.github.io/hugo-hands-on/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="野菜スープのレシピ">野菜スープのレシピ&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2024/0127/#ホットクックに初挑戦">ホットクック調理の続き&lt;/a> 。ホットクックの取説と一緒に付いていたレシピ本をみながら次は &lt;a href="https://cocoroplus.jp.sharp/kitchen/recipe/hotcook/KN-HW24G/R4080">野菜スープ&lt;/a> に挑戦してみた。&lt;/p>
&lt;p>材料を入れてから手動でスープを25分に設定してしばらく放置したものの、あまり手応えがなくて、取り消ししてメニューの「野菜スープ」でやり直した。メニューから選択すると画面に後◯◯分と表示されるからわかりやすい。やり直したらレシピは25分なのがセンサーが検知して7分まで下がったので、手動でもそこそこ火を通していた模様。これも後から調べたら手動でスープをやると、スープが沸騰するまでの時間はカウントされないようで、その分が加熱されていないようにみえたのかもしれない。&lt;/p>
&lt;p>オリジナルを改変してレシピはこんなところ。&lt;/p>
&lt;ul>
&lt;li>にんじん x 1&lt;/li>
&lt;li>新玉ねぎ x 1&lt;/li>
&lt;li>かぼちゃ 1/4切れ&lt;/li>
&lt;li>ミディアムトマト x 8&lt;/li>
&lt;li>セロリ x 1&lt;/li>
&lt;li>しめじ 1袋&lt;/li>
&lt;li>えのき 1袋&lt;/li>
&lt;li>お料理ベーコン 1パック&lt;/li>
&lt;li>ローリエ 1枚&lt;/li>
&lt;li>塩コショウ 適当&lt;/li>
&lt;li>水 400cc&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="/diary/diary/img/2024/0128_vegisoup.jpg"/>
&lt;/figure>
&lt;p>完成したらローリエ (ローレル) を鍋から取り出す。薄味のポトフのような優しい野菜スープになった。イメージ通りではある。本当はコンソメ入れろと書いてあるところを、これだけ野菜ときのこを入れたら出汁でるでしょ？と思って省いた。そしたら美味しくないわけではないけれど、薄味の、なにかひと味足りないと感じたのでやはりコンソメは必要だった。コンソメじゃなくても鶏ガラか鰹節か、なにかしら出汁がいる。ホットクックは材料入れたら他にやることないから味付けの調整が難しい (このままでも十分おいしいけど) 。分量や食材の組み合わせを工夫して出来上がりの精度を上げていく取り組みが必要になる。&lt;/p>
&lt;p>セロリを丸1本入れてみたらアクセントが強過ぎて、葉っぱのみにして茎の部分はあまり入れないようにしてもよいかもしれない。ミディアムトマトも酸味のアクセントがあって美味しい。完成した直後だと熱くてほうばると火傷注意だけ。にんじんはもっと小さく切った方がよい。圧力鍋と違ってホットクックはにんじんがとろとろになるまでは加熱されない。一口大ぐらいのサイズは食べ応えはあるが、他の野菜と一緒に食べにくい。次はもっと小さく切ってみる。その他の食材は全体と調和して馴染んでいた気がする。鍋の水位MAXまで食材入れたせいか、水ももう少し増やしてスープ多めでもよいかもしれない。&lt;/p>
&lt;p>トレーニングして体重を落としていくために、夜はこういった低カロリーでお腹に優しそうな料理をメインにしていきたい。&lt;/p></content></item><item><title>かきまぜという進化</title><link>/diary/posts/2024/0127/</link><pubDate>Sat, 27 Jan 2024 13:44:27 +0900</pubDate><guid>/diary/posts/2024/0127/</guid><description>2時過ぎに寝て6時半に起きた。晩ご飯食べてからちょっと自転車で走って運動してオフィスで軽く作業するつもりが、ブログ読んだりして結局意図した作業ができなかった。
今日の筋トレは腹筋ローラー:5x1,スクワット:20x1,縄跳び(両足跳)30x3をした。腹筋ローラーは腹筋も使うけど、肩や腕の筋肉もパンパンになっている。
ストレッチ 筋トレを継続しているので軽い筋肉痛を引きずったままストレッチを受ける。トレーナーさんもストレッチしていて、体が硬めにみえるという話しはあるものの、筋肉痛をストレッチで伸ばすのは悪いことではないので問題ないという。昨日ルミナリエの案内に歩き回ったせいか足も腰もやや疲労していた。お尻の後ろのツボのようなところも普段平気なのに効いた気がする。トレーナーさんとネットで調べた情報をベースに筋トレの話しをしていて、毎日同じメニューをこなすよりも違うメニューをやった方が筋肉が回復する日を設けられて効果的らしい。ちょうどいま習慣化できてきたタイミングでいくつかメニューを増やそうとしているので1週間の筋トレのメニュー作りをしてもよいかもしれない。今日の開脚幅は開始前152cmで、ストレッチ後156cmだった。
縄跳びの跳び方 筋トレのメニューの1つにしようと FEELCAT なわとびを購入してみた。
今日届いたので長さを調節して早速オフィスの近所の駐車場へ行ってやってみた。縄跳びなんか学校の体育でやって以降やったことないんじゃないかとすら思えた。最初はどうやって跳ぶんだっけ？みたいなところから始めて、段々記憶が戻ってきてリズムよく跳べるようになった。長さ調節の説明書に初心者は少したるむ感じの長い方がよいと書いてあったから長めに調節していたものの、跳んでみると縄がたるんだ分の回転するリズムが自分の感覚と違って返って跳びにくかった。戻ってきてさらに短く適性な長さに調節した。ひとまず両足跳び30回を3セット跳んでみた。これだけで息が切れた。
縄跳びの動画をみていて回数をこなすよりも跳び続ける秒数を測った方がよいようにみえる。これなら縄跳びが上達することで同じ時間でも回数が増えて負荷を上げていくのにちょうどよさそうに思える。まだ両足跳びも怪しいので慣れてきたら時間に移行していく。他のいろんな跳び方にも挑戦したい。
短時間で効率的！全身を鍛える”縄跳び”トレーニング 完全版 能楽の勉強 4半期に1回ぐらいの「能のことばを読んでみる会」へ行ってきた。前回の所感はここ 。久しぶりで最寄り駅は阪急芦屋川駅なのに、なぜか阪神だと勘違いしていて阪神芦屋駅に行ってしまい、そこから速歩きで20分かけて芦屋能楽堂に辿り着いた。1kmほど歩いた。そのせいで10分ほど遅刻した。よい運動にはなったけれど。
今回のお題は「難波」という、世阿弥の祝言能だという。世阿弥が自筆した本物の文献は国の重要文化財としてお寺に保管されている。その文献をすべて写真に撮ったものを影印 (えいいん) と呼び 世阿弥自筆能本集 として販売されている。講師の朝原さんがその本を持ってこられてみせていただいた。おそらく難波の詞章もそこに書かれていたのだと思う。現代人は世阿弥の自筆をそのまま読めないが、びっしりとカタカナが書かれていた。発音どおりの表記をするために意図的に漢字やひらがなを使わずにカタカナで書いたと考えられている。この文献は世阿弥が自筆したことは間違いないが、書いてある内容がすべて世阿弥のオリジナルかどうかまではわかっていない。世阿弥が活躍したのは室町時代なので本は書き写すしかなかった。他人の創作物や文献を世阿弥が書き写した可能性もある。
《難波》 第37回能のことばを読んでみる会 朝原さんによると、現代に伝わっている難波の詞章の内容と、世阿弥が自筆した文献に書いてある内容はいくつか食い違っているという。その理由としていくつかの仮説が考察される。
世阿弥が書いたものは編集中の草稿だったのではないか 世阿弥が書いたものを現代まで伝わる過程で誰かが改変したのではないか 実は難波が誰かの創作物で、世阿弥はそれを書き写したものの、それはオリジナルではなかったのではないか 難波の冒頭は次の言葉から始まる。
山も霞みて浦の春。山も霞みて浦の春。波風静かなりけり
七・五・七・五・七・四と七五調になっている。この冒頭の音を聞くだけで、いまから始まる物語はきれいな美しい物語を展開するよという意図が込められているという。また「波風静か」とは能の中では世の中が平和ですよという意味をもっているという。
やまもかすみて うらのはる やまもかすみて うらのはる なみかぜしずか なりけり
といった具合に、この1文だけで解説が10分といった、いつも通りの詳細な解説で進んでいく。
難波は 仁徳天皇 の仁政を讃える内容となっている。所々、仁徳天皇の徳によってなにもしなくても平和で穏やかで人々は幸せに暮らしているみたいな表現が出てくる。現代人が習った仁徳天皇という呼び名は、奈良時代中期に中国を真似て漢字2文字で天皇の名前を表すようになって以降の話しだという。したがって奈良時代に成立した 日本書紀 では仁徳天皇という名前は出ておらず、仁徳天皇を表す大鷦鷯尊 (おおさざきのみこと) という日本式の名前が使われている。難波の中でもその名前で出てくる。こういった漢字2文字で天皇の名前を表す以前の日本式の天皇名前を 和風諡号 と呼ぶらしい。
咲くや木 (こ) の花 冬籠り
「木の花」は「こそあど」言葉の指示語としての「これ」の意図がある。わざわざ「木の花」とあるのは 木花開耶姫 (このはなのさくやびめ) と掛けているのだという。しかし、木花開耶姫は桜の女神 (または火山の女神？) として現代では伝わっている。難波の物語で出てくるのは梅についての問答なのに木花開耶姫が出てくるのはそもそもおかしいのだけど、当時は梅の女神でもあったのか？それともただ言葉を掛けただけなのか？といった複数の考察ができるという。
難波の物語自体は仁徳天皇がいかに素晴らしくて、その治世によって世の中は平和で美しくて、様々な情景を浮かべるような表現がたくさん出てくる。もし能をみて幻視できる人であれば、暖かくて穏やかで華やかな景色をたくさん眺められるのだと思う。いつもどおり和歌や漢詩の引用があちこちにあって、朝原さんも解説しきれないぐらいの背景の脱線しまくりしながら進めていた。おもしろかった。
ホットクックに初挑戦 先週末に 部屋のレイアウト変更 してホットクックのための居場所を作った。その翌日の日曜日は出掛けてそのまま外食して、平日はなぜかいろいろ忙しくて、夜に用事があったり、寒くてスーパー行くのが億劫で冷凍食品で晩ご飯を済ませたりしているうちに1週間が過ぎてしまった。今日は満を持してスーパーへ出掛け、食材を購入してきた。最初は作り方や材料をよく知っていて慣れたものがよいだろうと思ってカレーにした。ホットクック は KN-HW24G を購入した。大き過ぎたかな？とも思ったけど、実際に作ってみたらスーパーで買ってきた食材を使い切って3食分ぐらいの作りおきにするにはちょうどよいサイズに思える。
牛すじカレーを作ってみた。約1時間。レシピはこんなところ。
牛すじ 400-500g 玉ねぎ x 2 にんじん x 1 さつまいも x 1 じゃがいも x 2 ミディアムトマト x 8 しめじ 水 100 cc 業務カレールウ 1箱 (業務スーパーで売っているPB) 私はどろどろカレー派なので水分の少ないこういうカレーは好みの方。牛すじも思ったより煮込めていてよい感じだった。従来の圧力鍋で作ったカレーと食べ比べしないとわからないぐらいには、いつも作っているカレーの水分少なめのカレーが出来上がった。普通においしかったと思う。食材を切って鍋に入れるところまでは圧力鍋と同じだが、カレールウまで最初から入れてしまうというのが従来の調理と大きく異なる。圧力鍋なら火を通した後に蓋を開けてからカレールウを入れてかきまぜるという調理が必要になる。さらにホットクックでは調理中にも食材をかきまぜるから 味がしみ込む という。圧力鍋とホットクックの大きな違いの1つとして「かきまぜ」を自動化したことで手間をなくして料理の質も上げたようにみえる。素材の栄養も逃げないからこれは素晴らしい。</description><content>&lt;p>2時過ぎに寝て6時半に起きた。晩ご飯食べてからちょっと自転車で走って運動してオフィスで軽く作業するつもりが、ブログ読んだりして結局意図した作業ができなかった。&lt;/p>
&lt;p>今日の筋トレは腹筋ローラー:5x1,スクワット:20x1,縄跳び(両足跳)30x3をした。腹筋ローラーは腹筋も使うけど、肩や腕の筋肉もパンパンになっている。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>筋トレを継続しているので軽い筋肉痛を引きずったままストレッチを受ける。トレーナーさんもストレッチしていて、体が硬めにみえるという話しはあるものの、筋肉痛をストレッチで伸ばすのは悪いことではないので問題ないという。昨日ルミナリエの案内に歩き回ったせいか足も腰もやや疲労していた。お尻の後ろのツボのようなところも普段平気なのに効いた気がする。トレーナーさんとネットで調べた情報をベースに筋トレの話しをしていて、毎日同じメニューをこなすよりも違うメニューをやった方が筋肉が回復する日を設けられて効果的らしい。ちょうどいま習慣化できてきたタイミングでいくつかメニューを増やそうとしているので1週間の筋トレのメニュー作りをしてもよいかもしれない。今日の開脚幅は開始前152cmで、ストレッチ後156cmだった。&lt;/p>
&lt;h2 id="縄跳びの跳び方">縄跳びの跳び方&lt;/h2>
&lt;p>筋トレのメニューの1つにしようと FEELCAT なわとびを購入してみた。&lt;/p>
&lt;p>&lt;a href="https://amzn.to/49e0QAl" target="_blank">&lt;img src="https://m.media-amazon.com/images/I/61dx3mllMrL._AC_SL1186_.jpg" width="240" />&lt;/a>&lt;/p>
&lt;p>今日届いたので長さを調節して早速オフィスの近所の駐車場へ行ってやってみた。縄跳びなんか学校の体育でやって以降やったことないんじゃないかとすら思えた。最初はどうやって跳ぶんだっけ？みたいなところから始めて、段々記憶が戻ってきてリズムよく跳べるようになった。長さ調節の説明書に初心者は少したるむ感じの長い方がよいと書いてあったから長めに調節していたものの、跳んでみると縄がたるんだ分の回転するリズムが自分の感覚と違って返って跳びにくかった。戻ってきてさらに短く適性な長さに調節した。ひとまず両足跳び30回を3セット跳んでみた。これだけで息が切れた。&lt;/p>
&lt;p>縄跳びの動画をみていて回数をこなすよりも跳び続ける秒数を測った方がよいようにみえる。これなら縄跳びが上達することで同じ時間でも回数が増えて負荷を上げていくのにちょうどよさそうに思える。まだ両足跳びも怪しいので慣れてきたら時間に移行していく。他のいろんな跳び方にも挑戦したい。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/OBjA8bCImS8" allowfullscreen title="なわとびトレーニング6種目3サイクル10分">&lt;/iframe>
&lt;/div>
&lt;ul>
&lt;li>&lt;a href="https://www3.nhk.or.jp/sports/story/8956/">短時間で効率的！全身を鍛える”縄跳び”トレーニング 完全版&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="能楽の勉強">能楽の勉強&lt;/h2>
&lt;p>4半期に1回ぐらいの「能のことばを読んでみる会」へ行ってきた。&lt;a href="/diary/diary/posts/2023/1021/#能楽の勉強">前回の所感はここ&lt;/a> 。久しぶりで最寄り駅は阪急芦屋川駅なのに、なぜか阪神だと勘違いしていて阪神芦屋駅に行ってしまい、そこから速歩きで20分かけて芦屋能楽堂に辿り着いた。1kmほど歩いた。そのせいで10分ほど遅刻した。よい運動にはなったけれど。&lt;/p>
&lt;p>今回のお題は「難波」という、世阿弥の祝言能だという。世阿弥が自筆した本物の文献は国の重要文化財としてお寺に保管されている。その文献をすべて写真に撮ったものを影印 (えいいん) と呼び &lt;a href="https://www.iwanami.co.jp/book/b265634.html">世阿弥自筆能本集&lt;/a> として販売されている。講師の朝原さんがその本を持ってこられてみせていただいた。おそらく難波の詞章もそこに書かれていたのだと思う。現代人は世阿弥の自筆をそのまま読めないが、びっしりとカタカナが書かれていた。発音どおりの表記をするために意図的に漢字やひらがなを使わずにカタカナで書いたと考えられている。この文献は世阿弥が自筆したことは間違いないが、書いてある内容がすべて世阿弥のオリジナルかどうかまではわかっていない。世阿弥が活躍したのは室町時代なので本は書き写すしかなかった。他人の創作物や文献を世阿弥が書き写した可能性もある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://nohgaku-kyodo.com/repertoire/yondemiru-naniwa20240127">《難波》 第37回能のことばを読んでみる会&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>朝原さんによると、現代に伝わっている難波の詞章の内容と、世阿弥が自筆した文献に書いてある内容はいくつか食い違っているという。その理由としていくつかの仮説が考察される。&lt;/p>
&lt;ul>
&lt;li>世阿弥が書いたものは編集中の草稿だったのではないか&lt;/li>
&lt;li>世阿弥が書いたものを現代まで伝わる過程で誰かが改変したのではないか&lt;/li>
&lt;li>実は難波が誰かの創作物で、世阿弥はそれを書き写したものの、それはオリジナルではなかったのではないか&lt;/li>
&lt;/ul>
&lt;p>難波の冒頭は次の言葉から始まる。&lt;/p>
&lt;blockquote>
&lt;p>山も霞みて浦の春。山も霞みて浦の春。波風静かなりけり&lt;/p>
&lt;/blockquote>
&lt;p>七・五・七・五・七・四と七五調になっている。この冒頭の音を聞くだけで、いまから始まる物語はきれいな美しい物語を展開するよという意図が込められているという。また「波風静か」とは能の中では世の中が平和ですよという意味をもっているという。&lt;/p>
&lt;blockquote>
&lt;p>やまもかすみて うらのはる やまもかすみて うらのはる なみかぜしずか なりけり&lt;/p>
&lt;/blockquote>
&lt;p>といった具合に、この1文だけで解説が10分といった、いつも通りの詳細な解説で進んでいく。&lt;/p>
&lt;p>難波は &lt;a href="https://ja.wikipedia.org/wiki/%E4%BB%81%E5%BE%B3%E5%A4%A9%E7%9A%87">仁徳天皇&lt;/a> の仁政を讃える内容となっている。所々、仁徳天皇の徳によってなにもしなくても平和で穏やかで人々は幸せに暮らしているみたいな表現が出てくる。現代人が習った仁徳天皇という呼び名は、奈良時代中期に中国を真似て漢字2文字で天皇の名前を表すようになって以降の話しだという。したがって奈良時代に成立した &lt;a href="https://ja.wikipedia.org/wiki/%E6%97%A5%E6%9C%AC%E6%9B%B8%E7%B4%80">日本書紀&lt;/a> では仁徳天皇という名前は出ておらず、仁徳天皇を表す大鷦鷯尊 (おおさざきのみこと) という日本式の名前が使われている。難波の中でもその名前で出てくる。こういった漢字2文字で天皇の名前を表す以前の日本式の天皇名前を &lt;a href="https://ja.wikipedia.org/wiki/%E8%AB%A1">和風諡号&lt;/a> と呼ぶらしい。&lt;/p>
&lt;blockquote>
&lt;p>咲くや木 (こ) の花 冬籠り&lt;/p>
&lt;/blockquote>
&lt;p>「木の花」は「こそあど」言葉の指示語としての「これ」の意図がある。わざわざ「木の花」とあるのは &lt;a href="https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%8E%E3%83%8F%E3%83%8A%E3%83%8E%E3%82%B5%E3%82%AF%E3%83%A4%E3%83%93%E3%83%A1">木花開耶姫 (このはなのさくやびめ)&lt;/a> と掛けているのだという。しかし、木花開耶姫は桜の女神 (または火山の女神？) として現代では伝わっている。難波の物語で出てくるのは梅についての問答なのに木花開耶姫が出てくるのはそもそもおかしいのだけど、当時は梅の女神でもあったのか？それともただ言葉を掛けただけなのか？といった複数の考察ができるという。&lt;/p>
&lt;p>難波の物語自体は仁徳天皇がいかに素晴らしくて、その治世によって世の中は平和で美しくて、様々な情景を浮かべるような表現がたくさん出てくる。もし能をみて幻視できる人であれば、暖かくて穏やかで華やかな景色をたくさん眺められるのだと思う。いつもどおり和歌や漢詩の引用があちこちにあって、朝原さんも解説しきれないぐらいの背景の脱線しまくりしながら進めていた。おもしろかった。&lt;/p>
&lt;h2 id="ホットクックに初挑戦">ホットクックに初挑戦&lt;/h2>
&lt;p>先週末に &lt;a href="/diary/diary/posts/2024/0120/#部屋のレイアウト変更">部屋のレイアウト変更&lt;/a> してホットクックのための居場所を作った。その翌日の日曜日は出掛けてそのまま外食して、平日はなぜかいろいろ忙しくて、夜に用事があったり、寒くてスーパー行くのが億劫で冷凍食品で晩ご飯を済ませたりしているうちに1週間が過ぎてしまった。今日は満を持してスーパーへ出掛け、食材を購入してきた。最初は作り方や材料をよく知っていて慣れたものがよいだろうと思ってカレーにした。&lt;a href="https://jp.sharp/hotcook/">ホットクック&lt;/a> は KN-HW24G を購入した。大き過ぎたかな？とも思ったけど、実際に作ってみたらスーパーで買ってきた食材を使い切って3食分ぐらいの作りおきにするにはちょうどよいサイズに思える。&lt;/p>
&lt;p>牛すじカレーを作ってみた。約1時間。レシピはこんなところ。&lt;/p>
&lt;ul>
&lt;li>牛すじ 400-500g&lt;/li>
&lt;li>玉ねぎ x 2&lt;/li>
&lt;li>にんじん x 1&lt;/li>
&lt;li>さつまいも x 1&lt;/li>
&lt;li>じゃがいも x 2&lt;/li>
&lt;li>ミディアムトマト x 8&lt;/li>
&lt;li>しめじ&lt;/li>
&lt;li>水 100 cc&lt;/li>
&lt;li>業務カレールウ 1箱 (業務スーパーで売っているPB)&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="/diary/diary/img/2024/0127_hotcook.jpg"/>
&lt;/figure>
&lt;p>私はどろどろカレー派なので水分の少ないこういうカレーは好みの方。牛すじも思ったより煮込めていてよい感じだった。従来の圧力鍋で作ったカレーと食べ比べしないとわからないぐらいには、いつも作っているカレーの水分少なめのカレーが出来上がった。普通においしかったと思う。食材を切って鍋に入れるところまでは圧力鍋と同じだが、カレールウまで最初から入れてしまうというのが従来の調理と大きく異なる。圧力鍋なら火を通した後に蓋を開けてからカレールウを入れてかきまぜるという調理が必要になる。さらにホットクックでは調理中にも食材をかきまぜるから &lt;a href="https://jp.sharp/hotcook/products/knhw24g/feature/cook/">味がしみ込む&lt;/a> という。圧力鍋とホットクックの大きな違いの1つとして「かきまぜ」を自動化したことで手間をなくして料理の質も上げたようにみえる。素材の栄養も逃げないからこれは素晴らしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kakedashiwanko.com/hotcook-use/">【ホットクックを使いこなす】365日使い倒した私が使い方を徹底解説&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>またホットクックは料理を作った後にそのまま保温ができる。今回作ったカレーをひとまず保温にしてみた。但し、この保温温度は75℃と細菌が繁殖しない設定になっているのでご飯の保温には向かないとのこと。保温と似て非なる機能が予約調理になる。予約調理は次の図のように、まず一旦火を通した上で適温をキープして最後の仕上げになる。夜に予約したら深夜のうちにできてしまって朝まで保温するような仕組みにみえる。夜にセットして朝食べるか、朝にセットして夜に食べるか、どちらのパターンもありそう。&lt;/p>
&lt;img src="https://jp.sharp/hotcook/products/knhw24g/feature/cook/images/sub08-1.jpg" width=480 />
&lt;p>理想的な1日だと6-7時頃に起きて8時過ぎにオフィスへ行って18-19時までお手伝い先のお仕事をして、一旦家に帰ってきて晩ご飯を食べて、またオフィスへ戻って21-24時ぐらいまで自分の会社のお仕事をする。晩ご飯が遅くなっても若い頃はなにも起きなかったが、いまは寝る前に晩ご飯を食べると最悪の状況では吐く。ここで21時頃に家でくつろいでいると、もう働きたくなくなってオフィスへ戻らないときもちょくちょくある。要はさぼってしまう。人間が弱い。&lt;/p>
&lt;p>オフィスには &lt;a href="/diary/diary/posts/2023/0725/#小さい冷蔵庫">冷蔵庫&lt;/a> もあるから、ホットクック用の食材セットを冷蔵庫に保管しておいて、オフィスにも小さいホットクックを置いといたらそのまま晩ご飯を食べられるのではないかと考え始めた。フロアには給湯室もあるからご飯を食べてからホットクックの鍋を洗うこともできるだろう。徒歩5分で家に帰れるのだから帰ったらよいと普通なら考えると思う。当初は私もそう考えた。オフィスにいたらいくらでも働けるのに、家に帰ったらもう働きたくないという誘惑に打ち克つのはなかなか厳しい。理想的ではない1日だと18-19時頃にお手伝い先のお仕事を終えて、そのまま22時頃まで自分の会社のお仕事をする。そうすると晩ご飯が23時をまわってしまい、そのまま寝たら気分が悪くて3時頃に食べたものを吐いて眠れないというのが最悪の状況になる。それも何度かやってもう慣れたけれど。&lt;/p>
&lt;p>閑話休題。調理に「かきまぜ」という進化をもたらしたことがこれほどすごいことだと理解できていなかった。ということでオフィス用に一番小さい KN-HW10G を購入してみた。また今度、家とオフィスのダブルホットクックの運用も考えてみる。&lt;/p></content></item><item><title>bizpy 再開</title><link>/diary/posts/2021/1027/</link><pubDate>Wed, 27 Oct 2021 08:10:21 +0900</pubDate><guid>/diary/posts/2021/1027/</guid><description>2時に寝て6時に起きた。前日の夜にウォーキングしたせいか、よく眠れた。朝活を終えてから朝ご飯を作って食べてそのままオフィスに出社した。6時起きを日課にした方が生活のリズムがよい。夕方に眠くなって1時間ほど昼寝した。
朝活: ミクロ経済学入門の入門 【三宮.dev オンライン】リモート朝活もくもく会 で第4章の供給曲線を読んだ。需要曲線の逆からの視点なので考え方は同じで図の形が異なる。用語がいくつか出てきたのでまとめる。
収穫逓減 (しゅうかくていげん): 製品をより多く生産するのにかかる経費が増大していくこと 生産活動において2倍の生産量を生み出すには2倍以上の経費がかかる 費用関数: 生産量と費用との関係をあらわす 限界費用: 追加的に1単位生産する費用 3個を生産する費用は、1個目の限界費用 + 2個目の限界費用 + 3個目の限界費用 個数が増えるごとに費用は高くなっていく 費用を図示するときは限界費用に分解した方が視覚的にわかりやすい 限界費用逓増: 生産するごとに限界費用が高まっていくこと 「逓」という漢字は「つぎつぎ」や「だんだん」という意味をもつ。
プライステイカー: 自分の生産量が価格に影響を与えられない 減産により希少価値を高め価格を吊り上げる市場操作ができない 独占企業: プライステイカーの反対。 利潤: 売上 - 経費 最適解: 利潤を最大化する生産量 あと1個追加して生産すると利益がマイナスになるところ 生産者余剰: すべての企業の利潤の和 供給曲線: すべての企業の限界費用をヨコに足し合わせた曲線 データ指向アプリケーションデザイン 昨日の続き。8.4 を読んで8章分散システムの問題を読み終えた。全体としても学びになったけれど、とくに 8.3 信頼性の低いクロックの節が全く開発・運用で意識したことがなかったので私にとっては学びになった。
分散システムにおいて発生する厄介な問題がある。
ネットワーク経由でパケットを送信しようとした場合、そのパケットはロストしたり、どれほど遅延するか分からない。同様に、レスポンスもロストしたり遅延したりするので、レスポンスを受け取れなかった場合には元々のメッセージが到達したかどうかも分からない
ノードのクロックは他のノードと大きくずれているかもしれない（できる限りの努力をして NTP をセットアップしたとしても）。クロックは急に進んだり戻ったりするかもしれず、たいていはクロックの誤差をうまく計る方法がないので、クロックに依存するのは危険
プロセスは処理中にいつどれほどの長さ一時停止するかもしれず（おそらくはstop-the-worldガベージコレクタのため）、他のノードから落ちていると見なされた後に自身に一時停止があったことを理解しないままに復活するかもしれない。
こういった 部分障害 が生じうるのが分散システムの特徴と言える。ソフトウェアが他のノードが関わる何かをしようとした場合、それは時おり失敗したり、ランダムに速度が落ちたり、まったくレスポンスが返されない（そして最終的にはタイムアウトする）といった可能性がある。分散システムでは、部分障害への耐性をソフトウェアに組み込み、システムの構成要素が一部破損していてもシステム全体としては機能し続けられるようにする。
フォールトに耐えるための最初のステップはフォールトを 検出 することだが、それさえも難しい。多くのシステムは、ノードに障害が生じていることを検出する正確な仕組みを持たないので、ほとんどの分散アルゴリズムはリモートノードが生きているかどうかを判断するのにタイムアウトに頼る。しかし、タイムアウトはネットワークの障害とノードの障害を区別できず、ネットワークの遅延変動のために間違ってノードがクラッシュしていると誤検知することもある。弱っているものの落ちてはいないノードは、きれいに落ちているノードよりもさらに扱いが難しくなる可能性がある。
フォールトが検出されたとして、システムがそれに耐えられるようにすることも簡単ではない。マシン間にはグローバルな変数も、共有メモリも、共通の情報やその他何らかの共有された状態もない。ノードは現在の時刻についてさえ合意できず、ましてやもっと重大なことに合意することなどできない。あるノードから他のノードへ情報を流せる唯一の方法は、その情報を信頼できないネットワークを通じて送ることだけである。重要な判断は単一のノードだけで安全に下すことができないので、他のノードの助けを得てクオラムが合意に至るようにするためのプロトコルが必要となる。
同じ操作をすれば決まって同じ結果を返してくれるような、単一コンピュータにおける理想化された数学的な完全さの中でソフトウェアを書くのに慣れていると、分散システムの雑然とした物理的な現実への移行はちょっとしたショックを伴う。一方、分散システムのエンジニアは、しばしば単一のコンピュータ上で解決できる問題を簡単なものだと見なすが、実際のところ今日では単一のコンピュータがこなせる仕事量はかなりのものになっている。単一のマシンでシンプルにことを済ませられるなら、概してそうする価値はある。
分散システムを利用する理由はスケーラビリティだけではない。耐障害性や低レイテンシ（地理的にユーザーの近くにデータを置けることによる）も同様に重要な目標であり、こういったことは単一ノードでは実現できない。本章ではネットワーク、クロック、プロセスの信頼性の低さが避けがたい自然の法則なのかも調べた。安全ではなく、クリティカルではないシステムの多くでは、高価な高信頼性よりも安価な低信頼性が選択される。また、信頼性の高いコンポーネントを前提としているスーパーコンピュータも取り上げました。スーパーコンピュータはその前提が故に、コンポーネントに障害が生じてしまった場合には完全に停止させて再起動することになる。これに対し、分散システムはサービスレベルでは中断することなくいつまでも動作し続けられる。これは、少なくとも理論上はすべてのフォールトやメンテナンスはノードレベルで処理できるためである。
お昼ご飯 気分でスーパー寄って買いものして家に帰り、お昼ご飯を作って食べた。前に適当に作った かぼちゃの煮物 がおいしかったので再挑戦してみた。今度は圧力鍋を使っていろいろ具材を入れてみた。過去に作っておいしかった料理のレシピを evernote に書いたりしていたけど、もういまは書いてないので気が向いたら日記に書くようにする。
材料
A 水 900cc めんつゆ 100c 醤油 適量 B かぼちゃ 1/4切れ なす 3個 にんじん 2本 玉ねぎ 1個 しめじ 1パック C 卵 2個 豆苗 せみ餃子 作り方</description><content>&lt;p>2時に寝て6時に起きた。前日の夜にウォーキングしたせいか、よく眠れた。朝活を終えてから朝ご飯を作って食べてそのままオフィスに出社した。6時起きを日課にした方が生活のリズムがよい。夕方に眠くなって1時間ほど昼寝した。&lt;/p>
&lt;h2 id="朝活-ミクロ経済学入門の入門">朝活: ミクロ経済学入門の入門&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/228969/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> で第4章の供給曲線を読んだ。需要曲線の逆からの視点なので考え方は同じで図の形が異なる。用語がいくつか出てきたのでまとめる。&lt;/p>
&lt;ul>
&lt;li>収穫逓減 (しゅうかくていげん): 製品をより多く生産するのにかかる経費が増大していくこと
&lt;ul>
&lt;li>生産活動において2倍の生産量を生み出すには2倍以上の経費がかかる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>費用関数: 生産量と費用との関係をあらわす&lt;/li>
&lt;li>限界費用: 追加的に1単位生産する費用
&lt;ul>
&lt;li>3個を生産する費用は、1個目の限界費用 + 2個目の限界費用 + 3個目の限界費用
&lt;ul>
&lt;li>個数が増えるごとに費用は高くなっていく&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>費用を図示するときは限界費用に分解した方が視覚的にわかりやすい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>限界費用逓増: 生産するごとに限界費用が高まっていくこと&lt;/li>
&lt;/ul>
&lt;p>「&lt;a href="https://dictionary.goo.ne.jp/word/kanji/%E9%80%93/">逓&lt;/a>」という漢字は「つぎつぎ」や「だんだん」という意味をもつ。&lt;/p>
&lt;ul>
&lt;li>プライステイカー: 自分の生産量が価格に影響を与えられない
&lt;ul>
&lt;li>減産により希少価値を高め価格を吊り上げる市場操作ができない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>独占企業: プライステイカーの反対。&lt;/li>
&lt;li>利潤: 売上 - 経費&lt;/li>
&lt;li>最適解: 利潤を最大化する生産量
&lt;ul>
&lt;li>あと1個追加して生産すると利益がマイナスになるところ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>生産者余剰: すべての企業の利潤の和&lt;/li>
&lt;li>供給曲線: すべての企業の限界費用をヨコに足し合わせた曲線&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="/diary/diary/img/2021/1027_supply-curve.png"/>
&lt;/figure>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>昨日の続き。8.4 を読んで8章分散システムの問題を読み終えた。全体としても学びになったけれど、とくに 8.3 信頼性の低いクロックの節が全く開発・運用で意識したことがなかったので私にとっては学びになった。&lt;/p>
&lt;blockquote>
&lt;p>分散システムにおいて発生する厄介な問題がある。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ネットワーク経由でパケットを送信しようとした場合、そのパケットはロストしたり、どれほど遅延するか分からない。同様に、レスポンスもロストしたり遅延したりするので、レスポンスを受け取れなかった場合には元々のメッセージが到達したかどうかも分からない&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ノードのクロックは他のノードと大きくずれているかもしれない（できる限りの努力をして NTP をセットアップしたとしても）。クロックは急に進んだり戻ったりするかもしれず、たいていはクロックの誤差をうまく計る方法がないので、クロックに依存するのは危険&lt;/p>
&lt;/li>
&lt;li>
&lt;p>プロセスは処理中にいつどれほどの長さ一時停止するかもしれず（おそらくはstop-the-worldガベージコレクタのため）、他のノードから落ちていると見なされた後に自身に一時停止があったことを理解しないままに復活するかもしれない。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>こういった &lt;strong>部分障害&lt;/strong> が生じうるのが分散システムの特徴と言える。ソフトウェアが他のノードが関わる何かをしようとした場合、それは時おり失敗したり、ランダムに速度が落ちたり、まったくレスポンスが返されない（そして最終的にはタイムアウトする）といった可能性がある。分散システムでは、部分障害への耐性をソフトウェアに組み込み、システムの構成要素が一部破損していてもシステム全体としては機能し続けられるようにする。&lt;/p>
&lt;p>フォールトに耐えるための最初のステップはフォールトを &lt;strong>検出&lt;/strong> することだが、それさえも難しい。多くのシステムは、ノードに障害が生じていることを検出する正確な仕組みを持たないので、ほとんどの分散アルゴリズムはリモートノードが生きているかどうかを判断するのにタイムアウトに頼る。しかし、タイムアウトはネットワークの障害とノードの障害を区別できず、ネットワークの遅延変動のために間違ってノードがクラッシュしていると誤検知することもある。弱っているものの落ちてはいないノードは、きれいに落ちているノードよりもさらに扱いが難しくなる可能性がある。&lt;/p>
&lt;p>フォールトが検出されたとして、システムがそれに耐えられるようにすることも簡単ではない。マシン間にはグローバルな変数も、共有メモリも、共通の情報やその他何らかの共有された状態もない。ノードは現在の時刻についてさえ合意できず、ましてやもっと重大なことに合意することなどできない。あるノードから他のノードへ情報を流せる唯一の方法は、その情報を信頼できないネットワークを通じて送ることだけである。重要な判断は単一のノードだけで安全に下すことができないので、他のノードの助けを得てクオラムが合意に至るようにするためのプロトコルが必要となる。&lt;/p>
&lt;p>同じ操作をすれば決まって同じ結果を返してくれるような、単一コンピュータにおける理想化された数学的な完全さの中でソフトウェアを書くのに慣れていると、分散システムの雑然とした物理的な現実への移行はちょっとしたショックを伴う。一方、分散システムのエンジニアは、しばしば単一のコンピュータ上で解決できる問題を簡単なものだと見なすが、実際のところ今日では単一のコンピュータがこなせる仕事量はかなりのものになっている。単一のマシンでシンプルにことを済ませられるなら、概してそうする価値はある。&lt;/p>
&lt;p>分散システムを利用する理由はスケーラビリティだけではない。耐障害性や低レイテンシ（地理的にユーザーの近くにデータを置けることによる）も同様に重要な目標であり、こういったことは単一ノードでは実現できない。本章ではネットワーク、クロック、プロセスの信頼性の低さが避けがたい自然の法則なのかも調べた。安全ではなく、クリティカルではないシステムの多くでは、高価な高信頼性よりも安価な低信頼性が選択される。また、信頼性の高いコンポーネントを前提としているスーパーコンピュータも取り上げました。スーパーコンピュータはその前提が故に、コンポーネントに障害が生じてしまった場合には完全に停止させて再起動することになる。これに対し、分散システムはサービスレベルでは中断することなくいつまでも動作し続けられる。これは、少なくとも理論上はすべてのフォールトやメンテナンスはノードレベルで処理できるためである。&lt;/p>
&lt;/blockquote>
&lt;h2 id="お昼ご飯">お昼ご飯&lt;/h2>
&lt;p>気分でスーパー寄って買いものして家に帰り、お昼ご飯を作って食べた。前に適当に作った &lt;a href="/diary/diary/posts/2021/1025/#お昼寝">かぼちゃの煮物&lt;/a> がおいしかったので再挑戦してみた。今度は圧力鍋を使っていろいろ具材を入れてみた。過去に作っておいしかった料理のレシピを evernote に書いたりしていたけど、もういまは書いてないので気が向いたら日記に書くようにする。&lt;/p>
&lt;p>材料&lt;/p>
&lt;ul>
&lt;li>A
&lt;ul>
&lt;li>水 900cc&lt;/li>
&lt;li>めんつゆ 100c&lt;/li>
&lt;li>醤油 適量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>B
&lt;ul>
&lt;li>かぼちゃ 1/4切れ&lt;/li>
&lt;li>なす 3個&lt;/li>
&lt;li>にんじん 2本&lt;/li>
&lt;li>玉ねぎ 1個&lt;/li>
&lt;li>しめじ 1パック&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>C
&lt;ul>
&lt;li>卵 2個&lt;/li>
&lt;li>豆苗&lt;/li>
&lt;li>せみ餃子&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>作り方&lt;/p>
&lt;ol>
&lt;li>圧力鍋に A を入れて火にかける&lt;/li>
&lt;li>B の野菜を切りながら圧力鍋に入れていく&lt;/li>
&lt;li>圧力鍋に B をすべて入れたら圧をかける (高圧30秒)&lt;/li>
&lt;li>圧が下がったら蓋をあけて C を入れる&lt;/li>
&lt;li>C に火が通るまで2分ほど煮込む&lt;/li>
&lt;/ol>
&lt;p>所感&lt;/p>
&lt;p>圧力が強過ぎたのか、かぼちゃが煮汁に溶け出してしまって原形がなくなってしまった。スープとして飲んでもおいしいけれども、水を入れ過ぎたのかもしれない。肉の代わりに餃子を使ってみた。水餃子っぽくなるので焼き餃子で油使うよりヘルシーな気持ちになっておいしい。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1027_pumpkin.jpg"/>
&lt;/figure>
&lt;h2 id="bizpy-勉強会">bizpy 勉強会&lt;/h2>
&lt;p>&lt;a href="https://bizpy.connpass.com/event/198717/">Python で Slack のインテグレーションをやってみる勉強会 #1&lt;/a> を開催した。半年以上開催してなかったので億劫になってしまっていたけど、再開できてよかった。10名ほどが参加してくれた。用意したコンテンツを話し終えたら8時半ぐらいで時間もちょうどよかった。初参加者も数人いた。slack インテグレーションの調査も兼ねてあと2-3回は集中的にやっていきたい。&lt;/p></content></item></channel></rss>