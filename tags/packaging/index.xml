<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>packaging on forest nook</title><link>/diary/tags/packaging/</link><description>Recent content in packaging on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Thu, 30 Mar 2023 07:58:30 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/packaging/index.xml" rel="self" type="application/rss+xml"/><item><title>コンテナレジストリをプライベートに運用する</title><link>/diary/posts/2023/0330/</link><pubDate>Thu, 30 Mar 2023 07:58:30 +0900</pubDate><guid>/diary/posts/2023/0330/</guid><description>0時に寝て7時に起きた。晩ご飯を食べきれなくて調子悪いと思っていたら夜も吐き気と胃酸で気分が悪くてあまり眠れなかった。
外部向けコンテナレジストリ いまお仕事で作っているアプリケーションは docker image としてパッケージングしている。エンドユーザーがこのアプリケーションを使うためには docker pull できるためにインターネットを経由してアクセスできる必要がある。普段はイントラネットのコンテナレジストリに push/pull して運用しているのを、外部のエンドユーザー向けにアクセスできるコンテナレジストリ (リポジトリ) を構築しないといけない。パブリックなリポジトリとして提供するのであれば、docker hub や GitHub Container registry などを無料で利用できる。しかし、プライベートなリポジトリで運用しようとするとその選択肢は狭まってしまう。おそらく他社のサービスを使うのであれば、実際の運用を考慮するといくらか費用がかかるだろう。
仮に docker image が使うストレージを5GiB、インターネットへの outbound なデータ転送を30GiB/月で見積もってみた。docker hub だと利用量によって課金されないのでその後に利用増加が前提であればよさそうにみえる。
github (従量課金)
team プラン 開発者1人: $20.25/month, $243/year aws (従量課金)
region=tokyo: $3.92/month, $47.04/year docker hub (容量無制限)
team プラン 開発者1人: $11/month, $132/year 別の選択肢として自前でコンテナレジストリを運用するという方法もある。docker registry サーバーは oss として公開されていて docker image の push/pull をするだけのサーバーならすぐに構築できる。ベーシック認証に近い v1 の認証でよければ htpasswd を使ってアカウント管理できる。
Deploy a registry server ドメインと tls の証明書と外部からアクセスできるサーバーがあれば、自前で運用するのもそう大変ではないと思う。実際にこれらの運用コストと他サービスの利用料金とを比べて選択することになるだろう。</description><content>&lt;p>0時に寝て7時に起きた。晩ご飯を食べきれなくて調子悪いと思っていたら夜も吐き気と胃酸で気分が悪くてあまり眠れなかった。&lt;/p>
&lt;h2 id="外部向けコンテナレジストリ">外部向けコンテナレジストリ&lt;/h2>
&lt;p>いまお仕事で作っているアプリケーションは docker image としてパッケージングしている。エンドユーザーがこのアプリケーションを使うためには docker pull できるためにインターネットを経由してアクセスできる必要がある。普段はイントラネットのコンテナレジストリに push/pull して運用しているのを、外部のエンドユーザー向けにアクセスできるコンテナレジストリ (リポジトリ) を構築しないといけない。パブリックなリポジトリとして提供するのであれば、&lt;a href="https://hub.docker.com/">docker hub&lt;/a> や &lt;a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry">GitHub Container registry&lt;/a> などを無料で利用できる。しかし、プライベートなリポジトリで運用しようとするとその選択肢は狭まってしまう。おそらく他社のサービスを使うのであれば、実際の運用を考慮するといくらか費用がかかるだろう。&lt;/p>
&lt;p>仮に docker image が使うストレージを5GiB、インターネットへの outbound なデータ転送を30GiB/月で見積もってみた。docker hub だと利用量によって課金されないのでその後に利用増加が前提であればよさそうにみえる。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>github (従量課金)&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/pricing">team プラン&lt;/a>&lt;/li>
&lt;li>開発者1人: $20.25/month, $243/year&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>aws (従量課金)&lt;/p>
&lt;ul>
&lt;li>region=tokyo: $3.92/month, $47.04/year&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>docker hub (容量無制限)&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.docker.com/pricing/">team プラン&lt;/a>&lt;/li>
&lt;li>開発者1人: $11/month, $132/year&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>別の選択肢として自前でコンテナレジストリを運用するという方法もある。docker registry サーバーは oss として公開されていて docker image の push/pull をするだけのサーバーならすぐに構築できる。ベーシック認証に近い v1 の認証でよければ &lt;a href="https://httpd.apache.org/docs/current/programs/htpasswd.html">htpasswd&lt;/a> を使ってアカウント管理できる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/registry/deploying/">Deploy a registry server&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ドメインと tls の証明書と外部からアクセスできるサーバーがあれば、自前で運用するのもそう大変ではないと思う。実際にこれらの運用コストと他サービスの利用料金とを比べて選択することになるだろう。&lt;/p></content></item><item><title>gitlab packages api の使い方</title><link>/diary/posts/2023/0329/</link><pubDate>Wed, 29 Mar 2023 07:32:25 +0900</pubDate><guid>/diary/posts/2023/0329/</guid><description>0時に寝て何度か起きて6時半に起きた。先週より少し早く起きれるようになってきた。
gitlab ci/cd で別プロジェクト (リポジトリ) の成果物を取得する gitlab では複数のパッケージリポジトリに対応しているが、それらに当てはまらない汎用の成果物向けに GitLab Generic Packages Repository というものがある。zip でもバイナリファイルでも何でも置くためのリポジトリと言える。但し、同じパッケージ名でバージョン管理するといった作りにはなっていなくて、同じパッケージ名でアップロードしても別のパッケージ id が割り当てられて管理される。他バージョンとの紐付け自体はできているので、おそらく歴史的経緯でそういう仕様なのだと思う。そのために、あるパッケージの最新のバージョンを取得したいときは作成日の降順でソートして最初のパッケージを取得するといったコードを書かないといけない。それは Packages API を駆使して簡単なスクリプトを書くことになる。
もう1つ分からないことにトークンの使い分けがある。なるべく ci/cd での処理は GitLab CI/CD job token を使いたいところだが、どうも Packages API の呼び出しはできなくて別途プロジェクトでアクセストークンを作成して呼び出すようにしている。これはもしかしたら別の設定で CI/CD job token でも呼び出しできるかもしれない。rest api への呼び出し権限そのものがないのかもしれない。
最終的には次のようなスクリプトで任意のプロジェクトの generic リポジトリの最新の成果物を取得できた。
rm -rf ${TARGET_DIR} mkdir -p ${TARGET_DIR} for project in $PROJECTS do prj=$(echo &amp;#34;$project&amp;#34; | jq -Rr @uri) base=&amp;#34;${CI_API_V4_URL}/projects/${prj}&amp;#34; pkg=$(curl -s -H &amp;#34;PRIVATE-TOKEN: $PROJECT_ACCESS_TOKEN&amp;#34; &amp;#34;${base}/packages?order_by=created_at&amp;amp;sort=desc&amp;amp;per_page=1&amp;#34; | jq &amp;#39;.[0]&amp;#39;) pkg_id=$(echo $pkg | jq -r .</description><content>&lt;p>0時に寝て何度か起きて6時半に起きた。先週より少し早く起きれるようになってきた。&lt;/p>
&lt;h2 id="gitlab-cicd-で別プロジェクト-リポジトリ-の成果物を取得する">gitlab ci/cd で別プロジェクト (リポジトリ) の成果物を取得する&lt;/h2>
&lt;p>gitlab では複数のパッケージリポジトリに対応しているが、それらに当てはまらない汎用の成果物向けに &lt;a href="https://docs.gitlab.com/ee/user/packages/generic_packages/">GitLab Generic Packages Repository&lt;/a> というものがある。zip でもバイナリファイルでも何でも置くためのリポジトリと言える。但し、同じパッケージ名でバージョン管理するといった作りにはなっていなくて、同じパッケージ名でアップロードしても別のパッケージ id が割り当てられて管理される。他バージョンとの紐付け自体はできているので、おそらく歴史的経緯でそういう仕様なのだと思う。そのために、あるパッケージの最新のバージョンを取得したいときは作成日の降順でソートして最初のパッケージを取得するといったコードを書かないといけない。それは &lt;a href="https://docs.gitlab.com/ee/api/packages.html">Packages API&lt;/a> を駆使して簡単なスクリプトを書くことになる。&lt;/p>
&lt;p>もう1つ分からないことにトークンの使い分けがある。なるべく ci/cd での処理は &lt;a href="https://docs.gitlab.com/ee/ci/jobs/ci_job_token.html">GitLab CI/CD job token&lt;/a> を使いたいところだが、どうも Packages API の呼び出しはできなくて別途プロジェクトでアクセストークンを作成して呼び出すようにしている。これはもしかしたら別の設定で CI/CD job token でも呼び出しできるかもしれない。rest api への呼び出し権限そのものがないのかもしれない。&lt;/p>
&lt;p>最終的には次のようなスクリプトで任意のプロジェクトの generic リポジトリの最新の成果物を取得できた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>rm -rf &lt;span style="color:#e6db74">${&lt;/span>TARGET_DIR&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p &lt;span style="color:#e6db74">${&lt;/span>TARGET_DIR&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> project in $PROJECTS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prj&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$project&lt;span style="color:#e6db74">&amp;#34;&lt;/span> | jq -Rr @uri&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> base&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>CI_API_V4_URL&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/projects/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>prj&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pkg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>curl -s -H &lt;span style="color:#e6db74">&amp;#34;PRIVATE-TOKEN: &lt;/span>$PROJECT_ACCESS_TOKEN&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>base&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/packages?order_by=created_at&amp;amp;sort=desc&amp;amp;per_page=1&amp;#34;&lt;/span> | jq &lt;span style="color:#e6db74">&amp;#39;.[0]&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pkg_id&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>echo $pkg | jq -r .id&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pkg_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>echo $pkg | jq -r .name&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pkg_version&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>echo $pkg | jq -r .version&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file_names&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>curl -s -H &lt;span style="color:#e6db74">&amp;#34;PRIVATE-TOKEN: &lt;/span>$PROJECT_ACCESS_TOKEN&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>base&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/packages/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>pkg_id&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/package_files&amp;#34;&lt;/span> | jq -r &lt;span style="color:#e6db74">&amp;#39;.[].file_name&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> file_name in $file_names
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dw_endpoint&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>base&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/packages/generic/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>pkg_name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>pkg_version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>file_name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curl -s -H &lt;span style="color:#e6db74">&amp;#34;PRIVATE-TOKEN: &lt;/span>$PROJECT_ACCESS_TOKEN&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>dw_endpoint&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -o &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>TARGET_DIR&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>file_name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>find &lt;span style="color:#e6db74">${&lt;/span>TARGET_DIR&lt;span style="color:#e6db74">}&lt;/span> -type f
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item></channel></rss>