<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Postgresql on</title><link>/diary/tags/postgresql/</link><description>Recent content in Postgresql on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 27 Oct 2022 08:49:12 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/postgresql/index.xml" rel="self" type="application/rss+xml"/><item><title>sql の group concat という組み込み関数</title><link>/diary/posts/2022/1027/</link><pubDate>Thu, 27 Oct 2022 08:49:12 +0900</pubDate><guid>/diary/posts/2022/1027/</guid><description>2時に寝て7時に起きた。昨日の hannali dao が盛り上がった影響で夜更ししてた。
本番リリース後の緊急対応 昨日あるバッチ処理の本番リリースを行った。そのバッチ処理は本番環境のデータがないとテスト環境ではあまり有効な検証ができない。昨日は別のバグがあって実行できていなかったのを今日直して再実行したらまた別のバグを発見した。sql である集合を取得するときのグルーピングの条件が適切ではなかった。postgresql で mysql でいうところの group_concat に相当することをやりたい。How to Use string_agg() のチュートリアルをちょっとカスタマイズして引用する。次のようなデータがあると仮定する。
&amp;gt; select * from teams ; team_name | team_member | num -------------+-------------+----- Barcelona | Messi | 1 Barcelona | Piquet | 2 Barcelona | (null) | 3 Real Madrid | Ronaldo | 1 Real Madrid | Benzema | 2 Real Madrid | Ramos | 3 (6 行) このときに team_name に対して team_member も集約して数値の合計を取りたいときがある。string_agg という組み込み関数を使うとできる。null があっても無視して数値の合計はしてくれる。</description><content>&lt;p>2時に寝て7時に起きた。昨日の hannali dao が盛り上がった影響で夜更ししてた。&lt;/p>
&lt;h2 id="本番リリース後の緊急対応">本番リリース後の緊急対応&lt;/h2>
&lt;p>昨日あるバッチ処理の本番リリースを行った。そのバッチ処理は本番環境のデータがないとテスト環境ではあまり有効な検証ができない。昨日は別のバグがあって実行できていなかったのを今日直して再実行したらまた別のバグを発見した。sql である集合を取得するときのグルーピングの条件が適切ではなかった。postgresql で &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_group-concat">mysql でいうところの group_concat&lt;/a> に相当することをやりたい。&lt;a href="https://bipp.io/sql-tutorial/postgresql/string_agg/">How to Use string_agg()&lt;/a> のチュートリアルをちょっとカスタマイズして引用する。次のようなデータがあると仮定する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> teams ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> team_name &lt;span style="color:#f92672">|&lt;/span> team_member &lt;span style="color:#f92672">|&lt;/span> num
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-------------+-------------+-----
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Barcelona &lt;span style="color:#f92672">|&lt;/span> Messi &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Barcelona &lt;span style="color:#f92672">|&lt;/span> Piquet &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Barcelona &lt;span style="color:#f92672">|&lt;/span> (&lt;span style="color:#66d9ef">null&lt;/span>) &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Real Madrid &lt;span style="color:#f92672">|&lt;/span> Ronaldo &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Real Madrid &lt;span style="color:#f92672">|&lt;/span> Benzema &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Real Madrid &lt;span style="color:#f92672">|&lt;/span> Ramos &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">行&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このときに team_name に対して team_member も集約して数値の合計を取りたいときがある。&lt;code>string_agg&lt;/code> という組み込み関数を使うとできる。null があっても無視して数値の合計はしてくれる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">select&lt;/span> team_name, string_agg(team_member, &lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>), &lt;span style="color:#66d9ef">sum&lt;/span>(num) &lt;span style="color:#66d9ef">from&lt;/span> teams &lt;span style="color:#66d9ef">group&lt;/span> &lt;span style="color:#66d9ef">by&lt;/span> team_name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> team_name &lt;span style="color:#f92672">|&lt;/span> string_agg &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">sum&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-------------+-----------------------+-----
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Real Madrid &lt;span style="color:#f92672">|&lt;/span> Ronaldo,Benzema,Ramos &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Barcelona &lt;span style="color:#f92672">|&lt;/span> Messi,Piquet &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">行&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="送別会">送別会&lt;/h2>
&lt;p>プロジェクトの区切りの打ち上げと、私が今週末で契約終了となるので送別会を兼ねて催してくれた。感謝。実はこれまでプロジェクトの打ち上げに私は参加してこなかった。それは複数の意図があった。オンライン飲み会だと人数が多いほど話しにくいし、若い人たちだけの方が年長者に配慮しなくてたくさん話せていいんじゃないかと考えていた。私のような老い先短いメンバーがチームに馴染んでなくても日々の業務に変わりはないし、業務で発言しにくいといったこともないし、他に山ほど仕事の積み上げがあって他のことに時間を使えるならそれに越したこともない。過去に2-3回打ち上げしていたと思うけど、私は今回が最初で最後の参加となった。&lt;/p>
&lt;p>都合のある人はばらばら抜けたりもしていたけど、9人ほどずっと参加していて20時から始めて23時過ぎまでやっていた。この人数だと、みんなが話せるというわけでもなくて、本当に2つのグループに分けて雑談した方がよかったのかもしれない。私は1-2割ぐらいの時間を話していたと思うけど、ほとんど聞いているだけで話さないメンバーも半分ぐらいはいたと思う。それは年長者がたくさん話せるように配慮して若い人たちが話しにくいというのは実際にあるのではないかなとも思えた。終わりの時間を決めておかないと延々話しが続いてしまう。チキンレースみたいになってしまって誰かが抜けると言わないと終わらない雰囲気になってしまった。それが23時過ぎで、ある人がそろそろ抜けますと宣言して「私も」「僕も」と続いて、じゃあお開きにしましょみたいなノリで解散となった。いろいろな話しができて楽しかった。&lt;/p></content></item><item><title>postgresql の json データ型</title><link>/diary/posts/2022/0926/</link><pubDate>Mon, 26 Sep 2022 08:01:22 +0900</pubDate><guid>/diary/posts/2022/0926/</guid><description>1時に寝て6時半に起きた。連休中に夜更ししてたから生活が乱れた。
ロガー向けのログ保存 API の開発 先週の休暇前にやっていた作業の開発に着手。一通り web api のエンドポイントの実装は終えてテストをあらかた書いたところ。いまのプロジェクトとしても、過去の私の経験としてもやったことのない新しい挑戦の1つとして postgresql の JSONデータ型 を使う。具体的には json 型と jsonb 型の2つがある。前者はテキストで保持する型で、後者は内部的にバイナリに変換されてインデックスも使える。バイナリに変換してインデックスを作る分、insert 時にテキストで保存するよりは少し余分なオーバーヘッドを要する。json のデータを参照用途で使うのか、検索するのかでこれらの型を使い分ければいいのかな。
実際の sql で json データの条件指定は次のようになる。@&amp;gt; というみたこともない気持ち悪い演算子を使う。
&amp;gt; select * from mytable where data @&amp;gt; &amp;#39;{&amp;#34;x&amp;#34;: 1, &amp;#34;y&amp;#34;: 2}&amp;#39;; java の jdbc で扱うには PGobject という型に変換して扱う必要がある。
private PGobject convertData(String value) throws SQLException { var data = new PGobject(); data.setType(&amp;#34;jsonb&amp;#34;); data.setValue(value); return data; } 余談だけど、curl で json 文字列を query string としてリクエストするには url encode しないといけない。
$ curl -s --get --data-urlencode &amp;#39;data={&amp;#34;x&amp;#34;: 1, &amp;#34;y&amp;#34;: 2}&amp;#39; http://localhost/path | jq .</description><content>&lt;p>1時に寝て6時半に起きた。連休中に夜更ししてたから生活が乱れた。&lt;/p>
&lt;h2 id="ロガー向けのログ保存-api-の開発">ロガー向けのログ保存 API の開発&lt;/h2>
&lt;p>先週の休暇前にやっていた作業の開発に着手。一通り web api のエンドポイントの実装は終えてテストをあらかた書いたところ。いまのプロジェクトとしても、過去の私の経験としてもやったことのない新しい挑戦の1つとして postgresql の &lt;a href="https://www.postgresql.jp/document/13/html/datatype-json.html">JSONデータ型&lt;/a> を使う。具体的には json 型と jsonb 型の2つがある。前者はテキストで保持する型で、後者は内部的にバイナリに変換されてインデックスも使える。バイナリに変換してインデックスを作る分、insert 時にテキストで保存するよりは少し余分なオーバーヘッドを要する。json のデータを参照用途で使うのか、検索するのかでこれらの型を使い分ければいいのかな。&lt;/p>
&lt;p>実際の sql で json データの条件指定は次のようになる。&lt;code>@&amp;gt;&lt;/code> というみたこともない気持ち悪い演算子を使う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> mytable &lt;span style="color:#66d9ef">where&lt;/span> &lt;span style="color:#66d9ef">data&lt;/span> &lt;span style="color:#f92672">@&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;x&amp;#34;: 1, &amp;#34;y&amp;#34;: 2}&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>java の jdbc で扱うには &lt;em>PGobject&lt;/em> という型に変換して扱う必要がある。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> PGobject &lt;span style="color:#a6e22e">convertData&lt;/span>(String value) &lt;span style="color:#66d9ef">throws&lt;/span> SQLException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> PGobject();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data.&lt;span style="color:#a6e22e">setType&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;jsonb&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data.&lt;span style="color:#a6e22e">setValue&lt;/span>(value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>余談だけど、curl で json 文字列を query string としてリクエストするには url encode しないといけない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ curl -s --get --data-urlencode &lt;span style="color:#e6db74">&amp;#39;data={&amp;#34;x&amp;#34;: 1, &amp;#34;y&amp;#34;: 2}&amp;#39;&lt;/span> http://localhost/path | jq .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item></channel></rss>