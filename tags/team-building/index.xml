<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>team building on forest nook</title><link>/diary/tags/team-building/</link><description>Recent content in team building on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Tue, 21 Feb 2023 08:31:13 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/team-building/index.xml" rel="self" type="application/rss+xml"/><item><title>気付きスキルをあげるための指導とか</title><link>/diary/posts/2023/0221/</link><pubDate>Tue, 21 Feb 2023 08:31:13 +0900</pubDate><guid>/diary/posts/2023/0221/</guid><description>1時に寝て7時に起きた。すでに疲労困憊の様相。
仕様は誰が決めるのか たまたま定例会議である仕様について話題になった。この作業はなぜ止まっているのだっけ？と確認したら、とくに理由なく、決めの問題を誰が決めるのかでお見合いしてしまっていたような状況であることがわかった。担当の開発者は新人さんなのでスキルや経験が未熟だったりするのはよいとして、仕様を決めていくときの作業の段取りをどうやって学んでもらえばよいかについて、私が考えるよいきっかけとなった。誤解のないように書いておくと、仕様確認できずに作業が止まっていたのはマネージャーである私の責任なので担当者に非はない。
開発の仕様を決めることは難しい。要件であればお客さんに確認しなければいけないこともあるし、背景を調査したり一定の技術知識がないと決められない仕様もある。誰もが最初は上司や先輩に仕様を教えてもらいながら開発経験を積み、自分で仕様を考えたりできるようになっていく。仕様を誰かから与えられるのを待っている ==&amp;gt; 自分が決められる仕様は自律的に決めて作業を先に進めていくの間にある、なにか気付きを与えないといけないと実感した。
この話題でこみやさんと話してみた。
「自分が決めていいこと」の中にはこのあたりが含まれていると思う。
ある程度正しい判断ができること 判断に自信がない場合に相談ができること 判断に自信を持てること (先に進める胆力があること) 自ら枷をはめる人は結構いるとは思っていて、明示的にやっていいことを伝えてチャレンジする雰囲気を作りたいのは同意です。ということで、判断できないというのは
担当範囲かどうかわからない (自分で決めてよいかわからない) 対応が適当であるかわからない (自信がない) あたりに二分されるのでは、と集約されるのかも。
後者のレベルの人に対しては相談してくれ、ブロッカーを排除するのを手伝うから、とホウレンソウを覚えてもらう感じかなあ、というのが最初のコメント。仕様を決める能力がなくても、聞きに行く能力は持っていてほしい、という感じ。困ったら騒いでほしい、というのが僕が求める最初のステップですね。
スプリントを完了させるのがミッションなので、それができないとチーム全員不合格だよ。このまま待ってていいの? 仕様はどうやったら決まるの? って伝えそうだな、僕なら。
いくつかキーワードがあるように思える。
自信 ホウレンソウ 納期の認識 「とりあえずやってみて」とか「まずは自分で考えて」が、今の若者に響かない理由。 の記事によると、いまの若い人は答えを知った後に試行錯誤したり、その後の応用で差をつける文化があるといったことが書いてある。その賛否はともかく、他のマネジメントのイベントでもいまの若い人たちは非効率なことや無駄なことをやりたがらないという話しを聞いたことがある。
まず私が教えないといけないことは、開発や設計において答えなんてないという真理だと思う。確かに経験のある開発者が行う設計は答えのようにみえるかもしれないが、設計は要件の変化によって大きく影響を受ける。いわば時間制限付き論理最適解のようなものだ。またドメイン知識の有無によっても変わってくる。設計とは、そのときに1回判断したら終わりではなく、ずっと考え続ける行為である。試行錯誤することは無駄なことではなく、よい設計を行うための最短の方法であることを教えないといけない。
自信をつけてもらうにはどうすればいいだろうか？これは成功体験を積み重ねるしかないと思うが、成功体験がない初期はどうすればよいのだろうか？パッと思いつくのは心理的安全なチームを作って、ここで失敗しても自分の過失やストレスにならないとメンバーが感じられて挑戦する雰囲気を作ることに思える。このこともそれを体現するのはリーダーの役割なので私がうまくその雰囲気を作れていないと言えるだろう。
ホウレンソウは課題管理を推奨する私にとっては得意分野なのでここでは割愛する。今回の一件もホウレンソウができていないわけではない。課題管理システム上に仕様を決めなければいけないことをコメントに書かれていてそのことに私も気付いてはいた。作業が止まっていることに気付いていなかっただけ。
最後の納期についてはどうだろうか。いまのところ、意図的に私は納期についてほぼチームに言及していない。それはメンバーの1人は十分に理解して自律的に動いてくれているので言う必要がないのもある。新人さんは納期に間に合わせるよりも適切な仕事のやり方や考え方を学んでほしいと私は考えている。納期を意識して不十分な品質の成果を出すよりも時間がかかっても一定の品質の成果を出せるように指導していきたいという私の考えから言及していないので、これも私の非であることは疑いようがない。
1つずつみていくと課題があるのはマネージャーのマネジメントにみえる。なかなか難しい。過去にタイムラインでつぶやいたことを思い出した。
必要な情報は他者から与えられるということを前提にしている人とそうじゃない人との働き方は「気付き」スキルが大きく異なる。後者の人は気付いたら自分から情報を集めるので「そんなこと聞いてない」ではなく「それは (自分も) 気付かなかった」と内省して自身の「気付き」スキルを鍛える。 https://t.co/7VQMzNHyTG
&amp;mdash; Tetsuya Morimoto (@t2y) January 6, 2022</description><content>&lt;p>1時に寝て7時に起きた。すでに疲労困憊の様相。&lt;/p>
&lt;h2 id="仕様は誰が決めるのか">仕様は誰が決めるのか&lt;/h2>
&lt;p>たまたま定例会議である仕様について話題になった。この作業はなぜ止まっているのだっけ？と確認したら、とくに理由なく、決めの問題を誰が決めるのかでお見合いしてしまっていたような状況であることがわかった。担当の開発者は新人さんなのでスキルや経験が未熟だったりするのはよいとして、仕様を決めていくときの作業の段取りをどうやって学んでもらえばよいかについて、私が考えるよいきっかけとなった。誤解のないように書いておくと、仕様確認できずに作業が止まっていたのはマネージャーである私の責任なので担当者に非はない。&lt;/p>
&lt;p>開発の仕様を決めることは難しい。要件であればお客さんに確認しなければいけないこともあるし、背景を調査したり一定の技術知識がないと決められない仕様もある。誰もが最初は上司や先輩に仕様を教えてもらいながら開発経験を積み、自分で仕様を考えたりできるようになっていく。仕様を誰かから与えられるのを待っている ==&amp;gt; 自分が決められる仕様は自律的に決めて作業を先に進めていくの間にある、なにか気付きを与えないといけないと実感した。&lt;/p>
&lt;p>この話題でこみやさんと話してみた。&lt;/p>
&lt;blockquote>
&lt;p>「自分が決めていいこと」の中にはこのあたりが含まれていると思う。&lt;/p>
&lt;ul>
&lt;li>ある程度正しい判断ができること&lt;/li>
&lt;li>判断に自信がない場合に相談ができること&lt;/li>
&lt;li>判断に自信を持てること (先に進める胆力があること)&lt;/li>
&lt;/ul>
&lt;p>自ら枷をはめる人は結構いるとは思っていて、明示的にやっていいことを伝えてチャレンジする雰囲気を作りたいのは同意です。ということで、判断できないというのは&lt;/p>
&lt;ul>
&lt;li>担当範囲かどうかわからない (自分で決めてよいかわからない)&lt;/li>
&lt;li>対応が適当であるかわからない (自信がない)&lt;/li>
&lt;/ul>
&lt;p>あたりに二分されるのでは、と集約されるのかも。&lt;/p>
&lt;p>後者のレベルの人に対しては相談してくれ、ブロッカーを排除するのを手伝うから、とホウレンソウを覚えてもらう感じかなあ、というのが最初のコメント。仕様を決める能力がなくても、聞きに行く能力は持っていてほしい、という感じ。困ったら騒いでほしい、というのが僕が求める最初のステップですね。&lt;/p>
&lt;p>スプリントを完了させるのがミッションなので、それができないとチーム全員不合格だよ。このまま待ってていいの? 仕様はどうやったら決まるの? って伝えそうだな、僕なら。&lt;/p>
&lt;/blockquote>
&lt;p>いくつかキーワードがあるように思える。&lt;/p>
&lt;ul>
&lt;li>自信&lt;/li>
&lt;li>ホウレンソウ&lt;/li>
&lt;li>納期の認識&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://blog.tinect.jp/?p=77189">「とりあえずやってみて」とか「まずは自分で考えて」が、今の若者に響かない理由。&lt;/a> の記事によると、いまの若い人は答えを知った後に試行錯誤したり、その後の応用で差をつける文化があるといったことが書いてある。その賛否はともかく、他のマネジメントのイベントでもいまの若い人たちは非効率なことや無駄なことをやりたがらないという話しを聞いたことがある。&lt;/p>
&lt;p>まず私が教えないといけないことは、開発や設計において答えなんてないという真理だと思う。確かに経験のある開発者が行う設計は答えのようにみえるかもしれないが、設計は要件の変化によって大きく影響を受ける。いわば時間制限付き論理最適解のようなものだ。またドメイン知識の有無によっても変わってくる。設計とは、そのときに1回判断したら終わりではなく、ずっと考え続ける行為である。試行錯誤することは無駄なことではなく、よい設計を行うための最短の方法であることを教えないといけない。&lt;/p>
&lt;p>自信をつけてもらうにはどうすればいいだろうか？これは成功体験を積み重ねるしかないと思うが、成功体験がない初期はどうすればよいのだろうか？パッと思いつくのは心理的安全なチームを作って、ここで失敗しても自分の過失やストレスにならないとメンバーが感じられて挑戦する雰囲気を作ることに思える。このこともそれを体現するのはリーダーの役割なので私がうまくその雰囲気を作れていないと言えるだろう。&lt;/p>
&lt;p>ホウレンソウは課題管理を推奨する私にとっては得意分野なのでここでは割愛する。今回の一件もホウレンソウができていないわけではない。課題管理システム上に仕様を決めなければいけないことをコメントに書かれていてそのことに私も気付いてはいた。作業が止まっていることに気付いていなかっただけ。&lt;/p>
&lt;p>最後の納期についてはどうだろうか。いまのところ、意図的に私は納期についてほぼチームに言及していない。それはメンバーの1人は十分に理解して自律的に動いてくれているので言う必要がないのもある。新人さんは納期に間に合わせるよりも適切な仕事のやり方や考え方を学んでほしいと私は考えている。納期を意識して不十分な品質の成果を出すよりも時間がかかっても一定の品質の成果を出せるように指導していきたいという私の考えから言及していないので、これも私の非であることは疑いようがない。&lt;/p>
&lt;p>1つずつみていくと課題があるのはマネージャーのマネジメントにみえる。なかなか難しい。過去にタイムラインでつぶやいたことを思い出した。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">必要な情報は他者から与えられるということを前提にしている人とそうじゃない人との働き方は「気付き」スキルが大きく異なる。後者の人は気付いたら自分から情報を集めるので「そんなこと聞いてない」ではなく「それは (自分も) 気付かなかった」と内省して自身の「気付き」スキルを鍛える。 &lt;a href="https://t.co/7VQMzNHyTG">https://t.co/7VQMzNHyTG&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1478947906850004994?ref_src=twsrc%5Etfw">January 6, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item><item><title>余裕がなさ過ぎる</title><link>/diary/posts/2023/0217/</link><pubDate>Fri, 17 Feb 2023 09:12:06 +0900</pubDate><guid>/diary/posts/2023/0217/</guid><description>1時に寝て7時に起きた。タスクが溜まり過ぎてそろそろ辛くなってきているところ。この余裕の無さはよくないことなので、自分のダメさ加減というか、大いに反省しないといけない。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。いつもは打ち合わせの議題を2-3日前には共有するようにしている。だいたい水曜日前後に議題のリファレンスをはらさんに共有して金曜日の朝に話している。しかし、今週はリファクタリングに集中し過ぎていて前日の寝る前になって議題を共有していないことに気付いた。そして朝起きてから急ぎで議題を考えて共有していた。これはとてもよくない。準備ができていないので今日の議題は主に近況の話しをしていた。
プロジェクトマネジメントの話し データ指向アプリケーションデザインのイベントの所感 Gopher塾イベントの所感 ハドルの雑談 先日から 午前中はハドルに滞在 するようにしている。今週は木曜日にチーム外から勉強会についての相談が、今日はメンバーから気分転換に雑談にやってきてくれた。おそらく私がハドルにいなかったらゼロだったコミュニケーションの機会が、1週間に1-2回でもあることに私は嬉しく思ってしまう。フルリモートワークにおける、オフラインのような気軽な雑談の機会を提供する施策の1つとして意味なくハドルに入るのは悪くない気がしている。そのときにコミュニケーションを強制させるような押し付けが発生しないよう、運用ルールを徹底することが大事に思える。いまは相手がハドルに入ってくると 1on1 のような雰囲気になってしまうのでその次の挑戦としてはハドルに入っていても話さなくてよいといった運用ルールを設ければよいのではないかと思う。例えば、午前中はとりあえずハドルに入って気分が向いたときだけ話しかけるみたいな、ゆるいコミュニケーションの場になればいいなと思う。
ハドル雑談の運用ルールのアイディア
ハドルに入らなくても業務上の支障は一切おきない ハドルにいる人には、用事があってもなくても、話しかけてよい ハドルに入っていても話さず聞いているだけでもよい 業務に集中していて忙しいときは話しかけられても後回しにしてもよい (ハドルから退出した方がわかりやすいかもしれない) go の generics 勉強会 ちょうど先週からあちこち直したり、mongodb のクライアント周りをリファクタリングしたりしている。その過程で generics を使ってコードの共通化もしたりしている。私自身 generics で意図した通りにコンパイルできなくてはまってしまった事例もあるのでそういった失敗コードも共有した。go の generics はコードに対して静的な領域しか適用されず、コード中における動的な値の型は generics とは直行した概念だというところに初学者ははまるのではないかと思う。私がはまった。参加者におそらく1度はまるからはまったときに私が話していたことを思い出してとコードの解説をしていた。
今日は type constraint でできることと動的な値との関係を混同して generics でできないことを一生懸命やろうとしてた。interface に変換して型パラメーターに type assertion すればコンパイルは通る。2時間ほどはまってた。。。https://t.co/vmk6CfVTl8
&amp;mdash; Tetsuya Morimoto (@t2y) February 16, 2023 余裕があったらスライドにまとめて後で資料として再利用できるようにしたかったものの、私の作業に余裕がなさ過ぎて次のリファレンスから引用しながら解説するといった勉強会になった。ただ私が読んでよいと思った他者のスライドやブログの記事のみを紹介している。それはそれで参考にはなるので勉強会の意図としては問題なかったんじゃないかとは思う。
The Generic Dilemma Tutorial: Getting started with generics Go 1.18集中連載 ジェネリクス Go1.18最新情報 Understanding generics in Go 1.18 golang 1.18+ generics: The Good, The Bad, The Ugly.</description><content>&lt;p>1時に寝て7時に起きた。タスクが溜まり過ぎてそろそろ辛くなってきているところ。この余裕の無さはよくないことなので、自分のダメさ加減というか、大いに反省しないといけない。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。いつもは打ち合わせの議題を2-3日前には共有するようにしている。だいたい水曜日前後に議題のリファレンスをはらさんに共有して金曜日の朝に話している。しかし、今週はリファクタリングに集中し過ぎていて前日の寝る前になって議題を共有していないことに気付いた。そして朝起きてから急ぎで議題を考えて共有していた。これはとてもよくない。準備ができていないので今日の議題は主に近況の話しをしていた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="/diary/diary/posts/2023/0209/#プロジェクトの進捗報告">プロジェクトマネジメントの話し&lt;/a>&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2023/0215/#データ指向アプリケーションデザインの紹介イベント">データ指向アプリケーションデザインのイベントの所感&lt;/a>&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2023/0204/">Gopher塾イベントの所感&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="ハドルの雑談">ハドルの雑談&lt;/h2>
&lt;p>先日から &lt;a href="/diary/diary/posts/2023/0202/">午前中はハドルに滞在&lt;/a> するようにしている。今週は木曜日にチーム外から勉強会についての相談が、今日はメンバーから気分転換に雑談にやってきてくれた。おそらく私がハドルにいなかったらゼロだったコミュニケーションの機会が、1週間に1-2回でもあることに私は嬉しく思ってしまう。フルリモートワークにおける、オフラインのような気軽な雑談の機会を提供する施策の1つとして意味なくハドルに入るのは悪くない気がしている。そのときにコミュニケーションを強制させるような押し付けが発生しないよう、運用ルールを徹底することが大事に思える。いまは相手がハドルに入ってくると 1on1 のような雰囲気になってしまうのでその次の挑戦としてはハドルに入っていても話さなくてよいといった運用ルールを設ければよいのではないかと思う。例えば、午前中はとりあえずハドルに入って気分が向いたときだけ話しかけるみたいな、ゆるいコミュニケーションの場になればいいなと思う。&lt;/p>
&lt;p>ハドル雑談の運用ルールのアイディア&lt;/p>
&lt;ul>
&lt;li>ハドルに入らなくても業務上の支障は一切おきない&lt;/li>
&lt;li>ハドルにいる人には、用事があってもなくても、話しかけてよい&lt;/li>
&lt;li>ハドルに入っていても話さず聞いているだけでもよい&lt;/li>
&lt;li>業務に集中していて忙しいときは話しかけられても後回しにしてもよい (ハドルから退出した方がわかりやすいかもしれない)&lt;/li>
&lt;/ul>
&lt;h2 id="go-の-generics-勉強会">go の generics 勉強会&lt;/h2>
&lt;p>ちょうど先週からあちこち直したり、mongodb のクライアント周りをリファクタリングしたりしている。その過程で generics を使ってコードの共通化もしたりしている。私自身 generics で意図した通りにコンパイルできなくてはまってしまった事例もあるのでそういった失敗コードも共有した。go の generics はコードに対して静的な領域しか適用されず、コード中における動的な値の型は generics とは直行した概念だというところに初学者ははまるのではないかと思う。私がはまった。参加者におそらく1度はまるからはまったときに私が話していたことを思い出してとコードの解説をしていた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">今日は type constraint でできることと動的な値との関係を混同して generics でできないことを一生懸命やろうとしてた。interface に変換して型パラメーターに type assertion すればコンパイルは通る。2時間ほどはまってた。。。&lt;a href="https://t.co/vmk6CfVTl8">https://t.co/vmk6CfVTl8&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1626177820362940421?ref_src=twsrc%5Etfw">February 16, 2023&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>余裕があったらスライドにまとめて後で資料として再利用できるようにしたかったものの、私の作業に余裕がなさ過ぎて次のリファレンスから引用しながら解説するといった勉強会になった。ただ私が読んでよいと思った他者のスライドやブログの記事のみを紹介している。それはそれで参考にはなるので勉強会の意図としては問題なかったんじゃないかとは思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://research.swtch.com/generic">The Generic Dilemma&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://go.dev/doc/tutorial/generics">Tutorial: Getting started with generics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://future-architect.github.io/articles/20220209a/">Go 1.18集中連載 ジェネリクス&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.google.com/presentation/d/1Dj7Rs5K1HkVogbX9vuxcja-uJ5tIqxkFwPG-W31vP0E/edit#slide=id.p">Go1.18最新情報&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.logrocket.com/understanding-generics-go-1-18/">Understanding generics in Go 1.18&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://itnext.io/golang-1-18-generics-the-good-the-bad-the-ugly-5e9fa2520e76">golang 1.18+ generics: The Good, The Bad, The Ugly.&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>リリースの前倒し</title><link>/diary/posts/2023/0209/</link><pubDate>Thu, 09 Feb 2023 08:10:53 +0900</pubDate><guid>/diary/posts/2023/0209/</guid><description>23時に寝て何度か起きて5時半に起きた。
プロジェクトの進捗報告 出張したときの月例報告の3回目。前回の進捗報告はこちら 。1月はバックエンド開発を完了させてフロントエンド開発に着手した。 当初は6ヶ月の開発期間を設けていたものの、1ヶ月前倒しの5ヶ月でフェーズ1の開発を完了させる見通しを報告した。管理画面も機能的にはすでに一通り実装できている。これから2月は使いやすさの ui を改善していくところや品質をあげるためのリファクタリングを行い、3月は運用レベルのテストをしてバグ修正を行う。ソースコードの品質も私がチェックしているので、どういう修正が必要かも予測できていて、十分に余裕のあるスケジュールだと私は考えている。油断も慢心もなく、いまできるだけの知識とスキルをつぎ込んで品質の高いプロダクトに仕上げるのに努める。
先月に宣言した通り、フェーズ1の開発はもう私の中では終わっていて次のフェーズ2への準備や計画をこれから考えていく。業務的に区切りがよいのでフェーズ1で契約終了する可能性もあったけれど、4月以降も開発のマネジメントをしてほしいとのこと。フェーズ1の開発と並行して、余裕をみてフェーズ2以降の計画も立てていく。フェーズ2以降に予定している、少なくともあと2つの機能開発に私は責任をもとうと契約の有無に関係なくもともと考えていた。それらを実装すれば大半のお客さんのニーズにあうプロダクトになるはずなのでそれ以降の開発は引き継いでいいかなと思う。言うても野心的に言えば3ヶ月強といったところか。チームも成長しているので3ヶ月前よりは開発速度が上がっている。
さらにいま私が担当しているプロジェクトとは別に、他にもやってほしいお仕事があるらしい。もしかしたらそれも含めて来季の半期以上のお手伝いになるのかもしれない。しばらく次のお仕事探しはしなくてよい状況にある。3月のリリースを終えたら会社の事例紹介を書きたい。今回は会社として初めてのプロジェクトマネジメントの実績になる。周りにも喧伝していきたい。
出張晩ご飯 たまたま1月末に課題管理についてチャットで議論していたら盛り上がったのでこみやさんと晩ご飯に行ってきた。ざっくばらんに近況やチームのマネジメントについて話してきて楽しかった。19時半過ぎから始めて23時過ぎまで飲んでた。帰路の途中で新宿駅構内で人身事故が発生して、電車が止まってしまい、復旧に1時間ぐらいかかるというのでタクシーで帰った。タクシー料金も region pay で「ただいま東京プラス」のクーポンが使えたので金銭的に損はしなかった。
こみやさんのチームの話しからは、対話重視のスクラムのイベントが si におけるメンバーの教育にもうまくいっているように聞こえた。メンバー間で質問し合うのを促していて、質問者と回答者の双方の理解度をあげることを狙いとしている。質問が現状をふりかえるよいきっかけになっているとのこと。
あとメンバーに自律的に勉強会をしてもらうにはどうしたらいいかという話題も盛り上がった。私もいま毎週勉強会をやっていて、これはよい開発文化を作る上で大事だと思っているものの、いずれメンバーが自律的にやるようになってほしい。いまは私がお手本をみせるという意図もあって勉強会の運営をやっているのだけど、それをどうやってメンバーもできるように巻き込んでいくかを考えている。こみやさんや私が勉強会をやると、一定の水準で運営してしまうから、それがメンバーにとって逆に気後れさせてしまわないかという視点も話したりしていた。勉強会は準備に工数がかかると発表者が大変になって続かなくなるので、毎週やろうと思ったら準備に工数をかけないという仕掛けは重要になる。もしくは情報共有やコミュニケーションの場としての勉強会を考えるならもっと身近な内容を話す場になってもよいのでは？という考え方もある。例えば、最近の時事ネタで関心をもったニュースや技術などを取り上げて雑談するのでもかまわない。
いずれにしても、うちらがやれと指示してしまうと、業務命令として業務だからやっているだけになってしまい、よい開発文化を作るという、結果的に業務に大きな価値をもたらすなにかとは違うものになってしまうのがこの問題の難しいところ。開発をよりよくしたい。技術を深めたい。品質をあげたい。なにかしら開発そのものに対して関心をもって自律的にそういう活動をする開発者を増やしていく。言葉にすればたったこれだけのこと。しかし、このことを教えるのは相当に難しい。まだ私がマネージャーとして働く時間はあるのでこれからも挑戦していきたい。</description><content>&lt;p>23時に寝て何度か起きて5時半に起きた。&lt;/p>
&lt;h2 id="プロジェクトの進捗報告">プロジェクトの進捗報告&lt;/h2>
&lt;p>出張したときの月例報告の3回目。&lt;a href="/diary/diary/posts/2023/0112/">前回の進捗報告はこちら&lt;/a> 。1月はバックエンド開発を完了させてフロントエンド開発に着手した。
当初は6ヶ月の開発期間を設けていたものの、1ヶ月前倒しの5ヶ月でフェーズ1の開発を完了させる見通しを報告した。管理画面も機能的にはすでに一通り実装できている。これから2月は使いやすさの ui を改善していくところや品質をあげるためのリファクタリングを行い、3月は運用レベルのテストをしてバグ修正を行う。ソースコードの品質も私がチェックしているので、どういう修正が必要かも予測できていて、十分に余裕のあるスケジュールだと私は考えている。油断も慢心もなく、いまできるだけの知識とスキルをつぎ込んで品質の高いプロダクトに仕上げるのに努める。&lt;/p>
&lt;p>先月に宣言した通り、フェーズ1の開発はもう私の中では終わっていて次のフェーズ2への準備や計画をこれから考えていく。業務的に区切りがよいのでフェーズ1で契約終了する可能性もあったけれど、4月以降も開発のマネジメントをしてほしいとのこと。フェーズ1の開発と並行して、余裕をみてフェーズ2以降の計画も立てていく。フェーズ2以降に予定している、少なくともあと2つの機能開発に私は責任をもとうと契約の有無に関係なくもともと考えていた。それらを実装すれば大半のお客さんのニーズにあうプロダクトになるはずなのでそれ以降の開発は引き継いでいいかなと思う。言うても野心的に言えば3ヶ月強といったところか。チームも成長しているので3ヶ月前よりは開発速度が上がっている。&lt;/p>
&lt;p>さらにいま私が担当しているプロジェクトとは別に、他にもやってほしいお仕事があるらしい。もしかしたらそれも含めて来季の半期以上のお手伝いになるのかもしれない。しばらく次のお仕事探しはしなくてよい状況にある。3月のリリースを終えたら会社の事例紹介を書きたい。今回は会社として初めてのプロジェクトマネジメントの実績になる。周りにも喧伝していきたい。&lt;/p>
&lt;h2 id="出張晩ご飯">出張晩ご飯&lt;/h2>
&lt;p>たまたま1月末に課題管理についてチャットで議論していたら盛り上がったのでこみやさんと晩ご飯に行ってきた。ざっくばらんに近況やチームのマネジメントについて話してきて楽しかった。19時半過ぎから始めて23時過ぎまで飲んでた。帰路の途中で新宿駅構内で人身事故が発生して、電車が止まってしまい、復旧に1時間ぐらいかかるというのでタクシーで帰った。タクシー料金も region pay で「ただいま東京プラス」のクーポンが使えたので金銭的に損はしなかった。&lt;/p>
&lt;p>こみやさんのチームの話しからは、対話重視のスクラムのイベントが si におけるメンバーの教育にもうまくいっているように聞こえた。メンバー間で質問し合うのを促していて、質問者と回答者の双方の理解度をあげることを狙いとしている。質問が現状をふりかえるよいきっかけになっているとのこと。&lt;/p>
&lt;p>あとメンバーに自律的に勉強会をしてもらうにはどうしたらいいかという話題も盛り上がった。私もいま毎週勉強会をやっていて、これはよい開発文化を作る上で大事だと思っているものの、いずれメンバーが自律的にやるようになってほしい。いまは私がお手本をみせるという意図もあって勉強会の運営をやっているのだけど、それをどうやってメンバーもできるように巻き込んでいくかを考えている。こみやさんや私が勉強会をやると、一定の水準で運営してしまうから、それがメンバーにとって逆に気後れさせてしまわないかという視点も話したりしていた。勉強会は準備に工数がかかると発表者が大変になって続かなくなるので、毎週やろうと思ったら準備に工数をかけないという仕掛けは重要になる。もしくは情報共有やコミュニケーションの場としての勉強会を考えるならもっと身近な内容を話す場になってもよいのでは？という考え方もある。例えば、最近の時事ネタで関心をもったニュースや技術などを取り上げて雑談するのでもかまわない。&lt;/p>
&lt;p>いずれにしても、うちらがやれと指示してしまうと、業務命令として業務だからやっているだけになってしまい、よい開発文化を作るという、結果的に業務に大きな価値をもたらすなにかとは違うものになってしまうのがこの問題の難しいところ。開発をよりよくしたい。技術を深めたい。品質をあげたい。なにかしら開発そのものに対して関心をもって自律的にそういう活動をする開発者を増やしていく。言葉にすればたったこれだけのこと。しかし、このことを教えるのは相当に難しい。まだ私がマネージャーとして働く時間はあるのでこれからも挑戦していきたい。&lt;/p></content></item><item><title>1週間を管理しようとしない</title><link>/diary/posts/2023/0207/</link><pubDate>Tue, 07 Feb 2023 08:34:05 +0900</pubDate><guid>/diary/posts/2023/0207/</guid><description>1時に寝て5時に起きた。ホテルのテレビを付けっぱなしで寝たら朝のニュースで起きた。なんとなくニュースをみながら7時ぐらいまでのんびりしてた。
1週間のイテレーションはナンセンス？ 毎月行っているマイルストーンのふりかえり。今回で3回目なのでメンバーもだいぶ慣れてきた。11, 12, 1月と3ヶ月に渡って課題管理をメンバーに実践してもらいながら開発してきた。当初、開発のイテレーションを1週間で行うか、2週間で行うかの話し合いで短い方がいいんじゃないかとなり、あまり深く考えずに1週間のイテレーションで開発をまわしてきた。しかし、いまとなってはこれは開発のイテレーションとは違うものになっている。
最初の1ヶ月はメンバーにとって慣れないワークフローだから、1週間のイテレーションでこの issue をやる・やらないといった厳密な取り決めはしなかった。その後、徐々に慣れてきたのを見越して、定例会議のときに issue 一覧をみながら、メンバーに2-3個ぐらいの issue をアサインしたり、issue の優先順位付けを明確にしたりしてきた。必ず issue を完了させるという強い制約を課していないものの、だいたい毎週アサインしたものをメンバーは対応してくれていたので、マネージャーとしての私の視点からもとくに問題はないようにみえた。要はうまくまわっているのでそれ以上の管理をしなくてもいい状態だったと言える。
一方で、本来の課題管理のイテレーションとは異なる開発のワークフローになっていて、それがよいことなのかどうか、私自身にも明確な答えがなかった。それでメンバーに尋ねてみた。いまの1週間単位のイテレーション (開発のワークフロー) をどう思いますか？
メンバーからは、1週間の作業内容を厳密に決めなくてもいいんじゃないかという意見が出た。それは私の考えとも一致していたものの、開発のイテレーションを2週間に伸ばすことについて話しているときに、そうしたとしても、定例会議は毎週やりたいという意見が出た。要件確認や仕様共有のために重要だという。通常、イテレーションの成果共有のために定例会議とイテレーションの長さは一致している。仮にイテレーションを2週間にしたら定例会議は2週間に1回となる。しかし、メンバーの視点からはイテレーションを1週間にするか2週間にするかについて関心はないものの、毎週の定例会議で行っている情報共有は重要だという認識があった。
ここで開発のイテレーションと定例会議の頻度は別にあわせなくてもいいんじゃないかと考えるきっかけを私は得られた。スクラムもスプリントと会議体の頻度はセットになっているのでこの発想はなかった。ちなみにアリエル時代は1つのイテレーションが3ヶ月で定例会議もなかった。そして、うちのチームは1ヶ月のマイルストーンに対してふりかえりをセットにしている。これはもはやイテレーション開発の文脈でいえば、実質うちのチームはマイルストーンと呼んでいる1ヶ月が1つのイテレーションになっていて、1つのイテレーション内に4回の定例会議があるというイテレーション開発のワークフローになっていることに気付いた。課題管理の考え方やワークフローがもっと洗練されていくと、毎週の定例会議をやらなくてもよいようになっていくのが私の経験から自明である。しかし、うちの開発は私も含めて8割以上がフルリモートワークなので、メンバー全員の顔を合わせる機会を作るという観点から毎週の定例会議は大事な場にもなっている。
実際の開発のマネジメントをしてみると、私自身、分かっていなかったことや新たな発見があって、まだまだ自分自身も修行の身であることを実感する。ここでの結論としてわかったことは次の通りで、ロードマップにおける最初のフェーズが完了する3月末までは現状のワークフローを継続してみることに決めた。
開発のイテレーションとして1週間は短過ぎて管理対象としてあわない 開発のイテレーションと定例会議の頻度をあわせなくてもよい フルリモートワークの場合、メンバー全員を集める目的は情報共有だけではない</description><content>&lt;p>1時に寝て5時に起きた。ホテルのテレビを付けっぱなしで寝たら朝のニュースで起きた。なんとなくニュースをみながら7時ぐらいまでのんびりしてた。&lt;/p>
&lt;h2 id="1週間のイテレーションはナンセンス">1週間のイテレーションはナンセンス？&lt;/h2>
&lt;p>毎月行っているマイルストーンのふりかえり。今回で3回目なのでメンバーもだいぶ慣れてきた。11, 12, 1月と3ヶ月に渡って課題管理をメンバーに実践してもらいながら開発してきた。当初、開発のイテレーションを1週間で行うか、2週間で行うかの話し合いで短い方がいいんじゃないかとなり、あまり深く考えずに1週間のイテレーションで開発をまわしてきた。しかし、いまとなってはこれは開発のイテレーションとは違うものになっている。&lt;/p>
&lt;p>最初の1ヶ月はメンバーにとって慣れないワークフローだから、1週間のイテレーションでこの issue をやる・やらないといった厳密な取り決めはしなかった。その後、徐々に慣れてきたのを見越して、定例会議のときに issue 一覧をみながら、メンバーに2-3個ぐらいの issue をアサインしたり、issue の優先順位付けを明確にしたりしてきた。必ず issue を完了させるという強い制約を課していないものの、だいたい毎週アサインしたものをメンバーは対応してくれていたので、マネージャーとしての私の視点からもとくに問題はないようにみえた。要はうまくまわっているのでそれ以上の管理をしなくてもいい状態だったと言える。&lt;/p>
&lt;p>一方で、本来の課題管理のイテレーションとは異なる開発のワークフローになっていて、それがよいことなのかどうか、私自身にも明確な答えがなかった。それでメンバーに尋ねてみた。いまの1週間単位のイテレーション (開発のワークフロー) をどう思いますか？&lt;/p>
&lt;p>メンバーからは、1週間の作業内容を厳密に決めなくてもいいんじゃないかという意見が出た。それは私の考えとも一致していたものの、開発のイテレーションを2週間に伸ばすことについて話しているときに、そうしたとしても、定例会議は毎週やりたいという意見が出た。要件確認や仕様共有のために重要だという。通常、イテレーションの成果共有のために定例会議とイテレーションの長さは一致している。仮にイテレーションを2週間にしたら定例会議は2週間に1回となる。しかし、メンバーの視点からはイテレーションを1週間にするか2週間にするかについて関心はないものの、毎週の定例会議で行っている情報共有は重要だという認識があった。&lt;/p>
&lt;p>ここで開発のイテレーションと定例会議の頻度は別にあわせなくてもいいんじゃないかと考えるきっかけを私は得られた。スクラムもスプリントと会議体の頻度はセットになっているのでこの発想はなかった。ちなみにアリエル時代は1つのイテレーションが3ヶ月で定例会議もなかった。そして、うちのチームは1ヶ月のマイルストーンに対してふりかえりをセットにしている。これはもはやイテレーション開発の文脈でいえば、実質うちのチームはマイルストーンと呼んでいる1ヶ月が1つのイテレーションになっていて、1つのイテレーション内に4回の定例会議があるというイテレーション開発のワークフローになっていることに気付いた。課題管理の考え方やワークフローがもっと洗練されていくと、毎週の定例会議をやらなくてもよいようになっていくのが私の経験から自明である。しかし、うちの開発は私も含めて8割以上がフルリモートワークなので、メンバー全員の顔を合わせる機会を作るという観点から毎週の定例会議は大事な場にもなっている。&lt;/p>
&lt;p>実際の開発のマネジメントをしてみると、私自身、分かっていなかったことや新たな発見があって、まだまだ自分自身も修行の身であることを実感する。ここでの結論としてわかったことは次の通りで、ロードマップにおける最初のフェーズが完了する3月末までは現状のワークフローを継続してみることに決めた。&lt;/p>
&lt;ul>
&lt;li>開発のイテレーションとして1週間は短過ぎて管理対象としてあわない&lt;/li>
&lt;li>開発のイテレーションと定例会議の頻度をあわせなくてもよい&lt;/li>
&lt;li>フルリモートワークの場合、メンバー全員を集める目的は情報共有だけではない&lt;/li>
&lt;/ul></content></item><item><title>オフィスアワー的なハドル</title><link>/diary/posts/2023/0202/</link><pubDate>Thu, 02 Feb 2023 08:19:18 +0900</pubDate><guid>/diary/posts/2023/0202/</guid><description>2時に寝て7時に起きた。お仕事は時間かけた割に成果でなくて、遅くに帰ってきて晩ご飯食べてダンまちみたら寝るのも遅くなった。
ハドルと雑談 今日から午前中はハドルミーティングに滞在するようにして、メンバーが気軽に雑談しやすい雰囲気を作ってみる。大学で言うところのオフィスアワー。初日だったせいか、どんなものかとお試しでチーム外の開発者が来てくれたりもした。メンバーの1人もお昼前にとくに用ないけど試しに来てみましたと軽く雑談した。ハドル中じゃなかったけど、別のメンバーも午後にコードレビューの詳細について聞きたいといったメッセージが届いてハドルをした。リモートワークしていても気軽に話しかけていいんやでと表明することで、いくらか話しかけるのをためらう心理的障壁が下がったことは確認できた。普通に誰でも考えて起きること。あとはこれを一定期間、1ヶ月とか2ヶ月とか続けてみてどのぐらいの雑談ができるかを記録して、効果がありそうなら次のアクションを考える。とくに用事もないけど、暇だから気分転換に雑談に来ましたというのが高頻度で起これば心理的安全性にとってもよいことじゃないかな。私が逆の立場なら、用事もないのに会社の人に話しかけるのは仲のよい同僚しかいなかったと思う。他のメンバーも気軽にハドルに滞在するようになれば、物理的にオフィスに出社しなくても雑談しやすい雰囲気は作れるかもしれない。</description><content>&lt;p>2時に寝て7時に起きた。お仕事は時間かけた割に成果でなくて、遅くに帰ってきて晩ご飯食べてダンまちみたら寝るのも遅くなった。&lt;/p>
&lt;h2 id="ハドルと雑談">ハドルと雑談&lt;/h2>
&lt;p>今日から午前中はハドルミーティングに滞在するようにして、メンバーが気軽に雑談しやすい雰囲気を作ってみる。大学で言うところのオフィスアワー。初日だったせいか、どんなものかとお試しでチーム外の開発者が来てくれたりもした。メンバーの1人もお昼前にとくに用ないけど試しに来てみましたと軽く雑談した。ハドル中じゃなかったけど、別のメンバーも午後にコードレビューの詳細について聞きたいといったメッセージが届いてハドルをした。リモートワークしていても気軽に話しかけていいんやでと表明することで、いくらか話しかけるのをためらう心理的障壁が下がったことは確認できた。普通に誰でも考えて起きること。あとはこれを一定期間、1ヶ月とか2ヶ月とか続けてみてどのぐらいの雑談ができるかを記録して、効果がありそうなら次のアクションを考える。とくに用事もないけど、暇だから気分転換に雑談に来ましたというのが高頻度で起これば心理的安全性にとってもよいことじゃないかな。私が逆の立場なら、用事もないのに会社の人に話しかけるのは仲のよい同僚しかいなかったと思う。他のメンバーも気軽にハドルに滞在するようになれば、物理的にオフィスに出社しなくても雑談しやすい雰囲気は作れるかもしれない。&lt;/p></content></item><item><title>合間の遊撃</title><link>/diary/posts/2023/0131/</link><pubDate>Tue, 31 Jan 2023 13:01:15 +0900</pubDate><guid>/diary/posts/2023/0131/</guid><description>0時に寝て4時に起きて7時に起きた。晩ご飯に餃子の中身とニラと卵を炒めたものを食べてわりとよく眠れた。
遊撃の開発 ちょっと前に自分が 遊撃としての役割 を担っているのではないかと書いた。ある機能開発で javascript を用いてカスタムスクリプト を実行できるようにしたい。スポット的に私の手が空いていて手伝ってと言われたので実装している。開発していると集中しているから時間が経つのが早い。あとコードレビューのときよりもしっかりコードを読み込んだり、振る舞いをシミュレーションしたりするから、コードレビューのときに気付かなかったことや見逃したことにもい気付く。そして、それもついでにリファクタリングしていく。チームのメンバーに、過去に書いたコードをどんどん書き直すのはよいことだというのを、遊撃しながら教えていければいいなとも思う。課題管理システムの issue に調べたことや設計の素案のようなコメントをしていると、メンバーもコメントしてくれたりして、考え方や検証したことをどんどんテキストにして書いていく、言語化していくことの良さも、遊撃の中から学んでくれたりすると嬉しい。開発しながら、メンバーの教育や指導をどう進めるのがいいかな？とかも考えながら働いているのがマネージャーにやっているなという自己満足にもなっていたりする。だいぶマネージャーとしても自分自身にも慣れてきたんじゃないかと思う。</description><content>&lt;p>0時に寝て4時に起きて7時に起きた。晩ご飯に餃子の中身とニラと卵を炒めたものを食べてわりとよく眠れた。&lt;/p>
&lt;h2 id="遊撃の開発">遊撃の開発&lt;/h2>
&lt;p>ちょっと前に自分が &lt;a href="/diary/diary/posts/2023/0120/#隔週の雑談">遊撃としての役割&lt;/a> を担っているのではないかと書いた。ある機能開発で &lt;a href="/diary/diary/posts/2023/0126/">javascript を用いてカスタムスクリプト&lt;/a> を実行できるようにしたい。スポット的に私の手が空いていて手伝ってと言われたので実装している。開発していると集中しているから時間が経つのが早い。あとコードレビューのときよりもしっかりコードを読み込んだり、振る舞いをシミュレーションしたりするから、コードレビューのときに気付かなかったことや見逃したことにもい気付く。そして、それもついでにリファクタリングしていく。チームのメンバーに、過去に書いたコードをどんどん書き直すのはよいことだというのを、遊撃しながら教えていければいいなとも思う。課題管理システムの issue に調べたことや設計の素案のようなコメントをしていると、メンバーもコメントしてくれたりして、考え方や検証したことをどんどんテキストにして書いていく、言語化していくことの良さも、遊撃の中から学んでくれたりすると嬉しい。開発しながら、メンバーの教育や指導をどう進めるのがいいかな？とかも考えながら働いているのがマネージャーにやっているなという自己満足にもなっていたりする。だいぶマネージャーとしても自分自身にも慣れてきたんじゃないかと思う。&lt;/p></content></item><item><title>週末はドライブで気分転換</title><link>/diary/posts/2023/0128/</link><pubDate>Sat, 28 Jan 2023 13:42:54 +0900</pubDate><guid>/diary/posts/2023/0128/</guid><description>22時に寝て2時前に吐き気で起きて少しだらだらして寝て7時に起きた。
ストレッチ 今日の開脚幅は開始前154cmで、ストレッチ後158cmだった。あまり数値は振るわなかったものの、この1ヶ月ぐらいではもっとも復調しつつある。まだ腰の張りがやや残っていて全快とまではいかないものの先週よりはよくなりつつある気はする。先週から左右への開脚以外に前後の開脚のときの股関節のストレッチを重視するよう、トレーナーさんからも指示はあったものの、今週は全然そんな余裕がなくてあまり取り組めなかった。それを余暇でうまくできなかった分の、数値の悪化かなとも受け取れた。
2-2. 傾聴・可視化・リフレーミング エンジニアリング組織論への招待 のメンタリングの技術の章を読み直し。前回 からだいぶ間があいた。
メンターはメンティに対して「問題を解決してあげよう」ではなく「モヤモヤしていない問題に変換してあげよう」と考えることが重要。問題を次のように考え、
感情的に固執していて解けないので「傾聴」をする 客観視できずに解けないので「可視化」をする そもそも解けない問題なので前提を変える「リフレーミング」をする というのが、メンタリングで意識すべき流れになる。
共感と同感の違い
共感という言葉の意味は「相手がそのような気持ちになった理由を理解する」こと 同感は「自分が相手と同じ気持ちになる」こと 傾聴において示すべきことは、「共感」であって、「同感」ではありません。
認知フレームとリフレーミング
人はありのままに物事を見られない 人は認知する枠組みの範囲でしか処理できない この枠組みのことを「認知のフレーム」と呼ぶ この外側にあることは「心理的な盲点」と呼ばれる 対話によって認知フレームを変えることを「リフレーミング」と呼ぶ 「解けない問題」を「解ける問題」へと変えていく 確認された前提を「一旦、この前提がなかったらどうなりますか？」というように外して考えるようにすることで、リフレーミングを促すことができます。 また、この中で「一番重要だと思うものは何ですか？」というように前提の優先順位を問うこともリフレーミングを促します。気になって仕方なかったことが、実はあまり重要ではないかもしれないと気がつく契機になります。
「情報の非対称性」を解消するには、
自分の情報を相手に伝える 相手の情報を自分が聞く という行動をとればよいのですが、この当たり前のことができなくなってしまうケースがある
これは、メンター役になる人に対しても重要な警句です。メンターは、メンティの問題を「自分の課題」として捉えてはいけません。メンターにとっての課題は「メンティを自立的な問題解決」に導くことであって、「メンティの課題を解決すること」ではないのです。
この節を読み終えて、課題管理とは、メンターを必要とせず、自分で自分をメンタリングするツールとも言い換えられるかもしれないと思えた。課題管理を習熟すると自分で自分の間違いに気付けるというメリットを周りに伝えたりしていたことがメンタリングで大事なことのいくつかの共通することが書いてあった。
車を運転して実家へ 明日は父の35日なので夕方から購入した車で初めて実家に帰った。神戸の高速道路の路面が少し濡れていたり北淡で小雪が降ってきたりして、さっそくタイヤ周りを汚れてしまった。まぁ仕方ないか。door-to-door で1時間15分ぐらいで実家に帰れる。高速バスで帰るとこんな段取りになる。
マンションからバス停へ移動する (10分) バス停でバスが到着するのを待つ (待ち時間10分) 高速バスで移動する (1時間20分) バス停まで親に車で迎えに来てもらって実家へ移動する (15分) 待ち時間の調整が入ると2時間ほどはかかっていた。これが自分の都合で移動できるので調整時間がない分のストレスが溜まらない。帰ろうと思って1時間強で移動できる気楽さがある。</description><content>&lt;p>22時に寝て2時前に吐き気で起きて少しだらだらして寝て7時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前154cmで、ストレッチ後158cmだった。あまり数値は振るわなかったものの、この1ヶ月ぐらいではもっとも復調しつつある。まだ腰の張りがやや残っていて全快とまではいかないものの先週よりはよくなりつつある気はする。先週から左右への開脚以外に前後の開脚のときの股関節のストレッチを重視するよう、トレーナーさんからも指示はあったものの、今週は全然そんな余裕がなくてあまり取り組めなかった。それを余暇でうまくできなかった分の、数値の悪化かなとも受け取れた。&lt;/p>
&lt;h2 id="2-2-傾聴可視化リフレーミング">2-2. 傾聴・可視化・リフレーミング&lt;/h2>
&lt;p>&lt;a href="https://gihyo.jp/book/2018/978-4-7741-9605-3">エンジニアリング組織論への招待&lt;/a> のメンタリングの技術の章を読み直し。&lt;a href="/diary/diary/posts/2022/1106/#2-1-メンタリングで相手の思考をリファクタリング">前回&lt;/a> からだいぶ間があいた。&lt;/p>
&lt;blockquote>
&lt;p>メンターはメンティに対して「問題を解決してあげよう」ではなく「モヤモヤしていない問題に変換してあげよう」と考えることが重要。問題を次のように考え、&lt;/p>
&lt;ul>
&lt;li>感情的に固執していて解けないので「傾聴」をする&lt;/li>
&lt;li>客観視できずに解けないので「可視化」をする&lt;/li>
&lt;li>そもそも解けない問題なので前提を変える「リフレーミング」をする&lt;/li>
&lt;/ul>
&lt;p>というのが、メンタリングで意識すべき流れになる。&lt;/p>
&lt;p>共感と同感の違い&lt;/p>
&lt;ul>
&lt;li>共感という言葉の意味は「相手がそのような気持ちになった理由を理解する」こと&lt;/li>
&lt;li>同感は「自分が相手と同じ気持ちになる」こと&lt;/li>
&lt;/ul>
&lt;p>傾聴において示すべきことは、「共感」であって、「同感」ではありません。&lt;/p>
&lt;p>認知フレームとリフレーミング&lt;/p>
&lt;ul>
&lt;li>人はありのままに物事を見られない
&lt;ul>
&lt;li>人は認知する枠組みの範囲でしか処理できない&lt;/li>
&lt;li>この枠組みのことを「認知のフレーム」と呼ぶ
&lt;ul>
&lt;li>この外側にあることは「心理的な盲点」と呼ばれる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>対話によって認知フレームを変えることを「リフレーミング」と呼ぶ
&lt;ul>
&lt;li>「解けない問題」を「解ける問題」へと変えていく&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>確認された前提を「一旦、この前提がなかったらどうなりますか？」というように外して考えるようにすることで、リフレーミングを促すことができます。 また、この中で「一番重要だと思うものは何ですか？」というように前提の優先順位を問うこともリフレーミングを促します。気になって仕方なかったことが、実はあまり重要ではないかもしれないと気がつく契機になります。&lt;/p>
&lt;p>「情報の非対称性」を解消するには、&lt;/p>
&lt;ul>
&lt;li>自分の情報を相手に伝える&lt;/li>
&lt;li>相手の情報を自分が聞く&lt;/li>
&lt;/ul>
&lt;p>という行動をとればよいのですが、この当たり前のことができなくなってしまうケースがある&lt;/p>
&lt;p>これは、メンター役になる人に対しても重要な警句です。メンターは、メンティの問題を「自分の課題」として捉えてはいけません。メンターにとっての課題は「メンティを自立的な問題解決」に導くことであって、「メンティの課題を解決すること」ではないのです。&lt;/p>
&lt;/blockquote>
&lt;p>この節を読み終えて、課題管理とは、メンターを必要とせず、自分で自分をメンタリングするツールとも言い換えられるかもしれないと思えた。課題管理を習熟すると自分で自分の間違いに気付けるというメリットを周りに伝えたりしていたことがメンタリングで大事なことのいくつかの共通することが書いてあった。&lt;/p>
&lt;h2 id="車を運転して実家へ">車を運転して実家へ&lt;/h2>
&lt;p>明日は父の35日なので夕方から購入した車で初めて実家に帰った。神戸の高速道路の路面が少し濡れていたり北淡で小雪が降ってきたりして、さっそくタイヤ周りを汚れてしまった。まぁ仕方ないか。door-to-door で1時間15分ぐらいで実家に帰れる。高速バスで帰るとこんな段取りになる。&lt;/p>
&lt;ul>
&lt;li>マンションからバス停へ移動する (10分)&lt;/li>
&lt;li>バス停でバスが到着するのを待つ (待ち時間10分)&lt;/li>
&lt;li>高速バスで移動する (1時間20分)&lt;/li>
&lt;li>バス停まで親に車で迎えに来てもらって実家へ移動する (15分)&lt;/li>
&lt;/ul>
&lt;p>待ち時間の調整が入ると2時間ほどはかかっていた。これが自分の都合で移動できるので調整時間がない分のストレスが溜まらない。帰ろうと思って1時間強で移動できる気楽さがある。&lt;/p></content></item><item><title>休日のオンライン学習</title><link>/diary/posts/2022/1211/</link><pubDate>Sun, 11 Dec 2022 10:12:21 +0900</pubDate><guid>/diary/posts/2022/1211/</guid><description>0時に寝て夜中に吐き気がして2回ほど起きて3時と5時に起きて8時に起きた。なかなか苦しい寝方をした。
ヤフートラベルと一休.comのシステム統合 アーカイブ公開されたらみようと思いつつ忘れてたので見返した。
雑なめも。また機をみて見返すこともあるかも。
バックエンドは完全に一休側に寄せるという大きな意志決定を2016年に行った この意志決定はフロントエンド統合にも大きな影響を与えた ふじもんさんの意志決定がよかった？ 今日の話しはマルチブランドデザインシステム統合がメイン 開発者が50-60人程度で半年ぐらいで launch できた nuxt/vuejs で開発している スタイルは tailwindcss を使っている 実は launch した後にこのシステムが必要だとわかった 開発者とデザイナー間の細かい意思疎通が困難 外部からデザインシステムに詳しい人にも来てもらっていろんな議論をした ガイドラインを言語化するところから始め、最終的にソースコードの共有ができるようになった 終わってからデザインシステムそのものは重要ではないと気付いた この過程で開発者とデザイナー間のどのように共通化するか、あるいはしないかと議論を繰り返し行ったことが重要だったと当事者がインタビューで語っていた デザインシステムの開発を通じてデザインの共通認識をもてたことがよかった 波及効果 同じソースコードから少し異なる体験の開発のノウハウができた ふるさと納税に特化した宿泊予約サイトを作った 統合は終わりではない、lauch したところが始まり 統合後にいろいろな施策をすることで課題がみえてくることがある 全国旅行支援は1つの開発で2つの体験をつくることができた Q. デザイナーと開発者はわりと仲が悪いのでは？価値観や考え方が異なるのですり合わせるのは難しいのでは？ 過去の一休でも起きていた 一休のチームはデザイナーと PM と開発者で構成されている このチームが一緒に働いていてチームでなるべく意志決定している 普段から一緒に働いていると仲が悪いということはなかった とはいえ、仕事のプロセスが異なるので課題はあった 地道に丁寧にすり合わせを行った 外部から講師を読んで中立的な立場でワークショップを何度も行った デザイナーと開発者を別の組織にしているとコミュニケーションの壁ができてしまうかもしれない go の学び直し テストの学び直し に引き続き、Gopher塾 #2 - Goらしいコードの書き方 - DAY 1 に参加した。
テストの次のプログラミングの話しだったので内容そのものは難しくはなかったけど、改めて重要な項目を選抜しているのだと考えると学びはあったと思う。参考になったことをいくつか覚えている範囲でまとめる。名前の付け方について感覚的に理解していたし、実際に私はそうしているけど、コードレビューしていて自然になっていないコードを指摘する機会も多いので一定の習熟を要するのかもしれない。いま毎週勉強会をやっていて私が講師として話している。ネタがなくなってきたり大変になったきたら準備の少ないコードリーディング会もやってみたいと思った。
google Go Style derrors.Wrap 名前に文脈を与えるという概念 相対的な名前をつける 準備の少ないコードリーディング会 お題（読むパッケージ）を決める 選んだお題に期待することを当日話す 時間を決めてみんなでそれぞれ読む（20分とか） 読みながらSlackのスレッドにメモをしていく 残りの時間で気になったところを議論する 自分が気づけなかった点を知ることができる</description><content>&lt;p>0時に寝て夜中に吐き気がして2回ほど起きて3時と5時に起きて8時に起きた。なかなか苦しい寝方をした。&lt;/p>
&lt;h2 id="ヤフートラベルと一休comのシステム統合">ヤフートラベルと一休.comのシステム統合&lt;/h2>
&lt;p>アーカイブ公開されたらみようと思いつつ忘れてたので見返した。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/JN4kGYbQMJ8" allowfullscreen title="ヤフートラベルのシステムリニューアル 一休 com とのシステム統合 -日本語版-">&lt;/iframe>
&lt;/div>
&lt;p>雑なめも。また機をみて見返すこともあるかも。&lt;/p>
&lt;ul>
&lt;li>バックエンドは完全に一休側に寄せるという大きな意志決定を2016年に行った
&lt;ul>
&lt;li>この意志決定はフロントエンド統合にも大きな影響を与えた&lt;/li>
&lt;li>ふじもんさんの意志決定がよかった？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>今日の話しはマルチブランドデザインシステム統合がメイン
&lt;ul>
&lt;li>開発者が50-60人程度で半年ぐらいで launch できた&lt;/li>
&lt;li>nuxt/vuejs で開発している&lt;/li>
&lt;li>スタイルは tailwindcss を使っている&lt;/li>
&lt;li>実は launch した後にこのシステムが必要だとわかった
&lt;ul>
&lt;li>開発者とデザイナー間の細かい意思疎通が困難&lt;/li>
&lt;li>外部からデザインシステムに詳しい人にも来てもらっていろんな議論をした&lt;/li>
&lt;li>ガイドラインを言語化するところから始め、最終的にソースコードの共有ができるようになった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>終わってからデザインシステムそのものは重要ではないと気付いた
&lt;ul>
&lt;li>この過程で開発者とデザイナー間のどのように共通化するか、あるいはしないかと議論を繰り返し行ったことが重要だったと当事者がインタビューで語っていた&lt;/li>
&lt;li>デザインシステムの開発を通じてデザインの共通認識をもてたことがよかった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>波及効果
&lt;ul>
&lt;li>同じソースコードから少し異なる体験の開発のノウハウができた&lt;/li>
&lt;li>ふるさと納税に特化した宿泊予約サイトを作った&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>統合は終わりではない、lauch したところが始まり
&lt;ul>
&lt;li>統合後にいろいろな施策をすることで課題がみえてくることがある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>全国旅行支援は1つの開発で2つの体験をつくることができた&lt;/li>
&lt;li>Q. デザイナーと開発者はわりと仲が悪いのでは？価値観や考え方が異なるのですり合わせるのは難しいのでは？
&lt;ul>
&lt;li>過去の一休でも起きていた&lt;/li>
&lt;li>一休のチームはデザイナーと PM と開発者で構成されている
&lt;ul>
&lt;li>このチームが一緒に働いていてチームでなるべく意志決定している&lt;/li>
&lt;li>普段から一緒に働いていると仲が悪いということはなかった&lt;/li>
&lt;li>とはいえ、仕事のプロセスが異なるので課題はあった
&lt;ul>
&lt;li>地道に丁寧にすり合わせを行った&lt;/li>
&lt;li>外部から講師を読んで中立的な立場でワークショップを何度も行った&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>デザイナーと開発者を別の組織にしているとコミュニケーションの壁ができてしまうかもしれない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="go-の学び直し">go の学び直し&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/1123/#go-の学び直し">テストの学び直し&lt;/a> に引き続き、&lt;a href="https://tenntenn.connpass.com/event/267564/">Gopher塾 #2 - Goらしいコードの書き方 - DAY 1&lt;/a> に参加した。&lt;/p>
&lt;p>テストの次のプログラミングの話しだったので内容そのものは難しくはなかったけど、改めて重要な項目を選抜しているのだと考えると学びはあったと思う。参考になったことをいくつか覚えている範囲でまとめる。名前の付け方について感覚的に理解していたし、実際に私はそうしているけど、コードレビューしていて自然になっていないコードを指摘する機会も多いので一定の習熟を要するのかもしれない。いま毎週勉強会をやっていて私が講師として話している。ネタがなくなってきたり大変になったきたら準備の少ないコードリーディング会もやってみたいと思った。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://google.github.io/styleguide/go/">google Go Style&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cs.opensource.google/go/x/pkgsite/+/master:internal/derrors/derrors.go;l=237">derrors.Wrap&lt;/a>&lt;/li>
&lt;li>名前に文脈を与えるという概念
&lt;ul>
&lt;li>相対的な名前をつける&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>準備の少ないコードリーディング会
&lt;ul>
&lt;li>お題（読むパッケージ）を決める&lt;/li>
&lt;li>選んだお題に期待することを当日話す&lt;/li>
&lt;li>時間を決めてみんなでそれぞれ読む（20分とか）&lt;/li>
&lt;li>読みながらSlackのスレッドにメモをしていく&lt;/li>
&lt;li>残りの時間で気になったところを議論する&lt;/li>
&lt;li>自分が気づけなかった点を知ることができる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content></item><item><title>掃除は respect を表現している</title><link>/diary/posts/2022/1204/</link><pubDate>Sun, 04 Dec 2022 13:51:59 +0900</pubDate><guid>/diary/posts/2022/1204/</guid><description>22時に寝て1時に起きて吐き気がして苦しんでた。その後、寝て1度起きて7時半に起きた。寒くなってきたせいか、疲労のせいか、なんとなく体調が悪い。今日も掃除したり荷解きの片付けやったりしていた。
退去するオフィスの掃除 ワールドカップが盛り上がっているので関連するニュースを読んでいるうちにサポーターだけじゃなく、選手もロッカールームをきれいに掃除して退出しているニュースをみかけた。
FIFA公式が日本代表のマナーを絶賛　ピカピカ更衣室に「ドウモ アリガトウ」 日本では小学校の頃から自分たちの活動の場を自分たちで掃除するという習慣が当たり前のように教育されている。その延長で自分たちが使った場所は掃除して帰るといった価値観が一般的に定着しているように思う。掃除するお仕事を奪っているという批判も、掃除はボランティアがやっている、ボランティアと言っても有償ではある、有償といっても歩合制でお金をもらっているわけではないでしょうとか。さまざまな意見がある。批判を認めないわけではないが、私も掃除をすることは正義の1つだと最近思うようになってきた。12月3日に引っ越しするのに12月4日 (予備日) まで借りていた理由はとくになかったのだけど、オフィスを掃除するためだったんだなと後付けの理由ができた。朝から掃除機をオフィスへ運んで掃除してきた。
This isn&amp;rsquo;t just a clean dressing room, it&amp;rsquo;s a clear demonstration of values.
It&amp;rsquo;s a statement about respect, gratitude and attention to detail.
The small things are the biggest indicator of the big things - your values.
https://www.linkedin.com/posts/stevenbartlett-123_this-is-how-the-japanese-mens-team-left-activity-7001499750009044992-qpeU/
たまたまねとらぼの記事を読んだ後に linkedin の投稿もみかけた。日本人は掃除に respect なんか感じたことはないかもしれないけど、外からみるとそういった振る舞いの1つにみえるんだという気付きにはなった。やっぱり掃除は正義やね。</description><content>&lt;p>22時に寝て1時に起きて吐き気がして苦しんでた。その後、寝て1度起きて7時半に起きた。寒くなってきたせいか、疲労のせいか、なんとなく体調が悪い。今日も掃除したり荷解きの片付けやったりしていた。&lt;/p>
&lt;h2 id="退去するオフィスの掃除">退去するオフィスの掃除&lt;/h2>
&lt;p>ワールドカップが盛り上がっているので関連するニュースを読んでいるうちにサポーターだけじゃなく、選手もロッカールームをきれいに掃除して退出しているニュースをみかけた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://nlab.itmedia.co.jp/nl/articles/2211/24/news123.html">FIFA公式が日本代表のマナーを絶賛　ピカピカ更衣室に「ドウモ アリガトウ」&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>日本では小学校の頃から自分たちの活動の場を自分たちで掃除するという習慣が当たり前のように教育されている。その延長で自分たちが使った場所は掃除して帰るといった価値観が一般的に定着しているように思う。掃除するお仕事を奪っているという批判も、掃除はボランティアがやっている、ボランティアと言っても有償ではある、有償といっても歩合制でお金をもらっているわけではないでしょうとか。さまざまな意見がある。批判を認めないわけではないが、私も掃除をすることは正義の1つだと最近思うようになってきた。12月3日に引っ越しするのに12月4日 (予備日) まで借りていた理由はとくになかったのだけど、オフィスを掃除するためだったんだなと後付けの理由ができた。朝から掃除機をオフィスへ運んで掃除してきた。&lt;/p>
&lt;blockquote>
&lt;p>This isn&amp;rsquo;t just a clean dressing room, it&amp;rsquo;s a clear demonstration of values.&lt;/p>
&lt;p>It&amp;rsquo;s a statement about respect, gratitude and attention to detail.&lt;/p>
&lt;p>The small things are the biggest indicator of the big things - your values.&lt;/p>
&lt;p>&lt;a href="https://www.linkedin.com/posts/stevenbartlett-123_this-is-how-the-japanese-mens-team-left-activity-7001499750009044992-qpeU/">https://www.linkedin.com/posts/stevenbartlett-123_this-is-how-the-japanese-mens-team-left-activity-7001499750009044992-qpeU/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>たまたまねとらぼの記事を読んだ後に linkedin の投稿もみかけた。日本人は掃除に respect なんか感じたことはないかもしれないけど、外からみるとそういった振る舞いの1つにみえるんだという気付きにはなった。やっぱり掃除は正義やね。&lt;/p></content></item><item><title>仲の良いチーム</title><link>/diary/posts/2022/1130/</link><pubDate>Wed, 30 Nov 2022 09:16:42 +0900</pubDate><guid>/diary/posts/2022/1130/</guid><description>1時に寝て何度か起きて7時に起きた。起きてからも昨日の夜にやってた勉強会の資料作りをずっとやってた。
1on1 で設計談義 あるマージリクエストで私が nil ガードを実装した方がよいとコメントした。その意図がわからないという話になって nil ガードを実装する背景について、実際のコードをみながらメンバーに説明した。プログラミングの文脈では全然難しくないことではあるけど、あまり経験がない人にとってはその意図や考え方を学ぶのは難しいかもしれない。こういった、詳しい人に聞けばすぐ解決するけど、ググって調べるのは難しいこともある。1on1 のような身近に話す機会があると、定例会議でみんなの時間に話すほどの重要度ではない話題を聞くことができる。そこで聞いた意見をベースに私が issue 化したり、ある話題をチームで話し合う打ち合わせの機会を設けたりしている。
メンバーの送別会 私があるチームのマネージャーをして1ヶ月が経つ。メンバーの1人が退職することになった。実はマネージャーになって1週間後に転職が決まったという話しだった。いきなり開発体制がバタバタしたけれども、私からみたらやることは変わらないのでその影響は最小限に留められたのではないかと思う。いまのところ、当初の開発の計画にも変更をきたしていない。出張でオフィスに来ている機会なので私もそのメンバーの送別会に参加した。他の社員さんも20人ぐらい参加されていた。飲み会の雰囲気をみていて若い人が自由に発言して楽しんでいるのを傍から眺めてた。飲み会の雰囲気ってその組織の性格が出ておもしろいと思う。イヤな人がいないのは組織において重要になる。後日、経営者の方々とそういう会話をしていたら小さい会社はみんな仲良くできるといった話しをされていた。たしかにそれぞれのメンバーの顔とやっていることを見渡せる規模だから親近感を抱きやすいと言えるかもしれない。ここ数年どこへ手伝いに行ってもよい雰囲気をもつ会社は多い。変な言い方だけど、よい世の中になったと思えて嬉しい。</description><content>&lt;p>1時に寝て何度か起きて7時に起きた。起きてからも昨日の夜にやってた勉強会の資料作りをずっとやってた。&lt;/p>
&lt;h2 id="1on1-で設計談義">1on1 で設計談義&lt;/h2>
&lt;p>あるマージリクエストで私が nil ガードを実装した方がよいとコメントした。その意図がわからないという話になって nil ガードを実装する背景について、実際のコードをみながらメンバーに説明した。プログラミングの文脈では全然難しくないことではあるけど、あまり経験がない人にとってはその意図や考え方を学ぶのは難しいかもしれない。こういった、詳しい人に聞けばすぐ解決するけど、ググって調べるのは難しいこともある。1on1 のような身近に話す機会があると、定例会議でみんなの時間に話すほどの重要度ではない話題を聞くことができる。そこで聞いた意見をベースに私が issue 化したり、ある話題をチームで話し合う打ち合わせの機会を設けたりしている。&lt;/p>
&lt;h2 id="メンバーの送別会">メンバーの送別会&lt;/h2>
&lt;p>私があるチームのマネージャーをして1ヶ月が経つ。メンバーの1人が退職することになった。実はマネージャーになって1週間後に転職が決まったという話しだった。いきなり開発体制がバタバタしたけれども、私からみたらやることは変わらないのでその影響は最小限に留められたのではないかと思う。いまのところ、当初の開発の計画にも変更をきたしていない。出張でオフィスに来ている機会なので私もそのメンバーの送別会に参加した。他の社員さんも20人ぐらい参加されていた。飲み会の雰囲気をみていて若い人が自由に発言して楽しんでいるのを傍から眺めてた。飲み会の雰囲気ってその組織の性格が出ておもしろいと思う。イヤな人がいないのは組織において重要になる。後日、経営者の方々とそういう会話をしていたら小さい会社はみんな仲良くできるといった話しをされていた。たしかにそれぞれのメンバーの顔とやっていることを見渡せる規模だから親近感を抱きやすいと言えるかもしれない。ここ数年どこへ手伝いに行ってもよい雰囲気をもつ会社は多い。変な言い方だけど、よい世の中になったと思えて嬉しい。&lt;/p></content></item><item><title>東京出張 2回目</title><link>/diary/posts/2022/1128/</link><pubDate>Mon, 28 Nov 2022 08:10:13 +0900</pubDate><guid>/diary/posts/2022/1128/</guid><description>0時に寝て4時に起きた。5時前には家を出た。初日だけは早起きして新幹線乗らないといけないので緊張する。新神戸6時10分発が始発になる。始発に乗った方が混雑もしていない。9時過ぎにはお手伝い先のオフィスについて業務を始められた。移動に約3時間。早起きは三文の徳みたいな話。
フルリモートワーク 朝一でオフィスに着いたものの、チームのメンバーの1人はお休み、2人は在宅勤務、上長は出張だったので私が一人だけオフィスワークしてた。普段は私がフルリモートワークなのでうちのチームはリモートワークの働き方が容易になるように業務を設計している。私がオフィスにいようが、普通にリモートワークするのはある意味で自然な働き方とも言える。周りのチームの人に「あっ、いたんですね」とか声を掛けられながら1人で黙々とお仕事してた。
全国旅行支援 + ただいま東京プラス 今回の出張は全国旅行支援で宿泊費が40%オフになっていて、且つ ただいま東京プラス という取り組みで3000円/日のクーポン券が付いていた。 region PAY というアプリにクーポンを登録して QR コード決済で対応店舗で買いものできる。すべてのお店が対応しているわけではないが、普通に周りの飲食店やコンビニなどでも使えた。ちょっとよい晩ご飯の定食を食べて、帰りにコンビニで飲みものを買って帰るぐらいの贅沢ができる。至れり尽くせり。
競輪選手というキャリア ホテルでたまたまテレビをつけたらやっていておもしろかった。競輪オタクが競輪選手になったらめっちゃ強くて無双している、どこかのラノベみたいな話し。競輪という競技を私はあまりよく知らなかった。なぜこんなことができるかというと、競輪というスポーツは純粋な体力や身体能力で勝敗が決まらないらしい。試合展開の駆け引きがあって最後に勝敗が決まる。競輪オタクはすべての選手のプレースタイルを記憶していて、個々の選手の戦術を予測して対策できるから勝てるのだという。
競技経験ゼロ！28歳の「脱サラ競輪選手」。“オタク知識”をフル活用してまさかの快進撃</description><content>&lt;p>0時に寝て4時に起きた。5時前には家を出た。初日だけは早起きして新幹線乗らないといけないので緊張する。新神戸6時10分発が始発になる。始発に乗った方が混雑もしていない。9時過ぎにはお手伝い先のオフィスについて業務を始められた。移動に約3時間。早起きは三文の徳みたいな話。&lt;/p>
&lt;h2 id="フルリモートワーク">フルリモートワーク&lt;/h2>
&lt;p>朝一でオフィスに着いたものの、チームのメンバーの1人はお休み、2人は在宅勤務、上長は出張だったので私が一人だけオフィスワークしてた。普段は私がフルリモートワークなのでうちのチームはリモートワークの働き方が容易になるように業務を設計している。私がオフィスにいようが、普通にリモートワークするのはある意味で自然な働き方とも言える。周りのチームの人に「あっ、いたんですね」とか声を掛けられながら1人で黙々とお仕事してた。&lt;/p>
&lt;h2 id="全国旅行支援--ただいま東京プラス">全国旅行支援 + ただいま東京プラス&lt;/h2>
&lt;p>今回の出張は全国旅行支援で宿泊費が40%オフになっていて、且つ &lt;a href="https://ryokoshientokyo.jp/">ただいま東京プラス&lt;/a> という取り組みで3000円/日のクーポン券が付いていた。
&lt;a href="https://region-pay.com/">region PAY&lt;/a> というアプリにクーポンを登録して QR コード決済で対応店舗で買いものできる。すべてのお店が対応しているわけではないが、普通に周りの飲食店やコンビニなどでも使えた。ちょっとよい晩ご飯の定食を食べて、帰りにコンビニで飲みものを買って帰るぐらいの贅沢ができる。至れり尽くせり。&lt;/p>
&lt;h2 id="競輪選手というキャリア">競輪選手というキャリア&lt;/h2>
&lt;p>ホテルでたまたまテレビをつけたらやっていておもしろかった。競輪オタクが競輪選手になったらめっちゃ強くて無双している、どこかのラノベみたいな話し。競輪という競技を私はあまりよく知らなかった。なぜこんなことができるかというと、競輪というスポーツは純粋な体力や身体能力で勝敗が決まらないらしい。試合展開の駆け引きがあって最後に勝敗が決まる。競輪オタクはすべての選手のプレースタイルを記憶していて、個々の選手の戦術を予測して対策できるから勝てるのだという。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://post.tv-asahi.co.jp/post-202706/">競技経験ゼロ！28歳の「脱サラ競輪選手」。“オタク知識”をフル活用してまさかの快進撃&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>メンタリングの学び直し</title><link>/diary/posts/2022/1106/</link><pubDate>Sun, 06 Nov 2022 12:55:08 +0900</pubDate><guid>/diary/posts/2022/1106/</guid><description>5時過ぎに寝て10時に起きた。出張で生活のリズムが狂ったまま。
2-1. メンタリングで相手の思考をリファクタリング エンジニアリング組織論への招待 のメンタリングの技術の章を読み直すことにした。3年前ぐらいに読んだのであまり覚えてない。私は管理職ではなかったし、若い人に口であれこれ言うのもハラスメントになる懸念から私の働き方をみて役に立つところを盗んでもらえればよいと考えていた。これまでメンタリングには関心がなかった。しかし、いまマネージャーとしての役割で臨む以上は最低限の基礎は抑えた上で取り組む必要があると考え方を改めた。今日は「2-1. メンタリングで相手の思考をリファクタリング」を読んだ。節を簡潔に要約してみる。
メンタリングとは、対話を通じて、思考の幅を広げ、その人の歪んだ認知を補正し、次の行動を促し、成長させる手法である。スキルなので誰でも習得できる。自ら問題を発見し解決することができる 自立型人材 を作るために、信頼関係の上に正のフィードバックループから 自己効力感 (self-efficiency) を与えられるように働きかける。次の条件を満たさないとメンターの言葉でメンティの行動を自ら変えるようにはならない。
謙虚: お互いに弱さをみせられる 経緯: お互いに敬意をもっている 信頼: お互いにメンティ (自身) の成長期待をもっている 自らいままでわからなかったことを理解した状況を 自己説得 と呼ぶ。他人が質問で促し、体験を伴い、行動の変化が発生しやすい。メンティが自己説得できる状態になるようメンターは対話で気付きを与えないといけない。悩むと考えるは違う。悩んでいるときは思考がぐるぐると巡り、もやもやした状態。非常に苦しい上に生産的でもない。一方で考えているときはメモ帳やホワイトボードなどに課題を書き出し、分解したり、抽象化したり、具体化したり、、、何かしら行動をとっている状態。次にとるべき行動がはっきりしていれば悩むことはない。メンティが行動できているかどうかを観察し、悩んでいるようならその背景を聞き出して、気付きを与えて考えている状態へ変えていく必要がある。
ストレッチ 今日の開脚幅は開始前154cmで、ストレッチ後159cmだった。東京出張であちこちガタがきていて全身に張りがあったように思う。生活や睡眠が不規則になったことによる疲労もそのままストレッチの窮屈さにつながっているように感じた。毎週ストレッチの機会があって本当に助かっている。ストレッチをした後は体が軽くなって疲労を軽減できているように思う。これまでたまにマッサージへ行って対応していたのが、毎週チェックして手入れできていることの価値がこういうときによくわかるようになってきた。</description><content>&lt;p>5時過ぎに寝て10時に起きた。出張で生活のリズムが狂ったまま。&lt;/p>
&lt;h2 id="2-1-メンタリングで相手の思考をリファクタリング">2-1. メンタリングで相手の思考をリファクタリング&lt;/h2>
&lt;p>&lt;a href="https://gihyo.jp/book/2018/978-4-7741-9605-3">エンジニアリング組織論への招待&lt;/a> のメンタリングの技術の章を読み直すことにした。3年前ぐらいに読んだのであまり覚えてない。私は管理職ではなかったし、若い人に口であれこれ言うのもハラスメントになる懸念から私の働き方をみて役に立つところを盗んでもらえればよいと考えていた。これまでメンタリングには関心がなかった。しかし、いまマネージャーとしての役割で臨む以上は最低限の基礎は抑えた上で取り組む必要があると考え方を改めた。今日は「2-1. メンタリングで相手の思考をリファクタリング」を読んだ。節を簡潔に要約してみる。&lt;/p>
&lt;blockquote>
&lt;p>メンタリングとは、対話を通じて、思考の幅を広げ、その人の歪んだ認知を補正し、次の行動を促し、成長させる手法である。スキルなので誰でも習得できる。自ら問題を発見し解決することができる &lt;strong>自立型人材&lt;/strong> を作るために、信頼関係の上に正のフィードバックループから &lt;strong>自己効力感 (self-efficiency)&lt;/strong> を与えられるように働きかける。次の条件を満たさないとメンターの言葉でメンティの行動を自ら変えるようにはならない。&lt;/p>
&lt;ul>
&lt;li>謙虚: お互いに弱さをみせられる&lt;/li>
&lt;li>経緯: お互いに敬意をもっている&lt;/li>
&lt;li>信頼: お互いにメンティ (自身) の成長期待をもっている&lt;/li>
&lt;/ul>
&lt;p>自らいままでわからなかったことを理解した状況を &lt;strong>自己説得&lt;/strong> と呼ぶ。他人が質問で促し、体験を伴い、行動の変化が発生しやすい。メンティが自己説得できる状態になるようメンターは対話で気付きを与えないといけない。悩むと考えるは違う。悩んでいるときは思考がぐるぐると巡り、もやもやした状態。非常に苦しい上に生産的でもない。一方で考えているときはメモ帳やホワイトボードなどに課題を書き出し、分解したり、抽象化したり、具体化したり、、、何かしら行動をとっている状態。次にとるべき行動がはっきりしていれば悩むことはない。メンティが行動できているかどうかを観察し、悩んでいるようならその背景を聞き出して、気付きを与えて考えている状態へ変えていく必要がある。&lt;/p>
&lt;/blockquote>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前154cmで、ストレッチ後159cmだった。東京出張であちこちガタがきていて全身に張りがあったように思う。生活や睡眠が不規則になったことによる疲労もそのままストレッチの窮屈さにつながっているように感じた。毎週ストレッチの機会があって本当に助かっている。ストレッチをした後は体が軽くなって疲労を軽減できているように思う。これまでたまにマッサージへ行って対応していたのが、毎週チェックして手入れできていることの価値がこういうときによくわかるようになってきた。&lt;/p></content></item><item><title>課題に対する意思決定</title><link>/diary/posts/2022/1102/</link><pubDate>Wed, 02 Nov 2022 09:18:22 +0900</pubDate><guid>/diary/posts/2022/1102/</guid><description>1時に寝て7時に起きた。ホテルのビッフェ形式の朝ご飯は2回目のなのでうまくプレートに盛り付けて段取りよく配膳できた。昨日より改善できた。
課題の意思決定と割り当て プロジェクトの初期なのでとにかく段取りを早め早めに決めてタスクを洗い出し、メンバーが目標に向かって作業しやすい状況をマネージャーとして作り出さないといけない。昨日からプロジェクトのリポジトリ構成を変更しようというイシューを作ってメンバーと議論していた。当初は私がちゃちゃっと作業して移行しようと考えていたが、私の移行イメージを書き出していたらメンバーからいくつか背景や要望が出てきて、メンバー集めて打ち合わせして合意をとって決断することにした。私が入ってからプロジェクトでの初の意思決定かもしれない。
既存のソースを読んだらリポジトリ統合は少し工数がかかるとわかって、私がやるよりもメンバーの方がいいだろうと意思決定だけ私が判断して、実作業はメンバーに割り当てた。初めてのマネージャーっぽいお仕事をできたとちょっと自己満足。その議論の過程で monorepo vs polyrepo という比較記事を読んでみた。monorepo から polyrepo に切り出すのは容易だが、polyrepo から monorepo に統合するのは大変ということが書いてあって、まさにプロジェクトの状況と合致してメンバー間で認識合わせした。いま (過剰な) polyrepo で管理されているのを monorepo に統合しようという決断をした。これをやるのにコミット履歴を維持するのはコストがかかるのでソースファイルをコピーして新規ソースとして移行してよいという判断も下した。こういう意思決定は即断即決でやりたい。
monorepo の対義語として polyrepo という言葉があるのか。勘と経験でリポジトリは複数に分割するので私がやってきたのは polyrepo ではあるのだけど、ちゃんと考えたことはなかったのでアーキテクチャとして議論する余地があるんやろな。 https://t.co/7LQY4cMteF
&amp;mdash; Tetsuya Morimoto (@t2y) November 1, 2022 1on1 マネージャーとして1on1を行う。プロジェクト初期は毎週やって、その後はメンバーの要望を聞きながら隔週でもよいと考えている。1on1 の目的ややり方は様々だが、私が提供できるのは次の3つに含まれることかなと思う。
モチベーションアップ 業務・組織課題の改善 能力開発／キャリア支援 初日から長時間の会議と懇親会などでチームのメンバーと話す機会が多かったので 1on1 もみんな気さくに話してくれてよかった。私はなるべく話さずに聞くことに専念しないといけない。私は圧倒的に自分の思ったことをがんがん話してしまう方なので他人の話を聞く姿勢を身につけるよい機会になると思う。今回は準備不足で雑談がメインではあったものの、1on1 の本なども読みながら勉強していこうと思う。</description><content>&lt;p>1時に寝て7時に起きた。ホテルのビッフェ形式の朝ご飯は2回目のなのでうまくプレートに盛り付けて段取りよく配膳できた。昨日より改善できた。&lt;/p>
&lt;h2 id="課題の意思決定と割り当て">課題の意思決定と割り当て&lt;/h2>
&lt;p>プロジェクトの初期なのでとにかく段取りを早め早めに決めてタスクを洗い出し、メンバーが目標に向かって作業しやすい状況をマネージャーとして作り出さないといけない。昨日からプロジェクトのリポジトリ構成を変更しようというイシューを作ってメンバーと議論していた。当初は私がちゃちゃっと作業して移行しようと考えていたが、私の移行イメージを書き出していたらメンバーからいくつか背景や要望が出てきて、メンバー集めて打ち合わせして合意をとって決断することにした。私が入ってからプロジェクトでの初の意思決定かもしれない。&lt;/p>
&lt;p>既存のソースを読んだらリポジトリ統合は少し工数がかかるとわかって、私がやるよりもメンバーの方がいいだろうと意思決定だけ私が判断して、実作業はメンバーに割り当てた。初めてのマネージャーっぽいお仕事をできたとちょっと自己満足。その議論の過程で monorepo vs polyrepo という比較記事を読んでみた。monorepo から polyrepo に切り出すのは容易だが、polyrepo から monorepo に統合するのは大変ということが書いてあって、まさにプロジェクトの状況と合致してメンバー間で認識合わせした。いま (過剰な) polyrepo で管理されているのを monorepo に統合しようという決断をした。これをやるのにコミット履歴を維持するのはコストがかかるのでソースファイルをコピーして新規ソースとして移行してよいという判断も下した。こういう意思決定は即断即決でやりたい。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">monorepo の対義語として polyrepo という言葉があるのか。勘と経験でリポジトリは複数に分割するので私がやってきたのは polyrepo ではあるのだけど、ちゃんと考えたことはなかったのでアーキテクチャとして議論する余地があるんやろな。 &lt;a href="https://t.co/7LQY4cMteF">https://t.co/7LQY4cMteF&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1587456158356635649?ref_src=twsrc%5Etfw">November 1, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="1on1">1on1&lt;/h2>
&lt;p>マネージャーとして1on1を行う。プロジェクト初期は毎週やって、その後はメンバーの要望を聞きながら隔週でもよいと考えている。1on1 の目的ややり方は様々だが、私が提供できるのは次の3つに含まれることかなと思う。&lt;/p>
&lt;ul>
&lt;li>モチベーションアップ&lt;/li>
&lt;li>業務・組織課題の改善&lt;/li>
&lt;li>能力開発／キャリア支援&lt;/li>
&lt;/ul>
&lt;p>初日から長時間の会議と懇親会などでチームのメンバーと話す機会が多かったので 1on1 もみんな気さくに話してくれてよかった。私はなるべく話さずに聞くことに専念しないといけない。私は圧倒的に自分の思ったことをがんがん話してしまう方なので他人の話を聞く姿勢を身につけるよい機会になると思う。今回は準備不足で雑談がメインではあったものの、1on1 の本なども読みながら勉強していこうと思う。&lt;/p></content></item><item><title>課題管理の取っ掛かり</title><link>/diary/posts/2022/1101/</link><pubDate>Tue, 01 Nov 2022 20:14:44 +0900</pubDate><guid>/diary/posts/2022/1101/</guid><description>0時に寝て6時過ぎに起きた。朝からシャワー浴びてホテルのビッフェ形式の朝ご飯食べてた。初めてのオペレーションだと段取りわからなくて朝ご飯さえうまく配膳できなかった。経験のないことは全然できない。
課題の洗い出し お手伝い先のワークフローや段取りを学ぶ。毎週火曜日がプロジェクトの定例会議。火曜日の終わりに週報を書く。メールで週報を提出するという、いまどきの会社からみると古い会社の慣習にみえる。郷に入れば郷に従えということで私も同様に行う。課題管理で日々の活動をひたすら書いているので週報はいつでもすぐ書けるので私は全く苦にならない。
プロジェクトのリポジトリ構成の変更や課題の洗い出しなどをやっていた。イテレーションは週1でマイルストーンを4週間(月1)で設定して、その区切りでふりかえりなども実施していきたいと思う。コミュニケーションコストが高いことから、私は開発方法論としてスクラムを採用するつもりはない。あくまで自分がやってきた経験による課題管理 + イテレーション開発で製品開発のワークフローを構築したい。お手伝い先ではチームで課題を共有して開発に取り組むといったことはこれまでやってきていないものの、課題管理システムを使って開発者間でやり取りするのは普通にやっていたそうなのでイシューのコメントへの返信がめちゃくちゃ速い。イシュー上で議論していて私がこうしましょうとコメントを書いたら最も速いメンバーは5秒後にリアクションがつくぐらいの速さ。他のメンバーも数十分以内には返信がつくので課題管理システムを使うところのなにかを教える必要はない。課題管理が身に着くのに半年から1年間かかるというのは、他人のアクティビティを監視するという日々の運用 (行動) の変化に半年ぐらいかかると私は想定しているが、このチームはもっと早く課題管理の考え方に適応しそうな気がする。イシューの他人のコメントに5秒でリアクションできる開発者はそうそういない。
私がまだまだプロジェクトの理解が浅いので1-2週間はそのキャッチアップをして、メンバーが遊ばないように課題をどんどん作って優先度付けしてメンバーが担当できるようにしていきたい。</description><content>&lt;p>0時に寝て6時過ぎに起きた。朝からシャワー浴びてホテルのビッフェ形式の朝ご飯食べてた。初めてのオペレーションだと段取りわからなくて朝ご飯さえうまく配膳できなかった。経験のないことは全然できない。&lt;/p>
&lt;h2 id="課題の洗い出し">課題の洗い出し&lt;/h2>
&lt;p>お手伝い先のワークフローや段取りを学ぶ。毎週火曜日がプロジェクトの定例会議。火曜日の終わりに週報を書く。メールで週報を提出するという、いまどきの会社からみると古い会社の慣習にみえる。郷に入れば郷に従えということで私も同様に行う。課題管理で日々の活動をひたすら書いているので週報はいつでもすぐ書けるので私は全く苦にならない。&lt;/p>
&lt;p>プロジェクトのリポジトリ構成の変更や課題の洗い出しなどをやっていた。イテレーションは週1でマイルストーンを4週間(月1)で設定して、その区切りでふりかえりなども実施していきたいと思う。コミュニケーションコストが高いことから、私は開発方法論としてスクラムを採用するつもりはない。あくまで自分がやってきた経験による課題管理 + イテレーション開発で製品開発のワークフローを構築したい。お手伝い先ではチームで課題を共有して開発に取り組むといったことはこれまでやってきていないものの、課題管理システムを使って開発者間でやり取りするのは普通にやっていたそうなのでイシューのコメントへの返信がめちゃくちゃ速い。イシュー上で議論していて私がこうしましょうとコメントを書いたら最も速いメンバーは5秒後にリアクションがつくぐらいの速さ。他のメンバーも数十分以内には返信がつくので課題管理システムを使うところのなにかを教える必要はない。課題管理が身に着くのに半年から1年間かかるというのは、他人のアクティビティを監視するという日々の運用 (行動) の変化に半年ぐらいかかると私は想定しているが、このチームはもっと早く課題管理の考え方に適応しそうな気がする。イシューの他人のコメントに5秒でリアクションできる開発者はそうそういない。&lt;/p>
&lt;p>私がまだまだプロジェクトの理解が浅いので1-2週間はそのキャッチアップをして、メンバーが遊ばないように課題をどんどん作って優先度付けしてメンバーが担当できるようにしていきたい。&lt;/p></content></item><item><title>東京出張</title><link>/diary/posts/2022/1031/</link><pubDate>Mon, 31 Oct 2022 05:03:26 +0900</pubDate><guid>/diary/posts/2022/1031/</guid><description>1時半に寝て3時半に起きて4時半まで仮眠して準備して5時41分に家を出た。出張も3年振りで寝過ごすのが怖くてうまく眠れなかった。
東京出張 3週間以上前に新幹線を予約すると EX早特21ワイド という割引サービスがあって 東京・品川から新神戸だと15,380円が12,630円と2,750円と18%もの割引でお得。6時55分の新幹線の予約をしていた。スマート ex の予約のやり方を忘れてたり、地下鉄のホームを間違えたりしていて朝ちょっと早く出掛けてちょうどよかった。段取りが読めないことは30分以上早く行動するのが安心できてよい。
自己紹介大会 お手伝い先のオフィスに到着し、一息ついてから自己紹介大会になった。1つの会議室に20人ぐらい、リモートからも10人ぐらい参加されていて全社員だったのかな？自己紹介大会をしていただいた。チーム内でのみ行うと考えていたのでたくさん参加者がいて緊張した。30人程度というのはそういうことができるぎりぎりの人数かもしれない。暖かい雰囲気の会社だなと思った。お土産のお菓子 が16個入りで数が足りないことにこのとき気付いた。チームと関係者のみだったら16個もあれば十分と安易な考えだったと気付いた。失敗。
プロジェクトの情報共有 午後から数時間をとってチームメンバーとプロジェクトの情報共有を行った。いまみえてて伺っている内容だけなら私の経験から全体の技術体系ややりたいことも見通すことができて、全部自分1人で開発しても提示された期間内にはできるように思えた。しかし、今回はマネージャーというポジションで若い開発者に実務を担当してもらうことになる。自分が手を動かすのではなく他人にやってもらう新しいキャリアへの挑戦になる。私がビジネスとして取り組みたい課題管理の探求にも力を入れたい。今回のお仕事は千載一遇のチャンスなので集中して取り組んでいきたい。
懇親会 初日は早々に業務を終えて関係者とチームで懇親会を3時間ぐらい行った。昔働いていた会社の同僚・先輩方がいて、やや平均年齢の高いメンバーだったので昔話や同世代の価値観のお話ができて楽しかった。40代以上の人が集まるとすぐ健康の話になって若い人がいると申し訳ない。運動しないと50歳ぐらいになると動けなくなるぞと念を押されたので注意しようと思った。初日は自己紹介、会議、懇親会とたくさんチームのメンバーと話すことができたので初日から随分打ち解けて話せるようになった。感謝。</description><content>&lt;p>1時半に寝て3時半に起きて4時半まで仮眠して準備して5時41分に家を出た。出張も3年振りで寝過ごすのが怖くてうまく眠れなかった。&lt;/p>
&lt;h2 id="東京出張">東京出張&lt;/h2>
&lt;p>3週間以上前に新幹線を予約すると &lt;a href="https://smart-ex.jp/product/hayatoku/ex_21/">EX早特21ワイド&lt;/a> という割引サービスがあって
東京・品川から新神戸だと15,380円が12,630円と2,750円と18%もの割引でお得。6時55分の新幹線の予約をしていた。スマート ex の予約のやり方を忘れてたり、地下鉄のホームを間違えたりしていて朝ちょっと早く出掛けてちょうどよかった。段取りが読めないことは30分以上早く行動するのが安心できてよい。&lt;/p>
&lt;h2 id="自己紹介大会">自己紹介大会&lt;/h2>
&lt;p>お手伝い先のオフィスに到着し、一息ついてから自己紹介大会になった。1つの会議室に20人ぐらい、リモートからも10人ぐらい参加されていて全社員だったのかな？自己紹介大会をしていただいた。チーム内でのみ行うと考えていたのでたくさん参加者がいて緊張した。30人程度というのはそういうことができるぎりぎりの人数かもしれない。暖かい雰囲気の会社だなと思った。&lt;a href="/diary/diary/posts/2022/1030/#神戸お土産探し">お土産のお菓子&lt;/a> が16個入りで数が足りないことにこのとき気付いた。チームと関係者のみだったら16個もあれば十分と安易な考えだったと気付いた。失敗。&lt;/p>
&lt;h2 id="プロジェクトの情報共有">プロジェクトの情報共有&lt;/h2>
&lt;p>午後から数時間をとってチームメンバーとプロジェクトの情報共有を行った。いまみえてて伺っている内容だけなら私の経験から全体の技術体系ややりたいことも見通すことができて、全部自分1人で開発しても提示された期間内にはできるように思えた。しかし、今回はマネージャーというポジションで若い開発者に実務を担当してもらうことになる。自分が手を動かすのではなく他人にやってもらう新しいキャリアへの挑戦になる。私がビジネスとして取り組みたい課題管理の探求にも力を入れたい。今回のお仕事は千載一遇のチャンスなので集中して取り組んでいきたい。&lt;/p>
&lt;h2 id="懇親会">懇親会&lt;/h2>
&lt;p>初日は早々に業務を終えて関係者とチームで懇親会を3時間ぐらい行った。昔働いていた会社の同僚・先輩方がいて、やや平均年齢の高いメンバーだったので昔話や同世代の価値観のお話ができて楽しかった。40代以上の人が集まるとすぐ健康の話になって若い人がいると申し訳ない。運動しないと50歳ぐらいになると動けなくなるぞと念を押されたので注意しようと思った。初日は自己紹介、会議、懇親会とたくさんチームのメンバーと話すことができたので初日から随分打ち解けて話せるようになった。感謝。&lt;/p></content></item></channel></rss>