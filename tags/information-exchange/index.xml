<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>information exchange on forest nook</title><link>/diary/tags/information-exchange/</link><description>Recent content in information exchange on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Thu, 28 Sep 2023 08:23:48 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/information-exchange/index.xml" rel="self" type="application/rss+xml"/><item><title>次開発の要件決めは既定路線</title><link>/diary/posts/2023/0928/</link><pubDate>Thu, 28 Sep 2023 08:23:48 +0900</pubDate><guid>/diary/posts/2023/0928/</guid><description>1時に寝て何度か起きて7時に起きた。エアコンを入れていると夜は寒くなってきた。
feedly pro+ にアップグレード 前からやろうやろうと思っていながら忘れて放置していた feedly のサービスに課金した。基本的に sns をやめていく方針でいるため、情報収集のソースを rss リーダーに戻そうと考えている。これまでも sns と並行で feedly を使ってはいたんだけど、もうちょっと feedly の機能も使ってインプットの効率を上げられないかと考え始めた。Pricing をみると、pro, pro+, enterprise の3つのプランがある。真ん中のプランが推しのようだったのであまり調べもせず Pro+ プランを選択した。いまのところ、検索の機能を使うぐらいでしかないが、そのうち ai 機能的なものも触ってみようと思う。
次開発の優先順位付けと担当者の割り当て 先週の要件発散会議 の続き。発散させた要件を整理して優先順位を決めて、担当者まで割り当ててしまった。課題管理がうまくできている必然なのか、なにも迷わずに自然にこのモジュールは○○さんでといった棲み分けもできて、それぞれが役割を果たせば開発の要件が満たせる体制になっている。全体像としての要件一覧は概ね用意した通りではあったものの、要件や設計の詳細の話しをしていると、私の要件の誤解もいくつかあって、それらは訂正しながら設計していくことにはなる。それでもメンバーも成長してきて、私がお膳立てしなくても、メンバーが自ら考えてうまくいくように設計してくれそうな雰囲気もみえてきたりしていて、それによって、私は面倒で厄介なインフラの再整備に注力できたりもしている。前開発がうまくいったので、なんとなく次開発もうまくいきそうな、始まる前から気を抜き過ぎにも思えるが、もう始まる前から開発が終わっている (うまくいくことが分かっている) ような感覚をもっている。できることは分かっていて、あとはどれだけの量を次開発で実装できるかといった、私が区切りの線をどこに引くかだけ決めればいいんじゃないかと考えている。よいチームになってきたなとちょっと誇らしい。</description><content>&lt;p>1時に寝て何度か起きて7時に起きた。エアコンを入れていると夜は寒くなってきた。&lt;/p>
&lt;h2 id="feedly-pro-にアップグレード">feedly pro+ にアップグレード&lt;/h2>
&lt;p>前からやろうやろうと思っていながら忘れて放置していた feedly のサービスに課金した。基本的に sns をやめていく方針でいるため、情報収集のソースを rss リーダーに戻そうと考えている。これまでも sns と並行で feedly を使ってはいたんだけど、もうちょっと feedly の機能も使ってインプットの効率を上げられないかと考え始めた。&lt;a href="https://feedly.com/i/pro">Pricing&lt;/a> をみると、pro, pro+, enterprise の3つのプランがある。真ん中のプランが推しのようだったのであまり調べもせず &lt;a href="https://feedly.com/i/landing/proPlus">Pro+&lt;/a> プランを選択した。いまのところ、検索の機能を使うぐらいでしかないが、そのうち ai 機能的なものも触ってみようと思う。&lt;/p>
&lt;h2 id="次開発の優先順位付けと担当者の割り当て">次開発の優先順位付けと担当者の割り当て&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0921/">先週の要件発散会議&lt;/a> の続き。発散させた要件を整理して優先順位を決めて、担当者まで割り当ててしまった。課題管理がうまくできている必然なのか、なにも迷わずに自然にこのモジュールは○○さんでといった棲み分けもできて、それぞれが役割を果たせば開発の要件が満たせる体制になっている。全体像としての要件一覧は概ね用意した通りではあったものの、要件や設計の詳細の話しをしていると、私の要件の誤解もいくつかあって、それらは訂正しながら設計していくことにはなる。それでもメンバーも成長してきて、私がお膳立てしなくても、メンバーが自ら考えてうまくいくように設計してくれそうな雰囲気もみえてきたりしていて、それによって、私は面倒で厄介なインフラの再整備に注力できたりもしている。前開発がうまくいったので、なんとなく次開発もうまくいきそうな、始まる前から気を抜き過ぎにも思えるが、もう始まる前から開発が終わっている (うまくいくことが分かっている) ような感覚をもっている。できることは分かっていて、あとはどれだけの量を次開発で実装できるかといった、私が区切りの線をどこに引くかだけ決めればいいんじゃないかと考えている。よいチームになってきたなとちょっと誇らしい。&lt;/p></content></item><item><title>組織やプロジェクト横断的なメトリクスの視覚化</title><link>/diary/posts/2023/0907/</link><pubDate>Thu, 07 Sep 2023 12:19:38 +0900</pubDate><guid>/diary/posts/2023/0907/</guid><description>0時に寝て4時に起きてもう1回ぐらい起きて6時半に起きた。
もうすぐ期限がやってくる。私が担当している issue 対応はあらかた終わってメンバーに「大きいもので見落としある？」って尋ねて「ない」って返ってきたのでもうクローズに向けて調整していく感じ。今週末から月曜日と3日間お休みする (土日も含めて休むというのも変ではあるが) ので一安心。
dirsync 周りのリファクタリング ずっとレビューが放置されていた。おそらくいま go-ldap のプロジェクトで最も活発なメンテナーが夏休みだったのではないかと推測する。昨日帰ってきたようで怒涛のレビューをされていて、私が3週間前に送っていた pr もレビューしてくれた。
Refactor DirSync search process #458 概ね同意してくれて public な関数名をより適切な関数名に変えたところを、1度公開したものは互換性を維持するために deprecated のコメントをして残しておいてと言われたところだけ修正した。修正後、数時間ですぐにマージしてくれた。感謝。
go-ldap にいくつかコントリビュートした機能はうちのプロダクトのシステムに使われていて、それなりの qa テストをやった上で動いているので一定の品質は担保していると思う。直近1年間のコントリビューター を参照すると、私は2番目に貢献しているようにみえる。こういう見える化が自分のモチベーションになるならそれはそれでよいと思う。
組み込みの課題管理のプロダクトを作る上で、個人がみたいメトリクスを簡単に集計できるような機能を提供しようと考えている。それは自分が伸ばしたいスキルやプラクティスに対して、会社やプロダクトを横断的に計測できる仕組みがあるといいと私は考えている。とくにいまどきはプログラマーが転職するのは当たり前だが、転職したら前の会社でやっていたメトリクスがみれないとか、別の会社でのメトリクスと相対比較したいとか、そういうニーズはあるなと私自身が感じているからでもある。
go イベントのパネルディスカッション mercari.go #23 Go1.21 パネルディスカッション オンライン開催 に参加した。視聴者が少なかったのか、youtube のコメント欄でちょくちょくツッコミもいれたら現場で拾ってくれておもしろかった。私が関心のあった話題を3つあげてみる。
gonew の提供 For a long time now, we have heard from Go developers that getting started is often the hardest part.
Experimenting with project templates
go で新規プロジェクトを始めるときにテンプレートからプロジェクトのレイアウトを作ってくれるユーティリティとして gonew というツールが公式から提供されたらしい。知らんかった。私も新しいリポジトリ作るときに標準的なものはファイルを基本コピペしているのでこういうのできれいに作れると嬉しいかもしれない。 ￼
derrors の是非 pkgsite という pkg.</description><content>&lt;p>0時に寝て4時に起きてもう1回ぐらい起きて6時半に起きた。&lt;/p>
&lt;p>もうすぐ期限がやってくる。私が担当している issue 対応はあらかた終わってメンバーに「大きいもので見落としある？」って尋ねて「ない」って返ってきたのでもうクローズに向けて調整していく感じ。今週末から月曜日と3日間お休みする (土日も含めて休むというのも変ではあるが) ので一安心。&lt;/p>
&lt;h2 id="dirsync-周りのリファクタリング">dirsync 周りのリファクタリング&lt;/h2>
&lt;p>ずっとレビューが放置されていた。おそらくいま go-ldap のプロジェクトで最も活発なメンテナーが夏休みだったのではないかと推測する。昨日帰ってきたようで怒涛のレビューをされていて、私が3週間前に送っていた pr もレビューしてくれた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/go-ldap/ldap/pull/458">Refactor DirSync search process #458&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>概ね同意してくれて public な関数名をより適切な関数名に変えたところを、1度公開したものは互換性を維持するために deprecated のコメントをして残しておいてと言われたところだけ修正した。修正後、数時間ですぐにマージしてくれた。感謝。&lt;/p>
&lt;p>go-ldap にいくつかコントリビュートした機能はうちのプロダクトのシステムに使われていて、それなりの qa テストをやった上で動いているので一定の品質は担保していると思う。&lt;a href="https://github.com/go-ldap/ldap/graphs/contributors?from=2022-09-08&amp;amp;to=2023-09-07&amp;amp;type=c">直近1年間のコントリビューター&lt;/a> を参照すると、私は2番目に貢献しているようにみえる。こういう見える化が自分のモチベーションになるならそれはそれでよいと思う。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0907_contributor.png"/>
&lt;/figure>
&lt;p>組み込みの課題管理のプロダクトを作る上で、個人がみたいメトリクスを簡単に集計できるような機能を提供しようと考えている。それは自分が伸ばしたいスキルやプラクティスに対して、会社やプロダクトを横断的に計測できる仕組みがあるといいと私は考えている。とくにいまどきはプログラマーが転職するのは当たり前だが、転職したら前の会社でやっていたメトリクスがみれないとか、別の会社でのメトリクスと相対比較したいとか、そういうニーズはあるなと私自身が感じているからでもある。&lt;/p>
&lt;h2 id="go-イベントのパネルディスカッション">go イベントのパネルディスカッション&lt;/h2>
&lt;p>&lt;a href="https://mercari.connpass.com/event/294164/">mercari.go #23 Go1.21 パネルディスカッション オンライン開催&lt;/a> に参加した。視聴者が少なかったのか、youtube のコメント欄でちょくちょくツッコミもいれたら現場で拾ってくれておもしろかった。私が関心のあった話題を3つあげてみる。&lt;/p>
&lt;h3 id="gonew-の提供">gonew の提供&lt;/h3>
&lt;blockquote>
&lt;p>For a long time now, we have heard from Go developers that getting started is often the hardest part.&lt;/p>
&lt;p>&lt;a href="https://go.dev/blog/gonew">Experimenting with project templates&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>go で新規プロジェクトを始めるときにテンプレートからプロジェクトのレイアウトを作ってくれるユーティリティとして gonew というツールが公式から提供されたらしい。知らんかった。私も新しいリポジトリ作るときに標準的なものはファイルを基本コピペしているのでこういうのできれいに作れると嬉しいかもしれない。
￼&lt;/p>
&lt;h3 id="derrors-の是非">derrors の是非&lt;/h3>
&lt;p>&lt;a href="https://github.com/golang/pkgsite">pkgsite&lt;/a> という pkg.go.dev というサイトのリポジトリの internal として実装されている derrors というパッケージがある。defer を使って必ず関数がエラーを返すときに wrap するという、ユニークな発想で実装されたツール。明示的なコードを書くという go の文化とはあわない気はするけど、ユニークな使い方ではあるのでおもしろい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/golang/pkgsite/blob/master/internal/derrors/derrors.go">https://github.com/golang/pkgsite/blob/master/internal/derrors/derrors.go&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>この延長でエラーが発生したときにレポートを生成する derrors のユーティリティもあったりする。google がやっていることだから、わりと開発者間でもこれと同じものを自前で実装する開発者が増えているといった話しも聞く。&lt;/p>
&lt;h3 id="go-2-はもうリリースされない">go 2 はもうリリースされない&lt;/h3>
&lt;blockquote>
&lt;p>The answer is never. Go 2, in the sense of breaking with the past and no longer compiling old programs, is never going to happen. Go 2 in the sense of being the major revision of Go 1 we started toward in 2017 has already happened.&lt;/p>
&lt;p>&lt;a href="https://go.dev/blog/compat">Backward Compatibility, Go 1.21, and Go 2&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>これまでの go の言語処理系の開発の中で非互換な変更について「go 2 で」とプロポーザルだったり、issue の議論で先送りされてきた。最近コア開発者の Russ Cox 氏が (現時点で) go 2 はもう出ないと宣言した。go は既存のプログラムをコンパイルできない状態で新しいバージョンを出すことはしない。この背景の1つとして、誰もがジェネリクスの導入で go の互換性は崩れると思っていたものが互換性を維持して導入できたことが大きいと思う。(現時点で) go 2 はもうリリースされないらしい。&lt;/p></content></item><item><title>台風の暴風雨にびびった</title><link>/diary/posts/2023/0815/</link><pubDate>Tue, 15 Aug 2023 20:46:29 +0900</pubDate><guid>/diary/posts/2023/0815/</guid><description>台風が来るということだったので昨日は18時には家に戻ってきてゆっくりしていた。とくに何をしていたわけでもないけれど、なぜか眠れなくて3時ぐらいまでは起きていた気がする。あまりちゃんと眠れない中、7時に起きた。朝から外の暴風雨がすごくて人が飛ばされそうな勢いだった。さすがにオフィス行けないなと諦めて家でリモートワークしていた。お昼過ぎぐらいまで暴風雨が続いていたと思う。夕方になってから外に出たら普通の雨になっていてそれからオフィスに来た。
課題管理とプロジェクトマネージメントの話を熱く語る 理由があって先日 チェックした音声データ とは違う音声データを使って昨日の夜に公開された。週末働いてバテていたせいか、昨日は余裕なくて聞けなかったものの、深夜に聞き始めた。よいこと言っているなーと自画自賛しつついくつか間違ったことも話してしまっているけれど、私の話しにそこまで注意して聞く人はいないでしょう。
#81 課題管理とプロジェクトマネージメントの話を熱く語る 課題管理の話題になると、ついつい熱中して話してしまう。「熱く語る」と書かれてしまうのはこの分野に熱意をもっている人が稀だからかな。私はこの1-2年この分野をずっと調べているから、ここで話した10倍ぐらいのコンテンツをもっている。勉強会の資料も数個はあるし、スライドは200枚ぐらいある。そして、調べれば調べるほど私が分かっていないことも分かってきて、もっともっと調べたいことがある。しかし、いまいまはもう体力と気力がない。
エージェントアプリケーション開発 昨日の続き 。昨日レビューをしっかりしてもらってマージした。windows ad サーバーとの dirsync の通信のところを、一切動かさず、既存のコードをインターフェースにあうように作り直したものの、実際に動かしてみると非同期の制御が意図したデータフローでなかったり、windows ad サーバーの知らない仕様があったり、細かいバグもあったりで半日ほどかけてデバッグしながらバグ修正してた。単体レベルのテストでこのバグ数だと、qa レベルだとさらにバグありそうだなという感触だけ確かめた。その後 dirsync の検索も非同期になった方が嬉しいなと思ってちょっとリファクタリングして検証がてら提案してみた。特別なことをしなくても go-ldap の非同期検索を使ってそのまま動くことも確認できたのでこれはこれで役に立つと思う。
Refactor DirSync search process #458</description><content>&lt;p>台風が来るということだったので昨日は18時には家に戻ってきてゆっくりしていた。とくに何をしていたわけでもないけれど、なぜか眠れなくて3時ぐらいまでは起きていた気がする。あまりちゃんと眠れない中、7時に起きた。朝から外の暴風雨がすごくて人が飛ばされそうな勢いだった。さすがにオフィス行けないなと諦めて家でリモートワークしていた。お昼過ぎぐらいまで暴風雨が続いていたと思う。夕方になってから外に出たら普通の雨になっていてそれからオフィスに来た。&lt;/p>
&lt;h2 id="課題管理とプロジェクトマネージメントの話を熱く語る">課題管理とプロジェクトマネージメントの話を熱く語る&lt;/h2>
&lt;p>理由があって先日 &lt;a href="/diary/diary/posts/2023/0811/#podcast-の内容チェック">チェックした音声データ&lt;/a> とは違う音声データを使って昨日の夜に公開された。週末働いてバテていたせいか、昨日は余裕なくて聞けなかったものの、深夜に聞き始めた。よいこと言っているなーと自画自賛しつついくつか間違ったことも話してしまっているけれど、私の話しにそこまで注意して聞く人はいないでしょう。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://podcast.terapyon.net/episodes/0090.html">#81 課題管理とプロジェクトマネージメントの話を熱く語る&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>課題管理の話題になると、ついつい熱中して話してしまう。「熱く語る」と書かれてしまうのはこの分野に熱意をもっている人が稀だからかな。私はこの1-2年この分野をずっと調べているから、ここで話した10倍ぐらいのコンテンツをもっている。勉強会の資料も数個はあるし、スライドは200枚ぐらいある。そして、調べれば調べるほど私が分かっていないことも分かってきて、もっともっと調べたいことがある。しかし、いまいまはもう体力と気力がない。&lt;/p>
&lt;h2 id="エージェントアプリケーション開発">エージェントアプリケーション開発&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0814/#エージェントアプリケーション開発">昨日の続き&lt;/a> 。昨日レビューをしっかりしてもらってマージした。windows ad サーバーとの dirsync の通信のところを、一切動かさず、既存のコードをインターフェースにあうように作り直したものの、実際に動かしてみると非同期の制御が意図したデータフローでなかったり、windows ad サーバーの知らない仕様があったり、細かいバグもあったりで半日ほどかけてデバッグしながらバグ修正してた。単体レベルのテストでこのバグ数だと、qa レベルだとさらにバグありそうだなという感触だけ確かめた。その後 dirsync の検索も非同期になった方が嬉しいなと思ってちょっとリファクタリングして検証がてら提案してみた。特別なことをしなくても go-ldap の非同期検索を使ってそのまま動くことも確認できたのでこれはこれで役に立つと思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/go-ldap/ldap/pull/458">Refactor DirSync search process #458&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>定例会議とそのプラクティス</title><link>/diary/posts/2023/0711/</link><pubDate>Tue, 11 Jul 2023 09:11:19 +0900</pubDate><guid>/diary/posts/2023/0711/</guid><description>22時に寝て1時半に起きて3時半に起きた。それからお風呂入って準備して始発の新幹線に乗った。いつもは夜通し起きているけど、今日は夜に雑談会があるので寝ておくことにした。
新しいやり方で1ヶ月が経過した定例会議 一ヶ月前の定例会議 は変更したばかりで手探りな状況ではあったが、今回は3つのマイルストーンをこなし、チームメンバーも新しいやり方に慣れてきたと言える。いまのところ、開発の情報共有でメンバーが困っているようにはみえない。しかし、タイムボックスの始めと終わりが生産性が上がるといったマイルストーンを短くした成果もあまりみえない。可もなく不可もなくといったところかな。悪いわけではない。
一方で6月末に私が休暇をとったり社員旅行があったりしてその分の業務時間が3日ほど少なかったことが最も大きく影響したと言うべきかもしれない。私は終わってみれば2週間で1つの issue しか fix していなくて、これまでは10以上 fix しているので、今回のマイルストーンの成果がいまいちにみえるのは私が最も働いていないといった方が正しい。いろいろ手掛けてはいるのだけど、調整のタイミングが悪くて fix しなかったという状況がある。それも含めて次の1ヶ月をピークにもっていく開発のメリハリではある。これまでの1ヶ月の進捗をみてメンバーにも3ヶ月でいま想定している機能開発を終わらせるよと共有した。
私が作業するなら余裕でこなせる作業量だけど、実際に作業するのは私じゃなくてメンバーが担当する。今後もメンバーの進捗を注視しながらサポートしていくことになる。他人の進捗をコミットするのはなかなか難しいという思いを抱きながらサポートしていく。
コパイロツトさんと雑談 準備を経て 19時半から南青山のオフィスで雑談してきた。いろいろ準備していったが、モニターが大き過ぎて画面共有しても文字がよくみえなかったり macbook の操作がやりにくかったりして資料はほとんど使わずに雑談してきた。コパイロツトさんはプロジェクトマネジメントそのものをやっているわけではなく、プロジェクトリーダーの意思決定を支援するための取り組みをしているというユニークな業務を提供している。スクラムで例えると、スクラムマスターよりも代理プロダクトオーナー (Proxy Product Owner) に近いという。
How to Succeed as a Proxy Product Owner 定例会議をうまくやればプロジェクトがうまくいくという信念のもと SuperGoodMeetings を提供している。ツールを正しく使ってもらえると意図した通りにうまくいくのだが、問題はツールをそもそも使ってくれないユーザーやチームをどう導くかというところで苦労されているように思えた。これは課題管理システムを使ってくれないという私の問題意識とも通じる。ツールを使いこなすには文章を書くことが重要で、文章を書けない人たちが一定数いるという事実を受け入れて、どのような取り組みをしていくか？これも課題管理と共通の問題であるように思える。課題管理の話しをして背景や意図が通じる人は少ないだけに、その価値観を共有できるというのは稀な機会であった。また 日本ナレッジ・マネジメント学会 という学会があることを教えていただいた。後日加入してみようと思う。
19時半から21時ぐらいまでオフィスで雑談して、その後23時半ぐらいまで飲みに行ってきた。楽しかった。</description><content>&lt;p>22時に寝て1時半に起きて3時半に起きた。それからお風呂入って準備して始発の新幹線に乗った。いつもは夜通し起きているけど、今日は夜に雑談会があるので寝ておくことにした。&lt;/p>
&lt;h2 id="新しいやり方で1ヶ月が経過した定例会議">新しいやり方で1ヶ月が経過した定例会議&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0613/#新しい定例会議の初日">一ヶ月前の定例会議&lt;/a> は変更したばかりで手探りな状況ではあったが、今回は3つのマイルストーンをこなし、チームメンバーも新しいやり方に慣れてきたと言える。いまのところ、開発の情報共有でメンバーが困っているようにはみえない。しかし、タイムボックスの始めと終わりが生産性が上がるといったマイルストーンを短くした成果もあまりみえない。可もなく不可もなくといったところかな。悪いわけではない。&lt;/p>
&lt;p>一方で6月末に私が休暇をとったり社員旅行があったりしてその分の業務時間が3日ほど少なかったことが最も大きく影響したと言うべきかもしれない。私は終わってみれば2週間で1つの issue しか fix していなくて、これまでは10以上 fix しているので、今回のマイルストーンの成果がいまいちにみえるのは私が最も働いていないといった方が正しい。いろいろ手掛けてはいるのだけど、調整のタイミングが悪くて fix しなかったという状況がある。それも含めて次の1ヶ月をピークにもっていく開発のメリハリではある。これまでの1ヶ月の進捗をみてメンバーにも3ヶ月でいま想定している機能開発を終わらせるよと共有した。&lt;/p>
&lt;p>私が作業するなら余裕でこなせる作業量だけど、実際に作業するのは私じゃなくてメンバーが担当する。今後もメンバーの進捗を注視しながらサポートしていくことになる。他人の進捗をコミットするのはなかなか難しいという思いを抱きながらサポートしていく。&lt;/p>
&lt;h2 id="コパイロツトさんと雑談">コパイロツトさんと雑談&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0709/#課題管理の雑談会へ向けての準備">準備を経て&lt;/a> 19時半から南青山のオフィスで雑談してきた。いろいろ準備していったが、モニターが大き過ぎて画面共有しても文字がよくみえなかったり macbook の操作がやりにくかったりして資料はほとんど使わずに雑談してきた。コパイロツトさんはプロジェクトマネジメントそのものをやっているわけではなく、プロジェクトリーダーの意思決定を支援するための取り組みをしているというユニークな業務を提供している。スクラムで例えると、スクラムマスターよりも代理プロダクトオーナー (Proxy Product Owner) に近いという。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/serious-scrum/how-to-succeed-as-a-proxy-product-owner-364c655d20b8">How to Succeed as a Proxy Product Owner&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>定例会議をうまくやればプロジェクトがうまくいくという信念のもと &lt;a href="https://supergoodmeetings.com/">SuperGoodMeetings&lt;/a> を提供している。ツールを正しく使ってもらえると意図した通りにうまくいくのだが、問題はツールをそもそも使ってくれないユーザーやチームをどう導くかというところで苦労されているように思えた。これは課題管理システムを使ってくれないという私の問題意識とも通じる。ツールを使いこなすには文章を書くことが重要で、文章を書けない人たちが一定数いるという事実を受け入れて、どのような取り組みをしていくか？これも課題管理と共通の問題であるように思える。課題管理の話しをして背景や意図が通じる人は少ないだけに、その価値観を共有できるというのは稀な機会であった。また &lt;a href="https://kmsj.org/">日本ナレッジ・マネジメント学会&lt;/a> という学会があることを教えていただいた。後日加入してみようと思う。&lt;/p>
&lt;p>19時半から21時ぐらいまでオフィスで雑談して、その後23時半ぐらいまで飲みに行ってきた。楽しかった。&lt;/p></content></item><item><title>情報共有とメンバー課金の過ち</title><link>/diary/posts/2023/0710/</link><pubDate>Mon, 10 Jul 2023 08:26:01 +0900</pubDate><guid>/diary/posts/2023/0710/</guid><description>1時に寝て4時に起きて5時に起きて7時に起きた。明け方からうまく眠れなくなった。
clang の互換性 openldap 2.5 向けに ldap の overlay モジュールのビルド環境を作っていた。これまでは 2.4 向けのモジュールのみを提供していた。2.5 もそろそろやろうということで先週末からビルド環境の構築に着手していた。rpm のパッケージングの作業をしていて、openldap 2.5 のサーバーのビルドをしていると次のエラーが発生した。
configure:21011: checking for pthread_detach with &amp;lt;pthread.h&amp;gt; configure:21033: clang -o conftest -O2 -g3 -fstack-protector -fPIE -D_REENTRANT -D_THREAD_SAFE -DOPENLDAP_FD_SETSIZE=16384 -DLDAP_CONNECTIONLESS -DSLAPD_META_CLIENT_PR -D_GNU_SOURCE -Wl,-z,relro -Wl,--as-needed -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 conftest.c &amp;gt;&amp;amp;5 clang-15: warning: argument unused during compilation: &amp;#39;-specs=/usr/lib/rpm/redhat/redhat-hardened-ld&amp;#39; [-Wunused-command-line-argument] clang-15: warning: argument unused during compilation: &amp;#39;-specs=/usr/lib/rpm/redhat/redhat-annobin-cc1&amp;#39; [-Wunused-command-line-argument] conftest.c:118:16: error: incompatible pointer to integer conversion passing &amp;#39;void *&amp;#39; to parameter of type &amp;#39;pthread_t&amp;#39; (aka &amp;#39;unsigned long&amp;#39;) [-Wint-conversion] pthread_detach(NULL); ^~~~ /usr/lib64/clang/15.</description><content>&lt;p>1時に寝て4時に起きて5時に起きて7時に起きた。明け方からうまく眠れなくなった。&lt;/p>
&lt;h2 id="clang-の互換性">clang の互換性&lt;/h2>
&lt;p>openldap 2.5 向けに ldap の overlay モジュールのビルド環境を作っていた。これまでは 2.4 向けのモジュールのみを提供していた。2.5 もそろそろやろうということで先週末からビルド環境の構築に着手していた。rpm のパッケージングの作業をしていて、openldap 2.5 のサーバーのビルドをしていると次のエラーが発生した。&lt;/p>
&lt;pre tabindex="0">&lt;code>configure:21011: checking for pthread_detach with &amp;lt;pthread.h&amp;gt;
configure:21033: clang -o conftest -O2 -g3 -fstack-protector -fPIE -D_REENTRANT -D_THREAD_SAFE -DOPENLDAP_FD_SETSIZE=16384 -DLDAP_CONNECTIONLESS -DSLAPD_META_CLIENT_PR -D_GNU_SOURCE -Wl,-z,relro -Wl,--as-needed -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 conftest.c &amp;gt;&amp;amp;5
clang-15: warning: argument unused during compilation: &amp;#39;-specs=/usr/lib/rpm/redhat/redhat-hardened-ld&amp;#39; [-Wunused-command-line-argument]
clang-15: warning: argument unused during compilation: &amp;#39;-specs=/usr/lib/rpm/redhat/redhat-annobin-cc1&amp;#39; [-Wunused-command-line-argument]
conftest.c:118:16: error: incompatible pointer to integer conversion passing &amp;#39;void *&amp;#39; to parameter of type &amp;#39;pthread_t&amp;#39; (aka &amp;#39;unsigned long&amp;#39;) [-Wint-conversion]
pthread_detach(NULL);
^~~~
/usr/lib64/clang/15.0.7/include/stddef.h:89:16: note: expanded from macro &amp;#39;NULL&amp;#39;
# define NULL ((void*)0)
^~~~~~~~~~
/usr/include/pthread.h:269:38: note: passing argument to parameter &amp;#39;__th&amp;#39; here
extern int pthread_detach (pthread_t __th) __THROW;
^
1 error generated.
&lt;/code>&lt;/pre>&lt;p>エラーメッセージを調べていると、どうやら clang 15 に pthread_detach がないといったものらしい。clang 14 のときはビルドできたという。他の oss でも clang のバージョン違いでビルドできないといったことは発生しているらしい。有識者によると、次の修正が clang15 対応らしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://git.openldap.org/openldap/openldap/-/commit/4a9aaf7c2621c2800b163efe928512c20bd422e2">ITS#10011 build: fix compatibility with stricter C99 compilers&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>それ以外はとくに問題なく、ビルドできてモジュールそのものの動作も確認した。あとは rpm のパッケージングと gitlab ci/cd でビルドしたモジュールで動くかどうかの検証だけ。&lt;/p>
&lt;h2 id="メンバー課金による過ち">メンバー課金による過ち&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0709/">昨日 SuperGoodMeetings をさわってみた&lt;/a> ときにチーム管理の機能があって、任意のユーザーを招待するのは無制限で課金されないと書いてあった。「なるほどね。」とピンと来てコパイロツトの中の人に次のような所感を共有してみた。&lt;/p>
&lt;blockquote>
&lt;p>招待可能ユーザー数を無制限にしているのはよい視点だと私は思います。メンバー課金にすると、経費を削減するために共有アカウントを利用したり、あまり使わない人にはアカウントを作らないようになって情報共有の側面から望ましくない状態になる。一昔前のオンプレ時代は業務に使うシステムのアカウントは全社員がもっていて当たり前だったのが、クラウドサービスを使うようになってメンバー課金の経費削減から全社員がもたないようになりつつある (とくに中小企業) のは、情報共有の視点から過去よりも悪化しているという問題意識を私はもっています。&lt;/p>
&lt;/blockquote>
&lt;p>コパイロツトさんもまったく同じ課題意識をもっていてメンバー課金しない料金体系にしているとのこと。鶏と卵みたいな話しだけど、組織には情報共有のためにアカウントのお金をケチんなと言いたいし、クラウドサービスの会社も料金体系を1人ずつじゃなくて、30人、100人、1000人といったある程度の階段でいいんじゃない？とか思ったりする。メンバー課金じゃないクラウドサービスとして basecamp や backlog などがある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://basecamp.com/pricing">https://basecamp.com/pricing&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://backlog.com/ja/pricing/">https://backlog.com/ja/pricing/&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>メリハリの付け直し</title><link>/diary/posts/2023/0613/</link><pubDate>Tue, 13 Jun 2023 04:21:59 +0900</pubDate><guid>/diary/posts/2023/0613/</guid><description>23時ぐらいまで作業して、1時から2時ぐらいまで仮眠した。いつも通り普通に寝ないで始発の新幹線に乗って寝てた。寝ていて体があちこち痛くて、月に1回ではあるけどこの生活を続けるのもよくないかもなと思い始めた。
新しい定例会議の初日 6月から新しい開発がスタートして 新しい定例会議の進め方 に変更した。ふりかえりと情報共有の定例を1時間に詰め込むので時間が足りないかも？と時間を意識しながら進めた。その甲斐もあってか、ちょうどぴったり1時間におさまった。これも一種のパーキンソンの法則のようなものが働いているのかもしれない。
仕事は、完成までに利用可能な時間を使い果たすように拡大していく
パーキンソンの法則
メンバーが2人なので機能開発が2つずつ並行に進む。1つは開発が完了し、もう1つも大半は完了している。完了できなかったことは残念だが、私からみても着実にステップアップしているのでそれほど問題視していない。ドッグフードテスト の導入も完了こそしなかったが、これも社内インフラの都合や管理者の工数を調整してもらったりするので着実に進捗しているのであれば、それほど厳密にスケジュール管理しなくてよいのかもしれない。
イテレーション開発のルール的には優先度を付けた issue はそのイテレーション内でやり切るという目標をもつように促している。但し、まだ開発の序盤であるので現時点ではそれほど重要ではない。これも1つのメリハリだとみなすこともできる。また様々な状況の変化や調整をしながら期限を意識して働くのは一定のスキルと自律的な行動を取れる開発者に限られる。
なんのために働くかの答えを見い出せていない若い人にそれを求めるのもまた違うなと思えて、この状況を作り出しているのは、働く目的そのものを導くようなリーダーシップを取れていない私自身の責任だと実感した。つまり私が自身の規律を緩めているのがメンバーに伝わって、結果的にスケジュールを守ろうとする最後の底力を支えられていないと思えた。開発の仕切り直しに私自身も切り替えていかないといけない。
厄介なインフラの問題 x 2 ちょうどインフラに関する、特定の状況においてパフォーマンスが劇的に劣化したり、意図しない振る舞いをしたりする事象を2つ確認している。これこそ私が面倒をみる issue だなと思って着手した。m2 macbook はこういったインフラの再現環境を作るのに向いていない。2022年に virtualbox 7.0 で m1/m2 に対応したという changelog があるけど、少し前にインストールしようとするとエラーになって動かなくて諦めた。
macOS host: Providing a Developer Preview package for systems with an Apple silicon CPU. This is unsupported work in progress, and is known to have very modest performance.
Changelog for VirtualBox 7.0
アプリケーションのコンテナイメージも、現時点では amd64 向けにしか提供していないため、どのみちコンテナでの検証が必要になったら m2 macbook では動作させられない。そういう厄介な issue を抱えた。帰ったらオフィスのデスクトップマシンで再現環境を作るところから始める。</description><content>&lt;p>23時ぐらいまで作業して、1時から2時ぐらいまで仮眠した。いつも通り普通に寝ないで始発の新幹線に乗って寝てた。寝ていて体があちこち痛くて、月に1回ではあるけどこの生活を続けるのもよくないかもなと思い始めた。&lt;/p>
&lt;h2 id="新しい定例会議の初日">新しい定例会議の初日&lt;/h2>
&lt;p>6月から新しい開発がスタートして &lt;a href="/diary/diary/posts/2023/0607/">新しい定例会議の進め方&lt;/a> に変更した。ふりかえりと情報共有の定例を1時間に詰め込むので時間が足りないかも？と時間を意識しながら進めた。その甲斐もあってか、ちょうどぴったり1時間におさまった。これも一種のパーキンソンの法則のようなものが働いているのかもしれない。&lt;/p>
&lt;blockquote>
&lt;p>仕事は、完成までに利用可能な時間を使い果たすように拡大していく&lt;/p>
&lt;p>&lt;a href="https://asana.com/ja/resources/parkinsons-law">パーキンソンの法則&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>メンバーが2人なので機能開発が2つずつ並行に進む。1つは開発が完了し、もう1つも大半は完了している。完了できなかったことは残念だが、私からみても着実にステップアップしているのでそれほど問題視していない。&lt;a href="/diary/diary/posts/2023/0526/#ドッグフードテストと運用談義">ドッグフードテスト&lt;/a> の導入も完了こそしなかったが、これも社内インフラの都合や管理者の工数を調整してもらったりするので着実に進捗しているのであれば、それほど厳密にスケジュール管理しなくてよいのかもしれない。&lt;/p>
&lt;p>イテレーション開発のルール的には優先度を付けた issue はそのイテレーション内でやり切るという目標をもつように促している。但し、まだ開発の序盤であるので現時点ではそれほど重要ではない。これも1つのメリハリだとみなすこともできる。また様々な状況の変化や調整をしながら期限を意識して働くのは一定のスキルと自律的な行動を取れる開発者に限られる。&lt;/p>
&lt;p>なんのために働くかの答えを見い出せていない若い人にそれを求めるのもまた違うなと思えて、この状況を作り出しているのは、働く目的そのものを導くようなリーダーシップを取れていない私自身の責任だと実感した。つまり私が自身の規律を緩めているのがメンバーに伝わって、結果的にスケジュールを守ろうとする最後の底力を支えられていないと思えた。開発の仕切り直しに私自身も切り替えていかないといけない。&lt;/p>
&lt;h2 id="厄介なインフラの問題-x-2">厄介なインフラの問題 x 2&lt;/h2>
&lt;p>ちょうどインフラに関する、特定の状況においてパフォーマンスが劇的に劣化したり、意図しない振る舞いをしたりする事象を2つ確認している。これこそ私が面倒をみる issue だなと思って着手した。m2 macbook はこういったインフラの再現環境を作るのに向いていない。2022年に virtualbox 7.0 で m1/m2 に対応したという changelog があるけど、少し前にインストールしようとするとエラーになって動かなくて諦めた。&lt;/p>
&lt;blockquote>
&lt;p>macOS host: Providing a Developer Preview package for systems with an Apple silicon CPU. This is unsupported work in progress, and is known to have very modest performance.&lt;/p>
&lt;p>&lt;a href="https://www.virtualbox.org/wiki/Changelog-7.0">Changelog for VirtualBox 7.0&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>アプリケーションのコンテナイメージも、現時点では amd64 向けにしか提供していないため、どのみちコンテナでの検証が必要になったら m2 macbook では動作させられない。そういう厄介な issue を抱えた。帰ったらオフィスのデスクトップマシンで再現環境を作るところから始める。&lt;/p></content></item><item><title>ぼくのかんがえたさいきょうの定例会議</title><link>/diary/posts/2023/0607/</link><pubDate>Wed, 07 Jun 2023 18:48:14 +0900</pubDate><guid>/diary/posts/2023/0607/</guid><description>1時に寝て何度か起きて8時に起きた。昨日ブログを書き終えてほっとしたのか、珍しく寝坊した。
課題管理の定例会議の進め方 5月31日から 新しい開発がスタート していてイテレーションを2週間に、そして定例会議も同様に隔週とした。その狙いは先日の日記に書いてあるが、これまで毎週やっていた定例会議の進め方はあわないので新規に会議の進め方を刷新した。これまでふりかえりと定例会議を別にやっていたのを1つにした。またふりかえりの会議のときに、ふりかえり作業そのものもやっていたのを、定例までに事前にメンバーがそれぞれやってきて、結果を定例のときに共有しようというやり方に改めた。ネガティブなふりかえりは発生時点で課題管理システムに登録してフィルター可能というのがアピールポイント。いまチームのメンバーが3人なのでこれでも会議は1時間でおさまる見積もり。メンバーが増えたらふりかえりと定例は別の時間にわけてやるかな？会議時間が長くなるとダレるので1つの会議は1時間以内で締めるというのは徹底したい。
現マイルストーンのふりかえり (目安時間: 25分) fun/done/learn を使ったポジティブなふりかえり で共有 ネガティブなふりかえりは課題管理システムに Postmortem ラベルを付与して issue 登録したものを共有 次マイルストーンでやることの確認 (目安時間: 25分) 課題管理システムにある次マイルストーンでフィルターした issue を共有 issue になっていないもので聞きたいことや分からないことを聞く (目安時間: 10分) メンバーが自由に意見を表明 雑談 (余り時間) メンバーが自由に雑談 事前準備を済ましてから、スクラムでいうところの、レトロスペクティブとプランニングを同時にやるといったもの。実践としてうまくいくかどうか、今回の開発で試してみる。</description><content>&lt;p>1時に寝て何度か起きて8時に起きた。昨日ブログを書き終えてほっとしたのか、珍しく寝坊した。&lt;/p>
&lt;h2 id="課題管理の定例会議の進め方">課題管理の定例会議の進め方&lt;/h2>
&lt;p>5月31日から &lt;a href="/diary/diary/posts/2023/0530/#落ち穂拾いの終了">新しい開発がスタート&lt;/a> していてイテレーションを2週間に、そして定例会議も同様に隔週とした。その狙いは先日の日記に書いてあるが、これまで毎週やっていた定例会議の進め方はあわないので新規に会議の進め方を刷新した。これまでふりかえりと定例会議を別にやっていたのを1つにした。またふりかえりの会議のときに、ふりかえり作業そのものもやっていたのを、定例までに事前にメンバーがそれぞれやってきて、結果を定例のときに共有しようというやり方に改めた。ネガティブなふりかえりは発生時点で課題管理システムに登録してフィルター可能というのがアピールポイント。いまチームのメンバーが3人なのでこれでも会議は1時間でおさまる見積もり。メンバーが増えたらふりかえりと定例は別の時間にわけてやるかな？会議時間が長くなるとダレるので1つの会議は1時間以内で締めるというのは徹底したい。&lt;/p>
&lt;ol>
&lt;li>現マイルストーンのふりかえり (目安時間: 25分)
&lt;ol>
&lt;li>&lt;a href="/diary/diary/posts/2022/1129/">fun/done/learn を使ったポジティブなふりかえり&lt;/a> で共有&lt;/li>
&lt;li>ネガティブなふりかえりは課題管理システムに &lt;code>Postmortem&lt;/code> ラベルを付与して issue 登録したものを共有&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>次マイルストーンでやることの確認 (目安時間: 25分)
&lt;ol>
&lt;li>課題管理システムにある次マイルストーンでフィルターした issue を共有&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>issue になっていないもので聞きたいことや分からないことを聞く (目安時間: 10分)
&lt;ol>
&lt;li>メンバーが自由に意見を表明&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>雑談 (余り時間)
&lt;ol>
&lt;li>メンバーが自由に雑談&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>事前準備を済ましてから、スクラムでいうところの、レトロスペクティブとプランニングを同時にやるといったもの。実践としてうまくいくかどうか、今回の開発で試してみる。&lt;/p></content></item><item><title>合間の遊撃</title><link>/diary/posts/2023/0131/</link><pubDate>Tue, 31 Jan 2023 13:01:15 +0900</pubDate><guid>/diary/posts/2023/0131/</guid><description>0時に寝て4時に起きて7時に起きた。晩ご飯に餃子の中身とニラと卵を炒めたものを食べてわりとよく眠れた。
遊撃の開発 ちょっと前に自分が 遊撃としての役割 を担っているのではないかと書いた。ある機能開発で javascript を用いてカスタムスクリプト を実行できるようにしたい。スポット的に私の手が空いていて手伝ってと言われたので実装している。開発していると集中しているから時間が経つのが早い。あとコードレビューのときよりもしっかりコードを読み込んだり、振る舞いをシミュレーションしたりするから、コードレビューのときに気付かなかったことや見逃したことにもい気付く。そして、それもついでにリファクタリングしていく。チームのメンバーに、過去に書いたコードをどんどん書き直すのはよいことだというのを、遊撃しながら教えていければいいなとも思う。課題管理システムの issue に調べたことや設計の素案のようなコメントをしていると、メンバーもコメントしてくれたりして、考え方や検証したことをどんどんテキストにして書いていく、言語化していくことの良さも、遊撃の中から学んでくれたりすると嬉しい。開発しながら、メンバーの教育や指導をどう進めるのがいいかな？とかも考えながら働いているのがマネージャーにやっているなという自己満足にもなっていたりする。だいぶマネージャーとしても自分自身にも慣れてきたんじゃないかと思う。</description><content>&lt;p>0時に寝て4時に起きて7時に起きた。晩ご飯に餃子の中身とニラと卵を炒めたものを食べてわりとよく眠れた。&lt;/p>
&lt;h2 id="遊撃の開発">遊撃の開発&lt;/h2>
&lt;p>ちょっと前に自分が &lt;a href="/diary/diary/posts/2023/0120/#隔週の雑談">遊撃としての役割&lt;/a> を担っているのではないかと書いた。ある機能開発で &lt;a href="/diary/diary/posts/2023/0126/">javascript を用いてカスタムスクリプト&lt;/a> を実行できるようにしたい。スポット的に私の手が空いていて手伝ってと言われたので実装している。開発していると集中しているから時間が経つのが早い。あとコードレビューのときよりもしっかりコードを読み込んだり、振る舞いをシミュレーションしたりするから、コードレビューのときに気付かなかったことや見逃したことにもい気付く。そして、それもついでにリファクタリングしていく。チームのメンバーに、過去に書いたコードをどんどん書き直すのはよいことだというのを、遊撃しながら教えていければいいなとも思う。課題管理システムの issue に調べたことや設計の素案のようなコメントをしていると、メンバーもコメントしてくれたりして、考え方や検証したことをどんどんテキストにして書いていく、言語化していくことの良さも、遊撃の中から学んでくれたりすると嬉しい。開発しながら、メンバーの教育や指導をどう進めるのがいいかな？とかも考えながら働いているのがマネージャーにやっているなという自己満足にもなっていたりする。だいぶマネージャーとしても自分自身にも慣れてきたんじゃないかと思う。&lt;/p></content></item><item><title>sveltekit の ssr を理解した</title><link>/diary/posts/2023/0119/</link><pubDate>Thu, 19 Jan 2023 08:37:07 +0900</pubDate><guid>/diary/posts/2023/0119/</guid><description>2時に寝て7時に起きた。キングダムの新刊を読みながら寝てた。
sveltekit の初期プロジェクト 技術選定で svelte を採用した ので昨日から SvelteKit でアプリケーション開発に着手した。Project structure にもだいぶ慣れてきた。開発初期はディレクトリ構成に迷うのでドキュメントに標準的な階層構造を書いてくれているのは素晴らしい。Routing もキモいけど、ssr の場合は +page.svelte と +page.server.ts を設けるのに慣れてきた。ssr で proxy 的に web api 呼び出しも簡単に実装した。知らないフレームワークで開発するのは学ぶところが多くて楽しい。区切りのよいところで初期開発の issue はクローズして明日は gitlab ci/cd でテスト環境にデプロイするのをやってみる。
課題管理の雑談 過去に働いていた会社の同僚と課題管理について雑談した。web3 系の会社で働いているのでブロックチェーンや dao 周りの話しも一緒にしたりしていた。一回りぐらい私より若いと思うけれど、私よりはるかに優秀な開発者だなぁと感じながら話しを聞いていた。いま一緒に働いても足手まといになるんじゃないかと思えて身が引き締まる。いくつか話題の中で学んだことを抜き出してみる。
自分の知識やスキルを共有する手段の1つとしてペアワークをやる ペアワークを通してメンバーとの信頼関係も構築していく いまもっている知識やスキルには個人差はあるが、模倣の能力が低い人をみたことがない 上位の意思決定者から低いレベルにあわせる (標準化など) ように指示がきたときは反発する ユーザーファーストが第一ならレベルを下げるような指示はおかしい 「誰を向いて仕事しているの？」と説得する プロジェクトにおいて目的を明確化せずに始めてしまうのは本当によくない 日本人は上意下達で行動するように教育されてきた弊害ではないか 目的を明確化するのは意見を言うことと同じである レイヤーが上がるほどエモい話しになって人生観や哲学の話しになっていく チームのモチベーションを維持する上でも有効ではないか 私はコミュ障だから他人と一緒に作業しようという発想がそもそもなかった。こちらから一緒にやろうと声をかけて知識やスキルを共有する手段もあるのかと気付いた。これまでも何人もの人にいろんな話しを伺っている。他人のノウハウを聞くだけでもこの雑談をすることに意味はあると思えた。</description><content>&lt;p>2時に寝て7時に起きた。キングダムの新刊を読みながら寝てた。&lt;/p>
&lt;h2 id="sveltekit-の初期プロジェクト">sveltekit の初期プロジェクト&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0117/#svelte-アプリの開発に着手">技術選定で svelte を採用した&lt;/a> ので昨日から &lt;a href="https://kit.svelte.dev/">SvelteKit&lt;/a> でアプリケーション開発に着手した。&lt;a href="https://kit.svelte.dev/docs/project-structure">Project structure&lt;/a> にもだいぶ慣れてきた。開発初期はディレクトリ構成に迷うのでドキュメントに標準的な階層構造を書いてくれているのは素晴らしい。&lt;a href="https://kit.svelte.dev/docs/routing">Routing&lt;/a> もキモいけど、ssr の場合は &lt;code>+page.svelte&lt;/code> と &lt;code>+page.server.ts&lt;/code> を設けるのに慣れてきた。ssr で proxy 的に web api 呼び出しも簡単に実装した。知らないフレームワークで開発するのは学ぶところが多くて楽しい。区切りのよいところで初期開発の issue はクローズして明日は gitlab ci/cd でテスト環境にデプロイするのをやってみる。&lt;/p>
&lt;h2 id="課題管理の雑談">課題管理の雑談&lt;/h2>
&lt;p>過去に働いていた会社の同僚と課題管理について雑談した。web3 系の会社で働いているのでブロックチェーンや dao 周りの話しも一緒にしたりしていた。一回りぐらい私より若いと思うけれど、私よりはるかに優秀な開発者だなぁと感じながら話しを聞いていた。いま一緒に働いても足手まといになるんじゃないかと思えて身が引き締まる。いくつか話題の中で学んだことを抜き出してみる。&lt;/p>
&lt;ul>
&lt;li>自分の知識やスキルを共有する手段の1つとしてペアワークをやる
&lt;ul>
&lt;li>ペアワークを通してメンバーとの信頼関係も構築していく&lt;/li>
&lt;li>いまもっている知識やスキルには個人差はあるが、模倣の能力が低い人をみたことがない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>上位の意思決定者から低いレベルにあわせる (標準化など) ように指示がきたときは反発する
&lt;ul>
&lt;li>ユーザーファーストが第一ならレベルを下げるような指示はおかしい&lt;/li>
&lt;li>「誰を向いて仕事しているの？」と説得する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>プロジェクトにおいて目的を明確化せずに始めてしまうのは本当によくない
&lt;ul>
&lt;li>日本人は上意下達で行動するように教育されてきた弊害ではないか&lt;/li>
&lt;li>目的を明確化するのは意見を言うことと同じである
&lt;ul>
&lt;li>レイヤーが上がるほどエモい話しになって人生観や哲学の話しになっていく&lt;/li>
&lt;li>チームのモチベーションを維持する上でも有効ではないか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>私はコミュ障だから他人と一緒に作業しようという発想がそもそもなかった。こちらから一緒にやろうと声をかけて知識やスキルを共有する手段もあるのかと気付いた。これまでも何人もの人にいろんな話しを伺っている。他人のノウハウを聞くだけでもこの雑談をすることに意味はあると思えた。&lt;/p></content></item><item><title>出張前日の準備</title><link>/diary/posts/2023/0108/</link><pubDate>Sun, 08 Jan 2023 15:58:33 +0900</pubDate><guid>/diary/posts/2023/0108/</guid><description>1時に寝て8時に起きた。午前中は洗濯して普通にだらだらしてた。
課題管理勉強会の資料作り 12月から読み始めた Gergely Orosz 氏の記事 をベースに来週の勉強会の資料を作った。もう少し推敲はするが、スライドで全32枚になった。ブログ記事の内容を解説するスライドなので文字が多い。1時間の枠には十分に耐えそう。この資料と前回の勉強会の資料の2つを知人とオンライン飲み会するときの話しのつまみに使う。毎月、課題管理の文脈で勉強会を行う労力はそこそこあるけれど、コンテンツが溜まっていくのは未来への投資になるので困ることは何もない。課題管理の勉強会があるという機会そのものに感謝する。
フリーランス、４０歳の壁 フリーランス、４０歳の壁 の中盤を読んだ。
「第5章 田中圭一 サラリーマンとマンガ家を両立させる男。」 「第6章 『電脳マヴォ』と私の未来。」 「第7章 FROGMAN アニメ界の革命児が直面した「30歳の壁」。」 平日はサラリーマンで営業として働き、休日を利用してマンガを描くという働き方を30年以上している田中圭一さんのインタビューがある。30年以上と聞くとすごいことでその実績は否定しようがないと素直に思う。一方でうちは兼業農家だったので平日はサラリーマン、休日に農業をするのは普通だった。父はその生活を42年間していた。またうつ病になった経緯のエピソードがある。ある会社に転職して最初のうちはうまくいったが、5年目ぐらいで行き詰まってしまった。技術系の会社でプログラミングを学ばないといけないという空気があったらしい。会社の仕事があわないと田中氏は思いつつも転職する自信をもてず、そのまま10年いてうつ病になってしまったとのこと。これが3ヶ月だったら大変だったんだなと思う。しかし、厳しい言い方だけど、行き詰まりは仕方ないとしても5年もなにも対策しなかったの？と私なら思ってしまう。ここだけ読むと未知のことやスキル不足を勉強しない人の典型例だと思えてしまった。本業で成果を出せていないのに転職できないから会社に残り続ける人たちを私も少なからずみてきた。助言や提案をしても、例外なく、そういう人たちはできない理由を熱心に説明し、自ら努力してスキルを習得しようとはしなかった。できる・できない以前にやろうともしなかったのをみてきた。
著者が運営している 電脳マヴォ という web マンガのサイトがある。たまたまリンクをみつけた 良い祖母と孫の話 を読んでみたら衝撃をうけた。こういう才能がたくさん埋もれているというのは理解できる。一方で漫画を描くことが以前よりも一般化したのだとも私は思う。どんな業界も人気が出たり市場規模が大きくなるにつれその創作者人口は増える。電脳マヴォを創刊したのが2012年だったらしく、奇しくもその頃が「ネットマンガ元年」と呼べるらしい。となりのヤングジャンプ や マンガボックス など、私が知っている web マンガのサービスも出てくる。
フリーランスの最大の営業は、仕事そのものです。 版元編集者は、そのフリーが実際に行った仕事を見て、次の仕事を発注するのです。向こうから来る仕事であれば、意に沿わない仕事は、断ることもできます。持ち込みだと、まさかこちらから断るわけにはいきません。
この考え方は私も同意する。取り引きをしている会社とのお仕事を高い品質で行うことがもっとも重要だと私も考えている。
FROGMAN さんという方を私はまったく知らなかったけれど、インターネットの黎明期 (2000年頃) に動画配信サービスをやろうとして FLASH アニメで一山当てた実業家らしい。その経歴も破天荒にみえる。もともと映画業界で働いていて、映画業界の没落とともに半ば強制的にフリーランス (リストラ) となり、業界としての先行きは不透明だった。島根の山奥に移住し、インターネットに動画を配信する仕事なら島根でもできるだろうと考えたとのこと。これを2000年頃に実施しているのだから素晴らしい先見性と言える。その延長でアニメ制作をするにいたったのも、奥さんが妊娠して出産費用が必要となり、1人で仕事を完遂できればコスト削減できるというアイディアでアニメ制作を始めたとのこと。実写は最低でも数人のスタッフを必要とするが、アニメなら1人でできるのではないか。実際に初期のインターネットの FLASH アニメを1人で作って人気を博して事業が軌道になったらしい。スポンサーを募らず、徹底したコスト意識から権利をスポンサーに渡さないことを意識していた。2006年頃に youtube が台頭したときも、他のアニメ会社が映像を勝手にあげられるのを嫌ったのに対して、FROGMAN さんの会社は自分たちが権利をもっているので自分たちの作品を率先して配信し、時流にも乗ったようにみえる。FROGMAN さんは絵もろくに描いたことがなく、アニメマニアでもないにも関わらず、まさにビジネスモデルの勝利と言える。また実写業界での経験があったから普通のアニメ会社が作るようなアニメとは異なる作品を作り、アニメ落語・アニメ漫才というジャンルそのものを作ってしまったという。きっかけは家賃を半年間滞納して出産費用を捻出するためという、ピンチをチャンスに変えた事例の1つとして、また製作委員会方式というアニメ業界のモデルとは異なるビジネスモデルを考案して実現してしまったところもサクセスストーリーとして痛快に読めた。</description><content>&lt;p>1時に寝て8時に起きた。午前中は洗濯して普通にだらだらしてた。&lt;/p>
&lt;h2 id="課題管理勉強会の資料作り">課題管理勉強会の資料作り&lt;/h2>
&lt;p>12月から読み始めた &lt;a href="/diary/diary/posts/2023/0102/#ビッグテックの技術系プロジェクトのマネジメント方法と興味深いスクラムの不採用">Gergely Orosz 氏の記事&lt;/a> をベースに来週の勉強会の資料を作った。もう少し推敲はするが、スライドで全32枚になった。ブログ記事の内容を解説するスライドなので文字が多い。1時間の枠には十分に耐えそう。この資料と前回の勉強会の資料の2つを知人とオンライン飲み会するときの話しのつまみに使う。毎月、課題管理の文脈で勉強会を行う労力はそこそこあるけれど、コンテンツが溜まっていくのは未来への投資になるので困ることは何もない。課題管理の勉強会があるという機会そのものに感謝する。&lt;/p>
&lt;h2 id="フリーランス４０歳の壁">フリーランス、４０歳の壁&lt;/h2>
&lt;p>&lt;a href="https://www.diamond.co.jp/book/9784478065723.html">フリーランス、４０歳の壁&lt;/a> の中盤を読んだ。&lt;/p>
&lt;ul>
&lt;li>「第5章 田中圭一 サラリーマンとマンガ家を両立させる男。」&lt;/li>
&lt;li>「第6章 『電脳マヴォ』と私の未来。」&lt;/li>
&lt;li>「第7章 FROGMAN アニメ界の革命児が直面した「30歳の壁」。」&lt;/li>
&lt;/ul>
&lt;p>平日はサラリーマンで営業として働き、休日を利用してマンガを描くという働き方を30年以上している田中圭一さんのインタビューがある。30年以上と聞くとすごいことでその実績は否定しようがないと素直に思う。一方でうちは兼業農家だったので平日はサラリーマン、休日に農業をするのは普通だった。父はその生活を42年間していた。またうつ病になった経緯のエピソードがある。ある会社に転職して最初のうちはうまくいったが、5年目ぐらいで行き詰まってしまった。技術系の会社でプログラミングを学ばないといけないという空気があったらしい。会社の仕事があわないと田中氏は思いつつも転職する自信をもてず、そのまま10年いてうつ病になってしまったとのこと。これが3ヶ月だったら大変だったんだなと思う。しかし、厳しい言い方だけど、行き詰まりは仕方ないとしても5年もなにも対策しなかったの？と私なら思ってしまう。ここだけ読むと未知のことやスキル不足を勉強しない人の典型例だと思えてしまった。本業で成果を出せていないのに転職できないから会社に残り続ける人たちを私も少なからずみてきた。助言や提案をしても、例外なく、そういう人たちはできない理由を熱心に説明し、自ら努力してスキルを習得しようとはしなかった。できる・できない以前にやろうともしなかったのをみてきた。&lt;/p>
&lt;p>著者が運営している &lt;a href="https://mavo.takekuma.jp/">電脳マヴォ&lt;/a> という web マンガのサイトがある。たまたまリンクをみつけた &lt;a href="https://mavo.takekuma.jp/title.php?title=48">良い祖母と孫の話&lt;/a> を読んでみたら衝撃をうけた。こういう才能がたくさん埋もれているというのは理解できる。一方で漫画を描くことが以前よりも一般化したのだとも私は思う。どんな業界も人気が出たり市場規模が大きくなるにつれその創作者人口は増える。電脳マヴォを創刊したのが2012年だったらしく、奇しくもその頃が「ネットマンガ元年」と呼べるらしい。&lt;a href="https://tonarinoyj.jp/">となりのヤングジャンプ&lt;/a> や &lt;a href="https://www.mangabox.me/">マンガボックス&lt;/a> など、私が知っている web マンガのサービスも出てくる。&lt;/p>
&lt;blockquote>
&lt;p>フリーランスの最大の営業は、仕事そのものです。 版元編集者は、そのフリーが実際に行った仕事を見て、次の仕事を発注するのです。向こうから来る仕事であれば、意に沿わない仕事は、断ることもできます。持ち込みだと、まさかこちらから断るわけにはいきません。&lt;/p>
&lt;/blockquote>
&lt;p>この考え方は私も同意する。取り引きをしている会社とのお仕事を高い品質で行うことがもっとも重要だと私も考えている。&lt;/p>
&lt;p>FROGMAN さんという方を私はまったく知らなかったけれど、インターネットの黎明期 (2000年頃) に動画配信サービスをやろうとして FLASH アニメで一山当てた実業家らしい。その経歴も破天荒にみえる。もともと映画業界で働いていて、映画業界の没落とともに半ば強制的にフリーランス (リストラ) となり、業界としての先行きは不透明だった。島根の山奥に移住し、インターネットに動画を配信する仕事なら島根でもできるだろうと考えたとのこと。これを2000年頃に実施しているのだから素晴らしい先見性と言える。その延長でアニメ制作をするにいたったのも、奥さんが妊娠して出産費用が必要となり、1人で仕事を完遂できればコスト削減できるというアイディアでアニメ制作を始めたとのこと。実写は最低でも数人のスタッフを必要とするが、アニメなら1人でできるのではないか。実際に初期のインターネットの FLASH アニメを1人で作って人気を博して事業が軌道になったらしい。スポンサーを募らず、徹底したコスト意識から権利をスポンサーに渡さないことを意識していた。2006年頃に youtube が台頭したときも、他のアニメ会社が映像を勝手にあげられるのを嫌ったのに対して、FROGMAN さんの会社は自分たちが権利をもっているので自分たちの作品を率先して配信し、時流にも乗ったようにみえる。FROGMAN さんは絵もろくに描いたことがなく、アニメマニアでもないにも関わらず、まさにビジネスモデルの勝利と言える。また実写業界での経験があったから普通のアニメ会社が作るようなアニメとは異なる作品を作り、アニメ落語・アニメ漫才というジャンルそのものを作ってしまったという。きっかけは家賃を半年間滞納して出産費用を捻出するためという、ピンチをチャンスに変えた事例の1つとして、また製作委員会方式というアニメ業界のモデルとは異なるビジネスモデルを考案して実現してしまったところもサクセスストーリーとして痛快に読めた。&lt;/p></content></item><item><title>課題管理の話題で発散</title><link>/diary/posts/2022/1221/</link><pubDate>Wed, 21 Dec 2022 08:10:53 +0900</pubDate><guid>/diary/posts/2022/1221/</guid><description>0時に寝て何度か起きて7時に起きた。だいぶ眠れるようになってきた。
コワーキングのオンラインイベント 月例のカフーツさんのオンラインイベントに参加した。先月の所感はここ 。来年やりたいことというテーマだった。来年の抱負というほど堅苦しいわけではないが、それぞれの参加者別にやりたいことをわーっと話すようなイベントだった。私は課題管理について軽く話し始めたらいとうさんが深堀りしてくれて、参加者からも共感を得られてそれなりに盛り上がった。自分が参加したイベントの録画を見返すことを私は滅多にしないのだけど、今回は話した内容を整理するために見返した。
課題管理という分野の体系化、ならびにプラクティスの整備をしたい ざっくり話した内容はこんな感じ。
課題管理を追求していくにはメンバーに強制・指示できるだけの権限が必要となる
ボトムアップで課題管理を実践するのは難しい 課題管理の実践のために人の運用を変えないといけない場面が出てくる 私は it 業界のプロダクト開発における課題管理のノウハウしかない
複数の組織・チームで働く過程で課題管理ができていない、または課題管理システムを使いこなせていない開発者やチームがたくさんあることを知ったのが背景になる 本質的には、課題管理自体は業界・業種を問わない分野だと思うので広く応用できるプラクティスとして体系化したい
課題管理とは、ハウツー本を読んだり、ツールを導入すれば解決する類のものではない
それぞれの目的のためにメンバーが日々の業務において運用していく必要がある メンバー全員が運用しなかったら効果もその度合いに応じて減っていく 権限が必要というのは、やらない人に対してある程度はやってもらう必要があるから 課題管理をうまくやろうとすると、組織論や組織の文化、マネジメントの分野とも密接に紐づく
課題管理と密接な分野の1つに情報共有がある
情報の一元管理は組織において重要なのに疎かになっている組織やチームは多い 一元管理できると情報共有のためのコミュニケーションコストを削減できる このためには組織レベルで使うツールや情報共有のやり方を統一しないといけない 自分の好きなツールを使って自由に情報共有するといったものをいくらか制限する必要がある 課題管理において重要なことの1つに文章を書けない人たちが一定数いることを受け入れないといけない
情報共有の文脈で言えば、テキスト化は検索できるという大きなメリットをもたらす 一定数の文章を書けない人たちをどう対応するかは難しい課題の1つ 文章を書くための練習をすればよいのではないか 新人やキャリアの浅いメンバーには有効となる 文章を書かなくても情報共有できる手段と組み合わせるとよいのではないか it 業界ではスクラム開発という開発方法論が流行っている 大雑把に言えば、対話を重視して会議をたくさん設けることで情報共有を密にする開発方法論と言える 文章を書けない人であっても話せない人はほぼいない 対話を促されれば話すことで情報共有できる デメリットとしてはコミュニケーションコストがとても高い このコミュニケーションコストは開発における生産性とトレードオフになる 課題管理において重要なことのもう1つに文章を読めない人たちも一定数いる
日本人の1/3は日本語が読めない？PIAAC (国際成人力調査) の調査結果 文章を書いてメンバーに読んでおいてと伝えても1/3は理解できていない可能性を示唆している 情報共有において文章を書いても伝わっていない可能性を考慮して対策する必要がある 仮に情報共有できていない状態でメンバー「わからない」と言えることはすごく重要になる
この文脈で心理的安全性が重要になる 「わからない」と声をあげてくれることで文章や伝え方を改善していける可能性がある 実は一昔前と比べて、いまの方がメンバー間の情報共有を疎遠にしている背景がある
いまは情報共有にクラウドサービスを使う組織が増えている 基本的にクラウドサービスはユーザー単位/従量制で課金される あまりサービスを使わないユーザーアカウントを減らすことでコストダウンできるインセンティブが働く 情報共有という視点からコストダウンしてはいけないコストを削ってしまっている 例) 課題管理システムのアカウントは開発者しかもっていないとか 中小規模の会社ほどクラウドサービスを多用するのでこの傾向がある 昔はオンプレで社内システムを管理していたため、システムのユーザーを減らすインセンティブはなかった 要否に関わらず、社員は全員アカウントをもっていることが当たり前だった 念のため、クラウドサービスのアカウントをメンバー全員がもつことは目的ではない アカウントをもった上でそのメンバーがそのサービスを使うように運用を変えていく必要がある システム投資とメンバーの運用を変える取り組みがセットでないとうまくいかない コワーキングスペースは課題が持ち込まれるところではある
課題管理のプラクティスが応用できるなら使いたい 課題をどう整理して、優先順位を付け、情報共有していくかは難しい 様々なメンバー、様々なツール、様々な課題を同じツールで一元管理することは非常に難しい どうやって情報の一元管理をするかはコワーキングスペースの運営において難しい課題でもある 複数のサービスを連携するサービスなどを使って一元管理する方法もある 海外ではコワーキングスペース向けの sns も含めたプラットフォームサービスなども出始めている 日本ではまだまだあまりシステム化されておらず、導入もされていないのではないか コワーキングの分野では女性がとても活躍しているように、いとうさんから見えている</description><content>&lt;p>0時に寝て何度か起きて7時に起きた。だいぶ眠れるようになってきた。&lt;/p>
&lt;h2 id="コワーキングのオンラインイベント">コワーキングのオンラインイベント&lt;/h2>
&lt;p>月例のカフーツさんのオンラインイベントに参加した。&lt;a href="/diary/diary/posts/2022/1116/#コワーキングのオンラインイベント">先月の所感はここ&lt;/a> 。来年やりたいことというテーマだった。来年の抱負というほど堅苦しいわけではないが、それぞれの参加者別にやりたいことをわーっと話すようなイベントだった。私は課題管理について軽く話し始めたらいとうさんが深堀りしてくれて、参加者からも共感を得られてそれなりに盛り上がった。自分が参加したイベントの録画を見返すことを私は滅多にしないのだけど、今回は話した内容を整理するために見返した。&lt;/p>
&lt;h3 id="課題管理という分野の体系化ならびにプラクティスの整備をしたい">課題管理という分野の体系化、ならびにプラクティスの整備をしたい&lt;/h3>
&lt;p>ざっくり話した内容はこんな感じ。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>課題管理を追求していくにはメンバーに強制・指示できるだけの権限が必要となる&lt;/p>
&lt;ul>
&lt;li>ボトムアップで課題管理を実践するのは難しい&lt;/li>
&lt;li>課題管理の実践のために人の運用を変えないといけない場面が出てくる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>私は it 業界のプロダクト開発における課題管理のノウハウしかない&lt;/p>
&lt;ul>
&lt;li>複数の組織・チームで働く過程で課題管理ができていない、または課題管理システムを使いこなせていない開発者やチームがたくさんあることを知ったのが背景になる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>本質的には、課題管理自体は業界・業種を問わない分野だと思うので広く応用できるプラクティスとして体系化したい&lt;/p>
&lt;/li>
&lt;li>
&lt;p>課題管理とは、ハウツー本を読んだり、ツールを導入すれば解決する類のものではない&lt;/p>
&lt;ul>
&lt;li>それぞれの目的のためにメンバーが日々の業務において運用していく必要がある&lt;/li>
&lt;li>メンバー全員が運用しなかったら効果もその度合いに応じて減っていく
&lt;ul>
&lt;li>権限が必要というのは、やらない人に対してある程度はやってもらう必要があるから&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>課題管理をうまくやろうとすると、組織論や組織の文化、マネジメントの分野とも密接に紐づく&lt;/p>
&lt;/li>
&lt;li>
&lt;p>課題管理と密接な分野の1つに情報共有がある&lt;/p>
&lt;ul>
&lt;li>情報の一元管理は組織において重要なのに疎かになっている組織やチームは多い
&lt;ul>
&lt;li>一元管理できると情報共有のためのコミュニケーションコストを削減できる&lt;/li>
&lt;li>このためには組織レベルで使うツールや情報共有のやり方を統一しないといけない
&lt;ul>
&lt;li>自分の好きなツールを使って自由に情報共有するといったものをいくらか制限する必要がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>課題管理において重要なことの1つに文章を書けない人たちが一定数いることを受け入れないといけない&lt;/p>
&lt;ul>
&lt;li>情報共有の文脈で言えば、テキスト化は検索できるという大きなメリットをもたらす&lt;/li>
&lt;li>一定数の文章を書けない人たちをどう対応するかは難しい課題の1つ
&lt;ul>
&lt;li>文章を書くための練習をすればよいのではないか
&lt;ul>
&lt;li>新人やキャリアの浅いメンバーには有効となる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文章を書かなくても情報共有できる手段と組み合わせるとよいのではないか
&lt;ul>
&lt;li>it 業界ではスクラム開発という開発方法論が流行っている
&lt;ul>
&lt;li>大雑把に言えば、対話を重視して会議をたくさん設けることで情報共有を密にする開発方法論と言える
&lt;ul>
&lt;li>文章を書けない人であっても話せない人はほぼいない&lt;/li>
&lt;li>対話を促されれば話すことで情報共有できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>デメリットとしてはコミュニケーションコストがとても高い
&lt;ul>
&lt;li>このコミュニケーションコストは開発における生産性とトレードオフになる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>課題管理において重要なことのもう1つに文章を読めない人たちも一定数いる&lt;/p>
&lt;ul>
&lt;li>日本人の1/3は日本語が読めない？&lt;a href="https://research.lightworks.co.jp/piaac">PIAAC (国際成人力調査) の調査結果&lt;/a>&lt;/li>
&lt;li>文章を書いてメンバーに読んでおいてと伝えても1/3は理解できていない可能性を示唆している
&lt;ul>
&lt;li>情報共有において文章を書いても伝わっていない可能性を考慮して対策する必要がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>仮に情報共有できていない状態でメンバー「わからない」と言えることはすごく重要になる&lt;/p>
&lt;ul>
&lt;li>この文脈で心理的安全性が重要になる&lt;/li>
&lt;li>「わからない」と声をあげてくれることで文章や伝え方を改善していける可能性がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>実は一昔前と比べて、いまの方がメンバー間の情報共有を疎遠にしている背景がある&lt;/p>
&lt;ul>
&lt;li>いまは情報共有にクラウドサービスを使う組織が増えている
&lt;ul>
&lt;li>基本的にクラウドサービスはユーザー単位/従量制で課金される
&lt;ul>
&lt;li>あまりサービスを使わないユーザーアカウントを減らすことでコストダウンできるインセンティブが働く
&lt;ul>
&lt;li>情報共有という視点からコストダウンしてはいけないコストを削ってしまっている
&lt;ul>
&lt;li>例) 課題管理システムのアカウントは開発者しかもっていないとか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>中小規模の会社ほどクラウドサービスを多用するのでこの傾向がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>昔はオンプレで社内システムを管理していたため、システムのユーザーを減らすインセンティブはなかった
&lt;ul>
&lt;li>要否に関わらず、社員は全員アカウントをもっていることが当たり前だった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>念のため、クラウドサービスのアカウントをメンバー全員がもつことは目的ではない
&lt;ul>
&lt;li>アカウントをもった上でそのメンバーがそのサービスを使うように運用を変えていく必要がある&lt;/li>
&lt;li>システム投資とメンバーの運用を変える取り組みがセットでないとうまくいかない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>コワーキングスペースは課題が持ち込まれるところではある&lt;/p>
&lt;ul>
&lt;li>課題管理のプラクティスが応用できるなら使いたい&lt;/li>
&lt;li>課題をどう整理して、優先順位を付け、情報共有していくかは難しい&lt;/li>
&lt;li>様々なメンバー、様々なツール、様々な課題を同じツールで一元管理することは非常に難しい
&lt;ul>
&lt;li>どうやって情報の一元管理をするかはコワーキングスペースの運営において難しい課題でもある
&lt;ul>
&lt;li>複数のサービスを連携するサービスなどを使って一元管理する方法もある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>海外ではコワーキングスペース向けの sns も含めたプラットフォームサービスなども出始めている
&lt;ul>
&lt;li>日本ではまだまだあまりシステム化されておらず、導入もされていないのではないか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>コワーキングの分野では女性がとても活躍しているように、いとうさんから見えている&lt;/p>
&lt;ul>
&lt;li>今後もこの分野を盛り上げていくのは女性ではないか？
&lt;ul>
&lt;li>男性は変なプライドが邪魔して行動力を抑制してしまうところがあるのではないか&lt;/li>
&lt;li>女性は損得勘定から行動力を発揮しているのではないか
&lt;ul>
&lt;li>男性の方が感情的な動機でコワーキングをしているようにみえる？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>コワーキングに課題管理の理論やシステム化はあってよいのではないかと、いとうさんはみている&lt;/p>
&lt;/li>
&lt;/ul></content></item><item><title>仲の良いチーム</title><link>/diary/posts/2022/1130/</link><pubDate>Wed, 30 Nov 2022 09:16:42 +0900</pubDate><guid>/diary/posts/2022/1130/</guid><description>1時に寝て何度か起きて7時に起きた。起きてからも昨日の夜にやってた勉強会の資料作りをずっとやってた。
1on1 で設計談義 あるマージリクエストで私が nil ガードを実装した方がよいとコメントした。その意図がわからないという話になって nil ガードを実装する背景について、実際のコードをみながらメンバーに説明した。プログラミングの文脈では全然難しくないことではあるけど、あまり経験がない人にとってはその意図や考え方を学ぶのは難しいかもしれない。こういった、詳しい人に聞けばすぐ解決するけど、ググって調べるのは難しいこともある。1on1 のような身近に話す機会があると、定例会議でみんなの時間に話すほどの重要度ではない話題を聞くことができる。そこで聞いた意見をベースに私が issue 化したり、ある話題をチームで話し合う打ち合わせの機会を設けたりしている。
メンバーの送別会 私があるチームのマネージャーをして1ヶ月が経つ。メンバーの1人が退職することになった。実はマネージャーになって1週間後に転職が決まったという話しだった。いきなり開発体制がバタバタしたけれども、私からみたらやることは変わらないのでその影響は最小限に留められたのではないかと思う。いまのところ、当初の開発の計画にも変更をきたしていない。出張でオフィスに来ている機会なので私もそのメンバーの送別会に参加した。他の社員さんも20人ぐらい参加されていた。飲み会の雰囲気をみていて若い人が自由に発言して楽しんでいるのを傍から眺めてた。飲み会の雰囲気ってその組織の性格が出ておもしろいと思う。イヤな人がいないのは組織において重要になる。後日、経営者の方々とそういう会話をしていたら小さい会社はみんな仲良くできるといった話しをされていた。たしかにそれぞれのメンバーの顔とやっていることを見渡せる規模だから親近感を抱きやすいと言えるかもしれない。ここ数年どこへ手伝いに行ってもよい雰囲気をもつ会社は多い。変な言い方だけど、よい世の中になったと思えて嬉しい。</description><content>&lt;p>1時に寝て何度か起きて7時に起きた。起きてからも昨日の夜にやってた勉強会の資料作りをずっとやってた。&lt;/p>
&lt;h2 id="1on1-で設計談義">1on1 で設計談義&lt;/h2>
&lt;p>あるマージリクエストで私が nil ガードを実装した方がよいとコメントした。その意図がわからないという話になって nil ガードを実装する背景について、実際のコードをみながらメンバーに説明した。プログラミングの文脈では全然難しくないことではあるけど、あまり経験がない人にとってはその意図や考え方を学ぶのは難しいかもしれない。こういった、詳しい人に聞けばすぐ解決するけど、ググって調べるのは難しいこともある。1on1 のような身近に話す機会があると、定例会議でみんなの時間に話すほどの重要度ではない話題を聞くことができる。そこで聞いた意見をベースに私が issue 化したり、ある話題をチームで話し合う打ち合わせの機会を設けたりしている。&lt;/p>
&lt;h2 id="メンバーの送別会">メンバーの送別会&lt;/h2>
&lt;p>私があるチームのマネージャーをして1ヶ月が経つ。メンバーの1人が退職することになった。実はマネージャーになって1週間後に転職が決まったという話しだった。いきなり開発体制がバタバタしたけれども、私からみたらやることは変わらないのでその影響は最小限に留められたのではないかと思う。いまのところ、当初の開発の計画にも変更をきたしていない。出張でオフィスに来ている機会なので私もそのメンバーの送別会に参加した。他の社員さんも20人ぐらい参加されていた。飲み会の雰囲気をみていて若い人が自由に発言して楽しんでいるのを傍から眺めてた。飲み会の雰囲気ってその組織の性格が出ておもしろいと思う。イヤな人がいないのは組織において重要になる。後日、経営者の方々とそういう会話をしていたら小さい会社はみんな仲良くできるといった話しをされていた。たしかにそれぞれのメンバーの顔とやっていることを見渡せる規模だから親近感を抱きやすいと言えるかもしれない。ここ数年どこへ手伝いに行ってもよい雰囲気をもつ会社は多い。変な言い方だけど、よい世の中になったと思えて嬉しい。&lt;/p></content></item><item><title>出張の最終日</title><link>/diary/posts/2022/1104/</link><pubDate>Fri, 04 Nov 2022 08:36:18 +0900</pubDate><guid>/diary/posts/2022/1104/</guid><description>0時に寝て7時に起きた。疲れているせいか、よく眠れたと思う。わりと出張でよく眠れているので普段眠れていなかったのは体力が余っているからではないかという気もしてきた。
課題の洗い出し 一昨日の続きでわかっていることや進捗のあったものを確認しながら、追加で課題を作って整理していく。まだまだ課題が足りないのでどんどん作っていかないといけない。それと同時に go のソースコードを読みながら設計や改善の要点を私の中で把握していく。java に慣れたプログラマーが書いた go のコードなので java の考え方の影響が強いようにみえた。私がいくつかアドバイスする余地はあるようにみえた。google でコードレビュー時によくある指摘事項をまとめた有名な wiki がある。メンバーに聞いたらちゃんと読んだことがないということだったので2-3回かけてみんなで読んで学ぶ機会にする。私自身、数年前に読んで忘れていていることも多いだろうから学び直し。テストのページは2019年9月に追加されている。たぶん読んだことない。
https://github.com/golang/go/wiki/CodeReviewComments https://github.com/golang/go/wiki/TestComments 課題管理勉強会 1時間分ぐらいの資料を用意したつもりが35分で終わってしまった。勉強会の雰囲気が固かったのか、慣れない場所での説明だったのか、マスクした状態で長々と話すことも過去に一度もやったことなくて話しにくかった。初めての試みであまりうまくいかなかったが、初めてやることでうまくいかないのは私にとって当たり前のことなので次の勉強会に向けて改善していきたい。どのぐらい伝わったのかわからないけれど、もっと参加者を巻き込んだ活気のある勉強会になるように努めていきたい。
リアル飲み会 19時から3年ぶりに友だちとリアル飲み会。せっかく東京に行く機会だからと5日のうち3日飲んでいたので後半になるほどバテていった。これは加齢による体力低下もあるのだろう。娯楽はどういうものか？という定義や在り方の議論が盛り上がって、私は暇つぶしの時間であって何もしないのでぼーっとしているのも退屈だからその時間を埋めるもの、楽しければいいけど楽しくなくても、どうせ何もしない時間なのであまり気にしないといった考え方をしている。私の友だちは楽しむために娯楽に集中するとか、その時間を無駄にしないようになるべく楽しめる娯楽を選択するとか、24時間のうち、1時間足りとも無駄な時間にはしないぞという姿勢がみえて、私からみたらそんな生活はしんどくないですか？みたいな気持ちになった。おそらく時間を無駄にしたことがストレスになるからそういう姿勢になるのだろうと推測する。娯楽をしながらだらだら時間を過ごすということはないらしい。オンライン飲み会はちょくちょくしていたものの、3年ぶりにオフ会をしたので飲食代をご馳走になった。感謝。前も会社を作った後の飲み会でご馳走になっていて、なかなか私からお返しできていない。それを覚えておくためにもここに書いておく。
本棚に埋もれて眠る この日は 新宿 BOOK AND BED TOKYO に泊まった。前に浅草の同施設に泊まったことはあったけれど新宿は初めて。大雑把に言えば本屋とカプセルホテルが合体したような施設になる。この非日常の雰囲気が好きなので機会があれば泊まるようにしている。宿泊費は6,000円とカプセルホテルより高くビジネスホテルより安いという価格帯。ここに来て本を読んだり泊まったりしている人はコワーキングスペースもしくはコミュニティ的なスペースが好きで本も好きな人たちだと思う。勉強会に行く感覚と似ている。そういう自分と似た人たちが集まる空間そのものが価値観の共有だったり安心感につながっていて私はそういう空気も楽しんでいたりする。とはいえ、バテバテで疲れていたので少しだけ本を読んでわりとすぐに寝た。</description><content>&lt;p>0時に寝て7時に起きた。疲れているせいか、よく眠れたと思う。わりと出張でよく眠れているので普段眠れていなかったのは体力が余っているからではないかという気もしてきた。&lt;/p>
&lt;h2 id="課題の洗い出し">課題の洗い出し&lt;/h2>
&lt;p>一昨日の続きでわかっていることや進捗のあったものを確認しながら、追加で課題を作って整理していく。まだまだ課題が足りないのでどんどん作っていかないといけない。それと同時に go のソースコードを読みながら設計や改善の要点を私の中で把握していく。java に慣れたプログラマーが書いた go のコードなので java の考え方の影響が強いようにみえた。私がいくつかアドバイスする余地はあるようにみえた。google でコードレビュー時によくある指摘事項をまとめた有名な wiki がある。メンバーに聞いたらちゃんと読んだことがないということだったので2-3回かけてみんなで読んで学ぶ機会にする。私自身、数年前に読んで忘れていていることも多いだろうから学び直し。テストのページは2019年9月に追加されている。たぶん読んだことない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/golang/go/wiki/CodeReviewComments">https://github.com/golang/go/wiki/CodeReviewComments&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/golang/go/wiki/TestComments">https://github.com/golang/go/wiki/TestComments&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="課題管理勉強会">課題管理勉強会&lt;/h2>
&lt;p>1時間分ぐらいの資料を用意したつもりが35分で終わってしまった。勉強会の雰囲気が固かったのか、慣れない場所での説明だったのか、マスクした状態で長々と話すことも過去に一度もやったことなくて話しにくかった。初めての試みであまりうまくいかなかったが、初めてやることでうまくいかないのは私にとって当たり前のことなので次の勉強会に向けて改善していきたい。どのぐらい伝わったのかわからないけれど、もっと参加者を巻き込んだ活気のある勉強会になるように努めていきたい。&lt;/p>
&lt;h2 id="リアル飲み会">リアル飲み会&lt;/h2>
&lt;p>19時から3年ぶりに友だちとリアル飲み会。せっかく東京に行く機会だからと5日のうち3日飲んでいたので後半になるほどバテていった。これは加齢による体力低下もあるのだろう。娯楽はどういうものか？という定義や在り方の議論が盛り上がって、私は暇つぶしの時間であって何もしないのでぼーっとしているのも退屈だからその時間を埋めるもの、楽しければいいけど楽しくなくても、どうせ何もしない時間なのであまり気にしないといった考え方をしている。私の友だちは楽しむために娯楽に集中するとか、その時間を無駄にしないようになるべく楽しめる娯楽を選択するとか、24時間のうち、1時間足りとも無駄な時間にはしないぞという姿勢がみえて、私からみたらそんな生活はしんどくないですか？みたいな気持ちになった。おそらく時間を無駄にしたことがストレスになるからそういう姿勢になるのだろうと推測する。娯楽をしながらだらだら時間を過ごすということはないらしい。オンライン飲み会はちょくちょくしていたものの、3年ぶりにオフ会をしたので飲食代をご馳走になった。感謝。前も会社を作った後の飲み会でご馳走になっていて、なかなか私からお返しできていない。それを覚えておくためにもここに書いておく。&lt;/p>
&lt;h2 id="本棚に埋もれて眠る">本棚に埋もれて眠る&lt;/h2>
&lt;p>この日は &lt;a href="https://bookandbedtokyo.com/ja/shinjuku/">新宿 BOOK AND BED TOKYO&lt;/a> に泊まった。前に浅草の同施設に泊まったことはあったけれど新宿は初めて。大雑把に言えば本屋とカプセルホテルが合体したような施設になる。この非日常の雰囲気が好きなので機会があれば泊まるようにしている。宿泊費は6,000円とカプセルホテルより高くビジネスホテルより安いという価格帯。ここに来て本を読んだり泊まったりしている人はコワーキングスペースもしくはコミュニティ的なスペースが好きで本も好きな人たちだと思う。勉強会に行く感覚と似ている。そういう自分と似た人たちが集まる空間そのものが価値観の共有だったり安心感につながっていて私はそういう空気も楽しんでいたりする。とはいえ、バテバテで疲れていたので少しだけ本を読んでわりとすぐに寝た。&lt;/p></content></item><item><title>課題に対する意思決定</title><link>/diary/posts/2022/1102/</link><pubDate>Wed, 02 Nov 2022 09:18:22 +0900</pubDate><guid>/diary/posts/2022/1102/</guid><description>1時に寝て7時に起きた。ホテルのビッフェ形式の朝ご飯は2回目のなのでうまくプレートに盛り付けて段取りよく配膳できた。昨日より改善できた。
課題の意思決定と割り当て プロジェクトの初期なのでとにかく段取りを早め早めに決めてタスクを洗い出し、メンバーが目標に向かって作業しやすい状況をマネージャーとして作り出さないといけない。昨日からプロジェクトのリポジトリ構成を変更しようというイシューを作ってメンバーと議論していた。当初は私がちゃちゃっと作業して移行しようと考えていたが、私の移行イメージを書き出していたらメンバーからいくつか背景や要望が出てきて、メンバー集めて打ち合わせして合意をとって決断することにした。私が入ってからプロジェクトでの初の意思決定かもしれない。
既存のソースを読んだらリポジトリ統合は少し工数がかかるとわかって、私がやるよりもメンバーの方がいいだろうと意思決定だけ私が判断して、実作業はメンバーに割り当てた。初めてのマネージャーっぽいお仕事をできたとちょっと自己満足。その議論の過程で monorepo vs polyrepo という比較記事を読んでみた。monorepo から polyrepo に切り出すのは容易だが、polyrepo から monorepo に統合するのは大変ということが書いてあって、まさにプロジェクトの状況と合致してメンバー間で認識合わせした。いま (過剰な) polyrepo で管理されているのを monorepo に統合しようという決断をした。これをやるのにコミット履歴を維持するのはコストがかかるのでソースファイルをコピーして新規ソースとして移行してよいという判断も下した。こういう意思決定は即断即決でやりたい。
monorepo の対義語として polyrepo という言葉があるのか。勘と経験でリポジトリは複数に分割するので私がやってきたのは polyrepo ではあるのだけど、ちゃんと考えたことはなかったのでアーキテクチャとして議論する余地があるんやろな。 https://t.co/7LQY4cMteF
&amp;mdash; Tetsuya Morimoto (@t2y) November 1, 2022 1on1 マネージャーとして1on1を行う。プロジェクト初期は毎週やって、その後はメンバーの要望を聞きながら隔週でもよいと考えている。1on1 の目的ややり方は様々だが、私が提供できるのは次の3つに含まれることかなと思う。
モチベーションアップ 業務・組織課題の改善 能力開発／キャリア支援 初日から長時間の会議と懇親会などでチームのメンバーと話す機会が多かったので 1on1 もみんな気さくに話してくれてよかった。私はなるべく話さずに聞くことに専念しないといけない。私は圧倒的に自分の思ったことをがんがん話してしまう方なので他人の話を聞く姿勢を身につけるよい機会になると思う。今回は準備不足で雑談がメインではあったものの、1on1 の本なども読みながら勉強していこうと思う。</description><content>&lt;p>1時に寝て7時に起きた。ホテルのビッフェ形式の朝ご飯は2回目のなのでうまくプレートに盛り付けて段取りよく配膳できた。昨日より改善できた。&lt;/p>
&lt;h2 id="課題の意思決定と割り当て">課題の意思決定と割り当て&lt;/h2>
&lt;p>プロジェクトの初期なのでとにかく段取りを早め早めに決めてタスクを洗い出し、メンバーが目標に向かって作業しやすい状況をマネージャーとして作り出さないといけない。昨日からプロジェクトのリポジトリ構成を変更しようというイシューを作ってメンバーと議論していた。当初は私がちゃちゃっと作業して移行しようと考えていたが、私の移行イメージを書き出していたらメンバーからいくつか背景や要望が出てきて、メンバー集めて打ち合わせして合意をとって決断することにした。私が入ってからプロジェクトでの初の意思決定かもしれない。&lt;/p>
&lt;p>既存のソースを読んだらリポジトリ統合は少し工数がかかるとわかって、私がやるよりもメンバーの方がいいだろうと意思決定だけ私が判断して、実作業はメンバーに割り当てた。初めてのマネージャーっぽいお仕事をできたとちょっと自己満足。その議論の過程で monorepo vs polyrepo という比較記事を読んでみた。monorepo から polyrepo に切り出すのは容易だが、polyrepo から monorepo に統合するのは大変ということが書いてあって、まさにプロジェクトの状況と合致してメンバー間で認識合わせした。いま (過剰な) polyrepo で管理されているのを monorepo に統合しようという決断をした。これをやるのにコミット履歴を維持するのはコストがかかるのでソースファイルをコピーして新規ソースとして移行してよいという判断も下した。こういう意思決定は即断即決でやりたい。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">monorepo の対義語として polyrepo という言葉があるのか。勘と経験でリポジトリは複数に分割するので私がやってきたのは polyrepo ではあるのだけど、ちゃんと考えたことはなかったのでアーキテクチャとして議論する余地があるんやろな。 &lt;a href="https://t.co/7LQY4cMteF">https://t.co/7LQY4cMteF&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1587456158356635649?ref_src=twsrc%5Etfw">November 1, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="1on1">1on1&lt;/h2>
&lt;p>マネージャーとして1on1を行う。プロジェクト初期は毎週やって、その後はメンバーの要望を聞きながら隔週でもよいと考えている。1on1 の目的ややり方は様々だが、私が提供できるのは次の3つに含まれることかなと思う。&lt;/p>
&lt;ul>
&lt;li>モチベーションアップ&lt;/li>
&lt;li>業務・組織課題の改善&lt;/li>
&lt;li>能力開発／キャリア支援&lt;/li>
&lt;/ul>
&lt;p>初日から長時間の会議と懇親会などでチームのメンバーと話す機会が多かったので 1on1 もみんな気さくに話してくれてよかった。私はなるべく話さずに聞くことに専念しないといけない。私は圧倒的に自分の思ったことをがんがん話してしまう方なので他人の話を聞く姿勢を身につけるよい機会になると思う。今回は準備不足で雑談がメインではあったものの、1on1 の本なども読みながら勉強していこうと思う。&lt;/p></content></item><item><title>課題管理の取っ掛かり</title><link>/diary/posts/2022/1101/</link><pubDate>Tue, 01 Nov 2022 20:14:44 +0900</pubDate><guid>/diary/posts/2022/1101/</guid><description>0時に寝て6時過ぎに起きた。朝からシャワー浴びてホテルのビッフェ形式の朝ご飯食べてた。初めてのオペレーションだと段取りわからなくて朝ご飯さえうまく配膳できなかった。経験のないことは全然できない。
課題の洗い出し お手伝い先のワークフローや段取りを学ぶ。毎週火曜日がプロジェクトの定例会議。火曜日の終わりに週報を書く。メールで週報を提出するという、いまどきの会社からみると古い会社の慣習にみえる。郷に入れば郷に従えということで私も同様に行う。課題管理で日々の活動をひたすら書いているので週報はいつでもすぐ書けるので私は全く苦にならない。
プロジェクトのリポジトリ構成の変更や課題の洗い出しなどをやっていた。イテレーションは週1でマイルストーンを4週間(月1)で設定して、その区切りでふりかえりなども実施していきたいと思う。コミュニケーションコストが高いことから、私は開発方法論としてスクラムを採用するつもりはない。あくまで自分がやってきた経験による課題管理 + イテレーション開発で製品開発のワークフローを構築したい。お手伝い先ではチームで課題を共有して開発に取り組むといったことはこれまでやってきていないものの、課題管理システムを使って開発者間でやり取りするのは普通にやっていたそうなのでイシューのコメントへの返信がめちゃくちゃ速い。イシュー上で議論していて私がこうしましょうとコメントを書いたら最も速いメンバーは5秒後にリアクションがつくぐらいの速さ。他のメンバーも数十分以内には返信がつくので課題管理システムを使うところのなにかを教える必要はない。課題管理が身に着くのに半年から1年間かかるというのは、他人のアクティビティを監視するという日々の運用 (行動) の変化に半年ぐらいかかると私は想定しているが、このチームはもっと早く課題管理の考え方に適応しそうな気がする。イシューの他人のコメントに5秒でリアクションできる開発者はそうそういない。
私がまだまだプロジェクトの理解が浅いので1-2週間はそのキャッチアップをして、メンバーが遊ばないように課題をどんどん作って優先度付けしてメンバーが担当できるようにしていきたい。</description><content>&lt;p>0時に寝て6時過ぎに起きた。朝からシャワー浴びてホテルのビッフェ形式の朝ご飯食べてた。初めてのオペレーションだと段取りわからなくて朝ご飯さえうまく配膳できなかった。経験のないことは全然できない。&lt;/p>
&lt;h2 id="課題の洗い出し">課題の洗い出し&lt;/h2>
&lt;p>お手伝い先のワークフローや段取りを学ぶ。毎週火曜日がプロジェクトの定例会議。火曜日の終わりに週報を書く。メールで週報を提出するという、いまどきの会社からみると古い会社の慣習にみえる。郷に入れば郷に従えということで私も同様に行う。課題管理で日々の活動をひたすら書いているので週報はいつでもすぐ書けるので私は全く苦にならない。&lt;/p>
&lt;p>プロジェクトのリポジトリ構成の変更や課題の洗い出しなどをやっていた。イテレーションは週1でマイルストーンを4週間(月1)で設定して、その区切りでふりかえりなども実施していきたいと思う。コミュニケーションコストが高いことから、私は開発方法論としてスクラムを採用するつもりはない。あくまで自分がやってきた経験による課題管理 + イテレーション開発で製品開発のワークフローを構築したい。お手伝い先ではチームで課題を共有して開発に取り組むといったことはこれまでやってきていないものの、課題管理システムを使って開発者間でやり取りするのは普通にやっていたそうなのでイシューのコメントへの返信がめちゃくちゃ速い。イシュー上で議論していて私がこうしましょうとコメントを書いたら最も速いメンバーは5秒後にリアクションがつくぐらいの速さ。他のメンバーも数十分以内には返信がつくので課題管理システムを使うところのなにかを教える必要はない。課題管理が身に着くのに半年から1年間かかるというのは、他人のアクティビティを監視するという日々の運用 (行動) の変化に半年ぐらいかかると私は想定しているが、このチームはもっと早く課題管理の考え方に適応しそうな気がする。イシューの他人のコメントに5秒でリアクションできる開発者はそうそういない。&lt;/p>
&lt;p>私がまだまだプロジェクトの理解が浅いので1-2週間はそのキャッチアップをして、メンバーが遊ばないように課題をどんどん作って優先度付けしてメンバーが担当できるようにしていきたい。&lt;/p></content></item><item><title>速く巧く文章を書けるようになりたい</title><link>/diary/posts/2022/1030/</link><pubDate>Sun, 30 Oct 2022 10:40:43 +0900</pubDate><guid>/diary/posts/2022/1030/</guid><description>2時に寝て7時に起きた。タスクが全然消化できなくてしんどい。ただ燃え尽き症候群は落ち着いて次に向けての気力が出てきた。
神戸お土産探し 3年ぶりに出張が増えそうなので神戸のお土産探しも始めようと思う。今回は リッチフィールド さんのバウムクーヘンと丹波みるく黒豆萬をもっていく。オンラインで注文すると取り寄せに1週間かかる。ちょうど発注するときのタイミングが悪くて間に合わない。店頭受け取りだとそのリードタイムが4日になる。明石駅に店舗があったので電車に乗って朝9時から受け取りに行ってきた。電車の待ち時間を含めて往復で約1時間で受け取れる。もっていくお土産は自分がおいしいと思うものをもっていきたいという考えもあって単品でも購入して食べてみた。バウムクーヘンはしっとりした食感で普通においしい。プレーンよりも黒糖の方が風味の自己主張が強いという特徴があって私は好きかな。丹波みるく黒豆萬は濃厚なミルク餡で丁寧で上品なお菓子という印象を受けた。甘いのが苦手な人はややしつこいかもしれないけど、普通においしいと思う。黒豆がちょこんとのっているのが他の乳菓子との差別化かな。(なんの認定にもならないが) 私の審査は軽く通るお土産だとわかった。
開発者として効果的に伝える方法 関心のあるタイトルをタイムラインでみかけたので読んでみた。
How to communicate effectively as a developer 期待したほど私にとって参考になることが書いてあったわけではないけれど、読んでみて参考になることはいくつかあった。著者は「効果的に伝えることを共感的に文章の解像度を高めること」と定義している。私の周りでもエンジニアリングの文脈で解像度の高低というキーワードをよく聞く。一方で共感というキーワードを私は意識していなかったのでこれは素直に参考になった。読み手を想像してその人が共感できるように書くことの重要性に言及している。empathically=「共感して、親身になって」という意味だから日本語らしく訳すと相手の気持ちに寄り添って書くとか、相手のために親身になって書くとか、それ自体はよいことのように思える。高解像度、且つ共感性の高い文章を書くことは労力を要するものの、次のことから win-win-win だと著者は表現している。
読者はより深く理解し、レベルアップする 組織は知識の共有が進み生産性が向上する 自分の考えを伝えるのが上手になり、キャリアアップにつながる いまとなっては後の祭りではあるが、私がいまの3倍速く巧く文章を書ければたしかにもっとキャリアップできていた気がする。書こうと思いながら筆が進まずに断念した文章はいくつもある。最後の結びの言葉も気に入った。
自分が相手の立場なら喜んで読んでくれるような文章を書きましょう。
課題管理の勉強会の資料作り 来週の出張で使うかもしれない課題管理の勉強会向けの資料の叩き台を作った。過去の資料を見返しながらスライドを作り直していた。過去に資料を作ったときは納得して作ったものを、いま見返すと誤解している箇所があったり、あまり重要とは思えなかったり、当たり前の話しだけど、スライドやドキュメントも時間が経って見返すと粗が目立つようになる。こういうとき私は自分を信じないと再確認できて慢心せずにすむ。常に課題管理システムに日々の学んだこと、考えたことを書き続け、チケットの構成を整理し直したり、チケットとチケットの関連を結びつけたりしているうちに過ちや無知に気付くきっかけになる。この暗黙知をいつか形式知として言語化できるようになりたい。</description><content>&lt;p>2時に寝て7時に起きた。タスクが全然消化できなくてしんどい。ただ燃え尽き症候群は落ち着いて次に向けての気力が出てきた。&lt;/p>
&lt;h2 id="神戸お土産探し">神戸お土産探し&lt;/h2>
&lt;p>3年ぶりに出張が増えそうなので神戸のお土産探しも始めようと思う。今回は &lt;a href="https://www.rich-field.biz/">リッチフィールド&lt;/a> さんのバウムクーヘンと丹波みるく黒豆萬をもっていく。オンラインで注文すると取り寄せに1週間かかる。ちょうど発注するときのタイミングが悪くて間に合わない。店頭受け取りだとそのリードタイムが4日になる。明石駅に店舗があったので電車に乗って朝9時から受け取りに行ってきた。電車の待ち時間を含めて往復で約1時間で受け取れる。もっていくお土産は自分がおいしいと思うものをもっていきたいという考えもあって単品でも購入して食べてみた。バウムクーヘンはしっとりした食感で普通においしい。プレーンよりも黒糖の方が風味の自己主張が強いという特徴があって私は好きかな。丹波みるく黒豆萬は濃厚なミルク餡で丁寧で上品なお菓子という印象を受けた。甘いのが苦手な人はややしつこいかもしれないけど、普通においしいと思う。黒豆がちょこんとのっているのが他の乳菓子との差別化かな。(なんの認定にもならないが) 私の審査は軽く通るお土産だとわかった。&lt;/p>
&lt;h2 id="開発者として効果的に伝える方法">開発者として効果的に伝える方法&lt;/h2>
&lt;p>関心のあるタイトルをタイムラインでみかけたので読んでみた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.karlsutt.com/articles/communicating-effectively-as-a-developer/">How to communicate effectively as a developer&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>期待したほど私にとって参考になることが書いてあったわけではないけれど、読んでみて参考になることはいくつかあった。著者は「効果的に伝えることを共感的に文章の解像度を高めること」と定義している。私の周りでもエンジニアリングの文脈で解像度の高低というキーワードをよく聞く。一方で共感というキーワードを私は意識していなかったのでこれは素直に参考になった。読み手を想像してその人が共感できるように書くことの重要性に言及している。empathically=「共感して、親身になって」という意味だから日本語らしく訳すと相手の気持ちに寄り添って書くとか、相手のために親身になって書くとか、それ自体はよいことのように思える。高解像度、且つ共感性の高い文章を書くことは労力を要するものの、次のことから win-win-win だと著者は表現している。&lt;/p>
&lt;ul>
&lt;li>読者はより深く理解し、レベルアップする&lt;/li>
&lt;li>組織は知識の共有が進み生産性が向上する&lt;/li>
&lt;li>自分の考えを伝えるのが上手になり、キャリアアップにつながる&lt;/li>
&lt;/ul>
&lt;p>いまとなっては後の祭りではあるが、私がいまの3倍速く巧く文章を書ければたしかにもっとキャリアップできていた気がする。書こうと思いながら筆が進まずに断念した文章はいくつもある。最後の結びの言葉も気に入った。&lt;/p>
&lt;blockquote>
&lt;p>自分が相手の立場なら喜んで読んでくれるような文章を書きましょう。&lt;/p>
&lt;/blockquote>
&lt;h2 id="課題管理の勉強会の資料作り">課題管理の勉強会の資料作り&lt;/h2>
&lt;p>来週の出張で使うかもしれない課題管理の勉強会向けの資料の叩き台を作った。過去の資料を見返しながらスライドを作り直していた。過去に資料を作ったときは納得して作ったものを、いま見返すと誤解している箇所があったり、あまり重要とは思えなかったり、当たり前の話しだけど、スライドやドキュメントも時間が経って見返すと粗が目立つようになる。こういうとき私は自分を信じないと再確認できて慢心せずにすむ。常に課題管理システムに日々の学んだこと、考えたことを書き続け、チケットの構成を整理し直したり、チケットとチケットの関連を結びつけたりしているうちに過ちや無知に気付くきっかけになる。この暗黙知をいつか形式知として言語化できるようになりたい。&lt;/p></content></item><item><title>hannali dao に参加した</title><link>/diary/posts/2022/1026/</link><pubDate>Wed, 26 Oct 2022 11:21:53 +0900</pubDate><guid>/diary/posts/2022/1026/</guid><description>23時に寝て1時に起きて2時間ほどだらだらしてて6時に起きた。
最後のふりかえりイベント 最終週なのでこのチームでのスプリントのふりかえりは今日が最後になる。メンバーが気を遣ってくれてこれまでの活動に感謝を伝えてくれた。いくつか出たコメントをあげる。
インフラを整備した チケット駆動開発の基礎を伝えた 課題管理のよさもわかってきた メンバーが課題管理を行う習慣化につながった 社内でもっとも backlog を使いこなしているチームになった 1年に渡って開発に参加して課題管理を見守ってきたので課題管理とは何ぞやの基礎をメンバーの大半は理解できるようになったと思う。(私からみて) ワークフローを洗練させるという視点で現状の運用は入門レベルではあるけれど、根っこの部分をちゃんと理解できているメンバーもちらほらみえてきたのであとは時間とともに上達していくのではないかと思う。このままもう2-3年取り組めばスクラムに頼らなくても高い生産性と迅速な情報共有ができるチームになるかもしれない。1年前はチームで課題管理がほとんどできていなかったのに、いまは大半のメンバーがやろうとするようになった。他のメンバーの行動を変えられたのが私としても嬉しい。いくつかの組織やチームで何度もやってきたことなので半年から1年あればできるというのは一定の信頼がおけて自信ももっている。今後の私の課題としてはこれを3ヶ月で達成する、1ヶ月で達成するための体系化やリーダーシップを作り上げていくことが考えられる。
hannali dao 始動 Hannali DAO に参加した。Metaアカウントへの移行(Workrooms向け) によると、2022年8月30日以降は meta アカウントではないと workrooms にアクセスできないらしい。ここ2-3ヶ月 workrooms を使っていなかったのでまとめてシステムのアップグレードや meta アカウントの移行なども行った。まったく難しくなくて手順通り作業を進めればアップグレード作業も含めて1時間もあれば完了するぐらいの作業量。当初は workrooms で開催する予定だったが、諸事情あって zoom 開催になった。とはいえ metamask の設定などをいろいろやっていたので結果的に zoom でよかった。
おがわさんが作った dao で利用できる PROG という名前のカスタムトークンをメンバーに配って受け取る。受け取る方も metamask で wallet と接続しないと受け取れない。polygonscan というサイトで自分のアドレスへの polygon ネットワークのトランザクションを次の uri で確認できる。PROG というカスタムトークンを 50 受領しているのがわかる。
https://polygonscan.com/token/0x14e1bd8689c150509a14db70b2d8c8cd33747cdf?a=0xe1688b4b017ae362261f14415cc0db72b8b53e10 これだけのことをやるのにまったく作業の勘どころが働かなくてみんな四苦八苦していた。たったこれだけを2時間ぐらい。その後、dao や世の中の事例について雑談。お互いの情報共有になっておもしろかった。私は web3 関連に技術体系には否定的なスタンスを取る方だけど、技術そのものを否定しているわけではなく、なにかしら価値はあると考えているのでどういった用途に使うのがよいのかを探りたいという思いがある。最後にそれぞれのメンバーがもっている PROG トークンの比率に応じて投票権をもつ。みんなの投票結果を使って次の開催日を決めてみた。本当の投票は手数料がかかるトークンを使ったアプリになるのだろうけど、このアプリは手数料なしで使えるらしい。
次のDAO イベントいつやる？</description><content>&lt;p>23時に寝て1時に起きて2時間ほどだらだらしてて6時に起きた。&lt;/p>
&lt;h2 id="最後のふりかえりイベント">最後のふりかえりイベント&lt;/h2>
&lt;p>最終週なのでこのチームでのスプリントのふりかえりは今日が最後になる。メンバーが気を遣ってくれてこれまでの活動に感謝を伝えてくれた。いくつか出たコメントをあげる。&lt;/p>
&lt;ul>
&lt;li>インフラを整備した&lt;/li>
&lt;li>チケット駆動開発の基礎を伝えた
&lt;ul>
&lt;li>課題管理のよさもわかってきた&lt;/li>
&lt;li>メンバーが課題管理を行う習慣化につながった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>社内でもっとも backlog を使いこなしているチームになった&lt;/li>
&lt;/ul>
&lt;p>1年に渡って開発に参加して課題管理を見守ってきたので課題管理とは何ぞやの基礎をメンバーの大半は理解できるようになったと思う。(私からみて) ワークフローを洗練させるという視点で現状の運用は入門レベルではあるけれど、根っこの部分をちゃんと理解できているメンバーもちらほらみえてきたのであとは時間とともに上達していくのではないかと思う。このままもう2-3年取り組めばスクラムに頼らなくても高い生産性と迅速な情報共有ができるチームになるかもしれない。1年前はチームで課題管理がほとんどできていなかったのに、いまは大半のメンバーがやろうとするようになった。他のメンバーの行動を変えられたのが私としても嬉しい。いくつかの組織やチームで何度もやってきたことなので半年から1年あればできるというのは一定の信頼がおけて自信ももっている。今後の私の課題としてはこれを3ヶ月で達成する、1ヶ月で達成するための体系化やリーダーシップを作り上げていくことが考えられる。&lt;/p>
&lt;h2 id="hannali-dao-始動">hannali dao 始動&lt;/h2>
&lt;p>&lt;a href="https://hannari-python.connpass.com/event/262428/">Hannali DAO&lt;/a> に参加した。&lt;a href="https://www.meta.com/ja-jp/help/quest/articles/horizon/getting-started-in-horizon-workrooms/migrate-to-meta-account-workrooms/">Metaアカウントへの移行(Workrooms向け)&lt;/a> によると、2022年8月30日以降は meta アカウントではないと workrooms にアクセスできないらしい。ここ2-3ヶ月 workrooms を使っていなかったのでまとめてシステムのアップグレードや meta アカウントの移行なども行った。まったく難しくなくて手順通り作業を進めればアップグレード作業も含めて1時間もあれば完了するぐらいの作業量。当初は workrooms で開催する予定だったが、諸事情あって zoom 開催になった。とはいえ metamask の設定などをいろいろやっていたので結果的に zoom でよかった。&lt;/p>
&lt;p>おがわさんが作った dao で利用できる PROG という名前のカスタムトークンをメンバーに配って受け取る。受け取る方も metamask で &lt;a href="https://wallet.polygon.technology/">wallet&lt;/a> と接続しないと受け取れない。polygonscan というサイトで自分のアドレスへの polygon ネットワークのトランザクションを次の uri で確認できる。PROG というカスタムトークンを 50 受領しているのがわかる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://polygonscan.com/token/0x14e1bd8689c150509a14db70b2d8c8cd33747cdf?a=0xe1688b4b017ae362261f14415cc0db72b8b53e10">https://polygonscan.com/token/0x14e1bd8689c150509a14db70b2d8c8cd33747cdf?a=0xe1688b4b017ae362261f14415cc0db72b8b53e10&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>これだけのことをやるのにまったく作業の勘どころが働かなくてみんな四苦八苦していた。たったこれだけを2時間ぐらい。その後、dao や世の中の事例について雑談。お互いの情報共有になっておもしろかった。私は web3 関連に技術体系には否定的なスタンスを取る方だけど、技術そのものを否定しているわけではなく、なにかしら価値はあると考えているのでどういった用途に使うのがよいのかを探りたいという思いがある。最後にそれぞれのメンバーがもっている PROG トークンの比率に応じて投票権をもつ。みんなの投票結果を使って次の開催日を決めてみた。本当の投票は手数料がかかるトークンを使ったアプリになるのだろうけど、このアプリは手数料なしで使えるらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://snapshot.org/#/hannalidao.eth/proposal/0x2a0d62d602edc7b34e230e6cab4c63f0965e10b972aa78bc02ab6aa67e877dd8">次のDAO イベントいつやる？&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>SECI モデルのワークショップに参加した</title><link>/diary/posts/2022/1005/</link><pubDate>Wed, 05 Oct 2022 08:34:25 +0900</pubDate><guid>/diary/posts/2022/1005/</guid><description>0時に寝て、2時、3時、5時に起きて7時に起きた。夜中何回も起きる。
データ移行スクリプト あるテーブル間のデータ移行のために久しぶりに python のスクリプトを書いた。python の文法を忘れるぐらい最近は書かなくなってしまっていた。1時間ほど書いていると興がのってきてそれなりに書けた。書いていれば体が覚えているので自然に動く的な。dump データ (insert 文) から json 文字列を含むデータを移行しないといけなかった。json 文字列を1つのカラムの値としてパースするのが思ったより難しかった。とはいえ python だとこういう煩雑な文字列操作は得意なので1-2時間で実装して移行作業を完了できた。
SECI モデルのワークショップ たまたま twitter でフォローされたアカウントのタイムラインでみかけた ゲームで体感！SECIモデル～チームビルディングの瞬間に迫る！～ に参加した。SECI モデルとは野中郁次郎氏と竹内弘高氏の論文で提唱された知識創造のフレームワークの1つ。私は実践知の本で知って、スクラム本でも紹介されていたのでよく覚えていた。
アジャイル開発とスクラム 第2版 顧客・技術・経営をつなぐ協調的ソフトウェア開発マネジメント 暗黙知と形式知がぐるぐるまわるんだよという頭だけで理解していて、違和感もなかったし、普通に理解していたつもりだった。SECI モデルを学ぶことを意識したワークショップに実際に参加してみると、知識で理解していた概念と実際に行動 (ワークショップを通してチームで学ぶ) を通して得たフィードバックのようなものがあって、参加前の私は SECI モデルを誤解していたことにも気付いた。単純に知識創造だけのことを言っているわけではなく、チームビルディングや人間関係も知識創造には影響を与えている。私が他人にあまり関心をもたない人間だから人間関係や多様性が知識創造にどういった影響を与えるかを軽視していたと思う。
このワークショップは有償なのもあるだろうけど、2時間で SECI モデルとチームビルディングを組み合わせた要点が学べるようによく練られたものになっていたと思う。チームビルディングの3要素として、目的・関係性・多様性をあげていた。SECI モデルは個人、チーム、組織、環境の集合の要素としてモデル化されていた。個人よりも大きい集合 (チーム、組織) の重要性を私は軽視していたから気付きが多かったという話し。SECI モデルで提唱されていることは、多寡はあっても開発者は普段の業務で普通にやっている。受講後に SECI モデルで実践していることをよりエンパワーメントする仕組みを課題管理もしくは課題管理システムの文脈でできないだろうかと考えたりもしていた。ふらっと参加したのに私にとって気付きが多かったのでこのワークショップを運営しているコミュニティのイベントに今後も継続的に参加してみようと思う。</description><content>&lt;p>0時に寝て、2時、3時、5時に起きて7時に起きた。夜中何回も起きる。&lt;/p>
&lt;h2 id="データ移行スクリプト">データ移行スクリプト&lt;/h2>
&lt;p>あるテーブル間のデータ移行のために久しぶりに python のスクリプトを書いた。python の文法を忘れるぐらい最近は書かなくなってしまっていた。1時間ほど書いていると興がのってきてそれなりに書けた。書いていれば体が覚えているので自然に動く的な。dump データ (insert 文) から json 文字列を含むデータを移行しないといけなかった。json 文字列を1つのカラムの値としてパースするのが思ったより難しかった。とはいえ python だとこういう煩雑な文字列操作は得意なので1-2時間で実装して移行作業を完了できた。&lt;/p>
&lt;h2 id="seci-モデルのワークショップ">SECI モデルのワークショップ&lt;/h2>
&lt;p>たまたま twitter でフォローされたアカウントのタイムラインでみかけた &lt;a href="https://peatix.com/event/3336364">ゲームで体感！SECIモデル～チームビルディングの瞬間に迫る！～&lt;/a> に参加した。SECI モデルとは野中郁次郎氏と竹内弘高氏の論文で提唱された知識創造のフレームワークの1つ。私は実践知の本で知って、スクラム本でも紹介されていたのでよく覚えていた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://t2y.hatenablog.jp/entry/2021/12/19/183339">アジャイル開発とスクラム 第2版 顧客・技術・経営をつなぐ協調的ソフトウェア開発マネジメント&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>暗黙知と形式知がぐるぐるまわるんだよという頭だけで理解していて、違和感もなかったし、普通に理解していたつもりだった。SECI モデルを学ぶことを意識したワークショップに実際に参加してみると、知識で理解していた概念と実際に行動 (ワークショップを通してチームで学ぶ) を通して得たフィードバックのようなものがあって、参加前の私は SECI モデルを誤解していたことにも気付いた。単純に知識創造だけのことを言っているわけではなく、チームビルディングや人間関係も知識創造には影響を与えている。私が他人にあまり関心をもたない人間だから人間関係や多様性が知識創造にどういった影響を与えるかを軽視していたと思う。&lt;/p>
&lt;p>このワークショップは有償なのもあるだろうけど、2時間で SECI モデルとチームビルディングを組み合わせた要点が学べるようによく練られたものになっていたと思う。チームビルディングの3要素として、目的・関係性・多様性をあげていた。SECI モデルは個人、チーム、組織、環境の集合の要素としてモデル化されていた。個人よりも大きい集合 (チーム、組織) の重要性を私は軽視していたから気付きが多かったという話し。SECI モデルで提唱されていることは、多寡はあっても開発者は普段の業務で普通にやっている。受講後に SECI モデルで実践していることをよりエンパワーメントする仕組みを課題管理もしくは課題管理システムの文脈でできないだろうかと考えたりもしていた。ふらっと参加したのに私にとって気付きが多かったのでこのワークショップを運営しているコミュニティのイベントに今後も継続的に参加してみようと思う。&lt;/p></content></item><item><title>半稼働日</title><link>/diary/posts/2022/0930/</link><pubDate>Fri, 30 Sep 2022 07:13:39 +0900</pubDate><guid>/diary/posts/2022/0930/</guid><description>0時に寝て2時、3時と起きて5時に起きた。最近は夜に寝ているのか起きているのか、自分で分からなくなってきた。7時過ぎにはオフィスに着いてた。
サービス残業 今日は非稼働日なんだけど、半日ぐらいは開発していた。大掛かりなリファクタリングをするので今日中に主な修正をテスト環境にデプロイしておきたかった。スプリントが水曜日始まりの1週間なので運用に影響がありそうな大掛かりな機能追加やリファクタリングは金曜日中にはテスト環境へデプロイするように私はしている。そうすると、月・火で他のメンバーがテスト環境を触るのでリグレッションがあればバグをみつけやすくなる。さらにお小言を書くと、他の開発メンバーはこういう感覚がまったくない。大きな変更を伴うコミットを火曜日に普通にしようとする。「明日リリースですが、これをマージしてしまって検証できますか？」というツッコミを私が過去に何度もしている。大半は無理だと次スプリントへ持ち越しになる。残業しない開発者はタスクがスプリントをまたぐことになるので見た目以上のロスがある。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。いつも9時から雑談しているけれど、今日はお互いに歯医者があって15時に変更した。直近のお仕事探しの近況から情報共有をした。いまのところ、3社の選考が進んでいて、私の中の優先順位も明確になっていて、あとは実際に契約を締結するまでもっていけるか。ほんの2週間前までお仕事探しの書類審査すら通らない状況だった。最悪のケースとして11月からしばらくお休みすることも想定していた。現時点では3社もあればどこかに決まるだろうという楽観的な展望をもっている。
ある案件で react から next.js への移行の目的が seo 対策だという話しをしてたら、google のクローラーは spa アプリケーションも扱えるけれど、twitter, facebook のクローラーが全然ダメらしくて sns で記事をシェアするときにプレビューをきれいにみせたいといったときに課題があったりするらしい。spa の後にまた ssr (server-side rendering) やるというのは本当にあほみたいなことをやっていると私からは思えてしまう。
あと私はもうスクラムの議論には関心がなくなってしまった。昨日の日記にも少し書いた。いまは組織を変えられるかどうかに関心をもっていて、よいプロダクトにはよい開発文化が必要だ。そこで「よい開発文化」とはなにかを体系化しないといけない。そのうちの1つとして書くことをこれまで訴求してきた。その後もずっと考え続けてきて私の中では次の3本柱でいこうと決めた。
書くこと ワークフロー改善 実践知リーダーシップ いまはまだキーワードだけでその意図する具体的な内容は私の頭の中にしかない。この3つを軸に私のスキルと経験を詰め込んだ製品開発をしていく。</description><content>&lt;p>0時に寝て2時、3時と起きて5時に起きた。最近は夜に寝ているのか起きているのか、自分で分からなくなってきた。7時過ぎにはオフィスに着いてた。&lt;/p>
&lt;h2 id="サービス残業">サービス残業&lt;/h2>
&lt;p>今日は非稼働日なんだけど、半日ぐらいは開発していた。大掛かりなリファクタリングをするので今日中に主な修正をテスト環境にデプロイしておきたかった。スプリントが水曜日始まりの1週間なので運用に影響がありそうな大掛かりな機能追加やリファクタリングは金曜日中にはテスト環境へデプロイするように私はしている。そうすると、月・火で他のメンバーがテスト環境を触るのでリグレッションがあればバグをみつけやすくなる。さらにお小言を書くと、他の開発メンバーはこういう感覚がまったくない。大きな変更を伴うコミットを火曜日に普通にしようとする。「明日リリースですが、これをマージしてしまって検証できますか？」というツッコミを私が過去に何度もしている。大半は無理だと次スプリントへ持ち越しになる。残業しない開発者はタスクがスプリントをまたぐことになるので見た目以上のロスがある。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。いつも9時から雑談しているけれど、今日はお互いに歯医者があって15時に変更した。直近のお仕事探しの近況から情報共有をした。いまのところ、3社の選考が進んでいて、私の中の優先順位も明確になっていて、あとは実際に契約を締結するまでもっていけるか。ほんの2週間前までお仕事探しの書類審査すら通らない状況だった。最悪のケースとして11月からしばらくお休みすることも想定していた。現時点では3社もあればどこかに決まるだろうという楽観的な展望をもっている。&lt;/p>
&lt;p>ある案件で react から next.js への移行の目的が seo 対策だという話しをしてたら、google のクローラーは spa アプリケーションも扱えるけれど、twitter, facebook のクローラーが全然ダメらしくて sns で記事をシェアするときにプレビューをきれいにみせたいといったときに課題があったりするらしい。spa の後にまた ssr (server-side rendering) やるというのは本当にあほみたいなことをやっていると私からは思えてしまう。&lt;/p>
&lt;p>あと私はもうスクラムの議論には関心がなくなってしまった。昨日の日記にも少し書いた。いまは組織を変えられるかどうかに関心をもっていて、よいプロダクトにはよい開発文化が必要だ。そこで「よい開発文化」とはなにかを体系化しないといけない。そのうちの1つとして書くことをこれまで訴求してきた。その後もずっと考え続けてきて私の中では次の3本柱でいこうと決めた。&lt;/p>
&lt;ul>
&lt;li>書くこと&lt;/li>
&lt;li>ワークフロー改善&lt;/li>
&lt;li>実践知リーダーシップ&lt;/li>
&lt;/ul>
&lt;p>いまはまだキーワードだけでその意図する具体的な内容は私の頭の中にしかない。この3つを軸に私のスキルと経験を詰め込んだ製品開発をしていく。&lt;/p></content></item><item><title>キャリアは知識と経験の差分でわかる</title><link>/diary/posts/2022/0910/</link><pubDate>Sat, 10 Sep 2022 11:36:32 +0900</pubDate><guid>/diary/posts/2022/0910/</guid><description>23時に寝て2時に起きてその後どうしていたかあまり覚えていないが気付いたら8時だった。
ストレッチ 今日の開脚幅は開始前160cmで、ストレッチ後163cmだった。今週も全然ストレッチできなかったのになぜか数値はよくなっていた。ストレッチを受けていて調子の悪さも感じなかったので気候が過ごしやすくなってきて体調がよくなった結果として普段の生活における活動量や新陳代謝などにも影響を与えているのかもしれない。トレーナーさんからは涼しくなったのだから運動をしてくださいと言われた。ほんとその通り。
知識と経験 You’re Not a Senior Software Engineer たまたま目を通した medium のおすすめ記事に出ていて、タイトルにひかれて斜め読みしたらおもしろかったので後で deepl を使って精読した。最近は英語の記事を deepl で訳して読んでいる。まず deepl で全訳した後に文脈から訳文の意味をとれなかったり、明らかにおかしいところだけを手直しする。著作権的に機械翻訳を公開はできないため、その翻訳内容は課題管理システムのイシューで管理している。この記事だと手直し数回ぐらいで大意を読める。普段、英語の記事を日本語アカウントで紹介することはないんだけど、これは素晴らしい内容だったのでそのまま共有することにした。軽く所感も書いてあるが、課題管理システムのイシューにはさらに詳細な分析やコメントも残している。
知識とはやり方を知っていることで、経験とはやってはいけないことを知っていること。素晴らしい記事だった。 / You’re Not a Senior Software Engineer by @repsofsunshine https://t.co/3qitFOFTJp
&amp;mdash; Tetsuya Morimoto (@t2y) September 10, 2022 多くの若いチームでは課題管理の重要性を理解していない。その無理解の原因の1つとして、ものごとを検討したり判断したりした時点では正しかったことが未来のある時点で誤りになってしまう可能性を想像できないからだと私は考えている。記憶と忘却の仕組みから前日のことですら半分以上忘れてしまうので数ヶ月前の詳細など、ほとんどの人は覚えていない。にも関わらず、日々の小さい判断の積み重ねや意思決定の履歴を記録として残さないのはなぜだろうか？それはその詳細があとで重要になるかどうか、多くのケースでその発生時点ではわからないからだ。例えば、システムのアーキテクチャに関して言えば Architectural Decision Records (ADRs) というドキュメントが提唱されている。アーキテクチャのような大きなものでさえ、明示的に残さないと経緯がわからなくなるのに、もっと小さい粒度である日々の開発や運用の誤りを、一般の (普通の) 開発者がその発生時点から数ヶ月や数年経ってふりかえって見直すことができるだろうか？いやできないというのが、多くのチームやメンバーをみてきた私の所感だ。多くのメンバーは過去のある時点の見逃しや判断ミスをなかったことにしようとする。それは無意識にしろ意識的にしろ起きやすい。客観的に詳細を確認できればなかったことになってしまうのは仕方のないことでもある。
私は課題管理システムのコメントに、こういう状況からこう判断したとか、誰それと相談してこういう事情でそうしたとか、自身の感覚からとくに意味もなく決めたとか、常々なぜに相当する内容を残している。そして、あるとき過去の経緯を見返して、そのときの判断は適切だったか、過去のある時点で気付けたはずのことを見逃してなかったか、見逃していたとすればどうすればその時に気付きを得られたか、というふりかえりを日常的なチケット整理の一環として実践している。件の medium の記事にはなぜそれが重要なのかの概念を書いてあるように私には受け取れた。課題管理 + 情報共有の需要な概念の1つだと認識して寝かせておこうと思う。</description><content>&lt;p>23時に寝て2時に起きてその後どうしていたかあまり覚えていないが気付いたら8時だった。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前160cmで、ストレッチ後163cmだった。今週も全然ストレッチできなかったのになぜか数値はよくなっていた。ストレッチを受けていて調子の悪さも感じなかったので気候が過ごしやすくなってきて体調がよくなった結果として普段の生活における活動量や新陳代謝などにも影響を与えているのかもしれない。トレーナーさんからは涼しくなったのだから運動をしてくださいと言われた。ほんとその通り。&lt;/p>
&lt;h2 id="知識と経験">知識と経験&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/vanguards-of-code/youre-not-a-senior-software-engineer-9056ef9ffb96">You’re Not a Senior Software Engineer&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>たまたま目を通した medium のおすすめ記事に出ていて、タイトルにひかれて斜め読みしたらおもしろかったので後で deepl を使って精読した。最近は英語の記事を deepl で訳して読んでいる。まず deepl で全訳した後に文脈から訳文の意味をとれなかったり、明らかにおかしいところだけを手直しする。著作権的に機械翻訳を公開はできないため、その翻訳内容は課題管理システムのイシューで管理している。この記事だと手直し数回ぐらいで大意を読める。普段、英語の記事を日本語アカウントで紹介することはないんだけど、これは素晴らしい内容だったのでそのまま共有することにした。軽く所感も書いてあるが、課題管理システムのイシューにはさらに詳細な分析やコメントも残している。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">知識とはやり方を知っていることで、経験とはやってはいけないことを知っていること。素晴らしい記事だった。 / You’re Not a Senior Software Engineer by @repsofsunshine &lt;a href="https://t.co/3qitFOFTJp">https://t.co/3qitFOFTJp&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1568471581961388034?ref_src=twsrc%5Etfw">September 10, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>多くの若いチームでは課題管理の重要性を理解していない。その無理解の原因の1つとして、ものごとを検討したり判断したりした時点では正しかったことが未来のある時点で誤りになってしまう可能性を想像できないからだと私は考えている。記憶と忘却の仕組みから前日のことですら半分以上忘れてしまうので数ヶ月前の詳細など、ほとんどの人は覚えていない。にも関わらず、日々の小さい判断の積み重ねや意思決定の履歴を記録として残さないのはなぜだろうか？それはその詳細があとで重要になるかどうか、多くのケースでその発生時点ではわからないからだ。例えば、システムのアーキテクチャに関して言えば &lt;a href="https://adr.github.io/">Architectural Decision Records (ADRs)&lt;/a> というドキュメントが提唱されている。アーキテクチャのような大きなものでさえ、明示的に残さないと経緯がわからなくなるのに、もっと小さい粒度である日々の開発や運用の誤りを、一般の (普通の) 開発者がその発生時点から数ヶ月や数年経ってふりかえって見直すことができるだろうか？いやできないというのが、多くのチームやメンバーをみてきた私の所感だ。多くのメンバーは過去のある時点の見逃しや判断ミスをなかったことにしようとする。それは無意識にしろ意識的にしろ起きやすい。客観的に詳細を確認できればなかったことになってしまうのは仕方のないことでもある。&lt;/p>
&lt;p>私は課題管理システムのコメントに、こういう状況からこう判断したとか、誰それと相談してこういう事情でそうしたとか、自身の感覚からとくに意味もなく決めたとか、常々なぜに相当する内容を残している。そして、あるとき過去の経緯を見返して、そのときの判断は適切だったか、過去のある時点で気付けたはずのことを見逃してなかったか、見逃していたとすればどうすればその時に気付きを得られたか、というふりかえりを日常的なチケット整理の一環として実践している。件の medium の記事にはなぜそれが重要なのかの概念を書いてあるように私には受け取れた。課題管理 + 情報共有の需要な概念の1つだと認識して寝かせておこうと思う。&lt;/p></content></item><item><title>手抜き</title><link>/diary/posts/2022/0601/</link><pubDate>Wed, 01 Jun 2022 07:20:18 +0900</pubDate><guid>/diary/posts/2022/0601/</guid><description>2時に寝て6時に起きた。疲れていたからよく眠れた。
mvp（minimum viable product）で対応した スクラムに限った話しではないと思うが、プロダクト開発をしていると mvp（minimum viable product）という言葉を聞くことがままある。昔ながらのイテレーション開発よりも、アジャイル開発の文脈でよく使われるように思う。というのは、短い開発期間でプロトタイプを作ったり、最低限の動く機能を作ったりすることをよしとする考え方があるから。昔ながらのやり方だと、イテレーション期間の中でそういった段階的な開発はするものの、外部からみたとき (もしくはマイルストーン) においてはそこそこの機能が提供されているので mvp といった言い方をすることはなかった。もしかしたらアルファとかベータとか呼んでいたかもしれない。最近ある lambda 関数の移行作業を行った。serverless framework でデプロイしていたリソースを cdk で一元管理する。その過程で既存のコードを読むと、ある id をハードコーディングで指定して FIXME がこんな感じに書いてあった。この id が指すリソースはその後なくなっており、本番環境で不要な処理が定期実行でずっと動き続けていたのと、本来は複数の id リソースに対して行うべき処理を実行していなかった。
# FIXME 対象 id 一覧を取得する。(Phase2までに対応します) id = &amp;#39;ABC001&amp;#39; チームの開発リーダーはその存在を全く忘れていたし、このスクリプトを実装したさらに上位の開発リーダーからはこの処理の要否はよくわからないからチームで確認してという曖昧な返事が返ってきた。チームで確認したところ、この処理は必要だとわかり、この機に複数の id リソースに対して対応するようにした。何も知らない私が修正しても5分で対応を完了した。
mvp で対応したんで
このように実装者は話していたが、本当なのだろうか？と思えた。さらにこのスクリプトのエラーログのログストリームを監視して slack 通知する lambda 関数も移行対象で、コードの検証をしていたところ、slack 通知をするための lambda 関数が別途あり、その動作検証をしていたところ、その lambda 関数を呼び出す権限 lambda:InvokeFunction が足りないことに気付いた。これも実装者に問い合わせたところ、動作検証はやっていないし、過去に1度も slack 通知は発生していないという。状況証拠から考えると、権限が足りないために正常に動作していなかったと推測される。結果的に mvp で対応したという2つの lambda 関数は実運用で半年間、無駄にリソースを浪費して何の役にも立っていなかった。当然、引き継ぎも、課題管理システムのチケットも、ドキュメントも何ら残されていなかった。mvp で対応したという表現に開発で大事なものを誤魔化してはいないだろうか。</description><content>&lt;p>2時に寝て6時に起きた。疲れていたからよく眠れた。&lt;/p>
&lt;h2 id="mvpminimum-viable-productで対応した">mvp（minimum viable product）で対応した&lt;/h2>
&lt;p>スクラムに限った話しではないと思うが、プロダクト開発をしていると mvp（minimum viable product）という言葉を聞くことがままある。昔ながらのイテレーション開発よりも、アジャイル開発の文脈でよく使われるように思う。というのは、短い開発期間でプロトタイプを作ったり、最低限の動く機能を作ったりすることをよしとする考え方があるから。昔ながらのやり方だと、イテレーション期間の中でそういった段階的な開発はするものの、外部からみたとき (もしくはマイルストーン) においてはそこそこの機能が提供されているので mvp といった言い方をすることはなかった。もしかしたらアルファとかベータとか呼んでいたかもしれない。最近ある lambda 関数の移行作業を行った。serverless framework でデプロイしていたリソースを cdk で一元管理する。その過程で既存のコードを読むと、ある id をハードコーディングで指定して &lt;em>FIXME&lt;/em> がこんな感じに書いてあった。この id が指すリソースはその後なくなっており、本番環境で不要な処理が定期実行でずっと動き続けていたのと、本来は複数の id リソースに対して行うべき処理を実行していなかった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># FIXME 対象 id 一覧を取得する。(Phase2までに対応します)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;ABC001&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>チームの開発リーダーはその存在を全く忘れていたし、このスクリプトを実装したさらに上位の開発リーダーからはこの処理の要否はよくわからないからチームで確認してという曖昧な返事が返ってきた。チームで確認したところ、この処理は必要だとわかり、この機に複数の id リソースに対して対応するようにした。何も知らない私が修正しても5分で対応を完了した。&lt;/p>
&lt;blockquote>
&lt;p>mvp で対応したんで&lt;/p>
&lt;/blockquote>
&lt;p>このように実装者は話していたが、本当なのだろうか？と思えた。さらにこのスクリプトのエラーログのログストリームを監視して slack 通知する lambda 関数も移行対象で、コードの検証をしていたところ、slack 通知をするための lambda 関数が別途あり、その動作検証をしていたところ、その lambda 関数を呼び出す権限 &lt;em>lambda:InvokeFunction&lt;/em> が足りないことに気付いた。これも実装者に問い合わせたところ、動作検証はやっていないし、過去に1度も slack 通知は発生していないという。状況証拠から考えると、権限が足りないために正常に動作していなかったと推測される。結果的に mvp で対応したという2つの lambda 関数は実運用で半年間、無駄にリソースを浪費して何の役にも立っていなかった。当然、引き継ぎも、課題管理システムのチケットも、ドキュメントも何ら残されていなかった。mvp で対応したという表現に開発で大事なものを誤魔化してはいないだろうか。&lt;/p></content></item><item><title>ずっと考え続けること</title><link>/diary/posts/2022/0504/</link><pubDate>Wed, 04 May 2022 13:22:22 +0900</pubDate><guid>/diary/posts/2022/0504/</guid><description>0時に寝て7時に起きた。祝日なので朝は掃除したり洗濯したりしてた。
yuga labs は未来の gafa かもしれないらしい 中島聡氏が voicy を始められたのでたまに聴いている。とくに web3 関連の信頼できる情報源として聴いている。
僕らはweb3時代のGAFAの誕生を目撃しているのか？ 氏は yuga labs は技術というよりはマーケティングの会社だと言いながら、どういうマーケティング施策でいまのような人気企業になったかを簡潔に説明されていた。yuga labs という会社名だけは知っていたが、どういう会社かはまったく知らなかったので私は勉強になった。yuga labs のやっていることは中長期でみればポンジ・スキームだと指摘しつつも、その胡散臭さを上回る優れたマーケティング施策で注目を集めているという。yuga labs が手がける nft やメタバースや暗号資産なども高騰していて、実際にそのマーケティング施策で億り人になった人たちも数千人規模で出ていて、今後の動向に期待が集まっているらしい。シリコンバレーのトップレベルの vc も資金を投入しているので vc の思惑からも次の gafa のような期待感があると受け取ることもできるらしい。yuga labs が手がけるメタバースプロジェクトの土地売買で起こった事件なども紹介されていた。あとは2-3年はこういったバブルが続くのかなぁ。
Yuga Labs、仮想不動産NFT販売で3.2億ドル相当獲得　“ガス代急騰”の影響に謝罪 頭の中の最上位にあるアイデア たまたまタイムラインでポール・グレアムの 頭の中の最上位にあるアイデア というエッセイを知った。ざっと斜め読みして、私の経験や価値観にも合致する内容だったので印象に残って後から精読した。
学生の頃、原付きの整備士のアルバイトをしていた。そのバイク屋の社長はアウトローな人生を歩んできた方で、私は破天荒な社長の生き様が好きでよく話を聞いて感心していた。あるとき草津から彦根までバイクを届ける遠出の運搬作業があって、トラックで社長と2人で出掛けたことがあった。雨降りの日だった。私は助手席で社長の話し相手をしていただけだったんだが、こんな話しをされた。
若い頃に5年働いてようやく100万円の貯金ができた。すでに妻子もいた。そのときに友だちに騙されて1500万円の借金を背負った。5年働いて100万円しか貯金できなかったのだから、もう人生終わりだと思って、自分を騙したその友だちを殺して自殺しようと思った。しかし、母親に諭されてその友だちを殺すことは思い留め、それから死ぬ気で働いたら2年で1500万円の借金をすべて返すことができた。
社長がどうやって借金を返したかの詳細は知らないし、相当の苦労や無理をしたことには変わらないだろう。そのときに続けて社長が言ったことはこんなことだった。
24時間365日、お金儲けのことばかり考え続けていたらなんか思いつくものなんや
ポール・グレアムのエッセイを読んで社長はこのことを言ってたんだなといま思い返した。私も何度かそういう機会を経験していて、全くわからない難しい問題に直面したとき、納期や品質を担保できそうにないプロジェクトを担当しているとき、課題に着手し始めたときの本音は無理やと思いつつも、どうやったらうまくいくかというのをずっと考え続けているうちに、難しい問題の解決方法がわかってしまったり、トラブルプロジェクトでもそれなりにうまくまわったりした。
いまは課題管理をどうやってビジネスとしてマネタイズ化するかを常に考えている。たまにアイディアがふっと湧いて、その内容を課題管理システムに起票したり、既存チケットのコメントに書き込んだりする。平均すると、1-2週間に1回ぐらいのコメントなんだけど、これを1年ほど続けているというのがいまの状態だ。これを2年3年と続ければ、ビジネスのアイディアが溜まることを経験的に理解しているからいまもずっと課題管理について考え続けている。</description><content>&lt;p>0時に寝て7時に起きた。祝日なので朝は掃除したり洗濯したりしてた。&lt;/p>
&lt;h2 id="yuga-labs-は未来の-gafa-かもしれないらしい">yuga labs は未来の gafa かもしれないらしい&lt;/h2>
&lt;p>中島聡氏が voicy を始められたのでたまに聴いている。とくに web3 関連の信頼できる情報源として聴いている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://voicy.jp/channel/2627/318702">僕らはweb3時代のGAFAの誕生を目撃しているのか？&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>氏は yuga labs は技術というよりはマーケティングの会社だと言いながら、どういうマーケティング施策でいまのような人気企業になったかを簡潔に説明されていた。yuga labs という会社名だけは知っていたが、どういう会社かはまったく知らなかったので私は勉強になった。yuga labs のやっていることは中長期でみればポンジ・スキームだと指摘しつつも、その胡散臭さを上回る優れたマーケティング施策で注目を集めているという。yuga labs が手がける nft やメタバースや暗号資産なども高騰していて、実際にそのマーケティング施策で億り人になった人たちも数千人規模で出ていて、今後の動向に期待が集まっているらしい。シリコンバレーのトップレベルの vc も資金を投入しているので vc の思惑からも次の gafa のような期待感があると受け取ることもできるらしい。yuga labs が手がけるメタバースプロジェクトの土地売買で起こった事件なども紹介されていた。あとは2-3年はこういったバブルが続くのかなぁ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.itmedia.co.jp/news/articles/2205/02/news051.html">Yuga Labs、仮想不動産NFT販売で3.2億ドル相当獲得　“ガス代急騰”の影響に謝罪&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="頭の中の最上位にあるアイデア">頭の中の最上位にあるアイデア&lt;/h2>
&lt;p>たまたまタイムラインでポール・グレアムの &lt;a href="https://note.com/tokyojack/n/n26ab9f6cfab3">頭の中の最上位にあるアイデア&lt;/a> というエッセイを知った。ざっと斜め読みして、私の経験や価値観にも合致する内容だったので印象に残って後から精読した。&lt;/p>
&lt;p>学生の頃、原付きの整備士のアルバイトをしていた。そのバイク屋の社長はアウトローな人生を歩んできた方で、私は破天荒な社長の生き様が好きでよく話を聞いて感心していた。あるとき草津から彦根までバイクを届ける遠出の運搬作業があって、トラックで社長と2人で出掛けたことがあった。雨降りの日だった。私は助手席で社長の話し相手をしていただけだったんだが、こんな話しをされた。&lt;/p>
&lt;blockquote>
&lt;p>若い頃に5年働いてようやく100万円の貯金ができた。すでに妻子もいた。そのときに友だちに騙されて1500万円の借金を背負った。5年働いて100万円しか貯金できなかったのだから、もう人生終わりだと思って、自分を騙したその友だちを殺して自殺しようと思った。しかし、母親に諭されてその友だちを殺すことは思い留め、それから死ぬ気で働いたら2年で1500万円の借金をすべて返すことができた。&lt;/p>
&lt;/blockquote>
&lt;p>社長がどうやって借金を返したかの詳細は知らないし、相当の苦労や無理をしたことには変わらないだろう。そのときに続けて社長が言ったことはこんなことだった。&lt;/p>
&lt;blockquote>
&lt;p>24時間365日、お金儲けのことばかり考え続けていたらなんか思いつくものなんや&lt;/p>
&lt;/blockquote>
&lt;p>ポール・グレアムのエッセイを読んで社長はこのことを言ってたんだなといま思い返した。私も何度かそういう機会を経験していて、全くわからない難しい問題に直面したとき、納期や品質を担保できそうにないプロジェクトを担当しているとき、課題に着手し始めたときの本音は無理やと思いつつも、どうやったらうまくいくかというのをずっと考え続けているうちに、難しい問題の解決方法がわかってしまったり、トラブルプロジェクトでもそれなりにうまくまわったりした。&lt;/p>
&lt;p>いまは課題管理をどうやってビジネスとしてマネタイズ化するかを常に考えている。たまにアイディアがふっと湧いて、その内容を課題管理システムに起票したり、既存チケットのコメントに書き込んだりする。平均すると、1-2週間に1回ぐらいのコメントなんだけど、これを1年ほど続けているというのがいまの状態だ。これを2年3年と続ければ、ビジネスのアイディアが溜まることを経験的に理解しているからいまもずっと課題管理について考え続けている。&lt;/p></content></item><item><title>開発が遅れる空気</title><link>/diary/posts/2022/0409/</link><pubDate>Sat, 09 Apr 2022 08:31:11 +0900</pubDate><guid>/diary/posts/2022/0409/</guid><description>昨日は0時過ぎまでオンライン飲み会で雑談していて、それから1時に寝て6時過ぎに起きた。
ストレッチ 今日の開脚幅は開始前161cmで、ストレッチ後162cmだった。今週はインフラエンジニアを始め、深夜と早朝に作業するため、生活が不規則になってしまった。そのせいか、腰と右股関節の張りが強いように感じた。1日は散歩に行ったり、深夜に一駅離れたスーパーに買いものに行ったり、すこし運動っぽいことも生活に取り入れるようにはしている。今週疲弊した身体をストレッチでほぐせたのでまた一週間がんばろうという気持ちになった。
インフラ作業 昨日からの仕掛り中の作業をテスト環境に反映させた。昼間は環境を壊してしまうとテストや検証作業を止めてしまうリスクがあるため、開発者や業務の人たちが使っていない時間を見計らって環境変更の反映や cdk の検証などをやりたい。必然的に土日も都合がよくて気付いたら2時間半ほど作業してた。
開発が遅れる空気 私は勘と経験で納期の1-2ヶ月前に開発が完了しないとわかるときがある。これまでなぜわかるのか自分でもよくわかっていなかった。便宜上「遅れる空気を読む」とでも言おう。私だけわかっても他者に伝えられない、もしくは伝えても無視されることが多かったので必要以上に指摘しないようにはしている。伝えて意図がわからない人たちにそれ以上言っても無駄だから。なにかしら条件があるのではないかと思い当たるところを書き出してみる。
チームメンバー (開発者) にタスクが遅れているという認識がない 経験が浅いと見積もりの精度が低いため、全体像に対する進捗を正確に把握できない シニア開発者がアドバイスしてもその内容を理解できなくて役に立たないこともある 遅れている開発者が遅れを取り戻すための施策 (たとえば残業) をしない 認識していないために残業しないから当然に遅れる 認識していても残業を嫌う開発者は一切残業しない 未知の問題や状況に対して「わからない」「困っている」といった報告をあげられない 心理的安全性が低いと、無能だと思われたくなくて開発者が助けを求められない マネージャーやリーダーといったスケジュール管理に影響力のある担当者が上位の意思決定者に事実ではなく自身の解釈を述べる 例「このタスクは8割程度完了していて、あともう少しで終わりそうです」 遅れているタスクはこういう報告が何度もあがる 「いつ完了しますか？」と尋ねると予定日時を回答できない マネージャーやリーダーが技術に疎く、実務担当者の言うことをそのまま受け入れる 経験が浅い開発者の見積もり精度は低いため、大きく計画が狂うことがある 私はソースコードを読んだ上でこの実装では品質基準を満たさないと判断したりしている 上位の意思決定者と現場のリーダーとの人間関係が希薄だと建前の報告になる 心理的安全性が低いと、現場の機微やもやっとしたことが共有されない こういう空気を私は読んでいて、あるとき「この開発はもう間に合わないですね。」といきなり上長に言い始める。周りはまだ日程に余裕があるのになぜ？とびっくりする。開発って日々の積み重ねなので、日々の活動が正しい努力になっていないと1-2ヶ月後に成果が出ないというのは私からみたら自明だという話し。</description><content>&lt;p>昨日は0時過ぎまでオンライン飲み会で雑談していて、それから1時に寝て6時過ぎに起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前161cmで、ストレッチ後162cmだった。今週はインフラエンジニアを始め、深夜と早朝に作業するため、生活が不規則になってしまった。そのせいか、腰と右股関節の張りが強いように感じた。1日は散歩に行ったり、深夜に一駅離れたスーパーに買いものに行ったり、すこし運動っぽいことも生活に取り入れるようにはしている。今週疲弊した身体をストレッチでほぐせたのでまた一週間がんばろうという気持ちになった。&lt;/p>
&lt;h2 id="インフラ作業">インフラ作業&lt;/h2>
&lt;p>昨日からの仕掛り中の作業をテスト環境に反映させた。昼間は環境を壊してしまうとテストや検証作業を止めてしまうリスクがあるため、開発者や業務の人たちが使っていない時間を見計らって環境変更の反映や cdk の検証などをやりたい。必然的に土日も都合がよくて気付いたら2時間半ほど作業してた。&lt;/p>
&lt;h2 id="開発が遅れる空気">開発が遅れる空気&lt;/h2>
&lt;p>私は勘と経験で納期の1-2ヶ月前に開発が完了しないとわかるときがある。これまでなぜわかるのか自分でもよくわかっていなかった。便宜上「遅れる空気を読む」とでも言おう。私だけわかっても他者に伝えられない、もしくは伝えても無視されることが多かったので必要以上に指摘しないようにはしている。伝えて意図がわからない人たちにそれ以上言っても無駄だから。なにかしら条件があるのではないかと思い当たるところを書き出してみる。&lt;/p>
&lt;ul>
&lt;li>チームメンバー (開発者) にタスクが遅れているという認識がない
&lt;ul>
&lt;li>経験が浅いと見積もりの精度が低いため、全体像に対する進捗を正確に把握できない&lt;/li>
&lt;li>シニア開発者がアドバイスしてもその内容を理解できなくて役に立たないこともある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>遅れている開発者が遅れを取り戻すための施策 (たとえば残業) をしない
&lt;ul>
&lt;li>認識していないために残業しないから当然に遅れる&lt;/li>
&lt;li>認識していても残業を嫌う開発者は一切残業しない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>未知の問題や状況に対して「わからない」「困っている」といった報告をあげられない
&lt;ul>
&lt;li>心理的安全性が低いと、無能だと思われたくなくて開発者が助けを求められない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>マネージャーやリーダーといったスケジュール管理に影響力のある担当者が上位の意思決定者に事実ではなく自身の解釈を述べる
&lt;ul>
&lt;li>例「このタスクは8割程度完了していて、あともう少しで終わりそうです」
&lt;ul>
&lt;li>遅れているタスクはこういう報告が何度もあがる&lt;/li>
&lt;li>「いつ完了しますか？」と尋ねると予定日時を回答できない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>マネージャーやリーダーが技術に疎く、実務担当者の言うことをそのまま受け入れる
&lt;ul>
&lt;li>経験が浅い開発者の見積もり精度は低いため、大きく計画が狂うことがある&lt;/li>
&lt;li>私はソースコードを読んだ上でこの実装では品質基準を満たさないと判断したりしている&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>上位の意思決定者と現場のリーダーとの人間関係が希薄だと建前の報告になる
&lt;ul>
&lt;li>心理的安全性が低いと、現場の機微やもやっとしたことが共有されない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>こういう空気を私は読んでいて、あるとき「この開発はもう間に合わないですね。」といきなり上長に言い始める。周りはまだ日程に余裕があるのになぜ？とびっくりする。開発って日々の積み重ねなので、日々の活動が正しい努力になっていないと1-2ヶ月後に成果が出ないというのは私からみたら自明だという話し。&lt;/p></content></item><item><title>「聞かなくてもわかる」という価値観</title><link>/diary/posts/2022/0107/</link><pubDate>Fri, 07 Jan 2022 08:10:05 +0900</pubDate><guid>/diary/posts/2022/0107/</guid><description>0時に寝て3時に起きた。4時までドラクエタクトしたりもしてたけど、夕方に PoC のデモ打ち合わせがあるのになにも準備できてなくて不安で起きて5時からお仕事してた。久しぶりに早起きしたせいか、打ち合わせ終えたら眠いからすぐに帰って、夜はオンライン飲み会しつつくつろいでいた。
情報共有とコミュニケーションコスト 課題管理システムのことを考えていてふと思いついたことを書き出す。私からみると、多くの人たちは「聞かなくてもわかる」という価値を過小評価しがちである。というのは、その価値を定量化するのは難しいので評価されにくい。そうすると、評価されないことはやらないといった合理的な働き方をすればそうなるのは理解できる。しかし、私はその価値を理解しているので軽く考察してみる。
聞けない 聞けばわかる 聞いてもわからない 聞かないとわからない 聞かなくてもわかる 情報共有の過程でパッと思いつくことを段階ごとに書いてみた。1に近い方が容易で5に近い方が難しいという難易度を表しているとも言えるし、組織の情報共有のレベルを表しているとも言える。少し言葉を補うと次のように解釈してもよいだろう。
(メンターが気難しくて/メンターに無能だと思われたくなくて) 聞けない (メンターに余裕があって) 聞けばわかる (メンターのスキル不足で/担当者が退職してて) 聞いてもわからない (背景が文書化されていなくて) 聞かないとわからない (課題管理システムを検索すれば) 聞かなくてもわかる 昔は1のような状況を発生させる人もちょくちょく職場にいた気がするけど、いまは淘汰されてあまりみかけない。多くの組織は3か4ぐらいのレベルだろう。5まで達している組織は少ない。課題管理システムについて議論していると、たまに「知っている人に聞けばいいじゃない？」という意見があがる。この質問をしている時点で目指している働き方のレベルや生産性が大きく異なっていることがわかる。というのは、他人に聞くというのはコミュニケーションコストが非常に高い。これは他人に聞くなと言っているわけではない。他人に聞かないといけないことを減らすことで生産性を上げるという話しをしているだけだ。他者へ同じ情報を伝えるのに1時間の打ち合わせが済むのか、3時間の打ち合わせを要するのかという比較をしている。当然、打ち合わせ時間を減らしても伝えられる情報量が同じであれば打ち合わせ時間は少ない方が望ましい。そういう話しをしている。
5のレベルに達していれば、例えば、いまのシステムの仕様はなぜこのようになっているのか？変更するとしたら影響範囲はどのぐらいか？どういったモジュールに注意して改修すればいいか。もちろん前任者やリーダーに聞けばわかるだろう。聞くために打ち合わせの予定を調整するかもしれない。するとリーダーは忙しくて時間を調整できるのは来週になるという。もし課題管理システムにそういった情報が残っていれば、来週まで待つ必要がなくなる。理想的にはリーダーとの打ち合わせも必要なくなる。リーダーは他に重要な業務に時間を割ける。これが「聞かなくてもわかる」という価値である。
昔はなんらかの理由で1の状態にあった組織において、職場の風通しがよくなると、コミュニケーションコストを軽視しがちになる。職場の風通しがよいことは重要だが、打ち合わせや会議ばかりするようになると、キーパーソンの時間を湯水のように使う。キーパーソンはすぐに会議だらけになって物理的に実務ができなくなって、結果的に生産性や品質が下がる。ここで重要なのは権限委譲だが、この話しは長くなるのでここで筆をおく。</description><content>&lt;p>0時に寝て3時に起きた。4時までドラクエタクトしたりもしてたけど、夕方に PoC のデモ打ち合わせがあるのになにも準備できてなくて不安で起きて5時からお仕事してた。久しぶりに早起きしたせいか、打ち合わせ終えたら眠いからすぐに帰って、夜はオンライン飲み会しつつくつろいでいた。&lt;/p>
&lt;h2 id="情報共有とコミュニケーションコスト">情報共有とコミュニケーションコスト&lt;/h2>
&lt;p>課題管理システムのことを考えていてふと思いついたことを書き出す。私からみると、多くの人たちは「聞かなくてもわかる」という価値を過小評価しがちである。というのは、その価値を定量化するのは難しいので評価されにくい。そうすると、評価されないことはやらないといった合理的な働き方をすればそうなるのは理解できる。しかし、私はその価値を理解しているので軽く考察してみる。&lt;/p>
&lt;ol>
&lt;li>聞けない&lt;/li>
&lt;li>聞けばわかる&lt;/li>
&lt;li>聞いてもわからない&lt;/li>
&lt;li>聞かないとわからない&lt;/li>
&lt;li>聞かなくてもわかる&lt;/li>
&lt;/ol>
&lt;p>情報共有の過程でパッと思いつくことを段階ごとに書いてみた。1に近い方が容易で5に近い方が難しいという難易度を表しているとも言えるし、組織の情報共有のレベルを表しているとも言える。少し言葉を補うと次のように解釈してもよいだろう。&lt;/p>
&lt;ol>
&lt;li>(メンターが気難しくて/メンターに無能だと思われたくなくて) 聞けない&lt;/li>
&lt;li>(メンターに余裕があって) 聞けばわかる&lt;/li>
&lt;li>(メンターのスキル不足で/担当者が退職してて) 聞いてもわからない&lt;/li>
&lt;li>(背景が文書化されていなくて) 聞かないとわからない&lt;/li>
&lt;li>(課題管理システムを検索すれば) 聞かなくてもわかる&lt;/li>
&lt;/ol>
&lt;p>昔は1のような状況を発生させる人もちょくちょく職場にいた気がするけど、いまは淘汰されてあまりみかけない。多くの組織は3か4ぐらいのレベルだろう。5まで達している組織は少ない。課題管理システムについて議論していると、たまに「知っている人に聞けばいいじゃない？」という意見があがる。この質問をしている時点で目指している働き方のレベルや生産性が大きく異なっていることがわかる。というのは、他人に聞くというのはコミュニケーションコストが非常に高い。これは他人に聞くなと言っているわけではない。他人に聞かないといけないことを減らすことで生産性を上げるという話しをしているだけだ。他者へ同じ情報を伝えるのに1時間の打ち合わせが済むのか、3時間の打ち合わせを要するのかという比較をしている。当然、打ち合わせ時間を減らしても伝えられる情報量が同じであれば打ち合わせ時間は少ない方が望ましい。そういう話しをしている。&lt;/p>
&lt;p>5のレベルに達していれば、例えば、いまのシステムの仕様はなぜこのようになっているのか？変更するとしたら影響範囲はどのぐらいか？どういったモジュールに注意して改修すればいいか。もちろん前任者やリーダーに聞けばわかるだろう。聞くために打ち合わせの予定を調整するかもしれない。するとリーダーは忙しくて時間を調整できるのは来週になるという。もし課題管理システムにそういった情報が残っていれば、来週まで待つ必要がなくなる。理想的にはリーダーとの打ち合わせも必要なくなる。リーダーは他に重要な業務に時間を割ける。これが「聞かなくてもわかる」という価値である。&lt;/p>
&lt;p>昔はなんらかの理由で1の状態にあった組織において、職場の風通しがよくなると、コミュニケーションコストを軽視しがちになる。職場の風通しがよいことは重要だが、打ち合わせや会議ばかりするようになると、キーパーソンの時間を湯水のように使う。キーパーソンはすぐに会議だらけになって物理的に実務ができなくなって、結果的に生産性や品質が下がる。ここで重要なのは権限委譲だが、この話しは長くなるのでここで筆をおく。&lt;/p></content></item></channel></rss>