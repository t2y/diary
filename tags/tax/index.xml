<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tax on forest nook</title><link>/diary/tags/tax/</link><description>Recent content in tax on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Sun, 20 Feb 2022 09:48:18 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/tax/index.xml" rel="self" type="application/rss+xml"/><item><title>2021年度の確定申告</title><link>/diary/posts/2022/0220/</link><pubDate>Sun, 20 Feb 2022 09:48:18 +0900</pubDate><guid>/diary/posts/2022/0220/</guid><description>0時に寝て6時に起きた。
確定申告 本当は9時から受け付けなんだけど、昨年早めに行ったら受け付けしてくれたので今年も8時半ぐらいから出掛けていった。家から徒歩5分のところに特設の申告会場があって、行ったらすでに100人ぐらいは並んでいた。整理券を配るために行列を誘導している係員に「書類は作成済みで提出だけです」と伝えると「どうぞ、こちらへ」と行列をショートカットして、書類の作成会場の横にある提出会場へ案内される。朝一なので誰も提出してなくてすぐに応対してくれた。書類チェックして提出完了。会場についてから提出するまでに5分。あわせて10分もあれば確定申告できる。電子申告してもよいのだけど、寄付金の領収書の電子化が面倒なのでまだ紙で申告している。寄付金の領収書が電子化されて添付できるような手軽さになったら電子申告してもよいかもしれない。
github container action の検証 jib という java アプリケーション向けの docker イメージをビルドするためのツールがある。お仕事で使い始めたので雰囲気を理解するために私もサンプルアプリケーションを jib-sample として作ってみた。簡単に設定して java アプリケーションを docker 化できるので感触はよさそう。基本的に java アプリケーションと docker は相性が悪くて、たぶん go で開発するような用途と比較するとサイズがめちゃくちゃでかい。それでも jib を使うと作成された docker イメージのサイズも自分でビルドして作るよりは小さくしてくれる。さすが google という感じ。
この jib-sample の docker イメージを使って github actions のカスタム container action を作ってみたのが gh-actions-container-sample になる。Creating a Docker container action のドキュメントには Dockerfile を使ったサンプルしか紹介されていないけど、docker イメージを直接参照して利用することもできる。
検証作業をしているときに jib-sample リポジトリの github packages が private 設定になっていることに気付かなくて少しはまった。リポジトリの visibility 設定と github packages の visibility 設定は連動していないのでそれぞれで別に管理しないといけない。
また jib で作った docker イメージはデフォルトでは manifest を作ってくれない。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="確定申告">確定申告&lt;/h2>
&lt;p>本当は9時から受け付けなんだけど、昨年早めに行ったら受け付けしてくれたので今年も8時半ぐらいから出掛けていった。家から徒歩5分のところに特設の申告会場があって、行ったらすでに100人ぐらいは並んでいた。整理券を配るために行列を誘導している係員に「書類は作成済みで提出だけです」と伝えると「どうぞ、こちらへ」と行列をショートカットして、書類の作成会場の横にある提出会場へ案内される。朝一なので誰も提出してなくてすぐに応対してくれた。書類チェックして提出完了。会場についてから提出するまでに5分。あわせて10分もあれば確定申告できる。電子申告してもよいのだけど、寄付金の領収書の電子化が面倒なのでまだ紙で申告している。寄付金の領収書が電子化されて添付できるような手軽さになったら電子申告してもよいかもしれない。&lt;/p>
&lt;h2 id="github-container-action-の検証">github container action の検証&lt;/h2>
&lt;p>&lt;a href="https://github.com/GoogleContainerTools/jib">jib&lt;/a> という java アプリケーション向けの docker イメージをビルドするためのツールがある。お仕事で使い始めたので雰囲気を理解するために私もサンプルアプリケーションを &lt;a href="https://github.com/t2y/jib-sample">jib-sample&lt;/a> として作ってみた。簡単に設定して java アプリケーションを docker 化できるので感触はよさそう。基本的に java アプリケーションと docker は相性が悪くて、たぶん go で開発するような用途と比較するとサイズがめちゃくちゃでかい。それでも jib を使うと作成された docker イメージのサイズも自分でビルドして作るよりは小さくしてくれる。さすが google という感じ。&lt;/p>
&lt;p>この jib-sample の docker イメージを使って github actions のカスタム container action を作ってみたのが &lt;a href="https://github.com/t2y/gh-actions-container-sample">gh-actions-container-sample&lt;/a> になる。&lt;a href="https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action">Creating a Docker container action&lt;/a> のドキュメントには Dockerfile を使ったサンプルしか紹介されていないけど、docker イメージを直接参照して利用することもできる。&lt;/p>
&lt;p>検証作業をしているときに jib-sample リポジトリの github packages が private 設定になっていることに気付かなくて少しはまった。リポジトリの visibility 設定と github packages の visibility 設定は連動していないのでそれぞれで別に管理しないといけない。&lt;/p>
&lt;p>また jib で作った docker イメージはデフォルトでは manifest を作ってくれない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker manifest inspect --verbose ghcr.io/t2y/jib-sample:latest
no such manifest: ghcr.io/t2y/jib-sample:latest
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/GoogleContainerTools/jib/blob/master/docs/faq.md#how-do-i-specify-a-platform-in-the-manifest-list-or-oci-index-of-a-base-image">How do I specify a platform in the manifest list (or OCI index) of a base image?&lt;/a> のドキュメントによると、manifest に platform 情報を追加するのは incubating feature らしくて、なんか条件付きで設定すれば使えそうにもみえたんだけど、私がやってみた感じだとうまくいかなかった。また必要ならもう一度調べてみる。&lt;/p></content></item><item><title>確定申告書類の印刷</title><link>/diary/posts/2022/0207/</link><pubDate>Mon, 07 Feb 2022 09:04:45 +0900</pubDate><guid>/diary/posts/2022/0207/</guid><description>1時に寝て7時に起きた。
確定申告書類の印刷 最近は遅くても8時、速かったら7時過ぎからお仕事している。ちょうど仕事の谷間で手持ちのタスクを終えてしまっていて、今日から別のタスクに着手する予定が、昨日から障害が発生していたらしく、朝忙しそうだったから11時まで確定申告の作業をしていた。昨日、データ入力は終えていたので総勘定元帳をみながら変な数字になっていないかをチェックしたり、源泉徴収税の還付金の計算があうかどうかを検算したりしていた。あとすでに廃棄した固定資産が残っていることに気付いた。耐用年数が過ぎた固定資産の価値は1円として管理される。これを備忘価格と呼ぶらしい。除却の手続きもした。ついでに 固定資産売却益（損）とは の会計手続きも調べたりしていた。
オフィスのプリンタで一通り書類を印刷した。あとは提出するだけ。昨年から住んでいるところの徒歩圏内に申告できる場所ができて、散歩のついでに確定申告する程度の手間しかかからない。このまま電子申告してもよいのだけど、寄付金控除のための領収書を写真か PDF ファイルなどで取り込む必要があって、それだけ面倒なので放置している。このまま今年も紙で提出してくるかなぁ。
業務システムの開発 twitter のタイムラインで業務システムの開発者は「業務系エンジニア」と呼ぶとか言っている人をみかけた。そっか、私は web エンジニアから業務系エンジニアになったんだー、web アプリケーション開発しているけどな、とか思いながら、今週からいよいよお手伝い先の業務システムの開発に着手する。いままでインフラやサーバーサイドのシステム寄りの保守や機能開発のみをしていた。さっそく DB スキーマの定義やドキュメントの書き方、作業の進め方などを確認していた。ひとまず1週間のスプリントで終えられそうなタスクなのでがんばってやりたい。</description><content>&lt;p>1時に寝て7時に起きた。&lt;/p>
&lt;h2 id="確定申告書類の印刷">確定申告書類の印刷&lt;/h2>
&lt;p>最近は遅くても8時、速かったら7時過ぎからお仕事している。ちょうど仕事の谷間で手持ちのタスクを終えてしまっていて、今日から別のタスクに着手する予定が、昨日から障害が発生していたらしく、朝忙しそうだったから11時まで確定申告の作業をしていた。昨日、データ入力は終えていたので総勘定元帳をみながら変な数字になっていないかをチェックしたり、源泉徴収税の還付金の計算があうかどうかを検算したりしていた。あとすでに廃棄した固定資産が残っていることに気付いた。耐用年数が過ぎた固定資産の価値は1円として管理される。これを備忘価格と呼ぶらしい。除却の手続きもした。ついでに &lt;a href="https://advisors-freee.jp/article/category/cat-big-03/cat-small-06/12956/">固定資産売却益（損）とは&lt;/a> の会計手続きも調べたりしていた。&lt;/p>
&lt;p>オフィスのプリンタで一通り書類を印刷した。あとは提出するだけ。昨年から住んでいるところの徒歩圏内に申告できる場所ができて、散歩のついでに確定申告する程度の手間しかかからない。このまま電子申告してもよいのだけど、寄付金控除のための領収書を写真か PDF ファイルなどで取り込む必要があって、それだけ面倒なので放置している。このまま今年も紙で提出してくるかなぁ。&lt;/p>
&lt;h2 id="業務システムの開発">業務システムの開発&lt;/h2>
&lt;p>twitter のタイムラインで業務システムの開発者は「業務系エンジニア」と呼ぶとか言っている人をみかけた。そっか、私は web エンジニアから業務系エンジニアになったんだー、web アプリケーション開発しているけどな、とか思いながら、今週からいよいよお手伝い先の業務システムの開発に着手する。いままでインフラやサーバーサイドのシステム寄りの保守や機能開発のみをしていた。さっそく DB スキーマの定義やドキュメントの書き方、作業の進め方などを確認していた。ひとまず1週間のスプリントで終えられそうなタスクなのでがんばってやりたい。&lt;/p></content></item><item><title>確定申告の準備</title><link>/diary/posts/2022/0206/</link><pubDate>Sun, 06 Feb 2022 10:06:06 +0900</pubDate><guid>/diary/posts/2022/0206/</guid><description>1時に寝て8時に起きた。朝から洗濯と掃除をしてた。姪の大学進学で下宿先を探しに来ると姉が言うからなんか手伝う必要あるのかなと午後は時間をあけてたけど、そうでもなかった。
2021年度の個人の確定申告 夕方から確定申告の作業を始めた。毎年 freee で1ヶ月だけ契約して確定申告の書類を作っている。データ入力の作業は次の2つだけ。
印税の源泉徴収税の明細作成 寄付金の明細作成 書籍の印税収入が定期的に振り込まれる。印税収入は源泉徴収済みとなる。銀行 (出版社) からの明細取り込みに対して、印税と源泉徴収税の明細に分割する必要がある。今年は3社から印税があって、それぞれ数件程度の明細を作成した。クレジットカードで寄付金を支払っているものは明細連携できていないので12ヶ月分の明細を手入力することになる。言うても、それは1団体だけなので12個の明細だけ。会社を作る前は技術書の購入や勉強会の参加費や交通費 (新幹線とか) などにかかった経費なども明細登録していたけど、いまは会社の経費ですべて計上しているので個人で計上するものはなくなった。会社の経費はクレジットカード連携できているし、日々のお仕事で会計処理しているから、確定申告のタイミングでまとめて作業する必要はなくなった。
あと2021年度から 小規模企業共済 に入った。最小1000円/月から最大7万円/月の掛け金を選択する。いくらぐらいが妥当かわからなかったのでひとまず4万円/月で運用している。もちろん掛け金は変更できるが、基本的に20年とか掛け続けるもので、支払った金額は戻ってこないので、あるとき大きなお金が必要となっても融通できない貯金があるみたいものになってしまう。その分のメリットとして、所得控除の対象となる。加入シミュレーション があるので、自分の条件にあわせてやってみるとおもしろい。例えば、納付月数240ヶ月、掛け金7万円/月、課税所得400万円で算出すると24万円/年の節税となる。課税所得が減るので所得税だけでなく住民税も節税となる。</description><content>&lt;p>1時に寝て8時に起きた。朝から洗濯と掃除をしてた。姪の大学進学で下宿先を探しに来ると姉が言うからなんか手伝う必要あるのかなと午後は時間をあけてたけど、そうでもなかった。&lt;/p>
&lt;h2 id="2021年度の個人の確定申告">2021年度の個人の確定申告&lt;/h2>
&lt;p>夕方から確定申告の作業を始めた。毎年 freee で1ヶ月だけ契約して確定申告の書類を作っている。データ入力の作業は次の2つだけ。&lt;/p>
&lt;ul>
&lt;li>印税の源泉徴収税の明細作成&lt;/li>
&lt;li>寄付金の明細作成&lt;/li>
&lt;/ul>
&lt;p>書籍の印税収入が定期的に振り込まれる。印税収入は源泉徴収済みとなる。銀行 (出版社) からの明細取り込みに対して、印税と源泉徴収税の明細に分割する必要がある。今年は3社から印税があって、それぞれ数件程度の明細を作成した。クレジットカードで寄付金を支払っているものは明細連携できていないので12ヶ月分の明細を手入力することになる。言うても、それは1団体だけなので12個の明細だけ。会社を作る前は技術書の購入や勉強会の参加費や交通費 (新幹線とか) などにかかった経費なども明細登録していたけど、いまは会社の経費ですべて計上しているので個人で計上するものはなくなった。会社の経費はクレジットカード連携できているし、日々のお仕事で会計処理しているから、確定申告のタイミングでまとめて作業する必要はなくなった。&lt;/p>
&lt;p>あと2021年度から &lt;a href="https://www.smrj.go.jp/kyosai/skyosai/">小規模企業共済&lt;/a> に入った。最小1000円/月から最大7万円/月の掛け金を選択する。いくらぐらいが妥当かわからなかったのでひとまず4万円/月で運用している。もちろん掛け金は変更できるが、基本的に20年とか掛け続けるもので、支払った金額は戻ってこないので、あるとき大きなお金が必要となっても融通できない貯金があるみたいものになってしまう。その分のメリットとして、所得控除の対象となる。&lt;a href="https://www.smrj.go.jp/kyosai/skyosai/entry/simulation/index.html">加入シミュレーション&lt;/a> があるので、自分の条件にあわせてやってみるとおもしろい。例えば、納付月数240ヶ月、掛け金7万円/月、課税所得400万円で算出すると24万円/年の節税となる。課税所得が減るので所得税だけでなく住民税も節税となる。&lt;/p></content></item><item><title>仕事始め</title><link>/diary/posts/2022/0104/</link><pubDate>Tue, 04 Jan 2022 11:42:00 +0900</pubDate><guid>/diary/posts/2022/0104/</guid><description>3時に寝て6時半に起きて2度寝して7時半に起きた。お正月にだらけたのですぐ起きれなかった。
仕事始め 今日から仕事始め。お昼におにぎりを買いに外を歩いたけど、あまり人気がなかった。14時過ぎに散歩がてら 生田神社 へ初詣に向かったが、なかなかの混雑ぶりで断念した。初詣失敗。普通の休日の3倍ぐらいはいたんじゃないかと思う。神社は学生さんも多いとは思うけど、まだ休み中の人も多いのかもしれない。
償却資産の申告 固定資産税を支払う根拠となる固定資産台帳の内容を申告した。毎年1月1日時点の償却資産を1月31日までに申告する。去年は紙の書類で行った手続きを、今年は eLTAX (ダウンロード版) でオンライン手続きした。神戸市は事前にプレ申告データとして去年の申告データを送ってくれるので、それを再利用して手続きをすると去年時点のデータ入力の手間を省ける。実際に手続きしてみたら紙の書類そのままの画面が表示されて、空き項目を埋めていくだけだった。ほんの10分で入力を完了した。あとはマイナンバーカードを使って電子署名して送信するだけ。送信後、受付のメッセージが返ってくる。なにか不備があれば、データチェックをしているオペレーターから数日以内に電話がかかってくる。かかってこなければ問題ないということ。
関連する話題として、No.5408 中小企業者等の少額減価償却資産の取得価額の損金算入の特例 という制度がある。通常、減価償却対象となる固定資産の基準額は単品で10万円になるが、この中小企業向けの特例を用いると30万円を基準額にできる (合計で300万円まで) 。パソコンなどのデバイスは10万円を超えることも多い。そういった固定資産を複数年で減価償却しなくても取得年度で即時償却できる。具体的にはその事業年度で利益がある場合は経費が増えることになるので法人税や地方法人税 (名前に「地方」という文言が入っているがこれは国税) といった国税の節税となる。
他方で、償却資産に対して固定資産税という地方税がある。償却資産として毎年1月に申告する。これは特例で即時償却した固定資産に対しても適用される。例えば、神戸市では次の FAQ に特例とは関係ないという注意書きがある。償却資産の合計金額が150万円未満のときは免税となる。小さい規模の企業なら免税になりやすい制度にみえる。
※租税特別措置法の規定により中小企業者等の少額資産特例を適用して損金算入した資産については申告の対象となります。
Q.申告の対象にならない資産は、どのようなものがありますか。
国税と地方税の違いを理解していないと調べ方を誤る懸念がある。国税庁のサイトには国税のことしか書いていないし、地方税のことは地方自治体のサイトにしか書いていない。というか、私は国税だけを調べて地方税の扱いを誤解していた。</description><content>&lt;p>3時に寝て6時半に起きて2度寝して7時半に起きた。お正月にだらけたのですぐ起きれなかった。&lt;/p>
&lt;h2 id="仕事始め">仕事始め&lt;/h2>
&lt;p>今日から仕事始め。お昼におにぎりを買いに外を歩いたけど、あまり人気がなかった。14時過ぎに散歩がてら &lt;a href="https://ikutajinja.or.jp/">生田神社&lt;/a> へ初詣に向かったが、なかなかの混雑ぶりで断念した。初詣失敗。普通の休日の3倍ぐらいはいたんじゃないかと思う。神社は学生さんも多いとは思うけど、まだ休み中の人も多いのかもしれない。&lt;/p>
&lt;h2 id="償却資産の申告">償却資産の申告&lt;/h2>
&lt;p>固定資産税を支払う根拠となる固定資産台帳の内容を申告した。毎年1月1日時点の償却資産を1月31日までに申告する。去年は紙の書類で行った手続きを、今年は &lt;a href="https://www.eltax.lta.go.jp/">eLTAX&lt;/a> (ダウンロード版) でオンライン手続きした。神戸市は事前にプレ申告データとして去年の申告データを送ってくれるので、それを再利用して手続きをすると去年時点のデータ入力の手間を省ける。実際に手続きしてみたら紙の書類そのままの画面が表示されて、空き項目を埋めていくだけだった。ほんの10分で入力を完了した。あとはマイナンバーカードを使って電子署名して送信するだけ。送信後、受付のメッセージが返ってくる。なにか不備があれば、データチェックをしているオペレーターから数日以内に電話がかかってくる。かかってこなければ問題ないということ。&lt;/p>
&lt;p>関連する話題として、&lt;a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/hojin/5408.htm">No.5408 中小企業者等の少額減価償却資産の取得価額の損金算入の特例&lt;/a> という制度がある。通常、減価償却対象となる固定資産の基準額は単品で10万円になるが、この中小企業向けの特例を用いると30万円を基準額にできる (合計で300万円まで) 。パソコンなどのデバイスは10万円を超えることも多い。そういった固定資産を複数年で減価償却しなくても取得年度で即時償却できる。具体的にはその事業年度で利益がある場合は経費が増えることになるので法人税や地方法人税 (名前に「地方」という文言が入っているがこれは国税) といった国税の節税となる。&lt;/p>
&lt;p>他方で、償却資産に対して固定資産税という地方税がある。償却資産として毎年1月に申告する。これは特例で即時償却した固定資産に対しても適用される。例えば、神戸市では次の FAQ に特例とは関係ないという注意書きがある。償却資産の合計金額が150万円未満のときは免税となる。小さい規模の企業なら免税になりやすい制度にみえる。&lt;/p>
&lt;blockquote>
&lt;p>※租税特別措置法の規定により中小企業者等の少額資産特例を適用して損金算入した資産については申告の対象となります。&lt;/p>
&lt;p>&lt;a href="https://www.city.kobe.lg.jp/a03858/kurashi/tax/kotei/shokyakushisan/syokyaku_faq.html#midashi93387">Q.申告の対象にならない資産は、どのようなものがありますか。&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>国税と地方税の違いを理解していないと調べ方を誤る懸念がある。国税庁のサイトには国税のことしか書いていないし、地方税のことは地方自治体のサイトにしか書いていない。というか、私は国税だけを調べて地方税の扱いを誤解していた。&lt;/p></content></item><item><title>頭文字Dを読了</title><link>/diary/posts/2021/1205/</link><pubDate>Sun, 05 Dec 2021 11:47:08 +0900</pubDate><guid>/diary/posts/2021/1205/</guid><description>0時に寝て7時に起きてだらだらやってて午前中は 頭文字D のアニメをみてた。漫画 (アニメも？) はすでに完結しているのでいつか読もうと思いつつ最後まで読んでいない。ゴッドフットやゴッドアームが出てくるぐらいまでは読んだ気がする。その後どうなったのかを知らない。イニシャルDをみていると、ストーリーも絵も演出もまったく派手さはなくて普通なんだけど、なぜかおもしろくて続きをみてしまうという人間の娯楽の本質をついている気がしてくる。なんでなんだろうなぁ。
頭文字D たまたま思い出したので夜に漫画喫茶行って頭文字Dを最後まで読んできた。全48巻で、31巻ぐらいから読み始めて3-4時間ぐらいで読み終えた。漫画なので仕方ないけど、対戦相手がどんどん強くなっていって勝ち方が玄人好みというのか、単純に抜いた・抜かれたの話しではなく、タイヤマネージメントがどうこうとか、恐怖に対する心理がどうこうとか、ドライバーと車のセッティングも含めた駆け引きが強くなっていって、どちらが速いかというよりは戦略通りの展開にもっていって最後はそれがうまくはまるみたいな、これまでもずっとそうだったんだけど、ここからはよりトップレベルのほんの僅かな差が勝敗を分けるといった描き方になっていったように思う。それはそれで現実に近い気はするけど、漫画的には派手な演出にならないので玄人好みなストーリーになっていった気がする。但し、そこまでやってきて最後の対戦相手だけは、個人的には納得感がなくて、ここまで緻密に作り上げてきた理論や個々のドライバーの修練の積み重ねが圧倒的天才の前にひれ伏すみたいな切り口が急展開していて、頭の切り替えができなかった感じがした。とはいえ、最後まで読み終えられてよかったし、作品としてはすごくおもしろかった。作者はモータースポーツが本当に好きなんだろうなというのが伝わってくる漫画だと思う。
ふるさと納税 あまり欲しいものもないし、ふるさと納税の行政手続きも一通り理解したから今年はやらなくてもいいかとも思っていた。しかし、paypayボーナスキャンペーン をみてやってみるかという気になった。paypay はいろんなものと連携していて見かけるたびにすごいなと思う。お得だからと必要もないものを買うことはないけど、ふるさと納税はやらなかったとしても、どのみち納税は必要なものなので還元があるということは節税につながるのかな？理屈はよくわからないけど、言いたいことは paypay はすごいという話でした。
dapr の api トークンを使った認証 Enable API token authentication in Dapr を一通り読んだ。内容はとくに難しくなく、こんな風に dapr の manifest を書けば JWT トークンを設定できますということを書いてある。私はずっとサーバーサイドばっかりやってきたからフロントエンドで使われる技術や仕組みに弱い。JWT トークンもその1つで、自分でちゃんと実装したことがないからちゃんとよく分かってない。これが OAuth2 なら provider を実装したこともあるからその仕組みも意図も理解できる。一度どこかで自分で JWT も実装してみないといけないのだろうな。
少し前にお仕事で kubernetes の secret の移行作業をやった。既存の secret にキーバリューを追加するときは patch を使う。
$ kubectl patch secret mydata -p=&amp;#39;{&amp;#34;stringData&amp;#34;:{&amp;#34;mykey&amp;#34;: &amp;#34;myvalue&amp;#34;}}&amp;#39; secret の内容を確認するときも2つのやり方がある。キーだけを確認するならこれでよい。
$ kubectl describe secrets mydata キーに対応する値もデコードして確認するならこうする。但し、閲覧注意。
$ kubectl get secret mydata -o json | jq &amp;#39;.</description><content>&lt;p>0時に寝て7時に起きてだらだらやってて午前中は &lt;a href="https://ja.wikipedia.org/wiki/%E9%A0%AD%E6%96%87%E5%AD%97D">頭文字D&lt;/a> のアニメをみてた。漫画 (アニメも？) はすでに完結しているのでいつか読もうと思いつつ最後まで読んでいない。ゴッドフットやゴッドアームが出てくるぐらいまでは読んだ気がする。その後どうなったのかを知らない。イニシャルDをみていると、ストーリーも絵も演出もまったく派手さはなくて普通なんだけど、なぜかおもしろくて続きをみてしまうという人間の娯楽の本質をついている気がしてくる。なんでなんだろうなぁ。&lt;/p>
&lt;h2 id="頭文字d">頭文字D&lt;/h2>
&lt;p>たまたま思い出したので夜に漫画喫茶行って頭文字Dを最後まで読んできた。全48巻で、31巻ぐらいから読み始めて3-4時間ぐらいで読み終えた。漫画なので仕方ないけど、対戦相手がどんどん強くなっていって勝ち方が玄人好みというのか、単純に抜いた・抜かれたの話しではなく、タイヤマネージメントがどうこうとか、恐怖に対する心理がどうこうとか、ドライバーと車のセッティングも含めた駆け引きが強くなっていって、どちらが速いかというよりは戦略通りの展開にもっていって最後はそれがうまくはまるみたいな、これまでもずっとそうだったんだけど、ここからはよりトップレベルのほんの僅かな差が勝敗を分けるといった描き方になっていったように思う。それはそれで現実に近い気はするけど、漫画的には派手な演出にならないので玄人好みなストーリーになっていった気がする。但し、そこまでやってきて最後の対戦相手だけは、個人的には納得感がなくて、ここまで緻密に作り上げてきた理論や個々のドライバーの修練の積み重ねが圧倒的天才の前にひれ伏すみたいな切り口が急展開していて、頭の切り替えができなかった感じがした。とはいえ、最後まで読み終えられてよかったし、作品としてはすごくおもしろかった。作者はモータースポーツが本当に好きなんだろうなというのが伝わってくる漫画だと思う。&lt;/p>
&lt;h2 id="ふるさと納税">ふるさと納税&lt;/h2>
&lt;p>あまり欲しいものもないし、ふるさと納税の行政手続きも一通り理解したから今年はやらなくてもいいかとも思っていた。しかし、&lt;a href="https://www.satofull.jp/static/campaign/202112_pcp.php">paypayボーナスキャンペーン&lt;/a> をみてやってみるかという気になった。paypay はいろんなものと連携していて見かけるたびにすごいなと思う。お得だからと必要もないものを買うことはないけど、ふるさと納税はやらなかったとしても、どのみち納税は必要なものなので還元があるということは節税につながるのかな？理屈はよくわからないけど、言いたいことは paypay はすごいという話でした。&lt;/p>
&lt;h2 id="dapr-の-api-トークンを使った認証">dapr の api トークンを使った認証&lt;/h2>
&lt;p>&lt;a href="https://docs.dapr.io/operations/security/api-token/">Enable API token authentication in Dapr&lt;/a> を一通り読んだ。内容はとくに難しくなく、こんな風に dapr の manifest を書けば &lt;a href="https://jwt.io/">JWT&lt;/a> トークンを設定できますということを書いてある。私はずっとサーバーサイドばっかりやってきたからフロントエンドで使われる技術や仕組みに弱い。JWT トークンもその1つで、自分でちゃんと実装したことがないからちゃんとよく分かってない。これが OAuth2 なら provider を実装したこともあるからその仕組みも意図も理解できる。一度どこかで自分で JWT も実装してみないといけないのだろうな。&lt;/p>
&lt;p>少し前にお仕事で kubernetes の secret の移行作業をやった。既存の secret にキーバリューを追加するときは patch を使う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl patch secret mydata -p&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;{&amp;#34;stringData&amp;#34;:{&amp;#34;mykey&amp;#34;: &amp;#34;myvalue&amp;#34;}}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>secret の内容を確認するときも2つのやり方がある。キーだけを確認するならこれでよい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl describe secrets mydata
&lt;/code>&lt;/pre>&lt;/div>&lt;p>キーに対応する値もデコードして確認するならこうする。但し、閲覧注意。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get secret mydata -o json | jq &lt;span style="color:#e6db74">&amp;#39;.data | map_values(@base64d)&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>eLTAX 触ってみた</title><link>/diary/posts/2021/1124/</link><pubDate>Wed, 24 Nov 2021 08:02:59 +0900</pubDate><guid>/diary/posts/2021/1124/</guid><description>0時半に寝て6時半に起きた。水曜日は朝活の日だったけど、申し込み忘れてカレンダーに入ってなかったから忘れてた。カレンダーの予定に従って生活していることがわかる。
ふりかえり 今日はお仕事でスクラムイベントのレトロスペクティブがあった。最近は日本語でそのまま「ふりかえり」と呼ぶみたいやね。他の用語が英語なのであわせて英語で読んでたけど、ふりかえりの方が日本人的にはしっくりくるのでそれでいいと思う。
開発の情報共有のやり取りが活発になったという意見が出た。私は11月から働き始めてまだ3週間ほどなので以前がどうだったのかわからない。2週間前に本格的にスクラム開発に移行して、POや開発者のリーダーが新任したり、開発者に新規メンバー (私のこと) が追加したりと、いろんな状況が変わっている。なにか特別なことをしたというわけではないけど、自然にコミュニケーションがよい方に改善されているなら全体としてよい傾向に思える。私はまだ業務のことが全くわからないのでインフラやテストなどの非機能要件のタスクをやっているだけ。開発者からみて負債というほど大きなものではないが、やった方がよい技術的な残タスクのようなものを私がどんどん fix しているので開発環境がよくなっている気がするといったコメントを名指しでいただいた。スクラムマスターによると、ふりかえりでは、個人名で問題を指摘するのはよくないが、個人名で感謝を伝えるのはよいという。なので、よいことには個人名が前面に出る。褒められて悪い気がする人はそうそういないので、このプラクティスはチームの雰囲気をよくすることに寄与するのだろうと思えた。
続: 年末調整と住民税の納付 昨日 の続き。eLTAX のソフト版をダウンロードして年末調整の給与支払報告書の申請、住民税の特別徴収の納付も行った。アプリケーションの操作方法と手続きのドキュメントは懇切丁寧な内容なので、アプリケーションそのものの使い勝手はいまいちだけど、とくに手続きに迷うこともなく、順番に操作していけば問題なく申請や納付を完了できた。この2つの手続きは、昨年は紙で申請したり納付したりしていたのが、今年は電子申告になったのでちょっとクラスチェンジしたような感覚で気分がよかった。定期的な行政手続きを毎年やりながら少しずつやり方を洗練させていったり、異なる手続きに挑戦してみたり、制度の仕組みを理解したり、そういう少しずつ改善して学びを深めていくことそのものに幸せ感がある。人に依るんだろうけど、わりと私はマイクロ法人の行政手続きを楽しんでいる。</description><content>&lt;p>0時半に寝て6時半に起きた。水曜日は朝活の日だったけど、申し込み忘れてカレンダーに入ってなかったから忘れてた。カレンダーの予定に従って生活していることがわかる。&lt;/p>
&lt;h2 id="ふりかえり">ふりかえり&lt;/h2>
&lt;p>今日はお仕事でスクラムイベントのレトロスペクティブがあった。最近は日本語でそのまま「ふりかえり」と呼ぶみたいやね。他の用語が英語なのであわせて英語で読んでたけど、ふりかえりの方が日本人的にはしっくりくるのでそれでいいと思う。&lt;/p>
&lt;p>開発の情報共有のやり取りが活発になったという意見が出た。私は11月から働き始めてまだ3週間ほどなので以前がどうだったのかわからない。2週間前に本格的にスクラム開発に移行して、POや開発者のリーダーが新任したり、開発者に新規メンバー (私のこと) が追加したりと、いろんな状況が変わっている。なにか特別なことをしたというわけではないけど、自然にコミュニケーションがよい方に改善されているなら全体としてよい傾向に思える。私はまだ業務のことが全くわからないのでインフラやテストなどの非機能要件のタスクをやっているだけ。開発者からみて負債というほど大きなものではないが、やった方がよい技術的な残タスクのようなものを私がどんどん fix しているので開発環境がよくなっている気がするといったコメントを名指しでいただいた。スクラムマスターによると、ふりかえりでは、個人名で問題を指摘するのはよくないが、個人名で感謝を伝えるのはよいという。なので、よいことには個人名が前面に出る。褒められて悪い気がする人はそうそういないので、このプラクティスはチームの雰囲気をよくすることに寄与するのだろうと思えた。&lt;/p>
&lt;h2 id="続-年末調整と住民税の納付">続: 年末調整と住民税の納付&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1123/#年末調整と住民税の納付">昨日&lt;/a> の続き。eLTAX のソフト版をダウンロードして年末調整の給与支払報告書の申請、住民税の特別徴収の納付も行った。アプリケーションの操作方法と手続きのドキュメントは懇切丁寧な内容なので、アプリケーションそのものの使い勝手はいまいちだけど、とくに手続きに迷うこともなく、順番に操作していけば問題なく申請や納付を完了できた。この2つの手続きは、昨年は紙で申請したり納付したりしていたのが、今年は電子申告になったのでちょっとクラスチェンジしたような感覚で気分がよかった。定期的な行政手続きを毎年やりながら少しずつやり方を洗練させていったり、異なる手続きに挑戦してみたり、制度の仕組みを理解したり、そういう少しずつ改善して学びを深めていくことそのものに幸せ感がある。人に依るんだろうけど、わりと私はマイクロ法人の行政手続きを楽しんでいる。&lt;/p></content></item><item><title>スクラムの起源</title><link>/diary/posts/2021/1123/</link><pubDate>Tue, 23 Nov 2021 10:57:15 +0900</pubDate><guid>/diary/posts/2021/1123/</guid><description>5時に寝て7時半に起きた。前週末は遊んでたので夜はいろいろ作業してた。朝起きる習慣がついてきたので何時に寝ても起きれる感じになってきた。うまく体調管理もできている。
年末調整と住民税の納付 年末調整は1月末まで、住民税の特別徴収は納付の特例を使うと6-11月の6ヶ月分を12月10日までに納める。年末調整も11月の給与を確定したら調整額を算出して12月の給与に反映する。必要な情報を入力したら会計システム (freee) で自動算出してくれて書類も一通り作ってくれるので難しくない。ここで出力される給与支払報告書を市役所と税務署のそれぞれに申請する。市役所向けの手続きは eLTAX で行い、税務署向けの手続きは e-Tax で行う。先日 Windows マシンを購入 したので、今回は eLTAX の DL 版で完全な手続きができるはず。ただし、e-Tax も eLTAX も祝日・日曜日は利用できないのでやろうと思ったものの、今日は祝日だからできなかった。
住民税の特別徴収の納付も今回が初めての試み。企業が社員に代わり住民税を納付するのが原則であり、これを特別徴収と呼ぶ。昨年は特別徴収への切り替え申請をしないといけないのを私が知らなくて手続きが遅れた結果、個人宛に届いた納付書でそのまま支払いした。納付自体はそれでも問題はない。おそらく徴税側からみたら源泉徴収して企業の担当者が納付した方が誤りがなく確実でサポートコストを削減できるという狙いなんだろうと推測する。住民税の納付も eLTAX でできるようなので後日挑戦してみる。
アジャイル開発とスクラム 第2版 顧客・技術・経営をつなぐ協調的ソフトウェア開発マネジメント 4日前から読み進めていて、第1部アジャイル開発とは何か、スクラムとは何か (第1章から第5章) を読み終えた。
冒頭の序論を読んでいて、スクラムは 1980 年代の日本の製造業の (革新的な) 製品開発スタイルの論文がオリジナルだというのを知った。ソフトウェア開発の文脈だと、米国から輸入した方法論のようにみえるが、もとは日本で編み出された方法論だったという。1986年に書かれたハーバード・ビジネス・レビューに投稿された論文がオリジナルらしい。
The New New Product Development Game by Hirotaka Takeuchi and Ikujiro Nonaka 前に スクラムガイド2020 を一通り読んでいたので、スクラムについての内容はだいたい理解できた。補足でよかったのは、スクラムガイド 2017 から 2020 で改訂された内容やその背景や意図などがコラムで紹介されていた。それらを知ることで、よりスクラムで陥りやすい失敗や誤解されがちなところを理解できた。たとえば「開発チーム」という用語から「開発者」に改められた。スクラムチームの中に別のチームがあるようにみえ、プロダクトオーナー vs 開発チームのような対立構造にならないよう、チームはスクラムチームという1つしかないという意図だという。そして、開発チームの自己組織化 (Self-organized) というキーワードが、スクラムチームの自己管理型 (Self-managed) へといったように、主体である開発チームだけ自律的且つ協働するように読めたのを、スクラムチームという1つのチームしかないと強調されている。
コラム: 2020 スクラムガイド改訂とスクラムの3つの罠 スクラムが形式的、儀式的になってしまっている 目的を理解せずにハウツーをなぞるだけのチームが増えたので抽象的な表現に変更した 例) デイリースクラムがただの報告するだけになっている デイリースクラムの目的は状況にあわせた再計画であるため、形式的な報告ではいけない プロダクトオーナー vs 開発チームの構図に陥ってしまっている チーム内の分断をなくし、ワンチームになることが強調されている 開発チームから開発者へ、チームはスクラムチームが唯一 プロダクトオーナー vs 開発者が対立構図になることが多かった 「開発チームの自己組織化」から「スクラムチームの自己管理」へ スクラムは役割を超えて協力していくことが欠かせない 問題 vs 私たち (スクラムチーム) という構図を引き出すことが重要 スクラムマスターがスクラム警察もしくは雑用係になってしまっている スクラムマスターが「サーバントリーダー」とされていたが、単にサーバントになってしまうことがあった スクラムマスターはプロダクトの成果や組織の目標にコミットメントしないといけない ただスクラムルールを守らせたり、会議の司会役をするだけではない 「真のリーダー」としての資質とプロダクトの成果や組織の目標にコミットメントしていくための熱量を重視して専任していく必要がある これらのコラムを読むと、私が傍からみていたスクラムは本来の意図したスクラムの開発方法論ではなく、正しく運用されていなかったスクラムなのかもしれないとも思えてきた。本書の第1部を読み進めてみて、スクラムの意図している目的や価値には私が共感できるところが多々あった。</description><content>&lt;p>5時に寝て7時半に起きた。前週末は遊んでたので夜はいろいろ作業してた。朝起きる習慣がついてきたので何時に寝ても起きれる感じになってきた。うまく体調管理もできている。&lt;/p>
&lt;h2 id="年末調整と住民税の納付">年末調整と住民税の納付&lt;/h2>
&lt;p>年末調整は1月末まで、住民税の特別徴収は納付の特例を使うと6-11月の6ヶ月分を12月10日までに納める。年末調整も11月の給与を確定したら調整額を算出して12月の給与に反映する。必要な情報を入力したら会計システム (freee) で自動算出してくれて書類も一通り作ってくれるので難しくない。ここで出力される給与支払報告書を市役所と税務署のそれぞれに申請する。市役所向けの手続きは &lt;a href="https://www.eltax.lta.go.jp/">eLTAX&lt;/a> で行い、税務署向けの手続きは &lt;a href="https://www.e-tax.nta.go.jp/">e-Tax&lt;/a> で行う。先日 &lt;a href="/diary/diary/posts/2021/1103/#asus-rog-zephyrus-g15-ga503qr">Windows マシンを購入&lt;/a> したので、今回は eLTAX の DL 版で完全な手続きができるはず。ただし、e-Tax も eLTAX も祝日・日曜日は利用できないのでやろうと思ったものの、今日は祝日だからできなかった。&lt;/p>
&lt;p>住民税の特別徴収の納付も今回が初めての試み。企業が社員に代わり住民税を納付するのが原則であり、これを特別徴収と呼ぶ。昨年は特別徴収への切り替え申請をしないといけないのを私が知らなくて手続きが遅れた結果、個人宛に届いた納付書でそのまま支払いした。納付自体はそれでも問題はない。おそらく徴税側からみたら源泉徴収して企業の担当者が納付した方が誤りがなく確実でサポートコストを削減できるという狙いなんだろうと推測する。住民税の納付も eLTAX でできるようなので後日挑戦してみる。&lt;/p>
&lt;h2 id="アジャイル開発とスクラム-第2版-顧客技術経営をつなぐ協調的ソフトウェア開発マネジメント">アジャイル開発とスクラム 第2版 顧客・技術・経営をつなぐ協調的ソフトウェア開発マネジメント&lt;/h2>
&lt;p>4日前から読み進めていて、第1部アジャイル開発とは何か、スクラムとは何か (第1章から第5章) を読み終えた。&lt;/p>
&lt;p>冒頭の序論を読んでいて、スクラムは 1980 年代の日本の製造業の (革新的な) 製品開発スタイルの論文がオリジナルだというのを知った。ソフトウェア開発の文脈だと、米国から輸入した方法論のようにみえるが、もとは日本で編み出された方法論だったという。1986年に書かれたハーバード・ビジネス・レビューに投稿された論文がオリジナルらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hbr.org/1986/01/the-new-new-product-development-game">The New New Product Development Game by Hirotaka Takeuchi and Ikujiro Nonaka&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>前に &lt;a href="https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf">スクラムガイド2020&lt;/a> を一通り読んでいたので、スクラムについての内容はだいたい理解できた。補足でよかったのは、スクラムガイド 2017 から 2020 で改訂された内容やその背景や意図などがコラムで紹介されていた。それらを知ることで、よりスクラムで陥りやすい失敗や誤解されがちなところを理解できた。たとえば「開発チーム」という用語から「開発者」に改められた。スクラムチームの中に別のチームがあるようにみえ、プロダクトオーナー vs 開発チームのような対立構造にならないよう、チームはスクラムチームという1つしかないという意図だという。そして、開発チームの自己組織化 (Self-organized) というキーワードが、スクラムチームの自己管理型 (Self-managed) へといったように、主体である開発チームだけ自律的且つ協働するように読めたのを、スクラムチームという1つのチームしかないと強調されている。&lt;/p>
&lt;blockquote>
&lt;h5 id="コラム-2020-スクラムガイド改訂とスクラムの3つの罠">コラム: 2020 スクラムガイド改訂とスクラムの3つの罠&lt;/h5>
&lt;ul>
&lt;li>スクラムが形式的、儀式的になってしまっている
&lt;ul>
&lt;li>目的を理解せずにハウツーをなぞるだけのチームが増えたので抽象的な表現に変更した&lt;/li>
&lt;li>例) デイリースクラムがただの報告するだけになっている
&lt;ul>
&lt;li>デイリースクラムの目的は状況にあわせた再計画であるため、形式的な報告ではいけない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>プロダクトオーナー vs 開発チームの構図に陥ってしまっている
&lt;ul>
&lt;li>チーム内の分断をなくし、ワンチームになることが強調されている&lt;/li>
&lt;li>開発チームから開発者へ、チームはスクラムチームが唯一&lt;/li>
&lt;li>プロダクトオーナー vs 開発者が対立構図になることが多かった
&lt;ul>
&lt;li>「開発チームの自己組織化」から「スクラムチームの自己管理」へ&lt;/li>
&lt;li>スクラムは役割を超えて協力していくことが欠かせない
&lt;ul>
&lt;li>問題 vs 私たち (スクラムチーム) という構図を引き出すことが重要&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>スクラムマスターがスクラム警察もしくは雑用係になってしまっている
&lt;ul>
&lt;li>スクラムマスターが「サーバントリーダー」とされていたが、単にサーバントになってしまうことがあった&lt;/li>
&lt;li>スクラムマスターはプロダクトの成果や組織の目標にコミットメントしないといけない
&lt;ul>
&lt;li>ただスクラムルールを守らせたり、会議の司会役をするだけではない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>「真のリーダー」としての資質とプロダクトの成果や組織の目標にコミットメントしていくための熱量を重視して専任していく必要がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>これらのコラムを読むと、私が傍からみていたスクラムは本来の意図したスクラムの開発方法論ではなく、正しく運用されていなかったスクラムなのかもしれないとも思えてきた。本書の第1部を読み進めてみて、スクラムの意図している目的や価値には私が共感できるところが多々あった。&lt;/p></content></item><item><title>呑んだくれ</title><link>/diary/posts/2021/1109/</link><pubDate>Tue, 09 Nov 2021 07:19:29 +0900</pubDate><guid>/diary/posts/2021/1109/</guid><description>1時半に寝て6時に起きた。夜にウォーキングに出かけようとしたらたまたま雨が降ってきて諦めた。そしたら寝付けなかった。やっぱり歩いて疲弊すると寝付けやすいのかもしれない。ストレッチしたりしてたら寝るの遅くなった。
中間申告の納付 法人税・地方法人税の申告用紙が届いていたので内容を確認しながら e-tax で申請して pay-easy で税金の支払いを完了した。国税は一番最後に書類が届く。今年の書類が届いた日はこんな感じ。毎年記録しているから届く時期に準備していて慌てなくて済む。
法人市民税: 10月16日 法人県民税: 10月20日 法人税・地方法人税: 11月8日 国税の納付をもって中間申告をすべて終えた。中間申告は税金の先払いだからキャッシュフローが悪いと払えないみたいなことが起きる可能性がある。そうすると仮決算して支払い金額を抑えるみたいなことが必要になるんだろうな。まさに貧乏暇無し。
GitHub + Slack Integration integrations/slack の内容をみて subscribe する内容を確認した。4月頃にアップグレードしてそれまでの設定の互換性をなくして、その影響でうまく動かなかったりしてた。
github の slack 連携のときの commits:all が commits:* に変更されたみたい。4月中旬のバージョンアップ以降に作ったリポジトリか設定だと commits:all だと連携されないみたい。https://t.co/mGVUyEbgGQ
&amp;mdash; Tetsuya Morimoto (@t2y) April 30, 2021 その後、追いかけてなかったけど、いま README をみたら次の5つのイベントはデフォルトで有効になるみたい。
issues pulls commits releases deployments 必要に応じて他のイベントも追加するとよいみたい。私は次の3つかな。
reviews comments commits:* デフォルトのイベントは指定しなくてもよいけど、コピペですべて明示的に設定するならこんな感じ。
/github subscribe owner/repo issues,pulls,commits:*,releases,deployments,reviews,comments みんなの Python 勉強会 みんなのPython勉強会#75 で発表した。参加者は190人となっているけど、実際に zoom に参加していた人の最高値は110人ぐらいだったかな。190 * 0.</description><content>&lt;p>1時半に寝て6時に起きた。夜にウォーキングに出かけようとしたらたまたま雨が降ってきて諦めた。そしたら寝付けなかった。やっぱり歩いて疲弊すると寝付けやすいのかもしれない。ストレッチしたりしてたら寝るの遅くなった。&lt;/p>
&lt;h2 id="中間申告の納付">中間申告の納付&lt;/h2>
&lt;p>法人税・地方法人税の申告用紙が届いていたので内容を確認しながら e-tax で申請して pay-easy で税金の支払いを完了した。国税は一番最後に書類が届く。今年の書類が届いた日はこんな感じ。毎年記録しているから届く時期に準備していて慌てなくて済む。&lt;/p>
&lt;ul>
&lt;li>法人市民税: 10月16日&lt;/li>
&lt;li>法人県民税: 10月20日&lt;/li>
&lt;li>法人税・地方法人税: 11月8日&lt;/li>
&lt;/ul>
&lt;p>国税の納付をもって中間申告をすべて終えた。中間申告は税金の先払いだからキャッシュフローが悪いと払えないみたいなことが起きる可能性がある。そうすると仮決算して支払い金額を抑えるみたいなことが必要になるんだろうな。まさに貧乏暇無し。&lt;/p>
&lt;h2 id="github--slack-integration">GitHub + Slack Integration&lt;/h2>
&lt;p>&lt;a href="https://github.com/integrations/slack">integrations/slack&lt;/a> の内容をみて subscribe する内容を確認した。4月頃にアップグレードしてそれまでの設定の互換性をなくして、その影響でうまく動かなかったりしてた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">github の slack 連携のときの commits:all が commits:* に変更されたみたい。4月中旬のバージョンアップ以降に作ったリポジトリか設定だと commits:all だと連携されないみたい。&lt;a href="https://t.co/mGVUyEbgGQ">https://t.co/mGVUyEbgGQ&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1387999605959188481?ref_src=twsrc%5Etfw">April 30, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>その後、追いかけてなかったけど、いま README をみたら次の5つのイベントはデフォルトで有効になるみたい。&lt;/p>
&lt;ul>
&lt;li>issues&lt;/li>
&lt;li>pulls&lt;/li>
&lt;li>commits&lt;/li>
&lt;li>releases&lt;/li>
&lt;li>deployments&lt;/li>
&lt;/ul>
&lt;p>必要に応じて他のイベントも追加するとよいみたい。私は次の3つかな。&lt;/p>
&lt;ul>
&lt;li>reviews&lt;/li>
&lt;li>comments&lt;/li>
&lt;li>commits:*&lt;/li>
&lt;/ul>
&lt;p>デフォルトのイベントは指定しなくてもよいけど、コピペですべて明示的に設定するならこんな感じ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">/github subscribe owner/repo issues,pulls,commits:*,releases,deployments,reviews,comments
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="みんなの-python-勉強会">みんなの Python 勉強会&lt;/h2>
&lt;p>&lt;a href="https://startpython.connpass.com/event/228136/">みんなのPython勉強会#75&lt;/a> で発表した。参加者は190人となっているけど、実際に zoom に参加していた人の最高値は110人ぐらいだったかな。190 * 0.6 = 114 なので無料イベントの参加者数は6割前後の法則に合致する。人数が増えるほどこの法則は精度が高いように思う。発表者は3人いて、私は2番目に発表して、持ち時間は30分だった。録画していたので後でアーカイブをみれるようにするみたい。私は録画否定派で録画すると参加者がオンタイムで見なくなるのと、いつでも見れるものは見ないということもあるので勉強会のレベルは録画しなくてもいいんじゃないかと考えている。もちろん大きなカンファレンスは録画があった方が参加できない人も後から興味のある発表を見返せていいとは思う。25分発表で質疑応答5分で発表の時間配分はうまくいった。あまり準備できなかった割には伝えたいことはだいたい話せたと思う。なんか質疑応答で「カザモリ社は python のお仕事を受けてくれますか？」といった質問があってちょっと驚いた。ここ数年 python をメインにしたお仕事してなくて、仕事は java, go が多いと言っているせいか、python の仕事はやってないようにみえてしまうのかもしれない。python, java, go の3つの言語のお仕事は受けますよと回答した。発表終わってから1時間ほど懇親会をした。ほとんどコミュニティの主催者と発表者で雑談してた。久しぶりに外部の勉強会でいろんな人とお話することができて楽しかった。たまには外に出かけていくことに重要性も認識できた。またネタがあったら発表したいなとは思う。&lt;/p>
&lt;h2 id="呑み">呑み&lt;/h2>
&lt;p>懇親会が終わったのが22時で、疲れと空腹から仲のよい焼き鳥屋さんのお店に寄って晩ご飯を食べることにした。時短が終わっているので22時からでも飲みに行ける。お店は翌2時まで営業している。22時過ぎに行ったらお客さんは誰もいなくて、野菜サラダと焼き鳥を注文してマスターと雑談してた。&lt;/p>
&lt;p>時短が終わってから景気はどうかを聞いてみると、まだまだお客さんの戻りはコロナ前とくらべてまだまだだという。0時まわってから他の飲食店で働いている人たちが店内を埋まるぐらいは来てくれていたそうだけど、まだまだ余裕がないのか全然戻ってきてないと話されていた。0時半頃に2人組で「○○さんの紹介で来ました」みたいな既に酔っ払っているお客さんが来たりして、終電終わってからこういうお客さんが来たりしていたんだなと雰囲気は理解できた。マスターも2時に閉店して5時まで開いている他の飲食店に飲みに行くと話してた。そうやってお互いにお店に飲みに行って付き合いのようなものができているんだというのが理解できた。どこかのスナック行って3万円ほど使っても、必ずそのスナックの人がお店に来てくれて3万円以上使ってくれるという。お金をまわすってそういうことなんやなとマスターの話しを聞いていて理解できた。自分のお店を2時に閉店して、5時まで飲み歩いて、それから寝てまた次の日に仕事というのは体力的にすごくしんどそうで、マスター自身もコロナ明けは体調をみながら飲み歩いているとも話されてた。結局、2時前までマスターと雑談してて、私も22時から4時間弱ほど居座ってた。久しぶりに外で飲んでハイになっていたかもしれない。&lt;/p>
&lt;p>マスターのお勧めで &lt;a href="https://www.hamadasyuzou.co.jp/daiyame_brand">だいやめ&lt;/a> という芋焼酎をお湯割りで飲んだ。香熟芋という珍し？芋を使っていて、ライチのような香りのする芋焼酎でおいしかった。お土産によさそうなので覚えておこうと思う。&lt;/p></content></item><item><title>睡眠不良</title><link>/diary/posts/2021/1022/</link><pubDate>Fri, 22 Oct 2021 13:29:09 +0900</pubDate><guid>/diary/posts/2021/1022/</guid><description>4時に寝て6時に起きた。朝活があると何時に寝ても6時に起きれる。終わってからやっぱり眠くなって1時間ほど寝てた。お昼の外出から戻ってきて雑務やってから、なんか集中できなくて15時から帰ってお昼ご飯食べて2-3時間寝てた。寝る時間帯がずれると生活のリズムが狂ってしまい、全体でみると生産性が落ちるように思えてきた。水と金だけ6時に起きるのをやめて毎日6時に起きるべきだと強く思うようになった。
朝活 Webデザイントレンドのよりみち の金朝ツメトギに参加した。今回から「つめとぎ」から「ツメトギ」のカタカナに名前変更してパワーアップ？したみたい。本を読んでもよかったんだけど、チャット欄でコメントしながら live をみてみようと思って普通に聴いていた。#金朝ツメトギ というハッシュタグは私がコメントして生まれた。コミュニティ的に盛り上げるならタイムラインを共有した方がよいとは思う。youtube live のチャットにコメントした方がいいか、twitter で気軽にコメントした方がいいか、まだよくわかってない。youtube のチャット欄のコメントの一覧性とか、普段使いのツールになっていないせいか、なんとなく抵抗感がある。いま参加者が少ないせいか、コメントするとスピーカーがコメントに反応して返答したりするので、あまりカジュアルに書き過ぎるとスピーカーの作業の邪魔にならないかな？とか思ったりもした。youtube live という勉強会の人間関係の距離感が難しい。
あと Facebook Connect 2021 というイベントがあることを教えてもらった。友だちに共有したら会社を休んで参加するとか言っているので私も参加してみることにした。どうしようか迷ってたけど、身近な人たちが参加するとつられるのかもしれない。
法人県民税と法人市民税の中間申告と納付 前日(というか今日)に4時まで起きてたのは申告書の内容確認や記入をしてたから。せっかく申告書を作成したのですぐ納付したくなった。それで新長田の合同庁舎まで申告に行ってきた。eltax は相変わらず windows 向けの DL 版でないと申告できそうにない。WEB 版もあって一部対応しているようだけど、よくよく調べていくと DL 版でしかできないようにみえる。毎年 WEB 版でできるようになっているかどうかを調べている。この互換性を調べるような作業を都度やるのが面倒になってきた。vr 用途 (oculus link を使いたい) にも使えるので windows マシンを購入してもいいかもしれないと考えるようになってきた。申告書を郵送してもよいけど、1時間もあれば往復できる距離なので気分転換も兼ねて合同庁舎に出向いてきた。
帰りに新長田駅の近くの三菱UFJ銀行の支店で納付する。前回は窓口納付をしたが、今回は STM (Store Teller Machine) での納付に初挑戦した。STM(Store Teller Machine)の存在意義とは のブログ記事にも書かれている通り、納付書を OCR でスキャンすることでどんな納付書でも対応できるという汎用性はすごいと思うものの、その裏で人間がチェックしているんじゃないかと思えるメッセージや引き落とす合計金額はユーザーが手入力で決定する (OCR で合計がどの金額かわからなかった場合のみ？) といったオペレーションになっていて、なんか全く自動化されてない感があって残念に思った。見た目上、機械化されているけど、運用には人手がかかっているようにみえた。まぁでも、初めて使ってみて経験としてはおもしろかった。
Jira のフィルターとリマインダー 所得税や住民税の納付は原則毎月納付する必要があるけど、小さい企業は納付の特例という制度があって6ヶ月単位にまとめて納付できる。小さい企業の事務手続きの工数削減を狙いとしてある制度だと思う。うちもその特例制度を利用して6ヶ月ごとに納付している。カレンダーに繰り返し予定として登録してあるのでカレンダーをみていれば見落とすことはないのだけど、そのときに都度チケットを作ってやるのも面倒なので納付の親チケットを作っておいて、子タスクとして毎回作業するようにしている。それをみていて、納付期限を設定しておいてリマインダーしたら課題管理システムっぽくていいなと思って Jira でのやり方を調べてみた。Jiraにて期限の近い課題の通知を受け取りたい というのがあって、任意の JQL で期限を調べるフィルターを書いて、そのフィルターに対してサブスクリプションというメール配信設定を行う仕組みになっている。これはこれでよくできたうまい仕組みだと思う。しかし、いまチケットのイベントに対してメールを送る設定は無効にしていて、Slack インテグレーションを使ってすべて Slack の通知チャンネルにイベントを流すようにしている。できれば、Slack インテグレーションで期限のリマインダーを通知できるのが望ましいた。公式の Jira Slack app だと、JQL でフィルターはできるけど、イベント発生時に通知する仕組みなので毎週フィルター実行するような用途には使えない。
たまたまそんな話しをツィートしてたら Jira API と Slack API を使ってスクリプトを書いているというのを教えてもらった。これはこれで便利そう。</description><content>&lt;p>4時に寝て6時に起きた。朝活があると何時に寝ても6時に起きれる。終わってからやっぱり眠くなって1時間ほど寝てた。お昼の外出から戻ってきて雑務やってから、なんか集中できなくて15時から帰ってお昼ご飯食べて2-3時間寝てた。寝る時間帯がずれると生活のリズムが狂ってしまい、全体でみると生産性が落ちるように思えてきた。水と金だけ6時に起きるのをやめて毎日6時に起きるべきだと強く思うようになった。&lt;/p>
&lt;h2 id="朝活">朝活&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/channel/UC1rVx0vAg66su1WvH3X-RJg">Webデザイントレンドのよりみち&lt;/a> の金朝ツメトギに参加した。今回から「つめとぎ」から「ツメトギ」のカタカナに名前変更してパワーアップ？したみたい。本を読んでもよかったんだけど、チャット欄でコメントしながら live をみてみようと思って普通に聴いていた。&lt;a href="https://twitter.com/hashtag/%E9%87%91%E6%9C%9D%E3%83%84%E3%83%A1%E3%83%88%E3%82%AE?src=hashtag_click&amp;amp;f=live">#金朝ツメトギ&lt;/a> というハッシュタグは私がコメントして生まれた。コミュニティ的に盛り上げるならタイムラインを共有した方がよいとは思う。youtube live のチャットにコメントした方がいいか、twitter で気軽にコメントした方がいいか、まだよくわかってない。youtube のチャット欄のコメントの一覧性とか、普段使いのツールになっていないせいか、なんとなく抵抗感がある。いま参加者が少ないせいか、コメントするとスピーカーがコメントに反応して返答したりするので、あまりカジュアルに書き過ぎるとスピーカーの作業の邪魔にならないかな？とか思ったりもした。youtube live という勉強会の人間関係の距離感が難しい。&lt;/p>
&lt;p>あと &lt;a href="https://www.facebookconnect.com/ja-jp/">Facebook Connect 2021&lt;/a> というイベントがあることを教えてもらった。友だちに共有したら会社を休んで参加するとか言っているので私も参加してみることにした。どうしようか迷ってたけど、身近な人たちが参加するとつられるのかもしれない。&lt;/p>
&lt;h2 id="法人県民税と法人市民税の中間申告と納付">法人県民税と法人市民税の中間申告と納付&lt;/h2>
&lt;p>前日(というか今日)に4時まで起きてたのは申告書の内容確認や記入をしてたから。せっかく申告書を作成したのですぐ納付したくなった。それで新長田の合同庁舎まで申告に行ってきた。&lt;a href="https://www.eltax.lta.go.jp/">eltax&lt;/a> は相変わらず windows 向けの DL 版でないと申告できそうにない。WEB 版もあって一部対応しているようだけど、よくよく調べていくと DL 版でしかできないようにみえる。毎年 WEB 版でできるようになっているかどうかを調べている。この互換性を調べるような作業を都度やるのが面倒になってきた。vr 用途 (oculus link を使いたい) にも使えるので windows マシンを購入してもいいかもしれないと考えるようになってきた。申告書を郵送してもよいけど、1時間もあれば往復できる距離なので気分転換も兼ねて合同庁舎に出向いてきた。&lt;/p>
&lt;p>帰りに新長田駅の近くの三菱UFJ銀行の支店で納付する。前回は窓口納付をしたが、今回は STM (Store Teller Machine) での納付に初挑戦した。&lt;a href="https://life-is-miracle-wind.blog.jp/archives/22922687.html">STM(Store Teller Machine)の存在意義とは&lt;/a> のブログ記事にも書かれている通り、納付書を OCR でスキャンすることでどんな納付書でも対応できるという汎用性はすごいと思うものの、その裏で人間がチェックしているんじゃないかと思えるメッセージや引き落とす合計金額はユーザーが手入力で決定する (OCR で合計がどの金額かわからなかった場合のみ？) といったオペレーションになっていて、なんか全く自動化されてない感があって残念に思った。見た目上、機械化されているけど、運用には人手がかかっているようにみえた。まぁでも、初めて使ってみて経験としてはおもしろかった。&lt;/p>
&lt;h2 id="jira-のフィルターとリマインダー">Jira のフィルターとリマインダー&lt;/h2>
&lt;p>所得税や住民税の納付は原則毎月納付する必要があるけど、小さい企業は納付の特例という制度があって6ヶ月単位にまとめて納付できる。小さい企業の事務手続きの工数削減を狙いとしてある制度だと思う。うちもその特例制度を利用して6ヶ月ごとに納付している。カレンダーに繰り返し予定として登録してあるのでカレンダーをみていれば見落とすことはないのだけど、そのときに都度チケットを作ってやるのも面倒なので納付の親チケットを作っておいて、子タスクとして毎回作業するようにしている。それをみていて、納付期限を設定しておいてリマインダーしたら課題管理システムっぽくていいなと思って Jira でのやり方を調べてみた。&lt;a href="https://community.atlassian.com/t5/Jira-articles/Jira%E3%81%AB%E3%81%A6%E6%9C%9F%E9%99%90%E3%81%AE%E8%BF%91%E3%81%84%E8%AA%B2%E9%A1%8C%E3%81%AE%E9%80%9A%E7%9F%A5%E3%82%92%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8A%E3%81%9F%E3%81%84/ba-p/770716">Jiraにて期限の近い課題の通知を受け取りたい&lt;/a> というのがあって、任意の JQL で期限を調べるフィルターを書いて、そのフィルターに対してサブスクリプションというメール配信設定を行う仕組みになっている。これはこれでよくできたうまい仕組みだと思う。しかし、いまチケットのイベントに対してメールを送る設定は無効にしていて、Slack インテグレーションを使ってすべて Slack の通知チャンネルにイベントを流すようにしている。できれば、Slack インテグレーションで期限のリマインダーを通知できるのが望ましいた。公式の &lt;a href="https://www.atlassian.com/partnerships/slack">Jira Slack app&lt;/a> だと、JQL でフィルターはできるけど、イベント発生時に通知する仕組みなので毎週フィルター実行するような用途には使えない。&lt;/p>
&lt;p>たまたまそんな話しをツィートしてたら Jira API と Slack API を使ってスクリプトを書いているというのを教えてもらった。これはこれで便利そう。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">こんな感じのスクリプトでJIRAからslackに通知してます &lt;a href="https://t.co/UzeIZ9Nbol">https://t.co/UzeIZ9Nbol&lt;/a>&lt;/p>&amp;mdash; Takanori Suzuki (@takanory) &lt;a href="https://twitter.com/takanory/status/1451572269768003589?ref_src=twsrc%5Etfw">October 22, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item><item><title>改正法人税法等の説明会</title><link>/diary/posts/2021/1019/</link><pubDate>Tue, 19 Oct 2021 08:52:42 +0900</pubDate><guid>/diary/posts/2021/1019/</guid><description>0-1時ぐらいに寝て7時半に起きた。よく眠れたか眠れてないかもわからないような目覚め方をして少しぼおっとしてた。朝ゆっくりしてもいいかと思いつつ準備して移動したら9時前にはオフィスにいたので普通の日とそう変わらない一日の始めだった。夜にジョギング行こうかと思ってたけど、ちょうど通り雨が降ったりやんだりしててやめた。代わりに雨やんでからオフィス行って調べてものしてた。
データ指向アプリケーションデザイン 7.3を読んで7章トランザクションを読み終えた。トランザクションの章は言葉も知らないし、あまりクリティカルなアプリケーションの開発に関わってこなかったのでそこまで意識したことがなかった。トランザクションで問題が発生する分離レベルと典型的なパターンが体系的に整理されていてすごく勉強になった。結果的にトランザクションを使わないとしても、トランザクションの要否や起きうる整合性の問題を理解しておくとデータ定義やアプリケーションの設計にも活かせる気がする。7章まで読んだ中でもっとも知らないことが多かった。約300ページなのでだいたい半分読み終えた。まだまだ先は長い。
トランザクションの開始時点でロックをかけるべきオブジェクトが存在せず、あるトランザクションでの書き込みが他のトランザクションの検索クエリの結果を変化させてしまう問題を ファントム と呼ぶ。ファントムの対策の1つとして、あらかじめそのデータを作っておき SELECT FOR UPDATE でロックを取得するやり方を 衝突の実体化 (materializing conflicts) と呼ぶらしい。グループウェアの開発をしていた頃、1つのスレッドしかトランザクションを実行できないことを保証するための切り札として、ロック用途のテーブルを設けておき、そのロックを獲得したスレッドだけ処理できるようにしていた。当時はわからなかったけど、あれは衝突の実体化という手法だったんだといま気付いた。
データベースのクラッシュや整合性に関する問題に対する信頼性を保つために、それらの問題を単純化するために、この数十年にわたって選択されてきた仕組みが トランザクション である。トランザクションは、アプリケーションが複数の読み書きを論理的な単位としてまとめる方法である。概念的には、トランザクション中のすべての読み書きは1つの操作として実行される。トランザクションは抽象化のレイヤーであり、アプリケーションはある種の並行性の問題や、ある種のハードウェアやソフトウェアの問題が存在しないかのように振る舞えるようになる。
トランザクションは全体として成功（ コミット（commit） ）もしくは失敗（ 中断（abort） 、 ロールバック（rollback） ）する。トランザクションが失敗した場合には、アプリケーションは安全にリトライできる。トランザクションは自然法則ではなく、データベースにアクセスするアプリケーションのためのプログラミングモデルをシンプルにするという目的を持って生み出された。トランザクションを利用すれば、ある種の潜在的なエラーの状況や並行性の問題はデータベースが面倒を見てくれるので、アプリケーションはそれらを気にしなくてよくなる（このことは 安全性の保証 と呼ばれる）。
トランザクションが提供する安全性の保証は ACID で示される。
原子性 (Atomicity) 原子（アトミック） はそれ以上小さな部分に分割できないものを指して使われる言葉 マルチスレッドのプログラミングにおいては、あるスレッドがアトミックな処理を実行しているというなら、それは他のスレッドからはその処理の半分だけ完了した途中の状態を見る方法が存在しないことを意味する。システムが取りえる状態は、その処理が始まる前と終わった後の状態だけであり、その中間の状態になることはない 前にメモリモデルの文脈で、あるプロセスが書き込み完了したデータが、他のプロセスからも確実に読めることをアトミックな操作と習ったことがある 原子性と並行性は関係がない エラーの際にトランザクションを中断し、そのトランザクションのすべての書き込みを破棄できることが、 ACID の原子性を決定づける特徴と言える アプリケーションがリトライしても安全であることを保証する 中断可能性（abortability） の方が原子性よりも良い言葉だったと思われる 一貫性 (Consistency) 一貫性は多くの意味で使われる とくに日本語では整合性とも訳される 非同期のレプリケーションシステムでは結果整合性の問題が発生する (5章) コンシステントハッシュ法は、リバランシングのためにいくつかのシステムで利用されているパーティショニングのアプローチ CAP 定理では、一貫性という言葉は線形化可能性の意味で使われる (9章) ACID の文脈における一貫性は、データベースが「良い状態」にあることを示すアプリケーション固有の概念を指す 同じ言葉を少なくとも4つの異なる意味で使われている。ACID における一貫性という概念は、データについて常に真でなければならない何らかの言明（ 不変性 ）があることを指す。たとえば、会計システムの場合、すべてのアカウントでまとめれば常に貸方と借方は等しくならなければならない。この一貫性の概念はアプリケーション固有の不変性の概念に依存しており、一貫性を保つようにトランザクションを適切に定義することはアプリケーションの責任となる。原子性、分離性、永続性はデータベースの特性だが、一貫性は（ ACID という考え方においては）アプリケーションの特性である。したがって、 C は実際には ACID に属していない。</description><content>&lt;p>0-1時ぐらいに寝て7時半に起きた。よく眠れたか眠れてないかもわからないような目覚め方をして少しぼおっとしてた。朝ゆっくりしてもいいかと思いつつ準備して移動したら9時前にはオフィスにいたので普通の日とそう変わらない一日の始めだった。夜にジョギング行こうかと思ってたけど、ちょうど通り雨が降ったりやんだりしててやめた。代わりに雨やんでからオフィス行って調べてものしてた。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>7.3を読んで7章トランザクションを読み終えた。トランザクションの章は言葉も知らないし、あまりクリティカルなアプリケーションの開発に関わってこなかったのでそこまで意識したことがなかった。トランザクションで問題が発生する分離レベルと典型的なパターンが体系的に整理されていてすごく勉強になった。結果的にトランザクションを使わないとしても、トランザクションの要否や起きうる整合性の問題を理解しておくとデータ定義やアプリケーションの設計にも活かせる気がする。7章まで読んだ中でもっとも知らないことが多かった。約300ページなのでだいたい半分読み終えた。まだまだ先は長い。&lt;/p>
&lt;p>トランザクションの開始時点でロックをかけるべきオブジェクトが存在せず、あるトランザクションでの書き込みが他のトランザクションの検索クエリの結果を変化させてしまう問題を &lt;strong>ファントム&lt;/strong> と呼ぶ。ファントムの対策の1つとして、あらかじめそのデータを作っておき &lt;code>SELECT FOR UPDATE&lt;/code> でロックを取得するやり方を &lt;strong>衝突の実体化 (materializing conflicts)&lt;/strong> と呼ぶらしい。グループウェアの開発をしていた頃、1つのスレッドしかトランザクションを実行できないことを保証するための切り札として、ロック用途のテーブルを設けておき、そのロックを獲得したスレッドだけ処理できるようにしていた。当時はわからなかったけど、あれは衝突の実体化という手法だったんだといま気付いた。&lt;/p>
&lt;blockquote>
&lt;p>データベースのクラッシュや整合性に関する問題に対する信頼性を保つために、それらの問題を単純化するために、この数十年にわたって選択されてきた仕組みが &lt;strong>トランザクション&lt;/strong> である。トランザクションは、アプリケーションが複数の読み書きを論理的な単位としてまとめる方法である。概念的には、トランザクション中のすべての読み書きは1つの操作として実行される。トランザクションは抽象化のレイヤーであり、アプリケーションはある種の並行性の問題や、ある種のハードウェアやソフトウェアの問題が存在しないかのように振る舞えるようになる。&lt;/p>
&lt;p>トランザクションは全体として成功（ &lt;strong>コミット（commit）&lt;/strong> ）もしくは失敗（ &lt;strong>中断（abort）&lt;/strong> 、 &lt;strong>ロールバック（rollback）&lt;/strong> ）する。トランザクションが失敗した場合には、アプリケーションは安全にリトライできる。トランザクションは自然法則ではなく、データベースにアクセスするアプリケーションのためのプログラミングモデルをシンプルにするという目的を持って生み出された。トランザクションを利用すれば、ある種の潜在的なエラーの状況や並行性の問題はデータベースが面倒を見てくれるので、アプリケーションはそれらを気にしなくてよくなる（このことは &lt;strong>安全性の保証&lt;/strong> と呼ばれる）。&lt;/p>
&lt;p>トランザクションが提供する安全性の保証は &lt;strong>ACID&lt;/strong> で示される。&lt;/p>
&lt;h5 id="原子性-atomicity">原子性 (Atomicity)&lt;/h5>
&lt;ul>
&lt;li>&lt;strong>原子（アトミック）&lt;/strong> はそれ以上小さな部分に分割できないものを指して使われる言葉&lt;/li>
&lt;li>マルチスレッドのプログラミングにおいては、あるスレッドがアトミックな処理を実行しているというなら、それは他のスレッドからはその処理の半分だけ完了した途中の状態を見る方法が存在しないことを意味する。システムが取りえる状態は、その処理が始まる前と終わった後の状態だけであり、その中間の状態になることはない
&lt;ul>
&lt;li>前にメモリモデルの文脈で、あるプロセスが書き込み完了したデータが、他のプロセスからも確実に読めることをアトミックな操作と習ったことがある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>原子性と並行性は関係がない&lt;/li>
&lt;li>エラーの際にトランザクションを中断し、そのトランザクションのすべての書き込みを破棄できることが、 ACID の原子性を決定づける特徴と言える
&lt;ul>
&lt;li>アプリケーションがリトライしても安全であることを保証する&lt;/li>
&lt;li>&lt;strong>中断可能性（abortability）&lt;/strong> の方が原子性よりも良い言葉だったと思われる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="一貫性-consistency">一貫性 (Consistency)&lt;/h4>
&lt;ul>
&lt;li>一貫性は多くの意味で使われる
&lt;ul>
&lt;li>とくに日本語では整合性とも訳される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>非同期のレプリケーションシステムでは結果整合性の問題が発生する (5章)&lt;/li>
&lt;li>コンシステントハッシュ法は、リバランシングのためにいくつかのシステムで利用されているパーティショニングのアプローチ&lt;/li>
&lt;li>CAP 定理では、一貫性という言葉は線形化可能性の意味で使われる (9章)&lt;/li>
&lt;li>ACID の文脈における一貫性は、データベースが「良い状態」にあることを示すアプリケーション固有の概念を指す&lt;/li>
&lt;/ul>
&lt;p>同じ言葉を少なくとも4つの異なる意味で使われている。ACID における一貫性という概念は、データについて常に真でなければならない何らかの言明（ &lt;strong>不変性&lt;/strong> ）があることを指す。たとえば、会計システムの場合、すべてのアカウントでまとめれば常に貸方と借方は等しくならなければならない。この一貫性の概念はアプリケーション固有の不変性の概念に依存しており、一貫性を保つようにトランザクションを適切に定義することはアプリケーションの責任となる。原子性、分離性、永続性はデータベースの特性だが、一貫性は（ ACID という考え方においては）アプリケーションの特性である。したがって、 C は実際には ACID に属していない。&lt;/p>
&lt;h4 id="分離性-isolation">分離性 (Isolation)&lt;/h4>
&lt;p>多くのデータベースは、同時に複数のクライアントからアクセスされる。データベース中の同じレコードにアクセスするときに並行性の問題（レース条件［ race condition ］）が生じる可能性がある。データベース中に保存されているカウンタを、2つのクライアントが同時にインクリメントすると仮定する。それぞれのクライアントは現在の値を読み取り、1を加え、新しい値を書き戻す。ACID における分離性とは、並行して実行されたトランザクションがお互いから分離されており、お互いのつま先を踏みつけあうようなことがないという意味である。実際の運用では、パフォーマンスの制約から分離レベルによって保証される分離性が変わってくる。&lt;/p>
&lt;h4 id="永続性-durability">永続性 (Durability)&lt;/h4>
&lt;p>データベースシステムが目的とするのは、データを失う恐れなく保存できる安全な場所を提供すること。永続性は、トランザクションのコミットが成功したら、仮にハードウェアの障害やデータベースのクラッシュがあったとしても、そのトランザクションで書き込まれたすべてのデータは失われないことを約束する。&lt;/p>
&lt;h4 id="用語の整理">用語の整理&lt;/h4>
&lt;p>トランザクションはデータモデルがどういったものであるかにかかわらず、価値あるデータベースの機能と言える。並行に実行されたトランザクションがお互いに影響しあわない分離性における保証を &lt;strong>分離レベル&lt;/strong> と呼ぶ。&lt;/p>
&lt;ul>
&lt;li>read committed&lt;/li>
&lt;li>スナップショット分離（repeatable read とも呼ばれる）&lt;/li>
&lt;li>直列化可能&lt;/li>
&lt;/ul>
&lt;p>これらの分離レベルに対してトランザクションで発生する様々なレース条件がある。&lt;/p>
&lt;ul>
&lt;li>ダーティリード
&lt;ul>
&lt;li>あるクライアントが他のクライアントのまだコミットされていない書き込みを読める&lt;/li>
&lt;li>read committed 分離レベル及びそれ以上に強い分離レベルはダーティリードは生じない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ダーティライト
&lt;ul>
&lt;li>あるクライアントが他のクライアントによるまだコミットされていない書き込みの内容を上書きしてしまう&lt;/li>
&lt;li>ほぼすべてのトランザクションの実装は、ダーティライトを生じない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>読み取りスキュー（nonrepeatable read）
&lt;ul>
&lt;li>クライアントが異なる時刻にデータベースの異なる部分を見ること&lt;/li>
&lt;li>この問題の最も一般的な回避策はスナップショット分離によるもので、これはトランザクションがある時点での一貫したスナップショットから読み取りを行えるようにする&lt;/li>
&lt;li>通常、MVCC（multi-version concurrency control）を利用して実装される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>更新のロスト
&lt;ul>
&lt;li>2つのクライアントが並行して read-modify-write サイクルを実行するとき、片方が他方の書き込みをその変更内容を考慮せずに上書きしてしまい、データが失われること&lt;/li>
&lt;li>スナップショット分離レベルの実装にはこの異常を自動的に回避してくれるものもあるが、明示的なロック（ SELECT FOR UPDATE ）をしなければならない実装もある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>書き込みスキュー
&lt;ul>
&lt;li>トランザクションが何かを読み取り、その値に基づいて判断を下し、その結果をデータベースに書き込む&lt;/li>
&lt;li>この状況で、書き込みが行われた時点で判断の根拠となったプレミスが真ではなくなっている場合を指す&lt;/li>
&lt;li>直列化可能分離レベルのみがこの異常を回避できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ファントムリード
&lt;ul>
&lt;li>トランザクションが何らかの検索条件にマッチするオブジェクトを読み取り、他のクライアントはその検索結果に影響する書き込みを行う&lt;/li>
&lt;li>スナップショット分離レベルは単純なファントムリードを回避してくれるが、書き込みスキューを伴うファントムに対してはインデックス範囲ロックのような特別な対応が必要となる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>弱い分離レベルは、これらの異常のいくつかを防いでくれるが、それ以外はアプリケーション開発者に対処する必要がある（たとえば明示的なロックなど）。すべての問題に対する保護を提供してくれるのは直列化可能分離レベルのみ。直列化可能なトランザクションの実装方法は、3 種類ある。&lt;/p>
&lt;ul>
&lt;li>トランザクションを順次実行する
&lt;ul>
&lt;li>それぞれのトランザクションをきわめて高速に実行でき、加えて単一の CPU コアで十分処理できる程度にトランザクションのスループットが低いのであれば、これはシンプルで効果的な選択肢となる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ツーフェーズロック
&lt;ul>
&lt;li>数十年にわたって直列化可能分離レベルの実装において標準的な方法であった&lt;/li>
&lt;li>パフォーマンス上の特性から多くのアプリケーションがツーフェーズロックの利用は避けている&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>直列化可能スナップショット分離（SSI、serializable snapshot isolation）
&lt;ul>
&lt;li>新しいアルゴリズムであり、これまでのアプローチが持つ欠点のほとんどを回避している&lt;/li>
&lt;li>SSI は楽観的アプローチを取っており、トランザクションはブロックされることなく処理を進められる&lt;/li>
&lt;li>トランザクションはコミットの時点でチェックされ、その実行が直列化可能になっていなければ中断される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="改正法人税法等の説明会">改正法人税法等の説明会&lt;/h2>
&lt;p>&lt;a href="https://www.nk-net.co.jp/kobe/assets/files/schedule/2021/211019.pdf">改正法人税法等の説明会&lt;/a> に参加してきた。所感からまとめるとこんな感じ。&lt;/p>
&lt;ul>
&lt;li>神戸文化ホールについて
&lt;ul>
&lt;li>電源がない&lt;/li>
&lt;li>FREESPOT が提供されていてフリー wifi として利用できるが、通信品質は不安定
&lt;ul>
&lt;li>スマホでテザリングもやってみたが、電波状態がよくなくてもっと不安定&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ラップトップ向きの場所ではない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>税制を身近にするイベントとしては参加してもよい&lt;/li>
&lt;li>もらった資料をたんたんと説明するだけなのでイベントに参加することで得られる付加価値はとくにない&lt;/li>
&lt;li>気分転換や時間があれば参加すればいい、忙しかったら参加しなくてもよさそう&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.nk-net.co.jp/kobe/index.html">公益社団法人 神戸納税協会&lt;/a> という組織がある。年会費 (うちの会社だと7,800円) がいるのでいまは入らないけど、無料税務相談があるので余裕ができたら困ったときの相談相手になってもらう意図で入会してもよいかもしれない。冒頭の神戸税務署長の挨拶で法人税の申告における e-tax の利用率は 88.4% だと話してた。うちは紙で申請しているので意外とみんな e-tax 使っているんだなと自社を恥じた。だって Windows マシンないとできへんねんもん。参加したことによる学びとして書いていくとこれらかな。&lt;/p>
&lt;ul>
&lt;li>「研究開発費」は会計上の用語、「試験研究費」は税法上の用語&lt;/li>
&lt;li>DX 投資促進税制の創設&lt;/li>
&lt;/ul>
&lt;p>内容は基本知らないことなので、知らないことに触れるイベントという点では斬新ではあった。ほうほうと聞いてただけなんだけど。直接うちの会社に影響を与える税法の改正はインボイス制度ぐらいかな。&lt;/p></content></item><item><title>インボイス制度への準備</title><link>/diary/posts/2021/1001/</link><pubDate>Fri, 01 Oct 2021 09:50:20 +0900</pubDate><guid>/diary/posts/2021/1001/</guid><description>夜はドラクエタクトやってて2時過ぎに寝て7時に起きた。気のせいか、日記を書くようになってから早く寝付けるようになった。まつのさんが twitter で久しぶりに Python 書いたとツィートしていて、何気なくふと Implement experimental asyncio support #101 #340 をみて、そのツールの関係者でもないのに勝手にクソリプ的なレビューコメントをした。気付いてしまったらみなかった振りするのも気持ち悪いので。
インボイス制度の準備 2023年10月1日から 消費税の軽減税率制度・適格請求書等保存方式（いわゆるインボイス制度） が開始される。開始される前に適格請求書発行事業者に登録しておく必要があり、その登録受付が今日から開始された。前に知人が教えてもらった解説動画を見返した。
ちなみにうちの会社は今期から課税事業者になるのでインボイス制度開始による益税の影響は受けない。前期の決算で消費税を算出したとき、本則課税と簡易課税なら後者の方が46%の納税金額が少なくなることがわかった。IT 業界は経費に占める人件費の割合が大きい (人件費は消費税がかからない) ので簡易課税の方が節税になるのではないかという気がする。そのため、簡易課税で申請している。一度、申請すると2年間適用され、不適用届出を出さない限りはずっと簡易課税で継続される。
国税庁の 申請手続 をみながら￼e-Tax (WEB 版) で申請した。
個人で副業を受けることを想定すると、個人でも適格請求書発行事業者に登録した方がよいのだけど、私の場合、自分の会社なので法人で仕事を受けるのと個人で仕事を受けることの違いって何だろう？とわからなくなった。法人税と個人の所得税の税率の違いの話しは一旦置いておいて、最も大きな違いは会社で仕事を受けても(直近の)給与は増えないのでその報酬を自由には使えない。個人で仕事を受けたらその報酬を自由に使えるぐらいかな？もうちょっとその違いを調べ直してから考えよう。先の youtube 動画の中で税理士さんが「免税事業者という制度をやめたらいいのに。。。」と言ってたけど、個人はどうしよう？と悩んでしまう本質は免税事業者という概念があるからというのは正しいと思う。
Terminal のカスタマイズ hugo の Shortcodes で class で任意の CSS クラスを指定できる。
{{&amp;lt; youtube id=&amp;#34;E0lOsLfj1T0&amp;#34; class=&amp;#34;video-container&amp;#34; &amp;gt;}} static/style.css をカスタムの CSS として読み込んでくれる。youtube のビデオサイズをよしなに調整するために次のスタイルを定義した。なかなか難しい。
.video-container iframe { border:0; max-width: 600px; max-height: 338px; width: 100%; height: 50vh; } Joel on Software 読み終えた。ソフトウェアの本で test of time (時の試練？) に耐えるのは相当に難しい。本書だとマネジメントや教育、ビジネスや経営に関する内容はいまでも有効でおもしろかった。また後日ブログに書評を書く。いまとなっては手放しでお勧めできる本ではないため、どういう切り口で書くかが難しい。自分にとって学びとして身につけたいと思った本はなるべく書評を書いて自分の言葉で説明できるようになっていきたい。</description><content>&lt;p>夜はドラクエタクトやってて2時過ぎに寝て7時に起きた。気のせいか、日記を書くようになってから早く寝付けるようになった。まつのさんが twitter で久しぶりに Python 書いたとツィートしていて、何気なくふと &lt;a href="https://github.com/line/line-bot-sdk-python/pull/340">Implement experimental asyncio support #101 #340&lt;/a> をみて、そのツールの関係者でもないのに勝手にクソリプ的なレビューコメントをした。気付いてしまったらみなかった振りするのも気持ち悪いので。&lt;/p>
&lt;h2 id="インボイス制度の準備">インボイス制度の準備&lt;/h2>
&lt;p>2023年10月1日から &lt;a href="https://www.nta.go.jp/taxes/shiraberu/zeimokubetsu/shohi/keigenzeiritsu/index.htm">消費税の軽減税率制度・適格請求書等保存方式（いわゆるインボイス制度）&lt;/a> が開始される。開始される前に適格請求書発行事業者に登録しておく必要があり、その登録受付が今日から開始された。前に知人が教えてもらった解説動画を見返した。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/E0lOsLfj1T0" allowfullscreen title="消費税インボイス方式対策として今からやっておくべき３つのことをお話します。【簡易課税で税負担1/2に！？】">&lt;/iframe>
&lt;/div>
&lt;p>ちなみにうちの会社は今期から課税事業者になるのでインボイス制度開始による益税の影響は受けない。前期の決算で消費税を算出したとき、本則課税と簡易課税なら後者の方が46%の納税金額が少なくなることがわかった。IT 業界は経費に占める人件費の割合が大きい (人件費は消費税がかからない) ので簡易課税の方が節税になるのではないかという気がする。そのため、簡易課税で申請している。一度、申請すると2年間適用され、不適用届出を出さない限りはずっと簡易課税で継続される。&lt;/p>
&lt;p>国税庁の &lt;a href="https://www.nta.go.jp/taxes/shiraberu/zeimokubetsu/shohi/keigenzeiritsu/invoice_shinei.htm">申請手続&lt;/a> をみながら￼e-Tax (WEB 版) で申請した。&lt;/p>
&lt;p>個人で副業を受けることを想定すると、個人でも適格請求書発行事業者に登録した方がよいのだけど、私の場合、自分の会社なので法人で仕事を受けるのと個人で仕事を受けることの違いって何だろう？とわからなくなった。法人税と個人の所得税の税率の違いの話しは一旦置いておいて、最も大きな違いは会社で仕事を受けても(直近の)給与は増えないのでその報酬を自由には使えない。個人で仕事を受けたらその報酬を自由に使えるぐらいかな？もうちょっとその違いを調べ直してから考えよう。先の youtube 動画の中で税理士さんが「免税事業者という制度をやめたらいいのに。。。」と言ってたけど、個人はどうしよう？と悩んでしまう本質は免税事業者という概念があるからというのは正しいと思う。&lt;/p>
&lt;h2 id="terminal-のカスタマイズ">Terminal のカスタマイズ&lt;/h2>
&lt;p>hugo の Shortcodes で &lt;code>class&lt;/code> で任意の CSS クラスを指定できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{{&amp;lt; &lt;span style="color:#f92672">youtube&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;E0lOsLfj1T0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;video-container&amp;#34;&lt;/span> &amp;gt;}}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>static/style.css&lt;/code> をカスタムの CSS として読み込んでくれる。youtube のビデオサイズをよしなに調整するために次のスタイルを定義した。なかなか難しい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#a6e22e">video-container&lt;/span> &lt;span style="color:#f92672">iframe&lt;/span> {
&lt;span style="color:#66d9ef">border&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">max-width&lt;/span>: &lt;span style="color:#ae81ff">600&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">max-height&lt;/span>: &lt;span style="color:#ae81ff">338&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>&lt;span style="color:#66d9ef">vh&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>読み終えた。ソフトウェアの本で test of time (時の試練？) に耐えるのは相当に難しい。本書だとマネジメントや教育、ビジネスや経営に関する内容はいまでも有効でおもしろかった。また後日ブログに書評を書く。いまとなっては手放しでお勧めできる本ではないため、どういう切り口で書くかが難しい。自分にとって学びとして身につけたいと思った本はなるべく書評を書いて自分の言葉で説明できるようになっていきたい。&lt;/p>
&lt;h2 id="カジュアル面談">カジュアル面談&lt;/h2>
&lt;p>プロジェクトマネージャーを募集している会社の CTO と面談。先方の時間が15分しかないという話しだったので事前に質問は連絡しつつ、バックエンドは Go 言語を使っているという話しだったので私が過去に書いたブログ記事やちょっと前に作った &lt;a href="https://github.com/kazamori/go-sql-executor">go-sql-executor&lt;/a> を連絡して、技術選考の参考にしてほしいと伝えた。募集要項からスクラムを採用するように読めたのでその背景を聞いたところ、外部の技術顧問が推奨しただけでとくにこだわりはないという。いまもメンバーは8人いて1週間のスプリントでスクラムっぽい運用はしているとのこと。私の言う、課題管理とイテレーション開発の概要を軽く説明しつつ、それを実践するためにプロジェクトマネージャーをやりたくて、その実践の場を探しているといった話しをした。外部の技術顧問が欠席したせいか、Go 言語の開発に関する質問はとくになかった。メンバーはすべて業務委託という話しなので寄せ集めグループのドタバタプロジェクトなんだろうなという印象を受けた。心理的安全性や一体化マネジメント法とか勉強したんで &lt;em>グループ&lt;/em> じゃなくて &lt;em>チーム&lt;/em> 開発できるマネジメントがやりたいなぁ。&lt;/p></content></item></channel></rss>