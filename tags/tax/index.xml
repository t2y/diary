<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tax on forest nook</title><link>/diary/tags/tax/</link><description>Recent content in tax on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Fri, 14 Apr 2023 07:52:38 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/tax/index.xml" rel="self" type="application/rss+xml"/><item><title>oss な開発は chatgpt が猛威を振るう予感</title><link>/diary/posts/2023/0414/</link><pubDate>Fri, 14 Apr 2023 07:52:38 +0900</pubDate><guid>/diary/posts/2023/0414/</guid><description>2時に寝て6時半に起きた。開発の追い込みが佳境に入ってきて集中力が増してきた。
chatgpt と一緒にデバッグ openldap サーバーの拡張の仕組みに Overlays がある。c 言語でカスタム overlay を実装することで openldap サーバーに任意のフック処理を実装できる。いまやっていることはパスワードの追加や更新をフックしてそのパスワードを id 連携するためのモジュールを開発している。というか、開発済みだと聞いていたモジュールが意図したように動かないのでデバッグしている。例えば ppolicy という overlay を使って次のように設定すると、平文で送ったパスワードをディレクトリサービスの db へ格納する前に平文からパスワードをハッシュ化してくれる。この変換はパスワード変更を overlay でフックして実装されている。
overlay ppolicy ppolicy_hash_cleartext on overlay は slapd.conf に設定した順番に実行されるようで、それぞれの overlay に依存関係がある場合は実際の処理にも影響がある。そんな openldap サーバーの拡張モジュールの開発を引き継ぐことになったが、私がまったく openldap サーバーのことをわかっていないので chatgpt を使って理解しながらデバッグしている。これがそれなりにうまくいっていて調査が捗った。但し、chatgpt が教えてくれたことなので完全に正しいかどうかの保証がない。振る舞いで検証できるものはともかく、そうじゃないものは最後に有識者に正しいかどうかを確認する必要がある。
例えば、次のような ldif エントリーをサンプルとして、パスワードは userPassword という属性で扱う。ここで userPassword だけコロンが2重 (::) になっていることがわかる。これは属性の値が base64 でエンコーディングされていることを意味している。こういった2重コロンのような短いキーワードを検索で調べるのは難しい。chatgpt ならピンポイントに答えてくれる。
dn: uid=jdoe,ou=users,dc=example,dc=com objectClass: top objectClass: person objectClass: organizationalPerson objectClass: inetOrgPerson uid: jdoe cn: John Doe givenName: John sn: Doe mail: jdoe@example.</description><content>&lt;p>2時に寝て6時半に起きた。開発の追い込みが佳境に入ってきて集中力が増してきた。&lt;/p>
&lt;h2 id="chatgpt-と一緒にデバッグ">chatgpt と一緒にデバッグ&lt;/h2>
&lt;p>openldap サーバーの拡張の仕組みに &lt;a href="https://www.openldap.org/doc/admin24/overlays.html">Overlays&lt;/a> がある。c 言語でカスタム overlay を実装することで openldap サーバーに任意のフック処理を実装できる。いまやっていることはパスワードの追加や更新をフックしてそのパスワードを id 連携するためのモジュールを開発している。というか、開発済みだと聞いていたモジュールが意図したように動かないのでデバッグしている。例えば &lt;code>ppolicy&lt;/code> という overlay を使って次のように設定すると、平文で送ったパスワードをディレクトリサービスの db へ格納する前に平文からパスワードをハッシュ化してくれる。この変換はパスワード変更を overlay でフックして実装されている。&lt;/p>
&lt;pre tabindex="0">&lt;code>overlay ppolicy
ppolicy_hash_cleartext on
&lt;/code>&lt;/pre>&lt;p>overlay は slapd.conf に設定した順番に実行されるようで、それぞれの overlay に依存関係がある場合は実際の処理にも影響がある。そんな openldap サーバーの拡張モジュールの開発を引き継ぐことになったが、私がまったく openldap サーバーのことをわかっていないので &lt;a href="https://openai.com/blog/chatgpt">chatgpt&lt;/a> を使って理解しながらデバッグしている。これがそれなりにうまくいっていて調査が捗った。但し、chatgpt が教えてくれたことなので完全に正しいかどうかの保証がない。振る舞いで検証できるものはともかく、そうじゃないものは最後に有識者に正しいかどうかを確認する必要がある。&lt;/p>
&lt;p>例えば、次のような ldif エントリーをサンプルとして、パスワードは &lt;code>userPassword&lt;/code> という属性で扱う。ここで &lt;code>userPassword&lt;/code> だけコロンが2重 (&lt;code>::&lt;/code>) になっていることがわかる。これは属性の値が base64 でエンコーディングされていることを意味している。こういった2重コロンのような短いキーワードを検索で調べるのは難しい。chatgpt ならピンポイントに答えてくれる。&lt;/p>
&lt;pre tabindex="0">&lt;code>dn: uid=jdoe,ou=users,dc=example,dc=com
objectClass: top
objectClass: person
objectClass: organizationalPerson
objectClass: inetOrgPerson
uid: jdoe
cn: John Doe
givenName: John
sn: Doe
mail: jdoe@example.com
userPassword:: e1NTSEF9bm9ZMU5kdzN3WUdSbFhpdDJUaTY5UW9SeXpXaklEeXc=
&lt;/code>&lt;/pre>&lt;p>openldap は oss だし、ドキュメントもインターネット上にあるので構造体の定義や c 言語のサンプルコードも書いてくれる。それらが完全に正しいか、私には判断できないが、openldap のソースコードで調査するところの当たりをつけるには十分な情報を返してくれる。カスタム overlay を開発するときの主要なエントリーポイントと ldap 操作のタグ名は次になる。&lt;/p>
&lt;ul>
&lt;li>bi_op_bind: バインド（認証）操作に対応するエントリーポイント、LDAP_REQ_BIND&lt;/li>
&lt;li>bi_op_search: 検索操作に対応するエントリーポイント、LDAP_REQ_SEARCH&lt;/li>
&lt;li>bi_op_compare: 比較操作に対応するエントリーポイント、LDAP_REQ_COMPARE&lt;/li>
&lt;li>bi_op_modify: 修正（属性の追加、削除、変更）操作に対応するエントリーポイント、LDAP_REQ_MODIFY&lt;/li>
&lt;li>bi_op_modrdn: エントリ名の変更 (MODIFY RDN) 操作に対応するエントリーポイント、LDAP_REQ_MODRDN&lt;/li>
&lt;li>bi_op_add: エントリの追加操作に対応するエントリーポイント、LDAP_REQ_ADD&lt;/li>
&lt;li>bi_op_delete: エントリの削除操作に対応するエントリーポイント、LDAP_REQ_DELETE&lt;/li>
&lt;li>bi_op_abandon: 中止操作に対応するエントリーポイント、LDAP_REQ_ABANDON&lt;/li>
&lt;li>bi_op_extended: 拡張操作に対応するエントリーポイント、LDAP_REQ_EXTENDED&lt;/li>
&lt;/ul>
&lt;p>例えば、LDAP_REQ_ADD は ldap.h で次のように定義されている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define LDAP_REQ_ADD ((ber_tag_t) 0x68U) &lt;/span>&lt;span style="color:#75715e">/* application + constructed */&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これを gdb でデバッグしてタグを確認するときは次のように Operation 構造体内の o_tag をチェックすればよい。gdb で16進数表示するときは &lt;code>/x&lt;/code> を指定する。&lt;/p>
&lt;pre tabindex="0">&lt;code>(gdb) print /x op-&amp;gt;o_tag
$8 = 0x68
&lt;/code>&lt;/pre>&lt;p>ppolicy よりも前にカスタム overlay を設定すれば平文のパスワードにアクセスできそうにみえるのだけど、gdb でデバッグしているとハッシュ化済みのパスワードになっていた。&lt;/p>
&lt;p>あと稼働している openldap サーバーに gdb で attach してデバッグする方法も chatgpt に聞きながら行った。やりたい操作に対して gdb のコマンドを教えてもらってすぐに検証してフィードバックからさらに質問できるのでインタラクティブな repl のような環境と chatgpt は相性がよいように思えた。gdb のコマンドを覚えておく必要も、ググる必要もないことに気付いた。&lt;/p>
&lt;h2 id="近況報告">近況報告&lt;/h2>
&lt;p>元同僚と &lt;a href="/diary/diary/posts/2022/0311/#近況報告">約1年ぶりの近況報告&lt;/a> の雑談会をしてきた。これで3回目かな。毎年の恒例行事のようになってきた。兵庫県の住みたい街ランキングでいつも上位にある &lt;a href="https://www.nishi.or.jp/">西宮市&lt;/a> でカレーを食べて、バーで飲んできた。三ノ宮から西宮は快速で15分程度の距離。すぐ行ける場所なんだが、とくに行く機会がなかったので神戸に引っ越してきて5年以上経つのに電車で行ったのは今回が初めてになる。いつも通り近況を聞きながら、みんな私と同じぐらいの世代なので今後のキャリアの方向性などを話していた。&lt;/p>
&lt;p>私は起業して税金やその仕組みに関心をもつようになり、起業する前より少し詳しくなった。知人から節税相談を受けることもある。税金の基本的な考え方として、1つの大きな収入に対して節税することはできない。自由に使えるお金がほしかったら基本的に節税できない。税金をたくさん払って貯金するしかない。一方で個人と会社に資産を分割したり、共済や基金を活用することで手取りの収入は減るが、支払う税金は少なくなって中長期でみると資産が増える。例えば、共済や基金に積み立てたお金は原則としては退職所得で戻ってくるので、ずっと優遇された &lt;a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/shotoku/1420.htm">退職所得の所得税&lt;/a> により、最終的に支払う税金が少なくなるからである。これが税金を支払う基本的な考え方。自分の手元にお金を残した上で税金を払いたくないが、どうすればよいか？とよく聞かれるが、そんなことはできないというのが模範回答になる。元同僚も私もそうなのだが、もはや自分の生活にお金をあまり必要としていない。私が節税の仕組みを調べたり実践したりするのは、税金の仕組みを学ぶために過ぎない。ただ知識として学ぶよりも、実際に実践して運用してみる方が学びになる。&lt;/p>
&lt;p>以前の &lt;a href="/diary/diary/posts/2023/0408/#もくもく会">出張もくもく会&lt;/a> の後で懇親会のときにそのうち資本主義は新しい制度にとって変わられるのではないかという話題があった。それは行き過ぎた資本主義の弊害と、資本主義である限り40時間/週の労働時間から抜け出すには資本家になるしかなくて、人類はすでにこれだけ技術があるのだからもっと多くの人が今よりも働かずに食べていけるのではないかと多くの人が考えている。私の場合も、実質は自分のやりたいことしかやってなくて、自分のために働きながらも、老後のために一応はお金をもらっておくみたいな働き方になっている。この考え方は資本主義の次の制度へ移行するときに活きてくればいいなと思う。&lt;/p></content></item><item><title>chatgpt の調べものと整理して雑談した</title><link>/diary/posts/2023/0331/</link><pubDate>Fri, 31 Mar 2023 11:41:12 +0900</pubDate><guid>/diary/posts/2023/0331/</guid><description>1時に寝て6時に起きた。昨日は chatgpt の調べものをしていたら帰るのが遅くなった。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。3月はお仕事が忙しかったのでこの前はお休みして1ヶ月ぶりの雑談。主には 来季の予算 について話していた。
予算を策定するときに今回から消費税を経費に含めるとよいのではないかと考えた。というのは、法人税は赤字のときにゼロになるので売上と経費を算定したときに利益が多ければ発生するだけで利益を帳消しにするといったことはない。しかし、消費税は損益に関係なく仕入よりも売上にかかる消費税が多い場合に支払う必要がある。ここで経費の大半に相当する人件費 (給与) には消費税がかからないことから損益がゼロだったとしても消費税を支払うと赤字になるといった状況は考えられる。売上よりも仕入で支払った消費税の方が多かった場合、消費税は還付されることになるが、うちは簡易課税を選択しているので売上の消費税に対して50%を支払うことになる。簡易課税の場合、最小の消費税がゼロ (つまり売上がゼロ) であり、仕入にどれだけ消費税を支払ったとしても還付は発生しない。とはいえ、通常の事業運営をすれば仕入の消費税が売上よりも多くなるといったことは発生しない。
オフィス引越しや社用車の購入に関して前年よりも固定費は増えている。それは仕方ないとして、その他に無駄遣いをしているわけでもないので来季は赤字前提の予算を見積もる。いまのところ、お仕事は半年ぐらいしかやらない予定になる。仮にそれ以上働くことになったとしても、そのときは売上が増えて財務的には助かることになる。お仕事があってもなくてもどちらでもよいという展望で予算策定を終えた。
社員数を調べるハック たまたまタイムラインで 厚生年金保険・健康保険 適用事業所検索システム というシステムで毎月20日時点での厚生年金保険・健康保険の被保険者数を調べられることを知った。未上場の会社だと社員数を公表する義務がないので規模感が分からないことがある。スタートアップやベンチャー企業で話題になっている会社の規模感を調べるときなどに役に立つかもしれない。試しに過去に私が働いた会社でその後どうなったのだろう？と調べてみたら私が在籍していた当時よりも人数は減っているもののまだ被保険者数がいたので会社は存続していることがわかった。会社の栄枯盛衰を測る指標の1つとして社員数は使えると思うので業界研究の手法の1つとしてよいかもしれない。
chatgpt 勉強会 今週のチーム勉強会は私が担当して chatgpt についての雑談会とした。と言っても、ほとんど私が一方的に話す感じであまり雑談会にはならなかった。オンライン勉強会で雑談会を運営するのはすごく難しい。意図的に質問やツッコミを入れるという役割を参加者に課さないと雑談会を運営するのは難しいのかもしれない。勉強会で発表すると、自分で学ぶきっかけになるのでちょうどよかった。お手伝い先でも slack に chatgpt の api を用いた bot を実装してチャットで質問できるようになっている。何人かは身近に chatgpt を使って振る舞いを確認したりもしている。雑談会では次の内容で gpt (llm) とはどういうものなのか、また chatgpt の使い方が従来にはなかったものを私が知っている中で共有した。今後もしばらくは注目していこうと思う。
OpenAI/ChatGPT 概要 ChatGPT の使い方 GPT 以後の世界</description><content>&lt;p>1時に寝て6時に起きた。昨日は chatgpt の調べものをしていたら帰るのが遅くなった。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。3月はお仕事が忙しかったのでこの前はお休みして1ヶ月ぶりの雑談。主には &lt;a href="/diary/diary/posts/2023/0319/">来季の予算&lt;/a> について話していた。&lt;/p>
&lt;p>予算を策定するときに今回から消費税を経費に含めるとよいのではないかと考えた。というのは、法人税は赤字のときにゼロになるので売上と経費を算定したときに利益が多ければ発生するだけで利益を帳消しにするといったことはない。しかし、消費税は損益に関係なく仕入よりも売上にかかる消費税が多い場合に支払う必要がある。ここで経費の大半に相当する人件費 (給与) には消費税がかからないことから損益がゼロだったとしても消費税を支払うと赤字になるといった状況は考えられる。売上よりも仕入で支払った消費税の方が多かった場合、消費税は還付されることになるが、うちは簡易課税を選択しているので売上の消費税に対して50%を支払うことになる。簡易課税の場合、最小の消費税がゼロ (つまり売上がゼロ) であり、仕入にどれだけ消費税を支払ったとしても還付は発生しない。とはいえ、通常の事業運営をすれば仕入の消費税が売上よりも多くなるといったことは発生しない。&lt;/p>
&lt;p>オフィス引越しや社用車の購入に関して前年よりも固定費は増えている。それは仕方ないとして、その他に無駄遣いをしているわけでもないので来季は赤字前提の予算を見積もる。いまのところ、お仕事は半年ぐらいしかやらない予定になる。仮にそれ以上働くことになったとしても、そのときは売上が増えて財務的には助かることになる。お仕事があってもなくてもどちらでもよいという展望で予算策定を終えた。&lt;/p>
&lt;h2 id="社員数を調べるハック">社員数を調べるハック&lt;/h2>
&lt;p>たまたまタイムラインで &lt;a href="https://www2.nenkin.go.jp/do/search_section/">厚生年金保険・健康保険 適用事業所検索システム&lt;/a> というシステムで毎月20日時点での厚生年金保険・健康保険の被保険者数を調べられることを知った。未上場の会社だと社員数を公表する義務がないので規模感が分からないことがある。スタートアップやベンチャー企業で話題になっている会社の規模感を調べるときなどに役に立つかもしれない。試しに過去に私が働いた会社でその後どうなったのだろう？と調べてみたら私が在籍していた当時よりも人数は減っているもののまだ被保険者数がいたので会社は存続していることがわかった。会社の栄枯盛衰を測る指標の1つとして社員数は使えると思うので業界研究の手法の1つとしてよいかもしれない。&lt;/p>
&lt;h2 id="chatgpt-勉強会">chatgpt 勉強会&lt;/h2>
&lt;p>今週のチーム勉強会は私が担当して &lt;a href="https://openai.com/blog/chatgpt">chatgpt&lt;/a> についての雑談会とした。と言っても、ほとんど私が一方的に話す感じであまり雑談会にはならなかった。オンライン勉強会で雑談会を運営するのはすごく難しい。意図的に質問やツッコミを入れるという役割を参加者に課さないと雑談会を運営するのは難しいのかもしれない。勉強会で発表すると、自分で学ぶきっかけになるのでちょうどよかった。お手伝い先でも slack に chatgpt の api を用いた bot を実装してチャットで質問できるようになっている。何人かは身近に chatgpt を使って振る舞いを確認したりもしている。雑談会では次の内容で gpt (llm) とはどういうものなのか、また chatgpt の使い方が従来にはなかったものを私が知っている中で共有した。今後もしばらくは注目していこうと思う。&lt;/p>
&lt;ul>
&lt;li>OpenAI/ChatGPT 概要&lt;/li>
&lt;li>ChatGPT の使い方&lt;/li>
&lt;li>GPT 以後の世界&lt;/li>
&lt;/ul></content></item><item><title>期日前の敗北</title><link>/diary/posts/2023/0313/</link><pubDate>Mon, 13 Mar 2023 08:25:14 +0900</pubDate><guid>/diary/posts/2023/0313/</guid><description>0時に寝て6時半に起きた。日曜日に1ヶ月振りのお休みをとったので体力はぐっと回復した。
リリース判定前 明日をリリース延期を判断する期日としている。明日でリリースまでに対応しないといけない enhance ラベルが付いたタスクを fix できなかったら延期を決定すると先週の定例で基準を決めた。私がやろうと思っていたタスクは今日すべて fix したけれど、全体として fix できそうにないタスクが2つ残っている。さらに今日、検証していてリリースまでにやった方がよい enhance を2つみつけたので1ヶ月延期した上で、この2つも追加でやってしまおうかと考えている。事実上、今日の進捗をみた時点で明日の定例会議では延期の決断をする。がんばったけど、ダメなもんはダメなので潔く敗北を認めて残っている開発課題を今月末までに fix するようにスケジュールを調整していく。その分 QA テストのための工数を多く取れるのでテストツールを作ったり、結合テストを追加したりなど、余裕があれば品質を上げるためにできることも増える。1ヶ月前倒しにしていたから元の計画に戻るだけだし、私が管理対象にしていないモジュール群の開発遅れ (開発は不要と当初言われてた) なのでそもそも計画になかった。計画になかったとはいえ、その対応への気付きが遅れて、担当変更が遅れて、最終的にリリースが遅れたことはマネージャーとしての私の責任なのでシンプルに悔しい。もっとうまいやり方はあったはず。
確定申告 一旦20時頃に家に帰って晩ご飯を食べてから21時にオフィスに戻ってきて確定申告の作業を始めた。15日(水)までなのでわりとぎりぎり。本当は日曜日にやろうと思っていたのにお休みしてしまったのでこんな時間から始めることになった。確定申告も例年と同じになっていて、且つ、いまは副業を受けていないので特別な売上や経費の登録をすることもない。取引一覧でやることは次の2つ。
源泉徴収済みの印税収入を、売上と源泉徴収税の2つの明細として登録し直す 寄付金の明細登録 これは15分ほどで完了してそれから確定申告書を作る。freee 確定申告 を5年以上使っている。その後の手続きも決まっていてワークフローに従ってこれらの入力を行う。
源泉徴収票からの転機 印税売上を源泉徴収済み雑収入として登録 ふるさと納税と npo 向けの寄付金の登録 株式の取引報告書の登録 (損益通算) 小規模企業共済の所得控除の登録 印税売上は源泉徴収済みなので無視してもよいが、寄付金や共済の所得控除があるので毎年行うことで節税になる。書類はすべて揃っていたので証明書を確認しながらワークフローを進めて3時間もあれば確定申告書を完成した。プリンタで紙に印刷して2箇所にマイナンバーを記載して、台紙に寄付金と共済の証明書を添付する。この証明書の添付をどうやって電子化して申告したらよいかわからないので毎年紙で提出している。</description><content>&lt;p>0時に寝て6時半に起きた。日曜日に1ヶ月振りのお休みをとったので体力はぐっと回復した。&lt;/p>
&lt;h2 id="リリース判定前">リリース判定前&lt;/h2>
&lt;p>明日をリリース延期を判断する期日としている。明日でリリースまでに対応しないといけない enhance ラベルが付いたタスクを fix できなかったら延期を決定すると先週の定例で基準を決めた。私がやろうと思っていたタスクは今日すべて fix したけれど、全体として fix できそうにないタスクが2つ残っている。さらに今日、検証していてリリースまでにやった方がよい enhance を2つみつけたので1ヶ月延期した上で、この2つも追加でやってしまおうかと考えている。事実上、今日の進捗をみた時点で明日の定例会議では延期の決断をする。がんばったけど、ダメなもんはダメなので潔く敗北を認めて残っている開発課題を今月末までに fix するようにスケジュールを調整していく。その分 QA テストのための工数を多く取れるのでテストツールを作ったり、結合テストを追加したりなど、余裕があれば品質を上げるためにできることも増える。1ヶ月前倒しにしていたから元の計画に戻るだけだし、私が管理対象にしていないモジュール群の開発遅れ (開発は不要と当初言われてた) なのでそもそも計画になかった。計画になかったとはいえ、その対応への気付きが遅れて、担当変更が遅れて、最終的にリリースが遅れたことはマネージャーとしての私の責任なのでシンプルに悔しい。もっとうまいやり方はあったはず。&lt;/p>
&lt;h2 id="確定申告">確定申告&lt;/h2>
&lt;p>一旦20時頃に家に帰って晩ご飯を食べてから21時にオフィスに戻ってきて確定申告の作業を始めた。15日(水)までなのでわりとぎりぎり。本当は日曜日にやろうと思っていたのにお休みしてしまったのでこんな時間から始めることになった。確定申告も例年と同じになっていて、且つ、いまは副業を受けていないので特別な売上や経費の登録をすることもない。取引一覧でやることは次の2つ。&lt;/p>
&lt;ul>
&lt;li>源泉徴収済みの印税収入を、売上と源泉徴収税の2つの明細として登録し直す&lt;/li>
&lt;li>寄付金の明細登録&lt;/li>
&lt;/ul>
&lt;p>これは15分ほどで完了してそれから確定申告書を作る。&lt;a href="https://www.freee.co.jp/accounting/individual/fr-fhrt92en/">freee 確定申告&lt;/a> を5年以上使っている。その後の手続きも決まっていてワークフローに従ってこれらの入力を行う。&lt;/p>
&lt;ul>
&lt;li>源泉徴収票からの転機&lt;/li>
&lt;li>印税売上を源泉徴収済み雑収入として登録&lt;/li>
&lt;li>ふるさと納税と npo 向けの寄付金の登録&lt;/li>
&lt;li>株式の取引報告書の登録 (損益通算)&lt;/li>
&lt;li>小規模企業共済の所得控除の登録&lt;/li>
&lt;/ul>
&lt;p>印税売上は源泉徴収済みなので無視してもよいが、寄付金や共済の所得控除があるので毎年行うことで節税になる。書類はすべて揃っていたので証明書を確認しながらワークフローを進めて3時間もあれば確定申告書を完成した。プリンタで紙に印刷して2箇所にマイナンバーを記載して、台紙に寄付金と共済の証明書を添付する。この証明書の添付をどうやって電子化して申告したらよいかわからないので毎年紙で提出している。&lt;/p></content></item><item><title>右すねの外側の筋に張りがある</title><link>/diary/posts/2023/0218/</link><pubDate>Sat, 18 Feb 2023 19:12:24 +0900</pubDate><guid>/diary/posts/2023/0218/</guid><description>23時に寝て7時に起きた。旅行のときにもっていく歯磨きセットを実家に忘れてきた。髭剃りが見当たらないと思っていたのは、その歯磨きセットに入れていたからのせいだと気付いた。髭剃りを買い直してもいいかもしれない。
ストレッチ 今日の開脚幅は開始前156cmで、ストレッチ後159cmだった。2-3日前から右の足首に違和感があって歩くときにかばってしまう。トレーナーさんに相談してみたところ、右足のすねの外側の筋に張りがあることがわかった。なぜそうなってしまったのか分からないけど、それがために立つときなどの、足首に力が入る瞬間に若干の痛みや違和感を感じるらしい。足首の違和感については、すねの外側の筋か、ふくらはぎのどちらかに起因するという。さすがプロという感じで、私が曖昧に、痛いわけではないけど足首に違和感を感じると言っただけで的確にその原因となっている筋を突き止めた。その延長で調子の悪い部位を丁寧にストレッチしてもらった。毎週ストレッチしているからこういった体調管理もできる。いまやストレッチが私の健康管理の中心になっている。
車の1ヶ月点検 ストレッチが終わってからお昼ご飯を食べてディーラーさんへ1ヶ月点検に行く。すでに契約は完了していて、実際に私も車に乗っているわけだけど、自動車重量税の請求額が間違っていましたということで9,600円を返金していただく。なぜか営業さんは返金したつもりになっていて、口座への振り込み確認はしましたか？と尋ねられて、数日前の時点では入金はなかったものの、今日チェックしているわけではないのでひとまず 「分からないです。」と回答しておいた。そしたら、そもそも返金先の口座を聞いていなかったので口座を教えてくださいとなって、そんな勘違いの失敗ある？って思って、ちょっと私の中の担当者さんの信頼を落とすやり取りとなった。
実は車の取引の請求書を作り直すのは今日で2回目になる。1回目はナンバーの登録手数料の金額が間違ってました。2回目は自動車重量税の金額が間違ってました。 それはなんらかの省庁の都合で急に金額が変更されるものだろうし、そういう間違いはあるだろうと受け入れていたんだけど、返金したつもりになっていて口座すら聞いてないというのは違うだろうと思えた。担当の営業さんはよい人なんだけど、なんか仕事の詰めの甘さみたいなのが垣間みえる雰囲気がする。補足として請求書に貼り付けしている200円の収入印紙はどうなるのだろう？と思って調べてみたら 印紙税過誤納[確認申請・充当請求]手続 という手続きがあって、誤って使ってしまった収入印紙ののお金は返金されるみたい。それがなかったら2回の請求書誤りで400円の損害になる。</description><content>&lt;p>23時に寝て7時に起きた。旅行のときにもっていく歯磨きセットを実家に忘れてきた。髭剃りが見当たらないと思っていたのは、その歯磨きセットに入れていたからのせいだと気付いた。髭剃りを買い直してもいいかもしれない。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前156cmで、ストレッチ後159cmだった。2-3日前から右の足首に違和感があって歩くときにかばってしまう。トレーナーさんに相談してみたところ、右足のすねの外側の筋に張りがあることがわかった。なぜそうなってしまったのか分からないけど、それがために立つときなどの、足首に力が入る瞬間に若干の痛みや違和感を感じるらしい。足首の違和感については、すねの外側の筋か、ふくらはぎのどちらかに起因するという。さすがプロという感じで、私が曖昧に、痛いわけではないけど足首に違和感を感じると言っただけで的確にその原因となっている筋を突き止めた。その延長で調子の悪い部位を丁寧にストレッチしてもらった。毎週ストレッチしているからこういった体調管理もできる。いまやストレッチが私の健康管理の中心になっている。&lt;/p>
&lt;h2 id="車の1ヶ月点検">車の1ヶ月点検&lt;/h2>
&lt;p>ストレッチが終わってからお昼ご飯を食べてディーラーさんへ1ヶ月点検に行く。すでに契約は完了していて、実際に私も車に乗っているわけだけど、自動車重量税の請求額が間違っていましたということで9,600円を返金していただく。なぜか営業さんは返金したつもりになっていて、口座への振り込み確認はしましたか？と尋ねられて、数日前の時点では入金はなかったものの、今日チェックしているわけではないのでひとまず 「分からないです。」と回答しておいた。そしたら、そもそも返金先の口座を聞いていなかったので口座を教えてくださいとなって、そんな勘違いの失敗ある？って思って、ちょっと私の中の担当者さんの信頼を落とすやり取りとなった。&lt;/p>
&lt;p>実は車の取引の請求書を作り直すのは今日で2回目になる。1回目はナンバーの登録手数料の金額が間違ってました。2回目は自動車重量税の金額が間違ってました。
それはなんらかの省庁の都合で急に金額が変更されるものだろうし、そういう間違いはあるだろうと受け入れていたんだけど、返金したつもりになっていて口座すら聞いてないというのは違うだろうと思えた。担当の営業さんはよい人なんだけど、なんか仕事の詰めの甘さみたいなのが垣間みえる雰囲気がする。補足として請求書に貼り付けしている200円の収入印紙はどうなるのだろう？と思って調べてみたら &lt;a href="https://www.nta.go.jp/taxes/tetsuzuki/shinsei/annai/inshi/annai/23120083.htm">印紙税過誤納[確認申請・充当請求]手続&lt;/a> という手続きがあって、誤って使ってしまった収入印紙ののお金は返金されるみたい。それがなかったら2回の請求書誤りで400円の損害になる。&lt;/p></content></item><item><title>コーポレートタスクの完遂</title><link>/diary/posts/2023/0106/</link><pubDate>Fri, 06 Jan 2023 13:03:12 +0900</pubDate><guid>/diary/posts/2023/0106/</guid><description>22時に寝て2時に起きてネットみたり漫画読んだりして6時になって7時に起きた。その睡眠不足から夕方に眠くなって17時から3時間ほど寝てた。ほぼ1日コーポレートタスクをやっていて過ぎた。この数日コーポレートタスクを集中的にやっていて効率がよかった。今後もお正月明けの最初の週はコーポレートタスクを行い、対外的なお仕事はお休みするような予定を立てられるとよさそうと思った。
保管場所使用承諾証明書の取得 昨日の続き 。便宜を図ってもらって急ぎで手配してもらった証明書を管理会社のオフィスまで取りに行く。郵送してもらうと私が来週受け取れないため、もっとも早くて確実な手段として私が大阪まで直接取りに行くことにした。便宜を図ってもらったのでそれぐらいの労力は惜しまない。9時半頃、約1年ぶりに梅田の地下を歩いてみて、まだお正月休みなのか、梅田の地下にしてはまったく人がいなかった。あまりにまばらな人影にゴーストタウンになったのかと錯覚するぐらい。管理会社に着いて証明書をいただいてすぐ U ターンしてディーラーさんへ赴き、担当者さんに納車の手続きに必要な印鑑証明と保管場所使用承諾証明書を手渡す。保管場所使用承諾証明書から警察署で車庫証明を取っていただく。これはディーラーの担当者さんが代行してくれる (要手数料) 。納車日は1月21日になった。父の35日法要で28日に実家へ帰るのでそれまでに納車ができるように調整していた。購入相談へ行ってから2日で納車手続きまで進み、想定通り、ものごとが進捗して幸せ感が高い。計画がうまく進むと幸せなんだということに気付いた。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。いつもは9時から行っているが、今日はお出かけしていたので11時半から。お正月を挟んで葬儀というライフイベントもあったのでその話題を中心にしながら ビッグテックはスクラムやってない記事 の共有などを行った。はらさんの知人に コパイロツト さんという会社で働いている人がいてプロジェクトマネジメントやナレッジマネジメントをビジネス展開している会社らしい。うちの課題管理と密接な分野でもあるのでまた機会があれば一緒にお話ししたいといったことを確認した。会社ブログ でもプロジェクトマネジメントについて発信しているらしい。また読んでみて理解を深めようと思う。
償却資産 (固定資産税) の申告 社用車の納車日も決まったので 償却資産（固定資産税）の申告 を行う。eltax で電子申告 する。昨年の申告時の日記 にも書いたが、国税である法人税の節税手段としての「少額減価償却資産の取得価額の損金算入」と地方税である固定資産税の申告とはまったく関係がない。償却資産の申告書類のフォーマットはレガシーでわかりにくい。そのレガシーをそのままシステム化した eltax の画面操作も同じぐらいわかりにくかった。いくつかスクリーンショットを撮ったり画面操作のコツを課題管理システムにコメントしつつ、今期に追加した増加資産を登録した。社用車を購入したのですべての固定資産の取得価額が免税点である150万円を超えてしまった。おそらく春に固定資産税を納税しないといけないと思う。</description><content>&lt;p>22時に寝て2時に起きてネットみたり漫画読んだりして6時になって7時に起きた。その睡眠不足から夕方に眠くなって17時から3時間ほど寝てた。ほぼ1日コーポレートタスクをやっていて過ぎた。この数日コーポレートタスクを集中的にやっていて効率がよかった。今後もお正月明けの最初の週はコーポレートタスクを行い、対外的なお仕事はお休みするような予定を立てられるとよさそうと思った。&lt;/p>
&lt;h2 id="保管場所使用承諾証明書の取得">保管場所使用承諾証明書の取得&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0105/#駐車場の契約と保管場所使用承諾証明書の手配">昨日の続き&lt;/a> 。便宜を図ってもらって急ぎで手配してもらった証明書を管理会社のオフィスまで取りに行く。郵送してもらうと私が来週受け取れないため、もっとも早くて確実な手段として私が大阪まで直接取りに行くことにした。便宜を図ってもらったのでそれぐらいの労力は惜しまない。9時半頃、約1年ぶりに梅田の地下を歩いてみて、まだお正月休みなのか、梅田の地下にしてはまったく人がいなかった。あまりにまばらな人影にゴーストタウンになったのかと錯覚するぐらい。管理会社に着いて証明書をいただいてすぐ U ターンしてディーラーさんへ赴き、担当者さんに納車の手続きに必要な印鑑証明と保管場所使用承諾証明書を手渡す。保管場所使用承諾証明書から警察署で車庫証明を取っていただく。これはディーラーの担当者さんが代行してくれる (要手数料) 。納車日は1月21日になった。父の35日法要で28日に実家へ帰るのでそれまでに納車ができるように調整していた。購入相談へ行ってから2日で納車手続きまで進み、想定通り、ものごとが進捗して幸せ感が高い。計画がうまく進むと幸せなんだということに気付いた。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。いつもは9時から行っているが、今日はお出かけしていたので11時半から。お正月を挟んで葬儀というライフイベントもあったのでその話題を中心にしながら &lt;a href="/diary/diary/posts/2023/0102/#ビッグテックの技術系プロジェクトのマネジメント方法と興味深いスクラムの不採用">ビッグテックはスクラムやってない記事&lt;/a> の共有などを行った。はらさんの知人に &lt;a href="https://copilot.jp/">コパイロツト&lt;/a> さんという会社で働いている人がいてプロジェクトマネジメントやナレッジマネジメントをビジネス展開している会社らしい。うちの課題管理と密接な分野でもあるのでまた機会があれば一緒にお話ししたいといったことを確認した。&lt;a href="https://blog.copilot.jp/">会社ブログ&lt;/a> でもプロジェクトマネジメントについて発信しているらしい。また読んでみて理解を深めようと思う。&lt;/p>
&lt;h2 id="償却資産-固定資産税-の申告">償却資産 (固定資産税) の申告&lt;/h2>
&lt;p>社用車の納車日も決まったので &lt;a href="https://www.city.kobe.lg.jp/a03858/kurashi/registration/shinsei/zei/koteishisan/syokyaku_sinkoku.html">償却資産（固定資産税）の申告&lt;/a> を行う。&lt;a href="https://www.eltax.lta.go.jp/denshishinkoku/case05/">eltax で電子申告&lt;/a> する。&lt;a href="/diary/diary/posts/2022/0104/#償却資産の申告">昨年の申告時の日記&lt;/a> にも書いたが、国税である法人税の節税手段としての「少額減価償却資産の取得価額の損金算入」と地方税である固定資産税の申告とはまったく関係がない。償却資産の申告書類のフォーマットはレガシーでわかりにくい。そのレガシーをそのままシステム化した eltax の画面操作も同じぐらいわかりにくかった。いくつかスクリーンショットを撮ったり画面操作のコツを課題管理システムにコメントしつつ、今期に追加した増加資産を登録した。社用車を購入したのですべての固定資産の取得価額が免税点である150万円を超えてしまった。おそらく春に固定資産税を納税しないといけないと思う。&lt;/p></content></item><item><title>会社の事務手続きで1日が終わった</title><link>/diary/posts/2023/0104/</link><pubDate>Wed, 04 Jan 2023 22:57:39 +0900</pubDate><guid>/diary/posts/2023/0104/</guid><description>0時に寝て何度か起きて8時に起きた。まぁまぁ眠れたと思う。
源泉所得税の納付 6ヶ月に1回の源泉所得税をまとめて納付する。前回から web 版をやめて e-Taxソフト という、windows マシンにインストールして使うアプリケーションを使うようにしている。20年前の visual basic で作ったような年代ものの saas アプリケーションになる。前回送付したデータが残っていたのでそれを開いて別名保存することで前回の送付データを再利用できた。役員報酬は毎月定額で社員も私1人なので6ヶ月分の源泉所得税は年末調整の金額分がずれるだけ。ほとんど同じ書類を申請するので対象月と金額の違いだけ更新すればすぐに作成できる。過去の作業手順を確認しながらやっても10分で完了した。
給与支払報告書の申告 eltax の windows アプリケーションになる PCdesk (DL版) を使って申告する。当初は紙の書類で申告していたのを 昨年から eltax で給与支払報告書を申告する ように運用を変えた。昨年は先に e-tax で税務署向けに源泉徴収票を申告していたため、e-tax と eltax で別々に作業した。今年は 給与支払報告書と源泉徴収票の同時提出 をやってみることにした。この作業を eltax では「一元化」と呼んでいる。ユーザーにとっては申告作業そのものが半分になるので大きな効率化になる。うちは社員が私1人だけなので源泉徴収票の内容をアプリケーション上で手入力している。過去の作業手順とユーザーマニュアルを見返しながら、途中のスクリーンショットも撮りつつ、それでも1時間弱で申告できた。e-tax への送付データの受付確認は e-tax にログインしてメッセージボックスを確認してとあったので、eltax のソフトから e-tax の api (インターフェース) にあわせて申請データを送付しているのだろうと推測する。とくに問題なく一元化できた。2回目でさらに理解度が増したので来年は30分ぐらいでできるんじゃないかと思う。eltax のアプリケーション e-tax と比べて、相対的にアプリケーションがモダンなので作業していてユーザー体験がよい。eltax で作業するのは苦にならない。
経営セーフティ共済の前納 昨年も3月に前納 (一括納付) している ので、今年度も同様に 掛金の前納 を行う。銀行の窓口へ行って書面で手続きを行う。これがすんなり進まず骨が折れた。窓口の担当者も経営セーフティ共済の手続きをよく知らなかったようで前納の申請書の用紙がないとバタバタしていた。この時点で小一時間ほどかかった。用紙は入手できたものの、オフィスの住所変更をしたので一括納付の前に住所変更しなければ受け付けできないということになった。やはり窓口の担当者がよく分かってなくて、中小機構に確認して住所変更してください。住所変更は銀行ではできませんと言われたものの、中小機構の 事業所の住所変更 を確認すると「金融機関の窓口に書類を提出してください」と書いてある。それを説明したらやっぱりできますという話しになって、住所変更のための書類を集めてきて、住所変更と前納の2つの申請を同時に行うことで受付してくれた。私が懸念に思ったことを質問すると、確認しますと裏へ回って中小機構に電話してたんだと思う。銀行も中小機構の仲介を本当はやりたくないんやろなと伺えるほど運用の段取りが悪かった。待ち時間や書類集めでオフィスと銀行を3往復してこの手続きに3時間ほどかかった。
社用車の購入相談 近所のカーディーラーへ行って中古車を購入したいと相談してきた。あらかじめ車種は決めていたし、ネットで相場や予算の目安も決めていた。中古車を店員さんと一緒に眺めながら、店員さんからみた中古車を購入する上でのアドバイスをいくつかもらってエイヤで決めた。色はブルーがよかったんだけど、選択の余地がなくてシルバーになった。いつか新車を購入できる余裕が出来たときにとっておこう。その後、契約の手続きもすぐに行ってくれて小一時間ほどで商談が成立。オフィスに帰ってきてすぐ法務局へ行って印鑑証明を取得した。あとは駐車場を借りたら納車の手続きを進めてもらうための書類がすべて揃う。
購入費用を振り込みして契約書を眺めながら固定資産台帳に登録する。中古車を購入したときの減価償却はちょっとややこしい。普通車の耐用年数は6年になる。中古車で6年以上経っているものを購入した場合、次の計算式で2年として扱われる。
6年(法定耐用年数) x 20％ ＝ 1.2年 =&amp;gt; 2年
耐用年数を2年として減価償却するときに定額法と定率法がある。後者の方がより多くの経費を早く減価償却できる。たった2年なのでどちらでもよいのだけど、利益に余裕があるならなるべく減価償却した方がいいかと考えて定率法を採用した。
自動車の耐用年数や計算方法など、自動車の減価償却の仕組みとは【税理士に聞く】</description><content>&lt;p>0時に寝て何度か起きて8時に起きた。まぁまぁ眠れたと思う。&lt;/p>
&lt;h2 id="源泉所得税の納付">源泉所得税の納付&lt;/h2>
&lt;p>6ヶ月に1回の源泉所得税をまとめて納付する。前回から web 版をやめて &lt;a href="https://www.e-tax.nta.go.jp/e-taxsoft/index.htm">e-Taxソフト&lt;/a> という、windows マシンにインストールして使うアプリケーションを使うようにしている。20年前の visual basic で作ったような年代ものの saas アプリケーションになる。前回送付したデータが残っていたのでそれを開いて別名保存することで前回の送付データを再利用できた。役員報酬は毎月定額で社員も私1人なので6ヶ月分の源泉所得税は年末調整の金額分がずれるだけ。ほとんど同じ書類を申請するので対象月と金額の違いだけ更新すればすぐに作成できる。過去の作業手順を確認しながらやっても10分で完了した。&lt;/p>
&lt;h2 id="給与支払報告書の申告">給与支払報告書の申告&lt;/h2>
&lt;p>eltax の windows アプリケーションになる &lt;a href="https://www.eltax.lta.go.jp/eltax/software/">PCdesk (DL版)&lt;/a> を使って申告する。当初は紙の書類で申告していたのを &lt;a href="/diary/diary/posts/2021/1124/#続:-年末調整と住民税の納付">昨年から eltax で給与支払報告書を申告する&lt;/a> ように運用を変えた。昨年は先に e-tax で税務署向けに源泉徴収票を申告していたため、e-tax と eltax で別々に作業した。今年は &lt;a href="https://www.eltax.lta.go.jp/news/00303">給与支払報告書と源泉徴収票の同時提出&lt;/a> をやってみることにした。この作業を eltax では「一元化」と呼んでいる。ユーザーにとっては申告作業そのものが半分になるので大きな効率化になる。うちは社員が私1人だけなので源泉徴収票の内容をアプリケーション上で手入力している。過去の作業手順とユーザーマニュアルを見返しながら、途中のスクリーンショットも撮りつつ、それでも1時間弱で申告できた。e-tax への送付データの受付確認は e-tax にログインしてメッセージボックスを確認してとあったので、eltax のソフトから e-tax の api (インターフェース) にあわせて申請データを送付しているのだろうと推測する。とくに問題なく一元化できた。2回目でさらに理解度が増したので来年は30分ぐらいでできるんじゃないかと思う。eltax のアプリケーション e-tax と比べて、相対的にアプリケーションがモダンなので作業していてユーザー体験がよい。eltax で作業するのは苦にならない。&lt;/p>
&lt;h2 id="経営セーフティ共済の前納">経営セーフティ共済の前納&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1229/#経営セーフティ共済の前納">昨年も3月に前納 (一括納付) している&lt;/a> ので、今年度も同様に &lt;a href="https://www.smrj.go.jp/kyosai/tkyosai/customer/procedure/installment/02.html">掛金の前納&lt;/a> を行う。銀行の窓口へ行って書面で手続きを行う。これがすんなり進まず骨が折れた。窓口の担当者も経営セーフティ共済の手続きをよく知らなかったようで前納の申請書の用紙がないとバタバタしていた。この時点で小一時間ほどかかった。用紙は入手できたものの、オフィスの住所変更をしたので一括納付の前に住所変更しなければ受け付けできないということになった。やはり窓口の担当者がよく分かってなくて、中小機構に確認して住所変更してください。住所変更は銀行ではできませんと言われたものの、中小機構の &lt;a href="https://www.smrj.go.jp/kyosai/tkyosai/customer/procedure/registration/02.html">事業所の住所変更&lt;/a> を確認すると「金融機関の窓口に書類を提出してください」と書いてある。それを説明したらやっぱりできますという話しになって、住所変更のための書類を集めてきて、住所変更と前納の2つの申請を同時に行うことで受付してくれた。私が懸念に思ったことを質問すると、確認しますと裏へ回って中小機構に電話してたんだと思う。銀行も中小機構の仲介を本当はやりたくないんやろなと伺えるほど運用の段取りが悪かった。待ち時間や書類集めでオフィスと銀行を3往復してこの手続きに3時間ほどかかった。&lt;/p>
&lt;h2 id="社用車の購入相談">社用車の購入相談&lt;/h2>
&lt;p>近所のカーディーラーへ行って中古車を購入したいと相談してきた。あらかじめ車種は決めていたし、ネットで相場や予算の目安も決めていた。中古車を店員さんと一緒に眺めながら、店員さんからみた中古車を購入する上でのアドバイスをいくつかもらってエイヤで決めた。色はブルーがよかったんだけど、選択の余地がなくてシルバーになった。いつか新車を購入できる余裕が出来たときにとっておこう。その後、契約の手続きもすぐに行ってくれて小一時間ほどで商談が成立。オフィスに帰ってきてすぐ法務局へ行って印鑑証明を取得した。あとは駐車場を借りたら納車の手続きを進めてもらうための書類がすべて揃う。&lt;/p>
&lt;p>購入費用を振り込みして契約書を眺めながら固定資産台帳に登録する。中古車を購入したときの減価償却はちょっとややこしい。普通車の耐用年数は6年になる。中古車で6年以上経っているものを購入した場合、次の計算式で2年として扱われる。&lt;/p>
&lt;blockquote>
&lt;p>6年(法定耐用年数) x 20％ ＝ 1.2年 =&amp;gt; 2年&lt;/p>
&lt;/blockquote>
&lt;p>耐用年数を2年として減価償却するときに定額法と定率法がある。後者の方がより多くの経費を早く減価償却できる。たった2年なのでどちらでもよいのだけど、利益に余裕があるならなるべく減価償却した方がいいかと考えて定率法を採用した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://lexustokyo.jp/file/special/99101/12290/column/know-how/c0008.html">自動車の耐用年数や計算方法など、自動車の減価償却の仕組みとは【税理士に聞く】&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>一日中議論してた</title><link>/diary/posts/2022/0918/</link><pubDate>Sun, 18 Sep 2022 12:40:10 +0900</pubDate><guid>/diary/posts/2022/0918/</guid><description>1時に寝て7時に起きた。
会計監査と数字の着眼点 note で300円で販売している記事をみかけた。監査法人に勤めていた公認会計士が勝手にレビューしてみた的な記事になる。
Colabo3期間会計報告レビュー タイムラインでみかけたことをきっかけに私も過去3年分の会計報告を眺めたり、社内コミュニティで時事問題として取り上げていたので関心があった。経営者として他社の財務諸表をみる機会は私もあるので、会計士さんがどういった数字の見方をするのかの視点はとても勉強になった。現時点で不正をしているという話ではなく、会計報告からみえる数字だけを追いかけても経費の数字のいくつかに不可思議なところがあるという会計士からの指摘だった。ヒアリングすれば解決するかもしれないしそうじゃないかもしれない。一方で国や都からの少なくない金額の助成金 (税金) を受け取っているので会計報告に不明瞭なところがあるのであれば、精査して説明責任を果たす必要はあるだろうというのは一般的な共通認識ではないかと思う。
スクラム雑談 【三宮.dev オンライン】語り合おう！スクラム開発雑談会！ に参加した。常連のメンバー3人で話し始め、途中から主催者の先輩が加わって、sier のマネジメントのしんどい話しみたいものになって、最後はフロント／バックエンドの技術談義とかハックバーどうよみたいな話しになって、まさに雑談イベントみたいなものになった。ニフティのスクラム という本があるよと教えてもらって無料なので読んでみた所感をつぶやいたりもしてみた。あるイベントでも スクラム雑談 をしていて気付いたことの1つに、スクラムうまくいかない話しの大半は、スクラムというガイドライン上に洗い出された組織の課題を議論するようになるのではないかと思う。組織の課題の洗い出しにスクラムは使えるが、スクラムをやれば組織の課題を改善できるわけではないとわかってきた。
教えてもらったので斜め読みで目を通した / ニフティ | ニフティのスクラム #技術書典 https://t.co/Jh8QlGX4aX
&amp;mdash; Tetsuya Morimoto (@t2y) September 18, 2022</description><content>&lt;p>1時に寝て7時に起きた。&lt;/p>
&lt;h2 id="会計監査と数字の着眼点">会計監査と数字の着眼点&lt;/h2>
&lt;p>note で300円で販売している記事をみかけた。監査法人に勤めていた公認会計士が勝手にレビューしてみた的な記事になる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://note.com/2003zgf/n/n9a53015b551c">Colabo3期間会計報告レビュー&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>タイムラインでみかけたことをきっかけに私も過去3年分の会計報告を眺めたり、社内コミュニティで時事問題として取り上げていたので関心があった。経営者として他社の財務諸表をみる機会は私もあるので、会計士さんがどういった数字の見方をするのかの視点はとても勉強になった。現時点で不正をしているという話ではなく、会計報告からみえる数字だけを追いかけても経費の数字のいくつかに不可思議なところがあるという会計士からの指摘だった。ヒアリングすれば解決するかもしれないしそうじゃないかもしれない。一方で国や都からの少なくない金額の助成金 (税金) を受け取っているので会計報告に不明瞭なところがあるのであれば、精査して説明責任を果たす必要はあるだろうというのは一般的な共通認識ではないかと思う。&lt;/p>
&lt;h2 id="スクラム雑談">スクラム雑談&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/251000/">【三宮.dev オンライン】語り合おう！スクラム開発雑談会！&lt;/a> に参加した。常連のメンバー3人で話し始め、途中から主催者の先輩が加わって、sier のマネジメントのしんどい話しみたいものになって、最後はフロント／バックエンドの技術談義とかハックバーどうよみたいな話しになって、まさに雑談イベントみたいなものになった。&lt;a href="https://techbookfest.org/product/i99SVfgSGa1uSTwcez6H4Y?productVariantID=e3ivMhH8PXCWbtj3VdpiEi">ニフティのスクラム&lt;/a> という本があるよと教えてもらって無料なので読んでみた所感をつぶやいたりもしてみた。あるイベントでも &lt;a href="/diary/diary/posts/2022/0906/#スクラムイベント">スクラム雑談&lt;/a> をしていて気付いたことの1つに、スクラムうまくいかない話しの大半は、スクラムというガイドライン上に洗い出された組織の課題を議論するようになるのではないかと思う。組織の課題の洗い出しにスクラムは使えるが、スクラムをやれば組織の課題を改善できるわけではないとわかってきた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">教えてもらったので斜め読みで目を通した / ニフティ | ニフティのスクラム &lt;a href="https://twitter.com/hashtag/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8?src=hash&amp;amp;ref_src=twsrc%5Etfw">#技術書典&lt;/a> &lt;a href="https://t.co/Jh8QlGX4aX">https://t.co/Jh8QlGX4aX&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1571434558620598273?ref_src=twsrc%5Etfw">September 18, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item><item><title>簡単な現象の組み合わせ障害</title><link>/diary/posts/2022/0826/</link><pubDate>Fri, 26 Aug 2022 12:03:43 +0900</pubDate><guid>/diary/posts/2022/0826/</guid><description>0時に寝て6時に起きた。
eks クラスター障害の原因判明 過去に2回発生していた eks クラスター障害 の原因がようやくわかった。テスト環境も本番環境は5日ごとに再現していて、datadog で k8s のダッシュボードでそれぞれの pod 単位のメモリ使用量をみると datadog-agent の pod がメモリリークしていることに気付いた。そこから当たりをつけて datadog-agent の issue を調べると次のバグに遭遇していた。
[BUG] agent leaves defunct processes with version 7.38.0 #12997 ゾンビプロセスが生成されて、それが os のプロセス数上限に達してしまい、それによってプロセス (スレッド) が生成できなくなって、その結果として aws/amazon-vpc-cni-k8s の aws-node という eks クラスターの管理アプリケーションが動かなくなって、それが動かないと k8s ノードのステータスが NotReady になってしまって、通常の pod のアプリケーションも動かなくなってしまうという現象が発生していた。datadog-agent のアップグレードは私が行ったものだし、その後の k8s ノードの監視や調査で気付きが足りなかったと反省した。
datadog-agent の新しいバージョンをテスト環境でもうしばらく検証してもよかった datadog-agent をリソースリークの可能性を私の中の調査対象から外していた 世の中で使われているものに致命的なバグが起きないだろうという先入観があった プロセスを生成できない原因として考えられる背景を調査すべきだった ulimit を確認してリソース制限はないようにみえた プロセス数やゾンビプロセスを調べていなかった kernel に /proc/sys/kernel/pid_max という上限設定があることを知らなかった テスト環境と本番環境で5日程度で落ちるという周期性から気付くべきだった たしかにテスト環境から1日遅れて本番環境で障害が発生していた 周期性があることでリソースリークの可能性は高いとすぐに調査すべきだった datadog で k8s のダッシュボードを調べるべきだった すでに用意されているものがあったのでみようと思えばみえた aws のインフラ要因ではないかと疑っていた ごめんなさい これは悔しい。自分の無能さや気付きの低さを実感した事件だった。私が注意深く観察していればもう1週間早く気付けた。そのせいで余分な障害と調査に時間を費やした。1つ1つは全く難しくない現象が巧妙に絡みあって隠蔽された結果としての状況に気付けなかった。注意して1つずつ観察して追跡していけばすぐに気付けた。本当に悔しい。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="eks-クラスター障害の原因判明">eks クラスター障害の原因判明&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0820/#aws-インフラの調子が悪い">過去に2回発生していた eks クラスター障害&lt;/a> の原因がようやくわかった。テスト環境も本番環境は5日ごとに再現していて、datadog で k8s のダッシュボードでそれぞれの pod 単位のメモリ使用量をみると datadog-agent の pod がメモリリークしていることに気付いた。そこから当たりをつけて datadog-agent の issue を調べると次のバグに遭遇していた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/DataDog/datadog-agent/issues/12997">[BUG] agent leaves defunct processes with version 7.38.0 #12997&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ゾンビプロセスが生成されて、それが os のプロセス数上限に達してしまい、それによってプロセス (スレッド) が生成できなくなって、その結果として &lt;a href="https://github.com/aws/amazon-vpc-cni-k8s">aws/amazon-vpc-cni-k8s&lt;/a> の &lt;code>aws-node&lt;/code> という eks クラスターの管理アプリケーションが動かなくなって、それが動かないと k8s ノードのステータスが NotReady になってしまって、通常の pod のアプリケーションも動かなくなってしまうという現象が発生していた。datadog-agent のアップグレードは私が行ったものだし、その後の k8s ノードの監視や調査で気付きが足りなかったと反省した。&lt;/p>
&lt;ul>
&lt;li>datadog-agent の新しいバージョンをテスト環境でもうしばらく検証してもよかった&lt;/li>
&lt;li>datadog-agent をリソースリークの可能性を私の中の調査対象から外していた
&lt;ul>
&lt;li>世の中で使われているものに致命的なバグが起きないだろうという先入観があった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>プロセスを生成できない原因として考えられる背景を調査すべきだった
&lt;ul>
&lt;li>ulimit を確認してリソース制限はないようにみえた&lt;/li>
&lt;li>プロセス数やゾンビプロセスを調べていなかった&lt;/li>
&lt;li>kernel に &lt;code>/proc/sys/kernel/pid_max&lt;/code> という上限設定があることを知らなかった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>テスト環境と本番環境で5日程度で落ちるという周期性から気付くべきだった
&lt;ul>
&lt;li>たしかにテスト環境から1日遅れて本番環境で障害が発生していた&lt;/li>
&lt;li>周期性があることでリソースリークの可能性は高いとすぐに調査すべきだった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>datadog で k8s のダッシュボードを調べるべきだった
&lt;ul>
&lt;li>すでに用意されているものがあったのでみようと思えばみえた&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>aws のインフラ要因ではないかと疑っていた
&lt;ul>
&lt;li>ごめんなさい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>これは悔しい。自分の無能さや気付きの低さを実感した事件だった。私が注意深く観察していればもう1週間早く気付けた。そのせいで余分な障害と調査に時間を費やした。1つ1つは全く難しくない現象が巧妙に絡みあって隠蔽された結果としての状況に気付けなかった。注意して1つずつ観察して追跡していけばすぐに気付けた。本当に悔しい。&lt;/p>
&lt;p>1つだけ言い訳をさせてもらうと、私は本番環境にアクセスできない。だからテスト環境と本番環境で発生している現象が同じかどうかを判断できず、調査を進める確証をもてなかった。&lt;/p>
&lt;h2 id="呑み">呑み&lt;/h2>
&lt;p>あまりに悔しかったのと調査してたら遅くなって晩ご飯食べる気力もなかったので気分転換に仲のよい焼き鳥屋さんに寄ってみた。あとから常連客のセブンイレブンの店長さんも来られて、私は初対面かなと思ってたんだけど先方は知っていると言ってたから以前にもカウンターでご一緒していたみたい。何気はなしに3人で2時前ぐらいまで雑談していた。&lt;/p>
&lt;p>その店長さんがロレックスを購入しようと考えているという話しになって、資産または投資商品としてのロレックスの話しになった。たまたまヒカキンが1億円で買ったロレックスがいま2億円になっているといった話しがあったそうで、いまがバブルな状態らしいが、ロレックスをはじめとした高級時計の資産価値が上がっているらしい。私は腕時計を身につけないし高級時計もまったく興味はないが、投資商品の1つなんだというところに関心がもてた。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/1knsQZLeh7U" allowfullscreen title="1億円で買った時計が大変なことになってしまいました…">&lt;/iframe>
&lt;/div>
&lt;p>中小企業の社長の一般的な節税方法の1つに外車を買ったり売ったりするという話しがある。儲かったときに経費で外車を買って、赤字のときに外車を売って雑所得に変える。車は社用車として経費で落とせるから可能なことだが、高級時計はどうなのだろうか？ 結論から言うと、普通の会社では高級時計は経費にできない。経費の原則は売上を上げるために必要な支出を経費とできる。普通の会社は高級時計で売上を上げることはできない。一方で経費として認められる職業もある。芸能人がそうだという。それは番組のために必要だという理屈で経費で落とせる。おそらくヒカキンも経費で高級時計を購入して、そのことを動画にしているのも仕事で必要だという言い訳作りの目的もあるのだと推測する。&lt;/p></content></item><item><title>法人決算の会計処理を終えた</title><link>/diary/posts/2022/0701/</link><pubDate>Fri, 01 Jul 2022 08:20:30 +0900</pubDate><guid>/diary/posts/2022/0701/</guid><description>0時に寝て6時に起きた。夜あまり眠れない。
算定基礎届 e-gov電子申請 を使って初めて電子申請してみた。昨年もやろうと挑戦したけど、macos からだと不具合があってエラーになるから断念してた。今年は windows マシンがあるので windows アプリケーションをインストールして問題なく申請できた。うちは社員1人なので csv 取り込みを使わず、手入力で申請した。申請した書類は pdf 出力できるし、申請後に送信したデータは xml で控えとして保持できる。本当に紙でやっていたものを文書データと数値データに置き換えたようなアプリケーションになっている。紙の書類と比べて、アプリケーションがよいところは申請の進捗状況がわかるところ。算定基礎届で問題が発生することは過去にないけど、審査開始、審査終了、手続終了のステータスをアプリケーションから確認できる。それはそれで申請者にとって状況の追跡ができて安心感になる。
振替伝票の使い方 前期は赤字決算だったので中間申告で支払った税金が還付される。中間申告というのは、前年度の納税金額から翌年の税金の半分を納めるという仕組み。前年度の法人税額が20万円を超えると中間申告が必要となる。前年度と同じ法人税が今年度もあるという前提で半分納めるけれど、その納めた金額よりも確定申告のタイミングで実際の納税金額が少ない場合は還付金という形で返ってくる。今回は赤字決算となったものの、それも初めてだったので税務署からの還付金をどう会計処理するのかも初めての機会でよくわからなくて調べながら作業した。
会計システムとして普通に行う処理ではないので freee のドキュメントも断片的にしか説明されていない。基本的な操作の考え方を理解した上で自分がやりたい会計処理に変更しないといけない。
取引を預り金や仮払金で決済するには、どうすればいいですか？ 還付を受ける場合の処理 まず中間申告のタイミングで振込した納付金額は「仮払金」として登録される。本来は確定申告のタイミングで確定した納付額に対して「仮払金」を相殺するような会計処理を行う必要がある。freee では取引データの決済欄に「+更新」というボタンがあってそこから仮払金から引き落とすようなデータ登録が可能となる。今回は赤字決算ですでに支払った「仮払金」が還付金として戻ってくるときの会計処理をしなければいけない。その手続きのために使うのが「振替伝票」になる。例として金額を10万円とすると次のような振替伝票を作成する。
借方 勘定科目: 未収入金 税区分: 対象外 金額: 10万円 貸方 勘定科目: 仮払金 税区分: 対象外 金額: 10万円 「仮払金」を相殺するための勘定科目は「未収入金」になる。この「未収入金」を還付金の取引 (税務署から銀行口座に振り込まれた金額) で消し込むことで会計システム上の辻褄があう。一般的に還付金の勘定科目は「雑収入」として扱うらしい。還付金は消費税がかからない取引であるので不課税取引となる。ややこしいのは還付金が振り込まれる際に還付加算金というお金も一緒に振り込みされる場合がある。還付加算金というのは、納め過ぎた税金に対する金利のようなものになる。試しに計算してみると金利が 0.46% になった。ある銀行の定期が 0.002% だったので税務署に税金を納め過ぎるとめちゃくちゃ金利のよい貯金みたいな扱いになる。話しを元に戻すと、還付加算金は課税対象になるので「雑収入」の課税売上として会計処理する。
うちの会社では、振替伝票は決算のタイミングでしか使わない。振替伝票の使い方を忘れていてたまに使うときに右往左往する。
はんなりDAO はんなりDAOをはじめてみます に参加した。イベントで話した内容は notion で公開されている。
hannali-dao まだ全然、計画段階で段取りの計画も目処もたっていない。dao が良いものかどうか、私はまだよくわかっていないが、実際に自分で試してみることには肯定的である。そして組織の取り組みは実際に複数人いないとあまり実用的ではないことからコミュニティのような、一定以上の信頼のある実際の人間が関わってくれるならそれはそれで実証実験の場としてはおもしろい取り組みになるかもしれない。初回だったので dao とは何かとか、dao や web3 を取り巻く世の中の状況はどうかとか、はんなり dao の目的をどうするかとか、計画段階の雑談が主だった。最初はそんなもんかもしれない。私もスマートコントラクトとか、何が嬉しいのかよくわかってないので dao を運営する中で実際に実装してみる機会があれば、それはそれで学びの機会としてよいかもしれないと考えている。
aragon という dao を作るためのプラットフォームがあって、これを使うと dao そのものはすぐに準備できるらしい。あとは組織運営のルールやスマートコントラクトを実装していくだけみたいな話し。ethereum で動かすと手数料がかかる。しばらくは testnet であーでもないこーでもないみたいなやり取りをしながら dao の運営を学んでいこうみたいな話しをしていた。</description><content>&lt;p>0時に寝て6時に起きた。夜あまり眠れない。&lt;/p>
&lt;h2 id="算定基礎届">算定基礎届&lt;/h2>
&lt;p>&lt;a href="https://shinsei.e-gov.go.jp/">e-gov電子申請&lt;/a> を使って初めて電子申請してみた。昨年もやろうと挑戦したけど、macos からだと不具合があってエラーになるから断念してた。今年は windows マシンがあるので windows アプリケーションをインストールして問題なく申請できた。うちは社員1人なので csv 取り込みを使わず、手入力で申請した。申請した書類は pdf 出力できるし、申請後に送信したデータは xml で控えとして保持できる。本当に紙でやっていたものを文書データと数値データに置き換えたようなアプリケーションになっている。紙の書類と比べて、アプリケーションがよいところは申請の進捗状況がわかるところ。算定基礎届で問題が発生することは過去にないけど、審査開始、審査終了、手続終了のステータスをアプリケーションから確認できる。それはそれで申請者にとって状況の追跡ができて安心感になる。&lt;/p>
&lt;h2 id="振替伝票の使い方">振替伝票の使い方&lt;/h2>
&lt;p>前期は赤字決算だったので中間申告で支払った税金が還付される。中間申告というのは、前年度の納税金額から翌年の税金の半分を納めるという仕組み。前年度の法人税額が20万円を超えると中間申告が必要となる。前年度と同じ法人税が今年度もあるという前提で半分納めるけれど、その納めた金額よりも確定申告のタイミングで実際の納税金額が少ない場合は還付金という形で返ってくる。今回は赤字決算となったものの、それも初めてだったので税務署からの還付金をどう会計処理するのかも初めての機会でよくわからなくて調べながら作業した。&lt;/p>
&lt;p>会計システムとして普通に行う処理ではないので freee のドキュメントも断片的にしか説明されていない。基本的な操作の考え方を理解した上で自分がやりたい会計処理に変更しないといけない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://support.freee.co.jp/hc/ja/articles/360000917903-%E5%8F%96%E5%BC%95%E3%82%92%E9%A0%90%E3%82%8A%E9%87%91%E3%82%84%E4%BB%AE%E6%89%95%E9%87%91%E3%81%A7%E6%B1%BA%E6%B8%88%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF-%E3%81%A9%E3%81%86%E3%81%99%E3%82%8C%E3%81%B0%E3%81%84%E3%81%84%E3%81%A7%E3%81%99%E3%81%8B-">取引を預り金や仮払金で決済するには、どうすればいいですか？&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://support.freee.co.jp/hc/ja/articles/204614754#4">還付を受ける場合の処理&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>まず中間申告のタイミングで振込した納付金額は「仮払金」として登録される。本来は確定申告のタイミングで確定した納付額に対して「仮払金」を相殺するような会計処理を行う必要がある。freee では取引データの決済欄に「+更新」というボタンがあってそこから仮払金から引き落とすようなデータ登録が可能となる。今回は赤字決算ですでに支払った「仮払金」が還付金として戻ってくるときの会計処理をしなければいけない。その手続きのために使うのが「振替伝票」になる。例として金額を10万円とすると次のような振替伝票を作成する。&lt;/p>
&lt;ul>
&lt;li>借方
&lt;ul>
&lt;li>勘定科目: 未収入金&lt;/li>
&lt;li>税区分: 対象外&lt;/li>
&lt;li>金額: 10万円&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>貸方
&lt;ul>
&lt;li>勘定科目: 仮払金&lt;/li>
&lt;li>税区分: 対象外&lt;/li>
&lt;li>金額: 10万円&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>「仮払金」を相殺するための勘定科目は「未収入金」になる。この「未収入金」を還付金の取引 (税務署から銀行口座に振り込まれた金額) で消し込むことで会計システム上の辻褄があう。一般的に還付金の勘定科目は「雑収入」として扱うらしい。還付金は消費税がかからない取引であるので不課税取引となる。ややこしいのは還付金が振り込まれる際に還付加算金というお金も一緒に振り込みされる場合がある。還付加算金というのは、納め過ぎた税金に対する金利のようなものになる。試しに計算してみると金利が 0.46% になった。ある銀行の定期が 0.002% だったので税務署に税金を納め過ぎるとめちゃくちゃ金利のよい貯金みたいな扱いになる。話しを元に戻すと、還付加算金は課税対象になるので「雑収入」の課税売上として会計処理する。&lt;/p>
&lt;p>うちの会社では、振替伝票は決算のタイミングでしか使わない。振替伝票の使い方を忘れていてたまに使うときに右往左往する。&lt;/p>
&lt;h2 id="はんなりdao">はんなりDAO&lt;/h2>
&lt;p>&lt;a href="https://hannari-python.connpass.com/event/251671/">はんなりDAOをはじめてみます&lt;/a> に参加した。イベントで話した内容は notion で公開されている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://chomoku.notion.site/chomoku/hannali-dao-080626065e614df89beb15c4b1272762">hannali-dao&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>まだ全然、計画段階で段取りの計画も目処もたっていない。dao が良いものかどうか、私はまだよくわかっていないが、実際に自分で試してみることには肯定的である。そして組織の取り組みは実際に複数人いないとあまり実用的ではないことからコミュニティのような、一定以上の信頼のある実際の人間が関わってくれるならそれはそれで実証実験の場としてはおもしろい取り組みになるかもしれない。初回だったので dao とは何かとか、dao や web3 を取り巻く世の中の状況はどうかとか、はんなり dao の目的をどうするかとか、計画段階の雑談が主だった。最初はそんなもんかもしれない。私もスマートコントラクトとか、何が嬉しいのかよくわかってないので dao を運営する中で実際に実装してみる機会があれば、それはそれで学びの機会としてよいかもしれないと考えている。&lt;/p>
&lt;p>&lt;a href="https://aragon.org/">aragon&lt;/a> という dao を作るためのプラットフォームがあって、これを使うと dao そのものはすぐに準備できるらしい。あとは組織運営のルールやスマートコントラクトを実装していくだけみたいな話し。ethereum で動かすと手数料がかかる。しばらくは testnet であーでもないこーでもないみたいなやり取りをしながら dao の運営を学んでいこうみたいな話しをしていた。&lt;/p></content></item><item><title>法人税の修正申告</title><link>/diary/posts/2022/0626/</link><pubDate>Sun, 26 Jun 2022 10:51:10 +0900</pubDate><guid>/diary/posts/2022/0626/</guid><description>1時に寝て7時に起きた。
源泉所得税の納付 ちょうど給料日を過ぎたので所得税徴収高計算書 (納期特例分) の申請を行った。これまでも e-tax で電子申請して振り込みしていたのだけれど、e-tax ソフト (web版) でブラウザから申請していた。今回は windows マシンにインストールされている e-tax ソフトから申請してみることにした。e-tax ソフトは起動時に「追加インストール」という機能があって、申請に必要なモジュールのみをダウンロードしてインストールできるようになっている。20年前で言うところの saas はこうだった。「源泉所得税関係」というモジュールをインストールしないと、所得税徴収高計算書の申請ができない (e-tax ソフトに帳票がインストールされない) 。モジュールを追加インストールすれば、「源泉所得税」という税目から「所得税徴収高計算書 (納期特例分) 」という帳票を選択して、あとは数字を記入して送信するだけ。この申請に電子署名は不要。
法人税の修正申告と欠損金の繰り戻し還付の訂正依頼 国税局の職員さんからの指摘 で提出した書類が誤っていることに気付いた。いくつか訂正箇所を書いておく。
欠損金額とは 正: 税引き後の欠損金額 = 別表1の1の数字をそのまま使えばよい 誤: 税引き前の所得 (税務上は負の所得を欠損金と呼ぶ) を使っていた 法人税と地方法人税の計算は別 欠損金の繰り戻し還付の申請は法人税のみの還付金を算出 ↑で求めた還付金に対して(令和元年以降は)10.3%を地方法人税の還付金とする この手続きは不要で別表一に算出した数字を記載すればよい まずこの申請書の誤りを修正して訂正依頼とする。
さらにこの欠損金の繰り戻し還付の申請の数字を別表1に記載しなければならない。それらが漏れているのと還付申請のためには別表七も提出しないといけない。あと細かい数字の記入漏れの指摘もあった。法人税の確定申告に対して次の5つの書類を修正申告として提出する。
別表一 別表一 次葉 別表四 別表五 (一) 別表七 (一) 税務署の職員さんが訂正する数字を書いてくれていたので、それをみながら e-tax ソフトで数字を修正して紙に印刷してそれを再提出する。おかげで赤字のときの別表書類の書き方もわかった。大半は欠損金の繰り返し還付に関する数字の記入漏れなので今後も赤字の年度があったときにこの内容を踏襲しながら申告すればよい。また1つ行政手続きのノウハウを得ることができた。税務署の職員さんに感謝。
企業サイトの更新 企業サイトを作成してから3年近く経つのでそろそろ初期の頃に書いた内容が現状とあわなくなってきた。あちこち現状とあっていない内容を更新した。本当はデザインを刷新したいと思っている。デザイン刷新のためのチケットを作ったのが2021年7月28日 20:04なのでもうすぐ1年経とうとしている。どんどん時間が過ぎるな。今日のところは、主には 企業情報 の構成を作り直した。それと同時に過去に働いていた会社での業務外発表を除去した。今後は自社の発表のみを掲載する。これには会社としてマーケティング活動をやっていくという意気込みと過去との決別の意味合いもある。トップページに news を5件表示しているところがビルドするタイミングによってそうならないときがあって、実行タイミングによってページングがされたりされなかったりする現象に悩まされている。ワークアラウンドとしては、何回かビルドをやり直せばページングされるときもあるのでそれを待つみたいな、どうしようもないやり方でこの場は凌いでいる。</description><content>&lt;p>1時に寝て7時に起きた。&lt;/p>
&lt;h2 id="源泉所得税の納付">源泉所得税の納付&lt;/h2>
&lt;p>ちょうど給料日を過ぎたので所得税徴収高計算書 (納期特例分) の申請を行った。これまでも e-tax で電子申請して振り込みしていたのだけれど、e-tax ソフト (web版) でブラウザから申請していた。今回は windows マシンにインストールされている e-tax ソフトから申請してみることにした。e-tax ソフトは起動時に「追加インストール」という機能があって、申請に必要なモジュールのみをダウンロードしてインストールできるようになっている。20年前で言うところの saas はこうだった。「源泉所得税関係」というモジュールをインストールしないと、所得税徴収高計算書の申請ができない (e-tax ソフトに帳票がインストールされない) 。モジュールを追加インストールすれば、「源泉所得税」という税目から「所得税徴収高計算書 (納期特例分) 」という帳票を選択して、あとは数字を記入して送信するだけ。この申請に電子署名は不要。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0626_e-tax.png"/>
&lt;/figure>
&lt;h2 id="法人税の修正申告と欠損金の繰り戻し還付の訂正依頼">法人税の修正申告と欠損金の繰り戻し還付の訂正依頼&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0620/#欠損金の繰り戻し還付の申請の誤り">国税局の職員さんからの指摘&lt;/a> で提出した書類が誤っていることに気付いた。いくつか訂正箇所を書いておく。&lt;/p>
&lt;ul>
&lt;li>欠損金額とは
&lt;ul>
&lt;li>正: 税引き後の欠損金額 = 別表1の1の数字をそのまま使えばよい&lt;/li>
&lt;li>誤: 税引き前の所得 (税務上は負の所得を欠損金と呼ぶ) を使っていた&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>法人税と地方法人税の計算は別
&lt;ul>
&lt;li>欠損金の繰り戻し還付の申請は法人税のみの還付金を算出&lt;/li>
&lt;li>↑で求めた還付金に対して(令和元年以降は)10.3%を地方法人税の還付金とする
&lt;ul>
&lt;li>この手続きは不要で別表一に算出した数字を記載すればよい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>まずこの申請書の誤りを修正して訂正依頼とする。&lt;/p>
&lt;p>さらにこの欠損金の繰り戻し還付の申請の数字を別表1に記載しなければならない。それらが漏れているのと還付申請のためには別表七も提出しないといけない。あと細かい数字の記入漏れの指摘もあった。法人税の確定申告に対して次の5つの書類を修正申告として提出する。&lt;/p>
&lt;ul>
&lt;li>別表一&lt;/li>
&lt;li>別表一 次葉&lt;/li>
&lt;li>別表四&lt;/li>
&lt;li>別表五 (一)&lt;/li>
&lt;li>別表七 (一)&lt;/li>
&lt;/ul>
&lt;p>税務署の職員さんが訂正する数字を書いてくれていたので、それをみながら e-tax ソフトで数字を修正して紙に印刷してそれを再提出する。おかげで赤字のときの別表書類の書き方もわかった。大半は欠損金の繰り返し還付に関する数字の記入漏れなので今後も赤字の年度があったときにこの内容を踏襲しながら申告すればよい。また1つ行政手続きのノウハウを得ることができた。税務署の職員さんに感謝。&lt;/p>
&lt;h2 id="企業サイトの更新">企業サイトの更新&lt;/h2>
&lt;p>企業サイトを作成してから3年近く経つのでそろそろ初期の頃に書いた内容が現状とあわなくなってきた。あちこち現状とあっていない内容を更新した。本当はデザインを刷新したいと思っている。デザイン刷新のためのチケットを作ったのが2021年7月28日 20:04なのでもうすぐ1年経とうとしている。どんどん時間が過ぎるな。今日のところは、主には &lt;a href="https://kazamori.jp/about/">企業情報&lt;/a> の構成を作り直した。それと同時に過去に働いていた会社での業務外発表を除去した。今後は自社の発表のみを掲載する。これには会社としてマーケティング活動をやっていくという意気込みと過去との決別の意味合いもある。トップページに news を5件表示しているところがビルドするタイミングによってそうならないときがあって、実行タイミングによってページングがされたりされなかったりする現象に悩まされている。ワークアラウンドとしては、何回かビルドをやり直せばページングされるときもあるのでそれを待つみたいな、どうしようもないやり方でこの場は凌いでいる。&lt;/p></content></item><item><title>log4j2 の設定ファイルの動的な読み込み</title><link>/diary/posts/2022/0620/</link><pubDate>Mon, 20 Jun 2022 08:23:37 +0900</pubDate><guid>/diary/posts/2022/0620/</guid><description>0時に寝て7時に起きた。
バッチ処理モジュール cli でバッチ処理モジュールを作った。コマンドラインの引数パーサーと yml のパーサーを使うことにした。
picocli snakeyaml ロガー実装に log4j2 を使っているので設定ファイルはアプリケーションの設定ファイルと log4j2 の設定ファイルの2つになる。それぞれ環境ごとに用意してエントリーポイントから起動したタイミングで明示的に設定ファイルを読み込むようにした。
log4j2 の yml 設定ファイルを動的にどうやって設定するかはドキュメントにもとくに書いてなかった気がする。log4j2 のソースコードやテストコードを読みながら次のようにしたら反映された。
public static Config load(BatchEnvironment env) { var path = String.format(&amp;#34;config-%s.yml&amp;#34;, env.getName()); var inputStream = ConfigUtil.class.getClassLoader().getResourceAsStream(path); var yaml = new Yaml(new Constructor(Config.class)); return yaml.load(inputStream); } アプリケーションの設定は yml 設定に対応する Config クラスを定義しておいて次のようにして読み込む。
public static void initializeLogSettings(BatchEnvironment env) throws IOException { var path = String.format(&amp;#34;log4j2-%s.yml&amp;#34;, env.getName()); var inputStream = ConfigUtil.class.getClassLoader().getResourceAsStream(path); var source = new ConfigurationSource(inputStream); var configuration = new YamlConfigurationFactory().</description><content>&lt;p>0時に寝て7時に起きた。&lt;/p>
&lt;h2 id="バッチ処理モジュール">バッチ処理モジュール&lt;/h2>
&lt;p>cli でバッチ処理モジュールを作った。コマンドラインの引数パーサーと yml のパーサーを使うことにした。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://picocli.info/">picocli&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://bitbucket.org/snakeyaml/">snakeyaml&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ロガー実装に &lt;a href="https://logging.apache.org/log4j/2.x/">log4j2&lt;/a> を使っているので設定ファイルはアプリケーションの設定ファイルと log4j2 の設定ファイルの2つになる。それぞれ環境ごとに用意してエントリーポイントから起動したタイミングで明示的に設定ファイルを読み込むようにした。&lt;/p>
&lt;p>log4j2 の yml 設定ファイルを動的にどうやって設定するかはドキュメントにもとくに書いてなかった気がする。log4j2 のソースコードやテストコードを読みながら次のようにしたら反映された。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> Config &lt;span style="color:#a6e22e">load&lt;/span>&lt;span style="color:#f92672">(&lt;/span>BatchEnvironment env&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var path &lt;span style="color:#f92672">=&lt;/span> String&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">format&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;config-%s.yml&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> env&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var inputStream &lt;span style="color:#f92672">=&lt;/span> ConfigUtil&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getClassLoader&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">getResourceAsStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>path&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var yaml &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Yaml&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> Constructor&lt;span style="color:#f92672">(&lt;/span>Config&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> yaml&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">load&lt;/span>&lt;span style="color:#f92672">(&lt;/span>inputStream&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>アプリケーションの設定は yml 設定に対応する &lt;code>Config&lt;/code> クラスを定義しておいて次のようにして読み込む。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">initializeLogSettings&lt;/span>&lt;span style="color:#f92672">(&lt;/span>BatchEnvironment env&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">throws&lt;/span> IOException &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var path &lt;span style="color:#f92672">=&lt;/span> String&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">format&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;log4j2-%s.yml&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> env&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var inputStream &lt;span style="color:#f92672">=&lt;/span> ConfigUtil&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getClassLoader&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">getResourceAsStream&lt;/span>&lt;span style="color:#f92672">(&lt;/span>path&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var source &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ConfigurationSource&lt;span style="color:#f92672">(&lt;/span>inputStream&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var configuration &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> YamlConfigurationFactory&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">getConfiguration&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">null&lt;/span>&lt;span style="color:#f92672">,&lt;/span> source&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Configurator&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">initialize&lt;/span>&lt;span style="color:#f92672">(&lt;/span>configuration&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ちょっとした cli を作るときにちょっとしたライブラリがあると楽でよい。&lt;/p>
&lt;h2 id="欠損金の繰り戻し還付の申請の誤り">欠損金の繰り戻し還付の申請の誤り&lt;/h2>
&lt;p>国税局から電話がかかってきた。初めて提出した欠損金の繰り戻し還付の申請があちこち間違ってますよと。申請書類と一緒に法人税の申告書もみてもらっていて、還付申請した金額も申告の別表1に記入する必要があって、それも一緒に修正してねという話し。法人税の修正申告と還付の訂正依頼の2つが必要とのこと。税務署の人たちは本当に丁寧で親切にあれが間違っている、これが間違っていると教えてくれる。素人が法人決算やっているので初めて行う手続きの間違いはつきものだけど、税務署の人たちが教えてくれるので本当に助かる。感謝。&lt;/p></content></item><item><title>締め切りの45分前</title><link>/diary/posts/2022/0531/</link><pubDate>Tue, 31 May 2022 08:22:54 +0900</pubDate><guid>/diary/posts/2022/0531/</guid><description>0時に寝て4時に起きて7時に起きた。最近は4時に一回起きることも多くなってきた。ちょっとゲームしていつの間にか、寝たりもするけど。
法人決算の間違い 5月の最終日なのでお昼休みに社会保険の引き落としの明細を手動で入力していた。ufj 銀行 (法人口座) の api 連携は有償サービスで、主に社会保険や経営セーフティ共済の引き落としにしか使っていないのでうちの会社は有償サービスを使っていない。通帳もしくは当日残高の明細をみて、それを手入力で freee の口座に登録する。そこで稀に利息がつくというのを失念していた。2月の利息15円の明細登録が漏れていることに気付いた。freee には登録残高という自動計算された口座残高をもっているので、それと明細の残高を見比べれば気付けるようになっているのだけど、たった15円の差異だったのでこれまで私が見落としていた。
法人決算の確定申告をすでに終えているのに15円の受取利息が漏れていることに気付いてしまった。ひとまず税務署に電話してどうしたらいいかを相談した。今日中に訂正するなら上書き更新、明日以降なら修正申告と言われた。所得や税引き前純利益の金額に15円の差異があり、3つか4つぐらいの帳票の項目の値が変わる。法人税の金額計算には影響しない。欠損金の繰り戻し還付の申請でも15円の違いから2円の差額になった。銀行の受け取り利息の消費税は非課税なので消費税の申告には影響しない。
e-tax で送信したデータをコピーして、元データがある状態で誤り箇所を修正して再送信するのはすぐできて30分ぐらいで訂正送信できた。電子申告の良さを実感した。紙だとこうはいかなかったかもしれない。財務諸表は紙で提出しないといけないので、e-tax の修正送信後に慌てて税務署へ行って再提出してきた。それが16時15分。法人決算締め切りの45分前。オフィスから税務署まで自転車で5分の距離だから間に合った。思いの他、最終日に落とし穴にはまったものの、ちゃちゃっと訂正できたので行政の事務手続きスキルは上がってきたなと自信ももてた。こんな失敗をしておけば今後は登録残高と明細残高のチェックも忘れることはないだろう。</description><content>&lt;p>0時に寝て4時に起きて7時に起きた。最近は4時に一回起きることも多くなってきた。ちょっとゲームしていつの間にか、寝たりもするけど。&lt;/p>
&lt;h2 id="法人決算の間違い">法人決算の間違い&lt;/h2>
&lt;p>5月の最終日なのでお昼休みに社会保険の引き落としの明細を手動で入力していた。ufj 銀行 (法人口座) の api 連携は有償サービスで、主に社会保険や経営セーフティ共済の引き落としにしか使っていないのでうちの会社は有償サービスを使っていない。通帳もしくは当日残高の明細をみて、それを手入力で freee の口座に登録する。そこで稀に利息がつくというのを失念していた。2月の利息15円の明細登録が漏れていることに気付いた。freee には登録残高という自動計算された口座残高をもっているので、それと明細の残高を見比べれば気付けるようになっているのだけど、たった15円の差異だったのでこれまで私が見落としていた。&lt;/p>
&lt;p>法人決算の確定申告をすでに終えているのに15円の受取利息が漏れていることに気付いてしまった。ひとまず税務署に電話してどうしたらいいかを相談した。今日中に訂正するなら上書き更新、明日以降なら修正申告と言われた。所得や税引き前純利益の金額に15円の差異があり、3つか4つぐらいの帳票の項目の値が変わる。法人税の金額計算には影響しない。欠損金の繰り戻し還付の申請でも15円の違いから2円の差額になった。銀行の受け取り利息の消費税は非課税なので消費税の申告には影響しない。&lt;/p>
&lt;p>e-tax で送信したデータをコピーして、元データがある状態で誤り箇所を修正して再送信するのはすぐできて30分ぐらいで訂正送信できた。電子申告の良さを実感した。紙だとこうはいかなかったかもしれない。財務諸表は紙で提出しないといけないので、e-tax の修正送信後に慌てて税務署へ行って再提出してきた。それが16時15分。法人決算締め切りの45分前。オフィスから税務署まで自転車で5分の距離だから間に合った。思いの他、最終日に落とし穴にはまったものの、ちゃちゃっと訂正できたので行政の事務手続きスキルは上がってきたなと自信ももてた。こんな失敗をしておけば今後は登録残高と明細残高のチェックも忘れることはないだろう。&lt;/p></content></item><item><title>法人決算をほぼ完了</title><link>/diary/posts/2022/0528/</link><pubDate>Sat, 28 May 2022 11:58:58 +0900</pubDate><guid>/diary/posts/2022/0528/</guid><description>0時に寝て6時に起きた。
ストレッチ 今日の開脚幅は開始前160cmで、ストレッチ後162cmだった。先週とほぼ変わらないので現状維持といったところ。右腰に張りがあって今週は椅子に座って後ろに寄りかかっていてもやや右腰が張るなぁと自覚症状もあった。ストレッチを受けていても効くなぁって感じだった。新しいトレーナーさんに代わってから1ヶ月のストレッチを受けてだいぶ打ち解けた感はある。
法人決算をほぼ完了 法人決算の e-tax 申請 の続き。前に消費税の申告をしたときに別表五以外はすべて作成していた。別表五はどこに何の数字を入力するのかが難しくて、過去の書類と数字を見返しながらやらないと詳細を覚えていなかったりする。その作業をするのが面倒でずっと先送りしていた。本気出してやれば1-2時間もあれば完了した。なんやらかんやらで eltax も e-tax の電子申告も自分でできるようになった。できることが増えていくことそのものが楽しい。
今回の法人決算で申告・申請したのは次の3つ。
e-tax の画面は基本的に帳票そのものなので数値を入力した後で紙に印刷することで帳票を保管することもできる。例えば、法人税・地方法人税の申告に必要な帳票がこれらになる。過去2年は手書きで作成していたけど、ほぼ同じの内容を画面で作成してデータで送付するだけの違いしかない。紙なら2時間で終えられる作業を、(使いにくい) アプリケーションの画面で入力すると余分に数時間かかってしまうものの、システムだと差し引きや合計値の計算は自動でやってくれるので記入ミスは起こりにくい。とはいえ、システムの自動計算が間違っていることもあるので強制入力が必要になるときもある。
税務署へ電話で問い合わせたときに財務諸表を pdf 添付でよいと話していたけど、いざやろうとしたら財務諸表は xml または xbrl 形式でないとダメだと説明が出てきた。仕方ないので月曜日に税務署へ行って紙で提出してくる。電子申告と紙を組み合わせて法人決算やることは構わないとのこと。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前160cmで、ストレッチ後162cmだった。先週とほぼ変わらないので現状維持といったところ。右腰に張りがあって今週は椅子に座って後ろに寄りかかっていてもやや右腰が張るなぁと自覚症状もあった。ストレッチを受けていても効くなぁって感じだった。新しいトレーナーさんに代わってから1ヶ月のストレッチを受けてだいぶ打ち解けた感はある。&lt;/p>
&lt;h2 id="法人決算をほぼ完了">法人決算をほぼ完了&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0524/#消費税と地方消費税の申告">法人決算の e-tax 申請&lt;/a> の続き。前に消費税の申告をしたときに別表五以外はすべて作成していた。別表五はどこに何の数字を入力するのかが難しくて、過去の書類と数字を見返しながらやらないと詳細を覚えていなかったりする。その作業をするのが面倒でずっと先送りしていた。本気出してやれば1-2時間もあれば完了した。なんやらかんやらで eltax も e-tax の電子申告も自分でできるようになった。できることが増えていくことそのものが楽しい。&lt;/p>
&lt;p>今回の法人決算で申告・申請したのは次の3つ。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0528_e-tax-list1.png"/>
&lt;/figure>
&lt;p>e-tax の画面は基本的に帳票そのものなので数値を入力した後で紙に印刷することで帳票を保管することもできる。例えば、法人税・地方法人税の申告に必要な帳票がこれらになる。過去2年は手書きで作成していたけど、ほぼ同じの内容を画面で作成してデータで送付するだけの違いしかない。紙なら2時間で終えられる作業を、(使いにくい) アプリケーションの画面で入力すると余分に数時間かかってしまうものの、システムだと差し引きや合計値の計算は自動でやってくれるので記入ミスは起こりにくい。とはいえ、システムの自動計算が間違っていることもあるので強制入力が必要になるときもある。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0528_e-tax-list2.png"/>
&lt;/figure>
&lt;p>税務署へ電話で問い合わせたときに財務諸表を pdf 添付でよいと話していたけど、いざやろうとしたら財務諸表は xml または xbrl 形式でないとダメだと説明が出てきた。仕方ないので月曜日に税務署へ行って紙で提出してくる。電子申告と紙を組み合わせて法人決算やることは構わないとのこと。&lt;/p></content></item><item><title>法人として消費税を納めた</title><link>/diary/posts/2022/0524/</link><pubDate>Tue, 24 May 2022 01:14:51 +0900</pubDate><guid>/diary/posts/2022/0524/</guid><description>5時に寝て7時過ぎに起きた。前日の夜から法人決算の電子申告に取り組み始めた。本当は紙でやるつもりだったんだけど、eltax が快適だったので e-tax も衝動的にやってみたくなった。
消費税と地方消費税の申告 法人決算 の一部。今回が初めての消費税と地方消費税の申告になる。簡易課税で支払う。
消費税は、国税（国に納付する税金）であり消費税の納税義務がある事業者が納付します。地方消費税とは、 消費税と同様で商品の販売やサービスの提供などの取引にかかる税金 です。消費税との違いは、 地方消費税は国税ではなく地方税（都道府県や市町村に納付する税金）という点です。 しかし実際に納付するときは消費税と分けて納付はせずに、 消費税と一緒に地方消費税を所管税務署へ納付します。
消費税と地方消費税の違いは？納付対象者や納付方法、計算の仕方まで徹底解説！
freee で出力した書類をみながら e-tax の画面で同じ書類の項目を埋めていくだけの作業。1つだけバリデーションエラーが発生して、何度やり直しても数値は正しいようにみえるので無視して処理を継続することにした。メッセージにも値が正しければ継続してくださいと書いてあるのでバリデーションがバグっているのだろうと推測する。書類を作成して、署名して、送信して、納付情報が返ってきて、pay-easy で納付額を振り込む。1時間ほどで完了できた。
eks (k8s) から alb の管理 eks (k8s) に aws-load-balancer-controller をインストールすると k8s 上のリソースとして alb を管理できるようになる。
AWS Load Balancer Controller アドオンのインストール 具体的には k8s の Ingress と Nodepoint リソースから次の3つのリソースを生成してくれる。
application load balancer http listener target groups alb からのヘルスチェックは次のようにエンドポイントを記述する。spring boot だと Actuator という web api がヘルスチェックの機能を提供している。
alb.ingress.kubernetes.io/healthcheck-path: /actuator/health alb.ingress.kubernetes.io/scheme の設定で alb を配置するサブネットを指定できる。デフォルトは internal になる。
private subnet に配置するとき</description><content>&lt;p>5時に寝て7時過ぎに起きた。前日の夜から法人決算の電子申告に取り組み始めた。本当は紙でやるつもりだったんだけど、eltax が快適だったので e-tax も衝動的にやってみたくなった。&lt;/p>
&lt;h2 id="消費税と地方消費税の申告">消費税と地方消費税の申告&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0505/#法人決算">法人決算&lt;/a> の一部。今回が初めての消費税と地方消費税の申告になる。簡易課税で支払う。&lt;/p>
&lt;blockquote>
&lt;p>消費税は、国税（国に納付する税金）であり消費税の納税義務がある事業者が納付します。地方消費税とは、 &lt;strong>消費税と同様で商品の販売やサービスの提供などの取引にかかる税金&lt;/strong> です。消費税との違いは、 &lt;strong>地方消費税は国税ではなく地方税（都道府県や市町村に納付する税金）という点です。&lt;/strong> しかし実際に納付するときは消費税と分けて納付はせずに、 &lt;strong>消費税と一緒に地方消費税を所管税務署へ納付します。&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://biz.moneyforward.com/tax_return/basic/70/#i">消費税と地方消費税の違いは？納付対象者や納付方法、計算の仕方まで徹底解説！&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>freee で出力した書類をみながら e-tax の画面で同じ書類の項目を埋めていくだけの作業。1つだけバリデーションエラーが発生して、何度やり直しても数値は正しいようにみえるので無視して処理を継続することにした。メッセージにも値が正しければ継続してくださいと書いてあるのでバリデーションがバグっているのだろうと推測する。書類を作成して、署名して、送信して、納付情報が返ってきて、pay-easy で納付額を振り込む。1時間ほどで完了できた。&lt;/p>
&lt;h2 id="eks-k8s-から-alb-の管理">eks (k8s) から alb の管理&lt;/h2>
&lt;p>eks (k8s) に aws-load-balancer-controller をインストールすると k8s 上のリソースとして alb を管理できるようになる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.aws.amazon.com/ja_jp/eks/latest/userguide/aws-load-balancer-controller.html">AWS Load Balancer Controller アドオンのインストール&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>具体的には k8s の Ingress と Nodepoint リソースから次の3つのリソースを生成してくれる。&lt;/p>
&lt;ul>
&lt;li>application load balancer&lt;/li>
&lt;li>http listener&lt;/li>
&lt;li>target groups&lt;/li>
&lt;/ul>
&lt;p>alb からのヘルスチェックは次のようにエンドポイントを記述する。spring boot だと &lt;a href="https://docs.spring.io/spring-boot/docs/current/actuator-api/htmlsingle/">Actuator&lt;/a> という web api がヘルスチェックの機能を提供している。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">alb.ingress.kubernetes.io/healthcheck-path&lt;/span>: &lt;span style="color:#ae81ff">/actuator/health&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>alb.ingress.kubernetes.io/scheme&lt;/code> の設定で alb を配置するサブネットを指定できる。デフォルトは &lt;code>internal&lt;/code> になる。&lt;/p>
&lt;p>private subnet に配置するとき&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">alb.ingress.kubernetes.io/scheme&lt;/span>: &lt;span style="color:#ae81ff">internal&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>public subnet に配置するとき&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">alb.ingress.kubernetes.io/scheme&lt;/span>: &lt;span style="color:#ae81ff">internet-facing&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>発表ビデオ提出</title><link>/diary/posts/2022/0522/</link><pubDate>Sun, 22 May 2022 10:48:35 +0900</pubDate><guid>/diary/posts/2022/0522/</guid><description>1時に寝て8時に起きた。疲れてだらだらしてた。
ビデオセッションの撮影 Widnows マシンで撮るか、Ubuntu で撮るかを迷ったあげく、Kazam Screencaster というツールを使って Ubuntu で撮ることにした。google docs のスライドをプレゼンター表示にして、メニューから全画面モードを選択すれば、プレゼン資料のノートをみながらフルスクリーンで画面に表示できる。そのフルスクリーン画面を kazam でキャプチャーする。kazam はシンプルなツールなので私の要件にも合致していてよかった。うちのシェアオフィスは壁が薄いので話し声などが隣に聞こえてしまう。発表のビデオ撮影をしていると、お隣さんからするとうるさくて迷惑をかけてしまうのでお隣さんが帰るのを待っていたら19時ぐらいになってしまった。19時から撮影を始めて内容を手直ししたり、失敗したりしながら3回ぐらい撮り直しをして完成させた。ビデオ撮影を1度やったので次にやるときはもっと要領よくできそうな気がする。ビデオ登壇は準備が楽そうだというのがわかってきたので今後も挑戦してみたい。
小規模企業共済と住民税 住民税は原則として原則として所属している会社が給与天引きで徴収して納めないといけない。これを特別徴収と呼ぶ。住民税の区切りは6月始まりなので、年に1回、5月に翌年の社員の住民税の通知が会社宛に届く。その通知には毎月徴収する住民税の金額が書いてある。2021年度は小規模企業共済による所得減額 が48万円ある。所得税も減るし住民税も減る。昨年から総所得金額は変わっていないので小規模企業共済の掛け金によって所得金額が少なくなっている。おそらくその分で37,300円の住民税が安くなった。現状は4万円/月で運用しているが、将来的に余裕ができてくれば掛け金を増やしてもいいのかもしれない。</description><content>&lt;p>1時に寝て8時に起きた。疲れてだらだらしてた。&lt;/p>
&lt;h2 id="ビデオセッションの撮影">ビデオセッションの撮影&lt;/h2>
&lt;p>Widnows マシンで撮るか、Ubuntu で撮るかを迷ったあげく、&lt;a href="https://launchpad.net/kazam">Kazam Screencaster&lt;/a> というツールを使って Ubuntu で撮ることにした。google docs のスライドをプレゼンター表示にして、メニューから全画面モードを選択すれば、プレゼン資料のノートをみながらフルスクリーンで画面に表示できる。そのフルスクリーン画面を kazam でキャプチャーする。kazam はシンプルなツールなので私の要件にも合致していてよかった。うちのシェアオフィスは壁が薄いので話し声などが隣に聞こえてしまう。発表のビデオ撮影をしていると、お隣さんからするとうるさくて迷惑をかけてしまうのでお隣さんが帰るのを待っていたら19時ぐらいになってしまった。19時から撮影を始めて内容を手直ししたり、失敗したりしながら3回ぐらい撮り直しをして完成させた。ビデオ撮影を1度やったので次にやるときはもっと要領よくできそうな気がする。ビデオ登壇は準備が楽そうだというのがわかってきたので今後も挑戦してみたい。&lt;/p>
&lt;h2 id="小規模企業共済と住民税">小規模企業共済と住民税&lt;/h2>
&lt;p>住民税は原則として原則として所属している会社が給与天引きで徴収して納めないといけない。これを特別徴収と呼ぶ。住民税の区切りは6月始まりなので、年に1回、5月に翌年の社員の住民税の通知が会社宛に届く。その通知には毎月徴収する住民税の金額が書いてある。&lt;a href="/diary/diary/posts/2022/0206/#2021年度の個人の確定申告">2021年度は小規模企業共済による所得減額&lt;/a> が48万円ある。所得税も減るし住民税も減る。昨年から総所得金額は変わっていないので小規模企業共済の掛け金によって所得金額が少なくなっている。おそらくその分で37,300円の住民税が安くなった。現状は4万円/月で運用しているが、将来的に余裕ができてくれば掛け金を増やしてもいいのかもしれない。&lt;/p></content></item><item><title>他社のお仕事半分、自社のお仕事半分</title><link>/diary/posts/2022/0520/</link><pubDate>Fri, 20 May 2022 15:23:55 +0900</pubDate><guid>/diary/posts/2022/0520/</guid><description>なんか22時ぐらいから寝たり起きたりを繰り返して7時に起きた。午前中はお手伝い先のドキュメント作成やレビューを行い、午後から自社の事務手続きなどをしていた。
法人決算の手続き 決算そのものはすでに完了しているのだけど、申告手続きをまだ終えていない。本気を出せば1日で終わるのがわかっているのでだらだら先延ばししていた。今回は地方自治体への納税手続きを eltax でやってみることに決めていた。先延ばしにしていた理由の1つとして eltax が土日祝は運用していない。平日は24時まで運用しているので、平日にお仕事を終えてからやればいいのだけど、なんか気乗りしなくて先送りしていた。神戸市に対して法人市民税を、兵庫県に対して法人県民税、法人事業税、特別法人事業税の申告を行う。eltax の画面は実際の書類様式とまったく同じ画面で入力するため、書類作成を知っている人には何も難しくない。前回の書類をみながら必要な入力欄に今回の値を入力していくだけの作業。作成後にプリンターで印刷すれば書類も手に入る。今回の納税手続きは eltax で初めて触る画面を操作したのだけど、2時間もあれば2つの申告手続きを終えられた。1度誤った内容で申告したので再申告もした。後優先になってくれることを願う。言うても簡単ではある。昨年まではこれらの申告のために電車で3駅離れた庁舎へ出向いていたが、今後はそうする必要はなさそうだ。一方で申告手続きを含めてもオフィスからの庁舎の往復に2時間もかからないのも事実ではあるが。
jjug の発表資料作り Ševarika™ というデザイナーさんに スライドマスターの作成 を4月30日に依頼して5月19日に納品された。納期は1ヶ月程度を見込んでいたのに早く仕上げてくれた。こちらから急かしたわけではない。ちょうど JJUG CCC 2022 Spring の発表ビデオの提出期限が5月19日で間に合えばいいなぁぐらいの感覚で静観していて、ちょうど同じ時期に納品できそうだったので、jjug のスタッフさんに発表ビデオの提出期限を週末まで待ってもらうようにお願いしていた。私は自社のロゴをめちゃくちゃ気に入っているんだけど、同じデザイナーさんに作ってもらったスライドマスターのデザインもやはりめちゃくちゃ気に入っている。今後うちの会社が儲かってお金に余裕ができたら Ševarika™ さんにもっと色んなものをデザインしてもらおうと思うようになった。いつになるかはわからんが。
発表のコンテンツのアウトラインは八割ほどは事前に作っていた。新しいスライドデザインに配置したり、レイアウトを調整したり、デザインとのバランスを考えたりすることに主に時間を費やした。20時ぐらいから始めて2時ぐらいまでやっていた。ここ1-2週間、19時以降にオフィスで居残り作業みたいなことをやってなくて、なんかだらだらしていた。コンテキストスイッチを切り替えてやるぞとなったら集中して6時間ほど作業できた。それで気付いたんだけど、私は毎日大量のお仕事をすることがあまり得意ではない。平均ぐらいに毎日コツコツ積み重ねるのはできるけど、それ以上のパフォーマンスを出す爆発力にはメリハリがいる。いまは構想1ヶ月、実装2日みたいな作業のやり方になる。そのうちの2日は18時間/日ぐらい没頭しているみたいな。昔からそうだったのか、加齢で体力が落ちたせいかわからないけど、メリハリのある働き方が自分には向いていることを再認識した。</description><content>&lt;p>なんか22時ぐらいから寝たり起きたりを繰り返して7時に起きた。午前中はお手伝い先のドキュメント作成やレビューを行い、午後から自社の事務手続きなどをしていた。&lt;/p>
&lt;h2 id="法人決算の手続き">法人決算の手続き&lt;/h2>
&lt;p>決算そのものはすでに完了しているのだけど、申告手続きをまだ終えていない。本気を出せば1日で終わるのがわかっているのでだらだら先延ばししていた。今回は地方自治体への納税手続きを &lt;a href="https://www.eltax.lta.go.jp/">eltax&lt;/a> でやってみることに決めていた。先延ばしにしていた理由の1つとして eltax が土日祝は運用していない。平日は24時まで運用しているので、平日にお仕事を終えてからやればいいのだけど、なんか気乗りしなくて先送りしていた。神戸市に対して法人市民税を、兵庫県に対して法人県民税、法人事業税、特別法人事業税の申告を行う。eltax の画面は実際の書類様式とまったく同じ画面で入力するため、書類作成を知っている人には何も難しくない。前回の書類をみながら必要な入力欄に今回の値を入力していくだけの作業。作成後にプリンターで印刷すれば書類も手に入る。今回の納税手続きは eltax で初めて触る画面を操作したのだけど、2時間もあれば2つの申告手続きを終えられた。1度誤った内容で申告したので再申告もした。後優先になってくれることを願う。言うても簡単ではある。昨年まではこれらの申告のために電車で3駅離れた庁舎へ出向いていたが、今後はそうする必要はなさそうだ。一方で申告手続きを含めてもオフィスからの庁舎の往復に2時間もかからないのも事実ではあるが。&lt;/p>
&lt;h2 id="jjug-の発表資料作り">jjug の発表資料作り&lt;/h2>
&lt;p>&lt;a href="https://99designs.jp/profiles/dsevarika">Ševarika™&lt;/a> というデザイナーさんに &lt;a href="/diary/diary/posts/2022/0509/#スライドマスターのデザイン作成">スライドマスターの作成&lt;/a> を4月30日に依頼して5月19日に納品された。納期は1ヶ月程度を見込んでいたのに早く仕上げてくれた。こちらから急かしたわけではない。ちょうど &lt;a href="/diary/diary/posts/2022/0402/#jjug-ccc-2022-spring-の-cfp-応募">JJUG CCC 2022 Spring&lt;/a> の発表ビデオの提出期限が5月19日で間に合えばいいなぁぐらいの感覚で静観していて、ちょうど同じ時期に納品できそうだったので、jjug のスタッフさんに発表ビデオの提出期限を週末まで待ってもらうようにお願いしていた。私は自社のロゴをめちゃくちゃ気に入っているんだけど、同じデザイナーさんに作ってもらったスライドマスターのデザインもやはりめちゃくちゃ気に入っている。今後うちの会社が儲かってお金に余裕ができたら Ševarika™ さんにもっと色んなものをデザインしてもらおうと思うようになった。いつになるかはわからんが。&lt;/p>
&lt;p>発表のコンテンツのアウトラインは八割ほどは事前に作っていた。新しいスライドデザインに配置したり、レイアウトを調整したり、デザインとのバランスを考えたりすることに主に時間を費やした。20時ぐらいから始めて2時ぐらいまでやっていた。ここ1-2週間、19時以降にオフィスで居残り作業みたいなことをやってなくて、なんかだらだらしていた。コンテキストスイッチを切り替えてやるぞとなったら集中して6時間ほど作業できた。それで気付いたんだけど、私は毎日大量のお仕事をすることがあまり得意ではない。平均ぐらいに毎日コツコツ積み重ねるのはできるけど、それ以上のパフォーマンスを出す爆発力にはメリハリがいる。いまは構想1ヶ月、実装2日みたいな作業のやり方になる。そのうちの2日は18時間/日ぐらい没頭しているみたいな。昔からそうだったのか、加齢で体力が落ちたせいかわからないけど、メリハリのある働き方が自分には向いていることを再認識した。&lt;/p></content></item><item><title>法人決算の続き</title><link>/diary/posts/2022/0508/</link><pubDate>Sun, 08 May 2022 21:12:43 +0900</pubDate><guid>/diary/posts/2022/0508/</guid><description>0時に寝て5時半に起きた。実家にいると、親が5時ぐらいから起き始めるのでつられて早めに起きている。親が8時からアルバイトなのでそのタイミングでバス停に送ってもらって9時半には戻ってきた。
消費税申告書と欠損金の還付請求書の作成 先日から 法人決算に着手 していた。
まずは消費税の申告書と未払い消費税の振替伝票の起票をしていた。初めての会計処理でいろいろ調べてた。No.6610 法人に係る消費税の確定申告書の提出期限について によると、消費税の申告期限も法人決算と同様、課税期間 (事業年度) の終了の日から2ヶ月以内に行う必要がある。厳密には消費税にも2種類あって国税と地方税にわけられる。地方消費税は国税ではなく地方税であるため、本来は都道府県に納税すべきものではあるが、手続きの利便性のため？なのか、国税と一緒に所管税務署へ納付するのでよいらしい。
消費税とは？地方消費税とは？ つぎに前期は赤字なので前々期に支払った法人税と地方法人税の一部を還付してもらう。前々期の所得と支払った法人税、前期の欠損金 (マイナスの所得に対する法人税法上の用語) の3つの数字があれば算出できる。計算してみたら支払った法人税のうち26.4%を還付できることがわかった。算出後に請求書をダウンロードして書類に数字を記入した。
ストレッチ いつもは土曜日の10時に通っているが、実家に帰っていたので予定変更。今日から新しいトレーナーさんに師事することになる。今日の開脚幅は開始前160cmで、ストレッチ後162cmだった。昨日、草刈りをして筋肉痛になっていたのでそんなもんかな。腕と腰に張りがあった。新しいトレーナーさんも初めてなのでまずはどこの筋が張っていて、どこの関節が詰まっているかを確認しながら進めていくといった感じだった。話しを聞いていたら、新しいトレーナーさんも前のトレーナーさん同様、筋トレをしていて、週3日ぐらいはやっているらしい。やっぱりトレーナー業をする人は筋トレに興味をもつ人が多いのかもしれない。</description><content>&lt;p>0時に寝て5時半に起きた。実家にいると、親が5時ぐらいから起き始めるのでつられて早めに起きている。親が8時からアルバイトなのでそのタイミングでバス停に送ってもらって9時半には戻ってきた。&lt;/p>
&lt;h2 id="消費税申告書と欠損金の還付請求書の作成">消費税申告書と欠損金の還付請求書の作成&lt;/h2>
&lt;p>先日から &lt;a href="/diary/diary/posts/2022/0505/#法人決算">法人決算に着手&lt;/a> していた。&lt;/p>
&lt;p>まずは消費税の申告書と未払い消費税の振替伝票の起票をしていた。初めての会計処理でいろいろ調べてた。&lt;a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/shohi/6610.htm">No.6610 法人に係る消費税の確定申告書の提出期限について&lt;/a> によると、消費税の申告期限も法人決算と同様、課税期間 (事業年度) の終了の日から2ヶ月以内に行う必要がある。厳密には消費税にも2種類あって国税と地方税にわけられる。地方消費税は国税ではなく地方税であるため、本来は都道府県に納税すべきものではあるが、手続きの利便性のため？なのか、国税と一緒に所管税務署へ納付するのでよいらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://biz.moneyforward.com/tax_return/basic/70/#i">消費税とは？地方消費税とは？&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>つぎに前期は赤字なので前々期に支払った法人税と地方法人税の一部を還付してもらう。前々期の所得と支払った法人税、前期の欠損金 (マイナスの所得に対する法人税法上の用語) の3つの数字があれば算出できる。計算してみたら支払った法人税のうち26.4%を還付できることがわかった。算出後に請求書をダウンロードして書類に数字を記入した。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>いつもは土曜日の10時に通っているが、実家に帰っていたので予定変更。今日から新しいトレーナーさんに師事することになる。今日の開脚幅は開始前160cmで、ストレッチ後162cmだった。昨日、草刈りをして筋肉痛になっていたのでそんなもんかな。腕と腰に張りがあった。新しいトレーナーさんも初めてなのでまずはどこの筋が張っていて、どこの関節が詰まっているかを確認しながら進めていくといった感じだった。話しを聞いていたら、新しいトレーナーさんも前のトレーナーさん同様、筋トレをしていて、週3日ぐらいはやっているらしい。やっぱりトレーナー業をする人は筋トレに興味をもつ人が多いのかもしれない。&lt;/p></content></item><item><title>法人決算に着手</title><link>/diary/posts/2022/0505/</link><pubDate>Thu, 05 May 2022 17:39:28 +0900</pubDate><guid>/diary/posts/2022/0505/</guid><description>夜眠れなくてだらだらして朝もだらだらしてからお昼前ぐらいにオフィスに行った。
法人決算 ようやく着手した。今日のところは前期の所得を求めて各種法人税の算出をした。所得を算出し終えて初めて決算書を作成できる。と言っても、前期は当社初の赤字となった。そのため、均等割以外の法人税はすべてゼロになる。法人県民税と法人市民税の均等割を合計すると7万2千円を納める必要がある。この税金は会社が赤字であろうと必ず支払う必要がある。他の法人税、地方法人税、法人事業税、特別法人事業税、法人県民税と法人市民税の法人税割は所得に対して税率を課すものなので赤字 = 所得がマイナスならゼロになる。ないに越したことはないけど、今後も赤字決算はあるかもしれないので今回は赤字決算のときの税制や会計処理について学ぶ機会となる。その1つとして前々期に納めた法人税を還付する仕組みがある。
No.5763 欠損金の繰戻しによる還付 あと赤字でも支払う必要のある税金として消費税がある。これも3期目から支払う必要があるため、今回が初めてとなる。算はすべて会計システムがやってくれるので私がやることは書類を作ったり、実際の手続きをするだけだとは思う。ちなみにうちは簡易課税で消費税を支払う。その方が節税になることは インボイス制度を調べていた ときにも書いた。</description><content>&lt;p>夜眠れなくてだらだらして朝もだらだらしてからお昼前ぐらいにオフィスに行った。&lt;/p>
&lt;h2 id="法人決算">法人決算&lt;/h2>
&lt;p>ようやく着手した。今日のところは前期の所得を求めて各種法人税の算出をした。所得を算出し終えて初めて決算書を作成できる。と言っても、前期は当社初の赤字となった。そのため、均等割以外の法人税はすべてゼロになる。法人県民税と法人市民税の均等割を合計すると7万2千円を納める必要がある。この税金は会社が赤字であろうと必ず支払う必要がある。他の法人税、地方法人税、法人事業税、特別法人事業税、法人県民税と法人市民税の法人税割は所得に対して税率を課すものなので赤字 = 所得がマイナスならゼロになる。ないに越したことはないけど、今後も赤字決算はあるかもしれないので今回は赤字決算のときの税制や会計処理について学ぶ機会となる。その1つとして前々期に納めた法人税を還付する仕組みがある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/hojin/5763.htm">No.5763 欠損金の繰戻しによる還付&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>あと赤字でも支払う必要のある税金として消費税がある。これも3期目から支払う必要があるため、今回が初めてとなる。算はすべて会計システムがやってくれるので私がやることは書類を作ったり、実際の手続きをするだけだとは思う。ちなみにうちは簡易課税で消費税を支払う。その方が節税になることは &lt;a href="/diary/diary/posts/2021/1001/#インボイス制度の準備">インボイス制度を調べていた&lt;/a> ときにも書いた。&lt;/p></content></item><item><title>2021年度の確定申告</title><link>/diary/posts/2022/0220/</link><pubDate>Sun, 20 Feb 2022 09:48:18 +0900</pubDate><guid>/diary/posts/2022/0220/</guid><description>0時に寝て6時に起きた。
確定申告 本当は9時から受け付けなんだけど、昨年早めに行ったら受け付けしてくれたので今年も8時半ぐらいから出掛けていった。家から徒歩5分のところに特設の申告会場があって、行ったらすでに100人ぐらいは並んでいた。整理券を配るために行列を誘導している係員に「書類は作成済みで提出だけです」と伝えると「どうぞ、こちらへ」と行列をショートカットして、書類の作成会場の横にある提出会場へ案内される。朝一なので誰も提出してなくてすぐに応対してくれた。書類チェックして提出完了。会場についてから提出するまでに5分。あわせて10分もあれば確定申告できる。電子申告してもよいのだけど、寄付金の領収書の電子化が面倒なのでまだ紙で申告している。寄付金の領収書が電子化されて添付できるような手軽さになったら電子申告してもよいかもしれない。
github container action の検証 jib という java アプリケーション向けの docker イメージをビルドするためのツールがある。お仕事で使い始めたので雰囲気を理解するために私もサンプルアプリケーションを jib-sample として作ってみた。簡単に設定して java アプリケーションを docker 化できるので感触はよさそう。基本的に java アプリケーションと docker は相性が悪くて、たぶん go で開発するような用途と比較するとサイズがめちゃくちゃでかい。それでも jib を使うと作成された docker イメージのサイズも自分でビルドして作るよりは小さくしてくれる。さすが google という感じ。
この jib-sample の docker イメージを使って github actions のカスタム container action を作ってみたのが gh-actions-container-sample になる。Creating a Docker container action のドキュメントには Dockerfile を使ったサンプルしか紹介されていないけど、docker イメージを直接参照して利用することもできる。
検証作業をしているときに jib-sample リポジトリの github packages が private 設定になっていることに気付かなくて少しはまった。リポジトリの visibility 設定と github packages の visibility 設定は連動していないのでそれぞれで別に管理しないといけない。
また jib で作った docker イメージはデフォルトでは manifest を作ってくれない。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="確定申告">確定申告&lt;/h2>
&lt;p>本当は9時から受け付けなんだけど、昨年早めに行ったら受け付けしてくれたので今年も8時半ぐらいから出掛けていった。家から徒歩5分のところに特設の申告会場があって、行ったらすでに100人ぐらいは並んでいた。整理券を配るために行列を誘導している係員に「書類は作成済みで提出だけです」と伝えると「どうぞ、こちらへ」と行列をショートカットして、書類の作成会場の横にある提出会場へ案内される。朝一なので誰も提出してなくてすぐに応対してくれた。書類チェックして提出完了。会場についてから提出するまでに5分。あわせて10分もあれば確定申告できる。電子申告してもよいのだけど、寄付金の領収書の電子化が面倒なのでまだ紙で申告している。寄付金の領収書が電子化されて添付できるような手軽さになったら電子申告してもよいかもしれない。&lt;/p>
&lt;h2 id="github-container-action-の検証">github container action の検証&lt;/h2>
&lt;p>&lt;a href="https://github.com/GoogleContainerTools/jib">jib&lt;/a> という java アプリケーション向けの docker イメージをビルドするためのツールがある。お仕事で使い始めたので雰囲気を理解するために私もサンプルアプリケーションを &lt;a href="https://github.com/t2y/jib-sample">jib-sample&lt;/a> として作ってみた。簡単に設定して java アプリケーションを docker 化できるので感触はよさそう。基本的に java アプリケーションと docker は相性が悪くて、たぶん go で開発するような用途と比較するとサイズがめちゃくちゃでかい。それでも jib を使うと作成された docker イメージのサイズも自分でビルドして作るよりは小さくしてくれる。さすが google という感じ。&lt;/p>
&lt;p>この jib-sample の docker イメージを使って github actions のカスタム container action を作ってみたのが &lt;a href="https://github.com/t2y/gh-actions-container-sample">gh-actions-container-sample&lt;/a> になる。&lt;a href="https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action">Creating a Docker container action&lt;/a> のドキュメントには Dockerfile を使ったサンプルしか紹介されていないけど、docker イメージを直接参照して利用することもできる。&lt;/p>
&lt;p>検証作業をしているときに jib-sample リポジトリの github packages が private 設定になっていることに気付かなくて少しはまった。リポジトリの visibility 設定と github packages の visibility 設定は連動していないのでそれぞれで別に管理しないといけない。&lt;/p>
&lt;p>また jib で作った docker イメージはデフォルトでは manifest を作ってくれない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker manifest inspect --verbose ghcr.io/t2y/jib-sample:latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>no such manifest: ghcr.io/t2y/jib-sample:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/GoogleContainerTools/jib/blob/master/docs/faq.md#how-do-i-specify-a-platform-in-the-manifest-list-or-oci-index-of-a-base-image">How do I specify a platform in the manifest list (or OCI index) of a base image?&lt;/a> のドキュメントによると、manifest に platform 情報を追加するのは incubating feature らしくて、なんか条件付きで設定すれば使えそうにもみえたんだけど、私がやってみた感じだとうまくいかなかった。また必要ならもう一度調べてみる。&lt;/p></content></item><item><title>確定申告書類の印刷</title><link>/diary/posts/2022/0207/</link><pubDate>Mon, 07 Feb 2022 09:04:45 +0900</pubDate><guid>/diary/posts/2022/0207/</guid><description>1時に寝て7時に起きた。
確定申告書類の印刷 最近は遅くても8時、速かったら7時過ぎからお仕事している。ちょうど仕事の谷間で手持ちのタスクを終えてしまっていて、今日から別のタスクに着手する予定が、昨日から障害が発生していたらしく、朝忙しそうだったから11時まで確定申告の作業をしていた。昨日、データ入力は終えていたので総勘定元帳をみながら変な数字になっていないかをチェックしたり、源泉徴収税の還付金の計算があうかどうかを検算したりしていた。あとすでに廃棄した固定資産が残っていることに気付いた。耐用年数が過ぎた固定資産の価値は1円として管理される。これを備忘価格と呼ぶらしい。除却の手続きもした。ついでに 固定資産売却益（損）とは の会計手続きも調べたりしていた。
オフィスのプリンタで一通り書類を印刷した。あとは提出するだけ。昨年から住んでいるところの徒歩圏内に申告できる場所ができて、散歩のついでに確定申告する程度の手間しかかからない。このまま電子申告してもよいのだけど、寄付金控除のための領収書を写真か PDF ファイルなどで取り込む必要があって、それだけ面倒なので放置している。このまま今年も紙で提出してくるかなぁ。
業務システムの開発 twitter のタイムラインで業務システムの開発者は「業務系エンジニア」と呼ぶとか言っている人をみかけた。そっか、私は web エンジニアから業務系エンジニアになったんだー、web アプリケーション開発しているけどな、とか思いながら、今週からいよいよお手伝い先の業務システムの開発に着手する。いままでインフラやサーバーサイドのシステム寄りの保守や機能開発のみをしていた。さっそく DB スキーマの定義やドキュメントの書き方、作業の進め方などを確認していた。ひとまず1週間のスプリントで終えられそうなタスクなのでがんばってやりたい。</description><content>&lt;p>1時に寝て7時に起きた。&lt;/p>
&lt;h2 id="確定申告書類の印刷">確定申告書類の印刷&lt;/h2>
&lt;p>最近は遅くても8時、速かったら7時過ぎからお仕事している。ちょうど仕事の谷間で手持ちのタスクを終えてしまっていて、今日から別のタスクに着手する予定が、昨日から障害が発生していたらしく、朝忙しそうだったから11時まで確定申告の作業をしていた。昨日、データ入力は終えていたので総勘定元帳をみながら変な数字になっていないかをチェックしたり、源泉徴収税の還付金の計算があうかどうかを検算したりしていた。あとすでに廃棄した固定資産が残っていることに気付いた。耐用年数が過ぎた固定資産の価値は1円として管理される。これを備忘価格と呼ぶらしい。除却の手続きもした。ついでに &lt;a href="https://advisors-freee.jp/article/category/cat-big-03/cat-small-06/12956/">固定資産売却益（損）とは&lt;/a> の会計手続きも調べたりしていた。&lt;/p>
&lt;p>オフィスのプリンタで一通り書類を印刷した。あとは提出するだけ。昨年から住んでいるところの徒歩圏内に申告できる場所ができて、散歩のついでに確定申告する程度の手間しかかからない。このまま電子申告してもよいのだけど、寄付金控除のための領収書を写真か PDF ファイルなどで取り込む必要があって、それだけ面倒なので放置している。このまま今年も紙で提出してくるかなぁ。&lt;/p>
&lt;h2 id="業務システムの開発">業務システムの開発&lt;/h2>
&lt;p>twitter のタイムラインで業務システムの開発者は「業務系エンジニア」と呼ぶとか言っている人をみかけた。そっか、私は web エンジニアから業務系エンジニアになったんだー、web アプリケーション開発しているけどな、とか思いながら、今週からいよいよお手伝い先の業務システムの開発に着手する。いままでインフラやサーバーサイドのシステム寄りの保守や機能開発のみをしていた。さっそく DB スキーマの定義やドキュメントの書き方、作業の進め方などを確認していた。ひとまず1週間のスプリントで終えられそうなタスクなのでがんばってやりたい。&lt;/p></content></item><item><title>確定申告の準備</title><link>/diary/posts/2022/0206/</link><pubDate>Sun, 06 Feb 2022 10:06:06 +0900</pubDate><guid>/diary/posts/2022/0206/</guid><description>1時に寝て8時に起きた。朝から洗濯と掃除をしてた。姪の大学進学で下宿先を探しに来ると姉が言うからなんか手伝う必要あるのかなと午後は時間をあけてたけど、そうでもなかった。
2021年度の個人の確定申告 夕方から確定申告の作業を始めた。毎年 freee で1ヶ月だけ契約して確定申告の書類を作っている。データ入力の作業は次の2つだけ。
印税の源泉徴収税の明細作成 寄付金の明細作成 書籍の印税収入が定期的に振り込まれる。印税収入は源泉徴収済みとなる。銀行 (出版社) からの明細取り込みに対して、印税と源泉徴収税の明細に分割する必要がある。今年は3社から印税があって、それぞれ数件程度の明細を作成した。クレジットカードで寄付金を支払っているものは明細連携できていないので12ヶ月分の明細を手入力することになる。言うても、それは1団体だけなので12個の明細だけ。会社を作る前は技術書の購入や勉強会の参加費や交通費 (新幹線とか) などにかかった経費なども明細登録していたけど、いまは会社の経費ですべて計上しているので個人で計上するものはなくなった。会社の経費はクレジットカード連携できているし、日々のお仕事で会計処理しているから、確定申告のタイミングでまとめて作業する必要はなくなった。
あと2021年度から 小規模企業共済 に入った。最小1000円/月から最大7万円/月の掛け金を選択する。いくらぐらいが妥当かわからなかったのでひとまず4万円/月で運用している。もちろん掛け金は変更できるが、基本的に20年とか掛け続けるもので、支払った金額は戻ってこないので、あるとき大きなお金が必要となっても融通できない貯金があるみたいものになってしまう。その分のメリットとして、所得控除の対象となる。加入シミュレーション があるので、自分の条件にあわせてやってみるとおもしろい。例えば、納付月数240ヶ月、掛け金7万円/月、課税所得400万円で算出すると24万円/年の節税となる。課税所得が減るので所得税だけでなく住民税も節税となる。</description><content>&lt;p>1時に寝て8時に起きた。朝から洗濯と掃除をしてた。姪の大学進学で下宿先を探しに来ると姉が言うからなんか手伝う必要あるのかなと午後は時間をあけてたけど、そうでもなかった。&lt;/p>
&lt;h2 id="2021年度の個人の確定申告">2021年度の個人の確定申告&lt;/h2>
&lt;p>夕方から確定申告の作業を始めた。毎年 freee で1ヶ月だけ契約して確定申告の書類を作っている。データ入力の作業は次の2つだけ。&lt;/p>
&lt;ul>
&lt;li>印税の源泉徴収税の明細作成&lt;/li>
&lt;li>寄付金の明細作成&lt;/li>
&lt;/ul>
&lt;p>書籍の印税収入が定期的に振り込まれる。印税収入は源泉徴収済みとなる。銀行 (出版社) からの明細取り込みに対して、印税と源泉徴収税の明細に分割する必要がある。今年は3社から印税があって、それぞれ数件程度の明細を作成した。クレジットカードで寄付金を支払っているものは明細連携できていないので12ヶ月分の明細を手入力することになる。言うても、それは1団体だけなので12個の明細だけ。会社を作る前は技術書の購入や勉強会の参加費や交通費 (新幹線とか) などにかかった経費なども明細登録していたけど、いまは会社の経費ですべて計上しているので個人で計上するものはなくなった。会社の経費はクレジットカード連携できているし、日々のお仕事で会計処理しているから、確定申告のタイミングでまとめて作業する必要はなくなった。&lt;/p>
&lt;p>あと2021年度から &lt;a href="https://www.smrj.go.jp/kyosai/skyosai/">小規模企業共済&lt;/a> に入った。最小1000円/月から最大7万円/月の掛け金を選択する。いくらぐらいが妥当かわからなかったのでひとまず4万円/月で運用している。もちろん掛け金は変更できるが、基本的に20年とか掛け続けるもので、支払った金額は戻ってこないので、あるとき大きなお金が必要となっても融通できない貯金があるみたいものになってしまう。その分のメリットとして、所得控除の対象となる。&lt;a href="https://www.smrj.go.jp/kyosai/skyosai/entry/simulation/index.html">加入シミュレーション&lt;/a> があるので、自分の条件にあわせてやってみるとおもしろい。例えば、納付月数240ヶ月、掛け金7万円/月、課税所得400万円で算出すると24万円/年の節税となる。課税所得が減るので所得税だけでなく住民税も節税となる。&lt;/p></content></item><item><title>仕事始め</title><link>/diary/posts/2022/0104/</link><pubDate>Tue, 04 Jan 2022 11:42:00 +0900</pubDate><guid>/diary/posts/2022/0104/</guid><description>3時に寝て6時半に起きて2度寝して7時半に起きた。お正月にだらけたのですぐ起きれなかった。
仕事始め 今日から仕事始め。お昼におにぎりを買いに外を歩いたけど、あまり人気がなかった。14時過ぎに散歩がてら 生田神社 へ初詣に向かったが、なかなかの混雑ぶりで断念した。初詣失敗。普通の休日の3倍ぐらいはいたんじゃないかと思う。神社は学生さんも多いとは思うけど、まだ休み中の人も多いのかもしれない。
償却資産の申告 固定資産税を支払う根拠となる固定資産台帳の内容を申告した。毎年1月1日時点の償却資産を1月31日までに申告する。去年は紙の書類で行った手続きを、今年は eLTAX (ダウンロード版) でオンライン手続きした。神戸市は事前にプレ申告データとして去年の申告データを送ってくれるので、それを再利用して手続きをすると去年時点のデータ入力の手間を省ける。実際に手続きしてみたら紙の書類そのままの画面が表示されて、空き項目を埋めていくだけだった。ほんの10分で入力を完了した。あとはマイナンバーカードを使って電子署名して送信するだけ。送信後、受付のメッセージが返ってくる。なにか不備があれば、データチェックをしているオペレーターから数日以内に電話がかかってくる。かかってこなければ問題ないということ。
関連する話題として、No.5408 中小企業者等の少額減価償却資産の取得価額の損金算入の特例 という制度がある。通常、減価償却対象となる固定資産の基準額は単品で10万円になるが、この中小企業向けの特例を用いると30万円を基準額にできる (合計で300万円まで) 。パソコンなどのデバイスは10万円を超えることも多い。そういった固定資産を複数年で減価償却しなくても取得年度で即時償却できる。具体的にはその事業年度で利益がある場合は経費が増えることになるので法人税や地方法人税 (名前に「地方」という文言が入っているがこれは国税) といった国税の節税となる。
他方で、償却資産に対して固定資産税という地方税がある。償却資産として毎年1月に申告する。これは特例で即時償却した固定資産に対しても適用される。例えば、神戸市では次の FAQ に特例とは関係ないという注意書きがある。償却資産の合計金額が150万円未満のときは免税となる。小さい規模の企業なら免税になりやすい制度にみえる。
※租税特別措置法の規定により中小企業者等の少額資産特例を適用して損金算入した資産については申告の対象となります。
Q.申告の対象にならない資産は、どのようなものがありますか。
国税と地方税の違いを理解していないと調べ方を誤る懸念がある。国税庁のサイトには国税のことしか書いていないし、地方税のことは地方自治体のサイトにしか書いていない。というか、私は国税だけを調べて地方税の扱いを誤解していた。</description><content>&lt;p>3時に寝て6時半に起きて2度寝して7時半に起きた。お正月にだらけたのですぐ起きれなかった。&lt;/p>
&lt;h2 id="仕事始め">仕事始め&lt;/h2>
&lt;p>今日から仕事始め。お昼におにぎりを買いに外を歩いたけど、あまり人気がなかった。14時過ぎに散歩がてら &lt;a href="https://ikutajinja.or.jp/">生田神社&lt;/a> へ初詣に向かったが、なかなかの混雑ぶりで断念した。初詣失敗。普通の休日の3倍ぐらいはいたんじゃないかと思う。神社は学生さんも多いとは思うけど、まだ休み中の人も多いのかもしれない。&lt;/p>
&lt;h2 id="償却資産の申告">償却資産の申告&lt;/h2>
&lt;p>固定資産税を支払う根拠となる固定資産台帳の内容を申告した。毎年1月1日時点の償却資産を1月31日までに申告する。去年は紙の書類で行った手続きを、今年は &lt;a href="https://www.eltax.lta.go.jp/">eLTAX&lt;/a> (ダウンロード版) でオンライン手続きした。神戸市は事前にプレ申告データとして去年の申告データを送ってくれるので、それを再利用して手続きをすると去年時点のデータ入力の手間を省ける。実際に手続きしてみたら紙の書類そのままの画面が表示されて、空き項目を埋めていくだけだった。ほんの10分で入力を完了した。あとはマイナンバーカードを使って電子署名して送信するだけ。送信後、受付のメッセージが返ってくる。なにか不備があれば、データチェックをしているオペレーターから数日以内に電話がかかってくる。かかってこなければ問題ないということ。&lt;/p>
&lt;p>関連する話題として、&lt;a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/hojin/5408.htm">No.5408 中小企業者等の少額減価償却資産の取得価額の損金算入の特例&lt;/a> という制度がある。通常、減価償却対象となる固定資産の基準額は単品で10万円になるが、この中小企業向けの特例を用いると30万円を基準額にできる (合計で300万円まで) 。パソコンなどのデバイスは10万円を超えることも多い。そういった固定資産を複数年で減価償却しなくても取得年度で即時償却できる。具体的にはその事業年度で利益がある場合は経費が増えることになるので法人税や地方法人税 (名前に「地方」という文言が入っているがこれは国税) といった国税の節税となる。&lt;/p>
&lt;p>他方で、償却資産に対して固定資産税という地方税がある。償却資産として毎年1月に申告する。これは特例で即時償却した固定資産に対しても適用される。例えば、神戸市では次の FAQ に特例とは関係ないという注意書きがある。償却資産の合計金額が150万円未満のときは免税となる。小さい規模の企業なら免税になりやすい制度にみえる。&lt;/p>
&lt;blockquote>
&lt;p>※租税特別措置法の規定により中小企業者等の少額資産特例を適用して損金算入した資産については申告の対象となります。&lt;/p>
&lt;p>&lt;a href="https://www.city.kobe.lg.jp/a03858/kurashi/tax/kotei/shokyakushisan/syokyaku_faq.html#midashi93387">Q.申告の対象にならない資産は、どのようなものがありますか。&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>国税と地方税の違いを理解していないと調べ方を誤る懸念がある。国税庁のサイトには国税のことしか書いていないし、地方税のことは地方自治体のサイトにしか書いていない。というか、私は国税だけを調べて地方税の扱いを誤解していた。&lt;/p></content></item><item><title>頭文字Dを読了</title><link>/diary/posts/2021/1205/</link><pubDate>Sun, 05 Dec 2021 11:47:08 +0900</pubDate><guid>/diary/posts/2021/1205/</guid><description>0時に寝て7時に起きてだらだらやってて午前中は 頭文字D のアニメをみてた。漫画 (アニメも？) はすでに完結しているのでいつか読もうと思いつつ最後まで読んでいない。ゴッドフットやゴッドアームが出てくるぐらいまでは読んだ気がする。その後どうなったのかを知らない。イニシャルDをみていると、ストーリーも絵も演出もまったく派手さはなくて普通なんだけど、なぜかおもしろくて続きをみてしまうという人間の娯楽の本質をついている気がしてくる。なんでなんだろうなぁ。
頭文字D たまたま思い出したので夜に漫画喫茶行って頭文字Dを最後まで読んできた。全48巻で、31巻ぐらいから読み始めて3-4時間ぐらいで読み終えた。漫画なので仕方ないけど、対戦相手がどんどん強くなっていって勝ち方が玄人好みというのか、単純に抜いた・抜かれたの話しではなく、タイヤマネージメントがどうこうとか、恐怖に対する心理がどうこうとか、ドライバーと車のセッティングも含めた駆け引きが強くなっていって、どちらが速いかというよりは戦略通りの展開にもっていって最後はそれがうまくはまるみたいな、これまでもずっとそうだったんだけど、ここからはよりトップレベルのほんの僅かな差が勝敗を分けるといった描き方になっていったように思う。それはそれで現実に近い気はするけど、漫画的には派手な演出にならないので玄人好みなストーリーになっていった気がする。但し、そこまでやってきて最後の対戦相手だけは、個人的には納得感がなくて、ここまで緻密に作り上げてきた理論や個々のドライバーの修練の積み重ねが圧倒的天才の前にひれ伏すみたいな切り口が急展開していて、頭の切り替えができなかった感じがした。とはいえ、最後まで読み終えられてよかったし、作品としてはすごくおもしろかった。作者はモータースポーツが本当に好きなんだろうなというのが伝わってくる漫画だと思う。
ふるさと納税 あまり欲しいものもないし、ふるさと納税の行政手続きも一通り理解したから今年はやらなくてもいいかとも思っていた。しかし、paypayボーナスキャンペーン をみてやってみるかという気になった。paypay はいろんなものと連携していて見かけるたびにすごいなと思う。お得だからと必要もないものを買うことはないけど、ふるさと納税はやらなかったとしても、どのみち納税は必要なものなので還元があるということは節税につながるのかな？理屈はよくわからないけど、言いたいことは paypay はすごいという話でした。
dapr の api トークンを使った認証 Enable API token authentication in Dapr を一通り読んだ。内容はとくに難しくなく、こんな風に dapr の manifest を書けば JWT トークンを設定できますということを書いてある。私はずっとサーバーサイドばっかりやってきたからフロントエンドで使われる技術や仕組みに弱い。JWT トークンもその1つで、自分でちゃんと実装したことがないからちゃんとよく分かってない。これが OAuth2 なら provider を実装したこともあるからその仕組みも意図も理解できる。一度どこかで自分で JWT も実装してみないといけないのだろうな。
少し前にお仕事で kubernetes の secret の移行作業をやった。既存の secret にキーバリューを追加するときは patch を使う。
$ kubectl patch secret mydata -p=&amp;#39;{&amp;#34;stringData&amp;#34;:{&amp;#34;mykey&amp;#34;: &amp;#34;myvalue&amp;#34;}}&amp;#39; secret の内容を確認するときも2つのやり方がある。キーだけを確認するならこれでよい。
$ kubectl describe secrets mydata キーに対応する値もデコードして確認するならこうする。但し、閲覧注意。
$ kubectl get secret mydata -o json | jq &amp;#39;.</description><content>&lt;p>0時に寝て7時に起きてだらだらやってて午前中は &lt;a href="https://ja.wikipedia.org/wiki/%E9%A0%AD%E6%96%87%E5%AD%97D">頭文字D&lt;/a> のアニメをみてた。漫画 (アニメも？) はすでに完結しているのでいつか読もうと思いつつ最後まで読んでいない。ゴッドフットやゴッドアームが出てくるぐらいまでは読んだ気がする。その後どうなったのかを知らない。イニシャルDをみていると、ストーリーも絵も演出もまったく派手さはなくて普通なんだけど、なぜかおもしろくて続きをみてしまうという人間の娯楽の本質をついている気がしてくる。なんでなんだろうなぁ。&lt;/p>
&lt;h2 id="頭文字d">頭文字D&lt;/h2>
&lt;p>たまたま思い出したので夜に漫画喫茶行って頭文字Dを最後まで読んできた。全48巻で、31巻ぐらいから読み始めて3-4時間ぐらいで読み終えた。漫画なので仕方ないけど、対戦相手がどんどん強くなっていって勝ち方が玄人好みというのか、単純に抜いた・抜かれたの話しではなく、タイヤマネージメントがどうこうとか、恐怖に対する心理がどうこうとか、ドライバーと車のセッティングも含めた駆け引きが強くなっていって、どちらが速いかというよりは戦略通りの展開にもっていって最後はそれがうまくはまるみたいな、これまでもずっとそうだったんだけど、ここからはよりトップレベルのほんの僅かな差が勝敗を分けるといった描き方になっていったように思う。それはそれで現実に近い気はするけど、漫画的には派手な演出にならないので玄人好みなストーリーになっていった気がする。但し、そこまでやってきて最後の対戦相手だけは、個人的には納得感がなくて、ここまで緻密に作り上げてきた理論や個々のドライバーの修練の積み重ねが圧倒的天才の前にひれ伏すみたいな切り口が急展開していて、頭の切り替えができなかった感じがした。とはいえ、最後まで読み終えられてよかったし、作品としてはすごくおもしろかった。作者はモータースポーツが本当に好きなんだろうなというのが伝わってくる漫画だと思う。&lt;/p>
&lt;h2 id="ふるさと納税">ふるさと納税&lt;/h2>
&lt;p>あまり欲しいものもないし、ふるさと納税の行政手続きも一通り理解したから今年はやらなくてもいいかとも思っていた。しかし、&lt;a href="https://www.satofull.jp/static/campaign/202112_pcp.php">paypayボーナスキャンペーン&lt;/a> をみてやってみるかという気になった。paypay はいろんなものと連携していて見かけるたびにすごいなと思う。お得だからと必要もないものを買うことはないけど、ふるさと納税はやらなかったとしても、どのみち納税は必要なものなので還元があるということは節税につながるのかな？理屈はよくわからないけど、言いたいことは paypay はすごいという話でした。&lt;/p>
&lt;h2 id="dapr-の-api-トークンを使った認証">dapr の api トークンを使った認証&lt;/h2>
&lt;p>&lt;a href="https://docs.dapr.io/operations/security/api-token/">Enable API token authentication in Dapr&lt;/a> を一通り読んだ。内容はとくに難しくなく、こんな風に dapr の manifest を書けば &lt;a href="https://jwt.io/">JWT&lt;/a> トークンを設定できますということを書いてある。私はずっとサーバーサイドばっかりやってきたからフロントエンドで使われる技術や仕組みに弱い。JWT トークンもその1つで、自分でちゃんと実装したことがないからちゃんとよく分かってない。これが OAuth2 なら provider を実装したこともあるからその仕組みも意図も理解できる。一度どこかで自分で JWT も実装してみないといけないのだろうな。&lt;/p>
&lt;p>少し前にお仕事で kubernetes の secret の移行作業をやった。既存の secret にキーバリューを追加するときは patch を使う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kubectl patch secret mydata -p&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;{&amp;#34;stringData&amp;#34;:{&amp;#34;mykey&amp;#34;: &amp;#34;myvalue&amp;#34;}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>secret の内容を確認するときも2つのやり方がある。キーだけを確認するならこれでよい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kubectl describe secrets mydata
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>キーに対応する値もデコードして確認するならこうする。但し、閲覧注意。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kubectl get secret mydata -o json | jq &lt;span style="color:#e6db74">&amp;#39;.data | map_values(@base64d)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>eLTAX 触ってみた</title><link>/diary/posts/2021/1124/</link><pubDate>Wed, 24 Nov 2021 08:02:59 +0900</pubDate><guid>/diary/posts/2021/1124/</guid><description>0時半に寝て6時半に起きた。水曜日は朝活の日だったけど、申し込み忘れてカレンダーに入ってなかったから忘れてた。カレンダーの予定に従って生活していることがわかる。
ふりかえり 今日はお仕事でスクラムイベントのレトロスペクティブがあった。最近は日本語でそのまま「ふりかえり」と呼ぶみたいやね。他の用語が英語なのであわせて英語で読んでたけど、ふりかえりの方が日本人的にはしっくりくるのでそれでいいと思う。
開発の情報共有のやり取りが活発になったという意見が出た。私は11月から働き始めてまだ3週間ほどなので以前がどうだったのかわからない。2週間前に本格的にスクラム開発に移行して、POや開発者のリーダーが新任したり、開発者に新規メンバー (私のこと) が追加したりと、いろんな状況が変わっている。なにか特別なことをしたというわけではないけど、自然にコミュニケーションがよい方に改善されているなら全体としてよい傾向に思える。私はまだ業務のことが全くわからないのでインフラやテストなどの非機能要件のタスクをやっているだけ。開発者からみて負債というほど大きなものではないが、やった方がよい技術的な残タスクのようなものを私がどんどん fix しているので開発環境がよくなっている気がするといったコメントを名指しでいただいた。スクラムマスターによると、ふりかえりでは、個人名で問題を指摘するのはよくないが、個人名で感謝を伝えるのはよいという。なので、よいことには個人名が前面に出る。褒められて悪い気がする人はそうそういないので、このプラクティスはチームの雰囲気をよくすることに寄与するのだろうと思えた。
続: 年末調整と住民税の納付 昨日 の続き。eLTAX のソフト版をダウンロードして年末調整の給与支払報告書の申請、住民税の特別徴収の納付も行った。アプリケーションの操作方法と手続きのドキュメントは懇切丁寧な内容なので、アプリケーションそのものの使い勝手はいまいちだけど、とくに手続きに迷うこともなく、順番に操作していけば問題なく申請や納付を完了できた。この2つの手続きは、昨年は紙で申請したり納付したりしていたのが、今年は電子申告になったのでちょっとクラスチェンジしたような感覚で気分がよかった。定期的な行政手続きを毎年やりながら少しずつやり方を洗練させていったり、異なる手続きに挑戦してみたり、制度の仕組みを理解したり、そういう少しずつ改善して学びを深めていくことそのものに幸せ感がある。人に依るんだろうけど、わりと私はマイクロ法人の行政手続きを楽しんでいる。</description><content>&lt;p>0時半に寝て6時半に起きた。水曜日は朝活の日だったけど、申し込み忘れてカレンダーに入ってなかったから忘れてた。カレンダーの予定に従って生活していることがわかる。&lt;/p>
&lt;h2 id="ふりかえり">ふりかえり&lt;/h2>
&lt;p>今日はお仕事でスクラムイベントのレトロスペクティブがあった。最近は日本語でそのまま「ふりかえり」と呼ぶみたいやね。他の用語が英語なのであわせて英語で読んでたけど、ふりかえりの方が日本人的にはしっくりくるのでそれでいいと思う。&lt;/p>
&lt;p>開発の情報共有のやり取りが活発になったという意見が出た。私は11月から働き始めてまだ3週間ほどなので以前がどうだったのかわからない。2週間前に本格的にスクラム開発に移行して、POや開発者のリーダーが新任したり、開発者に新規メンバー (私のこと) が追加したりと、いろんな状況が変わっている。なにか特別なことをしたというわけではないけど、自然にコミュニケーションがよい方に改善されているなら全体としてよい傾向に思える。私はまだ業務のことが全くわからないのでインフラやテストなどの非機能要件のタスクをやっているだけ。開発者からみて負債というほど大きなものではないが、やった方がよい技術的な残タスクのようなものを私がどんどん fix しているので開発環境がよくなっている気がするといったコメントを名指しでいただいた。スクラムマスターによると、ふりかえりでは、個人名で問題を指摘するのはよくないが、個人名で感謝を伝えるのはよいという。なので、よいことには個人名が前面に出る。褒められて悪い気がする人はそうそういないので、このプラクティスはチームの雰囲気をよくすることに寄与するのだろうと思えた。&lt;/p>
&lt;h2 id="続-年末調整と住民税の納付">続: 年末調整と住民税の納付&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1123/#年末調整と住民税の納付">昨日&lt;/a> の続き。eLTAX のソフト版をダウンロードして年末調整の給与支払報告書の申請、住民税の特別徴収の納付も行った。アプリケーションの操作方法と手続きのドキュメントは懇切丁寧な内容なので、アプリケーションそのものの使い勝手はいまいちだけど、とくに手続きに迷うこともなく、順番に操作していけば問題なく申請や納付を完了できた。この2つの手続きは、昨年は紙で申請したり納付したりしていたのが、今年は電子申告になったのでちょっとクラスチェンジしたような感覚で気分がよかった。定期的な行政手続きを毎年やりながら少しずつやり方を洗練させていったり、異なる手続きに挑戦してみたり、制度の仕組みを理解したり、そういう少しずつ改善して学びを深めていくことそのものに幸せ感がある。人に依るんだろうけど、わりと私はマイクロ法人の行政手続きを楽しんでいる。&lt;/p></content></item><item><title>スクラムの起源</title><link>/diary/posts/2021/1123/</link><pubDate>Tue, 23 Nov 2021 10:57:15 +0900</pubDate><guid>/diary/posts/2021/1123/</guid><description>5時に寝て7時半に起きた。前週末は遊んでたので夜はいろいろ作業してた。朝起きる習慣がついてきたので何時に寝ても起きれる感じになってきた。うまく体調管理もできている。
年末調整と住民税の納付 年末調整は1月末まで、住民税の特別徴収は納付の特例を使うと6-11月の6ヶ月分を12月10日までに納める。年末調整も11月の給与を確定したら調整額を算出して12月の給与に反映する。必要な情報を入力したら会計システム (freee) で自動算出してくれて書類も一通り作ってくれるので難しくない。ここで出力される給与支払報告書を市役所と税務署のそれぞれに申請する。市役所向けの手続きは eLTAX で行い、税務署向けの手続きは e-Tax で行う。先日 Windows マシンを購入 したので、今回は eLTAX の DL 版で完全な手続きができるはず。ただし、e-Tax も eLTAX も祝日・日曜日は利用できないのでやろうと思ったものの、今日は祝日だからできなかった。
住民税の特別徴収の納付も今回が初めての試み。企業が社員に代わり住民税を納付するのが原則であり、これを特別徴収と呼ぶ。昨年は特別徴収への切り替え申請をしないといけないのを私が知らなくて手続きが遅れた結果、個人宛に届いた納付書でそのまま支払いした。納付自体はそれでも問題はない。おそらく徴税側からみたら源泉徴収して企業の担当者が納付した方が誤りがなく確実でサポートコストを削減できるという狙いなんだろうと推測する。住民税の納付も eLTAX でできるようなので後日挑戦してみる。
アジャイル開発とスクラム 第2版 顧客・技術・経営をつなぐ協調的ソフトウェア開発マネジメント 4日前から読み進めていて、第1部アジャイル開発とは何か、スクラムとは何か (第1章から第5章) を読み終えた。
冒頭の序論を読んでいて、スクラムは 1980 年代の日本の製造業の (革新的な) 製品開発スタイルの論文がオリジナルだというのを知った。ソフトウェア開発の文脈だと、米国から輸入した方法論のようにみえるが、もとは日本で編み出された方法論だったという。1986年に書かれたハーバード・ビジネス・レビューに投稿された論文がオリジナルらしい。
The New New Product Development Game by Hirotaka Takeuchi and Ikujiro Nonaka 前に スクラムガイド2020 を一通り読んでいたので、スクラムについての内容はだいたい理解できた。補足でよかったのは、スクラムガイド 2017 から 2020 で改訂された内容やその背景や意図などがコラムで紹介されていた。それらを知ることで、よりスクラムで陥りやすい失敗や誤解されがちなところを理解できた。たとえば「開発チーム」という用語から「開発者」に改められた。スクラムチームの中に別のチームがあるようにみえ、プロダクトオーナー vs 開発チームのような対立構造にならないよう、チームはスクラムチームという1つしかないという意図だという。そして、開発チームの自己組織化 (Self-organized) というキーワードが、スクラムチームの自己管理型 (Self-managed) へといったように、主体である開発チームだけ自律的且つ協働するように読めたのを、スクラムチームという1つのチームしかないと強調されている。
コラム: 2020 スクラムガイド改訂とスクラムの3つの罠 スクラムが形式的、儀式的になってしまっている 目的を理解せずにハウツーをなぞるだけのチームが増えたので抽象的な表現に変更した 例) デイリースクラムがただの報告するだけになっている デイリースクラムの目的は状況にあわせた再計画であるため、形式的な報告ではいけない プロダクトオーナー vs 開発チームの構図に陥ってしまっている チーム内の分断をなくし、ワンチームになることが強調されている 開発チームから開発者へ、チームはスクラムチームが唯一 プロダクトオーナー vs 開発者が対立構図になることが多かった 「開発チームの自己組織化」から「スクラムチームの自己管理」へ スクラムは役割を超えて協力していくことが欠かせない 問題 vs 私たち (スクラムチーム) という構図を引き出すことが重要 スクラムマスターがスクラム警察もしくは雑用係になってしまっている スクラムマスターが「サーバントリーダー」とされていたが、単にサーバントになってしまうことがあった スクラムマスターはプロダクトの成果や組織の目標にコミットメントしないといけない ただスクラムルールを守らせたり、会議の司会役をするだけではない 「真のリーダー」としての資質とプロダクトの成果や組織の目標にコミットメントしていくための熱量を重視して専任していく必要がある これらのコラムを読むと、私が傍からみていたスクラムは本来の意図したスクラムの開発方法論ではなく、正しく運用されていなかったスクラムなのかもしれないとも思えてきた。本書の第1部を読み進めてみて、スクラムの意図している目的や価値には私が共感できるところが多々あった。</description><content>&lt;p>5時に寝て7時半に起きた。前週末は遊んでたので夜はいろいろ作業してた。朝起きる習慣がついてきたので何時に寝ても起きれる感じになってきた。うまく体調管理もできている。&lt;/p>
&lt;h2 id="年末調整と住民税の納付">年末調整と住民税の納付&lt;/h2>
&lt;p>年末調整は1月末まで、住民税の特別徴収は納付の特例を使うと6-11月の6ヶ月分を12月10日までに納める。年末調整も11月の給与を確定したら調整額を算出して12月の給与に反映する。必要な情報を入力したら会計システム (freee) で自動算出してくれて書類も一通り作ってくれるので難しくない。ここで出力される給与支払報告書を市役所と税務署のそれぞれに申請する。市役所向けの手続きは &lt;a href="https://www.eltax.lta.go.jp/">eLTAX&lt;/a> で行い、税務署向けの手続きは &lt;a href="https://www.e-tax.nta.go.jp/">e-Tax&lt;/a> で行う。先日 &lt;a href="/diary/diary/posts/2021/1103/#asus-rog-zephyrus-g15-ga503qr">Windows マシンを購入&lt;/a> したので、今回は eLTAX の DL 版で完全な手続きができるはず。ただし、e-Tax も eLTAX も祝日・日曜日は利用できないのでやろうと思ったものの、今日は祝日だからできなかった。&lt;/p>
&lt;p>住民税の特別徴収の納付も今回が初めての試み。企業が社員に代わり住民税を納付するのが原則であり、これを特別徴収と呼ぶ。昨年は特別徴収への切り替え申請をしないといけないのを私が知らなくて手続きが遅れた結果、個人宛に届いた納付書でそのまま支払いした。納付自体はそれでも問題はない。おそらく徴税側からみたら源泉徴収して企業の担当者が納付した方が誤りがなく確実でサポートコストを削減できるという狙いなんだろうと推測する。住民税の納付も eLTAX でできるようなので後日挑戦してみる。&lt;/p>
&lt;h2 id="アジャイル開発とスクラム-第2版-顧客技術経営をつなぐ協調的ソフトウェア開発マネジメント">アジャイル開発とスクラム 第2版 顧客・技術・経営をつなぐ協調的ソフトウェア開発マネジメント&lt;/h2>
&lt;p>4日前から読み進めていて、第1部アジャイル開発とは何か、スクラムとは何か (第1章から第5章) を読み終えた。&lt;/p>
&lt;p>冒頭の序論を読んでいて、スクラムは 1980 年代の日本の製造業の (革新的な) 製品開発スタイルの論文がオリジナルだというのを知った。ソフトウェア開発の文脈だと、米国から輸入した方法論のようにみえるが、もとは日本で編み出された方法論だったという。1986年に書かれたハーバード・ビジネス・レビューに投稿された論文がオリジナルらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hbr.org/1986/01/the-new-new-product-development-game">The New New Product Development Game by Hirotaka Takeuchi and Ikujiro Nonaka&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>前に &lt;a href="https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf">スクラムガイド2020&lt;/a> を一通り読んでいたので、スクラムについての内容はだいたい理解できた。補足でよかったのは、スクラムガイド 2017 から 2020 で改訂された内容やその背景や意図などがコラムで紹介されていた。それらを知ることで、よりスクラムで陥りやすい失敗や誤解されがちなところを理解できた。たとえば「開発チーム」という用語から「開発者」に改められた。スクラムチームの中に別のチームがあるようにみえ、プロダクトオーナー vs 開発チームのような対立構造にならないよう、チームはスクラムチームという1つしかないという意図だという。そして、開発チームの自己組織化 (Self-organized) というキーワードが、スクラムチームの自己管理型 (Self-managed) へといったように、主体である開発チームだけ自律的且つ協働するように読めたのを、スクラムチームという1つのチームしかないと強調されている。&lt;/p>
&lt;blockquote>
&lt;h5 id="コラム-2020-スクラムガイド改訂とスクラムの3つの罠">コラム: 2020 スクラムガイド改訂とスクラムの3つの罠&lt;/h5>
&lt;ul>
&lt;li>スクラムが形式的、儀式的になってしまっている
&lt;ul>
&lt;li>目的を理解せずにハウツーをなぞるだけのチームが増えたので抽象的な表現に変更した&lt;/li>
&lt;li>例) デイリースクラムがただの報告するだけになっている
&lt;ul>
&lt;li>デイリースクラムの目的は状況にあわせた再計画であるため、形式的な報告ではいけない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>プロダクトオーナー vs 開発チームの構図に陥ってしまっている
&lt;ul>
&lt;li>チーム内の分断をなくし、ワンチームになることが強調されている&lt;/li>
&lt;li>開発チームから開発者へ、チームはスクラムチームが唯一&lt;/li>
&lt;li>プロダクトオーナー vs 開発者が対立構図になることが多かった
&lt;ul>
&lt;li>「開発チームの自己組織化」から「スクラムチームの自己管理」へ&lt;/li>
&lt;li>スクラムは役割を超えて協力していくことが欠かせない
&lt;ul>
&lt;li>問題 vs 私たち (スクラムチーム) という構図を引き出すことが重要&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>スクラムマスターがスクラム警察もしくは雑用係になってしまっている
&lt;ul>
&lt;li>スクラムマスターが「サーバントリーダー」とされていたが、単にサーバントになってしまうことがあった&lt;/li>
&lt;li>スクラムマスターはプロダクトの成果や組織の目標にコミットメントしないといけない
&lt;ul>
&lt;li>ただスクラムルールを守らせたり、会議の司会役をするだけではない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>「真のリーダー」としての資質とプロダクトの成果や組織の目標にコミットメントしていくための熱量を重視して専任していく必要がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>これらのコラムを読むと、私が傍からみていたスクラムは本来の意図したスクラムの開発方法論ではなく、正しく運用されていなかったスクラムなのかもしれないとも思えてきた。本書の第1部を読み進めてみて、スクラムの意図している目的や価値には私が共感できるところが多々あった。&lt;/p></content></item><item><title>呑んだくれ</title><link>/diary/posts/2021/1109/</link><pubDate>Tue, 09 Nov 2021 07:19:29 +0900</pubDate><guid>/diary/posts/2021/1109/</guid><description>1時半に寝て6時に起きた。夜にウォーキングに出かけようとしたらたまたま雨が降ってきて諦めた。そしたら寝付けなかった。やっぱり歩いて疲弊すると寝付けやすいのかもしれない。ストレッチしたりしてたら寝るの遅くなった。
中間申告の納付 法人税・地方法人税の申告用紙が届いていたので内容を確認しながら e-tax で申請して pay-easy で税金の支払いを完了した。国税は一番最後に書類が届く。今年の書類が届いた日はこんな感じ。毎年記録しているから届く時期に準備していて慌てなくて済む。
法人市民税: 10月16日 法人県民税: 10月20日 法人税・地方法人税: 11月8日 国税の納付をもって中間申告をすべて終えた。中間申告は税金の先払いだからキャッシュフローが悪いと払えないみたいなことが起きる可能性がある。そうすると仮決算して支払い金額を抑えるみたいなことが必要になるんだろうな。まさに貧乏暇無し。
GitHub + Slack Integration integrations/slack の内容をみて subscribe する内容を確認した。4月頃にアップグレードしてそれまでの設定の互換性をなくして、その影響でうまく動かなかったりしてた。
github の slack 連携のときの commits:all が commits:* に変更されたみたい。4月中旬のバージョンアップ以降に作ったリポジトリか設定だと commits:all だと連携されないみたい。https://t.co/mGVUyEbgGQ
&amp;mdash; Tetsuya Morimoto (@t2y) April 30, 2021 その後、追いかけてなかったけど、いま README をみたら次の5つのイベントはデフォルトで有効になるみたい。
issues pulls commits releases deployments 必要に応じて他のイベントも追加するとよいみたい。私は次の3つかな。
reviews comments commits:* デフォルトのイベントは指定しなくてもよいけど、コピペですべて明示的に設定するならこんな感じ。
/github subscribe owner/repo issues,pulls,commits:*,releases,deployments,reviews,comments みんなの Python 勉強会 みんなのPython勉強会#75 で発表した。参加者は190人となっているけど、実際に zoom に参加していた人の最高値は110人ぐらいだったかな。190 * 0.6 = 114 なので無料イベントの参加者数は6割前後の法則に合致する。人数が増えるほどこの法則は精度が高いように思う。発表者は3人いて、私は2番目に発表して、持ち時間は30分だった。録画していたので後でアーカイブをみれるようにするみたい。私は録画否定派で録画すると参加者がオンタイムで見なくなるのと、いつでも見れるものは見ないということもあるので勉強会のレベルは録画しなくてもいいんじゃないかと考えている。もちろん大きなカンファレンスは録画があった方が参加できない人も後から興味のある発表を見返せていいとは思う。25分発表で質疑応答5分で発表の時間配分はうまくいった。あまり準備できなかった割には伝えたいことはだいたい話せたと思う。なんか質疑応答で「カザモリ社は python のお仕事を受けてくれますか？」といった質問があってちょっと驚いた。ここ数年 python をメインにしたお仕事してなくて、仕事は java, go が多いと言っているせいか、python の仕事はやってないようにみえてしまうのかもしれない。python, java, go の3つの言語のお仕事は受けますよと回答した。発表終わってから1時間ほど懇親会をした。ほとんどコミュニティの主催者と発表者で雑談してた。久しぶりに外部の勉強会でいろんな人とお話することができて楽しかった。たまには外に出かけていくことに重要性も認識できた。またネタがあったら発表したいなとは思う。</description><content>&lt;p>1時半に寝て6時に起きた。夜にウォーキングに出かけようとしたらたまたま雨が降ってきて諦めた。そしたら寝付けなかった。やっぱり歩いて疲弊すると寝付けやすいのかもしれない。ストレッチしたりしてたら寝るの遅くなった。&lt;/p>
&lt;h2 id="中間申告の納付">中間申告の納付&lt;/h2>
&lt;p>法人税・地方法人税の申告用紙が届いていたので内容を確認しながら e-tax で申請して pay-easy で税金の支払いを完了した。国税は一番最後に書類が届く。今年の書類が届いた日はこんな感じ。毎年記録しているから届く時期に準備していて慌てなくて済む。&lt;/p>
&lt;ul>
&lt;li>法人市民税: 10月16日&lt;/li>
&lt;li>法人県民税: 10月20日&lt;/li>
&lt;li>法人税・地方法人税: 11月8日&lt;/li>
&lt;/ul>
&lt;p>国税の納付をもって中間申告をすべて終えた。中間申告は税金の先払いだからキャッシュフローが悪いと払えないみたいなことが起きる可能性がある。そうすると仮決算して支払い金額を抑えるみたいなことが必要になるんだろうな。まさに貧乏暇無し。&lt;/p>
&lt;h2 id="github--slack-integration">GitHub + Slack Integration&lt;/h2>
&lt;p>&lt;a href="https://github.com/integrations/slack">integrations/slack&lt;/a> の内容をみて subscribe する内容を確認した。4月頃にアップグレードしてそれまでの設定の互換性をなくして、その影響でうまく動かなかったりしてた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">github の slack 連携のときの commits:all が commits:* に変更されたみたい。4月中旬のバージョンアップ以降に作ったリポジトリか設定だと commits:all だと連携されないみたい。&lt;a href="https://t.co/mGVUyEbgGQ">https://t.co/mGVUyEbgGQ&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1387999605959188481?ref_src=twsrc%5Etfw">April 30, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>その後、追いかけてなかったけど、いま README をみたら次の5つのイベントはデフォルトで有効になるみたい。&lt;/p>
&lt;ul>
&lt;li>issues&lt;/li>
&lt;li>pulls&lt;/li>
&lt;li>commits&lt;/li>
&lt;li>releases&lt;/li>
&lt;li>deployments&lt;/li>
&lt;/ul>
&lt;p>必要に応じて他のイベントも追加するとよいみたい。私は次の3つかな。&lt;/p>
&lt;ul>
&lt;li>reviews&lt;/li>
&lt;li>comments&lt;/li>
&lt;li>commits:*&lt;/li>
&lt;/ul>
&lt;p>デフォルトのイベントは指定しなくてもよいけど、コピペですべて明示的に設定するならこんな感じ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/github subscribe owner/repo issues,pulls,commits:*,releases,deployments,reviews,comments
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="みんなの-python-勉強会">みんなの Python 勉強会&lt;/h2>
&lt;p>&lt;a href="https://startpython.connpass.com/event/228136/">みんなのPython勉強会#75&lt;/a> で発表した。参加者は190人となっているけど、実際に zoom に参加していた人の最高値は110人ぐらいだったかな。190 * 0.6 = 114 なので無料イベントの参加者数は6割前後の法則に合致する。人数が増えるほどこの法則は精度が高いように思う。発表者は3人いて、私は2番目に発表して、持ち時間は30分だった。録画していたので後でアーカイブをみれるようにするみたい。私は録画否定派で録画すると参加者がオンタイムで見なくなるのと、いつでも見れるものは見ないということもあるので勉強会のレベルは録画しなくてもいいんじゃないかと考えている。もちろん大きなカンファレンスは録画があった方が参加できない人も後から興味のある発表を見返せていいとは思う。25分発表で質疑応答5分で発表の時間配分はうまくいった。あまり準備できなかった割には伝えたいことはだいたい話せたと思う。なんか質疑応答で「カザモリ社は python のお仕事を受けてくれますか？」といった質問があってちょっと驚いた。ここ数年 python をメインにしたお仕事してなくて、仕事は java, go が多いと言っているせいか、python の仕事はやってないようにみえてしまうのかもしれない。python, java, go の3つの言語のお仕事は受けますよと回答した。発表終わってから1時間ほど懇親会をした。ほとんどコミュニティの主催者と発表者で雑談してた。久しぶりに外部の勉強会でいろんな人とお話することができて楽しかった。たまには外に出かけていくことに重要性も認識できた。またネタがあったら発表したいなとは思う。&lt;/p>
&lt;h2 id="呑み">呑み&lt;/h2>
&lt;p>懇親会が終わったのが22時で、疲れと空腹から仲のよい焼き鳥屋さんのお店に寄って晩ご飯を食べることにした。時短が終わっているので22時からでも飲みに行ける。お店は翌2時まで営業している。22時過ぎに行ったらお客さんは誰もいなくて、野菜サラダと焼き鳥を注文してマスターと雑談してた。&lt;/p>
&lt;p>時短が終わってから景気はどうかを聞いてみると、まだまだお客さんの戻りはコロナ前とくらべてまだまだだという。0時まわってから他の飲食店で働いている人たちが店内を埋まるぐらいは来てくれていたそうだけど、まだまだ余裕がないのか全然戻ってきてないと話されていた。0時半頃に2人組で「○○さんの紹介で来ました」みたいな既に酔っ払っているお客さんが来たりして、終電終わってからこういうお客さんが来たりしていたんだなと雰囲気は理解できた。マスターも2時に閉店して5時まで開いている他の飲食店に飲みに行くと話してた。そうやってお互いにお店に飲みに行って付き合いのようなものができているんだというのが理解できた。どこかのスナック行って3万円ほど使っても、必ずそのスナックの人がお店に来てくれて3万円以上使ってくれるという。お金をまわすってそういうことなんやなとマスターの話しを聞いていて理解できた。自分のお店を2時に閉店して、5時まで飲み歩いて、それから寝てまた次の日に仕事というのは体力的にすごくしんどそうで、マスター自身もコロナ明けは体調をみながら飲み歩いているとも話されてた。結局、2時前までマスターと雑談してて、私も22時から4時間弱ほど居座ってた。久しぶりに外で飲んでハイになっていたかもしれない。&lt;/p>
&lt;p>マスターのお勧めで &lt;a href="https://www.hamadasyuzou.co.jp/daiyame_brand">だいやめ&lt;/a> という芋焼酎をお湯割りで飲んだ。香熟芋という珍し？芋を使っていて、ライチのような香りのする芋焼酎でおいしかった。お土産によさそうなので覚えておこうと思う。&lt;/p></content></item><item><title>睡眠不良</title><link>/diary/posts/2021/1022/</link><pubDate>Fri, 22 Oct 2021 13:29:09 +0900</pubDate><guid>/diary/posts/2021/1022/</guid><description>4時に寝て6時に起きた。朝活があると何時に寝ても6時に起きれる。終わってからやっぱり眠くなって1時間ほど寝てた。お昼の外出から戻ってきて雑務やってから、なんか集中できなくて15時から帰ってお昼ご飯食べて2-3時間寝てた。寝る時間帯がずれると生活のリズムが狂ってしまい、全体でみると生産性が落ちるように思えてきた。水と金だけ6時に起きるのをやめて毎日6時に起きるべきだと強く思うようになった。
朝活 Webデザイントレンドのよりみち の金朝ツメトギに参加した。今回から「つめとぎ」から「ツメトギ」のカタカナに名前変更してパワーアップ？したみたい。本を読んでもよかったんだけど、チャット欄でコメントしながら live をみてみようと思って普通に聴いていた。#金朝ツメトギ というハッシュタグは私がコメントして生まれた。コミュニティ的に盛り上げるならタイムラインを共有した方がよいとは思う。youtube live のチャットにコメントした方がいいか、twitter で気軽にコメントした方がいいか、まだよくわかってない。youtube のチャット欄のコメントの一覧性とか、普段使いのツールになっていないせいか、なんとなく抵抗感がある。いま参加者が少ないせいか、コメントするとスピーカーがコメントに反応して返答したりするので、あまりカジュアルに書き過ぎるとスピーカーの作業の邪魔にならないかな？とか思ったりもした。youtube live という勉強会の人間関係の距離感が難しい。
あと Facebook Connect 2021 というイベントがあることを教えてもらった。友だちに共有したら会社を休んで参加するとか言っているので私も参加してみることにした。どうしようか迷ってたけど、身近な人たちが参加するとつられるのかもしれない。
法人県民税と法人市民税の中間申告と納付 前日(というか今日)に4時まで起きてたのは申告書の内容確認や記入をしてたから。せっかく申告書を作成したのですぐ納付したくなった。それで新長田の合同庁舎まで申告に行ってきた。eltax は相変わらず windows 向けの DL 版でないと申告できそうにない。WEB 版もあって一部対応しているようだけど、よくよく調べていくと DL 版でしかできないようにみえる。毎年 WEB 版でできるようになっているかどうかを調べている。この互換性を調べるような作業を都度やるのが面倒になってきた。vr 用途 (oculus link を使いたい) にも使えるので windows マシンを購入してもいいかもしれないと考えるようになってきた。申告書を郵送してもよいけど、1時間もあれば往復できる距離なので気分転換も兼ねて合同庁舎に出向いてきた。
帰りに新長田駅の近くの三菱UFJ銀行の支店で納付する。前回は窓口納付をしたが、今回は STM (Store Teller Machine) での納付に初挑戦した。STM(Store Teller Machine)の存在意義とは のブログ記事にも書かれている通り、納付書を OCR でスキャンすることでどんな納付書でも対応できるという汎用性はすごいと思うものの、その裏で人間がチェックしているんじゃないかと思えるメッセージや引き落とす合計金額はユーザーが手入力で決定する (OCR で合計がどの金額かわからなかった場合のみ？) といったオペレーションになっていて、なんか全く自動化されてない感があって残念に思った。見た目上、機械化されているけど、運用には人手がかかっているようにみえた。まぁでも、初めて使ってみて経験としてはおもしろかった。
Jira のフィルターとリマインダー 所得税や住民税の納付は原則毎月納付する必要があるけど、小さい企業は納付の特例という制度があって6ヶ月単位にまとめて納付できる。小さい企業の事務手続きの工数削減を狙いとしてある制度だと思う。うちもその特例制度を利用して6ヶ月ごとに納付している。カレンダーに繰り返し予定として登録してあるのでカレンダーをみていれば見落とすことはないのだけど、そのときに都度チケットを作ってやるのも面倒なので納付の親チケットを作っておいて、子タスクとして毎回作業するようにしている。それをみていて、納付期限を設定しておいてリマインダーしたら課題管理システムっぽくていいなと思って Jira でのやり方を調べてみた。Jiraにて期限の近い課題の通知を受け取りたい というのがあって、任意の JQL で期限を調べるフィルターを書いて、そのフィルターに対してサブスクリプションというメール配信設定を行う仕組みになっている。これはこれでよくできたうまい仕組みだと思う。しかし、いまチケットのイベントに対してメールを送る設定は無効にしていて、Slack インテグレーションを使ってすべて Slack の通知チャンネルにイベントを流すようにしている。できれば、Slack インテグレーションで期限のリマインダーを通知できるのが望ましいた。公式の Jira Slack app だと、JQL でフィルターはできるけど、イベント発生時に通知する仕組みなので毎週フィルター実行するような用途には使えない。
たまたまそんな話しをツィートしてたら Jira API と Slack API を使ってスクリプトを書いているというのを教えてもらった。これはこれで便利そう。</description><content>&lt;p>4時に寝て6時に起きた。朝活があると何時に寝ても6時に起きれる。終わってからやっぱり眠くなって1時間ほど寝てた。お昼の外出から戻ってきて雑務やってから、なんか集中できなくて15時から帰ってお昼ご飯食べて2-3時間寝てた。寝る時間帯がずれると生活のリズムが狂ってしまい、全体でみると生産性が落ちるように思えてきた。水と金だけ6時に起きるのをやめて毎日6時に起きるべきだと強く思うようになった。&lt;/p>
&lt;h2 id="朝活">朝活&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/channel/UC1rVx0vAg66su1WvH3X-RJg">Webデザイントレンドのよりみち&lt;/a> の金朝ツメトギに参加した。今回から「つめとぎ」から「ツメトギ」のカタカナに名前変更してパワーアップ？したみたい。本を読んでもよかったんだけど、チャット欄でコメントしながら live をみてみようと思って普通に聴いていた。&lt;a href="https://twitter.com/hashtag/%E9%87%91%E6%9C%9D%E3%83%84%E3%83%A1%E3%83%88%E3%82%AE?src=hashtag_click&amp;amp;f=live">#金朝ツメトギ&lt;/a> というハッシュタグは私がコメントして生まれた。コミュニティ的に盛り上げるならタイムラインを共有した方がよいとは思う。youtube live のチャットにコメントした方がいいか、twitter で気軽にコメントした方がいいか、まだよくわかってない。youtube のチャット欄のコメントの一覧性とか、普段使いのツールになっていないせいか、なんとなく抵抗感がある。いま参加者が少ないせいか、コメントするとスピーカーがコメントに反応して返答したりするので、あまりカジュアルに書き過ぎるとスピーカーの作業の邪魔にならないかな？とか思ったりもした。youtube live という勉強会の人間関係の距離感が難しい。&lt;/p>
&lt;p>あと &lt;a href="https://www.facebookconnect.com/ja-jp/">Facebook Connect 2021&lt;/a> というイベントがあることを教えてもらった。友だちに共有したら会社を休んで参加するとか言っているので私も参加してみることにした。どうしようか迷ってたけど、身近な人たちが参加するとつられるのかもしれない。&lt;/p>
&lt;h2 id="法人県民税と法人市民税の中間申告と納付">法人県民税と法人市民税の中間申告と納付&lt;/h2>
&lt;p>前日(というか今日)に4時まで起きてたのは申告書の内容確認や記入をしてたから。せっかく申告書を作成したのですぐ納付したくなった。それで新長田の合同庁舎まで申告に行ってきた。&lt;a href="https://www.eltax.lta.go.jp/">eltax&lt;/a> は相変わらず windows 向けの DL 版でないと申告できそうにない。WEB 版もあって一部対応しているようだけど、よくよく調べていくと DL 版でしかできないようにみえる。毎年 WEB 版でできるようになっているかどうかを調べている。この互換性を調べるような作業を都度やるのが面倒になってきた。vr 用途 (oculus link を使いたい) にも使えるので windows マシンを購入してもいいかもしれないと考えるようになってきた。申告書を郵送してもよいけど、1時間もあれば往復できる距離なので気分転換も兼ねて合同庁舎に出向いてきた。&lt;/p>
&lt;p>帰りに新長田駅の近くの三菱UFJ銀行の支店で納付する。前回は窓口納付をしたが、今回は STM (Store Teller Machine) での納付に初挑戦した。&lt;a href="https://life-is-miracle-wind.blog.jp/archives/22922687.html">STM(Store Teller Machine)の存在意義とは&lt;/a> のブログ記事にも書かれている通り、納付書を OCR でスキャンすることでどんな納付書でも対応できるという汎用性はすごいと思うものの、その裏で人間がチェックしているんじゃないかと思えるメッセージや引き落とす合計金額はユーザーが手入力で決定する (OCR で合計がどの金額かわからなかった場合のみ？) といったオペレーションになっていて、なんか全く自動化されてない感があって残念に思った。見た目上、機械化されているけど、運用には人手がかかっているようにみえた。まぁでも、初めて使ってみて経験としてはおもしろかった。&lt;/p>
&lt;h2 id="jira-のフィルターとリマインダー">Jira のフィルターとリマインダー&lt;/h2>
&lt;p>所得税や住民税の納付は原則毎月納付する必要があるけど、小さい企業は納付の特例という制度があって6ヶ月単位にまとめて納付できる。小さい企業の事務手続きの工数削減を狙いとしてある制度だと思う。うちもその特例制度を利用して6ヶ月ごとに納付している。カレンダーに繰り返し予定として登録してあるのでカレンダーをみていれば見落とすことはないのだけど、そのときに都度チケットを作ってやるのも面倒なので納付の親チケットを作っておいて、子タスクとして毎回作業するようにしている。それをみていて、納付期限を設定しておいてリマインダーしたら課題管理システムっぽくていいなと思って Jira でのやり方を調べてみた。&lt;a href="https://community.atlassian.com/t5/Jira-articles/Jira%E3%81%AB%E3%81%A6%E6%9C%9F%E9%99%90%E3%81%AE%E8%BF%91%E3%81%84%E8%AA%B2%E9%A1%8C%E3%81%AE%E9%80%9A%E7%9F%A5%E3%82%92%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8A%E3%81%9F%E3%81%84/ba-p/770716">Jiraにて期限の近い課題の通知を受け取りたい&lt;/a> というのがあって、任意の JQL で期限を調べるフィルターを書いて、そのフィルターに対してサブスクリプションというメール配信設定を行う仕組みになっている。これはこれでよくできたうまい仕組みだと思う。しかし、いまチケットのイベントに対してメールを送る設定は無効にしていて、Slack インテグレーションを使ってすべて Slack の通知チャンネルにイベントを流すようにしている。できれば、Slack インテグレーションで期限のリマインダーを通知できるのが望ましいた。公式の &lt;a href="https://www.atlassian.com/partnerships/slack">Jira Slack app&lt;/a> だと、JQL でフィルターはできるけど、イベント発生時に通知する仕組みなので毎週フィルター実行するような用途には使えない。&lt;/p>
&lt;p>たまたまそんな話しをツィートしてたら Jira API と Slack API を使ってスクリプトを書いているというのを教えてもらった。これはこれで便利そう。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">こんな感じのスクリプトでJIRAからslackに通知してます &lt;a href="https://t.co/UzeIZ9Nbol">https://t.co/UzeIZ9Nbol&lt;/a>&lt;/p>&amp;mdash; Takanori Suzuki (@takanory) &lt;a href="https://twitter.com/takanory/status/1451572269768003589?ref_src=twsrc%5Etfw">October 22, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item><item><title>改正法人税法等の説明会</title><link>/diary/posts/2021/1019/</link><pubDate>Tue, 19 Oct 2021 08:52:42 +0900</pubDate><guid>/diary/posts/2021/1019/</guid><description>0-1時ぐらいに寝て7時半に起きた。よく眠れたか眠れてないかもわからないような目覚め方をして少しぼおっとしてた。朝ゆっくりしてもいいかと思いつつ準備して移動したら9時前にはオフィスにいたので普通の日とそう変わらない一日の始めだった。夜にジョギング行こうかと思ってたけど、ちょうど通り雨が降ったりやんだりしててやめた。代わりに雨やんでからオフィス行って調べてものしてた。
データ指向アプリケーションデザイン 7.3を読んで7章トランザクションを読み終えた。トランザクションの章は言葉も知らないし、あまりクリティカルなアプリケーションの開発に関わってこなかったのでそこまで意識したことがなかった。トランザクションで問題が発生する分離レベルと典型的なパターンが体系的に整理されていてすごく勉強になった。結果的にトランザクションを使わないとしても、トランザクションの要否や起きうる整合性の問題を理解しておくとデータ定義やアプリケーションの設計にも活かせる気がする。7章まで読んだ中でもっとも知らないことが多かった。約300ページなのでだいたい半分読み終えた。まだまだ先は長い。
トランザクションの開始時点でロックをかけるべきオブジェクトが存在せず、あるトランザクションでの書き込みが他のトランザクションの検索クエリの結果を変化させてしまう問題を ファントム と呼ぶ。ファントムの対策の1つとして、あらかじめそのデータを作っておき SELECT FOR UPDATE でロックを取得するやり方を 衝突の実体化 (materializing conflicts) と呼ぶらしい。グループウェアの開発をしていた頃、1つのスレッドしかトランザクションを実行できないことを保証するための切り札として、ロック用途のテーブルを設けておき、そのロックを獲得したスレッドだけ処理できるようにしていた。当時はわからなかったけど、あれは衝突の実体化という手法だったんだといま気付いた。
データベースのクラッシュや整合性に関する問題に対する信頼性を保つために、それらの問題を単純化するために、この数十年にわたって選択されてきた仕組みが トランザクション である。トランザクションは、アプリケーションが複数の読み書きを論理的な単位としてまとめる方法である。概念的には、トランザクション中のすべての読み書きは1つの操作として実行される。トランザクションは抽象化のレイヤーであり、アプリケーションはある種の並行性の問題や、ある種のハードウェアやソフトウェアの問題が存在しないかのように振る舞えるようになる。
トランザクションは全体として成功（ コミット（commit） ）もしくは失敗（ 中断（abort） 、 ロールバック（rollback） ）する。トランザクションが失敗した場合には、アプリケーションは安全にリトライできる。トランザクションは自然法則ではなく、データベースにアクセスするアプリケーションのためのプログラミングモデルをシンプルにするという目的を持って生み出された。トランザクションを利用すれば、ある種の潜在的なエラーの状況や並行性の問題はデータベースが面倒を見てくれるので、アプリケーションはそれらを気にしなくてよくなる（このことは 安全性の保証 と呼ばれる）。
トランザクションが提供する安全性の保証は ACID で示される。
原子性 (Atomicity) 原子（アトミック） はそれ以上小さな部分に分割できないものを指して使われる言葉 マルチスレッドのプログラミングにおいては、あるスレッドがアトミックな処理を実行しているというなら、それは他のスレッドからはその処理の半分だけ完了した途中の状態を見る方法が存在しないことを意味する。システムが取りえる状態は、その処理が始まる前と終わった後の状態だけであり、その中間の状態になることはない 前にメモリモデルの文脈で、あるプロセスが書き込み完了したデータが、他のプロセスからも確実に読めることをアトミックな操作と習ったことがある 原子性と並行性は関係がない エラーの際にトランザクションを中断し、そのトランザクションのすべての書き込みを破棄できることが、 ACID の原子性を決定づける特徴と言える アプリケーションがリトライしても安全であることを保証する 中断可能性（abortability） の方が原子性よりも良い言葉だったと思われる 一貫性 (Consistency) 一貫性は多くの意味で使われる とくに日本語では整合性とも訳される 非同期のレプリケーションシステムでは結果整合性の問題が発生する (5章) コンシステントハッシュ法は、リバランシングのためにいくつかのシステムで利用されているパーティショニングのアプローチ CAP 定理では、一貫性という言葉は線形化可能性の意味で使われる (9章) ACID の文脈における一貫性は、データベースが「良い状態」にあることを示すアプリケーション固有の概念を指す 同じ言葉を少なくとも4つの異なる意味で使われている。ACID における一貫性という概念は、データについて常に真でなければならない何らかの言明（ 不変性 ）があることを指す。たとえば、会計システムの場合、すべてのアカウントでまとめれば常に貸方と借方は等しくならなければならない。この一貫性の概念はアプリケーション固有の不変性の概念に依存しており、一貫性を保つようにトランザクションを適切に定義することはアプリケーションの責任となる。原子性、分離性、永続性はデータベースの特性だが、一貫性は（ ACID という考え方においては）アプリケーションの特性である。したがって、 C は実際には ACID に属していない。
分離性 (Isolation) 多くのデータベースは、同時に複数のクライアントからアクセスされる。データベース中の同じレコードにアクセスするときに並行性の問題（レース条件［ race condition ］）が生じる可能性がある。データベース中に保存されているカウンタを、2つのクライアントが同時にインクリメントすると仮定する。それぞれのクライアントは現在の値を読み取り、1を加え、新しい値を書き戻す。ACID における分離性とは、並行して実行されたトランザクションがお互いから分離されており、お互いのつま先を踏みつけあうようなことがないという意味である。実際の運用では、パフォーマンスの制約から分離レベルによって保証される分離性が変わってくる。</description><content>&lt;p>0-1時ぐらいに寝て7時半に起きた。よく眠れたか眠れてないかもわからないような目覚め方をして少しぼおっとしてた。朝ゆっくりしてもいいかと思いつつ準備して移動したら9時前にはオフィスにいたので普通の日とそう変わらない一日の始めだった。夜にジョギング行こうかと思ってたけど、ちょうど通り雨が降ったりやんだりしててやめた。代わりに雨やんでからオフィス行って調べてものしてた。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>7.3を読んで7章トランザクションを読み終えた。トランザクションの章は言葉も知らないし、あまりクリティカルなアプリケーションの開発に関わってこなかったのでそこまで意識したことがなかった。トランザクションで問題が発生する分離レベルと典型的なパターンが体系的に整理されていてすごく勉強になった。結果的にトランザクションを使わないとしても、トランザクションの要否や起きうる整合性の問題を理解しておくとデータ定義やアプリケーションの設計にも活かせる気がする。7章まで読んだ中でもっとも知らないことが多かった。約300ページなのでだいたい半分読み終えた。まだまだ先は長い。&lt;/p>
&lt;p>トランザクションの開始時点でロックをかけるべきオブジェクトが存在せず、あるトランザクションでの書き込みが他のトランザクションの検索クエリの結果を変化させてしまう問題を &lt;strong>ファントム&lt;/strong> と呼ぶ。ファントムの対策の1つとして、あらかじめそのデータを作っておき &lt;code>SELECT FOR UPDATE&lt;/code> でロックを取得するやり方を &lt;strong>衝突の実体化 (materializing conflicts)&lt;/strong> と呼ぶらしい。グループウェアの開発をしていた頃、1つのスレッドしかトランザクションを実行できないことを保証するための切り札として、ロック用途のテーブルを設けておき、そのロックを獲得したスレッドだけ処理できるようにしていた。当時はわからなかったけど、あれは衝突の実体化という手法だったんだといま気付いた。&lt;/p>
&lt;blockquote>
&lt;p>データベースのクラッシュや整合性に関する問題に対する信頼性を保つために、それらの問題を単純化するために、この数十年にわたって選択されてきた仕組みが &lt;strong>トランザクション&lt;/strong> である。トランザクションは、アプリケーションが複数の読み書きを論理的な単位としてまとめる方法である。概念的には、トランザクション中のすべての読み書きは1つの操作として実行される。トランザクションは抽象化のレイヤーであり、アプリケーションはある種の並行性の問題や、ある種のハードウェアやソフトウェアの問題が存在しないかのように振る舞えるようになる。&lt;/p>
&lt;p>トランザクションは全体として成功（ &lt;strong>コミット（commit）&lt;/strong> ）もしくは失敗（ &lt;strong>中断（abort）&lt;/strong> 、 &lt;strong>ロールバック（rollback）&lt;/strong> ）する。トランザクションが失敗した場合には、アプリケーションは安全にリトライできる。トランザクションは自然法則ではなく、データベースにアクセスするアプリケーションのためのプログラミングモデルをシンプルにするという目的を持って生み出された。トランザクションを利用すれば、ある種の潜在的なエラーの状況や並行性の問題はデータベースが面倒を見てくれるので、アプリケーションはそれらを気にしなくてよくなる（このことは &lt;strong>安全性の保証&lt;/strong> と呼ばれる）。&lt;/p>
&lt;p>トランザクションが提供する安全性の保証は &lt;strong>ACID&lt;/strong> で示される。&lt;/p>
&lt;h5 id="原子性-atomicity">原子性 (Atomicity)&lt;/h5>
&lt;ul>
&lt;li>&lt;strong>原子（アトミック）&lt;/strong> はそれ以上小さな部分に分割できないものを指して使われる言葉&lt;/li>
&lt;li>マルチスレッドのプログラミングにおいては、あるスレッドがアトミックな処理を実行しているというなら、それは他のスレッドからはその処理の半分だけ完了した途中の状態を見る方法が存在しないことを意味する。システムが取りえる状態は、その処理が始まる前と終わった後の状態だけであり、その中間の状態になることはない
&lt;ul>
&lt;li>前にメモリモデルの文脈で、あるプロセスが書き込み完了したデータが、他のプロセスからも確実に読めることをアトミックな操作と習ったことがある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>原子性と並行性は関係がない&lt;/li>
&lt;li>エラーの際にトランザクションを中断し、そのトランザクションのすべての書き込みを破棄できることが、 ACID の原子性を決定づける特徴と言える
&lt;ul>
&lt;li>アプリケーションがリトライしても安全であることを保証する&lt;/li>
&lt;li>&lt;strong>中断可能性（abortability）&lt;/strong> の方が原子性よりも良い言葉だったと思われる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="一貫性-consistency">一貫性 (Consistency)&lt;/h4>
&lt;ul>
&lt;li>一貫性は多くの意味で使われる
&lt;ul>
&lt;li>とくに日本語では整合性とも訳される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>非同期のレプリケーションシステムでは結果整合性の問題が発生する (5章)&lt;/li>
&lt;li>コンシステントハッシュ法は、リバランシングのためにいくつかのシステムで利用されているパーティショニングのアプローチ&lt;/li>
&lt;li>CAP 定理では、一貫性という言葉は線形化可能性の意味で使われる (9章)&lt;/li>
&lt;li>ACID の文脈における一貫性は、データベースが「良い状態」にあることを示すアプリケーション固有の概念を指す&lt;/li>
&lt;/ul>
&lt;p>同じ言葉を少なくとも4つの異なる意味で使われている。ACID における一貫性という概念は、データについて常に真でなければならない何らかの言明（ &lt;strong>不変性&lt;/strong> ）があることを指す。たとえば、会計システムの場合、すべてのアカウントでまとめれば常に貸方と借方は等しくならなければならない。この一貫性の概念はアプリケーション固有の不変性の概念に依存しており、一貫性を保つようにトランザクションを適切に定義することはアプリケーションの責任となる。原子性、分離性、永続性はデータベースの特性だが、一貫性は（ ACID という考え方においては）アプリケーションの特性である。したがって、 C は実際には ACID に属していない。&lt;/p>
&lt;h4 id="分離性-isolation">分離性 (Isolation)&lt;/h4>
&lt;p>多くのデータベースは、同時に複数のクライアントからアクセスされる。データベース中の同じレコードにアクセスするときに並行性の問題（レース条件［ race condition ］）が生じる可能性がある。データベース中に保存されているカウンタを、2つのクライアントが同時にインクリメントすると仮定する。それぞれのクライアントは現在の値を読み取り、1を加え、新しい値を書き戻す。ACID における分離性とは、並行して実行されたトランザクションがお互いから分離されており、お互いのつま先を踏みつけあうようなことがないという意味である。実際の運用では、パフォーマンスの制約から分離レベルによって保証される分離性が変わってくる。&lt;/p>
&lt;h4 id="永続性-durability">永続性 (Durability)&lt;/h4>
&lt;p>データベースシステムが目的とするのは、データを失う恐れなく保存できる安全な場所を提供すること。永続性は、トランザクションのコミットが成功したら、仮にハードウェアの障害やデータベースのクラッシュがあったとしても、そのトランザクションで書き込まれたすべてのデータは失われないことを約束する。&lt;/p>
&lt;h4 id="用語の整理">用語の整理&lt;/h4>
&lt;p>トランザクションはデータモデルがどういったものであるかにかかわらず、価値あるデータベースの機能と言える。並行に実行されたトランザクションがお互いに影響しあわない分離性における保証を &lt;strong>分離レベル&lt;/strong> と呼ぶ。&lt;/p>
&lt;ul>
&lt;li>read committed&lt;/li>
&lt;li>スナップショット分離（repeatable read とも呼ばれる）&lt;/li>
&lt;li>直列化可能&lt;/li>
&lt;/ul>
&lt;p>これらの分離レベルに対してトランザクションで発生する様々なレース条件がある。&lt;/p>
&lt;ul>
&lt;li>ダーティリード
&lt;ul>
&lt;li>あるクライアントが他のクライアントのまだコミットされていない書き込みを読める&lt;/li>
&lt;li>read committed 分離レベル及びそれ以上に強い分離レベルはダーティリードは生じない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ダーティライト
&lt;ul>
&lt;li>あるクライアントが他のクライアントによるまだコミットされていない書き込みの内容を上書きしてしまう&lt;/li>
&lt;li>ほぼすべてのトランザクションの実装は、ダーティライトを生じない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>読み取りスキュー（nonrepeatable read）
&lt;ul>
&lt;li>クライアントが異なる時刻にデータベースの異なる部分を見ること&lt;/li>
&lt;li>この問題の最も一般的な回避策はスナップショット分離によるもので、これはトランザクションがある時点での一貫したスナップショットから読み取りを行えるようにする&lt;/li>
&lt;li>通常、MVCC（multi-version concurrency control）を利用して実装される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>更新のロスト
&lt;ul>
&lt;li>2つのクライアントが並行して read-modify-write サイクルを実行するとき、片方が他方の書き込みをその変更内容を考慮せずに上書きしてしまい、データが失われること&lt;/li>
&lt;li>スナップショット分離レベルの実装にはこの異常を自動的に回避してくれるものもあるが、明示的なロック（ SELECT FOR UPDATE ）をしなければならない実装もある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>書き込みスキュー
&lt;ul>
&lt;li>トランザクションが何かを読み取り、その値に基づいて判断を下し、その結果をデータベースに書き込む&lt;/li>
&lt;li>この状況で、書き込みが行われた時点で判断の根拠となったプレミスが真ではなくなっている場合を指す&lt;/li>
&lt;li>直列化可能分離レベルのみがこの異常を回避できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ファントムリード
&lt;ul>
&lt;li>トランザクションが何らかの検索条件にマッチするオブジェクトを読み取り、他のクライアントはその検索結果に影響する書き込みを行う&lt;/li>
&lt;li>スナップショット分離レベルは単純なファントムリードを回避してくれるが、書き込みスキューを伴うファントムに対してはインデックス範囲ロックのような特別な対応が必要となる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>弱い分離レベルは、これらの異常のいくつかを防いでくれるが、それ以外はアプリケーション開発者に対処する必要がある（たとえば明示的なロックなど）。すべての問題に対する保護を提供してくれるのは直列化可能分離レベルのみ。直列化可能なトランザクションの実装方法は、3 種類ある。&lt;/p>
&lt;ul>
&lt;li>トランザクションを順次実行する
&lt;ul>
&lt;li>それぞれのトランザクションをきわめて高速に実行でき、加えて単一の CPU コアで十分処理できる程度にトランザクションのスループットが低いのであれば、これはシンプルで効果的な選択肢となる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ツーフェーズロック
&lt;ul>
&lt;li>数十年にわたって直列化可能分離レベルの実装において標準的な方法であった&lt;/li>
&lt;li>パフォーマンス上の特性から多くのアプリケーションがツーフェーズロックの利用は避けている&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>直列化可能スナップショット分離（SSI、serializable snapshot isolation）
&lt;ul>
&lt;li>新しいアルゴリズムであり、これまでのアプローチが持つ欠点のほとんどを回避している&lt;/li>
&lt;li>SSI は楽観的アプローチを取っており、トランザクションはブロックされることなく処理を進められる&lt;/li>
&lt;li>トランザクションはコミットの時点でチェックされ、その実行が直列化可能になっていなければ中断される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="改正法人税法等の説明会">改正法人税法等の説明会&lt;/h2>
&lt;p>&lt;a href="https://www.nk-net.co.jp/kobe/assets/files/schedule/2021/211019.pdf">改正法人税法等の説明会&lt;/a> に参加してきた。所感からまとめるとこんな感じ。&lt;/p>
&lt;ul>
&lt;li>神戸文化ホールについて
&lt;ul>
&lt;li>電源がない&lt;/li>
&lt;li>FREESPOT が提供されていてフリー wifi として利用できるが、通信品質は不安定
&lt;ul>
&lt;li>スマホでテザリングもやってみたが、電波状態がよくなくてもっと不安定&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ラップトップ向きの場所ではない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>税制を身近にするイベントとしては参加してもよい&lt;/li>
&lt;li>もらった資料をたんたんと説明するだけなのでイベントに参加することで得られる付加価値はとくにない&lt;/li>
&lt;li>気分転換や時間があれば参加すればいい、忙しかったら参加しなくてもよさそう&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.nk-net.co.jp/kobe/index.html">公益社団法人 神戸納税協会&lt;/a> という組織がある。年会費 (うちの会社だと7,800円) がいるのでいまは入らないけど、無料税務相談があるので余裕ができたら困ったときの相談相手になってもらう意図で入会してもよいかもしれない。冒頭の神戸税務署長の挨拶で法人税の申告における e-tax の利用率は 88.4% だと話してた。うちは紙で申請しているので意外とみんな e-tax 使っているんだなと自社を恥じた。だって Windows マシンないとできへんねんもん。参加したことによる学びとして書いていくとこれらかな。&lt;/p>
&lt;ul>
&lt;li>「研究開発費」は会計上の用語、「試験研究費」は税法上の用語&lt;/li>
&lt;li>DX 投資促進税制の創設&lt;/li>
&lt;/ul>
&lt;p>内容は基本知らないことなので、知らないことに触れるイベントという点では斬新ではあった。ほうほうと聞いてただけなんだけど。直接うちの会社に影響を与える税法の改正はインボイス制度ぐらいかな。&lt;/p></content></item><item><title>インボイス制度への準備</title><link>/diary/posts/2021/1001/</link><pubDate>Fri, 01 Oct 2021 09:50:20 +0900</pubDate><guid>/diary/posts/2021/1001/</guid><description>夜はドラクエタクトやってて2時過ぎに寝て7時に起きた。気のせいか、日記を書くようになってから早く寝付けるようになった。まつのさんが twitter で久しぶりに Python 書いたとツィートしていて、何気なくふと Implement experimental asyncio support #101 #340 をみて、そのツールの関係者でもないのに勝手にクソリプ的なレビューコメントをした。気付いてしまったらみなかった振りするのも気持ち悪いので。
インボイス制度の準備 2023年10月1日から 消費税の軽減税率制度・適格請求書等保存方式（いわゆるインボイス制度） が開始される。開始される前に適格請求書発行事業者に登録しておく必要があり、その登録受付が今日から開始された。前に知人が教えてもらった解説動画を見返した。
ちなみにうちの会社は今期から課税事業者になるのでインボイス制度開始による益税の影響は受けない。前期の決算で消費税を算出したとき、本則課税と簡易課税なら後者の方が46%の納税金額が少なくなることがわかった。IT 業界は経費に占める人件費の割合が大きい (人件費は消費税がかからない) ので簡易課税の方が節税になるのではないかという気がする。そのため、簡易課税で申請している。一度、申請すると2年間適用され、不適用届出を出さない限りはずっと簡易課税で継続される。
国税庁の 申請手続 をみながら￼e-Tax (WEB 版) で申請した。
個人で副業を受けることを想定すると、個人でも適格請求書発行事業者に登録した方がよいのだけど、私の場合、自分の会社なので法人で仕事を受けるのと個人で仕事を受けることの違いって何だろう？とわからなくなった。法人税と個人の所得税の税率の違いの話しは一旦置いておいて、最も大きな違いは会社で仕事を受けても(直近の)給与は増えないのでその報酬を自由には使えない。個人で仕事を受けたらその報酬を自由に使えるぐらいかな？もうちょっとその違いを調べ直してから考えよう。先の youtube 動画の中で税理士さんが「免税事業者という制度をやめたらいいのに。。。」と言ってたけど、個人はどうしよう？と悩んでしまう本質は免税事業者という概念があるからというのは正しいと思う。
Terminal のカスタマイズ hugo の Shortcodes で class で任意の CSS クラスを指定できる。
{{&amp;lt; youtube id=&amp;#34;E0lOsLfj1T0&amp;#34; class=&amp;#34;video-container&amp;#34; &amp;gt;}} static/style.css をカスタムの CSS として読み込んでくれる。youtube のビデオサイズをよしなに調整するために次のスタイルを定義した。なかなか難しい。
.video-container iframe { border:0; max-width: 600px; max-height: 338px; width: 100%; height: 50vh; } Joel on Software 読み終えた。ソフトウェアの本で test of time (時の試練？) に耐えるのは相当に難しい。本書だとマネジメントや教育、ビジネスや経営に関する内容はいまでも有効でおもしろかった。また後日ブログに書評を書く。いまとなっては手放しでお勧めできる本ではないため、どういう切り口で書くかが難しい。自分にとって学びとして身につけたいと思った本はなるべく書評を書いて自分の言葉で説明できるようになっていきたい。</description><content>&lt;p>夜はドラクエタクトやってて2時過ぎに寝て7時に起きた。気のせいか、日記を書くようになってから早く寝付けるようになった。まつのさんが twitter で久しぶりに Python 書いたとツィートしていて、何気なくふと &lt;a href="https://github.com/line/line-bot-sdk-python/pull/340">Implement experimental asyncio support #101 #340&lt;/a> をみて、そのツールの関係者でもないのに勝手にクソリプ的なレビューコメントをした。気付いてしまったらみなかった振りするのも気持ち悪いので。&lt;/p>
&lt;h2 id="インボイス制度の準備">インボイス制度の準備&lt;/h2>
&lt;p>2023年10月1日から &lt;a href="https://www.nta.go.jp/taxes/shiraberu/zeimokubetsu/shohi/keigenzeiritsu/index.htm">消費税の軽減税率制度・適格請求書等保存方式（いわゆるインボイス制度）&lt;/a> が開始される。開始される前に適格請求書発行事業者に登録しておく必要があり、その登録受付が今日から開始された。前に知人が教えてもらった解説動画を見返した。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/E0lOsLfj1T0" allowfullscreen title="消費税インボイス方式対策として今からやっておくべき３つのことをお話します。【簡易課税で税負担1/2に！？】">&lt;/iframe>
&lt;/div>
&lt;p>ちなみにうちの会社は今期から課税事業者になるのでインボイス制度開始による益税の影響は受けない。前期の決算で消費税を算出したとき、本則課税と簡易課税なら後者の方が46%の納税金額が少なくなることがわかった。IT 業界は経費に占める人件費の割合が大きい (人件費は消費税がかからない) ので簡易課税の方が節税になるのではないかという気がする。そのため、簡易課税で申請している。一度、申請すると2年間適用され、不適用届出を出さない限りはずっと簡易課税で継続される。&lt;/p>
&lt;p>国税庁の &lt;a href="https://www.nta.go.jp/taxes/shiraberu/zeimokubetsu/shohi/keigenzeiritsu/invoice_shinei.htm">申請手続&lt;/a> をみながら￼e-Tax (WEB 版) で申請した。&lt;/p>
&lt;p>個人で副業を受けることを想定すると、個人でも適格請求書発行事業者に登録した方がよいのだけど、私の場合、自分の会社なので法人で仕事を受けるのと個人で仕事を受けることの違いって何だろう？とわからなくなった。法人税と個人の所得税の税率の違いの話しは一旦置いておいて、最も大きな違いは会社で仕事を受けても(直近の)給与は増えないのでその報酬を自由には使えない。個人で仕事を受けたらその報酬を自由に使えるぐらいかな？もうちょっとその違いを調べ直してから考えよう。先の youtube 動画の中で税理士さんが「免税事業者という制度をやめたらいいのに。。。」と言ってたけど、個人はどうしよう？と悩んでしまう本質は免税事業者という概念があるからというのは正しいと思う。&lt;/p>
&lt;h2 id="terminal-のカスタマイズ">Terminal のカスタマイズ&lt;/h2>
&lt;p>hugo の Shortcodes で &lt;code>class&lt;/code> で任意の CSS クラスを指定できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>{{&amp;lt; &lt;span style="color:#f92672">youtube&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;E0lOsLfj1T0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;video-container&amp;#34;&lt;/span> &amp;gt;}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>static/style.css&lt;/code> をカスタムの CSS として読み込んでくれる。youtube のビデオサイズをよしなに調整するために次のスタイルを定義した。なかなか難しい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">video-container&lt;/span> &lt;span style="color:#f92672">iframe&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">border&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">max-width&lt;/span>: &lt;span style="color:#ae81ff">600&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">max-height&lt;/span>: &lt;span style="color:#ae81ff">338&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>&lt;span style="color:#66d9ef">vh&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>読み終えた。ソフトウェアの本で test of time (時の試練？) に耐えるのは相当に難しい。本書だとマネジメントや教育、ビジネスや経営に関する内容はいまでも有効でおもしろかった。また後日ブログに書評を書く。いまとなっては手放しでお勧めできる本ではないため、どういう切り口で書くかが難しい。自分にとって学びとして身につけたいと思った本はなるべく書評を書いて自分の言葉で説明できるようになっていきたい。&lt;/p>
&lt;h2 id="カジュアル面談">カジュアル面談&lt;/h2>
&lt;p>プロジェクトマネージャーを募集している会社の CTO と面談。先方の時間が15分しかないという話しだったので事前に質問は連絡しつつ、バックエンドは Go 言語を使っているという話しだったので私が過去に書いたブログ記事やちょっと前に作った &lt;a href="https://github.com/kazamori/go-sql-executor">go-sql-executor&lt;/a> を連絡して、技術選考の参考にしてほしいと伝えた。募集要項からスクラムを採用するように読めたのでその背景を聞いたところ、外部の技術顧問が推奨しただけでとくにこだわりはないという。いまもメンバーは8人いて1週間のスプリントでスクラムっぽい運用はしているとのこと。私の言う、課題管理とイテレーション開発の概要を軽く説明しつつ、それを実践するためにプロジェクトマネージャーをやりたくて、その実践の場を探しているといった話しをした。外部の技術顧問が欠席したせいか、Go 言語の開発に関する質問はとくになかった。メンバーはすべて業務委託という話しなので寄せ集めグループのドタバタプロジェクトなんだろうなという印象を受けた。心理的安全性や一体化マネジメント法とか勉強したんで &lt;em>グループ&lt;/em> じゃなくて &lt;em>チーム&lt;/em> 開発できるマネジメントがやりたいなぁ。&lt;/p></content></item></channel></rss>