<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>security on forest nook</title><link>/diary/tags/security/</link><description>Recent content in security on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Wed, 18 Oct 2023 09:04:08 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>パスワードリセットのテストのためのガイドライン</title><link>/diary/posts/2023/1018/</link><pubDate>Wed, 18 Oct 2023 09:04:08 +0900</pubDate><guid>/diary/posts/2023/1018/</guid><description>0時に寝て何度か起きて4時に起きて仮眠して6時に起きた。あまり寝た気がしない。
OWASP のパスワードリセットのガイドライン パスワードリセットの仕組みをメンバーに開発してもらっている。そのコードレビューが先週から白熱している。セキュリティが関連するので堅牢に作る必要があるのでここはあまり妥協せきない。お手伝い先のシニアエンジニアから独自設計で作るのではなく、最低限、世の中の一般的なガイドラインに従っているかを確認するために OWASP のガイドラインを紹介してくれた。これはパスワードリセットの仕組みをテストするための要項をあげている。
Testing for Weak Password Change or Reset Functionalities これをメンバーに読んでもらって理解して実装しろと言いたいところでもあるが、私自身、読んだことがないとレビューできないことに気付いて、これは私が読んだ上で既存の設計や実装を見直すべきだと判断して deepl を駆使しながらほとんどを読んでみた。たしかに読んでみていくつか抜け・漏れに気付いたり、うちのセキュリティポリシーとして意図的に緩和しているところも認識できたりして、結論から言って読んでよかったと思う。当初はパスワードリセットのために一時トークンを1つだけ使っていたのだけど、それも2つを別々の経路に送って、割符のように組み合わせて認証する仕組みに変更した。よりセキュアにするという意図では一時トークンも1つよりも2つの方がよいというのは概ね正しいと思う。</description><content>&lt;p>0時に寝て何度か起きて4時に起きて仮眠して6時に起きた。あまり寝た気がしない。&lt;/p>
&lt;h2 id="owasp-のパスワードリセットのガイドライン">OWASP のパスワードリセットのガイドライン&lt;/h2>
&lt;p>パスワードリセットの仕組みをメンバーに開発してもらっている。そのコードレビューが先週から白熱している。セキュリティが関連するので堅牢に作る必要があるのでここはあまり妥協せきない。お手伝い先のシニアエンジニアから独自設計で作るのではなく、最低限、世の中の一般的なガイドラインに従っているかを確認するために OWASP のガイドラインを紹介してくれた。これはパスワードリセットの仕組みをテストするための要項をあげている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities">Testing for Weak Password Change or Reset Functionalities&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>これをメンバーに読んでもらって理解して実装しろと言いたいところでもあるが、私自身、読んだことがないとレビューできないことに気付いて、これは私が読んだ上で既存の設計や実装を見直すべきだと判断して deepl を駆使しながらほとんどを読んでみた。たしかに読んでみていくつか抜け・漏れに気付いたり、うちのセキュリティポリシーとして意図的に緩和しているところも認識できたりして、結論から言って読んでよかったと思う。当初はパスワードリセットのために一時トークンを1つだけ使っていたのだけど、それも2つを別々の経路に送って、割符のように組み合わせて認証する仕組みに変更した。よりセキュアにするという意図では一時トークンも1つよりも2つの方がよいというのは概ね正しいと思う。&lt;/p></content></item><item><title>ステートレスな認証という概念</title><link>/diary/posts/2023/1011/</link><pubDate>Wed, 11 Oct 2023 09:14:37 +0900</pubDate><guid>/diary/posts/2023/1011/</guid><description>0時に寝て4時ぐらいに起きてだらだらして7時半に起きた。やっぱりあまり眠れない。
ステートレスな認証という概念 次の開発フェーズが始まっていて、ちょっと時間が経ってしまったが、前開発フェーズのお披露目的な製品紹介をお手伝い先の全社向けに行った。主には直近の開発フェーズで追加した機能などを紹介した。その過程で新たに認証の仕組みを追加して jwt で認証するといった話しをしたところ、それはステートレスなのかどうかといった質問が出た。セキュリティを考慮して、アーキテクチャ的にフロントエンドの認証と api サーバーの認証は分けて実装しているのと、そのために仕組みも複雑になっているのだけど、ステートレスという言葉が指す意図を私がよくわかっていなくて、うまく説明できなかった。説明を終えた後にアーキテクチャのイメージ図と一緒に補足をしながらやり取りして次の記事を教えてもらった。
&amp;ldquo;JWT=ステートレス&amp;quot;から一歩踏み出すための考え方 jwt は暗号化の技術で認証する仕組みなので有効期限が切れるまでは有効なアクセストークンとなる。そのため、jwt のみだとログアウトという概念はないため、そこをどうしているのか？という質問だった。フロントエンド／api サーバーともに session をオンメモリで保持して、ログインしたユーザーを管理しているため、ログアウトしたら session からレコードを削除することで有効な jwt のアクセストークンが来ても認証エラーにしてしまうことでステートをもった認証方式を実現している。とくまる先生が次のように説明しているところ。
「セッションIDをJWTに内包する」 という考え方です。
うちはこれをセッション ID ではなくユーザー名でやっている。とくに難しいことをやっているわけではなく、普通に実装したらそんな感じかな？と考えていたが、jwt = ステートレス認証だと思い込んでいる人たちがいるから ストートレスな認証 というキーワードが出てきたんだなと理解できた。最近のトレンドとしてはログアウトで jwt のアクセストークンを無効にできないと脆弱性と指摘される可能性がありそうとも書いてある。
ログアウト時にJWTを無効化できない実装は今後脆弱性診断で「OWASP Top 10 2021違反」と指摘されるようになりそう(今も個別にされてるかもしれないけど)
私はアーキテクチャ的にブラウザに api サーバーのアクセストークンをみせないというところに注力して認証機能の開発をサポートしていた。それ自体も間違っていないとは思うけど、今回の質問はその工夫とは異なるところの質問だった。認証は難しい。</description><content>&lt;p>0時に寝て4時ぐらいに起きてだらだらして7時半に起きた。やっぱりあまり眠れない。&lt;/p>
&lt;h2 id="ステートレスな認証という概念">ステートレスな認証という概念&lt;/h2>
&lt;p>次の開発フェーズが始まっていて、ちょっと時間が経ってしまったが、前開発フェーズのお披露目的な製品紹介をお手伝い先の全社向けに行った。主には直近の開発フェーズで追加した機能などを紹介した。その過程で新たに認証の仕組みを追加して jwt で認証するといった話しをしたところ、それはステートレスなのかどうかといった質問が出た。セキュリティを考慮して、アーキテクチャ的にフロントエンドの認証と api サーバーの認証は分けて実装しているのと、そのために仕組みも複雑になっているのだけど、ステートレスという言葉が指す意図を私がよくわかっていなくて、うまく説明できなかった。説明を終えた後にアーキテクチャのイメージ図と一緒に補足をしながらやり取りして次の記事を教えてもらった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zenn.dev/ritou/articles/4a5d6597a5f250">&amp;ldquo;JWT=ステートレス&amp;quot;から一歩踏み出すための考え方&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>jwt は暗号化の技術で認証する仕組みなので有効期限が切れるまでは有効なアクセストークンとなる。そのため、jwt のみだとログアウトという概念はないため、そこをどうしているのか？という質問だった。フロントエンド／api サーバーともに session をオンメモリで保持して、ログインしたユーザーを管理しているため、ログアウトしたら session からレコードを削除することで有効な jwt のアクセストークンが来ても認証エラーにしてしまうことでステートをもった認証方式を実現している。とくまる先生が次のように説明しているところ。&lt;/p>
&lt;blockquote>
&lt;p>「セッションIDをJWTに内包する」 という考え方です。&lt;/p>
&lt;/blockquote>
&lt;p>うちはこれをセッション ID ではなくユーザー名でやっている。とくに難しいことをやっているわけではなく、普通に実装したらそんな感じかな？と考えていたが、jwt = ステートレス認証だと思い込んでいる人たちがいるから &lt;em>ストートレスな認証&lt;/em> というキーワードが出てきたんだなと理解できた。最近のトレンドとしてはログアウトで jwt のアクセストークンを無効にできないと脆弱性と指摘される可能性がありそうとも書いてある。&lt;/p>
&lt;blockquote>
&lt;p>ログアウト時にJWTを無効化できない実装は今後脆弱性診断で「OWASP Top 10 2021違反」と指摘されるようになりそう(今も個別にされてるかもしれないけど)&lt;/p>
&lt;/blockquote>
&lt;p>私はアーキテクチャ的にブラウザに api サーバーのアクセストークンをみせないというところに注力して認証機能の開発をサポートしていた。それ自体も間違っていないとは思うけど、今回の質問はその工夫とは異なるところの質問だった。認証は難しい。&lt;/p></content></item><item><title>縁の下のマネージャー</title><link>/diary/posts/2023/0713/</link><pubDate>Thu, 13 Jul 2023 13:39:15 +0900</pubDate><guid>/diary/posts/2023/0713/</guid><description>20時にホテルに戻ってきてのんびりしながら気付いたら22時ぐらいになって、少しテレビをみて0時に寝て4時ぐらいから起きてその後はあまり眠れなかった。それでも7時過ぎまでだらだらしていた。
7月後半に実装予定の新機能の設計 9月までに実装する新機能のうち、唯一、私の頭の中で設計の見通しをもっていなかった機能の設計を行うことにした。
ざっくりした機能概要から私がふわっと想定していたものはずっと複雑なものだったのだけど、プロダクトオーナーに要件をヒアリングしているうちにそんな高度なものは求められていないことに気付いた。逆にその高度な機能の仕組みを提供しても、実際に運用の現場で使うにあたって手間暇だけかかってそんなものを求めていないと言われそうな気がした。そこで私が作りたいなと思っていた設計のアイディアは封印することにした。既存の先行プロダクトがもっている機能とほぼ同様のものを、うちらの開発しているプロダクトで実現するだけでよさそうにみえた。そのシンプルな機能の設計を軽くやっておいた。詳細を詰めるのは次のマイルストーンで私ではないメンバーに実装してもらうことになるけれど、なんとなく当初の想定よりも早くできそうに思えた。
ログ出力のリファクタリング id 連携の処理で複雑なリソースを map 型で扱うときデバッグ用途でリソースを丸ごと dump したい。しかし、パスワードのような機密情報が含まれる場合はそれらはログに出力したくない。この処理をいまは連携種別ごとに実装していて、本質じゃないところで個別実装の手間があるのと機密情報の出力というセキュリティに関するところを毎回プログラマーが手で実装するのもどうかな？という気がして汎用のログユーティリティとしてロガーのライブラリ側で提供することにした。インフラやプラットフォーム的な機能に私は積極的に開発に介入している。
やり方の1つとしてオリジナルのリソースをコピーして機密情報だけ削除した一時的なリソースコピーを dump してログ出力する。go 1.21 で標準ライブラリに追加される maps パッケージを使うと map の操作が簡単にできる。コピー関数もある。しかし、この機能は shallow copy なので map の値にネストした map が含まれる場合はオリジナルの値を書き換えてしまう。ネストした map を調べてそれらもクローンしていく処理を実装した。excludeKeys に除外したい任意のキーを渡し、map の値を再帰的にチェックして取り除く。最終的には次のようなコピーユーティリティになった。
func copyWithoutExcludeKeys( fields map[string]any, excludeKeys []string, ) map[string]any { cloned := maps.Clone(fields) for k, v := range cloned { switch t := v.(type) { case map[string]string: strMapCloned := maps.Clone(t) for _, sk := range maps.Keys(strMapCloned) { if slices.Contains(excludeKeys, sk) { delete(strMapCloned, sk) } } cloned[k] = strMapCloned case map[string]any: cloned[k] = copyWithoutExcludeKeys(t, excludeKeys) case []map[string]any: for i, v := range t { t[i] = copyWithoutExcludeKeys(v, excludeKeys) } default: if slices.</description><content>&lt;p>20時にホテルに戻ってきてのんびりしながら気付いたら22時ぐらいになって、少しテレビをみて0時に寝て4時ぐらいから起きてその後はあまり眠れなかった。それでも7時過ぎまでだらだらしていた。&lt;/p>
&lt;h2 id="7月後半に実装予定の新機能の設計">7月後半に実装予定の新機能の設計&lt;/h2>
&lt;p>9月までに実装する新機能のうち、唯一、私の頭の中で設計の見通しをもっていなかった機能の設計を行うことにした。&lt;/p>
&lt;p>ざっくりした機能概要から私がふわっと想定していたものはずっと複雑なものだったのだけど、プロダクトオーナーに要件をヒアリングしているうちにそんな高度なものは求められていないことに気付いた。逆にその高度な機能の仕組みを提供しても、実際に運用の現場で使うにあたって手間暇だけかかってそんなものを求めていないと言われそうな気がした。そこで私が作りたいなと思っていた設計のアイディアは封印することにした。既存の先行プロダクトがもっている機能とほぼ同様のものを、うちらの開発しているプロダクトで実現するだけでよさそうにみえた。そのシンプルな機能の設計を軽くやっておいた。詳細を詰めるのは次のマイルストーンで私ではないメンバーに実装してもらうことになるけれど、なんとなく当初の想定よりも早くできそうに思えた。&lt;/p>
&lt;h2 id="ログ出力のリファクタリング">ログ出力のリファクタリング&lt;/h2>
&lt;p>id 連携の処理で複雑なリソースを map 型で扱うときデバッグ用途でリソースを丸ごと dump したい。しかし、パスワードのような機密情報が含まれる場合はそれらはログに出力したくない。この処理をいまは連携種別ごとに実装していて、本質じゃないところで個別実装の手間があるのと機密情報の出力というセキュリティに関するところを毎回プログラマーが手で実装するのもどうかな？という気がして汎用のログユーティリティとしてロガーのライブラリ側で提供することにした。インフラやプラットフォーム的な機能に私は積極的に開発に介入している。&lt;/p>
&lt;p>やり方の1つとしてオリジナルのリソースをコピーして機密情報だけ削除した一時的なリソースコピーを dump してログ出力する。go 1.21 で標準ライブラリに追加される &lt;a href="https://pkg.go.dev/golang.org/x/exp/maps">maps&lt;/a> パッケージを使うと map の操作が簡単にできる。コピー関数もある。しかし、この機能は shallow copy なので map の値にネストした map が含まれる場合はオリジナルの値を書き換えてしまう。ネストした map を調べてそれらもクローンしていく処理を実装した。excludeKeys に除外したい任意のキーを渡し、map の値を再帰的にチェックして取り除く。最終的には次のようなコピーユーティリティになった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">copyWithoutExcludeKeys&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fields&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">any&lt;/span>, &lt;span style="color:#a6e22e">excludeKeys&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">any&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cloned&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">maps&lt;/span>.&lt;span style="color:#a6e22e">Clone&lt;/span>(&lt;span style="color:#a6e22e">fields&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">cloned&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>.(&lt;span style="color:#66d9ef">type&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">strMapCloned&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">maps&lt;/span>.&lt;span style="color:#a6e22e">Clone&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">sk&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">maps&lt;/span>.&lt;span style="color:#a6e22e">Keys&lt;/span>(&lt;span style="color:#a6e22e">strMapCloned&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">slices&lt;/span>.&lt;span style="color:#a6e22e">Contains&lt;/span>(&lt;span style="color:#a6e22e">excludeKeys&lt;/span>, &lt;span style="color:#a6e22e">sk&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> delete(&lt;span style="color:#a6e22e">strMapCloned&lt;/span>, &lt;span style="color:#a6e22e">sk&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cloned&lt;/span>[&lt;span style="color:#a6e22e">k&lt;/span>] = &lt;span style="color:#a6e22e">strMapCloned&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">any&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cloned&lt;/span>[&lt;span style="color:#a6e22e">k&lt;/span>] = &lt;span style="color:#a6e22e">copyWithoutExcludeKeys&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">excludeKeys&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> []&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">any&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = &lt;span style="color:#a6e22e">copyWithoutExcludeKeys&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">excludeKeys&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">slices&lt;/span>.&lt;span style="color:#a6e22e">Contains&lt;/span>(&lt;span style="color:#a6e22e">excludeKeys&lt;/span>, &lt;span style="color:#a6e22e">k&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> delete(&lt;span style="color:#a6e22e">cloned&lt;/span>, &lt;span style="color:#a6e22e">k&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">cloned&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>yubikey bio を完全にマスターした</title><link>/diary/posts/2023/0521/</link><pubDate>Sun, 21 May 2023 13:28:53 +0900</pubDate><guid>/diary/posts/2023/0521/</guid><description>2時に寝て遅くまで飲んでいたせいか、やや吐き気もしながら朝起きてだらだらして11時ぐらいに起きた。
1password のロック解除を yubikey で行う 先日購入して触っていた yubikey bio の設定 の続き。1password のロック解除を指紋認証で行いたかったが、1password の 8.10.4 のアプリではロック解除をシステム認証で行おうとするとエラーが発生していた (バグってた) 。5月の頭に 8.10.6 がリリースされていてシステム認証のバグが直っていることに気付いた。1password のアプリケーションがどうやって linux のシステム認証を使っているかは次の1文に書いてある。
システム認証は、Linux のユーザーアカウントに組み込まれたアクセス制御機構を使用します。これは polkit と PAM (Pluggable Authentication Modules) という2つの Linux 標準に依存しています。この2つを組み合わせることで、安全な認証サービスを提供します
https://support.1password.com/system-authentication-linux/#about-system-authentication-security
私は polkit を使ったことがなくて初見でよく分かっていないが、どうやら polkit から pam を介して認証しているようにみえる。pam.d 配下の設定を調べてみると /etc/pam.d/polkit-1 がある。前回の設定で pam.d の設定とテストの方法を理解していた。ここまでくれば Module Arguments のドキュメントをみながらオプションを設定するだけ。1Password のロック解除をYubiKeyでやる の記事で origin/appid にホスト名を指定しているが、最新のモジュールだと指定しないときはデフォルトでホスト名が使われるようにみえる。
origin: FIDO 認証手順の party ID を設定する、値が指定されない場合は識別子 pam://$HOSTNAME が使用される appid: FIDO 認証手順の application ID を設定する、値を指定しない場合は origin で使用されたものと同じ値が使用される (origin も指定しない場合は pam://$HOSTNAME) nouserok: 認証しようとするユーザーが authfile 内に存在しない場合や authfile が欠落/不正確な場合でも、認証の試行を成功させるように設定する cue: タッチすることを促すメッセージを表示するように設定する これらを踏まえて u2f で認証が成功したらそれ以降の処理をスキップするように次の設定を先頭に追加する。</description><content>&lt;p>2時に寝て遅くまで飲んでいたせいか、やや吐き気もしながら朝起きてだらだらして11時ぐらいに起きた。&lt;/p>
&lt;h2 id="1password-のロック解除を-yubikey-で行う">1password のロック解除を yubikey で行う&lt;/h2>
&lt;p>先日購入して触っていた &lt;a href="/diary/diary/posts/2023/0429/#yubikey-bio-を触ってみた">yubikey bio の設定&lt;/a> の続き。1password のロック解除を指紋認証で行いたかったが、1password の 8.10.4 のアプリではロック解除をシステム認証で行おうとするとエラーが発生していた (バグってた) 。5月の頭に &lt;a href="https://releases.1password.com/linux/8.10/#1password-for-linux-8.10.6">8.10.6&lt;/a> がリリースされていてシステム認証のバグが直っていることに気付いた。1password のアプリケーションがどうやって linux のシステム認証を使っているかは次の1文に書いてある。&lt;/p>
&lt;blockquote>
&lt;p>システム認証は、Linux のユーザーアカウントに組み込まれたアクセス制御機構を使用します。これは polkit と PAM (Pluggable Authentication Modules) という2つの Linux 標準に依存しています。この2つを組み合わせることで、安全な認証サービスを提供します&lt;/p>
&lt;p>&lt;a href="https://support.1password.com/system-authentication-linux/#about-system-authentication-security">https://support.1password.com/system-authentication-linux/#about-system-authentication-security&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>私は &lt;a href="https://wiki.archlinux.org/title/Polkit">polkit&lt;/a> を使ったことがなくて初見でよく分かっていないが、どうやら polkit から pam を介して認証しているようにみえる。pam.d 配下の設定を調べてみると &lt;code>/etc/pam.d/polkit-1&lt;/code> がある。前回の設定で pam.d の設定とテストの方法を理解していた。ここまでくれば &lt;a href="https://github.com/Yubico/pam-u2f/tree/main#module-arguments">Module Arguments&lt;/a> のドキュメントをみながらオプションを設定するだけ。&lt;a href="https://yoshiori.hatenablog.com/entry/2022/02/17/173147">1Password のロック解除をYubiKeyでやる&lt;/a> の記事で origin/appid にホスト名を指定しているが、最新のモジュールだと指定しないときはデフォルトでホスト名が使われるようにみえる。&lt;/p>
&lt;ul>
&lt;li>origin: FIDO 認証手順の party ID を設定する、値が指定されない場合は識別子 &lt;code>pam://$HOSTNAME&lt;/code> が使用される&lt;/li>
&lt;li>appid: FIDO 認証手順の application ID を設定する、値を指定しない場合は origin で使用されたものと同じ値が使用される (origin も指定しない場合は &lt;code>pam://$HOSTNAME&lt;/code>)&lt;/li>
&lt;li>nouserok: 認証しようとするユーザーが &lt;code>authfile&lt;/code> 内に存在しない場合や &lt;code>authfile&lt;/code> が欠落/不正確な場合でも、認証の試行を成功させるように設定する&lt;/li>
&lt;li>cue: タッチすることを促すメッセージを表示するように設定する&lt;/li>
&lt;/ul>
&lt;p>これらを踏まえて u2f で認証が成功したらそれ以降の処理をスキップするように次の設定を先頭に追加する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo vi /etc/pam.d/polkit-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth sufficient pam_u2f.so nouserok cue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>cue を指定したことでパスワードプロンプトを表示せず、デバイスをタッチするように促される。よい感じ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ pamtester polkit-1 t2y authenticate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Please touch the device.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pamtester: successfully authenticated
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで pam の polkit の設定が正しいことを検証できる。この後に 1password のアプリケーションでロック解除するときに u2f を使って指紋認証できた。めっちゃ便利。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0521_1password-system-auth.png"/>
&lt;/figure></content></item><item><title>yubikey bio を触ってみた</title><link>/diary/posts/2023/0429/</link><pubDate>Sat, 29 Apr 2023 14:24:07 +0900</pubDate><guid>/diary/posts/2023/0429/</guid><description>3時半に寝て7時に起きた。リリース終えたので晩ご飯を食べてから自分の会社のお仕事をしていたら遅くなった。
ストレッチ 今週もリリース明けでそれほど座っている時間が長かったわけでもないため、腰の張りはあまりなく、負荷は低くなっているのではないかと推測する。今日の開脚幅は開始前156cmで、ストレッチ後158cmだった。右股関節周りの硬さは相変わらず大きく変化はないが、他がよくなった分、右ふともも前の筋を伸ばすと張りがきつくてしんどいように感じた。しばらく余裕のある生活ができるので歩いたりストレッチしたりする余裕が出てくるかもしれない。
yubikey bio を触ってみた 先日 yubikey bio をオンラインストアで購入 した。会社の経費で業務で使うことを目的に購入したのでこの場合は商用利用の輸入にあたる。また別途、輸入についての会計処理を書く。yubico はスウェーデンの会社でどうやら日本向けはスウェーデンの首都ストックホルムから発送されてきたらしい。安いエコノミープランで注文していた。発送メールを受け取ったのが 4/17 でオフィスの郵便受けに入っていることに気付いたのが 4/29 になる。12日で届いたことになる。船便にしては早いからなにかしら航空便の安いプランで届いたのだと推測する。
Economy - 10-20 Working Days - No tracking available
早速、接続していろいろ触ってみた。結論から言って ubuntu 22.04 で fido2 pin を設定して u2f を使って2要素認証のメソッドとして pam や web アプリケーションから問題なく使えた。ubuntu 向けのアプリケーションも ppa のリポジトリを追加して apt からインストールできる。
Installing Yubico Software on Linux このドキュメントには次の4つのアプリケーションのインストールが書いてある。
YubiKey Manager (CLI): sudo apt install yubikey-manager YubiKey Personalization Tool: sudo apt install yubikey-personalization-gui libpam-yubico: sudo apt install libpam-yubico libpam-u2f: sudo apt install libpam-u2f yubikey は他にもいろいろな認証の用途に使えるらしい。今回は fido2 の設定のみを紹介する。fido2 pin を登録するには YubiKey Manager の GUI を使った方が簡単なので次のアプリケーションも一緒にインストールするとよい。</description><content>&lt;p>3時半に寝て7時に起きた。リリース終えたので晩ご飯を食べてから自分の会社のお仕事をしていたら遅くなった。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週もリリース明けでそれほど座っている時間が長かったわけでもないため、腰の張りはあまりなく、負荷は低くなっているのではないかと推測する。今日の開脚幅は開始前156cmで、ストレッチ後158cmだった。右股関節周りの硬さは相変わらず大きく変化はないが、他がよくなった分、右ふともも前の筋を伸ばすと張りがきつくてしんどいように感じた。しばらく余裕のある生活ができるので歩いたりストレッチしたりする余裕が出てくるかもしれない。&lt;/p>
&lt;h2 id="yubikey-bio-を触ってみた">yubikey bio を触ってみた&lt;/h2>
&lt;p>先日 &lt;a href="/diary/diary/posts/2023/0416/#yubikey-bio-の購入">yubikey bio をオンラインストアで購入&lt;/a> した。会社の経費で業務で使うことを目的に購入したのでこの場合は商用利用の輸入にあたる。また別途、輸入についての会計処理を書く。yubico はスウェーデンの会社でどうやら日本向けはスウェーデンの首都ストックホルムから発送されてきたらしい。安いエコノミープランで注文していた。発送メールを受け取ったのが 4/17 でオフィスの郵便受けに入っていることに気付いたのが 4/29 になる。12日で届いたことになる。船便にしては早いからなにかしら航空便の安いプランで届いたのだと推測する。&lt;/p>
&lt;blockquote>
&lt;p>Economy - 10-20 Working Days - No tracking available&lt;/p>
&lt;/blockquote>
&lt;p>早速、接続していろいろ触ってみた。結論から言って ubuntu 22.04 で fido2 pin を設定して u2f を使って2要素認証のメソッドとして pam や web アプリケーションから問題なく使えた。ubuntu 向けのアプリケーションも ppa のリポジトリを追加して apt からインストールできる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://support.yubico.com/hc/en-us/articles/360016649039-Installing-Yubico-Software-on-Linux">Installing Yubico Software on Linux&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>このドキュメントには次の4つのアプリケーションのインストールが書いてある。&lt;/p>
&lt;ul>
&lt;li>YubiKey Manager (CLI): &lt;code>sudo apt install yubikey-manager&lt;/code>&lt;/li>
&lt;li>YubiKey Personalization Tool: &lt;code>sudo apt install yubikey-personalization-gui&lt;/code>&lt;/li>
&lt;li>libpam-yubico: &lt;code>sudo apt install libpam-yubico&lt;/code>&lt;/li>
&lt;li>libpam-u2f: &lt;code>sudo apt install libpam-u2f&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>yubikey は他にもいろいろな認証の用途に使えるらしい。今回は fido2 の設定のみを紹介する。fido2 pin を登録するには YubiKey Manager の GUI を使った方が簡単なので次のアプリケーションも一緒にインストールするとよい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo apt install -y yubikey-manager-qt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ykman-gui
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>おそらく ykman の cli でも登録できると思うけど、yubikey や認証設定に慣れていない初心者は gui のナビゲーションに従って作業して結果を確認した方が安心だと思う。fido2 pin は ssh でいうところのパスフレーズのようなものなのかな？デバイスが盗まれるのを防ぐために pin があるという。一方で web アプリケーションが fido2 で認証するときに pin を要求するかどうかは任意になるらしい。よくあるパターンは初めて使うときは pin を要求して2回目以降はスキップするといった用途が多いのではないかと推測する。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0429_ykman-gui1.png"/>
&lt;/figure>
&lt;p>この fido2 pin を使って &lt;a href="https://en.wikipedia.org/wiki/Universal_2nd_Factor">Universal 2nd Factor (u2f)&lt;/a> の設定を行う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ mkdir -p ~/.config/Yubico
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pamu2fcfg &amp;gt; ~/.config/Yubico/u2f_keys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Enter PIN &lt;span style="color:#66d9ef">for&lt;/span> /dev/hidraw3: *** &amp;lt;&lt;span style="color:#f92672">=&lt;/span> このときに yubikey manager で設定した fido2 pin を入力
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この後 yubikey デバイスが点滅するので丸いセンサー部分を指でタッチすると完了する。このときに指紋登録しているのか、物理的にタッチすることを要求しているだけなのか、よくわかっていない。この前に &lt;a href="https://www.yubico.com/setup/yubikey-bio-series/">chrome で指紋登録&lt;/a> をしていたのでそれが使われているのかもしれない。いま ykman で設定をみたら &lt;code>Fingerprints registered&lt;/code> とあるのでどこかしらに指紋登録されているらしい。おそらく chrome じゃないかと推測する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ykman fido info
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WARNING: PC/SC not available. Smart card &lt;span style="color:#f92672">(&lt;/span>CCID&lt;span style="color:#f92672">)&lt;/span> protocols will not &lt;span style="color:#66d9ef">function&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PIN is set, with &lt;span style="color:#ae81ff">8&lt;/span> attempt&lt;span style="color:#f92672">(&lt;/span>s&lt;span style="color:#f92672">)&lt;/span> remaining.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Fingerprints registered, with &lt;span style="color:#ae81ff">3&lt;/span> attempt&lt;span style="color:#f92672">(&lt;/span>s&lt;span style="color:#f92672">)&lt;/span> remaining.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Always Require User Verification is turned on.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>linux で認証時に u2f を使いたいときは &lt;code>pam_u2f.so&lt;/code> を使って pam の設定をするとよい。ubuntu だと &lt;code>/etc/pam.d/&lt;/code> 配下にいろんな認証設定がある。例えば login 時に2要素認証をしたい場合は次のようにフックする。パスワード入力した後に yubikey のセンサーを物理的にタッチして指紋認証を行える。セキュリティに厳しい会社はこういった運用をしているのかもしれない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo vi /etc/pam.d/login
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Standard Un*x authentication.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>@include common-auth
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth required pam_u2f.so
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>パスワード認証の代替として使いたい場合は通常の認証の前に &lt;code>sufficient&lt;/code> として呼び出せば指紋認証が成功したときにそれ以降の処理がスキップされる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>auth sufficient pam_u2f.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>@include common-auth
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これらの設定を確認にするには &lt;a href="https://pamtester.sourceforge.net/">pamtester&lt;/a> というツールを使うと簡単にできる。認証の設定を誤るとログインできなくなってしまうので慎重にテストして振る舞いを確認した上で実際の運用を行うとよい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ pamtester login t2y authenticate &amp;lt;&lt;span style="color:#f92672">=&lt;/span> このときに yubikey デバイスが点滅するので指紋認証する
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pamtester: successfully authenticated
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>せっかく購入したので 1password アカウントや github の2要素認証に設定してみた。ワンタイムパスワードの otp の代替として使える。ワンタイムパスワードを入力するより yubikey のセンサーをタッチする方が日々の運用としては少しお手軽と言える。設定していて otp と yubikey でお互いに2要素認証のバックアップを兼ねることに気付いた。認証方法が増えるのでセキュリティ的には脆弱になるけれど、サービスとセキュリティのトレードオフの考え方から、yubikey の分だけ脆弱になっても物理的なセキュリティを担保できるのであれば利便性を考慮してよいように私には思えた。&lt;/p></content></item><item><title>rsync に daemon モードがあるらしい</title><link>/diary/posts/2023/0405/</link><pubDate>Wed, 05 Apr 2023 11:24:21 +0900</pubDate><guid>/diary/posts/2023/0405/</guid><description>23時に寝て2時半に起きて4時や5時に起きて7時に起きた。泊まっているホテルの低反発枕の寝心地がよい。
rsync daemon over ssh 外部向けのドキュメントを公開するための gitlab ci/cd を構築した。web サーバにドキュメントをアップロードする手段として rsync を使っている。rsync over ssh でデータを転送するときにさらに daemon モード (rsyncd) という仕組みがあって、権限や書き込み先の acl なども細かく制御できる。手順や設定は古の古臭い雰囲気はするけれど、実用的には ssh の秘密鍵を使ってちょっと高機能なアップロードを実現できる。ssh agent で鍵登録できていれば次のような cli でセキュアに rsync できる。全然知らない方法だったので学びの1つになった。
$ rsync \ --verbose \ --rsh ssh \ --stats \ --compress-choice=zstd \ --compress-level=10 \ --itemize-changes \ --recursive \ --checksum \ --delete \ local/ ${USER}@${HOST}::${RSYNC_DIR} rsync+sshはdaemonモードを使うと更に安全になる LLMを使ってみる会 LLMを使ってみる会 に参加した。私も chatgpt に調べものやちょっとしたことを聞くようになったりしているが、他の人たちがどんな用途に使っているのかも知りたくて参加してみた。fin-py のイベントだったのでみんな金融系のドキュメントの要約に使っているのが多そうにみえた。あとは研究テーマとして gpt/llm を取り上げている人たちも何人かいた。</description><content>&lt;p>23時に寝て2時半に起きて4時や5時に起きて7時に起きた。泊まっているホテルの低反発枕の寝心地がよい。&lt;/p>
&lt;h2 id="rsync-daemon-over-ssh">rsync daemon over ssh&lt;/h2>
&lt;p>外部向けのドキュメントを公開するための gitlab ci/cd を構築した。web サーバにドキュメントをアップロードする手段として rsync を使っている。rsync over ssh でデータを転送するときにさらに daemon モード (rsyncd) という仕組みがあって、権限や書き込み先の acl なども細かく制御できる。手順や設定は古の古臭い雰囲気はするけれど、実用的には ssh の秘密鍵を使ってちょっと高機能なアップロードを実現できる。ssh agent で鍵登録できていれば次のような cli でセキュアに rsync できる。全然知らない方法だったので学びの1つになった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ rsync &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --verbose &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --rsh ssh &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --stats &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --compress-choice&lt;span style="color:#f92672">=&lt;/span>zstd &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --compress-level&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --itemize-changes &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --recursive &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --checksum &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --delete &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> local/ &lt;span style="color:#e6db74">${&lt;/span>USER&lt;span style="color:#e6db74">}&lt;/span>@&lt;span style="color:#e6db74">${&lt;/span>HOST&lt;span style="color:#e6db74">}&lt;/span>::&lt;span style="color:#e6db74">${&lt;/span>RSYNC_DIR&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;a href="https://jyn.jp/rsync-daemon-over-ssh/">rsync+sshはdaemonモードを使うと更に安全になる&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="llmを使ってみる会">LLMを使ってみる会&lt;/h2>
&lt;p>&lt;a href="https://fin-py.connpass.com/event/279271/">LLMを使ってみる会&lt;/a> に参加した。私も chatgpt に調べものやちょっとしたことを聞くようになったりしているが、他の人たちがどんな用途に使っているのかも知りたくて参加してみた。fin-py のイベントだったのでみんな金融系のドキュメントの要約に使っているのが多そうにみえた。あとは研究テーマとして gpt/llm を取り上げている人たちも何人かいた。&lt;/p></content></item><item><title>暗号化と復号化を実装してみる</title><link>/diary/posts/2023/0307/</link><pubDate>Tue, 07 Mar 2023 10:24:40 +0900</pubDate><guid>/diary/posts/2023/0307/</guid><description>不定期に寝て7時半に起きた。起きてからシャワー浴びたらしゃんとした。昨日と同様に昼間働いて、ホテルに戻ってきて2-3時間寝てから夜に2-3時間かけて次のコードを書いた。
go での暗号化/復号化 ある機密情報を扱うので暗号化して普通には「みえない」ようにしたい。まったくわからないのでググったら次の記事がみつかった。
Learn Golang encryption and decryption まずはこの記事にあるサンプルコードを動かしてみながら内容を理解する。暗号技術そのものは理解できないが、コードの振る舞いそのものは動かしながら理解できる。その後、いろいろ調べているとこのサンプルコードの大半は crypto/cipher パッケージにあるサンプルコードと同じであることに気づく。標準ライブラリのドキュメントでは iv (initialization vector) を暗号化対象の文字列の一部を切り取って生成している。iv は一意である必要はあるが、セキュアでなくてもよいとある。よくあるやり方とあるのでサンプルコードをみながら同じように実装した。
// The IV needs to be unique, but not secure. Therefore it&amp;#39;s common to // include it at the beginning of the ciphertext. 最終的な暗号化と復号化のコードは次になった。標準ライブラリにあるサンプルコードと基本的には同じ。
func Encrypt(secret string, plainText []byte) ([]byte, error) { block, err := aes.NewCipher([]byte(secret)) if err != nil { return nil, fmt.Errorf(&amp;#34;failed to create chiper: %w&amp;#34;, err) } cipherText := make([]byte, aes.</description><content>&lt;p>不定期に寝て7時半に起きた。起きてからシャワー浴びたらしゃんとした。昨日と同様に昼間働いて、ホテルに戻ってきて2-3時間寝てから夜に2-3時間かけて次のコードを書いた。&lt;/p>
&lt;h2 id="go-での暗号化復号化">go での暗号化/復号化&lt;/h2>
&lt;p>ある機密情報を扱うので暗号化して普通には「みえない」ようにしたい。まったくわからないのでググったら次の記事がみつかった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.logrocket.com/learn-golang-encryption-decryption/">Learn Golang encryption and decryption&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>まずはこの記事にあるサンプルコードを動かしてみながら内容を理解する。暗号技術そのものは理解できないが、コードの振る舞いそのものは動かしながら理解できる。その後、いろいろ調べているとこのサンプルコードの大半は &lt;a href="https://pkg.go.dev/crypto/cipher">crypto/cipher&lt;/a> パッケージにあるサンプルコードと同じであることに気づく。標準ライブラリのドキュメントでは iv (initialization vector) を暗号化対象の文字列の一部を切り取って生成している。iv は一意である必要はあるが、セキュアでなくてもよいとある。よくあるやり方とあるのでサンプルコードをみながら同じように実装した。&lt;/p>
&lt;pre tabindex="0">&lt;code>// The IV needs to be unique, but not secure. Therefore it&amp;#39;s common to
// include it at the beginning of the ciphertext.
&lt;/code>&lt;/pre>&lt;p>最終的な暗号化と復号化のコードは次になった。標準ライブラリにあるサンプルコードと基本的には同じ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Encrypt&lt;/span>(&lt;span style="color:#a6e22e">secret&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">plainText&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) ([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">block&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">aes&lt;/span>.&lt;span style="color:#a6e22e">NewCipher&lt;/span>([]byte(&lt;span style="color:#a6e22e">secret&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to create chiper: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cipherText&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">aes&lt;/span>.&lt;span style="color:#a6e22e">BlockSize&lt;/span>&lt;span style="color:#f92672">+&lt;/span>len(&lt;span style="color:#a6e22e">plainText&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">iv&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cipherText&lt;/span>[:&lt;span style="color:#a6e22e">aes&lt;/span>.&lt;span style="color:#a6e22e">BlockSize&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">ReadFull&lt;/span>(&lt;span style="color:#a6e22e">rand&lt;/span>.&lt;span style="color:#a6e22e">Reader&lt;/span>, &lt;span style="color:#a6e22e">iv&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to read for iv: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stream&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cipher&lt;/span>.&lt;span style="color:#a6e22e">NewCFBEncrypter&lt;/span>(&lt;span style="color:#a6e22e">block&lt;/span>, &lt;span style="color:#a6e22e">iv&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">XORKeyStream&lt;/span>(&lt;span style="color:#a6e22e">cipherText&lt;/span>[&lt;span style="color:#a6e22e">aes&lt;/span>.&lt;span style="color:#a6e22e">BlockSize&lt;/span>:], &lt;span style="color:#a6e22e">plainText&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">buf&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">base64&lt;/span>.&lt;span style="color:#a6e22e">StdEncoding&lt;/span>.&lt;span style="color:#a6e22e">EncodedLen&lt;/span>(len(&lt;span style="color:#a6e22e">cipherText&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">base64&lt;/span>.&lt;span style="color:#a6e22e">StdEncoding&lt;/span>.&lt;span style="color:#a6e22e">Encode&lt;/span>(&lt;span style="color:#a6e22e">buf&lt;/span>, &lt;span style="color:#a6e22e">cipherText&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">buf&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Decrypt&lt;/span>(&lt;span style="color:#a6e22e">secret&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">text&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) ([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">block&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">aes&lt;/span>.&lt;span style="color:#a6e22e">NewCipher&lt;/span>([]byte(&lt;span style="color:#a6e22e">secret&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to create chiper: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dbuf&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">byte&lt;/span>, len(&lt;span style="color:#a6e22e">text&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">n&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">base64&lt;/span>.&lt;span style="color:#a6e22e">StdEncoding&lt;/span>.&lt;span style="color:#a6e22e">Decode&lt;/span>(&lt;span style="color:#a6e22e">dbuf&lt;/span>, &lt;span style="color:#a6e22e">text&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to create chiper: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cipherText&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">dbuf&lt;/span>[:&lt;span style="color:#a6e22e">n&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">cipherText&lt;/span>) &amp;lt; &lt;span style="color:#a6e22e">aes&lt;/span>.&lt;span style="color:#a6e22e">BlockSize&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ciphertext is too short: %d&amp;#34;&lt;/span>, len(&lt;span style="color:#a6e22e">cipherText&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">iv&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cipherText&lt;/span>[:&lt;span style="color:#a6e22e">aes&lt;/span>.&lt;span style="color:#a6e22e">BlockSize&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cipherText&lt;/span> = &lt;span style="color:#a6e22e">cipherText&lt;/span>[&lt;span style="color:#a6e22e">aes&lt;/span>.&lt;span style="color:#a6e22e">BlockSize&lt;/span>:]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stream&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cipher&lt;/span>.&lt;span style="color:#a6e22e">NewCFBDecrypter&lt;/span>(&lt;span style="color:#a6e22e">block&lt;/span>, &lt;span style="color:#a6e22e">iv&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// XORKeyStream can work in-place if the two arguments are the same.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">XORKeyStream&lt;/span>(&lt;span style="color:#a6e22e">cipherText&lt;/span>, &lt;span style="color:#a6e22e">cipherText&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">cipherText&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>cookie の secure 属性と localhost</title><link>/diary/posts/2023/0213/</link><pubDate>Mon, 13 Feb 2023 19:40:54 +0900</pubDate><guid>/diary/posts/2023/0213/</guid><description>0時に寝て6時半に起きて7時半に起きて9時過ぎに起きた。普通は明け方に2度寝して起きるのになぜか3度寝して寝坊した。慌てて準備してオフィス行って業務開始が9時半をまわってしまった。年に1回ぐらい意味なく寝坊することもある。こういうことがあるから他人がなにか意図しない失敗しても寛容になれる。
cookie の secure 属性 以前たまたま Meety脆弱性 2022-11 をみたときに認証 cookie に secure 属性が使われていないという指摘をみかけた。http でログインするときに cookie にセッション情報を保存してしまうと、平文でセッション情報が流れてしまうのでセキュリティ的によくない。具体的な攻撃方法としては wifi の通信をパケットキャプチャするとか、ルーター (カフェの無料 wifi とか) で中間者攻撃 (man in the middle) などのセキュリティ上の懸念がある。その対策としては cookie の secure 属性を付けておくと、http のときはセッション情報をブラウザに保存しなくなるのでログインできなくなる代わりにそういった攻撃から守れるようになる。フロントエンドのセキュリティのお作法みたいなものにみえたので覚えていた。
ちょうど管理画面のログイン機能をメンバーに実装してもらったところなのでその対応をしているかどうかをメンバーに確認していた。メンバーもその認識はもっていて環境変数の設定で切り替えられるように実装していた。テスト環境にデプロイするときにその設定を有効にしてもらって、私が意図した振る舞いをしているかどうか、テスト環境にアクセスして検証していた。しかし、secure 属性が付いていることは確認したものの、http でもセッション情報がブラウザに保存されていて、あれー？って感じで検証していた。メンバーは保存されないという。
localhost は例外
ブラウザによっては localhost だと httpsの要件が無視されるとのことでした。
CookieのSameSite属性とSecure属性について
この記事によると localhost だと適用外になるブラウザがあるんだと気付いた。たまたま私が ssh の port-forwarding 経由でテスト環境にアクセスしていたので localhost 経由のアクセスになっていた。これは開発時は http でも動くようにすることで環境変数で切り替えるといった、それ自体がセキュリティインシデントになり得る設定をもたないようにするための、ブラウザベンダーの配慮だろう。chrome はそういう振る舞いをしていることを私は確認できた。</description><content>&lt;p>0時に寝て6時半に起きて7時半に起きて9時過ぎに起きた。普通は明け方に2度寝して起きるのになぜか3度寝して寝坊した。慌てて準備してオフィス行って業務開始が9時半をまわってしまった。年に1回ぐらい意味なく寝坊することもある。こういうことがあるから他人がなにか意図しない失敗しても寛容になれる。&lt;/p>
&lt;h2 id="cookie-の-secure-属性">cookie の secure 属性&lt;/h2>
&lt;p>以前たまたま &lt;a href="https://gist.github.com/mala/39650fd9cb41bf58d305a8b311b31ff1">Meety脆弱性 2022-11&lt;/a> をみたときに認証 cookie に secure 属性が使われていないという指摘をみかけた。http でログインするときに cookie にセッション情報を保存してしまうと、平文でセッション情報が流れてしまうのでセキュリティ的によくない。具体的な攻撃方法としては wifi の通信をパケットキャプチャするとか、ルーター (カフェの無料 wifi とか) で中間者攻撃 (man in the middle) などのセキュリティ上の懸念がある。その対策としては cookie の secure 属性を付けておくと、http のときはセッション情報をブラウザに保存しなくなるのでログインできなくなる代わりにそういった攻撃から守れるようになる。フロントエンドのセキュリティのお作法みたいなものにみえたので覚えていた。&lt;/p>
&lt;p>ちょうど管理画面のログイン機能をメンバーに実装してもらったところなのでその対応をしているかどうかをメンバーに確認していた。メンバーもその認識はもっていて環境変数の設定で切り替えられるように実装していた。テスト環境にデプロイするときにその設定を有効にしてもらって、私が意図した振る舞いをしているかどうか、テスト環境にアクセスして検証していた。しかし、secure 属性が付いていることは確認したものの、http でもセッション情報がブラウザに保存されていて、あれー？って感じで検証していた。メンバーは保存されないという。&lt;/p>
&lt;blockquote>
&lt;p>localhost は例外&lt;/p>
&lt;p>ブラウザによっては localhost だと httpsの要件が無視されるとのことでした。&lt;/p>
&lt;p>&lt;a href="https://blog.prevent.co.jp/entry/2022/05/20/094427">CookieのSameSite属性とSecure属性について&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>この記事によると localhost だと適用外になるブラウザがあるんだと気付いた。たまたま私が ssh の port-forwarding 経由でテスト環境にアクセスしていたので localhost 経由のアクセスになっていた。これは開発時は http でも動くようにすることで環境変数で切り替えるといった、それ自体がセキュリティインシデントになり得る設定をもたないようにするための、ブラウザベンダーの配慮だろう。chrome はそういう振る舞いをしていることを私は確認できた。&lt;/p></content></item><item><title>v-html は使わなくてもよい</title><link>/diary/posts/2022/0829/</link><pubDate>Mon, 29 Aug 2022 15:01:09 +0900</pubDate><guid>/diary/posts/2022/0829/</guid><description>0時に寝て7時に起きた。また日曜日は寝てた。
任意のカラムの書き換え v-data-table の、あるセルが複雑なデータをもっていて、単純にその値を表示するのではなく、一定の構造化やレイアウトを調整した状態で表示したい。セル内の構造を書き換える方法を私は知らなかったので v-html という api を使って書き換えればよいのだと思った。しかし、これは間違いだった。間違いの訂正は翌日にやるとして仮に v-html を使うとしても xss の懸念があるのでスクリプトをエスケープしてあげないといけない。Sanitize v-html #6333 でも議論されていて vue3 はデフォルトでエスケープする仕組みが入るのかな？vue2 だと sanitize-html を使って次のようにラップすればいいと書いてあった。実際に動かしてみるとスクリプトを実行できたので v-html は危険だというのはわかった。
&amp;lt;div v-html=&amp;#34;$sanitize(value)&amp;#34; /&amp;gt; この仕組みを作って pr でレビューしてもらっていたら、カラムの構造を書き換えたいだけなら slots を使えば普通にできると教えてもらった。また明日へ。</description><content>&lt;p>0時に寝て7時に起きた。また日曜日は寝てた。&lt;/p>
&lt;h2 id="任意のカラムの書き換え">任意のカラムの書き換え&lt;/h2>
&lt;p>v-data-table の、あるセルが複雑なデータをもっていて、単純にその値を表示するのではなく、一定の構造化やレイアウトを調整した状態で表示したい。セル内の構造を書き換える方法を私は知らなかったので &lt;a href="https://v2.vuejs.org/v2/api/#v-html">v-html&lt;/a> という api を使って書き換えればよいのだと思った。しかし、これは間違いだった。間違いの訂正は翌日にやるとして仮に v-html を使うとしても xss の懸念があるのでスクリプトをエスケープしてあげないといけない。&lt;a href="https://github.com/vuejs/vue/issues/6333">Sanitize v-html #6333&lt;/a> でも議論されていて vue3 はデフォルトでエスケープする仕組みが入るのかな？vue2 だと &lt;a href="https://www.npmjs.com/package/sanitize-html">sanitize-html&lt;/a> を使って次のようにラップすればいいと書いてあった。実際に動かしてみるとスクリプトを実行できたので v-html は危険だというのはわかった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;div&lt;/span> &lt;span style="color:#a6e22e">v-html=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;$sanitize(value)&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この仕組みを作って pr でレビューしてもらっていたら、カラムの構造を書き換えたいだけなら &lt;a href="https://v2.vuejs.org/v2/guide/components-slots.html">slots&lt;/a> を使えば普通にできると教えてもらった。また明日へ。&lt;/p></content></item><item><title>jvm の脆弱性対応</title><link>/diary/posts/2022/0428/</link><pubDate>Thu, 28 Apr 2022 09:58:20 +0900</pubDate><guid>/diary/posts/2022/0428/</guid><description>23時に寝て3時に起きて5時に起きて7時に起きた。なんか調子が微妙。
jvm の脆弱性対応 少し前だけど、jvm のセキュリティアナウンスがあった。
OpenJDK Vulnerability Advisory: 2022/04/19 java 11 向けの docker イメージのビルドはあまり緊急度が高くなかったせいか、17よりは優先度が低かったようにみえる。docker イメージビルドの作業状況は次の issue で管理されている。
April 2022 Release Status per Platform, Version &amp;amp; Binary Type #140 これまで adoptopenjdk/openjdk11:alpine-jre という docker イメージを使っていた。Transition to Eclipse - An Update によると、Eclipse Temurin という組織が管理する Adoptium というプロジェクトに移管されたらしい。この機会に docker イメージも eclipse-temurin:11-jre-alpine に移行した。</description><content>&lt;p>23時に寝て3時に起きて5時に起きて7時に起きた。なんか調子が微妙。&lt;/p>
&lt;h2 id="jvm-の脆弱性対応">jvm の脆弱性対応&lt;/h2>
&lt;p>少し前だけど、jvm のセキュリティアナウンスがあった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://openjdk.java.net/groups/vulnerability/advisories/2022-04-19">OpenJDK Vulnerability Advisory: 2022/04/19&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>java 11 向けの docker イメージのビルドはあまり緊急度が高くなかったせいか、17よりは優先度が低かったようにみえる。docker イメージビルドの作業状況は次の issue で管理されている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/adoptium/adoptium/issues/140">April 2022 Release Status per Platform, Version &amp;amp; Binary Type #140&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>これまで &lt;a href="https://hub.docker.com/r/adoptopenjdk/openjdk11/tags?page=1&amp;amp;name=alpine-jre">adoptopenjdk/openjdk11:alpine-jre&lt;/a> という docker イメージを使っていた。&lt;a href="https://blog.adoptopenjdk.net/2021/03/transition-to-eclipse-an-update/">Transition to Eclipse - An Update&lt;/a> によると、Eclipse Temurin という組織が管理する &lt;a href="https://adoptium.net/">Adoptium&lt;/a> というプロジェクトに移管されたらしい。この機会に docker イメージも &lt;a href="https://hub.docker.com/_/eclipse-temurin?tab=tags&amp;amp;page=1&amp;amp;name=11-jre-alpine">eclipse-temurin:11-jre-alpine&lt;/a> に移行した。&lt;/p></content></item><item><title>お花見の場所探し</title><link>/diary/posts/2022/0401/</link><pubDate>Fri, 01 Apr 2022 15:55:25 +0900</pubDate><guid>/diary/posts/2022/0401/</guid><description>0時に寝て5時過ぎに起きた。
spring framework の脆弱性対応 起きてタイムライン眺めてたら spring framework の脆弱性の公式アナウンスが出ていたのですぐに準備してオフィス行って7時前から脆弱性対応の作業をしてた。
Spring Framework RCE, Early Announcement 大学の研究室にいた頃、root staff と呼ばれるシステム管理者をやっていた。研究室のネットワークをすべて freebsd で自分たちで構築していたので os の脆弱性が公表されると研究室のすべての os のパッチ適用をやっていた。具体的にはパッチの当たった kernel をビルドして再起動するといった作業。
それを2年間やっていたせいか、脆弱性情報が公開されるとすぐに対応する癖みたいなものがついた。7時前から作業して検証して7時11分に PR を作成した。レビューアは誰も作業を始めてないけど。金曜日は非稼働日なので私が作業しなくてもよいのだけど、ここまでやったら安心して他の作業に移ることができた。
生田川公園の桜 地元のコミュニティでオミクロン株の感染が落ち着いてきたのでリアルお花見をしたいねという話題があがっている。私自身、お花見に毎年参加するような人間でもないけれど、たしかにコロナ禍になってからはお花見やってないだろうし、個人的にも数年はお花見やってないからやってもいいかなという気持ちにはなった。近場だと 生田川公園 という場所があり、特筆するほど桜がとてもきれいという場所ではないが、一応は桜があって、お花見するスペースもあって、形としては成り立つようなところ。お仕事を終えてから自転車で開花状況を見に行った。19時頃に行って寒くても何組かはお花見している集団はいた。開花状況は7-8割といったところかな。今週末から来週にかけてぐらいが見頃だと思う。</description><content>&lt;p>0時に寝て5時過ぎに起きた。&lt;/p>
&lt;h2 id="spring-framework-の脆弱性対応">spring framework の脆弱性対応&lt;/h2>
&lt;p>起きてタイムライン眺めてたら spring framework の脆弱性の公式アナウンスが出ていたのですぐに準備してオフィス行って7時前から脆弱性対応の作業をしてた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement">Spring Framework RCE, Early Announcement&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>大学の研究室にいた頃、root staff と呼ばれるシステム管理者をやっていた。研究室のネットワークをすべて freebsd で自分たちで構築していたので os の脆弱性が公表されると研究室のすべての os のパッチ適用をやっていた。具体的にはパッチの当たった kernel をビルドして再起動するといった作業。&lt;/p>
&lt;p>それを2年間やっていたせいか、脆弱性情報が公開されるとすぐに対応する癖みたいなものがついた。7時前から作業して検証して7時11分に PR を作成した。レビューアは誰も作業を始めてないけど。金曜日は非稼働日なので私が作業しなくてもよいのだけど、ここまでやったら安心して他の作業に移ることができた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0401_springframework.png"/>
&lt;/figure>
&lt;h2 id="生田川公園の桜">生田川公園の桜&lt;/h2>
&lt;p>地元のコミュニティでオミクロン株の感染が落ち着いてきたのでリアルお花見をしたいねという話題があがっている。私自身、お花見に毎年参加するような人間でもないけれど、たしかにコロナ禍になってからはお花見やってないだろうし、個人的にも数年はお花見やってないからやってもいいかなという気持ちにはなった。近場だと &lt;a href="https://www.kobe-park.or.jp/kouen_keikaku/2018/11/05/%E7%94%9F%E7%94%B0%E5%B7%9D%E5%85%AC%E5%9C%92/">生田川公園&lt;/a> という場所があり、特筆するほど桜がとてもきれいという場所ではないが、一応は桜があって、お花見するスペースもあって、形としては成り立つようなところ。お仕事を終えてから自転車で開花状況を見に行った。19時頃に行って寒くても何組かはお花見している集団はいた。開花状況は7-8割といったところかな。今週末から来週にかけてぐらいが見頃だと思う。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2022/0401_park1.jpg"/>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2022/0401_park2.jpg"/>
&lt;/figure>
&lt;/p></content></item><item><title>log4j2 セキュリティ対応</title><link>/diary/posts/2021/1213/</link><pubDate>Mon, 13 Dec 2021 08:21:13 +0900</pubDate><guid>/diary/posts/2021/1213/</guid><description>23時に寝て5時に起きたが、だらだらしているうちに2度寝して6時半に起きた。
log4j2 セキュリティ対応 CVE-2021-44228 が金曜日のお昼から私のタイムラインを賑わしている。私がお手伝いしているお仕事はイントラのシステムなのでやや余裕をもって情報を眺めていた。issue のコメント をみても log4j 1.x にも影響があると書かれて、その後に実際には影響ないと書かれて、さらにその後に条件付きだけど影響はあると二転三転してた。自分で実際に試してなくて世の中の開発者の情報をみているだけ。そのため、公式の情報を信頼するといったポジションでしかない。関係者の方々には敬意を払いたい。私は spring の公式ブログで公開されている Log4J2 Vulnerability and Spring Boot を読みながら対応した。
ターコイズ ふとしたきっかけで ターコイズ の記事を読んだ。12月の誕生石らしく、それでいまの時期に紹介されることも多いのだと推測する。別の記事でターコイズは喉によいと書かれていて、以前 喉に違和感がある ことを書いた。日常生活に困るほどではないけど、もうこの歳だから体調が良くなることはなく悪くなる一方だろうという見通しも含めて験担ぎのような感覚で喉というキーワードでつながったから購入してみた。
近所の原石屋さんに行って尋ねてみたら1-2cmぐらいのサイズ1個240円ほどで売っていたので3個買って、近所のダイソーで入れものを買って、それっぽくオフィスに置いておくことにした。うちのコーポレートカラーはグリーンとブルーなんだけど、ターコイズも ターコイズグリーン と ターコイズブルー の2種類の色がある。創業も12月なので誕生石としても合致する。共通点があって相性がよさそうなのでうちのコーポレートストーン (そんな言葉ない) はターコイズでいいや。</description><content>&lt;p>23時に寝て5時に起きたが、だらだらしているうちに2度寝して6時半に起きた。&lt;/p>
&lt;h2 id="log4j2-セキュリティ対応">log4j2 セキュリティ対応&lt;/h2>
&lt;p>&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228">CVE-2021-44228&lt;/a> が金曜日のお昼から私のタイムラインを賑わしている。私がお手伝いしているお仕事はイントラのシステムなのでやや余裕をもって情報を眺めていた。&lt;a href="https://github.com/apache/logging-log4j2/pull/608#issuecomment-990494126">issue のコメント&lt;/a> をみても log4j 1.x にも影響があると書かれて、その後に実際には影響ないと書かれて、さらにその後に条件付きだけど影響はあると二転三転してた。自分で実際に試してなくて世の中の開発者の情報をみているだけ。そのため、公式の情報を信頼するといったポジションでしかない。関係者の方々には敬意を払いたい。私は spring の公式ブログで公開されている &lt;a href="https://spring.io/blog/2021/12/10/log4j2-vulnerability-and-spring-boot">Log4J2 Vulnerability and Spring Boot&lt;/a> を読みながら対応した。&lt;/p>
&lt;h2 id="ターコイズ">ターコイズ&lt;/h2>
&lt;p>ふとしたきっかけで &lt;a href="https://www.fu-stone.com/blog/turquoise/">ターコイズ&lt;/a> の記事を読んだ。12月の誕生石らしく、それでいまの時期に紹介されることも多いのだと推測する。別の記事でターコイズは喉によいと書かれていて、以前 &lt;a href="/diary/diary/posts/2021/1114/#傾斜枕">喉に違和感がある&lt;/a> ことを書いた。日常生活に困るほどではないけど、もうこの歳だから体調が良くなることはなく悪くなる一方だろうという見通しも含めて験担ぎのような感覚で喉というキーワードでつながったから購入してみた。&lt;/p>
&lt;p>近所の原石屋さんに行って尋ねてみたら1-2cmぐらいのサイズ1個240円ほどで売っていたので3個買って、近所のダイソーで入れものを買って、それっぽくオフィスに置いておくことにした。うちのコーポレートカラーはグリーンとブルーなんだけど、ターコイズも &lt;a href="https://www.colordic.org/colorscheme/4115">ターコイズグリーン&lt;/a> と &lt;a href="https://www.colordic.org/colorscheme/4129">ターコイズブルー&lt;/a> の2種類の色がある。創業も12月なので誕生石としても合致する。共通点があって相性がよさそうなのでうちのコーポレートストーン (そんな言葉ない) はターコイズでいいや。&lt;/p></content></item></channel></rss>