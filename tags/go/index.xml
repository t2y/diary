<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on forest nook</title><link>/diary/tags/go/</link><description>Recent content in go on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Mon, 27 Mar 2023 08:09:28 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>docker/compose のモジュールの使い方がわかってきた</title><link>/diary/posts/2023/0327/</link><pubDate>Mon, 27 Mar 2023 08:09:28 +0900</pubDate><guid>/diary/posts/2023/0327/</guid><description>0時に寝て7時に起きた。前日はバテてだらだらしていたので寝過ぎた。
案ずるよりもツールできた 先週末に docker/compose 関連のライブラリ調査 を終えて実際のツール作りをしていた。本当は日曜日に作ってしまおうと思いつつ休んでしまった。なぜか今日はメンバーが全員お休みでチームで私しか働いていなかった。年度末で有休消化しているのかな？問い合わせ対応やメンバーのサポートが不要だったので1日中、自分の開発に集中できた。そして開発に集中できた結果、一通りツールの機能の開発を終えられた。火曜日までには仕上げたいと思っていたのでぎりぎり間に合った。
最終的に testcontainers-go の compose モジュールを使うのは断念して compose cli のみ go 標準の os/exec パッケージを使ってプロセスを fork するようにした。また docker image をコンテナレジストリから取得するときに認証が必要な場合、最初の docker login すると credentials store にパスワード (またはトークン) 情報が記録される。設定情報は $HOME/.docker/config.json からも確認できる。この仕組みを使ってコンテナレジストリへのログインを自動化できる。私の環境では macbook に docker desktop をインストールしているが、普通に使っていると次のように credentials が保存されてその内容を確認できる。
$ docker-credential-desktop list | jq . { &amp;#34;https://index.docker.io/v1/&amp;#34;: &amp;#34;t2y1979&amp;#34;, &amp;#34;https://index.docker.io/v1/access-token&amp;#34;: &amp;#34;t2y1979&amp;#34;, &amp;#34;https://index.docker.io/v1/refresh-token&amp;#34;: &amp;#34;t2y1979&amp;#34; } $ echo &amp;#34;https://index.docker.io/v1/access-token&amp;#34; | docker-credential-desktop get {&amp;#34;ServerURL&amp;#34;:&amp;#34;https://index.docker.io/v1/access-token&amp;#34;,&amp;#34;Username&amp;#34;:&amp;#34;t2y1979&amp;#34;,&amp;#34;Secret&amp;#34;:&amp;#34;***&amp;#34;} これと同じことを docker のライブラリで行うには次のようにする。取得したい docker image の uri を参照すればコンテナレジストリがわかる。そこからこの cli でやっているようなことを順番にやっていけばよい。これらのユーティリティは3つのリポジトリで管理されていて、この雰囲気をみただけでもこのモジュール分割が本当に適切なんやろか？とか思ったりもする。</description><content>&lt;p>0時に寝て7時に起きた。前日はバテてだらだらしていたので寝過ぎた。&lt;/p>
&lt;h2 id="案ずるよりもツールできた">案ずるよりもツールできた&lt;/h2>
&lt;p>先週末に &lt;a href="/diary/diary/posts/2023/0324/">docker/compose 関連のライブラリ調査&lt;/a> を終えて実際のツール作りをしていた。本当は日曜日に作ってしまおうと思いつつ休んでしまった。なぜか今日はメンバーが全員お休みでチームで私しか働いていなかった。年度末で有休消化しているのかな？問い合わせ対応やメンバーのサポートが不要だったので1日中、自分の開発に集中できた。そして開発に集中できた結果、一通りツールの機能の開発を終えられた。火曜日までには仕上げたいと思っていたのでぎりぎり間に合った。&lt;/p>
&lt;p>最終的に testcontainers-go の compose モジュールを使うのは断念して compose cli のみ go 標準の &lt;a href="https://pkg.go.dev/os/exec">os/exec&lt;/a> パッケージを使ってプロセスを fork するようにした。また docker image をコンテナレジストリから取得するときに認証が必要な場合、最初の &lt;a href="https://docs.docker.com/engine/reference/commandline/login/">docker login&lt;/a> すると credentials store にパスワード (またはトークン) 情報が記録される。設定情報は &lt;code>$HOME/.docker/config.json&lt;/code> からも確認できる。この仕組みを使ってコンテナレジストリへのログインを自動化できる。私の環境では macbook に docker desktop をインストールしているが、普通に使っていると次のように credentials が保存されてその内容を確認できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker-credential-desktop list | jq .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;https://index.docker.io/v1/&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;t2y1979&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;https://index.docker.io/v1/access-token&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;t2y1979&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;https://index.docker.io/v1/refresh-token&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;t2y1979&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#e6db74">&amp;#34;https://index.docker.io/v1/access-token&amp;#34;&lt;/span> | docker-credential-desktop get
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ServerURL&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;https://index.docker.io/v1/access-token&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;Username&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;t2y1979&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;Secret&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;***&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これと同じことを docker のライブラリで行うには次のようにする。取得したい docker image の uri を参照すればコンテナレジストリがわかる。そこからこの cli でやっているようなことを順番にやっていけばよい。これらのユーティリティは3つのリポジトリで管理されていて、この雰囲気をみただけでもこのモジュール分割が本当に適切なんやろか？とか思ったりもする。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/distribution/distribution">https://github.com/distribution/distribution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/docker/cli">https://github.com/docker/cli&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/moby/moby">https://github.com/moby/moby&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">getRegistryAuthFromImage&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">imageURI&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) (&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ref&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reference&lt;/span>.&lt;span style="color:#a6e22e">ParseNormalizedNamed&lt;/span>(&lt;span style="color:#a6e22e">imageURI&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to parse image uri: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">repo&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">registry&lt;/span>.&lt;span style="color:#a6e22e">ParseRepositoryInfo&lt;/span>(&lt;span style="color:#a6e22e">ref&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to parse repository: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dcli&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">command&lt;/span>.&lt;span style="color:#a6e22e">NewDockerCli&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to create docker cli: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">auth&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">command&lt;/span>.&lt;span style="color:#a6e22e">ResolveAuthConfig&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">dcli&lt;/span>, &lt;span style="color:#a6e22e">repo&lt;/span>.&lt;span style="color:#a6e22e">Index&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">encoded&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">command&lt;/span>.&lt;span style="color:#a6e22e">EncodeAuthToBase64&lt;/span>(&lt;span style="color:#a6e22e">auth&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to encode auth: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">encoded&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>プライベートリポジトリの go アプリケーションの依存解決</title><link>/diary/posts/2023/0322/</link><pubDate>Wed, 22 Mar 2023 16:38:30 +0900</pubDate><guid>/diary/posts/2023/0322/</guid><description>0時に寝て6時半に起きた。面倒なお仕事を朝から集中して片づけた。
go.mod のプライベートリポジトリの依存解決 非公開のプライベートリポジトリで開発している go アプリケーションを他のリポジトリから依存ライブラリとして使う方法を調べた。go modules は基本的に公開されたパブリックなリポジトリを前提としている。go.mod のワークフローで他の依存ライブラリと同様にバージョン管理ができるようにするには、プライベートリポジトリであることを go.mod に認識させ、トークンなどを使って認証する必要がある。
go 1.13 から GOPROXY と GOPRIVATE という環境変数が追加された。デフォルトでは GOPROXY は https://proxy.golang.org に設定されており、このプロキシサーバー経由で依存ライブラリを取得する。これは公開リポジトリを、ある日、作者が急に削除したり非公開にしたときにビルドできないといった問題を防ぐために依存ライブラリのリポジトリをキャッシュしてくれる役割を担っている。
一方でインターネット上のプロキシサーバーからはプライベートリポジトリへアクセスできないので GOPRIVATE を設定してアクセスできないサイトを go.mod へ教えてあげる必要がある。
$ go env -w GOPRIVATE=&amp;#34;private.repo.jp&amp;#34; $ go env | grep GOPRIVATE GOPRIVATE=&amp;#34;private.repo.jp&amp;#34; 通常 go.mod は https で依存ライブラリをリポジトリから取得 (クローン) しようとする。このときに git の設定を変更することで特定のサイトへのアクセスを ssh 経由に変更できる。次の例では https://private.repo.jp へのアクセスをすべて ssh://git@private.repo.jp でクローンできる。
$ git config --global url.&amp;#34;ssh://git@private.repo.jp&amp;#34;.insteadOf &amp;#34;https://private.repo.jp&amp;#34;` $ tail -n 2 ~/.gitconfig [url &amp;#34;ssh://git@gitlab.osstech.co.jp&amp;#34;] insteadOf = https://gitlab.osstech.co.jp これで git リポジトリのクローンは ssh で行われるようになるが、go.</description><content>&lt;p>0時に寝て6時半に起きた。面倒なお仕事を朝から集中して片づけた。&lt;/p>
&lt;h2 id="gomod-のプライベートリポジトリの依存解決">go.mod のプライベートリポジトリの依存解決&lt;/h2>
&lt;p>非公開のプライベートリポジトリで開発している go アプリケーションを他のリポジトリから依存ライブラリとして使う方法を調べた。go modules は基本的に公開されたパブリックなリポジトリを前提としている。go.mod のワークフローで他の依存ライブラリと同様にバージョン管理ができるようにするには、プライベートリポジトリであることを go.mod に認識させ、トークンなどを使って認証する必要がある。&lt;/p>
&lt;p>&lt;a href="https://go.dev/doc/go1.13">go 1.13&lt;/a> から &lt;code>GOPROXY&lt;/code> と &lt;code>GOPRIVATE&lt;/code> という環境変数が追加された。デフォルトでは GOPROXY は &lt;a href="https://proxy.golang.org">https://proxy.golang.org&lt;/a> に設定されており、このプロキシサーバー経由で依存ライブラリを取得する。これは公開リポジトリを、ある日、作者が急に削除したり非公開にしたときにビルドできないといった問題を防ぐために依存ライブラリのリポジトリをキャッシュしてくれる役割を担っている。&lt;/p>
&lt;p>一方でインターネット上のプロキシサーバーからはプライベートリポジトリへアクセスできないので &lt;code>GOPRIVATE&lt;/code> を設定してアクセスできないサイトを go.mod へ教えてあげる必要がある。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go env -w GOPRIVATE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;private.repo.jp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ go env | grep GOPRIVATE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GOPRIVATE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;private.repo.jp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通常 go.mod は https で依存ライブラリをリポジトリから取得 (クローン) しようとする。このときに git の設定を変更することで特定のサイトへのアクセスを ssh 経由に変更できる。次の例では &lt;code>https://private.repo.jp&lt;/code> へのアクセスをすべて &lt;code>ssh://git@private.repo.jp&lt;/code> でクローンできる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git config --global url.&lt;span style="color:#e6db74">&amp;#34;ssh://git@private.repo.jp&amp;#34;&lt;/span>.insteadOf &lt;span style="color:#e6db74">&amp;#34;https://private.repo.jp&amp;#34;&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ tail -n &lt;span style="color:#ae81ff">2&lt;/span> ~/.gitconfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>url &lt;span style="color:#e6db74">&amp;#34;ssh://git@gitlab.osstech.co.jp&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> insteadOf &lt;span style="color:#f92672">=&lt;/span> https://gitlab.osstech.co.jp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで git リポジトリのクローンは ssh で行われるようになるが、go.mod のワークフローでは https でもアクセスする処理があるようにみえる。https でもアクセスできるように PAT などのトークンを取得して次のように &lt;code>~/.netrc&lt;/code> に https でプライベートリポジトリへアクセスするための認証設定を追加する。&lt;/p>
&lt;pre tabindex="0">&lt;code>machine private.repo.jp
login t2y
password ${PERSONAL_ACCESS_TOKEN}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-a-private-go-module-in-your-own-project">How to Use a Private Go Module in Your Own Project&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://erwinvaneyk.nl/private-repositories-with-go-mod/">How to use private repositories with Go modules&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="コワーキングのオンラインイベント">コワーキングのオンラインイベント&lt;/h2>
&lt;p>月例のカフーツさんのオンラインイベントに参加した。&lt;a href="/diary/diary/posts/2023/0215/#コワーキングのオンラインイベント">先月の所感はここ&lt;/a> 。いとうさんの近況を把握していないが、どうやらバリ島 (インドネシア) のコワーキングスペースをいくつか訪問してきたらしい。その旅程を写真をみながらふりかえるようなイベントだった。バリ島の自然や建物の雰囲気が伺えてとてもおもしろかった。&lt;/p>
&lt;p>いとうさんからバリ島はデジタルノマドの先進的な取り組みをしているように聞いていた。例えば &lt;a href="https://cosmicalz.com/indonesianomadvisaunderconsideration">バリ島でリモートも可能!?インドネシアのノマドビザは最長5年を検討中&lt;/a> にあるように最長5年のビザを用意しているという話しが日本で盛り上がっているが、現地ではまだ正式にそのようなビザがあるようには存在が確認されていないらしい。それに近い長期のビザを取得するには、一定の金融資産があることを証明しないといけないらしく、日本円だと数千万円程度ないとビザを取得できないのではないか？といった話題もあったと思う。基本的にインドネシア政府は海外から金持ちを呼び込みたいらしく、金持ち向けに待遇のよいビザを整備するのではないかとのこと。ビザの話しはともかく、ここ2-3年でバリ島のコワーキングスペースもいくつか廃業しているらしい。それは利用者の大半が外国人であったため、コロナ禍により、インドネシア政府からの要請もあって外国人に帰国を促したという。外国人利用者の半分ぐらいが自分たちの国に帰ってしまい、施設の運用コストを維持できなくなった。バリ島は今後の成長が見込まれていることから数年前から外資が入ってきて土地や家賃が急騰しているために利用者が激減すると運用コストを維持できなくなったとのこと。&lt;/p>
&lt;p>肝心のバリ島のコワーキングスペースの雰囲気を聞いていると、利用者は外国人が大半で、感覚的にはヨーロッパから来ている人が多そうだといとうさんが話された。バリ島のコワーキングスペースでいとうさんが見学していたときには、現地の人たちと外国人のコミュニティが活発に活動しているようにはあまりみえなかったらしい。利用者もそう多くはなかったし、その人たちも静かにただ作業しているだけのように映ったという。いとうさんはコワーキングスペースとはコミュニティやコラボレーションが重要という話しをよくしているけれど、バリ島のコワーキングスペースに関しては裕福な外国のデジタルノマドを呼び込むのに成功しただけのような、もしかしたらコロナ禍でそのコミュニティが破壊されてしまったのかもしれないが、普段このイベントで話しているような高い期待値に応えられるような状況ではないようにみえたという。&lt;/p>
&lt;p>とはいえ、日本の田舎よりは遥かにデジタルノマドが集まる場所として世界的に認知されているところなので写真をみながら私もいつか行ってみたいと思えた。&lt;/p></content></item><item><title>リファクタリングにはまった</title><link>/diary/posts/2023/0320/</link><pubDate>Mon, 20 Mar 2023 21:16:39 +0900</pubDate><guid>/diary/posts/2023/0320/</guid><description>2時に寝て変な夢をみて何度か起きて7時に起きた。いつも通りな感じ。
go のシリアライズ/デシリアライズとポインタ ldap の distinguished name (以下dn) をパース するときはエスケープを扱う必要があるのでわりとややこしいのでライブラリを使った方がよいことを前回学んだ。
複数の web api で dn を扱っていると、それぞれで dn をパースして正規化した形で扱わないと大文字小文字の表記揺れなどに対応できなくて困るということに気付いた。いや、前回もうっすら気付いていたのだけど、既存の api はすべて対応しているからいいかなと楽観的に考えていた。すると、たまたま新規に dn を扱う web api を作ったときに正規化を忘れていることに気付いた。今後の保守や拡張を考慮すると、dn を string 型として扱うのは潜在的に正規化漏れの懸念があることからよくないと理解できた。そのため、既存のリクエストで受け取る dn を特別な型として必ず正規化して扱えるようにリファクタリングすることにした。あちこち直す必要はあったが、幸いにも単体テストも結合テストもそこそこあるのでバグっていればテストが落ちることで不具合には気付けるようになっていた。
encoding/json に Marshaler/Unmarshaler のインターフェースが定義されているのでそれぞれのメソッドを実装する必要がある。DNParameter の値を json にシリアライズするときは値レシーバで MarshalJSON メソッドを実装し、デシリアライズするときはポインタレシーバで UnmarshalJSON メソッドを実装しないと json ライブラリで意図した振る舞いにならないようにみえる。ここで UnmarshalJSON するときに byte 列から一旦 json の文字列に変換 (引用符を外す) してから ldap.ParseDN() しないといけない処理を直接 string 型に変換する誤ったコードを書いてしまって、この誤りに気付くのに1-2時間はまってしまった。
誤ったコード func (p *DNParameter) UnmarshalJSON(data []byte) error { dn, err := ldap.ParseDN(string(data)) if err == nil { (*p).</description><content>&lt;p>2時に寝て変な夢をみて何度か起きて7時に起きた。いつも通りな感じ。&lt;/p>
&lt;h2 id="go-のシリアライズデシリアライズとポインタ">go のシリアライズ/デシリアライズとポインタ&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0306/#ldap-の-dn-の仕様">ldap の distinguished name (以下dn) をパース&lt;/a> するときはエスケープを扱う必要があるのでわりとややこしいのでライブラリを使った方がよいことを前回学んだ。&lt;/p>
&lt;p>複数の web api で dn を扱っていると、それぞれで dn をパースして正規化した形で扱わないと大文字小文字の表記揺れなどに対応できなくて困るということに気付いた。いや、前回もうっすら気付いていたのだけど、既存の api はすべて対応しているからいいかなと楽観的に考えていた。すると、たまたま新規に dn を扱う web api を作ったときに正規化を忘れていることに気付いた。今後の保守や拡張を考慮すると、dn を &lt;code>string&lt;/code> 型として扱うのは潜在的に正規化漏れの懸念があることからよくないと理解できた。そのため、既存のリクエストで受け取る dn を特別な型として必ず正規化して扱えるようにリファクタリングすることにした。あちこち直す必要はあったが、幸いにも単体テストも結合テストもそこそこあるのでバグっていればテストが落ちることで不具合には気付けるようになっていた。&lt;/p>
&lt;p>&lt;a href="https://pkg.go.dev/encoding/json">encoding/json&lt;/a> に Marshaler/Unmarshaler のインターフェースが定義されているのでそれぞれのメソッドを実装する必要がある。DNParameter の値を json にシリアライズするときは値レシーバで MarshalJSON メソッドを実装し、デシリアライズするときはポインタレシーバで UnmarshalJSON メソッドを実装しないと json ライブラリで意図した振る舞いにならないようにみえる。ここで UnmarshalJSON するときに byte 列から一旦 json の文字列に変換 (引用符を外す) してから &lt;code>ldap.ParseDN()&lt;/code> しないといけない処理を直接 &lt;code>string&lt;/code> 型に変換する誤ったコードを書いてしまって、この誤りに気付くのに1-2時間はまってしまった。&lt;/p>
&lt;ul>
&lt;li>誤ったコード&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">DNParameter&lt;/span>) &lt;span style="color:#a6e22e">UnmarshalJSON&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dn&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ldap&lt;/span>.&lt;span style="color:#a6e22e">ParseDN&lt;/span>(string(&lt;span style="color:#a6e22e">data&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">p&lt;/span>).&lt;span style="color:#a6e22e">Value&lt;/span> = &lt;span style="color:#a6e22e">dn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>正しいコード&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">DNParameter&lt;/span>) &lt;span style="color:#a6e22e">UnmarshalJSON&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">Unmarshal&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;dn should be a string&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dn&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ldap&lt;/span>.&lt;span style="color:#a6e22e">ParseDN&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">p&lt;/span>).&lt;span style="color:#a6e22e">Value&lt;/span> = &lt;span style="color:#a6e22e">dn&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このときに引用符を ldap のパーサーがエスケープした形で扱えてしまい、テストは失敗するけれど、見た目がほとんど同じ文字列で動いてしまうのにはまった。引用符がエスケープされてテストが落ちることには気付いたものの、どこの処理が問題なのかが分からなくてはまっていた。おそらくスクラッチからこの仕様でコードを書いていたらすぐに気付いたと思えるが、リファクタリングであちこち書き換えていたからどこの処理が誤っているのかの切り分けに時間がかかった。&lt;/p></content></item><item><title>syncrepl ことはじめ</title><link>/diary/posts/2023/0317/</link><pubDate>Fri, 17 Mar 2023 08:33:37 +0900</pubDate><guid>/diary/posts/2023/0317/</guid><description>1時に寝て5時に起きて7時に起きた。
openldap の syncrepl openldap サーバー同士のレプリケーションの仕組みとして syncrepl (LDAP Sync Replication) と呼ばれる仕組みがある。experimental ではあるものの、仕様は rfc で提案されていてオープンになっている。実際には openldap サーバー (slapd) で実装されている参照実装が仕様みたいなものかもしれない。
rfc-4533 18. Replication 既存の java のアプリケーションで syncrepl の機能を使うツールがあって、ソースコードを読むとかなりレガシーで、もっと言うと設計はひどく、コードも推定バグのような実装をみかけるのであまり使いたくない。go-ldap で syncrepl できれば作り直してしまえばよいのではないかと考えている。ドキュメントには provider (master) と consumer (slave) という用語で説明されているので pubsub に近いような仕組みで実装されているのではないかと推測する。slapd は provider にも consumer にもなる可能性があるのでどちらの実装ももっている。私がやりたいことは更新エントリを取得したいだけなので go-ldap で consumer として振る舞うモジュールのみを作ればよい。
基本的には openldap サーバーに接続して bind して、syncrepl に準拠したやり取りをすればよいのでそんな難しそうにはみえない。いくつかの定型的な通信の実装をすれば consumer ができるのではないかと思う。go-ldap のソースを grep してみる分には特別な機能はなさそうにみえる。ないならないで私が作ってもいいし、このライブラリでやらない方がよい背景があるのであれば、それに従う。ひとまず背景がわかっていないので issue を立てて聞いてみた。
About implementing syncrepl (rfc-4533) consumer #422</description><content>&lt;p>1時に寝て5時に起きて7時に起きた。&lt;/p>
&lt;h2 id="openldap-の-syncrepl">openldap の syncrepl&lt;/h2>
&lt;p>openldap サーバー同士のレプリケーションの仕組みとして syncrepl (LDAP Sync Replication) と呼ばれる仕組みがある。experimental ではあるものの、仕様は rfc で提案されていてオープンになっている。実際には openldap サーバー (slapd) で実装されている参照実装が仕様みたいなものかもしれない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.rfc-editor.org/rfc/rfc4533.html">rfc-4533&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.openldap.org/doc/admin25/replication.html">18. Replication&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>既存の java のアプリケーションで syncrepl の機能を使うツールがあって、ソースコードを読むとかなりレガシーで、もっと言うと設計はひどく、コードも推定バグのような実装をみかけるのであまり使いたくない。go-ldap で syncrepl できれば作り直してしまえばよいのではないかと考えている。ドキュメントには provider (master) と consumer (slave) という用語で説明されているので pubsub に近いような仕組みで実装されているのではないかと推測する。slapd は provider にも consumer にもなる可能性があるのでどちらの実装ももっている。私がやりたいことは更新エントリを取得したいだけなので go-ldap で consumer として振る舞うモジュールのみを作ればよい。&lt;/p>
&lt;p>基本的には openldap サーバーに接続して bind して、syncrepl に準拠したやり取りをすればよいのでそんな難しそうにはみえない。いくつかの定型的な通信の実装をすれば consumer ができるのではないかと思う。go-ldap のソースを grep してみる分には特別な機能はなさそうにみえる。ないならないで私が作ってもいいし、このライブラリでやらない方がよい背景があるのであれば、それに従う。ひとまず背景がわかっていないので issue を立てて聞いてみた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/go-ldap/ldap/issues/422">About implementing syncrepl (rfc-4533) consumer #422&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>ポインタの学び直し、参照とは違う</title><link>/diary/posts/2023/0316/</link><pubDate>Thu, 16 Mar 2023 21:10:27 +0900</pubDate><guid>/diary/posts/2023/0316/</guid><description>2時に寝て7時に起きた。深夜に葬送のフリーレン10巻を読んでからなんとなく眠れなくて夜更かししてた。木曜日は会議がなくて自分のために時間を使える。機能開発に集中して実装していた。
go の学び直し Gopher塾 #4 - 私も解説できるポインタ - DAY1 に参加した。
今日のテーマはポインタ。tenntenn さんが話すのだから深い内部実装の話しなどもあるのかな？と期待していたけれど、これは基本的な go のポインタの扱いを学ぶ講義だった。私にとっては9割は知っていることだった。それでも1割は知らないことがあったので参加して勉強にはなった。この歳になると本やイベントから1-2割学べたら十分だと思う。go は内部的にすべて値渡しで何でもコピーするするといった振る舞いをする。ポインタを渡すと、ポインタの値であるアドレスをコピーすることでプログラムが動く。コピーなので大きな構造体をそのまま渡すとその分のメモリのオーバーヘッドがあって遅くなったりする。ポインタならアドレスだけのコピーで済む。
go には参照の概念はないという説明があって、ポインタと参照は別の概念なんだと今更ながらに気付いた。gpt-4 にポインタと参照の違いを尋ねたりしていた。参照は初期化後に変更できなかったり、null を参照できなかったり、ポインタ演算のようなことができなかったりすることで安全にプログラミングするための言語機能と言える。一般的には参照はポインタを使って実装される。ポインタの方が低レイヤで制約が少ないと言える。参照はポインタの一部の機能を安全にプログラマーに提供していると言える。
次に go のポインタの特徴をまとめる。
型付け ポインタは型付けされていて、特定の型の変数のアドレスだけがその型のポインタに割り当てられる アドレス演算子とデリファレンス演算子 これらを単項演算子と呼ぶ アドレス演算子 (&amp;amp;) で変数のアドレスを取得してポインタを作成する デリファレンス演算子 (*) でポインタが指すアドレスに格納されている値にアクセスする ポインタ演算制限 ポインタ演算は許可されていない、メモリアクセスの誤りやセキュリティ上の問題が軽減される new と make 関数 new 関数を使うと指定された型の新しい変数を作成してそのアドレスを返す make 関数は、スライス、マップ、チャネルなどの複合データ構造を作成および初期化して、それらへのポインタを返す ポインタの nil 値 ポインタは、無効なアドレスを表す特別な値である nil をもてる nil ポインタにアクセスしようとすると、実行時に panic が発生する メソッドレシーバとしてのポインタ メソッドレシーバとしてポインタを使うとメソッド内でレシーバオブジェクトの変更ができる 値レシーバは意図せぬ不具合を招く可能性があるから基本的にはポインタレシーバを使う方がよいのではないかといった話しもあった</description><content>&lt;p>2時に寝て7時に起きた。深夜に葬送のフリーレン10巻を読んでからなんとなく眠れなくて夜更かししてた。木曜日は会議がなくて自分のために時間を使える。機能開発に集中して実装していた。&lt;/p>
&lt;h2 id="go-の学び直し">go の学び直し&lt;/h2>
&lt;p>&lt;a href="https://tenntenn.connpass.com/event/275805/">Gopher塾 #4 - 私も解説できるポインタ - DAY1&lt;/a> に参加した。&lt;/p>
&lt;p>今日のテーマはポインタ。tenntenn さんが話すのだから深い内部実装の話しなどもあるのかな？と期待していたけれど、これは基本的な go のポインタの扱いを学ぶ講義だった。私にとっては9割は知っていることだった。それでも1割は知らないことがあったので参加して勉強にはなった。この歳になると本やイベントから1-2割学べたら十分だと思う。go は内部的にすべて値渡しで何でもコピーするするといった振る舞いをする。ポインタを渡すと、ポインタの値であるアドレスをコピーすることでプログラムが動く。コピーなので大きな構造体をそのまま渡すとその分のメモリのオーバーヘッドがあって遅くなったりする。ポインタならアドレスだけのコピーで済む。&lt;/p>
&lt;p>go には参照の概念はないという説明があって、ポインタと参照は別の概念なんだと今更ながらに気付いた。gpt-4 にポインタと参照の違いを尋ねたりしていた。参照は初期化後に変更できなかったり、null を参照できなかったり、ポインタ演算のようなことができなかったりすることで安全にプログラミングするための言語機能と言える。一般的には参照はポインタを使って実装される。ポインタの方が低レイヤで制約が少ないと言える。参照はポインタの一部の機能を安全にプログラマーに提供していると言える。&lt;/p>
&lt;p>次に go のポインタの特徴をまとめる。&lt;/p>
&lt;ul>
&lt;li>型付け
&lt;ul>
&lt;li>ポインタは型付けされていて、特定の型の変数のアドレスだけがその型のポインタに割り当てられる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>アドレス演算子とデリファレンス演算子
&lt;ul>
&lt;li>これらを単項演算子と呼ぶ&lt;/li>
&lt;li>アドレス演算子 (&amp;amp;) で変数のアドレスを取得してポインタを作成する&lt;/li>
&lt;li>デリファレンス演算子 (*) でポインタが指すアドレスに格納されている値にアクセスする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ポインタ演算制限&lt;/li>
&lt;li>ポインタ演算は許可されていない、メモリアクセスの誤りやセキュリティ上の問題が軽減される&lt;/li>
&lt;li>new と make 関数
&lt;ul>
&lt;li>new 関数を使うと指定された型の新しい変数を作成してそのアドレスを返す&lt;/li>
&lt;li>make 関数は、スライス、マップ、チャネルなどの複合データ構造を作成および初期化して、それらへのポインタを返す&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ポインタの nil 値
&lt;ul>
&lt;li>ポインタは、無効なアドレスを表す特別な値である nil をもてる&lt;/li>
&lt;li>nil ポインタにアクセスしようとすると、実行時に panic が発生する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>メソッドレシーバとしてのポインタ
&lt;ul>
&lt;li>メソッドレシーバとしてポインタを使うとメソッド内でレシーバオブジェクトの変更ができる
&lt;ul>
&lt;li>値レシーバは意図せぬ不具合を招く可能性があるから基本的にはポインタレシーバを使う方がよいのではないかといった話しもあった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content></item><item><title>キャッシュ機構の導入</title><link>/diary/posts/2023/0315/</link><pubDate>Wed, 15 Mar 2023 11:10:23 +0900</pubDate><guid>/diary/posts/2023/0315/</guid><description>1時に寝て7時に起きた。リリース延期を決めたので3月末へのストレスやプレッシャーからは解放されていつもよりよく眠れた気がした。あくまで気がしただけ。
キャッシュライブラリの選定 ある機能を作るための準備としてキャッシュ機構を作ることにした。avelino/awesome-go を眺めて適当なキャッシュライブラリを選定する。シンプルな用途向け、オンメモリで goroutine-safe で保守されていて実績があるものでのバランスを取るときむらさんのキャッシュライブラリになった。
bluele/gcache ちょうどいまのお仕事を始める前に スカウトをもらった会社 のテックリードがきむらさんだったので、いまはその会社にいるんだと思い出したのが半年前。きむらさんとはリアルで何年も会っていないし、仲がよいわけでもないけれど、なぜか facebook でも繋がっているので存在を忘れるということもない。
閑話休題。ある特定の mongodb コレクションのデータをキャッシュしたい。
キャッシュの生成。
cache := gcache.New(128).Build() 特定の用途で一部の処理だけ使いたいのでこんな感じでキャッシュの処理を実装した。
value, err := cache.Get(id) if err == nil { return value.(*myData), nil } else if err != gcache.KeyNotFoundError { log.Error(&amp;#34;failed to get value from cache&amp;#34;, map[string]any{ &amp;#34;key&amp;#34;: id, &amp;#34;err&amp;#34;: err, }) } // 通常処理 cache.Set(id, setting) 念のため、キャッシュをすべてクリアするときは次を呼ぶ。これをキャッシュ制御 api から呼び出せるようにしておく。何らかの理由やバグなどでキャッシュをクリアする必要もあるだろう。
cache.Purge() データを削除したときは id 指定でキャッシュを削除する。
cache.Remove(id) キャッシュが使われているかどうかは内部的に統計を取っているのでそれをキャッシュ制御 api から取得することでわかる。 キャッシュが使われていれば HitCount が増え、mongodb にアクセスしていれば MissCount が増える。単体レベルでプログラムのデバッグにはなる。</description><content>&lt;p>1時に寝て7時に起きた。リリース延期を決めたので3月末へのストレスやプレッシャーからは解放されていつもよりよく眠れた気がした。あくまで気がしただけ。&lt;/p>
&lt;h2 id="キャッシュライブラリの選定">キャッシュライブラリの選定&lt;/h2>
&lt;p>ある機能を作るための準備としてキャッシュ機構を作ることにした。&lt;a href="https://github.com/avelino/awesome-go">avelino/awesome-go&lt;/a> を眺めて適当なキャッシュライブラリを選定する。シンプルな用途向け、オンメモリで goroutine-safe で保守されていて実績があるものでのバランスを取るときむらさんのキャッシュライブラリになった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/bluele/gcache">bluele/gcache&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ちょうどいまのお仕事を始める前に &lt;a href="/diary/diary/posts/2022/0920/#ブロックチェーンのお仕事の面談">スカウトをもらった会社&lt;/a> のテックリードがきむらさんだったので、いまはその会社にいるんだと思い出したのが半年前。きむらさんとはリアルで何年も会っていないし、仲がよいわけでもないけれど、なぜか facebook でも繋がっているので存在を忘れるということもない。&lt;/p>
&lt;p>閑話休題。ある特定の mongodb コレクションのデータをキャッシュしたい。&lt;/p>
&lt;p>キャッシュの生成。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cache&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gcache&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#ae81ff">128&lt;/span>).&lt;span style="color:#a6e22e">Build&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>特定の用途で一部の処理だけ使いたいのでこんな感じでキャッシュの処理を実装した。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">value&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">id&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span>.(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">myData&lt;/span>), &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">gcache&lt;/span>.&lt;span style="color:#a6e22e">KeyNotFoundError&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to get value from cache&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">any&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">id&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;err&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">err&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 通常処理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#a6e22e">id&lt;/span>, &lt;span style="color:#a6e22e">setting&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>念のため、キャッシュをすべてクリアするときは次を呼ぶ。これをキャッシュ制御 api から呼び出せるようにしておく。何らかの理由やバグなどでキャッシュをクリアする必要もあるだろう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">Purge&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>データを削除したときは id 指定でキャッシュを削除する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">Remove&lt;/span>(&lt;span style="color:#a6e22e">id&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>キャッシュが使われているかどうかは内部的に統計を取っているのでそれをキャッシュ制御 api から取得することでわかる。
キャッシュが使われていれば HitCount が増え、mongodb にアクセスしていれば MissCount が増える。単体レベルでプログラムのデバッグにはなる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">CacheStat&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HitCount&lt;/span>: &lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">HitCount&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">MissCount&lt;/span>: &lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">MissCount&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">LookupCount&lt;/span>: &lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">LookupCount&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HitRate&lt;/span>: &lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">HitRate&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>windows のサービス起動を go から制御する</title><link>/diary/posts/2023/0308/</link><pubDate>Wed, 08 Mar 2023 08:38:37 +0900</pubDate><guid>/diary/posts/2023/0308/</guid><description>2時に寝て3回ほど起きて7時に起きた。淡々と自分の機能開発をしていた。ある処理が失敗したときにローカルのファイルシステムに暗号化して書き込み、定期的にそのディレクトリを監視してファイルがあれば読み込んで復号化してリトライをするといった仕組みを実装した。とくに難しくなくすぐにできた。
晩ご飯に 大衆酒場 PING (ピン) というお店に行ってみた。1人でも入りやすく値段も安く食べ応えもあっても私のイメージする居酒屋さんの印象にぴったりでよかった。また出張したら行こうと思う。そろそろ出張でバテてきたので今日は夜にお仕事せずに晩ご飯食べてからもテレビをみながらだらだらしてた。
windows のサービス起動 準標準パッケージである golang.org/x/sys パッケージを使ってアプリケーションの起動と停止をサービス管理画面から操作できるようにする。サンプルコードは次の場所にある。
https://github.com/golang/sys/tree/master/windows/svc/example サービスから呼ばれたかどうかを判定をすることでエントリーポイントを切り替えられる。
inService, err := svc.IsWindowsService() if inService &amp;amp;&amp;amp; err == nil { if err := runService(serviceName, false); err != nil { log.Error(&amp;#34;failed to run service&amp;#34;, map[string]any{ &amp;#34;err&amp;#34;: err, }) return } } そして、次のような Execute() メソッドをもつ windows サービスから呼ばれる構造体を定義して、そのメソッド内でサービス管理画面からのステータス変更に対応する状態遷移のコードを実装すればよい。ここではサービス開始してから stop/shutddown で停止するぐらいしか必要ないのでシンプルに実装した。一時停止や再開も必要ならもう少し複雑なコードになる。
type myService struct{} func (m *myService) Execute( args []string, reqCh &amp;lt;-chan svc.ChangeRequest, statusCh chan&amp;lt;- svc.Status, ) (ssec bool, errno uint32) { ctx, cancel := context.</description><content>&lt;p>2時に寝て3回ほど起きて7時に起きた。淡々と自分の機能開発をしていた。ある処理が失敗したときにローカルのファイルシステムに暗号化して書き込み、定期的にそのディレクトリを監視してファイルがあれば読み込んで復号化してリトライをするといった仕組みを実装した。とくに難しくなくすぐにできた。&lt;/p>
&lt;p>晩ご飯に &lt;a href="https://tabelog.com/tokyo/A1316/A131603/13125103/">大衆酒場 PING (ピン)&lt;/a> というお店に行ってみた。1人でも入りやすく値段も安く食べ応えもあっても私のイメージする居酒屋さんの印象にぴったりでよかった。また出張したら行こうと思う。そろそろ出張でバテてきたので今日は夜にお仕事せずに晩ご飯食べてからもテレビをみながらだらだらしてた。&lt;/p>
&lt;h2 id="windows-のサービス起動">windows のサービス起動&lt;/h2>
&lt;p>準標準パッケージである &lt;a href="https://pkg.go.dev/golang.org/x/sys/windows/svc/eventlog">golang.org/x/sys&lt;/a> パッケージを使ってアプリケーションの起動と停止をサービス管理画面から操作できるようにする。サンプルコードは次の場所にある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/golang/sys/tree/master/windows/svc/example">https://github.com/golang/sys/tree/master/windows/svc/example&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>サービスから呼ばれたかどうかを判定をすることでエントリーポイントを切り替えられる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">inService&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">svc&lt;/span>.&lt;span style="color:#a6e22e">IsWindowsService&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">inService&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">runService&lt;/span>(&lt;span style="color:#a6e22e">serviceName&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to run service&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">any&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;err&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">err&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>そして、次のような &lt;code>Execute()&lt;/code> メソッドをもつ windows サービスから呼ばれる構造体を定義して、そのメソッド内でサービス管理画面からのステータス変更に対応する状態遷移のコードを実装すればよい。ここではサービス開始してから stop/shutddown で停止するぐらいしか必要ないのでシンプルに実装した。一時停止や再開も必要ならもう少し複雑なコードになる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">myService&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">myService&lt;/span>) &lt;span style="color:#a6e22e">Execute&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">args&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">reqCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">svc&lt;/span>.&lt;span style="color:#a6e22e">ChangeRequest&lt;/span>, &lt;span style="color:#a6e22e">statusCh&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span>&lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">svc&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) (&lt;span style="color:#a6e22e">ssec&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#a6e22e">errno&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">cancel&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">WithCancel&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">startMyService&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">getConfig&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">statusCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">svc&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>{&lt;span style="color:#a6e22e">State&lt;/span>: &lt;span style="color:#a6e22e">svc&lt;/span>.&lt;span style="color:#a6e22e">Running&lt;/span>, &lt;span style="color:#a6e22e">Accepts&lt;/span>: &lt;span style="color:#a6e22e">svc&lt;/span>.&lt;span style="color:#a6e22e">AcceptStop&lt;/span> | &lt;span style="color:#a6e22e">svc&lt;/span>.&lt;span style="color:#a6e22e">AcceptShutdown&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stop&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">reqCh&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Cmd&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">svc&lt;/span>.&lt;span style="color:#a6e22e">Stop&lt;/span>, &lt;span style="color:#a6e22e">svc&lt;/span>.&lt;span style="color:#a6e22e">Shutdown&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stop&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cancel&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">stop&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">statusCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">svc&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>{&lt;span style="color:#a6e22e">State&lt;/span>: &lt;span style="color:#a6e22e">svc&lt;/span>.&lt;span style="color:#a6e22e">StopPending&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#75715e">// wait until MyService would be completed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>暗号化と復号化を実装してみる</title><link>/diary/posts/2023/0307/</link><pubDate>Tue, 07 Mar 2023 10:24:40 +0900</pubDate><guid>/diary/posts/2023/0307/</guid><description>不定期に寝て7時半に起きた。起きてからシャワー浴びたらしゃんとした。昨日と同様に昼間働いて、ホテルに戻ってきて2-3時間寝てから夜に2-3時間かけて次のコードを書いた。
go での暗号化/復号化 ある機密情報を扱うので暗号化して普通には「みえない」ようにしたい。まったくわからないのでググったら次の記事がみつかった。
Learn Golang encryption and decryption まずはこの記事にあるサンプルコードを動かしてみながら内容を理解する。暗号技術そのものは理解できないが、コードの振る舞いそのものは動かしながら理解できる。その後、いろいろ調べているとこのサンプルコードの大半は crypto/cipher パッケージにあるサンプルコードと同じであることに気づく。標準ライブラリのドキュメントでは iv (initialization vector) を暗号化対象の文字列の一部を切り取って生成している。iv は一意である必要はあるが、セキュアでなくてもよいとある。よくあるやり方とあるのでサンプルコードをみながら同じように実装した。
// The IV needs to be unique, but not secure. Therefore it&amp;#39;s common to // include it at the beginning of the ciphertext. 最終的な暗号化と復号化のコードは次になった。標準ライブラリにあるサンプルコードと基本的には同じ。
func Encrypt(secret string, plainText []byte) ([]byte, error) { block, err := aes.NewCipher([]byte(secret)) if err != nil { return nil, fmt.Errorf(&amp;#34;failed to create chiper: %w&amp;#34;, err) } cipherText := make([]byte, aes.</description><content>&lt;p>不定期に寝て7時半に起きた。起きてからシャワー浴びたらしゃんとした。昨日と同様に昼間働いて、ホテルに戻ってきて2-3時間寝てから夜に2-3時間かけて次のコードを書いた。&lt;/p>
&lt;h2 id="go-での暗号化復号化">go での暗号化/復号化&lt;/h2>
&lt;p>ある機密情報を扱うので暗号化して普通には「みえない」ようにしたい。まったくわからないのでググったら次の記事がみつかった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.logrocket.com/learn-golang-encryption-decryption/">Learn Golang encryption and decryption&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>まずはこの記事にあるサンプルコードを動かしてみながら内容を理解する。暗号技術そのものは理解できないが、コードの振る舞いそのものは動かしながら理解できる。その後、いろいろ調べているとこのサンプルコードの大半は &lt;a href="https://pkg.go.dev/crypto/cipher">crypto/cipher&lt;/a> パッケージにあるサンプルコードと同じであることに気づく。標準ライブラリのドキュメントでは iv (initialization vector) を暗号化対象の文字列の一部を切り取って生成している。iv は一意である必要はあるが、セキュアでなくてもよいとある。よくあるやり方とあるのでサンプルコードをみながら同じように実装した。&lt;/p>
&lt;pre tabindex="0">&lt;code>// The IV needs to be unique, but not secure. Therefore it&amp;#39;s common to
// include it at the beginning of the ciphertext.
&lt;/code>&lt;/pre>&lt;p>最終的な暗号化と復号化のコードは次になった。標準ライブラリにあるサンプルコードと基本的には同じ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Encrypt&lt;/span>(&lt;span style="color:#a6e22e">secret&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">plainText&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) ([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">block&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">aes&lt;/span>.&lt;span style="color:#a6e22e">NewCipher&lt;/span>([]byte(&lt;span style="color:#a6e22e">secret&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to create chiper: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cipherText&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">aes&lt;/span>.&lt;span style="color:#a6e22e">BlockSize&lt;/span>&lt;span style="color:#f92672">+&lt;/span>len(&lt;span style="color:#a6e22e">plainText&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">iv&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cipherText&lt;/span>[:&lt;span style="color:#a6e22e">aes&lt;/span>.&lt;span style="color:#a6e22e">BlockSize&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">ReadFull&lt;/span>(&lt;span style="color:#a6e22e">rand&lt;/span>.&lt;span style="color:#a6e22e">Reader&lt;/span>, &lt;span style="color:#a6e22e">iv&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to read for iv: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stream&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cipher&lt;/span>.&lt;span style="color:#a6e22e">NewCFBEncrypter&lt;/span>(&lt;span style="color:#a6e22e">block&lt;/span>, &lt;span style="color:#a6e22e">iv&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">XORKeyStream&lt;/span>(&lt;span style="color:#a6e22e">cipherText&lt;/span>[&lt;span style="color:#a6e22e">aes&lt;/span>.&lt;span style="color:#a6e22e">BlockSize&lt;/span>:], &lt;span style="color:#a6e22e">plainText&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">buf&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">base64&lt;/span>.&lt;span style="color:#a6e22e">StdEncoding&lt;/span>.&lt;span style="color:#a6e22e">EncodedLen&lt;/span>(len(&lt;span style="color:#a6e22e">cipherText&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">base64&lt;/span>.&lt;span style="color:#a6e22e">StdEncoding&lt;/span>.&lt;span style="color:#a6e22e">Encode&lt;/span>(&lt;span style="color:#a6e22e">buf&lt;/span>, &lt;span style="color:#a6e22e">cipherText&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">buf&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Decrypt&lt;/span>(&lt;span style="color:#a6e22e">secret&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">text&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) ([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">block&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">aes&lt;/span>.&lt;span style="color:#a6e22e">NewCipher&lt;/span>([]byte(&lt;span style="color:#a6e22e">secret&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to create chiper: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dbuf&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">byte&lt;/span>, len(&lt;span style="color:#a6e22e">text&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">n&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">base64&lt;/span>.&lt;span style="color:#a6e22e">StdEncoding&lt;/span>.&lt;span style="color:#a6e22e">Decode&lt;/span>(&lt;span style="color:#a6e22e">dbuf&lt;/span>, &lt;span style="color:#a6e22e">text&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to create chiper: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cipherText&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">dbuf&lt;/span>[:&lt;span style="color:#a6e22e">n&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">cipherText&lt;/span>) &amp;lt; &lt;span style="color:#a6e22e">aes&lt;/span>.&lt;span style="color:#a6e22e">BlockSize&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ciphertext is too short: %d&amp;#34;&lt;/span>, len(&lt;span style="color:#a6e22e">cipherText&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">iv&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cipherText&lt;/span>[:&lt;span style="color:#a6e22e">aes&lt;/span>.&lt;span style="color:#a6e22e">BlockSize&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cipherText&lt;/span> = &lt;span style="color:#a6e22e">cipherText&lt;/span>[&lt;span style="color:#a6e22e">aes&lt;/span>.&lt;span style="color:#a6e22e">BlockSize&lt;/span>:]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stream&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cipher&lt;/span>.&lt;span style="color:#a6e22e">NewCFBDecrypter&lt;/span>(&lt;span style="color:#a6e22e">block&lt;/span>, &lt;span style="color:#a6e22e">iv&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// XORKeyStream can work in-place if the two arguments are the same.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">stream&lt;/span>.&lt;span style="color:#a6e22e">XORKeyStream&lt;/span>(&lt;span style="color:#a6e22e">cipherText&lt;/span>, &lt;span style="color:#a6e22e">cipherText&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">cipherText&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>いろいろな変換</title><link>/diary/posts/2023/0306/</link><pubDate>Mon, 06 Mar 2023 10:22:08 +0900</pubDate><guid>/diary/posts/2023/0306/</guid><description>前日は0時ぐらいまでオフィスでお仕事していて、家に帰ってお風呂入って荷造りして、そのまま寝ないで5時過ぎに出かけて新神戸駅から6時10分発の始発に乗ってから2時間ほど寝た。昼間働いて18時にホテルに戻ってまた2-3時間ほど寝て晩ご飯食べてから2時間ほどお仕事していた。寝付けなくて3時ぐらいに起きて吐いた。吐いたら気分よくなってその後はよく眠れた。
windows の内部の文字の扱い 前日の日曜日に実装したツールをメンバーに windows server検証してもらう。ある変換処理で windows の内部では文字を utf16le で扱っていて、文字コード変換の処理が漏れていることに気付いた。go の準標準ライブラリを使って、次のようなコードで utf16le から utf8 への変換ができる。
import &amp;#34;golang.org/x/text/encoding/unicode&amp;#34; decoded, err := unicode.UTF16(unicode.LittleEndian, unicode.IgnoreBOM).NewDecoder().Bytes(b) LDAP の DN の仕様 LDAP の distinguished name (DN) を調べた。例えば、windows で dn を powershell の Get-ADUser を使って取得すると次のような値を取得できる。
dn=&amp;#34;CN=Test,CN=Users,DC=example,DC=com&amp;#34; CN や DC は大文字/小文字どちらでもよいが、それが違うと dn の値として別の値になってしまう。できれば小文字に統一したい。その変換処理を実装しようと思って仕様を調べていたら RFC-4514 Lightweight Directory Access Protocol (LDAP): String Representation of Distinguished Names で定義されていることがわかった。ここで定義されている特殊な文字、例えばカンマや等号などはエスケープして値としても使えるように書いてある。キーの値を変換するにはこれらの仕様を理解してパースして変換しないといけない。わりと大変なことを理解して go-ldap のライブラリのコードを読んでいたら正に ParseDN() がそんな実装になっていた。
func ParseDN(str string) (*DN, error) https://github.com/go-ldap/ldap/blob/master/dn.go#L113 このツールを使って dn インスタンスにパースして文字列表現を取得すると自動的に正規化されて小文字に変換してくれる。</description><content>&lt;p>前日は0時ぐらいまでオフィスでお仕事していて、家に帰ってお風呂入って荷造りして、そのまま寝ないで5時過ぎに出かけて新神戸駅から6時10分発の始発に乗ってから2時間ほど寝た。昼間働いて18時にホテルに戻ってまた2-3時間ほど寝て晩ご飯食べてから2時間ほどお仕事していた。寝付けなくて3時ぐらいに起きて吐いた。吐いたら気分よくなってその後はよく眠れた。&lt;/p>
&lt;h2 id="windows-の内部の文字の扱い">windows の内部の文字の扱い&lt;/h2>
&lt;p>前日の日曜日に実装したツールをメンバーに windows server検証してもらう。ある変換処理で windows の内部では文字を utf16le で扱っていて、文字コード変換の処理が漏れていることに気付いた。go の準標準ライブラリを使って、次のようなコードで utf16le から utf8 への変換ができる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;golang.org/x/text/encoding/unicode&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">decoded&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">unicode&lt;/span>.&lt;span style="color:#a6e22e">UTF16&lt;/span>(&lt;span style="color:#a6e22e">unicode&lt;/span>.&lt;span style="color:#a6e22e">LittleEndian&lt;/span>, &lt;span style="color:#a6e22e">unicode&lt;/span>.&lt;span style="color:#a6e22e">IgnoreBOM&lt;/span>).&lt;span style="color:#a6e22e">NewDecoder&lt;/span>().&lt;span style="color:#a6e22e">Bytes&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ldap-の-dn-の仕様">LDAP の DN の仕様&lt;/h2>
&lt;p>LDAP の distinguished name (DN) を調べた。例えば、windows で dn を powershell の Get-ADUser を使って取得すると次のような値を取得できる。&lt;/p>
&lt;pre tabindex="0">&lt;code>dn=&amp;#34;CN=Test,CN=Users,DC=example,DC=com&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;code>CN&lt;/code> や &lt;code>DC&lt;/code> は大文字/小文字どちらでもよいが、それが違うと dn の値として別の値になってしまう。できれば小文字に統一したい。その変換処理を実装しようと思って仕様を調べていたら &lt;a href="https://docs.ldap.com/specs/rfc4514.txt">RFC-4514 Lightweight Directory Access Protocol (LDAP): String Representation of Distinguished Names&lt;/a> で定義されていることがわかった。ここで定義されている特殊な文字、例えばカンマや等号などはエスケープして値としても使えるように書いてある。キーの値を変換するにはこれらの仕様を理解してパースして変換しないといけない。わりと大変なことを理解して go-ldap のライブラリのコードを読んでいたら正に &lt;code>ParseDN()&lt;/code> がそんな実装になっていた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ParseDN&lt;/span>(&lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">DN&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;a href="https://github.com/go-ldap/ldap/blob/master/dn.go#L113">https://github.com/go-ldap/ldap/blob/master/dn.go#L113&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>このツールを使って dn インスタンスにパースして文字列表現を取得すると自動的に正規化されて小文字に変換してくれる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">dn&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ldap&lt;/span>.&lt;span style="color:#a6e22e">ParseDN&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to parse dn: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">dn&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>イベントログに書き込む</title><link>/diary/posts/2023/0305/</link><pubDate>Sun, 05 Mar 2023 10:24:22 +0900</pubDate><guid>/diary/posts/2023/0305/</guid><description>1時に寝て2時ぐらいから吐き気で3時間ほど苦しんで寝て9時に起きた。バテてきた。10時過ぎからオフィスへ行ってだいたい丸一日お仕事してた。
go のマルチプラットフォーム対応 いま作っているモジュールは windows/linux の両方で動くモジュールにする必要がある。go は標準でそういったモジュールの開発に対応していて Build Constraints にビルドタグの仕様が書いてある。例えば、ログ出力を linux では標準出力に windows ではイベントログに書き込みたいとか。windows のイベントログに書き込むのも準標準パッケージである golang.org/x/sys パッケージを使ってすぐにできた。私がイベントログの仕様をよく知らないのでイベントログそのもののインストール作業をどうするかという課題がある。これは詳しい人に教えてもらおう。ビルドタグには unix という設定が使える。これで linux/macos 対応になる。例えば、log 出力のインターフェースをそれぞれ分けたいときに次のように実装できる。windows は標準ロガーに加えてイベントログにも書き込むようにしてみた。この log パッケージを使う呼び出し側のコードはマルチプラットフォームの違いを意識する必要はない。とても簡単にマルチプラットフォームのコードを管理できる。go のビルドやコンパイラの仕組みを学ぶたびに感心する。
//go:build unix package log func Error(msg string, fields map[string]any) error { return mylogger.Error(msg, fields) } func Warn(msg string, fields map[string]any) error { return mylogger.Warn(msg, fields) } //go:build windows package log import ( &amp;#34;golang.org/x/sys/windows/svc/eventlog&amp;#34; ) const ( // this logName should be installed in advance logName = &amp;#34;mylog&amp;#34; eventID = 1 // TODO ) var elog *eventlog.</description><content>&lt;p>1時に寝て2時ぐらいから吐き気で3時間ほど苦しんで寝て9時に起きた。バテてきた。10時過ぎからオフィスへ行ってだいたい丸一日お仕事してた。&lt;/p>
&lt;h2 id="go-のマルチプラットフォーム対応">go のマルチプラットフォーム対応&lt;/h2>
&lt;p>いま作っているモジュールは windows/linux の両方で動くモジュールにする必要がある。go は標準でそういったモジュールの開発に対応していて &lt;a href="https://pkg.go.dev/go/build#hdr-Build_Constraints">Build Constraints&lt;/a> にビルドタグの仕様が書いてある。例えば、ログ出力を linux では標準出力に windows ではイベントログに書き込みたいとか。windows のイベントログに書き込むのも準標準パッケージである &lt;a href="https://pkg.go.dev/golang.org/x/sys/windows/svc/eventlog">golang.org/x/sys&lt;/a> パッケージを使ってすぐにできた。私がイベントログの仕様をよく知らないのでイベントログそのもののインストール作業をどうするかという課題がある。これは詳しい人に教えてもらおう。ビルドタグには &lt;code>unix&lt;/code> という設定が使える。これで linux/macos 対応になる。例えば、log 出力のインターフェースをそれぞれ分けたいときに次のように実装できる。windows は標準ロガーに加えてイベントログにも書き込むようにしてみた。この log パッケージを使う呼び出し側のコードはマルチプラットフォームの違いを意識する必要はない。とても簡単にマルチプラットフォームのコードを管理できる。go のビルドやコンパイラの仕組みを学ぶたびに感心する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//go:build unix
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">log&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">fields&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">any&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">mylogger&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">fields&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Warn&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">fields&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">any&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">mylogger&lt;/span>.&lt;span style="color:#a6e22e">Warn&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">fields&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//go:build windows
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">log&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;golang.org/x/sys/windows/svc/eventlog&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// this logName should be installed in advance
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">logName&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;mylog&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">eventID&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#75715e">// TODO
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">elog&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">eventlog&lt;/span>.&lt;span style="color:#a6e22e">Log&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">elog&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">eventlog&lt;/span>.&lt;span style="color:#a6e22e">Open&lt;/span>(&lt;span style="color:#a6e22e">logName&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mylogger&lt;/span>.&lt;span style="color:#a6e22e">ErrorExit&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Remove&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">eventlog&lt;/span>.&lt;span style="color:#a6e22e">Remove&lt;/span>(&lt;span style="color:#a6e22e">logName&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">fields&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">any&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">elog&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">eventID&lt;/span>, &lt;span style="color:#a6e22e">getMessage&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">fields&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">mylogger&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">fields&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Warn&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">fields&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">any&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">elog&lt;/span>.&lt;span style="color:#a6e22e">Warning&lt;/span>(&lt;span style="color:#a6e22e">eventID&lt;/span>, &lt;span style="color:#a6e22e">getMessage&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">fields&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">mylogger&lt;/span>.&lt;span style="color:#a6e22e">Warn&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">fields&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="お土産探し">お土産探し&lt;/h2>
&lt;p>いつもは東京出張のタイミングにあわせてお店やお菓子探しから時間をかけて、自分でも買って試食してみて選択している。今回は2週間前から土日もずっと開発していて余裕がない。前回は &lt;a href="/diary/diary/posts/2023/0129/#本髙砂屋の金つば">本髙砂屋の金つば&lt;/a> を持って行った。本髙砂屋は金つばの老舗なのだけど、洋菓子も販売していて和菓子のお店の隣に洋菓子のお店も構えている。
今回も本髙砂屋にあやかって洋菓子の &lt;a href="https://www.hontaka.jp/commodity/western/">エコルセ&lt;/a> の季節限定で売っている詰め合わせバージョンを購入してみた。「貧すれば鈍する」とよく言ったものでお土産探しの時間すらかけられなくなってしまっている。15時半頃から出かけて本髙砂屋さんで購入した。今回は試食できていないけど老舗だからあまり心配はいらないとは思う。&lt;/p></content></item><item><title>http クライアントのリトライ機能</title><link>/diary/posts/2023/0304/</link><pubDate>Sat, 04 Mar 2023 16:52:45 +0900</pubDate><guid>/diary/posts/2023/0304/</guid><description>1時に寝て7時に起きた。今週末もお仕事をがんばる。今週中に開発タスクを完了させたいという思いがある。まだ今週は続いている。
ストレッチ 今日の開脚幅は開始前154cmで、ストレッチ後157cmだった。今週も座っている時間が長かったせいか、あまり数値がよくなかった。ここ2-3週間前から右すねの外側の筋に張りがあったが、これが左にも転移して左すねの外側の筋も張りが強くなってきた。両方とも張りがあるという意味ではバランスが取れたと言えるのかもしれない。いずれにしてもいままで張りがなかったところに違和感があるので引き続き注視していきたい。歩くときにやや気になるけれど、日常生活に支障が出るほどの障害ではない。少し前からオフィス通勤に自転車をやめて、通勤とお昼ご飯を買いに行くのが自転車から歩きになったことが影響しているのかな？言うても徒歩3分ぐらいの距離でそんなこと起きるかなぁと思ったり。
http クライアントのリトライ機能 結論から言うと go-retryablehttp を使ってすぐできた。自分で作ってもよかったのだけど、retryablehttp がシンプルで私の求めている機能そのものにみえたのでこのライブラリを採用した。既存の http クライアントの機能を次の2箇所変更するだけで retryablehttp が使える。こういうインテグレーションの簡単さも嬉しい。ちゃんとバックオフとジッターの機能も実装しているし、デフォルトのそれらの機能をカスタムで置き換えることもできる。最低限のリトライ機能があればいいといった http クライアントならこれでよいと思う。こういうシンプルで使い勝手のよいライブラリをみつけると嬉しくなる。
- res, err := c.raw.Do(req) + _req, err := retryablehttp.FromRequest(req) + if err != nil { + return []byte{}, fmt.Errorf(&amp;#34;failed to create retryable request: %w&amp;#34;, err) + } + res, err := c.raw.Do(_req) +func NewRetryableClient(cfg config.Client) *retryablehttp.Client { + c := retryablehttp.NewClient() + c.Logger = log.GetLogger() + c.RetryWaitMin = cfg.RetryWaitMin + c.RetryWaitMax = cfg.RetryWaitMax + c.</description><content>&lt;p>1時に寝て7時に起きた。今週末もお仕事をがんばる。今週中に開発タスクを完了させたいという思いがある。まだ今週は続いている。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前154cmで、ストレッチ後157cmだった。今週も座っている時間が長かったせいか、あまり数値がよくなかった。ここ2-3週間前から右すねの外側の筋に張りがあったが、これが左にも転移して左すねの外側の筋も張りが強くなってきた。両方とも張りがあるという意味ではバランスが取れたと言えるのかもしれない。いずれにしてもいままで張りがなかったところに違和感があるので引き続き注視していきたい。歩くときにやや気になるけれど、日常生活に支障が出るほどの障害ではない。少し前からオフィス通勤に自転車をやめて、通勤とお昼ご飯を買いに行くのが自転車から歩きになったことが影響しているのかな？言うても徒歩3分ぐらいの距離でそんなこと起きるかなぁと思ったり。&lt;/p>
&lt;h2 id="http-クライアントのリトライ機能">http クライアントのリトライ機能&lt;/h2>
&lt;p>結論から言うと &lt;a href="https://github.com/hashicorp/go-retryablehttp">go-retryablehttp&lt;/a> を使ってすぐできた。自分で作ってもよかったのだけど、retryablehttp がシンプルで私の求めている機能そのものにみえたのでこのライブラリを採用した。既存の http クライアントの機能を次の2箇所変更するだけで retryablehttp が使える。こういうインテグレーションの簡単さも嬉しい。ちゃんとバックオフとジッターの機能も実装しているし、デフォルトのそれらの機能をカスタムで置き換えることもできる。最低限のリトライ機能があればいいといった http クライアントならこれでよいと思う。こういうシンプルで使い勝手のよいライブラリをみつけると嬉しくなる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-diff" data-lang="diff">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">- res, err := c.raw.Do(req)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+ _req, err := retryablehttp.FromRequest(req)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ if err != nil {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ return []byte{}, fmt.Errorf(&amp;#34;failed to create retryable request: %w&amp;#34;, err)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ res, err := c.raw.Do(_req)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-diff" data-lang="diff">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+func NewRetryableClient(cfg config.Client) *retryablehttp.Client {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ c := retryablehttp.NewClient()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ c.Logger = log.GetLogger()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ c.RetryWaitMin = cfg.RetryWaitMin
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ c.RetryWaitMax = cfg.RetryWaitMax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ c.RetryMax = cfg.RetryMax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ return c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">- raw: http.DefaultClient,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+ raw: NewRetryableClient(cfg),
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>zeromq のメッセージングを go でやり取りする</title><link>/diary/posts/2023/0302/</link><pubDate>Thu, 02 Mar 2023 08:40:34 +0900</pubDate><guid>/diary/posts/2023/0302/</guid><description>0時に寝て何度か起きて7時に起きた。たぶんよく眠れたと思う。
zeromq のライブラリ選定 zeromq のクライアントをサンプル的に実装している。windows と linux の両方で使う予定なので pure go 実装の go-zeromq/zmq4 を使ってみることにした。zeromq のライブラリはいくつかあるが、大きく2つに分けられる。
c 言語の zeromq ライブラリのラッパー zeromq のプロトコルを pure go 実装 c 言語のライブラリのラッパーだとビルド環境をプラットフォームごとに用意しないといけない。pure go ならクロスコンパイルも簡単。例えば、linux 上で windows のバイナリをビルドするには次のようにする。go ならたったこれだけでよい。
GOOS=windows GOARCH=amd64 go build -o bin/myapp.exe ./cmd/myapp/main.go 但し、zeromq の pure go 実装は開発があまり活発ではないし production ready でもない。まだまだベータ版というか、stable な実装にはなっていないようにみえる。うちの用途はとてもシンプルなメッセージングに使うだけなので動けば問題ないだろうという想定で最初の選択肢として go-zeromq/zmq4 を試してみる。これはまだチュートリアル的に動かしているレベルなのでコードが誤っているかもしれないが、ひとまずメッセージのやり取りができるところまで確認した。windows でも動く。これから1ヶ月ほどかけて実運用レベルのデータやテストを実施して本当に使えるかどうかの検証をしていく。
メッセージを送る側は Push というソケットを使う。送信は chan を使って非同期に送る必要性はないのだけど Pull にあわせて汎用性をもつ実装にするとこんな感じかな。
func Push( ctx context.Context, cfg config.Queue, msgCh &amp;lt;-chan zmq4.Msg, ) (&amp;lt;-chan error, error) { push := zmq4.</description><content>&lt;p>0時に寝て何度か起きて7時に起きた。たぶんよく眠れたと思う。&lt;/p>
&lt;h2 id="zeromq-のライブラリ選定">zeromq のライブラリ選定&lt;/h2>
&lt;p>zeromq のクライアントをサンプル的に実装している。windows と linux の両方で使う予定なので pure go 実装の &lt;a href="https://github.com/go-zeromq/zmq4">go-zeromq/zmq4&lt;/a> を使ってみることにした。zeromq のライブラリはいくつかあるが、大きく2つに分けられる。&lt;/p>
&lt;ul>
&lt;li>c 言語の zeromq ライブラリのラッパー&lt;/li>
&lt;li>zeromq のプロトコルを pure go 実装&lt;/li>
&lt;/ul>
&lt;p>c 言語のライブラリのラッパーだとビルド環境をプラットフォームごとに用意しないといけない。pure go ならクロスコンパイルも簡単。例えば、linux 上で windows のバイナリをビルドするには次のようにする。go ならたったこれだけでよい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>GOOS&lt;span style="color:#f92672">=&lt;/span>windows GOARCH&lt;span style="color:#f92672">=&lt;/span>amd64 go build -o bin/myapp.exe ./cmd/myapp/main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但し、zeromq の pure go 実装は開発があまり活発ではないし production ready でもない。まだまだベータ版というか、stable な実装にはなっていないようにみえる。うちの用途はとてもシンプルなメッセージングに使うだけなので動けば問題ないだろうという想定で最初の選択肢として go-zeromq/zmq4 を試してみる。これはまだチュートリアル的に動かしているレベルなのでコードが誤っているかもしれないが、ひとまずメッセージのやり取りができるところまで確認した。windows でも動く。これから1ヶ月ほどかけて実運用レベルのデータやテストを実施して本当に使えるかどうかの検証をしていく。&lt;/p>
&lt;p>メッセージを送る側は Push というソケットを使う。送信は chan を使って非同期に送る必要性はないのだけど Pull にあわせて汎用性をもつ実装にするとこんな感じかな。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Push&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">cfg&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Queue&lt;/span>, &lt;span style="color:#a6e22e">msgCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">zmq4&lt;/span>.&lt;span style="color:#a6e22e">Msg&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) (&lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">zmq4&lt;/span>.&lt;span style="color:#a6e22e">NewPush&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">zmq4&lt;/span>.&lt;span style="color:#a6e22e">WithDialerRetry&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span>.&lt;span style="color:#a6e22e">SetOption&lt;/span>(&lt;span style="color:#a6e22e">zmq4&lt;/span>.&lt;span style="color:#a6e22e">OptionHWM&lt;/span>, &lt;span style="color:#a6e22e">cfg&lt;/span>.&lt;span style="color:#a6e22e">SendHWM&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to set socket option: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">endpoint&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ipc://&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">cfg&lt;/span>.&lt;span style="color:#a6e22e">Path&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span>.&lt;span style="color:#a6e22e">Dial&lt;/span>(&lt;span style="color:#a6e22e">endpoint&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to dial: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span>.&lt;span style="color:#a6e22e">Addr&lt;/span>(); &lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;dialer with non-nil addr&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">errCh&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>, &lt;span style="color:#a6e22e">messageChanSize&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">push&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;push queue was closed&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> close(&lt;span style="color:#a6e22e">errCh&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">msgCh&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span>.&lt;span style="color:#a6e22e">Send&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">errCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">Is&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Canceled&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;push queue is closing ...&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">any&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;err&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">err&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">errCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errCh&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>メッセージを受け取る側は Pull というソケットを使う。&lt;code>Recv()&lt;/code> でキューからメッセージの到着をブロックする。context をキャンセルすると &lt;code>Recv()&lt;/code> が即時でエラーを返すので終了処理も制御しやすい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Pull&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">cfg&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Queue&lt;/span>) (&lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">zmq4&lt;/span>.&lt;span style="color:#a6e22e">Msg&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pull&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">zmq4&lt;/span>.&lt;span style="color:#a6e22e">NewPull&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">endpoint&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ipc://&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">cfg&lt;/span>.&lt;span style="color:#a6e22e">Path&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pull&lt;/span>.&lt;span style="color:#a6e22e">Listen&lt;/span>(&lt;span style="color:#a6e22e">endpoint&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to listen: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pull&lt;/span>.&lt;span style="color:#a6e22e">Addr&lt;/span>(); &lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;listener with nil addr&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">zmq4&lt;/span>.&lt;span style="color:#a6e22e">Msg&lt;/span>, &lt;span style="color:#a6e22e">messageChanSize&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pull&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> close(&lt;span style="color:#a6e22e">ch&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pull queue was closed&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;-- waiting messages ...&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pull&lt;/span>.&lt;span style="color:#a6e22e">Recv&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">Is&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Canceled&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pull queue is closing ...&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">any&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;err&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">err&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">EOF&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;got EOF&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to recieve&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">any&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;err&amp;#34;&lt;/span>: &lt;span style="color:#a6e22e">err&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ch&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>go 1.20.1 を使い始めた</title><link>/diary/posts/2023/0227/</link><pubDate>Mon, 27 Feb 2023 08:17:22 +0900</pubDate><guid>/diary/posts/2023/0227/</guid><description>0時に寝て何度か起きて7時半に起きた。あまりうまく眠れなかった。
go 1.20.1 へのアップグレード リファクタリングの区切りがついたらやろうと思っていて遅れた。すでに 1.20.1 がリリースされている。先日 Go 1.20 リリースパーティ に参加して、いろいろ聞いていると改善されているところや新しい機能を試してみたいものがいくつかみつかった。単純にアップグレードするだけでも最大でビルド時間が10%短縮される可能性がある。1.18 と 1.19 で generics 対応でビルド時間が遅くなっていたのが 1.17 相当に改善されたらしい。やっぱり generics はコンパイラを複雑にするものなのでコンパイル時間が長くなる傾向があるんやなと話しを聞いていて思ったりもした。ついでに依存ライブラリなどのバージョンアップもまとめてやった。単体テストと結合テストが普通には揃ってきたのでバージョンアップなども安心して実行できる。
rocky linux のネットワーク設定 テスト環境に使っている rocky linux の ip アドレスを変更する必要があったので調べてみた。ちゃんとした公式のガイドが出てきてすごいなと感心した。
Network Configuration - Rocky Linux 9 ip アドレスを確認するコマンドが ifconfig から ip に変わっていたり、ネットワーク設定のためのツールも私が知っているものとは全然変わってしまっている。
$ ip addr Network Manager のサービスで設定されているようでそのための設定ファイルは次の場所に保存されていた。
/etc/NetworkManager/system-connections/my-device.nmconnection これを書き換えるツールとして nmtui という tui ツールと nmcli という cli ツールの2つがある。tui とか懐かしいなとか思いながら操作していた。ssh 経由で設定していたので cli でいきなり設定を反映するよりも tui で設定ファイルを書き換えて os を再起動するのがよいだろうと考えてやってみた。ドキュメントに書いてある通りに操作したら意図した ip アドレスを設定して変更できた。</description><content>&lt;p>0時に寝て何度か起きて7時半に起きた。あまりうまく眠れなかった。&lt;/p>
&lt;h2 id="go-1201-へのアップグレード">go 1.20.1 へのアップグレード&lt;/h2>
&lt;p>リファクタリングの区切りがついたらやろうと思っていて遅れた。すでに 1.20.1 がリリースされている。先日 &lt;a href="https://gocon.connpass.com/event/273096/">Go 1.20 リリースパーティ&lt;/a> に参加して、いろいろ聞いていると改善されているところや新しい機能を試してみたいものがいくつかみつかった。単純にアップグレードするだけでも最大でビルド時間が10%短縮される可能性がある。1.18 と 1.19 で generics 対応でビルド時間が遅くなっていたのが 1.17 相当に改善されたらしい。やっぱり generics はコンパイラを複雑にするものなのでコンパイル時間が長くなる傾向があるんやなと話しを聞いていて思ったりもした。ついでに依存ライブラリなどのバージョンアップもまとめてやった。単体テストと結合テストが普通には揃ってきたのでバージョンアップなども安心して実行できる。&lt;/p>
&lt;iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/b76374a32d394b66afdfea89da855927?slide=1" title="What's new in Go 1.20?" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 600px; height: auto; aspect-ratio: 560 / 314;" data-ratio="1.78343949044586">&lt;/iframe>
&lt;h2 id="rocky-linux-のネットワーク設定">rocky linux のネットワーク設定&lt;/h2>
&lt;p>テスト環境に使っている rocky linux の ip アドレスを変更する必要があったので調べてみた。ちゃんとした公式のガイドが出てきてすごいなと感心した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.rockylinux.org/guides/network/basic_network_configuration/">Network Configuration - Rocky Linux 9&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ip アドレスを確認するコマンドが ifconfig から ip に変わっていたり、ネットワーク設定のためのツールも私が知っているものとは全然変わってしまっている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ip addr
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Network Manager のサービスで設定されているようでそのための設定ファイルは次の場所に保存されていた。&lt;/p>
&lt;pre tabindex="0">&lt;code>/etc/NetworkManager/system-connections/my-device.nmconnection
&lt;/code>&lt;/pre>&lt;p>これを書き換えるツールとして nmtui という tui ツールと nmcli という cli ツールの2つがある。tui とか懐かしいなとか思いながら操作していた。ssh 経由で設定していたので cli でいきなり設定を反映するよりも tui で設定ファイルを書き換えて os を再起動するのがよいだろうと考えてやってみた。ドキュメントに書いてある通りに操作したら意図した ip アドレスを設定して変更できた。&lt;/p></content></item><item><title>リファクタリング一段落</title><link>/diary/posts/2023/0225/</link><pubDate>Sat, 25 Feb 2023 13:00:24 +0900</pubDate><guid>/diary/posts/2023/0225/</guid><description>1時に寝て7時に起きた。前日も21時頃までオフィスにいて、今日も午後からコードを書いていて22時ぐらいまでやってた。コードを書いていると時間がどんどんなくなる。本当は三宮.dev の勉強会があったんだけど、このリファクタリングは週末にやってしまわないとやばいという野生の勘でキャンセルした。
ストレッチ 今日の開脚幅は開始前156cmで、ストレッチ後160cmだった。だいたいいつも通り。先週から右すねの外側の筋に張りがある。先週よりちょっとよくなった気もするけれど、まだ張りが継続している。あと今週は右腰に張りがあった。今週はリファクタリングしていて座ってきる時間がいつもより長かったためだろうと推測する。どんなに忙しくてもストレッチだけは休まないようにしている。ストレッチに通い始めて2年以上経つが身体的に体調が悪いということは記憶にほぼない。日記にはその週のどこそこに張りがあるとか調子が悪いといったことを書いたりしているが、それは日常生活を送る上で支障が出るようなレベルではない。そうならないように予防している。健康を維持する上でストレッチは大きな影響を与えているため、中長期の展望から忙しくても継続するようにしている。
機能拡張とリファクタリング 今日は休日出勤して go のコードを書いていた。ある機能を作るときに内部的には汎用の api にしてしまって他のコレクションのデータ型でも再利用できるようにしたい。先週ずっと go の generics を使って mongodb 周りのコレクションとそのクライアントのリファクタリングをしていた。go の generics の理解も進んで crud なインターフェースを generics でどのように定義して実装すればいいかわかってきた。その過程で web api のアプリケーション層と mongodb のインフラ層 (データ層) の役割分担も明確になりつつある。どちらも generics を駆使して型チェックされた上でソースコードを共通化し、汎用 api としてリファクタリングしながら設計している。その集大成としてアプリケーション側で汎用的な機能を追加するときに、理想的には1つのコードを追加・変更すれば、別のデータ型でもすべて同じように動くといった機能として実装した。4つのコレクションのデータ型で同じ振る舞い (機能) を共通化する。その実装も丸1日やれば完了できるぐらいに設計の効率化ができてきた。
go はオブジェクト指向言語ではないので generics を駆使しても、java でいうところの抽象既定クラスを用いたテンプレートパターンの実装ができない。それぞれの構造体で基本的にはコピペとなる構造体のメソッドを定義しないといけない。もちろん別のヘルパーに移譲するといったことはできるけど、状態をもっていないコードの再利用はたしかに安全ではあるけれど、状態を参照できないからそのために値をコピーするといった整合性の懸念やボイラープレート的なコードを書く必要がある。これは設計におけるトレードオフになるので go の処理系の設計に不満があるわけではない。但し、generics でできることにはまだ機能不足がある。とくに直和型の扱い。できないのかな？とググると proposal の issue がみつかるので今後の機能拡張に期待したい。
正直マネージャーが開発に工数使っていて何やってるんだとみられているかもしれない。1-2週間集中してリファクタリングしてみて、いまのアプリケーションの設計の勘所が以前よりも理解が進んだ。コードレビューだけではわからないフィードバックがある。結合テストもいくつか追加したので今後の開発で役に立つはず。これで私の (リファクタリング) 開発は終了しようと思う。
今日作ったマージリクエストの diff が次になる。
51 files +1314 -648 diff の行数だけ数えると今週だけで1万行近くは変更したと思う。</description><content>&lt;p>1時に寝て7時に起きた。前日も21時頃までオフィスにいて、今日も午後からコードを書いていて22時ぐらいまでやってた。コードを書いていると時間がどんどんなくなる。本当は三宮.dev の勉強会があったんだけど、このリファクタリングは週末にやってしまわないとやばいという野生の勘でキャンセルした。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前156cmで、ストレッチ後160cmだった。だいたいいつも通り。先週から右すねの外側の筋に張りがある。先週よりちょっとよくなった気もするけれど、まだ張りが継続している。あと今週は右腰に張りがあった。今週はリファクタリングしていて座ってきる時間がいつもより長かったためだろうと推測する。どんなに忙しくてもストレッチだけは休まないようにしている。ストレッチに通い始めて2年以上経つが身体的に体調が悪いということは記憶にほぼない。日記にはその週のどこそこに張りがあるとか調子が悪いといったことを書いたりしているが、それは日常生活を送る上で支障が出るようなレベルではない。そうならないように予防している。健康を維持する上でストレッチは大きな影響を与えているため、中長期の展望から忙しくても継続するようにしている。&lt;/p>
&lt;h2 id="機能拡張とリファクタリング">機能拡張とリファクタリング&lt;/h2>
&lt;p>今日は休日出勤して go のコードを書いていた。ある機能を作るときに内部的には汎用の api にしてしまって他のコレクションのデータ型でも再利用できるようにしたい。先週ずっと go の generics を使って mongodb 周りのコレクションとそのクライアントのリファクタリングをしていた。go の generics の理解も進んで crud なインターフェースを generics でどのように定義して実装すればいいかわかってきた。その過程で web api のアプリケーション層と mongodb のインフラ層 (データ層) の役割分担も明確になりつつある。どちらも generics を駆使して型チェックされた上でソースコードを共通化し、汎用 api としてリファクタリングしながら設計している。その集大成としてアプリケーション側で汎用的な機能を追加するときに、理想的には1つのコードを追加・変更すれば、別のデータ型でもすべて同じように動くといった機能として実装した。4つのコレクションのデータ型で同じ振る舞い (機能) を共通化する。その実装も丸1日やれば完了できるぐらいに設計の効率化ができてきた。&lt;/p>
&lt;p>go はオブジェクト指向言語ではないので generics を駆使しても、java でいうところの抽象既定クラスを用いたテンプレートパターンの実装ができない。それぞれの構造体で基本的にはコピペとなる構造体のメソッドを定義しないといけない。もちろん別のヘルパーに移譲するといったことはできるけど、状態をもっていないコードの再利用はたしかに安全ではあるけれど、状態を参照できないからそのために値をコピーするといった整合性の懸念やボイラープレート的なコードを書く必要がある。これは設計におけるトレードオフになるので go の処理系の設計に不満があるわけではない。但し、generics でできることにはまだ機能不足がある。とくに直和型の扱い。できないのかな？とググると proposal の issue がみつかるので今後の機能拡張に期待したい。&lt;/p>
&lt;p>正直マネージャーが開発に工数使っていて何やってるんだとみられているかもしれない。1-2週間集中してリファクタリングしてみて、いまのアプリケーションの設計の勘所が以前よりも理解が進んだ。コードレビューだけではわからないフィードバックがある。結合テストもいくつか追加したので今後の開発で役に立つはず。これで私の (リファクタリング) 開発は終了しようと思う。&lt;/p>
&lt;p>今日作ったマージリクエストの diff が次になる。&lt;/p>
&lt;pre tabindex="0">&lt;code>51 files +1314 -648
&lt;/code>&lt;/pre>&lt;p>diff の行数だけ数えると今週だけで1万行近くは変更したと思う。&lt;/p></content></item><item><title>mongodb のトランザクションの考え方</title><link>/diary/posts/2023/0224/</link><pubDate>Fri, 24 Feb 2023 12:22:57 +0900</pubDate><guid>/diary/posts/2023/0224/</guid><description>1時に寝て8時に起きた。3時頃に気分悪くて起きて少し吐いてそれからまた寝た。丸1日機能拡張とリファクタリングのために go のコードを書いていた。
mongodb のトランザクション管理 2つの web api から同じコレクションの異なるフィールドを更新したい。mongodb で厳密なトランザクションを管理するようなアプリケーションではないけど、なるべく整合性を維持できるように努めることはやっておきたい。mongodb でトランザクションに近いことを実現する方法として次の記事が参考になった。
How To SELECT &amp;hellip; FOR UPDATE inside MongoDB Transactions この記事では findOneAndUpdate() という api を使って、更新時に必ず変更されるフィールドを含めることで find したときのそのフィールドの値が変わっていればエラーになってくれることでトランザクション相当の機能が提供されると書いてある。必ず変更されるフィールドとして ObjectId を使えば他の更新処理を検出するのに役立つだろうとある。いま私が開発しているアプリケーションでは同じフィールドを複数の web api から更新するわけではないのでここまで厳密なトランザクション管理は必要にない。
既存の処理が Replace を使って実装されていたのを Update を使うように変更する。Replace と Update の違いはドキュメント全体を更新するのか、一部のフィールドのみを更新するのかの違いになる。具体的には go のドライバーにおいて次のメソッドの使い分けになる。
FindOneAndReplace FindOneAndUpdate これらのメソッドを使うことで find と replace/update の操作を1回の処理でできるから効率もよいらしい。</description><content>&lt;p>1時に寝て8時に起きた。3時頃に気分悪くて起きて少し吐いてそれからまた寝た。丸1日機能拡張とリファクタリングのために go のコードを書いていた。&lt;/p>
&lt;h2 id="mongodb-のトランザクション管理">mongodb のトランザクション管理&lt;/h2>
&lt;p>2つの web api から同じコレクションの異なるフィールドを更新したい。mongodb で厳密なトランザクションを管理するようなアプリケーションではないけど、なるべく整合性を維持できるように努めることはやっておきたい。mongodb でトランザクションに近いことを実現する方法として次の記事が参考になった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.mongodb.com/blog/post/how-to-select--for-update-inside-mongodb-transactions">How To SELECT &amp;hellip; FOR UPDATE inside MongoDB Transactions&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>この記事では &lt;code>findOneAndUpdate()&lt;/code> という api を使って、更新時に必ず変更されるフィールドを含めることで find したときのそのフィールドの値が変わっていればエラーになってくれることでトランザクション相当の機能が提供されると書いてある。必ず変更されるフィールドとして &lt;a href="https://www.mongodb.com/docs/manual/reference/method/ObjectId/">ObjectId&lt;/a> を使えば他の更新処理を検出するのに役立つだろうとある。いま私が開発しているアプリケーションでは同じフィールドを複数の web api から更新するわけではないのでここまで厳密なトランザクション管理は必要にない。&lt;/p>
&lt;p>既存の処理が &lt;a href="https://www.mongodb.com/docs/drivers/go/current/usage-examples/replaceOne/">Replace&lt;/a> を使って実装されていたのを &lt;a href="https://www.mongodb.com/docs/drivers/go/current/usage-examples/updateOne/">Update&lt;/a> を使うように変更する。Replace と Update の違いはドキュメント全体を更新するのか、一部のフィールドのみを更新するのかの違いになる。具体的には go のドライバーにおいて次のメソッドの使い分けになる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pkg.go.dev/go.mongodb.org/mongo-driver/mongo#Collection.FindOneAndReplace">FindOneAndReplace&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pkg.go.dev/go.mongodb.org/mongo-driver/mongo#Collection.FindOneAndUpdate">FindOneAndUpdate&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>これらのメソッドを使うことで find と replace/update の操作を1回の処理でできるから効率もよいらしい。&lt;/p></content></item><item><title>結合テストのリファクタリング</title><link>/diary/posts/2023/0223/</link><pubDate>Thu, 23 Feb 2023 09:08:27 +0900</pubDate><guid>/diary/posts/2023/0223/</guid><description>0時に寝て7時に起きた。前日は久しぶりに飲んでいい気分で寝てた。朝コンビニ寄ったらいつもほぼ満席のイートインが閑散としているなと思いつつ、オフィスへ行って始業報告して、今日祝日だよとツッコミもらった。全然気付いていなかった。まだ新しい天皇誕生日に慣れてない。
go のテストにおける setup/teardown 関数の実装 昨日から結合テストのリファクタリングをしていてせっかくオフィスに行ったので続きをする。結合テストだとデータを作ったり削除したりをテスト単位にやりたい。例えば、ユーザーを作成してテスト実行し、終わったら作成したユーザーを削除したい。次のように setup 関数を書き、返り値として teardown の関数を返す。このときに t.Helper() を呼び出しておくと、エラーがあったときにどの呼び出し元のテストでエラーが発生したかがわかる。
func setupUsers(t *testing.T, users []mongodb.User) func() { t.Helper() user := mongodb.NewUserCollection(url, username, password) for _, u := range users { if err := user.Save(u.ID, u.Attributes); err != nil { t.Fatalf(&amp;#34;failed to create a user: %s&amp;#34;, err) } } return func() { t.Helper() if err := user.Truncate(); err != nil { t.Fatalf(&amp;#34;failed to truncate the user collection: %s&amp;#34;, err) } } } 使い方は簡単で setup 関数を呼び出すと teardown 関数が返ってくるのでそれを defer で呼び出すとよい。</description><content>&lt;p>0時に寝て7時に起きた。前日は久しぶりに飲んでいい気分で寝てた。朝コンビニ寄ったらいつもほぼ満席のイートインが閑散としているなと思いつつ、オフィスへ行って始業報告して、今日祝日だよとツッコミもらった。全然気付いていなかった。まだ新しい天皇誕生日に慣れてない。&lt;/p>
&lt;h2 id="go-のテストにおける-setupteardown-関数の実装">go のテストにおける setup/teardown 関数の実装&lt;/h2>
&lt;p>昨日から結合テストのリファクタリングをしていてせっかくオフィスに行ったので続きをする。結合テストだとデータを作ったり削除したりをテスト単位にやりたい。例えば、ユーザーを作成してテスト実行し、終わったら作成したユーザーを削除したい。次のように setup 関数を書き、返り値として teardown の関数を返す。このときに &lt;code>t.Helper()&lt;/code> を呼び出しておくと、エラーがあったときにどの呼び出し元のテストでエラーが発生したかがわかる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">setupUsers&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>, &lt;span style="color:#a6e22e">users&lt;/span> []&lt;span style="color:#a6e22e">mongodb&lt;/span>.&lt;span style="color:#a6e22e">User&lt;/span>) &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Helper&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">mongodb&lt;/span>.&lt;span style="color:#a6e22e">NewUserCollection&lt;/span>(&lt;span style="color:#a6e22e">url&lt;/span>, &lt;span style="color:#a6e22e">username&lt;/span>, &lt;span style="color:#a6e22e">password&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">users&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span>.&lt;span style="color:#a6e22e">Save&lt;/span>(&lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">ID&lt;/span>, &lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">Attributes&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Fatalf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to create a user: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Helper&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">user&lt;/span>.&lt;span style="color:#a6e22e">Truncate&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Fatalf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to truncate the user collection: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使い方は簡単で setup 関数を呼び出すと teardown 関数が返ってくるのでそれを defer で呼び出すとよい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">teardown&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">setupUsers&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">usersTestData&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">teardown&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>しかし、この setup 関数をサブテストと一緒に並行実行すると意図したように動かない。どうやらサブテストを並行実行すると親テストが呼ばれた後に呼び出されるという仕組みになっていて、サブテストを実行する前に teardown が呼ばれてしまうので意図した制御にならない。&lt;a href="https://stackoverflow.com/a/53950628">How to handle parent test teardown with parallel subtests in golang の回答&lt;/a> によると、サブテストからさらにサブテストを実行するとよいとある。この場合、親テストとサブテストは同期的に実行され、サブテストの中でさらにサブテストを並行実行するという考え方で意図した振る舞いになる。並行実行するときは次のようなコードになる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestMy&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tests&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">struct&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// test cases
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">teardown&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">setupUsers&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">usersTestData&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">teardown&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;wrap for setup process&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">tt&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">tests&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tt&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">tt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">tt&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Parallel&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do test
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>コンテキストによるキャンセル処理</title><link>/diary/posts/2023/0220/</link><pubDate>Mon, 20 Feb 2023 20:41:01 +0900</pubDate><guid>/diary/posts/2023/0220/</guid><description>1時に寝て7時に起きた。昨日がっつりコードを書いていたせいか、起きてから今日は休みたいと思いながらだらだらしてた。休めないのだけど。貧乏暇なし。
echo のリクエストコンテキスト 昨日の続きで mongodb のリファクタリングをしている。mongodb はほぼすべての処理で コンテキスト を受け取れるように設計されている。メンバーが go の context の扱いを理解していないのでコンテキストを渡すようなインターフェースになっていない。私もこれまでのコードレビューでキャンセル処理は些事なのでそれよりも機能開発を優先して後回しにしていた。それで、いま機能が一通り開発完了したのでインターフェースにコンテキストを受け取るようにリファクタリングした。デフォルトのコンテキストとして echo のリクエストコンテキストを渡す。Canceling request #1815 によると、echo のリクエストコンテキストは次の状況のときにキャンセルしてくれる。
クライアントのコネクションがクローズされたとき http2 でリクエストがキャンセルされたとき ServeHTTP() が返るとき サーバーがシャットダウンするタイミング？ 使い方はこんなイメージ。
ctx := c.Request().Context() store := c.Get(myStore).(Store) store.Get(ctx, request.From, request.To)</description><content>&lt;p>1時に寝て7時に起きた。昨日がっつりコードを書いていたせいか、起きてから今日は休みたいと思いながらだらだらしてた。休めないのだけど。貧乏暇なし。&lt;/p>
&lt;h2 id="echo-のリクエストコンテキスト">echo のリクエストコンテキスト&lt;/h2>
&lt;p>昨日の続きで mongodb のリファクタリングをしている。mongodb はほぼすべての処理で &lt;a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/context/">コンテキスト&lt;/a> を受け取れるように設計されている。メンバーが &lt;a href="https://pkg.go.dev/context">go の context&lt;/a> の扱いを理解していないのでコンテキストを渡すようなインターフェースになっていない。私もこれまでのコードレビューでキャンセル処理は些事なのでそれよりも機能開発を優先して後回しにしていた。それで、いま機能が一通り開発完了したのでインターフェースにコンテキストを受け取るようにリファクタリングした。デフォルトのコンテキストとして echo のリクエストコンテキストを渡す。&lt;a href="https://github.com/labstack/echo/discussions/1815">Canceling request #1815&lt;/a> によると、echo のリクエストコンテキストは次の状況のときにキャンセルしてくれる。&lt;/p>
&lt;ul>
&lt;li>クライアントのコネクションがクローズされたとき&lt;/li>
&lt;li>http2 でリクエストがキャンセルされたとき&lt;/li>
&lt;li>ServeHTTP() が返るとき
&lt;ul>
&lt;li>サーバーがシャットダウンするタイミング？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>使い方はこんなイメージ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Request&lt;/span>().&lt;span style="color:#a6e22e">Context&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">store&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">myStore&lt;/span>).(&lt;span style="color:#a6e22e">Store&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">request&lt;/span>.&lt;span style="color:#a6e22e">From&lt;/span>, &lt;span style="color:#a6e22e">request&lt;/span>.&lt;span style="color:#a6e22e">To&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>余裕がなさ過ぎる</title><link>/diary/posts/2023/0217/</link><pubDate>Fri, 17 Feb 2023 09:12:06 +0900</pubDate><guid>/diary/posts/2023/0217/</guid><description>1時に寝て7時に起きた。タスクが溜まり過ぎてそろそろ辛くなってきているところ。この余裕の無さはよくないことなので、自分のダメさ加減というか、大いに反省しないといけない。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。いつもは打ち合わせの議題を2-3日前には共有するようにしている。だいたい水曜日前後に議題のリファレンスをはらさんに共有して金曜日の朝に話している。しかし、今週はリファクタリングに集中し過ぎていて前日の寝る前になって議題を共有していないことに気付いた。そして朝起きてから急ぎで議題を考えて共有していた。これはとてもよくない。準備ができていないので今日の議題は主に近況の話しをしていた。
プロジェクトマネジメントの話し データ指向アプリケーションデザインのイベントの所感 Gopher塾イベントの所感 ハドルの雑談 先日から 午前中はハドルに滞在 するようにしている。今週は木曜日にチーム外から勉強会についての相談が、今日はメンバーから気分転換に雑談にやってきてくれた。おそらく私がハドルにいなかったらゼロだったコミュニケーションの機会が、1週間に1-2回でもあることに私は嬉しく思ってしまう。フルリモートワークにおける、オフラインのような気軽な雑談の機会を提供する施策の1つとして意味なくハドルに入るのは悪くない気がしている。そのときにコミュニケーションを強制させるような押し付けが発生しないよう、運用ルールを徹底することが大事に思える。いまは相手がハドルに入ってくると 1on1 のような雰囲気になってしまうのでその次の挑戦としてはハドルに入っていても話さなくてよいといった運用ルールを設ければよいのではないかと思う。例えば、午前中はとりあえずハドルに入って気分が向いたときだけ話しかけるみたいな、ゆるいコミュニケーションの場になればいいなと思う。
ハドル雑談の運用ルールのアイディア
ハドルに入らなくても業務上の支障は一切おきない ハドルにいる人には、用事があってもなくても、話しかけてよい ハドルに入っていても話さず聞いているだけでもよい 業務に集中していて忙しいときは話しかけられても後回しにしてもよい (ハドルから退出した方がわかりやすいかもしれない) go の generics 勉強会 ちょうど先週からあちこち直したり、mongodb のクライアント周りをリファクタリングしたりしている。その過程で generics を使ってコードの共通化もしたりしている。私自身 generics で意図した通りにコンパイルできなくてはまってしまった事例もあるのでそういった失敗コードも共有した。go の generics はコードに対して静的な領域しか適用されず、コード中における動的な値の型は generics とは直行した概念だというところに初学者ははまるのではないかと思う。私がはまった。参加者におそらく1度はまるからはまったときに私が話していたことを思い出してとコードの解説をしていた。
今日は type constraint でできることと動的な値との関係を混同して generics でできないことを一生懸命やろうとしてた。interface に変換して型パラメーターに type assertion すればコンパイルは通る。2時間ほどはまってた。。。https://t.co/vmk6CfVTl8
&amp;mdash; Tetsuya Morimoto (@t2y) February 16, 2023 余裕があったらスライドにまとめて後で資料として再利用できるようにしたかったものの、私の作業に余裕がなさ過ぎて次のリファレンスから引用しながら解説するといった勉強会になった。ただ私が読んでよいと思った他者のスライドやブログの記事のみを紹介している。それはそれで参考にはなるので勉強会の意図としては問題なかったんじゃないかとは思う。
The Generic Dilemma Tutorial: Getting started with generics Go 1.18集中連載 ジェネリクス Go1.18最新情報 Understanding generics in Go 1.18 golang 1.18+ generics: The Good, The Bad, The Ugly.</description><content>&lt;p>1時に寝て7時に起きた。タスクが溜まり過ぎてそろそろ辛くなってきているところ。この余裕の無さはよくないことなので、自分のダメさ加減というか、大いに反省しないといけない。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。いつもは打ち合わせの議題を2-3日前には共有するようにしている。だいたい水曜日前後に議題のリファレンスをはらさんに共有して金曜日の朝に話している。しかし、今週はリファクタリングに集中し過ぎていて前日の寝る前になって議題を共有していないことに気付いた。そして朝起きてから急ぎで議題を考えて共有していた。これはとてもよくない。準備ができていないので今日の議題は主に近況の話しをしていた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="/diary/diary/posts/2023/0209/#プロジェクトの進捗報告">プロジェクトマネジメントの話し&lt;/a>&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2023/0215/#データ指向アプリケーションデザインの紹介イベント">データ指向アプリケーションデザインのイベントの所感&lt;/a>&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2023/0204/">Gopher塾イベントの所感&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="ハドルの雑談">ハドルの雑談&lt;/h2>
&lt;p>先日から &lt;a href="/diary/diary/posts/2023/0202/">午前中はハドルに滞在&lt;/a> するようにしている。今週は木曜日にチーム外から勉強会についての相談が、今日はメンバーから気分転換に雑談にやってきてくれた。おそらく私がハドルにいなかったらゼロだったコミュニケーションの機会が、1週間に1-2回でもあることに私は嬉しく思ってしまう。フルリモートワークにおける、オフラインのような気軽な雑談の機会を提供する施策の1つとして意味なくハドルに入るのは悪くない気がしている。そのときにコミュニケーションを強制させるような押し付けが発生しないよう、運用ルールを徹底することが大事に思える。いまは相手がハドルに入ってくると 1on1 のような雰囲気になってしまうのでその次の挑戦としてはハドルに入っていても話さなくてよいといった運用ルールを設ければよいのではないかと思う。例えば、午前中はとりあえずハドルに入って気分が向いたときだけ話しかけるみたいな、ゆるいコミュニケーションの場になればいいなと思う。&lt;/p>
&lt;p>ハドル雑談の運用ルールのアイディア&lt;/p>
&lt;ul>
&lt;li>ハドルに入らなくても業務上の支障は一切おきない&lt;/li>
&lt;li>ハドルにいる人には、用事があってもなくても、話しかけてよい&lt;/li>
&lt;li>ハドルに入っていても話さず聞いているだけでもよい&lt;/li>
&lt;li>業務に集中していて忙しいときは話しかけられても後回しにしてもよい (ハドルから退出した方がわかりやすいかもしれない)&lt;/li>
&lt;/ul>
&lt;h2 id="go-の-generics-勉強会">go の generics 勉強会&lt;/h2>
&lt;p>ちょうど先週からあちこち直したり、mongodb のクライアント周りをリファクタリングしたりしている。その過程で generics を使ってコードの共通化もしたりしている。私自身 generics で意図した通りにコンパイルできなくてはまってしまった事例もあるのでそういった失敗コードも共有した。go の generics はコードに対して静的な領域しか適用されず、コード中における動的な値の型は generics とは直行した概念だというところに初学者ははまるのではないかと思う。私がはまった。参加者におそらく1度はまるからはまったときに私が話していたことを思い出してとコードの解説をしていた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">今日は type constraint でできることと動的な値との関係を混同して generics でできないことを一生懸命やろうとしてた。interface に変換して型パラメーターに type assertion すればコンパイルは通る。2時間ほどはまってた。。。&lt;a href="https://t.co/vmk6CfVTl8">https://t.co/vmk6CfVTl8&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1626177820362940421?ref_src=twsrc%5Etfw">February 16, 2023&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>余裕があったらスライドにまとめて後で資料として再利用できるようにしたかったものの、私の作業に余裕がなさ過ぎて次のリファレンスから引用しながら解説するといった勉強会になった。ただ私が読んでよいと思った他者のスライドやブログの記事のみを紹介している。それはそれで参考にはなるので勉強会の意図としては問題なかったんじゃないかとは思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://research.swtch.com/generic">The Generic Dilemma&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://go.dev/doc/tutorial/generics">Tutorial: Getting started with generics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://future-architect.github.io/articles/20220209a/">Go 1.18集中連載 ジェネリクス&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.google.com/presentation/d/1Dj7Rs5K1HkVogbX9vuxcja-uJ5tIqxkFwPG-W31vP0E/edit#slide=id.p">Go1.18最新情報&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.logrocket.com/understanding-generics-go-1-18/">Understanding generics in Go 1.18&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://itnext.io/golang-1-18-generics-the-good-the-bad-the-ugly-5e9fa2520e76">golang 1.18+ generics: The Good, The Bad, The Ugly.&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>windows の調査を開始</title><link>/diary/posts/2023/0210/</link><pubDate>Fri, 10 Feb 2023 15:39:06 +0900</pubDate><guid>/diary/posts/2023/0210/</guid><description>1時に寝て7時過ぎに起きた。やや飲み過ぎて、2日酔いではないけど起きたときは気分が悪かった。
go-winio を触ってみた windows 向けのモジュールを作り直すにあたり、有識者のサポートをお願いしているものの、私も最低限の知識はないとあかんやろと調査を開始した。microsoft/go-winio というライブラリが ms 社のリポジトリで公開されている。公式ならよいのだろうと安易に考えて触ってみたものの、ドキュメントがほとんどなくて、まず使い方がわからん。いまのところ、windows に詳しい人向けのライブラリみたい。ひとまずリポジトリにある pipe_test.go のテストコードを読みながら名前付きパイプを介したプロセス間通信をやってみた。一応は動いたのでここから内部の windows api の仕様や設定などをみていく。その過程で go-winio のチュートリアルがないのであれば、私がテックブログを書いてもよいのかもしれない。
チュートリアル的に書いてみたコードは次の通り。
https://gitlab.com/t2y/misc/-/tree/main/winio-send https://gitlab.com/t2y/misc/-/tree/main/winio-receive 課題管理勉強会 出張のときに毎月の課題管理勉強会。とくにネタが思いつかなかったので エンジニアリング組織論への招待 を題材にしてみた。資料はすでに作ってあった 。私にとっては課題管理をやる意義や価値の大半がこの書籍の中で解説されている。用語や考え方のところでとても参考になるし、いまメンタリングの技術の章を読み直したりもしている。昔はマネージャーやってなかったからその章は読み飛ばしてた。開発組織向けの組織論を解説した書籍でこれ以上のものは、いまのところ、私が読んだ本の中では知らない。4年前に読んだ本を、今回の勉強会を開く機会でまた読み直すきっかけにもなってよかった。本はコンテキストがきれいに構成されているので他の人の所感や意見を聞いたり雑談したりする題材としてもよさそうに思える。</description><content>&lt;p>1時に寝て7時過ぎに起きた。やや飲み過ぎて、2日酔いではないけど起きたときは気分が悪かった。&lt;/p>
&lt;h2 id="go-winio-を触ってみた">go-winio を触ってみた&lt;/h2>
&lt;p>windows 向けのモジュールを作り直すにあたり、有識者のサポートをお願いしているものの、私も最低限の知識はないとあかんやろと調査を開始した。&lt;a href="https://github.com/microsoft/go-winio">microsoft/go-winio&lt;/a> というライブラリが ms 社のリポジトリで公開されている。公式ならよいのだろうと安易に考えて触ってみたものの、ドキュメントがほとんどなくて、まず使い方がわからん。いまのところ、windows に詳しい人向けのライブラリみたい。ひとまずリポジトリにある pipe_test.go のテストコードを読みながら名前付きパイプを介したプロセス間通信をやってみた。一応は動いたのでここから内部の windows api の仕様や設定などをみていく。その過程で go-winio のチュートリアルがないのであれば、私がテックブログを書いてもよいのかもしれない。&lt;/p>
&lt;p>チュートリアル的に書いてみたコードは次の通り。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gitlab.com/t2y/misc/-/tree/main/winio-send">https://gitlab.com/t2y/misc/-/tree/main/winio-send&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gitlab.com/t2y/misc/-/tree/main/winio-receive">https://gitlab.com/t2y/misc/-/tree/main/winio-receive&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="課題管理勉強会">課題管理勉強会&lt;/h2>
&lt;p>出張のときに毎月の課題管理勉強会。とくにネタが思いつかなかったので &lt;a href="https://gihyo.jp/book/2018/978-4-7741-9605-3">エンジニアリング組織論への招待&lt;/a> を題材にしてみた。&lt;a href="/diary/diary/posts/2023/0205/">資料はすでに作ってあった&lt;/a> 。私にとっては課題管理をやる意義や価値の大半がこの書籍の中で解説されている。用語や考え方のところでとても参考になるし、いまメンタリングの技術の章を読み直したりもしている。昔はマネージャーやってなかったからその章は読み飛ばしてた。開発組織向けの組織論を解説した書籍でこれ以上のものは、いまのところ、私が読んだ本の中では知らない。4年前に読んだ本を、今回の勉強会を開く機会でまた読み直すきっかけにもなってよかった。本はコンテキストがきれいに構成されているので他の人の所感や意見を聞いたり雑談したりする題材としてもよさそうに思える。&lt;/p></content></item><item><title>集中のち寝不足</title><link>/diary/posts/2023/0206/</link><pubDate>Mon, 06 Feb 2023 09:21:43 +0900</pubDate><guid>/diary/posts/2023/0206/</guid><description>1時に帰ってきてそのまま寝ないで6時10分の新幹線に乗ってから2時間半ほど寝た。これはこれで時間の使い方が有意義な気がする。午前中は翌日の定例会議の準備を着々と進めて、ci/cd 環境の改善、午後からリファクタリングなどをやっていた。15時をまわると眠くなってきて散歩したりして気分転換しつつも体調悪いなと思って17時半にお仕事を終えてホテルへ戻って2-3時間ほど寝てた。その後、晩ご飯食べるかなと出掛けたものの、あまり食欲もなくて、2時間ほど付近を散歩して運動していた。たまにはそういうのもいいか。飲食店が多い地域なので外から眺めているだけでもわりと楽しい。
ssh 経由のデプロイ これまで ci/cd でテストして docker イメージをビルドしてコンテナレジストリに登録するところまでやっていた。実際にテスト環境にデプロイするときは、テスト環境にログインして更新用のスクリプトを私が手動実行していた。そんなに頻繁にテスト環境を更新する必要がなかったのでそれでも十分ではあるものの、ci/cd の完成形を目指すなら自動化すべきという考え方もあってデプロイの部分を作ることにした。
もっとも簡単な方法として Using SSH keys with GitLab CI/CD をみながら、ssh でテスト環境にデプロイすることにした。すでに更新用のスクリプトがあって、テスト環境にログインして実行すればできる状態なので ssh さえ使えればすぐに移行できるという話しでもある。openssh-client を使うためにベースイメージを alpine から ubuntu にしてパッケージをインストールしないといけない。実行時間がややかかるというコスト以外には気にならないかな。ssh の秘密鍵を file 種別でもつのか通常の環境変数でもつのかで扱いが異なって、それに少しはまったぐらいですぐできた。今後は docker イメージのビルド単位に自動的にデプロイされるようになる。
interface{} の型エイリアスとしての any go のコードをリファクタリングしていて json.Marshal の引数が any となっていることに気付いた。
func Marshal(v any) ([]byte, error) { ... } go 1.18 以降で interface{} の型エイリアスとして any が定義されているらしい。任意の型を扱えるシグネチャとして、メソッドの振る舞いのみを規定する interface{} を使うというのは型システムとしては正しい。他言語でいえば object に相当するものが go はオブジェクト指向言語ではないのでそれがない。そういう間違っていないけど、わかりにくいなと思っていたものに any という名前の型エイリアスが導入されてとてもしっくりきた。プログラミングしていて、実務的にどうかというところをちゃんと改善していくところがみえるのは楽しい。
type any = interface{} Go 1.18 で interface{} の代わりに any が使えるようになる話</description><content>&lt;p>1時に帰ってきてそのまま寝ないで6時10分の新幹線に乗ってから2時間半ほど寝た。これはこれで時間の使い方が有意義な気がする。午前中は翌日の定例会議の準備を着々と進めて、ci/cd 環境の改善、午後からリファクタリングなどをやっていた。15時をまわると眠くなってきて散歩したりして気分転換しつつも体調悪いなと思って17時半にお仕事を終えてホテルへ戻って2-3時間ほど寝てた。その後、晩ご飯食べるかなと出掛けたものの、あまり食欲もなくて、2時間ほど付近を散歩して運動していた。たまにはそういうのもいいか。飲食店が多い地域なので外から眺めているだけでもわりと楽しい。&lt;/p>
&lt;h2 id="ssh-経由のデプロイ">ssh 経由のデプロイ&lt;/h2>
&lt;p>これまで ci/cd でテストして docker イメージをビルドしてコンテナレジストリに登録するところまでやっていた。実際にテスト環境にデプロイするときは、テスト環境にログインして更新用のスクリプトを私が手動実行していた。そんなに頻繁にテスト環境を更新する必要がなかったのでそれでも十分ではあるものの、ci/cd の完成形を目指すなら自動化すべきという考え方もあってデプロイの部分を作ることにした。&lt;/p>
&lt;p>もっとも簡単な方法として &lt;a href="https://docs.gitlab.com/ee/ci/ssh_keys/">Using SSH keys with GitLab CI/CD&lt;/a> をみながら、ssh でテスト環境にデプロイすることにした。すでに更新用のスクリプトがあって、テスト環境にログインして実行すればできる状態なので ssh さえ使えればすぐに移行できるという話しでもある。openssh-client を使うためにベースイメージを alpine から ubuntu にしてパッケージをインストールしないといけない。実行時間がややかかるというコスト以外には気にならないかな。ssh の秘密鍵を &lt;code>file&lt;/code> 種別でもつのか通常の環境変数でもつのかで扱いが異なって、それに少しはまったぐらいですぐできた。今後は docker イメージのビルド単位に自動的にデプロイされるようになる。&lt;/p>
&lt;h2 id="interface-の型エイリアスとしての-any">interface{} の型エイリアスとしての any&lt;/h2>
&lt;p>go のコードをリファクタリングしていて json.Marshal の引数が &lt;code>any&lt;/code> となっていることに気付いた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Marshal&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#a6e22e">any&lt;/span>) ([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>go 1.18 以降で &lt;code>interface{}&lt;/code> の型エイリアスとして &lt;code>any&lt;/code> が定義されているらしい。任意の型を扱えるシグネチャとして、メソッドの振る舞いのみを規定する &lt;code>interface{}&lt;/code> を使うというのは型システムとしては正しい。他言語でいえば object に相当するものが go はオブジェクト指向言語ではないのでそれがない。そういう間違っていないけど、わかりにくいなと思っていたものに &lt;code>any&lt;/code> という名前の型エイリアスが導入されてとてもしっくりきた。プログラミングしていて、実務的にどうかというところをちゃんと改善していくところがみえるのは楽しい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">any&lt;/span> = &lt;span style="color:#66d9ef">interface&lt;/span>{}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;a href="https://zenn.dev/syumai/articles/c6q5un1j0msim0aj0ca0">Go 1.18 で interface{} の代わりに any が使えるようになる話&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>go の学び直し 静的解析編</title><link>/diary/posts/2023/0204/</link><pubDate>Sat, 04 Feb 2023 12:35:28 +0900</pubDate><guid>/diary/posts/2023/0204/</guid><description>23時に寝て2時に起きて5時ぐらいにも起きて7時に起きた。昨日は podcast 収録でたくさん話して疲れてしまってそのまま帰ってすぐ寝た。すぐ起きるんだけど。
ストレッチ 今日の開脚幅は開始前157cmで、ストレッチ後159cmだった。朝出かける前に開脚のストレッチしたら数値よくなるかな？と思ってやってみたらいつもより少しよくなった。ストレッチはいつも通りとも言えるし、腰の張りがまだまだ残っていることも確認できた。疲労が溜まっているんよな。毎週ストレッチしているからこの程度の疲労で済んでいるとも思える。お正月に実家から戻ってきてから1月の東京出張と35日は終えた。来週はまた2月の東京出張とその週末に49日がある。ここまで体力がもてばその次の法要は初盆なので少し空く。体力的に第4四半期の山場と言えるかもしれない。ただがんばる。
go の学び直し Gopher塾 #3 - 静的解析を使ったGoの開発ツール制作 入門編 - DAY 1 に参加した。
過去にも Python とマクロ、インポートフックと抽象構文木 や Java のアノテーションプロセッサを試す など、メタプログラミングのアプローチやコード生成などを実務で使ってきたので静的解析にも関心がある。講義内容の詳細は書かないけど、静的解析のような難しい話題に対して4時間という短い時間でとてもよい講義になっていたと思う。go の静的解析の要点や提供されているツールなどを一通り学ぶことができた。もちろん、実用するには試行錯誤や習熟を必要とするけど、取っ掛かりとして十分な内容に思えた。
skeleton というツールを使って静的解析のための analyzer プロジェクトのひな形を作る。
$ go install github.com/gostaticanalysis/skeleton/v2@latest $ skeleton myanalyzer $ tree myanalyzer myanalyzer ├── cmd │ └── myanalyzer │ └── main.go ├── go.mod ├── myanalyzer.go ├── myanalyzer_test.go └── testdata └── src └── a ├── a.go └── go.mod 意図的にテストが落ちるようになっていてすぐ動作確認できる。
$ go mod tidy $ go test --- FAIL: TestAnalyzer (0.</description><content>&lt;p>23時に寝て2時に起きて5時ぐらいにも起きて7時に起きた。昨日は podcast 収録でたくさん話して疲れてしまってそのまま帰ってすぐ寝た。すぐ起きるんだけど。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前157cmで、ストレッチ後159cmだった。朝出かける前に開脚のストレッチしたら数値よくなるかな？と思ってやってみたらいつもより少しよくなった。ストレッチはいつも通りとも言えるし、腰の張りがまだまだ残っていることも確認できた。疲労が溜まっているんよな。毎週ストレッチしているからこの程度の疲労で済んでいるとも思える。お正月に実家から戻ってきてから1月の東京出張と35日は終えた。来週はまた2月の東京出張とその週末に49日がある。ここまで体力がもてばその次の法要は初盆なので少し空く。体力的に第4四半期の山場と言えるかもしれない。ただがんばる。&lt;/p>
&lt;h2 id="go-の学び直し">go の学び直し&lt;/h2>
&lt;p>&lt;a href="https://tenntenn.connpass.com/event/271533/">Gopher塾 #3 - 静的解析を使ったGoの開発ツール制作 入門編 - DAY 1&lt;/a> に参加した。&lt;/p>
&lt;p>過去にも &lt;a href="https://t2y.hatenablog.jp/entry/2015/03/11/025123">Python とマクロ、インポートフックと抽象構文木&lt;/a> や &lt;a href="https://kazamori.jp/blogs/2020/07/12/java-annotation-processor/">Java のアノテーションプロセッサを試す&lt;/a> など、メタプログラミングのアプローチやコード生成などを実務で使ってきたので静的解析にも関心がある。講義内容の詳細は書かないけど、静的解析のような難しい話題に対して4時間という短い時間でとてもよい講義になっていたと思う。go の静的解析の要点や提供されているツールなどを一通り学ぶことができた。もちろん、実用するには試行錯誤や習熟を必要とするけど、取っ掛かりとして十分な内容に思えた。&lt;/p>
&lt;p>&lt;a href="https://github.com/gostaticanalysis/skeleton">skeleton&lt;/a> というツールを使って静的解析のための analyzer プロジェクトのひな形を作る。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go install github.com/gostaticanalysis/skeleton/v2@latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ skeleton myanalyzer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ tree myanalyzer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myanalyzer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── cmd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── myanalyzer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── main.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── go.mod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── myanalyzer.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── myanalyzer_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── testdata
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── a.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── go.mod
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>意図的にテストが落ちるようになっていてすぐ動作確認できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go mod tidy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ go test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--- FAIL: TestAnalyzer &lt;span style="color:#f92672">(&lt;/span>0.05s&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> analysistest.go:448: a/a.go:5:6: diagnostic &lt;span style="color:#e6db74">&amp;#34;identifier is gopher&amp;#34;&lt;/span> does not match pattern &lt;span style="color:#e6db74">&amp;#34;pattern&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> analysistest.go:512: a/a.go:5: no diagnostic was reported matching &lt;span style="color:#e6db74">&amp;#34;pattern&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FAIL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exit status &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FAIL myanalyzer 0.349s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>いろいろ説明を端折るけど、試しに FuncDecl の ast ノードに対して関数の行数をカウントする処理を実装してみた。&lt;a href="https://pkg.go.dev/golang.org/x/tools/go/analysis#hdr-Pass">analysis パッケージの Pass&lt;/a> を使うと便利なユーティリティが提供されていて、静的解析をするときに面倒な処理をショートカットできて簡単に実装できることが理解できた。ここで作った analyzer は go vet で実行できるそうなのでプロジェクトの独自ルールを analyzer で実装して ci でチェックするといった運用もできる。応用範囲は広そう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ast&lt;/span>.&lt;span style="color:#a6e22e">FuncDecl&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Pos&lt;/span>(), &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">End&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">start&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pass&lt;/span>.&lt;span style="color:#a6e22e">Fset&lt;/span>.&lt;span style="color:#a6e22e">Position&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Pos&lt;/span>()).&lt;span style="color:#a6e22e">Line&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">end&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pass&lt;/span>.&lt;span style="color:#a6e22e">Fset&lt;/span>.&lt;span style="color:#a6e22e">Position&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">End&lt;/span>()).&lt;span style="color:#a6e22e">Line&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;the number of lines:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">end&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">start&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>pure go の javascript 処理系を使ってみた</title><link>/diary/posts/2023/0126/</link><pubDate>Thu, 26 Jan 2023 08:27:48 +0900</pubDate><guid>/diary/posts/2023/0126/</guid><description>23時に寝て2時に起きてだらだらして寝て7時に起きた。テンカイチ 日本最強武芸者決定戦 という漫画を読んでた。
pure go の javascript 処理系 ユーザー定義スクリプトを実行する要件がある。システム管理者がスクリプトを書くなら javascript がいいかなと次のリファレンスを調べたりしていた。
How to support custom Javascript scripting in Go Applications goja alternatives Choosing scripting extension - need advice これらを読んだ結果として dop251/goja がよいだろうと判断した。README だけ読めばすぐに実装できてめっちゃ簡単で感心した。こういうライブラリを私も会社のプロダクトとして作ってみたい。万人が使うものではなくても、必要なときがたまにあって、すごく使いやすいみたいな。こんな感じで goja の機能を使ってライブラリ実装してみた。
type FunctionCaller func(funcName string, args ...interface{}) (interface{}, error) func NewFunctionCaller(script string) (FunctionCaller, error) { vm := goja.New() _, err := vm.RunString(script) if err != nil { return nil, err } return func(funcName string, args ...interface{}) (interface{}, error) { f, ok := goja.</description><content>&lt;p>23時に寝て2時に起きてだらだらして寝て7時に起きた。&lt;a href="https://yanmaga.jp/comics/%E3%83%86%E3%83%B3%E3%82%AB%E3%82%A4%E3%83%81_%E6%97%A5%E6%9C%AC%E6%9C%80%E5%BC%B7%E6%AD%A6%E8%8A%B8%E8%80%85%E6%B1%BA%E5%AE%9A%E6%88%A6">テンカイチ 日本最強武芸者決定戦&lt;/a> という漫画を読んでた。&lt;/p>
&lt;h2 id="pure-go-の-javascript-処理系">pure go の javascript 処理系&lt;/h2>
&lt;p>ユーザー定義スクリプトを実行する要件がある。システム管理者がスクリプトを書くなら javascript がいいかなと次のリファレンスを調べたりしていた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prasanthmj.github.io/go/javascript-parser-in-go/">How to support custom Javascript scripting in Go Applications&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://go.libhunt.com/goja-alternatives">goja alternatives&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.reddit.com/r/golang/comments/u8gyii/choosing_scripting_extension_need_advice/">Choosing scripting extension - need advice&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>これらを読んだ結果として &lt;a href="https://github.com/dop251/goja">dop251/goja&lt;/a> がよいだろうと判断した。README だけ読めばすぐに実装できてめっちゃ簡単で感心した。こういうライブラリを私も会社のプロダクトとして作ってみたい。万人が使うものではなくても、必要なときがたまにあって、すごく使いやすいみたいな。こんな感じで goja の機能を使ってライブラリ実装してみた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">FunctionCaller&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">funcName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">interface&lt;/span>{}) (&lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewFunctionCaller&lt;/span>(&lt;span style="color:#a6e22e">script&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">FunctionCaller&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">vm&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">goja&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">vm&lt;/span>.&lt;span style="color:#a6e22e">RunString&lt;/span>(&lt;span style="color:#a6e22e">script&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">funcName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">interface&lt;/span>{}) (&lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">f&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">goja&lt;/span>.&lt;span style="color:#a6e22e">AssertFunction&lt;/span>(&lt;span style="color:#a6e22e">vm&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">funcName&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to get function: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">funcName&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">funcArgs&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#a6e22e">goja&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, len(&lt;span style="color:#a6e22e">args&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">arg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">args&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">funcArgs&lt;/span> = append(&lt;span style="color:#a6e22e">funcArgs&lt;/span>, &lt;span style="color:#a6e22e">vm&lt;/span>.&lt;span style="color:#a6e22e">ToValue&lt;/span>(&lt;span style="color:#a6e22e">arg&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">value&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#a6e22e">goja&lt;/span>.&lt;span style="color:#a6e22e">Undefined&lt;/span>(), &lt;span style="color:#a6e22e">funcArgs&lt;/span>&lt;span style="color:#f92672">...&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to call javascript function: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span>.&lt;span style="color:#a6e22e">Export&lt;/span>(), &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/dop251/goja#is-it-goroutine-safe">Is it goroutine-safe?&lt;/a> によると、goroutine-safe ではないので毎回 js の runtime を生成する必要がある。用途によっては、実行したいスクリプトが大きくなるとオーバーヘッドを無視できない状況もあるかもしれない。うちの要件は小さいユーザー定義スクリプトを実行するだけなのでおそらくそれほど問題にはならないだろうという想定。&lt;/p></content></item><item><title>駐車場探し</title><link>/diary/posts/2023/0105/</link><pubDate>Thu, 05 Jan 2023 10:38:18 +0900</pubDate><guid>/diary/posts/2023/0105/</guid><description>3時に寝て8時に起きた。生活リズムが乱れてきた。
コードレビュー 年末にマージリクエストが届いていたのをレビューした。http リクエストが失敗したときのリトライ処理を google-api-go-client の sdk 側に委譲できないかを調べてみた。いくつか issue も上がっているが、おそらく次の issue の結論にあるように、互換性を考慮すると既存の仕組みを置き換えられないという話しのようにみえる。
Provide a way to easily retry transient errors #142 sdk としては gensupport#RetryConfig のように、ヘルパー関数は用意されていて、例えば storage サービスでは Retry strategy として組み込まれている。しかし、これが sdk の http クライアントレベルで実装されているのではなく、それぞれのサービスごとに実装されているため、サービスによってリトライの仕組みがあったりなかったり、もっと言うとサービスごとに異なるリトライ実装になっていたりする。うちらは admin サービスを使いたいのだけど、そのリトライ処理は自前で実装するしかないというのをコードを読みつつ issue を読みつつ理解した。
駐車場の契約と保管場所使用承諾証明書の手配 社用車を購入する にあたって駐車場が必要になる。駐車場は本拠地 (会社のオフィス) から2km以内に借りないといけない。候補の駐車場の管理会社とやり取りして法人名義で駐車場を借りるのは問題ないとのこと。来週は私が出張で留守なので並行して納車の手続きを進めるため、この証明書を急ぎでほしいとお願いしたら今日・明日で作ってくれるということになった。朝から何度か電話して便宜を図ってくれた担当者に感謝。
オンライン飲み会の準備 毎年のことになっていて悪い運用なんだけど、交際費の予算を30万円と見積もっている。現時点で78,913円しか使っていない。交際費の予算消化も兼ねてこれからオンライン飲み会の機会を増やしていく。過去に働いていた職場の後輩と今度オンライン飲み会をすることにした。初めてのお酒を飲めない相手ということでソフトドリンクを手配した。アップルタイザー などがよいんじゃないかと思って混ぜてみた。これが新しいオフィスから ゆうパックスマホ割 で荷物を送付する初めての事例にもなった。オフィスから郵便局が徒歩2分ぐらいの立地なので郵便を出すのも便利。ほんとうによい立地のオフィスを借りられて満足している。</description><content>&lt;p>3時に寝て8時に起きた。生活リズムが乱れてきた。&lt;/p>
&lt;h2 id="コードレビュー">コードレビュー&lt;/h2>
&lt;p>年末にマージリクエストが届いていたのをレビューした。http リクエストが失敗したときのリトライ処理を &lt;a href="https://github.com/googleapis/google-api-go-client">google-api-go-client&lt;/a> の sdk 側に委譲できないかを調べてみた。いくつか issue も上がっているが、おそらく次の issue の結論にあるように、互換性を考慮すると既存の仕組みを置き換えられないという話しのようにみえる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/googleapis/google-api-go-client/issues/142">Provide a way to easily retry transient errors #142&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>sdk としては &lt;a href="https://pkg.go.dev/google.golang.org/api/internal/gensupport#RetryConfig">gensupport#RetryConfig&lt;/a> のように、ヘルパー関数は用意されていて、例えば storage サービスでは &lt;a href="https://cloud.google.com/storage/docs/retry-strategy#go">Retry strategy&lt;/a> として組み込まれている。しかし、これが sdk の http クライアントレベルで実装されているのではなく、それぞれのサービスごとに実装されているため、サービスによってリトライの仕組みがあったりなかったり、もっと言うとサービスごとに異なるリトライ実装になっていたりする。うちらは admin サービスを使いたいのだけど、そのリトライ処理は自前で実装するしかないというのをコードを読みつつ issue を読みつつ理解した。&lt;/p>
&lt;h2 id="駐車場の契約と保管場所使用承諾証明書の手配">駐車場の契約と保管場所使用承諾証明書の手配&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0104/#社用車の購入相談">社用車を購入する&lt;/a> にあたって駐車場が必要になる。駐車場は本拠地 (会社のオフィス) から2km以内に借りないといけない。候補の駐車場の管理会社とやり取りして法人名義で駐車場を借りるのは問題ないとのこと。来週は私が出張で留守なので並行して納車の手続きを進めるため、この証明書を急ぎでほしいとお願いしたら今日・明日で作ってくれるということになった。朝から何度か電話して便宜を図ってくれた担当者に感謝。&lt;/p>
&lt;h2 id="オンライン飲み会の準備">オンライン飲み会の準備&lt;/h2>
&lt;p>毎年のことになっていて悪い運用なんだけど、交際費の予算を30万円と見積もっている。現時点で78,913円しか使っていない。交際費の予算消化も兼ねてこれからオンライン飲み会の機会を増やしていく。過去に働いていた職場の後輩と今度オンライン飲み会をすることにした。初めてのお酒を飲めない相手ということでソフトドリンクを手配した。&lt;a href="https://appletiser.jp/">アップルタイザー&lt;/a> などがよいんじゃないかと思って混ぜてみた。これが新しいオフィスから &lt;a href="https://www.post.japanpost.jp/service/you_pack/sumahowari/">ゆうパックスマホ割&lt;/a> で荷物を送付する初めての事例にもなった。オフィスから郵便局が徒歩2分ぐらいの立地なので郵便を出すのも便利。ほんとうによい立地のオフィスを借りられて満足している。&lt;/p></content></item><item><title>お仕事戻し</title><link>/diary/posts/2022/1230/</link><pubDate>Fri, 30 Dec 2022 09:43:25 +0900</pubDate><guid>/diary/posts/2022/1230/</guid><description>0時に寝て5時に起きた。昨日も疲れていたのか、不思議とよく眠れた。
年末のお仕事戻し 朝から近所のマクドナルドへ。今週は月・火とお休みしたため、いつも火曜日に書いている週報を書いていなかった。言うても3日分の作業なのでちゃっちゃと書いて送付した。私が休んだ日の定例会議はスキップされたようでその確認はなし。その後、issue のコメントをみたり、マージリクエストのコードレビューをしたりした。メンバーが課題管理システムを使うようになっているので、私が休んでいても後で見返してコメントを返せる。非同期／テキストコミュニケーションは働く時間帯があわないときに役に立つ。そういう雰囲気を学ぶ機会になればいいかもしれない。ある文字列の変換関数に go 1.18 で追加された fuzzing テストを実装してみようというリファクタリングの issue を追加していた。
Tutorial: Getting started with fuzzing 私自身、まだ自分で実装したことはなかった。fuzzing テストを実装したマージリクエストがあったのでコードレビューした。実際に実行して動いているようにはみえるが、デバッグログを出力できなくてどういった振る舞いをしているのかを確認できなかった。簡単にできるんやと思っていたら意外と難しかった。また後で自分でも実装してデバッグしてみて振る舞いを再確認する。
小さい椅子 葬儀で斎場に2泊3日過ごしたときに畳の控え室に小さい椅子が4つほど置いてあった。正座が難しいお年寄り向けだと推測する。あの控え室でその小さい椅子を最も活用していたのは私だった。地べたに座るのと小さな椅子に腰掛けるので腰の負担がこんなに違うとは思わなかった。おそらく太ったことも影響している。ラップトップでキー入力するときに正座にしろ、あぐらにしろ、どちらも長時間続けることはできなかった。この小さい椅子なら2-3時間ぐらいは平気で作業できる。気持ち程度の高さでも十分に椅子の役割を果たせるところに感心した。家用に購入して、いま小さい椅子でこの日記を書いている。</description><content>&lt;p>0時に寝て5時に起きた。昨日も疲れていたのか、不思議とよく眠れた。&lt;/p>
&lt;h2 id="年末のお仕事戻し">年末のお仕事戻し&lt;/h2>
&lt;p>朝から近所のマクドナルドへ。今週は月・火とお休みしたため、いつも火曜日に書いている週報を書いていなかった。言うても3日分の作業なのでちゃっちゃと書いて送付した。私が休んだ日の定例会議はスキップされたようでその確認はなし。その後、issue のコメントをみたり、マージリクエストのコードレビューをしたりした。メンバーが課題管理システムを使うようになっているので、私が休んでいても後で見返してコメントを返せる。非同期／テキストコミュニケーションは働く時間帯があわないときに役に立つ。そういう雰囲気を学ぶ機会になればいいかもしれない。ある文字列の変換関数に go 1.18 で追加された fuzzing テストを実装してみようというリファクタリングの issue を追加していた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://go.dev/doc/tutorial/fuzz">Tutorial: Getting started with fuzzing&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>私自身、まだ自分で実装したことはなかった。fuzzing テストを実装したマージリクエストがあったのでコードレビューした。実際に実行して動いているようにはみえるが、デバッグログを出力できなくてどういった振る舞いをしているのかを確認できなかった。簡単にできるんやと思っていたら意外と難しかった。また後で自分でも実装してデバッグしてみて振る舞いを再確認する。&lt;/p>
&lt;h2 id="小さい椅子">小さい椅子&lt;/h2>
&lt;p>葬儀で斎場に2泊3日過ごしたときに畳の控え室に小さい椅子が4つほど置いてあった。正座が難しいお年寄り向けだと推測する。あの控え室でその小さい椅子を最も活用していたのは私だった。地べたに座るのと小さな椅子に腰掛けるので腰の負担がこんなに違うとは思わなかった。おそらく太ったことも影響している。ラップトップでキー入力するときに正座にしろ、あぐらにしろ、どちらも長時間続けることはできなかった。この小さい椅子なら2-3時間ぐらいは平気で作業できる。気持ち程度の高さでも十分に椅子の役割を果たせるところに感心した。家用に購入して、いま小さい椅子でこの日記を書いている。&lt;/p>
&lt;p>&lt;a href="https://www.amazon.co.jp/gp/product/B003VIW0PG?ie=UTF8&amp;th=1&amp;linkCode=li1&amp;tag=t2y-diary-22&amp;linkId=233bef8ca8a08ce7593f84b75fbea8cf&amp;language=ja_JP&amp;ref_=as_li_ss_il" target="_blank">&lt;img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B003VIW0PG&amp;Format=_SL110_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=t2y-diary-22&amp;language=ja_JP" >&lt;/a>&lt;img src="https://ir-jp.amazon-adsystem.com/e/ir?t=t2y-diary-22&amp;language=ja_JP&amp;l=li1&amp;o=9&amp;a=B003VIW0PG" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />&lt;/p></content></item><item><title>休日のオンライン学習</title><link>/diary/posts/2022/1211/</link><pubDate>Sun, 11 Dec 2022 10:12:21 +0900</pubDate><guid>/diary/posts/2022/1211/</guid><description>0時に寝て夜中に吐き気がして2回ほど起きて3時と5時に起きて8時に起きた。なかなか苦しい寝方をした。
ヤフートラベルと一休.comのシステム統合 アーカイブ公開されたらみようと思いつつ忘れてたので見返した。
雑なめも。また機をみて見返すこともあるかも。
バックエンドは完全に一休側に寄せるという大きな意志決定を2016年に行った この意志決定はフロントエンド統合にも大きな影響を与えた ふじもんさんの意志決定がよかった？ 今日の話しはマルチブランドデザインシステム統合がメイン 開発者が50-60人程度で半年ぐらいで launch できた nuxt/vuejs で開発している スタイルは tailwindcss を使っている 実は launch した後にこのシステムが必要だとわかった 開発者とデザイナー間の細かい意思疎通が困難 外部からデザインシステムに詳しい人にも来てもらっていろんな議論をした ガイドラインを言語化するところから始め、最終的にソースコードの共有ができるようになった 終わってからデザインシステムそのものは重要ではないと気付いた この過程で開発者とデザイナー間のどのように共通化するか、あるいはしないかと議論を繰り返し行ったことが重要だったと当事者がインタビューで語っていた デザインシステムの開発を通じてデザインの共通認識をもてたことがよかった 波及効果 同じソースコードから少し異なる体験の開発のノウハウができた ふるさと納税に特化した宿泊予約サイトを作った 統合は終わりではない、lauch したところが始まり 統合後にいろいろな施策をすることで課題がみえてくることがある 全国旅行支援は1つの開発で2つの体験をつくることができた Q. デザイナーと開発者はわりと仲が悪いのでは？価値観や考え方が異なるのですり合わせるのは難しいのでは？ 過去の一休でも起きていた 一休のチームはデザイナーと PM と開発者で構成されている このチームが一緒に働いていてチームでなるべく意志決定している 普段から一緒に働いていると仲が悪いということはなかった とはいえ、仕事のプロセスが異なるので課題はあった 地道に丁寧にすり合わせを行った 外部から講師を読んで中立的な立場でワークショップを何度も行った デザイナーと開発者を別の組織にしているとコミュニケーションの壁ができてしまうかもしれない go の学び直し テストの学び直し に引き続き、Gopher塾 #2 - Goらしいコードの書き方 - DAY 1 に参加した。
テストの次のプログラミングの話しだったので内容そのものは難しくはなかったけど、改めて重要な項目を選抜しているのだと考えると学びはあったと思う。参考になったことをいくつか覚えている範囲でまとめる。名前の付け方について感覚的に理解していたし、実際に私はそうしているけど、コードレビューしていて自然になっていないコードを指摘する機会も多いので一定の習熟を要するのかもしれない。いま毎週勉強会をやっていて私が講師として話している。ネタがなくなってきたり大変になったきたら準備の少ないコードリーディング会もやってみたいと思った。
google Go Style derrors.Wrap 名前に文脈を与えるという概念 相対的な名前をつける 準備の少ないコードリーディング会 お題（読むパッケージ）を決める 選んだお題に期待することを当日話す 時間を決めてみんなでそれぞれ読む（20分とか） 読みながらSlackのスレッドにメモをしていく 残りの時間で気になったところを議論する 自分が気づけなかった点を知ることができる</description><content>&lt;p>0時に寝て夜中に吐き気がして2回ほど起きて3時と5時に起きて8時に起きた。なかなか苦しい寝方をした。&lt;/p>
&lt;h2 id="ヤフートラベルと一休comのシステム統合">ヤフートラベルと一休.comのシステム統合&lt;/h2>
&lt;p>アーカイブ公開されたらみようと思いつつ忘れてたので見返した。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/JN4kGYbQMJ8" allowfullscreen title="ヤフートラベルのシステムリニューアル 一休 com とのシステム統合 -日本語版-">&lt;/iframe>
&lt;/div>
&lt;p>雑なめも。また機をみて見返すこともあるかも。&lt;/p>
&lt;ul>
&lt;li>バックエンドは完全に一休側に寄せるという大きな意志決定を2016年に行った
&lt;ul>
&lt;li>この意志決定はフロントエンド統合にも大きな影響を与えた&lt;/li>
&lt;li>ふじもんさんの意志決定がよかった？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>今日の話しはマルチブランドデザインシステム統合がメイン
&lt;ul>
&lt;li>開発者が50-60人程度で半年ぐらいで launch できた&lt;/li>
&lt;li>nuxt/vuejs で開発している&lt;/li>
&lt;li>スタイルは tailwindcss を使っている&lt;/li>
&lt;li>実は launch した後にこのシステムが必要だとわかった
&lt;ul>
&lt;li>開発者とデザイナー間の細かい意思疎通が困難&lt;/li>
&lt;li>外部からデザインシステムに詳しい人にも来てもらっていろんな議論をした&lt;/li>
&lt;li>ガイドラインを言語化するところから始め、最終的にソースコードの共有ができるようになった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>終わってからデザインシステムそのものは重要ではないと気付いた
&lt;ul>
&lt;li>この過程で開発者とデザイナー間のどのように共通化するか、あるいはしないかと議論を繰り返し行ったことが重要だったと当事者がインタビューで語っていた&lt;/li>
&lt;li>デザインシステムの開発を通じてデザインの共通認識をもてたことがよかった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>波及効果
&lt;ul>
&lt;li>同じソースコードから少し異なる体験の開発のノウハウができた&lt;/li>
&lt;li>ふるさと納税に特化した宿泊予約サイトを作った&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>統合は終わりではない、lauch したところが始まり
&lt;ul>
&lt;li>統合後にいろいろな施策をすることで課題がみえてくることがある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>全国旅行支援は1つの開発で2つの体験をつくることができた&lt;/li>
&lt;li>Q. デザイナーと開発者はわりと仲が悪いのでは？価値観や考え方が異なるのですり合わせるのは難しいのでは？
&lt;ul>
&lt;li>過去の一休でも起きていた&lt;/li>
&lt;li>一休のチームはデザイナーと PM と開発者で構成されている
&lt;ul>
&lt;li>このチームが一緒に働いていてチームでなるべく意志決定している&lt;/li>
&lt;li>普段から一緒に働いていると仲が悪いということはなかった&lt;/li>
&lt;li>とはいえ、仕事のプロセスが異なるので課題はあった
&lt;ul>
&lt;li>地道に丁寧にすり合わせを行った&lt;/li>
&lt;li>外部から講師を読んで中立的な立場でワークショップを何度も行った&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>デザイナーと開発者を別の組織にしているとコミュニケーションの壁ができてしまうかもしれない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="go-の学び直し">go の学び直し&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/1123/#go-の学び直し">テストの学び直し&lt;/a> に引き続き、&lt;a href="https://tenntenn.connpass.com/event/267564/">Gopher塾 #2 - Goらしいコードの書き方 - DAY 1&lt;/a> に参加した。&lt;/p>
&lt;p>テストの次のプログラミングの話しだったので内容そのものは難しくはなかったけど、改めて重要な項目を選抜しているのだと考えると学びはあったと思う。参考になったことをいくつか覚えている範囲でまとめる。名前の付け方について感覚的に理解していたし、実際に私はそうしているけど、コードレビューしていて自然になっていないコードを指摘する機会も多いので一定の習熟を要するのかもしれない。いま毎週勉強会をやっていて私が講師として話している。ネタがなくなってきたり大変になったきたら準備の少ないコードリーディング会もやってみたいと思った。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://google.github.io/styleguide/go/">google Go Style&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cs.opensource.google/go/x/pkgsite/+/master:internal/derrors/derrors.go;l=237">derrors.Wrap&lt;/a>&lt;/li>
&lt;li>名前に文脈を与えるという概念
&lt;ul>
&lt;li>相対的な名前をつける&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>準備の少ないコードリーディング会
&lt;ul>
&lt;li>お題（読むパッケージ）を決める&lt;/li>
&lt;li>選んだお題に期待することを当日話す&lt;/li>
&lt;li>時間を決めてみんなでそれぞれ読む（20分とか）&lt;/li>
&lt;li>読みながらSlackのスレッドにメモをしていく&lt;/li>
&lt;li>残りの時間で気になったところを議論する&lt;/li>
&lt;li>自分が気づけなかった点を知ることができる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content></item><item><title>echo のよさの1つはテストがやりやすい</title><link>/diary/posts/2022/1206/</link><pubDate>Tue, 06 Dec 2022 08:58:19 +0900</pubDate><guid>/diary/posts/2022/1206/</guid><description>にわかサッカーファンになって、20時頃に1-2時間寝て24時からワールドカップのクロアチア戦をみて3時に寝て8時に起きた。睡眠のリズムが完全に狂ってしまった。
echo のテストのやりやすさ うちのチームでは http フレームワークに echo を採用 している。その後、開発を継続していていくつか http ハンドラーも実装されてきた。そろそろ http ハンドラーのテストを書いていこうと参照実装を私が書いてみた。メンバーが知らないことは、マネージャーの私が参照実装して教えるといったやり方をしている。echo.HandlerFunc に echo.Context を渡すシンプルなインターフェースはテストを書くときに http ハンドラー以外の依存関係 (例えば db とのコネクションなど) を context を介することでモックと差し替えるのが容易になる。
tests := []struct { name string ctx echo.Context err *echo.HTTPError } { ... func() echo.Context { data := `{...}` c := newEchoContext(http.MethodPost, &amp;#34;/endpoint&amp;#34;, data) c.Set(&amp;#34;db&amp;#34;, &amp;amp;myMockDB{}) return c }(), ... } if err := myHTTPHandler(ctx); err != nil { ... } こんな感じで context にモックを入れてしまえば http ハンドラーそのものの単体テストを簡単に書ける。そんなことをツィートした。</description><content>&lt;p>にわかサッカーファンになって、20時頃に1-2時間寝て24時からワールドカップのクロアチア戦をみて3時に寝て8時に起きた。睡眠のリズムが完全に狂ってしまった。&lt;/p>
&lt;h2 id="echo-のテストのやりやすさ">echo のテストのやりやすさ&lt;/h2>
&lt;p>うちのチームでは http フレームワークに &lt;a href="/diary/diary/posts/2022/1122/#echo-を採用">echo を採用&lt;/a> している。その後、開発を継続していていくつか http ハンドラーも実装されてきた。そろそろ http ハンドラーのテストを書いていこうと参照実装を私が書いてみた。メンバーが知らないことは、マネージャーの私が参照実装して教えるといったやり方をしている。echo.HandlerFunc に echo.Context を渡すシンプルなインターフェースはテストを書くときに http ハンドラー以外の依存関係 (例えば db とのコネクションなど) を context を介することでモックと差し替えるのが容易になる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">tests&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">HTTPError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span>() &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">`{...}`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">newEchoContext&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">MethodPost&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/endpoint&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;db&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">myMockDB&lt;/span>{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">myHTTPHandler&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>こんな感じで context にモックを入れてしまえば http ハンドラーそのものの単体テストを簡単に書ける。そんなことをツィートした。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">その後 echo を採用して echo のよいところに1つ気付いた。echo.HandlerFunc に echo.Context を渡すインターフェースはテストがやりやすい。例えば、コンテキストで db のコネクションを保持しておけば、テストのときにモックに差し替えて http ハンドラーの単体テストを実装しやすい。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1600337204286746624?ref_src=twsrc%5Etfw">December 7, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>そしたら podhmo からレスをもらったので go のリクエストコンテキストの扱いについても議論した。&lt;/p>
&lt;ul>
&lt;li>リクエストスコープのものを context に入れるのは同意&lt;/li>
&lt;li>それ以外のスコープのものを context に入れるのは懸念がある
&lt;ul>
&lt;li>http ハンドラーのレイヤーとアプリケーションのレイヤーが明確に分かれているならまだ理解できる&lt;/li>
&lt;li>アプリケーションのレイヤーで context を自由に使うと依存関係や統制が取れなくなる
&lt;ul>
&lt;li>これは私も同意するところでアプリケーションのレイヤーにリクエストコンテキストを渡す必要はない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">&lt;a href="https://t.co/Yomdbyh1H0">https://t.co/Yomdbyh1H0&lt;/a>&lt;br>&lt;br>昔にこういう記事を書いてた。&lt;br>chiはルーティングライブラリと考えるとスムーズ。&lt;br>&lt;br>あとはnet/httpのミドルウェアを使いたいかechoなど専用のものを書くかの違いくらいかな。 &lt;a href="https://t.co/9LtoanpY0c">https://t.co/9LtoanpY0c&lt;/a>&lt;/p>&amp;mdash; po (@podhmo) &lt;a href="https://twitter.com/podhmo/status/1600338082242646016?ref_src=twsrc%5Etfw">December 7, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="オフィス住所の更新">オフィス住所の更新&lt;/h2>
&lt;p>引き続き、住所変更の手続きを時間をみつけてやっている。同じ銀行の住所変更の手続きでも PayPay 銀行と三菱 UFJ 銀行ではまったく異なる。前者はオンラインでアカウント情報を変更するだけで済んだ。簡単。一方で後者はオンラインではできず、来店予約をとって対面で行う。当日に登記事項証明書の原本をもってこいと。なんという面倒臭さ。よくよく考えたら法人の登記事項証明書は誰でも取得できる。行政のシステムがどうなっているか知らないが、銀行が法人の住所変更を自分たちで調べることもやろうと思えばできるはず。登記事項証明書をオンラインで取得する手数料は500円になる。来店予約すると応対する人の人件費を考えたらシステムの手数料を支払った方が安いのではないか。&lt;/p>
&lt;p>国税庁の管轄ではあるが、&lt;a href="https://www.houjin-bangou.nta.go.jp/">国税庁法人番号公表サイト&lt;/a> から法人の住所変更そのものは確認できる。これは e-tax で次の2つの書類を申請した。登記事項証明書がなくても申請はできた。なにも言ってこなければ問題ないのかな？&lt;/p>
&lt;ul>
&lt;li>異動届&lt;/li>
&lt;li>給与支払事務所等の開設・移転・廃止の届出&lt;/li>
&lt;/ul>
&lt;p>有償にはなるが &lt;a href="https://www1.touki.or.jp/night.html">登記情報提供サービス&lt;/a> というのがあって登記情報をオンラインで確認できる。このサービスを会社で契約していればいつでも確認できるはず？&lt;/p></content></item><item><title>go の学び直し テスト編</title><link>/diary/posts/2022/1123/</link><pubDate>Wed, 23 Nov 2022 09:39:53 +0900</pubDate><guid>/diary/posts/2022/1123/</guid><description>23時に寝て2時に起きて気分悪くて寝付けずにだらだらしながら気付いたら5時になっていた。その後いつの間にか寝て8時に起きた。
go の学び直し Gopher塾 #1 - Testing - DAY 3 に参加した。
マネージャーとして go 開発のマネジメントをしているため、メンバーの開発者よりは知識やスキルが高くないとコードレビューや適切な指示ができない。2018年ぐらいまで go 開発をしていたが、その後はずっと java 開発をしていたため、最近の go 開発の話題はあまり把握していない。毎週チーム勉強会 (いまのところ、go 開発の話題) をやっていると、チーム外からも開発者が参加してくれるようになった。チーム外からの開発者が go 開発するときの参考にもなるよう、マネージャーのお仕事の付加価値として、組織全体へ go 開発の知識やスキルを提供できればと考えながら働いている。
今回はテストについて話題で7割ぐらいは知っている知識ではあったが、3割ぐらいは最近の話題や静的解析の知見からの深い洞察を話されていてとても参考になった。知っている知識でも幅広いテストの話題の中で厳選されたコンテンツになるのだろうから本質的に大事なことや最初に学ぶべき優先事項を知ることもできた。私がメンバーに教えるときのコンテンツの参考として役に立つ。まったく知らなかった話題としては、txtar というテキストをアーカイブしたフォーマットをファイルシステムとして扱えるようにした txtarfs や、1.18 から追加された fuzzing というテストの入力値を自動生成する機能が追加されたこと。あと groovy でいうところの power assert に近い機能を提供するライブラリとして google/go-cmp をいまはテストに使うらしい。たまたま Go Test Comments を読んでいたら go-cmp は go の開発チームが保守していて go のバージョンに依らずほとんどの比較の要件にあうツールのように説明されていて利用を推奨している。</description><content>&lt;p>23時に寝て2時に起きて気分悪くて寝付けずにだらだらしながら気付いたら5時になっていた。その後いつの間にか寝て8時に起きた。&lt;/p>
&lt;h2 id="go-の学び直し">go の学び直し&lt;/h2>
&lt;p>&lt;a href="https://tenntenn.connpass.com/event/265342/">Gopher塾 #1 - Testing - DAY 3&lt;/a> に参加した。&lt;/p>
&lt;p>マネージャーとして go 開発のマネジメントをしているため、メンバーの開発者よりは知識やスキルが高くないとコードレビューや適切な指示ができない。2018年ぐらいまで go 開発をしていたが、その後はずっと java 開発をしていたため、最近の go 開発の話題はあまり把握していない。毎週チーム勉強会 (いまのところ、go 開発の話題) をやっていると、チーム外からも開発者が参加してくれるようになった。チーム外からの開発者が go 開発するときの参考にもなるよう、マネージャーのお仕事の付加価値として、組織全体へ go 開発の知識やスキルを提供できればと考えながら働いている。&lt;/p>
&lt;p>今回はテストについて話題で7割ぐらいは知っている知識ではあったが、3割ぐらいは最近の話題や静的解析の知見からの深い洞察を話されていてとても参考になった。知っている知識でも幅広いテストの話題の中で厳選されたコンテンツになるのだろうから本質的に大事なことや最初に学ぶべき優先事項を知ることもできた。私がメンバーに教えるときのコンテンツの参考として役に立つ。まったく知らなかった話題としては、txtar というテキストをアーカイブしたフォーマットをファイルシステムとして扱えるようにした &lt;a href="https://github.com/josharian/txtarfs">txtarfs&lt;/a> や、1.18 から追加された &lt;a href="https://go.dev/security/fuzz/">fuzzing&lt;/a> というテストの入力値を自動生成する機能が追加されたこと。あと groovy でいうところの power assert に近い機能を提供するライブラリとして &lt;a href="https://github.com/google/go-cmp">google/go-cmp&lt;/a> をいまはテストに使うらしい。たまたま &lt;a href="https://github.com/golang/go/wiki/TestComments#equality-comparison-and-diffs">Go Test Comments&lt;/a> を読んでいたら go-cmp は go の開発チームが保守していて go のバージョンに依らずほとんどの比較の要件にあうツールのように説明されていて利用を推奨している。&lt;/p></content></item><item><title>元同僚の来訪</title><link>/diary/posts/2022/1122/</link><pubDate>Tue, 22 Nov 2022 18:20:06 +0900</pubDate><guid>/diary/posts/2022/1122/</guid><description>0時に寝て4時に起きてドラクエタクトしてだらだらして7時に起きた。
echo を採用 昨日の続き。echo か chi でそれぞれサンプルコードを書いたものを定例でメンバーに説明して echo に決まった。echo は知っているメンバーもいたけど、chi は知らなかったみたい。アプリケーションに近いせいか echo の方が認知度が高いみたい。既存コードの移行は私がちゃちゃとやろうと着手したものの、わりとコードが込み入っていて2-3時間でできるものでもなかった。環境変数周りの処理も dry の原則に違反していたので caarlos0/env を使うことにした。エントリーポイント周りのコードをリファクタリングして merge request を作成した。明日中には既存の http ハンドラー周りの移行をしてレビューができるようにしておきたい。
遠方より来たる たまたまタイムラインで元同僚が近くに来るというのをみかけてせっかくの機会なので晩ご飯を食べに行ってきた。大阪に泊まっているのにわざわざ神戸まで足を運んでくれた。感謝。ゲームのコミュニティに属していると私は思っていたのだけど、最近はゲームよりも vr の世界の住人らしくて、vr の世界のコミュニティに入り浸っているらしい。そんな生活を何年もしているうちに仲間うちで仲良くなって、たまにオフ会で会ったりもするとのこと。全国に vr の世界の仲間がいるから出張したときにオフ会したりするそうな。oculus quest 2 をもっているけど workrooms ぐらいしか使ってなくて、若い人はもっと進んでいるなと感心をもって聞いていた。
内製のデータベースのプロダクトが完成して社内でも使ってもらう運用段階まできたとのこと。データベースをフルスクラッチから3年かけて開発できるだけの余裕のある会社は少ないだろう。本人もいくつか社内・社外の事情が重なってプロジェクトが中止にならず運がよかったと話されていた。開発の区切りもついたので今後のキャリアや転職も含めていろいろ考える時期になっているみたい。まだ30歳前後だと思うのでいろいろ挑戦したらよいと思う。
帰りに三ノ宮の街並みも少し紹介した。三宮という地名は他にも一宮から八宮まであって 神戸八社 と言う。間違えて九まであると言ってしまった。八までだった。2021年に 神戸三宮阪急ビル が完成して阪急三宮駅の周辺が再整備された。夜歩きしても楽しめる雰囲気にはなっている。</description><content>&lt;p>0時に寝て4時に起きてドラクエタクトしてだらだらして7時に起きた。&lt;/p>
&lt;h2 id="echo-を採用">echo を採用&lt;/h2>
&lt;p>昨日の続き。echo か chi でそれぞれサンプルコードを書いたものを定例でメンバーに説明して echo に決まった。echo は知っているメンバーもいたけど、chi は知らなかったみたい。アプリケーションに近いせいか echo の方が認知度が高いみたい。既存コードの移行は私がちゃちゃとやろうと着手したものの、わりとコードが込み入っていて2-3時間でできるものでもなかった。環境変数周りの処理も dry の原則に違反していたので &lt;a href="https://github.com/caarlos0/env">caarlos0/env&lt;/a> を使うことにした。エントリーポイント周りのコードをリファクタリングして merge request を作成した。明日中には既存の http ハンドラー周りの移行をしてレビューができるようにしておきたい。&lt;/p>
&lt;h2 id="遠方より来たる">遠方より来たる&lt;/h2>
&lt;p>たまたまタイムラインで元同僚が近くに来るというのをみかけてせっかくの機会なので晩ご飯を食べに行ってきた。大阪に泊まっているのにわざわざ神戸まで足を運んでくれた。感謝。ゲームのコミュニティに属していると私は思っていたのだけど、最近はゲームよりも vr の世界の住人らしくて、vr の世界のコミュニティに入り浸っているらしい。そんな生活を何年もしているうちに仲間うちで仲良くなって、たまにオフ会で会ったりもするとのこと。全国に vr の世界の仲間がいるから出張したときにオフ会したりするそうな。oculus quest 2 をもっているけど workrooms ぐらいしか使ってなくて、若い人はもっと進んでいるなと感心をもって聞いていた。&lt;/p>
&lt;p>内製のデータベースのプロダクトが完成して社内でも使ってもらう運用段階まできたとのこと。データベースをフルスクラッチから3年かけて開発できるだけの余裕のある会社は少ないだろう。本人もいくつか社内・社外の事情が重なってプロジェクトが中止にならず運がよかったと話されていた。開発の区切りもついたので今後のキャリアや転職も含めていろいろ考える時期になっているみたい。まだ30歳前後だと思うのでいろいろ挑戦したらよいと思う。&lt;/p>
&lt;p>帰りに三ノ宮の街並みも少し紹介した。三宮という地名は他にも一宮から八宮まであって &lt;a href="https://www.shoko-dw.com/shrine8/index.html">神戸八社&lt;/a> と言う。間違えて九まであると言ってしまった。八までだった。2021年に &lt;a href="https://ja.wikipedia.org/wiki/%E7%A5%9E%E6%88%B8%E4%B8%89%E5%AE%AE%E9%98%AA%E6%80%A5%E3%83%93%E3%83%AB">神戸三宮阪急ビル&lt;/a> が完成して阪急三宮駅の周辺が再整備された。夜歩きしても楽しめる雰囲気にはなっている。&lt;/p></content></item><item><title>http フレームワークの選び方</title><link>/diary/posts/2022/1121/</link><pubDate>Mon, 21 Nov 2022 12:14:35 +0900</pubDate><guid>/diary/posts/2022/1121/</guid><description>昨夜いろいろあって帰ってくるのが0時過ぎになった。23時過ぎから雨降りで雨の中、自転車で帰ってきた。2時に寝て5時に起きて7時半に起きた。危うく寝坊するところだった。
母の入院 昨夜のいろいろのすべて。最悪の事態を想定してお手伝い先にも今日休むかも？と昨日の夜時点で一報を入れていた。結論としては休む必要はなかった。「ろれつが回らない」という連絡を受けて姉が救急車で病院へいくことを指示して即検査で即入院した。母は過去に目がみえなくなって脳梗塞だったことがある。幸い一通り検査して問題はなかったものの、念のために2日間入院して明日退院する予定。姉に病院の付き添いとかいろいろやってもらったので、私も週末に帰って様子をみてくる。お仕事が立て込んでてんやわんやだけど、そのために神戸で自分の会社をやっているのもあるので仕方ない。母は車を運転しない方がよいだろうという見立てで週末にレンタカーも借りた。久しぶりに高速バスではなく、高速道路をドライブしながら実家へ帰る。
echo と chi でサンプルコードを書いてみた go の http フレームワークの選定 の続き。明日、定例があるのでメンバーにソースコードを共有しつつ、http フレームワークの採用を決めようと考えている。特定のルーティングとミドルウェアの適用をする簡単なサンプル。
https://gitlab.com/t2y/echo-sample https://gitlab.com/t2y/chi-sample net/http のレイヤーであれこれカスタマイズしたいなら chi でよい気もするけど、web api のアプリケーションのレイヤーにのみ注力したいなら echo を使った方が楽そうという私の第一印象。web api サーバーを書いてて request のパラメーターを扱うことはあっても response writer を扱う必要性をあまり感じたことがない。json しか返さないのだし、構造体を返したら勝手に json に変換してくれたらそれでいいんじゃないかと私は考えている。</description><content>&lt;p>昨夜いろいろあって帰ってくるのが0時過ぎになった。23時過ぎから雨降りで雨の中、自転車で帰ってきた。2時に寝て5時に起きて7時半に起きた。危うく寝坊するところだった。&lt;/p>
&lt;h2 id="母の入院">母の入院&lt;/h2>
&lt;p>昨夜のいろいろのすべて。最悪の事態を想定してお手伝い先にも今日休むかも？と昨日の夜時点で一報を入れていた。結論としては休む必要はなかった。「ろれつが回らない」という連絡を受けて姉が救急車で病院へいくことを指示して即検査で即入院した。母は過去に目がみえなくなって脳梗塞だったことがある。幸い一通り検査して問題はなかったものの、念のために2日間入院して明日退院する予定。姉に病院の付き添いとかいろいろやってもらったので、私も週末に帰って様子をみてくる。お仕事が立て込んでてんやわんやだけど、そのために神戸で自分の会社をやっているのもあるので仕方ない。母は車を運転しない方がよいだろうという見立てで週末にレンタカーも借りた。久しぶりに高速バスではなく、高速道路をドライブしながら実家へ帰る。&lt;/p>
&lt;h2 id="echo-と-chi-でサンプルコードを書いてみた">echo と chi でサンプルコードを書いてみた&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/1117/#go-の-http-フレームワークの選定">go の http フレームワークの選定&lt;/a> の続き。明日、定例があるのでメンバーにソースコードを共有しつつ、http フレームワークの採用を決めようと考えている。特定のルーティングとミドルウェアの適用をする簡単なサンプル。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gitlab.com/t2y/echo-sample">https://gitlab.com/t2y/echo-sample&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gitlab.com/t2y/chi-sample">https://gitlab.com/t2y/chi-sample&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>net/http のレイヤーであれこれカスタマイズしたいなら &lt;a href="https://github.com/go-chi/chi">chi&lt;/a> でよい気もするけど、web api のアプリケーションのレイヤーにのみ注力したいなら &lt;a href="https://echo.labstack.com/">echo&lt;/a> を使った方が楽そうという私の第一印象。web api サーバーを書いてて request のパラメーターを扱うことはあっても response writer を扱う必要性をあまり感じたことがない。json しか返さないのだし、構造体を返したら勝手に json に変換してくれたらそれでいいんじゃないかと私は考えている。&lt;/p></content></item><item><title>新しいお仕事で3週間</title><link>/diary/posts/2022/1118/</link><pubDate>Fri, 18 Nov 2022 08:57:50 +0900</pubDate><guid>/diary/posts/2022/1118/</guid><description>2時に寝て4時に起きて仮眠して6時半に起きた。たぶん寝たんだろうぐらいの感覚。10月まで対外的には週4日で働いていたのを、11月から週5日フルタイムの働き方に移行して、やっぱりしんどいという実感がある。対外的に週4日でも10月もオフィスに来て自社のお仕事をしていたり、半日ぐらいは社外のお仕事をしたりはしていた。それでも働く義務の有無によって、意識の違いか、プレッシャーやストレスの面からなにか働き方が違うように思える。生活も働き方もまったく同じなのに。
盛り上がってないイベント ハッシュタグ をみてもほとんど関係者や発表者しかコメントしていないようにみえた。過去に新規事業の立ち上げに協力したプロジェクトの発表があると元同僚のタイムラインで知ったのでその発表だけみてみた。私が辞めてから3年ほど経つので新規サービスも追加されていてその内容がメインだったように思う。
DataSolution事業を支える技術 あまり技術的な内容ではなく、ビジネス向けでもなく、どういった属性の聴衆向けの発表なのか、私にはあまりピンとこなかった。発表の準備不足な印象を受けた。発表を無理やり押し付けられたのかもしれない。
go の Time 型とタイムゾーン go の Time 型は Location をもっていて、タイムゾーンも一緒に扱える。モダンな言語なら時刻を扱うときにタイムゾーンをセットで扱うのでよいと私も思う。タイムゾーンをもっていない時刻型とタイムゾーンを設定するための余分なコードのことを考えずに済む。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func mustGetJST() *time.Location { jst, err := time.LoadLocation(&amp;#34;Asia/Tokyo&amp;#34;) if err != nil { panic(err) } return jst } func main() { now := time.Now() fmt.Println(&amp;#34;now:&amp;#34;, now) fmt.Println(&amp;#34;jst:&amp;#34;, now.In(mustGetJST())) fmt.Println(&amp;#34;utc:&amp;#34;, now.UTC()) } 実行結果。
$ export TZ=&amp;#34;CET&amp;#34; $ go run test_time_now.go now: 2022-11-18 17:00:30.08305121 +0100 CET m=+0.000011788 jst: 2022-11-19 01:00:30.</description><content>&lt;p>2時に寝て4時に起きて仮眠して6時半に起きた。たぶん寝たんだろうぐらいの感覚。10月まで対外的には週4日で働いていたのを、11月から週5日フルタイムの働き方に移行して、やっぱりしんどいという実感がある。対外的に週4日でも10月もオフィスに来て自社のお仕事をしていたり、半日ぐらいは社外のお仕事をしたりはしていた。それでも働く義務の有無によって、意識の違いか、プレッシャーやストレスの面からなにか働き方が違うように思える。生活も働き方もまったく同じなのに。&lt;/p>
&lt;h2 id="盛り上がってないイベント">盛り上がってないイベント&lt;/h2>
&lt;p>&lt;a href="https://twitter.com/hashtag/techverse_ja?src=hashtag_click&amp;amp;f=live">ハッシュタグ&lt;/a> をみてもほとんど関係者や発表者しかコメントしていないようにみえた。過去に新規事業の立ち上げに協力したプロジェクトの発表があると元同僚のタイムラインで知ったのでその発表だけみてみた。私が辞めてから3年ほど経つので新規サービスも追加されていてその内容がメインだったように思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://tech-verse.me/ja/sessions/133">DataSolution事業を支える技術&lt;/a>&lt;/li>
&lt;/ul>
&lt;iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/86cb588632a647e9baf4697c8f79110e" title="Technologies that Support the Data Solution Business" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;" data-ratio="1.78343949044586">&lt;/iframe>
&lt;p>あまり技術的な内容ではなく、ビジネス向けでもなく、どういった属性の聴衆向けの発表なのか、私にはあまりピンとこなかった。発表の準備不足な印象を受けた。発表を無理やり押し付けられたのかもしれない。&lt;/p>
&lt;h2 id="go-の-time-型とタイムゾーン">go の Time 型とタイムゾーン&lt;/h2>
&lt;p>go の &lt;a href="https://pkg.go.dev/time#Time">Time&lt;/a> 型は &lt;a href="https://pkg.go.dev/time#Location">Location&lt;/a> をもっていて、タイムゾーンも一緒に扱える。モダンな言語なら時刻を扱うときにタイムゾーンをセットで扱うのでよいと私も思う。タイムゾーンをもっていない時刻型とタイムゾーンを設定するための余分なコードのことを考えずに済む。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">mustGetJST&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Location&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">jst&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">LoadLocation&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Asia/Tokyo&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">jst&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">now&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;now:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">now&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;jst:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">now&lt;/span>.&lt;span style="color:#a6e22e">In&lt;/span>(&lt;span style="color:#a6e22e">mustGetJST&lt;/span>()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;utc:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">now&lt;/span>.&lt;span style="color:#a6e22e">UTC&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>実行結果。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ export TZ&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;CET&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ go run test_time_now.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>now: 2022-11-18 17:00:30.08305121 +0100 CET m&lt;span style="color:#f92672">=&lt;/span>+0.000011788
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jst: 2022-11-19 01:00:30.08305121 +0900 JST
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>utc: 2022-11-18 16:00:30.08305121 +0000 UTC
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>技術選定の根拠</title><link>/diary/posts/2022/1117/</link><pubDate>Thu, 17 Nov 2022 08:33:48 +0900</pubDate><guid>/diary/posts/2022/1117/</guid><description>0時に寝て5時に起きた。夜中に目覚めたかどうかはわからないぐらいにはたぶん寝てたと思う。
go の http フレームワークの選定 net/http で実装していた web api サーバーにフレームワーク導入しようかと考えている。いままでは認証・認可を外部で行う想定だったが、やっぱり api サーバーに実装した方がよいだろうと要件を再確認したので routing と middleware を再利用できるフレームワークを使うメリットが出てくる。net/http 上で直接 routing, middleware を実装するのは別に難しくないから自分で実装すればよいという考え方がある。一方で誰が実装しても大して変わらないものを車輪の再発明する必要があるのかというところに私は懸念に感じる。また context があとから標準ライブラリに追加されたため、net/http の HandlerFunc は context をシグネチャにもっていない。リクエストコンテキストをもっていないのが net/http の欠点だと私は考えていた。しかし、調べてたら NewRequestWithContext が追加されていてハンドラーではなくリクエストからリクエストコンテキストを扱えるようになっていた。これは私の勘違いだった。
フレームワークを使おうと決めて難しいのはなにを選ぶか。最近の流行り廃りや動向を私は知らないので基準がない。たまたましぶかわさんの記事をみつけて読んでいた。
Goのおすすめのフレームワークはnet/http この中で紹介されている chi か echo のどちらかにしようと直観で決めた。echo は以前 go の勉強会をしたときにいけうちさんが採用していたのでよく覚えている。そのときの話しを聞いていてもよさそうにみえた。たまたま echo のサイトをみたら Shiguredo さんのロゴがあって驚いた。スポンサーをされているらしい。chi はまったく知らない。どちらも十分によく使われていて middleware も揃っているフレームワークにみえる。本質的にはどちらを選んでも構わない。一方でマネージャーとしてどういう調査をして、どういう根拠で、どの技術を選定するのか。メンバーに対して説明責任を果たすためにこの2つのフレームワークの調査をすることに決めた。私自身がどちらもフレームワークも使ったことがないので軽くコードも書いてみてどんな雰囲気なのか感触を掴みつつ、フレームワークのソースコードも読んでみようと思う。</description><content>&lt;p>0時に寝て5時に起きた。夜中に目覚めたかどうかはわからないぐらいにはたぶん寝てたと思う。&lt;/p>
&lt;h2 id="go-の-http-フレームワークの選定">go の http フレームワークの選定&lt;/h2>
&lt;p>net/http で実装していた web api サーバーにフレームワーク導入しようかと考えている。いままでは認証・認可を外部で行う想定だったが、やっぱり api サーバーに実装した方がよいだろうと要件を再確認したので routing と middleware を再利用できるフレームワークを使うメリットが出てくる。net/http 上で直接 routing, middleware を実装するのは別に難しくないから自分で実装すればよいという考え方がある。一方で誰が実装しても大して変わらないものを車輪の再発明する必要があるのかというところに私は懸念に感じる。また &lt;a href="https://pkg.go.dev/context">context&lt;/a> があとから標準ライブラリに追加されたため、net/http の HandlerFunc は context をシグネチャにもっていない。リクエストコンテキストをもっていないのが net/http の欠点だと私は考えていた。しかし、調べてたら &lt;a href="https://pkg.go.dev/net/http#NewRequestWithContext">NewRequestWithContext&lt;/a> が追加されていてハンドラーではなくリクエストからリクエストコンテキストを扱えるようになっていた。これは私の勘違いだった。&lt;/p>
&lt;p>フレームワークを使おうと決めて難しいのはなにを選ぶか。最近の流行り廃りや動向を私は知らないので基準がない。たまたましぶかわさんの記事をみつけて読んでいた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://future-architect.github.io/articles/20210714a/">Goのおすすめのフレームワークはnet/http&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>この中で紹介されている &lt;a href="https://github.com/go-chi/chi">chi&lt;/a> か &lt;a href="https://echo.labstack.com/">echo&lt;/a> のどちらかにしようと直観で決めた。echo は以前 go の勉強会をしたときにいけうちさんが採用していたのでよく覚えている。そのときの話しを聞いていてもよさそうにみえた。たまたま echo のサイトをみたら Shiguredo さんのロゴがあって驚いた。スポンサーをされているらしい。chi はまったく知らない。どちらも十分によく使われていて middleware も揃っているフレームワークにみえる。本質的にはどちらを選んでも構わない。一方でマネージャーとしてどういう調査をして、どういう根拠で、どの技術を選定するのか。メンバーに対して説明責任を果たすためにこの2つのフレームワークの調査をすることに決めた。私自身がどちらもフレームワークも使ったことがないので軽くコードも書いてみてどんな雰囲気なのか感触を掴みつつ、フレームワークのソースコードも読んでみようと思う。&lt;/p></content></item><item><title>久しぶりに go のテストコードを書いた</title><link>/diary/posts/2022/1114/</link><pubDate>Mon, 14 Nov 2022 18:41:37 +0900</pubDate><guid>/diary/posts/2022/1114/</guid><description>0時に寝て3時と5時に起きて7時に起きた。まぁまぁ眠れたと思う。
go のテストコードのサンプル 先日 Logger のコード を書いて、テストコードのサンプルも書いてみた。いま微妙に TableDrivenTests が書けてないので参照実装として Logger のデータ駆動テストを書いてチームに共有した。私も future さんのテストのチュートリアル記事を読みながら復習してた。
Goのテストに入門してみよう！ 昔、私が go 開発していた頃にはなかった新機能としてサブテストを並列に実行できる。
Subtests and Sub-benchmarks uuid ライブラリの歴史的経緯 たまたま Version 1 UUID を返す NewUUID のコードをみていて、err を返しているけど、現時点の実装では err が返ることはなく、これは歴史的経緯でシグネチャを変える方が影響が大きいだろうという意図でそうなっているらしい。
https://github.com/google/uuid/issues/83 ここでは New を使えとも書いてあるけれど、これはエラーが発生したときに panic が発生するのでこれはこれでいいんやろか？という疑問も出てくる。</description><content>&lt;p>0時に寝て3時と5時に起きて7時に起きた。まぁまぁ眠れたと思う。&lt;/p>
&lt;h2 id="go-のテストコードのサンプル">go のテストコードのサンプル&lt;/h2>
&lt;p>先日 &lt;a href="/diary/diary/posts/2022/1111/#Logger-の再実装">Logger のコード&lt;/a> を書いて、テストコードのサンプルも書いてみた。いま微妙に &lt;a href="https://github.com/golang/go/wiki/TableDrivenTests">TableDrivenTests&lt;/a> が書けてないので参照実装として Logger のデータ駆動テストを書いてチームに共有した。私も future さんのテストのチュートリアル記事を読みながら復習してた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://future-architect.github.io/articles/20200601/">Goのテストに入門してみよう！&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>昔、私が go 開発していた頃にはなかった新機能としてサブテストを並列に実行できる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pkg.go.dev/testing#hdr-Subtests_and_Sub_benchmarks">Subtests and Sub-benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="uuid-ライブラリの歴史的経緯">uuid ライブラリの歴史的経緯&lt;/h2>
&lt;p>たまたま Version 1 UUID を返す &lt;a href="https://pkg.go.dev/github.com/google/UUID#NewUUID">NewUUID&lt;/a> のコードをみていて、err を返しているけど、現時点の実装では err が返ることはなく、これは歴史的経緯でシグネチャを変える方が影響が大きいだろうという意図でそうなっているらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/google/uuid/issues/83">https://github.com/google/uuid/issues/83&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ここでは &lt;a href="https://pkg.go.dev/github.com/google/UUID#New">New&lt;/a> を使えとも書いてあるけれど、これはエラーが発生したときに panic が発生するのでこれはこれでいいんやろか？という疑問も出てくる。&lt;/p></content></item><item><title>ログおじさん</title><link>/diary/posts/2022/1111/</link><pubDate>Fri, 11 Nov 2022 05:14:26 +0900</pubDate><guid>/diary/posts/2022/1111/</guid><description>23時に寝て3時半に起きて眠れそうになかったからそのまま5時からオフィスで作業してた。
システム構成の検討 コンサルタントから顧客要件のヒアリングを行い、プロダクトを提供するインフラのシステム概要を mermaid で書いた。オンプレとクラウド環境のそれぞれを同じコンテナアプリケーションで動かすための構成を検討した。クラウド環境の一例として aws の構成を考えていて、https と http のプロトコル変換のようなことをするには api gateway を経由しないといけないと考えていたら、alb に証明書を設定して api gateway なくてもいけるとはらさんに教えてもらった。昔からできたそうで、なぜか私が長い間ずっと勘違いしていた。また時間があるときに自分でもやってみようと思う。
AWS Certificate Managerを使用してインターネットからELBへの通信をHTTPS化してみた Logger の再実装 プロダクトのコアな部分の実装は私がみた方がよいだろうと考えていて、そのうちの1つ Logger の設計がよくなかったので私が作り直した。といっても cybozu-go/log を使った薄いラッパーを設けただけ。チームメンバーからどこでエラーが起きているか追跡しにくいという声があったのでログ出力したところのソースコードの情報を出力しようと考えた。ググればたくさん出てくる。スタックフレームにアクセスする標準パッケージとして runtime を使うとできる。runtime.Caller と runtime.Callers は似て非なる関数のようでファイル名と行番号だけでよければ Caller を使った方がシンプルになると思う。関数名もほしかったら Callers を使ったスタックフレーム自体から取得する必要がある。
func Trace(skip int) (file string, funcName string) { pc := make([]uintptr, 15) n := runtime.Callers(skip, pc) frames := runtime.CallersFrames(pc[:n]) frame, _ := frames.Next() _file := frame.File[strings.Index(frame.File, sourceRepositoryPath)+8:] file = fmt.Sprintf(&amp;#34;%s:%d&amp;#34;, _file, frame.Line) return file, frame.</description><content>&lt;p>23時に寝て3時半に起きて眠れそうになかったからそのまま5時からオフィスで作業してた。&lt;/p>
&lt;h2 id="システム構成の検討">システム構成の検討&lt;/h2>
&lt;p>コンサルタントから顧客要件のヒアリングを行い、プロダクトを提供するインフラのシステム概要を mermaid で書いた。オンプレとクラウド環境のそれぞれを同じコンテナアプリケーションで動かすための構成を検討した。クラウド環境の一例として aws の構成を考えていて、https と http のプロトコル変換のようなことをするには api gateway を経由しないといけないと考えていたら、alb に証明書を設定して api gateway なくてもいけるとはらさんに教えてもらった。昔からできたそうで、なぜか私が長い間ずっと勘違いしていた。また時間があるときに自分でもやってみようと思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dev.classmethod.jp/articles/for-begginer-ssl-communication-by-aws-certificate-manager/">AWS Certificate Managerを使用してインターネットからELBへの通信をHTTPS化してみた&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="logger-の再実装">Logger の再実装&lt;/h2>
&lt;p>プロダクトのコアな部分の実装は私がみた方がよいだろうと考えていて、そのうちの1つ Logger の設計がよくなかったので私が作り直した。といっても &lt;a href="https://github.com/cybozu-go/log">cybozu-go/log&lt;/a> を使った薄いラッパーを設けただけ。チームメンバーからどこでエラーが起きているか追跡しにくいという声があったのでログ出力したところのソースコードの情報を出力しようと考えた。ググればたくさん出てくる。スタックフレームにアクセスする標準パッケージとして runtime を使うとできる。&lt;a href="https://pkg.go.dev/runtime#Caller">runtime.Caller&lt;/a> と runtime.Callers は似て非なる関数のようでファイル名と行番号だけでよければ Caller を使った方がシンプルになると思う。関数名もほしかったら Callers を使ったスタックフレーム自体から取得する必要がある。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Trace&lt;/span>(&lt;span style="color:#a6e22e">skip&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) (&lt;span style="color:#a6e22e">file&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">funcName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pc&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">uintptr&lt;/span>, &lt;span style="color:#ae81ff">15&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">runtime&lt;/span>.&lt;span style="color:#a6e22e">Callers&lt;/span>(&lt;span style="color:#a6e22e">skip&lt;/span>, &lt;span style="color:#a6e22e">pc&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">frames&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">runtime&lt;/span>.&lt;span style="color:#a6e22e">CallersFrames&lt;/span>(&lt;span style="color:#a6e22e">pc&lt;/span>[:&lt;span style="color:#a6e22e">n&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">frame&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">frames&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_file&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">frame&lt;/span>.&lt;span style="color:#a6e22e">File&lt;/span>[&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Index&lt;/span>(&lt;span style="color:#a6e22e">frame&lt;/span>.&lt;span style="color:#a6e22e">File&lt;/span>, &lt;span style="color:#a6e22e">sourceRepositoryPath&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>:]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">file&lt;/span> = &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%s:%d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">_file&lt;/span>, &lt;span style="color:#a6e22e">frame&lt;/span>.&lt;span style="color:#a6e22e">Line&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">file&lt;/span>, &lt;span style="color:#a6e22e">frame&lt;/span>.&lt;span style="color:#a6e22e">Function&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この情報を cybozu-go/log の map に追加するようなログ関数を提供するようにした。cybozu-go/log は標準の log パッケージに足りないところだけを追加していて、そのシンプルさと拡張性の高さを私は気に入ってよく使っている。私が気に入っているのでもっと有名になってほしい。&lt;/p>
&lt;p>前のお手伝いでもログ基盤を含めて Logger を作っていて、またいまも Logger を作り直していて、気付いたら私は Logger やログ出力に一家言あるような、ログおじさんになりつつある。&lt;/p></content></item><item><title>よい go コードを書くためのガイド</title><link>/diary/posts/2022/1110/</link><pubDate>Thu, 10 Nov 2022 08:34:22 +0900</pubDate><guid>/diary/posts/2022/1110/</guid><description>2時に寝て6時に起きて2度寝したら8時だった。生活リズムがおかしい。
Go Code Review Comments の学び直し 私の周りでは Go Code Review Comments というドキュメントが引用されているのをよくみかける。google 社での go のコードレビューのときによくある指摘をまとめたものである。pr/mr を送る前にこれぐらいは自分でチェックしようといったガイドになる。私自身、過去に何度か読んでいるとは思うが、久しぶりに go 開発をするので学び直しも兼ねて読み直すことにした。うちのチームは java 開発者が多いせいか、go のコードで go っぽくないところがいくつか散見されていた。チームメンバーにも共有する意図も含めて2回にわけて勉強会をしてみんなで読み合わせをする。その下調べとして既存のコードでこのガイドに準拠していないコードがあればそれはわかりやすい事例になるので探したりしていた。</description><content>&lt;p>2時に寝て6時に起きて2度寝したら8時だった。生活リズムがおかしい。&lt;/p>
&lt;h2 id="go-code-review-comments-の学び直し">Go Code Review Comments の学び直し&lt;/h2>
&lt;p>私の周りでは &lt;a href="https://github.com/golang/go/wiki/CodeReviewComments">Go Code Review Comments&lt;/a> というドキュメントが引用されているのをよくみかける。google 社での go のコードレビューのときによくある指摘をまとめたものである。pr/mr を送る前にこれぐらいは自分でチェックしようといったガイドになる。私自身、過去に何度か読んでいるとは思うが、久しぶりに go 開発をするので学び直しも兼ねて読み直すことにした。うちのチームは java 開発者が多いせいか、go のコードで go っぽくないところがいくつか散見されていた。チームメンバーにも共有する意図も含めて2回にわけて勉強会をしてみんなで読み合わせをする。その下調べとして既存のコードでこのガイドに準拠していないコードがあればそれはわかりやすい事例になるので探したりしていた。&lt;/p></content></item><item><title>設計談義</title><link>/diary/posts/2022/1108/</link><pubDate>Tue, 08 Nov 2022 07:33:23 +0900</pubDate><guid>/diary/posts/2022/1108/</guid><description>0時に寝て6時に起きた。2時と3時ぐらいに起きたけど、まぁまぁ眠れた。
go の interface の考え方 メンバーと設計の議論をしていて interface の考え方の概念を誤解しているように感じたので Go Code Review Comments の interfaces で書いてあることの意図や背景などを解説した。メンバー全員を集めて30分ほどで説明した。既存のコードは過剰に interface を設計していて、特定のメソッドを呼び出すラッパー関数を設けて、そのシグネチャに interface を受け取って構造体のメソッドを呼び出すコードを書いている。こんな感じのコード。
type myBehavior interface { doSome(data string) error } type myObject struct { myBehavior } func (o *myObject) doSome(data string) { ... } func handleSome(o myBehavior, data string) error return o.doSome(data) } handleSome のようなラッパー関数は不要だし、myObject の構造体に interface を埋め込む必要はないし、Go Code Review Comments では構造体を定義しているところで interface を提供しない方が保守コストが下がってよいよと提案している。これは java のような nominal subtyping と go の structural subtyping の違いで go らしい interface は構造体の提供側ではなく、呼び出し側で勝手に定義して任意の振る舞いを強制できるといった内容を java と go のコードを比較しながら説明した。そして、この話しが重要になるのはサードパーティのライブラリを利用するときに interface が変わると、それを使っている開発者に大きな影響を与えるので interface を提供するなら慎重に練ったものを公開しないといけないという java 開発から得られた知見などが影響しているのではないかという私見も話した。さらに自分たちが管理しているコードなら interface が変わろうが struct のメソッドが変わろうが、すべて自分たちが変更できる権限をもっているから設計時に厳密に interface やメソッドの振る舞いを詰めきれなかったとしても、後から必要ならいつでもいくらでも変えればいいだけと一緒に話した。開発のバランス感覚は経験からでないと身に付かないものだと思う。</description><content>&lt;p>0時に寝て6時に起きた。2時と3時ぐらいに起きたけど、まぁまぁ眠れた。&lt;/p>
&lt;h2 id="go-の-interface-の考え方">go の interface の考え方&lt;/h2>
&lt;p>メンバーと設計の議論をしていて interface の考え方の概念を誤解しているように感じたので &lt;a href="https://github.com/golang/go/wiki/CodeReviewComments#interfaces">Go Code Review Comments の interfaces&lt;/a> で書いてあることの意図や背景などを解説した。メンバー全員を集めて30分ほどで説明した。既存のコードは過剰に interface を設計していて、特定のメソッドを呼び出すラッパー関数を設けて、そのシグネチャに interface を受け取って構造体のメソッドを呼び出すコードを書いている。こんな感じのコード。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">myBehavior&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">doSome&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">myObject&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">myBehavior&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">o&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">myObject&lt;/span>) &lt;span style="color:#a6e22e">doSome&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">handleSome&lt;/span>(&lt;span style="color:#a6e22e">o&lt;/span> &lt;span style="color:#a6e22e">myBehavior&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">doSome&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>handleSome のようなラッパー関数は不要だし、myObject の構造体に interface を埋め込む必要はないし、Go Code Review Comments では構造体を定義しているところで interface を提供しない方が保守コストが下がってよいよと提案している。これは java のような nominal subtyping と go の structural subtyping の違いで go らしい interface は構造体の提供側ではなく、呼び出し側で勝手に定義して任意の振る舞いを強制できるといった内容を java と go のコードを比較しながら説明した。そして、この話しが重要になるのはサードパーティのライブラリを利用するときに interface が変わると、それを使っている開発者に大きな影響を与えるので interface を提供するなら慎重に練ったものを公開しないといけないという java 開発から得られた知見などが影響しているのではないかという私見も話した。さらに自分たちが管理しているコードなら interface が変わろうが struct のメソッドが変わろうが、すべて自分たちが変更できる権限をもっているから設計時に厳密に interface やメソッドの振る舞いを詰めきれなかったとしても、後から必要ならいつでもいくらでも変えればいいだけと一緒に話した。開発のバランス感覚は経験からでないと身に付かないものだと思う。&lt;/p></content></item><item><title>出張の最終日</title><link>/diary/posts/2022/1104/</link><pubDate>Fri, 04 Nov 2022 08:36:18 +0900</pubDate><guid>/diary/posts/2022/1104/</guid><description>0時に寝て7時に起きた。疲れているせいか、よく眠れたと思う。わりと出張でよく眠れているので普段眠れていなかったのは体力が余っているからではないかという気もしてきた。
課題の洗い出し 一昨日の続きでわかっていることや進捗のあったものを確認しながら、追加で課題を作って整理していく。まだまだ課題が足りないのでどんどん作っていかないといけない。それと同時に go のソースコードを読みながら設計や改善の要点を私の中で把握していく。java に慣れたプログラマーが書いた go のコードなので java の考え方の影響が強いようにみえた。私がいくつかアドバイスする余地はあるようにみえた。google でコードレビュー時によくある指摘事項をまとめた有名な wiki がある。メンバーに聞いたらちゃんと読んだことがないということだったので2-3回かけてみんなで読んで学ぶ機会にする。私自身、数年前に読んで忘れていていることも多いだろうから学び直し。テストのページは2019年9月に追加されている。たぶん読んだことない。
https://github.com/golang/go/wiki/CodeReviewComments https://github.com/golang/go/wiki/TestComments 課題管理勉強会 1時間分ぐらいの資料を用意したつもりが35分で終わってしまった。勉強会の雰囲気が固かったのか、慣れない場所での説明だったのか、マスクした状態で長々と話すことも過去に一度もやったことなくて話しにくかった。初めての試みであまりうまくいかなかったが、初めてやることでうまくいかないのは私にとって当たり前のことなので次の勉強会に向けて改善していきたい。どのぐらい伝わったのかわからないけれど、もっと参加者を巻き込んだ活気のある勉強会になるように努めていきたい。
リアル飲み会 19時から3年ぶりに友だちとリアル飲み会。せっかく東京に行く機会だからと5日のうち3日飲んでいたので後半になるほどバテていった。これは加齢による体力低下もあるのだろう。娯楽はどういうものか？という定義や在り方の議論が盛り上がって、私は暇つぶしの時間であって何もしないのでぼーっとしているのも退屈だからその時間を埋めるもの、楽しければいいけど楽しくなくても、どうせ何もしない時間なのであまり気にしないといった考え方をしている。私の友だちは楽しむために娯楽に集中するとか、その時間を無駄にしないようになるべく楽しめる娯楽を選択するとか、24時間のうち、1時間足りとも無駄な時間にはしないぞという姿勢がみえて、私からみたらそんな生活はしんどくないですか？みたいな気持ちになった。おそらく時間を無駄にしたことがストレスになるからそういう姿勢になるのだろうと推測する。娯楽をしながらだらだら時間を過ごすということはないらしい。オンライン飲み会はちょくちょくしていたものの、3年ぶりにオフ会をしたので飲食代をご馳走になった。感謝。前も会社を作った後の飲み会でご馳走になっていて、なかなか私からお返しできていない。それを覚えておくためにもここに書いておく。
本棚に埋もれて眠る この日は 新宿 BOOK AND BED TOKYO に泊まった。前に浅草の同施設に泊まったことはあったけれど新宿は初めて。大雑把に言えば本屋とカプセルホテルが合体したような施設になる。この非日常の雰囲気が好きなので機会があれば泊まるようにしている。宿泊費は6,000円とカプセルホテルより高くビジネスホテルより安いという価格帯。ここに来て本を読んだり泊まったりしている人はコワーキングスペースもしくはコミュニティ的なスペースが好きで本も好きな人たちだと思う。勉強会に行く感覚と似ている。そういう自分と似た人たちが集まる空間そのものが価値観の共有だったり安心感につながっていて私はそういう空気も楽しんでいたりする。とはいえ、バテバテで疲れていたので少しだけ本を読んでわりとすぐに寝た。</description><content>&lt;p>0時に寝て7時に起きた。疲れているせいか、よく眠れたと思う。わりと出張でよく眠れているので普段眠れていなかったのは体力が余っているからではないかという気もしてきた。&lt;/p>
&lt;h2 id="課題の洗い出し">課題の洗い出し&lt;/h2>
&lt;p>一昨日の続きでわかっていることや進捗のあったものを確認しながら、追加で課題を作って整理していく。まだまだ課題が足りないのでどんどん作っていかないといけない。それと同時に go のソースコードを読みながら設計や改善の要点を私の中で把握していく。java に慣れたプログラマーが書いた go のコードなので java の考え方の影響が強いようにみえた。私がいくつかアドバイスする余地はあるようにみえた。google でコードレビュー時によくある指摘事項をまとめた有名な wiki がある。メンバーに聞いたらちゃんと読んだことがないということだったので2-3回かけてみんなで読んで学ぶ機会にする。私自身、数年前に読んで忘れていていることも多いだろうから学び直し。テストのページは2019年9月に追加されている。たぶん読んだことない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/golang/go/wiki/CodeReviewComments">https://github.com/golang/go/wiki/CodeReviewComments&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/golang/go/wiki/TestComments">https://github.com/golang/go/wiki/TestComments&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="課題管理勉強会">課題管理勉強会&lt;/h2>
&lt;p>1時間分ぐらいの資料を用意したつもりが35分で終わってしまった。勉強会の雰囲気が固かったのか、慣れない場所での説明だったのか、マスクした状態で長々と話すことも過去に一度もやったことなくて話しにくかった。初めての試みであまりうまくいかなかったが、初めてやることでうまくいかないのは私にとって当たり前のことなので次の勉強会に向けて改善していきたい。どのぐらい伝わったのかわからないけれど、もっと参加者を巻き込んだ活気のある勉強会になるように努めていきたい。&lt;/p>
&lt;h2 id="リアル飲み会">リアル飲み会&lt;/h2>
&lt;p>19時から3年ぶりに友だちとリアル飲み会。せっかく東京に行く機会だからと5日のうち3日飲んでいたので後半になるほどバテていった。これは加齢による体力低下もあるのだろう。娯楽はどういうものか？という定義や在り方の議論が盛り上がって、私は暇つぶしの時間であって何もしないのでぼーっとしているのも退屈だからその時間を埋めるもの、楽しければいいけど楽しくなくても、どうせ何もしない時間なのであまり気にしないといった考え方をしている。私の友だちは楽しむために娯楽に集中するとか、その時間を無駄にしないようになるべく楽しめる娯楽を選択するとか、24時間のうち、1時間足りとも無駄な時間にはしないぞという姿勢がみえて、私からみたらそんな生活はしんどくないですか？みたいな気持ちになった。おそらく時間を無駄にしたことがストレスになるからそういう姿勢になるのだろうと推測する。娯楽をしながらだらだら時間を過ごすということはないらしい。オンライン飲み会はちょくちょくしていたものの、3年ぶりにオフ会をしたので飲食代をご馳走になった。感謝。前も会社を作った後の飲み会でご馳走になっていて、なかなか私からお返しできていない。それを覚えておくためにもここに書いておく。&lt;/p>
&lt;h2 id="本棚に埋もれて眠る">本棚に埋もれて眠る&lt;/h2>
&lt;p>この日は &lt;a href="https://bookandbedtokyo.com/ja/shinjuku/">新宿 BOOK AND BED TOKYO&lt;/a> に泊まった。前に浅草の同施設に泊まったことはあったけれど新宿は初めて。大雑把に言えば本屋とカプセルホテルが合体したような施設になる。この非日常の雰囲気が好きなので機会があれば泊まるようにしている。宿泊費は6,000円とカプセルホテルより高くビジネスホテルより安いという価格帯。ここに来て本を読んだり泊まったりしている人はコワーキングスペースもしくはコミュニティ的なスペースが好きで本も好きな人たちだと思う。勉強会に行く感覚と似ている。そういう自分と似た人たちが集まる空間そのものが価値観の共有だったり安心感につながっていて私はそういう空気も楽しんでいたりする。とはいえ、バテバテで疲れていたので少しだけ本を読んでわりとすぐに寝た。&lt;/p></content></item></channel></rss>