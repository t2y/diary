<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Svelte on</title><link>/diary/tags/svelte/</link><description>Recent content in Svelte on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 11 Jan 2024 18:25:12 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/svelte/index.xml" rel="self" type="application/rss+xml"/><item><title>仕事して打ち合わせしてレンタカーの手配</title><link>/diary/posts/2024/0111/</link><pubDate>Thu, 11 Jan 2024 18:25:12 +0900</pubDate><guid>/diary/posts/2024/0111/</guid><description>0時に寝て何度か起きて6時半に起きた。ようやく生活のリズムが戻ってきた。
今日の筋トレは腹筋:15x1,腕立て:10x1,スクワット15x1をした。
sveltekit のエラー制御 svelte のエラーハンドラーの仕組みを調べた。
sveltekit: エラー error() ヘルパーの内部で例外を throw して +error.svelte ファイルがエラーハンドラーでその例外を捕捉してエラーの表示を制御する。とくに目新しくない、普通のフレームワークなら用意してあるであろう例外ハンドラーのようにみえる。公式ドキュメントを読みなさいと常々メンバーに言っているが、なかなか読んでくれなくて、例外ハンドラーを知らずに自前のエラー制御を実装してしまう。私からツッコミが入って作り直しになる。公式ドキュメントを一通り読んだ方が開発が速いと何度も指摘しているのだが。
静的サイトジェネレーターの勉強会の打ち合わせ fin-py で2月に静的サイトジェネレーターのハンズオンをやるそうで hugo なら私が使っているので紹介ぐらいできますよと言ったらそのままハンズオンの講師をやることになった。今日はそのための打ち合わせを行うことになった。だいたい次の内容になった。私以外にも4人ほど講師がいて、他の静的サイトジェネレーターのハンズオンも行う。
ハンズオンは1人30分を持ち時間とする 質問も込みで30分 時間に余裕があるので少しぐらいなら超えてもよい デプロイ先やホスティングについての話しは個別にやらない 静的サイトジェネレーターとは別のセッションで話す ローカルでビルドするまでをハンズオンで話す このハンズオンの対象とする参加者の要項を書く ターゲットの参加者層を決めないと、どのレベルで解説してよいかわからない git/github は使えるという前提 ターミナルでコマンドライン操作もできるという前提 1月20日までにハンズオンのドキュメントを書いて connpass の要項を完成させる hugo をインストールして、サイト環境を構築して、記事の生成／ビルドをする。あとはメタデータ付きマークダウンやテーマの設定ぐらいを説明するかなぁ。
開発合宿の準備 ちゃくちゃくと準備を進めている。今回は神戸から4人、関東から3人の合計7人が参加する。うちの会社の社用車で行く予定だったが5人しか乗れない。みんなで移動するのに車が2台になるのも面倒なのでレンタカーでミニバンを借りることにした。スタッドレスタイヤのオプションを付けると2泊3日で11,880円になる。これはスタッドレスタイヤのレンタルとほぼ同じぐらいの料金にみえる。これによって社用車のスタッドレスタイヤ換装の難しい課題からも解放される。キャンペーン割引があって保険も追加して2泊3日で合計61,215円となった。ミニバンなら7-8名は乗れるし、荷物も余裕をもって積み込みできる。このアイディアはいいなと思って、きのいえの定員もそのぐらいの人数がちょうどよさそうに思う。今回の開発合宿では人数の上限はどうかという点にも注目して取り組みたい。</description><content>&lt;p>0時に寝て何度か起きて6時半に起きた。ようやく生活のリズムが戻ってきた。&lt;/p>
&lt;p>今日の筋トレは腹筋:15x1,腕立て:10x1,スクワット15x1をした。&lt;/p>
&lt;h2 id="sveltekit-のエラー制御">sveltekit のエラー制御&lt;/h2>
&lt;p>svelte のエラーハンドラーの仕組みを調べた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kit.svelte.jp/docs/errors">sveltekit: エラー&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>error()&lt;/code> ヘルパーの内部で例外を throw して &lt;code>+error.svelte&lt;/code> ファイルがエラーハンドラーでその例外を捕捉してエラーの表示を制御する。とくに目新しくない、普通のフレームワークなら用意してあるであろう例外ハンドラーのようにみえる。公式ドキュメントを読みなさいと常々メンバーに言っているが、なかなか読んでくれなくて、例外ハンドラーを知らずに自前のエラー制御を実装してしまう。私からツッコミが入って作り直しになる。公式ドキュメントを一通り読んだ方が開発が速いと何度も指摘しているのだが。&lt;/p>
&lt;h2 id="静的サイトジェネレーターの勉強会の打ち合わせ">静的サイトジェネレーターの勉強会の打ち合わせ&lt;/h2>
&lt;p>fin-py で2月に静的サイトジェネレーターのハンズオンをやるそうで hugo なら私が使っているので紹介ぐらいできますよと言ったらそのままハンズオンの講師をやることになった。今日はそのための打ち合わせを行うことになった。だいたい次の内容になった。私以外にも4人ほど講師がいて、他の静的サイトジェネレーターのハンズオンも行う。&lt;/p>
&lt;ul>
&lt;li>ハンズオンは1人30分を持ち時間とする
&lt;ul>
&lt;li>質問も込みで30分&lt;/li>
&lt;li>時間に余裕があるので少しぐらいなら超えてもよい&lt;/li>
&lt;li>デプロイ先やホスティングについての話しは個別にやらない
&lt;ul>
&lt;li>静的サイトジェネレーターとは別のセッションで話す&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ローカルでビルドするまでをハンズオンで話す&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>このハンズオンの対象とする参加者の要項を書く
&lt;ul>
&lt;li>ターゲットの参加者層を決めないと、どのレベルで解説してよいかわからない&lt;/li>
&lt;li>git/github は使えるという前提&lt;/li>
&lt;li>ターミナルでコマンドライン操作もできるという前提&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>1月20日までにハンズオンのドキュメントを書いて connpass の要項を完成させる&lt;/li>
&lt;/ul>
&lt;p>hugo をインストールして、サイト環境を構築して、記事の生成／ビルドをする。あとはメタデータ付きマークダウンやテーマの設定ぐらいを説明するかなぁ。&lt;/p>
&lt;h2 id="開発合宿の準備">開発合宿の準備&lt;/h2>
&lt;p>ちゃくちゃくと準備を進めている。今回は神戸から4人、関東から3人の合計7人が参加する。うちの会社の社用車で行く予定だったが5人しか乗れない。みんなで移動するのに車が2台になるのも面倒なのでレンタカーでミニバンを借りることにした。スタッドレスタイヤのオプションを付けると2泊3日で11,880円になる。これはスタッドレスタイヤのレンタルとほぼ同じぐらいの料金にみえる。これによって社用車のスタッドレスタイヤ換装の難しい課題からも解放される。キャンペーン割引があって保険も追加して2泊3日で合計61,215円となった。ミニバンなら7-8名は乗れるし、荷物も余裕をもって積み込みできる。このアイディアはいいなと思って、きのいえの定員もそのぐらいの人数がちょうどよさそうに思う。今回の開発合宿では人数の上限はどうかという点にも注目して取り組みたい。&lt;/p></content></item><item><title>vhs コマンドの使い方</title><link>/diary/posts/2024/0110/</link><pubDate>Wed, 10 Jan 2024 08:27:29 +0900</pubDate><guid>/diary/posts/2024/0110/</guid><description>23時過ぎに寝始めて何度か起きて7時半に起きた。
今日の筋トレは腹筋:10x1,腕立て:10x1,スクワット15x1をした。
sveltekit で context のデータを扱う ui 側でページに依存しない形で設定情報などを扱いたいとする。svelte の store と context api を組み合わせて sveltekit として context を管理するサンプルコードが紹介されている。
context と共に store を使う これだけですぐ動くのだけど、このときに LayoutData はサーバー側で作るとバックエンドの仕組みを隠蔽できて嬉しい。そういったときは src/routes/+layout.server.ts にバックエンドの api 呼び出しを隠蔽することで意図した振る舞いになる。
import type { LayoutServerLoad } from &amp;#34;./$types&amp;#34;; export const load: LayoutServerLoad = async () =&amp;gt; { const r = await fetch(`localhost:18080/myapi`); return r.json(); }; アニメ gif をスクリプトから作る お気に入りのコマンドラインツールを淡々と紹介する をみていて vhs という cli でアニメ gif を作ってくれることを知った。試しにやってみた。ターミナルを録画するようなやり方と比べて、録画時にタイプミスしてしまうようなミスを防げる。次のようなスクリプトファイルを新規作成する。
$ vhs new bf.tape Output bf.gif Require echo Set Shell &amp;#34;bash&amp;#34; Set FontSize 14 Set Width 800 Set Height 380 Type &amp;#34;genact -m bruteforce&amp;#34; Sleep 500ms Enter Sleep 10s あとはこの設定でアニメ gif を作る。</description><content>&lt;p>23時過ぎに寝始めて何度か起きて7時半に起きた。&lt;/p>
&lt;p>今日の筋トレは腹筋:10x1,腕立て:10x1,スクワット15x1をした。&lt;/p>
&lt;h2 id="sveltekit-で-context-のデータを扱う">sveltekit で context のデータを扱う&lt;/h2>
&lt;p>ui 側でページに依存しない形で設定情報などを扱いたいとする。svelte の store と context api を組み合わせて sveltekit として context を管理するサンプルコードが紹介されている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kit.svelte.jp/docs/state-management#using-stores-with-context">context と共に store を使う&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>これだけですぐ動くのだけど、このときに &lt;code>LayoutData&lt;/code> はサーバー側で作るとバックエンドの仕組みを隠蔽できて嬉しい。そういったときは &lt;code>src/routes/+layout.server.ts&lt;/code> にバックエンドの api 呼び出しを隠蔽することで意図した振る舞いになる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span> { &lt;span style="color:#a6e22e">LayoutServerLoad&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./$types&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">load&lt;/span>: &lt;span style="color:#66d9ef">LayoutServerLoad&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#e6db74">`localhost:18080/myapi`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">json&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="アニメ-gif-をスクリプトから作る">アニメ gif をスクリプトから作る&lt;/h2>
&lt;p>&lt;a href="https://zenn.dev/kou_pg_0131/articles/favorite-cli-tools">お気に入りのコマンドラインツールを淡々と紹介する&lt;/a> をみていて &lt;a href="https://github.com/charmbracelet/vhs">vhs&lt;/a> という cli でアニメ gif を作ってくれることを知った。試しにやってみた。ターミナルを録画するようなやり方と比べて、録画時にタイプミスしてしまうようなミスを防げる。次のようなスクリプトファイルを新規作成する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ vhs new bf.tape
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>Output bf.gif
Require echo
Set Shell &amp;#34;bash&amp;#34;
Set FontSize 14
Set Width 800
Set Height 380
Type &amp;#34;genact -m bruteforce&amp;#34; Sleep 500ms Enter
Sleep 10s
&lt;/code>&lt;/pre>&lt;p>あとはこの設定でアニメ gif を作る。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ vhs bf.tape
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>&lt;img src="/diary/diary/img/2024/0110_bf.gif"/>
&lt;/figure>
&lt;p>これで 4.8 MiB なのでサイズはまぁまぁ大きい。サイズやカラーの調整をすればもう1桁は縮小できるかもしれない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ls -lh img/2024/0110_bf.gif
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-rw-r-- &lt;span style="color:#ae81ff">1&lt;/span> 4.8M 1月 &lt;span style="color:#ae81ff">10&lt;/span> 19:48 img/2024/0110_bf.gif
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>税務相談のストレス</title><link>/diary/posts/2023/1208/</link><pubDate>Fri, 08 Dec 2023 08:30:02 +0900</pubDate><guid>/diary/posts/2023/1208/</guid><description>23時に寝て2時に起きて6時に起きた。晩ご飯食べてから作業するつもりが、疲れて寝てしまった。今日は権限管理のバグ修正したり、昨日の mongodb の調査を継続していた。
テックブログ公開 先日 テックブログレビュー を終えていた記事を公開した。
SvelteKit アプリケーションの組み込みへの考察 隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。
テックブログ (↑) のふりかえり 日本ナレッジ・マネジメント学会の年次大会の所感 税理士さんと契約 して3ヶ月間やり取りした所感 1ヶ月に1-2件ほど折りにふれて税務相談をする機会があったりする。税理士さんとは chatwork でやり取りしている。これがストレスになってきたのではらさんに相談にのってもらった。はらさん曰く、税理士さんの普通と it 業界のうちらとは業務の取り組み方への姿勢がまったく異なるため、最初の1年はストレスや不満がたまるのはあるという。士業という資格によって独占的に保護された業務のせいか、顧客に寄り添った対応をしてくれるわけではなく、質問の背景や意図を汲んでくれなくて質問に回答を返して終わりといった、チャットなのにメールのような一問一答のようなやり取りになっている。さらに回答が意図した内容ではなくて、追加で質問や背景の説明をしても、すぐにレスポンスが返ってくることはなく、数時間たってから回答が1つ届き、それも期待したものじゃないとさらに質問して、さらに数時間といったやり取りで5-6往復するのに数日かかるのがざらにある。はらさんがいうには税理士さんの回答を得るのに1週間ぐらいかかったり、問い合わせを数日放置されるのも普通とのことらしい。
先方も複数の顧客を相手にサポートしていて、やり取りに時間がかかることそのものは理解できるが、チャットのやり取りがコンテキストを理解しているようにみえなくてコミュニケーションが成立していない。例えば、当社への税理士報酬の支払いの対応について問い合わせたら次のような回答が戻ってくるだけ。
報酬の額と消費税等の額が明確に区分されている場合には、その報酬の額のみを源泉徴収の対象とします。
こんなことはググればすぐに分かるし、私も顧問報酬は原則として源泉徴収することを知っている。その上で税理士さん事務所の、当社への顧問報酬の明細について尋ねているのにこういった回答が返ってくるだけ。
インボイス制度開始後の報酬・料金等に対する源泉徴収 インボイス対応もあるため、請求書に明細を書いて pdf で送ってくださいと依頼して2日間返信なく放置されている。税理士さん事務所の顧問報酬の明細や請求書について尋ねても即日に返信がこないような状況になる。はらさんが言うには税理士さんの対応とはそんなもんらしい。チャットでやり取りしている意味がないし、こんなググればわかるレベルのやり取りしかできないなら解約も検討している。もう1つ懸念に思っているのは本人がチャットで回答していないのではないか？と考えている。チャットなのに1問1答でしか返信がこないし、コンテキストが伝わっていないと感じることも多々ある。とてもベテランの税理士さんが答えているとは思えないコミュニケーションの齟齬がある。
ちょっと調べてみると、税理士は日本税理士会連合会に登録する必要があり、税理士試験に合格しても登録していない場合は税理士としての独占業務を行うことができないらしい。また税理士事務所で働いている人の中には無資格職員もいて税務補助をしている可能性もあるという。必ずしも税理士資格がなければダメだというわけでもない。無資格職員でも経験を積んで税務に詳しい人もいると思う。一方でチャットでベテランの税理士のふりをして職員が回答しているのであれば、それはそれで信頼関係や偽証などの問題がある。そこら辺も聞いてみようと思う。次の記事では無資格職員が税務相談をしている事務所もあると書いてある。
税理士へ依頼したつもりが税理士でなかった</description><content>&lt;p>23時に寝て2時に起きて6時に起きた。晩ご飯食べてから作業するつもりが、疲れて寝てしまった。今日は権限管理のバグ修正したり、昨日の mongodb の調査を継続していた。&lt;/p>
&lt;h2 id="テックブログ公開">テックブログ公開&lt;/h2>
&lt;p>先日 &lt;a href="/diary/diary/posts/2023/1206/">テックブログレビュー&lt;/a> を終えていた記事を公開した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.osstech.co.jp/posts/2023/12/sveltekit-apps-integration/">SvelteKit アプリケーションの組み込みへの考察&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。&lt;/p>
&lt;ul>
&lt;li>テックブログ (↑) のふりかえり&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2023/1203/">日本ナレッジ・マネジメント学会の年次大会の所感&lt;/a>&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2023/1016/">税理士さんと契約&lt;/a> して3ヶ月間やり取りした所感&lt;/li>
&lt;/ul>
&lt;p>1ヶ月に1-2件ほど折りにふれて税務相談をする機会があったりする。税理士さんとは chatwork でやり取りしている。これがストレスになってきたのではらさんに相談にのってもらった。はらさん曰く、税理士さんの普通と it 業界のうちらとは業務の取り組み方への姿勢がまったく異なるため、最初の1年はストレスや不満がたまるのはあるという。士業という資格によって独占的に保護された業務のせいか、顧客に寄り添った対応をしてくれるわけではなく、質問の背景や意図を汲んでくれなくて質問に回答を返して終わりといった、チャットなのにメールのような一問一答のようなやり取りになっている。さらに回答が意図した内容ではなくて、追加で質問や背景の説明をしても、すぐにレスポンスが返ってくることはなく、数時間たってから回答が1つ届き、それも期待したものじゃないとさらに質問して、さらに数時間といったやり取りで5-6往復するのに数日かかるのがざらにある。はらさんがいうには税理士さんの回答を得るのに1週間ぐらいかかったり、問い合わせを数日放置されるのも普通とのことらしい。&lt;/p>
&lt;p>先方も複数の顧客を相手にサポートしていて、やり取りに時間がかかることそのものは理解できるが、チャットのやり取りがコンテキストを理解しているようにみえなくてコミュニケーションが成立していない。例えば、当社への税理士報酬の支払いの対応について問い合わせたら次のような回答が戻ってくるだけ。&lt;/p>
&lt;blockquote>
&lt;p>報酬の額と消費税等の額が明確に区分されている場合には、その報酬の額のみを源泉徴収の対象とします。&lt;/p>
&lt;/blockquote>
&lt;p>こんなことはググればすぐに分かるし、私も顧問報酬は原則として源泉徴収することを知っている。その上で税理士さん事務所の、当社への顧問報酬の明細について尋ねているのにこういった回答が返ってくるだけ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.nta.go.jp/law/tsutatsu/kobetsu/shotoku/gensen/111209/01.htm">インボイス制度開始後の報酬・料金等に対する源泉徴収&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>インボイス対応もあるため、請求書に明細を書いて pdf で送ってくださいと依頼して2日間返信なく放置されている。税理士さん事務所の顧問報酬の明細や請求書について尋ねても即日に返信がこないような状況になる。はらさんが言うには税理士さんの対応とはそんなもんらしい。チャットでやり取りしている意味がないし、こんなググればわかるレベルのやり取りしかできないなら解約も検討している。もう1つ懸念に思っているのは本人がチャットで回答していないのではないか？と考えている。チャットなのに1問1答でしか返信がこないし、コンテキストが伝わっていないと感じることも多々ある。とてもベテランの税理士さんが答えているとは思えないコミュニケーションの齟齬がある。&lt;/p>
&lt;p>ちょっと調べてみると、税理士は日本税理士会連合会に登録する必要があり、税理士試験に合格しても登録していない場合は税理士としての独占業務を行うことができないらしい。また税理士事務所で働いている人の中には無資格職員もいて税務補助をしている可能性もあるという。必ずしも税理士資格がなければダメだというわけでもない。無資格職員でも経験を積んで税務に詳しい人もいると思う。一方でチャットでベテランの税理士のふりをして職員が回答しているのであれば、それはそれで信頼関係や偽証などの問題がある。そこら辺も聞いてみようと思う。次の記事では無資格職員が税務相談をしている事務所もあると書いてある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://soei-tax.jp/15326648136918">税理士へ依頼したつもりが税理士でなかった&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>全員採用のためのテックブログ</title><link>/diary/posts/2023/1205/</link><pubDate>Tue, 05 Dec 2023 09:48:16 +0900</pubDate><guid>/diary/posts/2023/1205/</guid><description>2時に寝て6時に起きて9時前に起きた。寝るのがどんどん遅くなってきて生活のリズムが乱れてきた。
sveltekit に関するテックブログ執筆 先日の続き の続き。
調査は一区切りついたのでテックブログを執筆することにした。今日はほぼ丸一日記事を書いていた。本当はマネージャーの私が1-2週間も技術調査して、テックブログを一生懸命書くみたいなことをやるよりも、他に大事なプロジェクトの遊撃やマネジメントに時間を割くべきではある。一方でメンバーに課題に取り組むにあたり、設計をどうするのか？設計をするためには調査が必要であること、調査した内容をアウトプットする重要性などの模範を示したいという意図で書いた。そして、メンバーにも開発の隙間にテックブログを書くことを業務として指示しようと考えている。
なんのためにテックブログを書くか？という目的は、業務においては明確で採用のために書く。プログラマーが採用において協力できることは限られる。その中でもテックブログというのは費用対効果が高く、会社のブランディングにもつながり、よい開発文化を醸成することにもつながる。プログラマーの採用がとても難しくなった昨今「全員採用」というキーワードもよく聞くようになった。一見プログラマーは採用において無関係だし、実際にそういった業務をやらなくても咎められることはない。しかし、自分のできることで採用に協力したいと考えたとき、できることの1つにテックブログを書くというのは悪くない選択肢だと私は考えている。少なくともテックブログを書けない (書かない) 人たちにとやかく言われたくない。</description><content>&lt;p>2時に寝て6時に起きて9時前に起きた。寝るのがどんどん遅くなってきて生活のリズムが乱れてきた。&lt;/p>
&lt;h2 id="sveltekit-に関するテックブログ執筆">sveltekit に関するテックブログ執筆&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/1204/#kitvite-アプリケーションのデバッグ">先日の続き&lt;/a> の続き。&lt;/p>
&lt;p>調査は一区切りついたのでテックブログを執筆することにした。今日はほぼ丸一日記事を書いていた。本当はマネージャーの私が1-2週間も技術調査して、テックブログを一生懸命書くみたいなことをやるよりも、他に大事なプロジェクトの遊撃やマネジメントに時間を割くべきではある。一方でメンバーに課題に取り組むにあたり、設計をどうするのか？設計をするためには調査が必要であること、調査した内容をアウトプットする重要性などの模範を示したいという意図で書いた。そして、メンバーにも開発の隙間にテックブログを書くことを業務として指示しようと考えている。&lt;/p>
&lt;p>なんのためにテックブログを書くか？という目的は、業務においては明確で採用のために書く。プログラマーが採用において協力できることは限られる。その中でもテックブログというのは費用対効果が高く、会社のブランディングにもつながり、よい開発文化を醸成することにもつながる。プログラマーの採用がとても難しくなった昨今「全員採用」というキーワードもよく聞くようになった。一見プログラマーは採用において無関係だし、実際にそういった業務をやらなくても咎められることはない。しかし、自分のできることで採用に協力したいと考えたとき、できることの1つにテックブログを書くというのは悪くない選択肢だと私は考えている。少なくともテックブログを書けない (書かない) 人たちにとやかく言われたくない。&lt;/p></content></item><item><title>svelte コンポーネントの実装は簡単</title><link>/diary/posts/2023/1204/</link><pubDate>Mon, 04 Dec 2023 08:46:19 +0900</pubDate><guid>/diary/posts/2023/1204/</guid><description>1時に寝て何度か起きて7時に起きた。日曜日の夜に業務スーパーへ行ったら生鮮系は売り切れているのが多かった。日持ちするようなものを購入した。呪術廻戦ゲーム の初心者ミッションをクリアしたのでゲームの時間を減らしていく。
kit/vite アプリケーションのデバッグ 先日の続き の続き。
ある kit アプリケーションの svelte コンポーネントから外部の kit アプリのコンポーネントやモジュールを埋め込むことができるかどうかを調査した。ドキュメントの Loading data をみながらコンポーネントを書いてみる。フロントエンドの開発はすべてメンバーに委譲しているので私はほとんど開発していない。ドキュメントみないとまったくどう実装していよいかわからない。
svelte コンポーネントをレンダリングするときにサーバー側で動かすのは +page.server.ts に、クライアント側で動かすのは +page.ts に実装する。今回の場合、外部の node.js プロセスに起動したサーバーに対してリクエストして index.html に相当するものを取得するのでサーバー側で取得したレスポンスから html を取り出して、それをコンポーネント側でレンダリングする。+page.server.ts は次のように実装する。
import type { PageServerLoad } from &amp;#39;./$types&amp;#39;; import { apps } from &amp;#39;$lib/index&amp;#39;; export const load: PageServerLoad = async ({ params }) =&amp;gt; { const res = await fetch(apps[&amp;#39;kit-demo1&amp;#39;].entrypoint); const html = await res.text(); return { html }; }; この html をクライアント側の +page.</description><content>&lt;p>1時に寝て何度か起きて7時に起きた。日曜日の夜に業務スーパーへ行ったら生鮮系は売り切れているのが多かった。日持ちするようなものを購入した。&lt;a href="/diary/diary/posts/2023/1123/">呪術廻戦ゲーム&lt;/a> の初心者ミッションをクリアしたのでゲームの時間を減らしていく。&lt;/p>
&lt;h2 id="kitvite-アプリケーションのデバッグ">kit/vite アプリケーションのデバッグ&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/1130/#kitvite-アプリケーションのデバッグ">先日の続き&lt;/a> の続き。&lt;/p>
&lt;p>ある kit アプリケーションの svelte コンポーネントから外部の kit アプリのコンポーネントやモジュールを埋め込むことができるかどうかを調査した。ドキュメントの &lt;a href="https://kit.svelte.dev/docs/load">Loading data&lt;/a> をみながらコンポーネントを書いてみる。フロントエンドの開発はすべてメンバーに委譲しているので私はほとんど開発していない。ドキュメントみないとまったくどう実装していよいかわからない。&lt;/p>
&lt;p>svelte コンポーネントをレンダリングするときにサーバー側で動かすのは +page.server.ts に、クライアント側で動かすのは +page.ts に実装する。今回の場合、外部の node.js プロセスに起動したサーバーに対してリクエストして index.html に相当するものを取得するのでサーバー側で取得したレスポンスから html を取り出して、それをコンポーネント側でレンダリングする。+page.server.ts は次のように実装する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span> { &lt;span style="color:#a6e22e">PageServerLoad&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./$types&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">apps&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;$lib/index&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">load&lt;/span>: &lt;span style="color:#66d9ef">PageServerLoad&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> ({ &lt;span style="color:#a6e22e">params&lt;/span> }) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#a6e22e">apps&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;kit-demo1&amp;#39;&lt;/span>].&lt;span style="color:#a6e22e">entrypoint&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">html&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">text&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> { &lt;span style="color:#a6e22e">html&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この html をクライアント側の +page.svelte から参照してレンダリングする。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ts&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span> { &lt;span style="color:#a6e22e">PageData&lt;/span> } &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./$types&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">PageData&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;{@html data.html}&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで一応は意図した kit アプリケーションを埋め込むことはできるが、実際にはスクリプトなどはなにかが競合して動かないようだ。これは node.js から取得するスクリプトやスタイルなどが複数の kit アプリケーションで競合してしまうからではないかと推測する。&lt;/p>
&lt;p>これが ssg ならば &lt;a href="https://kit.svelte.dev/docs/adapter-static">adapter-static&lt;/a> を使ってビルドして、その成果物を static ディレクトリ配下に置くだけでそのまま動く。これは特別ななにかではなく、kit アプリケーションとして意図した振る舞いにはなる。これが出来て嬉しいことはあまり思いつかないが、想像した通りに動くかどうかの検証のために確認した。&lt;/p>
&lt;p>次のリポジトリに調査した内容のサンプルコードを作った。ここまでの調査内容でまたテックブログを書いてみようと思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/sveltekit-apps-integration-sample">github.com/t2y/sveltekit-apps-integration-sample&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>複数の kit アプリケーションを共存させる仕組みの考察</title><link>/diary/posts/2023/1130/</link><pubDate>Thu, 30 Nov 2023 09:04:34 +0900</pubDate><guid>/diary/posts/2023/1130/</guid><description>1時に寝て3時に起きて5時に起きて7時半に起きた。なんとなく布団に入らずにベッドの上でそのまま寝てた。それでもあまり寒くはなかった。
kit/vite アプリケーションのデバッグ 先日の続き の続き。
kit アプリケーションを kit アプリケーションに埋め込むといったことができないかどうかの調査をしている。いろいろ調べている中で kit の discussions でもそういった議論はいくつか行われている。マイクロフロントエンドというキーワードも出てくる。
MicroFrontends with Svelte + SvelteKit #4151 Approach to embedding Kit #5003 これらの議論をみていても kit の ssr はそれ自体が1つのアプリケーションとして動かすことを前提にビルドされているため、kit アプリケーション内に別の kit アプリケーションを埋め込んだり、一部のコンポーネントを外部のアプリケーションと組み合わせて動かすことはなかなか難しいようにみえる。マイクロフロントエンドのような思想で設計されていない。しかし、既存のアプリケーションを動かしつつ、少しずつ kit アプリケーションへ移行するといった運用をしたいという世の中のニーズも根強いことが伺える。
ここで svelte.config.js でエントリーポイントを置き換えるぐらいはできる。デフォルトは / がエントリーポイントになるのを /myapp に置き換えるには次のように設定する。relative は es モジュールのインポートを相対パスで行うか、絶対パスにするかの設定も変更できる。これもデプロイ先のインフラの都合にあわせて調整できるようになっている。この設定を切り替えられるのだからエンドポイントをハックすること自体はそう難しくないのかもしれない。
kit: { paths: { relative: false, base: &amp;#39;/myapp&amp;#39; }, } さらに調査していて、adapter-node を使ってビルドするとデフォルトでは polka というアプリケーションサーバーが起動するコードが生成される。
function polka (opts) { return new Polka(opts); } const path = env(&amp;#39;SOCKET_PATH&amp;#39;, false); const host = env(&amp;#39;HOST&amp;#39;, &amp;#39;0.</description><content>&lt;p>1時に寝て3時に起きて5時に起きて7時半に起きた。なんとなく布団に入らずにベッドの上でそのまま寝てた。それでもあまり寒くはなかった。&lt;/p>
&lt;h2 id="kitvite-アプリケーションのデバッグ">kit/vite アプリケーションのデバッグ&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/1127/#kitvite-アプリケーションのデバッグ">先日の続き&lt;/a> の続き。&lt;/p>
&lt;p>kit アプリケーションを kit アプリケーションに埋め込むといったことができないかどうかの調査をしている。いろいろ調べている中で kit の discussions でもそういった議論はいくつか行われている。マイクロフロントエンドというキーワードも出てくる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/sveltejs/kit/discussions/4151">MicroFrontends with Svelte + SvelteKit #4151&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/sveltejs/kit/discussions/5003">Approach to embedding Kit #5003&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>これらの議論をみていても kit の ssr はそれ自体が1つのアプリケーションとして動かすことを前提にビルドされているため、kit アプリケーション内に別の kit アプリケーションを埋め込んだり、一部のコンポーネントを外部のアプリケーションと組み合わせて動かすことはなかなか難しいようにみえる。マイクロフロントエンドのような思想で設計されていない。しかし、既存のアプリケーションを動かしつつ、少しずつ kit アプリケーションへ移行するといった運用をしたいという世の中のニーズも根強いことが伺える。&lt;/p>
&lt;p>ここで svelte.config.js でエントリーポイントを置き換えるぐらいはできる。デフォルトは &lt;code>/&lt;/code> がエントリーポイントになるのを &lt;code>/myapp&lt;/code> に置き換えるには次のように設定する。relative は es モジュールのインポートを相対パスで行うか、絶対パスにするかの設定も変更できる。これもデプロイ先のインフラの都合にあわせて調整できるようになっている。この設定を切り替えられるのだからエンドポイントをハックすること自体はそう難しくないのかもしれない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">kit&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">paths&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">relative&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">base&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/myapp&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>さらに調査していて、adapter-node を使ってビルドするとデフォルトでは &lt;a href="https://github.com/lukeed/polka">polka&lt;/a> というアプリケーションサーバーが起動するコードが生成される。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">polka&lt;/span> (&lt;span style="color:#a6e22e">opts&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Polka&lt;/span>(&lt;span style="color:#a6e22e">opts&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">env&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;SOCKET_PATH&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">host&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">env&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;HOST&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;0.0.0.0&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">port&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">env&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;PORT&amp;#39;&lt;/span>, &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;3000&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">server&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">polka&lt;/span>().&lt;span style="color:#a6e22e">use&lt;/span>(&lt;span style="color:#a6e22e">handler&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">server&lt;/span>.&lt;span style="color:#a6e22e">listen&lt;/span>({ &lt;span style="color:#a6e22e">path&lt;/span>, &lt;span style="color:#a6e22e">host&lt;/span>, &lt;span style="color:#a6e22e">port&lt;/span> }, () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`Listening on &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">host&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">port&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここで任意のアプリケーションサーバーを使いたいという issue があって、それに対する回答から adapter-node のドキュメントにカスタムサーバーについて書かれていることに気付く。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/sveltejs/kit/issues/8794">Custom server options for adapter-node #8794&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kit.svelte.dev/docs/adapter-node#custom-server">Node servers: Custom server&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>アダプタは、ビルドディレクトリにindex.jsとhandler.jsの2つのファイルを作成します。index.js を実行すると (デフォルトのビルドディレクトリを使用している場合は node ビルドなど)、設定されたポートでサーバが起動します。&lt;/p>
&lt;p>あるいは、Express、Connect、Polka（あるいは組み込みのhttp.createServer）に適したハンドラをエクスポートするhandler.jsファイルをインポートして、独自のサーバをセットアップすることもできます。&lt;/p>
&lt;/blockquote>
&lt;p>handler.js さえインポートすればそのまま動くことはデバッグしていて知ってはいたのだけど、この自前のアプリケーションサーバーを &lt;a href="https://kit.svelte.dev/docs/hooks">hooks&lt;/a> を使って起動すれば任意のサーバーに置き換えできると issue の中で回答されていた。kit アプリケーションは1つのサーバーが1つのシステムとして動かすことを前提に設計されているが、サーバーを複数起動することでそれらを共存できるのではないか？と考えた。検証のために node.js から子プロセスを生成するには次のようなコードで起動する。些事だけど adapter-node の生成したコードが shell を介しないとポート番号を設定できなかったので &lt;code>shell: true&lt;/code> もセットしている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">spawn&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;child_process&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">start_server() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;called start_server&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">opts&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">shell&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">env&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...&lt;span style="color:#a6e22e">process&lt;/span>.&lt;span style="color:#a6e22e">env&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">PORT&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;3005&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ORIGIN&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;http://localhost:5174&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NODE_ENV&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;production&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">node&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">spawn&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;node&amp;#39;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;apps/myapp/build/index.js&amp;#39;&lt;/span>], &lt;span style="color:#a6e22e">opts&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">stdout&lt;/span>.&lt;span style="color:#a6e22e">on&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;data&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">data&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">toString&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">stderr&lt;/span>.&lt;span style="color:#a6e22e">on&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;data&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">data&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">error&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">toString&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">on&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;exit&amp;#39;&lt;/span>, (&lt;span style="color:#a6e22e">code&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`Child exited with code &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">code&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この node.js の子プロセスを起動する処理を hooks で呼び出すことである kit アプリケーションを起動したときに、別の kit アプリケーションを提供するアプリケーションサーバーの node.js プロセスも起動できる。そしてパスを解決できるようにするため、さらに es モジュールのインポートパスにあわせたプロキシを実装する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">start_server&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;$lib/index&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">start_server&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span> { &lt;span style="color:#a6e22e">Handle&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@sveltejs/kit&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">handle&lt;/span>: &lt;span style="color:#66d9ef">Handle&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> ({ &lt;span style="color:#a6e22e">event&lt;/span>, &lt;span style="color:#a6e22e">resolve&lt;/span> }) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">pathname&lt;/span>.&lt;span style="color:#a6e22e">startsWith&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/myapp&amp;#39;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">request&lt;/span>.&lt;span style="color:#a6e22e">method&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;GET&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;http://localhost:3005&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">pathname&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">request&lt;/span>.&lt;span style="color:#a6e22e">method&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;POST&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">request&lt;/span>.&lt;span style="color:#a6e22e">formData&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">endpoint&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;http://localhost:3005&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">pathname&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">search&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#a6e22e">endpoint&lt;/span>, { &lt;span style="color:#a6e22e">method&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;POST&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">body&lt;/span>: &lt;span style="color:#66d9ef">data&lt;/span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">resolve&lt;/span>(&lt;span style="color:#a6e22e">event&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これは kit のデモアプリが動くことを確認するためだけに実装したプロキシで GET/POST のリクエストを localhost:3005 に起動した node.js のプロセスへプロキシしている。これで2つの kit アプリケーションが1つのサーバーで共存しているかのように振る舞うことは確認できた。この延長上に私のやりたいことが実現できるかどうかをさらに調査する必要がある。&lt;/p></content></item><item><title>sveltekit/vite アプリケーションの調査を再開</title><link>/diary/posts/2023/1127/</link><pubDate>Mon, 27 Nov 2023 18:50:24 +0900</pubDate><guid>/diary/posts/2023/1127/</guid><description>1時に寝て起きたか起きてないか覚えてない感じで6時に起きた。起きてちょっとゲームして気付いたら7時だった。
kit/vite アプリケーションのデバッグ 先週公開したテックブログ の続き。
vite アプリケーションのバックエンドインテグレーション の詳細を調査している。丸1日デバッグしていていくつか振る舞いがわかってきて、designer アプリケーションを作りたいという要件に対して、こうすればできるんじゃないかという仮説も立てられるようになった。いまやりたい要件は kit の ssr アプリケーションを埋め込みたい。これは要件に満たないが、kit の ssg アプリケーションならば static ディレクトリに置くだけで参照できるし、インポートパスさえ書き換えてやれば別の kit アプリに埋め込むこともできるのを確認した。意図した通りの振る舞い。
vite アプリケーションはビルドオプションで manifest.json を出力し、エントリーポイントやどのファイルがどのファイルをインポートしているかといった情報を管理している。sveltekit はこれらの manifest.json から rollup でバンドルするために manifest.js を生成している。厳密には、sveltekit では production ビルド向けのチューニングをしたビルドツールを adapter と呼び、vite のビルドをフックする場所に1つになっている。node.js サーバー向けに production ビルドするときは adapter-node を使う。この実装を読んでみると、vite がビルドした成果物に対して、再度 rollup でバンドルして成果物を作り直すといったことをしている。そして、vite の成果物 (manifest.json も含む) を抽象化したものが Builder となる。adapter は Builder のインスタンスを使ってビルドの成果物を制御できる。先の manifest.js もこのときに生成していて、rollup でバンドルするためのパラメーターの1つとして使っているようにみえる。しかし、rollup のドキュメントをみても直接的に manifest.js の説明はなく、rollup の拡張の仕組みで manifest.js を作っているというよりは、sveltekit の要件によるもののようにもみえる。ここの背景はまだよくわからない。
私はフロントエンドのことが全然わからないのでライブラリのソースコードを読みながら、ドキュメントとあわせて調べて、1つずつ理解を深めていくというアプローチで進めている。こういった調査のやり方もメンバーへ伝えていければと考えている。
小規模企業共済オンライン手続きポータル 2021年度から小規模企業共済 に加入している。今年から掛け金を7万円/月に変更した。年間で84万円の所得控除となる。ちょうど2023年9月1日からポータルサイトが作成されたらしい。いずれマイナポータルと紐付くのかもしれない。
「オンライン手続きポータル」を公開しました 利用登録しようと思って、メールアドレスを登録しようとしたら会社のメールアドレスはなぜかバリデーションエラーになって gmail のアドレスなら登録できた。その後も氏名の半角カナ入力を強制されたりしながら、マイナンバーカードを読み取って認証チェックして利用登録の申請はできた。しかし、自動で本登録されるわけではなく、おそらく申請内容が先方に届いてなんらかの運用があって本登録されるみたい。オンラインポータルのホームでも半角カナを使っていたり、&amp;lt;title&amp;gt; タグには「マイナ手続きポータル」とあったり、申請しただけでいくつも不備がわかるようなひどいサイトになっている。2023年にまともな開発者が作ったサイトとは思えない。デジタル庁に作り直してもらった方がよいと思う。</description><content>&lt;p>1時に寝て起きたか起きてないか覚えてない感じで6時に起きた。起きてちょっとゲームして気付いたら7時だった。&lt;/p>
&lt;h2 id="kitvite-アプリケーションのデバッグ">kit/vite アプリケーションのデバッグ&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/1124/#テックブログ公開">先週公開したテックブログ&lt;/a> の続き。&lt;/p>
&lt;p>&lt;a href="https://ja.vitejs.dev/guide/backend-integration.html">vite アプリケーションのバックエンドインテグレーション&lt;/a> の詳細を調査している。丸1日デバッグしていていくつか振る舞いがわかってきて、designer アプリケーションを作りたいという要件に対して、こうすればできるんじゃないかという仮説も立てられるようになった。いまやりたい要件は kit の ssr アプリケーションを埋め込みたい。これは要件に満たないが、kit の ssg アプリケーションならば static ディレクトリに置くだけで参照できるし、インポートパスさえ書き換えてやれば別の kit アプリに埋め込むこともできるのを確認した。意図した通りの振る舞い。&lt;/p>
&lt;p>vite アプリケーションはビルドオプションで manifest.json を出力し、エントリーポイントやどのファイルがどのファイルをインポートしているかといった情報を管理している。sveltekit はこれらの manifest.json から rollup でバンドルするために manifest.js を生成している。厳密には、sveltekit では production ビルド向けのチューニングをしたビルドツールを &lt;a href="https://kit.svelte.dev/docs/adapters">adapter&lt;/a> と呼び、vite のビルドをフックする場所に1つになっている。node.js サーバー向けに production ビルドするときは &lt;a href="https://kit.svelte.dev/docs/adapter-node">adapter-node&lt;/a> を使う。この実装を読んでみると、vite がビルドした成果物に対して、再度 rollup でバンドルして成果物を作り直すといったことをしている。そして、vite の成果物 (manifest.json も含む) を抽象化したものが &lt;a href="https://kit.svelte.dev/docs/types#public-types-builder">Builder&lt;/a> となる。adapter は Builder のインスタンスを使ってビルドの成果物を制御できる。先の manifest.js もこのときに生成していて、rollup でバンドルするためのパラメーターの1つとして使っているようにみえる。しかし、rollup のドキュメントをみても直接的に manifest.js の説明はなく、rollup の拡張の仕組みで manifest.js を作っているというよりは、sveltekit の要件によるもののようにもみえる。ここの背景はまだよくわからない。&lt;/p>
&lt;p>私はフロントエンドのことが全然わからないのでライブラリのソースコードを読みながら、ドキュメントとあわせて調べて、1つずつ理解を深めていくというアプローチで進めている。こういった調査のやり方もメンバーへ伝えていければと考えている。&lt;/p>
&lt;h2 id="小規模企業共済オンライン手続きポータル">小規模企業共済オンライン手続きポータル&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0206/#2021年度の個人の確定申告">2021年度から小規模企業共済&lt;/a> に加入している。今年から掛け金を7万円/月に変更した。年間で84万円の所得控除となる。ちょうど2023年9月1日からポータルサイトが作成されたらしい。いずれマイナポータルと紐付くのかもしれない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.smrj.go.jp/org/info/press/2023/ool3bn000000kxx5-att/20230901_press01.pdf">「オンライン手続きポータル」を公開しました&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>利用登録しようと思って、メールアドレスを登録しようとしたら会社のメールアドレスはなぜかバリデーションエラーになって gmail のアドレスなら登録できた。その後も氏名の半角カナ入力を強制されたりしながら、マイナンバーカードを読み取って認証チェックして利用登録の申請はできた。しかし、自動で本登録されるわけではなく、おそらく申請内容が先方に届いてなんらかの運用があって本登録されるみたい。オンラインポータルのホームでも半角カナを使っていたり、&lt;code>&amp;lt;title&amp;gt;&lt;/code> タグには「マイナ手続きポータル」とあったり、申請しただけでいくつも不備がわかるようなひどいサイトになっている。2023年にまともな開発者が作ったサイトとは思えない。デジタル庁に作り直してもらった方がよいと思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://portal.e-shishobako.ne.jp/dp_apl/pw-usr/#/portal/landing?riyoCd=RGO0226000">小規模企業共済ｵﾝﾗｲﾝ手続きﾎﾟｰﾀﾙ&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>家族信託の打ち合わせ</title><link>/diary/posts/2023/1124/</link><pubDate>Fri, 24 Nov 2023 08:35:27 +0900</pubDate><guid>/diary/posts/2023/1124/</guid><description>1時に寝て4時に起きてもう1度どこかで起きて7時半に起きた。
テックブログ公開 テックブログレビュー を終えて公開した。この機会に 個々の記事に目次 も追加した。はらさんレビューから修正をして2時間後に公開しますよと宣言して勝手に公開した。
SvelteKit はどのようにコンパイルしているのか？ 家族信託の打ち合わせ 15時にお仕事を早退して、親と一緒に明石市にある弁護士さんの事務所へ訪問した。三ノ宮から車で向かって、ナビゲーションに従っていたら京橋から高速道路に入って若宮でおろされて、なんでこんな早く高速道路おりるんやろ？と不思議に思ったけど、須磨からの海岸線はそれほど渋滞せず信号も多くないから下道で行ってもそんなに時間はかからないという判断だったようにみえる。だいたい40-50分ほどで明石市の中心地に着いた。3分ほど遅刻して打ち合わせが始まった。
遺産を相続するとさまざまなリスクがある。大きなお金をもつというだけで詐欺のターゲットにされる。家族信託 (民事信託) という制度を使って、そのとき必要なお金のみを受け取るように運用する。構成要素は次の通り。
委託者: 母 受託者: 私と姉 信託財産: 預金 受託者は最低2人必要で、うちは姉もいるのでよいのではないかと弁護士さんが話されていた。たしかに1人っ子なら誰かにお願いしないといけない。大雑把に言えば、母の貯金を子どもに管理してもらうような制度になる。但し、最初の契約書に記載された内容の範囲内でしか、受託者はお金を引き出せないのでその契約書をしっかり作ることが重要になる。契約書に記載していれば、資産運用もできるらしい。契約書の叩き台として、どういった内容を書いておくかを相談した。弁護士さん曰く、契約書に書いておかないとその用途に使えなくなるため、1%でも可能性があれば、書くだけ書いておいた方がよいとのこと。書いておいて、実際に使わないというのはなんの問題もない。
3人でブレストするような感じで項目を洗い出した。
生活費 冠婚葬祭で払うお金 10万円以内なら生活費として引き出してもよい 例えば30万円いるとして、建替え可能なら10万円/月を3ヶ月かけて引き出すでもよい (お金に困った親戚がいたと仮定して) 親戚への資金援助 生活費の範囲内でやればよいはず 看護、療養といった通院も含めた医療費 老人ホームの入居費用 納税 (一時所得) 太陽光発電で得た収益のうち、所得税をこの口座から引き出して支払うといったこともできる 家の改築、修繕、取り壊しの費用 農業のための費用 農機具の購入や修理など トラクターが一番高い、100万円〜1,000万円ぐらいとピンからキリまである 土地 (田んぼ、宅地) の購入 太陽光発電設備の撤去費用 自家用車の購入費用 生命保険の支払い 死亡保険金は500万円 x 法定相続人数まで非課税なので相続税の節税になるらしい 例) 母の死亡時に姉と私が500万円受け取るような生命保険に入る 相続税の基礎控除が3,000万円 + 600万円 * 法定相続人数 例) うちは私と姉で 3000 + 600 * 2 = 4,200万円が基礎控除となる この金額を超える遺産があれば相続税の課税対象となる 生命保険へ付け替えることで 4200 + 500 * 2 = 5,200万円まで非課税にできる？ 資産運用 投資信託 積み立て系の投資信託がもっとも望ましいのではないか リスクヘッジとして大きなお金を1度に動かすのはなるべく避けたい NISA 口座を開設できるかどうかは調べないとわからない 信託口座とは別に証券口座も開設しないといけない 受託者が預金口座からお金を引き出して証券口座へ振り込むような運用になる？ 具体的にどういった運用にするかは信託銀行と応相談になるかもしれない なんらかの制約が課されるのではないかと推測される 株式投資 可能ではあるが、条件を指定しないといけないため、中長期での実運用は難しいのではないか 私が信託口座からお金を引き出すときに、一定金額以下の生活費 (例えば10万円) ならノーチェックだが、100万円とか大きなお金を引き出すときには銀行員からチェックがかかり、正当な使途なのかどうかを確認されるという。場合によっては見積もり書の提出なども必要かもしれないとのこと。それはとくに問題ない。契約書の作り直し自体は委託者が元気であればできる。しかし、手数料や手間暇もかかるため、実運用としては最初に作った契約書を変更するといったことはそうそう行われない。最初が大事。弁護士さんが契約書を作成するのに2-3週間かかる。その後に三井住友銀行さんで赤ペン先生のチェックが入る。契約内容の修正などのやり取りをしてその後手続きに進む。</description><content>&lt;p>1時に寝て4時に起きてもう1度どこかで起きて7時半に起きた。&lt;/p>
&lt;h2 id="テックブログ公開">テックブログ公開&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/1122/">テックブログレビュー&lt;/a> を終えて公開した。この機会に &lt;a href="/diary/diary/posts/2023/1120/#hugo-で書いた記事に目次を生成する">個々の記事に目次&lt;/a> も追加した。はらさんレビューから修正をして2時間後に公開しますよと宣言して勝手に公開した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.osstech.co.jp/posts/2023/11/how-sveltekit-compiles/">SvelteKit はどのようにコンパイルしているのか？&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="家族信託の打ち合わせ">家族信託の打ち合わせ&lt;/h2>
&lt;p>15時にお仕事を早退して、親と一緒に明石市にある弁護士さんの事務所へ訪問した。三ノ宮から車で向かって、ナビゲーションに従っていたら京橋から高速道路に入って若宮でおろされて、なんでこんな早く高速道路おりるんやろ？と不思議に思ったけど、須磨からの海岸線はそれほど渋滞せず信号も多くないから下道で行ってもそんなに時間はかからないという判断だったようにみえる。だいたい40-50分ほどで明石市の中心地に着いた。3分ほど遅刻して打ち合わせが始まった。&lt;/p>
&lt;p>遺産を相続するとさまざまなリスクがある。大きなお金をもつというだけで詐欺のターゲットにされる。家族信託 (民事信託) という制度を使って、そのとき必要なお金のみを受け取るように運用する。構成要素は次の通り。&lt;/p>
&lt;ul>
&lt;li>委託者: 母&lt;/li>
&lt;li>受託者: 私と姉&lt;/li>
&lt;li>信託財産: 預金&lt;/li>
&lt;/ul>
&lt;p>受託者は最低2人必要で、うちは姉もいるのでよいのではないかと弁護士さんが話されていた。たしかに1人っ子なら誰かにお願いしないといけない。大雑把に言えば、母の貯金を子どもに管理してもらうような制度になる。但し、最初の契約書に記載された内容の範囲内でしか、受託者はお金を引き出せないのでその契約書をしっかり作ることが重要になる。契約書に記載していれば、資産運用もできるらしい。契約書の叩き台として、どういった内容を書いておくかを相談した。弁護士さん曰く、契約書に書いておかないとその用途に使えなくなるため、1%でも可能性があれば、書くだけ書いておいた方がよいとのこと。書いておいて、実際に使わないというのはなんの問題もない。&lt;/p>
&lt;p>3人でブレストするような感じで項目を洗い出した。&lt;/p>
&lt;ul>
&lt;li>生活費
&lt;ul>
&lt;li>冠婚葬祭で払うお金
&lt;ul>
&lt;li>10万円以内なら生活費として引き出してもよい&lt;/li>
&lt;li>例えば30万円いるとして、建替え可能なら10万円/月を3ヶ月かけて引き出すでもよい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>(お金に困った親戚がいたと仮定して) 親戚への資金援助
&lt;ul>
&lt;li>生活費の範囲内でやればよいはず&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>看護、療養といった通院も含めた医療費&lt;/li>
&lt;li>老人ホームの入居費用&lt;/li>
&lt;li>納税 (一時所得)
&lt;ul>
&lt;li>太陽光発電で得た収益のうち、所得税をこの口座から引き出して支払うといったこともできる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>家の改築、修繕、取り壊しの費用&lt;/li>
&lt;li>農業のための費用
&lt;ul>
&lt;li>農機具の購入や修理など&lt;/li>
&lt;li>トラクターが一番高い、100万円〜1,000万円ぐらいとピンからキリまである&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>土地 (田んぼ、宅地) の購入&lt;/li>
&lt;li>太陽光発電設備の撤去費用&lt;/li>
&lt;li>自家用車の購入費用&lt;/li>
&lt;li>生命保険の支払い
&lt;ul>
&lt;li>死亡保険金は500万円 x 法定相続人数まで非課税なので相続税の節税になるらしい
&lt;ul>
&lt;li>例) 母の死亡時に姉と私が500万円受け取るような生命保険に入る&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>相続税の基礎控除が3,000万円 + 600万円 * 法定相続人数
&lt;ul>
&lt;li>例) うちは私と姉で 3000 + 600 * 2 = 4,200万円が基礎控除となる
&lt;ul>
&lt;li>この金額を超える遺産があれば相続税の課税対象となる&lt;/li>
&lt;li>生命保険へ付け替えることで 4200 + 500 * 2 = 5,200万円まで非課税にできる？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>資産運用
&lt;ul>
&lt;li>投資信託
&lt;ul>
&lt;li>積み立て系の投資信託がもっとも望ましいのではないか
&lt;ul>
&lt;li>リスクヘッジとして大きなお金を1度に動かすのはなるべく避けたい&lt;/li>
&lt;li>NISA 口座を開設できるかどうかは調べないとわからない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>信託口座とは別に証券口座も開設しないといけない
&lt;ul>
&lt;li>受託者が預金口座からお金を引き出して証券口座へ振り込むような運用になる？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>具体的にどういった運用にするかは信託銀行と応相談になるかもしれない
&lt;ul>
&lt;li>なんらかの制約が課されるのではないかと推測される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>株式投資
&lt;ul>
&lt;li>可能ではあるが、条件を指定しないといけないため、中長期での実運用は難しいのではないか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>私が信託口座からお金を引き出すときに、一定金額以下の生活費 (例えば10万円) ならノーチェックだが、100万円とか大きなお金を引き出すときには銀行員からチェックがかかり、正当な使途なのかどうかを確認されるという。場合によっては見積もり書の提出なども必要かもしれないとのこと。それはとくに問題ない。契約書の作り直し自体は委託者が元気であればできる。しかし、手数料や手間暇もかかるため、実運用としては最初に作った契約書を変更するといったことはそうそう行われない。最初が大事。弁護士さんが契約書を作成するのに2-3週間かかる。その後に三井住友銀行さんで赤ペン先生のチェックが入る。契約内容の修正などのやり取りをしてその後手続きに進む。&lt;/p>
&lt;p>思考実験として、詐欺にあって借金してしまった、または連帯保証人となって借金してしまった。その場合はどうなるか？というのも考えてみた。信託銀行に確認してみるとのことだったが、弁護士さんが言うには、家族信託の目的は財産を守ることにあるため、本来の使途ではないものへ支払いは抵抗があるかもしれないとのこと。その状況によって銀行員の判断次第かもしれないとのこと。&lt;/p>
&lt;p>受託者は年に1回報告書 (帳簿) を作り、どのように運用したかを委託者へ報告する義務がある。これは家族間だけの話ではある。この手の情報処理 (データ処理) は私が得意とするのでそんなのすぐやりますと回答できた。弁護士さんによると、こういう事務作業を嫌がる受託者もいるという。スプレッドシートでちゃちゃっと作ればよいはず。&lt;/p>
&lt;p>契約書を作成したら、それをもって委託者、受託者、弁護士の3人で &lt;a href="http://kobe-koushou-center.jp/">神戸公証役場&lt;/a> へ一緒に行く。その公正証書をもって三井住友信託銀行へ行って、母が口座を開設して、そこに弁護士さんが遺産を振り込むといった段取りになる。将来、委託者の健康を害して成年後見人がつく状況になったとしても家族信託の口座はそのまま受託者が管理できる。成年後見人に信託口座が移管されるようなことはない。&lt;/p>
&lt;p>最後に契約書の条項をチェックしていて次の内容を教えてもらった。&lt;/p>
&lt;blockquote>
&lt;p>弁護士業務の適正の確保&lt;/p>
&lt;p>甲は、本件事件等の処理の依頼目的が犯罪収益移転に関わるものではないことを、表明し保証する。&lt;/p>
&lt;/blockquote>
&lt;p>「半社チェックのようなもの？」と聞いたらちょっと違っていて、弁護士は大きなお金を動かしても監査を受けないという特権 (信頼) があって、その特権はマネーロンダリングできてしまうという諸刃の剣でもあるらしい。今回のお金は遺産なので半社会的なものに該当しないが、契約書では弁護士が扱う業務がマネーロンダリングではないことをチェックする必要があるみたい。&lt;/p>
&lt;p>帰りに &lt;a href="https://www.go-akashiyaki.com/">明石焼き ゴ&lt;/a> というお店で明石焼きを買った。駐車場の近くにあったお店に立ち寄ってテイクアウトしたのだけど、とてもおいしかった。それで &lt;a href="https://tabelog.com/hyogo/A2804/A280401/28005563/">食べログ&lt;/a> の評価もみたら 3.49 とかなり高い。たまたま買ったところがよいお店だった。18時半頃に店内もほぼ満席だったと思う。また明石へ行く機会があれば寄ってみようと思う。&lt;/p></content></item><item><title>フロントエンドのビルドツールと vite</title><link>/diary/posts/2023/1117/</link><pubDate>Fri, 17 Nov 2023 11:13:20 +0900</pubDate><guid>/diary/posts/2023/1117/</guid><description>22時に寝て0時に起きて2時間ほどネットで遊んで寝て5時に起きて7時に起きた。16時半にお仕事を終えて、雨降りの中、芦屋まで出掛けて能をみてきた。
svelte/kit と vite 水曜日から vite の機能や振る舞いについて調べている。厳密には svelte/kit (svelte と svelte kit の両方を指している) はどうやって .svelte ファイルや他のソースコードをコンパイルしているのかを調べ始めた。kit のコードを調べても svelte のコンパイルをしているようにはみえない。vite.config.ts には次のように kit が提供しているプラグインを使っているようにみえる。
import { sveltekit } from &amp;#39;@sveltejs/kit/vite&amp;#39;; ... export default defineConfig({ plugins: [sveltekit()] }); このコードを追っていくと、次のように vite-plugin-svelte からプラグインを設定するコードがある。
import { svelte } from &amp;#39;@sveltejs/vite-plugin-svelte&amp;#39;; ... export async function sveltekit() { ... return [...svelte(vite_plugin_svelte_options), ...kit({ svelte_config })]; } vite-plugin-svelte のコードを調べていくと、load や transform といったフックポイント に svelte のコンパイラを呼び出すコードがみえてくるようになる。
compileData = await compileSvelte(svelteRequest, code, options); svelte のコンパイルは vite の仕組みを使って vite-plugin-svelte に実装されている。それなら vite はどうやってフレームワークのコンパイルを実現しているのだろうか？という疑問に行き着く。その背景を調べたり、ドキュメントを読んだり、実際にサンプルコードを動かしながら検証したりをこの3日間やっていた。自分なりの仮説はできたけれど、本当にその仮説のような振る舞いをしているかの実証がまだできていない。週末に余裕があれば、それをやっていきたい。</description><content>&lt;p>22時に寝て0時に起きて2時間ほどネットで遊んで寝て5時に起きて7時に起きた。16時半にお仕事を終えて、雨降りの中、芦屋まで出掛けて能をみてきた。&lt;/p>
&lt;h2 id="sveltekit-と-vite">svelte/kit と vite&lt;/h2>
&lt;p>水曜日から &lt;a href="https://vitejs.dev/">vite&lt;/a> の機能や振る舞いについて調べている。厳密には svelte/kit (svelte と svelte kit の両方を指している) はどうやって &lt;code>.svelte&lt;/code> ファイルや他のソースコードをコンパイルしているのかを調べ始めた。kit のコードを調べても svelte のコンパイルをしているようにはみえない。vite.config.ts には次のように kit が提供しているプラグインを使っているようにみえる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">sveltekit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@sveltejs/kit/vite&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> &lt;span style="color:#a6e22e">defineConfig&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">plugins&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#a6e22e">sveltekit&lt;/span>()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このコードを追っていくと、次のように &lt;a href="https://github.com/sveltejs/vite-plugin-svelte">vite-plugin-svelte&lt;/a> からプラグインを設定するコードがある。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">svelte&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@sveltejs/vite-plugin-svelte&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">sveltekit() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> [...&lt;span style="color:#a6e22e">svelte&lt;/span>(&lt;span style="color:#a6e22e">vite_plugin_svelte_options&lt;/span>), ...&lt;span style="color:#a6e22e">kit&lt;/span>({ &lt;span style="color:#a6e22e">svelte_config&lt;/span> })];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>vite-plugin-svelte のコードを調べていくと、&lt;a href="https://vitejs.dev/guide/api-plugin.html#universal-hooks">load や transform といったフックポイント&lt;/a> に svelte のコンパイラを呼び出すコードがみえてくるようになる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">compileData&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">compileSvelte&lt;/span>(&lt;span style="color:#a6e22e">svelteRequest&lt;/span>, &lt;span style="color:#a6e22e">code&lt;/span>, &lt;span style="color:#a6e22e">options&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>svelte のコンパイルは vite の仕組みを使って vite-plugin-svelte に実装されている。それなら vite はどうやってフレームワークのコンパイルを実現しているのだろうか？という疑問に行き着く。その背景を調べたり、ドキュメントを読んだり、実際にサンプルコードを動かしながら検証したりをこの3日間やっていた。自分なりの仮説はできたけれど、本当にその仮説のような振る舞いをしているかの実証がまだできていない。週末に余裕があれば、それをやっていきたい。&lt;/p>
&lt;h2 id="2階席からの能鑑賞">2階席からの能鑑賞&lt;/h2>
&lt;p>行きは三ノ宮から JR で8分、帰りは阪神電車で12分の芦屋駅から徒歩10分ほどで芦屋ルナホールへ着く。&lt;a href="https://yarai-nohgakudo.com/archives/11286">第二十二回芦屋能・狂言鑑賞の会&lt;/a> へ行ってきた。前月に &lt;a href="/diary/diary/posts/2023/1021/#能楽の勉強">蝉丸の予習&lt;/a> をして準備万端で臨んだ。芦屋ルナホールに着いたら17時過ぎで受付をしてエレベーターで4Fまで。ホールの2階席が物理的には4Fにあった。芦屋ルナホールの2階席は見晴らしがよくて、能を斜め上から俯瞰してみるという、これはこれで独特の視点をもってみれておもしろい。ホールは能舞台ではないので、普通の舞台に高座の床を敷いて周りに松をいけて、簡易の能舞台をこしらえていた。&lt;/p>
&lt;p>ちょうど一調の「花月」が終わったところで、2つめの演目の狂言「濯ぎ川」をみて、芦屋市長挨拶して、能の蝉丸という順番だった。芦屋市長と言えば &lt;a href="https://www3.nhk.or.jp/news/html/20230424/k10014047281000.html">歴代最年少26歳で市長になった&lt;/a> 方で挨拶を聞いていても生徒会長が挨拶をしているような雰囲気で若い。こういった若くて優秀な方が若い感性で活躍してほしいと思う。&lt;/p>
&lt;p>蝉丸が始まった。シテは逆髪で、ツレが蝉丸になるという。どちらも能面をしていた。ワキは能面をつけないことは知っていたが、ツレは能面をつけていいんだということを知った。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.the-noh.com/jp/trivia/042.html">Question42 ワキ方はなぜ能面をつけない？&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ストーリーを知っていると謡や詞章が聞き取れるかと期待したが、まだまだそんなことはなくて、紙に書いたものがないと付いていけない。「能のことばを読んでみる会」でもらった詞章をもっていけばよかった。あとイヤホンがあれば朝原さんのスマホ解説を聞けるのだが、それを聞きたいと思いつつ、いつもイヤホンを忘れてしまって聞けない。次回こそイヤホンを忘れないようにしたい。&lt;/p>
&lt;p>それでも所々、記憶に残っている内容と演者が話しているところは理解できて、普段よりも能の物語の展開を理解できたと思う。一方で地謡 (横に座っていて集団で謡う人たち) が能の所々で謡が始まるとき、シテやワキがずっと待っていて時が止まっているかのような感覚になる。いままでもそういう展開だったはずだけど、今回はストーリーが頭も中に入っているので、逆髪、蝉丸、清貫のやり取りが止まってしまって、続きが待ち遠しいように思えた。テレビをみていて CM が入るような感覚。&lt;/p>
&lt;p>囃子は笛・大鼓・小鼓の3人体制だった。これも物語の要所で盛り上がりを演出している。囃子の盛り上がりを聞いていると、ここが見せ場の場面なのだと自然に観客を引き込むことができる。最後の逆髪がじゃあまたねって、あっさり帰るところに蝉丸がもう帰っちゃうの？と嘆くところとか、囃子が盛り上げるのかと思ったらそうでもなかった。途中のどこかの場面が一番盛り上がりを演出していた。&lt;/p>
&lt;p>予習してこんな物語の展開になるのかな？と予想していたものと、実際の能をみているとイメージ通りではなかった。それは地謡の謡いの合間が私の頭の中には入っていなかったから。次に「能のことばを読んでみる会」へ行くと地謡のところがこんな雰囲気なのかとイメージできるようになる。いずれにしても、詞章と能の関係における解像度は少し上がったように思う。まだまだ能をみていて幻視をみるというのはほど遠い。こうやって少しずつ解像度を上げていければと思う。&lt;/p></content></item><item><title>起業相談が再び</title><link>/diary/posts/2023/0124/</link><pubDate>Tue, 24 Jan 2023 08:53:31 +0900</pubDate><guid>/diary/posts/2023/0124/</guid><description>1時に寝て8時に起きた。寝坊して朝起きれないものの、わりかしよく眠れるようになってきた。
sveltekit の ui からのリクエスト +page.svelte のスクリプトで onMount() を定義すると bff へ http リクエストを fetch できる。
&amp;lt;script lang=&amp;#34;ts&amp;#34;&amp;gt; import type { User } from &amp;#39;$lib/types/users&amp;#39;; import { onMount } from &amp;#39;svelte&amp;#39;; let data: User[] = []; onMount(async () =&amp;gt; { const r = await fetch(&amp;#39;/api/users&amp;#39;); if (r.ok) { data = await r.json(); } }); &amp;lt;/script&amp;gt; bff 側では web api を提供する必要がある。それは +server.ts を定義することで実装できる。内部的にはバックエンドの web api を呼び出して、それを返すだけの実装になる。こういった連携も sveltekit だと簡単に実装できる。前のお仕事は bff も java で作っていたけど、bff なら node.</description><content>&lt;p>1時に寝て8時に起きた。寝坊して朝起きれないものの、わりかしよく眠れるようになってきた。&lt;/p>
&lt;h2 id="sveltekit-の-ui-からのリクエスト">sveltekit の ui からのリクエスト&lt;/h2>
&lt;p>&lt;a href="https://kit.svelte.dev/docs/routing#page-page-svelte">+page.svelte&lt;/a> のスクリプトで &lt;code>onMount()&lt;/code> を定義すると bff へ http リクエストを fetch できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ts&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span> { &lt;span style="color:#a6e22e">User&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;$lib/types/users&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">onMount&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;svelte&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span>: &lt;span style="color:#66d9ef">User&lt;/span>[] &lt;span style="color:#f92672">=&lt;/span> [];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">onMount&lt;/span>(&lt;span style="color:#66d9ef">async&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/api/users&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">ok&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">json&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>bff 側では web api を提供する必要がある。それは &lt;a href="https://kit.svelte.dev/docs/routing#server">+server.ts&lt;/a> を定義することで実装できる。内部的にはバックエンドの web api を呼び出して、それを返すだけの実装になる。こういった連携も sveltekit だと簡単に実装できる。前のお仕事は bff も java で作っていたけど、bff なら node.js でいいんじゃないかと思うぐらいにはフロントエンドの技術に慣れてきた自分がいる。&lt;/p>
&lt;h2 id="起業相談">起業相談&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0120/#起業相談">少し前にも起業相談&lt;/a> に乗ったが、まったく別の人で12月に起業された方が三ノ宮.dev のコミュニティに入られて起業相談にのってほしいというので行ってきた。個人でもわりと有名な方らしく、ある2つのキーワードでググるとトップに出てくる。スタートアップを目指している方で、できるだけ多くのお金を資金調達して作りたいものを開発したいという話し。いまは金融緩和から緊縮に向かう状況なのでベンチャー資金も渋い状況ではないかと推測する。そんな中で cto をどうやって探せばよいかという質問が大きな話題だった。資金調達する上でもちゃんとした cto がいる方が融資する側からみても印象が違うという。それはそうかなとも思う。&lt;/p>
&lt;p>一方で cto を探すのは相当に難しいという話しを私からした。基本的には過去に一緒に働いた人でスキルのある人や同じ意思をもっている知人や友だちに依頼するのがよいだろうと。それも難しい話しだけど、cto 募集なんかでよい人がみつかる確率は低いし、ましては ceo が技術に明るくないのであれば応募してくる求職者のスキルや知識を評価するのも難しい。他のコミュニティメンバーも同意見で、最初は cto を雇わず、普通にテックリードになれる開発者を雇って、プロダクトを開発して実績を作って資金調達した後に再度 cto を探してはどうか？と提案した。&lt;/p>
&lt;p>あと資金調達は実績がないと難しいから、最初はすぐにお金を稼げるプロダクト開発をして、それで十分な収益をあげ、その実績から資金調達するのはどうかといった計画の話しをしていて、それはもっと難しそうだと私からは感じた。お金のためだけにやりたくもないプロダクト開発を1-2年やって、その後に本当にやりたいプロダクト開発を資金調達してからやる。それぞれのプロダクトはまったく関係がなく、組織も2つになるという。そんなやり方で成功したスタートアップを私は聞いたことがない。組織の難しさをあまりにも軽視していて無謀だとアドバイスした。&lt;/p>
&lt;p>私も起業して早3年が経った。マイクロ法人だから簡単でしょと言われたらそれまでなんだけど、起業相談を依頼されるケースも増えてきた。これはこれで顧問やコンサル業ができるのではないかと少し皮算用していたりする。&lt;/p></content></item><item><title>今日は打ち合わせの多い日だった</title><link>/diary/posts/2023/0120/</link><pubDate>Fri, 20 Jan 2023 08:34:26 +0900</pubDate><guid>/diary/posts/2023/0120/</guid><description>1時に寝て2時、3時、6時と起きて7時に起きた。久しぶりに胃酸が逆流して気分悪かった。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。sveltekit アプリで使う ui フレームワークの相談をして、昨日の課題管理の雑談内容 からさらに考察を深めた。私の中では知っていたことだったはずなのに、いつの間にか、そのことを軽視してしまっていることを再認識したような発見だった。
コミュ障の私にとってはペアワークという概念がすっぽり抜けていたことは昨日書いた通りだが、それでもいまマネージャーとしてそれなりにコードレビューやインフラタスクに時間を割いている。プロジェクトマネジメントだけをやっているわけではない。それは自分が遊撃として開発者のメンバーを手伝っていることに相当するなと気付いて、そう言えば、過去に五月雨式にだらだらと遅れるようなプロジェクトでは、他のメンバーのタスクが遅れることを横からみているだけしかやってなかったような気がした。もし私が自分のタスクを投げ出して遅れている課題に介入したらどうなっただろうか？と思考実験するだけの余地はあった。
もう1つ。盛り上がった話しにおっさんはエモい話しをしにくいと私が考えていると伝えた。なぜなら、私の経験則ではエモい話しをするおっさんは総じてスキルをもっていなかった。具体的な知識やプラクティスを話すときはエモい話にならないからだ。その発言に対して、はらさんからはこんなコメントが返ってきた。おっさんもスキルはあるのだけど、そのスキルが時代にあわなくなって古くなってしまった。現場の技術とあわないスキルは、現場の人間からみるとスキルがない人と同じである。少し前に40歳の壁という本を読んだが、そのノリで言うと、40歳になるとスキルが現場に通じなくなる。
いまマネージャーをしていて気付かないうちに遊撃というポジションをこなしているのではないかと思うようになってきた。原則として実務をやらず、プロジェクトマネジメントをしている。とはいえ、コードレビューには2-3日／週ぐらいの工数を割いてきた。
&amp;mdash; Tetsuya Morimoto (@t2y) January 21, 2023 sveltekit アプリのデプロイ 昨日の続き。Building your app によると、sveltekit のビルドは vite と adapter の2段階で行われる。gitlab ci/cd で node.js 向けにビルドして、それを docker イメージに同梱して、コンテナレジストリに登録する。あとはテスト環境で構築している docker compose に組み込むだけ。今日中にできたらいいなと思って、ぎりぎりだったけど、テスト環境で node.js 上にデプロイしたアプリと疎通できるところまでできた。ssr を介して web api サーバーと疎通できるところまで整備した。ここから先はメンバーに管理画面を作っていってもらう。メンバーの開発着手前にデプロイが一通りできているという気持ちよさ。
起業相談 過去に働いていた会社の、私と同い年の元同僚が起業するというので相談にのることに。私が会社を作ってなんとかやっているのをみて関心が出てきたという。いきなり会社を辞めると不安だから副業から始めて、本業の収入を上回るようになったから個人事業主から法人化しようと考えているらしい。実際に会社を辞めるかどうかはまだこれから検討するのかな？本業をやりながら最大4つか5つの副業をまわしてたというから驚き。そんなこと物理的に可能なの？と思ったら開発は人を雇ってマネジメントだけやったりしていたらしい。おそらく4人ぐらい開発者を雇っているという雰囲気だったけど、それでも本業をやりながら4つもマネジメントをするのは相当に大変だと思う。十分にその同僚の能力を認めているつもりだったけれど、それ以上の忍耐や集中力をもっていて、もしかしたら過小評価していたのかもしれない。1つの会社内でも3つ以上プロジェクトを兼任して成果を出しているマネージャーなんか私は見たことない。それを本業と副業と寄せ集めの開発者で実現しているのは類稀な能力だと思う。本人も睡眠時間削って働いてやり過ぎたとは言っていたが。法人登記、税金、節税、働き方とか、ざっくばらんに私が起業してやってきた3年間のお話しをした。なにかしら役に立って活躍されるといいな。</description><content>&lt;p>1時に寝て2時、3時、6時と起きて7時に起きた。久しぶりに胃酸が逆流して気分悪かった。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。sveltekit アプリで使う ui フレームワークの相談をして、&lt;a href="/diary/diary/posts/2023/0119/#課題管理の雑談">昨日の課題管理の雑談内容&lt;/a> からさらに考察を深めた。私の中では知っていたことだったはずなのに、いつの間にか、そのことを軽視してしまっていることを再認識したような発見だった。&lt;/p>
&lt;p>コミュ障の私にとってはペアワークという概念がすっぽり抜けていたことは昨日書いた通りだが、それでもいまマネージャーとしてそれなりにコードレビューやインフラタスクに時間を割いている。プロジェクトマネジメントだけをやっているわけではない。それは自分が遊撃として開発者のメンバーを手伝っていることに相当するなと気付いて、そう言えば、過去に五月雨式にだらだらと遅れるようなプロジェクトでは、他のメンバーのタスクが遅れることを横からみているだけしかやってなかったような気がした。もし私が自分のタスクを投げ出して遅れている課題に介入したらどうなっただろうか？と思考実験するだけの余地はあった。&lt;/p>
&lt;p>もう1つ。盛り上がった話しにおっさんはエモい話しをしにくいと私が考えていると伝えた。なぜなら、私の経験則ではエモい話しをするおっさんは総じてスキルをもっていなかった。具体的な知識やプラクティスを話すときはエモい話にならないからだ。その発言に対して、はらさんからはこんなコメントが返ってきた。おっさんもスキルはあるのだけど、そのスキルが時代にあわなくなって古くなってしまった。現場の技術とあわないスキルは、現場の人間からみるとスキルがない人と同じである。少し前に40歳の壁という本を読んだが、そのノリで言うと、40歳になるとスキルが現場に通じなくなる。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">いまマネージャーをしていて気付かないうちに遊撃というポジションをこなしているのではないかと思うようになってきた。原則として実務をやらず、プロジェクトマネジメントをしている。とはいえ、コードレビューには2-3日／週ぐらいの工数を割いてきた。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1616767644002291712?ref_src=twsrc%5Etfw">January 21, 2023&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="sveltekit-アプリのデプロイ">sveltekit アプリのデプロイ&lt;/h2>
&lt;p>昨日の続き。&lt;a href="https://kit.svelte.dev/docs/building-your-app">Building your app&lt;/a> によると、sveltekit のビルドは vite と adapter の2段階で行われる。gitlab ci/cd で node.js 向けにビルドして、それを docker イメージに同梱して、コンテナレジストリに登録する。あとはテスト環境で構築している docker compose に組み込むだけ。今日中にできたらいいなと思って、ぎりぎりだったけど、テスト環境で node.js 上にデプロイしたアプリと疎通できるところまでできた。ssr を介して web api サーバーと疎通できるところまで整備した。ここから先はメンバーに管理画面を作っていってもらう。メンバーの開発着手前にデプロイが一通りできているという気持ちよさ。&lt;/p>
&lt;h2 id="起業相談">起業相談&lt;/h2>
&lt;p>過去に働いていた会社の、私と同い年の元同僚が起業するというので相談にのることに。私が会社を作ってなんとかやっているのをみて関心が出てきたという。いきなり会社を辞めると不安だから副業から始めて、本業の収入を上回るようになったから個人事業主から法人化しようと考えているらしい。実際に会社を辞めるかどうかはまだこれから検討するのかな？本業をやりながら最大4つか5つの副業をまわしてたというから驚き。そんなこと物理的に可能なの？と思ったら開発は人を雇ってマネジメントだけやったりしていたらしい。おそらく4人ぐらい開発者を雇っているという雰囲気だったけど、それでも本業をやりながら4つもマネジメントをするのは相当に大変だと思う。十分にその同僚の能力を認めているつもりだったけれど、それ以上の忍耐や集中力をもっていて、もしかしたら過小評価していたのかもしれない。1つの会社内でも3つ以上プロジェクトを兼任して成果を出しているマネージャーなんか私は見たことない。それを本業と副業と寄せ集めの開発者で実現しているのは類稀な能力だと思う。本人も睡眠時間削って働いてやり過ぎたとは言っていたが。法人登記、税金、節税、働き方とか、ざっくばらんに私が起業してやってきた3年間のお話しをした。なにかしら役に立って活躍されるといいな。&lt;/p></content></item><item><title>sveltekit の ssr を理解した</title><link>/diary/posts/2023/0119/</link><pubDate>Thu, 19 Jan 2023 08:37:07 +0900</pubDate><guid>/diary/posts/2023/0119/</guid><description>2時に寝て7時に起きた。キングダムの新刊を読みながら寝てた。
sveltekit の初期プロジェクト 技術選定で svelte を採用した ので昨日から SvelteKit でアプリケーション開発に着手した。Project structure にもだいぶ慣れてきた。開発初期はディレクトリ構成に迷うのでドキュメントに標準的な階層構造を書いてくれているのは素晴らしい。Routing もキモいけど、ssr の場合は +page.svelte と +page.server.ts を設けるのに慣れてきた。ssr で proxy 的に web api 呼び出しも簡単に実装した。知らないフレームワークで開発するのは学ぶところが多くて楽しい。区切りのよいところで初期開発の issue はクローズして明日は gitlab ci/cd でテスト環境にデプロイするのをやってみる。
課題管理の雑談 過去に働いていた会社の同僚と課題管理について雑談した。web3 系の会社で働いているのでブロックチェーンや dao 周りの話しも一緒にしたりしていた。一回りぐらい私より若いと思うけれど、私よりはるかに優秀な開発者だなぁと感じながら話しを聞いていた。いま一緒に働いても足手まといになるんじゃないかと思えて身が引き締まる。いくつか話題の中で学んだことを抜き出してみる。
自分の知識やスキルを共有する手段の1つとしてペアワークをやる ペアワークを通してメンバーとの信頼関係も構築していく いまもっている知識やスキルには個人差はあるが、模倣の能力が低い人をみたことがない 上位の意思決定者から低いレベルにあわせる (標準化など) ように指示がきたときは反発する ユーザーファーストが第一ならレベルを下げるような指示はおかしい 「誰を向いて仕事しているの？」と説得する プロジェクトにおいて目的を明確化せずに始めてしまうのは本当によくない 日本人は上意下達で行動するように教育されてきた弊害ではないか 目的を明確化するのは意見を言うことと同じである レイヤーが上がるほどエモい話しになって人生観や哲学の話しになっていく チームのモチベーションを維持する上でも有効ではないか 私はコミュ障だから他人と一緒に作業しようという発想がそもそもなかった。こちらから一緒にやろうと声をかけて知識やスキルを共有する手段もあるのかと気付いた。これまでも何人もの人にいろんな話しを伺っている。他人のノウハウを聞くだけでもこの雑談をすることに意味はあると思えた。</description><content>&lt;p>2時に寝て7時に起きた。キングダムの新刊を読みながら寝てた。&lt;/p>
&lt;h2 id="sveltekit-の初期プロジェクト">sveltekit の初期プロジェクト&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0117/#svelte-アプリの開発に着手">技術選定で svelte を採用した&lt;/a> ので昨日から &lt;a href="https://kit.svelte.dev/">SvelteKit&lt;/a> でアプリケーション開発に着手した。&lt;a href="https://kit.svelte.dev/docs/project-structure">Project structure&lt;/a> にもだいぶ慣れてきた。開発初期はディレクトリ構成に迷うのでドキュメントに標準的な階層構造を書いてくれているのは素晴らしい。&lt;a href="https://kit.svelte.dev/docs/routing">Routing&lt;/a> もキモいけど、ssr の場合は &lt;code>+page.svelte&lt;/code> と &lt;code>+page.server.ts&lt;/code> を設けるのに慣れてきた。ssr で proxy 的に web api 呼び出しも簡単に実装した。知らないフレームワークで開発するのは学ぶところが多くて楽しい。区切りのよいところで初期開発の issue はクローズして明日は gitlab ci/cd でテスト環境にデプロイするのをやってみる。&lt;/p>
&lt;h2 id="課題管理の雑談">課題管理の雑談&lt;/h2>
&lt;p>過去に働いていた会社の同僚と課題管理について雑談した。web3 系の会社で働いているのでブロックチェーンや dao 周りの話しも一緒にしたりしていた。一回りぐらい私より若いと思うけれど、私よりはるかに優秀な開発者だなぁと感じながら話しを聞いていた。いま一緒に働いても足手まといになるんじゃないかと思えて身が引き締まる。いくつか話題の中で学んだことを抜き出してみる。&lt;/p>
&lt;ul>
&lt;li>自分の知識やスキルを共有する手段の1つとしてペアワークをやる
&lt;ul>
&lt;li>ペアワークを通してメンバーとの信頼関係も構築していく&lt;/li>
&lt;li>いまもっている知識やスキルには個人差はあるが、模倣の能力が低い人をみたことがない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>上位の意思決定者から低いレベルにあわせる (標準化など) ように指示がきたときは反発する
&lt;ul>
&lt;li>ユーザーファーストが第一ならレベルを下げるような指示はおかしい&lt;/li>
&lt;li>「誰を向いて仕事しているの？」と説得する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>プロジェクトにおいて目的を明確化せずに始めてしまうのは本当によくない
&lt;ul>
&lt;li>日本人は上意下達で行動するように教育されてきた弊害ではないか&lt;/li>
&lt;li>目的を明確化するのは意見を言うことと同じである
&lt;ul>
&lt;li>レイヤーが上がるほどエモい話しになって人生観や哲学の話しになっていく&lt;/li>
&lt;li>チームのモチベーションを維持する上でも有効ではないか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>私はコミュ障だから他人と一緒に作業しようという発想がそもそもなかった。こちらから一緒にやろうと声をかけて知識やスキルを共有する手段もあるのかと気付いた。これまでも何人もの人にいろんな話しを伺っている。他人のノウハウを聞くだけでもこの雑談をすることに意味はあると思えた。&lt;/p></content></item><item><title>svelte とはリアクティブな ui のための言語</title><link>/diary/posts/2023/0111/</link><pubDate>Wed, 11 Jan 2023 08:05:05 +0900</pubDate><guid>/diary/posts/2023/0111/</guid><description>2時半に寝て7時に起きた。なんか意味なく夜更かししたもののよく眠れた。
svelte 調査 年末から svelte のチュートリアル を始めたものの、葬儀と年末年始休暇で間があいてしまった。年始やもくもく会でも少しずつやっていたものの、今日で終わらせようと最後の方は少し端折りつつチュートリアルを終わらせた。svelete と sveltekit の2つのチュートリアルをやっていて時間がかかった。svelte のシングルファイルコンポーネント (SFC) は vue.js とよく似ている。スクリプトやテンプレートの構文が違う程度の印象。vue.js よりもスクリプトやテンプレートの記述がシンプルな分、やはり簡単に思える。svelte の作者である rich harris 氏が書いたメモに次がある。
Rich-Harris/what-is-svelte.md 大雑把にまとめると次のようなことが書いてある。
svelte を ui フレームワークとして開発してきて、svelte 3 で svelte は言語だと気づいた。リアクティブな ui を記述するための言語であると。これまでそういった取り組みをしてきたプロジェクトはいくつかあるが、どれもコンパイラ以上の専用ツールが必要になってしまい、すべてを制御する必要があって、ライブラリの段階的な採用などもできないために大掛かりには導入されなかった。
html, css, js という多くの開発者が蓄積された経験をもっていて、小規模に段階的に導入するには、それらの言語をハックして拡張するのがパフォーマンスもよく、もっとも優れた解決策であると考えるに至った。
実際に svelte のチュートリアルをやってみると、その簡潔さから rich harris 氏の言葉も理解できる。開発者によっては svelte コンパイラが拡張している javascript の構文や機能を受け入れられない人もいるだろう。純粋な javascript を書きたい人には向かないライブラリかもしれない。そこがリアクティブな ui をコンパイラレベルで実現するためのトレードオフと言える。だから svelte は javascript のハックも含めての言語なのだという解釈になる。</description><content>&lt;p>2時半に寝て7時に起きた。なんか意味なく夜更かししたもののよく眠れた。&lt;/p>
&lt;h2 id="svelte-調査">svelte 調査&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/1223/">年末から svelte のチュートリアル&lt;/a> を始めたものの、葬儀と年末年始休暇で間があいてしまった。年始やもくもく会でも少しずつやっていたものの、今日で終わらせようと最後の方は少し端折りつつチュートリアルを終わらせた。svelete と sveltekit の2つのチュートリアルをやっていて時間がかかった。svelte のシングルファイルコンポーネント (SFC) は vue.js とよく似ている。スクリプトやテンプレートの構文が違う程度の印象。vue.js よりもスクリプトやテンプレートの記述がシンプルな分、やはり簡単に思える。svelte の作者である rich harris 氏が書いたメモに次がある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/Rich-Harris/0f910048478c2a6505d1c32185b61934">Rich-Harris/what-is-svelte.md&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>大雑把にまとめると次のようなことが書いてある。&lt;/p>
&lt;blockquote>
&lt;p>svelte を ui フレームワークとして開発してきて、svelte 3 で svelte は言語だと気づいた。リアクティブな ui を記述するための言語であると。これまでそういった取り組みをしてきたプロジェクトはいくつかあるが、どれもコンパイラ以上の専用ツールが必要になってしまい、すべてを制御する必要があって、ライブラリの段階的な採用などもできないために大掛かりには導入されなかった。&lt;/p>
&lt;p>html, css, js という多くの開発者が蓄積された経験をもっていて、小規模に段階的に導入するには、それらの言語をハックして拡張するのがパフォーマンスもよく、もっとも優れた解決策であると考えるに至った。&lt;/p>
&lt;/blockquote>
&lt;p>実際に svelte のチュートリアルをやってみると、その簡潔さから rich harris 氏の言葉も理解できる。開発者によっては svelte コンパイラが拡張している javascript の構文や機能を受け入れられない人もいるだろう。純粋な javascript を書きたい人には向かないライブラリかもしれない。そこがリアクティブな ui をコンパイラレベルで実現するためのトレードオフと言える。だから svelte は javascript のハックも含めての言語なのだという解釈になる。&lt;/p></content></item><item><title>svelte のチュートリアルで学ぶ</title><link>/diary/posts/2022/1223/</link><pubDate>Fri, 23 Dec 2022 14:25:19 +0900</pubDate><guid>/diary/posts/2022/1223/</guid><description>22時頃から寝てたものの、また2時頃に吐き気で苦しんで何度か起きて7時過ぎに起きた。なかなか体調が悪い。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今週はてんやわんやで議題を整理する余裕すらなかったので近況を軽く共有した。
フロントエンドの技術選定の状況 next.js と svelte kit の違いとか オンラインイベントで話した課題管理の話題 課題管理を it 業界や開発プロジェクトだけでなく、もっと様々な分野や業界で応用できるようにしたい。最初は私がノウハウをもっている業界や業務のみに特化したものになるだろうけど、いずれはスコープを拡げていきたい。その先に 地域おこし協力隊 のようなところにいって社会貢献ができればおもしろいのではないかといった話しをした。地域おこし協力隊の内容はおもしろそうだけど、1人あたりの経費の上限が480万円に設定されていて、ググって調べると余裕のない自治体では満額支給されていないケースもあるみたい。行政がやらないといけない業務をアウトソーシングする予算が低過ぎて、適切な実績やスキルをもった人が経済的に参加しにくい状況にある。採用の目利きができないから単価を低くして失敗を許容しやすくなっているようにもみえる。行政の予算が低い問題は専門家が入って採用も含めて改善していく必要がある。
svelte 入門 昨日の続きで svelte のチュートリアル を始めた。このチュートリアルはファイル操作とオンラインエディタもついていて、ソースコードを変更するとすぐビルドされて結果も確認できる。フロントエンドのチュートリアル自体がフロントエンド技術のデモになっている。よく作られているよなと感心しながら取り組んでいる。svelte でスクリプトを書くときの、マジックコード的な変な構文がある。simple is not easy の文脈で言うところの easy であり、私のような simple 派からみるとやや気持ち悪い。わりと分量があるので途中にコードレビューや勉強会の講師をやっていたら1日では終わらなかった。
let count = 0; $: doubled = count * 2; &amp;lt;script&amp;gt; export let answer; &amp;lt;/script&amp;gt;</description><content>&lt;p>22時頃から寝てたものの、また2時頃に吐き気で苦しんで何度か起きて7時過ぎに起きた。なかなか体調が悪い。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今週はてんやわんやで議題を整理する余裕すらなかったので近況を軽く共有した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="/diary/diary/posts/2022/1214/">フロントエンドの技術選定の状況&lt;/a>
&lt;ul>
&lt;li>next.js と svelte kit の違いとか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2022/1221/">オンラインイベントで話した課題管理の話題&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>課題管理を it 業界や開発プロジェクトだけでなく、もっと様々な分野や業界で応用できるようにしたい。最初は私がノウハウをもっている業界や業務のみに特化したものになるだろうけど、いずれはスコープを拡げていきたい。その先に &lt;a href="https://www.soumu.go.jp/main_sosiki/jichi_gyousei/c-gyousei/02gyosei08_03000066.html">地域おこし協力隊&lt;/a> のようなところにいって社会貢献ができればおもしろいのではないかといった話しをした。地域おこし協力隊の内容はおもしろそうだけど、1人あたりの経費の上限が480万円に設定されていて、ググって調べると余裕のない自治体では満額支給されていないケースもあるみたい。行政がやらないといけない業務をアウトソーシングする予算が低過ぎて、適切な実績やスキルをもった人が経済的に参加しにくい状況にある。採用の目利きができないから単価を低くして失敗を許容しやすくなっているようにもみえる。行政の予算が低い問題は専門家が入って採用も含めて改善していく必要がある。&lt;/p>
&lt;h2 id="svelte-入門">svelte 入門&lt;/h2>
&lt;p>昨日の続きで &lt;a href="https://learn.svelte.dev/tutorial/welcome-to-svelte">svelte のチュートリアル&lt;/a> を始めた。このチュートリアルはファイル操作とオンラインエディタもついていて、ソースコードを変更するとすぐビルドされて結果も確認できる。フロントエンドのチュートリアル自体がフロントエンド技術のデモになっている。よく作られているよなと感心しながら取り組んでいる。svelte でスクリプトを書くときの、マジックコード的な変な構文がある。&lt;a href="https://ohbarye.hatenablog.jp/entry/2017/11/30/012726">simple is not easy&lt;/a> の文脈で言うところの &lt;em>easy&lt;/em> であり、私のような &lt;em>simple&lt;/em> 派からみるとやや気持ち悪い。わりと分量があるので途中にコードレビューや勉強会の講師をやっていたら1日では終わらなかった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">doubled&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">answer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>フロントエンドの技術選定</title><link>/diary/posts/2022/1105/</link><pubDate>Sat, 05 Nov 2022 20:54:58 +0900</pubDate><guid>/diary/posts/2022/1105/</guid><description>24時に BOOK AND BED TOKYO にチェックインして雑多なことして25時過ぎには寝て8時過ぎに起きてチェックアウトした。それから新幹線に乗って神戸まで戻ってきた。東京・品川から新神戸間は、往路は EX早特21ワイド だと12,630円で、復路は自由席で14,420円だった。私の中で時間の制約はストレスやエネルギーを使う。帰りは時間に縛られたくないという思いで新幹線の駅に着いてから自由席を買うようにしている。一方で2千円近い差額も大きいので次回以降は帰りの新幹線もEX早特21ワイドで取ることにした。
フロントエンドの調査 昼過ぎに家に戻ってきて洗濯や片付けしたら疲れてまた寝てた。晩ご飯食べて21時ぐらいからオフィスで作業してた。猫みたいな生活。オフィスからお手伝い先のネットワーク接続の設定をやったりしながらフロントエンドのコードを読んでみた。これは作り直した方がよいだろうと私の中で決意して、どういった技術で作り直すかの技術選定のための調査を開始した。既存のフロントエンド開発の背景や経緯を知らないのでまだ確定ではない。提案の準備のために調査をしておく。
ここ最近 svelte の人気があるのをみかける。1年ほど前に三ノ宮.devで教えてもらってチュートリアルをやってみて、そのときは特にどうとも思わなくて、こんなやり方もあるんやな程度にみていた。その後 vue.js (nuxtjs) での開発を半年間ほど経験して、思いの外、私にとって vue.js がよいものにはみえなかった。react よりも簡単と聞いていたけど、私にとってはあまりそうは思えなかった。vue.js は vue.js なりの難しさ (学習コスト) があるように感じられた。管理画面のような小規模な用途に react や vue.js のようなリッチなライブラリ・フレームワークを使わなくてよい方法があるかを考えたときに svelte を思い出した。svelte の実際のアプリケーションのサンプルコードとして次のコードを読んでいた。
svelte realworld example vue.js の single-file components は svelte の前身である ractive.js のコンポーネント の概念に影響を受けているという。従って、svelte のコンポーネント開発は vue.js と考え方が近いものの、dom 操作は svelte のコンパイル時にコード生成するので仮想 dom は使わない。これがパフォーマンス上の大きなメリットと言われている。react や vue.js よりもずっと軽量なコンパイラ・フレームワークと言える。次のページに複数のフロントエンドの技術の流行をまとめている。svelte はこの2年ぐらいで人気が急上昇していることがわかる。
Front-end frameworks popularity (React, Vue, Angular and Svelte) また react と vue.js の現状もちゃんと把握しようと調べていて次の記事がおもしろかった。
[Twitter] React ユーザーが Vue を選ばない理由 vue.</description><content>&lt;p>24時に BOOK AND BED TOKYO にチェックインして雑多なことして25時過ぎには寝て8時過ぎに起きてチェックアウトした。それから新幹線に乗って神戸まで戻ってきた。東京・品川から新神戸間は、往路は &lt;a href="/diary/diary/posts/2022/1031/#東京出張">EX早特21ワイド&lt;/a> だと12,630円で、復路は自由席で14,420円だった。私の中で時間の制約はストレスやエネルギーを使う。帰りは時間に縛られたくないという思いで新幹線の駅に着いてから自由席を買うようにしている。一方で2千円近い差額も大きいので次回以降は帰りの新幹線もEX早特21ワイドで取ることにした。&lt;/p>
&lt;h2 id="フロントエンドの調査">フロントエンドの調査&lt;/h2>
&lt;p>昼過ぎに家に戻ってきて洗濯や片付けしたら疲れてまた寝てた。晩ご飯食べて21時ぐらいからオフィスで作業してた。猫みたいな生活。オフィスからお手伝い先のネットワーク接続の設定をやったりしながらフロントエンドのコードを読んでみた。これは作り直した方がよいだろうと私の中で決意して、どういった技術で作り直すかの技術選定のための調査を開始した。既存のフロントエンド開発の背景や経緯を知らないのでまだ確定ではない。提案の準備のために調査をしておく。&lt;/p>
&lt;p>ここ最近 &lt;a href="https://svelte.dev/">svelte&lt;/a> の人気があるのをみかける。1年ほど前に三ノ宮.devで教えてもらってチュートリアルをやってみて、そのときは特にどうとも思わなくて、こんなやり方もあるんやな程度にみていた。その後 vue.js (nuxtjs) での開発を半年間ほど経験して、思いの外、私にとって vue.js がよいものにはみえなかった。react よりも簡単と聞いていたけど、私にとってはあまりそうは思えなかった。vue.js は vue.js なりの難しさ (学習コスト) があるように感じられた。管理画面のような小規模な用途に react や vue.js のようなリッチなライブラリ・フレームワークを使わなくてよい方法があるかを考えたときに svelte を思い出した。svelte の実際のアプリケーションのサンプルコードとして次のコードを読んでいた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/sveltejs/realworld">svelte realworld example&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>vue.js の single-file components は svelte の前身である &lt;a href="https://github.com/ractivejs/component-spec">ractive.js のコンポーネント&lt;/a> の概念に影響を受けているという。従って、svelte のコンポーネント開発は vue.js と考え方が近いものの、dom 操作は svelte のコンパイル時にコード生成するので仮想 dom は使わない。これがパフォーマンス上の大きなメリットと言われている。react や vue.js よりもずっと軽量なコンパイラ・フレームワークと言える。次のページに複数のフロントエンドの技術の流行をまとめている。svelte はこの2年ぐらいで人気が急上昇していることがわかる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/tkrotoff/b1caa4c3a185629299ec234d2314e190">Front-end frameworks popularity (React, Vue, Angular and Svelte)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>また react と vue.js の現状もちゃんと把握しようと調べていて次の記事がおもしろかった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zenn.dev/sa2knight/articles/why_react_folks_dont_choose_vue">[Twitter] React ユーザーが Vue を選ばない理由&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>vue.js は vue3 で react になろうとしていて、その過程の過渡期には様々な問題を抱えているように私からはみえた。&lt;/p>
&lt;ul>
&lt;li>vue2 と vue3 は互換性がない&lt;/li>
&lt;li>vue3 移行へのエコシステムの本気度がみえない&lt;/li>
&lt;li>vue2 の開発者が本当に vue3 を求めているのか懐疑的&lt;/li>
&lt;li>シェアだけみたら vue.js よりも react の方が高い&lt;/li>
&lt;/ul></content></item></channel></rss>