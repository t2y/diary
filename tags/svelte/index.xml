<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>svelte on forest nook</title><link>/diary/tags/svelte/</link><description>Recent content in svelte on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Fri, 20 Jan 2023 08:34:26 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/svelte/index.xml" rel="self" type="application/rss+xml"/><item><title>今日は打ち合わせの多い日だった</title><link>/diary/posts/2023/0120/</link><pubDate>Fri, 20 Jan 2023 08:34:26 +0900</pubDate><guid>/diary/posts/2023/0120/</guid><description>1時に寝て2時、3時、6時と起きて7時に起きた。久しぶりに胃酸が逆流して気分悪かった。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。sveltekit アプリで使う ui フレームワークの相談をして、昨日の課題管理の雑談内容 からさらに考察を深めた。私の中では知っていたことだったはずなのに、いつの間にか、そのことを軽視してしまっていることを再認識したような発見だった。
コミュ障の私にとってはペアワークという概念がすっぽり抜けていたことは昨日書いた通りだが、それでもいまマネージャーとしてそれなりにコードレビューやインフラタスクに時間を割いている。プロジェクトマネジメントだけをやっているわけではない。それは自分が遊撃として開発者のメンバーを手伝っていることに相当するなと気付いて、そう言えば、過去に五月雨式にだらだらと遅れるようなプロジェクトでは、他のメンバーのタスクが遅れることを横からみているだけしかやってなかったような気がした。もし私が自分のタスクを投げ出して遅れている課題に介入したらどうなっただろうか？と思考実験するだけの余地はあった。
もう1つ。盛り上がった話しにおっさんはエモい話しをしにくいと私が考えていると伝えた。なぜなら、私の経験則ではエモい話しをするおっさんは総じてスキルをもっていなかった。具体的な知識やプラクティスを話すときはエモい話にならないからだ。その発言に対して、はらさんからはこんなコメントが返ってきた。おっさんもスキルはあるのだけど、そのスキルが時代にあわなくなって古くなってしまった。現場の技術とあわないスキルは、現場の人間からみるとスキルがない人と同じである。少し前に40歳の壁という本を読んだが、そのノリで言うと、40歳になるとスキルが現場に通じなくなる。
いまマネージャーをしていて気付かないうちに遊撃というポジションをこなしているのではないかと思うようになってきた。原則として実務をやらず、プロジェクトマネジメントをしている。とはいえ、コードレビューには2-3日／週ぐらいの工数を割いてきた。
&amp;mdash; Tetsuya Morimoto (@t2y) January 21, 2023 sveltekit アプリのデプロイ 昨日の続き。Building your app によると、sveltekit のビルドは vite と adapter の2段階で行われる。gitlab ci/cd で node.js 向けにビルドして、それを docker イメージに同梱して、コンテナレジストリに登録する。あとはテスト環境で構築している docker compose に組み込むだけ。今日中にできたらいいなと思って、ぎりぎりだったけど、テスト環境で node.js 上にデプロイしたアプリと疎通できるところまでできた。ssr を介して web api サーバーと疎通できるところまで整備した。ここから先はメンバーに管理画面を作っていってもらう。メンバーの開発着手前にデプロイが一通りできているという気持ちよさ。
起業相談 過去に働いていた会社の、私と同い年の元同僚が起業するというので相談にのることに。私が会社を作ってなんとかやっているのをみて関心が出てきたという。いきなり会社を辞めると不安だから副業から始めて、本業の収入を上回るようになったから個人事業主から法人化しようと考えているらしい。実際に会社を辞めるかどうかはまだこれから検討するのかな？本業をやりながら最大4つか5つの副業をまわしてたというから驚き。そんなこと物理的に可能なの？と思ったら開発は人を雇ってマネジメントだけやったりしていたらしい。おそらく4人ぐらい開発者を雇っているという雰囲気だったけど、それでも本業をやりながら4つもマネジメントをするのは相当に大変だと思う。十分にその同僚の能力を認めているつもりだったけれど、それ以上の忍耐や集中力をもっていて、もしかしたら過小評価していたのかもしれない。1つの会社内でも3つ以上プロジェクトを兼任して成果を出しているマネージャーなんか私は見たことない。それを本業と副業と寄せ集めの開発者で実現しているのは類稀な能力だと思う。本人も睡眠時間削って働いてやり過ぎたとは言っていたが。法人登記、税金、節税、働き方とか、ざっくばらんに私が起業してやってきた3年間のお話しをした。なにかしら役に立って活躍されるといいな。</description><content>&lt;p>1時に寝て2時、3時、6時と起きて7時に起きた。久しぶりに胃酸が逆流して気分悪かった。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。sveltekit アプリで使う ui フレームワークの相談をして、&lt;a href="/diary/diary/posts/2023/0119/#課題管理の雑談">昨日の課題管理の雑談内容&lt;/a> からさらに考察を深めた。私の中では知っていたことだったはずなのに、いつの間にか、そのことを軽視してしまっていることを再認識したような発見だった。&lt;/p>
&lt;p>コミュ障の私にとってはペアワークという概念がすっぽり抜けていたことは昨日書いた通りだが、それでもいまマネージャーとしてそれなりにコードレビューやインフラタスクに時間を割いている。プロジェクトマネジメントだけをやっているわけではない。それは自分が遊撃として開発者のメンバーを手伝っていることに相当するなと気付いて、そう言えば、過去に五月雨式にだらだらと遅れるようなプロジェクトでは、他のメンバーのタスクが遅れることを横からみているだけしかやってなかったような気がした。もし私が自分のタスクを投げ出して遅れている課題に介入したらどうなっただろうか？と思考実験するだけの余地はあった。&lt;/p>
&lt;p>もう1つ。盛り上がった話しにおっさんはエモい話しをしにくいと私が考えていると伝えた。なぜなら、私の経験則ではエモい話しをするおっさんは総じてスキルをもっていなかった。具体的な知識やプラクティスを話すときはエモい話にならないからだ。その発言に対して、はらさんからはこんなコメントが返ってきた。おっさんもスキルはあるのだけど、そのスキルが時代にあわなくなって古くなってしまった。現場の技術とあわないスキルは、現場の人間からみるとスキルがない人と同じである。少し前に40歳の壁という本を読んだが、そのノリで言うと、40歳になるとスキルが現場に通じなくなる。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">いまマネージャーをしていて気付かないうちに遊撃というポジションをこなしているのではないかと思うようになってきた。原則として実務をやらず、プロジェクトマネジメントをしている。とはいえ、コードレビューには2-3日／週ぐらいの工数を割いてきた。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1616767644002291712?ref_src=twsrc%5Etfw">January 21, 2023&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="sveltekit-アプリのデプロイ">sveltekit アプリのデプロイ&lt;/h2>
&lt;p>昨日の続き。&lt;a href="https://kit.svelte.dev/docs/building-your-app">Building your app&lt;/a> によると、sveltekit のビルドは vite と adapter の2段階で行われる。gitlab ci/cd で node.js 向けにビルドして、それを docker イメージに同梱して、コンテナレジストリに登録する。あとはテスト環境で構築している docker compose に組み込むだけ。今日中にできたらいいなと思って、ぎりぎりだったけど、テスト環境で node.js 上にデプロイしたアプリと疎通できるところまでできた。ssr を介して web api サーバーと疎通できるところまで整備した。ここから先はメンバーに管理画面を作っていってもらう。メンバーの開発着手前にデプロイが一通りできているという気持ちよさ。&lt;/p>
&lt;h2 id="起業相談">起業相談&lt;/h2>
&lt;p>過去に働いていた会社の、私と同い年の元同僚が起業するというので相談にのることに。私が会社を作ってなんとかやっているのをみて関心が出てきたという。いきなり会社を辞めると不安だから副業から始めて、本業の収入を上回るようになったから個人事業主から法人化しようと考えているらしい。実際に会社を辞めるかどうかはまだこれから検討するのかな？本業をやりながら最大4つか5つの副業をまわしてたというから驚き。そんなこと物理的に可能なの？と思ったら開発は人を雇ってマネジメントだけやったりしていたらしい。おそらく4人ぐらい開発者を雇っているという雰囲気だったけど、それでも本業をやりながら4つもマネジメントをするのは相当に大変だと思う。十分にその同僚の能力を認めているつもりだったけれど、それ以上の忍耐や集中力をもっていて、もしかしたら過小評価していたのかもしれない。1つの会社内でも3つ以上プロジェクトを兼任して成果を出しているマネージャーなんか私は見たことない。それを本業と副業と寄せ集めの開発者で実現しているのは類稀な能力だと思う。本人も睡眠時間削って働いてやり過ぎたとは言っていたが。法人登記、税金、節税、働き方とか、ざっくばらんに私が起業してやってきた3年間のお話しをした。なにかしら役に立って活躍されるといいな。&lt;/p></content></item><item><title>sveltekit の ssr を理解した</title><link>/diary/posts/2023/0119/</link><pubDate>Thu, 19 Jan 2023 08:37:07 +0900</pubDate><guid>/diary/posts/2023/0119/</guid><description>2時に寝て7時に起きた。キングダムの新刊を読みながら寝てた。
sveltekit の初期プロジェクト 技術選定で svelte を採用した ので昨日から SvelteKit でアプリケーション開発に着手した。Project structure にもだいぶ慣れてきた。開発初期はディレクトリ構成に迷うのでドキュメントに標準的な階層構造を書いてくれているのは素晴らしい。Routing もキモいけど、ssr の場合は +page.svelte と +page.server.ts を設けるのに慣れてきた。ssr で proxy 的に web api 呼び出しも簡単に実装した。知らないフレームワークで開発するのは学ぶところが多くて楽しい。区切りのよいところで初期開発の issue はクローズして明日は gitlab ci/cd でテスト環境にデプロイするのをやってみる。
課題管理の雑談 過去に働いていた会社の同僚と課題管理について雑談した。web3 系の会社で働いているのでブロックチェーンや dao 周りの話しも一緒にしたりしていた。一回りぐらい私より若いと思うけれど、私よりはるかに優秀な開発者だなぁと感じながら話しを聞いていた。いま一緒に働いても足手まといになるんじゃないかと思えて身が引き締まる。いくつか話題の中で学んだことを抜き出してみる。
自分の知識やスキルを共有する手段の1つとしてペアワークをやる ペアワークを通してメンバーとの信頼関係も構築していく いまもっている知識やスキルには個人差はあるが、模倣の能力が低い人をみたことがない 上位の意思決定者から低いレベルにあわせる (標準化など) ように指示がきたときは反発する ユーザーファーストが第一ならレベルを下げるような指示はおかしい 「誰を向いて仕事しているの？」と説得する プロジェクトにおいて目的を明確化せずに始めてしまうのは本当によくない 日本人は上意下達で行動するように教育されてきた弊害ではないか 目的を明確化するのは意見を言うことと同じである レイヤーが上がるほどエモい話しになって人生観や哲学の話しになっていく チームのモチベーションを維持する上でも有効ではないか 私はコミュ障だから他人と一緒に作業しようという発想がそもそもなかった。こちらから一緒にやろうと声をかけて知識やスキルを共有する手段もあるのかと気付いた。これまでも何人もの人にいろんな話しを伺っている。他人のノウハウを聞くだけでもこの雑談をすることに意味はあると思えた。</description><content>&lt;p>2時に寝て7時に起きた。キングダムの新刊を読みながら寝てた。&lt;/p>
&lt;h2 id="sveltekit-の初期プロジェクト">sveltekit の初期プロジェクト&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0117/#svelte-アプリの開発に着手">技術選定で svelte を採用した&lt;/a> ので昨日から &lt;a href="https://kit.svelte.dev/">SvelteKit&lt;/a> でアプリケーション開発に着手した。&lt;a href="https://kit.svelte.dev/docs/project-structure">Project structure&lt;/a> にもだいぶ慣れてきた。開発初期はディレクトリ構成に迷うのでドキュメントに標準的な階層構造を書いてくれているのは素晴らしい。&lt;a href="https://kit.svelte.dev/docs/routing">Routing&lt;/a> もキモいけど、ssr の場合は &lt;code>+page.svelte&lt;/code> と &lt;code>+page.server.ts&lt;/code> を設けるのに慣れてきた。ssr で proxy 的に web api 呼び出しも簡単に実装した。知らないフレームワークで開発するのは学ぶところが多くて楽しい。区切りのよいところで初期開発の issue はクローズして明日は gitlab ci/cd でテスト環境にデプロイするのをやってみる。&lt;/p>
&lt;h2 id="課題管理の雑談">課題管理の雑談&lt;/h2>
&lt;p>過去に働いていた会社の同僚と課題管理について雑談した。web3 系の会社で働いているのでブロックチェーンや dao 周りの話しも一緒にしたりしていた。一回りぐらい私より若いと思うけれど、私よりはるかに優秀な開発者だなぁと感じながら話しを聞いていた。いま一緒に働いても足手まといになるんじゃないかと思えて身が引き締まる。いくつか話題の中で学んだことを抜き出してみる。&lt;/p>
&lt;ul>
&lt;li>自分の知識やスキルを共有する手段の1つとしてペアワークをやる
&lt;ul>
&lt;li>ペアワークを通してメンバーとの信頼関係も構築していく&lt;/li>
&lt;li>いまもっている知識やスキルには個人差はあるが、模倣の能力が低い人をみたことがない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>上位の意思決定者から低いレベルにあわせる (標準化など) ように指示がきたときは反発する
&lt;ul>
&lt;li>ユーザーファーストが第一ならレベルを下げるような指示はおかしい&lt;/li>
&lt;li>「誰を向いて仕事しているの？」と説得する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>プロジェクトにおいて目的を明確化せずに始めてしまうのは本当によくない
&lt;ul>
&lt;li>日本人は上意下達で行動するように教育されてきた弊害ではないか&lt;/li>
&lt;li>目的を明確化するのは意見を言うことと同じである
&lt;ul>
&lt;li>レイヤーが上がるほどエモい話しになって人生観や哲学の話しになっていく&lt;/li>
&lt;li>チームのモチベーションを維持する上でも有効ではないか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>私はコミュ障だから他人と一緒に作業しようという発想がそもそもなかった。こちらから一緒にやろうと声をかけて知識やスキルを共有する手段もあるのかと気付いた。これまでも何人もの人にいろんな話しを伺っている。他人のノウハウを聞くだけでもこの雑談をすることに意味はあると思えた。&lt;/p></content></item><item><title>svelte とはリアクティブな ui のための言語</title><link>/diary/posts/2023/0111/</link><pubDate>Wed, 11 Jan 2023 08:05:05 +0900</pubDate><guid>/diary/posts/2023/0111/</guid><description>2時半に寝て7時に起きた。なんか意味なく夜更かししたもののよく眠れた。
svelte 調査 年末から svelte のチュートリアル を始めたものの、葬儀と年末年始休暇で間があいてしまった。年始やもくもく会でも少しずつやっていたものの、今日で終わらせようと最後の方は少し端折りつつチュートリアルを終わらせた。svelete と sveltekit の2つのチュートリアルをやっていて時間がかかった。svelte のシングルファイルコンポーネント (SFC) は vue.js とよく似ている。スクリプトやテンプレートの構文が違う程度の印象。vue.js よりもスクリプトやテンプレートの記述がシンプルな分、やはり簡単に思える。svelte の作者である rich harris 氏が書いたメモに次がある。
Rich-Harris/what-is-svelte.md 大雑把にまとめると次のようなことが書いてある。
svelte を ui フレームワークとして開発してきて、svelte 3 で svelte は言語だと気づいた。リアクティブな ui を記述するための言語であると。これまでそういった取り組みをしてきたプロジェクトはいくつかあるが、どれもコンパイラ以上の専用ツールが必要になってしまい、すべてを制御する必要があって、ライブラリの段階的な採用などもできないために大掛かりには導入されなかった。
html, css, js という多くの開発者が蓄積された経験をもっていて、小規模に段階的に導入するには、それらの言語をハックして拡張するのがパフォーマンスもよく、もっとも優れた解決策であると考えるに至った。
実際に svelte のチュートリアルをやってみると、その簡潔さから rich harris 氏の言葉も理解できる。開発者によっては svelte コンパイラが拡張している javascript の構文や機能を受け入れられない人もいるだろう。純粋な javascript を書きたい人には向かないライブラリかもしれない。そこがリアクティブな ui をコンパイラレベルで実現するためのトレードオフと言える。だから svelte は javascript のハックも含めての言語なのだという解釈になる。</description><content>&lt;p>2時半に寝て7時に起きた。なんか意味なく夜更かししたもののよく眠れた。&lt;/p>
&lt;h2 id="svelte-調査">svelte 調査&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/1223/">年末から svelte のチュートリアル&lt;/a> を始めたものの、葬儀と年末年始休暇で間があいてしまった。年始やもくもく会でも少しずつやっていたものの、今日で終わらせようと最後の方は少し端折りつつチュートリアルを終わらせた。svelete と sveltekit の2つのチュートリアルをやっていて時間がかかった。svelte のシングルファイルコンポーネント (SFC) は vue.js とよく似ている。スクリプトやテンプレートの構文が違う程度の印象。vue.js よりもスクリプトやテンプレートの記述がシンプルな分、やはり簡単に思える。svelte の作者である rich harris 氏が書いたメモに次がある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/Rich-Harris/0f910048478c2a6505d1c32185b61934">Rich-Harris/what-is-svelte.md&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>大雑把にまとめると次のようなことが書いてある。&lt;/p>
&lt;blockquote>
&lt;p>svelte を ui フレームワークとして開発してきて、svelte 3 で svelte は言語だと気づいた。リアクティブな ui を記述するための言語であると。これまでそういった取り組みをしてきたプロジェクトはいくつかあるが、どれもコンパイラ以上の専用ツールが必要になってしまい、すべてを制御する必要があって、ライブラリの段階的な採用などもできないために大掛かりには導入されなかった。&lt;/p>
&lt;p>html, css, js という多くの開発者が蓄積された経験をもっていて、小規模に段階的に導入するには、それらの言語をハックして拡張するのがパフォーマンスもよく、もっとも優れた解決策であると考えるに至った。&lt;/p>
&lt;/blockquote>
&lt;p>実際に svelte のチュートリアルをやってみると、その簡潔さから rich harris 氏の言葉も理解できる。開発者によっては svelte コンパイラが拡張している javascript の構文や機能を受け入れられない人もいるだろう。純粋な javascript を書きたい人には向かないライブラリかもしれない。そこがリアクティブな ui をコンパイラレベルで実現するためのトレードオフと言える。だから svelte は javascript のハックも含めての言語なのだという解釈になる。&lt;/p></content></item><item><title>svelte のチュートリアルで学ぶ</title><link>/diary/posts/2022/1223/</link><pubDate>Fri, 23 Dec 2022 14:25:19 +0900</pubDate><guid>/diary/posts/2022/1223/</guid><description>22時頃から寝てたものの、また2時頃に吐き気で苦しんで何度か起きて7時過ぎに起きた。なかなか体調が悪い。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今週はてんやわんやで議題を整理する余裕すらなかったので近況を軽く共有した。
フロントエンドの技術選定の状況 next.js と svelte kit の違いとか オンラインイベントで話した課題管理の話題 課題管理を it 業界や開発プロジェクトだけでなく、もっと様々な分野や業界で応用できるようにしたい。最初は私がノウハウをもっている業界や業務のみに特化したものになるだろうけど、いずれはスコープを拡げていきたい。その先に 地域おこし協力隊 のようなところにいって社会貢献ができればおもしろいのではないかといった話しをした。地域おこし協力隊の内容はおもしろそうだけど、1人あたりの経費の上限が480万円に設定されていて、ググって調べると余裕のない自治体では満額支給されていないケースもあるみたい。行政がやらないといけない業務をアウトソーシングする予算が低過ぎて、適切な実績やスキルをもった人が経済的に参加しにくい状況にある。採用の目利きができないから単価を低くして失敗を許容しやすくなっているようにもみえる。行政の予算が低い問題は専門家が入って採用も含めて改善していく必要がある。
svelte 入門 昨日の続きで svelte のチュートリアル を始めた。このチュートリアルはファイル操作とオンラインエディタもついていて、ソースコードを変更するとすぐビルドされて結果も確認できる。フロントエンドのチュートリアル自体がフロントエンド技術のデモになっている。よく作られているよなと感心しながら取り組んでいる。svelte でスクリプトを書くときの、マジックコード的な変な構文がある。simple is not easy の文脈で言うところの easy であり、私のような simple 派からみるとやや気持ち悪い。わりと分量があるので途中にコードレビューや勉強会の講師をやっていたら1日では終わらなかった。
let count = 0; $: doubled = count * 2; &amp;lt;script&amp;gt; export let answer; &amp;lt;/script&amp;gt;</description><content>&lt;p>22時頃から寝てたものの、また2時頃に吐き気で苦しんで何度か起きて7時過ぎに起きた。なかなか体調が悪い。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今週はてんやわんやで議題を整理する余裕すらなかったので近況を軽く共有した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="/diary/diary/posts/2022/1214/">フロントエンドの技術選定の状況&lt;/a>
&lt;ul>
&lt;li>next.js と svelte kit の違いとか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2022/1221/">オンラインイベントで話した課題管理の話題&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>課題管理を it 業界や開発プロジェクトだけでなく、もっと様々な分野や業界で応用できるようにしたい。最初は私がノウハウをもっている業界や業務のみに特化したものになるだろうけど、いずれはスコープを拡げていきたい。その先に &lt;a href="https://www.soumu.go.jp/main_sosiki/jichi_gyousei/c-gyousei/02gyosei08_03000066.html">地域おこし協力隊&lt;/a> のようなところにいって社会貢献ができればおもしろいのではないかといった話しをした。地域おこし協力隊の内容はおもしろそうだけど、1人あたりの経費の上限が480万円に設定されていて、ググって調べると余裕のない自治体では満額支給されていないケースもあるみたい。行政がやらないといけない業務をアウトソーシングする予算が低過ぎて、適切な実績やスキルをもった人が経済的に参加しにくい状況にある。採用の目利きができないから単価を低くして失敗を許容しやすくなっているようにもみえる。行政の予算が低い問題は専門家が入って採用も含めて改善していく必要がある。&lt;/p>
&lt;h2 id="svelte-入門">svelte 入門&lt;/h2>
&lt;p>昨日の続きで &lt;a href="https://learn.svelte.dev/tutorial/welcome-to-svelte">svelte のチュートリアル&lt;/a> を始めた。このチュートリアルはファイル操作とオンラインエディタもついていて、ソースコードを変更するとすぐビルドされて結果も確認できる。フロントエンドのチュートリアル自体がフロントエンド技術のデモになっている。よく作られているよなと感心しながら取り組んでいる。svelte でスクリプトを書くときの、マジックコード的な変な構文がある。&lt;a href="https://ohbarye.hatenablog.jp/entry/2017/11/30/012726">simple is not easy&lt;/a> の文脈で言うところの &lt;em>easy&lt;/em> であり、私のような &lt;em>simple&lt;/em> 派からみるとやや気持ち悪い。わりと分量があるので途中にコードレビューや勉強会の講師をやっていたら1日では終わらなかった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">$&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">doubled&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">answer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>フロントエンドの技術選定</title><link>/diary/posts/2022/1105/</link><pubDate>Sat, 05 Nov 2022 20:54:58 +0900</pubDate><guid>/diary/posts/2022/1105/</guid><description>24時に BOOK AND BED TOKYO にチェックインして雑多なことして25時過ぎには寝て8時過ぎに起きてチェックアウトした。それから新幹線に乗って神戸まで戻ってきた。東京・品川から新神戸間は、往路は EX早特21ワイド だと12,630円で、復路は自由席で14,420円だった。私の中で時間の制約はストレスやエネルギーを使う。帰りは時間に縛られたくないという思いで新幹線の駅に着いてから自由席を買うようにしている。一方で2千円近い差額も大きいので次回以降は帰りの新幹線もEX早特21ワイドで取ることにした。
フロントエンドの調査 昼過ぎに家に戻ってきて洗濯や片付けしたら疲れてまた寝てた。晩ご飯食べて21時ぐらいからオフィスで作業してた。猫みたいな生活。オフィスからお手伝い先のネットワーク接続の設定をやったりしながらフロントエンドのコードを読んでみた。これは作り直した方がよいだろうと私の中で決意して、どういった技術で作り直すかの技術選定のための調査を開始した。既存のフロントエンド開発の背景や経緯を知らないのでまだ確定ではない。提案の準備のために調査をしておく。
ここ最近 svelte の人気があるのをみかける。1年ほど前に三ノ宮.devで教えてもらってチュートリアルをやってみて、そのときは特にどうとも思わなくて、こんなやり方もあるんやな程度にみていた。その後 vue.js (nuxtjs) での開発を半年間ほど経験して、思いの外、私にとって vue.js がよいものにはみえなかった。react よりも簡単と聞いていたけど、私にとってはあまりそうは思えなかった。vue.js は vue.js なりの難しさ (学習コスト) があるように感じられた。管理画面のような小規模な用途に react や vue.js のようなリッチなライブラリ・フレームワークを使わなくてよい方法があるかを考えたときに svelte を思い出した。svelte の実際のアプリケーションのサンプルコードとして次のコードを読んでいた。
svelte realworld example vue.js の single-file components は svelte の前身である ractive.js のコンポーネント の概念に影響を受けているという。従って、svelte のコンポーネント開発は vue.js と考え方が近いものの、dom 操作は svelte のコンパイル時にコード生成するので仮想 dom は使わない。これがパフォーマンス上の大きなメリットと言われている。react や vue.js よりもずっと軽量なコンパイラ・フレームワークと言える。次のページに複数のフロントエンドの技術の流行をまとめている。svelte はこの2年ぐらいで人気が急上昇していることがわかる。
Front-end frameworks popularity (React, Vue, Angular and Svelte) また react と vue.js の現状もちゃんと把握しようと調べていて次の記事がおもしろかった。
[Twitter] React ユーザーが Vue を選ばない理由 vue.</description><content>&lt;p>24時に BOOK AND BED TOKYO にチェックインして雑多なことして25時過ぎには寝て8時過ぎに起きてチェックアウトした。それから新幹線に乗って神戸まで戻ってきた。東京・品川から新神戸間は、往路は &lt;a href="/diary/diary/posts/2022/1031/#東京出張">EX早特21ワイド&lt;/a> だと12,630円で、復路は自由席で14,420円だった。私の中で時間の制約はストレスやエネルギーを使う。帰りは時間に縛られたくないという思いで新幹線の駅に着いてから自由席を買うようにしている。一方で2千円近い差額も大きいので次回以降は帰りの新幹線もEX早特21ワイドで取ることにした。&lt;/p>
&lt;h2 id="フロントエンドの調査">フロントエンドの調査&lt;/h2>
&lt;p>昼過ぎに家に戻ってきて洗濯や片付けしたら疲れてまた寝てた。晩ご飯食べて21時ぐらいからオフィスで作業してた。猫みたいな生活。オフィスからお手伝い先のネットワーク接続の設定をやったりしながらフロントエンドのコードを読んでみた。これは作り直した方がよいだろうと私の中で決意して、どういった技術で作り直すかの技術選定のための調査を開始した。既存のフロントエンド開発の背景や経緯を知らないのでまだ確定ではない。提案の準備のために調査をしておく。&lt;/p>
&lt;p>ここ最近 &lt;a href="https://svelte.dev/">svelte&lt;/a> の人気があるのをみかける。1年ほど前に三ノ宮.devで教えてもらってチュートリアルをやってみて、そのときは特にどうとも思わなくて、こんなやり方もあるんやな程度にみていた。その後 vue.js (nuxtjs) での開発を半年間ほど経験して、思いの外、私にとって vue.js がよいものにはみえなかった。react よりも簡単と聞いていたけど、私にとってはあまりそうは思えなかった。vue.js は vue.js なりの難しさ (学習コスト) があるように感じられた。管理画面のような小規模な用途に react や vue.js のようなリッチなライブラリ・フレームワークを使わなくてよい方法があるかを考えたときに svelte を思い出した。svelte の実際のアプリケーションのサンプルコードとして次のコードを読んでいた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/sveltejs/realworld">svelte realworld example&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>vue.js の single-file components は svelte の前身である &lt;a href="https://github.com/ractivejs/component-spec">ractive.js のコンポーネント&lt;/a> の概念に影響を受けているという。従って、svelte のコンポーネント開発は vue.js と考え方が近いものの、dom 操作は svelte のコンパイル時にコード生成するので仮想 dom は使わない。これがパフォーマンス上の大きなメリットと言われている。react や vue.js よりもずっと軽量なコンパイラ・フレームワークと言える。次のページに複数のフロントエンドの技術の流行をまとめている。svelte はこの2年ぐらいで人気が急上昇していることがわかる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/tkrotoff/b1caa4c3a185629299ec234d2314e190">Front-end frameworks popularity (React, Vue, Angular and Svelte)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>また react と vue.js の現状もちゃんと把握しようと調べていて次の記事がおもしろかった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zenn.dev/sa2knight/articles/why_react_folks_dont_choose_vue">[Twitter] React ユーザーが Vue を選ばない理由&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>vue.js は vue3 で react になろうとしていて、その過程の過渡期には様々な問題を抱えているように私からはみえた。&lt;/p>
&lt;ul>
&lt;li>vue2 と vue3 は互換性がない&lt;/li>
&lt;li>vue3 移行へのエコシステムの本気度がみえない&lt;/li>
&lt;li>vue2 の開発者が本当に vue3 を求めているのか懐疑的&lt;/li>
&lt;li>シェアだけみたら vue.js よりも react の方が高い&lt;/li>
&lt;/ul></content></item></channel></rss>