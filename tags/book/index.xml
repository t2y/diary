<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>book on forest nook</title><link>/diary/tags/book/</link><description>Recent content in book on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Mon, 25 Oct 2021 07:25:33 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/book/index.xml" rel="self" type="application/rss+xml"/><item><title>新しい生活リズムへの移行</title><link>/diary/posts/2021/1025/</link><pubDate>Mon, 25 Oct 2021 07:25:33 +0900</pubDate><guid>/diary/posts/2021/1025/</guid><description>3時に寝て6時に起きた。今日はちゃんと起き上がって朝からお茶を煮出して粗熱とって冷やしたりしてた。その後、準備してオフィスに着いたのが7時20分。いつもより1時間早く起きているのでオフィスに着くのも1時間早くなる。先週 の水曜日と金曜日だけ朝活やってみて逆に生活のリズムが乱れてよくない感じがした。今週は毎日6時に起きて朝活に参加してみるのを試す。
ミクロ経済学入門の入門 早起きしたので打ち合わせ前の隙間時間に第3章の需要曲線を読んだ。まずは用語の整理から。
上級財: 所得が増えたときに消費が増える財 下級財: 所得が増えたときに消費が減る財 一般的な傾向として、ものは消費するほど有り難みが減る。たとえば僕はコーヒー1杯目に最大4ドルまでなら払ってよいけれど、2杯目には最大2ドルまでしか払いたくない、そして3杯目には最大1ドルまでしか払いたくない、というように。
食べものとか実際にボリュームディスカウントされることが多いので食べものだとイメージしやすい。スーパーで半額になった豚カツを2枚買うときの私の気持ちはこんな感じ。定価なら1枚しか買わないのに半額なら2枚買ってもいいかと思ったりする。たまに2枚を一度に食べて気分悪くなって後悔する。たいていは晩ご飯に1枚、翌日のお昼ゴハンに1枚を分けて食べる。
余剰: 価格と消費者がお金を払ってもよい金額との差額 コーヒー1杯に400円払ってよいと考えていて、100円のコーヒーを買うなら300円が余剰といえる さらにコーヒー2杯目を50円で買ってよいと考えるなら350円が余剰と言える すべての消費者の余剰を計算したものを消費者余剰という。需要曲線からある価格 p を取るときの次のグラフにおける面積を消費者余剰と呼ぶ。グラフにすると直観的にわかりやすい。
消費者余剰に対して、売る側の利潤の合計を生産者余剰と呼ぶ。消費者余剰と生産者余剰との和を社会的余剰と呼ぶ。社会的余剰を「市場のよさ」のモノサシとして使うと談合は禁止すべしということになる。
ベルトラン価格競争 同品質で同費用の業者が価格競争をした場合、顧客は価格が安い方から商品を購入する。こうした市場をベルトラン寡占市場と呼ぶ このとき業者間の価格競争は最終的に「底辺への競争」が起こり、経費と同じ価格に近づく この状態をベルトラン均衡と呼ぶ 業者間で談合して価格を据え置けばよいが、業者の数が多くなるとこれは難しい 裏切りが発生したり、信頼関係を維持するのが難しかったりして、長期的な利益や全体の利益を追求するのが難しい ゲーム理論の話しのように読めた 価格弾力性 価格の変化によって需要がどのぐらい弾んで動くかをあらわす 弾力性が低いというと、価格が動いても需要はあまり変わらない状態をいう 弾力性が高い財は値上げすると需要が大幅に下がる 必需品は値上げしても需要が下がりにくい 課税で考えると、必需品への課税は貧しい人の生活に与えるダメージが大きい ギッフェン財 需要曲線は右下がりのカーブになるのが通常だが、経験的事実に即している そうした財を正常財と呼ぶ ごく稀に価格が上がるにつれ売れ行きが増すものがある、それをギッフェン財と呼ぶ 代替効果: ある商品が値上げしたときに別の商品に置き換えたくなる 所得効果: 生活にゆとりがなくなると、高いものは買えなくなり、安いものを買おうとする 内容はそう難しくないが、急にたくさんの用語が出てきて読み解くのに時間がかかった。</description><content>&lt;p>3時に寝て6時に起きた。今日はちゃんと起き上がって朝からお茶を煮出して粗熱とって冷やしたりしてた。その後、準備してオフィスに着いたのが7時20分。いつもより1時間早く起きているのでオフィスに着くのも1時間早くなる。&lt;a href="/diary/diary/posts/2021/1022/">先週&lt;/a> の水曜日と金曜日だけ朝活やってみて逆に生活のリズムが乱れてよくない感じがした。今週は毎日6時に起きて朝活に参加してみるのを試す。&lt;/p>
&lt;h2 id="ミクロ経済学入門の入門">ミクロ経済学入門の入門&lt;/h2>
&lt;p>早起きしたので打ち合わせ前の隙間時間に第3章の需要曲線を読んだ。まずは用語の整理から。&lt;/p>
&lt;ul>
&lt;li>上級財: 所得が増えたときに消費が増える財&lt;/li>
&lt;li>下級財: 所得が増えたときに消費が減る財&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>一般的な傾向として、ものは消費するほど有り難みが減る。たとえば僕はコーヒー1杯目に最大4ドルまでなら払ってよいけれど、2杯目には最大2ドルまでしか払いたくない、そして3杯目には最大1ドルまでしか払いたくない、というように。&lt;/p>
&lt;/blockquote>
&lt;p>食べものとか実際にボリュームディスカウントされることが多いので食べものだとイメージしやすい。スーパーで半額になった豚カツを2枚買うときの私の気持ちはこんな感じ。定価なら1枚しか買わないのに半額なら2枚買ってもいいかと思ったりする。たまに2枚を一度に食べて気分悪くなって後悔する。たいていは晩ご飯に1枚、翌日のお昼ゴハンに1枚を分けて食べる。&lt;/p>
&lt;ul>
&lt;li>余剰: 価格と消費者がお金を払ってもよい金額との差額
&lt;ul>
&lt;li>コーヒー1杯に400円払ってよいと考えていて、100円のコーヒーを買うなら300円が余剰といえる
&lt;ul>
&lt;li>さらにコーヒー2杯目を50円で買ってよいと考えるなら350円が余剰と言える&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>すべての消費者の余剰を計算したものを消費者余剰という。需要曲線からある価格 p を取るときの次のグラフにおける面積を消費者余剰と呼ぶ。グラフにすると直観的にわかりやすい。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1025_consumer-surplus.png"/>
&lt;/figure>
&lt;p>消費者余剰に対して、売る側の利潤の合計を生産者余剰と呼ぶ。消費者余剰と生産者余剰との和を社会的余剰と呼ぶ。社会的余剰を「市場のよさ」のモノサシとして使うと談合は禁止すべしということになる。&lt;/p>
&lt;ul>
&lt;li>ベルトラン価格競争
&lt;ul>
&lt;li>同品質で同費用の業者が価格競争をした場合、顧客は価格が安い方から商品を購入する。こうした市場をベルトラン寡占市場と呼ぶ&lt;/li>
&lt;li>このとき業者間の価格競争は最終的に「底辺への競争」が起こり、経費と同じ価格に近づく
&lt;ul>
&lt;li>この状態をベルトラン均衡と呼ぶ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>業者間で談合して価格を据え置けばよいが、業者の数が多くなるとこれは難しい
&lt;ul>
&lt;li>裏切りが発生したり、信頼関係を維持するのが難しかったりして、長期的な利益や全体の利益を追求するのが難しい
&lt;ul>
&lt;li>ゲーム理論の話しのように読めた&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>価格弾力性
&lt;ul>
&lt;li>価格の変化によって需要がどのぐらい弾んで動くかをあらわす&lt;/li>
&lt;li>弾力性が低いというと、価格が動いても需要はあまり変わらない状態をいう&lt;/li>
&lt;li>弾力性が高い財は値上げすると需要が大幅に下がる
&lt;ul>
&lt;li>必需品は値上げしても需要が下がりにくい
&lt;ul>
&lt;li>課税で考えると、必需品への課税は貧しい人の生活に与えるダメージが大きい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ギッフェン財
&lt;ul>
&lt;li>需要曲線は右下がりのカーブになるのが通常だが、経験的事実に即している
&lt;ul>
&lt;li>そうした財を正常財と呼ぶ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ごく稀に価格が上がるにつれ売れ行きが増すものがある、それをギッフェン財と呼ぶ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>代替効果: ある商品が値上げしたときに別の商品に置き換えたくなる&lt;/li>
&lt;li>所得効果: 生活にゆとりがなくなると、高いものは買えなくなり、安いものを買おうとする&lt;/li>
&lt;/ul>
&lt;p>内容はそう難しくないが、急にたくさんの用語が出てきて読み解くのに時間がかかった。&lt;/p>
&lt;h2 id="設計ドキュメントレビュー">設計ドキュメントレビュー&lt;/h2>
&lt;p>先週から作っていた設計ドキュメントを顧問さんと一緒にレビューした。スライド40枚を2時間がっつり話してめっちゃ疲れた。話し終えて20-30分抜け殻になって軽く散歩してきた。ここ3ヶ月、調べものをしてきた内容の集大成でもあり、頭の中にしかなかった課題管理の実践知を明文化するといった取り組みの (途中) 結果でもある。品質の良し悪しで言えば、たった3ヶ月で出来たものなので大したことはない。あくまで途上における段階でしかないのだけど、私の中でも納得感は出てきたし、レビューしてもらって厳しい指摘もなかったので方向性は出てきた感じがある。このまま時間のあるときに進めていく。&lt;/p>
&lt;h2 id="slack-apps-の調査">Slack apps の調査&lt;/h2>
&lt;p>この水曜日にある勉強会の &lt;a href="https://github.com/t2y/python-study/tree/master/BizPy/slack/20211027">資料作成&lt;/a> が完了した。Slack apps の調査を勢いよくやりたいので2週間ごとに開催することにする。ドキュメントを眺めていて次回は &lt;a href="https://api.slack.com/lang/ja-jp/app-home-with-modal">新機能、アプリのホーム・ヴューを活用しよう:house_with_garden:&lt;/a> のチュートリアルをやってみることに決めた。&lt;/p>
&lt;h2 id="お昼寝">お昼寝&lt;/h2>
&lt;p>睡眠時間が短かったせいか、朝早かったせいか、夕方に集中力がなくなったので17時に切り上げて帰って寝てた。今日は雨だったので徒歩通勤だったのもありウォーキングにもなった。途中でスーパーに寄って買いものして帰った。運動目的だと1時間ぐらい歩いても平気なのに通勤だと15分歩くだけで疲れる。同じ行動をしていても目的意識で変わってくる。18時ぐらいには家に着いてそのまま4時間ほど寝てた。その後、また起きて夜の作業に入った。起きてからお腹すいて即席でめんつゆと醤油とかぼちゃとささみと卵で煮物を作ってみたら意外とおいしかった。お腹すいているとちょっとしたものでもおいしい。気に入ったのでカバー画像にしてみた。&lt;/p></content></item><item><title>改正法人税法等の説明会</title><link>/diary/posts/2021/1019/</link><pubDate>Tue, 19 Oct 2021 08:52:42 +0900</pubDate><guid>/diary/posts/2021/1019/</guid><description>0-1時ぐらいに寝て7時半に起きた。よく眠れたか眠れてないかもわからないような目覚め方をして少しぼおっとしてた。朝ゆっくりしてもいいかと思いつつ準備して移動したら9時前にはオフィスにいたので普通の日とそう変わらない一日の始めだった。夜にジョギング行こうかと思ってたけど、ちょうど通り雨が降ったりやんだりしててやめた。代わりに雨やんでからオフィス行って調べてものしてた。
データ指向アプリケーションデザイン 7.3を読んで7章トランザクションを読み終えた。トランザクションの章は言葉も知らないし、あまりクリティカルなアプリケーションの開発に関わってこなかったのでそこまで意識したことがなかった。トランザクションで問題が発生する分離レベルと典型的なパターンが体系的に整理されていてすごく勉強になった。結果的にトランザクションを使わないとしても、トランザクションの要否や起きうる整合性の問題を理解しておくとデータ定義やアプリケーションの設計にも活かせる気がする。7章まで読んだ中でもっとも知らないことが多かった。約300ページなのでだいたい半分読み終えた。まだまだ先は長い。
トランザクションの開始時点でロックをかけるべきオブジェクトが存在せず、あるトランザクションでの書き込みが他のトランザクションの検索クエリの結果を変化させてしまう問題を ファントム と呼ぶ。ファントムの対策の1つとして、あらかじめそのデータを作っておき SELECT FOR UPDATE でロックを取得するやり方を 衝突の実体化 (materializing conflicts) と呼ぶらしい。グループウェアの開発をしていた頃、1つのスレッドしかトランザクションを実行できないことを保証するための切り札として、ロック用途のテーブルを設けておき、そのロックを獲得したスレッドだけ処理できるようにしていた。当時はわからなかったけど、あれは衝突の実体化という手法だったんだといま気付いた。
データベースのクラッシュや整合性に関する問題に対する信頼性を保つために、それらの問題を単純化するために、この数十年にわたって選択されてきた仕組みが トランザクション である。トランザクションは、アプリケーションが複数の読み書きを論理的な単位としてまとめる方法である。概念的には、トランザクション中のすべての読み書きは1つの操作として実行される。トランザクションは抽象化のレイヤーであり、アプリケーションはある種の並行性の問題や、ある種のハードウェアやソフトウェアの問題が存在しないかのように振る舞えるようになる。
トランザクションは全体として成功（ コミット（commit） ）もしくは失敗（ 中断（abort） 、 ロールバック（rollback） ）する。トランザクションが失敗した場合には、アプリケーションは安全にリトライできる。トランザクションは自然法則ではなく、データベースにアクセスするアプリケーションのためのプログラミングモデルをシンプルにするという目的を持って生み出された。トランザクションを利用すれば、ある種の潜在的なエラーの状況や並行性の問題はデータベースが面倒を見てくれるので、アプリケーションはそれらを気にしなくてよくなる（このことは 安全性の保証 と呼ばれる）。
トランザクションが提供する安全性の保証は ACID で示される。
原子性 (Atomicity) 原子（アトミック） はそれ以上小さな部分に分割できないものを指して使われる言葉 マルチスレッドのプログラミングにおいては、あるスレッドがアトミックな処理を実行しているというなら、それは他のスレッドからはその処理の半分だけ完了した途中の状態を見る方法が存在しないことを意味する。システムが取りえる状態は、その処理が始まる前と終わった後の状態だけであり、その中間の状態になることはない 前にメモリモデルの文脈で、あるプロセスが書き込み完了したデータが、他のプロセスからも確実に読めることをアトミックな操作と習ったことがある 原子性と並行性は関係がない エラーの際にトランザクションを中断し、そのトランザクションのすべての書き込みを破棄できることが、 ACID の原子性を決定づける特徴と言える アプリケーションがリトライしても安全であることを保証する 中断可能性（abortability） の方が原子性よりも良い言葉だったと思われる 一貫性 (Consistency) 一貫性は多くの意味で使われる とくに日本語では整合性とも訳される 非同期のレプリケーションシステムでは結果整合性の問題が発生する (5章) コンシステントハッシュ法は、リバランシングのためにいくつかのシステムで利用されているパーティショニングのアプローチ CAP 定理では、一貫性という言葉は線形化可能性の意味で使われる (9章) ACID の文脈における一貫性は、データベースが「良い状態」にあることを示すアプリケーション固有の概念を指す 同じ言葉を少なくとも4つの異なる意味で使われている。ACID における一貫性という概念は、データについて常に真でなければならない何らかの言明（ 不変性 ）があることを指す。たとえば、会計システムの場合、すべてのアカウントでまとめれば常に貸方と借方は等しくならなければならない。この一貫性の概念はアプリケーション固有の不変性の概念に依存しており、一貫性を保つようにトランザクションを適切に定義することはアプリケーションの責任となる。原子性、分離性、永続性はデータベースの特性だが、一貫性は（ ACID という考え方においては）アプリケーションの特性である。したがって、 C は実際には ACID に属していない。</description><content>&lt;p>0-1時ぐらいに寝て7時半に起きた。よく眠れたか眠れてないかもわからないような目覚め方をして少しぼおっとしてた。朝ゆっくりしてもいいかと思いつつ準備して移動したら9時前にはオフィスにいたので普通の日とそう変わらない一日の始めだった。夜にジョギング行こうかと思ってたけど、ちょうど通り雨が降ったりやんだりしててやめた。代わりに雨やんでからオフィス行って調べてものしてた。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>7.3を読んで7章トランザクションを読み終えた。トランザクションの章は言葉も知らないし、あまりクリティカルなアプリケーションの開発に関わってこなかったのでそこまで意識したことがなかった。トランザクションで問題が発生する分離レベルと典型的なパターンが体系的に整理されていてすごく勉強になった。結果的にトランザクションを使わないとしても、トランザクションの要否や起きうる整合性の問題を理解しておくとデータ定義やアプリケーションの設計にも活かせる気がする。7章まで読んだ中でもっとも知らないことが多かった。約300ページなのでだいたい半分読み終えた。まだまだ先は長い。&lt;/p>
&lt;p>トランザクションの開始時点でロックをかけるべきオブジェクトが存在せず、あるトランザクションでの書き込みが他のトランザクションの検索クエリの結果を変化させてしまう問題を &lt;strong>ファントム&lt;/strong> と呼ぶ。ファントムの対策の1つとして、あらかじめそのデータを作っておき &lt;code>SELECT FOR UPDATE&lt;/code> でロックを取得するやり方を &lt;strong>衝突の実体化 (materializing conflicts)&lt;/strong> と呼ぶらしい。グループウェアの開発をしていた頃、1つのスレッドしかトランザクションを実行できないことを保証するための切り札として、ロック用途のテーブルを設けておき、そのロックを獲得したスレッドだけ処理できるようにしていた。当時はわからなかったけど、あれは衝突の実体化という手法だったんだといま気付いた。&lt;/p>
&lt;blockquote>
&lt;p>データベースのクラッシュや整合性に関する問題に対する信頼性を保つために、それらの問題を単純化するために、この数十年にわたって選択されてきた仕組みが &lt;strong>トランザクション&lt;/strong> である。トランザクションは、アプリケーションが複数の読み書きを論理的な単位としてまとめる方法である。概念的には、トランザクション中のすべての読み書きは1つの操作として実行される。トランザクションは抽象化のレイヤーであり、アプリケーションはある種の並行性の問題や、ある種のハードウェアやソフトウェアの問題が存在しないかのように振る舞えるようになる。&lt;/p>
&lt;p>トランザクションは全体として成功（ &lt;strong>コミット（commit）&lt;/strong> ）もしくは失敗（ &lt;strong>中断（abort）&lt;/strong> 、 &lt;strong>ロールバック（rollback）&lt;/strong> ）する。トランザクションが失敗した場合には、アプリケーションは安全にリトライできる。トランザクションは自然法則ではなく、データベースにアクセスするアプリケーションのためのプログラミングモデルをシンプルにするという目的を持って生み出された。トランザクションを利用すれば、ある種の潜在的なエラーの状況や並行性の問題はデータベースが面倒を見てくれるので、アプリケーションはそれらを気にしなくてよくなる（このことは &lt;strong>安全性の保証&lt;/strong> と呼ばれる）。&lt;/p>
&lt;p>トランザクションが提供する安全性の保証は &lt;strong>ACID&lt;/strong> で示される。&lt;/p>
&lt;h5 id="原子性-atomicity">原子性 (Atomicity)&lt;/h5>
&lt;ul>
&lt;li>&lt;strong>原子（アトミック）&lt;/strong> はそれ以上小さな部分に分割できないものを指して使われる言葉&lt;/li>
&lt;li>マルチスレッドのプログラミングにおいては、あるスレッドがアトミックな処理を実行しているというなら、それは他のスレッドからはその処理の半分だけ完了した途中の状態を見る方法が存在しないことを意味する。システムが取りえる状態は、その処理が始まる前と終わった後の状態だけであり、その中間の状態になることはない
&lt;ul>
&lt;li>前にメモリモデルの文脈で、あるプロセスが書き込み完了したデータが、他のプロセスからも確実に読めることをアトミックな操作と習ったことがある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>原子性と並行性は関係がない&lt;/li>
&lt;li>エラーの際にトランザクションを中断し、そのトランザクションのすべての書き込みを破棄できることが、 ACID の原子性を決定づける特徴と言える
&lt;ul>
&lt;li>アプリケーションがリトライしても安全であることを保証する&lt;/li>
&lt;li>&lt;strong>中断可能性（abortability）&lt;/strong> の方が原子性よりも良い言葉だったと思われる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="一貫性-consistency">一貫性 (Consistency)&lt;/h4>
&lt;ul>
&lt;li>一貫性は多くの意味で使われる
&lt;ul>
&lt;li>とくに日本語では整合性とも訳される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>非同期のレプリケーションシステムでは結果整合性の問題が発生する (5章)&lt;/li>
&lt;li>コンシステントハッシュ法は、リバランシングのためにいくつかのシステムで利用されているパーティショニングのアプローチ&lt;/li>
&lt;li>CAP 定理では、一貫性という言葉は線形化可能性の意味で使われる (9章)&lt;/li>
&lt;li>ACID の文脈における一貫性は、データベースが「良い状態」にあることを示すアプリケーション固有の概念を指す&lt;/li>
&lt;/ul>
&lt;p>同じ言葉を少なくとも4つの異なる意味で使われている。ACID における一貫性という概念は、データについて常に真でなければならない何らかの言明（ &lt;strong>不変性&lt;/strong> ）があることを指す。たとえば、会計システムの場合、すべてのアカウントでまとめれば常に貸方と借方は等しくならなければならない。この一貫性の概念はアプリケーション固有の不変性の概念に依存しており、一貫性を保つようにトランザクションを適切に定義することはアプリケーションの責任となる。原子性、分離性、永続性はデータベースの特性だが、一貫性は（ ACID という考え方においては）アプリケーションの特性である。したがって、 C は実際には ACID に属していない。&lt;/p>
&lt;h4 id="分離性-isolation">分離性 (Isolation)&lt;/h4>
&lt;p>多くのデータベースは、同時に複数のクライアントからアクセスされる。データベース中の同じレコードにアクセスするときに並行性の問題（レース条件［ race condition ］）が生じる可能性がある。データベース中に保存されているカウンタを、2つのクライアントが同時にインクリメントすると仮定する。それぞれのクライアントは現在の値を読み取り、1を加え、新しい値を書き戻す。ACID における分離性とは、並行して実行されたトランザクションがお互いから分離されており、お互いのつま先を踏みつけあうようなことがないという意味である。実際の運用では、パフォーマンスの制約から分離レベルによって保証される分離性が変わってくる。&lt;/p>
&lt;h4 id="永続性-durability">永続性 (Durability)&lt;/h4>
&lt;p>データベースシステムが目的とするのは、データを失う恐れなく保存できる安全な場所を提供すること。永続性は、トランザクションのコミットが成功したら、仮にハードウェアの障害やデータベースのクラッシュがあったとしても、そのトランザクションで書き込まれたすべてのデータは失われないことを約束する。&lt;/p>
&lt;h4 id="用語の整理">用語の整理&lt;/h4>
&lt;p>トランザクションはデータモデルがどういったものであるかにかかわらず、価値あるデータベースの機能と言える。並行に実行されたトランザクションがお互いに影響しあわない分離性における保証を &lt;strong>分離レベル&lt;/strong> と呼ぶ。&lt;/p>
&lt;ul>
&lt;li>read committed&lt;/li>
&lt;li>スナップショット分離（repeatable read とも呼ばれる）&lt;/li>
&lt;li>直列化可能&lt;/li>
&lt;/ul>
&lt;p>これらの分離レベルに対してトランザクションで発生する様々なレース条件がある。&lt;/p>
&lt;ul>
&lt;li>ダーティリード
&lt;ul>
&lt;li>あるクライアントが他のクライアントのまだコミットされていない書き込みを読める&lt;/li>
&lt;li>read committed 分離レベル及びそれ以上に強い分離レベルはダーティリードは生じない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ダーティライト
&lt;ul>
&lt;li>あるクライアントが他のクライアントによるまだコミットされていない書き込みの内容を上書きしてしまう&lt;/li>
&lt;li>ほぼすべてのトランザクションの実装は、ダーティライトを生じない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>読み取りスキュー（nonrepeatable read）
&lt;ul>
&lt;li>クライアントが異なる時刻にデータベースの異なる部分を見ること&lt;/li>
&lt;li>この問題の最も一般的な回避策はスナップショット分離によるもので、これはトランザクションがある時点での一貫したスナップショットから読み取りを行えるようにする&lt;/li>
&lt;li>通常、MVCC（multi-version concurrency control）を利用して実装される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>更新のロスト
&lt;ul>
&lt;li>2つのクライアントが並行して read-modify-write サイクルを実行するとき、片方が他方の書き込みをその変更内容を考慮せずに上書きしてしまい、データが失われること&lt;/li>
&lt;li>スナップショット分離レベルの実装にはこの異常を自動的に回避してくれるものもあるが、明示的なロック（ SELECT FOR UPDATE ）をしなければならない実装もある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>書き込みスキュー
&lt;ul>
&lt;li>トランザクションが何かを読み取り、その値に基づいて判断を下し、その結果をデータベースに書き込む&lt;/li>
&lt;li>この状況で、書き込みが行われた時点で判断の根拠となったプレミスが真ではなくなっている場合を指す&lt;/li>
&lt;li>直列化可能分離レベルのみがこの異常を回避できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ファントムリード
&lt;ul>
&lt;li>トランザクションが何らかの検索条件にマッチするオブジェクトを読み取り、他のクライアントはその検索結果に影響する書き込みを行う&lt;/li>
&lt;li>スナップショット分離レベルは単純なファントムリードを回避してくれるが、書き込みスキューを伴うファントムに対してはインデックス範囲ロックのような特別な対応が必要となる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>弱い分離レベルは、これらの異常のいくつかを防いでくれるが、それ以外はアプリケーション開発者に対処する必要がある（たとえば明示的なロックなど）。すべての問題に対する保護を提供してくれるのは直列化可能分離レベルのみ。直列化可能なトランザクションの実装方法は、3 種類ある。&lt;/p>
&lt;ul>
&lt;li>トランザクションを順次実行する
&lt;ul>
&lt;li>それぞれのトランザクションをきわめて高速に実行でき、加えて単一の CPU コアで十分処理できる程度にトランザクションのスループットが低いのであれば、これはシンプルで効果的な選択肢となる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ツーフェーズロック
&lt;ul>
&lt;li>数十年にわたって直列化可能分離レベルの実装において標準的な方法であった&lt;/li>
&lt;li>パフォーマンス上の特性から多くのアプリケーションがツーフェーズロックの利用は避けている&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>直列化可能スナップショット分離（SSI、serializable snapshot isolation）
&lt;ul>
&lt;li>新しいアルゴリズムであり、これまでのアプローチが持つ欠点のほとんどを回避している&lt;/li>
&lt;li>SSI は楽観的アプローチを取っており、トランザクションはブロックされることなく処理を進められる&lt;/li>
&lt;li>トランザクションはコミットの時点でチェックされ、その実行が直列化可能になっていなければ中断される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="改正法人税法等の説明会">改正法人税法等の説明会&lt;/h2>
&lt;p>&lt;a href="https://www.nk-net.co.jp/kobe/assets/files/schedule/2021/211019.pdf">改正法人税法等の説明会&lt;/a> に参加してきた。所感からまとめるとこんな感じ。&lt;/p>
&lt;ul>
&lt;li>神戸文化ホールについて
&lt;ul>
&lt;li>電源がない&lt;/li>
&lt;li>FREESPOT が提供されていてフリー wifi として利用できるが、通信品質は不安定
&lt;ul>
&lt;li>スマホでテザリングもやってみたが、電波状態がよくなくてもっと不安定&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ラップトップ向きの場所ではない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>税制を身近にするイベントとしては参加してもよい&lt;/li>
&lt;li>もらった資料をたんたんと説明するだけなのでイベントに参加することで得られる付加価値はとくにない&lt;/li>
&lt;li>気分転換や時間があれば参加すればいい、忙しかったら参加しなくてもよさそう&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.nk-net.co.jp/kobe/index.html">公益社団法人 神戸納税協会&lt;/a> という組織がある。年会費 (うちの会社だと7,800円) がいるのでいまは入らないけど、無料税務相談があるので余裕ができたら困ったときの相談相手になってもらう意図で入会してもよいかもしれない。冒頭の神戸税務署長の挨拶で法人税の申告における e-tax の利用率は 88.4% だと話してた。うちは紙で申請しているので意外とみんな e-tax 使っているんだなと自社を恥じた。だって Windows マシンないとできへんねんもん。参加したことによる学びとして書いていくとこれらかな。&lt;/p>
&lt;ul>
&lt;li>「研究開発費」は会計上の用語、「試験研究費」は税法上の用語&lt;/li>
&lt;li>DX 投資促進税制の創設&lt;/li>
&lt;/ul>
&lt;p>内容は基本知らないことなので、知らないことに触れるイベントという点では斬新ではあった。ほうほうと聞いてただけなんだけど。直接うちの会社に影響を与える税法の改正はインボイス制度ぐらいかな。&lt;/p></content></item><item><title>とくに何もない一日</title><link>/diary/posts/2021/1018/</link><pubDate>Mon, 18 Oct 2021 09:56:19 +0900</pubDate><guid>/diary/posts/2021/1018/</guid><description>いつ寝たのか覚えてないけど、スマホをみたら1時過ぎに寝て6時に起きたことになっている。だいたいいつも5-6時には一度目が覚める。そのまま起きるときもあれば起きないときもある。今日はちゃんと起き上がったのは7-8時ぐらいだった気がする。夜にジョギング行こうかとも考えていただけど、帰って先に晩ご飯食べたら疲れてそのままだらだらしてた。
エージェント面談 そろそろ次のお仕事を探す準備のために エンジニアファクトリー というサービスに登録してみた。KOBE JOB PORT で紹介されていたのをみつけた。前に Remogu さんで探していた ように、プロジェクトマネージャー案件か、リモートワークの開発者案件を探している。マネージャーだと常駐系の方が多かったり、実務経験必須だったりすることが多いため、神戸から通える範囲の案件も探してみようという意図になる。だいたいこんな内容を話してた。
職務経歴の内容から個人を特定できないよう、エージェントがブラインド化した資料を企業に公開する 単価が高い案件は東京の会社のリモートワークに多い 契約は準委任契約がほとんどである 法人として契約もできる 6ヶ月や1年といった短期開発案件も多い 求職者の情報を匿名化する背景は、企業が直接交渉するのを避けるためなのかな？求人プラットフォームごとに情報入力しないといけないのが面倒なところ。
データ指向アプリケーションデザイン 7章トランザクションのうち、7.1と7.2を読んだ。トランザクションの章は内容も難しく量も多いので2日にかけて読むことにする。昔、業務アプリケーションやグループウェアを開発していたときはトランザクションを意識してコードを書いていたけど、Web アプリケーションを開発していると、あまりクリティカルな処理を実装することが少ないせいか、トランザクションをそんな意識しなくなったなと漠然と思えた。Cassandra だとトランザクションもないし。非同期 + 結果整合性で運用できるアプリケーションであればトランザクションいらないというのはそうなのかもしれない。</description><content>&lt;p>いつ寝たのか覚えてないけど、スマホをみたら1時過ぎに寝て6時に起きたことになっている。だいたいいつも5-6時には一度目が覚める。そのまま起きるときもあれば起きないときもある。今日はちゃんと起き上がったのは7-8時ぐらいだった気がする。夜にジョギング行こうかとも考えていただけど、帰って先に晩ご飯食べたら疲れてそのままだらだらしてた。&lt;/p>
&lt;h2 id="エージェント面談">エージェント面談&lt;/h2>
&lt;p>そろそろ次のお仕事を探す準備のために &lt;a href="https://www.engineer-factory.com/">エンジニアファクトリー&lt;/a> というサービスに登録してみた。&lt;a href="https://www.city.kobe.lg.jp/life/livelihood/kobejobport/index.html">KOBE JOB PORT&lt;/a> で紹介されていたのをみつけた。&lt;a href="/diary/diary/posts/2021/0930/#カジュアル面談準備">前に Remogu さんで探していた&lt;/a> ように、プロジェクトマネージャー案件か、リモートワークの開発者案件を探している。マネージャーだと常駐系の方が多かったり、実務経験必須だったりすることが多いため、神戸から通える範囲の案件も探してみようという意図になる。だいたいこんな内容を話してた。&lt;/p>
&lt;ul>
&lt;li>職務経歴の内容から個人を特定できないよう、エージェントがブラインド化した資料を企業に公開する&lt;/li>
&lt;li>単価が高い案件は東京の会社のリモートワークに多い&lt;/li>
&lt;li>契約は準委任契約がほとんどである&lt;/li>
&lt;li>法人として契約もできる&lt;/li>
&lt;li>6ヶ月や1年といった短期開発案件も多い&lt;/li>
&lt;/ul>
&lt;p>求職者の情報を匿名化する背景は、企業が直接交渉するのを避けるためなのかな？求人プラットフォームごとに情報入力しないといけないのが面倒なところ。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>7章トランザクションのうち、7.1と7.2を読んだ。トランザクションの章は内容も難しく量も多いので2日にかけて読むことにする。昔、業務アプリケーションやグループウェアを開発していたときはトランザクションを意識してコードを書いていたけど、Web アプリケーションを開発していると、あまりクリティカルな処理を実装することが少ないせいか、トランザクションをそんな意識しなくなったなと漠然と思えた。Cassandra だとトランザクションもないし。非同期 + 結果整合性で運用できるアプリケーションであればトランザクションいらないというのはそうなのかもしれない。&lt;/p></content></item><item><title>豆苗再生</title><link>/diary/posts/2021/1017/</link><pubDate>Sun, 17 Oct 2021 13:54:30 +0900</pubDate><guid>/diary/posts/2021/1017/</guid><description>3時に寝て8時半に起きた。夜眠れなくて、野菜サラダに目玉焼きをのせて食べたり、お茶をわかしてボトルに入れ替えたりしてた。休日だと時間に余裕があるせいか、空き時間に自炊してなにか作ることが多い。
豆苗の再生栽培 朝ご飯は野菜サラダと納豆を、お昼ご飯は豚肉としめじと2回目の豆苗を炒めたものを目玉焼きでとじたものを食べた。豆苗のパッケージに食べた後の根を水に浸しておけばまた生えてくるとあったので試しにやってみた。キッチンという日当たりのよくない場所で育てたせいか、薄い緑色の苗が生えてきた。
水に浸して2日目
水に浸して6日目
今回は適当に育てた。再生栽培のコツ を読んで次はもうちょっとちゃんと育ててみよう。
データ指向アプリケーションデザイン 6章パーティショニングを読んだ。昔からパーティショニングとシャーディングの違いはなんだろう？と漠然と思っていた。パーティションの設計 を読むと、3つのパーティション分割があげられている。
水平的パーティション分割 (シャーディング) 列方向のパーティション分割 機能的パーティション分割 パーティショニングは大規模なデータセットをデータ分割するための手法または概念として広い意味をもって使われるように読める。一方でシャーディングと呼ばれるものは水平パーティショニングのことを指している。いま分散データベースで一般的に使われている仕組みがそうなのかもしれない。本書では水平・垂直のパーティショニングの定義は行われていないが、次の説明が出てくる。おそらく主に水平パーティショニングを意図しているのではないかと思う。まとめはこんな感じ。
用語の混乱
ここで パーティション と呼んでいるものは、 MongoDB 、 Elasticsearch 、 SolrCloud では シャード と呼ばれています。これは HBase では リージョン 、 Bigtable では タブレット 、Cassandra や Riak では vnode 、 Couchbase では vBucket と呼ばれています。とはいえ最も確立されている用語は パーティショニング なので、本書ではこの呼び方を使っていきます。
パーティショニングも普通に開発をしていたらデータベースの設計で必要になるので身近な概念と言える。だいたいは知っている内容ではあったけど、パーティショニングとセカンダリインデックスの仕組みとか考えたことがなかった。Cassandra ではセカンダリインデックスをうまく設計しないとパフォーマンスに影響を与えることからあまり使われない傾向にあると思う。
大規模なデータセットを小さな部分集合にデータ分割することをパーティショニングと呼ぶ。パーティショニングが必要になるのは、単一のマシンで保存や処理をするのが現実的ではないほどのデータがある場合になる。パーティショニングが目標とするのは、データやクエリの負荷を複数のマシン間で均等に分配し、ホットスポット（不均衡に高い負荷がかかるノード）が生じないようにすること。パーティショニングが均等になっておらず、一部のパーティションが他に比べて多くのデータやクエリを受け持っているような状態は スキュー（skew） と呼ばれる。そのためには、データに適したパーティショニングのスキームを選択し、クラスタへのノードの追加やクラスタからのノードの削除が生じたときにパーティション群をリバランシングする。
パーティショニングのアプローチとして主に2つがある。
キーの範囲によるパーティショニング キーはソートされ、1つのパーティションには何らかの最小値と最大値の間にあるすべてのキーが保存される キーをソートすることで、範囲に対するクエリが効率的に処理できるというメリットがある アプリケーションが頻繁にアクセスするキーがソート順の中で近接していると、ホットスポットが生じるリスクがある 通常このアプローチでは、パーティションのリバランシングはパーティションが大きくなりすぎたときにその範囲を2つに分割することによって動的に行われる ハッシュパーティショニング ハッシュ関数がそれぞれのキーに対して適用され、1つのパーティションにはハッシュの一定の範囲を保存される この方法ではキーの順序が失われるので範囲に対するクエリは非効率になるが、負荷分散より均等にしやすい ハッシュによってパーティショニングを行う場合は、事前に固定数のパーティションを作成し、各ノードに複数のパーティションを割り当てておき、ノードの追加や削除が行われた場合にはパーティションをそのままあるノードから他のノードに移動させるのが一般的となる。また、動的パーティショニングも利用できる ハイブリッドなアプローチを取ることもできる。たとえば複合キーを使い、キーの一部でパーティションを決め、他の部分でソート順を決めるといったやり方がある。Cassandra のプライマリーキーはこのアプローチを採用している。また、セカンダリインデックスもパーティショニングする方法が2つある。</description><content>&lt;p>3時に寝て8時半に起きた。夜眠れなくて、野菜サラダに目玉焼きをのせて食べたり、お茶をわかしてボトルに入れ替えたりしてた。休日だと時間に余裕があるせいか、空き時間に自炊してなにか作ることが多い。&lt;/p>
&lt;h2 id="豆苗の再生栽培">豆苗の再生栽培&lt;/h2>
&lt;p>朝ご飯は野菜サラダと納豆を、お昼ご飯は豚肉としめじと2回目の豆苗を炒めたものを目玉焼きでとじたものを食べた。豆苗のパッケージに食べた後の根を水に浸しておけばまた生えてくるとあったので試しにやってみた。キッチンという日当たりのよくない場所で育てたせいか、薄い緑色の苗が生えてきた。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2021/1017_pea-sprout1.jpg"
alt="水に浸して2日目"/>&lt;figcaption>
&lt;p>水に浸して2日目&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2021/1017_pea-sprout2.jpg"
alt="水に浸して6日目"/>&lt;figcaption>
&lt;p>水に浸して6日目&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>今回は適当に育てた。&lt;a href="https://www.murakamifarm.com/myouken/grow/technique/#where">再生栽培のコツ&lt;/a> を読んで次はもうちょっとちゃんと育ててみよう。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>6章パーティショニングを読んだ。昔からパーティショニングとシャーディングの違いはなんだろう？と漠然と思っていた。&lt;a href="https://docs.microsoft.com/ja-jp/azure/architecture/best-practices/data-partitioning#designing-partitions">パーティションの設計&lt;/a> を読むと、3つのパーティション分割があげられている。&lt;/p>
&lt;ul>
&lt;li>水平的パーティション分割 (シャーディング)&lt;/li>
&lt;li>列方向のパーティション分割&lt;/li>
&lt;li>機能的パーティション分割&lt;/li>
&lt;/ul>
&lt;p>パーティショニングは大規模なデータセットをデータ分割するための手法または概念として広い意味をもって使われるように読める。一方でシャーディングと呼ばれるものは水平パーティショニングのことを指している。いま分散データベースで一般的に使われている仕組みがそうなのかもしれない。本書では水平・垂直のパーティショニングの定義は行われていないが、次の説明が出てくる。おそらく主に水平パーティショニングを意図しているのではないかと思う。まとめはこんな感じ。&lt;/p>
&lt;blockquote>
&lt;p>用語の混乱&lt;/p>
&lt;p>ここで パーティション と呼んでいるものは、 MongoDB 、 Elasticsearch 、 SolrCloud では &lt;strong>シャード&lt;/strong> と呼ばれています。これは HBase では &lt;strong>リージョン&lt;/strong> 、 Bigtable では &lt;strong>タブレット&lt;/strong> 、Cassandra や Riak では &lt;strong>vnode&lt;/strong> 、 Couchbase では &lt;strong>vBucket&lt;/strong> と呼ばれています。とはいえ最も確立されている用語は &lt;strong>パーティショニング&lt;/strong> なので、本書ではこの呼び方を使っていきます。&lt;/p>
&lt;/blockquote>
&lt;p>パーティショニングも普通に開発をしていたらデータベースの設計で必要になるので身近な概念と言える。だいたいは知っている内容ではあったけど、パーティショニングとセカンダリインデックスの仕組みとか考えたことがなかった。Cassandra ではセカンダリインデックスをうまく設計しないとパフォーマンスに影響を与えることからあまり使われない傾向にあると思う。&lt;/p>
&lt;blockquote>
&lt;p>大規模なデータセットを小さな部分集合にデータ分割することをパーティショニングと呼ぶ。パーティショニングが必要になるのは、単一のマシンで保存や処理をするのが現実的ではないほどのデータがある場合になる。パーティショニングが目標とするのは、データやクエリの負荷を複数のマシン間で均等に分配し、&lt;strong>ホットスポット&lt;/strong>（不均衡に高い負荷がかかるノード）が生じないようにすること。パーティショニングが均等になっておらず、一部のパーティションが他に比べて多くのデータやクエリを受け持っているような状態は &lt;strong>スキュー（skew）&lt;/strong> と呼ばれる。そのためには、データに適したパーティショニングのスキームを選択し、クラスタへのノードの追加やクラスタからのノードの削除が生じたときにパーティション群をリバランシングする。&lt;/p>
&lt;p>パーティショニングのアプローチとして主に2つがある。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>キーの範囲によるパーティショニング&lt;/strong>
&lt;ul>
&lt;li>キーはソートされ、1つのパーティションには何らかの最小値と最大値の間にあるすべてのキーが保存される&lt;/li>
&lt;li>キーをソートすることで、範囲に対するクエリが効率的に処理できるというメリットがある&lt;/li>
&lt;li>アプリケーションが頻繁にアクセスするキーがソート順の中で近接していると、ホットスポットが生じるリスクがある&lt;/li>
&lt;li>通常このアプローチでは、パーティションのリバランシングはパーティションが大きくなりすぎたときにその範囲を2つに分割することによって動的に行われる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>ハッシュパーティショニング&lt;/strong>
&lt;ul>
&lt;li>ハッシュ関数がそれぞれのキーに対して適用され、1つのパーティションにはハッシュの一定の範囲を保存される&lt;/li>
&lt;li>この方法ではキーの順序が失われるので範囲に対するクエリは非効率になるが、負荷分散より均等にしやすい&lt;/li>
&lt;li>ハッシュによってパーティショニングを行う場合は、事前に固定数のパーティションを作成し、各ノードに複数のパーティションを割り当てておき、ノードの追加や削除が行われた場合にはパーティションをそのままあるノードから他のノードに移動させるのが一般的となる。また、動的パーティショニングも利用できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>ハイブリッドなアプローチを取ることもできる。たとえば複合キーを使い、キーの一部でパーティションを決め、他の部分でソート順を決めるといったやり方がある。Cassandra のプライマリーキーはこのアプローチを採用している。また、セカンダリインデックスもパーティショニングする方法が2つある。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ドキュメントによってパーティショニングされたインデックス（ローカルインデックス）&lt;/strong>
&lt;ul>
&lt;li>セカンダリインデックスをプライマリキー及び値と同じパーティションに保存する&lt;/li>
&lt;li>書き込みの際に更新しなければならないパーティションが1つですむ&lt;/li>
&lt;li>セカンダリインデックスの読み取りにはすべてのパーティションに対する &lt;strong>スキャッタ/ギャザー&lt;/strong> が必要となる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>語によってパーティショニングされたインデックス（グローバルインデックス）&lt;/strong>
&lt;ul>
&lt;li>セカンダリインデックスはインデックスが張られた値を使って独立にパーティショニングされる&lt;/li>
&lt;li>セカンダリインデックスのエントリには、プライマリキーのあらゆるパーティションのレコード群が含まれる&lt;/li>
&lt;li>ドキュメントが書き込まれる際には、セカンダリインデックスの複数のパーティションを更新しなければならない&lt;/li>
&lt;li>読み取りは単一のパーティションだけで処理できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>クエリを適切なパーティションにルーティングする手法は、データベースに限った話題ではなく、&lt;strong>サービスディスカバリ&lt;/strong> と呼ばれる一般的な問題である。有名な OSS として &lt;a href="https://zookeeper.apache.org/">ZooKeeper&lt;/a> がある。これにはシンプルなパーティションを認識するロードバランシングから、洗練された並列クエリ実行エンジンまで様々である。すべてのパーティションは、ほぼ独立に動作できるように設計されている。パーティショニングされたデータベースが複数のマシンにまでスケールできるのはそのおかげである。&lt;/p>
&lt;/blockquote></content></item><item><title>日本酒いただきもの</title><link>/diary/posts/2021/1015/</link><pubDate>Fri, 15 Oct 2021 09:39:41 +0900</pubDate><guid>/diary/posts/2021/1015/</guid><description>0時に寝て6時に起きた。だいたい夜中に2-3回は起きるのが普通になりつつあって、前日ジョギングしてたせいか腰やお尻の筋肉に張りがあったので3時頃起きてストレッチして張りの箇所を伸ばしたりしながら寝てた。午前中、いけさんから上等なお酒をいただいた。造り酒屋の一族らしい。感謝。
朝活 朝起きる目的にいいかも？と思って Webデザイントレンドのよりみち の金朝つめとぎに参加してみた。やっぱり目的があれば6時に起きれる。でも、終わってから1時間ほど寝てたので今日はプラスマイナスゼロ。前回の朝活 と同様、ミクロ経済学の入門書を読んでた。第2章の予算線と最適化を読んだ。経済学とはこういうものだという説明が腑におちた。当たるかどうかよりも考え方を理解しておく方が大事なように思えた。
ときどき経済学に対して「経済学が想定するほど実際の消費者は懸命に選択しているとは限らない」といった批判がなされることがある。でもこれまでの説明から明らかなように、その批判は勘違いにもとづくものだ。批判したいなら「経済学は、消費者がはたから見て確実に愚かな選択をしても、それを非難しない傾向が強い」というほうが適切だろう。
もう1つおもしろかったのがこの一節。
予算線と選好を用いたミクロ経済学的分析は、現金給付のよさを指摘する。ただし、制度の悪用、人々の支持、必要原理といったことを考えると、現物給付のほうが好ましいとなる。現金給付と現物給付のどちらが総合的によいのか、これらの話だけで結論づけることはできない。とはいえここで、ミクロ経済学が有用な政策分析ツールたりえること、またミクロ経済学だけで政策を論じるのは不十分ということが分かったのは十分な収穫である。
人間の活動を予測するような学問の便宜上、前提条件や制約を課している。経済という人間にとって重要な社会システムを扱う経済学への期待値が大き過ぎるがために経済学の言うことが当たった・当たってないといった議論になりがちなのかもしれないと思えた。
データ指向アプリケーションデザイン 5章レプリケーションを読んだ。200ページ超えたことで1/3を読み終えた。まだまだ先は長い。
シングルリーダーレプリケーションは一般的なものだし、Cassandra の運用をしていたのでリーダーレスレプリケーションもだいたいは知っていた。並行書き込みの問題は意識したことがなかった。そういう状況が発生するアプリケーションにおいてはとても難しい問題なことが理解できた。Cassandra で採用されている衝突解決アルゴリズムは 最後の書き込みを勝たせる（last write wins、LWW） というものであり、これで十分なように考えていたけど、不十分なケースもあることがわかった。
レプリケーションとは、ネットワークで接続された複数のマシンに同じデータのコピーを保持しておくこと。
データを地理的にユーザーの近くで保持しておく =&amp;gt; レイテンシを下げる 一部に障害があってもシステムが動作し続けられる =&amp;gt; 可用性を高める 読み取りクエリを処理するマシンをスケールアウトする =&amp;gt; スループットを高める レプリケーションはいくつかの目的で使われる。
高可用性/耐障害性 レイテンシ スケーラビリティ 対象のデータが時間が経っても変化しないのであれば、レプリケーションは容易。単にデータのコピーを各ノードに一度だけコピーすれば完了するから。レプリケーションの難しさは、すべてレプリケーションされたデータへの変更の扱いから生じる。変更をノード間でレプリケーションするのに広く使われているアルゴリズムは次の3つになる。
シングルリーダーレプリケーション クライアントはすべての書き込みを1つのノード（リーダー）に送り、リーダーはデータ変更イベントのストリームを他のレプリカ（フォロワー）に送る 読み取りは任意のレプリカから行えるが、フォロワーから読み取るデータは古い可能性がある マルチリーダーレプリケーション クライアント群は、それぞれの書き込みを複数あるリーダーノードのいずれかに送信する これらのリーダーノードはどれも書き込みを受け付ける リーダー群は、データ変更イベントのストリームをお互いに、そしてすべてのフォロワーノードに送信する リーダーレスレプリケーション クライアントは、それぞれの書き込みを複数のノードに送信し、古いデータを持つノードを修正するために読み取りを複数のノードから並列に行う データベースのレプリケーションの原理は1970年代から研究されていてそれほど変わっていない。とはいえ、分散データベースがメインストリームで利用されるようになったのは最近のこと。アプリケーション開発者の経験不足により 結果整合性 のような問題に関しては多くの誤解が生じた。いずれのレプリケーションのアプローチにもメリットとデメリットがある。シングルリーダーレプリケーションは理解しやすく、衝突解決を気にする必要がないことから、広く使われている。マルチリーダーとリーダーレスのレプリケーションは、ノードの障害、ネットワークの障害、レイテンシのスパイクがあっても頑健になる。しかし障害の理由を説明するのが難しく、一貫性についても弱い保証しか示せない。
レプリケーションは、 同期 で行うことも 非同期 で行うこともできる。どちらにするのかは、障害があったときのシステムの振る舞いに大きく影響する。非同期のレプリケーションは、システムがスムーズに動作しているときには高速に動作するが、重要なのはレプリケーションのラグが大きくなったり、サーバーに障害が生じたりしたときに何が起こるのかを理解しておくことになる。リーダーに障害が発生し、非同期に更新されていたフォロワーを新しいリーダーに昇格させたら、直前にコミットされたデータは失われてしまう可能性がある。</description><content>&lt;p>0時に寝て6時に起きた。だいたい夜中に2-3回は起きるのが普通になりつつあって、前日ジョギングしてたせいか腰やお尻の筋肉に張りがあったので3時頃起きてストレッチして張りの箇所を伸ばしたりしながら寝てた。午前中、いけさんから上等なお酒をいただいた。造り酒屋の一族らしい。感謝。&lt;/p>
&lt;h2 id="朝活">朝活&lt;/h2>
&lt;p>朝起きる目的にいいかも？と思って &lt;a href="https://www.youtube.com/channel/UC1rVx0vAg66su1WvH3X-RJg">Webデザイントレンドのよりみち&lt;/a> の金朝つめとぎに参加してみた。やっぱり目的があれば6時に起きれる。でも、終わってから1時間ほど寝てたので今日はプラスマイナスゼロ。&lt;a href="/diary/diary/posts/2021/1013/#朝活">前回の朝活&lt;/a> と同様、ミクロ経済学の入門書を読んでた。第2章の予算線と最適化を読んだ。経済学とはこういうものだという説明が腑におちた。当たるかどうかよりも考え方を理解しておく方が大事なように思えた。&lt;/p>
&lt;blockquote>
&lt;p>ときどき経済学に対して「経済学が想定するほど実際の消費者は懸命に選択しているとは限らない」といった批判がなされることがある。でもこれまでの説明から明らかなように、その批判は勘違いにもとづくものだ。批判したいなら「経済学は、消費者がはたから見て確実に愚かな選択をしても、それを非難しない傾向が強い」というほうが適切だろう。&lt;/p>
&lt;/blockquote>
&lt;p>もう1つおもしろかったのがこの一節。&lt;/p>
&lt;blockquote>
&lt;p>予算線と選好を用いたミクロ経済学的分析は、現金給付のよさを指摘する。ただし、制度の悪用、人々の支持、必要原理といったことを考えると、現物給付のほうが好ましいとなる。現金給付と現物給付のどちらが総合的によいのか、これらの話だけで結論づけることはできない。とはいえここで、ミクロ経済学が有用な政策分析ツールたりえること、またミクロ経済学だけで政策を論じるのは不十分ということが分かったのは十分な収穫である。&lt;/p>
&lt;/blockquote>
&lt;p>人間の活動を予測するような学問の便宜上、前提条件や制約を課している。経済という人間にとって重要な社会システムを扱う経済学への期待値が大き過ぎるがために経済学の言うことが当たった・当たってないといった議論になりがちなのかもしれないと思えた。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>5章レプリケーションを読んだ。200ページ超えたことで1/3を読み終えた。まだまだ先は長い。&lt;/p>
&lt;p>シングルリーダーレプリケーションは一般的なものだし、Cassandra の運用をしていたのでリーダーレスレプリケーションもだいたいは知っていた。並行書き込みの問題は意識したことがなかった。そういう状況が発生するアプリケーションにおいてはとても難しい問題なことが理解できた。Cassandra で採用されている衝突解決アルゴリズムは &lt;strong>最後の書き込みを勝たせる（last write wins、LWW）&lt;/strong> というものであり、これで十分なように考えていたけど、不十分なケースもあることがわかった。&lt;/p>
&lt;blockquote>
&lt;p>レプリケーションとは、ネットワークで接続された複数のマシンに同じデータのコピーを保持しておくこと。&lt;/p>
&lt;ul>
&lt;li>データを地理的にユーザーの近くで保持しておく =&amp;gt; レイテンシを下げる&lt;/li>
&lt;li>一部に障害があってもシステムが動作し続けられる =&amp;gt; 可用性を高める&lt;/li>
&lt;li>読み取りクエリを処理するマシンをスケールアウトする =&amp;gt; スループットを高める&lt;/li>
&lt;/ul>
&lt;p>レプリケーションはいくつかの目的で使われる。&lt;/p>
&lt;ul>
&lt;li>高可用性/耐障害性&lt;/li>
&lt;li>レイテンシ&lt;/li>
&lt;li>スケーラビリティ&lt;/li>
&lt;/ul>
&lt;p>対象のデータが時間が経っても変化しないのであれば、レプリケーションは容易。単にデータのコピーを各ノードに一度だけコピーすれば完了するから。レプリケーションの難しさは、すべてレプリケーションされたデータへの変更の扱いから生じる。変更をノード間でレプリケーションするのに広く使われているアルゴリズムは次の3つになる。&lt;/p>
&lt;ul>
&lt;li>シングルリーダーレプリケーション
&lt;ul>
&lt;li>クライアントはすべての書き込みを1つのノード（リーダー）に送り、リーダーはデータ変更イベントのストリームを他のレプリカ（フォロワー）に送る&lt;/li>
&lt;li>読み取りは任意のレプリカから行えるが、フォロワーから読み取るデータは古い可能性がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>マルチリーダーレプリケーション
&lt;ul>
&lt;li>クライアント群は、それぞれの書き込みを複数あるリーダーノードのいずれかに送信する&lt;/li>
&lt;li>これらのリーダーノードはどれも書き込みを受け付ける&lt;/li>
&lt;li>リーダー群は、データ変更イベントのストリームをお互いに、そしてすべてのフォロワーノードに送信する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>リーダーレスレプリケーション
&lt;ul>
&lt;li>クライアントは、それぞれの書き込みを複数のノードに送信し、古いデータを持つノードを修正するために読み取りを複数のノードから並列に行う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>データベースのレプリケーションの原理は1970年代から研究されていてそれほど変わっていない。とはいえ、分散データベースがメインストリームで利用されるようになったのは最近のこと。アプリケーション開発者の経験不足により &lt;strong>結果整合性&lt;/strong> のような問題に関しては多くの誤解が生じた。いずれのレプリケーションのアプローチにもメリットとデメリットがある。シングルリーダーレプリケーションは理解しやすく、衝突解決を気にする必要がないことから、広く使われている。マルチリーダーとリーダーレスのレプリケーションは、ノードの障害、ネットワークの障害、レイテンシのスパイクがあっても頑健になる。しかし障害の理由を説明するのが難しく、一貫性についても弱い保証しか示せない。&lt;/p>
&lt;p>レプリケーションは、 &lt;strong>同期&lt;/strong> で行うことも &lt;strong>非同期&lt;/strong> で行うこともできる。どちらにするのかは、障害があったときのシステムの振る舞いに大きく影響する。非同期のレプリケーションは、システムがスムーズに動作しているときには高速に動作するが、重要なのはレプリケーションのラグが大きくなったり、サーバーに障害が生じたりしたときに何が起こるのかを理解しておくことになる。リーダーに障害が発生し、非同期に更新されていたフォロワーを新しいリーダーに昇格させたら、直前にコミットされたデータは失われてしまう可能性がある。&lt;/p>
&lt;p>レプリケーションラグが生じている状況下でアプリケーションがどのように振る舞うべきなのかを決める際に役立つ一貫性モデル。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>書き込み後読み取り (read-your-writes)&lt;/strong>
&lt;ul>
&lt;li>ユーザーは、自分自身が投入したデータを常に見れる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>モノトニック読み取り (monotonic reads)&lt;/strong>
&lt;ul>
&lt;li>ある時点のデータをユーザーが一度見たら、それ以前の時点のデータは見れない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>一貫性のあるプレフィックス読み取り&lt;/strong>
&lt;ul>
&lt;li>ユーザーは、たとえば質問とその質問への回答を適切な順序でといったように、適切な因果関係を保持した状態でデータを見れる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>マルチリーダーとリーダーレスのアプローチは本質的に並行性の問題を抱えている。複数の書き込みが並列に行われることがあるので、衝突が生じる場合がある。ある操作が他の操作よりも先に行われたのか、あるいはそれらが並行して行われたかを判断するためのアルゴリズムについて説明されている。&lt;/p>
&lt;/blockquote>
&lt;h2 id="slack-apps-の調査">Slack apps の調査&lt;/h2>
&lt;p>&lt;a href="https://www.instagram.com/workstreams.ai/">Workstreams.ai&lt;/a> を試してみた。&lt;/p>
&lt;blockquote>
&lt;p>Results-driven task management for Slack, Microsoft Teams and Google&lt;/p>
&lt;/blockquote>
&lt;p>結果駆動タスクマネジメントという聞いたことない用語が書いてある。SaaS 型の Web アプリケーションとしての課題管理システムとチャットツールとの連携が密になったプロダクトにみえる。UI もよく作り込まれている。Workstreams.ai のアカウント管理は &lt;a href="https://api.slack.com/authentication/sign-in-with-slack">Sign in with Slack&lt;/a> を使っている。ドキュメントによると openid connect と oauth 2.0 の仕組みを組み合わせているのかな。認証よくわかってないので背景も勉強しないといけない。簡単にタスク作成やコメント、更新などを Slack クライアントと Web アプリケーション上で触ってみた。&lt;/p>
&lt;p>もう1つ &lt;a href="https://slack.com/app-pages/google-sheets">Google Sheets for Workflow Builder&lt;/a> というのも試してみた。ワークフロービルダーのステップに簡単に Google Sheet との連携を実装できるのでめっちゃ簡単。ワークフロービルダーは本当によくできているな。&lt;/p>
&lt;h2 id="ジョギング">ジョギング&lt;/h2>
&lt;p>今日は調子はよかったけど、お仕事の区切りがよかったので19時に終えて近所の公園にジョギングしてきた。昨日も走ってたのでやや筋肉痛が残りつつ、走り始めは筋肉がきしむ感じだったけど、走っているうちに体があたたまってきて気にならなくなった。時間帯は同じだけど、昨日より陸上部の人たちが半分ぐらい少なかった。曜日によって違うのかなぁ。&lt;/p></content></item><item><title>霖</title><link>/diary/posts/2021/1014/</link><pubDate>Thu, 14 Oct 2021 08:31:32 +0900</pubDate><guid>/diary/posts/2021/1014/</guid><description>0時過ぎに寝て7時に起きた。けれど、なんかしんどくて起き上がれなくてそのまま2度寝した。1時間ほど寝たらすぐに起きれた。あのしんどさは何だったのか。とはいえ、気付いたら8時半にはオフィスにいたので普段の仕事始めと変わらない見た目になった。お昼に体温を測っていたら37.1℃になってたので熱っぽい雰囲気。日中は特にしんどくはないんだけど。
データ指向アプリケーションデザイン 4章エンコーディングと進化を読んだ。だんだん内容が難しくなってきて読むのに時間がかかる。これで第一部のデータシステムの基礎を読了した。4章のまとめ。
データシステムの変更のしやすさ、アジリティのことを本書では 進化性 を呼んでいる。
進化性を高めるには、システムのバージョンアップが容易にできなくてはならない。このとき、サーバーサイドアプリケーションは、大抵の場合、一度にすべてのノードをのバージョンアップができないことから、 ローリングアップグレード という手法を用いる。ローリングアップグレードを可能にするには、データフォーマットやスキーマの変更に対して、新旧どちらのフォーマットも、新旧どちらのコードからも扱えないといけない。データフォーマットやスキーマの 前方/後方互換性 を維持することが進化性を高めることに大きく影響する。
メモリを共有していないプロセス間でデータを渡すとき、そのデータをバイト列へエンコードしないといけない。通常プログラムはデータを (少なくとも) 2つの異なる表現で扱う。
CPU によるアクセスや操作が効率的になるよう最適化されてメモリ内で表現される ファイルやネットワーク経由でデータをやり取りするにはバイト列にエンコードしないといけない
この表現はメモリ内のデータ構造とはまったく異なる この2つの表現の間で何らかの変換が必要になる。インメモリの表現からバイトの並びへの変換は エンコーディング (シリアライゼーション、マーシャリングとも呼ぶ) 、その逆は デコーディング (パース、デシリアライぜーション、アンマーシャリングとも呼ぶ) と呼ぶ。
データエンコーディングフォーマットと、それらの互換性に関する特性。
プログラミング言語固有のエンコーディングは1つのプログラミング言語に限定され、しばしば前方及び後方互換性を欠く JSON, XML, CSV といったテキストフォーマットは広く利用されており、その互換性は利用の方法に依存する オプションのスキーマ言語はあるが、それらは助けになることもあればむしろ障害になることもある これらのフォーマットはデータ型について多少の曖昧さがあるので、数値やバイナリ文字列などについては注意が必要 thrift, protocol buﬀers, aro といったスキーマを持つバイナリフォーマットではコンパクトで効率的なエンコーディングが可能であり、前方及び後方互換性のセマンティクスも明確に定義されている これらのスキーマは、ドキュメンテーションと静的型付き言語でのコード生成に役立つ ただし、バイナリフォーマットにはデコードしなければ人にはデータが読めないという欠点もある データフローの形態とエンコーディング。
データベースでは、データベースへの書き込みを行うプロセスがデータをエンコードし、データベースからの読み取りを行うプロセスがそのデータをデコードする RPC と REST API では、クライアントがリクエストをエンコードし、サーバーはそのリクエストをデコードしてレスポンスをエンコードする。そして最後にクライアントがレスポンスをデコードする 非同期のメッセージパッシング（メッセージブローカーあるいはアクター）では、ノードはお互いにメッセージを送信することによって通信し、送信側がメッセージをエンコードし、受信側がそのメッセージをデコードする kafka などを使ったイベント駆動アーキテクチャはこの形態になる 多少の注意を払うことで前方/後方互換性やローリングアップグレードは十分に実現可能となる。
霖 (ながめ) プロダクトの名前を考えるために万葉集を眺めてた。ふとみつけた 霖 ということばを気に入った。一文字だと「ながめ」または「ながあめ」と読む。霖雨と書くと「りんう」と読むらしい。万葉集では次の和歌で詠まれている。和歌では「長雨」と「眺め」をかけて使うのが常套句らしい。また古文でいうところの眺めはぼんやり見ながら物思いに耽るという意味になるそうだ。</description><content>&lt;p>0時過ぎに寝て7時に起きた。けれど、なんかしんどくて起き上がれなくてそのまま2度寝した。1時間ほど寝たらすぐに起きれた。あのしんどさは何だったのか。とはいえ、気付いたら8時半にはオフィスにいたので普段の仕事始めと変わらない見た目になった。お昼に体温を測っていたら37.1℃になってたので熱っぽい雰囲気。日中は特にしんどくはないんだけど。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>4章エンコーディングと進化を読んだ。だんだん内容が難しくなってきて読むのに時間がかかる。これで第一部のデータシステムの基礎を読了した。4章のまとめ。&lt;/p>
&lt;blockquote>
&lt;p>データシステムの変更のしやすさ、アジリティのことを本書では &lt;strong>進化性&lt;/strong> を呼んでいる。&lt;/p>
&lt;p>進化性を高めるには、システムのバージョンアップが容易にできなくてはならない。このとき、サーバーサイドアプリケーションは、大抵の場合、一度にすべてのノードをのバージョンアップができないことから、 &lt;strong>ローリングアップグレード&lt;/strong> という手法を用いる。ローリングアップグレードを可能にするには、データフォーマットやスキーマの変更に対して、新旧どちらのフォーマットも、新旧どちらのコードからも扱えないといけない。データフォーマットやスキーマの &lt;strong>前方/後方互換性&lt;/strong> を維持することが進化性を高めることに大きく影響する。&lt;/p>
&lt;p>メモリを共有していないプロセス間でデータを渡すとき、そのデータをバイト列へエンコードしないといけない。通常プログラムはデータを (少なくとも) 2つの異なる表現で扱う。&lt;/p>
&lt;ol>
&lt;li>CPU によるアクセスや操作が効率的になるよう最適化されてメモリ内で表現される&lt;/li>
&lt;li>ファイルやネットワーク経由でデータをやり取りするにはバイト列にエンコードしないといけない&lt;br>
この表現はメモリ内のデータ構造とはまったく異なる&lt;/li>
&lt;/ol>
&lt;p>この2つの表現の間で何らかの変換が必要になる。インメモリの表現からバイトの並びへの変換は &lt;strong>エンコーディング&lt;/strong> (シリアライゼーション、マーシャリングとも呼ぶ) 、その逆は &lt;strong>デコーディング&lt;/strong> (パース、デシリアライぜーション、アンマーシャリングとも呼ぶ) と呼ぶ。&lt;/p>
&lt;p>データエンコーディングフォーマットと、それらの互換性に関する特性。&lt;/p>
&lt;ul>
&lt;li>プログラミング言語固有のエンコーディングは1つのプログラミング言語に限定され、しばしば前方及び後方互換性を欠く&lt;/li>
&lt;li>JSON, XML, CSV といったテキストフォーマットは広く利用されており、その互換性は利用の方法に依存する
&lt;ul>
&lt;li>オプションのスキーマ言語はあるが、それらは助けになることもあればむしろ障害になることもある&lt;/li>
&lt;li>これらのフォーマットはデータ型について多少の曖昧さがあるので、数値やバイナリ文字列などについては注意が必要&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>thrift, protocol buﬀers, aro といったスキーマを持つバイナリフォーマットではコンパクトで効率的なエンコーディングが可能であり、前方及び後方互換性のセマンティクスも明確に定義されている
&lt;ul>
&lt;li>これらのスキーマは、ドキュメンテーションと静的型付き言語でのコード生成に役立つ&lt;/li>
&lt;li>ただし、バイナリフォーマットにはデコードしなければ人にはデータが読めないという欠点もある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>データフローの形態とエンコーディング。&lt;/p>
&lt;ul>
&lt;li>データベースでは、データベースへの書き込みを行うプロセスがデータをエンコードし、データベースからの読み取りを行うプロセスがそのデータをデコードする&lt;/li>
&lt;li>RPC と REST API では、クライアントがリクエストをエンコードし、サーバーはそのリクエストをデコードしてレスポンスをエンコードする。そして最後にクライアントがレスポンスをデコードする&lt;/li>
&lt;li>非同期のメッセージパッシング（メッセージブローカーあるいはアクター）では、ノードはお互いにメッセージを送信することによって通信し、送信側がメッセージをエンコードし、受信側がそのメッセージをデコードする
&lt;ul>
&lt;li>kafka などを使ったイベント駆動アーキテクチャはこの形態になる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>多少の注意を払うことで前方/後方互換性やローリングアップグレードは十分に実現可能となる。&lt;/p>
&lt;/blockquote>
&lt;h2 id="霖-ながめ">霖 (ながめ)&lt;/h2>
&lt;p>プロダクトの名前を考えるために万葉集を眺めてた。ふとみつけた &lt;strong>霖&lt;/strong> ということばを気に入った。一文字だと「ながめ」または「ながあめ」と読む。霖雨と書くと「りんう」と読むらしい。万葉集では次の和歌で詠まれている。和歌では「長雨」と「眺め」をかけて使うのが常套句らしい。また古文でいうところの眺めはぼんやり見ながら物思いに耽るという意味になるそうだ。&lt;/p>
&lt;blockquote>
&lt;p>4217 卯(う)の花を　腐(くた)す霖雨(ながめ)の　始水(みずはな)に　寄るこつみなす　寄らむ児(こ)もがも　大伴家持&lt;/p>
&lt;p>(現代語訳) 卯の花を腐らせるほどに痛めつける長雨、この雨のせいで流れ出す大水の鼻先に寄りつく木っ端のように、私に寄り添ってくれる娘でもいてくれたらなあ&lt;/p>
&lt;p>&lt;a href="https://www.kadokawa.co.jp/product/200803000453/">新版　万葉集　四　現代語訳付き&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">この季節の長雨には「卯の花腐し」という別名があります。画像は改元でも話題となった『万葉集』より「卯の花を腐す霖雨の…」という大伴家持の和歌。初夏の卯の花が枯れてしまうような長雨の表現です。詳しくは7月から始まる企画展「雨に詠えば―空模様の古典文学―」にて！ &lt;a href="https://t.co/ZyU1h8TyNv">https://t.co/ZyU1h8TyNv&lt;/a> &lt;a href="https://t.co/VaXKX0FGEI">pic.twitter.com/VaXKX0FGEI&lt;/a>&lt;/p>&amp;mdash; 国立公文書館 (@JPNatArchives) &lt;a href="https://twitter.com/JPNatArchives/status/1130805663444213760?ref_src=twsrc%5Etfw">May 21, 2019&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="ジョギング">ジョギング&lt;/h2>
&lt;p>あまり調子がよくなかったので19時にお仕事を終えて近所の公園にジョギングに行ってきた。ワクチンを接種してから運動を控えていたのでジョギングしたのは初めてかな。2-3日に1回ぐらいの頻度でジョギングしている。ワクチン接種した週はウォーキングに留め、次の週は実家で田んぼ仕事でバテてて、今週は初めて行ってきた。ちょっと早い時間帯だったせいか、2つの陸上部が練習していてやや人が多かった。400m級のトラックがあって陸上部の人たちが練習している。練習の邪魔にならないよう、トラックの内側を20-30分とぼとぼジョギングしている。疲れたら歩きながらなのでそんなに距離は走ってない。ジョギング終えてから30分ぐらいストレッチをした。&lt;/p></content></item><item><title>vimgrep 検索の嬉しさ</title><link>/diary/posts/2021/1013/</link><pubDate>Wed, 13 Oct 2021 09:02:46 +0900</pubDate><guid>/diary/posts/2021/1013/</guid><description>2時頃に寝て6時に起きる。普段、日記は vim で書いている。ちょっとした過去の日記の検索に vimgrep でこと足りるのが嬉しい。テキストで日記を書いていることの利点かな。夜に fin-pyコードリーディング会#4 に参加した。事前に hackmd に発表内容のメモを書いてた。いろんな発表者の視点があってコードリーディングのイベントはおもしろかった。
朝活 【三宮.dev オンライン】リモート朝活もくもく会 に参加してみた。何もなかったらだいたい7時頃に起きるのがなにか目的があると6時に起きれる。人体の不思議。せっかく起きたので 前に More Joel on Software を読んだとき に学生向けのアドバイスにあったミクロ経済学の勉強のためにその入門書を読み始めた。参加者が勉強会の常連ばかりだったので朝からわりと雑談してた。2人転職するという話で2人とも東京の会社でフルリモートワークで働くらしい。働き方が変わったなと感じる。その後、第1章の無差別曲線を読んだ。
YouTube 配信と集中力 あんちぽさんの 2021年10月9日 の日記でスライド作成の興がのらないので YouTube 配信しながらやったら集中できてよかったと書いてあったのでちょっと眺めてみた。なんかスライドの作成のやり方とか、自分と違うのかな？とか思いながらみたけど、やり方自体は普通だった。ただ集中できてよかったとあるので普段のやり方とは異なることをすることに意義があるのかな？とも思えた。試しに YouTube Live やってみようとしたら初期設定？に24時間かかるとのこと。代わりに kazam というスクリーンリコーダーの使い方を調べてた。勉強会で作業したログとかを録画しておいてなにかに使えたりするかもしれない。
データ指向アプリケーションデザイン 半日ほどかかって3章ストレージと抽出を読んだ。読みながら書いているので時間がかかる。今日はこれだけ。まとめはこんな感じ。
データベースのシステムには2つの用途があり、その特性やパフォーマンスを最適化するためにストレージエンジンやデータ構造が異なるもので運用されるようになってきた。
オンライントランザクション処理 (OLTP) 行指向、トランザクション処理 オンライン分析処理 (OLAP) 列指向、分析クエリ OLTP には2つの主要なストレージエンジンがある。
B ツリー 1970年代からあり、成熟していて且つ効率的なインデックスのデータ構造 LSM ツリー 比較的最近開発された、ディスク上でのランダムアクセスをシステム的にシーケンシャルアクセスに変換して、書き込みのスループットを高める手法。もとは Google の BigTable の論文？ OLAP の典型的なデータウェアハウスの高レベルでのアーキテクチャでは、大量の行をシーケンシャルにスキャンしなければならないクエリの場合、インデックスはあまり関係なく、データを非常にコンパクトにエンコードし、クエリがディスクから読まなければならないデータの量を最小限にとどめることが重要となる。この目標を達成するのに列指向のストレージが役立つ。</description><content>&lt;p>2時頃に寝て6時に起きる。普段、日記は vim で書いている。ちょっとした過去の日記の検索に &lt;code>vimgrep&lt;/code> でこと足りるのが嬉しい。テキストで日記を書いていることの利点かな。夜に &lt;a href="https://fin-py.connpass.com/event/226933/">fin-pyコードリーディング会#4&lt;/a> に参加した。事前に &lt;a href="https://hackmd.io/bFBFaPbYS1Kqfc97HMlp7Q?view">hackmd&lt;/a> に発表内容のメモを書いてた。いろんな発表者の視点があってコードリーディングのイベントはおもしろかった。&lt;/p>
&lt;h2 id="朝活">朝活&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/227678/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> に参加してみた。何もなかったらだいたい7時頃に起きるのがなにか目的があると6時に起きれる。人体の不思議。せっかく起きたので &lt;a href="/diary/diary/posts/2021/0929/#joel-on-software">前に More Joel on Software を読んだとき&lt;/a> に学生向けのアドバイスにあったミクロ経済学の勉強のためにその入門書を読み始めた。参加者が勉強会の常連ばかりだったので朝からわりと雑談してた。2人転職するという話で2人とも東京の会社でフルリモートワークで働くらしい。働き方が変わったなと感じる。その後、第1章の無差別曲線を読んだ。&lt;/p>
&lt;h2 id="youtube-配信と集中力">YouTube 配信と集中力&lt;/h2>
&lt;p>あんちぽさんの &lt;a href="https://kentarokuribayashi.com/journal/2021/10/09/2021%e5%b9%b410%e6%9c%889%e6%97%a5">2021年10月9日&lt;/a> の日記でスライド作成の興がのらないので YouTube 配信しながらやったら集中できてよかったと書いてあったのでちょっと眺めてみた。なんかスライドの作成のやり方とか、自分と違うのかな？とか思いながらみたけど、やり方自体は普通だった。ただ集中できてよかったとあるので普段のやり方とは異なることをすることに意義があるのかな？とも思えた。試しに YouTube Live やってみようとしたら初期設定？に24時間かかるとのこと。代わりに &lt;a href="https://launchpad.net/kazam">kazam&lt;/a> というスクリーンリコーダーの使い方を調べてた。勉強会で作業したログとかを録画しておいてなにかに使えたりするかもしれない。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>半日ほどかかって3章ストレージと抽出を読んだ。読みながら書いているので時間がかかる。今日はこれだけ。まとめはこんな感じ。&lt;/p>
&lt;blockquote>
&lt;p>データベースのシステムには2つの用途があり、その特性やパフォーマンスを最適化するためにストレージエンジンやデータ構造が異なるもので運用されるようになってきた。&lt;/p>
&lt;ul>
&lt;li>オンライントランザクション処理 (OLTP)
&lt;ul>
&lt;li>行指向、トランザクション処理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>オンライン分析処理 (OLAP)
&lt;ul>
&lt;li>列指向、分析クエリ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>OLTP には2つの主要なストレージエンジンがある。&lt;/p>
&lt;ul>
&lt;li>B ツリー
&lt;ul>
&lt;li>1970年代からあり、成熟していて且つ効率的なインデックスのデータ構造&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>LSM ツリー
&lt;ul>
&lt;li>比較的最近開発された、ディスク上でのランダムアクセスをシステム的にシーケンシャルアクセスに変換して、書き込みのスループットを高める手法。もとは Google の BigTable の論文？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>OLAP の典型的なデータウェアハウスの高レベルでのアーキテクチャでは、大量の行をシーケンシャルにスキャンしなければならないクエリの場合、インデックスはあまり関係なく、データを非常にコンパクトにエンコードし、クエリがディスクから読まなければならないデータの量を最小限にとどめることが重要となる。この目標を達成するのに列指向のストレージが役立つ。&lt;/p>
&lt;/blockquote>
&lt;p>過去に Cassandra を使ったプロダクトの開発に関わっていたから B ツリーと LSM ツリーの概要は知っていて3章で書いてあることはだいたい理解できた。データウェアハウスに関しては、前にお手伝いしていた会社で普通のログを Amazon Athena で処理すると1時間とかかかって分析クエリが Parquet に変換すると数分で完了したりするのを目の当たりにしてた。分析処理で読み込むデータ量を削減する列指向の考え方は理解しておく必要がある。行指向のデータを列指向フォーマットである &lt;a href="https://parquet.apache.org/">Parquet&lt;/a> に変換する &lt;a href="https://github.com/reproio/columnify">columnify&lt;/a> のコードも読んだことがあったので内容のイメージはできるけど、実務経験が少ないと全体像がわかっておらず、本書を読みながら学び直ししてた。&lt;/p></content></item><item><title>やや疲れ気味</title><link>/diary/posts/2021/1012/</link><pubDate>Tue, 12 Oct 2021 12:12:34 +0900</pubDate><guid>/diary/posts/2021/1012/</guid><description>昨日は1時半に寝て7時半に起きた。なんか疲れが溜まっているのか寝不足なのか、しゃきっとしなくて15時頃にお昼ご飯食べてきて、戻ってきて2時間ほど寝てた。夕方に寝ると夜の睡眠が悪くなるかもしれない。
データ指向アプリケーションデザイン データ指向アプリケーションデザイン -信頼性、拡張性、保守性の高い分散システム設計の原理
先週末から読み始めようと思いつつ、ダラダラしていて今日から読み始めた。600ページ超と分量が多いので少しずつ読んでいく。買ったのは2019年7月なので2年越しの積ん読。前職で書籍購入の補助制度があったのでその予算消化のために買ったみたいなもの。でも買っておくといつか読むので買っておいてよかった。今日は2章まで読んだ。
「データ指向」という用語は、cpu のデータ処理がボトルネックとなり、且つそのデータ量や複雑さなどが主な課題となるアプリケーションのことをデータ指向と定義している。ソフトウェアシステムにおける3つの課題。これはすべて非機能要件になる。
信頼性 スケーラビリティ メンテンナンス性 リレーショナルデータベースと NoSQL の台頭から始まり、ドキュメントデータベースやグラフデータベースの概要やリレーショナルデータベースとの比較などが書いてある。また NoSQL 系のデータベースのクエリ言語とか、よく知らないので勉強になった。12章あるので1日1-2章ぐらいのペースで今月中に読めたらいいや。
Slack のワークフロービルダーの調査 今度、勉強会をするので調べ始めた。ワークフロービルダーは簡単に定型的な処理を作成できるけど、有料プランでしか使えないのでコミュニティなどでは使いにくい。試しにいくつかワークフローを作ってみて感触を理解した。おそらくワークフロービルダーは Slack app を作成するためのフレームワークにみえる。作成したワークフローの1つ1つが Slack app になるのではないか。
https://github.com/t2y/python-study/tree/master/BizPy/slack/20211027 Slack native? first? な課題管理システムもいくつかみつけた。非開発者に課題管理システムを使ってもらうのはかなり難しいので Slack と課題管理システムが連携すれば課題管理の方法論に新しい価値が出てくるのではないかと考え始めた。この機会に Slack app で構築されば課題管理システムも調べてみようと思う。</description><content>&lt;p>昨日は1時半に寝て7時半に起きた。なんか疲れが溜まっているのか寝不足なのか、しゃきっとしなくて15時頃にお昼ご飯食べてきて、戻ってきて2時間ほど寝てた。夕方に寝ると夜の睡眠が悪くなるかもしれない。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>&lt;a href="https://www.oreilly.co.jp/books/9784873118703/">データ指向アプリケーションデザイン -信頼性、拡張性、保守性の高い分散システム設計の原理&lt;/a>&lt;/p>
&lt;p>先週末から読み始めようと思いつつ、ダラダラしていて今日から読み始めた。600ページ超と分量が多いので少しずつ読んでいく。買ったのは2019年7月なので2年越しの積ん読。前職で書籍購入の補助制度があったのでその予算消化のために買ったみたいなもの。でも買っておくといつか読むので買っておいてよかった。今日は2章まで読んだ。&lt;/p>
&lt;p>「データ指向」という用語は、cpu のデータ処理がボトルネックとなり、且つそのデータ量や複雑さなどが主な課題となるアプリケーションのことをデータ指向と定義している。ソフトウェアシステムにおける3つの課題。これはすべて非機能要件になる。&lt;/p>
&lt;ul>
&lt;li>信頼性&lt;/li>
&lt;li>スケーラビリティ&lt;/li>
&lt;li>メンテンナンス性&lt;/li>
&lt;/ul>
&lt;p>リレーショナルデータベースと NoSQL の台頭から始まり、ドキュメントデータベースやグラフデータベースの概要やリレーショナルデータベースとの比較などが書いてある。また NoSQL 系のデータベースのクエリ言語とか、よく知らないので勉強になった。12章あるので1日1-2章ぐらいのペースで今月中に読めたらいいや。&lt;/p>
&lt;h2 id="slack-のワークフロービルダーの調査">Slack のワークフロービルダーの調査&lt;/h2>
&lt;p>今度、勉強会をするので調べ始めた。ワークフロービルダーは簡単に定型的な処理を作成できるけど、有料プランでしか使えないのでコミュニティなどでは使いにくい。試しにいくつかワークフローを作ってみて感触を理解した。おそらくワークフロービルダーは Slack app を作成するためのフレームワークにみえる。作成したワークフローの1つ1つが Slack app になるのではないか。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/python-study/tree/master/BizPy/slack/20211027">https://github.com/t2y/python-study/tree/master/BizPy/slack/20211027&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Slack native? first? な課題管理システムもいくつかみつけた。非開発者に課題管理システムを使ってもらうのはかなり難しいので Slack と課題管理システムが連携すれば課題管理の方法論に新しい価値が出てくるのではないかと考え始めた。この機会に Slack app で構築されば課題管理システムも調べてみようと思う。&lt;/p></content></item><item><title>職質された</title><link>/diary/posts/2021/1009/</link><pubDate>Sat, 09 Oct 2021 09:12:12 +0900</pubDate><guid>/diary/posts/2021/1009/</guid><description>0時に寝て6時に起きる。昨日も田んぼ仕事の疲れが残っていたのでよく眠れた。1週間で6時頃に起きる癖がついたのですぐに起きれた。
Terminal のカスタマイズ 昨日からいくつか修正をしていた。
画像のパス問題の修正 favicon の追加 タグ一覧リンクの追加 atom フィードに icon 要素の追加 (feedly では読み取れない) atom フィードに favicon を指す要素を埋め込んでみたんだけど、feedly ではダメっぽい。たまたまヒットした GitHub issue でもそういったコメントをみかけた。
https://github.com/huginn/huginn/issues/1628#issuecomment-882103625 ストレッチ 毎週土曜日はストレッチの日。田んぼ仕事のおかげで全身軽い筋肉痛になっている。ストレッチを受けると、いつものときとの違いから、股関節から右ももと腕の筋肉がすごく張っているのに気付く。田んぼのような突発的に体を動かして疲労が溜まったときにもストレッチでほぐせるのがよい。今日の開脚幅は開始前169cmで、ストレッチ後170cmかな。前より少し落ちたのは田んぼ仕事に疲れて平日にあまりストレッチが出来なかったのと筋肉痛のせいかもしれない。
Joel on Software 本当は実家に帰っているときに書き上げようと考えていたものの、田んぼ作業での疲れと実家のパソコンを使って作業する環境の悪さから書くことに集中できなくなって断念していた。集中できる環境なら3時間ほどで書けた。動機づけよりも価値観、価値観がブレないならその次は集中できる環境作りにこだわっていきたい。
https://t2y.hatenablog.jp/entry/2021/10/09/162618 職務質問 買いものして帰ろうとしてたら警察官に止められて職務質問をうけた。自転車の盗難が多いので防犯登録を調べたいとのこと。はいはいって感じで免許証を提示する。自転車は東京で購入したもので10年以上乗っている。防犯登録は警視庁になっているらしく、兵庫県警の警察官では調べられないみたい。次に車体番号も読み取って調べていたけど、よくわからなかったみたい。結局、私が本物の持ち主とその場で調べることができなくて、警察官もたぶん本物だと思いますみたいな歯切れの悪い結果で職務質問を終えた。仮にその自転車が盗難にあってもその防犯登録から私を辿ることはできないので近所の自転車屋さんで防犯登録入り直してくださいと言われた。あー、またこの件か。都道府県の防犯登録のシステムが全国で統合されていればいい話しなのに、なんで引っ越したら防犯登録をやり直さないとあかんねんと。現場の警察官に言っても仕方ないので何も言わないことにした。
プロコン たまたまタイムラインでみかけてちょっと眺めてた。動画で同じ内容をみて、ハラスメントを問題視する人と、プロダクトの新規性について言及する人がいて、感じ方は人それぞれだなぁと思いながら ハッシュタグ を眺めてた。</description><content>&lt;p>0時に寝て6時に起きる。昨日も田んぼ仕事の疲れが残っていたのでよく眠れた。1週間で6時頃に起きる癖がついたのですぐに起きれた。&lt;/p>
&lt;h2 id="terminal-のカスタマイズ">Terminal のカスタマイズ&lt;/h2>
&lt;p>昨日からいくつか修正をしていた。&lt;/p>
&lt;ul>
&lt;li>画像のパス問題の修正&lt;/li>
&lt;li>favicon の追加&lt;/li>
&lt;li>タグ一覧リンクの追加&lt;/li>
&lt;li>atom フィードに icon 要素の追加 (feedly では読み取れない)&lt;/li>
&lt;/ul>
&lt;p>atom フィードに favicon を指す要素を埋め込んでみたんだけど、feedly ではダメっぽい。たまたまヒットした GitHub issue でもそういったコメントをみかけた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/huginn/huginn/issues/1628#issuecomment-882103625">https://github.com/huginn/huginn/issues/1628#issuecomment-882103625&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>毎週土曜日はストレッチの日。田んぼ仕事のおかげで全身軽い筋肉痛になっている。ストレッチを受けると、いつものときとの違いから、股関節から右ももと腕の筋肉がすごく張っているのに気付く。田んぼのような突発的に体を動かして疲労が溜まったときにもストレッチでほぐせるのがよい。今日の開脚幅は開始前169cmで、ストレッチ後170cmかな。前より少し落ちたのは田んぼ仕事に疲れて平日にあまりストレッチが出来なかったのと筋肉痛のせいかもしれない。&lt;/p>
&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>本当は実家に帰っているときに書き上げようと考えていたものの、田んぼ作業での疲れと実家のパソコンを使って作業する環境の悪さから書くことに集中できなくなって断念していた。集中できる環境なら3時間ほどで書けた。動機づけよりも価値観、価値観がブレないならその次は集中できる環境作りにこだわっていきたい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://t2y.hatenablog.jp/entry/2021/10/09/162618">https://t2y.hatenablog.jp/entry/2021/10/09/162618&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="職務質問">職務質問&lt;/h2>
&lt;p>買いものして帰ろうとしてたら警察官に止められて職務質問をうけた。自転車の盗難が多いので防犯登録を調べたいとのこと。はいはいって感じで免許証を提示する。自転車は東京で購入したもので10年以上乗っている。防犯登録は警視庁になっているらしく、兵庫県警の警察官では調べられないみたい。次に車体番号も読み取って調べていたけど、よくわからなかったみたい。結局、私が本物の持ち主とその場で調べることができなくて、警察官もたぶん本物だと思いますみたいな歯切れの悪い結果で職務質問を終えた。仮にその自転車が盗難にあってもその防犯登録から私を辿ることはできないので近所の自転車屋さんで防犯登録入り直してくださいと言われた。あー、またこの件か。都道府県の防犯登録のシステムが全国で統合されていればいい話しなのに、なんで引っ越したら防犯登録をやり直さないとあかんねんと。現場の警察官に言っても仕方ないので何も言わないことにした。&lt;/p>
&lt;h2 id="プロコン">プロコン&lt;/h2>
&lt;p>たまたまタイムラインでみかけてちょっと眺めてた。動画で同じ内容をみて、ハラスメントを問題視する人と、プロダクトの新規性について言及する人がいて、感じ方は人それぞれだなぁと思いながら &lt;a href="https://twitter.com/search?q=%23procon32&amp;amp;src=typed_query&amp;amp;f=top">ハッシュタグ&lt;/a> を眺めてた。&lt;/p></content></item><item><title>草刈り</title><link>/diary/posts/2021/1004/</link><pubDate>Mon, 04 Oct 2021 04:46:32 +0900</pubDate><guid>/diary/posts/2021/1004/</guid><description>3時に寝て4時半に起きる。ほとんど寝てない。蚊がいて飛んでいるのが気になったり刺されてかゆかったりして寝るの諦めた。もう涼しくなって大丈夫かと思ってたけど、まだ蚊取り線香が必要だった。
畑の水やり 6時半から7時半まで。玉ねぎ、茄子、大根、ミニトマトなど、いろいろ野菜が植えてある。玉ねぎはいま芽が出てきたところで水をたくさんやらないといけないらしい。
Joel on Software 書評の続き。空き時間に少し書いた。実家だとオフィスより環境がよくないので集中力が下がり、その結果として効率が落ちる。本書の中でもオフィスのこだわりの章があったけど、環境が大事ということが実感できた。
田んぼの草刈り 午後から草場となった田んぼの草刈り。ある程度草を刈っておかないとトラクターの爪に巻き込むので耕すことができない。草刈機で刈り取りつつ、それを集めてきて、乾かして焼く。焼畑農業みたいなことをしないといけない。刈ったばかりの草は水分を含むのですぐには焼けない。一方で乾いた草はよく燃えるので燃え拡がってしまう。下手すると周りに燃え拡がって火事になってしまう。刈り取った草の集約や配置を調整しないといけない。日中、暑かったし、あまり寝てなかったから夕方は眠くてバテてた。</description><content>&lt;p>3時に寝て4時半に起きる。ほとんど寝てない。蚊がいて飛んでいるのが気になったり刺されてかゆかったりして寝るの諦めた。もう涼しくなって大丈夫かと思ってたけど、まだ蚊取り線香が必要だった。&lt;/p>
&lt;h2 id="畑の水やり">畑の水やり&lt;/h2>
&lt;p>6時半から7時半まで。玉ねぎ、茄子、大根、ミニトマトなど、いろいろ野菜が植えてある。玉ねぎはいま芽が出てきたところで水をたくさんやらないといけないらしい。&lt;/p>
&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>書評の続き。空き時間に少し書いた。実家だとオフィスより環境がよくないので集中力が下がり、その結果として効率が落ちる。本書の中でもオフィスのこだわりの章があったけど、環境が大事ということが実感できた。&lt;/p>
&lt;h2 id="田んぼの草刈り">田んぼの草刈り&lt;/h2>
&lt;p>午後から草場となった田んぼの草刈り。ある程度草を刈っておかないとトラクターの爪に巻き込むので耕すことができない。草刈機で刈り取りつつ、それを集めてきて、乾かして焼く。焼畑農業みたいなことをしないといけない。刈ったばかりの草は水分を含むのですぐには焼けない。一方で乾いた草はよく燃えるので燃え拡がってしまう。下手すると周りに燃え拡がって火事になってしまう。刈り取った草の集約や配置を調整しないといけない。日中、暑かったし、あまり寝てなかったから夕方は眠くてバテてた。&lt;/p></content></item><item><title>帰省</title><link>/diary/posts/2021/1003/</link><pubDate>Sun, 03 Oct 2021 11:40:58 +0900</pubDate><guid>/diary/posts/2021/1003/</guid><description>0時に寝て9時頃に起きる。今朝は寝起きが悪くてベッドでぐだぐだしてた。ダイの大冒険をみて家事をした。数日、家を空けるので冷蔵庫の中を空にして、洗いものやゴミの始末をする。11時半頃にオフィスに着く。
OMRON connect グラフは今週の平均体温の推移を示したもの。ワクチン摂取後の体温は36.5-37.0℃の間を行ったり来たりしているものの、体調はまったくしんどくないのであまり気にしてない。そもそも摂取後に体温を測り始めたので自分の平熱がどのぐらいなのかすら把握してないことに気付いた。音波通信体温計 MC-6800B　けんおんくん を使っていて OMRON connect というスマホアプリで計測した体温を記録できる。
Joel on Software 書評を書き始めた。自分が学んだところや関心をひいたところは、読みながらメモ書きで課題管理システムのチケットに書いてある。それらを見返しながら、一般向けの書評にまとめる。自分にしかわからない内容を補足したり、見返すと言及するほどではないことを取り除いたり。あとは書く根気と時間次第になるわけだが、いまは時間がたっぷりあるので比較的、時間がかかっても学びの質をあげるためになるべく書くようにしている。5時間ほどかけて1/3ぐらい書けた。まだ途中。
実家へ 16時30分の高速バスで実家へ帰る。18時前ぐらいに実家の最寄りのバス停につく。そこから車で10分ほど。片道が2,090円で、往復券だと割引で3,760円になり、420円お得になる。この距離だと大した金額ではない。東京にいたら新幹線が往復で3万円ほどで、乗り継ぎの時間を入れると移動時間も6-7時間になってしまう。東京から神戸に戻ってきた理由として実家に気軽に帰りやすいというメリットがある。
今回の帰省の目的は田んぼの一部が草場になっているので耕さないといけない。本当は9月中にやりたかったが、天候とワクチン摂取などを調整してたら10月になってしまった。自分の会社でよいのは、(他社の仕事を受けてなければ) 自分の都合で休日・平日関係なく業務の調整ができること。来週は実家の雑務: 田んぼや裁判の傍聴などをやりながら隙間に会社の仕事をする。</description><content>&lt;p>0時に寝て9時頃に起きる。今朝は寝起きが悪くてベッドでぐだぐだしてた。ダイの大冒険をみて家事をした。数日、家を空けるので冷蔵庫の中を空にして、洗いものやゴミの始末をする。11時半頃にオフィスに着く。&lt;/p>
&lt;h2 id="omron-connect">OMRON connect&lt;/h2>
&lt;p>グラフは今週の平均体温の推移を示したもの。ワクチン摂取後の体温は36.5-37.0℃の間を行ったり来たりしているものの、体調はまったくしんどくないのであまり気にしてない。そもそも摂取後に体温を測り始めたので自分の平熱がどのぐらいなのかすら把握してないことに気付いた。&lt;a href="https://www.healthcare.omron.co.jp/product/mc/mc-6800b.html">音波通信体温計 MC-6800B　けんおんくん&lt;/a> を使っていて OMRON connect というスマホアプリで計測した体温を記録できる。&lt;/p>
&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>書評を書き始めた。自分が学んだところや関心をひいたところは、読みながらメモ書きで課題管理システムのチケットに書いてある。それらを見返しながら、一般向けの書評にまとめる。自分にしかわからない内容を補足したり、見返すと言及するほどではないことを取り除いたり。あとは書く根気と時間次第になるわけだが、いまは時間がたっぷりあるので比較的、時間がかかっても学びの質をあげるためになるべく書くようにしている。5時間ほどかけて1/3ぐらい書けた。まだ途中。&lt;/p>
&lt;h2 id="実家へ">実家へ&lt;/h2>
&lt;p>16時30分の高速バスで実家へ帰る。18時前ぐらいに実家の最寄りのバス停につく。そこから車で10分ほど。片道が2,090円で、往復券だと割引で3,760円になり、420円お得になる。この距離だと大した金額ではない。東京にいたら新幹線が往復で3万円ほどで、乗り継ぎの時間を入れると移動時間も6-7時間になってしまう。東京から神戸に戻ってきた理由として実家に気軽に帰りやすいというメリットがある。&lt;/p>
&lt;p>今回の帰省の目的は田んぼの一部が草場になっているので耕さないといけない。本当は9月中にやりたかったが、天候とワクチン摂取などを調整してたら10月になってしまった。自分の会社でよいのは、(他社の仕事を受けてなければ) 自分の都合で休日・平日関係なく業務の調整ができること。来週は実家の雑務: 田んぼや裁判の傍聴などをやりながら隙間に会社の仕事をする。&lt;/p></content></item><item><title>インボイス制度への準備</title><link>/diary/posts/2021/1001/</link><pubDate>Fri, 01 Oct 2021 09:50:20 +0900</pubDate><guid>/diary/posts/2021/1001/</guid><description>夜はドラクエタクトやってて2時過ぎに寝て7時に起きた。気のせいか、日記を書くようになってから早く寝付けるようになった。まつのさんが twitter で久しぶりに Python 書いたとツィートしていて、何気なくふと Implement experimental asyncio support #101 #340 をみて、そのツールの関係者でもないのに勝手にクソリプ的なレビューコメントをした。気付いてしまったらみなかった振りするのも気持ち悪いので。
インボイス制度の準備 2023年10月1日から 消費税の軽減税率制度・適格請求書等保存方式（いわゆるインボイス制度） が開始される。開始される前に適格請求書発行事業者に登録しておく必要があり、その登録受付が今日から開始された。前に知人が教えてもらった解説動画を見返した。
ちなみにうちの会社は今期から課税事業者になるのでインボイス制度開始による益税の影響は受けない。前期の決算で消費税を算出したとき、本則課税と簡易課税なら後者の方が46%の納税金額が少なくなることがわかった。IT 業界は経費に占める人件費の割合が大きい (人件費は消費税がかからない) ので簡易課税の方が節税になるのではないかという気がする。そのため、簡易課税で申請している。一度、申請すると2年間適用され、不適用届出を出さない限りはずっと簡易課税で継続される。
国税庁の 申請手続 をみながら￼e-Tax (WEB 版) で申請した。
個人で副業を受けることを想定すると、個人でも適格請求書発行事業者に登録した方がよいのだけど、私の場合、自分の会社なので法人で仕事を受けるのと個人で仕事を受けることの違いって何だろう？とわからなくなった。法人税と個人の所得税の税率の違いの話しは一旦置いておいて、最も大きな違いは会社で仕事を受けても(直近の)給与は増えないのでその報酬を自由には使えない。個人で仕事を受けたらその報酬を自由に使えるぐらいかな？もうちょっとその違いを調べ直してから考えよう。先の youtube 動画の中で税理士さんが「免税事業者という制度をやめたらいいのに。。。」と言ってたけど、個人はどうしよう？と悩んでしまう本質は免税事業者という概念があるからというのは正しいと思う。
Terminal のカスタマイズ hugo の Shortcodes で class で任意の CSS クラスを指定できる。
{{&amp;lt; youtube id=&amp;#34;E0lOsLfj1T0&amp;#34; class=&amp;#34;video-container&amp;#34; &amp;gt;}} static/style.css をカスタムの CSS として読み込んでくれる。youtube のビデオサイズをよしなに調整するために次のスタイルを定義した。なかなか難しい。
.video-container iframe { border:0; max-width: 600px; max-height: 338px; width: 100%; height: 50vh; } Joel on Software 読み終えた。ソフトウェアの本で test of time (時の試練？) に耐えるのは相当に難しい。本書だとマネジメントや教育、ビジネスや経営に関する内容はいまでも有効でおもしろかった。また後日ブログに書評を書く。いまとなっては手放しでお勧めできる本ではないため、どういう切り口で書くかが難しい。自分にとって学びとして身につけたいと思った本はなるべく書評を書いて自分の言葉で説明できるようになっていきたい。</description><content>&lt;p>夜はドラクエタクトやってて2時過ぎに寝て7時に起きた。気のせいか、日記を書くようになってから早く寝付けるようになった。まつのさんが twitter で久しぶりに Python 書いたとツィートしていて、何気なくふと &lt;a href="https://github.com/line/line-bot-sdk-python/pull/340">Implement experimental asyncio support #101 #340&lt;/a> をみて、そのツールの関係者でもないのに勝手にクソリプ的なレビューコメントをした。気付いてしまったらみなかった振りするのも気持ち悪いので。&lt;/p>
&lt;h2 id="インボイス制度の準備">インボイス制度の準備&lt;/h2>
&lt;p>2023年10月1日から &lt;a href="https://www.nta.go.jp/taxes/shiraberu/zeimokubetsu/shohi/keigenzeiritsu/index.htm">消費税の軽減税率制度・適格請求書等保存方式（いわゆるインボイス制度）&lt;/a> が開始される。開始される前に適格請求書発行事業者に登録しておく必要があり、その登録受付が今日から開始された。前に知人が教えてもらった解説動画を見返した。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/E0lOsLfj1T0" allowfullscreen title="消費税インボイス方式対策として今からやっておくべき３つのことをお話します。【簡易課税で税負担1/2に！？】">&lt;/iframe>
&lt;/div>
&lt;p>ちなみにうちの会社は今期から課税事業者になるのでインボイス制度開始による益税の影響は受けない。前期の決算で消費税を算出したとき、本則課税と簡易課税なら後者の方が46%の納税金額が少なくなることがわかった。IT 業界は経費に占める人件費の割合が大きい (人件費は消費税がかからない) ので簡易課税の方が節税になるのではないかという気がする。そのため、簡易課税で申請している。一度、申請すると2年間適用され、不適用届出を出さない限りはずっと簡易課税で継続される。&lt;/p>
&lt;p>国税庁の &lt;a href="https://www.nta.go.jp/taxes/shiraberu/zeimokubetsu/shohi/keigenzeiritsu/invoice_shinei.htm">申請手続&lt;/a> をみながら￼e-Tax (WEB 版) で申請した。&lt;/p>
&lt;p>個人で副業を受けることを想定すると、個人でも適格請求書発行事業者に登録した方がよいのだけど、私の場合、自分の会社なので法人で仕事を受けるのと個人で仕事を受けることの違いって何だろう？とわからなくなった。法人税と個人の所得税の税率の違いの話しは一旦置いておいて、最も大きな違いは会社で仕事を受けても(直近の)給与は増えないのでその報酬を自由には使えない。個人で仕事を受けたらその報酬を自由に使えるぐらいかな？もうちょっとその違いを調べ直してから考えよう。先の youtube 動画の中で税理士さんが「免税事業者という制度をやめたらいいのに。。。」と言ってたけど、個人はどうしよう？と悩んでしまう本質は免税事業者という概念があるからというのは正しいと思う。&lt;/p>
&lt;h2 id="terminal-のカスタマイズ">Terminal のカスタマイズ&lt;/h2>
&lt;p>hugo の Shortcodes で &lt;code>class&lt;/code> で任意の CSS クラスを指定できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">{{&amp;lt; &lt;span style="color:#f92672">youtube&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;E0lOsLfj1T0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;video-container&amp;#34;&lt;/span> &amp;gt;}}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>static/style.css&lt;/code> をカスタムの CSS として読み込んでくれる。youtube のビデオサイズをよしなに調整するために次のスタイルを定義した。なかなか難しい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#a6e22e">video-container&lt;/span> &lt;span style="color:#f92672">iframe&lt;/span> {
&lt;span style="color:#66d9ef">border&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">max-width&lt;/span>: &lt;span style="color:#ae81ff">600&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">max-height&lt;/span>: &lt;span style="color:#ae81ff">338&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>&lt;span style="color:#66d9ef">vh&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>読み終えた。ソフトウェアの本で test of time (時の試練？) に耐えるのは相当に難しい。本書だとマネジメントや教育、ビジネスや経営に関する内容はいまでも有効でおもしろかった。また後日ブログに書評を書く。いまとなっては手放しでお勧めできる本ではないため、どういう切り口で書くかが難しい。自分にとって学びとして身につけたいと思った本はなるべく書評を書いて自分の言葉で説明できるようになっていきたい。&lt;/p>
&lt;h2 id="カジュアル面談">カジュアル面談&lt;/h2>
&lt;p>プロジェクトマネージャーを募集している会社の CTO と面談。先方の時間が15分しかないという話しだったので事前に質問は連絡しつつ、バックエンドは Go 言語を使っているという話しだったので私が過去に書いたブログ記事やちょっと前に作った &lt;a href="https://github.com/kazamori/go-sql-executor">go-sql-executor&lt;/a> を連絡して、技術選考の参考にしてほしいと伝えた。募集要項からスクラムを採用するように読めたのでその背景を聞いたところ、外部の技術顧問が推奨しただけでとくにこだわりはないという。いまもメンバーは8人いて1週間のスプリントでスクラムっぽい運用はしているとのこと。私の言う、課題管理とイテレーション開発の概要を軽く説明しつつ、それを実践するためにプロジェクトマネージャーをやりたくて、その実践の場を探しているといった話しをした。外部の技術顧問が欠席したせいか、Go 言語の開発に関する質問はとくになかった。メンバーはすべて業務委託という話しなので寄せ集めグループのドタバタプロジェクトなんだろうなという印象を受けた。心理的安全性や一体化マネジメント法とか勉強したんで &lt;em>グループ&lt;/em> じゃなくて &lt;em>チーム&lt;/em> 開発できるマネジメントがやりたいなぁ。&lt;/p></content></item><item><title>窓のある部屋</title><link>/diary/posts/2021/0930/</link><pubDate>Thu, 30 Sep 2021 08:37:37 +0900</pubDate><guid>/diary/posts/2021/0930/</guid><description>夜は自民党総裁選の総括の記事を読んでた。政治に関心があるわけではないが、選挙後の総括にはとても関心がある。とくに負けた人がどんなことを言うのか、敗因をどう分析するのか。シンゴジラで矢口の発した 「政界は敵か味方しかいない。シンプルだ。性に合ってる」 という言葉が好き。選挙というわかりやすい勝ち負けが明確に出る仕組みは確かにシンプルだ。その後、3時まで本を読んで寝て7時ぐらいに起きた。
カジュアル面談準備 課題管理と開発方法論の体系化のため、プロジェクトマネージャーの案件を探している。Remogu というリモートワークxエンジニア専門のサイトでギグワークできないかを検討中。ある会社を提案されたのでその会社のサイトとサービス内容を調べてた。飲食業界向けに提供しているサービスを、これまではアウトソースで開発していたシステムを内製化するために開発者を募集しているようだった。いま風に言えば、DX の1つと言えるだろう。これから内製の開発チームを作っていくとのこと。言うても CTO (PMO) 以外はすべて業務委託で集めるとのこと。デメリットはチームにならず、寄せ集めの集団になってしまう懸念がある一方、メリットとして採用したものの、マッチングしなかったメンバーの契約更新しないことで入れ替えることができる。明日、その会社の人たちとカジュアル面談をして双方のマッチングをみてみる。
Joel on Software 昨日の続き。夜に読み切ろうと思っていたけど、ドラクエタクトの新しいイベントがリリースされて、それやってたら疲れて寝てしまった。あともうちょと。特定の技術に言及している内容は2000年代半ばの話しなのでいまとなっては有効ではないものや歴史書のように読めたりもする。中盤からソフトウェアビジネスやソフトウェア会社の運営などが書いてあって、マイクロ法人を始めたばかりの私にとっては興味深い。例えば、オフィスの要件は次の内容をあげている。
1人1人にちゃんとドアの付いた個室があること、絶対条件 コンセントがたくさん必要、新しいおもちゃを机の上でつなげられる データケーブルを簡単につなぎ直せる ペアプログラミングが可能であること (L字型の大きい机を用意する) 遠くのものを眺めて目を休められるよう窓を設け、ディスプレイを壁に向かって置いてはいけない オフィスはそこで時を過ごすのが快適なたまり場のような場所であるべき その上で、会社の成功は、ある部分までプログラマーが実質オフィスに暮らすようになるかどうかにかかっているので、オフィスが平均的なプログラマーの家よりも素敵な場所である必要があると述べている。実際、私は過去に働いた6社すべてで泊まり込みで働いたこともあるのでまさに暮らすように働いていた時期もあったかもしれない。机に伏して寝たり椅子を並べて寝るよりは、ソファやくつろぎスペースで寝る方が快適だった。あと、いまのオフィスの唯一の欠点は窓がないことだと1年ほど働いて、ちょうど私も実感していた。窓がないと1日の天候の移り変わりや季節の移り変わりがみえなくて気分転換ができないのだ。次にオフィスを引っ越すときは窓がある部屋を条件に加えようとまさに考えていた。
あと自分にとっての課題管理の原点をみつけた。過去に働いていた会社で、課題管理システムに顧客からの問い合わせや開発者のTODOやシステム管理のメモなど、すべての情報を入れられていた。こういった課題管理システムの使い方は次の記事に影響を受けて実践されたものだったと当時の上司に確認した。たったこれだけの話なんだけど、私にとっては原点なので宝ものを発見したかのような嬉しい気持ちになった。
Half a million bugs!</description><content>&lt;p>夜は自民党総裁選の総括の記事を読んでた。政治に関心があるわけではないが、選挙後の総括にはとても関心がある。とくに負けた人がどんなことを言うのか、敗因をどう分析するのか。シンゴジラで矢口の発した &lt;em>「政界は敵か味方しかいない。シンプルだ。性に合ってる」&lt;/em> という言葉が好き。選挙というわかりやすい勝ち負けが明確に出る仕組みは確かにシンプルだ。その後、3時まで本を読んで寝て7時ぐらいに起きた。&lt;/p>
&lt;h2 id="カジュアル面談準備">カジュアル面談準備&lt;/h2>
&lt;p>課題管理と開発方法論の体系化のため、プロジェクトマネージャーの案件を探している。&lt;a href="https://remogu.jp/">Remogu&lt;/a> というリモートワークxエンジニア専門のサイトでギグワークできないかを検討中。ある会社を提案されたのでその会社のサイトとサービス内容を調べてた。飲食業界向けに提供しているサービスを、これまではアウトソースで開発していたシステムを内製化するために開発者を募集しているようだった。いま風に言えば、DX の1つと言えるだろう。これから内製の開発チームを作っていくとのこと。言うても CTO (PMO) 以外はすべて業務委託で集めるとのこと。デメリットはチームにならず、寄せ集めの集団になってしまう懸念がある一方、メリットとして採用したものの、マッチングしなかったメンバーの契約更新しないことで入れ替えることができる。明日、その会社の人たちとカジュアル面談をして双方のマッチングをみてみる。&lt;/p>
&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>昨日の続き。夜に読み切ろうと思っていたけど、ドラクエタクトの新しいイベントがリリースされて、それやってたら疲れて寝てしまった。あともうちょと。特定の技術に言及している内容は2000年代半ばの話しなのでいまとなっては有効ではないものや歴史書のように読めたりもする。中盤からソフトウェアビジネスやソフトウェア会社の運営などが書いてあって、マイクロ法人を始めたばかりの私にとっては興味深い。例えば、オフィスの要件は次の内容をあげている。&lt;/p>
&lt;ol>
&lt;li>1人1人にちゃんとドアの付いた個室があること、絶対条件&lt;/li>
&lt;li>コンセントがたくさん必要、新しいおもちゃを机の上でつなげられる&lt;/li>
&lt;li>データケーブルを簡単につなぎ直せる&lt;/li>
&lt;li>ペアプログラミングが可能であること (L字型の大きい机を用意する)&lt;/li>
&lt;li>遠くのものを眺めて目を休められるよう窓を設け、ディスプレイを壁に向かって置いてはいけない&lt;/li>
&lt;li>オフィスはそこで時を過ごすのが快適なたまり場のような場所であるべき&lt;/li>
&lt;/ol>
&lt;p>その上で、会社の成功は、ある部分までプログラマーが実質オフィスに暮らすようになるかどうかにかかっているので、オフィスが平均的なプログラマーの家よりも素敵な場所である必要があると述べている。実際、私は過去に働いた6社すべてで泊まり込みで働いたこともあるのでまさに暮らすように働いていた時期もあったかもしれない。机に伏して寝たり椅子を並べて寝るよりは、ソファやくつろぎスペースで寝る方が快適だった。あと、いまのオフィスの唯一の欠点は窓がないことだと1年ほど働いて、ちょうど私も実感していた。窓がないと1日の天候の移り変わりや季節の移り変わりがみえなくて気分転換ができないのだ。次にオフィスを引っ越すときは窓がある部屋を条件に加えようとまさに考えていた。&lt;/p>
&lt;p>あと自分にとっての課題管理の原点をみつけた。過去に働いていた会社で、課題管理システムに顧客からの問い合わせや開発者のTODOやシステム管理のメモなど、すべての情報を入れられていた。こういった課題管理システムの使い方は次の記事に影響を受けて実践されたものだったと当時の上司に確認した。たったこれだけの話なんだけど、私にとっては原点なので宝ものを発見したかのような嬉しい気持ちになった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.joelonsoftware.com/2006/12/20/half-a-million-bugs/">Half a million bugs!&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>読書とイベント参加</title><link>/diary/posts/2021/0929/</link><pubDate>Wed, 29 Sep 2021 08:59:17 +0900</pubDate><guid>/diary/posts/2021/0929/</guid><description>0時頃に寝て8時ぐらいに起きる。やや発熱して疲れてたせいか、久しぶりに早く寝付けた。一日を通して体温は平均36.7℃なのでもう副反応は過ぎたみたい。体調もまったく悪くない。
Joel on Software 過去に働いていた会社での課題管理のやり方や開発方法論について、当時の上司と雑談したところ Joel Spolsky に由来するということを聞いた。そこで今更ながらに More Joel on Software を読むことにした。2000年代に書かれた記事の内容なのでいまとなっては古典に分類される本かもしれない。だいたい半分ぐらい読んだ。技術の詳細に言及した内容は古くなっていてあまり有用ではないものも多いけど、マネジメントや優秀なプログラマーの特性などはいまでも通用する内容に思えた。あとで私が関心をもった内容をブログでまとめることにする。
第10章コンピュータサイエンスの学生へのアドバイスで「卒業するまでにミクロ経済学を学ぶこと」という節がある。著者がミクロ経済学を推奨する理由を引用するとこれら。
ミクロ経済学はビジネスで重要な理論すべての基礎となっている。需要と供給とか、競争優位とか、NPV とか割り引きとか限界効能について知らなければ、ビジネスの仕組みが全然理解できないからだ。
マクロ経済学は、当たっているよりもはずれていることの方が多い。スキップしてよい。それ以降はただ悪くなっていく一方。
ビジネスの基礎を理解しているプログラマは、理解していないプログラマよりもビジネスにおいてずっと価値が高いからだ。
学んだことがなかったので簡単そうな ミクロ経済学入門の入門 を購入した。
読んでて気づきを得てふとツィートした。
なので、システムのコンポーネントに関しての意思決定をするとき、必ずしも上位の意思決定者の判断が正しいわけではなく、現場のメンバーに判断を委ねる状況が最適な場合もある。一方向じゃなく、双方向の情報の非対称性を解消する取り組みが大事。
&amp;mdash; Tetsuya Morimoto (@t2y) September 29, 2021 Java 17 リリースイベント 【オンライン】 JJUGナイトセミナー「Java 17 リリース記念イベント with Foojay」9/29(水) 開催 に参加した。Java の LTS はいま過渡期でややこしいことになって、8, 11, 17 になる。リリースされたばかりの Java 17 は LTS で重要なバージョンになる。Oracle Java SE Supportロードマップ から Premier Support 期限が次になる。
8: 2022年3月 11: 2023年9月 17: 2026年9月 いま 11 を使っている組織はいいが、8 を使っている組織もまだまだ多いと推測する。8 と 11 の Premier Support 期限が近いことから 8 を使っている組織は 17 に一気にバージョンアップすることが想定される。どこかのタイミングで Java 17 を前提した開発に切り替わっていくだろうと思われる。</description><content>&lt;p>0時頃に寝て8時ぐらいに起きる。やや発熱して疲れてたせいか、久しぶりに早く寝付けた。一日を通して体温は平均36.7℃なのでもう副反応は過ぎたみたい。体調もまったく悪くない。&lt;/p>
&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>過去に働いていた会社での課題管理のやり方や開発方法論について、当時の上司と雑談したところ &lt;a href="https://en.wikipedia.org/wiki/Joel_Spolsky">Joel Spolsky&lt;/a> に由来するということを聞いた。そこで今更ながらに &lt;a href="https://www.shoeisha.co.jp/book/detail/9784798118925">More Joel on Software&lt;/a> を読むことにした。2000年代に書かれた記事の内容なのでいまとなっては古典に分類される本かもしれない。だいたい半分ぐらい読んだ。技術の詳細に言及した内容は古くなっていてあまり有用ではないものも多いけど、マネジメントや優秀なプログラマーの特性などはいまでも通用する内容に思えた。あとで私が関心をもった内容をブログでまとめることにする。&lt;/p>
&lt;p>第10章コンピュータサイエンスの学生へのアドバイスで「卒業するまでにミクロ経済学を学ぶこと」という節がある。著者がミクロ経済学を推奨する理由を引用するとこれら。&lt;/p>
&lt;blockquote>
&lt;p>ミクロ経済学はビジネスで重要な理論すべての基礎となっている。需要と供給とか、競争優位とか、NPV とか割り引きとか限界効能について知らなければ、ビジネスの仕組みが全然理解できないからだ。&lt;/p>
&lt;p>マクロ経済学は、当たっているよりもはずれていることの方が多い。スキップしてよい。それ以降はただ悪くなっていく一方。&lt;/p>
&lt;p>ビジネスの基礎を理解しているプログラマは、理解していないプログラマよりもビジネスにおいてずっと価値が高いからだ。&lt;/p>
&lt;/blockquote>
&lt;p>学んだことがなかったので簡単そうな &lt;a href="https://www.iwanami.co.jp/book/b285381.html">ミクロ経済学入門の入門&lt;/a> を購入した。&lt;/p>
&lt;p>読んでて気づきを得てふとツィートした。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">なので、システムのコンポーネントに関しての意思決定をするとき、必ずしも上位の意思決定者の判断が正しいわけではなく、現場のメンバーに判断を委ねる状況が最適な場合もある。一方向じゃなく、双方向の情報の非対称性を解消する取り組みが大事。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1443024587944464388?ref_src=twsrc%5Etfw">September 29, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="java-17-リリースイベント">Java 17 リリースイベント&lt;/h2>
&lt;p>&lt;a href="https://jjug.doorkeeper.jp/events/127204">【オンライン】 JJUGナイトセミナー「Java 17 リリース記念イベント with Foojay」9/29(水) 開催&lt;/a> に参加した。Java の LTS はいま過渡期でややこしいことになって、8, 11, 17 になる。リリースされたばかりの Java 17 は LTS で重要なバージョンになる。&lt;a href="https://www.oracle.com/jp/java/technologies/java-se-support-roadmap.html">Oracle Java SE Supportロードマップ&lt;/a> から Premier Support 期限が次になる。&lt;/p>
&lt;ul>
&lt;li>8: 2022年3月&lt;/li>
&lt;li>11: 2023年9月&lt;/li>
&lt;li>17: 2026年9月&lt;/li>
&lt;/ul>
&lt;p>いま 11 を使っている組織はいいが、8 を使っている組織もまだまだ多いと推測する。8 と 11 の Premier Support 期限が近いことから 8 を使っている組織は 17 に一気にバージョンアップすることが想定される。どこかのタイミングで Java 17 を前提した開発に切り替わっていくだろうと思われる。&lt;/p>
&lt;p>最初の発表は Pattern Matching &amp;amp; Sealed Classes に特化した内容。これまでは instanceof と共に使う機能だった。switch 構文とパターンマッチングを組み合わせると、コードが簡潔になって &lt;a href="https://en.wikipedia.org/wiki/Cognitive_complexity">Cognitive complexity&lt;/a> を下げるという。発表者が Type Guard という呼び方をしていた。Type Guard をググると TypeScript の記事がヒットする。&lt;a href="https://openjdk.java.net/jeps/406">JEP 406: Pattern Matching for switch (Preview)&lt;/a> ではこれを &lt;em>guarded pattern&lt;/em> と呼んでいる。まだあまり一般的な用語ではないのかもしれない。あとは Sealed クラスと組み合わせた switch 構文のコード例では、すべてのパターンが網羅されていることをコンパイラが検出して &lt;em>default&lt;/em> 句が不要になるコード例も紹介されててよさそうにみえた。但し、switch 構文のパターンマッチングは preview なので実際には 17 ではまだ使われないのかもしれない。今後もさらに switch 構文とパターンマッチングの機能拡張が行われる展望らしい。&lt;/p>
&lt;p>2番目の発表は Java 17 の全体的な話し。fix した issues のツリーマップで contributor の分布を紹介していた。oracle, redhat, independent の順番に多い。oracle が過半数以上。日本だと ntt data が一番貢献してた。spring フレームワークの次期バージョンは Java 17 がベースラインになる。java のアップグレードを促す要因の1つにはなるはず。lts なのになぜ preview や incubator があるのか？openjdk 開発側は6ヶ月というリリースサイクルを守っている。lts にするか否かは開発者が決めているらしい。graalvm のリリースサイクルは java とは異なる。こちらは年3回のリリースなので次のリリースで出てくるはず？いくつか jep の内容を紹介してた。jep の概要は &lt;a href="https://qiita.com/ReiTsukikazu/items/407d61cb66fa4f562bf9">Java17の新機能をざっくり紹介&lt;/a> にまとまっている。さくらばさんがパッケージの api レベルでの変更を &lt;a href="http://www.javainthebox.com/2021/09/jepjava-17.html">JEPでは語れないJava 17&lt;/a> にまとめている。ざっと目を通して興味があるものがあればみとくぐらい。8 から 17 への移行の記事やドキュメントなども紹介されてた。移行について基本は &lt;a href="https://docs.oracle.com/en/java/javase/17/migrate/getting-started.html">Oracle JDK Migration Guide&lt;/a> を読めとのこと。8 から 17 の移行せずにその次の 23 を待つと作り直しになってしまいますよと 17 への移行を推奨してた。&lt;/p></content></item><item><title>副反応はいずこ？</title><link>/diary/posts/2021/0928/</link><pubDate>Tue, 28 Sep 2021 08:35:36 +0900</pubDate><guid>/diary/posts/2021/0928/</guid><description>2時過ぎぐらいに寝て5時前ぐらいに起きる。やや熱っぽいかなぁぐらいの印象でもう一度寝る。8時前に起きるともう平気になってた。昨日、書籍や macbook を持って帰ってきて引きこもり対策してたけど、体調が悪くないのでオフィスへ行くことにした。お昼から1時間おきに熱を測ってみたら37℃前後なので少し熱は出ていたみたい。とくにしんどくなかったので普通にお仕事してた。
水分補給 副反応対策として、ポカリスエットイオンウォーターの粉末をウォーターサーバーの水に混ぜて飲んでみる。イオンウォーターと普通の ポカリスエットとの違いは何ですか？ によると、基本的な成分は同じで低カロリーという違いがあるらしい。
日記サイト構築 diary リポジトリに push すると GitHub Actions で静的サイトをビルドして GitHub Pages で扱うための gh-pages ブランチに push される。GitHub Actions による GitHub Pages への自動デプロイ を参考にした。gh-pages ブランチにあるものが次の URL で参照される。リポジトリ名の diary がパスになるらしい。
https://t2y.github.io/diary/ まだ設定は不完全だけど、運用しながらおいおい設定を詰めていく。Hugo は会社のホームページにも使っているので慣れているのと、使い心地も気に入っているのでこのまま使い続ける。会社のサイトはたまにしか更新しないので日記を書く方が更新頻度があがって Hugo を触るインセンティブになるかもしれない。
ジャーナリングとは 読みかけで放置していた 「手で書くこと」が知性を引き出す 心を整え、思考を解き放つ新習慣「ジャーナリング」入門 を読み終えた。この日記も簡易的なジャーナリングになればよいと願っていたりする。「書くこと」への期待値を高くもって読み進めたせいか、内容が薄かったように思えた。ジャーナリングを行うテーマのワークシートが24個ついていて、ページ数を稼いでいるように感じた。日常生活であまり書いていない人には関心をそそるかもしれないけど、プログラマーは日常生活で平均以上の文字数を書いていると推測する。私にとってはあまり目新しいことはなかった。
マインドフルネス (気づき) を得るための方法論の1つとして書く瞑想=ジャーナリングを推奨している。手書きとキーボードのタイピングでは効果が異なるという研究成果はおもしろかった。手書きの方が記憶力や理解力を高める、脳波はアルファ波が出るといった研究があるという。従って、より創造的な仕事に向くかもしれない。ジャーナリングの研究によって、わかってきたことの1つは、自己や他者、社会への適応力を高めると示唆されている。ここでいう「適応力が高まる」というのは、課題や問題をどうとらえ、これからどう行動すればよいかのヒントにつながる可能性があるという意図らしい。ジャーナリングは心身の健全性にもプラスの影響をもたらされる可能性が高いといった研究も紹介されている。私の感覚的にも、書くことで課題や問題を明確化することはストレスを軽減して健康になるような気がする。
ジャーナリングをする際に大事なことは「考えない」 ということです。
書く瞑想とも言われる所以にも思える。そのままの状態を観察して気づきとするような、そういう姿勢を説いている。この内容は業務の取り組みへの応用からは離れてしまう。
前に メタ認知で〈学ぶ力〉を高める：認知心理学が解き明かす効果的学習法 の著者が タイピング思考法の開発とその有効性の検討 という研究発表をしていた。この研究は、思考過程を推測する手法として、発話思考法における問題を解決するタイピング思考法を提案し、既知の問題を解決しつつ、発想の促進効果もみられてそこそこよい結果が出たというものであった。思考過程を発話とタイピングの2つで比較している。比較項目に手書きがあると少し結果に差異が出たりしたのかなぁとか思った。
Atlassian Community Online MeetUp の参加 課題管理システムとチャットツールを連携する Halp というツールがあるらしい。うちは課題管理システムにクラウド jira を使っていて、Atlassian 社から届くメールで本イベントのことを知った。Atlassian Community Event の頭文字をとって ACE と呼ぶらしい。</description><content>&lt;p>2時過ぎぐらいに寝て5時前ぐらいに起きる。やや熱っぽいかなぁぐらいの印象でもう一度寝る。8時前に起きるともう平気になってた。昨日、書籍や macbook を持って帰ってきて引きこもり対策してたけど、体調が悪くないのでオフィスへ行くことにした。お昼から1時間おきに熱を測ってみたら37℃前後なので少し熱は出ていたみたい。とくにしんどくなかったので普通にお仕事してた。&lt;/p>
&lt;h2 id="水分補給">水分補給&lt;/h2>
&lt;p>副反応対策として、ポカリスエットイオンウォーターの粉末をウォーターサーバーの水に混ぜて飲んでみる。イオンウォーターと普通の &lt;a href="https://www.otsuka.co.jp/faq/ionwater/01.html">ポカリスエットとの違いは何ですか？&lt;/a> によると、基本的な成分は同じで低カロリーという違いがあるらしい。&lt;/p>
&lt;h2 id="日記サイト構築">日記サイト構築&lt;/h2>
&lt;p>&lt;a href="https://github.com/t2y/diary">diary&lt;/a> リポジトリに push すると GitHub Actions で静的サイトをビルドして GitHub Pages で扱うための gh-pages ブランチに push される。&lt;a href="https://qiita.com/peaceiris/items/d401f2e5724fdcb0759d">GitHub Actions による GitHub Pages への自動デプロイ&lt;/a> を参考にした。gh-pages ブランチにあるものが次の URL で参照される。リポジトリ名の &lt;code>diary&lt;/code> がパスになるらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://t2y.github.io/diary/">https://t2y.github.io/diary/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>まだ設定は不完全だけど、運用しながらおいおい設定を詰めていく。&lt;a href="https://gohugo.io/">Hugo&lt;/a> は会社のホームページにも使っているので慣れているのと、使い心地も気に入っているのでこのまま使い続ける。会社のサイトはたまにしか更新しないので日記を書く方が更新頻度があがって Hugo を触るインセンティブになるかもしれない。&lt;/p>
&lt;h2 id="ジャーナリングとは">ジャーナリングとは&lt;/h2>
&lt;p>読みかけで放置していた &lt;a href="https://bunkyosha.com/books/9784866510149">「手で書くこと」が知性を引き出す 心を整え、思考を解き放つ新習慣「ジャーナリング」入門&lt;/a> を読み終えた。この日記も簡易的なジャーナリングになればよいと願っていたりする。「書くこと」への期待値を高くもって読み進めたせいか、内容が薄かったように思えた。ジャーナリングを行うテーマのワークシートが24個ついていて、ページ数を稼いでいるように感じた。日常生活であまり書いていない人には関心をそそるかもしれないけど、プログラマーは日常生活で平均以上の文字数を書いていると推測する。私にとってはあまり目新しいことはなかった。&lt;/p>
&lt;p>マインドフルネス (気づき) を得るための方法論の1つとして書く瞑想=&lt;strong>ジャーナリング&lt;/strong>を推奨している。手書きとキーボードのタイピングでは効果が異なるという研究成果はおもしろかった。手書きの方が記憶力や理解力を高める、脳波はアルファ波が出るといった研究があるという。従って、より創造的な仕事に向くかもしれない。ジャーナリングの研究によって、わかってきたことの1つは、自己や他者、社会への適応力を高めると示唆されている。ここでいう「適応力が高まる」というのは、課題や問題をどうとらえ、これからどう行動すればよいかのヒントにつながる可能性があるという意図らしい。ジャーナリングは心身の健全性にもプラスの影響をもたらされる可能性が高いといった研究も紹介されている。私の感覚的にも、書くことで課題や問題を明確化することはストレスを軽減して健康になるような気がする。&lt;/p>
&lt;blockquote>
&lt;p>ジャーナリングをする際に大事なことは「考えない」 ということです。&lt;/p>
&lt;/blockquote>
&lt;p>書く瞑想とも言われる所以にも思える。そのままの状態を観察して気づきとするような、そういう姿勢を説いている。この内容は業務の取り組みへの応用からは離れてしまう。&lt;/p>
&lt;p>前に &lt;a href="https://note.com/t2y1979/n/n4713058f48ce">メタ認知で〈学ぶ力〉を高める：認知心理学が解き明かす効果的学習法&lt;/a> の著者が &lt;a href="https://www.jstage.jst.go.jp/article/jjet/37/Suppl./37_KJ00009957528/_article/-char/ja">タイピング思考法の開発とその有効性の検討&lt;/a> という研究発表をしていた。この研究は、思考過程を推測する手法として、発話思考法における問題を解決するタイピング思考法を提案し、既知の問題を解決しつつ、発想の促進効果もみられてそこそこよい結果が出たというものであった。思考過程を発話とタイピングの2つで比較している。比較項目に手書きがあると少し結果に差異が出たりしたのかなぁとか思った。&lt;/p>
&lt;h2 id="atlassian-community-online-meetup-の参加">Atlassian Community Online MeetUp の参加&lt;/h2>
&lt;p>課題管理システムとチャットツールを連携する &lt;a href="https://halp.com/">Halp&lt;/a> というツールがあるらしい。うちは課題管理システムにクラウド jira を使っていて、Atlassian 社から届くメールで本イベントのことを知った。Atlassian Community Event の頭文字をとって ACE と呼ぶらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://ace.atlassian.com/events/details/atlassian-tokyo-presents-48-tokyo-atlassian-community-online-meetup-dian-pu-bizinesudenohuo-yong-shi-li-halphuo-yong-tipsxin-aceridafa-biao/">#48 Tokyo Atlassian Community Online MeetUp - 店舗ビジネスでの活用事例＆Halp活用Tips＆新ACEリーダー発表&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>初めて ACE イベントに参加した。コミュニティ (ユーザー) 主体のイベントになるらしい。運営メンバーの中に前職での jira チームのリーダーが出ていてちょっとびっくりした。何度かやり取りしてお世話になった方だったのでこういうところでも活動しているんだと思ってさらに尊敬の念が深くなった。halp については、想像通り、非開発者向けに slack の操作だけで jira の課題管理システムと連携するためのサービスとしてよさそうだった。slack (halp) と jira は双方向にデータの同期ができる。いまのところ、halp の無料プランがないので試せてないけど、なにかの機会で一通り触ってみたいと思うサービスだった。&lt;/p></content></item></channel></rss>