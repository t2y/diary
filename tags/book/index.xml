<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>book on forest nook</title><link>/diary/tags/book/</link><description>Recent content in book on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Wed, 29 Sep 2021 08:59:17 +0900</lastBuildDate><atom:link href="/diary/tags/book/index.xml" rel="self" type="application/rss+xml"/><item><title>読書とイベント参加</title><link>/diary/posts/2021/0929/</link><pubDate>Wed, 29 Sep 2021 08:59:17 +0900</pubDate><guid>/diary/posts/2021/0929/</guid><description>昨日は24時頃に寝て8時ぐらいに起きる。やや発熱して疲れてたせいか、久しぶりに早く寝付けた。一日を通して体温は平均36.7℃なのでもう副反応は過ぎたみたい。体調もまったく悪くない。
Joel on Software 過去に働いていた会社での課題管理のやり方や開発方法論について、当時の上司と雑談したところ Joel Spolsky に由来するということを聞いた。そこで今更ながらに More Joel on Software を読むことにした。2000年代に書かれた記事の内容なのでいまとなっては古典に分類される本かもしれない。だいたい半分ぐらい読んだ。技術の詳細に言及した内容は古くなっていてあまり有用ではないものも多いけど、マネジメントや優秀なプログラマーの特性などはいまでも通用する内容に思えた。あとで私が関心をもった内容をブログでまとめることにする。
第10章コンピュータサイエンスの学生へのアドバイスで「卒業するまでにミクロ経済学を学ぶこと」という節がある。著者がミクロ経済学を推奨する理由を引用するとこれら。
ミクロ経済学はビジネスで重要な理論すべての基礎となっている。需要と供給とか、競争優位とか、NPV とか割り引きとか限界効能について知らなければ、ビジネスの仕組みが全然理解できないからだ。
マクロ経済学は、当たっているよりもはずれていることの方が多い。スキップしてよい。それ以降はただ悪くなっていく一方。
ビジネスの基礎を理解しているプログラマは、理解していないプログラマよりもビジネスにおいてずっと価値が高いからだ。
学んだことがなかったので簡単そうな ミクロ経済学入門の入門 を購入した。
読んでて気づきを得てふとツィートした。
なので、システムのコンポーネントに関しての意思決定をするとき、必ずしも上位の意思決定者の判断が正しいわけではなく、現場のメンバーに判断を委ねる状況が最適な場合もある。一方向じゃなく、双方向の情報の非対称性を解消する取り組みが大事。
&amp;mdash; Tetsuya Morimoto (@t2y) September 29, 2021 Java 17 リリースイベント 【オンライン】 JJUGナイトセミナー「Java 17 リリース記念イベント with Foojay」9/29(水) 開催 に参加した。Java の LTS はいま過渡期でややこしいことになって、8, 11, 17 になる。リリースされたばかりの Java 17 は LTS で重要なバージョンになる。Oracle Java SE Supportロードマップ から Premier Support 期限が次になる。
8: 2022年3月 11: 2023年9月 17: 2026年9月 いま 11 を使っている組織はいいが、8 を使っている組織もまだまだ多いと推測する。8 と 11 の Premier Support 期限が近いことから 8 を使っている組織は 17 に一気にバージョンアップすることが想定される。どこかのタイミングで Java 17 を前提した開発に切り替わっていくだろうと思われる。</description><content>&lt;p>昨日は24時頃に寝て8時ぐらいに起きる。やや発熱して疲れてたせいか、久しぶりに早く寝付けた。一日を通して体温は平均36.7℃なのでもう副反応は過ぎたみたい。体調もまったく悪くない。&lt;/p>
&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>過去に働いていた会社での課題管理のやり方や開発方法論について、当時の上司と雑談したところ &lt;a href="https://en.wikipedia.org/wiki/Joel_Spolsky">Joel Spolsky&lt;/a> に由来するということを聞いた。そこで今更ながらに &lt;a href="https://www.shoeisha.co.jp/book/detail/9784798118925">More Joel on Software&lt;/a> を読むことにした。2000年代に書かれた記事の内容なのでいまとなっては古典に分類される本かもしれない。だいたい半分ぐらい読んだ。技術の詳細に言及した内容は古くなっていてあまり有用ではないものも多いけど、マネジメントや優秀なプログラマーの特性などはいまでも通用する内容に思えた。あとで私が関心をもった内容をブログでまとめることにする。&lt;/p>
&lt;p>第10章コンピュータサイエンスの学生へのアドバイスで「卒業するまでにミクロ経済学を学ぶこと」という節がある。著者がミクロ経済学を推奨する理由を引用するとこれら。&lt;/p>
&lt;blockquote>
&lt;p>ミクロ経済学はビジネスで重要な理論すべての基礎となっている。需要と供給とか、競争優位とか、NPV とか割り引きとか限界効能について知らなければ、ビジネスの仕組みが全然理解できないからだ。&lt;/p>
&lt;p>マクロ経済学は、当たっているよりもはずれていることの方が多い。スキップしてよい。それ以降はただ悪くなっていく一方。&lt;/p>
&lt;p>ビジネスの基礎を理解しているプログラマは、理解していないプログラマよりもビジネスにおいてずっと価値が高いからだ。&lt;/p>
&lt;/blockquote>
&lt;p>学んだことがなかったので簡単そうな &lt;a href="https://www.iwanami.co.jp/book/b285381.html">ミクロ経済学入門の入門&lt;/a> を購入した。&lt;/p>
&lt;p>読んでて気づきを得てふとツィートした。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">なので、システムのコンポーネントに関しての意思決定をするとき、必ずしも上位の意思決定者の判断が正しいわけではなく、現場のメンバーに判断を委ねる状況が最適な場合もある。一方向じゃなく、双方向の情報の非対称性を解消する取り組みが大事。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1443024587944464388?ref_src=twsrc%5Etfw">September 29, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="java-17-リリースイベント">Java 17 リリースイベント&lt;/h2>
&lt;p>&lt;a href="https://jjug.doorkeeper.jp/events/127204">【オンライン】 JJUGナイトセミナー「Java 17 リリース記念イベント with Foojay」9/29(水) 開催&lt;/a> に参加した。Java の LTS はいま過渡期でややこしいことになって、8, 11, 17 になる。リリースされたばかりの Java 17 は LTS で重要なバージョンになる。&lt;a href="https://www.oracle.com/jp/java/technologies/java-se-support-roadmap.html">Oracle Java SE Supportロードマップ&lt;/a> から Premier Support 期限が次になる。&lt;/p>
&lt;ul>
&lt;li>8: 2022年3月&lt;/li>
&lt;li>11: 2023年9月&lt;/li>
&lt;li>17: 2026年9月&lt;/li>
&lt;/ul>
&lt;p>いま 11 を使っている組織はいいが、8 を使っている組織もまだまだ多いと推測する。8 と 11 の Premier Support 期限が近いことから 8 を使っている組織は 17 に一気にバージョンアップすることが想定される。どこかのタイミングで Java 17 を前提した開発に切り替わっていくだろうと思われる。&lt;/p>
&lt;p>最初の発表は Pattern Matching &amp;amp; Sealed Classes に特化した内容。これまでは instanceof と共に使う機能だった。switch 構文とパターンマッチングを組み合わせると、コードが簡潔になって &lt;a href="https://en.wikipedia.org/wiki/Cognitive_complexity">Cognitive complexity&lt;/a> を下げるという。発表者が Type Guard という呼び方をしていた。Type Guard をググると TypeScript の記事がヒットする。&lt;a href="https://openjdk.java.net/jeps/406">JEP 406: Pattern Matching for switch (Preview)&lt;/a> ではこれを &lt;em>guarded pattern&lt;/em> と呼んでいる。まだあまり一般的な用語ではないのかもしれない。あとは Sealed クラスと組み合わせた switch 構文のコード例では、すべてのパターンが網羅されていることをコンパイラが検出して &lt;em>default&lt;/em> 句が不要になるコード例も紹介されててよさそうにみえた。但し、switch 構文のパターンマッチングは preview なので実際には 17 ではまだ使われないのかもしれない。今後もさらに switch 構文とパターンマッチングの機能拡張が行われる展望らしい。&lt;/p>
&lt;p>2番目の発表は Java 17 の全体的な話し。fix した issues のツリーマップで contributor の分布を紹介していた。oracle, redhat, independent の順番に多い。oracle が過半数以上。日本だと ntt data が一番貢献してた。spring フレームワークの次期バージョンは Java 17 がベースラインになる。java のアップグレードを促す要因の1つにはなるはず。lts なのになぜ preview や incubator があるのか？openjdk 開発側は6ヶ月というリリースサイクルを守っている。lts にするか否かは開発者が決めているらしい。graalvm のリリースサイクルは java とは異なる。こちらは年3回のリリースなので次のリリースで出てくるはず？いくつか jep の内容を紹介してた。jep の概要は &lt;a href="https://qiita.com/ReiTsukikazu/items/407d61cb66fa4f562bf9">Java17の新機能をざっくり紹介&lt;/a> にまとまっている。さくらばさんがパッケージの api レベルでの変更を &lt;a href="http://www.javainthebox.com/2021/09/jepjava-17.html">JEPでは語れないJava 17&lt;/a> にまとめている。ざっと目を通して興味があるものがあればみとくぐらい。8 から 17 への移行の記事やドキュメントなども紹介されてた。移行について基本は &lt;a href="https://docs.oracle.com/en/java/javase/17/migrate/getting-started.html">Oracle JDK Migration Guide&lt;/a> を読めとのこと。8 から 17 の移行せずにその次の 23 を待つと作り直しになってしまいますよと 17 への移行を推奨してた。&lt;/p></content></item><item><title>副反応はいずこ？</title><link>/diary/posts/2021/0928/</link><pubDate>Tue, 28 Sep 2021 08:35:36 +0900</pubDate><guid>/diary/posts/2021/0928/</guid><description>2時過ぎぐらいに寝て5時前ぐらいに起きる。やや熱っぽいかなぁぐらいの印象でもう一度寝る。8時前に起きるともう平気になってた。昨日、書籍や macbook を持って帰ってきて引きこもり対策してたけど、体調が悪くないのでオフィスへ行くことにした。お昼から1時間おきに熱を測ってみたら37℃前後なので少し熱は出ていたみたい。とくにしんどくなかったので普通にお仕事してた。
水分補給 副反応対策として、ポカリスエットイオンウォーターの粉末をウォーターサーバーの水に混ぜて飲んでみる。イオンウォーターと普通の ポカリスエットとの違いは何ですか？ によると、基本的な成分は同じで低カロリーという違いがあるらしい。
日記サイト構築 diary リポジトリに push すると GitHub Actions で静的サイトをビルドして GitHub Pages で扱うための gh-pages ブランチに push される。GitHub Actions による GitHub Pages への自動デプロイ を参考にした。gh-pages ブランチにあるものが次の URL で参照される。リポジトリ名の diary がパスになるらしい。
https://t2y.github.io/diary/ まだ設定は不完全だけど、運用しながらおいおい設定を詰めていく。Hugo は会社のホームページにも使っているので慣れているのと、使い心地も気に入っているのでこのまま使い続ける。会社のサイトはたまにしか更新しないので日記を書く方が更新頻度があがって Hugo を触るインセンティブになるかもしれない。
ジャーナリングとは 読みかけで放置していた 「手で書くこと」が知性を引き出す 心を整え、思考を解き放つ新習慣「ジャーナリング」入門 を読み終えた。この日記も簡易的なジャーナリングになればよいと願っていたりする。「書くこと」への期待値を高くもって読み進めたせいか、内容が薄かったように思えた。ジャーナリングを行うテーマのワークシートが24個ついていて、ページ数を稼いでいるように感じた。日常生活であまり書いていない人には関心をそそるかもしれないけど、プログラマーは日常生活で平均以上の文字数を書いていると推測する。私にとってはあまり目新しいことはなかった。
マインドフルネス (気づき) を得るための方法論の1つとして書く瞑想=ジャーナリングを推奨している。手書きとキーボードのタイピングでは効果が異なるという研究成果はおもしろかった。手書きの方が記憶力や理解力を高める、脳波はアルファ波が出るといった研究があるという。従って、より創造的な仕事に向くかもしれない。ジャーナリングの研究によって、わかってきたことの1つは、自己や他者、社会への適応力を高めると示唆されている。ここでいう「適応力が高まる」というのは、課題や問題をどうとらえ、これからどう行動すればよいかのヒントにつながる可能性があるという意図らしい。ジャーナリングは心身の健全性にもプラスの影響をもたらされる可能性が高いといった研究も紹介されている。私の感覚的にも、書くことで課題や問題を明確化することはストレスを軽減して健康になるような気がする。
ジャーナリングをする際に大事なことは「考えない」 ということです。
書く瞑想とも言われる所以にも思える。そのままの状態を観察して気づきとするような、そういう姿勢を説いている。この内容は業務の取り組みへの応用からは離れてしまう。
前に メタ認知で〈学ぶ力〉を高める：認知心理学が解き明かす効果的学習法 の著者が タイピング思考法の開発とその有効性の検討 という研究発表をしていた。この研究は、思考過程を推測する手法として、発話思考法における問題を解決するタイピング思考法を提案し、既知の問題を解決しつつ、発想の促進効果もみられてそこそこよい結果が出たというものであった。思考過程を発話とタイピングの2つで比較している。比較項目に手書きがあると少し結果に差異が出たりしたのかなぁとか思った。
Atlassian Community Online MeetUp の参加 課題管理システムとチャットツールを連携する Halp というツールがあるらしい。うちは課題管理システムにクラウド jira を使っていて、Atlassian 社から届くメールで本イベントのことを知った。Atlassian Community Event の頭文字をとって ACE と呼ぶらしい。</description><content>&lt;p>2時過ぎぐらいに寝て5時前ぐらいに起きる。やや熱っぽいかなぁぐらいの印象でもう一度寝る。8時前に起きるともう平気になってた。昨日、書籍や macbook を持って帰ってきて引きこもり対策してたけど、体調が悪くないのでオフィスへ行くことにした。お昼から1時間おきに熱を測ってみたら37℃前後なので少し熱は出ていたみたい。とくにしんどくなかったので普通にお仕事してた。&lt;/p>
&lt;h2 id="水分補給">水分補給&lt;/h2>
&lt;p>副反応対策として、ポカリスエットイオンウォーターの粉末をウォーターサーバーの水に混ぜて飲んでみる。イオンウォーターと普通の &lt;a href="https://www.otsuka.co.jp/faq/ionwater/01.html">ポカリスエットとの違いは何ですか？&lt;/a> によると、基本的な成分は同じで低カロリーという違いがあるらしい。&lt;/p>
&lt;h2 id="日記サイト構築">日記サイト構築&lt;/h2>
&lt;p>&lt;a href="https://github.com/t2y/diary">diary&lt;/a> リポジトリに push すると GitHub Actions で静的サイトをビルドして GitHub Pages で扱うための gh-pages ブランチに push される。&lt;a href="https://qiita.com/peaceiris/items/d401f2e5724fdcb0759d">GitHub Actions による GitHub Pages への自動デプロイ&lt;/a> を参考にした。gh-pages ブランチにあるものが次の URL で参照される。リポジトリ名の &lt;code>diary&lt;/code> がパスになるらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://t2y.github.io/diary/">https://t2y.github.io/diary/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>まだ設定は不完全だけど、運用しながらおいおい設定を詰めていく。&lt;a href="https://gohugo.io/">Hugo&lt;/a> は会社のホームページにも使っているので慣れているのと、使い心地も気に入っているのでこのまま使い続ける。会社のサイトはたまにしか更新しないので日記を書く方が更新頻度があがって Hugo を触るインセンティブになるかもしれない。&lt;/p>
&lt;h2 id="ジャーナリングとは">ジャーナリングとは&lt;/h2>
&lt;p>読みかけで放置していた &lt;a href="https://bunkyosha.com/books/9784866510149">「手で書くこと」が知性を引き出す 心を整え、思考を解き放つ新習慣「ジャーナリング」入門&lt;/a> を読み終えた。この日記も簡易的なジャーナリングになればよいと願っていたりする。「書くこと」への期待値を高くもって読み進めたせいか、内容が薄かったように思えた。ジャーナリングを行うテーマのワークシートが24個ついていて、ページ数を稼いでいるように感じた。日常生活であまり書いていない人には関心をそそるかもしれないけど、プログラマーは日常生活で平均以上の文字数を書いていると推測する。私にとってはあまり目新しいことはなかった。&lt;/p>
&lt;p>マインドフルネス (気づき) を得るための方法論の1つとして書く瞑想=&lt;strong>ジャーナリング&lt;/strong>を推奨している。手書きとキーボードのタイピングでは効果が異なるという研究成果はおもしろかった。手書きの方が記憶力や理解力を高める、脳波はアルファ波が出るといった研究があるという。従って、より創造的な仕事に向くかもしれない。ジャーナリングの研究によって、わかってきたことの1つは、自己や他者、社会への適応力を高めると示唆されている。ここでいう「適応力が高まる」というのは、課題や問題をどうとらえ、これからどう行動すればよいかのヒントにつながる可能性があるという意図らしい。ジャーナリングは心身の健全性にもプラスの影響をもたらされる可能性が高いといった研究も紹介されている。私の感覚的にも、書くことで課題や問題を明確化することはストレスを軽減して健康になるような気がする。&lt;/p>
&lt;blockquote>
&lt;p>ジャーナリングをする際に大事なことは「考えない」 ということです。&lt;/p>
&lt;/blockquote>
&lt;p>書く瞑想とも言われる所以にも思える。そのままの状態を観察して気づきとするような、そういう姿勢を説いている。この内容は業務の取り組みへの応用からは離れてしまう。&lt;/p>
&lt;p>前に &lt;a href="https://note.com/t2y1979/n/n4713058f48ce">メタ認知で〈学ぶ力〉を高める：認知心理学が解き明かす効果的学習法&lt;/a> の著者が &lt;a href="https://www.jstage.jst.go.jp/article/jjet/37/Suppl./37_KJ00009957528/_article/-char/ja">タイピング思考法の開発とその有効性の検討&lt;/a> という研究発表をしていた。この研究は、思考過程を推測する手法として、発話思考法における問題を解決するタイピング思考法を提案し、既知の問題を解決しつつ、発想の促進効果もみられてそこそこよい結果が出たというものであった。思考過程を発話とタイピングの2つで比較している。比較項目に手書きがあると少し結果に差異が出たりしたのかなぁとか思った。&lt;/p>
&lt;h2 id="atlassian-community-online-meetup-の参加">Atlassian Community Online MeetUp の参加&lt;/h2>
&lt;p>課題管理システムとチャットツールを連携する &lt;a href="https://halp.com/">Halp&lt;/a> というツールがあるらしい。うちは課題管理システムにクラウド jira を使っていて、Atlassian 社から届くメールで本イベントのことを知った。Atlassian Community Event の頭文字をとって ACE と呼ぶらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://ace.atlassian.com/events/details/atlassian-tokyo-presents-48-tokyo-atlassian-community-online-meetup-dian-pu-bizinesudenohuo-yong-shi-li-halphuo-yong-tipsxin-aceridafa-biao/">#48 Tokyo Atlassian Community Online MeetUp - 店舗ビジネスでの活用事例＆Halp活用Tips＆新ACEリーダー発表&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>初めて ACE イベントに参加した。コミュニティ (ユーザー) 主体のイベントになるらしい。運営メンバーの中に前職での jira チームのリーダーが出ていてちょっとびっくりした。何度かやり取りしてお世話になった方だったのでこういうところでも活動しているんだと思ってさらに尊敬の念が深くなった。halp については、想像通り、非開発者向けに slack の操作だけで jira の課題管理システムと連携するためのサービスとしてよさそうだった。slack (halp) と jira は双方向にデータの同期ができる。いまのところ、halp の無料プランがないので試せてないけど、なにかの機会で一通り触ってみたいと思うサービスだった。&lt;/p></content></item></channel></rss>