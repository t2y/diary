<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Book on</title><link>/diary/tags/book/</link><description>Recent content in Book on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 18 Feb 2024 11:34:26 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/book/index.xml" rel="self" type="application/rss+xml"/><item><title>人が詩を読むとき</title><link>/diary/posts/2024/0218/</link><pubDate>Sun, 18 Feb 2024 11:34:26 +0900</pubDate><guid>/diary/posts/2024/0218/</guid><description>4時に寝て5時頃に起きてトイレに行ってまた寝て7時半に起きた。2時前から布団に入っていたと思うが、夜に居眠りするせいで夜中はうまく眠れない。
今日の運動はレッグレイズ(椅子),腹筋ローラー,腕立て,スクワット,背筋,水中ウォーキング,縄跳び(両足跳),散歩をした。統計を 運動の記録 にまとめる。
睡眠時無呼吸症候群の検査キット フィリップス社のウォッチパット ユニファイド という検査キットが送られてきた。指先と喉元に装置を付けて電源を ON にして眠るだけ。装置の特徴としておもしろいのは電源を ON にしたら OFF にすることはできなくて10時間後に自動的に OFF になるという。これは寝ている間に誤操作で電源が OFF にならないようにという配慮だと思う。正しい設計だと思う。また晩ご飯食べてから1-2時間居眠りしてしまって、それから40分ほど散歩行って、お風呂入ってストレッチして眠ることにした。ちょっと寝てしまっていたからいつもより寝付けなくてうまく検査できているか、普段通りではないという意味で不安でもある。4-6時ぐらいまでは普通に眠れたと思うけど、サンプリングのデータとしては少ないかもしれない。
掃除のエネルギー消費 午前中、部屋の掃除やレイアウト変更を2-3時間していた。ふと fitbit のアクティビティをみると、散歩と同等もしくはそれよりも高い数値を示していた。掃除けっこうしんどいのはそうだし、あちこち歩いたり拭いたりモノを片付けたりするから歩くよりもカラダ全体を使って運動しているという見方ができる。定期的に部屋のレイアウト変更や大掃除をすると、よい有酸素運動になることに気付いた。
2023年度の個人の確定申告1 昨年の確定申告はこちら 。書類作りの作業に着手し始めた。今年も昨年とやることはほとんど変わらない。
給与の源泉徴収票からの転機 印税売上を源泉徴収済み雑収入として登録 ふるさと納税と npo 向けの寄付金の登録 株式の取引報告書の登録 (損益通算) 小規模企業共済の所得控除の登録 ふるさと納税の入力をしようとして電子申請できるようになっていることに気付いた。今年から？
特定事業者のポータルサイトにてダウンロードした寄付金控除に関する証明書（XML形式）から寄付金の内容をまとめて取り込むことができます。
私は さとふる でふるさと納税の手続きをしている。調べてみたらポータルで「寄付金控除に関する証明書」を電子データで発行してくれる。申請してから発行に2日かかるという点が意味不明だけど、申請して待つことにした。来年からは事前に証明書を発行をやっておくとよさそう。
ふるさと納税 「寄付金控除に関する証明書」発行・発送サービス いつの間にか上場株式等に係る譲渡損失の損益通算及び繰越控除が freee 上でできるようになっていた。昔はこの書類は電子申請に対応していなかったような気がする。
No.1474 上場株式等に係る譲渡損失の損益通算及び繰越控除 ふるさと納税が電子申請できるようになったことであとは認定 NPO への寄付金控除の領収書、具体的には「国境なき医師団」の領収書だけが紙で残った。私にとって必要な確定申告の大半は電子申請できるようになった。
頁をめくる音で息をする オフィスの机の上にある書類やら備品やらがとっ散らかった雑踏の中に 読みかけのまま の状態の本をみつけた。ちょうど2時間ほど時間を持て余していて、その隙間時間によいタイミングに現れた。まさにこの日の、この時間のためにそこに佇んでいたかのよう。6割ぐらいは読み終えていたからちょうど2時間弱で読み終えた。端的に言って本書は興味深い読みものに感じる。
「ひととの繋がりを生む町の本屋さん」というのを見かけるたびに、自分は人と繋がりたくないから本を読んでいたのかもしれないと思う。生きていればいくらでも繋がりがあるのに、どうして本の世界でも繋がらないといけないのだろう。そうとはいえ、古本屋を続けて来て、一枚手ぬぐいを作れるぐらいには無数の糸ができている。ひとりになりたかったのに、ひとりでは生きてはいけないことを知る。
この表現は私の最近の心境と、とてもよく似ている。嘘と欺瞞だらけの組織や煩わしい人間関係に愛想を尽かして、起業した頃、ひとりでひっそりと自分の仕事だけをしていこうと考えていた。そして、実際にそれに近いことを1-2年やってみて それではうまくいかない ことを知った。
著者は文学を学んでいた方なので本書では詩をたくさん紹介している。多くの人は人生において詩を読む時間は少ない。私も学生の頃の授業以外で詩をほとんど読んだことはないと思うし、詩を読んでもあまりピンとこないことが多い。しかし、人生において詩を読む機会は何度かあるのだろうなとは思う。それは人生がうまくいっていないときだと思う。
何ものにもなれない自分を実感したとき、なにかしらの詩を読んで思うところがあるかもしれない 起業して失敗して、なんだかよくわからない手応えのとき、なにかしらの詩を読んで思うところがあるかもしれない 昔のように一心不乱に集中した開発はできないことはわかっているのに惰性で開発を続けているとき、なにかしらの詩を読んで思うところがあるかもしれない 本書を読んでいると、なぜ人は詩を読むのかの根源を探す旅に出掛けるような気がしてくる。</description><content>&lt;p>4時に寝て5時頃に起きてトイレに行ってまた寝て7時半に起きた。2時前から布団に入っていたと思うが、夜に居眠りするせいで夜中はうまく眠れない。&lt;/p>
&lt;p>今日の運動はレッグレイズ(椅子),腹筋ローラー,腕立て,スクワット,背筋,水中ウォーキング,縄跳び(両足跳),散歩をした。統計を &lt;a href="https://docs.google.com/spreadsheets/d/1bg85QtM-LciUgey8I79uI7vW2PEwsP6TVdeIRVkACBg/edit?usp=sharing">運動の記録&lt;/a> にまとめる。&lt;/p>
&lt;h2 id="睡眠時無呼吸症候群の検査キット">睡眠時無呼吸症候群の検査キット&lt;/h2>
&lt;p>&lt;a href="https://www.philips.co.jp/healthcare/product/HCNOCTN439/watchpat-unified">フィリップス社のウォッチパット ユニファイド&lt;/a> という検査キットが送られてきた。指先と喉元に装置を付けて電源を ON にして眠るだけ。装置の特徴としておもしろいのは電源を ON にしたら OFF にすることはできなくて10時間後に自動的に OFF になるという。これは寝ている間に誤操作で電源が OFF にならないようにという配慮だと思う。正しい設計だと思う。また晩ご飯食べてから1-2時間居眠りしてしまって、それから40分ほど散歩行って、お風呂入ってストレッチして眠ることにした。ちょっと寝てしまっていたからいつもより寝付けなくてうまく検査できているか、普段通りではないという意味で不安でもある。4-6時ぐらいまでは普通に眠れたと思うけど、サンプリングのデータとしては少ないかもしれない。&lt;/p>
&lt;h2 id="掃除のエネルギー消費">掃除のエネルギー消費&lt;/h2>
&lt;p>午前中、部屋の掃除やレイアウト変更を2-3時間していた。ふと fitbit のアクティビティをみると、散歩と同等もしくはそれよりも高い数値を示していた。掃除けっこうしんどいのはそうだし、あちこち歩いたり拭いたりモノを片付けたりするから歩くよりもカラダ全体を使って運動しているという見方ができる。定期的に部屋のレイアウト変更や大掃除をすると、よい有酸素運動になることに気付いた。&lt;/p>
&lt;h2 id="2023年度の個人の確定申告1">2023年度の個人の確定申告1&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0313/#2022年度の個人の確定申告">昨年の確定申告はこちら&lt;/a> 。書類作りの作業に着手し始めた。今年も昨年とやることはほとんど変わらない。&lt;/p>
&lt;ul>
&lt;li>給与の源泉徴収票からの転機&lt;/li>
&lt;li>印税売上を源泉徴収済み雑収入として登録&lt;/li>
&lt;li>ふるさと納税と npo 向けの寄付金の登録&lt;/li>
&lt;li>株式の取引報告書の登録 (損益通算)&lt;/li>
&lt;li>小規模企業共済の所得控除の登録&lt;/li>
&lt;/ul>
&lt;p>ふるさと納税の入力をしようとして電子申請できるようになっていることに気付いた。今年から？&lt;/p>
&lt;blockquote>
&lt;p>特定事業者のポータルサイトにてダウンロードした寄付金控除に関する証明書（XML形式）から寄付金の内容をまとめて取り込むことができます。&lt;/p>
&lt;/blockquote>
&lt;p>私は &lt;a href="https://www.satofull.jp/">さとふる&lt;/a> でふるさと納税の手続きをしている。調べてみたらポータルで「寄付金控除に関する証明書」を電子データで発行してくれる。申請してから発行に2日かかるという点が意味不明だけど、申請して待つことにした。来年からは事前に証明書を発行をやっておくとよさそう。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.satofull.jp/static/kifukin_shomei.php?valinkid=AS00227_1">ふるさと納税 「寄付金控除に関する証明書」発行・発送サービス&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>いつの間にか上場株式等に係る譲渡損失の損益通算及び繰越控除が freee 上でできるようになっていた。昔はこの書類は電子申請に対応していなかったような気がする。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/shotoku/1474.htm">No.1474 上場株式等に係る譲渡損失の損益通算及び繰越控除&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ふるさと納税が電子申請できるようになったことであとは認定 NPO への寄付金控除の領収書、具体的には「国境なき医師団」の領収書だけが紙で残った。私にとって必要な確定申告の大半は電子申請できるようになった。&lt;/p>
&lt;h2 id="頁をめくる音で息をする">頁をめくる音で息をする&lt;/h2>
&lt;p>オフィスの机の上にある書類やら備品やらがとっ散らかった雑踏の中に &lt;a href="/diary/diary/posts/2023/1114/">読みかけのまま&lt;/a> の状態の本をみつけた。ちょうど2時間ほど時間を持て余していて、その隙間時間によいタイミングに現れた。まさにこの日の、この時間のためにそこに佇んでいたかのよう。6割ぐらいは読み終えていたからちょうど2時間弱で読み終えた。端的に言って本書は興味深い読みものに感じる。&lt;/p>
&lt;blockquote>
&lt;p>「ひととの繋がりを生む町の本屋さん」というのを見かけるたびに、自分は人と繋がりたくないから本を読んでいたのかもしれないと思う。生きていればいくらでも繋がりがあるのに、どうして本の世界でも繋がらないといけないのだろう。そうとはいえ、古本屋を続けて来て、一枚手ぬぐいを作れるぐらいには無数の糸ができている。ひとりになりたかったのに、ひとりでは生きてはいけないことを知る。&lt;/p>
&lt;/blockquote>
&lt;p>この表現は私の最近の心境と、とてもよく似ている。嘘と欺瞞だらけの組織や煩わしい人間関係に愛想を尽かして、起業した頃、ひとりでひっそりと自分の仕事だけをしていこうと考えていた。そして、実際にそれに近いことを1-2年やってみて &lt;a href="https://note.com/t2y1979/n/n84deed5fd934">それではうまくいかない&lt;/a> ことを知った。&lt;/p>
&lt;p>著者は文学を学んでいた方なので本書では詩をたくさん紹介している。多くの人は人生において詩を読む時間は少ない。私も学生の頃の授業以外で詩をほとんど読んだことはないと思うし、詩を読んでもあまりピンとこないことが多い。しかし、人生において詩を読む機会は何度かあるのだろうなとは思う。それは人生がうまくいっていないときだと思う。&lt;/p>
&lt;ul>
&lt;li>何ものにもなれない自分を実感したとき、なにかしらの詩を読んで思うところがあるかもしれない&lt;/li>
&lt;li>起業して失敗して、なんだかよくわからない手応えのとき、なにかしらの詩を読んで思うところがあるかもしれない&lt;/li>
&lt;li>昔のように一心不乱に集中した開発はできないことはわかっているのに惰性で開発を続けているとき、なにかしらの詩を読んで思うところがあるかもしれない&lt;/li>
&lt;/ul>
&lt;p>本書を読んでいると、なぜ人は詩を読むのかの根源を探す旅に出掛けるような気がしてくる。&lt;/p></content></item><item><title>運動と食事と代謝をあげること</title><link>/diary/posts/2024/0204/</link><pubDate>Sun, 04 Feb 2024 00:36:36 +0900</pubDate><guid>/diary/posts/2024/0204/</guid><description>2時に寝て6時半に起きた。今日も途中で起きずよく眠れた。運動と睡眠は相関関係があるのかもしれない。
今日の運動はレッグレイズ(椅子),腹筋ローラーをした。統計を 運動の記録 にまとめる。
格闘家に学ぶ体脂肪コントロール―なぜ、格闘家は3時間で3キロ体重を落とせるのか? せっかく運動の習慣がついてきたのでこの機会に体重を落とす。1月21日に測った体重が91.2kg、体脂肪率が27.8だった。今朝の体重は87.0kg、体脂肪率が24.9だった。14日で体重が4.2kg、体脂肪率が2.9減った。人生史上もっとも太っているのがいまだったのでちょっと運動して、ちょっと食べものを改善すれば体重や体脂肪率も大きく落ちる。恒常性ないしホメオスターシス という人体の現象があって、5%程度の体重が落ちると身体は現状を維持しようと脂肪を温存したり、食べたものから最大限の栄養を吸収しようとしたりすることがあって1ヶ月程度、体重が落ちないといったことは普通らしい。90 * 0.05 = 4.5kg なのでそろそろ体重が落ちにくくなる時期かもしれない。
過去に 軽度肥満の私をたった 3 ヶ月で 13.3kg 痩せさせた 5 つの方法と 3 冊の本 を読んで「格闘家に学ぶ体脂肪コントロール―なぜ、格闘家は3時間で3キロ体重を落とせるのか?」という本を購入した。当時 (2009年頃) も本書を読みながら体脂肪コントロールのようなことをして、うまくいったような記憶がある。具体的にどういう成果だったのかはもう覚えていない。ただ本書がとてもよかったという印象だけ覚えていた。
ちなみに、炭水化物をなるべく食べるよう勧めているダイエット本に初めて出会いました。
本書の特徴としてはカラダの 代謝 をあげることで効率よく脂肪を燃焼することを提案している。炭水化物を抜くとカラダは飢餓状態だと勘違いして脂肪をなるべく温存しようと筋肉を先に分解してしまうらしい。代謝をあげるという視点から炭水化物を抜くというダイエットのやり方はよくないと説いている。この代謝をあげるという概念は、日常生活を大きく変えることもなく、根性や意志の力で激しい運動をする必要もなく、ちょっと意識や行動を変えるだけで日々の生活のエネルギーをたくさん消費させるよう、カラダに働きかける。私のような、人間が弱い人に向いた方法だと思う。
本書の中で疲労は代謝を下げてしまうため、疲労を回復するためにストレッチを長くしようと提案している。トレーナーさんも筋トレした後にストレッチをした方がよいとアドバイスしてくれていた。Dr.stretch さんに通い始めて3年ぐらい経つと思うが、物理的な身体の疲労でしんどいと感じたことは通い始めてから1度もない。ストレッチは疲労回復に大きな効果があることを経験則からも学んでいる。筋トレした後や散歩してきた後に代謝をあげるための手段としてストレッチを取り入れていこうと思う。
今日は本書をまた読み直して、日々の生活で意識付けするための要項を upnote のノートに書いて整理してみた。1つハッとしたことに徒歩は有酸素運動にとてもよいと書いてあったところ。
有酸素運動を週に200分行うことを目標にする 1日平均30分程度 徒歩15分の道のりを往復する程度でよい コロナ禍でリモートワークになって太った人が私も含めて、周りではたくさんいた。本書の著者が提案している週に200分の有酸素運動って、大半の人が通勤でカバーできる運動量であることにいま気付いた。「通勤」が代謝をあげるための最低限の有酸素運動だったんだと、いまさらながら気付いたのが今日の発見。
読み直して、私にとっての 重要なところをノートのまとめた 。</description><content>&lt;p>2時に寝て6時半に起きた。今日も途中で起きずよく眠れた。運動と睡眠は相関関係があるのかもしれない。&lt;/p>
&lt;p>今日の運動はレッグレイズ(椅子),腹筋ローラーをした。統計を &lt;a href="https://docs.google.com/spreadsheets/d/1bg85QtM-LciUgey8I79uI7vW2PEwsP6TVdeIRVkACBg/edit?usp=sharing">運動の記録&lt;/a> にまとめる。&lt;/p>
&lt;h2 id="格闘家に学ぶ体脂肪コントロールなぜ格闘家は3時間で3キロ体重を落とせるのか">格闘家に学ぶ体脂肪コントロール―なぜ、格闘家は3時間で3キロ体重を落とせるのか?&lt;/h2>
&lt;p>せっかく運動の習慣がついてきたのでこの機会に体重を落とす。1月21日に測った体重が91.2kg、体脂肪率が27.8だった。今朝の体重は87.0kg、体脂肪率が24.9だった。14日で体重が4.2kg、体脂肪率が2.9減った。人生史上もっとも太っているのがいまだったのでちょっと運動して、ちょっと食べものを改善すれば体重や体脂肪率も大きく落ちる。&lt;a href="https://ja.wikipedia.org/wiki/%E6%81%92%E5%B8%B8%E6%80%A7">恒常性ないしホメオスターシス&lt;/a> という人体の現象があって、5%程度の体重が落ちると身体は現状を維持しようと脂肪を温存したり、食べたものから最大限の栄養を吸収しようとしたりすることがあって1ヶ月程度、体重が落ちないといったことは普通らしい。90 * 0.05 = 4.5kg なのでそろそろ体重が落ちにくくなる時期かもしれない。&lt;/p>
&lt;p>過去に &lt;a href="http://blog.livedoor.jp/nipotan/archives/51381115.html">軽度肥満の私をたった 3 ヶ月で 13.3kg 痩せさせた 5 つの方法と 3 冊の本&lt;/a> を読んで「格闘家に学ぶ体脂肪コントロール―なぜ、格闘家は3時間で3キロ体重を落とせるのか?」という本を購入した。当時 (2009年頃) も本書を読みながら体脂肪コントロールのようなことをして、うまくいったような記憶がある。具体的にどういう成果だったのかはもう覚えていない。ただ本書がとてもよかったという印象だけ覚えていた。&lt;/p>
&lt;blockquote>
&lt;p>ちなみに、炭水化物をなるべく食べるよう勧めているダイエット本に初めて出会いました。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://amzn.to/3vZ2l73" target="_blank">&lt;img src="https://m.media-amazon.com/images/I/41e71sMs+aL.jpg" width="240" />&lt;/a>&lt;/p>
&lt;p>本書の特徴としてはカラダの &lt;strong>代謝&lt;/strong> をあげることで効率よく脂肪を燃焼することを提案している。炭水化物を抜くとカラダは飢餓状態だと勘違いして脂肪をなるべく温存しようと筋肉を先に分解してしまうらしい。代謝をあげるという視点から炭水化物を抜くというダイエットのやり方はよくないと説いている。この代謝をあげるという概念は、日常生活を大きく変えることもなく、根性や意志の力で激しい運動をする必要もなく、ちょっと意識や行動を変えるだけで日々の生活のエネルギーをたくさん消費させるよう、カラダに働きかける。私のような、人間が弱い人に向いた方法だと思う。&lt;/p>
&lt;p>本書の中で疲労は代謝を下げてしまうため、疲労を回復するためにストレッチを長くしようと提案している。トレーナーさんも筋トレした後にストレッチをした方がよいとアドバイスしてくれていた。Dr.stretch さんに通い始めて3年ぐらい経つと思うが、物理的な身体の疲労でしんどいと感じたことは通い始めてから1度もない。ストレッチは疲労回復に大きな効果があることを経験則からも学んでいる。筋トレした後や散歩してきた後に代謝をあげるための手段としてストレッチを取り入れていこうと思う。&lt;/p>
&lt;p>今日は本書をまた読み直して、日々の生活で意識付けするための要項を upnote のノートに書いて整理してみた。1つハッとしたことに徒歩は有酸素運動にとてもよいと書いてあったところ。&lt;/p>
&lt;ul>
&lt;li>有酸素運動を週に200分行うことを目標にする
&lt;ul>
&lt;li>1日平均30分程度&lt;/li>
&lt;li>徒歩15分の道のりを往復する程度でよい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>コロナ禍でリモートワークになって太った人が私も含めて、周りではたくさんいた。本書の著者が提案している週に200分の有酸素運動って、大半の人が通勤でカバーできる運動量であることにいま気付いた。「通勤」が代謝をあげるための最低限の有酸素運動だったんだと、いまさらながら気付いたのが今日の発見。&lt;/p>
&lt;p>読み直して、私にとっての &lt;a href="https://getupnote.com/share/notes/3ztcTpBat7RA2IpEjuoFzq1JKMf2/8eef267b-358b-4fcb-9fc1-bee1809ad1f7">重要なところをノートのまとめた&lt;/a> 。&lt;/p></content></item><item><title>経営の価値観にもの思い</title><link>/diary/posts/2024/0107/</link><pubDate>Sun, 07 Jan 2024 10:31:51 +0900</pubDate><guid>/diary/posts/2024/0107/</guid><description>2時に寝て途中起きて7時半に起きた。久しぶりによく眠れた。
今日の筋トレは腹筋:10x2,腕立て:10x1,スクワット15x1をした。
経営の価値観と財務 年末から読み進めて 昨日読み終えた本 の書評を書いた。こういったアウトプットをすることで学びを強化できるし、忘れてしまったときにまた自分の記事を読み返すこともできる。南原さんの経営の価値観に共感するところも多かった。
「絶対無理」なんて「絶対」ない！ 以前読んだ 貧乏はお金持ち にも書いてあったことだけれども、会社の資金繰りが厳しくなって、いざお金を借りようと思ったときに返済実績がないと借りられないことがあると書いてあった。余裕のあるときに借りて返済したという融資実績を作ることは会社の信用において意味があることだという。南原さんも同じことを指摘していて、その融資を受ける上で事業計画書が大事だという。これまで事業計画書を作るという考えが私にはなかったが、融資を受けるタイミングで試しに作ってみて外部の人たちが私の作った事業計画に対してどういった評価をするかで、やりたい事業の客観的な評価をするのもよさそうだと思い始めた。
2024年度中には投資フェーズに入り、その時点がもっともうちの会社の財務諸表の見栄えがよいと想定される。そのタイミングで事業計画書を作り、この先の5年程度の財務の安定化を図るというのも戦略の1つとして構想を進めていこうと思う。</description><content>&lt;p>2時に寝て途中起きて7時半に起きた。久しぶりによく眠れた。&lt;/p>
&lt;p>今日の筋トレは腹筋:10x2,腕立て:10x1,スクワット15x1をした。&lt;/p>
&lt;h2 id="経営の価値観と財務">経営の価値観と財務&lt;/h2>
&lt;p>年末から読み進めて &lt;a href="/diary/diary/posts/2024/0106/#社用車の1年点検">昨日読み終えた本&lt;/a> の書評を書いた。こういったアウトプットをすることで学びを強化できるし、忘れてしまったときにまた自分の記事を読み返すこともできる。南原さんの経営の価値観に共感するところも多かった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://note.com/t2y1979/n/n5fffbeaf494b">「絶対無理」なんて「絶対」ない！&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>以前読んだ &lt;a href="https://note.com/t2y1979/n/n634abc4c3941">貧乏はお金持ち&lt;/a> にも書いてあったことだけれども、会社の資金繰りが厳しくなって、いざお金を借りようと思ったときに返済実績がないと借りられないことがあると書いてあった。余裕のあるときに借りて返済したという融資実績を作ることは会社の信用において意味があることだという。南原さんも同じことを指摘していて、その融資を受ける上で事業計画書が大事だという。これまで事業計画書を作るという考えが私にはなかったが、融資を受けるタイミングで試しに作ってみて外部の人たちが私の作った事業計画に対してどういった評価をするかで、やりたい事業の客観的な評価をするのもよさそうだと思い始めた。&lt;/p>
&lt;p>2024年度中には投資フェーズに入り、その時点がもっともうちの会社の財務諸表の見栄えがよいと想定される。そのタイミングで事業計画書を作り、この先の5年程度の財務の安定化を図るというのも戦略の1つとして構想を進めていこうと思う。&lt;/p></content></item><item><title>年末の読書</title><link>/diary/posts/2023/1230/</link><pubDate>Sat, 30 Dec 2023 12:32:42 +0900</pubDate><guid>/diary/posts/2023/1230/</guid><description>1時には寝ようとしていたが、飲み過ぎで気分が悪くてあまり眠れなかった。気付いたら7時ぐらいになっていて、今日はもうしんどいと思ってそのまま寝ていたら9時45分にストレッチに出掛けるアラームで起きた。アラーム設定していなかったらドタキャンしていた。危ない。
ストレッチ 急いで準備して行ったわりにはなんとか間に合って普通にストレッチを受けてきた。今週はほぼ休みに入っていてあまりお仕事していないこともあってとくに負荷がかかっているわけでもないように考えていたが、座って作業していることに変わりはないことから太ももの後ろの筋だけはいつも通りに張りがあった。今日の開脚幅は開始前152cmで、ストレッチ後156cmだった。
トレーナーさんが年明けに全社集会のようなイベントがあって、全国からそれぞれの店舗の社員さんが東京に集まるという。そこまでは普通だとして、そのときに社員同士の懇親のための催しでけん玉とルービックキューブとクイズ大会をやるという。それを聞いて「私だったら会社辞めるわ」とか冗談を言いながら、やるとしてもいまどきのゲームとか、フットサルとか、もっと若い人が身近に楽しめるものにしたらいいのにと返した。トレーナーさんも誰がどういう背景でこんな企画をしているのか、まったく分からないと言う。過去に働いていた会社でも似たようなことがあったなと私も過去を思い出しながら聞いていた。
「絶対無理」なんて「絶対」ない！ たまたま知った 南原竜樹さん のその後に影響を受けて著書を買っていた。最近の amazon の配送日時はまったく当てにならず、年明けに届く予定が2日後に郵便ポストに入っていたりする。受け取りが必要ないものは早い分には困らない。たまたま手に取ったので読み始めた。本書は2012年2月に出版されている。すでに10年以上が経過している。そんな本を買って役に立つのかと訝しむ人も多いと思う。
私自身、自分で経営をやってきて、これまで身近に聞いてきた経営者の言葉でよくわかるようになったことがある。経営とは基本的な作法や論理を整えたらあとはその経営者の価値観でしかないのだ。その価値観が時代にあう・あわない、ビジネスモデルとして表現できるかどうか、世の中の役に立つかどうかは多くのケースでやってみないとわからない。他者の経営を学ぶことは、自身の価値観に近いものがあれば参考にしたり取り入れたりすればよいし、そうじゃなければ、自分の価値観とは違うがそういう考え方もあるのかと見識を広めるために使えばよいのだと思う。経営者がどういう価値観をもって経営するかがその会社の独自性や差別化につながる。したがって南原さんの価値観を学ぶには古い本でもよいだろうと考えた。
その冒頭で出版業界が斜陽なのであえて出版社を作るということに挑戦している。ATパブリケーション という会社になる。本書もこの会社から出版されている。ググると当時の記事もみつかる。
なぜこのタイミングで出版社を立ち上げたのか――南原竜樹さんの考え方 どうやら企業サイトがリンク切れしているのでもう存在していないのかもしれない。PR TIMES も2015年を最後にプレスリリースが途絶えている。
https://prtimes.jp/main/html/searchrlp/company_id/9711 この会社のビジネスはうまくいかなかったのかもしれない。しかし、それは結果であって、経営の価値観とはあまり関係がない。年末に読み進めてみようと思う。</description><content>&lt;p>1時には寝ようとしていたが、飲み過ぎで気分が悪くてあまり眠れなかった。気付いたら7時ぐらいになっていて、今日はもうしんどいと思ってそのまま寝ていたら9時45分にストレッチに出掛けるアラームで起きた。アラーム設定していなかったらドタキャンしていた。危ない。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>急いで準備して行ったわりにはなんとか間に合って普通にストレッチを受けてきた。今週はほぼ休みに入っていてあまりお仕事していないこともあってとくに負荷がかかっているわけでもないように考えていたが、座って作業していることに変わりはないことから太ももの後ろの筋だけはいつも通りに張りがあった。今日の開脚幅は開始前152cmで、ストレッチ後156cmだった。&lt;/p>
&lt;p>トレーナーさんが年明けに全社集会のようなイベントがあって、全国からそれぞれの店舗の社員さんが東京に集まるという。そこまでは普通だとして、そのときに社員同士の懇親のための催しでけん玉とルービックキューブとクイズ大会をやるという。それを聞いて「私だったら会社辞めるわ」とか冗談を言いながら、やるとしてもいまどきのゲームとか、フットサルとか、もっと若い人が身近に楽しめるものにしたらいいのにと返した。トレーナーさんも誰がどういう背景でこんな企画をしているのか、まったく分からないと言う。過去に働いていた会社でも似たようなことがあったなと私も過去を思い出しながら聞いていた。&lt;/p>
&lt;h2 id="絶対無理なんて絶対ない">「絶対無理」なんて「絶対」ない！&lt;/h2>
&lt;p>たまたま知った &lt;a href="/diary/diary/posts/2023/1228/#マネーの虎たちのその後">南原竜樹さん&lt;/a> のその後に影響を受けて著書を買っていた。最近の amazon の配送日時はまったく当てにならず、年明けに届く予定が2日後に郵便ポストに入っていたりする。受け取りが必要ないものは早い分には困らない。たまたま手に取ったので読み始めた。本書は2012年2月に出版されている。すでに10年以上が経過している。そんな本を買って役に立つのかと訝しむ人も多いと思う。&lt;/p>
&lt;p>私自身、自分で経営をやってきて、これまで身近に聞いてきた経営者の言葉でよくわかるようになったことがある。経営とは基本的な作法や論理を整えたらあとはその経営者の価値観でしかないのだ。その価値観が時代にあう・あわない、ビジネスモデルとして表現できるかどうか、世の中の役に立つかどうかは多くのケースでやってみないとわからない。他者の経営を学ぶことは、自身の価値観に近いものがあれば参考にしたり取り入れたりすればよいし、そうじゃなければ、自分の価値観とは違うがそういう考え方もあるのかと見識を広めるために使えばよいのだと思う。経営者がどういう価値観をもって経営するかがその会社の独自性や差別化につながる。したがって南原さんの価値観を学ぶには古い本でもよいだろうと考えた。&lt;/p>
&lt;p>その冒頭で出版業界が斜陽なのであえて出版社を作るということに挑戦している。&lt;a href="https://ja.wikipedia.org/wiki/AT%E3%83%91%E3%83%96%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3">ATパブリケーション&lt;/a> という会社になる。本書もこの会社から出版されている。ググると当時の記事もみつかる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.itmedia.co.jp/makoto/articles/1203/21/news078.html">なぜこのタイミングで出版社を立ち上げたのか――南原竜樹さんの考え方&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>どうやら企業サイトがリンク切れしているのでもう存在していないのかもしれない。PR TIMES も2015年を最後にプレスリリースが途絶えている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://prtimes.jp/main/html/searchrlp/company_id/9711">https://prtimes.jp/main/html/searchrlp/company_id/9711&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>この会社のビジネスはうまくいかなかったのかもしれない。しかし、それは結果であって、経営の価値観とはあまり関係がない。年末に読み進めてみようと思う。&lt;/p></content></item><item><title>エッセイと世界観</title><link>/diary/posts/2023/1114/</link><pubDate>Tue, 14 Nov 2023 08:29:13 +0900</pubDate><guid>/diary/posts/2023/1114/</guid><description>0時に寝て2時半に起きて4時に起きて7時に起きた。昨日は本を読みながらいろいろ考えていた。
頁をめくる音で息をする 先日の オンラインイベント でいとうさんに教えてもらった 頁をめくる音で息をする を読んでいる。ジャンルで言えばエッセイになる。著者の日常や日々の所感などを綴っている。Paul Graham 以外であまり読んだ記憶がないぐらい、私にとってエッセイという読みものは珍しい組み合わせになる。私がいま日々書いている日記も、ちょっと技巧を凝らしたり、お洒落な文章に変えてみたらエッセイにならないだろうか？と考えてみる。
この日記は「書くこと」を目的としているものの、ここで書き溜めたものは将来の自分を助けるコンテンツになることを確信している。それは過去の私が書いたコンテンツがいまの私を助けているし、書き溜めたコンテンツを評価してくれるサイト、例えば LAPRAS スコア をみると、高い評価値になっていたりする。いまのところ、このスコアを何かに使っているわけではないが、15年以上も書いてきたコンテンツはそう簡単に真似できるものではないし、一朝一夕で身につくスキルでもない。
過去にある会社のトライアルを受けたとき、ある技術の調査結果を wiki にまとめたところ「長文がちゃんと書ける」という評価をその会社の CTO から受けたことがあった。私はきょとんとして「そんなの開発者なら誰でも書けるでしょ？」と感想を述べたところ「いや、そうでもない。」と返ってきて、それから私もちゃんと考えてみたところ、言語能力を高めやすいプログラマーであってもちゃんとした文章を書けるのは全体の半分ぐらいしかいないことに気付いた。文章を書く練習をしない生活を何年も続けていると、驚くほど文章を書くスキルを退化させてしまうことに意識的に気付いていない人も多い。「本気出せば書ける」と思っている人ほど、その自信以上に文章を書けないことに気付いていない。
閑話休題。本書を読んでいると、日々のたわいもないエッセイがまったく無駄ではないことを伺える。それは本書そのものが売りもののコンテンツとして値段がついていて、私がそれを買っていて、ふわっと読み進めながら自分なりに消化して思うことがいくつかあるからだ。いくつか思いついたことをアイディアそのままに書く。
中原中也がいい いま 山羊の歌 をぱっと眺めるだけでもその天性を伺える。詩の冒頭を読むだけでもなにか違うと思わせる。著者は学生時代に中原中也を研究していたらしく、中也の作品には死を歌ったものが多くあるという。本書でもいくつか詩の引用がある。中也は ダダイズム と呼ばれる思想に影響を受けているらしい。
トタンがセンベイ食べて 春の日の夕暮は穏かです 幾時代かがありまして 茶色い戦争ありました 丘々は、胸に手を当て 退けり。 私の聖母 (サンタ・マリヤ)！ とにかく私は血を吐いた！ …… 汚れつちまつた悲しみに 今日も小雪の降りかかる よく技術書などで章節の初めに著名人の言葉を引用していたりする。日本人なら過去の文学者の詩を引用するというのもよさそうな気がした。
エッセイを配布する 一昔前は本という成果物をつくるのが大変な労力を伴うものだった。しかし、現代は文章は電子データでインターネット経由でダウンロードできる。日記を書き溜め、お気に入りの内容を脚色して、メッセージや想いをのせたものをエッセイ本としてつくってみるのもおもしろいかもしれないと、本書を読んで思うようになった。それはエッセイの中で著者の人となりや考えを知るきっかけになる。それを誰かに読んでもらうためというよりは、自分がどういった考えで日々の創作をしているかというのを歴史のように残すという意味合いが強い。例えば、年単位で整理して残しておく。おそらくはそれがまた将来の自分を助ける日がくるような気がする。もしうちの会社に関心をもつ人が出てくれば、電子データは自由にダウンロードして読めばいいし、何冊か紙の本に装丁してノベリティにしてもよい。
エッセイがその人の世界観を表す 本書を読んでいて著者の世界観が本書から伝わってくる。いや、ちょっとそれは言い過ぎでそんな大層なものでもない。著者は仕入元やお客さんとやり取りしながら本を扱うというスタイルを好んでいるようにみえる。ただ本を売り買いしてお金を稼ぐことをよしとしていない。もちろん生活費は必要だから売れてもらわないと困るという文章もちらほらあるが、それ以上に本に関わる人たちとのエピソードを紹介してこんなやり取りがあって嬉しかったということが綴られている。なんとなく私も共感することだが、大きいプロダクトの、大多数の利用者がいるプロジェクトほど、個々の利用者と接する機会や意見をやり取りする機会は少ない。多くの人に影響を与えているはずなのにその実感の乏しい労働体験になる。ただの数字でしかない。少ない関係者が関わるお仕事の方が世の中の役に立っている実感は大きい。
イスラエルとハマスの戦争 以来、ずっと考えていた (というほどでもないが) ことの1つに世界観を共有することの難しさがある。おそらく人類のうち戦争を望む人はほとんどいないはずだが、自分たちと住んでいる世界とは異なる世界の思想、価値観、秩序、経済、宗教といった世界観を共有できないばかりに争うことが絶えない。こんな大きな話しをしなくても、身近な周りの人たちとでも自分とは違う価値観をどうやって知り、どのような理解を示すことができるだろうか。エッセイは他者の世界観を表す1つの手段になりそうに思えた。</description><content>&lt;p>0時に寝て2時半に起きて4時に起きて7時に起きた。昨日は本を読みながらいろいろ考えていた。&lt;/p>
&lt;h2 id="頁をめくる音で息をする">頁をめくる音で息をする&lt;/h2>
&lt;p>先日の &lt;a href="/diary/diary/posts/2023/1025/#コワーキングのオンラインイベント">オンラインイベント&lt;/a> でいとうさんに教えてもらった &lt;a href="https://20db.stores.jp/items/61869c960548e03fb98a95ac">頁をめくる音で息をする&lt;/a> を読んでいる。ジャンルで言えばエッセイになる。著者の日常や日々の所感などを綴っている。&lt;a href="https://en.wikipedia.org/wiki/Paul_Graham_(programmer)">Paul Graham&lt;/a> 以外であまり読んだ記憶がないぐらい、私にとってエッセイという読みものは珍しい組み合わせになる。私がいま日々書いている日記も、ちょっと技巧を凝らしたり、お洒落な文章に変えてみたらエッセイにならないだろうか？と考えてみる。&lt;/p>
&lt;p>この日記は「書くこと」を目的としているものの、ここで書き溜めたものは将来の自分を助けるコンテンツになることを確信している。それは過去の私が書いたコンテンツがいまの私を助けているし、書き溜めたコンテンツを評価してくれるサイト、例えば &lt;a href="https://lapras.com/public/t2y">LAPRAS スコア&lt;/a> をみると、高い評価値になっていたりする。いまのところ、このスコアを何かに使っているわけではないが、15年以上も書いてきたコンテンツはそう簡単に真似できるものではないし、一朝一夕で身につくスキルでもない。&lt;/p>
&lt;p>過去にある会社のトライアルを受けたとき、ある技術の調査結果を wiki にまとめたところ「長文がちゃんと書ける」という評価をその会社の CTO から受けたことがあった。私はきょとんとして「そんなの開発者なら誰でも書けるでしょ？」と感想を述べたところ「いや、そうでもない。」と返ってきて、それから私もちゃんと考えてみたところ、言語能力を高めやすいプログラマーであってもちゃんとした文章を書けるのは全体の半分ぐらいしかいないことに気付いた。文章を書く練習をしない生活を何年も続けていると、驚くほど文章を書くスキルを退化させてしまうことに意識的に気付いていない人も多い。「本気出せば書ける」と思っている人ほど、その自信以上に文章を書けないことに気付いていない。&lt;/p>
&lt;p>閑話休題。本書を読んでいると、日々のたわいもないエッセイがまったく無駄ではないことを伺える。それは本書そのものが売りもののコンテンツとして値段がついていて、私がそれを買っていて、ふわっと読み進めながら自分なりに消化して思うことがいくつかあるからだ。いくつか思いついたことをアイディアそのままに書く。&lt;/p>
&lt;h3 id="中原中也がいい">中原中也がいい&lt;/h3>
&lt;p>いま &lt;a href="https://www.aozora.gr.jp/cards/000026/files/894_28272.html">山羊の歌&lt;/a> をぱっと眺めるだけでもその天性を伺える。詩の冒頭を読むだけでもなにか違うと思わせる。著者は学生時代に中原中也を研究していたらしく、中也の作品には死を歌ったものが多くあるという。本書でもいくつか詩の引用がある。中也は &lt;a href="https://ja.wikipedia.org/wiki/%E3%83%80%E3%83%80%E3%82%A4%E3%82%B9%E3%83%A0">ダダイズム&lt;/a> と呼ばれる思想に影響を受けているらしい。&lt;/p>
&lt;pre tabindex="0">&lt;code>トタンがセンベイ食べて
春の日の夕暮は穏かです
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>幾時代かがありまして
　　茶色い戦争ありました
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>丘々は、胸に手を当て
退けり。
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>私の聖母 (サンタ・マリヤ)！
　　とにかく私は血を吐いた！ ……
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>汚れつちまつた悲しみに
今日も小雪の降りかかる
&lt;/code>&lt;/pre>&lt;p>よく技術書などで章節の初めに著名人の言葉を引用していたりする。日本人なら過去の文学者の詩を引用するというのもよさそうな気がした。&lt;/p>
&lt;h3 id="エッセイを配布する">エッセイを配布する&lt;/h3>
&lt;p>一昔前は本という成果物をつくるのが大変な労力を伴うものだった。しかし、現代は文章は電子データでインターネット経由でダウンロードできる。日記を書き溜め、お気に入りの内容を脚色して、メッセージや想いをのせたものをエッセイ本としてつくってみるのもおもしろいかもしれないと、本書を読んで思うようになった。それはエッセイの中で著者の人となりや考えを知るきっかけになる。それを誰かに読んでもらうためというよりは、自分がどういった考えで日々の創作をしているかというのを歴史のように残すという意味合いが強い。例えば、年単位で整理して残しておく。おそらくはそれがまた将来の自分を助ける日がくるような気がする。もしうちの会社に関心をもつ人が出てくれば、電子データは自由にダウンロードして読めばいいし、何冊か紙の本に装丁してノベリティにしてもよい。&lt;/p>
&lt;h3 id="エッセイがその人の世界観を表す">エッセイがその人の世界観を表す&lt;/h3>
&lt;p>本書を読んでいて著者の世界観が本書から伝わってくる。いや、ちょっとそれは言い過ぎでそんな大層なものでもない。著者は仕入元やお客さんとやり取りしながら本を扱うというスタイルを好んでいるようにみえる。ただ本を売り買いしてお金を稼ぐことをよしとしていない。もちろん生活費は必要だから売れてもらわないと困るという文章もちらほらあるが、それ以上に本に関わる人たちとのエピソードを紹介してこんなやり取りがあって嬉しかったということが綴られている。なんとなく私も共感することだが、大きいプロダクトの、大多数の利用者がいるプロジェクトほど、個々の利用者と接する機会や意見をやり取りする機会は少ない。多くの人に影響を与えているはずなのにその実感の乏しい労働体験になる。ただの数字でしかない。少ない関係者が関わるお仕事の方が世の中の役に立っている実感は大きい。&lt;/p>
&lt;p>&lt;a href="/diary/diary/posts/2023/1008/#イスラエルとハマスの戦争">イスラエルとハマスの戦争&lt;/a> 以来、ずっと考えていた (というほどでもないが) ことの1つに世界観を共有することの難しさがある。おそらく人類のうち戦争を望む人はほとんどいないはずだが、自分たちと住んでいる世界とは異なる世界の思想、価値観、秩序、経済、宗教といった世界観を共有できないばかりに争うことが絶えない。こんな大きな話しをしなくても、身近な周りの人たちとでも自分とは違う価値観をどうやって知り、どのような理解を示すことができるだろうか。エッセイは他者の世界観を表す1つの手段になりそうに思えた。&lt;/p></content></item><item><title>読んだり書いたり</title><link>/diary/posts/2023/1029/</link><pubDate>Sun, 29 Oct 2023 13:41:33 +0900</pubDate><guid>/diary/posts/2023/1029/</guid><description>0時に寝て何度か起きて8時半に起きた。もう熱もおさまって平時に戻った感じ。今月の請求書を作ったり、ネットの記事を読んだり、のんびりしていた。
頁をめくる音で息をする いとうさんに教えてもらった本 を読み始めた。「見えない手」というタイトルのエッセイで、妙見幸子さんという、生まれながら脳性マヒの障害をもっていて、四肢が不自由な方が書いた詩集にまつわるエピソードが書いてあった。
いい詩とは何かという話をお客さんと時々する。そのたびに僕は悩みながらこう答える。それは「切実さと誠実さ」なのではないかと。それを語らざるを得なかった詩人の切実さと、言葉に対する、あるいはその詩を手にする人びとへの誠実さ。
見えない手
詩集に限らず、どんな商品でも事業でも「切実さと誠実さ」を併せ持つようなモノに出会うことは滅多にない。読んでいて、そういうモノに出会えることそのものが幸せに思えた。こういう文章をさらっと書ける人の頭のよさとか、語彙の豊富さとかがうらやましい。
はてな匿名ダイアリーの書き方 はてな匿名ダイアリーの書き方 がいくつも投稿されるぐらい、ui がわかりにくい。匿名なのにログインしないといけないというアクションがそもそも相反する概念でわかりにくい。ログインすると、自分のアカウントの日記のように管理される。この時点で本当に匿名なんやろか？と不安にもなる。どうやらログインしたら自分の書いた匿名ダイアリーを管理できるようになっている。
はてな匿名ダイアリー &amp;gt; xxx の日記
はてな匿名ダイアリーのヘルプ もこれだけ。おそらく古いダイアリーのプロダクトだから記法に markdown も使えない。匿名ダイアリーがはてな社にとってどういったプロダクトかは知らないけど、明らかに保守されていないようなことがわかってしまうのは印象が悪いなと思えた。別に匿名ダイアリーを書く気はなかったんだけど、よい機会なので既存の記事に言及したり、自分で新規の記事を書いたりしてみた。記事を書く ui 体験はよくない。</description><content>&lt;p>0時に寝て何度か起きて8時半に起きた。もう熱もおさまって平時に戻った感じ。今月の請求書を作ったり、ネットの記事を読んだり、のんびりしていた。&lt;/p>
&lt;h2 id="頁をめくる音で息をする">頁をめくる音で息をする&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/1025/#コワーキングのオンラインイベント">いとうさんに教えてもらった本&lt;/a> を読み始めた。「見えない手」というタイトルのエッセイで、妙見幸子さんという、生まれながら脳性マヒの障害をもっていて、四肢が不自由な方が書いた詩集にまつわるエピソードが書いてあった。&lt;/p>
&lt;blockquote>
&lt;p>いい詩とは何かという話をお客さんと時々する。そのたびに僕は悩みながらこう答える。それは「切実さと誠実さ」なのではないかと。それを語らざるを得なかった詩人の切実さと、言葉に対する、あるいはその詩を手にする人びとへの誠実さ。&lt;/p>
&lt;p>見えない手&lt;/p>
&lt;/blockquote>
&lt;p>詩集に限らず、どんな商品でも事業でも「切実さと誠実さ」を併せ持つようなモノに出会うことは滅多にない。読んでいて、そういうモノに出会えることそのものが幸せに思えた。こういう文章をさらっと書ける人の頭のよさとか、語彙の豊富さとかがうらやましい。&lt;/p>
&lt;h2 id="はてな匿名ダイアリーの書き方">はてな匿名ダイアリーの書き方&lt;/h2>
&lt;p>&lt;a href="https://anond.hatelabo.jp/20151219074050">はてな匿名ダイアリーの書き方&lt;/a> がいくつも投稿されるぐらい、ui がわかりにくい。匿名なのにログインしないといけないというアクションがそもそも相反する概念でわかりにくい。ログインすると、自分のアカウントの日記のように管理される。この時点で本当に匿名なんやろか？と不安にもなる。どうやらログインしたら自分の書いた匿名ダイアリーを管理できるようになっている。&lt;/p>
&lt;blockquote>
&lt;p>はてな匿名ダイアリー &amp;gt; xxx の日記&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://anond.hatelabo.jp/help">はてな匿名ダイアリーのヘルプ&lt;/a> もこれだけ。おそらく古いダイアリーのプロダクトだから記法に markdown も使えない。匿名ダイアリーがはてな社にとってどういったプロダクトかは知らないけど、明らかに保守されていないようなことがわかってしまうのは印象が悪いなと思えた。別に匿名ダイアリーを書く気はなかったんだけど、よい機会なので既存の記事に言及したり、自分で新規の記事を書いたりしてみた。記事を書く ui 体験はよくない。&lt;/p></content></item><item><title>非日常を提供するという価値</title><link>/diary/posts/2023/1025/</link><pubDate>Wed, 25 Oct 2023 08:36:25 +0900</pubDate><guid>/diary/posts/2023/1025/</guid><description>1時半に寝て3時に起きてもう1回起きて6時半に起きた。
interface はデシリアライズできない 昨日の続き 。rbac なライブラリを使ってアプリケーションを実装していく。ログイン時にユーザーにロールを割り当ててセッションにロールを保持するのが都合よさそうに思えた。ロールの実装で一部の型は interface にして後から拡張できるような設計にしていた。例えば encoding/json ライブラリだと、Marshaler/Unmarshaler の interface を満たすことで任意の json のシリアライズ/デシリアライズをフックできる。調べたり、実際に動かしていていて気付いたのだけど、interface の場合はシリアライズは任意にできるけど、デシリアライズはできない。当たり前と言えば当たり前だが、interface を満たす複数の型がある中で json ライブラリがどの型でデシリアライズしていいか判別できないからだ。当初の interface を用いた設計が誤りだったことに気付いて、一部の型を汎用の構造体で設計し直すようなことをしていた。
またデシリアライズするときに一部の値を初期化したいといった要件がある。例えば mutex を初期化したい。このときに処理の内部で派生型を宣言して、それにキャストした上でデシリアライズの処理を実行した上で差分の処理を実装するというテクニックを学んだ。スコープが限定されて、コードがシンプルになって保守性も高い、久しぶりに頭のよいスマートなコードをみた。
func (r *Role) UnmarshalJSON(b []byte) error { type Alias Role if err := json.Unmarshal(b, (*Alias)(r)); err != nil { return err } r.mu = &amp;amp;sync.Mutex{} return nil } Custom UnmarshalBSON in mongo-go-driver コワーキングのオンラインイベント 月例のカフーツさんのオンラインイベントに参加した。前回の所感はここ 。今日は参加者が2人だけだった。コワーキングスペースを運営するコワーキングスペースマネージャーの連携を強化することで、コワーキングスペースの付加価値が上がったりしないか？といった内容を話したりしていた。コワーキングスペースマネージャーは、普通はお仕事で自分のコワーキングスペースにいないといけないから、なかなか他所のコワーキングスペースへ訪問すること自体が難しい。コワーキングスペース同士の連携により、お仕事でコワーキングスペースマネージャーが自分ところのコワーキングスペースの利用者を連れて、他所のコワーキングスペースへ訪問して、そこでイベントをしたりすればいいんじゃないかという案が出た。
いとうさんがよく コワーキングツアー と称して、全国各地のコワーキングスペースへ訪問して、そこでイベント開催をしたり、その地域の取り組みなどを紹介したりしている。それと全く同じことを、コワーキングスペースの利用者に対してもその付加価値というのはあるかもしれないと私もよいアイディアだと思った。例えば、大阪のコワーキングスペースの利用者を広島へ連れていって、そこでイベントやって交流する。その逆も然り。通常のコワーキングスペースの利用者は自ら広島のコワーキングスペースへ行ってコラボレーションを行ったりしない。いや、いとうさんみたいに自らやる人もいるんだけど、そんな人は対象の利用者ではない。自分からは行かないが、誘われたら行ってもいいかなと考える人 (私もそんな1人だ) を移動させることで、新しい価値やアイディアが生まれるかもしれないと思える。私もいまはフルタイムのお仕事があるから自由に移動はできないが、いずれ会社の投資期間に入って、自分でスケジュールを決められる状況になれば、コワーキングツアーにも出掛けてみようと思う。
あと勉強会やイベント以外でコワーキングスペースで出来ることはないか？という話題でも盛り上がった。私は主催者の準備が大変だと出来ないから、主催者のコストが低いものという視点から考えて猫コワーキングがいいんじゃないかと提案してみた。ある週だけコワーキングスペースに猫が10匹ぐらいいますといった取り組み。課題は猫をどこから連れてくるかだけだが、そういう機会があれば確かに私も行ってみたい。そのアイディアの発散で非日常の体験ができるような取り組みがよいんじゃないかとまとめられていた。
猫コワーキング (猫がたくさんいる) 深夜コワーキング (深夜に開いている) 深夜コワーキングスペースのモデルとなる 弐拾dB さんというコワーキングスペースが広島の尾道にあるらしい。23-翌5時という営業時間だという。いとうさんが絶賛していたのでおもしろいオーナーが運営されているのだと思う。そのオーナーが執筆したエッセイの 頁をめくる音で息をする を購入してみた。</description><content>&lt;p>1時半に寝て3時に起きてもう1回起きて6時半に起きた。&lt;/p>
&lt;h2 id="interface-はデシリアライズできない">interface はデシリアライズできない&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/1024/#rbac-なライブラリの実装">昨日の続き&lt;/a> 。rbac なライブラリを使ってアプリケーションを実装していく。ログイン時にユーザーにロールを割り当ててセッションにロールを保持するのが都合よさそうに思えた。ロールの実装で一部の型は interface にして後から拡張できるような設計にしていた。例えば &lt;a href="https://pkg.go.dev/encoding/json">encoding/json&lt;/a> ライブラリだと、Marshaler/Unmarshaler の interface を満たすことで任意の json のシリアライズ/デシリアライズをフックできる。調べたり、実際に動かしていていて気付いたのだけど、interface の場合はシリアライズは任意にできるけど、デシリアライズはできない。当たり前と言えば当たり前だが、interface を満たす複数の型がある中で json ライブラリがどの型でデシリアライズしていいか判別できないからだ。当初の interface を用いた設計が誤りだったことに気付いて、一部の型を汎用の構造体で設計し直すようなことをしていた。&lt;/p>
&lt;p>またデシリアライズするときに一部の値を初期化したいといった要件がある。例えば mutex を初期化したい。このときに処理の内部で派生型を宣言して、それにキャストした上でデシリアライズの処理を実行した上で差分の処理を実装するというテクニックを学んだ。スコープが限定されて、コードがシンプルになって保守性も高い、久しぶりに頭のよいスマートなコードをみた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Role&lt;/span>) &lt;span style="color:#a6e22e">UnmarshalJSON&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Alias&lt;/span> &lt;span style="color:#a6e22e">Role&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">Unmarshal&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>, (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Alias&lt;/span>)(&lt;span style="color:#a6e22e">r&lt;/span>)); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">mu&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Mutex&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/56400734/custom-unmarshalbson-in-mongo-go-driver">Custom UnmarshalBSON in mongo-go-driver&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="コワーキングのオンラインイベント">コワーキングのオンラインイベント&lt;/h2>
&lt;p>月例のカフーツさんのオンラインイベントに参加した。&lt;a href="/diary/diary/posts/2023/0927/#コワーキングのオンラインイベント">前回の所感はここ&lt;/a> 。今日は参加者が2人だけだった。コワーキングスペースを運営するコワーキングスペースマネージャーの連携を強化することで、コワーキングスペースの付加価値が上がったりしないか？といった内容を話したりしていた。コワーキングスペースマネージャーは、普通はお仕事で自分のコワーキングスペースにいないといけないから、なかなか他所のコワーキングスペースへ訪問すること自体が難しい。コワーキングスペース同士の連携により、お仕事でコワーキングスペースマネージャーが自分ところのコワーキングスペースの利用者を連れて、他所のコワーキングスペースへ訪問して、そこでイベントをしたりすればいいんじゃないかという案が出た。&lt;/p>
&lt;p>いとうさんがよく &lt;a href="https://cahootz.jp/?cat=21">コワーキングツアー&lt;/a> と称して、全国各地のコワーキングスペースへ訪問して、そこでイベント開催をしたり、その地域の取り組みなどを紹介したりしている。それと全く同じことを、コワーキングスペースの利用者に対してもその付加価値というのはあるかもしれないと私もよいアイディアだと思った。例えば、大阪のコワーキングスペースの利用者を広島へ連れていって、そこでイベントやって交流する。その逆も然り。通常のコワーキングスペースの利用者は自ら広島のコワーキングスペースへ行ってコラボレーションを行ったりしない。いや、いとうさんみたいに自らやる人もいるんだけど、そんな人は対象の利用者ではない。自分からは行かないが、誘われたら行ってもいいかなと考える人 (私もそんな1人だ) を移動させることで、新しい価値やアイディアが生まれるかもしれないと思える。私もいまはフルタイムのお仕事があるから自由に移動はできないが、いずれ会社の投資期間に入って、自分でスケジュールを決められる状況になれば、コワーキングツアーにも出掛けてみようと思う。&lt;/p>
&lt;p>あと勉強会やイベント以外でコワーキングスペースで出来ることはないか？という話題でも盛り上がった。私は主催者の準備が大変だと出来ないから、主催者のコストが低いものという視点から考えて猫コワーキングがいいんじゃないかと提案してみた。ある週だけコワーキングスペースに猫が10匹ぐらいいますといった取り組み。課題は猫をどこから連れてくるかだけだが、そういう機会があれば確かに私も行ってみたい。そのアイディアの発散で非日常の体験ができるような取り組みがよいんじゃないかとまとめられていた。&lt;/p>
&lt;ul>
&lt;li>猫コワーキング (猫がたくさんいる)&lt;/li>
&lt;li>深夜コワーキング (深夜に開いている)&lt;/li>
&lt;/ul>
&lt;p>深夜コワーキングスペースのモデルとなる &lt;a href="https://20db.stores.jp/">弐拾dB&lt;/a> さんというコワーキングスペースが広島の尾道にあるらしい。23-翌5時という営業時間だという。いとうさんが絶賛していたのでおもしろいオーナーが運営されているのだと思う。そのオーナーが執筆したエッセイの &lt;a href="https://20db.stores.jp/items/61869c960548e03fb98a95ac">頁をめくる音で息をする&lt;/a> を購入してみた。&lt;/p></content></item><item><title>qa と最初のキャリア</title><link>/diary/posts/2023/0831/</link><pubDate>Thu, 31 Aug 2023 12:49:54 +0900</pubDate><guid>/diary/posts/2023/0831/</guid><description>0時に寝て何度か起きて6時に起きた。1-2週間前に2年ほどやっていたドラクエタクトをやめた。飽きたのか自然ともういいかって感じでやめられた。それ以来、家に帰ってからゆっくり休む時間が増えた気がする。
qa という業務の懐の広さ 先週の水曜日から qa テストに移行している。スケジュールとしてはこのために1ヶ月を確保している。おそらくもう少し早く終えられるんじゃないかという気はしている。早く終われば次の開発の計画づくりを前倒しにすればよいのでそれは構わない。私は先週から残タスクのリファクタリングが終わりきらなかったのでややバタバタしていたが、メンバーはテストに専念してテスト環境で動かして意図しない振る舞いを issue 登録したり、直感とは反する振る舞いを issue 登録したりしている。
新人さんや、未経験だけと開発者になりたいとジョブチェンジする人たち向けに、最初のキャリアとしてテスターや qa をするのがよいのではないかと私は考えている。きっかけは More Joel on Software に、テクニカルサポートは開発者を配置する必要があると書いてあった。しかし、テクニカルサポートだとスキルを身につけると持て余してしまうため、その業務ためのキャリアパスを考えないといけないと書いてあった。まったく同感だ。私がお手伝いしたある会社でもテクニカルサポートは1-2年で辞めているのを見聞きした。みんな開発したいからね。
(おまけ) カスタマーサービスの人たちのためのキャリアパスを用意する
テクニカルサポートにはデバッグ能力を要求するため、資質の高い人を配置する必要がある More Joel on Software
新卒以外の採用ルートで未経験から開発者になるのは、いまは相当に難しいと思う。そんな人たちがキャリアアップするための試金石としてテスターがよいと思う。重要なお仕事だし、テストツールをプログラミングすることで開発者になるための準備期間 (学習) にもあてられる。システムの振る舞いや知識もテストを通して身につけられる。このお仕事を2-3年務められて、プログラミングも少し理解できるようになって、それでも開発者になりたいという意志があるなら開発者にステップアップすればよい。適正があるかどうかわからない状態で開発者を始めるよりも、ゆっくり学んでいけるのでうまくいくのではないか？と思ったりする。うちの会社はまだ社員を雇う余裕がないので私の持論の検証はできないが、どこかの会社でやってみてほしい。</description><content>&lt;p>0時に寝て何度か起きて6時に起きた。1-2週間前に2年ほどやっていたドラクエタクトをやめた。飽きたのか自然ともういいかって感じでやめられた。それ以来、家に帰ってからゆっくり休む時間が増えた気がする。&lt;/p>
&lt;h2 id="qa-という業務の懐の広さ">qa という業務の懐の広さ&lt;/h2>
&lt;p>先週の水曜日から qa テストに移行している。スケジュールとしてはこのために1ヶ月を確保している。おそらくもう少し早く終えられるんじゃないかという気はしている。早く終われば次の開発の計画づくりを前倒しにすればよいのでそれは構わない。私は先週から残タスクのリファクタリングが終わりきらなかったのでややバタバタしていたが、メンバーはテストに専念してテスト環境で動かして意図しない振る舞いを issue 登録したり、直感とは反する振る舞いを issue 登録したりしている。&lt;/p>
&lt;p>新人さんや、未経験だけと開発者になりたいとジョブチェンジする人たち向けに、最初のキャリアとしてテスターや qa をするのがよいのではないかと私は考えている。きっかけは More Joel on Software に、テクニカルサポートは開発者を配置する必要があると書いてあった。しかし、テクニカルサポートだとスキルを身につけると持て余してしまうため、その業務ためのキャリアパスを考えないといけないと書いてあった。まったく同感だ。私がお手伝いしたある会社でもテクニカルサポートは1-2年で辞めているのを見聞きした。みんな開発したいからね。&lt;/p>
&lt;blockquote>
&lt;p>(おまけ) カスタマーサービスの人たちのためのキャリアパスを用意する&lt;/p>
&lt;ul>
&lt;li>テクニカルサポートにはデバッグ能力を要求するため、資質の高い人を配置する必要がある&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://t2y.hatenablog.jp/entry/2021/10/09/162618">More Joel on Software&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>新卒以外の採用ルートで未経験から開発者になるのは、いまは相当に難しいと思う。そんな人たちがキャリアアップするための試金石としてテスターがよいと思う。重要なお仕事だし、テストツールをプログラミングすることで開発者になるための準備期間 (学習) にもあてられる。システムの振る舞いや知識もテストを通して身につけられる。このお仕事を2-3年務められて、プログラミングも少し理解できるようになって、それでも開発者になりたいという意志があるなら開発者にステップアップすればよい。適正があるかどうかわからない状態で開発者を始めるよりも、ゆっくり学んでいけるのでうまくいくのではないか？と思ったりする。うちの会社はまだ社員を雇う余裕がないので私の持論の検証はできないが、どこかの会社でやってみてほしい。&lt;/p></content></item><item><title>久しぶりの書評</title><link>/diary/posts/2023/0606/</link><pubDate>Tue, 06 Jun 2023 09:21:08 +0900</pubDate><guid>/diary/posts/2023/0606/</guid><description>1時に寝て夜に起きて吐いてあまりうまく眠れなかった。たまにそういうことある。今日はコードレビュー対応とコードレビューと会議の進め方のルールを作ったりしていた。
能―650年続いた仕掛けとは― 日曜日の夜から書き始め、月曜日はレイオフのニュースを読んでだらだらして、ようやく 能―650年続いた仕掛けとは― の書評を書き終えた。ほとんど本からの引用なのに時間がかかったのは私が内容を深く理解できていないのでなんども本を読み返しながら間違いのないように注意して書いていたから。前に書いてから約5ヶ月経っていた。</description><content>&lt;p>1時に寝て夜に起きて吐いてあまりうまく眠れなかった。たまにそういうことある。今日はコードレビュー対応とコードレビューと会議の進め方のルールを作ったりしていた。&lt;/p>
&lt;h2 id="能650年続いた仕掛けとは">能―650年続いた仕掛けとは―&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0604/">日曜日の夜から書き始め&lt;/a>、月曜日はレイオフのニュースを読んでだらだらして、ようやく &lt;a href="https://note.com/t2y1979/n/n1c1fd0a5e3e1">能―650年続いた仕掛けとは―&lt;/a> の書評を書き終えた。ほとんど本からの引用なのに時間がかかったのは私が内容を深く理解できていないのでなんども本を読み返しながら間違いのないように注意して書いていたから。前に書いてから約5ヶ月経っていた。&lt;/p></content></item><item><title>能と妄想力</title><link>/diary/posts/2023/0602/</link><pubDate>Fri, 02 Jun 2023 14:33:38 +0900</pubDate><guid>/diary/posts/2023/0602/</guid><description>22時に寝て何度か起きて7時に起きた。朝から雨降りで、お昼頃に緊急警報で高齢者は避難しろとか防災通知がたくさん来ていた。お昼は雨が強かったのでお昼ご飯を食べずにお仕事していた。前日の続きで go-ldap の調査とコードレビュー対応とコードレビューをして勉強会に参加したらいい時間帯になって業務を終了した。
能―650年続いた仕掛けとは― 能―650年続いた仕掛けとは― を読んでいる続き。一通り読み終えた。著者の見解に100%同意できるわけではないが、能を知るための入門本として読みやすく、歴史の流れも学べておもしろい構成になっていると思う。後日、総括する。
第六章 能は漱石と芭蕉をこんなに変えた 松尾芭蕉が能の謡から大きな影響を受けていることは 別の本 も購入しているのでそちらで触れる。著者は芭蕉が旅に出た目的の1つとして鎮魂をあげている。能が江戸幕府を始め、それまでの室町幕府や戦国武将にも庇護をうけた背景として死者の、とくに敗者の鎮魂をあげている。というのは、当時の権力者は死者の怨霊が祟るということを怖れていたと考えられる。
夏目漱石やその周辺の交友関係において能に造詣が深かったという。漱石自身も能の稽古を積んでいたという。著者によると、草枕 の冒頭に出てくるこの文章には能の影響がみられ、草枕全体が夢幻能の構造になっており、ワキがみる夢の世界さながらだという。
智に働けば角が立つ。情に棹させば流される。意地を通せば窮屈だ。とかくに人の世は住みにくい。
草枕
著者は草枕が、晩年に漱石が残した則天去私という言葉の原型ではないかと考察している。
第七章 能は妄想力をつくってきた 能はそのシンプルさゆえに観る人の妄想力を必要とする。それが人によって様々な見方をもたらし、観る人を楽しませているという。したがって能を楽しむには一定の教養を必要とし、和歌、能、俳句、地理といった知識を要求する。その妄想力を象徴しているのが能の舞台であるという。能の舞台は背景に松の絵があるだけ。みえないものをみるには背景は単純なものがいい。そして、謡の存在も妄想力を促進する上で大きいという。
能にハマる人は幻視や幻聴を体験するという。著者は能を脳内で行う AR/VR のようなものだと書いている。能は消費の対象には適していないと著者も述べている。能を深く味わうには、能を観るだけでなく、能と共に生きる心構えを提案している。つまり、謡や仕舞などの能を稽古をして能を鑑賞するのがもっとも能を楽しむ方法だという。
第八章 能を知るとこんなにいいことがある この章は著者の経験による、能をしているとこんなよいことがあるよと説いている。
健康になる 集中力を養う ストレスをはね返す 無言で相手に気持ちを伝える 陰陽を整えられる いい声を出せるようになる 能を大成した世阿弥の考え方には禅に通じるものもあり、能そのものが体を無理なく動かす運動でもあり、それを継続することで身体や精神によい影響が出ることは理にも適っている。これらの効果の真偽はともかく、好きなことを無理なく継続していることは人生においてよさそうに私にも思えた。</description><content>&lt;p>22時に寝て何度か起きて7時に起きた。朝から雨降りで、お昼頃に緊急警報で高齢者は避難しろとか防災通知がたくさん来ていた。お昼は雨が強かったのでお昼ご飯を食べずにお仕事していた。前日の続きで go-ldap の調査とコードレビュー対応とコードレビューをして勉強会に参加したらいい時間帯になって業務を終了した。&lt;/p>
&lt;h2 id="能650年続いた仕掛けとは">能―650年続いた仕掛けとは―&lt;/h2>
&lt;p>&lt;a href="https://www.shinchosha.co.jp/book/610732/">能―650年続いた仕掛けとは―&lt;/a> を読んでいる続き。一通り読み終えた。著者の見解に100%同意できるわけではないが、能を知るための入門本として読みやすく、歴史の流れも学べておもしろい構成になっていると思う。後日、総括する。&lt;/p>
&lt;h3 id="第六章-能は漱石と芭蕉をこんなに変えた">第六章 能は漱石と芭蕉をこんなに変えた&lt;/h3>
&lt;p>松尾芭蕉が能の謡から大きな影響を受けていることは &lt;a href="/diary/diary/posts/2023/0517/#コワーキングのオンラインイベント">別の本&lt;/a> も購入しているのでそちらで触れる。著者は芭蕉が旅に出た目的の1つとして鎮魂をあげている。能が江戸幕府を始め、それまでの室町幕府や戦国武将にも庇護をうけた背景として死者の、とくに敗者の鎮魂をあげている。というのは、当時の権力者は死者の怨霊が祟るということを怖れていたと考えられる。&lt;/p>
&lt;p>夏目漱石やその周辺の交友関係において能に造詣が深かったという。漱石自身も能の稽古を積んでいたという。著者によると、&lt;a href="https://www.aozora.gr.jp/cards/000148/files/776_14941.html">草枕&lt;/a> の冒頭に出てくるこの文章には能の影響がみられ、草枕全体が夢幻能の構造になっており、ワキがみる夢の世界さながらだという。&lt;/p>
&lt;blockquote>
&lt;p>智に働けば角が立つ。情に棹させば流される。意地を通せば窮屈だ。とかくに人の世は住みにくい。&lt;/p>
&lt;p>&lt;a href="https://www.aozora.gr.jp/cards/000148/files/776_14941.html">草枕&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>著者は草枕が、晩年に漱石が残した則天去私という言葉の原型ではないかと考察している。&lt;/p>
&lt;h3 id="第七章-能は妄想力をつくってきた">第七章 能は妄想力をつくってきた&lt;/h3>
&lt;p>能はそのシンプルさゆえに観る人の妄想力を必要とする。それが人によって様々な見方をもたらし、観る人を楽しませているという。したがって能を楽しむには一定の教養を必要とし、和歌、能、俳句、地理といった知識を要求する。その妄想力を象徴しているのが能の舞台であるという。能の舞台は背景に松の絵があるだけ。みえないものをみるには背景は単純なものがいい。そして、謡の存在も妄想力を促進する上で大きいという。&lt;/p>
&lt;p>能にハマる人は幻視や幻聴を体験するという。著者は能を脳内で行う AR/VR のようなものだと書いている。能は消費の対象には適していないと著者も述べている。能を深く味わうには、能を観るだけでなく、能と共に生きる心構えを提案している。つまり、謡や仕舞などの能を稽古をして能を鑑賞するのがもっとも能を楽しむ方法だという。&lt;/p>
&lt;h3 id="第八章-能を知るとこんなにいいことがある">第八章 能を知るとこんなにいいことがある&lt;/h3>
&lt;p>この章は著者の経験による、能をしているとこんなよいことがあるよと説いている。&lt;/p>
&lt;ul>
&lt;li>健康になる&lt;/li>
&lt;li>集中力を養う&lt;/li>
&lt;li>ストレスをはね返す&lt;/li>
&lt;li>無言で相手に気持ちを伝える&lt;/li>
&lt;li>陰陽を整えられる&lt;/li>
&lt;li>いい声を出せるようになる&lt;/li>
&lt;/ul>
&lt;p>能を大成した世阿弥の考え方には禅に通じるものもあり、能そのものが体を無理なく動かす運動でもあり、それを継続することで身体や精神によい影響が出ることは理にも適っている。これらの効果の真偽はともかく、好きなことを無理なく継続していることは人生においてよさそうに私にも思えた。&lt;/p></content></item><item><title>わかりにくさと能動的</title><link>/diary/posts/2023/0601/</link><pubDate>Thu, 01 Jun 2023 08:34:31 +0900</pubDate><guid>/diary/posts/2023/0601/</guid><description>22時に寝て何度か起きて7時に起きた。たまには早く寝てみた。
チャンネルを用いた ldap 検索の api うちらの要件に足りない機能が go-ldap にある。私が機能拡張についての issue を作ったときにある開発者が先にこの機能が必要だとコメントしてくれた。もともと draft pr で実装されたコードがあったのでそれをベースに検証したら普通に動いた。あとは go のエンジニアリングとして開発者が使いやすいように、私の経験からのアレンジを加えて pr とした。テストも実装した。なにか問題があればレビューで指摘さえしてくれれば私がすぐ修正してマージできるはずと考えている。はてさて、どうなることやら。
Add search with channels with context #440 能―650年続いた仕掛けとは― 能―650年続いた仕掛けとは― を読んでいる続き。世阿弥の紹介をしている第五章に感化された。
第四章 能にはこんな仕掛けが隠されていた 能はシテ (主役) の役柄や内容で5種類にわけられる。
初番目物 神: 神様が登場して颯爽 (さっそう) と舞う 二番目物 男: 修羅物とも呼ばれ、武将が修羅道に落ちた苦しみを描く 三番目物 女: 鬘物 (かずらもの) とも呼ばれ、優雅な美しいものが多い 四番目物 狂: 雑能とも呼ばれ、他の4つに分類されないもの 五番目物 鬼: 切能 (きりのう) とも呼ばれ、鬼や妖怪、精霊、霊獣などがシテになる さらにこの5つの分類に入らない翁という演目もある。翁を最初に置き、この順番に上演しながら、能と能の間に狂言を演じ、最後に祝言の短い能を演じるのがかつての正式な上演だったらしい。これだけ演じると朝から晩までかかってしまうので忙しい現代ではなかなかみれなくなってしまっているという。
ひと昔前は結婚式で仲人さんや親戚が謡を謡っていたという。たしかに古風な結婚式ではそうだったような、、、と私もうっすらとそういう記憶があるような気もする。
能の身体的な特徴の1つに摺り足がある。摺り足には重い二本の刀を腰に差して腰痛にならないという効能があるらしい。ほんとかな？
世阿弥が能の構造は序破急にせよと書いている。序はワキの登場、破はシテが登場して話をして去る、急は再びシテが姿を変えて登場するといった構造になる。水戸黄門や暴れん坊将軍のような時代劇の最後の展開が急に相当する。水戸黄門で例えると次になる。
序: 現状把握と善人の窮状 破: 善人が騙される／襲われる 急: 印籠を出す そして、この後に書いてあることが個人的におもしろかった。水戸黄門は番組開始時点では印籠を出すようなシーンはなくて、当初は助さん角さんが敵をたたき斬っていただけだったという。そもそも印籠を出したぐらいで本物の水戸黄門かどうか分かるわけもなく悪人がひれ伏すはずがないw あるときから印籠を出すという急を作って、序破急が安定したことで人気が出て長寿番組となったと書いてある。ほんとかな？
第五章 世阿弥はこんなにすごかった 能の大成に大きな影響を及ぼした世阿弥についていろいろ書いてある。
夢幻能 という能のジャンルを完成させた。念が残る、思いが残っているといった残念を昇華させる物語の構造になっている。世阿弥は特に敗者の無念をみせる舞台構造を作ることに成功したという。もともと日本人は死者を尊ぶ習慣があったことも要因としてあげている。</description><content>&lt;p>22時に寝て何度か起きて7時に起きた。たまには早く寝てみた。&lt;/p>
&lt;h2 id="チャンネルを用いた-ldap-検索の-api">チャンネルを用いた ldap 検索の api&lt;/h2>
&lt;p>うちらの要件に足りない機能が go-ldap にある。私が機能拡張についての issue を作ったときにある開発者が先にこの機能が必要だとコメントしてくれた。もともと draft pr で実装されたコードがあったのでそれをベースに検証したら普通に動いた。あとは go のエンジニアリングとして開発者が使いやすいように、私の経験からのアレンジを加えて pr とした。テストも実装した。なにか問題があればレビューで指摘さえしてくれれば私がすぐ修正してマージできるはずと考えている。はてさて、どうなることやら。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/go-ldap/ldap/pull/440">Add search with channels with context #440&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="能650年続いた仕掛けとは">能―650年続いた仕掛けとは―&lt;/h2>
&lt;p>&lt;a href="https://www.shinchosha.co.jp/book/610732/">能―650年続いた仕掛けとは―&lt;/a> を読んでいる続き。世阿弥の紹介をしている第五章に感化された。&lt;/p>
&lt;h3 id="第四章-能にはこんな仕掛けが隠されていた">第四章 能にはこんな仕掛けが隠されていた&lt;/h3>
&lt;p>能はシテ (主役) の役柄や内容で5種類にわけられる。&lt;/p>
&lt;ol>
&lt;li>初番目物 神: 神様が登場して颯爽 (さっそう) と舞う&lt;/li>
&lt;li>二番目物 男: 修羅物とも呼ばれ、武将が修羅道に落ちた苦しみを描く&lt;/li>
&lt;li>三番目物 女: 鬘物 (かずらもの) とも呼ばれ、優雅な美しいものが多い&lt;/li>
&lt;li>四番目物 狂: 雑能とも呼ばれ、他の4つに分類されないもの&lt;/li>
&lt;li>五番目物 鬼: 切能 (きりのう) とも呼ばれ、鬼や妖怪、精霊、霊獣などがシテになる&lt;/li>
&lt;/ol>
&lt;p>さらにこの5つの分類に入らない翁という演目もある。翁を最初に置き、この順番に上演しながら、能と能の間に狂言を演じ、最後に祝言の短い能を演じるのがかつての正式な上演だったらしい。これだけ演じると朝から晩までかかってしまうので忙しい現代ではなかなかみれなくなってしまっているという。&lt;/p>
&lt;p>ひと昔前は結婚式で仲人さんや親戚が謡を謡っていたという。たしかに古風な結婚式ではそうだったような、、、と私もうっすらとそういう記憶があるような気もする。&lt;/p>
&lt;p>能の身体的な特徴の1つに摺り足がある。摺り足には重い二本の刀を腰に差して腰痛にならないという効能があるらしい。ほんとかな？&lt;/p>
&lt;p>世阿弥が能の構造は序破急にせよと書いている。序はワキの登場、破はシテが登場して話をして去る、急は再びシテが姿を変えて登場するといった構造になる。水戸黄門や暴れん坊将軍のような時代劇の最後の展開が急に相当する。水戸黄門で例えると次になる。&lt;/p>
&lt;ul>
&lt;li>序: 現状把握と善人の窮状&lt;/li>
&lt;li>破: 善人が騙される／襲われる&lt;/li>
&lt;li>急: 印籠を出す&lt;/li>
&lt;/ul>
&lt;p>そして、この後に書いてあることが個人的におもしろかった。水戸黄門は番組開始時点では印籠を出すようなシーンはなくて、当初は助さん角さんが敵をたたき斬っていただけだったという。そもそも印籠を出したぐらいで本物の水戸黄門かどうか分かるわけもなく悪人がひれ伏すはずがないw あるときから印籠を出すという急を作って、序破急が安定したことで人気が出て長寿番組となったと書いてある。ほんとかな？&lt;/p>
&lt;h3 id="第五章-世阿弥はこんなにすごかった">第五章 世阿弥はこんなにすごかった&lt;/h3>
&lt;p>能の大成に大きな影響を及ぼした世阿弥についていろいろ書いてある。&lt;/p>
&lt;p>&lt;a href="https://db2.the-noh.com/jdic/2010/02/post_172.html">夢幻能&lt;/a> という能のジャンルを完成させた。念が残る、思いが残っているといった残念を昇華させる物語の構造になっている。世阿弥は特に敗者の無念をみせる舞台構造を作ることに成功したという。もともと日本人は死者を尊ぶ習慣があったことも要因としてあげている。&lt;/p>
&lt;p>世阿弥は世襲で継いでいくという家元制度を作った。これは後世に必ず継ぐシステムを作ったと言える。現代まで能が継続されている背景の1つに家元制度はたしかにあげられると私も思う。しかし、現代では基本的人権 (職業選択の自由) に反することから家元制度の批判もあるようだ。著者はこの仕組みを称賛しているが、私は現代の感覚からすると個人の自由を制限して成り立っている古い制度のように感じてあまり著者の意見に同意できなかった。&lt;/p>
&lt;blockquote>
&lt;p>陰陽の和するところの境を成就とは知るべし&lt;/p>
&lt;/blockquote>
&lt;p>昼や晴れた日には観客の気分が盛り上がり過ぎているので控え目に演じなさい。曇りや雨の日には逆に観客の気持ちが萎えているので派手目に演じなさいといったことを言っている。要は客の状態を見て演じ方を変えなさいと言っている。これは言うは易し、行うは難しだという。能ではこれを楽器の構造から音の力で解決していると説明がある。&lt;/p>
&lt;blockquote>
&lt;p>時に用ゆるをもて花と知るべし&lt;/p>
&lt;/blockquote>
&lt;p>ともすれば絶対的な善し悪しがあるように思い込み、そのようなものを追求しがちであるが、実際はそのようなものはない。あるのは時との関係性だけだという。易経の時中も引用している。いまがどのような「時」であるかを知り、それがもっとも適合した時期であるか、行動できるか、それこそが「花」であるという。&lt;/p>
&lt;blockquote>
&lt;p>花と面白きと珍しきと、これ三つは同じ心なり&lt;/p>
&lt;/blockquote>
&lt;p>現代の言葉とはちょっと意味が異なる。&lt;/p>
&lt;ul>
&lt;li>面白き: 目の前がパッと明るくなること&lt;/li>
&lt;li>珍しき (愛ず): 愛らしいこと、まったく普通のことに感嘆を抱かせる工夫など&lt;/li>
&lt;li>花: 秘すれば花、秘密にすることで偉大な働きをすること&lt;/li>
&lt;/ul>
&lt;p>能では、演者はあまり観客に働きかけない。よくわからないことで、逆に観る人が能動的になり、見えないものが見え、聞こえない音が聞こえるようになる。これも秘することによって咲く花だという。師匠が弟子に教えないというのも、簡単なことでも秘することで、弟子が散々苦しみ抜いた上でその助言の価値に気付くこともあるという。&lt;/p>
&lt;p>「老後の初心」という考え方。どの歳になっても初心はあるが、歳をとって体力が劣っていくからこそやることも変えていく。第一章にも出てきた能における「初心」という言葉の概念は本当におもしろい。能では体が動かなくなっていくのだから「しないというやり方も方法としてありえる」と考える。演じないことで演じる、歳を取ったときの表現方法がある。高齢な能楽師でしか演じられない境地があるから能楽師は歳を取ることを楽しみにする。この考え方はいまの時代にとてもあうように私は思えた。&lt;/p></content></item><item><title>能の本を読み始めた</title><link>/diary/posts/2023/0531/</link><pubDate>Wed, 31 May 2023 11:44:47 +0900</pubDate><guid>/diary/posts/2023/0531/</guid><description>1時に寝て何度か起きて7時に起きた。能の本を読みながら寝落ちした。新しい開発のマイルストーンに入って、初日からいくつかリファクタリングしたり、コードレビューしたりしていた。開発が始まったなーって感じ。
能―650年続いた仕掛けとは― 少し前から 能―650年続いた仕掛けとは― を読み始めている。読んでいておもしろいので参考になりそうなことや気付いたことを忘れないように書いておく。著者の安田さんは能が本当に好きなんだなというのが伝わってくる文章で好感がもてる。
はじめに 著者が能のとりこになったきっかけが書いてある。最初に観た舞台で著者は「幻視」を体験したという。著者は高校教師であったが、能の師匠に弟子入りして週末に習い始め、その後、能楽師としてプロになったという。著者が能の歴史を調べるうちにいまの社会は能から大きな影響を受けていると気付いた。たしかに650年も続いているのだからそれは容易に想像できる。個人的にこの序文は見事な内容だなと思う。私が本書に興味をもったのもこの序文の秀逸さを感じたから。
第一章 能はこうして生き残った 能は室町時代に観阿弥・世阿弥によって大成された芸能になる。それまでも猿楽や田楽と呼ばれていた芸能ではあるが、それらを洗練させ、ときの将軍の庇護もあり大成に至ったらしい。
初心忘るべからず
いまでも知られている世阿弥の有名な言葉であり、一般的には「始めたときの気持ちを忘れてはいけない」といった意味で使われる。それ自体も誤りではないが、世阿弥自身はそのような意図で使っていたわけではないらしい。
「初心」という言葉にも深い意味があり、変化が起こったときの境になる状況や心境を「初心」と表している。人は生きている限りさまざまな変化を経て成長していく。そのところどころに過去の自分を断ち切らないといけない状況がある。その断ち切りには痛みを伴うが、成長のためには避けて通れない。その選択を突きつける境こそが「初心」なのだという。
能の稽古にもその仕組みが含まれていて、稽古で師匠は決して弟子に及第点を与えることはない。ただ「ダメだ」と言うだけ。弟子はなにがダメかも分からず練習に励み、その状態で本番の舞台を迎えて、練習でダメなのだから本番でもうまくできなくて不本意な結果に終わるものの、本番を迎えたことでなにかしらその人の壁を乗り越えているはずだとみなす。舞台の前後におけるその人のなにかの変化を「初心」というらしい。そして、能を習う人はなにかしら新しい挑戦に立ち向かい、「初心」の壁を破ったときにある変化の快感を忘れられなくて能にはまるという。
第ニ章 能はこんなに変わってきた 能の歴史は次の4つに大別されるという。
形成期 (奈良時代〜) 大成期 (室町時代〜) 展開期 (戦国時代〜) 式楽以降 (江戸時代〜) 能の起源は、奈良時代に唐の大衆芸能である散楽 (さんがく) が日本に入ってきて、それが猿楽 (さるがく) になったとみられている。一方で日本古来の神楽 (かぐら) にも影響を受けている。世阿弥も「猿楽はもとは神楽なのだが、」という件を書き残しているらしい。世阿弥は能の始祖として 秦 河勝 (はた の かわかつ) という人物をあげている。
戦国時代の能への大きな貢献は豊臣秀吉だという。秀吉が能に凝って推奨したことで劇的に広まったとみられている。
第三章 能はこんなふうに愛された 江戸時代に入り、家康も秀忠も能を好み、家光・家綱の頃から式楽として定着し、大きな影響を与えたのが5代将軍の 綱吉 だという。生類憐みの令で有名な犬好きな将軍であるが「能狂い」と言われるほどの能を好んだ将軍であったという。将軍が並々ならぬ熱意で能を推奨するので大名や家臣も能を学ばざるを得ず、諸藩でも能が学ばれるようになっていったという。おもしろいのが能が盛んな藩は外様であり、譜代代表や徳川家の血筋である松平家ではあまり盛んでないことから関係性の厳しさも伺える。そんな背景もあり、武士の教養の1つとして能を学ぶようになっていった。また庶民にも 謡 (うたい) という能の詞章を謡うことが広まり、寺子屋でも教えられ、庶民の教養の1つになっていったという。大工さんの棟上げ式、縁起ものを納めるとき、結婚式などで謡われたという。</description><content>&lt;p>1時に寝て何度か起きて7時に起きた。能の本を読みながら寝落ちした。新しい開発のマイルストーンに入って、初日からいくつかリファクタリングしたり、コードレビューしたりしていた。開発が始まったなーって感じ。&lt;/p>
&lt;h2 id="能650年続いた仕掛けとは">能―650年続いた仕掛けとは―&lt;/h2>
&lt;p>少し前から &lt;a href="https://www.shinchosha.co.jp/book/610732/">能―650年続いた仕掛けとは―&lt;/a> を読み始めている。読んでいておもしろいので参考になりそうなことや気付いたことを忘れないように書いておく。著者の安田さんは能が本当に好きなんだなというのが伝わってくる文章で好感がもてる。&lt;/p>
&lt;h3 id="はじめに">はじめに&lt;/h3>
&lt;p>著者が能のとりこになったきっかけが書いてある。最初に観た舞台で著者は「幻視」を体験したという。著者は高校教師であったが、能の師匠に弟子入りして週末に習い始め、その後、能楽師としてプロになったという。著者が能の歴史を調べるうちにいまの社会は能から大きな影響を受けていると気付いた。たしかに650年も続いているのだからそれは容易に想像できる。個人的にこの序文は見事な内容だなと思う。私が本書に興味をもったのもこの序文の秀逸さを感じたから。&lt;/p>
&lt;h3 id="第一章-能はこうして生き残った">第一章 能はこうして生き残った&lt;/h3>
&lt;p>能は室町時代に観阿弥・世阿弥によって大成された芸能になる。それまでも猿楽や田楽と呼ばれていた芸能ではあるが、それらを洗練させ、ときの将軍の庇護もあり大成に至ったらしい。&lt;/p>
&lt;blockquote>
&lt;p>初心忘るべからず&lt;/p>
&lt;/blockquote>
&lt;p>いまでも知られている世阿弥の有名な言葉であり、一般的には「始めたときの気持ちを忘れてはいけない」といった意味で使われる。それ自体も誤りではないが、世阿弥自身はそのような意図で使っていたわけではないらしい。&lt;/p>
&lt;p>「初心」という言葉にも深い意味があり、変化が起こったときの境になる状況や心境を「初心」と表している。人は生きている限りさまざまな変化を経て成長していく。そのところどころに過去の自分を断ち切らないといけない状況がある。その断ち切りには痛みを伴うが、成長のためには避けて通れない。その選択を突きつける境こそが「初心」なのだという。&lt;/p>
&lt;p>能の稽古にもその仕組みが含まれていて、稽古で師匠は決して弟子に及第点を与えることはない。ただ「ダメだ」と言うだけ。弟子はなにがダメかも分からず練習に励み、その状態で本番の舞台を迎えて、練習でダメなのだから本番でもうまくできなくて不本意な結果に終わるものの、本番を迎えたことでなにかしらその人の壁を乗り越えているはずだとみなす。舞台の前後におけるその人のなにかの変化を「初心」というらしい。そして、能を習う人はなにかしら新しい挑戦に立ち向かい、「初心」の壁を破ったときにある変化の快感を忘れられなくて能にはまるという。&lt;/p>
&lt;h3 id="第ニ章-能はこんなに変わってきた">第ニ章 能はこんなに変わってきた&lt;/h3>
&lt;p>能の歴史は次の4つに大別されるという。&lt;/p>
&lt;ol>
&lt;li>形成期 (奈良時代〜)&lt;/li>
&lt;li>大成期 (室町時代〜)&lt;/li>
&lt;li>展開期 (戦国時代〜)&lt;/li>
&lt;li>式楽以降 (江戸時代〜)&lt;/li>
&lt;/ol>
&lt;p>能の起源は、奈良時代に唐の大衆芸能である散楽 (さんがく) が日本に入ってきて、それが猿楽 (さるがく) になったとみられている。一方で日本古来の神楽 (かぐら) にも影響を受けている。世阿弥も「猿楽はもとは神楽なのだが、」という件を書き残しているらしい。世阿弥は能の始祖として &lt;a href="https://ja.wikipedia.org/wiki/%E7%A7%A6%E6%B2%B3%E5%8B%9D">秦 河勝 (はた の かわかつ)&lt;/a> という人物をあげている。&lt;/p>
&lt;p>戦国時代の能への大きな貢献は豊臣秀吉だという。秀吉が能に凝って推奨したことで劇的に広まったとみられている。&lt;/p>
&lt;h3 id="第三章-能はこんなふうに愛された">第三章 能はこんなふうに愛された&lt;/h3>
&lt;p>江戸時代に入り、家康も秀忠も能を好み、家光・家綱の頃から式楽として定着し、大きな影響を与えたのが5代将軍の &lt;a href="https://ja.wikipedia.org/wiki/%E5%BE%B3%E5%B7%9D%E7%B6%B1%E5%90%89">綱吉&lt;/a> だという。生類憐みの令で有名な犬好きな将軍であるが「能狂い」と言われるほどの能を好んだ将軍であったという。将軍が並々ならぬ熱意で能を推奨するので大名や家臣も能を学ばざるを得ず、諸藩でも能が学ばれるようになっていったという。おもしろいのが能が盛んな藩は外様であり、譜代代表や徳川家の血筋である松平家ではあまり盛んでないことから関係性の厳しさも伺える。そんな背景もあり、武士の教養の1つとして能を学ぶようになっていった。また庶民にも 謡 (うたい) という能の詞章を謡うことが広まり、寺子屋でも教えられ、庶民の教養の1つになっていったという。大工さんの棟上げ式、縁起ものを納めるとき、結婚式などで謡われたという。&lt;/p></content></item><item><title>出張の中日</title><link>/diary/posts/2023/0517/</link><pubDate>Wed, 17 May 2023 18:37:05 +0900</pubDate><guid>/diary/posts/2023/0517/</guid><description>0時に寝て何度か起きて5時半に起きてテレビで朝のニュースを聞き流しながら7時に起きた。
資料作成 今日はメンバーの1人が休暇だったため、打ち合わせはなしで資料ばかり作っていた。今週のチーム勉強会の発表は私が担当するのでその資料を作ったり、リリースを終えて社内向けにプロダクトの説明のための資料を準備したりしていた。これまでたくさんの資料を作ってきてるので改めて作るというよりは、過去に作ったものを洗練させたり、集めてきて補足する程度の作業になりそうな雰囲気だけわかってきた。
aws app runner の情報収集 App Runner Night !! にオンラインで参加した。AWS Startup Community というコミュニティがあることも知らなかった。顧問のはらさんが LT 発表すると聞いていたのでそれをみようと思ってながらで聞いていたので他の発表はあまりちゃんとみていてない。特別に目新しいことはなかったし、発表の中でもいくつかちょっとそこ怪しいんじゃない？とか思いながら他の作業をしていた。
私も余裕があれば app runner でサービスを動かしてみてその勘所を把握しておきたい。ecs がやりたいことに比べて使いにくいという印象は私もずっと思っていた。実質 k8s 以外のコンテナプラットフォームは aws しかないので app runner がよいものかどうかに関心をもっている。
コワーキングのオンラインイベント 月例のカフーツさんのオンラインイベントに参加した。先月の所感はここ 。今日は「移動」というテーマでいつも通りいとうさんがわーっと話をしていた。この2ヶ月に新しい官民の取り組みが始まったらしい。なんか空気だけでダメそうにみえる。
「テレワーク・ワーケーション官民推進協議会」を設立しました！ このサイトでは次の2つの用語を定義している。ブレジャーを初めて知ったけど、発音しにくくて語呂が悪いだろとか思えた。
ワーケーション (Work + Vacation) ブレジャー (Business + Leisure) このサイトにあるワーケーションの実施形態には共感するところもあって次の4つに分類している。IT 業界で多いのは合宿型とサテライトオフィス型かな。
福利厚生型 地域課題解決型 合宿型 サテライトオフィス型 あとどういう文脈だったか忘れてしまったが、身体感覚で「芭蕉」を読みなおす。 『おくのほそ道』謎解きの旅 という本を紹介された。能の探求者が書いた独特の視点から松尾芭蕉を取り上げた本らしくて、なんかおもしろそうにみえたのですぐに購入してみた。紙の文庫本しかなかった。読んでみる。</description><content>&lt;p>0時に寝て何度か起きて5時半に起きてテレビで朝のニュースを聞き流しながら7時に起きた。&lt;/p>
&lt;h2 id="資料作成">資料作成&lt;/h2>
&lt;p>今日はメンバーの1人が休暇だったため、打ち合わせはなしで資料ばかり作っていた。今週のチーム勉強会の発表は私が担当するのでその資料を作ったり、リリースを終えて社内向けにプロダクトの説明のための資料を準備したりしていた。これまでたくさんの資料を作ってきてるので改めて作るというよりは、過去に作ったものを洗練させたり、集めてきて補足する程度の作業になりそうな雰囲気だけわかってきた。&lt;/p>
&lt;h2 id="aws-app-runner-の情報収集">aws app runner の情報収集&lt;/h2>
&lt;p>&lt;a href="https://aws-startup-community.connpass.com/event/282015/">App Runner Night !!&lt;/a> にオンラインで参加した。&lt;a href="https://aws-startup-community.connpass.com/">AWS Startup Community&lt;/a> というコミュニティがあることも知らなかった。顧問のはらさんが LT 発表すると聞いていたのでそれをみようと思ってながらで聞いていたので他の発表はあまりちゃんとみていてない。特別に目新しいことはなかったし、発表の中でもいくつかちょっとそこ怪しいんじゃない？とか思いながら他の作業をしていた。&lt;/p>
&lt;p>私も余裕があれば app runner でサービスを動かしてみてその勘所を把握しておきたい。ecs がやりたいことに比べて使いにくいという印象は私もずっと思っていた。実質 k8s 以外のコンテナプラットフォームは aws しかないので app runner がよいものかどうかに関心をもっている。&lt;/p>
&lt;h2 id="コワーキングのオンラインイベント">コワーキングのオンラインイベント&lt;/h2>
&lt;p>月例のカフーツさんのオンラインイベントに参加した。&lt;a href="/diary/diary/posts/2023/0419/#コワーキングのオンラインイベント">先月の所感はここ&lt;/a> 。今日は「移動」というテーマでいつも通りいとうさんがわーっと話をしていた。この2ヶ月に新しい官民の取り組みが始まったらしい。なんか空気だけでダメそうにみえる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.mlit.go.jp/kankocho/workation-bleisure/news/230218/">「テレワーク・ワーケーション官民推進協議会」を設立しました！&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>このサイトでは次の2つの用語を定義している。ブレジャーを初めて知ったけど、発音しにくくて語呂が悪いだろとか思えた。&lt;/p>
&lt;ul>
&lt;li>ワーケーション (Work + Vacation)&lt;/li>
&lt;li>ブレジャー (Business + Leisure)&lt;/li>
&lt;/ul>
&lt;p>このサイトにあるワーケーションの実施形態には共感するところもあって次の4つに分類している。IT 業界で多いのは合宿型とサテライトオフィス型かな。&lt;/p>
&lt;ul>
&lt;li>福利厚生型&lt;/li>
&lt;li>地域課題解決型&lt;/li>
&lt;li>合宿型&lt;/li>
&lt;li>サテライトオフィス型&lt;/li>
&lt;/ul>
&lt;p>あとどういう文脈だったか忘れてしまったが、&lt;a href="https://www.shunjusha.co.jp/book/9784393436400.html">身体感覚で「芭蕉」を読みなおす。 『おくのほそ道』謎解きの旅&lt;/a> という本を紹介された。能の探求者が書いた独特の視点から松尾芭蕉を取り上げた本らしくて、なんかおもしろそうにみえたのですぐに購入してみた。紙の文庫本しかなかった。読んでみる。&lt;/p></content></item><item><title>出張前々日</title><link>/diary/posts/2023/0514/</link><pubDate>Sun, 14 May 2023 14:58:19 +0900</pubDate><guid>/diary/posts/2023/0514/</guid><description>0時に寝て何度か起きて7時に起きた。雨降りだったので午前中はドラクエタクトしてた。午後から雨が小さくなったのをみて、オフィスで出張前の資料作りをしてた。夕方には雨がやんでお土産を購入するために出掛けたらすみよさんさんに偶然会った。
ソフトウェアライセンス事業を加速させる OSS 戦略 ビジネス法務 2023年6月号 という雑誌に寄稿したとなかいさんのタイムラインをみかけたので読んでみた。電子版は年間契約でないと購入できないようで仕方なく紙の雑誌を購入した。ライセンス契約の特集の中の1記事らしい。3ページの記事だったので OSS というソフトウェアのビジネス形態の紹介といった記事のようにみえる。OSS や web 業界の開発者からみたら目新しい内容ではないが、こういった雑誌に紹介されること自体がすごいことだと思いながら読んでみた。自社ソフトウェアを OSS とする戦略の特徴として次の3つをあげていた。
ユーザーの開発者が動作を確認したり、カスタマイズできる 製品の透明性を証明できる (ソースコードを読めるから) 技術力のアピールできる うちも近いうちに OSS でプロダクト開発を始めるので参考にしながらやろうと思う。うちは OSS で儲けようと考えていないが、うちで作るものは原則として OSS で公開していく方針で考えている。
近況報告の資料作り 4月末にリリース できているのでそれほど重要ではないけど、毎月出張したタイミングで報告会をしているので急にやめるのもどうかな？という気がして資料を作って打ち合わせする。リリースして GW を挟んで次の開発への準備期間という隙間時間がいまになる。ある種のゆとりになっていて、これはパッケージベンダーだからこそなのか、中小企業ゆえの労務管理や目標管理の緩さからなのか、いずれにしてもこういう隙間時間を使って自分で考えて、自分で調査して、自分でふりかえるといった自律性を養うのによいかもしれない。私もゆっくり考える時間を取れてよかった。</description><content>&lt;p>0時に寝て何度か起きて7時に起きた。雨降りだったので午前中はドラクエタクトしてた。午後から雨が小さくなったのをみて、オフィスで出張前の資料作りをしてた。夕方には雨がやんでお土産を購入するために出掛けたらすみよさんさんに偶然会った。&lt;/p>
&lt;h2 id="ソフトウェアライセンス事業を加速させる-oss-戦略">ソフトウェアライセンス事業を加速させる OSS 戦略&lt;/h2>
&lt;p>&lt;a href="https://www.chuokeizai.co.jp/bjh/archive/detail_009856.html">ビジネス法務 2023年6月号&lt;/a> という雑誌に寄稿したとなかいさんのタイムラインをみかけたので読んでみた。電子版は年間契約でないと購入できないようで仕方なく紙の雑誌を購入した。ライセンス契約の特集の中の1記事らしい。3ページの記事だったので OSS というソフトウェアのビジネス形態の紹介といった記事のようにみえる。OSS や web 業界の開発者からみたら目新しい内容ではないが、こういった雑誌に紹介されること自体がすごいことだと思いながら読んでみた。自社ソフトウェアを OSS とする戦略の特徴として次の3つをあげていた。&lt;/p>
&lt;ul>
&lt;li>ユーザーの開発者が動作を確認したり、カスタマイズできる&lt;/li>
&lt;li>製品の透明性を証明できる (ソースコードを読めるから)&lt;/li>
&lt;li>技術力のアピールできる&lt;/li>
&lt;/ul>
&lt;p>うちも近いうちに OSS でプロダクト開発を始めるので参考にしながらやろうと思う。うちは OSS で儲けようと考えていないが、うちで作るものは原則として OSS で公開していく方針で考えている。&lt;/p>
&lt;h2 id="近況報告の資料作り">近況報告の資料作り&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0425/#リリース">4月末にリリース&lt;/a> できているのでそれほど重要ではないけど、毎月出張したタイミングで報告会をしているので急にやめるのもどうかな？という気がして資料を作って打ち合わせする。リリースして GW を挟んで次の開発への準備期間という隙間時間がいまになる。ある種のゆとりになっていて、これはパッケージベンダーだからこそなのか、中小企業ゆえの労務管理や目標管理の緩さからなのか、いずれにしてもこういう隙間時間を使って自分で考えて、自分で調査して、自分でふりかえるといった自律性を養うのによいかもしれない。私もゆっくり考える時間を取れてよかった。&lt;/p></content></item><item><title>ゆとりのある休日</title><link>/diary/posts/2023/0423/</link><pubDate>Sun, 23 Apr 2023 14:12:36 +0900</pubDate><guid>/diary/posts/2023/0423/</guid><description>0時に寝て6時に起きた。午前中は掃除したり買いものへ出掛けたりムック本を買って読んだりして午後からもくもく会に参加してきた。昨日から休日って心地よくて素晴らしい時間だということに改めて気付いた。
いまがわかる地政学 やぎさんからおすすめされて オールカラー図解 いまがわかる地政学 を読んだ。ちょうど余裕もあったので読んでみることにした。私も過去に地政学の雑誌を気分で買って読んだことがあった。教えてもらってなければいまは買ってなかったと思うが、関心のある分野ではある。
見開きの2ページで左ページを地図で図解しながら右ページにその説明が書いてある。読み始めてすぐにドキュメントランドスケープを構築できるので読みやすい。地政学なので地図で説明するのがわかりやすいのと、特定の地域の限られた国で、且つ話題を限定して説明するから簡潔でわかりやすい。過去にはアメリカ／イギリス系統とドイツ系統の2つの地政学があり、地政学はナチスドイツの御用学問となり、ドイツが敗戦したことによりドイツ系統の地政学は封印指定された。日本で学ばれていた地政学もドイツ系統だったようで、戦後 GHQ により封印指定されていまに至るらしい。
地政学の解説を読んでいて、なにかを分類して、そこから得られる知見に方向性や解釈を与えて、さらに歴史が積み重なると立派な研究や学問になるという印象を受けた。観察して分類して仮説を立てて記録を取り続けるとそれはもう科学である。課題管理につながるヒントもありそうな気がしている。課題管理は事象が発生した記録を取り続けて、ある程度溜まったところで分類したり分析したりできる。
もくもく会 【三宮.dev オフライン】もくもく会 に参加した。昨日の続きでプロダクトのドキュメントを2時間ほど書いてた。集中してドキュメントと mermaid のフローチャートを書いた。初めて参加された方も何人かいたのでいろんな人の話しを聞くこともできてよい機会だった。参加者の1人から 芋屋HUG のスィートポテトをもらった。お店の存在は知っていたが、1度も買ったことがなくて初めて食べておいしかった。調べてたら神戸発祥のお店っぽいので東京出張するときのお土産に買って行ってもよさそう。よいお土産を知ることができてよかった。</description><content>&lt;p>0時に寝て6時に起きた。午前中は掃除したり買いものへ出掛けたりムック本を買って読んだりして午後からもくもく会に参加してきた。昨日から休日って心地よくて素晴らしい時間だということに改めて気付いた。&lt;/p>
&lt;h2 id="いまがわかる地政学">いまがわかる地政学&lt;/h2>
&lt;p>やぎさんからおすすめされて &lt;a href="https://one-publishing.co.jp/books/9784651203294/">オールカラー図解 いまがわかる地政学&lt;/a> を読んだ。ちょうど余裕もあったので読んでみることにした。私も過去に地政学の雑誌を気分で買って読んだことがあった。教えてもらってなければいまは買ってなかったと思うが、関心のある分野ではある。&lt;/p>
&lt;p>見開きの2ページで左ページを地図で図解しながら右ページにその説明が書いてある。読み始めてすぐにドキュメントランドスケープを構築できるので読みやすい。地政学なので地図で説明するのがわかりやすいのと、特定の地域の限られた国で、且つ話題を限定して説明するから簡潔でわかりやすい。過去にはアメリカ／イギリス系統とドイツ系統の2つの地政学があり、地政学はナチスドイツの御用学問となり、ドイツが敗戦したことによりドイツ系統の地政学は封印指定された。日本で学ばれていた地政学もドイツ系統だったようで、戦後 GHQ により封印指定されていまに至るらしい。&lt;/p>
&lt;p>地政学の解説を読んでいて、なにかを分類して、そこから得られる知見に方向性や解釈を与えて、さらに歴史が積み重なると立派な研究や学問になるという印象を受けた。観察して分類して仮説を立てて記録を取り続けるとそれはもう科学である。課題管理につながるヒントもありそうな気がしている。課題管理は事象が発生した記録を取り続けて、ある程度溜まったところで分類したり分析したりできる。&lt;/p>
&lt;h2 id="もくもく会">もくもく会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/277856/">【三宮.dev オフライン】もくもく会&lt;/a> に参加した。昨日の続きでプロダクトのドキュメントを2時間ほど書いてた。集中してドキュメントと mermaid のフローチャートを書いた。初めて参加された方も何人かいたのでいろんな人の話しを聞くこともできてよい機会だった。参加者の1人から &lt;a href="https://tabelog.com/hyogo/A2801/A280101/28055400/">芋屋HUG&lt;/a> のスィートポテトをもらった。お店の存在は知っていたが、1度も買ったことがなくて初めて食べておいしかった。調べてたら神戸発祥のお店っぽいので東京出張するときのお土産に買って行ってもよさそう。よいお土産を知ることができてよかった。&lt;/p></content></item><item><title>開発の追い込みに集中</title><link>/diary/posts/2023/0228/</link><pubDate>Tue, 28 Feb 2023 09:07:55 +0900</pubDate><guid>/diary/posts/2023/0228/</guid><description>23時に寝て2回ほど起きて7時に起きた。土日コードを書いて疲れていたので月曜日は早めに業務を切り上げて実家のいろいろをやっていた。
開発の追い込み サーバーサイドとフロントエンドはほぼ開発が完了し、これからテストするだけといきたいところが、想定外のことがあってまだそうはなっていない。
予想外のことは起こるものだ。ガトーは良くやっている by エギーユ・デラーズ
と言っているほどの、予想外というわけでもないが、思った通りに進捗しなくてリリースの危機を迎えている。なにが起ころうとプロジェクトの全責任はマネージャーにある。いま溜まっている issue をメンバーに再分配して乗り切ろうと定例会議で話した。私が2人分ぐらいの作業をすれば1週間もあれば取り戻せる程度の遅れではある。ただ残り時間が1ヶ月しかないだけ。また週末働いてその足で東京に行くのだろうなと直近の未来を想像していた。
上司道 野村監督から学ぶリーダーの器のつくり方 お仕事にテンパっているものの 第86回上司道 野村監督から学ぶリーダーの器のつくり方 に参加した。上司道 に参加するのは2回目。
以前 野村ノート を読んだことがある。 野村監督は言語化にこだわりのある方で選手としても監督としても一流だった氏の実践知の言語化は参考になるかもしれないと思って読んだ。本書は期待した通りでプロ野球に限らず、一般のビジネスパーソンにとっても汎用的に役に立つアイディアがいくつもあったように思う。
例えば、野村監督が捕手に求めるものとして次がある。判断というのは知識と経験を根拠になんらかの基準をもってくだすといったことが書いてあった。判断の前に分析と観察と洞察の3つの段階を語れる人がどのぐらいいるのだろうか。
分析 観察 (目に見えるものをみる) 洞察 (目に見えないもの = 心理を読む) 判断 記憶 今思うのは、小さいことを重ねることが、とんでもないところに行くただ一つの道だと感じている。
これはイチローのコメントだが、この言葉は野村監督の野球観に通じていて感銘を受けたと書いてあった。そんな風に野村ノートがおもしろかったので、その延長上で野村監督に関するイベントなら参加してみようと思った次第。
実際のイベントについては、期待値も高かったのかもしれないが、私の求めていたイベントの内容ではなかった。野村監督と付き合いの長い番記者が野球人としての野村監督というよりも、一般人としての野村監督の在り方を伝えるような著書やそのイベント内容だったと思う。あと野村監督の話しを聞きに行ったのだけど、半分以上は講師が自分のことを多く話すのでその点もアンマッチだったと言える。上司道のイベントは2回目なんだけど、これまでどちらも私の求めていたものではなかった。もしかしたらマネジメントやリーダーシップのイベントで話すのはなかなか難しいのかもしれない。それはいろんな業界・業種の人たちにとって参考になるリーダーシップのようなものはないのかもしれないなと感じた。ドメイン知識も含めてのリーダーシップの話しをしないと、宗教のような徳を積んで治めなさいといったありがたい話しの一般化になってしまう気がする。
人間力は定性的なもので言語化が難しい。それよりも実践知はもう少しスキル寄りなものだと私は考えていて、習慣だったり洞察だったりなら誰でも訓練すれば身につけられるのではないかと思う。少なくとも野村ノートからはそういった片鱗が私には読み取れた。</description><content>&lt;p>23時に寝て2回ほど起きて7時に起きた。土日コードを書いて疲れていたので月曜日は早めに業務を切り上げて実家のいろいろをやっていた。&lt;/p>
&lt;h2 id="開発の追い込み">開発の追い込み&lt;/h2>
&lt;p>サーバーサイドとフロントエンドはほぼ開発が完了し、これからテストするだけといきたいところが、想定外のことがあってまだそうはなっていない。&lt;/p>
&lt;blockquote>
&lt;p>予想外のことは起こるものだ。ガトーは良くやっている by &lt;a href="https://ja.wikipedia.org/wiki/%E3%82%A8%E3%82%AE%E3%83%BC%E3%83%A6%E3%83%BB%E3%83%87%E3%83%A9%E3%83%BC%E3%82%BA">エギーユ・デラーズ&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>と言っているほどの、予想外というわけでもないが、思った通りに進捗しなくてリリースの危機を迎えている。なにが起ころうとプロジェクトの全責任はマネージャーにある。いま溜まっている issue をメンバーに再分配して乗り切ろうと定例会議で話した。私が2人分ぐらいの作業をすれば1週間もあれば取り戻せる程度の遅れではある。ただ残り時間が1ヶ月しかないだけ。また週末働いてその足で東京に行くのだろうなと直近の未来を想像していた。&lt;/p>
&lt;h2 id="上司道-野村監督から学ぶリーダーの器のつくり方">上司道 野村監督から学ぶリーダーの器のつくり方&lt;/h2>
&lt;p>お仕事にテンパっているものの &lt;a href="https://www.facebook.com/events/1384533265732797">第86回上司道 野村監督から学ぶリーダーの器のつくり方&lt;/a> に参加した。&lt;a href="/diary/diary/posts/2022/1019/#上司道-リーダーはレジリエンスを高める自己肯定感を学ぼう">上司道&lt;/a> に参加するのは2回目。&lt;/p>
&lt;p>以前 &lt;a href="https://www.shogakukan.co.jp/books/09387604">野村ノート&lt;/a> を読んだことがある。
野村監督は言語化にこだわりのある方で選手としても監督としても一流だった氏の実践知の言語化は参考になるかもしれないと思って読んだ。本書は期待した通りでプロ野球に限らず、一般のビジネスパーソンにとっても汎用的に役に立つアイディアがいくつもあったように思う。&lt;/p>
&lt;p>例えば、野村監督が捕手に求めるものとして次がある。判断というのは知識と経験を根拠になんらかの基準をもってくだすといったことが書いてあった。判断の前に分析と観察と洞察の3つの段階を語れる人がどのぐらいいるのだろうか。&lt;/p>
&lt;ol>
&lt;li>分析&lt;/li>
&lt;li>観察 (目に見えるものをみる)&lt;/li>
&lt;li>洞察 (目に見えないもの = 心理を読む)&lt;/li>
&lt;li>判断&lt;/li>
&lt;li>記憶&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>今思うのは、小さいことを重ねることが、とんでもないところに行くただ一つの道だと感じている。&lt;/p>
&lt;/blockquote>
&lt;p>これはイチローのコメントだが、この言葉は野村監督の野球観に通じていて感銘を受けたと書いてあった。そんな風に野村ノートがおもしろかったので、その延長上で野村監督に関するイベントなら参加してみようと思った次第。&lt;/p>
&lt;p>実際のイベントについては、期待値も高かったのかもしれないが、私の求めていたイベントの内容ではなかった。野村監督と付き合いの長い番記者が野球人としての野村監督というよりも、一般人としての野村監督の在り方を伝えるような著書やそのイベント内容だったと思う。あと野村監督の話しを聞きに行ったのだけど、半分以上は講師が自分のことを多く話すのでその点もアンマッチだったと言える。上司道のイベントは2回目なんだけど、これまでどちらも私の求めていたものではなかった。もしかしたらマネジメントやリーダーシップのイベントで話すのはなかなか難しいのかもしれない。それはいろんな業界・業種の人たちにとって参考になるリーダーシップのようなものはないのかもしれないなと感じた。ドメイン知識も含めてのリーダーシップの話しをしないと、宗教のような徳を積んで治めなさいといったありがたい話しの一般化になってしまう気がする。&lt;/p>
&lt;p>人間力は定性的なもので言語化が難しい。それよりも実践知はもう少しスキル寄りなものだと私は考えていて、習慣だったり洞察だったりなら誰でも訓練すれば身につけられるのではないかと思う。少なくとも野村ノートからはそういった片鱗が私には読み取れた。&lt;/p></content></item><item><title>後世に残せるものを書く</title><link>/diary/posts/2023/0215/</link><pubDate>Wed, 15 Feb 2023 08:10:02 +0900</pubDate><guid>/diary/posts/2023/0215/</guid><description>0時に寝て4時に起きて6時半に起きた。今日は3つのイベントに参加して疲れた。そのうちの2つを紹介する。
データ指向アプリケーションデザインの紹介イベント Data Engineering Study #18「データ指向アプリケーションデザイン」 に参加した。監訳者のさいとうさんのブログの 2022年を振り返って を読んだときにたまたまみつけて登録していた。
14:00 - 16:30 というちょっと変わった時間帯に設定されているのはさいとうさんが米国在住で時差によるものだと推測する。さいとうさんのいる場所では21時ぐらいと話されていたような気がする。2時間半分のお仕事を休んでもこのイベントは聞きたいなと思ったので取引先に連絡した上でその時間帯はイベントを聞いていた。
この本は人類の叡智といってよいと私は思う。 さいとうさんによると、2007-2017年の過去10年間の分散データシステムの教科書と紹介されていた。私はそれ以前の研究を知っているわけではないので、私のような初学者にとってはもっと長い期間のデータベース研究の歴史を学べるように感じた。 著者はこの本を書くのに4年を費やしたという。本を1冊書くのに4年とか、著者の偉大さが伺える年月でもある。
著者はデータベースの研究者であろうけれど、すべての研究を自分で行ったわけではないだろう。 他者の研究を調査した上でこういった書籍にまとめるというお仕事も非常に価値のあることだと本書を読んで実感した。私も課題管理の分野でそういうことができればいいなと思う。
さいとうさんの講演のタイトルは「30分でわかる〜」という接頭辞がついているものの、さいとうさんと同レベルの人にしかわかるわけはなくて、このイベントに参加しても本に書いてある全体像がわかるだけで、本の内容がわかることはほぼないと言える。私はこの本を精読したのでさいとうさんの話しを聞きながら、あの辺の書いてあった話しの紹介だなと記憶を辿りながら聞いていた。
「30分でわかるデータ指向アプリケーションデザイン」発表資料を公開しました。「データの量、複雑さ、変化の速度」を中心に考えてアプリケーション設計する分散データシステムの世界と、その楽しさを身近に感じていただければ幸いです。https://t.co/zavNqMxEvt #DataEngineeringStudy
&amp;mdash; Taro L. Saito (@taroleo) February 15, 2023 コワーキングのオンラインイベント 月例のカフーツさんのオンラインイベントに参加した。先月の所感はここ 。今日の話題は 間借りコワーキング だった。実際にカフーツさんで間借りコワーキングを実践された方をゲストにお招きしてその体験談を話してもらってみんなで議論したりしていた。ここで言う間借りとは、コワーキングスペースの運営をメンバーにも体験してもらってそこから新たな価値を模索しようといったもの。インターンシップのようなものとも言えるし価値創造のための施策とも受け取れる。ただのアルバイトではないという意図で「間借り」という名前を付けている。最初に説明を聞いていて、あまり私にはピンと来なかった。それは it 業界は勉強会を個々に開くのが当たり前過ぎて、そんなのはわざわざコワーキングスペースの運営者にならなくてもすぐにできることのように思えたから。おそらくここは it 業界が先進的過ぎて、普通の組織や会社に勤めている人は、気軽に知人や不特定多数の人たちを呼んで勉強会 (イベント) をしたりしないのだと推測する。
それからコミュニティの話題で、強い紐帯と弱い紐帯の話しが出てきて、リンダ・グラットン 氏の著書に書いてあった言葉として「境界接続者」という用語を紹介されていた。私が軽くググってみてもその用語は出てこないのでおそらくは次の研究者の研究を紹介されている一節だったのではないかと推測する。
アメリカの社会学者Ｍ・グラノヴェッターの「弱い紐帯の強さ」という有名な説をご存じの方は多いと思う。「紐帯（ちゅうたい）」とは文字どおり紐（ひも）や帯（おび）のことではあるが、転じて「二つのものをかたく結びつけるもの」また「 血縁・地縁・利害関係など、社会を形づくる結びつき」という意味がある。（「デジタル大辞泉」より）「弱い紐帯の強さ」とは『価値ある情報の伝達やイノベーションの伝播においては、家族や親友、同じ職場の仲間のような強いネットワーク（強い紐帯）よりも、「ちょっとした知り合い」や「知人の知人」のような弱いネットワーク（弱い紐帯）が重要である』という社会ネットワーク理論である。もう40年前に発表されたが、SNSが世の中を席巻するようになり再び注目をあびている。
会社内の「弱い紐帯（ちゅうたい）」
なにかの英語の言葉の訳語として「境界接続者」という用語をあてているのだと推測する。ここでいう境界とは、コミュニティとコミュニティをつなぐ役割をする人のことでそういった人がコミュニティにおいて大きな価値を提供しているというのが、弱い紐帯の強さで提案されている価値に相当するらしい。それを体験もしくは実践する機会として間借りコワーキングはうまく作用するのではないかという企画につながってくる。そこまで聞いて、単なるインターンシップではないことは理解できた。
私はどちらかと言うと弱い紐帯よりも強い紐帯のコミュニティの価値を認める方だと言える。その真逆の考え方は懸念もいくつかあるものの、普段は考えないことを考える機会としておもしろかったと言える。社会で生きていく上でどちらの要素もあることなので一方に固執しなくてもよいというのも正しいと思う。</description><content>&lt;p>0時に寝て4時に起きて6時半に起きた。今日は3つのイベントに参加して疲れた。そのうちの2つを紹介する。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザインの紹介イベント">データ指向アプリケーションデザインの紹介イベント&lt;/h2>
&lt;p>&lt;a href="https://forkwell.connpass.com/event/269125/">Data Engineering Study #18「データ指向アプリケーションデザイン」&lt;/a> に参加した。監訳者のさいとうさんのブログの &lt;a href="https://medium.com/@taroleo/2022%E5%B9%B4%E3%82%92%E6%8C%AF%E3%82%8A%E8%BF%94%E3%81%A3%E3%81%A6-563ed3405ce0">2022年を振り返って&lt;/a> を読んだときにたまたまみつけて登録していた。&lt;/p>
&lt;p>14:00 - 16:30 というちょっと変わった時間帯に設定されているのはさいとうさんが米国在住で時差によるものだと推測する。さいとうさんのいる場所では21時ぐらいと話されていたような気がする。2時間半分のお仕事を休んでもこのイベントは聞きたいなと思ったので取引先に連絡した上でその時間帯はイベントを聞いていた。&lt;/p>
&lt;p>この本は人類の叡智といってよいと私は思う。
さいとうさんによると、2007-2017年の過去10年間の分散データシステムの教科書と紹介されていた。私はそれ以前の研究を知っているわけではないので、私のような初学者にとってはもっと長い期間のデータベース研究の歴史を学べるように感じた。
著者はこの本を書くのに4年を費やしたという。本を1冊書くのに4年とか、著者の偉大さが伺える年月でもある。&lt;/p>
&lt;p>著者はデータベースの研究者であろうけれど、すべての研究を自分で行ったわけではないだろう。
他者の研究を調査した上でこういった書籍にまとめるというお仕事も非常に価値のあることだと本書を読んで実感した。私も課題管理の分野でそういうことができればいいなと思う。&lt;/p>
&lt;p>さいとうさんの講演のタイトルは「30分でわかる〜」という接頭辞がついているものの、さいとうさんと同レベルの人にしかわかるわけはなくて、このイベントに参加しても本に書いてある全体像がわかるだけで、本の内容がわかることはほぼないと言える。私はこの本を精読したのでさいとうさんの話しを聞きながら、あの辺の書いてあった話しの紹介だなと記憶を辿りながら聞いていた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">「30分でわかるデータ指向アプリケーションデザイン」発表資料を公開しました。「データの量、複雑さ、変化の速度」を中心に考えてアプリケーション設計する分散データシステムの世界と、その楽しさを身近に感じていただければ幸いです。&lt;a href="https://t.co/zavNqMxEvt">https://t.co/zavNqMxEvt&lt;/a> &lt;a href="https://twitter.com/hashtag/DataEngineeringStudy?src=hash&amp;amp;ref_src=twsrc%5Etfw">#DataEngineeringStudy&lt;/a>&lt;/p>&amp;mdash; Taro L. Saito (@taroleo) &lt;a href="https://twitter.com/taroleo/status/1625768417415532544?ref_src=twsrc%5Etfw">February 15, 2023&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="コワーキングのオンラインイベント">コワーキングのオンラインイベント&lt;/h2>
&lt;p>月例のカフーツさんのオンラインイベントに参加した。&lt;a href="/diary/diary/posts/2023/0118/#コワーキングのオンラインイベント">先月の所感はここ&lt;/a> 。今日の話題は &lt;a href="https://cahootz.jp/?p=2428">間借りコワーキング&lt;/a> だった。実際にカフーツさんで間借りコワーキングを実践された方をゲストにお招きしてその体験談を話してもらってみんなで議論したりしていた。ここで言う間借りとは、コワーキングスペースの運営をメンバーにも体験してもらってそこから新たな価値を模索しようといったもの。インターンシップのようなものとも言えるし価値創造のための施策とも受け取れる。ただのアルバイトではないという意図で「間借り」という名前を付けている。最初に説明を聞いていて、あまり私にはピンと来なかった。それは it 業界は勉強会を個々に開くのが当たり前過ぎて、そんなのはわざわざコワーキングスペースの運営者にならなくてもすぐにできることのように思えたから。おそらくここは it 業界が先進的過ぎて、普通の組織や会社に勤めている人は、気軽に知人や不特定多数の人たちを呼んで勉強会 (イベント) をしたりしないのだと推測する。&lt;/p>
&lt;p>それからコミュニティの話題で、強い紐帯と弱い紐帯の話しが出てきて、&lt;a href="https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%B3%E3%83%80%E3%83%BB%E3%82%B0%E3%83%A9%E3%83%83%E3%83%88%E3%83%B3">リンダ・グラットン&lt;/a> 氏の著書に書いてあった言葉として「境界接続者」という用語を紹介されていた。私が軽くググってみてもその用語は出てこないのでおそらくは次の研究者の研究を紹介されている一節だったのではないかと推測する。&lt;/p>
&lt;blockquote>
&lt;p>　アメリカの社会学者Ｍ・グラノヴェッターの「弱い紐帯の強さ」という有名な説をご存じの方は多いと思う。「紐帯（ちゅうたい）」とは文字どおり紐（ひも）や帯（おび）のことではあるが、転じて「二つのものをかたく結びつけるもの」また「 血縁・地縁・利害関係など、社会を形づくる結びつき」という意味がある。（「デジタル大辞泉」より）「弱い紐帯の強さ」とは『価値ある情報の伝達やイノベーションの伝播においては、家族や親友、同じ職場の仲間のような強いネットワーク（強い紐帯）よりも、「ちょっとした知り合い」や「知人の知人」のような弱いネットワーク（弱い紐帯）が重要である』という社会ネットワーク理論である。もう40年前に発表されたが、SNSが世の中を席巻するようになり再び注目をあびている。&lt;/p>
&lt;p>&lt;a href="https://www.ogis-ri.co.jp/column/kr/257.html">会社内の「弱い紐帯（ちゅうたい）」&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>なにかの英語の言葉の訳語として「境界接続者」という用語をあてているのだと推測する。ここでいう境界とは、コミュニティとコミュニティをつなぐ役割をする人のことでそういった人がコミュニティにおいて大きな価値を提供しているというのが、弱い紐帯の強さで提案されている価値に相当するらしい。それを体験もしくは実践する機会として間借りコワーキングはうまく作用するのではないかという企画につながってくる。そこまで聞いて、単なるインターンシップではないことは理解できた。&lt;/p>
&lt;p>私はどちらかと言うと弱い紐帯よりも強い紐帯のコミュニティの価値を認める方だと言える。その真逆の考え方は懸念もいくつかあるものの、普段は考えないことを考える機会としておもしろかったと言える。社会で生きていく上でどちらの要素もあることなので一方に固執しなくてもよいというのも正しいと思う。&lt;/p></content></item><item><title>windows の調査を開始</title><link>/diary/posts/2023/0210/</link><pubDate>Fri, 10 Feb 2023 15:39:06 +0900</pubDate><guid>/diary/posts/2023/0210/</guid><description>1時に寝て7時過ぎに起きた。やや飲み過ぎて、2日酔いではないけど起きたときは気分が悪かった。
go-winio を触ってみた windows 向けのモジュールを作り直すにあたり、有識者のサポートをお願いしているものの、私も最低限の知識はないとあかんやろと調査を開始した。microsoft/go-winio というライブラリが ms 社のリポジトリで公開されている。公式ならよいのだろうと安易に考えて触ってみたものの、ドキュメントがほとんどなくて、まず使い方がわからん。いまのところ、windows に詳しい人向けのライブラリみたい。ひとまずリポジトリにある pipe_test.go のテストコードを読みながら名前付きパイプを介したプロセス間通信をやってみた。一応は動いたのでここから内部の windows api の仕様や設定などをみていく。その過程で go-winio のチュートリアルがないのであれば、私がテックブログを書いてもよいのかもしれない。
チュートリアル的に書いてみたコードは次の通り。
https://gitlab.com/t2y/misc/-/tree/main/winio-send https://gitlab.com/t2y/misc/-/tree/main/winio-receive 課題管理勉強会 出張のときに毎月の課題管理勉強会。とくにネタが思いつかなかったので エンジニアリング組織論への招待 を題材にしてみた。資料はすでに作ってあった 。私にとっては課題管理をやる意義や価値の大半がこの書籍の中で解説されている。用語や考え方のところでとても参考になるし、いまメンタリングの技術の章を読み直したりもしている。昔はマネージャーやってなかったからその章は読み飛ばしてた。開発組織向けの組織論を解説した書籍でこれ以上のものは、いまのところ、私が読んだ本の中では知らない。4年前に読んだ本を、今回の勉強会を開く機会でまた読み直すきっかけにもなってよかった。本はコンテキストがきれいに構成されているので他の人の所感や意見を聞いたり雑談したりする題材としてもよさそうに思える。</description><content>&lt;p>1時に寝て7時過ぎに起きた。やや飲み過ぎて、2日酔いではないけど起きたときは気分が悪かった。&lt;/p>
&lt;h2 id="go-winio-を触ってみた">go-winio を触ってみた&lt;/h2>
&lt;p>windows 向けのモジュールを作り直すにあたり、有識者のサポートをお願いしているものの、私も最低限の知識はないとあかんやろと調査を開始した。&lt;a href="https://github.com/microsoft/go-winio">microsoft/go-winio&lt;/a> というライブラリが ms 社のリポジトリで公開されている。公式ならよいのだろうと安易に考えて触ってみたものの、ドキュメントがほとんどなくて、まず使い方がわからん。いまのところ、windows に詳しい人向けのライブラリみたい。ひとまずリポジトリにある pipe_test.go のテストコードを読みながら名前付きパイプを介したプロセス間通信をやってみた。一応は動いたのでここから内部の windows api の仕様や設定などをみていく。その過程で go-winio のチュートリアルがないのであれば、私がテックブログを書いてもよいのかもしれない。&lt;/p>
&lt;p>チュートリアル的に書いてみたコードは次の通り。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gitlab.com/t2y/misc/-/tree/main/winio-send">https://gitlab.com/t2y/misc/-/tree/main/winio-send&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gitlab.com/t2y/misc/-/tree/main/winio-receive">https://gitlab.com/t2y/misc/-/tree/main/winio-receive&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="課題管理勉強会">課題管理勉強会&lt;/h2>
&lt;p>出張のときに毎月の課題管理勉強会。とくにネタが思いつかなかったので &lt;a href="https://gihyo.jp/book/2018/978-4-7741-9605-3">エンジニアリング組織論への招待&lt;/a> を題材にしてみた。&lt;a href="/diary/diary/posts/2023/0205/#課題管理勉強会の資料作り">資料はすでに作ってあった&lt;/a> 。私にとっては課題管理をやる意義や価値の大半がこの書籍の中で解説されている。用語や考え方のところでとても参考になるし、いまメンタリングの技術の章を読み直したりもしている。昔はマネージャーやってなかったからその章は読み飛ばしてた。開発組織向けの組織論を解説した書籍でこれ以上のものは、いまのところ、私が読んだ本の中では知らない。4年前に読んだ本を、今回の勉強会を開く機会でまた読み直すきっかけにもなってよかった。本はコンテキストがきれいに構成されているので他の人の所感や意見を聞いたり雑談したりする題材としてもよさそうに思える。&lt;/p></content></item><item><title>資料作りを丸半日</title><link>/diary/posts/2023/0205/</link><pubDate>Sun, 05 Feb 2023 12:19:23 +0900</pubDate><guid>/diary/posts/2023/0205/</guid><description>23時に寝て何度か起きて7時に起きた。起きたものの、なんかしんどくてお昼前まで寝てた。
課題管理勉強会の資料作り 出張前の定例作業になりつつある。本当は余裕をもって事前に資料作りしておけばよいのに、日々の余裕がないから出張直前の日曜日に資料作りしている。これはよくない兆し。次の課題管理勉強会は エンジニアリング組織論への招待 を取り上げる。Chapter 1 の思考のリファクタリングから、私が関心のあるところ、もしくは課題管理で解決できそうな話題などを重点的に取り上げる。たたき台はできた。構成や進行をさらに練りたいので少し寝かせてからもうちょっと考える。読み返していると忘れていたことを思い出したり、課題管理と密接な内容を再発見したり、本の内容をずっと覚えているとかないから自分の勉強にもなる。本当は参加者同士で内容の議論ができるといいんじゃないかと思うけど、少人数の勉強会ではないから発言しにくい空気がある。もしくは発言するのは一部のメンバーに限られてしまう。とくにリモート参加が多いと勉強会は盛り上がらない。それは オンライン飲み会が盛り上がらない理由 と同じ。
12時頃にオフィス来て、途中に休憩を取っているけど、ひと段落して気付いたら23時まわってた。明日は始発で新幹線に乗る。このまま起きたまま夜通し出張の準備をして新幹線で寝る作戦に移行する。</description><content>&lt;p>23時に寝て何度か起きて7時に起きた。起きたものの、なんかしんどくてお昼前まで寝てた。&lt;/p>
&lt;h2 id="課題管理勉強会の資料作り">課題管理勉強会の資料作り&lt;/h2>
&lt;p>出張前の定例作業になりつつある。本当は余裕をもって事前に資料作りしておけばよいのに、日々の余裕がないから出張直前の日曜日に資料作りしている。これはよくない兆し。次の課題管理勉強会は &lt;a href="https://gihyo.jp/book/2018/978-4-7741-9605-3">エンジニアリング組織論への招待&lt;/a> を取り上げる。Chapter 1 の思考のリファクタリングから、私が関心のあるところ、もしくは課題管理で解決できそうな話題などを重点的に取り上げる。たたき台はできた。構成や進行をさらに練りたいので少し寝かせてからもうちょっと考える。読み返していると忘れていたことを思い出したり、課題管理と密接な内容を再発見したり、本の内容をずっと覚えているとかないから自分の勉強にもなる。本当は参加者同士で内容の議論ができるといいんじゃないかと思うけど、少人数の勉強会ではないから発言しにくい空気がある。もしくは発言するのは一部のメンバーに限られてしまう。とくにリモート参加が多いと勉強会は盛り上がらない。それは &lt;a href="/diary/diary/posts/2023/0203/#隔週の雑談">オンライン飲み会が盛り上がらない理由&lt;/a> と同じ。&lt;/p>
&lt;p>12時頃にオフィス来て、途中に休憩を取っているけど、ひと段落して気付いたら23時まわってた。明日は始発で新幹線に乗る。このまま起きたまま夜通し出張の準備をして新幹線で寝る作戦に移行する。&lt;/p></content></item><item><title>週末はドライブで気分転換</title><link>/diary/posts/2023/0128/</link><pubDate>Sat, 28 Jan 2023 13:42:54 +0900</pubDate><guid>/diary/posts/2023/0128/</guid><description>22時に寝て2時前に吐き気で起きて少しだらだらして寝て7時に起きた。
ストレッチ 今日の開脚幅は開始前154cmで、ストレッチ後158cmだった。あまり数値は振るわなかったものの、この1ヶ月ぐらいではもっとも復調しつつある。まだ腰の張りがやや残っていて全快とまではいかないものの先週よりはよくなりつつある気はする。先週から左右への開脚以外に前後の開脚のときの股関節のストレッチを重視するよう、トレーナーさんからも指示はあったものの、今週は全然そんな余裕がなくてあまり取り組めなかった。それを余暇でうまくできなかった分の、数値の悪化かなとも受け取れた。
2-2. 傾聴・可視化・リフレーミング エンジニアリング組織論への招待 のメンタリングの技術の章を読み直し。前回 からだいぶ間があいた。
メンターはメンティに対して「問題を解決してあげよう」ではなく「モヤモヤしていない問題に変換してあげよう」と考えることが重要。問題を次のように考え、
感情的に固執していて解けないので「傾聴」をする 客観視できずに解けないので「可視化」をする そもそも解けない問題なので前提を変える「リフレーミング」をする というのが、メンタリングで意識すべき流れになる。
共感と同感の違い
共感という言葉の意味は「相手がそのような気持ちになった理由を理解する」こと 同感は「自分が相手と同じ気持ちになる」こと 傾聴において示すべきことは、「共感」であって、「同感」ではありません。
認知フレームとリフレーミング
人はありのままに物事を見られない 人は認知する枠組みの範囲でしか処理できない この枠組みのことを「認知のフレーム」と呼ぶ この外側にあることは「心理的な盲点」と呼ばれる 対話によって認知フレームを変えることを「リフレーミング」と呼ぶ 「解けない問題」を「解ける問題」へと変えていく 確認された前提を「一旦、この前提がなかったらどうなりますか？」というように外して考えるようにすることで、リフレーミングを促すことができます。 また、この中で「一番重要だと思うものは何ですか？」というように前提の優先順位を問うこともリフレーミングを促します。気になって仕方なかったことが、実はあまり重要ではないかもしれないと気がつく契機になります。
「情報の非対称性」を解消するには、
自分の情報を相手に伝える 相手の情報を自分が聞く という行動をとればよいのですが、この当たり前のことができなくなってしまうケースがある
これは、メンター役になる人に対しても重要な警句です。メンターは、メンティの問題を「自分の課題」として捉えてはいけません。メンターにとっての課題は「メンティを自立的な問題解決」に導くことであって、「メンティの課題を解決すること」ではないのです。
この節を読み終えて、課題管理とは、メンターを必要とせず、自分で自分をメンタリングするツールとも言い換えられるかもしれないと思えた。課題管理を習熟すると自分で自分の間違いに気付けるというメリットを周りに伝えたりしていたことがメンタリングで大事なことのいくつかの共通することが書いてあった。
車を運転して実家へ 明日は父の35日なので夕方から購入した車で初めて実家に帰った。神戸の高速道路の路面が少し濡れていたり北淡で小雪が降ってきたりして、さっそくタイヤ周りを汚れてしまった。まぁ仕方ないか。door-to-door で1時間15分ぐらいで実家に帰れる。高速バスで帰るとこんな段取りになる。
マンションからバス停へ移動する (10分) バス停でバスが到着するのを待つ (待ち時間10分) 高速バスで移動する (1時間20分) バス停まで親に車で迎えに来てもらって実家へ移動する (15分) 待ち時間の調整が入ると2時間ほどはかかっていた。これが自分の都合で移動できるので調整時間がない分のストレスが溜まらない。帰ろうと思って1時間強で移動できる気楽さがある。</description><content>&lt;p>22時に寝て2時前に吐き気で起きて少しだらだらして寝て7時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前154cmで、ストレッチ後158cmだった。あまり数値は振るわなかったものの、この1ヶ月ぐらいではもっとも復調しつつある。まだ腰の張りがやや残っていて全快とまではいかないものの先週よりはよくなりつつある気はする。先週から左右への開脚以外に前後の開脚のときの股関節のストレッチを重視するよう、トレーナーさんからも指示はあったものの、今週は全然そんな余裕がなくてあまり取り組めなかった。それを余暇でうまくできなかった分の、数値の悪化かなとも受け取れた。&lt;/p>
&lt;h2 id="2-2-傾聴可視化リフレーミング">2-2. 傾聴・可視化・リフレーミング&lt;/h2>
&lt;p>&lt;a href="https://gihyo.jp/book/2018/978-4-7741-9605-3">エンジニアリング組織論への招待&lt;/a> のメンタリングの技術の章を読み直し。&lt;a href="/diary/diary/posts/2022/1106/#2-1-メンタリングで相手の思考をリファクタリング">前回&lt;/a> からだいぶ間があいた。&lt;/p>
&lt;blockquote>
&lt;p>メンターはメンティに対して「問題を解決してあげよう」ではなく「モヤモヤしていない問題に変換してあげよう」と考えることが重要。問題を次のように考え、&lt;/p>
&lt;ul>
&lt;li>感情的に固執していて解けないので「傾聴」をする&lt;/li>
&lt;li>客観視できずに解けないので「可視化」をする&lt;/li>
&lt;li>そもそも解けない問題なので前提を変える「リフレーミング」をする&lt;/li>
&lt;/ul>
&lt;p>というのが、メンタリングで意識すべき流れになる。&lt;/p>
&lt;p>共感と同感の違い&lt;/p>
&lt;ul>
&lt;li>共感という言葉の意味は「相手がそのような気持ちになった理由を理解する」こと&lt;/li>
&lt;li>同感は「自分が相手と同じ気持ちになる」こと&lt;/li>
&lt;/ul>
&lt;p>傾聴において示すべきことは、「共感」であって、「同感」ではありません。&lt;/p>
&lt;p>認知フレームとリフレーミング&lt;/p>
&lt;ul>
&lt;li>人はありのままに物事を見られない
&lt;ul>
&lt;li>人は認知する枠組みの範囲でしか処理できない&lt;/li>
&lt;li>この枠組みのことを「認知のフレーム」と呼ぶ
&lt;ul>
&lt;li>この外側にあることは「心理的な盲点」と呼ばれる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>対話によって認知フレームを変えることを「リフレーミング」と呼ぶ
&lt;ul>
&lt;li>「解けない問題」を「解ける問題」へと変えていく&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>確認された前提を「一旦、この前提がなかったらどうなりますか？」というように外して考えるようにすることで、リフレーミングを促すことができます。 また、この中で「一番重要だと思うものは何ですか？」というように前提の優先順位を問うこともリフレーミングを促します。気になって仕方なかったことが、実はあまり重要ではないかもしれないと気がつく契機になります。&lt;/p>
&lt;p>「情報の非対称性」を解消するには、&lt;/p>
&lt;ul>
&lt;li>自分の情報を相手に伝える&lt;/li>
&lt;li>相手の情報を自分が聞く&lt;/li>
&lt;/ul>
&lt;p>という行動をとればよいのですが、この当たり前のことができなくなってしまうケースがある&lt;/p>
&lt;p>これは、メンター役になる人に対しても重要な警句です。メンターは、メンティの問題を「自分の課題」として捉えてはいけません。メンターにとっての課題は「メンティを自立的な問題解決」に導くことであって、「メンティの課題を解決すること」ではないのです。&lt;/p>
&lt;/blockquote>
&lt;p>この節を読み終えて、課題管理とは、メンターを必要とせず、自分で自分をメンタリングするツールとも言い換えられるかもしれないと思えた。課題管理を習熟すると自分で自分の間違いに気付けるというメリットを周りに伝えたりしていたことがメンタリングで大事なことのいくつかの共通することが書いてあった。&lt;/p>
&lt;h2 id="車を運転して実家へ">車を運転して実家へ&lt;/h2>
&lt;p>明日は父の35日なので夕方から購入した車で初めて実家に帰った。神戸の高速道路の路面が少し濡れていたり北淡で小雪が降ってきたりして、さっそくタイヤ周りを汚れてしまった。まぁ仕方ないか。door-to-door で1時間15分ぐらいで実家に帰れる。高速バスで帰るとこんな段取りになる。&lt;/p>
&lt;ul>
&lt;li>マンションからバス停へ移動する (10分)&lt;/li>
&lt;li>バス停でバスが到着するのを待つ (待ち時間10分)&lt;/li>
&lt;li>高速バスで移動する (1時間20分)&lt;/li>
&lt;li>バス停まで親に車で迎えに来てもらって実家へ移動する (15分)&lt;/li>
&lt;/ul>
&lt;p>待ち時間の調整が入ると2時間ほどはかかっていた。これが自分の都合で移動できるので調整時間がない分のストレスが溜まらない。帰ろうと思って1時間強で移動できる気楽さがある。&lt;/p></content></item><item><title>半日ずっと書きものしてた</title><link>/diary/posts/2023/0115/</link><pubDate>Sun, 15 Jan 2023 11:19:16 +0900</pubDate><guid>/diary/posts/2023/0115/</guid><description>20時ぐらいからだらだらしていて寝たり起きたりしていた。9時に起きた。バテてたからちょうど休養になった。
散髪 年末に行こうと思っていたのが葬儀で予定が狂ってしまってその後も会社の事務手続きや社用車の購入にバタバタして出張があって今日行ってこれた。いつも散髪に行って思うことはもっと早く行けばよかったということ。散髪を終えた後の髪の鬱陶しさから解放されて楽に感じる。もう一定の髪量になったら私のカレンダーの空いている時間帯を見繕って自動的に散髪屋さんに予約をとってほしいとすら思える。カメラとカレンダーを組み合わせてそういったワークフローを作ること自体はできるかもしれない。
日記 出張していたときの日記をまとめて推敲してアップロードした。なんか出張すると、夜はお出かけして遊んでたり、ホテルに戻ってからもだらだらして日記を書かないことが多い。原因の1つにホテルの部屋の椅子がオフィスにあるものと比べてよくない。疲れて帰ってきて、オフィスよりも椅子の悪いところで日記を書く気になれないというのがある。アーロンチェアに慣れてしまってこの椅子で書きものをするのが快適過ぎて、他の環境で書くのをためらってしまう自分がいる。アーロンチェアは半日以上書きものしていても全然疲れない。
フリーランス、４０歳の壁 早いうちの方が覚えているからよいだろうとエイヤで書いてみた。読み終えた後にあまり思い入れもなかったので書評も簡潔なものとなった。まぁまぁの手応え。
フリーランス、４０歳の壁の書評</description><content>&lt;p>20時ぐらいからだらだらしていて寝たり起きたりしていた。9時に起きた。バテてたからちょうど休養になった。&lt;/p>
&lt;h2 id="散髪">散髪&lt;/h2>
&lt;p>年末に行こうと思っていたのが葬儀で予定が狂ってしまってその後も会社の事務手続きや社用車の購入にバタバタして出張があって今日行ってこれた。いつも散髪に行って思うことはもっと早く行けばよかったということ。散髪を終えた後の髪の鬱陶しさから解放されて楽に感じる。もう一定の髪量になったら私のカレンダーの空いている時間帯を見繕って自動的に散髪屋さんに予約をとってほしいとすら思える。カメラとカレンダーを組み合わせてそういったワークフローを作ること自体はできるかもしれない。&lt;/p>
&lt;h2 id="日記">日記&lt;/h2>
&lt;p>出張していたときの日記をまとめて推敲してアップロードした。なんか出張すると、夜はお出かけして遊んでたり、ホテルに戻ってからもだらだらして日記を書かないことが多い。原因の1つにホテルの部屋の椅子がオフィスにあるものと比べてよくない。疲れて帰ってきて、オフィスよりも椅子の悪いところで日記を書く気になれないというのがある。アーロンチェアに慣れてしまってこの椅子で書きものをするのが快適過ぎて、他の環境で書くのをためらってしまう自分がいる。アーロンチェアは半日以上書きものしていても全然疲れない。&lt;/p>
&lt;h2 id="フリーランス４０歳の壁">フリーランス、４０歳の壁&lt;/h2>
&lt;p>早いうちの方が覚えているからよいだろうとエイヤで書いてみた。読み終えた後にあまり思い入れもなかったので書評も簡潔なものとなった。まぁまぁの手応え。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://note.com/t2y1979/n/na2e147afbf0e">フリーランス、４０歳の壁の書評&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>貸し会議室でもくもく会</title><link>/diary/posts/2023/0109/</link><pubDate>Mon, 09 Jan 2023 10:37:05 +0900</pubDate><guid>/diary/posts/2023/0109/</guid><description>7時に寝て9時半に起きた。昨日は遅くまで起きてたのでこのまま寝たら寝坊する懸念が高かったからそのまま起きてて6時55分の新幹線に乗って移動中寝てた。祝日だったせいか、新幹線は空いてて快適だった。
もくもく会 出張もくもく会 を開催した。品川駅から飯田橋駅へのアクセスが予想外に悪くて30分ほどかかって10分ほど遅刻した。5人ほど部屋の前で待っていて悪いことした。午前中は8人参加していて、みんなそれぞれの課題をもってきて取り組んでいた。午後から1人来られた。参加者は全部で9名だった。参加者の属性も時代の変化を表していてデザイナーやプログラマーにジョブチェンジして勉強していますという参加者が数名おられた。私は svelte のチュートリアルをいくつかやっていた。あまり寝てなかったので15時頃は眠くてほとんど作業にならなかった。16時頃から眠気も覚めて本を読んでいた。17時30分まで借りていたが、17時過ぎには撤収して軽く飲みに行った。9名中7名が参加してくれていろんなお話が聞けて楽しかった。コロナ禍前の勉強会の雰囲気に戻ってきた。
会場は スペースアイエレガンス飯田橋 という貸し会議室を借りた。10時00分から17時30分まで7.5時間借りて税込7,425円。他の貸し会議室に比べると安い方に分類される。ワンルームのマンションの一室を貸し会議室にアレンジしたような部屋で築年数は感覚的に15年以上は経っているのではないか。古い。机に向かって座れる定員が10人。パイプ椅子が4つ置いてあって座れる定員は14名。部屋はやや窮屈で机に10人が向かって座るといっぱいいっぱい。3人掛けの机は間を空けて2人で座るのがよさそうにみえた。快適にもくもく会をするなら8人の定員が望ましい。トイレは普通。wifi の速度は200Mbps程度で十分に速かったし、8人接続していても安定していた。エアコンも普通かな。部屋が狭さに対してエアコンは有効で寒いということはなかった。
フリーランス、４０歳の壁 フリーランス、４０歳の壁 の後半を読んだ。
「第8章 都築響一 還暦を迎えても奔放なフリー人生。」 「第9章 フリーランスの上がりとしての創業社長。」 都築氏は1956年生まれて私よりも2周り近く上なのでさらに昔に活躍された方のようだ。 現場主義な方で実際に起こっている事実を観察して自分なりの解釈や判断でフリーランスとして活躍された方のようにみえる。本書に出てくるフリーランスの方々は私からみてあまりピンと来なかったのだけど、この方の生き方や考え方がもっとも私に近くて参考になった。
編集者と作家を兼ねるこういう仕事スタイルをとる人を、私は「編集家」と呼んでおり、自分自身の肩書きにも使っています。都築響一さんは、私の定義を完全に満たした「編集家」です。
やりたいことがあれば自分で試してみて試行錯誤しながらやっていく雰囲気を感じる。都築氏は仕事で大変なことはあったが、壁には当たったことはないという。ある歳を境に仕事が減ることもあったそうだけど、ネットが年齢差や対面でのお仕事を不要にしたという。
僕は、過去に仕事が途絶えることもありましたが、壁だとは思いませんでした。仕事がない時期にこそ、はじめて自分にとって大切なもの、必要でないものが見極められるんです。そのときは大変でも、後になってみたら、立ち止まって考える時期を持つことは大切かもしれません。
こういう考え方も私の好み。ピンチはチャンス。
「違いますね。（大手は）給料が良すぎるっていう、それだけが問題なんですよ。その若い社員編集者も、会社に不満があるのなら、辞めて自分の会社を作れば良いんです。でも、高い給料を捨ててまで自分の道を貫こうという気迫がない。僕もいまの出版界に不満はありますよ。だからこそいまの僕は、自分で直販の道を探して、メディアを作っているわけです。」
若い編集者が上司の愚痴を昔とは時代が違うとこぼしているのに対する答え。もともと会社に頼っていない人間だからこそこういう考え方ができる。私も不満があれば区切りのよいところで会社を辞めてきた人間なのでこういう姿勢も似ている。ググるとインタビュー記事をみかけたのでまた後で読んでみようと思う。
普遍、あるいは洗練について。 最後の章は著者が会社を作ったときの話し。最初の起業は大失敗したものの、なんやらかんやらでなんとかなってますといった雰囲気。著者は会社員はできなくても社長ならできるという。創業社長には発達障害だと思われる人がたくさんいるとも書いている。これは流石にバイアスが強過ぎると思う。会社を作ることは誰でもできるが、ある程度長く会社を存続できる人は少ないし、その続けられている人の割合に発達障害と思われる人はずっと少ないと思う。たまたまそういう属性の人が活躍すると有名になるだけで多くの創業社長は普通の人だと思う。一方で橘玲氏の本にもよく出てくる話しだが、日本は解雇規制がために中途採用の敷居がとても高いため、経歴がよくない人は年齢とともに転職がとても難しい。そんな経歴のよくない人でも会社は作れて、取引は法人を介して行われるので個人の経歴を隠蔽もしくはリセットできるという側面をもっている。だからフリーランスの上がりが創業社長なのではなく、経歴の悪い人が最後に働く手段が創業社長なのだと私は認識している。
期待した内容ではなかったものの、賛否も含めて示唆に富む本だったと思う。また余裕があれば書評をブログの記事として書こうと思う。</description><content>&lt;p>7時に寝て9時半に起きた。昨日は遅くまで起きてたのでこのまま寝たら寝坊する懸念が高かったからそのまま起きてて6時55分の新幹線に乗って移動中寝てた。祝日だったせいか、新幹線は空いてて快適だった。&lt;/p>
&lt;h2 id="もくもく会">もくもく会&lt;/h2>
&lt;p>&lt;a href="https://kazamori.connpass.com/event/269403/">出張もくもく会&lt;/a> を開催した。品川駅から飯田橋駅へのアクセスが予想外に悪くて30分ほどかかって10分ほど遅刻した。5人ほど部屋の前で待っていて悪いことした。午前中は8人参加していて、みんなそれぞれの課題をもってきて取り組んでいた。午後から1人来られた。参加者は全部で9名だった。参加者の属性も時代の変化を表していてデザイナーやプログラマーにジョブチェンジして勉強していますという参加者が数名おられた。私は svelte のチュートリアルをいくつかやっていた。あまり寝てなかったので15時頃は眠くてほとんど作業にならなかった。16時頃から眠気も覚めて本を読んでいた。17時30分まで借りていたが、17時過ぎには撤収して軽く飲みに行った。9名中7名が参加してくれていろんなお話が聞けて楽しかった。コロナ禍前の勉強会の雰囲気に戻ってきた。&lt;/p>
&lt;p>会場は &lt;a href="https://www.instabase.jp/space/4940553005">スペースアイエレガンス飯田橋&lt;/a> という貸し会議室を借りた。10時00分から17時30分まで7.5時間借りて税込7,425円。他の貸し会議室に比べると安い方に分類される。ワンルームのマンションの一室を貸し会議室にアレンジしたような部屋で築年数は感覚的に15年以上は経っているのではないか。古い。机に向かって座れる定員が10人。パイプ椅子が4つ置いてあって座れる定員は14名。部屋はやや窮屈で机に10人が向かって座るといっぱいいっぱい。3人掛けの机は間を空けて2人で座るのがよさそうにみえた。快適にもくもく会をするなら8人の定員が望ましい。トイレは普通。wifi の速度は200Mbps程度で十分に速かったし、8人接続していても安定していた。エアコンも普通かな。部屋が狭さに対してエアコンは有効で寒いということはなかった。&lt;/p>
&lt;h2 id="フリーランス４０歳の壁">フリーランス、４０歳の壁&lt;/h2>
&lt;p>&lt;a href="https://www.diamond.co.jp/book/9784478065723.html">フリーランス、４０歳の壁&lt;/a> の後半を読んだ。&lt;/p>
&lt;ul>
&lt;li>「第8章 都築響一 還暦を迎えても奔放なフリー人生。」&lt;/li>
&lt;li>「第9章 フリーランスの上がりとしての創業社長。」&lt;/li>
&lt;/ul>
&lt;p>都築氏は1956年生まれて私よりも2周り近く上なのでさらに昔に活躍された方のようだ。
現場主義な方で実際に起こっている事実を観察して自分なりの解釈や判断でフリーランスとして活躍された方のようにみえる。本書に出てくるフリーランスの方々は私からみてあまりピンと来なかったのだけど、この方の生き方や考え方がもっとも私に近くて参考になった。&lt;/p>
&lt;blockquote>
&lt;p>編集者と作家を兼ねるこういう仕事スタイルをとる人を、私は「編集家」と呼んでおり、自分自身の肩書きにも使っています。都築響一さんは、私の定義を完全に満たした「編集家」です。&lt;/p>
&lt;/blockquote>
&lt;p>やりたいことがあれば自分で試してみて試行錯誤しながらやっていく雰囲気を感じる。都築氏は仕事で大変なことはあったが、壁には当たったことはないという。ある歳を境に仕事が減ることもあったそうだけど、ネットが年齢差や対面でのお仕事を不要にしたという。&lt;/p>
&lt;blockquote>
&lt;p>僕は、過去に仕事が途絶えることもありましたが、壁だとは思いませんでした。仕事がない時期にこそ、はじめて自分にとって大切なもの、必要でないものが見極められるんです。そのときは大変でも、後になってみたら、立ち止まって考える時期を持つことは大切かもしれません。&lt;/p>
&lt;/blockquote>
&lt;p>こういう考え方も私の好み。ピンチはチャンス。&lt;/p>
&lt;blockquote>
&lt;p>「違いますね。（大手は）給料が良すぎるっていう、それだけが問題なんですよ。その若い社員編集者も、会社に不満があるのなら、辞めて自分の会社を作れば良いんです。でも、高い給料を捨ててまで自分の道を貫こうという気迫がない。僕もいまの出版界に不満はありますよ。だからこそいまの僕は、自分で直販の道を探して、メディアを作っているわけです。」&lt;/p>
&lt;/blockquote>
&lt;p>若い編集者が上司の愚痴を昔とは時代が違うとこぼしているのに対する答え。もともと会社に頼っていない人間だからこそこういう考え方ができる。私も不満があれば区切りのよいところで会社を辞めてきた人間なのでこういう姿勢も似ている。ググるとインタビュー記事をみかけたのでまた後で読んでみようと思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://baycrews.jp/feature/detail/5893">普遍、あるいは洗練について。&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>最後の章は著者が会社を作ったときの話し。最初の起業は大失敗したものの、なんやらかんやらでなんとかなってますといった雰囲気。著者は会社員はできなくても社長ならできるという。創業社長には発達障害だと思われる人がたくさんいるとも書いている。これは流石にバイアスが強過ぎると思う。会社を作ることは誰でもできるが、ある程度長く会社を存続できる人は少ないし、その続けられている人の割合に発達障害と思われる人はずっと少ないと思う。たまたまそういう属性の人が活躍すると有名になるだけで多くの創業社長は普通の人だと思う。一方で橘玲氏の本にもよく出てくる話しだが、日本は解雇規制がために中途採用の敷居がとても高いため、経歴がよくない人は年齢とともに転職がとても難しい。そんな経歴のよくない人でも会社は作れて、取引は法人を介して行われるので個人の経歴を隠蔽もしくはリセットできるという側面をもっている。だからフリーランスの上がりが創業社長なのではなく、経歴の悪い人が最後に働く手段が創業社長なのだと私は認識している。&lt;/p>
&lt;p>期待した内容ではなかったものの、賛否も含めて示唆に富む本だったと思う。また余裕があれば書評をブログの記事として書こうと思う。&lt;/p></content></item><item><title>出張前日の準備</title><link>/diary/posts/2023/0108/</link><pubDate>Sun, 08 Jan 2023 15:58:33 +0900</pubDate><guid>/diary/posts/2023/0108/</guid><description>1時に寝て8時に起きた。午前中は洗濯して普通にだらだらしてた。
課題管理勉強会の資料作り 12月から読み始めた Gergely Orosz 氏の記事 をベースに来週の勉強会の資料を作った。もう少し推敲はするが、スライドで全32枚になった。ブログ記事の内容を解説するスライドなので文字が多い。1時間の枠には十分に耐えそう。この資料と前回の勉強会の資料の2つを知人とオンライン飲み会するときの話しのつまみに使う。毎月、課題管理の文脈で勉強会を行う労力はそこそこあるけれど、コンテンツが溜まっていくのは未来への投資になるので困ることは何もない。課題管理の勉強会があるという機会そのものに感謝する。
フリーランス、４０歳の壁 フリーランス、４０歳の壁 の中盤を読んだ。
「第5章 田中圭一 サラリーマンとマンガ家を両立させる男。」 「第6章 『電脳マヴォ』と私の未来。」 「第7章 FROGMAN アニメ界の革命児が直面した「30歳の壁」。」 平日はサラリーマンで営業として働き、休日を利用してマンガを描くという働き方を30年以上している田中圭一さんのインタビューがある。30年以上と聞くとすごいことでその実績は否定しようがないと素直に思う。一方でうちは兼業農家だったので平日はサラリーマン、休日に農業をするのは普通だった。父はその生活を42年間していた。またうつ病になった経緯のエピソードがある。ある会社に転職して最初のうちはうまくいったが、5年目ぐらいで行き詰まってしまった。技術系の会社でプログラミングを学ばないといけないという空気があったらしい。会社の仕事があわないと田中氏は思いつつも転職する自信をもてず、そのまま10年いてうつ病になってしまったとのこと。これが3ヶ月だったら大変だったんだなと思う。しかし、厳しい言い方だけど、行き詰まりは仕方ないとしても5年もなにも対策しなかったの？と私なら思ってしまう。ここだけ読むと未知のことやスキル不足を勉強しない人の典型例だと思えてしまった。本業で成果を出せていないのに転職できないから会社に残り続ける人たちを私も少なからずみてきた。助言や提案をしても、例外なく、そういう人たちはできない理由を熱心に説明し、自ら努力してスキルを習得しようとはしなかった。できる・できない以前にやろうともしなかったのをみてきた。
著者が運営している 電脳マヴォ という web マンガのサイトがある。たまたまリンクをみつけた 良い祖母と孫の話 を読んでみたら衝撃をうけた。こういう才能がたくさん埋もれているというのは理解できる。一方で漫画を描くことが以前よりも一般化したのだとも私は思う。どんな業界も人気が出たり市場規模が大きくなるにつれその創作者人口は増える。電脳マヴォを創刊したのが2012年だったらしく、奇しくもその頃が「ネットマンガ元年」と呼べるらしい。となりのヤングジャンプ や マンガボックス など、私が知っている web マンガのサービスも出てくる。
フリーランスの最大の営業は、仕事そのものです。 版元編集者は、そのフリーが実際に行った仕事を見て、次の仕事を発注するのです。向こうから来る仕事であれば、意に沿わない仕事は、断ることもできます。持ち込みだと、まさかこちらから断るわけにはいきません。
この考え方は私も同意する。取り引きをしている会社とのお仕事を高い品質で行うことがもっとも重要だと私も考えている。
FROGMAN さんという方を私はまったく知らなかったけれど、インターネットの黎明期 (2000年頃) に動画配信サービスをやろうとして FLASH アニメで一山当てた実業家らしい。その経歴も破天荒にみえる。もともと映画業界で働いていて、映画業界の没落とともに半ば強制的にフリーランス (リストラ) となり、業界としての先行きは不透明だった。島根の山奥に移住し、インターネットに動画を配信する仕事なら島根でもできるだろうと考えたとのこと。これを2000年頃に実施しているのだから素晴らしい先見性と言える。その延長でアニメ制作をするにいたったのも、奥さんが妊娠して出産費用が必要となり、1人で仕事を完遂できればコスト削減できるというアイディアでアニメ制作を始めたとのこと。実写は最低でも数人のスタッフを必要とするが、アニメなら1人でできるのではないか。実際に初期のインターネットの FLASH アニメを1人で作って人気を博して事業が軌道になったらしい。スポンサーを募らず、徹底したコスト意識から権利をスポンサーに渡さないことを意識していた。2006年頃に youtube が台頭したときも、他のアニメ会社が映像を勝手にあげられるのを嫌ったのに対して、FROGMAN さんの会社は自分たちが権利をもっているので自分たちの作品を率先して配信し、時流にも乗ったようにみえる。FROGMAN さんは絵もろくに描いたことがなく、アニメマニアでもないにも関わらず、まさにビジネスモデルの勝利と言える。また実写業界での経験があったから普通のアニメ会社が作るようなアニメとは異なる作品を作り、アニメ落語・アニメ漫才というジャンルそのものを作ってしまったという。きっかけは家賃を半年間滞納して出産費用を捻出するためという、ピンチをチャンスに変えた事例の1つとして、また製作委員会方式というアニメ業界のモデルとは異なるビジネスモデルを考案して実現してしまったところもサクセスストーリーとして痛快に読めた。</description><content>&lt;p>1時に寝て8時に起きた。午前中は洗濯して普通にだらだらしてた。&lt;/p>
&lt;h2 id="課題管理勉強会の資料作り">課題管理勉強会の資料作り&lt;/h2>
&lt;p>12月から読み始めた &lt;a href="/diary/diary/posts/2023/0102/#ビッグテックの技術系プロジェクトのマネジメント方法と興味深いスクラムの不採用">Gergely Orosz 氏の記事&lt;/a> をベースに来週の勉強会の資料を作った。もう少し推敲はするが、スライドで全32枚になった。ブログ記事の内容を解説するスライドなので文字が多い。1時間の枠には十分に耐えそう。この資料と前回の勉強会の資料の2つを知人とオンライン飲み会するときの話しのつまみに使う。毎月、課題管理の文脈で勉強会を行う労力はそこそこあるけれど、コンテンツが溜まっていくのは未来への投資になるので困ることは何もない。課題管理の勉強会があるという機会そのものに感謝する。&lt;/p>
&lt;h2 id="フリーランス４０歳の壁">フリーランス、４０歳の壁&lt;/h2>
&lt;p>&lt;a href="https://www.diamond.co.jp/book/9784478065723.html">フリーランス、４０歳の壁&lt;/a> の中盤を読んだ。&lt;/p>
&lt;ul>
&lt;li>「第5章 田中圭一 サラリーマンとマンガ家を両立させる男。」&lt;/li>
&lt;li>「第6章 『電脳マヴォ』と私の未来。」&lt;/li>
&lt;li>「第7章 FROGMAN アニメ界の革命児が直面した「30歳の壁」。」&lt;/li>
&lt;/ul>
&lt;p>平日はサラリーマンで営業として働き、休日を利用してマンガを描くという働き方を30年以上している田中圭一さんのインタビューがある。30年以上と聞くとすごいことでその実績は否定しようがないと素直に思う。一方でうちは兼業農家だったので平日はサラリーマン、休日に農業をするのは普通だった。父はその生活を42年間していた。またうつ病になった経緯のエピソードがある。ある会社に転職して最初のうちはうまくいったが、5年目ぐらいで行き詰まってしまった。技術系の会社でプログラミングを学ばないといけないという空気があったらしい。会社の仕事があわないと田中氏は思いつつも転職する自信をもてず、そのまま10年いてうつ病になってしまったとのこと。これが3ヶ月だったら大変だったんだなと思う。しかし、厳しい言い方だけど、行き詰まりは仕方ないとしても5年もなにも対策しなかったの？と私なら思ってしまう。ここだけ読むと未知のことやスキル不足を勉強しない人の典型例だと思えてしまった。本業で成果を出せていないのに転職できないから会社に残り続ける人たちを私も少なからずみてきた。助言や提案をしても、例外なく、そういう人たちはできない理由を熱心に説明し、自ら努力してスキルを習得しようとはしなかった。できる・できない以前にやろうともしなかったのをみてきた。&lt;/p>
&lt;p>著者が運営している &lt;a href="https://mavo.takekuma.jp/">電脳マヴォ&lt;/a> という web マンガのサイトがある。たまたまリンクをみつけた &lt;a href="https://mavo.takekuma.jp/title.php?title=48">良い祖母と孫の話&lt;/a> を読んでみたら衝撃をうけた。こういう才能がたくさん埋もれているというのは理解できる。一方で漫画を描くことが以前よりも一般化したのだとも私は思う。どんな業界も人気が出たり市場規模が大きくなるにつれその創作者人口は増える。電脳マヴォを創刊したのが2012年だったらしく、奇しくもその頃が「ネットマンガ元年」と呼べるらしい。&lt;a href="https://tonarinoyj.jp/">となりのヤングジャンプ&lt;/a> や &lt;a href="https://www.mangabox.me/">マンガボックス&lt;/a> など、私が知っている web マンガのサービスも出てくる。&lt;/p>
&lt;blockquote>
&lt;p>フリーランスの最大の営業は、仕事そのものです。 版元編集者は、そのフリーが実際に行った仕事を見て、次の仕事を発注するのです。向こうから来る仕事であれば、意に沿わない仕事は、断ることもできます。持ち込みだと、まさかこちらから断るわけにはいきません。&lt;/p>
&lt;/blockquote>
&lt;p>この考え方は私も同意する。取り引きをしている会社とのお仕事を高い品質で行うことがもっとも重要だと私も考えている。&lt;/p>
&lt;p>FROGMAN さんという方を私はまったく知らなかったけれど、インターネットの黎明期 (2000年頃) に動画配信サービスをやろうとして FLASH アニメで一山当てた実業家らしい。その経歴も破天荒にみえる。もともと映画業界で働いていて、映画業界の没落とともに半ば強制的にフリーランス (リストラ) となり、業界としての先行きは不透明だった。島根の山奥に移住し、インターネットに動画を配信する仕事なら島根でもできるだろうと考えたとのこと。これを2000年頃に実施しているのだから素晴らしい先見性と言える。その延長でアニメ制作をするにいたったのも、奥さんが妊娠して出産費用が必要となり、1人で仕事を完遂できればコスト削減できるというアイディアでアニメ制作を始めたとのこと。実写は最低でも数人のスタッフを必要とするが、アニメなら1人でできるのではないか。実際に初期のインターネットの FLASH アニメを1人で作って人気を博して事業が軌道になったらしい。スポンサーを募らず、徹底したコスト意識から権利をスポンサーに渡さないことを意識していた。2006年頃に youtube が台頭したときも、他のアニメ会社が映像を勝手にあげられるのを嫌ったのに対して、FROGMAN さんの会社は自分たちが権利をもっているので自分たちの作品を率先して配信し、時流にも乗ったようにみえる。FROGMAN さんは絵もろくに描いたことがなく、アニメマニアでもないにも関わらず、まさにビジネスモデルの勝利と言える。また実写業界での経験があったから普通のアニメ会社が作るようなアニメとは異なる作品を作り、アニメ落語・アニメ漫才というジャンルそのものを作ってしまったという。きっかけは家賃を半年間滞納して出産費用を捻出するためという、ピンチをチャンスに変えた事例の1つとして、また製作委員会方式というアニメ業界のモデルとは異なるビジネスモデルを考案して実現してしまったところもサクセスストーリーとして痛快に読めた。&lt;/p></content></item><item><title>フリーランスの壁は普通の人にとってはあまり高くない</title><link>/diary/posts/2023/0107/</link><pubDate>Sat, 07 Jan 2023 11:55:37 +0900</pubDate><guid>/diary/posts/2023/0107/</guid><description>1時に寝て7時に起きた。夜遅くに晩ご飯を食べて気付いたら寝てた。
ストレッチ 今日の開脚幅は開始前154cmで、ストレッチ後160cmだった。年末の葬儀で不摂生、且つ身体に負担のかかる状態で3日間を過ごし、その影響で腰や右足周りに負荷がかかっていた。それは正月明けからもあまり予後がよくないなと思いながら過ごしていた。年末はストレッチを1回休みで2週間ぶりに行った。懸念しているところはトレーナーさんからみてもあまりよくないということでいつも通りストレッチで伸ばしてもらって少し楽になった。一方で正月明けはあちこちお出かけして平時よりも歩く機会が多かったので運動量は多く健康的な生活を送っていた側面もある。悪いことばかりでもない。来週は東京出張が控えていて体調がよくなるか悪くなるか、まだなんとも言えない見通しではある。
フリーランス、４０歳の壁 フリーランス、４０歳の壁 の前半を読んだ。
「第1章 自由業者フリーランス・40歳の壁。」 「第2章 とみさわ昭仁 「好き」を貫く代償。」 「第3章 杉森昌武 フリーランスとは自分で選択する生き方のこと。」 「第4章 50歳の壁はさらに高い。」 1980年代からのそれぞれのフリーランスの半生を紹介している。いまとは時代の違いがあるため、理解が難しい状況や雰囲気などもある。大雑把に言えば、人生の落伍者の半生、そういった人たちがやってくれたのは時代背景とフリーランスという生き方だったからだといった切り口で展開される。普通のサラリーマンとして働きつつ組織に馴染めずに辞めてきた私とはまったく相容れない生き様や考え方があって素直に受け入れ難い内容ではある。まったく生き様が異なるのに、読んでいていくつか共通項を見いだせるのは、ひとえに組織や集団に馴染まないという性格や特性によるものだと思える。彼らも私も、自分自身が納得いかない論理や仕事をずっと続けられないという点で合致している。それが生活の先行きを不透明にしていても。
ここまで読み進めて40歳の壁も50歳の壁も、一般人の感覚からしたら壁でもなんでもない。著者は恵まれた環境が与えられているにも関わらず、自らがその環境を投げ出し辞めていて、それを壁があるからと表現しているに過ぎない。身勝手で努力不足にもみえるが、全力で擁護するとしたら、組織に馴染まない人間はそうせざるを得なくて他の選択肢などない。だから壁に突き当たってしまうという主旨に読める。
参考になる内容や共通項はあるのでいくつか引用してみる。
そこで浦沢さんはまず「戦略的に」受けを狙って『ＹＡＷＡＲＡ！』をヒットさせ、圧倒的な実績を築き上げることで、「描きたい作品が描ける」作家に自分を鍛え上げたと言えます。これは誰もが考えますが、実現は至難の技です。私はあそこまで商業作家としての戦略を立て、実行し、成功した作家を見たことがありません。作家はつい「自分の描きたいものを描くんだ！」と思いがちですが、 プロ作家として成功するためには、自分の苦手なものでも描かなければならないことがあるのです。芸術家肌の作家と、プロ作家は違います。浦沢さんは、ほんもののプロ作家だと私は思います。
浦沢直樹 さんの凄さを説明している。浦沢さんはもともとデビューして「MONSTAR」のような作品を描きたかったが、新人が描くには編集者の反応は芳しくなかったという。そこで苦手だったが、当時流行りの美少女ものを選び、「YAWARA!」「HAPPY!」とヒットさせることで人気を盤石にした上で本当に描きたかった「MONSTAR」に取り組めたという。it 業界で例えたら、受託開発でお金を稼いでいつか自社プロダクトまたは自社サービスを提供したいと考える会社はたくさんあれど、それで成功している会社は本当に少ない。まさに誰でも考えるが実現は至難と言える。
フリーにとっての40代は、自分の「マンネリズム」との戦いだと言えるかもしれません。 作家を含めたフリーランスは、ふたつのタイプに分けられると思います。 ひとつのパターンの仕事をえんえんと続けることができる「職人タイプ」と、つねに新しいテーマや手法を開拓しようとする「芸術家タイプ」です。 もちろんどちらのタイプにも勉強・研鑽が必要になります。
フリーランスに限らずサラリーマンも同じだと思う。40代は出世競争の結果が出てから敗れた人たちがどう生きていくのかに近いものがある。私はわりと両方の特性がある方な気がするけど、どちらかを選べば「芸術家タイプ」なんだろうと思う。
少なくとも 私は、ブログを書き続けたことで、40歳以降におちいっていたスランプから脱出することができました。
この一文に関心を示す人とそうではない人に分かれると思う。まだ論理的に説明できないが、私は書くことをずっと続けることに大きな意義と実利があると考えている。書くことをやめた人たちが悲惨な状況に陥っているのをみかけることもたまにある。私も日記を書き続けて人生が安定したように考えている。日記を書くことに時間を取られる分、個々の業務のパフォーマンスは下がっているけれど、人間としてのパフォーマンスが安定するようになった。まだ感覚的にしか表現できない。
私にとっては、お金より、やりたいことがやりたいようにできるかが大事で、それができなかったら、仕事をなげうってしまうのです。その後、どうなるかなんておかまいなし。後悔もしません。
この一文も共感できる人とそうではない人に分かれると思う。私はまったく共感できる。</description><content>&lt;p>1時に寝て7時に起きた。夜遅くに晩ご飯を食べて気付いたら寝てた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前154cmで、ストレッチ後160cmだった。年末の葬儀で不摂生、且つ身体に負担のかかる状態で3日間を過ごし、その影響で腰や右足周りに負荷がかかっていた。それは正月明けからもあまり予後がよくないなと思いながら過ごしていた。年末はストレッチを1回休みで2週間ぶりに行った。懸念しているところはトレーナーさんからみてもあまりよくないということでいつも通りストレッチで伸ばしてもらって少し楽になった。一方で正月明けはあちこちお出かけして平時よりも歩く機会が多かったので運動量は多く健康的な生活を送っていた側面もある。悪いことばかりでもない。来週は東京出張が控えていて体調がよくなるか悪くなるか、まだなんとも言えない見通しではある。&lt;/p>
&lt;h2 id="フリーランス４０歳の壁">フリーランス、４０歳の壁&lt;/h2>
&lt;p>&lt;a href="https://www.diamond.co.jp/book/9784478065723.html">フリーランス、４０歳の壁&lt;/a> の前半を読んだ。&lt;/p>
&lt;ul>
&lt;li>「第1章 自由業者フリーランス・40歳の壁。」&lt;/li>
&lt;li>「第2章 とみさわ昭仁 「好き」を貫く代償。」&lt;/li>
&lt;li>「第3章 杉森昌武 フリーランスとは自分で選択する生き方のこと。」&lt;/li>
&lt;li>「第4章 50歳の壁はさらに高い。」&lt;/li>
&lt;/ul>
&lt;p>1980年代からのそれぞれのフリーランスの半生を紹介している。いまとは時代の違いがあるため、理解が難しい状況や雰囲気などもある。大雑把に言えば、人生の落伍者の半生、そういった人たちがやってくれたのは時代背景とフリーランスという生き方だったからだといった切り口で展開される。普通のサラリーマンとして働きつつ組織に馴染めずに辞めてきた私とはまったく相容れない生き様や考え方があって素直に受け入れ難い内容ではある。まったく生き様が異なるのに、読んでいていくつか共通項を見いだせるのは、ひとえに組織や集団に馴染まないという性格や特性によるものだと思える。彼らも私も、自分自身が納得いかない論理や仕事をずっと続けられないという点で合致している。それが生活の先行きを不透明にしていても。&lt;/p>
&lt;p>ここまで読み進めて40歳の壁も50歳の壁も、一般人の感覚からしたら壁でもなんでもない。著者は恵まれた環境が与えられているにも関わらず、自らがその環境を投げ出し辞めていて、それを壁があるからと表現しているに過ぎない。身勝手で努力不足にもみえるが、全力で擁護するとしたら、組織に馴染まない人間はそうせざるを得なくて他の選択肢などない。だから壁に突き当たってしまうという主旨に読める。&lt;/p>
&lt;p>参考になる内容や共通項はあるのでいくつか引用してみる。&lt;/p>
&lt;blockquote>
&lt;p>そこで浦沢さんはまず「戦略的に」受けを狙って『ＹＡＷＡＲＡ！』をヒットさせ、圧倒的な実績を築き上げることで、「描きたい作品が描ける」作家に自分を鍛え上げたと言えます。これは誰もが考えますが、実現は至難の技です。私はあそこまで商業作家としての戦略を立て、実行し、成功した作家を見たことがありません。作家はつい「自分の描きたいものを描くんだ！」と思いがちですが、 プロ作家として成功するためには、自分の苦手なものでも描かなければならないことがあるのです。芸術家肌の作家と、プロ作家は違います。浦沢さんは、ほんもののプロ作家だと私は思います。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://ja.wikipedia.org/wiki/%E6%B5%A6%E6%B2%A2%E7%9B%B4%E6%A8%B9">浦沢直樹&lt;/a> さんの凄さを説明している。浦沢さんはもともとデビューして「MONSTAR」のような作品を描きたかったが、新人が描くには編集者の反応は芳しくなかったという。そこで苦手だったが、当時流行りの美少女ものを選び、「YAWARA!」「HAPPY!」とヒットさせることで人気を盤石にした上で本当に描きたかった「MONSTAR」に取り組めたという。it 業界で例えたら、受託開発でお金を稼いでいつか自社プロダクトまたは自社サービスを提供したいと考える会社はたくさんあれど、それで成功している会社は本当に少ない。まさに誰でも考えるが実現は至難と言える。&lt;/p>
&lt;blockquote>
&lt;p>フリーにとっての40代は、自分の「マンネリズム」との戦いだと言えるかもしれません。 作家を含めたフリーランスは、ふたつのタイプに分けられると思います。 ひとつのパターンの仕事をえんえんと続けることができる「職人タイプ」と、つねに新しいテーマや手法を開拓しようとする「芸術家タイプ」です。 もちろんどちらのタイプにも勉強・研鑽が必要になります。&lt;/p>
&lt;/blockquote>
&lt;p>フリーランスに限らずサラリーマンも同じだと思う。40代は出世競争の結果が出てから敗れた人たちがどう生きていくのかに近いものがある。私はわりと両方の特性がある方な気がするけど、どちらかを選べば「芸術家タイプ」なんだろうと思う。&lt;/p>
&lt;blockquote>
&lt;p>少なくとも 私は、ブログを書き続けたことで、40歳以降におちいっていたスランプから脱出することができました。&lt;/p>
&lt;/blockquote>
&lt;p>この一文に関心を示す人とそうではない人に分かれると思う。まだ論理的に説明できないが、私は書くことをずっと続けることに大きな意義と実利があると考えている。書くことをやめた人たちが悲惨な状況に陥っているのをみかけることもたまにある。私も日記を書き続けて人生が安定したように考えている。日記を書くことに時間を取られる分、個々の業務のパフォーマンスは下がっているけれど、人間としてのパフォーマンスが安定するようになった。まだ感覚的にしか表現できない。&lt;/p>
&lt;blockquote>
&lt;p>私にとっては、お金より、やりたいことがやりたいようにできるかが大事で、それができなかったら、仕事をなげうってしまうのです。その後、どうなるかなんておかまいなし。後悔もしません。&lt;/p>
&lt;/blockquote>
&lt;p>この一文も共感できる人とそうではない人に分かれると思う。私はまったく共感できる。&lt;/p></content></item><item><title>50歳の壁に備えて</title><link>/diary/posts/2022/1224/</link><pubDate>Sat, 24 Dec 2022 12:31:43 +0900</pubDate><guid>/diary/posts/2022/1224/</guid><description>昨日は寒さに耐えかねて今冬で初めて暖房を入れて寝た。お腹を冷やさなかったので効果はあったように思う。寒過ぎる。22時頃から寝て2時に起きて5時ぐらいまでだらだらして7時に起きた。最近気になるのは寝ていたら吐き気がして苦しむ日が多い。朝と昼は平気なのに眠るのが大変。
ストレッチ 今日の開脚幅は開始前153cmで、ストレッチ後156cmだった。やはり先週とほぼ変わらず。急に寒くなって体調を落としているのもある。筋肉の状態も右太もも周りの張りや違和感と右腰の張りが依然として強い。よい・わるいで言ったら明らかに状態はわるい。今週はそんなにハードには働いていないし早く帰って休む時間も多めに取ろうと努めたものの、夜に吐き気で眠れないという苦しみがそのまま筋肉に表れているのではないかとすら思えてくる。それぐらい眠れない。歳とるとそんなもんなのかなぁ。
フリーランス、４０歳の壁 はらさんがお勧めしていたので フリーランス、４０歳の壁 を読み始めた。「序章 フリーランスは自由という名の業である。」を読んだ。
本書で取り扱う「自由業」は、著述作家業を中心とした「表現業者」のことです。
プログラマーは「モノ作り」よりも「モノ書き」に近いという言葉もあるように、大きな枠組みでは表現と呼べるかもしれないけど、どうやら本書の著者はフリーライターという職業らしい。
自由業者には2種類あると思います。 自由業に「なる」人と、「ならざるを得ない」人 です。
前者は会社員をやりながら余暇で作品を創り、十分な経験を積んでフリーになる人。後者は、さしたる経験も実績もなくフリーに「なってしまう」人。
序章を読み始めた冒頭では私は自由業にならざるを得ない方の人かなと思って読み進めていた。しかし、序章全体を読み終えると、普通の会社勤めの働き方にあわせられない人を「ならざるを得ない」人と表現しているようにみえる。そこまでのアンマッチはないという視点から言うと、私は前者になってしまう。けれども、なにか引っ掛かっているところもある。40歳のとき働いていた会社で早期退職制度が設けられ、私も50歳になったらそれで辞めてくださいと言われる未来がリアルにみえた。周りに疎まれながら会社にしがみついて養ってもらうといった生き方は私には向いていない気がする。それはプライドがどうこうではなく、私にとってそんな人生を楽しめるようには思えなかった。だから私は辞めるしかなかったし、自分で仕事を創っていくしかないと決めた。もちろん社会人として20年ほど働いた実績はあったけれど、会社経営の経験はなかったし、会社をやっていく展望も準備もなにもなかった。まさに無計画にいきなりフリーにならざるを得なかったという表現が腑に落ちた。
私は、なんとなくなれてしまう自由業者は気楽な仕事、と言いたいのではありません。その反対で、こういう人は年とともに「壁」にぶつかる率が高いと言いたいのです。30歳・40歳・50歳の節目ごとに壁は襲ってきます。10年経るごとに、壁は大きく、厚くなります。それでも人間は生きていかねばなりません。
50歳という節目に私はどんなお仕事をしているのか、現時点ではまったく想像がつかない。一方で著者は自由業にならざるを得なかった人には大きな壁があると説いている。はらさんと話していても50代は単価を下げられるという話しはよく聞く。今後の働き方への戒めとして読んでおくのもよさそうに思える。</description><content>&lt;p>昨日は寒さに耐えかねて今冬で初めて暖房を入れて寝た。お腹を冷やさなかったので効果はあったように思う。寒過ぎる。22時頃から寝て2時に起きて5時ぐらいまでだらだらして7時に起きた。最近気になるのは寝ていたら吐き気がして苦しむ日が多い。朝と昼は平気なのに眠るのが大変。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前153cmで、ストレッチ後156cmだった。やはり先週とほぼ変わらず。急に寒くなって体調を落としているのもある。筋肉の状態も右太もも周りの張りや違和感と右腰の張りが依然として強い。よい・わるいで言ったら明らかに状態はわるい。今週はそんなにハードには働いていないし早く帰って休む時間も多めに取ろうと努めたものの、夜に吐き気で眠れないという苦しみがそのまま筋肉に表れているのではないかとすら思えてくる。それぐらい眠れない。歳とるとそんなもんなのかなぁ。&lt;/p>
&lt;h2 id="フリーランス４０歳の壁">フリーランス、４０歳の壁&lt;/h2>
&lt;p>はらさんがお勧めしていたので &lt;a href="https://www.diamond.co.jp/book/9784478065723.html">フリーランス、４０歳の壁&lt;/a> を読み始めた。「序章 フリーランスは自由という名の業である。」を読んだ。&lt;/p>
&lt;blockquote>
&lt;p>本書で取り扱う「自由業」は、著述作家業を中心とした「表現業者」のことです。&lt;/p>
&lt;/blockquote>
&lt;p>プログラマーは「モノ作り」よりも「モノ書き」に近いという言葉もあるように、大きな枠組みでは表現と呼べるかもしれないけど、どうやら本書の著者はフリーライターという職業らしい。&lt;/p>
&lt;blockquote>
&lt;p>自由業者には2種類あると思います。 &lt;strong>自由業に「なる」人と、「ならざるを得ない」人&lt;/strong> です。&lt;/p>
&lt;p>前者は会社員をやりながら余暇で作品を創り、十分な経験を積んでフリーになる人。後者は、さしたる経験も実績もなくフリーに「なってしまう」人。&lt;/p>
&lt;/blockquote>
&lt;p>序章を読み始めた冒頭では私は自由業にならざるを得ない方の人かなと思って読み進めていた。しかし、序章全体を読み終えると、普通の会社勤めの働き方にあわせられない人を「ならざるを得ない」人と表現しているようにみえる。そこまでのアンマッチはないという視点から言うと、私は前者になってしまう。けれども、なにか引っ掛かっているところもある。40歳のとき働いていた会社で早期退職制度が設けられ、私も50歳になったらそれで辞めてくださいと言われる未来がリアルにみえた。周りに疎まれながら会社にしがみついて養ってもらうといった生き方は私には向いていない気がする。それはプライドがどうこうではなく、私にとってそんな人生を楽しめるようには思えなかった。だから私は辞めるしかなかったし、自分で仕事を創っていくしかないと決めた。もちろん社会人として20年ほど働いた実績はあったけれど、会社経営の経験はなかったし、会社をやっていく展望も準備もなにもなかった。まさに無計画にいきなりフリーにならざるを得なかったという表現が腑に落ちた。&lt;/p>
&lt;blockquote>
&lt;p>私は、なんとなくなれてしまう自由業者は気楽な仕事、と言いたいのではありません。その反対で、こういう人は年とともに「壁」にぶつかる率が高いと言いたいのです。30歳・40歳・50歳の節目ごとに壁は襲ってきます。10年経るごとに、壁は大きく、厚くなります。それでも人間は生きていかねばなりません。&lt;/p>
&lt;/blockquote>
&lt;p>50歳という節目に私はどんなお仕事をしているのか、現時点ではまったく想像がつかない。一方で著者は自由業にならざるを得なかった人には大きな壁があると説いている。はらさんと話していても50代は単価を下げられるという話しはよく聞く。今後の働き方への戒めとして読んでおくのもよさそうに思える。&lt;/p></content></item><item><title>go の nil を学び直し</title><link>/diary/posts/2022/1112/</link><pubDate>Sat, 12 Nov 2022 11:48:05 +0900</pubDate><guid>/diary/posts/2022/1112/</guid><description>3時半から起きていたせいか夕方に眠くなって19時過ぎから23時まで寝て、それからまたオフィス行って4時ぐらいまで作業してから戻って寝て8時半に起きた。生活がめちゃくちゃ。
ストレッチ 今日の開脚幅は開始前154cmで、ストレッチ後158cmだった。生活が不規則になって体力的にバテているのもあって右股関節、右腰の張りが強かった。さらに加えてふくらはぎ、腕と全身的にいつもより張りがあるように感じた。トレーナーさんが言うには座っている時間がいつもの週より多かったならその分だけ筋肉が固まってしまう可能性はあるとのこと。先週の東京出張から帰ってきて、リモート環境の構築、macbook 環境でメモをとった内容の見直し、リモートワークでマネージャー業をやるための準備や足りない知識の習得とか、さらに2つの社外イベントにも参加していたので普段の週よりも長い時間を机に向かって作業していたのは正しい。新しいお仕事を受けると一時的に仕事量の負荷が増える。それ自体は悪いことではないけれど、2-3ヶ月は余裕のない生活になりそうな気がする。毎週ストレッチがあるとそういった過労の疲労軽減に役立ってくれているので助かっている。
オンライン読書会 ずっと参加しようと思いつつ、都合があわなくて参加できていなかった 第4回『Go言語による分散サービス』オンライン読書会 に4回目にして初参加した。7.4 発見されたサービスにリクエストし、ログをレプリケーションする (130ページ) から 8.2.3 有限ステートマシーン (163ページ) まで読んだ。途中からなので過去の経緯はわからないものの、柴田さんが詳しく解説してくれるのでまったくついていけないということはならなかった。出てくるサンプルコードのスニペットからでも学ぶことは多々ある。effective java 読書会に参加してた人だと柴田さんに覚えていてもらっていて嬉しかった。おそらく参加者の記録を自前で管理されているようにみえた。
go でインターフェースを実装しているかを確認するイディオムとして次のような宣言がある。nil を任意の struct のポインタにキャストするのを試す。変数は _ を宣言しているので実際にはこのコードはなにも定義しない。
var _ mypkg.MyInterface = (*MyImplements)(nil) なぜこんなことができるのかは nil は nil という記事で解説されている。interface 型は型への参照と値への参照を属性にもつオブジェクトであり、そのゼロ値は nil である。interface 型の nil は型への参照をもっているから nil をキャストするといったコードを書ける。python や java のような言語で nil に相当する None や null といった primitive はキャストするといった概念はない。事実上のシングルトンと言ってよいはず。一方で go の nil は原則として型への参照 nil 且つ、値への参照も nil なものではあるが、interface 型のゼロ値を表すため、この例で言えば、型への参照として mypkg.MyInterface 且つ、値への参照が nil のオブジェクトを生成できる。シングルトンではない。つまり (*MyImplements)(nil) != nil となる。go の nil は他言語からみて特殊ということを知ってはいたんだけど、読書会に出てそのことを確認するサンプルコードをみつけたことで私の学び直しになった。感謝。</description><content>&lt;p>3時半から起きていたせいか夕方に眠くなって19時過ぎから23時まで寝て、それからまたオフィス行って4時ぐらいまで作業してから戻って寝て8時半に起きた。生活がめちゃくちゃ。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前154cmで、ストレッチ後158cmだった。生活が不規則になって体力的にバテているのもあって右股関節、右腰の張りが強かった。さらに加えてふくらはぎ、腕と全身的にいつもより張りがあるように感じた。トレーナーさんが言うには座っている時間がいつもの週より多かったならその分だけ筋肉が固まってしまう可能性はあるとのこと。先週の東京出張から帰ってきて、リモート環境の構築、macbook 環境でメモをとった内容の見直し、リモートワークでマネージャー業をやるための準備や足りない知識の習得とか、さらに2つの社外イベントにも参加していたので普段の週よりも長い時間を机に向かって作業していたのは正しい。新しいお仕事を受けると一時的に仕事量の負荷が増える。それ自体は悪いことではないけれど、2-3ヶ月は余裕のない生活になりそうな気がする。毎週ストレッチがあるとそういった過労の疲労軽減に役立ってくれているので助かっている。&lt;/p>
&lt;h2 id="オンライン読書会">オンライン読書会&lt;/h2>
&lt;p>ずっと参加しようと思いつつ、都合があわなくて参加できていなかった &lt;a href="https://technical-book-reading-2.connpass.com/event/262819/">第4回『Go言語による分散サービス』オンライン読書会&lt;/a> に4回目にして初参加した。7.4 発見されたサービスにリクエストし、ログをレプリケーションする (130ページ) から 8.2.3 有限ステートマシーン (163ページ) まで読んだ。途中からなので過去の経緯はわからないものの、柴田さんが詳しく解説してくれるのでまったくついていけないということはならなかった。出てくるサンプルコードのスニペットからでも学ぶことは多々ある。effective java 読書会に参加してた人だと柴田さんに覚えていてもらっていて嬉しかった。おそらく参加者の記録を自前で管理されているようにみえた。&lt;/p>
&lt;p>go でインターフェースを実装しているかを確認するイディオムとして次のような宣言がある。nil を任意の struct のポインタにキャストするのを試す。変数は _ を宣言しているので実際にはこのコードはなにも定義しない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#a6e22e">mypkg&lt;/span>.&lt;span style="color:#a6e22e">MyInterface&lt;/span> = (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">MyImplements&lt;/span>)(&lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>なぜこんなことができるのかは &lt;a href="https://text.baldanders.info/golang/nil-is-nil/">nil は nil&lt;/a> という記事で解説されている。interface 型は型への参照と値への参照を属性にもつオブジェクトであり、そのゼロ値は nil である。interface 型の nil は型への参照をもっているから nil をキャストするといったコードを書ける。python や java のような言語で nil に相当する None や null といった primitive はキャストするといった概念はない。事実上のシングルトンと言ってよいはず。一方で go の nil は原則として型への参照 nil 且つ、値への参照も nil なものではあるが、interface 型のゼロ値を表すため、この例で言えば、型への参照として mypkg.MyInterface 且つ、値への参照が nil のオブジェクトを生成できる。シングルトンではない。つまり &lt;code>(*MyImplements)(nil) != nil&lt;/code> となる。go の nil は他言語からみて特殊ということを知ってはいたんだけど、読書会に出てそのことを確認するサンプルコードをみつけたことで私の学び直しになった。感謝。&lt;/p>
&lt;p>ソースコードはここに置いた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gitlab.com/t2y/misc/-/tree/main/implements">https://gitlab.com/t2y/misc/-/tree/main/implements&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>メンタリングの学び直し</title><link>/diary/posts/2022/1106/</link><pubDate>Sun, 06 Nov 2022 12:55:08 +0900</pubDate><guid>/diary/posts/2022/1106/</guid><description>5時過ぎに寝て10時に起きた。出張で生活のリズムが狂ったまま。
2-1. メンタリングで相手の思考をリファクタリング エンジニアリング組織論への招待 のメンタリングの技術の章を読み直すことにした。3年前ぐらいに読んだのであまり覚えてない。私は管理職ではなかったし、若い人に口であれこれ言うのもハラスメントになる懸念から私の働き方をみて役に立つところを盗んでもらえればよいと考えていた。これまでメンタリングには関心がなかった。しかし、いまマネージャーとしての役割で臨む以上は最低限の基礎は抑えた上で取り組む必要があると考え方を改めた。今日は「2-1. メンタリングで相手の思考をリファクタリング」を読んだ。節を簡潔に要約してみる。
メンタリングとは、対話を通じて、思考の幅を広げ、その人の歪んだ認知を補正し、次の行動を促し、成長させる手法である。スキルなので誰でも習得できる。自ら問題を発見し解決することができる 自立型人材 を作るために、信頼関係の上に正のフィードバックループから 自己効力感 (self-efficiency) を与えられるように働きかける。次の条件を満たさないとメンターの言葉でメンティの行動を自ら変えるようにはならない。
謙虚: お互いに弱さをみせられる 経緯: お互いに敬意をもっている 信頼: お互いにメンティ (自身) の成長期待をもっている 自らいままでわからなかったことを理解した状況を 自己説得 と呼ぶ。他人が質問で促し、体験を伴い、行動の変化が発生しやすい。メンティが自己説得できる状態になるようメンターは対話で気付きを与えないといけない。悩むと考えるは違う。悩んでいるときは思考がぐるぐると巡り、もやもやした状態。非常に苦しい上に生産的でもない。一方で考えているときはメモ帳やホワイトボードなどに課題を書き出し、分解したり、抽象化したり、具体化したり、、、何かしら行動をとっている状態。次にとるべき行動がはっきりしていれば悩むことはない。メンティが行動できているかどうかを観察し、悩んでいるようならその背景を聞き出して、気付きを与えて考えている状態へ変えていく必要がある。
ストレッチ 今日の開脚幅は開始前154cmで、ストレッチ後159cmだった。東京出張であちこちガタがきていて全身に張りがあったように思う。生活や睡眠が不規則になったことによる疲労もそのままストレッチの窮屈さにつながっているように感じた。毎週ストレッチの機会があって本当に助かっている。ストレッチをした後は体が軽くなって疲労を軽減できているように思う。これまでたまにマッサージへ行って対応していたのが、毎週チェックして手入れできていることの価値がこういうときによくわかるようになってきた。</description><content>&lt;p>5時過ぎに寝て10時に起きた。出張で生活のリズムが狂ったまま。&lt;/p>
&lt;h2 id="2-1-メンタリングで相手の思考をリファクタリング">2-1. メンタリングで相手の思考をリファクタリング&lt;/h2>
&lt;p>&lt;a href="https://gihyo.jp/book/2018/978-4-7741-9605-3">エンジニアリング組織論への招待&lt;/a> のメンタリングの技術の章を読み直すことにした。3年前ぐらいに読んだのであまり覚えてない。私は管理職ではなかったし、若い人に口であれこれ言うのもハラスメントになる懸念から私の働き方をみて役に立つところを盗んでもらえればよいと考えていた。これまでメンタリングには関心がなかった。しかし、いまマネージャーとしての役割で臨む以上は最低限の基礎は抑えた上で取り組む必要があると考え方を改めた。今日は「2-1. メンタリングで相手の思考をリファクタリング」を読んだ。節を簡潔に要約してみる。&lt;/p>
&lt;blockquote>
&lt;p>メンタリングとは、対話を通じて、思考の幅を広げ、その人の歪んだ認知を補正し、次の行動を促し、成長させる手法である。スキルなので誰でも習得できる。自ら問題を発見し解決することができる &lt;strong>自立型人材&lt;/strong> を作るために、信頼関係の上に正のフィードバックループから &lt;strong>自己効力感 (self-efficiency)&lt;/strong> を与えられるように働きかける。次の条件を満たさないとメンターの言葉でメンティの行動を自ら変えるようにはならない。&lt;/p>
&lt;ul>
&lt;li>謙虚: お互いに弱さをみせられる&lt;/li>
&lt;li>経緯: お互いに敬意をもっている&lt;/li>
&lt;li>信頼: お互いにメンティ (自身) の成長期待をもっている&lt;/li>
&lt;/ul>
&lt;p>自らいままでわからなかったことを理解した状況を &lt;strong>自己説得&lt;/strong> と呼ぶ。他人が質問で促し、体験を伴い、行動の変化が発生しやすい。メンティが自己説得できる状態になるようメンターは対話で気付きを与えないといけない。悩むと考えるは違う。悩んでいるときは思考がぐるぐると巡り、もやもやした状態。非常に苦しい上に生産的でもない。一方で考えているときはメモ帳やホワイトボードなどに課題を書き出し、分解したり、抽象化したり、具体化したり、、、何かしら行動をとっている状態。次にとるべき行動がはっきりしていれば悩むことはない。メンティが行動できているかどうかを観察し、悩んでいるようならその背景を聞き出して、気付きを与えて考えている状態へ変えていく必要がある。&lt;/p>
&lt;/blockquote>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前154cmで、ストレッチ後159cmだった。東京出張であちこちガタがきていて全身に張りがあったように思う。生活や睡眠が不規則になったことによる疲労もそのままストレッチの窮屈さにつながっているように感じた。毎週ストレッチの機会があって本当に助かっている。ストレッチをした後は体が軽くなって疲労を軽減できているように思う。これまでたまにマッサージへ行って対応していたのが、毎週チェックして手入れできていることの価値がこういうときによくわかるようになってきた。&lt;/p></content></item><item><title>踊龍を学ぶ</title><link>/diary/posts/2022/1012/</link><pubDate>Wed, 12 Oct 2022 08:56:45 +0900</pubDate><guid>/diary/posts/2022/1012/</guid><description>0時に寝て3時に起きて6時に起きた。わりとよく眠れた。朝一でバグに気付いて慌てて修正したりしていた。
リーダーとしての易経 「第四段階 踊龍 龍が飛躍する時」を読んだ。
龍の成長過程を年齢に当てはめると、潜龍は10代、見龍が20代、君子終日乾乾すが30代とある。実際には第3段階は量から質を磨く時なので相対的に長くなる。20代後半から40代ぐらいとみてもよい。そうやって40代には実力が十分に備わっていると言える。踊龍から飛龍になれるかどうかは実力だけではなれない。ここで時、つまりは好機をとらえる必要がある。ここでいう時とは時・処・位の3つを指している。飛龍になるには早すぎても遅すぎてもダメだという。機と期と気を観ないといけない。観るというのは洞察力を指している。
機: 機会 期: 期日 気: 気運と兆し 志は変容したり、しぼんでいく。世の中の流れに押し流され、埋没してしまうこともある。志を失うと乾乾することも放棄して、やがて亢龍となり衰退していく。潜龍のときに抱いた志を持ち続けられていれば、龍の変遷過程を経てイメージが実際に実現できていて、踊龍で最終段階になっている。1つ1つのパーツが適所にはまり、描いてきた志のビジョンが明確になる。機が熟し時が満ちる。
いくつか分かるような分からないようなキーワードもあるし「兆しを観て適切な時に動け」と言われてもプラクティスというより精神論に近い。易経とは時の変化の法則性を理解して、人間が然るべき時を理解できるようにする学問ではあるが、一朝一夕ではないことが文章からわかる。それでもいくつか共感するところはあって、志とまで昇華しなくても思い付きでよいアイディアだと思ったことが1週間も経つとそう思わなくなったり、1ヶ月もするとやる気をなくしたりすることが私は多々ある。別の観点では、初期の挑戦というのは得てしてうまくいかない、いや大半が失敗する。余談だが本書の中に「潜龍用うるなかれ。」という言葉が出てくる。重用したり責任をもたせてはいけないとある。自分が潜龍だとしたら焦って早成を求めてはいけない。経験も実力もないこの時期にすべきことは志を抱くこと。
会社を始めて最初の2年で大きな失敗をしたときに課題管理を自社のビジネスにできないかと思い付いた。その後、3ヶ月間調べたり話したりして、その後1年間スクラム開発に勤しみ、そしてこれからプロダクトマネージャーとして実践する。決して順風満帆ではないが、たしかに時が変わり、やっていることも変わり続けている。そして、課題管理という分野における解像度は1年前よりも高くなった。易経の乾為天をフラクタルに考えるのは正しくないのかもしれないけど、製品開発のサイクルとみなしても理は通りそうな気もする。</description><content>&lt;p>0時に寝て3時に起きて6時に起きた。わりとよく眠れた。朝一でバグに気付いて慌てて修正したりしていた。&lt;/p>
&lt;h2 id="リーダーとしての易経">リーダーとしての易経&lt;/h2>
&lt;p>「第四段階 踊龍 龍が飛躍する時」を読んだ。&lt;/p>
&lt;p>龍の成長過程を年齢に当てはめると、潜龍は10代、見龍が20代、君子終日乾乾すが30代とある。実際には第3段階は量から質を磨く時なので相対的に長くなる。20代後半から40代ぐらいとみてもよい。そうやって40代には実力が十分に備わっていると言える。踊龍から飛龍になれるかどうかは実力だけではなれない。ここで時、つまりは好機をとらえる必要がある。ここでいう時とは時・処・位の3つを指している。飛龍になるには早すぎても遅すぎてもダメだという。機と期と気を観ないといけない。観るというのは洞察力を指している。&lt;/p>
&lt;ul>
&lt;li>機: 機会&lt;/li>
&lt;li>期: 期日&lt;/li>
&lt;li>気: 気運と兆し&lt;/li>
&lt;/ul>
&lt;p>志は変容したり、しぼんでいく。世の中の流れに押し流され、埋没してしまうこともある。志を失うと乾乾することも放棄して、やがて亢龍となり衰退していく。潜龍のときに抱いた志を持ち続けられていれば、龍の変遷過程を経てイメージが実際に実現できていて、踊龍で最終段階になっている。1つ1つのパーツが適所にはまり、描いてきた志のビジョンが明確になる。機が熟し時が満ちる。&lt;/p>
&lt;p>いくつか分かるような分からないようなキーワードもあるし「兆しを観て適切な時に動け」と言われてもプラクティスというより精神論に近い。易経とは時の変化の法則性を理解して、人間が然るべき時を理解できるようにする学問ではあるが、一朝一夕ではないことが文章からわかる。それでもいくつか共感するところはあって、志とまで昇華しなくても思い付きでよいアイディアだと思ったことが1週間も経つとそう思わなくなったり、1ヶ月もするとやる気をなくしたりすることが私は多々ある。別の観点では、初期の挑戦というのは得てしてうまくいかない、いや大半が失敗する。余談だが本書の中に「潜龍用うるなかれ。」という言葉が出てくる。重用したり責任をもたせてはいけないとある。自分が潜龍だとしたら焦って早成を求めてはいけない。経験も実力もないこの時期にすべきことは志を抱くこと。&lt;/p>
&lt;p>会社を始めて最初の2年で大きな失敗をしたときに課題管理を自社のビジネスにできないかと思い付いた。その後、3ヶ月間調べたり話したりして、その後1年間スクラム開発に勤しみ、そしてこれからプロダクトマネージャーとして実践する。決して順風満帆ではないが、たしかに時が変わり、やっていることも変わり続けている。そして、課題管理という分野における解像度は1年前よりも高くなった。易経の乾為天をフラクタルに考えるのは正しくないのかもしれないけど、製品開発のサイクルとみなしても理は通りそうな気もする。&lt;/p></content></item><item><title>自分史を易経から読み解く</title><link>/diary/posts/2022/1011/</link><pubDate>Tue, 11 Oct 2022 08:27:29 +0900</pubDate><guid>/diary/posts/2022/1011/</guid><description>0時に寝て3時に起きて5時に起きて7時半に起きた。夜に紅茶を飲むのをやめて少し眠れるようになった。QA レビュー待ちのタスクが溜まっていて、リリース前でやることないから軽微なバグ修正してた。
リーダーとしての易経 週末に三ノ宮.devの勉強会がある。発表者が少なかったら私もなにかしら発表しようかと考えている。
テーマは「継続」でみなさんが継続していることについて色々教えてください！
継続と聞いて思い浮かべるのは過去に menta に書いた記事とかも見返していた。
プログラミングと書くこと いまになって 易経の本 も軽く読み直してみたいと考えている。もう10年以上プログラミングを学び続けてきたし、転職や起業など自分がやってきた歴史からふりかえるとなにか発見があるかもしれない。
易の三義 変易: 森羅万象、すべてひと時たりとも変化しないものはない 不易: 変化には必ず一定不変の法則性がある 易簡: その変化の法則性を理解すれば、わかりやすいものになる 時は必ず変化するので、良い時は悪い時へ向かい、また悪い時は良い時へ向かう。変化するから成長と発展がある。
時の三要素 易経のいう時には時間だけでなく空間も含む。次の3つの要素で成り立つ。
時: 時間、期、タイミング、兆し 処: 環境、状況、場 位: 位置、立場、社会的地位、人間関係 時・処・位を踏まえた判断と行動がリーダーには必要。
時の変遷過程の原則 易経の64の時の中でもっとも原則的な時の変遷をたどる龍の話しが乾為天 (けんいてん) という卦になる。次の6段階で力を蓄え、師に仰ぎ、繰り返し、試みて、変化を為し、衰退する。
潜龍: 変化の始まり 見龍: 目が開かれる時 君子終日乾乾す: 道を反復する 踊龍: 自ら試みる時 飛龍: 変化を起こす 亢龍: 平らかなものは必ず傾く</description><content>&lt;p>0時に寝て3時に起きて5時に起きて7時半に起きた。夜に紅茶を飲むのをやめて少し眠れるようになった。QA レビュー待ちのタスクが溜まっていて、リリース前でやることないから軽微なバグ修正してた。&lt;/p>
&lt;h2 id="リーダーとしての易経">リーダーとしての易経&lt;/h2>
&lt;p>週末に三ノ宮.devの勉強会がある。発表者が少なかったら私もなにかしら発表しようかと考えている。&lt;/p>
&lt;blockquote>
&lt;p>テーマは「継続」でみなさんが継続していることについて色々教えてください！&lt;/p>
&lt;/blockquote>
&lt;p>継続と聞いて思い浮かべるのは過去に menta に書いた記事とかも見返していた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://menta.work/post/detail/12952/LzRIJkovXazr4cqpzgg7">プログラミングと書くこと&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>いまになって &lt;a href="/diary/diary/posts/2022/0904/#40代は改革と革命">易経の本&lt;/a> も軽く読み直してみたいと考えている。もう10年以上プログラミングを学び続けてきたし、転職や起業など自分がやってきた歴史からふりかえるとなにか発見があるかもしれない。&lt;/p>
&lt;h3 id="易の三義">易の三義&lt;/h3>
&lt;ul>
&lt;li>変易: 森羅万象、すべてひと時たりとも変化しないものはない&lt;/li>
&lt;li>不易: 変化には必ず一定不変の法則性がある&lt;/li>
&lt;li>易簡: その変化の法則性を理解すれば、わかりやすいものになる&lt;/li>
&lt;/ul>
&lt;p>時は必ず変化するので、良い時は悪い時へ向かい、また悪い時は良い時へ向かう。変化するから成長と発展がある。&lt;/p>
&lt;h3 id="時の三要素">時の三要素&lt;/h3>
&lt;p>易経のいう時には時間だけでなく空間も含む。次の3つの要素で成り立つ。&lt;/p>
&lt;ul>
&lt;li>時: 時間、期、タイミング、兆し&lt;/li>
&lt;li>処: 環境、状況、場&lt;/li>
&lt;li>位: 位置、立場、社会的地位、人間関係&lt;/li>
&lt;/ul>
&lt;p>時・処・位を踏まえた判断と行動がリーダーには必要。&lt;/p>
&lt;h3 id="時の変遷過程の原則">時の変遷過程の原則&lt;/h3>
&lt;p>易経の64の時の中でもっとも原則的な時の変遷をたどる龍の話しが乾為天 (けんいてん) という卦になる。次の6段階で力を蓄え、師に仰ぎ、繰り返し、試みて、変化を為し、衰退する。&lt;/p>
&lt;ol>
&lt;li>潜龍: 変化の始まり&lt;/li>
&lt;li>見龍: 目が開かれる時&lt;/li>
&lt;li>君子終日乾乾す: 道を反復する&lt;/li>
&lt;li>踊龍: 自ら試みる時&lt;/li>
&lt;li>飛龍: 変化を起こす&lt;/li>
&lt;li>亢龍: 平らかなものは必ず傾く&lt;/li>
&lt;/ol></content></item><item><title>改革と革命</title><link>/diary/posts/2022/0904/</link><pubDate>Sun, 04 Sep 2022 13:09:07 +0900</pubDate><guid>/diary/posts/2022/0904/</guid><description>0時に寝て6時に起きた。たまたま見かけた記事から昔読んだ本を思い出した。
40代は改革と革命 たまたまタイムラインでこんな記事をみかけた。
30代のころは「改善」でいいと思うのです。30代のうちに仕事の基礎をガッチリ身につけ、40代以降は改革と革命に取り組む。私はいつも、40代以上の社員に「改善をするな」と言っているんですよ。
ニトリ会長が斎藤佑樹にアツく語る、「30代にするべきこと」「40代にやるべきこと」
私の生き方に近い考え方だったので印象に残った。私はもともと sier 出身なので働き始めた頃からマネージャー側にいた。たまたまトラブルプロジェクトに参加してひたむきに1年半ほど働き通したら大きな成果が出て、組織からプロジェクトマネージャーになることを嘱望されるようになってしまった。私はただの議事録係だったが、結果的に事実上のプロジェクトを仕切るようになった。それはそれで誇らしかったのはあるけど、それと同時にマネージャーはだいたい分かったという気持ちにもなった。そしてマネージャーの働き方は自分の意思ともあわなかったので潔く辞めた。おそらく自分がやったことのないことに挑戦するという生き方の基礎が最初の退職と同時に出来た。転職じゃなくて退職なのは辞めることを決めてから次のお仕事を探したから。閑話休題。30代のときにひたすらコードを読んで、ひたすらコードを書いてきた動機づけの1つとして、昔読んだ本の１つに リーダーの易経 がある。著者によると、易経とは時の変化の原理原則が書かれていて、時を読むための専門書と言えるらしい。時の第三段階として次の言葉がある。
君子終日乾乾 (けんけん) し、夕べに惕若 (てきじゃく) たり。厲 (あや) うけれども咎なし。
(要約) 朝から晩まで、繰り返し邁進して努力する。そして、夜、独りになったときに、1日を恐懼 (きょうく) して省みる。そのようであれば、危うい時ではあるが、咎めはない
「乾乾 (けんけん) す」とは高揚感、充実感をもって進む、「厲 (あや) うけれども咎なし。」とは省みることを怠らなければ、危うい立場ではあるが、大きな失敗はないという意味になるらしい。
自分の力、自分でないとできないことを創出するためには、なかったものを創り出すわけです。そのために必要なものは、毎日朝から晩まで同じことを繰り返すことです。継続は力なりというのは、この段階です。
同じことを繰り返すことが創出につながるというのはおもしろい話しで、同じことを繰り返すうちにちょっとしたミスや失敗が創意工夫や技を磨くきっかけになるという。失敗したで終わらせずに省みることで気付きを蓄積していくことがオリジナリティを育てる。乾乾 (けんけん) という言葉の響きを気に入ったのか、おそらく2007年頃に読んだ本なのに15年経ってもいまも記憶に残っているというのは人生において影響を受けたと言っていいだろう。
若い頃からマネージャーをやってくれという依頼を断り続けて、いま満を持して次のお仕事ではマネージャーをやろうと考えている。メンバーとして経験を得た上でマネージャーとして自分が何をできるかを確認したい。一方でマネージャーの仕事を未経験／業務委託で探すのがなかなか難しくて苦戦している。私には課題管理というたった1つの武器しかないが、それをマネージャーとしてどう活用できるのか。組織で働く人は言われたことをやる人が多い。私は課題管理を用いて然るべきことをやることに重きを置いている。課題管理で業務を改革や革命のレベルまで昇華できるかどうかを実践の場で確かめたい。</description><content>&lt;p>0時に寝て6時に起きた。たまたま見かけた記事から昔読んだ本を思い出した。&lt;/p>
&lt;h2 id="40代は改革と革命">40代は改革と革命&lt;/h2>
&lt;p>たまたまタイムラインでこんな記事をみかけた。&lt;/p>
&lt;blockquote>
&lt;p>30代のころは「改善」でいいと思うのです。30代のうちに仕事の基礎をガッチリ身につけ、40代以降は改革と革命に取り組む。私はいつも、40代以上の社員に「改善をするな」と言っているんですよ。&lt;/p>
&lt;p>&lt;a href="https://gendai.media/articles/-/99207?page=4">ニトリ会長が斎藤佑樹にアツく語る、「30代にするべきこと」「40代にやるべきこと」&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>私の生き方に近い考え方だったので印象に残った。私はもともと sier 出身なので働き始めた頃からマネージャー側にいた。たまたまトラブルプロジェクトに参加してひたむきに1年半ほど働き通したら大きな成果が出て、組織からプロジェクトマネージャーになることを嘱望されるようになってしまった。私はただの議事録係だったが、結果的に事実上のプロジェクトを仕切るようになった。それはそれで誇らしかったのはあるけど、それと同時にマネージャーはだいたい分かったという気持ちにもなった。そしてマネージャーの働き方は自分の意思ともあわなかったので潔く辞めた。おそらく自分がやったことのないことに挑戦するという生き方の基礎が最初の退職と同時に出来た。転職じゃなくて退職なのは辞めることを決めてから次のお仕事を探したから。閑話休題。30代のときにひたすらコードを読んで、ひたすらコードを書いてきた動機づけの1つとして、昔読んだ本の１つに &lt;a href="https://www.php.co.jp/books/detail.php?isbn=4-569-64499-6">リーダーの易経&lt;/a> がある。著者によると、易経とは時の変化の原理原則が書かれていて、時を読むための専門書と言えるらしい。時の第三段階として次の言葉がある。&lt;/p>
&lt;blockquote>
&lt;p>君子終日乾乾 (けんけん) し、夕べに惕若 (てきじゃく) たり。厲 (あや) うけれども咎なし。&lt;/p>
&lt;p>(要約)
朝から晩まで、繰り返し邁進して努力する。そして、夜、独りになったときに、1日を恐懼 (きょうく) して省みる。そのようであれば、危うい時ではあるが、咎めはない&lt;/p>
&lt;/blockquote>
&lt;p>「乾乾 (けんけん) す」とは高揚感、充実感をもって進む、「厲 (あや) うけれども咎なし。」とは省みることを怠らなければ、危うい立場ではあるが、大きな失敗はないという意味になるらしい。&lt;/p>
&lt;blockquote>
&lt;p>自分の力、自分でないとできないことを創出するためには、なかったものを創り出すわけです。そのために必要なものは、毎日朝から晩まで同じことを繰り返すことです。継続は力なりというのは、この段階です。&lt;/p>
&lt;/blockquote>
&lt;p>同じことを繰り返すことが創出につながるというのはおもしろい話しで、同じことを繰り返すうちにちょっとしたミスや失敗が創意工夫や技を磨くきっかけになるという。失敗したで終わらせずに省みることで気付きを蓄積していくことがオリジナリティを育てる。&lt;em>乾乾 (けんけん)&lt;/em> という言葉の響きを気に入ったのか、おそらく2007年頃に読んだ本なのに15年経ってもいまも記憶に残っているというのは人生において影響を受けたと言っていいだろう。&lt;/p>
&lt;p>若い頃からマネージャーをやってくれという依頼を断り続けて、いま満を持して次のお仕事ではマネージャーをやろうと考えている。メンバーとして経験を得た上でマネージャーとして自分が何をできるかを確認したい。一方でマネージャーの仕事を未経験／業務委託で探すのがなかなか難しくて苦戦している。私には課題管理というたった1つの武器しかないが、それをマネージャーとしてどう活用できるのか。組織で働く人は言われたことをやる人が多い。私は課題管理を用いて然るべきことをやることに重きを置いている。課題管理で業務を改革や革命のレベルまで昇華できるかどうかを実践の場で確かめたい。&lt;/p></content></item><item><title>夏バテは解消しつつある</title><link>/diary/posts/2022/0903/</link><pubDate>Sat, 03 Sep 2022 09:44:22 +0900</pubDate><guid>/diary/posts/2022/0903/</guid><description>1時に寝て7時に起きた。開発の作業しようかと思っていたけど、なんか気分が乗らなくて本を読んでただけだった。
ストレッチ 今日の開脚幅は開始前158cmで、ストレッチ後162cmだった。まずまずの数値でストレッチを受けていても調子がよかった。気温が下がって暑さが和らいできて体調もよくなってきた感じがある。以前から姿勢があまりよくないといったアドバイスを受けていて、前側の筋肉に比べて後側の方が相対的に強いから後側の筋肉を多用しようとして腰に負担がきているといった話しがある。姿勢を保つときに腹筋を使うように意識した方がよいといったアドバイスをトレーナーさんからもらった。
正史 諸葛亮孔明 「第四章 赤壁の戦い」を読んだ。
孔明が軍事の指揮をとるのは劉備の死後になるので、劉備の生前に起こった赤壁の戦いで伝えられる孔明の逸話は基本的にすべて嘘になる。演義では十万本の矢、東南の風、龐統による連環の計までもが創作らしい。赤壁の戦いの功労者は呉の都督だった周瑜の戦略によるもので戦う前から結果がみえていた。周瑜が用意周到に準備した戦略通りに魏軍がはまり、そこに周瑜の部下である黄蓋が提案した火計が成功をおさめたという。これはこれでおもしろくて戦いとはその前の準備の段階で決着がついているという見方ができる。周瑜は都督で全体の戦略を描くものの、実際の戦場における戦術は積極的に部下に任せるというスタンスをとっていた。また実際にはこれは大きな戦ではなく、小競り合いと決定打だとなった火計はあったものの、魏軍で流行した疫病による撤退というのが史実だと言えるらしい。演義における赤壁の戦いが大創作になっている背景として、三国志演義が編纂された時代 (実際の赤壁の戦いから千年後) にあった 鄱陽湖の戦い がモデルになっているのではないか。また孔明の神算鬼謀も朱元璋に仕えた 劉基 からきているのではないかという話しでもあるらしい。</description><content>&lt;p>1時に寝て7時に起きた。開発の作業しようかと思っていたけど、なんか気分が乗らなくて本を読んでただけだった。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前158cmで、ストレッチ後162cmだった。まずまずの数値でストレッチを受けていても調子がよかった。気温が下がって暑さが和らいできて体調もよくなってきた感じがある。以前から姿勢があまりよくないといったアドバイスを受けていて、前側の筋肉に比べて後側の方が相対的に強いから後側の筋肉を多用しようとして腰に負担がきているといった話しがある。姿勢を保つときに腹筋を使うように意識した方がよいといったアドバイスをトレーナーさんからもらった。&lt;/p>
&lt;h2 id="正史-諸葛亮孔明">正史 諸葛亮孔明&lt;/h2>
&lt;p>「第四章 赤壁の戦い」を読んだ。&lt;/p>
&lt;p>孔明が軍事の指揮をとるのは劉備の死後になるので、劉備の生前に起こった赤壁の戦いで伝えられる孔明の逸話は基本的にすべて嘘になる。演義では十万本の矢、東南の風、龐統による連環の計までもが創作らしい。赤壁の戦いの功労者は呉の都督だった周瑜の戦略によるもので戦う前から結果がみえていた。周瑜が用意周到に準備した戦略通りに魏軍がはまり、そこに周瑜の部下である黄蓋が提案した火計が成功をおさめたという。これはこれでおもしろくて戦いとはその前の準備の段階で決着がついているという見方ができる。周瑜は都督で全体の戦略を描くものの、実際の戦場における戦術は積極的に部下に任せるというスタンスをとっていた。また実際にはこれは大きな戦ではなく、小競り合いと決定打だとなった火計はあったものの、魏軍で流行した疫病による撤退というのが史実だと言えるらしい。演義における赤壁の戦いが大創作になっている背景として、三国志演義が編纂された時代 (実際の赤壁の戦いから千年後) にあった &lt;a href="https://ja.wikipedia.org/wiki/%E9%84%B1%E9%99%BD%E6%B9%96%E3%81%AE%E6%88%A6%E3%81%84">鄱陽湖の戦い&lt;/a> がモデルになっているのではないか。また孔明の神算鬼謀も朱元璋に仕えた &lt;a href="https://ja.wikipedia.org/wiki/%E5%8A%89%E5%9F%BA">劉基&lt;/a> からきているのではないかという話しでもあるらしい。&lt;/p></content></item><item><title>次のお仕事探し</title><link>/diary/posts/2022/0811/</link><pubDate>Thu, 11 Aug 2022 09:29:50 +0900</pubDate><guid>/diary/posts/2022/0811/</guid><description>22時に寝て5時に起きた。前日はあまり寝てなかったら眠くなった。午前中に昨日やり残した開発のお仕事を4時間ほどやってから自分の会社の雑務をしていた。
智将・諸葛孔明の兵法 智将・諸葛孔明の兵法の書評 をみかけた。amazon.co.jp に本の情報があることは確認できたが、1987年に出版された本なので在庫はないから諦めていた。たまたま先日メルカリで売っているのをみつけたので購入した (300円) 。第一部生涯 7.馬謖を斬るのところで第一次北伐の背景や概要が説明されている。馬謖が山の上に陣取ったのは短期決戦を意図してその優位性を取ろうとしたのだろうと著者の推察が述べられている。また馬謖を斬るにいたったのは軍律を守ることをすべてに優先したと説明されている。みずからが軍律を破ってしまうと蜀全体の維持が不可能になるだろうと著者も推察が述べられている。そのときに涙したことも触れているが、涙した理由の詳細については言及していない。
リモートワーク前提のお仕事 以前、登録した人材紹介プラットフォーム に remogu さんがある。待遇のよい案件はほぼ東京か、あっても大阪になる。私は神戸に住んでいるので基本的にリモートワークでないとお仕事を探すのは難しい。remogu さんはリモートワーク前提なのでフィルター条件が1つ減るので検索しやすい。11月から新しいお仕事を探さないといけない。remogu さんのプロフィール情報を求職のステータスに更新しておいた。すると翌日に過去に面談したエージェントさんから連絡があって、すぐに希望に沿った案件を4つほど提案してくれた。その業務内容を今日みていたらどれも私の希望した業務内容に合致するものだったので優先順位とともに職務経歴書を更新して返信した。以前、面談したときもこのエージェントさんの印象はよかった。なにかしら相性があるのか、よい印象をもつエージェントさんだとよい提案をしてくれる。この前、初めて登録した人材紹介会社のエージェントさんとの面談はいまひとつだったのでなにかしらエージェントさんの質なのか、人間力の差による違いがあるんだなと思う。順番に面談していってマネジメントのキャリアを得られるかどうか、私にとっては大きな挑戦の1つになるので求職活動をがんばりたい。</description><content>&lt;p>22時に寝て5時に起きた。前日はあまり寝てなかったら眠くなった。午前中に昨日やり残した開発のお仕事を4時間ほどやってから自分の会社の雑務をしていた。&lt;/p>
&lt;h2 id="智将諸葛孔明の兵法">智将・諸葛孔明の兵法&lt;/h2>
&lt;p>&lt;a href="https://hipstergate.jp/column/zhuge-liang-kongming/">智将・諸葛孔明の兵法の書評&lt;/a> をみかけた。&lt;a href="https://www.amazon.co.jp/%E6%99%BA%E5%B0%86%E3%83%BB%E8%AB%B8%E8%91%9B%E5%AD%94%E6%98%8E%E3%81%AE%E5%85%B5%E6%B3%95-%E9%AB%98%E7%95%A0-%E7%A9%A3/dp/4837913504">amazon.co.jp&lt;/a> に本の情報があることは確認できたが、1987年に出版された本なので在庫はないから諦めていた。たまたま先日メルカリで売っているのをみつけたので購入した (300円) 。第一部生涯 7.馬謖を斬るのところで第一次北伐の背景や概要が説明されている。馬謖が山の上に陣取ったのは短期決戦を意図してその優位性を取ろうとしたのだろうと著者の推察が述べられている。また馬謖を斬るにいたったのは軍律を守ることをすべてに優先したと説明されている。みずからが軍律を破ってしまうと蜀全体の維持が不可能になるだろうと著者も推察が述べられている。そのときに涙したことも触れているが、涙した理由の詳細については言及していない。&lt;/p>
&lt;h2 id="リモートワーク前提のお仕事">リモートワーク前提のお仕事&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/0930/#カジュアル面談準備">以前、登録した人材紹介プラットフォーム&lt;/a> に &lt;a href="https://remogu.jp/">remogu&lt;/a> さんがある。待遇のよい案件はほぼ東京か、あっても大阪になる。私は神戸に住んでいるので基本的にリモートワークでないとお仕事を探すのは難しい。remogu さんはリモートワーク前提なのでフィルター条件が1つ減るので検索しやすい。11月から新しいお仕事を探さないといけない。remogu さんのプロフィール情報を求職のステータスに更新しておいた。すると翌日に過去に面談したエージェントさんから連絡があって、すぐに希望に沿った案件を4つほど提案してくれた。その業務内容を今日みていたらどれも私の希望した業務内容に合致するものだったので優先順位とともに職務経歴書を更新して返信した。以前、面談したときもこのエージェントさんの印象はよかった。なにかしら相性があるのか、よい印象をもつエージェントさんだとよい提案をしてくれる。この前、初めて登録した人材紹介会社のエージェントさんとの面談はいまひとつだったのでなにかしらエージェントさんの質なのか、人間力の差による違いがあるんだなと思う。順番に面談していってマネジメントのキャリアを得られるかどうか、私にとっては大きな挑戦の1つになるので求職活動をがんばりたい。&lt;/p></content></item><item><title>暑い日が続く</title><link>/diary/posts/2022/0803/</link><pubDate>Wed, 03 Aug 2022 08:19:41 +0900</pubDate><guid>/diary/posts/2022/0803/</guid><description>0時に寝て6時に起きた。今日は業務時間の大半が打ち合わせだった。
正史 諸葛亮孔明 「第十章 蜀の再建と出師表」を読んだ。
孔明の話し相手になっている 蔣琬 (しょうえん) のプロフィール情報がある。孔明の死後、後継者として内政を取り仕切ったらしい。孔明の後を継ぐ人物は相対比較されることから低い評価になりがちだが、蔣琬はそれでも評価が低くないことから時代が異なればもっと高い評価を得た政治家だったのかもしれない。むしろ孔明が北伐を5回もできた背景は留守中の内政を蔣琬始め、出師表で取り上げられた人物たちがうまく運営していたといった話しも出てくる。軍事は国庫を大いに逼迫し、蜀は魏や呉と比べて国力が劣る国家であったことから内政の負担も大きかったと思われる。
出師表 (すいしのひょう) という言葉を知らなかった。出師表とは臣下が出陣するときに君主に奉る文章のことを指す。孔明が君主の劉禅に奉った文章がとても有名らしい。2つあるので前出師表と後出師表と区別する場合もある。後出師表は孔明が書いたものではないという説もあるらしい。一般に出師表と言えば前出師表のことを指す。この出師表のどういったところがその時代の他の文章と異なるのか、また優れているのかが説明されている。孔明の人格者としての振る舞いや忠義が表れていると言える。時代が大きく違うせいか、出師表の内容を読んで私はどうとは感じなかったものの、これは私が提唱するよい開発文化の1つ「書く」ということの重要性ではないかとも思えてきた。当時、孔明と直接話せる人はせいぜい数十人から百数十人程度であろうから、出師表のような文章で多くの兵士や国民に影響を与えた事例の1つと言えるのかもしれない。</description><content>&lt;p>0時に寝て6時に起きた。今日は業務時間の大半が打ち合わせだった。&lt;/p>
&lt;h2 id="正史-諸葛亮孔明">正史 諸葛亮孔明&lt;/h2>
&lt;p>「第十章 蜀の再建と出師表」を読んだ。&lt;/p>
&lt;p>孔明の話し相手になっている &lt;a href="https://ja.wikipedia.org/wiki/%E8%94%A3%E7%90%AC">蔣琬 (しょうえん)&lt;/a> のプロフィール情報がある。孔明の死後、後継者として内政を取り仕切ったらしい。孔明の後を継ぐ人物は相対比較されることから低い評価になりがちだが、蔣琬はそれでも評価が低くないことから時代が異なればもっと高い評価を得た政治家だったのかもしれない。むしろ孔明が北伐を5回もできた背景は留守中の内政を蔣琬始め、出師表で取り上げられた人物たちがうまく運営していたといった話しも出てくる。軍事は国庫を大いに逼迫し、蜀は魏や呉と比べて国力が劣る国家であったことから内政の負担も大きかったと思われる。&lt;/p>
&lt;p>&lt;a href="https://ja.wikipedia.org/wiki/%E5%87%BA%E5%B8%AB%E8%A1%A8">出師表 (すいしのひょう)&lt;/a> という言葉を知らなかった。出師表とは臣下が出陣するときに君主に奉る文章のことを指す。孔明が君主の劉禅に奉った文章がとても有名らしい。2つあるので前出師表と後出師表と区別する場合もある。後出師表は孔明が書いたものではないという説もあるらしい。一般に出師表と言えば前出師表のことを指す。この出師表のどういったところがその時代の他の文章と異なるのか、また優れているのかが説明されている。孔明の人格者としての振る舞いや忠義が表れていると言える。時代が大きく違うせいか、出師表の内容を読んで私はどうとは感じなかったものの、これは私が提唱するよい開発文化の1つ「書く」ということの重要性ではないかとも思えてきた。当時、孔明と直接話せる人はせいぜい数十人から百数十人程度であろうから、出師表のような文章で多くの兵士や国民に影響を与えた事例の1つと言えるのかもしれない。&lt;/p></content></item><item><title>孔明の史実を読み始めた</title><link>/diary/posts/2022/0801/</link><pubDate>Mon, 01 Aug 2022 08:50:04 +0900</pubDate><guid>/diary/posts/2022/0801/</guid><description>0時に寝て7時に起きた。
正史 諸葛亮孔明 パリピ孔明 がおもしろかったので孔明の記事などを読んだりしていた。
私、姓は諸葛、名は亮、字を孔明と申します。
作品中のこの挨拶が印象に残っている。キャッチフレーズのようなものが挨拶というのも珍しい？そんなこんなもふくめて孔明の本も読んでみることにした。
正史 諸葛亮孔明 - 三国志の英雄たちが語らう 「第十一章 第一次北伐」を読んだ。
孔明が軍事で手腕を振るうようになるのは劉備の死後になる。北伐は第一次から第五次まである。そのうちの第一次北伐の失敗は 泣いて馬謖を斬る の故事で有名である。wikipedia の説明では正史と演義でこの故事に関する記述は異なっていることが書かれている。本書では、馬謖が副将の王平の諫言に従わず、山頂に布陣したことそのものは悪い策ではなかったと擁護されている。山頂から地の利をとって一刻も早く要衝を通過したい敵の張郃の軍にとって厄介な配置と考えることもできる。馬謖の失敗は実戦経験が乏しかったことで水源の確保を怠っていたことだという。かたや敵将の張郃は歴戦の名将であることから水源の確保ができていないことを看破して馬謖が布陣する近くの川や水源を確保してしまった。水源を確保することなど軍事に限らず当たり前の話しであり、戦術書に「水源を断て」などと記述しているものはないという。馬謖軍の布陣をみただけでそのことを見抜いた張郃の応用戦術を褒めている。さらに戦争に敗れただけであればまだよかったが、馬謖は敗北の責任を逃れるために逃亡したらしい。その承認欲求とプライドのために自分が負けた事実を受け入れられなかった。本書では、孔明の任命責任も大きいと締め括られている。馬謖が孔明の愛弟子であるから、実績のある諸将よりも私情を優先して実績をつけさせてあげようと抜擢した。その結果、馬謖もより大きな実績を挙げようと行動して失敗してしまった。どういう思いで涙を流したかは本書では書かれていなかった。</description><content>&lt;p>0時に寝て7時に起きた。&lt;/p>
&lt;h2 id="正史-諸葛亮孔明">正史 諸葛亮孔明&lt;/h2>
&lt;p>&lt;a href="https://paripikoumei-anime.com/">パリピ孔明&lt;/a> がおもしろかったので孔明の記事などを読んだりしていた。&lt;/p>
&lt;blockquote>
&lt;p>私、姓は諸葛、名は亮、字を孔明と申します。&lt;/p>
&lt;/blockquote>
&lt;p>作品中のこの挨拶が印象に残っている。キャッチフレーズのようなものが挨拶というのも珍しい？そんなこんなもふくめて孔明の本も読んでみることにした。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.wani.co.jp/event.php?id=7293">正史 諸葛亮孔明 - 三国志の英雄たちが語らう&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>「第十一章 第一次北伐」を読んだ。&lt;/p>
&lt;p>孔明が軍事で手腕を振るうようになるのは劉備の死後になる。北伐は第一次から第五次まである。そのうちの第一次北伐の失敗は &lt;a href="https://ja.wikipedia.org/wiki/%E6%B3%A3%E3%81%84%E3%81%A6%E9%A6%AC%E8%AC%96%E3%82%92%E6%96%AC%E3%82%8B">泣いて馬謖を斬る&lt;/a> の故事で有名である。wikipedia の説明では正史と演義でこの故事に関する記述は異なっていることが書かれている。本書では、馬謖が副将の王平の諫言に従わず、山頂に布陣したことそのものは悪い策ではなかったと擁護されている。山頂から地の利をとって一刻も早く要衝を通過したい敵の張郃の軍にとって厄介な配置と考えることもできる。馬謖の失敗は実戦経験が乏しかったことで水源の確保を怠っていたことだという。かたや敵将の張郃は歴戦の名将であることから水源の確保ができていないことを看破して馬謖が布陣する近くの川や水源を確保してしまった。水源を確保することなど軍事に限らず当たり前の話しであり、戦術書に「水源を断て」などと記述しているものはないという。馬謖軍の布陣をみただけでそのことを見抜いた張郃の応用戦術を褒めている。さらに戦争に敗れただけであればまだよかったが、馬謖は敗北の責任を逃れるために逃亡したらしい。その承認欲求とプライドのために自分が負けた事実を受け入れられなかった。本書では、孔明の任命責任も大きいと締め括られている。馬謖が孔明の愛弟子であるから、実績のある諸将よりも私情を優先して実績をつけさせてあげようと抜擢した。その結果、馬謖もより大きな実績を挙げようと行動して失敗してしまった。どういう思いで涙を流したかは本書では書かれていなかった。&lt;/p></content></item><item><title>久しぶりにブログを書いた</title><link>/diary/posts/2022/0731/</link><pubDate>Sun, 31 Jul 2022 13:06:19 +0900</pubDate><guid>/diary/posts/2022/0731/</guid><description>2時過ぎに寝て7時に起きて9時まで寝てた。
もてなしだけではもう食えない 読み進めておもしろかったし学びにもなったので書評を書いた。
もてなしだけではもう食えない -ホテル経営学の本質と実践- backlog-github-integration-action v1.0.1 リリース backlog-github-integration-action のバグ修正 した変更を v1.0.1 としてリリースした。2週間ほど検証環境でリグレッションがないかをみていた。問題なさそうなので v1 ブランチにマージして docker イメージを push して v1.0.1 タグを付けてリリース成果物を作成した。久しぶりにやると手順を忘れていてドキュメントを書かないといけないなとか思ったりした。
backlog-github-integration-action</description><content>&lt;p>2時過ぎに寝て7時に起きて9時まで寝てた。&lt;/p>
&lt;h2 id="もてなしだけではもう食えない">もてなしだけではもう食えない&lt;/h2>
&lt;p>読み進めておもしろかったし学びにもなったので書評を書いた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://note.com/t2y1979/n/nc5c156ae529e">もてなしだけではもう食えない -ホテル経営学の本質と実践-&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="backlog-github-integration-action-v101-リリース">backlog-github-integration-action v1.0.1 リリース&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0710/#backlog-github-integration-action-のバグ修正">backlog-github-integration-action のバグ修正&lt;/a> した変更を v1.0.1 としてリリースした。2週間ほど検証環境でリグレッションがないかをみていた。問題なさそうなので v1 ブランチにマージして docker イメージを push して v1.0.1 タグを付けてリリース成果物を作成した。久しぶりにやると手順を忘れていてドキュメントを書かないといけないなとか思ったりした。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/marketplace/actions/backlog-github-integration-action">backlog-github-integration-action&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>ホテル経営の本を読み終えた</title><link>/diary/posts/2022/0724/</link><pubDate>Sun, 24 Jul 2022 09:59:35 +0900</pubDate><guid>/diary/posts/2022/0724/</guid><description>0時に寝て7時に起きた。
もてなしだけではもう食えない 読み終えた。あとで総評を書く。
第10章 不動産屋の悪知恵 2000年に改正された借地借家法38条の「定期借家」の条項から賃貸契約には2種類あるらしい。
普通借家 定期借家 普通借家は契約期間更新の概念があり、借り主が契約更新を拒否するには「正当な事由」が必要になる。一般的な賃貸マンションなどの契約も多くのケースでこちらの契約になる。ここでいう正当な事由とは、建物が老朽化して立て直す必要があるとか、貸し主がそこに住むといったものらしい。一方で定期借家は契約期間が終了すれば、一旦契約は終了してから新たに再契約するといった段取りになる。この定期賃貸借契約の条件を満たすには、契約期間更新の定めがないことを説明した書面を交付する必要がある。その書面がない場合はすべて普通借家とみなされるという。その是非を巡って争った最高裁の判例があるらしくググるとすぐに出てくる。当事者同士で双方の合意があったとしても説明書面がない場合は無効とするような判例となっている。これを逆手に取れば、普通借家として契約更新を主張できるというストーリー展開になっている。
■Q&amp;amp;A不動産の豆知識（定期建物賃貸借）－弁護士伊藤 あとは PDCA サイクルのうち、日本の会社で一番弱いところはどこ？という話題が出てくる。Check だろう？という主人公の答えに、アドバイザーは Plan じゃないかと返す。Plan が曖昧だから Check できないという背景になっているのではないかと。一理あるかもしれない。日本人は気質として誰か1人が責任を担うのを嫌う文化があるように思う。個人の責任にしたくない・されたくないという空気から Check を曖昧にしたがる傾向があると私は考えている。
第11章 エピローグ タイトルのままの章でホテル経営についてのアドバイスがあるわけではなく、ストーリ仕立てで展開してきた物語の結末や登場人物たちのその後のキャリアや展望などを紹介している。総じてハッピーエンドと言えるし、総じて人生の中のスナップショットとしてこんなもんとも言える。区切りがきてなんらかの結果が出たとしても、さらに人生は続くので日常が少し変わっていくだけといった展開になっていた。
あとがき 著名なホテルの総支配人と著者との対談がある。読んでいて関心をもてたところは Job Description (職務分掌記述書) の重要性が説かれている。適正な評価、公平な人事、採用にも必要とされる。この考え方はメンバーシップ雇用を長く続けてきた日本の会社の年功序列とは大きな違いがあるため、制度設計の見直しは時間がかかるのだろうと思える。過去のしがらみがない新興企業が新たに制度設計して台頭していくのがよいのだろう。
また外資系という言葉に抵抗感のあるスタッフに対して「トヨタやファーストリテイリングは外資系ですか？日系ですか？」と尋ねるという話題も出てくる。そうすると、外資系や日系というグルーピングに意味がないことに気付く。その違いを対談の中ではグローバルかノングローバルかの違いでしかないと説明されている。ビジネスの規模や競合をグローバルの視野で考える必要があるかどうかによって変わってくるという。
勝てる能力があってもその素地となる基礎体力がないと発揮できない。野球でも基礎体力があるから速い球を投げられる。
これもホテル経営に限った話しではないなと思えた。私自身、昨今の開発チームをみていて感じることでもある。クラウドでアプリケーション開発が簡単になったがために基礎がなく、スキルが低い開発者もメンバーの一員として働けるようになった。もちろん最初は誰もがそうだけど、適切な指導や教育を受けないとそのまま経験年数だけが経ってしまう。さらにそんな人が偶然リーダーになってしまうと 許される無知の範囲は開発経験年数に反比例する という現象が起きる。一定の水準を超えていない開発者がなにを作ってもうまくいかないのではないかと私は感じるようになってきた。私はそういったプロダクトを「ただ動くだけ」と呼んでいる。その後の拡張や保守に必要以上にコストがかかり、それが原因で将来の開発計画に支障をきたすこともある。そして、多くのケースでその状況を作った人はその後いないことが多い。</description><content>&lt;p>0時に寝て7時に起きた。&lt;/p>
&lt;h2 id="もてなしだけではもう食えない">もてなしだけではもう食えない&lt;/h2>
&lt;p>読み終えた。あとで総評を書く。&lt;/p>
&lt;h4 id="第10章-不動産屋の悪知恵">第10章 不動産屋の悪知恵&lt;/h4>
&lt;p>2000年に改正された借地借家法38条の「定期借家」の条項から賃貸契約には2種類あるらしい。&lt;/p>
&lt;ul>
&lt;li>普通借家&lt;/li>
&lt;li>定期借家&lt;/li>
&lt;/ul>
&lt;p>普通借家は契約期間更新の概念があり、借り主が契約更新を拒否するには「正当な事由」が必要になる。一般的な賃貸マンションなどの契約も多くのケースでこちらの契約になる。ここでいう正当な事由とは、建物が老朽化して立て直す必要があるとか、貸し主がそこに住むといったものらしい。一方で定期借家は契約期間が終了すれば、一旦契約は終了してから新たに再契約するといった段取りになる。この定期賃貸借契約の条件を満たすには、契約期間更新の定めがないことを説明した書面を交付する必要がある。その書面がない場合はすべて普通借家とみなされるという。その是非を巡って争った最高裁の判例があるらしくググるとすぐに出てくる。当事者同士で双方の合意があったとしても説明書面がない場合は無効とするような判例となっている。これを逆手に取れば、普通借家として契約更新を主張できるというストーリー展開になっている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hibiya-law.jp/posts/post2.html">■Q&amp;amp;A不動産の豆知識（定期建物賃貸借）－弁護士伊藤&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>あとは PDCA サイクルのうち、日本の会社で一番弱いところはどこ？という話題が出てくる。Check だろう？という主人公の答えに、アドバイザーは Plan じゃないかと返す。Plan が曖昧だから Check できないという背景になっているのではないかと。一理あるかもしれない。日本人は気質として誰か1人が責任を担うのを嫌う文化があるように思う。個人の責任にしたくない・されたくないという空気から Check を曖昧にしたがる傾向があると私は考えている。&lt;/p>
&lt;h4 id="第11章-エピローグ">第11章 エピローグ&lt;/h4>
&lt;p>タイトルのままの章でホテル経営についてのアドバイスがあるわけではなく、ストーリ仕立てで展開してきた物語の結末や登場人物たちのその後のキャリアや展望などを紹介している。総じてハッピーエンドと言えるし、総じて人生の中のスナップショットとしてこんなもんとも言える。区切りがきてなんらかの結果が出たとしても、さらに人生は続くので日常が少し変わっていくだけといった展開になっていた。&lt;/p>
&lt;h4 id="あとがき">あとがき&lt;/h4>
&lt;p>著名なホテルの総支配人と著者との対談がある。読んでいて関心をもてたところは Job Description (職務分掌記述書) の重要性が説かれている。適正な評価、公平な人事、採用にも必要とされる。この考え方はメンバーシップ雇用を長く続けてきた日本の会社の年功序列とは大きな違いがあるため、制度設計の見直しは時間がかかるのだろうと思える。過去のしがらみがない新興企業が新たに制度設計して台頭していくのがよいのだろう。&lt;/p>
&lt;p>また外資系という言葉に抵抗感のあるスタッフに対して「トヨタやファーストリテイリングは外資系ですか？日系ですか？」と尋ねるという話題も出てくる。そうすると、外資系や日系というグルーピングに意味がないことに気付く。その違いを対談の中ではグローバルかノングローバルかの違いでしかないと説明されている。ビジネスの規模や競合をグローバルの視野で考える必要があるかどうかによって変わってくるという。&lt;/p>
&lt;blockquote>
&lt;p>勝てる能力があってもその素地となる基礎体力がないと発揮できない。野球でも基礎体力があるから速い球を投げられる。&lt;/p>
&lt;/blockquote>
&lt;p>これもホテル経営に限った話しではないなと思えた。私自身、昨今の開発チームをみていて感じることでもある。クラウドでアプリケーション開発が簡単になったがために基礎がなく、スキルが低い開発者もメンバーの一員として働けるようになった。もちろん最初は誰もがそうだけど、適切な指導や教育を受けないとそのまま経験年数だけが経ってしまう。さらにそんな人が偶然リーダーになってしまうと &lt;a href="https://yshibata.blog.ss-blog.jp/2016-07-01">許される無知の範囲は開発経験年数に反比例する&lt;/a> という現象が起きる。一定の水準を超えていない開発者がなにを作ってもうまくいかないのではないかと私は感じるようになってきた。私はそういったプロダクトを「ただ動くだけ」と呼んでいる。その後の拡張や保守に必要以上にコストがかかり、それが原因で将来の開発計画に支障をきたすこともある。そして、多くのケースでその状況を作った人はその後いないことが多い。&lt;/p></content></item><item><title>コーポレートファイナンスの入門</title><link>/diary/posts/2022/0723/</link><pubDate>Sat, 23 Jul 2022 09:12:13 +0900</pubDate><guid>/diary/posts/2022/0723/</guid><description>0時に寝て6時に起きて7時半に起きた。
ストレッチ 今日の開脚幅は開始前158cmで、ストレッチ後162cmだった。まだ右腰と右股関節、両腕の張りは少し残っているものの、先週末の田んぼ仕事の疲労はかなり抜けた。今週は暑くて家に帰ってきたらエアコンをつけてだらだらしていたのであまり数値はよくならないんじゃないかと思っていて、実際に開始前の数値はいま一つだったんだけど、ストレッチを受けたらいつも通りに戻った。トレーナーさんと雑談しているときにふと「毎日パソコンを使いますか？」と質問を受けた。トレーナーさんからプログラマーの自分にとってそんな質問をされるとは予想外で思わず吹き出して笑ってしまった。その質問は「毎日水を飲みますか？」と私にとっては同じですよと答えた。トレーナーさんも愚問だったと理解して一緒に笑ってた。
もてなしだけではもう食えない 第7章 ホテルが客を動かせ ホテル側が自分たちの問題を解決するために客の行動を制御するといった展開になっている。米国のスーパーマーケットでは Express Lane という、購入品目が少ない客向けに手早く決済するためのレジが設けられているらしい。日本にはないのかな？この運用には客に学習コストを強いるのが欠点となる。キャパシティ問題の問題解決のアプローチは次の3つになる。
キャパシティを増やす 供給を変える 需要を変える 本章の展開としては3番目の客側の導線や行動を変えてしまう方法で需要を変える手法が説明されている。本題ではないけど、さらっと出てくる説明にも納得感がある。ダメなホテルの共通点として、他社でうまくいった改善策、ベストプラクティスに飛びつき、それ以上考えようとせず、問題の本質を理解しようとしない。そういうホテルはコンサルタントが去ってしまうといずれでダメな経営に陥るとある。ホテルに限らず、ダメな会社の特徴だと思う。
客にピーク時の利用を避けてもらうための施策として次の2つがある。
混雑することをあらかじめ伝えておく 混雑を避けることのインセンティブをつける ホテル側が客の行動をコントロールするのは構わないが、客にとってそれが不利益にならないように配慮する必要がある。人間の心理として混雑することがあらかじめわかっていればクレームにならず許容できたりする。人は不意に混雑に出くわして不満をもつことが多いという。そういった人の心理を利用して人の行動を制御して経営に生かすという考え方は比較的新しい研究領域である。行動経済学などもその分野の1つで、古典経済学では人は合理的に行動するとされてきた。しかし、現実では必ずしもそうではないことも行動経済学によってわかってきた。
第8章 リスクを知らないリスク 親会社の不動産会社からリスク管理報告書を提出しろという業務に沿ってリスクマネジメントについての話題が出てくる。契約の話しだったり、建築に関する話しだったり、あまり一般的な経営とは異なる内容にみえる。余談だけど、過去にうちの会社で業務内容が変わったにも関わらず、契約内容を更新せずに更新された新たな業務を継続してうまくいかなかった経験がある。うまくいかなかったときに原点に立ち戻る場所が契約であり、契約を曖昧に扱うと後でしっぺ返しがあるという失敗をまさに経験した。ふりかえりをするときにそもそもの基準が適切でないとその反省や改善点も曖昧になってしまうという話し。
さて、リスク管理報告書のアウトラインとして次の用語が出てくる。
ハザードコントロール ハザードとは危険を生じさせるもののこと ホテル経営だと、食中毒を防ぐ施策とか、横領できないように決済承認に2名以上必要とか ペリルコントロール ペリルとは事件・事故のこと 起きてしまった事件・事故から最小限の損害・被害に食い止める施策 ロスコントロール ロスとは事故発生時に発生してしまった経済的損失のこと 具体的には保険購入であり、どんな保険にどのぐらいの補償額で加入するかになるが、これがなかなか難しい peril という英単語の辞書を引くと、差し迫った危険という意味が出てくる。リスク管理の文脈の用語と英語の意味はやや違うのかもしれない。
第9章 タイムバリューを理解せよ 親会社に投資ファンドからホテルの買収提案があり、ホテルの事業価値を測るコーポレートファイナンスの話題が出てくる。上場企業であれば株価 x 発行済株式数で時価総額がすぐにわかるが、未上場企業の価値を査定するのは難しいという説明からその手法が紹介される。
類似業種比準方式 上場している同業者の株価を参考にする 但し、ビジネスモデルを無視して業種だけで比較しようとしても単純比較はできない 不動産を所有しているかどうかで株式評価は大きく異なる。単純に不動産をもっていればよいというわけでもなく、資産と負債のバランスが取れているかが大事。「また貸し」のことを業界用語で転貸 (サブリース) と呼ぶ。
純資産方式 会社のもっているものを全部売って借金を返した残りのお金という評価方法 貸借対照表の資本がマイナスになっているとすべてを換金しても負債が残る = 債務超過 株価の利回りを株価収益率 (Price Earnings Ratio: PER) と呼ぶ。時価総額 / 純利益で計算される。この計算式から時価総額を知りたければ、純利益 x PER で計算できる。比較可能な会社の PER がわかれば未上場会社の株価を計算できる。但し、PER は会社が未来永劫事業を継続させることを前提としている。会社の継続性に疑義があると PER を用いる根拠がなくなる。株主に説明するときの利益とは、正式には 税引き後当期利益 になる。この金額から配当がなされる。うちの会社だとざっくり粗利から20-30%ほど (法人税 + 消費税) 引いたものが税引き後当期利益になる。会社が予定する配当額は同じだが、株価をディスカウントすることで配当の利回りをよくするという考え方を リスクプレミアム と呼ぶ。会社の展望や事業の不確実性を数値化したとみなすことができる。</description><content>&lt;p>0時に寝て6時に起きて7時半に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前158cmで、ストレッチ後162cmだった。まだ右腰と右股関節、両腕の張りは少し残っているものの、先週末の田んぼ仕事の疲労はかなり抜けた。今週は暑くて家に帰ってきたらエアコンをつけてだらだらしていたのであまり数値はよくならないんじゃないかと思っていて、実際に開始前の数値はいま一つだったんだけど、ストレッチを受けたらいつも通りに戻った。トレーナーさんと雑談しているときにふと「毎日パソコンを使いますか？」と質問を受けた。トレーナーさんからプログラマーの自分にとってそんな質問をされるとは予想外で思わず吹き出して笑ってしまった。その質問は「毎日水を飲みますか？」と私にとっては同じですよと答えた。トレーナーさんも愚問だったと理解して一緒に笑ってた。&lt;/p>
&lt;h2 id="もてなしだけではもう食えない">もてなしだけではもう食えない&lt;/h2>
&lt;h4 id="第7章-ホテルが客を動かせ">第7章 ホテルが客を動かせ&lt;/h4>
&lt;p>ホテル側が自分たちの問題を解決するために客の行動を制御するといった展開になっている。米国のスーパーマーケットでは Express Lane という、購入品目が少ない客向けに手早く決済するためのレジが設けられているらしい。日本にはないのかな？この運用には客に学習コストを強いるのが欠点となる。キャパシティ問題の問題解決のアプローチは次の3つになる。&lt;/p>
&lt;ol>
&lt;li>キャパシティを増やす&lt;/li>
&lt;li>供給を変える&lt;/li>
&lt;li>需要を変える&lt;/li>
&lt;/ol>
&lt;p>本章の展開としては3番目の客側の導線や行動を変えてしまう方法で需要を変える手法が説明されている。本題ではないけど、さらっと出てくる説明にも納得感がある。ダメなホテルの共通点として、他社でうまくいった改善策、ベストプラクティスに飛びつき、それ以上考えようとせず、問題の本質を理解しようとしない。そういうホテルはコンサルタントが去ってしまうといずれでダメな経営に陥るとある。ホテルに限らず、ダメな会社の特徴だと思う。&lt;/p>
&lt;p>客にピーク時の利用を避けてもらうための施策として次の2つがある。&lt;/p>
&lt;ul>
&lt;li>混雑することをあらかじめ伝えておく&lt;/li>
&lt;li>混雑を避けることのインセンティブをつける&lt;/li>
&lt;/ul>
&lt;p>ホテル側が客の行動をコントロールするのは構わないが、客にとってそれが不利益にならないように配慮する必要がある。人間の心理として混雑することがあらかじめわかっていればクレームにならず許容できたりする。人は不意に混雑に出くわして不満をもつことが多いという。そういった人の心理を利用して人の行動を制御して経営に生かすという考え方は比較的新しい研究領域である。行動経済学などもその分野の1つで、古典経済学では人は合理的に行動するとされてきた。しかし、現実では必ずしもそうではないことも行動経済学によってわかってきた。&lt;/p>
&lt;h4 id="第8章-リスクを知らないリスク">第8章 リスクを知らないリスク&lt;/h4>
&lt;p>親会社の不動産会社からリスク管理報告書を提出しろという業務に沿ってリスクマネジメントについての話題が出てくる。契約の話しだったり、建築に関する話しだったり、あまり一般的な経営とは異なる内容にみえる。余談だけど、過去にうちの会社で業務内容が変わったにも関わらず、契約内容を更新せずに更新された新たな業務を継続してうまくいかなかった経験がある。うまくいかなかったときに原点に立ち戻る場所が契約であり、契約を曖昧に扱うと後でしっぺ返しがあるという失敗をまさに経験した。ふりかえりをするときにそもそもの基準が適切でないとその反省や改善点も曖昧になってしまうという話し。&lt;/p>
&lt;p>さて、リスク管理報告書のアウトラインとして次の用語が出てくる。&lt;/p>
&lt;ul>
&lt;li>ハザードコントロール
&lt;ul>
&lt;li>ハザードとは危険を生じさせるもののこと&lt;/li>
&lt;li>ホテル経営だと、食中毒を防ぐ施策とか、横領できないように決済承認に2名以上必要とか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ペリルコントロール
&lt;ul>
&lt;li>ペリルとは事件・事故のこと&lt;/li>
&lt;li>起きてしまった事件・事故から最小限の損害・被害に食い止める施策&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ロスコントロール
&lt;ul>
&lt;li>ロスとは事故発生時に発生してしまった経済的損失のこと&lt;/li>
&lt;li>具体的には保険購入であり、どんな保険にどのぐらいの補償額で加入するかになるが、これがなかなか難しい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>peril という英単語の辞書を引くと、差し迫った危険という意味が出てくる。リスク管理の文脈の用語と英語の意味はやや違うのかもしれない。&lt;/p>
&lt;h4 id="第9章-タイムバリューを理解せよ">第9章 タイムバリューを理解せよ&lt;/h4>
&lt;p>親会社に投資ファンドからホテルの買収提案があり、ホテルの事業価値を測るコーポレートファイナンスの話題が出てくる。上場企業であれば株価 x 発行済株式数で時価総額がすぐにわかるが、未上場企業の価値を査定するのは難しいという説明からその手法が紹介される。&lt;/p>
&lt;ul>
&lt;li>類似業種比準方式
&lt;ul>
&lt;li>上場している同業者の株価を参考にする&lt;/li>
&lt;li>但し、ビジネスモデルを無視して業種だけで比較しようとしても単純比較はできない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>不動産を所有しているかどうかで株式評価は大きく異なる。単純に不動産をもっていればよいというわけでもなく、資産と負債のバランスが取れているかが大事。「また貸し」のことを業界用語で転貸 (サブリース) と呼ぶ。&lt;/p>
&lt;ul>
&lt;li>純資産方式
&lt;ul>
&lt;li>会社のもっているものを全部売って借金を返した残りのお金という評価方法&lt;/li>
&lt;li>貸借対照表の資本がマイナスになっているとすべてを換金しても負債が残る = 債務超過&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>株価の利回りを株価収益率 (Price Earnings Ratio: PER) と呼ぶ。時価総額 / 純利益で計算される。この計算式から時価総額を知りたければ、純利益 x PER で計算できる。比較可能な会社の PER がわかれば未上場会社の株価を計算できる。但し、PER は会社が未来永劫事業を継続させることを前提としている。会社の継続性に疑義があると PER を用いる根拠がなくなる。株主に説明するときの利益とは、正式には &lt;strong>税引き後当期利益&lt;/strong> になる。この金額から配当がなされる。うちの会社だとざっくり粗利から20-30%ほど (法人税 + 消費税) 引いたものが税引き後当期利益になる。会社が予定する配当額は同じだが、株価をディスカウントすることで配当の利回りをよくするという考え方を &lt;strong>リスクプレミアム&lt;/strong> と呼ぶ。会社の展望や事業の不確実性を数値化したとみなすことができる。&lt;/p>
&lt;ul>
&lt;li>株価1000円で配当額が20円だと、利回りは2.0%&lt;/li>
&lt;li>株価500円で配当額が20円だと、利回りは4.0% (この 2.0% の差がリスクプレミアム)&lt;/li>
&lt;/ul>
&lt;p>いま現在もらえる現金の1万円は1年後もらえる1万円よりも価値が高いと言える。それは1年後にはもらえないかもしれないリスクや運用機会損失リスクが含まれるから。その価値をどの程度低く見積もるかを &lt;strong>割引率&lt;/strong> と言う。この割引率を用いて将来の現金をいまの現金価値に置き換える評価方法を &lt;strong>DCF (Discounted Cash Flow) 法&lt;/strong> と呼ぶ。仮に割引率を10%とすると、1年後の100万円をいまの価値にすると、100 / (1 + 0.1) = 90.9 万円になる。2年後の100万円だと 100 / (1 + 0.1)^2 = 82.6 万円になる。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0723_dcf-expression.png"/>
&lt;/figure>
&lt;p>本文中ではこの計算式を使って年間の利益と割引率を考慮した現在価値をエクセルでモデル化している。python で書くと次のようになる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(profit, discount_rate, year):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">...&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> profit &lt;span style="color:#f92672">/&lt;/span> pow((&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">+&lt;/span> discount_rate), year)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> i, profit &lt;span style="color:#f92672">in&lt;/span> enumerate([&lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">120&lt;/span>, &lt;span style="color:#ae81ff">125&lt;/span>, &lt;span style="color:#ae81ff">130&lt;/span>, &lt;span style="color:#ae81ff">135&lt;/span>, &lt;span style="color:#ae81ff">140&lt;/span>, &lt;span style="color:#ae81ff">145&lt;/span>, &lt;span style="color:#ae81ff">150&lt;/span>, &lt;span style="color:#ae81ff">155&lt;/span>, &lt;span style="color:#ae81ff">160&lt;/span>, &lt;span style="color:#ae81ff">165&lt;/span>], &lt;span style="color:#ae81ff">1&lt;/span>): i, round(f(profit, &lt;span style="color:#ae81ff">0.1&lt;/span>, i), &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">90.9&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">99.2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">93.9&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">88.8&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">83.8&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">79.0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">74.4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">70.0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ae81ff">9&lt;/span>, &lt;span style="color:#ae81ff">65.7&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">61.7&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#ae81ff">11&lt;/span>, &lt;span style="color:#ae81ff">57.8&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例えば、割引率が10%で5年後の利益が135万円ならば、その現在価値は83.8万円になる。本文の中ではこの金額が投資ファンドが提示している金額だとだいたい一致していることから、これ以上の精度の高いモデルを作らないといけないみたいなストーリー展開になっている。いずれにしてもパラメーターの変数の精度が高くないと適切なモデルとは言えない。割引率を用いた現在価値を計算する考え方を &lt;strong>タイムバリュー (時間の価値)&lt;/strong> と呼ぶ。意思決定が遅れるほどプロジェクトの収益化も遅れるため、割引率を計算する現在価値が小さくなっていくという考え方ができる。&lt;/p></content></item><item><title>サービスインとスプリント</title><link>/diary/posts/2022/0719/</link><pubDate>Tue, 19 Jul 2022 18:07:24 +0900</pubDate><guid>/diary/posts/2022/0719/</guid><description>1時に寝て7時に起きた。
2つ目のサービスイン スプリントの最終日が今日になる。しかし、今日はサービスインの作業でバタバタしているので主要な開発者は運用サポートしたり、PO もシステムの切り替え対応で fix したタスクの検証ができないといった理由でこれ以上タスクを進捗できそうにないことを容易に想像できた。スプリントゴールに掲げたタスクのうち、9項目中2つしか完了してないという状況だった。ちょうど夕方にスクラムのふりかえりもあったので、今回のスプリントは一体何なの？みたいな懸念から始まって、やる必要があるのかないのか曖昧な優先度設定はよくないという意見が出ていた。サービスインする週にスプリントをやるのもおかしいというのは前回も私はコメントしていたんだけど、今回も全く同じことが話題に出ていて、過去の失敗から学ばないチームになってた。
個人的に、開発のマネジメントにおいて、できもしない (やる気もない) 納期を設定するのが嫌い。私が古い人間なのかもしれないけど、納期が設定されてそれが大事なんだと認識したらどんな手段を使っても納期に間に合わせようとする。例えば、泊まりがけで開発したり、深夜早朝・休日に開発したり、大事なんだったら間に合わせる。しかし、労力を払って間に合わせたものの、他のメンバーやタスクはそうじゃなかったりして、遅れても何も起きないとがんばってやった人がしんどかっただけで終わる。過去にそういう状況を何度も経験してきてやる気をなくすことが多かった。
もてなしだけではもう食えない 第6章 営業予算の使い方 米国帰りのマーケッターという新たな登場人物。学部から米国の大学に留学すると米国史を英語で学ぶのが大変みたいな余談が出てくる。日本史は2000年を長く薄く勉強するが、米国史は200年しかないから内容が濃いのと最近の話だから史料も多く細かい史実を学ぶ必要があるという。全然、本題じゃないけど、歴史好きの私としてはおやと思えて楽しめた。いくら敏腕なマーケッターでも業務知識がないと空回りしてしまう。マーケティングの精度をあげるために必要ならば、その教育コストもマーケティング予算から捻出すべきだといった話しも出てくる。普段、会計システムに勘定科目を調べながら経費を入力している私にとってはなるほどなぁと、またまた本題ではないところで感心してしまった。
統計学のp値が5%以下ということは95%の確率でそのデータ上の差が実際に起き得る確率を表す。統計学は大事だとか、エクセルを駆使してデータ処理しろとか、そういう話題も出てくる。あとは古典的なマーケティングの手法として AIDMA モデルが紹介されている。基本的な考え方として知っておいたら役に立つときもあるかもしれない。
Attention (注目) Interest (興味) Desire (欲求) Memory (記憶) Action (行動) 例えば、Attention は情報誌に広告を出してみてもらうようなフェーズを指す。みてもらったら Interest に移る。口コミの内容で興味をもってもらうとか。興味をもってもらったら Desire として実際のサービスを体験してもらったりしてより強い欲求をもってもらう。一般論として Desire から Action へは間があくこともある。記憶させておいてそれを呼び戻すためのフェーズが Memory になる。最後の Action で成約を得て収益になるといった一連の流れを指す。</description><content>&lt;p>1時に寝て7時に起きた。&lt;/p>
&lt;h2 id="2つ目のサービスイン">2つ目のサービスイン&lt;/h2>
&lt;p>スプリントの最終日が今日になる。しかし、今日はサービスインの作業でバタバタしているので主要な開発者は運用サポートしたり、PO もシステムの切り替え対応で fix したタスクの検証ができないといった理由でこれ以上タスクを進捗できそうにないことを容易に想像できた。スプリントゴールに掲げたタスクのうち、9項目中2つしか完了してないという状況だった。ちょうど夕方にスクラムのふりかえりもあったので、今回のスプリントは一体何なの？みたいな懸念から始まって、やる必要があるのかないのか曖昧な優先度設定はよくないという意見が出ていた。サービスインする週にスプリントをやるのもおかしいというのは前回も私はコメントしていたんだけど、今回も全く同じことが話題に出ていて、過去の失敗から学ばないチームになってた。&lt;/p>
&lt;p>個人的に、開発のマネジメントにおいて、できもしない (やる気もない) 納期を設定するのが嫌い。私が古い人間なのかもしれないけど、納期が設定されてそれが大事なんだと認識したらどんな手段を使っても納期に間に合わせようとする。例えば、泊まりがけで開発したり、深夜早朝・休日に開発したり、大事なんだったら間に合わせる。しかし、労力を払って間に合わせたものの、他のメンバーやタスクはそうじゃなかったりして、遅れても何も起きないとがんばってやった人がしんどかっただけで終わる。過去にそういう状況を何度も経験してきてやる気をなくすことが多かった。&lt;/p>
&lt;h2 id="もてなしだけではもう食えない">もてなしだけではもう食えない&lt;/h2>
&lt;h4 id="第6章-営業予算の使い方">第6章 営業予算の使い方&lt;/h4>
&lt;p>米国帰りのマーケッターという新たな登場人物。学部から米国の大学に留学すると米国史を英語で学ぶのが大変みたいな余談が出てくる。日本史は2000年を長く薄く勉強するが、米国史は200年しかないから内容が濃いのと最近の話だから史料も多く細かい史実を学ぶ必要があるという。全然、本題じゃないけど、歴史好きの私としてはおやと思えて楽しめた。いくら敏腕なマーケッターでも業務知識がないと空回りしてしまう。マーケティングの精度をあげるために必要ならば、その教育コストもマーケティング予算から捻出すべきだといった話しも出てくる。普段、会計システムに勘定科目を調べながら経費を入力している私にとってはなるほどなぁと、またまた本題ではないところで感心してしまった。&lt;/p>
&lt;p>統計学のp値が5%以下ということは95%の確率でそのデータ上の差が実際に起き得る確率を表す。統計学は大事だとか、エクセルを駆使してデータ処理しろとか、そういう話題も出てくる。あとは古典的なマーケティングの手法として AIDMA モデルが紹介されている。基本的な考え方として知っておいたら役に立つときもあるかもしれない。&lt;/p>
&lt;ol>
&lt;li>Attention (注目)&lt;/li>
&lt;li>Interest (興味)&lt;/li>
&lt;li>Desire (欲求)&lt;/li>
&lt;li>Memory (記憶)&lt;/li>
&lt;li>Action (行動)&lt;/li>
&lt;/ol>
&lt;p>例えば、Attention は情報誌に広告を出してみてもらうようなフェーズを指す。みてもらったら Interest に移る。口コミの内容で興味をもってもらうとか。興味をもってもらったら Desire として実際のサービスを体験してもらったりしてより強い欲求をもってもらう。一般論として Desire から Action へは間があくこともある。記憶させておいてそれを呼び戻すためのフェーズが Memory になる。最後の Action で成約を得て収益になるといった一連の流れを指す。&lt;/p></content></item><item><title>業界研究を再開した</title><link>/diary/posts/2022/0718/</link><pubDate>Mon, 18 Jul 2022 12:18:44 +0900</pubDate><guid>/diary/posts/2022/0718/</guid><description>23時に寝て9時に起きた。昨日の疲労でよく眠れなくてバテてた。午後から会社の雑務をしていた。
もてなしだけではもう食えない 少しずつ読んでいく と書いてから3ヶ月読んでなかった。ホテルに限らず、ビジネス一般論としても通じるところが多かったように思う。経営の一般論とでも言うべきか。
第3章 お客さまは神様とは限らない ビジネスの世界は大学のケーススタディみたいに物事がきれいに整理されているわけじゃない 顧客満足度とは本来、企業収益と正の相関関係があるはず 正の相関関係とはAが1増えたらBが1増える 相関係数は-1から1まで 1だと正の相関係数が最大で、0だと無関係、-1だとBが1減る 顧客のロイヤリティとは、再訪するか、他者に推薦するか、商品やサービスに対する信頼や共感を指す ロイヤリティには2つの意味があって、これはマーケティングの分野で使われる意味 従業員満足度の向上が対外サービスレベルを上げ、それが顧客満足度を上げ、結果としてオーナー満足度を上げる 放置できる不満は放置される、経営学的にみて正しい行い 主人公は学生時代の成績が悪かったことから分からないと言えることが強みという説明文が出てきて、教授の説明が理解できないときにどんどん質問して丁寧に説明してもらうというやり取りになっている。この言葉を引き出すために主人公は仕事ができない人設定にしているのかとも考えられる。異世界モノにしてしまえば、こんな説明はいらないなとか読んでて思った。
第4章 「立ち入り禁止」の向こう側 会計は用途によって会計基準が異なる。
財務会計: 損益計算書や賃借対照表といった財務諸表に集約される 管理会計: 経営者が経営状況を把握するための会計書類作成の基準となる 部門別損益やセグメント別の分析などをする 会社ごとにばらばらでもよい 経営者が知りたい情報が指標になっていればよい ユニフォームシステムという部門別損益を計算するホテル業界の標準的な会計基準について紹介されていた。米国発祥なので日本での普及率は低いらしい。この話題の中でマネージャーの業績考課やボーナス査定の話しが出てくる。そして、マネージャーのコントロール外の非配賦費用を部門別会計に含めないのはマネージャーの実績を測れないからだと説明されている。つまり、ユニフォームシステムという管理会計の仕組みと人事システムはセットでないと業績改善効果が薄いという話しにつながる。人事というのは本当に難しいことが伺える説明だと思えた。
管理会計によって部門別の損益の悪いところが明らかとなり、そこに対する改善案が進みそうなストーリー展開になってきた。小説風なのでストーリーが進むと、その先の展開も楽しみになってくる。
第5章 数字を分解せよ 投資計画に対して懐疑的になる背景としてフィージビリティスタディの話題が出てくる。私は言葉を知らなかったので勉強になった。ここではセグメント別に分割して大雑把な小さい数字を推定していくことから始め、その数字の裏付けをより精度の高い手法で行うことで現実的な企画ができるみたいな組み立てになっていた。
投資がどのぐらいの経済効果をもたらすのかを予測することをフィージビリティスタディ (feasibility study) と呼ぶ 日本語では事業化可能性調査、または採算性調査と呼ばれたりもする 収益と投資額の2つの情報から利回りが何%かがわかる できるだけ数字を分割して考えるのが基本 フェルミ推定を使って大雑把な数字から算出するやり方もある 投資によって「追加的な売上」ではなく「追加的な粗利益」を測るべき RFP (Request For Proposal): 提案提出依頼書を作る 専門家へ依頼するときにコンセプトデザインを明確にする コンセプトを専門家に正しく伝えないと適切な提案を受けられない 自分の会社のリソースを確認し、その比較優位に従って企画を立てるのがマーケティングの王道の考え方 主人公からなぜ横文字を多く使うのか？という質問に対して、コンサルタントの教授が答える。まだ定着していない概念を的確に表すには英語のまま使っておいた方がよいという説明が出てくる。私もこのことは全く同意で、もっと言うとカタカナにせずにアルファベットのまま英語で使うとよいと考えている。本題ではないけど、大型連休はプロジェクトの進捗に影響を及ぼすので考慮にしとけよというやり取りが急に出てきてリアリティがある。私がいま手伝っているプロジェクトは GW の休暇を考慮せずにロードマップを策定していて、私が2回ぐらい指摘してあるとき修正されたことがあった。</description><content>&lt;p>23時に寝て9時に起きた。昨日の疲労でよく眠れなくてバテてた。午後から会社の雑務をしていた。&lt;/p>
&lt;h2 id="もてなしだけではもう食えない">もてなしだけではもう食えない&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0308/#もてなしだけではもう食えない">少しずつ読んでいく&lt;/a> と書いてから3ヶ月読んでなかった。ホテルに限らず、ビジネス一般論としても通じるところが多かったように思う。経営の一般論とでも言うべきか。&lt;/p>
&lt;h4 id="第3章-お客さまは神様とは限らない">第3章 お客さまは神様とは限らない&lt;/h4>
&lt;ul>
&lt;li>ビジネスの世界は大学のケーススタディみたいに物事がきれいに整理されているわけじゃない&lt;/li>
&lt;li>顧客満足度とは本来、企業収益と正の相関関係があるはず
&lt;ul>
&lt;li>正の相関関係とはAが1増えたらBが1増える&lt;/li>
&lt;li>相関係数は-1から1まで&lt;/li>
&lt;li>1だと正の相関係数が最大で、0だと無関係、-1だとBが1減る&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>顧客のロイヤリティとは、再訪するか、他者に推薦するか、商品やサービスに対する信頼や共感を指す
&lt;ul>
&lt;li>ロイヤリティには2つの意味があって、これはマーケティングの分野で使われる意味&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>従業員満足度の向上が対外サービスレベルを上げ、それが顧客満足度を上げ、結果としてオーナー満足度を上げる&lt;/li>
&lt;li>放置できる不満は放置される、経営学的にみて正しい行い&lt;/li>
&lt;/ul>
&lt;p>主人公は学生時代の成績が悪かったことから分からないと言えることが強みという説明文が出てきて、教授の説明が理解できないときにどんどん質問して丁寧に説明してもらうというやり取りになっている。この言葉を引き出すために主人公は仕事ができない人設定にしているのかとも考えられる。異世界モノにしてしまえば、こんな説明はいらないなとか読んでて思った。&lt;/p>
&lt;h4 id="第4章-立ち入り禁止の向こう側">第4章 「立ち入り禁止」の向こう側&lt;/h4>
&lt;p>会計は用途によって会計基準が異なる。&lt;/p>
&lt;ul>
&lt;li>財務会計: 損益計算書や賃借対照表といった財務諸表に集約される&lt;/li>
&lt;li>管理会計: 経営者が経営状況を把握するための会計書類作成の基準となる
&lt;ul>
&lt;li>部門別損益やセグメント別の分析などをする&lt;/li>
&lt;li>会社ごとにばらばらでもよい&lt;/li>
&lt;li>経営者が知りたい情報が指標になっていればよい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>ユニフォームシステムという部門別損益を計算するホテル業界の標準的な会計基準について紹介されていた。米国発祥なので日本での普及率は低いらしい。この話題の中でマネージャーの業績考課やボーナス査定の話しが出てくる。そして、マネージャーのコントロール外の非配賦費用を部門別会計に含めないのはマネージャーの実績を測れないからだと説明されている。つまり、ユニフォームシステムという管理会計の仕組みと人事システムはセットでないと業績改善効果が薄いという話しにつながる。人事というのは本当に難しいことが伺える説明だと思えた。&lt;/p>
&lt;p>管理会計によって部門別の損益の悪いところが明らかとなり、そこに対する改善案が進みそうなストーリー展開になってきた。小説風なのでストーリーが進むと、その先の展開も楽しみになってくる。&lt;/p>
&lt;h4 id="第5章-数字を分解せよ">第5章 数字を分解せよ&lt;/h4>
&lt;p>投資計画に対して懐疑的になる背景としてフィージビリティスタディの話題が出てくる。私は言葉を知らなかったので勉強になった。ここではセグメント別に分割して大雑把な小さい数字を推定していくことから始め、その数字の裏付けをより精度の高い手法で行うことで現実的な企画ができるみたいな組み立てになっていた。&lt;/p>
&lt;ul>
&lt;li>投資がどのぐらいの経済効果をもたらすのかを予測することをフィージビリティスタディ (feasibility study) と呼ぶ
&lt;ul>
&lt;li>日本語では事業化可能性調査、または採算性調査と呼ばれたりもする&lt;/li>
&lt;li>収益と投資額の2つの情報から利回りが何%かがわかる&lt;/li>
&lt;li>できるだけ数字を分割して考えるのが基本
&lt;ul>
&lt;li>フェルミ推定を使って大雑把な数字から算出するやり方もある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>投資によって「追加的な売上」ではなく「追加的な粗利益」を測るべき&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>RFP (Request For Proposal): 提案提出依頼書を作る
&lt;ul>
&lt;li>専門家へ依頼するときにコンセプトデザインを明確にする&lt;/li>
&lt;li>コンセプトを専門家に正しく伝えないと適切な提案を受けられない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>自分の会社のリソースを確認し、その比較優位に従って企画を立てるのがマーケティングの王道の考え方&lt;/li>
&lt;/ul>
&lt;p>主人公からなぜ横文字を多く使うのか？という質問に対して、コンサルタントの教授が答える。まだ定着していない概念を的確に表すには英語のまま使っておいた方がよいという説明が出てくる。私もこのことは全く同意で、もっと言うとカタカナにせずにアルファベットのまま英語で使うとよいと考えている。本題ではないけど、大型連休はプロジェクトの進捗に影響を及ぼすので考慮にしとけよというやり取りが急に出てきてリアリティがある。私がいま手伝っているプロジェクトは GW の休暇を考慮せずにロードマップを策定していて、私が2回ぐらい指摘してあるとき修正されたことがあった。&lt;/p></content></item><item><title>ゾンビスクラムを教えてもらった</title><link>/diary/posts/2022/0708/</link><pubDate>Fri, 08 Jul 2022 08:31:35 +0900</pubDate><guid>/diary/posts/2022/0708/</guid><description>2時に寝て7時に起きた。今週はバテた。金曜日は非稼働日だけど、バタバタしているから普通に働いていた。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今週はお手伝い先がサービスインでバタバタしていて議題の準備がほとんどできなかった。少し前に参加したアトラシアンさんのウェブセミナーのスライド資料が公開されたのでそれを眺めながら雑談していた。
jira の有料プランのサービスに jsm chat という halp の技術を活かした新機能が追加されたらしい。既存プランの延長上で使えるらしい。質疑応答のときに halp とは別プロダクトだと明確に回答していたので halp が今後どうなっていくのかの将来にはかなり懸念がある。チャットと課題管理システムの双方向連携という、slack や teams といったチャットサービスがよく使われるようになった昨今のビジネス事情にあわせたサービスと言えるだろう。
私も以前からその領域に課題意識をもっていたし、ベンチャーでは workstreams.ai も同様のサービスを提供している。満を持してというのか、(私にとっての) 課題管理システムのベースラインとなる jira にその機能が入ったことで競合製品も同様に機能拡張を提供していく気がする。1-2年後にはチャットと課題管理システムが双方向連携しているのが当たり前の開発スタイルになるのかもしれない。非開発者にとってはチケットを扱うよりも敷居が下がるのでそれは適切な世の中の変化だと私は考えている。
ゾンビスクラム jsm chat と課題管理の話しをしているうちにスクラムの話題になった。Zombie Scrum Survival Guide という書籍があって形骸化したスクラムの特徴をまとめているらしい。ある記事で2021年から翻訳していると書いてあったので翻訳版が出版されたら読んでみようと思う。
「ゾンビスクラムサバイバルガイド」読んだ飼育係の日記 ゾンビスクラムの4つの症状 ゾンビスクラムを解決するための10の成功要因 ブログ記事の所感を読んだ感じだと、私がいま関わっているスクラムにも一部通じるところがあるなと思って関心がある。
うちのチームは1週間スプリントをもう1年近く続けているのだけど、これは検査が早い段階でできるというメリットがあるものの、開発のメリハリがないなぁとずっと思ってた。それはただ与えられたタスクを無理なくこなすだけというルーチンになってしまっているのと、昨今の労務管理を徹底する働き方改革？のせいか、残業・休出を一切やらない開発スタイルが開発者の自律性や意欲を削いでしまっているのではないかとも思う。もちろん「余白」があれば、業務時間内に好きなことをやったらよいと思うけれど、うちの場合は半分ぐらいのスプリントゴールが未達で、スプリントに達成できないタスクを盛り込むからスプリントゴール未達の状態で他のことをやるのが憚られる空気がある。もっとも好き勝手やっている私がそれを感じるのだから、若い開発者には相応のプレッシャーになっていると思う。結果として、指示されたタスク (プランニングで決めたこと) 以外のことはやらない雰囲気になってしまっている。試しに直近3ヶ月のスプリントバックログアイテムの種別のみで開発者のチケット登録した数をカウントすると次のようになった。
私: 66件 開発リーダー: 17件 開発者1: 14件 開発者2: 12件 開発者3: 1件 開発者4: 6件 これは課題管理システムに慣れていて、業務をタスク分解しながら作業していくというワークフローに私が最も習熟しているから、適度な粒度のチケットをいくつも作りながら作業をやっているという背景もある。しかし、いまやらなくてもいずれ必要なタスクも、業務をやりながら気付いたときに私は随時登録している。憚られる空気を感じている私が週4日労働で控えめにやっても3ヶ月でもこれだけの数が開く。要はゾンビスクラムだと開発者の自律性は期待できないという話し。</description><content>&lt;p>2時に寝て7時に起きた。今週はバテた。金曜日は非稼働日だけど、バタバタしているから普通に働いていた。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今週はお手伝い先がサービスインでバタバタしていて議題の準備がほとんどできなかった。少し前に参加したアトラシアンさんのウェブセミナーのスライド資料が公開されたのでそれを眺めながら雑談していた。&lt;/p>
&lt;iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/18fafd386a534aa3b8cab2807af37b68" title="チャット連携で問い合わせ対応にスピードと透明性を ー Jira Service Managementで実現する対話型チケット管理/JSM-Chat-Webinar-20220629" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;" data-ratio="1.78343949044586">&lt;/iframe>
&lt;p>jira の有料プランのサービスに jsm chat という &lt;a href="https://www.atlassian.com/software/halp/jira">halp&lt;/a> の技術を活かした新機能が追加されたらしい。既存プランの延長上で使えるらしい。質疑応答のときに halp とは別プロダクトだと明確に回答していたので halp が今後どうなっていくのかの将来にはかなり懸念がある。チャットと課題管理システムの双方向連携という、slack や teams といったチャットサービスがよく使われるようになった昨今のビジネス事情にあわせたサービスと言えるだろう。&lt;/p>
&lt;p>私も以前からその領域に課題意識をもっていたし、ベンチャーでは &lt;a href="https://www.workstreams.ai/">workstreams.ai&lt;/a> も同様のサービスを提供している。満を持してというのか、(私にとっての) 課題管理システムのベースラインとなる jira にその機能が入ったことで競合製品も同様に機能拡張を提供していく気がする。1-2年後にはチャットと課題管理システムが双方向連携しているのが当たり前の開発スタイルになるのかもしれない。非開発者にとってはチケットを扱うよりも敷居が下がるのでそれは適切な世の中の変化だと私は考えている。&lt;/p>
&lt;h2 id="ゾンビスクラム">ゾンビスクラム&lt;/h2>
&lt;p>jsm chat と課題管理の話しをしているうちにスクラムの話題になった。Zombie Scrum Survival Guide という書籍があって形骸化したスクラムの特徴をまとめているらしい。ある記事で2021年から翻訳していると書いてあったので翻訳版が出版されたら読んでみようと思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://agnozingdays.hatenablog.com/entry/2020/11/17/183803">「ゾンビスクラムサバイバルガイド」読んだ飼育係の日記&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://takaokimura.medium.com/%E3%82%BE%E3%83%B3%E3%83%93%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%A0%E3%81%AE4%E3%81%A4%E3%81%AE%E7%97%87%E7%8A%B6-45efd6e9c655">ゾンビスクラムの4つの症状&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.servantworks.co.jp/posts/10-success-factors-to-resolve-zombie-scrum/">ゾンビスクラムを解決するための10の成功要因&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ブログ記事の所感を読んだ感じだと、私がいま関わっているスクラムにも一部通じるところがあるなと思って関心がある。&lt;/p>
&lt;p>うちのチームは1週間スプリントをもう1年近く続けているのだけど、これは検査が早い段階でできるというメリットがあるものの、開発のメリハリがないなぁとずっと思ってた。それはただ与えられたタスクを無理なくこなすだけというルーチンになってしまっているのと、昨今の労務管理を徹底する働き方改革？のせいか、残業・休出を一切やらない開発スタイルが開発者の自律性や意欲を削いでしまっているのではないかとも思う。もちろん「余白」があれば、業務時間内に好きなことをやったらよいと思うけれど、うちの場合は半分ぐらいのスプリントゴールが未達で、スプリントに達成できないタスクを盛り込むからスプリントゴール未達の状態で他のことをやるのが憚られる空気がある。もっとも好き勝手やっている私がそれを感じるのだから、若い開発者には相応のプレッシャーになっていると思う。結果として、指示されたタスク (プランニングで決めたこと) 以外のことはやらない雰囲気になってしまっている。試しに直近3ヶ月のスプリントバックログアイテムの種別のみで開発者のチケット登録した数をカウントすると次のようになった。&lt;/p>
&lt;ul>
&lt;li>私: 66件&lt;/li>
&lt;li>開発リーダー: 17件&lt;/li>
&lt;li>開発者1: 14件&lt;/li>
&lt;li>開発者2: 12件&lt;/li>
&lt;li>開発者3: 1件&lt;/li>
&lt;li>開発者4: 6件&lt;/li>
&lt;/ul>
&lt;p>これは課題管理システムに慣れていて、業務をタスク分解しながら作業していくというワークフローに私が最も習熟しているから、適度な粒度のチケットをいくつも作りながら作業をやっているという背景もある。しかし、いまやらなくてもいずれ必要なタスクも、業務をやりながら気付いたときに私は随時登録している。憚られる空気を感じている私が週4日労働で控えめにやっても3ヶ月でもこれだけの数が開く。要はゾンビスクラムだと開発者の自律性は期待できないという話し。&lt;/p></content></item><item><title>github actions の改善</title><link>/diary/posts/2022/0318/</link><pubDate>Fri, 18 Mar 2022 10:05:06 +0900</pubDate><guid>/diary/posts/2022/0318/</guid><description>0時に寝て3時に起きて6時に起きた。
失敗したジョブの再実行 せらさんのツィートをみかけて調べたら2日ほど前に失敗したジョブからの再実行の改善が行われたらしい。
GitHub Action で失敗したジョブだけ実行できる様になってる。今まで失敗しやすいものは再実行を小さくするために設定を分けたりとかしていたんだけど、そういうことをしなくてもよくなった。
&amp;mdash; Kazuhiro Sera (瀬良) (@seratch_ja) March 18, 2022 Save time with partial re-runs in GitHub Actions たまにだけど、i/o エラーみたいな内容で github actions のワークフロー実行が異常終了することがある。そんなときに途中から再実行できるといいなぁとは思っていた。これはステップ単位ではなく、ジョブ単位の実行みたいだけど、それでも途中から再実行できればワークフローの自由度や効率は上がると思う。github actions がどんどん強力になっていくのが楽しみ。あとやぎさんから教えてもらった GitHub Actions 実践入門 も購入した。ある程度触ったところで雰囲気は掴めてきたので体系的に学んでみる。</description><content>&lt;p>0時に寝て3時に起きて6時に起きた。&lt;/p>
&lt;h2 id="失敗したジョブの再実行">失敗したジョブの再実行&lt;/h2>
&lt;p>せらさんのツィートをみかけて調べたら2日ほど前に失敗したジョブからの再実行の改善が行われたらしい。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">GitHub Action で失敗したジョブだけ実行できる様になってる。今まで失敗しやすいものは再実行を小さくするために設定を分けたりとかしていたんだけど、そういうことをしなくてもよくなった。&lt;/p>&amp;mdash; Kazuhiro Sera (瀬良) (@seratch_ja) &lt;a href="https://twitter.com/seratch_ja/status/1504664461483085826?ref_src=twsrc%5Etfw">March 18, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;ul>
&lt;li>&lt;a href="https://github.blog/2022-03-16-save-time-partial-re-runs-github-actions/">Save time with partial re-runs in GitHub Actions&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>たまにだけど、i/o エラーみたいな内容で github actions のワークフロー実行が異常終了することがある。そんなときに途中から再実行できるといいなぁとは思っていた。これはステップ単位ではなく、ジョブ単位の実行みたいだけど、それでも途中から再実行できればワークフローの自由度や効率は上がると思う。github actions がどんどん強力になっていくのが楽しみ。あとやぎさんから教えてもらった &lt;a href="https://miyajan.booth.pm/items/1865906">GitHub Actions 実践入門&lt;/a> も購入した。ある程度触ったところで雰囲気は掴めてきたので体系的に学んでみる。&lt;/p></content></item><item><title>デプロイ改善の成果まとめ</title><link>/diary/posts/2022/0308/</link><pubDate>Tue, 08 Mar 2022 06:24:20 +0900</pubDate><guid>/diary/posts/2022/0308/</guid><description>23時に寝て5時過ぎに起きた。何度か途中で起きたけど、久しぶりによく寝た。前日あまり寝てなかったから19時過ぎには帰ってきてだらだらしてた。
もてなしだけではもう食えない 業界研究を兼ねて もてなしだけではもう食えない -ホテル経営学の本質と実践- を読み始めた。同じ出版社の週刊ホテルレストランという雑誌の連載を書籍化したものらしい。著者は立教大学で社会人向けビジネススクールでホテルマネジメントとホテルインベストメントを教えているらしい。ビジネスの堅い話しを小説調にすれば読みやすいんじゃないかみたいな取り組みなのかな？よくわかてないけど、小説仕立てで業界研究ができるような書籍になっているらしい。第1章プロローグと第2章腐りやすい在庫を読んだ。実際の現場でこんな仕事できない人が改革チームのリーダーなんかになったりしないなと思いながら読んでた。そこは本題じゃない！コンサルティングでありそうな経営の話しが出てくるのでうちの会社の経営の勉強にもなるかもしれない。少しずつ読んでいく。
デプロイ改善の成果 水曜日がすくらむのふりかえりイベントがあるのでそれに間に合わせて簡単にまとめの資料を作った。3スプリント (3週間) もかけて抜本的に開発のワークフローからビルド/デプロイの ci/cd を見直したので開発全般に影響を与えた。
本番環境デプロイ: 実行時間を約72%の短縮 テスト環境デプロイ: 実行時間を約51%の短縮 hotfix デプロイ: 実行時間を約64%の短縮 そもそも従来のやり方では hotfix を出していないので机上の時間ではあるが 単純に github actions の実行時間だけ比較しても速くなっているのだけど、それ以上にブランチ戦略を大きく変えた。従来は3つのブランチで運用していた。
develop test main これを1つのブランチのみで運用できるように開発のワークフローを刷新した。ブランチが1つしかないので ci/cd の戦略もシンプルになって、変則的な運用 (hotfix を出したいとか) をしても、開発全体に影響を与えない。「誰か勝手にブランチを作ってデプロイして」で終わる。従来のやり方は3つのブランチが開発ワークフローと ci/cd に密接であったために本番環境のリリースするときは開発すべてが止まってしまう状態だった。週1回のリリースだったので本番リリース前の1-2日は PR のレビューやマージを止めているという運用になっていた。それは開発速度に大きな影響を与えていた。ブランチ戦略を見直したことでいつでも本番環境にデプロイできるようになって、継続的デリバリーっぽいことがやりたかったらできるよという話しをした。</description><content>&lt;p>23時に寝て5時過ぎに起きた。何度か途中で起きたけど、久しぶりによく寝た。前日あまり寝てなかったから19時過ぎには帰ってきてだらだらしてた。&lt;/p>
&lt;h2 id="もてなしだけではもう食えない">もてなしだけではもう食えない&lt;/h2>
&lt;p>業界研究を兼ねて &lt;a href="https://ec.hoteresonline.com/products/detail.php?product_id=262">もてなしだけではもう食えない -ホテル経営学の本質と実践-&lt;/a> を読み始めた。同じ出版社の週刊ホテルレストランという雑誌の連載を書籍化したものらしい。著者は立教大学で社会人向けビジネススクールでホテルマネジメントとホテルインベストメントを教えているらしい。ビジネスの堅い話しを小説調にすれば読みやすいんじゃないかみたいな取り組みなのかな？よくわかてないけど、小説仕立てで業界研究ができるような書籍になっているらしい。第1章プロローグと第2章腐りやすい在庫を読んだ。実際の現場でこんな仕事できない人が改革チームのリーダーなんかになったりしないなと思いながら読んでた。そこは本題じゃない！コンサルティングでありそうな経営の話しが出てくるのでうちの会社の経営の勉強にもなるかもしれない。少しずつ読んでいく。&lt;/p>
&lt;h2 id="デプロイ改善の成果">デプロイ改善の成果&lt;/h2>
&lt;p>水曜日がすくらむのふりかえりイベントがあるのでそれに間に合わせて簡単にまとめの資料を作った。3スプリント (3週間) もかけて抜本的に開発のワークフローからビルド/デプロイの ci/cd を見直したので開発全般に影響を与えた。&lt;/p>
&lt;ul>
&lt;li>本番環境デプロイ: 実行時間を約72%の短縮&lt;/li>
&lt;li>テスト環境デプロイ: 実行時間を約51%の短縮&lt;/li>
&lt;li>hotfix デプロイ: 実行時間を約64%の短縮
&lt;ul>
&lt;li>そもそも従来のやり方では hotfix を出していないので机上の時間ではあるが&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>単純に github actions の実行時間だけ比較しても速くなっているのだけど、それ以上にブランチ戦略を大きく変えた。従来は3つのブランチで運用していた。&lt;/p>
&lt;ul>
&lt;li>develop&lt;/li>
&lt;li>test&lt;/li>
&lt;li>main&lt;/li>
&lt;/ul>
&lt;p>これを1つのブランチのみで運用できるように開発のワークフローを刷新した。ブランチが1つしかないので ci/cd の戦略もシンプルになって、変則的な運用 (hotfix を出したいとか) をしても、開発全体に影響を与えない。「誰か勝手にブランチを作ってデプロイして」で終わる。従来のやり方は3つのブランチが開発ワークフローと ci/cd に密接であったために本番環境のリリースするときは開発すべてが止まってしまう状態だった。週1回のリリースだったので本番リリース前の1-2日は PR のレビューやマージを止めているという運用になっていた。それは開発速度に大きな影響を与えていた。ブランチ戦略を見直したことでいつでも本番環境にデプロイできるようになって、継続的デリバリーっぽいことがやりたかったらできるよという話しをした。&lt;/p></content></item><item><title>不具合調査の翌日</title><link>/diary/posts/2022/0128/</link><pubDate>Fri, 28 Jan 2022 08:14:50 +0900</pubDate><guid>/diary/posts/2022/0128/</guid><description>1時に寝て4時半に起きた。昨日22時過ぎまで作業して23時頃から晩ご飯食べてから寝たわりに、というかそのせいか、パッと起きて金朝ツメトギみて、そのままオフィス行って、午前中は昨日の続きの不具合調査をしてた。
Kindle 本の返品 ある kindle 本を購入したときにアカウントを間違えていることに気付いた。amazon のアカウントは法人アカウントと個人アカウントがある。アプリでアカウントの切り替えは面倒なので、業務で購入する kindle 本も個人アカウントで購入して読んでいる。誤って法人アカウントで kindle 本を購入してしまったので返品したい。システム的に kindle 本の返品機能は提供されていないが、Kindle本を返品する を読むとカスタマーサービスから返品できる。次の記事はスクリーンショットで操作も説明しているのでわかりやすい。
【しまった】Kindle本の返品(キャンセル)方法を画像付きで解説！読んだ後に返品はできる？ カスタマーサービスのチャットを開いて、ボットの質問にいくつか回答して、購入した kindle 本を選択して「その他」からオペーレーターにつながる。6時過ぎだったのにオペレーターがチャットに出てきて、kindle 本を返品したいと書き込んだらすぐに確認して返品処理してくれた。オペレーターは24時間体制なのかな？おそらく購入してすぐだったし、ダウンロードもしていなかったので返品処理がすぐできたのだと推測する。実際の返金処理には2-3日かかるとのこと。チャットで2-3のコメントを書き込めば手続きできたのでシステムはよくできていると思った。そのことを twtter に書き込んだらすぐ Amazon Help にいいねされて、みてるぞって感じでこれはちょっと怖くなった。
アカウントを間違えて、誤って kindle 本を購入してしまってカスタマーサービスからチャットして返品処理できた。この時間でも担当者がつながったので24時間体制でサポートしているんやな。スムーズに手続きできてよかった #金朝ツメトギ
&amp;mdash; Tetsuya Morimoto (@t2y) January 27, 2022 オフィス内覧 オフィスの引っ越し調査のために fabbit神戸三宮 に行ってきた。フリースペースは開放感があって、外の光も入っていて、雰囲気がよさそうにみえた。サービスで1日分のドロップインチケットをもらったので今度使ってみる。個室は2名と4名部屋の2種類。2名部屋はあまり広くないので1名で利用している会員も多いとのこと。
月額利用料: 66,000円 郵便受けサービス: 1,100円 法人登記サービス: 11,000円 法人のオフィスとして使うときは郵便受けと法人登記サービスに入る必要があるとのこと。個室の設備なども含めて比べると、いまのオフィスより割高な料金設定になっているように感じた。その他デメリットもいくつかわかった。
法人登記の場合、入会するときに入会金が44,000円かかる 部屋に備え付けの机や椅子がいらないときは保管場所を自分で用意しないといけない 椅子を変えたかったら備え付けの椅子を自宅に置いとくとか 個室の仕切りがガラス張りで外から中がみえるので社外秘などのセキュリティがやや気になる 顧客情報が流出する可能性があるのと、マット敷いてお昼寝しているときに外からみられたら恥ずかしい 郵便受けが施設内にあるのでスタッフがいないと郵便が届かない (土日に郵便物を受け取れない)</description><content>&lt;p>1時に寝て4時半に起きた。昨日22時過ぎまで作業して23時頃から晩ご飯食べてから寝たわりに、というかそのせいか、パッと起きて金朝ツメトギみて、そのままオフィス行って、午前中は昨日の続きの不具合調査をしてた。&lt;/p>
&lt;h2 id="kindle-本の返品">Kindle 本の返品&lt;/h2>
&lt;p>ある kindle 本を購入したときにアカウントを間違えていることに気付いた。amazon のアカウントは法人アカウントと個人アカウントがある。アプリでアカウントの切り替えは面倒なので、業務で購入する kindle 本も個人アカウントで購入して読んでいる。誤って法人アカウントで kindle 本を購入してしまったので返品したい。システム的に kindle 本の返品機能は提供されていないが、&lt;a href="https://www.amazon.co.jp/gp/help/customer/display.html?nodeId=G937D322PWZ6L9BL">Kindle本を返品する&lt;/a> を読むとカスタマーサービスから返品できる。次の記事はスクリーンショットで操作も説明しているのでわかりやすい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.kyodotokyo.com/book-movie/kindle-book-return/">【しまった】Kindle本の返品(キャンセル)方法を画像付きで解説！読んだ後に返品はできる？&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>カスタマーサービスのチャットを開いて、ボットの質問にいくつか回答して、購入した kindle 本を選択して「その他」からオペーレーターにつながる。6時過ぎだったのにオペレーターがチャットに出てきて、kindle 本を返品したいと書き込んだらすぐに確認して返品処理してくれた。オペレーターは24時間体制なのかな？おそらく購入してすぐだったし、ダウンロードもしていなかったので返品処理がすぐできたのだと推測する。実際の返金処理には2-3日かかるとのこと。チャットで2-3のコメントを書き込めば手続きできたのでシステムはよくできていると思った。そのことを twtter に書き込んだらすぐ Amazon Help にいいねされて、みてるぞって感じでこれはちょっと怖くなった。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">アカウントを間違えて、誤って kindle 本を購入してしまってカスタマーサービスからチャットして返品処理できた。この時間でも担当者がつながったので24時間体制でサポートしているんやな。スムーズに手続きできてよかった &lt;a href="https://twitter.com/hashtag/%E9%87%91%E6%9C%9D%E3%83%84%E3%83%A1%E3%83%88%E3%82%AE?src=hash&amp;amp;ref_src=twsrc%5Etfw">#金朝ツメトギ&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1486815457428787203?ref_src=twsrc%5Etfw">January 27, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="オフィス内覧">オフィス内覧&lt;/h2>
&lt;p>オフィスの引っ越し調査のために &lt;a href="https://fabbit.co.jp/facility/kobesannomiya/">fabbit神戸三宮&lt;/a> に行ってきた。フリースペースは開放感があって、外の光も入っていて、雰囲気がよさそうにみえた。サービスで1日分のドロップインチケットをもらったので今度使ってみる。個室は2名と4名部屋の2種類。2名部屋はあまり広くないので1名で利用している会員も多いとのこと。&lt;/p>
&lt;ul>
&lt;li>月額利用料: 66,000円&lt;/li>
&lt;li>郵便受けサービス: 1,100円&lt;/li>
&lt;li>法人登記サービス: 11,000円&lt;/li>
&lt;/ul>
&lt;p>法人のオフィスとして使うときは郵便受けと法人登記サービスに入る必要があるとのこと。個室の設備なども含めて比べると、いまのオフィスより割高な料金設定になっているように感じた。その他デメリットもいくつかわかった。&lt;/p>
&lt;ul>
&lt;li>法人登記の場合、入会するときに入会金が44,000円かかる&lt;/li>
&lt;li>部屋に備え付けの机や椅子がいらないときは保管場所を自分で用意しないといけない
&lt;ul>
&lt;li>椅子を変えたかったら備え付けの椅子を自宅に置いとくとか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>個室の仕切りがガラス張りで外から中がみえるので社外秘などのセキュリティがやや気になる
&lt;ul>
&lt;li>顧客情報が流出する可能性があるのと、マット敷いてお昼寝しているときに外からみられたら恥ずかしい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>郵便受けが施設内にあるのでスタッフがいないと郵便が届かない (土日に郵便物を受け取れない)&lt;/li>
&lt;/ul></content></item><item><title>歴史と地政学</title><link>/diary/posts/2022/0125/</link><pubDate>Tue, 25 Jan 2022 07:41:53 +0900</pubDate><guid>/diary/posts/2022/0125/</guid><description>1時に寝て6時半に起きた。今日はリリース日でリリースに間に合わなかった PR 群の説明を書いてそれらをまとめたり、チケットの整理をしたりしていて、あんまり他のことの記憶がない。
地政学に関心がある プーチン大統領が「地政学的に言えば……」という枕詞をよく使う (印象を私が勝手にもっていて、実際にそういう発言をググっても検索ヒットするわけではないので勝手な私の思い込みかもしれないが) ので地政学という分野に以前から関心をもっている。とくにプーチン大統領のファンだというわけではない。地政学といえばプーチン大統領という連想が働くだけだ。たまたまはてブのエントリーでみつけた記事を読んだらおもしろかった。
面白い世界史の本を3人で2時間お薦めしあった中から厳選した12冊（前編） 記事に触発されて 恐怖の地政学 を購入した。いま私が地方都市に住んでいるというのもあって、地方に根付いた産業とか文化とか、いくらかそれは地理的な要因もあるだろうとは思っていて、せっかく地方に住んでいるのだからそういう分野の歴史や背景を調べるのもおもしろそうだと思い始めたところでもある。</description><content>&lt;p>1時に寝て6時半に起きた。今日はリリース日でリリースに間に合わなかった PR 群の説明を書いてそれらをまとめたり、チケットの整理をしたりしていて、あんまり他のことの記憶がない。&lt;/p>
&lt;h2 id="地政学に関心がある">地政学に関心がある&lt;/h2>
&lt;p>プーチン大統領が「地政学的に言えば……」という枕詞をよく使う (印象を私が勝手にもっていて、実際にそういう発言をググっても検索ヒットするわけではないので勝手な私の思い込みかもしれないが) ので地政学という分野に以前から関心をもっている。とくにプーチン大統領のファンだというわけではない。地政学といえばプーチン大統領という連想が働くだけだ。たまたまはてブのエントリーでみつけた記事を読んだらおもしろかった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dain.cocolog-nifty.com/myblog/2022/01/post-1d5097.html">面白い世界史の本を3人で2時間お薦めしあった中から厳選した12冊（前編）&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>記事に触発されて &lt;a href="http://sakurasha.com/2016/11/%E6%81%90%E6%80%96%E3%81%AE%E5%9C%B0%E6%94%BF%E5%AD%A6/">恐怖の地政学&lt;/a> を購入した。いま私が地方都市に住んでいるというのもあって、地方に根付いた産業とか文化とか、いくらかそれは地理的な要因もあるだろうとは思っていて、せっかく地方に住んでいるのだからそういう分野の歴史や背景を調べるのもおもしろそうだと思い始めたところでもある。&lt;/p></content></item><item><title>電源アダプター入手</title><link>/diary/posts/2022/0102/</link><pubDate>Sun, 02 Jan 2022 09:31:47 +0900</pubDate><guid>/diary/posts/2022/0102/</guid><description>3時ぐらいまで本を読んでて、それから寝て8時に起きた。
USB-C の電源アダプター 大晦日、高速バスの乗車待ちの列に並んでいるときにふと気付いた。macbook の電源アダプターを持ってくるのを忘れた。その後の予定も詰まっていたので今更取りに帰るわけにもいかない。これまで10数年帰省してきて1度も忘れたことはなかったが、人間の注意力に頼っていると、いつかは失敗するというよい事例だ。完璧に自分の不注意で電源アダプターをバッグに入れ忘れた。反省はあとでやるとして、列に並びながら amazon のサイトをスマホで開いていた。検索すると、手ごろな価格帯で類似品がいくつか出てくる。調査する時間の余裕がなかったのであまり迷わず互換性があると書かれたものを選択した。3,588円。12月31日の15時過ぎに注文して1月2日の9時半に実家で受け取った。見た目は macbook の電源アダプターとほぼ同じ。この日記は購入した電源アダプターにより充電開始した macbook で書くことができた。お正月にも関わらず届けてくれた物流センターや宅急便の関係者に感謝。
バッタを倒しにアフリカへ 時間があるのと中盤を過ぎたのもあって一気に「第7章彷徨える博士」「第8章「神の罰」に挑む」「第9章我、サハラに死せず」「あとがき」と読み終えた。本書を読み終えてから著者のブログ記事である 『バッタを倒しにアフリカへ』行き、必殺技を見つけてきました を読むとまた違った印象を受ける。本書は著者の研究成果として論文を書くための、下積みの期間の物語と言える。アフリカへ行き、フィールドワークを通じてバッタのデータを収集し、研究資金が底をつきながらも著者の熱意や活動により、研究資金を得て、研究に専念するための環境を、文字通り、自ら作り上げていったという、言わば、著者がこれから評価を得るであろう研究の序章のような位置付けになる。あとがきでも研究内容の詳細は意図的に書いていないと書かれており、それは論文として提出できていれば詳細を書けるが、執筆時点では論文を完成させていなかったので詳細を伏せたとある。
著者は研究資金を得る活動の一環として広報活動やネット上の露出もあったため、そういう活動は時間を取られるため、研究に集中できない期間もあったことが伺える。2018年からSNS断ちして3年間、研究に没頭して論文を仕上げたというのも理解できる。また SNS でファンが増えるにつれ、誹謗中傷も増え、多くの励ましよりも数少ない誹謗中傷で傷つくといった話題も出てくる。私も SNS は時間の無駄だと考え、なるべく利用を減らそうとしているが、暇なときや時間つぶしにはよいサービスであることも確かでなかなか SNS と縁切りするところまではいけていない。
閑話休題。後半は著者の熱意に感情移入して研究がうまくいくといいなと応援しながら読み進めていた。研究がうまくいきそうな雰囲気のところで本書が終わってしまう。おそらく論文発表を一通り終えたら詳細も含めて続編を書いてくれるようだが、それはもう数年、もしかしたら10年以上先のことになるのかもしれない。著者は1980年生まれと私と1つしか違わない。40歳を過ぎて、私も周りもミドルエイジクライシスに悩む人たちをみかけるようになった。本当に価値のあることや世の中の役に立つことを研究できるのは著者にとっても幸せなことだろうというのがひしひしと伝わってくる。誰でもできるお仕事は基本的に受けるつもりはなく、自分の目指すキャリアにつながるお仕事、もしくはやる価値があると自ら判断したお仕事しかしないようにこの1年で方針を調整してきた。なにか新しいことに挑戦してみようという人にとって本書は勇気をもらえる内容だったと思う。
お風呂 実家の近くで うずしお温泉 という温泉が湧いていて、実家に帰ると銭湯へ行く感覚で温泉に入っていたりする。昔からあまり温泉を特別なものに感じていないのは地元にあって珍しくなかったからかもしれない。夜に入りに行って出てから少しストレッチをしてた。</description><content>&lt;p>3時ぐらいまで本を読んでて、それから寝て8時に起きた。&lt;/p>
&lt;h2 id="usb-c-の電源アダプター">USB-C の電源アダプター&lt;/h2>
&lt;p>大晦日、高速バスの乗車待ちの列に並んでいるときにふと気付いた。macbook の電源アダプターを持ってくるのを忘れた。その後の予定も詰まっていたので今更取りに帰るわけにもいかない。これまで10数年帰省してきて1度も忘れたことはなかったが、人間の注意力に頼っていると、いつかは失敗するというよい事例だ。完璧に自分の不注意で電源アダプターをバッグに入れ忘れた。反省はあとでやるとして、列に並びながら amazon のサイトをスマホで開いていた。検索すると、手ごろな価格帯で類似品がいくつか出てくる。調査する時間の余裕がなかったのであまり迷わず互換性があると書かれたものを選択した。3,588円。12月31日の15時過ぎに注文して1月2日の9時半に実家で受け取った。見た目は macbook の電源アダプターとほぼ同じ。この日記は購入した電源アダプターにより充電開始した macbook で書くことができた。お正月にも関わらず届けてくれた物流センターや宅急便の関係者に感謝。&lt;/p>
&lt;h2 id="バッタを倒しにアフリカへ">バッタを倒しにアフリカへ&lt;/h2>
&lt;p>時間があるのと中盤を過ぎたのもあって一気に「第7章彷徨える博士」「第8章「神の罰」に挑む」「第9章我、サハラに死せず」「あとがき」と読み終えた。本書を読み終えてから著者のブログ記事である &lt;a href="https://otokomaeno.hatenablog.com/entry/2021/10/30/170343">『バッタを倒しにアフリカへ』行き、必殺技を見つけてきました&lt;/a> を読むとまた違った印象を受ける。本書は著者の研究成果として論文を書くための、下積みの期間の物語と言える。アフリカへ行き、フィールドワークを通じてバッタのデータを収集し、研究資金が底をつきながらも著者の熱意や活動により、研究資金を得て、研究に専念するための環境を、文字通り、自ら作り上げていったという、言わば、著者がこれから評価を得るであろう研究の序章のような位置付けになる。あとがきでも研究内容の詳細は意図的に書いていないと書かれており、それは論文として提出できていれば詳細を書けるが、執筆時点では論文を完成させていなかったので詳細を伏せたとある。&lt;/p>
&lt;p>著者は研究資金を得る活動の一環として広報活動やネット上の露出もあったため、そういう活動は時間を取られるため、研究に集中できない期間もあったことが伺える。2018年からSNS断ちして3年間、研究に没頭して論文を仕上げたというのも理解できる。また SNS でファンが増えるにつれ、誹謗中傷も増え、多くの励ましよりも数少ない誹謗中傷で傷つくといった話題も出てくる。私も SNS は時間の無駄だと考え、なるべく利用を減らそうとしているが、暇なときや時間つぶしにはよいサービスであることも確かでなかなか SNS と縁切りするところまではいけていない。&lt;/p>
&lt;p>閑話休題。後半は著者の熱意に感情移入して研究がうまくいくといいなと応援しながら読み進めていた。研究がうまくいきそうな雰囲気のところで本書が終わってしまう。おそらく論文発表を一通り終えたら詳細も含めて続編を書いてくれるようだが、それはもう数年、もしかしたら10年以上先のことになるのかもしれない。著者は1980年生まれと私と1つしか違わない。40歳を過ぎて、私も周りもミドルエイジクライシスに悩む人たちをみかけるようになった。本当に価値のあることや世の中の役に立つことを研究できるのは著者にとっても幸せなことだろうというのがひしひしと伝わってくる。誰でもできるお仕事は基本的に受けるつもりはなく、自分の目指すキャリアにつながるお仕事、もしくはやる価値があると自ら判断したお仕事しかしないようにこの1年で方針を調整してきた。なにか新しいことに挑戦してみようという人にとって本書は勇気をもらえる内容だったと思う。&lt;/p>
&lt;h2 id="お風呂">お風呂&lt;/h2>
&lt;p>実家の近くで &lt;a href="http://awajiinfo.com/uzusio-onsen/">うずしお温泉&lt;/a> という温泉が湧いていて、実家に帰ると銭湯へ行く感覚で温泉に入っていたりする。昔からあまり温泉を特別なものに感じていないのは地元にあって珍しくなかったからかもしれない。夜に入りに行って出てから少しストレッチをしてた。&lt;/p></content></item><item><title>寝正月</title><link>/diary/posts/2022/0101/</link><pubDate>Sat, 01 Jan 2022 08:14:28 +0900</pubDate><guid>/diary/posts/2022/0101/</guid><description>0時に寝て5時に起きて2度寝して7時半に起きた。マンションより実家の方が部屋の中は寒い。
古札の返納 うちは厄年を気にする家で親が厄払いにいかないとうるさいので前厄・本厄・後厄の3年間、毎年厄払いのお札を授かっていた。近所に 薬王寺 という厄除で有名なお寺がある。今年は後厄のお札を返納するだけなので時間もかからずすぐに終えることができた。その後、ついでに初詣も行こうかと おのころ島神社 に行ってみた。参拝するのに100-200人ぐらい並んでいた。そんなに列も進むようにはみえなかったのでたこ焼きだけ買って離脱した。初詣はまた神戸に戻ってからにしよう。
バッタを倒しにアフリカへ 家に戻ってきてとくにやることもないのでテレビを眺めながら本を読む。「第4章裏切りの大干ばつ」「第5章聖地でのあがき」「第6章地雷の海を越えて」を読んだ。macbook の電源アダプターを持ち帰るのを忘れてきたのでスマホで kindle 本を読んでいる。これまで読んだことなかったけど、他に利用できるデバイスがなかったら読めるもんだなと小さい画面に少ない文字ながら読み進めた。
印象に残った内容を書いていく。干ばつで国中が大変な状況でもモーリタニアは隣国の難民を受け入れていたというエピソードが出てくる。イスラム教の宗教的背景などもあるんだろうなと思いながら読んでいた。日本はいま自己責任が強くなってしまって若ものが困窮していても助けを求めないというニュースを見かけたりもする。一面だけをみてどうこう言うのも適切ではないけど、豊かさとはなにかを考えさせられた。フランスの研究機関へ行った時にファーブル昆虫記のファーブルさんの生家を尋ねたエピソードも出てくる。私はファーブルさんのファンでもないのでとくに感銘を受けることはないけど、著者の思い入れが伝わってくるのでよかったなぁと思いながら読んでた。その後、バッタの群れをみつけて追跡するところとか、1-2年かけて調査してとうとうみつけたのかなと感慨深かった。現地の人から言うと大した群れではないとか、地雷原の先へ逃げられてしまって途中で追跡を断念したり、不完全燃焼ではあったけど、最初はそんなもんで地道にやっていくしかないというところも現実に即した内容でよかったと思う。</description><content>&lt;p>0時に寝て5時に起きて2度寝して7時半に起きた。マンションより実家の方が部屋の中は寒い。&lt;/p>
&lt;h2 id="古札の返納">古札の返納&lt;/h2>
&lt;p>うちは厄年を気にする家で親が厄払いにいかないとうるさいので前厄・本厄・後厄の3年間、毎年厄払いのお札を授かっていた。近所に &lt;a href="https://ykoj.jp/">薬王寺&lt;/a> という厄除で有名なお寺がある。今年は後厄のお札を返納するだけなので時間もかからずすぐに終えることができた。その後、ついでに初詣も行こうかと &lt;a href="http://www.freedom.ne.jp/onokoro/">おのころ島神社&lt;/a> に行ってみた。参拝するのに100-200人ぐらい並んでいた。そんなに列も進むようにはみえなかったのでたこ焼きだけ買って離脱した。初詣はまた神戸に戻ってからにしよう。&lt;/p>
&lt;h2 id="バッタを倒しにアフリカへ">バッタを倒しにアフリカへ&lt;/h2>
&lt;p>家に戻ってきてとくにやることもないのでテレビを眺めながら本を読む。「第4章裏切りの大干ばつ」「第5章聖地でのあがき」「第6章地雷の海を越えて」を読んだ。macbook の電源アダプターを持ち帰るのを忘れてきたのでスマホで kindle 本を読んでいる。これまで読んだことなかったけど、他に利用できるデバイスがなかったら読めるもんだなと小さい画面に少ない文字ながら読み進めた。&lt;/p>
&lt;p>印象に残った内容を書いていく。干ばつで国中が大変な状況でもモーリタニアは隣国の難民を受け入れていたというエピソードが出てくる。イスラム教の宗教的背景などもあるんだろうなと思いながら読んでいた。日本はいま自己責任が強くなってしまって若ものが困窮していても助けを求めないというニュースを見かけたりもする。一面だけをみてどうこう言うのも適切ではないけど、豊かさとはなにかを考えさせられた。フランスの研究機関へ行った時にファーブル昆虫記のファーブルさんの生家を尋ねたエピソードも出てくる。私はファーブルさんのファンでもないのでとくに感銘を受けることはないけど、著者の思い入れが伝わってくるのでよかったなぁと思いながら読んでた。その後、バッタの群れをみつけて追跡するところとか、1-2年かけて調査してとうとうみつけたのかなと感慨深かった。現地の人から言うと大した群れではないとか、地雷原の先へ逃げられてしまって途中で追跡を断念したり、不完全燃焼ではあったけど、最初はそんなもんで地道にやっていくしかないというところも現実に即した内容でよかったと思う。&lt;/p></content></item><item><title>大晦日の帰省</title><link>/diary/posts/2021/1231/</link><pubDate>Fri, 31 Dec 2021 08:14:16 +0900</pubDate><guid>/diary/posts/2021/1231/</guid><description>0時に寝て6時に起きた。朝活やってからまたちょっと寝てた。午後から高速バスで実家に帰った。
朝活: バッタを倒しにアフリカへ 金朝ツメトギ 2021-12-31 AM 6 金曜朝6時開催のもくもく会 に参加した。厳密には朝活のときは、はらさんの振り返りを聞いてた感じで、終わってから「第2章アフリカに染まる」「第3章旅立ちを前に」を読んだ。アフリカでの生活のあれこれが書いてあって、日本に住んでいる自分からは斬新でおもしろい。なにかの記事でアフリカが経済発展しない理由の1つに賄賂や汚職が横行していて云々みたいな記事を読んだことがある気がするけど、本書の中でもちょくちょく賄賂を要求されたり、不正に給料をもらおうとぼったくりされたこととかが書いてある。日本人からみると賄賂やぼったくりの金額もそんなに高くないので払ってしまったりしてそれが返って社会に歪みを与えてたりするのかな？とも思えた。
モーリタニアの公用語がフランス語で著者は英語しか話せなくて、言葉の通じない国で現地の人たちと仲良くなるのは相当の苦労が忍ばれる。著者は文章を読んでいてもおもしろい感じだけど、言葉のスキルとは別にコミュニケーション能力が高い人なんだろうということも伺える。言葉が通じなくても仲良くなれる雰囲気の人はいると思う。あとは日本と比べると生活環境がよくなくて、いまの自分は外国で暮らすとかできないだろうなと読んでて思うこともあった。
高校の同級生と飲む 毎年、大晦日に集まって近況報告をしたりしてた。コロナ禍があって自粛していたので3年ぶりに集まった。とくに変わりなくみんな元気でいた。18時頃から飲みながらだらだらしてた。私は前に焼き鳥屋さんのマスターのおすすめで飲んだ だいやめ を持っていった。そのとき飲んだお湯割もおいしかったけど、今回はソーダ割りを試してみて、それもおいしかった。友だちも初めてだいやめを飲んで、これ芋焼酎なの？と驚いていた。初めて飲んだら驚くという意味でもこの焼酎はお土産に向いている。
友だちの1人はゴルフにはまっているという話。調子がよかったら80台でまわれるぐらいで、私にはわからないけど中級者と言えるだけのレベルに達しているらしい。ゴルフは接待や出世のためのツールみたいなイメージが私にはある。したがって私とは無縁でやることはないような気がする。かなり歩くから健康のためにもよいという話もあるのでゴルフ自体を忌避しているわけでもない。スポーツとして楽しんでやっているのはよいと思う。
夜はテレビで RIZIN をみていた。出場している選手は全然わからないけど、大晦日っぽいなと思いながらみていた。</description><content>&lt;p>0時に寝て6時に起きた。朝活やってからまたちょっと寝てた。午後から高速バスで実家に帰った。&lt;/p>
&lt;h2 id="朝活-バッタを倒しにアフリカへ">朝活: バッタを倒しにアフリカへ&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=WRW2MIbe3uc">金朝ツメトギ 2021-12-31 AM 6 金曜朝6時開催のもくもく会&lt;/a> に参加した。厳密には朝活のときは、はらさんの振り返りを聞いてた感じで、終わってから「第2章アフリカに染まる」「第3章旅立ちを前に」を読んだ。アフリカでの生活のあれこれが書いてあって、日本に住んでいる自分からは斬新でおもしろい。なにかの記事でアフリカが経済発展しない理由の1つに賄賂や汚職が横行していて云々みたいな記事を読んだことがある気がするけど、本書の中でもちょくちょく賄賂を要求されたり、不正に給料をもらおうとぼったくりされたこととかが書いてある。日本人からみると賄賂やぼったくりの金額もそんなに高くないので払ってしまったりしてそれが返って社会に歪みを与えてたりするのかな？とも思えた。&lt;/p>
&lt;p>モーリタニアの公用語がフランス語で著者は英語しか話せなくて、言葉の通じない国で現地の人たちと仲良くなるのは相当の苦労が忍ばれる。著者は文章を読んでいてもおもしろい感じだけど、言葉のスキルとは別にコミュニケーション能力が高い人なんだろうということも伺える。言葉が通じなくても仲良くなれる雰囲気の人はいると思う。あとは日本と比べると生活環境がよくなくて、いまの自分は外国で暮らすとかできないだろうなと読んでて思うこともあった。&lt;/p>
&lt;h2 id="高校の同級生と飲む">高校の同級生と飲む&lt;/h2>
&lt;p>毎年、大晦日に集まって近況報告をしたりしてた。コロナ禍があって自粛していたので3年ぶりに集まった。とくに変わりなくみんな元気でいた。18時頃から飲みながらだらだらしてた。私は前に焼き鳥屋さんのマスターのおすすめで飲んだ &lt;a href="/diary/diary/posts/2021/1109/#呑み">だいやめ&lt;/a> を持っていった。そのとき飲んだお湯割もおいしかったけど、今回はソーダ割りを試してみて、それもおいしかった。友だちも初めてだいやめを飲んで、これ芋焼酎なの？と驚いていた。初めて飲んだら驚くという意味でもこの焼酎はお土産に向いている。&lt;/p>
&lt;p>友だちの1人はゴルフにはまっているという話。調子がよかったら80台でまわれるぐらいで、私にはわからないけど中級者と言えるだけのレベルに達しているらしい。ゴルフは接待や出世のためのツールみたいなイメージが私にはある。したがって私とは無縁でやることはないような気がする。かなり歩くから健康のためにもよいという話もあるのでゴルフ自体を忌避しているわけでもない。スポーツとして楽しんでやっているのはよいと思う。&lt;/p>
&lt;p>夜はテレビで RIZIN をみていた。出場している選手は全然わからないけど、大晦日っぽいなと思いながらみていた。&lt;/p></content></item><item><title>目標はもうない</title><link>/diary/posts/2021/1228/</link><pubDate>Tue, 28 Dec 2021 10:27:20 +0900</pubDate><guid>/diary/posts/2021/1228/</guid><description>0時に寝て5時に起きて2度寝して8時に起きた。前日やや飲み過ぎて軽い2日酔い。
目標考察 この前ストレッチを受けているときにトレーナーさんから「来年の目標はなんですか？」とふと聞かれた。目標という単語に私は忌避感をもっているなと感じた。というのは、普通の規模の会社でサラリーマンやっていれば、期首に目標設定やって期末に評価して昇格やボーナスの金額が変わるといった制度になっていることが多いと思う。私は昔から目標とか意識して働くよりも、働いている過程や状況の変化の中でそのときに大事だと自分が思ったことに注力するような方だった。なので、期首に立てた目標とは全然異なる業績をあげたりすると、目標とか無関係に評価が決まることが多かった。この評価には高い評価を受けたこともあるし、低い評価を受けたこともある。そして、評価は上長やより上位の人たちのさじ加減で決まることも多かった。目標とか組織の論理よりもプロジェクトの状況にとって大事かどうかを自分で判断して行動するから目標が有名無実化しやすい方だった。そういう働き方をしていると、目標とか評価とか無駄な労力よなと思ってしまう。いまマイクロ法人として独立して、目標と評価という無駄な労力を費やさなくて済むので、そういったストレスからは解放された生活を送れるようになった。
閑話休題。トレーナーさんにはこう回答した。目標とかとくにないです。日々、健康で過ごすぐらいのことしか考えてませんと意識の低い回答をした。一方で私はやりたいと思ったことはすでにやっているところはある。サラリーマン時代の刷り込みからか、目標とは計画を指していて、すでにやっていることは目標に含めないように考えてしまうところがある。進行中であってもやり終えるまでを目標と設定して喧伝してもよいとは思うけど、私がすでにやっていることを目標とみなさないのは、上述したように、やっている過程や状況の変化にあわせて変えていくため、予め事前に立てておいた目標とは異なる結果になることが経験的に多かったことに起因する。もうこの歳になると目標を立てるというよりも、目標となることをやっているかどうかの方が重要になってきたという思いもある。
いずれにしても目標や評価のような行動を私は2度とやることはないだろうという話し。
実践知本の読み直し 課題管理における背景の理論考察を始めたとき、早い段階で読んだ本に 実践知 — エキスパートの知性 がある。8月頃に読んだ。当時は知識にもいろんな分野や研究成果があるとわかった程度だった。その後、認知心理学やスクラム開発の背景を学ぶうちに実践知とも関連があるように思えてきた。背景知識が増えた状態で、いまこの本を読み返せばまた違った理解があるのではないかと考えてまた読み直すことにした。</description><content>&lt;p>0時に寝て5時に起きて2度寝して8時に起きた。前日やや飲み過ぎて軽い2日酔い。&lt;/p>
&lt;h2 id="目標考察">目標考察&lt;/h2>
&lt;p>この前ストレッチを受けているときにトレーナーさんから「来年の目標はなんですか？」とふと聞かれた。目標という単語に私は忌避感をもっているなと感じた。というのは、普通の規模の会社でサラリーマンやっていれば、期首に目標設定やって期末に評価して昇格やボーナスの金額が変わるといった制度になっていることが多いと思う。私は昔から目標とか意識して働くよりも、働いている過程や状況の変化の中でそのときに大事だと自分が思ったことに注力するような方だった。なので、期首に立てた目標とは全然異なる業績をあげたりすると、目標とか無関係に評価が決まることが多かった。この評価には高い評価を受けたこともあるし、低い評価を受けたこともある。そして、評価は上長やより上位の人たちのさじ加減で決まることも多かった。目標とか組織の論理よりもプロジェクトの状況にとって大事かどうかを自分で判断して行動するから目標が有名無実化しやすい方だった。そういう働き方をしていると、目標とか評価とか無駄な労力よなと思ってしまう。いまマイクロ法人として独立して、目標と評価という無駄な労力を費やさなくて済むので、そういったストレスからは解放された生活を送れるようになった。&lt;/p>
&lt;p>閑話休題。トレーナーさんにはこう回答した。目標とかとくにないです。日々、健康で過ごすぐらいのことしか考えてませんと意識の低い回答をした。一方で私はやりたいと思ったことはすでにやっているところはある。サラリーマン時代の刷り込みからか、目標とは計画を指していて、すでにやっていることは目標に含めないように考えてしまうところがある。進行中であってもやり終えるまでを目標と設定して喧伝してもよいとは思うけど、私がすでにやっていることを目標とみなさないのは、上述したように、やっている過程や状況の変化にあわせて変えていくため、予め事前に立てておいた目標とは異なる結果になることが経験的に多かったことに起因する。もうこの歳になると目標を立てるというよりも、目標となることをやっているかどうかの方が重要になってきたという思いもある。&lt;/p>
&lt;p>いずれにしても目標や評価のような行動を私は2度とやることはないだろうという話し。&lt;/p>
&lt;h2 id="実践知本の読み直し">実践知本の読み直し&lt;/h2>
&lt;p>課題管理における背景の理論考察を始めたとき、早い段階で読んだ本に &lt;a href="https://b.kobe-u.ac.jp/books/b007/">実践知 — エキスパートの知性&lt;/a> がある。8月頃に読んだ。当時は知識にもいろんな分野や研究成果があるとわかった程度だった。その後、認知心理学やスクラム開発の背景を学ぶうちに実践知とも関連があるように思えてきた。背景知識が増えた状態で、いまこの本を読み返せばまた違った理解があるのではないかと考えてまた読み直すことにした。&lt;/p></content></item><item><title>冒険をするチームにはコックが必要</title><link>/diary/posts/2021/1224/</link><pubDate>Fri, 24 Dec 2021 08:58:51 +0900</pubDate><guid>/diary/posts/2021/1224/</guid><description>0時に寝て4時に起きて、なんとなくドラクエタクトしてたら6時になってそのまま朝活に出てた。sns のタイムラインを眺めていると今日で仕事納めにしている人をちらほらみかけた。私は外向けには月曜日が仕事納めで、内向けには水曜日までは働くかな。30日は実家に帰るか、ゆっくり休むか、まだ決めてない。
朝活: バッタを倒しにアフリカへ 先日たまたまみかけた記事から購入した ことを書いた。積ん読状態だったけど、技術書ばかりも疲れるので気分転換に読み進めることにした。
第1章サハラに青春を賭けるを読んだ。著者はおもしろい人だというのは文章から伝わってくるので何を書いてても驚きはしないが、それでもアフリカ(モーリタニア)の生活や状況などは全く知らないことばかりなので何を読んでも斬新には感じる。モーリタニア・イスラム共和国 という国すら私は知らなかった。
第1章は渡航してフィールワークに出掛けた内容が書いてあった。砂漠へ行くチームにコックが必要というのは、ドラクエ脳の自分には出てこない発想で現実は旅をしながらおいしいものも食べたいという欲求は強いのだなぁという学び？があった。
slack のマルチチャンネルゲスト これまでお手伝い先では slack のシングルチャンネルゲストで参加していた。必然的に1つのチャンネルにすべてのプロジェクトメンバー20人がいる。技術的な話題を気軽に投稿しにくいし、システム通知などもかなり制限されていた。
人間が会話するチャンネルとシステムが通知するチャンネルは分けた方がよい
と、私はプラクティスとして常々言っている。きっと誰もが言っている。システム通知が認知負荷となるという声は業務側のメンバーからも届いていた。これは外部メンバーをマルチチャンネルゲストにすることのコストだけの問題なので、その価値をどう測るかという視点から、中の人がその予算を確保して外部メンバーがマルチチャンネルゲスト化された。その判断を支持する意図でも、slack のチャンネルが複数扱えることでどういった情報共有やシステム間連携の価値があるかというのを、私の経験からも提示していきたいと考えている。情報を監視するという概念、ならびに情報の一元管理にも関わってくるので、課題管理と並ぶ情報共有という文脈で私の強みが活きる分野でもある。いろいろやっていきたい。</description><content>&lt;p>0時に寝て4時に起きて、なんとなくドラクエタクトしてたら6時になってそのまま朝活に出てた。sns のタイムラインを眺めていると今日で仕事納めにしている人をちらほらみかけた。私は外向けには月曜日が仕事納めで、内向けには水曜日までは働くかな。30日は実家に帰るか、ゆっくり休むか、まだ決めてない。&lt;/p>
&lt;h2 id="朝活-バッタを倒しにアフリカへ">朝活: バッタを倒しにアフリカへ&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1030/#サバクトビバッタの研究">先日たまたまみかけた記事から購入した&lt;/a> ことを書いた。積ん読状態だったけど、技術書ばかりも疲れるので気分転換に読み進めることにした。&lt;/p>
&lt;p>第1章サハラに青春を賭けるを読んだ。著者はおもしろい人だというのは文章から伝わってくるので何を書いてても驚きはしないが、それでもアフリカ(モーリタニア)の生活や状況などは全く知らないことばかりなので何を読んでも斬新には感じる。&lt;a href="https://www.mofa.go.jp/mofaj/area/mauritania/index.html">モーリタニア・イスラム共和国&lt;/a> という国すら私は知らなかった。&lt;/p>
&lt;p>第1章は渡航してフィールワークに出掛けた内容が書いてあった。砂漠へ行くチームにコックが必要というのは、ドラクエ脳の自分には出てこない発想で現実は旅をしながらおいしいものも食べたいという欲求は強いのだなぁという学び？があった。&lt;/p>
&lt;h2 id="slack-のマルチチャンネルゲスト">slack のマルチチャンネルゲスト&lt;/h2>
&lt;p>これまでお手伝い先では slack のシングルチャンネルゲストで参加していた。必然的に1つのチャンネルにすべてのプロジェクトメンバー20人がいる。技術的な話題を気軽に投稿しにくいし、システム通知などもかなり制限されていた。&lt;/p>
&lt;blockquote>
&lt;p>人間が会話するチャンネルとシステムが通知するチャンネルは分けた方がよい&lt;/p>
&lt;/blockquote>
&lt;p>と、私はプラクティスとして常々言っている。きっと誰もが言っている。システム通知が認知負荷となるという声は業務側のメンバーからも届いていた。これは外部メンバーをマルチチャンネルゲストにすることのコストだけの問題なので、その価値をどう測るかという視点から、中の人がその予算を確保して外部メンバーがマルチチャンネルゲスト化された。その判断を支持する意図でも、slack のチャンネルが複数扱えることでどういった情報共有やシステム間連携の価値があるかというのを、私の経験からも提示していきたいと考えている。情報を監視するという概念、ならびに情報の一元管理にも関わってくるので、課題管理と並ぶ情報共有という文脈で私の強みが活きる分野でもある。いろいろやっていきたい。&lt;/p></content></item><item><title>課題管理システムの一本化</title><link>/diary/posts/2021/1222/</link><pubDate>Wed, 22 Dec 2021 08:21:13 +0900</pubDate><guid>/diary/posts/2021/1222/</guid><description>0時に寝て4時過ぎに起きて2度寝して6時前に起きた。
朝活: バッタを倒しにアフリカへ 【三宮.dev オンライン】今年最後のリモート朝活もくもく会 に参加した。スクラム本を読み終えたので気分転換に バッタを倒しにアフリカへ を読むことにした。主に雑談してたら序文しか読めなかった。
課題管理システムを一本化する お仕事でスクラム開発を実践している。プロダクトバックログを backlog で管理し、スプリントバックログを GitHub Issues で管理している。課題を複数のプラットフォームで管理することは情報の一元管理という側面からよくないといったことをお手伝いを始めたときから機をみて指摘していた。そういう状態が2ヶ月ほど続いて、GitHub Issues は機能的に厳しいという共通認識が開発者にはあるため、backlog へ一本化されることに決定した。スクラムと課題管理との関係を追究したい私にとっては朗報で、今後は PO も含めて課題管理システムの用途をメンバーにアドバイスしながら課題管理の高みを目指していきたい。但し、backlog は標準で github 連携機能を提供していないため、チケット駆動開発をするには自前で連携機能を作らないといけないらしい。</description><content>&lt;p>0時に寝て4時過ぎに起きて2度寝して6時前に起きた。&lt;/p>
&lt;h2 id="朝活-バッタを倒しにアフリカへ">朝活: バッタを倒しにアフリカへ&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/234405/">【三宮.dev オンライン】今年最後のリモート朝活もくもく会&lt;/a> に参加した。スクラム本を読み終えたので気分転換に &lt;a href="https://www.kobunsha.com/shelf/book/isbn/9784334039899">バッタを倒しにアフリカへ&lt;/a> を読むことにした。主に雑談してたら序文しか読めなかった。&lt;/p>
&lt;h2 id="課題管理システムを一本化する">課題管理システムを一本化する&lt;/h2>
&lt;p>お仕事でスクラム開発を実践している。プロダクトバックログを &lt;a href="https://backlog.com/ja/">backlog&lt;/a> で管理し、スプリントバックログを &lt;a href="https://docs.github.com/ja/issues">GitHub Issues&lt;/a> で管理している。課題を複数のプラットフォームで管理することは情報の一元管理という側面からよくないといったことをお手伝いを始めたときから機をみて指摘していた。そういう状態が2ヶ月ほど続いて、GitHub Issues は機能的に厳しいという共通認識が開発者にはあるため、backlog へ一本化されることに決定した。スクラムと課題管理との関係を追究したい私にとっては朗報で、今後は PO も含めて課題管理システムの用途をメンバーにアドバイスしながら課題管理の高みを目指していきたい。但し、backlog は標準で github 連携機能を提供していないため、チケット駆動開発をするには自前で連携機能を作らないといけないらしい。&lt;/p></content></item><item><title>スクラム開発の所感</title><link>/diary/posts/2021/1219/</link><pubDate>Sun, 19 Dec 2021 12:26:41 +0900</pubDate><guid>/diary/posts/2021/1219/</guid><description>0時に寝て2時過ぎに起きてだらだらして7時に起きてだらだらして8時に起き上がった。休日は自然とだらだらしがち。
log4j2 の脆弱性対応 たまたま sns で新たに脆弱性が発見され 2.17.0 がリリースされたことをみかけた。Apache Log4j Security Vulnerabilities をみて、午前中に対応して pr を作成して dos 攻撃の脆弱性と書いた後に次のツィートをみかけた。私は詳細を理解できていないのでこの内容が 2.17.0 で fix されているのかどうかまでは調査できていない。いずれにしても rce 攻撃はこわいから緊急度が跳ね上がるなとみていた。
【悲報】log4jのRCE脆弱性、2.15で緩和策としてlocalhostにしかlookupできなくしたはずが、127.0.0[.]1#example[.]comのように#を挟むことにより回避可能ということが判明。これにより任意ドメインへのリクエストが可能になり再びリモート実行可能に。みなさん最新版の2.17にアップデートしましょう。 https://t.co/uQhJSnjv7m
&amp;mdash; たいしょー（Hiromasa Ihara） (@miettal) December 19, 2021 アジャイル開発とスクラム 第2版 昨日の続き。素晴らしい本だったので所感をまとめた。スクラム開発の理解がより進んだ。
アジャイル開発とスクラム 第2版 顧客・技術・経営をつなぐ協調的ソフトウェア開発マネジメント</description><content>&lt;p>0時に寝て2時過ぎに起きてだらだらして7時に起きてだらだらして8時に起き上がった。休日は自然とだらだらしがち。&lt;/p>
&lt;h2 id="log4j2-の脆弱性対応">log4j2 の脆弱性対応&lt;/h2>
&lt;p>たまたま sns で新たに脆弱性が発見され 2.17.0 がリリースされたことをみかけた。&lt;a href="https://logging.apache.org/log4j/2.x/security.html">Apache Log4j Security Vulnerabilities&lt;/a> をみて、午前中に対応して pr を作成して dos 攻撃の脆弱性と書いた後に次のツィートをみかけた。私は詳細を理解できていないのでこの内容が 2.17.0 で fix されているのかどうかまでは調査できていない。いずれにしても rce 攻撃はこわいから緊急度が跳ね上がるなとみていた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">【悲報】log4jのRCE脆弱性、2.15で緩和策としてlocalhostにしかlookupできなくしたはずが、127.0.0[.]1#example[.]comのように#を挟むことにより回避可能ということが判明。これにより任意ドメインへのリクエストが可能になり再びリモート実行可能に。みなさん最新版の2.17にアップデートしましょう。 &lt;a href="https://t.co/uQhJSnjv7m">https://t.co/uQhJSnjv7m&lt;/a>&lt;/p>&amp;mdash; たいしょー（Hiromasa Ihara） (@miettal) &lt;a href="https://twitter.com/miettal/status/1472372715281858563?ref_src=twsrc%5Etfw">December 19, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="アジャイル開発とスクラム-第2版">アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>昨日の続き。素晴らしい本だったので所感をまとめた。スクラム開発の理解がより進んだ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://t2y.hatenablog.jp/entry/2021/12/19/183339">アジャイル開発とスクラム 第2版 顧客・技術・経営をつなぐ協調的ソフトウェア開発マネジメント&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>スクラム本を読了</title><link>/diary/posts/2021/1218/</link><pubDate>Sat, 18 Dec 2021 17:41:18 +0900</pubDate><guid>/diary/posts/2021/1218/</guid><description>0時に寝て6時に起きてだらだらしてて8時に起き上がった。
ストレッチ 今週もお仕事に注力してた。ストレッチは2-3日/週かな。普通ぐらいの頻度。夜は寒くなって外に出掛けるのが億劫で1日ウォーキングしたかなぐらい。今日の開脚幅は開始前169cmで、ストレッチ後170cmで、久しぶりに170cm台に戻した。いい感じ。右股関節の不可動領域がよくなっているのが実感できるようになってきているので調子はよさそう。今日は全体的に右半身 (太もも後ろ、腰、大胸筋) と張りがあって疲労もやや溜まってそうに思えた。基本的に週末もなにかしら作業していて疲労が蓄積していないのは毎週のストレッチの効果も大きいと考えている。
次の bizpy 勉強会 1月の bizpy 勉強会のイベント、Python で機械学習をやってみる勉強会 を公開した。次回はわたなべさんに講師をやってもらう。このイベントページも作っていただいた。運営が2人になったのでお互いの忙しいときは分担しながらコミュニティを運営していける。本当にありがたい。わたなべさんが担当している間に私も次のネタの下調べや仕込みをする余裕がもてる。メタバースの勉強会やってもいいなとは考えているけど、私だけではコンテンツが弱くて、よそから詳しい人を招いてこないといけない。どうしたものか。
アジャイル開発とスクラム 第2版 読了した。全12章の後にもコラムと対談があって、この内容も読み応えがあっていくつも示唆を与えられるものだった。
コラム 野中理論とスクラム スペシャルトーク 野中氏と平鍋氏の対談 イノベーションに必要なのは、対話を通じて共振・共感・共鳴する実践知リーダーシップであり、それがスクラムの心だ おわりに 12章で出てきた実践知について、実践知とは何か、実践知リーダーシップとはどういうことかというのが対談の中でも繰り返し出てきてその理解が深まった。私の中では暗黙知と実践知の境界が曖昧だったが、暗黙知と形式知を行ったり来たりすること、そして身体性を伴っているというのが実践知であること。そこには「もの」や「こと」の目に見えない関係性を洞察しながら判断し、本質を考え抜く知力が必要であると述べられていた。昔は 知行合一 と言ったらしいが、90年代以降の日本は分析過多、計画過多、コンプライアンス過多になってしまったという。また時間のあるときに所感をまとめようと思う。</description><content>&lt;p>0時に寝て6時に起きてだらだらしてて8時に起き上がった。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週もお仕事に注力してた。ストレッチは2-3日/週かな。普通ぐらいの頻度。夜は寒くなって外に出掛けるのが億劫で1日ウォーキングしたかなぐらい。今日の開脚幅は開始前169cmで、ストレッチ後170cmで、久しぶりに170cm台に戻した。いい感じ。右股関節の不可動領域がよくなっているのが実感できるようになってきているので調子はよさそう。今日は全体的に右半身 (太もも後ろ、腰、大胸筋) と張りがあって疲労もやや溜まってそうに思えた。基本的に週末もなにかしら作業していて疲労が蓄積していないのは毎週のストレッチの効果も大きいと考えている。&lt;/p>
&lt;h2 id="次の-bizpy-勉強会">次の bizpy 勉強会&lt;/h2>
&lt;p>1月の bizpy 勉強会のイベント、&lt;a href="https://bizpy.connpass.com/event/234387/">Python で機械学習をやってみる勉強会&lt;/a> を公開した。次回はわたなべさんに講師をやってもらう。このイベントページも作っていただいた。運営が2人になったのでお互いの忙しいときは分担しながらコミュニティを運営していける。本当にありがたい。わたなべさんが担当している間に私も次のネタの下調べや仕込みをする余裕がもてる。メタバースの勉強会やってもいいなとは考えているけど、私だけではコンテンツが弱くて、よそから詳しい人を招いてこないといけない。どうしたものか。&lt;/p>
&lt;h2 id="アジャイル開発とスクラム-第2版">アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>読了した。全12章の後にもコラムと対談があって、この内容も読み応えがあっていくつも示唆を与えられるものだった。&lt;/p>
&lt;ul>
&lt;li>コラム 野中理論とスクラム&lt;/li>
&lt;li>スペシャルトーク 野中氏と平鍋氏の対談
&lt;ul>
&lt;li>イノベーションに必要なのは、対話を通じて共振・共感・共鳴する実践知リーダーシップであり、それがスクラムの心だ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>おわりに&lt;/li>
&lt;/ul>
&lt;p>12章で出てきた実践知について、実践知とは何か、実践知リーダーシップとはどういうことかというのが対談の中でも繰り返し出てきてその理解が深まった。私の中では暗黙知と実践知の境界が曖昧だったが、暗黙知と形式知を行ったり来たりすること、そして身体性を伴っているというのが実践知であること。そこには「もの」や「こと」の目に見えない関係性を洞察しながら判断し、本質を考え抜く知力が必要であると述べられていた。昔は &lt;a href="https://ja.wikipedia.org/wiki/%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80">知行合一&lt;/a> と言ったらしいが、90年代以降の日本は分析過多、計画過多、コンプライアンス過多になってしまったという。また時間のあるときに所感をまとめようと思う。&lt;/p></content></item><item><title>知識創造と実践知の考察</title><link>/diary/posts/2021/1217/</link><pubDate>Fri, 17 Dec 2021 09:03:56 +0900</pubDate><guid>/diary/posts/2021/1217/</guid><description>0時に寝て6時に起きた。ここ最近は晩ご飯作って食べてアイスクリーム食べてドラクエタクトやって寝るみたいな業後の過ごし方が多い。
朝活: アジャイル開発とスクラム 第2版 金朝ツメトギ 2021-12-17 AM 6 金曜朝6時開催のもくもく会 で第11章スクラムと知識創造と第12章スクラムと実践知リーダーを読んだ。
第11章では知識想像モデルとして SECI モデルが紹介されている。ふと読んでいて、私が課題管理システムでやっていたのはこの「表出化」の活動で、多くのスクラムをやっているチームは「共同化」を主にやっているように思えた。ソフトウェア開発方法論の歴史的に、チケット駆動開発 → イテレーション開発 → アジャイル開発/スクラムの時系列に発展してきた経緯から、私のようなチケット駆動開発をがっつりやってきた開発者が言う対話が重要だと言うことと、最初からスクラム開発で「共同化」しかやらず「表出化」していない開発者が言う対話が重要だと言うことは、背景事情からして根本的に指している内容が違うのではないか？という仮説を思いついた。対話が重要だと言う開発者がドキュメントや文章を書くことをなおざりにするのを見かけて違和感を感じていた。チケット駆動開発をがっつりやってきた開発者は文章を書いた上でそれだけでは解決できなかった問題を解決するために対話が必要だと言っているわけであり、文章すら書けない開発者は対話だけで開発を進められるわけではないと考えると、これまでスクラム開発に抱いていた私の違和感の正体に近づいたように思えた。
第12章では実践知という概念とそのリーダーシップが紹介されている。以前 実践知 — エキスパートの知性 という本を読んで、メタ認知も含めた認知心理学の知見を踏まえた知識創造や実践知を獲得するに至る背景や教育と課題管理との間にある関係性を考えていたことがあった。スクラムにおいても実践知という概念を扱っているのを読んで、ここにはなにかしらの関係性を見出したり体系化を行う余地があるように考えている。やや哲学的な話題も出てくるので人によって賛否がわかれるかもしれないが、私は自分の考えている中長期的な思考や教育への考え方の価値観が合致していて、これが日本的な経営スタイルの鍵だという意見には一定の同意ができる。自分自身も中長期的な展望を大事にしながら課題解決していきたいという想いもあるからだ。
ワーケーション準備 ワーケーション準備 の残タスクを少しずつやっていく。宿泊先の きのいえ に電話してチェックイン前に駐車場にレンタカーをとめさせてもらえないかを問い合わせた。当日に宿泊客がいれば13時以降、いなければそれよりも早めにとめてもよいとのこと。スタッフがいれば声をかけていなくても勝手にとめてよいと教えてもらった。先方からも ふるさと応援！ひょうごを旅しようキャンペーン が本来は12月末で終了だったのが2月28日まで延長されたため、宿泊者が兵庫県在住であればその手続きをしたいとのこと。一旦、オンラインで決済済みの予約をキャンセルして、現地決済で兵庫県の割り引きの手続きをしてくれるという。メンバーは4人中3人が兵庫県在住なので4,000円/人の割り引きで合計12,000円の割り引きになった。</description><content>&lt;p>0時に寝て6時に起きた。ここ最近は晩ご飯作って食べてアイスクリーム食べてドラクエタクトやって寝るみたいな業後の過ごし方が多い。&lt;/p>
&lt;h2 id="朝活-アジャイル開発とスクラム-第2版">朝活: アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>&lt;a href="https://t.co/0erAzQpDzk">金朝ツメトギ 2021-12-17 AM 6 金曜朝6時開催のもくもく会&lt;/a> で第11章スクラムと知識創造と第12章スクラムと実践知リーダーを読んだ。&lt;/p>
&lt;p>第11章では知識想像モデルとして SECI モデルが紹介されている。ふと読んでいて、私が課題管理システムでやっていたのはこの「表出化」の活動で、多くのスクラムをやっているチームは「共同化」を主にやっているように思えた。ソフトウェア開発方法論の歴史的に、チケット駆動開発 → イテレーション開発 → アジャイル開発/スクラムの時系列に発展してきた経緯から、私のようなチケット駆動開発をがっつりやってきた開発者が言う対話が重要だと言うことと、最初からスクラム開発で「共同化」しかやらず「表出化」していない開発者が言う対話が重要だと言うことは、背景事情からして根本的に指している内容が違うのではないか？という仮説を思いついた。対話が重要だと言う開発者がドキュメントや文章を書くことをなおざりにするのを見かけて違和感を感じていた。チケット駆動開発をがっつりやってきた開発者は文章を書いた上でそれだけでは解決できなかった問題を解決するために対話が必要だと言っているわけであり、文章すら書けない開発者は対話だけで開発を進められるわけではないと考えると、これまでスクラム開発に抱いていた私の違和感の正体に近づいたように思えた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1217_seci-model.png"/>
&lt;/figure>
&lt;p>第12章では実践知という概念とそのリーダーシップが紹介されている。以前 &lt;a href="https://b.kobe-u.ac.jp/books/b007/">実践知 — エキスパートの知性&lt;/a> という本を読んで、メタ認知も含めた認知心理学の知見を踏まえた知識創造や実践知を獲得するに至る背景や教育と課題管理との間にある関係性を考えていたことがあった。スクラムにおいても実践知という概念を扱っているのを読んで、ここにはなにかしらの関係性を見出したり体系化を行う余地があるように考えている。やや哲学的な話題も出てくるので人によって賛否がわかれるかもしれないが、私は自分の考えている中長期的な思考や教育への考え方の価値観が合致していて、これが日本的な経営スタイルの鍵だという意見には一定の同意ができる。自分自身も中長期的な展望を大事にしながら課題解決していきたいという想いもあるからだ。&lt;/p>
&lt;h2 id="ワーケーション準備">ワーケーション準備&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1212/#ワーケーション予約">ワーケーション準備&lt;/a> の残タスクを少しずつやっていく。宿泊先の &lt;a href="https://kinosaki-kinoie.com/">きのいえ&lt;/a> に電話してチェックイン前に駐車場にレンタカーをとめさせてもらえないかを問い合わせた。当日に宿泊客がいれば13時以降、いなければそれよりも早めにとめてもよいとのこと。スタッフがいれば声をかけていなくても勝手にとめてよいと教えてもらった。先方からも &lt;a href="https://www.hyogo-tourism.jp/furusato-ouen/">ふるさと応援！ひょうごを旅しようキャンペーン&lt;/a> が本来は12月末で終了だったのが2月28日まで延長されたため、宿泊者が兵庫県在住であればその手続きをしたいとのこと。一旦、オンラインで決済済みの予約をキャンセルして、現地決済で兵庫県の割り引きの手続きをしてくれるという。メンバーは4人中3人が兵庫県在住なので4,000円/人の割り引きで合計12,000円の割り引きになった。&lt;/p></content></item><item><title>データと業務の変遷</title><link>/diary/posts/2021/1215/</link><pubDate>Wed, 15 Dec 2021 09:21:52 +0900</pubDate><guid>/diary/posts/2021/1215/</guid><description>23時に寝てこわい夢をみて1時半に起きて、そのまま寝たのか寝てないのかよくわからない仮眠状態で5時半に起きた。
朝活: アジャイル開発とスクラム 第2版 【三宮.dev オンライン】リモート朝活もくもく会 で第10章 竹内・野中のスクラム論文再考を読んだ。1986年に竹内氏と野中氏によって書かれた The New New Product Development Game から得た概念や理論的背景をスクラム創設者のジェフ・サザーランド氏がソフトウェア開発の方法論として体系化したものがスクラムになる。そのため、原点はこの論文にある。第10章ではオリジナルに書かれている内容とスクラム開発を比較している。オリジナルの論文にある TypeC (キヤノンやホンダの新製品開発) のようなチームの特徴として次の6つをあげている。
不安定な状態を保つ
最初に綿密な計画や指示があるわけではない、チームは自由な裁量と同時に困難なゴールを目指す
プロジェクトチームは自ら組織化する
チームは不安定な状態から自己組織化し、対話の中で自律状態を作り出す
開発フェーズを重複させる
開発フェーズを重複させることで、メンバーは専門分野を超えてプロジェクト全体で責任をもつようになる
「マルチ学習」
メンバーはグループ全体として学習し、専門を超えて学習する
柔らかなマネジメント
無管理でも強い管理でもない自主性を尊重した柔らかなマネジメントが重要である
学びを組織で共有する
過去の成功を組織に伝える、もしくは意識的に捨て去る
オリジナルの論文の解説を読んでいると、古きよき日本の家族ぐるみの職場やチームの働き方のように思えてくる。時代が違うのでいまからこういった働き方に戻るのは現実的ではないだろうが、その中で重要だった概念や要素を、いまソフトウェア開発方法論としてのスクラムで実践できるのはいろいろと私の中でも思うことがある。私の考える課題管理の方法論にも竹内・野中氏のオリジナルの論文の概念は影響を受けるように思えた。章末にコラムとしてジェフ・サザーランド氏のインタビュー記事もあった。マイクロファイナンスのプロジェクトを通して、小さなグループに小さくお金を貸し出すことが、貧困から抜けすための小さなきっかけ (ブートストラップ) になるという体験からスクラム開発の動機づけになったという話しは哲学として印象に残った。なにかを成すには哲学が大事だと思う。
データがあると同期したくなる お仕事でスクラムのふりかえりをやっていて miro と backlog のデータ同期という話題が出た。業務チームはブレインストーミングで要件を洗い出したりする作業のときに miro を使っていて、miro ベースでメモを記述した後でバックログアイテムとして backlog に登録する。このとき backlog に登録した後で miro を捨てるならいいが、残したまま次の展望や要件の洗い出しにも再利用したりしていると、miro と backlog のバックログアイテムの内容が乖離したり不整合が発生したりする。チームとしてはバックログアイテムに書いてある内容が正という運用をしているため、miro のみに最新の情報がある状態が続くと課題になる。私の知る限り、miro と課題管理システムのデータ連携のツールはないと思う。
私からみたら最初からすべてバックログアイテムに文章で書けばいいやんで話が終わってしまうが、人によって使い慣れたツールは異なるため、そんな単純な話しでもない。一方で昔は miro や backlog がなかった時代もあって、そのときは物理的な付箋紙をホワイトボードに張りながら作業をしていたから、本来は同期したいという概念もなかったはずという意見も出た。たしかにツールがデジタルになって電子データとなった瞬間からデータの再利用を考えるようになるんだなと私も思えた。あと付箋紙をホワイトボードに貼り付けていた時代は何週間もその状態のまま放置するといったこともなかったのではないか？という気もした。</description><content>&lt;p>23時に寝てこわい夢をみて1時半に起きて、そのまま寝たのか寝てないのかよくわからない仮眠状態で5時半に起きた。&lt;/p>
&lt;h2 id="朝活-アジャイル開発とスクラム-第2版">朝活: アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/233922/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> で第10章 竹内・野中のスクラム論文再考を読んだ。1986年に竹内氏と野中氏によって書かれた &lt;a href="https://hbr.org/1986/01/the-new-new-product-development-game">The New New Product Development Game&lt;/a> から得た概念や理論的背景をスクラム創設者のジェフ・サザーランド氏がソフトウェア開発の方法論として体系化したものがスクラムになる。そのため、原点はこの論文にある。第10章ではオリジナルに書かれている内容とスクラム開発を比較している。オリジナルの論文にある TypeC (キヤノンやホンダの新製品開発) のようなチームの特徴として次の6つをあげている。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>不安定な状態を保つ&lt;/p>
&lt;p>最初に綿密な計画や指示があるわけではない、チームは自由な裁量と同時に困難なゴールを目指す&lt;/p>
&lt;/li>
&lt;li>
&lt;p>プロジェクトチームは自ら組織化する&lt;/p>
&lt;p>チームは不安定な状態から自己組織化し、対話の中で自律状態を作り出す&lt;/p>
&lt;/li>
&lt;li>
&lt;p>開発フェーズを重複させる&lt;/p>
&lt;p>開発フェーズを重複させることで、メンバーは専門分野を超えてプロジェクト全体で責任をもつようになる&lt;/p>
&lt;/li>
&lt;li>
&lt;p>「マルチ学習」&lt;/p>
&lt;p>メンバーはグループ全体として学習し、専門を超えて学習する&lt;/p>
&lt;/li>
&lt;li>
&lt;p>柔らかなマネジメント&lt;/p>
&lt;p>無管理でも強い管理でもない自主性を尊重した柔らかなマネジメントが重要である&lt;/p>
&lt;/li>
&lt;li>
&lt;p>学びを組織で共有する&lt;/p>
&lt;p>過去の成功を組織に伝える、もしくは意識的に捨て去る&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>オリジナルの論文の解説を読んでいると、古きよき日本の家族ぐるみの職場やチームの働き方のように思えてくる。時代が違うのでいまからこういった働き方に戻るのは現実的ではないだろうが、その中で重要だった概念や要素を、いまソフトウェア開発方法論としてのスクラムで実践できるのはいろいろと私の中でも思うことがある。私の考える課題管理の方法論にも竹内・野中氏のオリジナルの論文の概念は影響を受けるように思えた。章末にコラムとしてジェフ・サザーランド氏のインタビュー記事もあった。マイクロファイナンスのプロジェクトを通して、小さなグループに小さくお金を貸し出すことが、貧困から抜けすための小さなきっかけ (ブートストラップ) になるという体験からスクラム開発の動機づけになったという話しは哲学として印象に残った。なにかを成すには哲学が大事だと思う。&lt;/p>
&lt;h2 id="データがあると同期したくなる">データがあると同期したくなる&lt;/h2>
&lt;p>お仕事でスクラムのふりかえりをやっていて &lt;a href="https://miro.com/">miro&lt;/a> と &lt;a href="https://backlog.com/ja/">backlog&lt;/a> のデータ同期という話題が出た。業務チームはブレインストーミングで要件を洗い出したりする作業のときに miro を使っていて、miro ベースでメモを記述した後でバックログアイテムとして backlog に登録する。このとき backlog に登録した後で miro を捨てるならいいが、残したまま次の展望や要件の洗い出しにも再利用したりしていると、miro と backlog のバックログアイテムの内容が乖離したり不整合が発生したりする。チームとしてはバックログアイテムに書いてある内容が正という運用をしているため、miro のみに最新の情報がある状態が続くと課題になる。私の知る限り、miro と課題管理システムのデータ連携のツールはないと思う。&lt;/p>
&lt;p>私からみたら最初からすべてバックログアイテムに文章で書けばいいやんで話が終わってしまうが、人によって使い慣れたツールは異なるため、そんな単純な話しでもない。一方で昔は miro や backlog がなかった時代もあって、そのときは物理的な付箋紙をホワイトボードに張りながら作業をしていたから、本来は同期したいという概念もなかったはずという意見も出た。たしかにツールがデジタルになって電子データとなった瞬間からデータの再利用を考えるようになるんだなと私も思えた。あと付箋紙をホワイトボードに貼り付けていた時代は何週間もその状態のまま放置するといったこともなかったのではないか？という気もした。&lt;/p></content></item><item><title>ワーケーションの思いつき</title><link>/diary/posts/2021/1210/</link><pubDate>Fri, 10 Dec 2021 08:43:04 +0900</pubDate><guid>/diary/posts/2021/1210/</guid><description>0時に寝て6時に起きた。
朝活: アジャイル開発とスクラム 第2版 金朝ツメトギ 2021-12-10 AM 6 金曜朝6時開催のもくもく会 に参加した。今回はてらださんも来られていた。第9章を読んだ。KDDI さんの事例紹介で2013年から取り組みしているらしい。フラクタルスプリント を実際の業務で実践している稀な事例としておもしろかった。1週間のスプリントの中に1日のスプリントが4回あるといったフラクタル構造のスプリント。また金曜日は「仕事をしない日」としてレトロスペクティブと OST (オープンスペーステクノロジー、自由な発表と議論の時間) に割当てている。20%ルールに近いものと言えるかもしれないが、自己研鑽のための時間をスプリントの中に組み込むという、組織の理解があってこそできる取り組みを実践していてすごいなと感心した。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。スクラムの話題として だいくしーのスクラム Bar #1 や Scrum Masters Night! Online 〜第10夜〜 に参加してやり取りした内容や考察したことなどをいろいろ話してた。そのうちの話題の1つに、スクラムマスターの役割とは何だろうかがある。スクラムマスターはプロダクトをよくすることに責任をもち、メンバーが働きやすいように支えるような役割である。ここまでは共通認識として、その範囲がどこまでかは人によって意見が異なるように思えた。あくまでプロダクトやチームの範囲内で行動するスクラムマスターと、スクラムを組織全体に広めたり、人事・評価制度や経営にも参加していくスクラムマスターがある。スクラムマスターは社外の人間でもできるという考え方があるが、必然的に後者の役割も担うなら社内の人間に限定される。後者の役割は越権行為ではないか、いやいや、チームのために働いたメンバーの評価が下がってしまえば現場でよりよいプロダクト開発はできないから大事ではないかという意見も出た。便宜上、前者を (普通の) スクラムマスター、後者を「意識の高い」スクラムマスターと呼ぶ。私の考えでは、意識の高いスクラムマスターの言わんとしていることはわかるが、それをやりたいなら部長や役員などになってから職責とともに改善すべきであり、スクラムマスターという組織におけるラインではない人が経営に口出ししたりすることによる、組織の歪みはまた別の問題を引き起こすのではないかとも思えた。私も経営をやっていて経営側の視点でみるとやはりおかしい。
その後にワーケーションについて相談した。城崎温泉にある きのいえ でワーケーションをやってみようかと考えている。参加のお誘いややり方についていくつか相談しながら前向きに検討しようということになった。
忘年会 【初参加大歓迎】三宮.dev＆bizpy 合同忘年会 に参加してきた。忘年会の前に運営に入ってもらった、わたなべさんと軽く bizpy の運営について話してきた。1月はわたなべさんに機械学習の勉強会をやってもらう。私は昨年も三宮.devの忘年会に出てた。昨年は3人だったのが今年は4人になった。名物の大きなポークカツレツ。4人とも勉強会の常連みたいな人たちなのでお酒を飲みながらわいわいやって、コロナ禍になる前のコミュニティの勉強会の飲み会を思い出したりしてた。ワーケーションの話をしたら2人は興味を示してくれて、メンバーが4人集まったので開発合宿の企画をしてみることに決めた。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="朝活-アジャイル開発とスクラム-第2版">朝活: アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=MbpX1LF1fto">金朝ツメトギ 2021-12-10 AM 6 金曜朝6時開催のもくもく会&lt;/a> に参加した。今回はてらださんも来られていた。第9章を読んだ。KDDI さんの事例紹介で2013年から取り組みしているらしい。&lt;a href="/diary/diary/posts/2021/1029/#フラクタルスプリント">フラクタルスプリント&lt;/a> を実際の業務で実践している稀な事例としておもしろかった。1週間のスプリントの中に1日のスプリントが4回あるといったフラクタル構造のスプリント。また金曜日は「仕事をしない日」としてレトロスペクティブと OST (オープンスペーステクノロジー、自由な発表と議論の時間) に割当てている。20%ルールに近いものと言えるかもしれないが、自己研鑽のための時間をスプリントの中に組み込むという、組織の理解があってこそできる取り組みを実践していてすごいなと感心した。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1210-weekly-sprint.png"/>
&lt;/figure>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。スクラムの話題として &lt;a href="https://chatwork.connpass.com/event/231183/">だいくしーのスクラム Bar #1&lt;/a> や &lt;a href="https://smn.connpass.com/event/226002/">Scrum Masters Night! Online 〜第10夜〜&lt;/a> に参加してやり取りした内容や考察したことなどをいろいろ話してた。そのうちの話題の1つに、スクラムマスターの役割とは何だろうかがある。スクラムマスターはプロダクトをよくすることに責任をもち、メンバーが働きやすいように支えるような役割である。ここまでは共通認識として、その範囲がどこまでかは人によって意見が異なるように思えた。あくまでプロダクトやチームの範囲内で行動するスクラムマスターと、スクラムを組織全体に広めたり、人事・評価制度や経営にも参加していくスクラムマスターがある。スクラムマスターは社外の人間でもできるという考え方があるが、必然的に後者の役割も担うなら社内の人間に限定される。後者の役割は越権行為ではないか、いやいや、チームのために働いたメンバーの評価が下がってしまえば現場でよりよいプロダクト開発はできないから大事ではないかという意見も出た。便宜上、前者を (普通の) スクラムマスター、後者を「意識の高い」スクラムマスターと呼ぶ。私の考えでは、意識の高いスクラムマスターの言わんとしていることはわかるが、それをやりたいなら部長や役員などになってから職責とともに改善すべきであり、スクラムマスターという組織におけるラインではない人が経営に口出ししたりすることによる、組織の歪みはまた別の問題を引き起こすのではないかとも思えた。私も経営をやっていて経営側の視点でみるとやはりおかしい。&lt;/p>
&lt;p>その後にワーケーションについて相談した。城崎温泉にある &lt;a href="https://kinosaki-kinoie.com/">きのいえ&lt;/a> でワーケーションをやってみようかと考えている。参加のお誘いややり方についていくつか相談しながら前向きに検討しようということになった。&lt;/p>
&lt;h2 id="忘年会">忘年会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/231602/">【初参加大歓迎】三宮.dev＆bizpy 合同忘年会&lt;/a> に参加してきた。忘年会の前に運営に入ってもらった、わたなべさんと軽く bizpy の運営について話してきた。1月はわたなべさんに機械学習の勉強会をやってもらう。私は昨年も三宮.devの忘年会に出てた。昨年は3人だったのが今年は4人になった。名物の大きなポークカツレツ。4人とも勉強会の常連みたいな人たちなのでお酒を飲みながらわいわいやって、コロナ禍になる前のコミュニティの勉強会の飲み会を思い出したりしてた。ワーケーションの話をしたら2人は興味を示してくれて、メンバーが4人集まったので開発合宿の企画をしてみることに決めた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1210-katsu.jpg"/>
&lt;/figure></content></item><item><title>チームごっこ</title><link>/diary/posts/2021/1203/</link><pubDate>Fri, 03 Dec 2021 08:55:15 +0900</pubDate><guid>/diary/posts/2021/1203/</guid><description>0時に寝て6時に起きた。
朝活: アジャイル開発とスクラム 第2版 第7章の残りと第8章を読んだ。事例紹介なので軽く読み流した感じ。インタビュー記事のタイトルが気になった。
「合宿で、「仕事での同僚」から「チームの仲間」になれました
このタイトルと内容に私は違和感があるので反論としてそれを書いていく。
心理的安全性のつくりかた に書いてあったが、MIT のオスターマン教授によると、チームという概念は比較的新しいものらしい。
職場における、チームという概念は1980年以降、最も広まったイノベーションのひとつだ。
「心理的安全性のつくりかた」ではチームとグループの違いは次になる。
チームは共通の目標に向かってともに問題解決やアイディアを出す集団 グループはそうなっていない、ただの寄せ集めの集団 共通の目標に対して互いに対話や協働することでチームになっていく。この考え方は私の経験則とも合致するし支持している。実際の業務や作業を通してチームは築かれていくと私は考える。しかし、コミュニケーションの活性化や親睦を深めればチームになると誤解している人もいるように思う。
件のインタビュー記事では、次の内容があった。
合宿の最大の成果は、何だったのでしょう？
「仕事での同僚」から「チームの仲間」になれたことだと思います。昨今、ハラスメントやプライバシーの観点からなかなか個人の深い話ができないことが多いと思いますが、お互いを信頼した上で自分の生い立ちや経験から「私がなぜここにいるのか」を深掘りできたことが大きいと思います。
具体的には、誰とも話さず、自分を見つめる時間として三浦海岸の浜辺に全員を１時間放置しました（笑）。その時間で自分の今までをふりかえり、再集合したときに１人ずつ語り、お互いのことを尊重し受け入れることで心理的安全性が一気に高まったと思います。
私だったら転職を考えますね。浜辺に放置されて再集合して生い立ちとか語れとか言われて、そんな上司だと懸念を抱くと思う。その場で抗議はしなかったとしても。仕事を通して結果的に信頼関係が深くなって、同じ行動をするなら理解できるが、そうじゃない状態で職位の高い人がメンバーに合宿を半強制参加させてプライベートの内容を話させるのはハラスメントと紙一重かもしれない。おそらくこれはたまたまうまくいったケースだというだけで再現性のあるプラクティスにはまったく思えない。厳しい言い方をすると、偉い人の自己満足によるチームごっこではないかと思う。
「仕事での同僚」から「チームの仲間」になれたというインタビューが書かれていた。私の感覚ではやや違和感がある。グループではなくチームという概念が認識されるようになったのはわりと最近の話だというのはたしか心理的安全性のつくりかたに書いてあった気がする。 #金朝ツメトギ
&amp;mdash; Tetsuya Morimoto (@t2y) December 2, 2021 本番リリース作業 今日は非稼働日なんだけど、インフラ周りの修正をしていたので本番リリースの作業を見守っていた。ハドルで画面共有しながらみんなでわいわいできるので、これはこれでリリース作業の雰囲気を学ぶ機会にもなる。私が本番リリースすることはないだろうけど、担当者がどういった作業でリリースしているかを知っておく方が運用に役に立つ仕組みも導入できるかもしれない。音声通話と画面共有さえあればフルリモートワークでもなにも困ることはない。よい世の中になったと思う。RabbitMQ と Dapr 周りで私が懸念に思っていたことを本番リリースを通して検証したり振る舞いを観察できたので新たな知見を得た。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="朝活-アジャイル開発とスクラム-第2版">朝活: アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>第7章の残りと第8章を読んだ。事例紹介なので軽く読み流した感じ。インタビュー記事のタイトルが気になった。&lt;/p>
&lt;blockquote>
&lt;p>「合宿で、「仕事での同僚」から「チームの仲間」になれました&lt;/p>
&lt;/blockquote>
&lt;p>このタイトルと内容に私は違和感があるので反論としてそれを書いていく。&lt;/p>
&lt;p>&lt;a href="https://pub.jmam.co.jp/book/b517388.html">心理的安全性のつくりかた&lt;/a> に書いてあったが、MIT のオスターマン教授によると、チームという概念は比較的新しいものらしい。&lt;/p>
&lt;blockquote>
&lt;p>職場における、チームという概念は1980年以降、最も広まったイノベーションのひとつだ。&lt;/p>
&lt;/blockquote>
&lt;p>「心理的安全性のつくりかた」ではチームとグループの違いは次になる。&lt;/p>
&lt;ul>
&lt;li>チームは共通の目標に向かってともに問題解決やアイディアを出す集団&lt;/li>
&lt;li>グループはそうなっていない、ただの寄せ集めの集団&lt;/li>
&lt;/ul>
&lt;p>共通の目標に対して互いに対話や協働することでチームになっていく。この考え方は私の経験則とも合致するし支持している。実際の業務や作業を通してチームは築かれていくと私は考える。しかし、コミュニケーションの活性化や親睦を深めればチームになると誤解している人もいるように思う。&lt;/p>
&lt;p>件のインタビュー記事では、次の内容があった。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>合宿の最大の成果は、何だったのでしょう？&lt;/strong>&lt;/p>
&lt;p>「仕事での同僚」から「チームの仲間」になれたことだと思います。昨今、ハラスメントやプライバシーの観点からなかなか個人の深い話ができないことが多いと思いますが、お互いを信頼した上で自分の生い立ちや経験から「私がなぜここにいるのか」を深掘りできたことが大きいと思います。&lt;/p>
&lt;p>具体的には、誰とも話さず、自分を見つめる時間として三浦海岸の浜辺に全員を１時間放置しました（笑）。その時間で自分の今までをふりかえり、再集合したときに１人ずつ語り、お互いのことを尊重し受け入れることで心理的安全性が一気に高まったと思います。&lt;/p>
&lt;/blockquote>
&lt;p>私だったら転職を考えますね。浜辺に放置されて再集合して生い立ちとか語れとか言われて、そんな上司だと懸念を抱くと思う。その場で抗議はしなかったとしても。仕事を通して結果的に信頼関係が深くなって、同じ行動をするなら理解できるが、そうじゃない状態で職位の高い人がメンバーに合宿を半強制参加させてプライベートの内容を話させるのはハラスメントと紙一重かもしれない。おそらくこれはたまたまうまくいったケースだというだけで再現性のあるプラクティスにはまったく思えない。厳しい言い方をすると、偉い人の自己満足によるチームごっこではないかと思う。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">「仕事での同僚」から「チームの仲間」になれたというインタビューが書かれていた。私の感覚ではやや違和感がある。グループではなくチームという概念が認識されるようになったのはわりと最近の話だというのはたしか心理的安全性のつくりかたに書いてあった気がする。 &lt;a href="https://twitter.com/hashtag/%E9%87%91%E6%9C%9D%E3%83%84%E3%83%A1%E3%83%88%E3%82%AE?src=hash&amp;amp;ref_src=twsrc%5Etfw">#金朝ツメトギ&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1466528241661874179?ref_src=twsrc%5Etfw">December 2, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="本番リリース作業">本番リリース作業&lt;/h2>
&lt;p>今日は非稼働日なんだけど、インフラ周りの修正をしていたので本番リリースの作業を見守っていた。ハドルで画面共有しながらみんなでわいわいできるので、これはこれでリリース作業の雰囲気を学ぶ機会にもなる。私が本番リリースすることはないだろうけど、担当者がどういった作業でリリースしているかを知っておく方が運用に役に立つ仕組みも導入できるかもしれない。音声通話と画面共有さえあればフルリモートワークでもなにも困ることはない。よい世の中になったと思う。RabbitMQ と Dapr 周りで私が懸念に思っていたことを本番リリースを通して検証したり振る舞いを観察できたので新たな知見を得た。&lt;/p></content></item><item><title>朝から晩まで多忙な一日</title><link>/diary/posts/2021/1126/</link><pubDate>Fri, 26 Nov 2021 19:36:04 +0900</pubDate><guid>/diary/posts/2021/1126/</guid><description>0時に寝て5時に起きた。昨日 slack で質問していた内容に5時頃に返信があるのをたまたまみかけた。この時間に起きているんだと思って返信にコメントしてたら別のメンバーからもコメントが書き込まれて、早起きは三文の得みたいな感じで朝5時から slack でやり取りしてた。いま私はだいたい8時から始業している。開発チームの半分ぐらいのメンバーはそのぐらいから始業しているのが課題管理システムや git のコミットログからわかる。このチームは朝早い人たちが多いなと感心した。
朝活: アジャイル開発とスクラム 第2版 2021-11-26 AM 6 金曜朝6時開催のもくもく会 で第6章と第7章を読んだ。第2部は企業において実際にスクラムを導入していったときの四方山話が出てくる。私はあまり他社の事例に興味はないが、対談の過程で本質的に大事なことや難しいことなどがあぶり出されることもあるので、実務を通しての話題も参考になる場合があることは理解できる。大半の事例は実業務で使われているという結論がわかるだけでも十分だと思う。とくに大企業は様々な厳しい制約や要件の中で採用していると推測されるので、それだけで大きなメッセージをもつ。斜め読みでざっと読み進めながら興味のある話題があれば精読するといった程度で読んでた。
大企業あるあるな話しでスクラムイベントを通してお互いの距離感が縮まってうまくいったといった内容があった。開発者からすると距離感の遠近に関係なく、必要なら適切な相手を探し出してコミュニケーションを取るのが普通だけど、みんながみんなそうではないだろうし、(同じ会社の社員でも)よく知らない人とは話さないといった考え方をもつ人もいるだろう。ある人はこれを単純接触効果で説明していたけど、業務ではなく人間の側面からみてスクラムイベントが多いことにも意義があるのかもしれない。
ある事例でスクラムにおいてイベントがたくさんあってそれに参加することでお互いの距離感を縮めたという効果が書かれている。開発者は気になったことは何でも確認するという姿勢をとりがちだけど、関係者のみんながそうではないというのも理解できる #金朝ツメトギ
&amp;mdash; Tetsuya Morimoto (@t2y) November 25, 2021 顧問さんと雑談 隔週で打ち合わせをしている。最近はお手伝いのお仕事が忙しいので今回は雑談になってしまったが、近況としてリーンキャンバス、スクラム実践の話題などを話していた。わりと盛り上がって1時間で切り上げるつもりが1時間半に伸びてしまって、別のお仕事の時間を圧迫したけど、それはそれで意義のある雑談になったので収穫はあった。
ある組織で新規事業を行う上で AARRR (あー) モデル をすごく重視しているといった話題が出た。バケツみたいなイメージがあって、そこに現実の数字を当てはめていってプロジェクト/プロダクトの改善やふりかえりなどに活かしているという。サービスのグロースに責任をもつ人には重要な概念だという。うちのプロダクトはグロースしなくてもよいけど、なんらかのフレームワークに当てはめて抜け・漏れがないかをチェックすることにも使えるかもしれない。世の中でよく使われているフレームワークを調査しておいて損はないと思う。私はビジネスに全く疎いのでリーンキャンバスを通じて、AARRR モデルの話題になって、それがどういった用途で使われているかというお話しは興味深かった。
具体的には AARRR モデルの他に、スクラムの話題からは野中郁次郎氏のオリジナルの論文、大規模アジャイルの方法論などが盛り上がっていくつかキーワードが出た。そういった雑談の中で感性に従って気になったことを深堀りしていくとおもしろい調査や知見になったりすることを経験的に実感しつつある。今後もそういう機会や内容を大事にしていきたい。
カスタム GitHub Actions の開発 先日 調査していたものをベースに、普通にやる方法と カスタム GitHub Actions の compoiste action で実装する場合の検討資料などを作って、カスタム GitHub Actions を実装してよいといった許可をもらった。企業における唯一の懸念は (原則) public リポジトリで運用するところで、CI のような処理に社外秘は含まれないが、public そのものに審査や承認を必要とするような組織では腰が重くなるようなこともあるかもしれない。ロードマップにも private リポジトリでカスタム GitHub Actoins を動かせるようにしようという課題は作成されている。
Actions: Use actions from internal repositories #74</description><content>&lt;p>0時に寝て5時に起きた。昨日 slack で質問していた内容に5時頃に返信があるのをたまたまみかけた。この時間に起きているんだと思って返信にコメントしてたら別のメンバーからもコメントが書き込まれて、早起きは三文の得みたいな感じで朝5時から slack でやり取りしてた。いま私はだいたい8時から始業している。開発チームの半分ぐらいのメンバーはそのぐらいから始業しているのが課題管理システムや git のコミットログからわかる。このチームは朝早い人たちが多いなと感心した。&lt;/p>
&lt;h2 id="朝活-アジャイル開発とスクラム-第2版">朝活: アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=3T8CTKDFd9g">2021-11-26 AM 6 金曜朝6時開催のもくもく会&lt;/a> で第6章と第7章を読んだ。第2部は企業において実際にスクラムを導入していったときの四方山話が出てくる。私はあまり他社の事例に興味はないが、対談の過程で本質的に大事なことや難しいことなどがあぶり出されることもあるので、実務を通しての話題も参考になる場合があることは理解できる。大半の事例は実業務で使われているという結論がわかるだけでも十分だと思う。とくに大企業は様々な厳しい制約や要件の中で採用していると推測されるので、それだけで大きなメッセージをもつ。斜め読みでざっと読み進めながら興味のある話題があれば精読するといった程度で読んでた。&lt;/p>
&lt;p>大企業あるあるな話しでスクラムイベントを通してお互いの距離感が縮まってうまくいったといった内容があった。開発者からすると距離感の遠近に関係なく、必要なら適切な相手を探し出してコミュニケーションを取るのが普通だけど、みんながみんなそうではないだろうし、(同じ会社の社員でも)よく知らない人とは話さないといった考え方をもつ人もいるだろう。ある人はこれを単純接触効果で説明していたけど、業務ではなく人間の側面からみてスクラムイベントが多いことにも意義があるのかもしれない。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">ある事例でスクラムにおいてイベントがたくさんあってそれに参加することでお互いの距離感を縮めたという効果が書かれている。開発者は気になったことは何でも確認するという姿勢をとりがちだけど、関係者のみんながそうではないというのも理解できる &lt;a href="https://twitter.com/hashtag/%E9%87%91%E6%9C%9D%E3%83%84%E3%83%A1%E3%83%88%E3%82%AE?src=hash&amp;amp;ref_src=twsrc%5Etfw">#金朝ツメトギ&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1463982173212459019?ref_src=twsrc%5Etfw">November 25, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="顧問さんと雑談">顧問さんと雑談&lt;/h2>
&lt;p>隔週で打ち合わせをしている。最近はお手伝いのお仕事が忙しいので今回は雑談になってしまったが、近況としてリーンキャンバス、スクラム実践の話題などを話していた。わりと盛り上がって1時間で切り上げるつもりが1時間半に伸びてしまって、別のお仕事の時間を圧迫したけど、それはそれで意義のある雑談になったので収穫はあった。&lt;/p>
&lt;p>ある組織で新規事業を行う上で &lt;a href="https://www.innovation.co.jp/urumo/aarrr/">AARRR (あー) モデル&lt;/a> をすごく重視しているといった話題が出た。バケツみたいなイメージがあって、そこに現実の数字を当てはめていってプロジェクト/プロダクトの改善やふりかえりなどに活かしているという。サービスのグロースに責任をもつ人には重要な概念だという。うちのプロダクトはグロースしなくてもよいけど、なんらかのフレームワークに当てはめて抜け・漏れがないかをチェックすることにも使えるかもしれない。世の中でよく使われているフレームワークを調査しておいて損はないと思う。私はビジネスに全く疎いのでリーンキャンバスを通じて、AARRR モデルの話題になって、それがどういった用途で使われているかというお話しは興味深かった。&lt;/p>
&lt;p>具体的には AARRR モデルの他に、スクラムの話題からは野中郁次郎氏のオリジナルの論文、大規模アジャイルの方法論などが盛り上がっていくつかキーワードが出た。そういった雑談の中で感性に従って気になったことを深堀りしていくとおもしろい調査や知見になったりすることを経験的に実感しつつある。今後もそういう機会や内容を大事にしていきたい。&lt;/p>
&lt;h2 id="カスタム-github-actions-の開発">カスタム GitHub Actions の開発&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1116/#カスタム-github-actions-作成">先日&lt;/a> 調査していたものをベースに、普通にやる方法と カスタム GitHub Actions の compoiste action で実装する場合の検討資料などを作って、カスタム GitHub Actions を実装してよいといった許可をもらった。企業における唯一の懸念は (原則) public リポジトリで運用するところで、CI のような処理に社外秘は含まれないが、public そのものに審査や承認を必要とするような組織では腰が重くなるようなこともあるかもしれない。ロードマップにも private リポジトリでカスタム GitHub Actoins を動かせるようにしようという課題は作成されている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/github/roadmap/issues/74">Actions: Use actions from internal repositories #74&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>スクラムの起源</title><link>/diary/posts/2021/1123/</link><pubDate>Tue, 23 Nov 2021 10:57:15 +0900</pubDate><guid>/diary/posts/2021/1123/</guid><description>5時に寝て7時半に起きた。前週末は遊んでたので夜はいろいろ作業してた。朝起きる習慣がついてきたので何時に寝ても起きれる感じになってきた。うまく体調管理もできている。
年末調整と住民税の納付 年末調整は1月末まで、住民税の特別徴収は納付の特例を使うと6-11月の6ヶ月分を12月10日までに納める。年末調整も11月の給与を確定したら調整額を算出して12月の給与に反映する。必要な情報を入力したら会計システム (freee) で自動算出してくれて書類も一通り作ってくれるので難しくない。ここで出力される給与支払報告書を市役所と税務署のそれぞれに申請する。市役所向けの手続きは eLTAX で行い、税務署向けの手続きは e-Tax で行う。先日 Windows マシンを購入 したので、今回は eLTAX の DL 版で完全な手続きができるはず。ただし、e-Tax も eLTAX も祝日・日曜日は利用できないのでやろうと思ったものの、今日は祝日だからできなかった。
住民税の特別徴収の納付も今回が初めての試み。企業が社員に代わり住民税を納付するのが原則であり、これを特別徴収と呼ぶ。昨年は特別徴収への切り替え申請をしないといけないのを私が知らなくて手続きが遅れた結果、個人宛に届いた納付書でそのまま支払いした。納付自体はそれでも問題はない。おそらく徴税側からみたら源泉徴収して企業の担当者が納付した方が誤りがなく確実でサポートコストを削減できるという狙いなんだろうと推測する。住民税の納付も eLTAX でできるようなので後日挑戦してみる。
アジャイル開発とスクラム 第2版 顧客・技術・経営をつなぐ協調的ソフトウェア開発マネジメント 4日前から読み進めていて、第1部アジャイル開発とは何か、スクラムとは何か (第1章から第5章) を読み終えた。
冒頭の序論を読んでいて、スクラムは 1980 年代の日本の製造業の (革新的な) 製品開発スタイルの論文がオリジナルだというのを知った。ソフトウェア開発の文脈だと、米国から輸入した方法論のようにみえるが、もとは日本で編み出された方法論だったという。1986年に書かれたハーバード・ビジネス・レビューに投稿された論文がオリジナルらしい。
The New New Product Development Game by Hirotaka Takeuchi and Ikujiro Nonaka 前に スクラムガイド2020 を一通り読んでいたので、スクラムについての内容はだいたい理解できた。補足でよかったのは、スクラムガイド 2017 から 2020 で改訂された内容やその背景や意図などがコラムで紹介されていた。それらを知ることで、よりスクラムで陥りやすい失敗や誤解されがちなところを理解できた。たとえば「開発チーム」という用語から「開発者」に改められた。スクラムチームの中に別のチームがあるようにみえ、プロダクトオーナー vs 開発チームのような対立構造にならないよう、チームはスクラムチームという1つしかないという意図だという。そして、開発チームの自己組織化 (Self-organized) というキーワードが、スクラムチームの自己管理型 (Self-managed) へといったように、主体である開発チームだけ自律的且つ協働するように読めたのを、スクラムチームという1つのチームしかないと強調されている。
コラム: 2020 スクラムガイド改訂とスクラムの3つの罠 スクラムが形式的、儀式的になってしまっている 目的を理解せずにハウツーをなぞるだけのチームが増えたので抽象的な表現に変更した 例) デイリースクラムがただの報告するだけになっている デイリースクラムの目的は状況にあわせた再計画であるため、形式的な報告ではいけない プロダクトオーナー vs 開発チームの構図に陥ってしまっている チーム内の分断をなくし、ワンチームになることが強調されている 開発チームから開発者へ、チームはスクラムチームが唯一 プロダクトオーナー vs 開発者が対立構図になることが多かった 「開発チームの自己組織化」から「スクラムチームの自己管理」へ スクラムは役割を超えて協力していくことが欠かせない 問題 vs 私たち (スクラムチーム) という構図を引き出すことが重要 スクラムマスターがスクラム警察もしくは雑用係になってしまっている スクラムマスターが「サーバントリーダー」とされていたが、単にサーバントになってしまうことがあった スクラムマスターはプロダクトの成果や組織の目標にコミットメントしないといけない ただスクラムルールを守らせたり、会議の司会役をするだけではない 「真のリーダー」としての資質とプロダクトの成果や組織の目標にコミットメントしていくための熱量を重視して専任していく必要がある これらのコラムを読むと、私が傍からみていたスクラムは本来の意図したスクラムの開発方法論ではなく、正しく運用されていなかったスクラムなのかもしれないとも思えてきた。本書の第1部を読み進めてみて、スクラムの意図している目的や価値には私が共感できるところが多々あった。</description><content>&lt;p>5時に寝て7時半に起きた。前週末は遊んでたので夜はいろいろ作業してた。朝起きる習慣がついてきたので何時に寝ても起きれる感じになってきた。うまく体調管理もできている。&lt;/p>
&lt;h2 id="年末調整と住民税の納付">年末調整と住民税の納付&lt;/h2>
&lt;p>年末調整は1月末まで、住民税の特別徴収は納付の特例を使うと6-11月の6ヶ月分を12月10日までに納める。年末調整も11月の給与を確定したら調整額を算出して12月の給与に反映する。必要な情報を入力したら会計システム (freee) で自動算出してくれて書類も一通り作ってくれるので難しくない。ここで出力される給与支払報告書を市役所と税務署のそれぞれに申請する。市役所向けの手続きは &lt;a href="https://www.eltax.lta.go.jp/">eLTAX&lt;/a> で行い、税務署向けの手続きは &lt;a href="https://www.e-tax.nta.go.jp/">e-Tax&lt;/a> で行う。先日 &lt;a href="/diary/diary/posts/2021/1103/#asus-rog-zephyrus-g15-ga503qr">Windows マシンを購入&lt;/a> したので、今回は eLTAX の DL 版で完全な手続きができるはず。ただし、e-Tax も eLTAX も祝日・日曜日は利用できないのでやろうと思ったものの、今日は祝日だからできなかった。&lt;/p>
&lt;p>住民税の特別徴収の納付も今回が初めての試み。企業が社員に代わり住民税を納付するのが原則であり、これを特別徴収と呼ぶ。昨年は特別徴収への切り替え申請をしないといけないのを私が知らなくて手続きが遅れた結果、個人宛に届いた納付書でそのまま支払いした。納付自体はそれでも問題はない。おそらく徴税側からみたら源泉徴収して企業の担当者が納付した方が誤りがなく確実でサポートコストを削減できるという狙いなんだろうと推測する。住民税の納付も eLTAX でできるようなので後日挑戦してみる。&lt;/p>
&lt;h2 id="アジャイル開発とスクラム-第2版-顧客技術経営をつなぐ協調的ソフトウェア開発マネジメント">アジャイル開発とスクラム 第2版 顧客・技術・経営をつなぐ協調的ソフトウェア開発マネジメント&lt;/h2>
&lt;p>4日前から読み進めていて、第1部アジャイル開発とは何か、スクラムとは何か (第1章から第5章) を読み終えた。&lt;/p>
&lt;p>冒頭の序論を読んでいて、スクラムは 1980 年代の日本の製造業の (革新的な) 製品開発スタイルの論文がオリジナルだというのを知った。ソフトウェア開発の文脈だと、米国から輸入した方法論のようにみえるが、もとは日本で編み出された方法論だったという。1986年に書かれたハーバード・ビジネス・レビューに投稿された論文がオリジナルらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hbr.org/1986/01/the-new-new-product-development-game">The New New Product Development Game by Hirotaka Takeuchi and Ikujiro Nonaka&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>前に &lt;a href="https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf">スクラムガイド2020&lt;/a> を一通り読んでいたので、スクラムについての内容はだいたい理解できた。補足でよかったのは、スクラムガイド 2017 から 2020 で改訂された内容やその背景や意図などがコラムで紹介されていた。それらを知ることで、よりスクラムで陥りやすい失敗や誤解されがちなところを理解できた。たとえば「開発チーム」という用語から「開発者」に改められた。スクラムチームの中に別のチームがあるようにみえ、プロダクトオーナー vs 開発チームのような対立構造にならないよう、チームはスクラムチームという1つしかないという意図だという。そして、開発チームの自己組織化 (Self-organized) というキーワードが、スクラムチームの自己管理型 (Self-managed) へといったように、主体である開発チームだけ自律的且つ協働するように読めたのを、スクラムチームという1つのチームしかないと強調されている。&lt;/p>
&lt;blockquote>
&lt;h5 id="コラム-2020-スクラムガイド改訂とスクラムの3つの罠">コラム: 2020 スクラムガイド改訂とスクラムの3つの罠&lt;/h5>
&lt;ul>
&lt;li>スクラムが形式的、儀式的になってしまっている
&lt;ul>
&lt;li>目的を理解せずにハウツーをなぞるだけのチームが増えたので抽象的な表現に変更した&lt;/li>
&lt;li>例) デイリースクラムがただの報告するだけになっている
&lt;ul>
&lt;li>デイリースクラムの目的は状況にあわせた再計画であるため、形式的な報告ではいけない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>プロダクトオーナー vs 開発チームの構図に陥ってしまっている
&lt;ul>
&lt;li>チーム内の分断をなくし、ワンチームになることが強調されている&lt;/li>
&lt;li>開発チームから開発者へ、チームはスクラムチームが唯一&lt;/li>
&lt;li>プロダクトオーナー vs 開発者が対立構図になることが多かった
&lt;ul>
&lt;li>「開発チームの自己組織化」から「スクラムチームの自己管理」へ&lt;/li>
&lt;li>スクラムは役割を超えて協力していくことが欠かせない
&lt;ul>
&lt;li>問題 vs 私たち (スクラムチーム) という構図を引き出すことが重要&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>スクラムマスターがスクラム警察もしくは雑用係になってしまっている
&lt;ul>
&lt;li>スクラムマスターが「サーバントリーダー」とされていたが、単にサーバントになってしまうことがあった&lt;/li>
&lt;li>スクラムマスターはプロダクトの成果や組織の目標にコミットメントしないといけない
&lt;ul>
&lt;li>ただスクラムルールを守らせたり、会議の司会役をするだけではない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>「真のリーダー」としての資質とプロダクトの成果や組織の目標にコミットメントしていくための熱量を重視して専任していく必要がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>これらのコラムを読むと、私が傍からみていたスクラムは本来の意図したスクラムの開発方法論ではなく、正しく運用されていなかったスクラムなのかもしれないとも思えてきた。本書の第1部を読み進めてみて、スクラムの意図している目的や価値には私が共感できるところが多々あった。&lt;/p></content></item><item><title>メタ認知にもの思い</title><link>/diary/posts/2021/1119/</link><pubDate>Fri, 19 Nov 2021 10:02:43 +0900</pubDate><guid>/diary/posts/2021/1119/</guid><description>0時に寝て6時に起きた。昨日も疲れててウォーキングには出掛けられなくて寝て、3時や4時に起きつつも気付いたら5時半に起きてて、そう言えばと思い出したときに6時だったというふわふわした寝起きだった。
朝活: ミクロ経済学入門の入門 ［金朝ツメトギ］ 2021-11-19 AM 6 で第10章の再分配を読んだ。この本はほとんど朝活で読み終えた。
市場は社会的余剰が最大化されるので社会全体の富を増やす働きの強い制度だという。その増える富の方向性をタテとヨコで表現しているが、タテ方向に増やす働き (資本家が莫大な富をもつ) はあっても、ヨコ方向に拡げていく (みんなが裕福になる) 機能はないという。本章では所得の再分配と、再分配が適正かどうかを測るための指標として ジニ係数 について説明されている。ジニ係数を使うと、所得分布から不平等の状態を客観的に把握することに優れているという。富める者から貧しい者へ所得を移転することでジニ係数が下がる。ただし、両者の貧富を逆転させないものを ピグー・ドールトン移転 と呼ぶ。このピグー・ドールトン移転を実行し続けると、最終的に所得分布は全員が同じである 完全平等分布 になる。このときのジニ係数はゼロになる。その逆に、1人がこの世すべての所得を独り占めすると 完全不平等分布 となり、そのジニ係数は 1 (に近い値) となる。
絶対的貧困: 世界銀行は生命の維持に必要な基準として1日の所得1.25ドルと定めている、絶対的貧困の指標の1つと考えられる 相対的貧困: 所得分布の真ん中の50%と OECD が定めている 相対的貧困の基準に満たない人口の占める割合を 相対的貧困率 と呼ぶ 2019年 国民生活基礎調査の概況 によると、2019年の値は 15.7% になるらしい。6-7人に1人ぐらいの割合になる メタ認知が暴走 あんちぽさんの日記 に次の動画が紹介されてた。メタ認知で〈学ぶ力〉を高める：認知心理学が解き明かす効果的学習法 を読んでから、学びや書くことについてメタ認知というキーワードを意識して考えるようになっている。この動画ではメタ認知を「相対化」と説明していた。自己を相対化して、様々な文脈や状況、相手の意図なども考慮して結論が出せなくなったり、思考がまとまらなくなってしまうという。そういうメタ認知が暴走する人間を メタモン と名付けていた。ここでいう「モン」はモンスターの短縮なのかな？なかなかおもしろい。こんな極端ではないけど、私も相手の意図や状況を深読みしてしまって静観の姿勢を取るものの、なにも考えてない人だったりすると無駄に時間を浪費してしまうこともある。他にも 銃・病原菌・鉄 の話題が気になって wikipedia を軽く読んだりした。
会食 姪が大学に進学するそうでその面接に来たので一緒に晩ご飯することに。姉の勤め先の関係会社で 神戸プレジール という神戸牛ステーキのややたっかい系のレストランで食べてきた。コース料理で1万円/人で飲みものやデザートなどは別途6千円ほどだった。但馬牛や神戸牛のステーキはもちろんとてもおいしかったんだけど、もう自分はこういう料理を求めてないなというのも感じた。個室で食べてたんやけど、姉の仕事の関係者が5-6人ぐらい、入れ代わり立ち代わりにやってきて、姉は直売所のパートだったのが、いつの間にか社員になって、いつの間にかナンバー2になっているらしい。おまけでフォークリフト免許まで取っている。なんやかんやも含めて、この場所を晩ご飯に選んでいるのもあるんだろうけど、職場の周りの人にしか言っていない今日の予定を、どこかで聞きつけて挨拶にくる関係者の人たち。私が学生の頃「田舎の噂は isdn より速い」と言ったものだけど、いまは「光回線よりも速い」と言うらしい。姉がいろんな関係者に挨拶しているのをみながら、もう自分はこういう仕事もたぶんできないなと実感した。</description><content>&lt;p>0時に寝て6時に起きた。昨日も疲れててウォーキングには出掛けられなくて寝て、3時や4時に起きつつも気付いたら5時半に起きてて、そう言えばと思い出したときに6時だったというふわふわした寝起きだった。&lt;/p>
&lt;h2 id="朝活-ミクロ経済学入門の入門">朝活: ミクロ経済学入門の入門&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=g9-KQ76QmtI">［金朝ツメトギ］ 2021-11-19 AM 6&lt;/a> で第10章の再分配を読んだ。この本はほとんど朝活で読み終えた。&lt;/p>
&lt;p>市場は社会的余剰が最大化されるので社会全体の富を増やす働きの強い制度だという。その増える富の方向性をタテとヨコで表現しているが、タテ方向に増やす働き (資本家が莫大な富をもつ) はあっても、ヨコ方向に拡げていく (みんなが裕福になる) 機能はないという。本章では所得の再分配と、再分配が適正かどうかを測るための指標として &lt;strong>ジニ係数&lt;/strong> について説明されている。ジニ係数を使うと、所得分布から不平等の状態を客観的に把握することに優れているという。富める者から貧しい者へ所得を移転することでジニ係数が下がる。ただし、両者の貧富を逆転させないものを &lt;strong>ピグー・ドールトン移転&lt;/strong> と呼ぶ。このピグー・ドールトン移転を実行し続けると、最終的に所得分布は全員が同じである &lt;strong>完全平等分布&lt;/strong> になる。このときのジニ係数はゼロになる。その逆に、1人がこの世すべての所得を独り占めすると &lt;strong>完全不平等分布&lt;/strong> となり、そのジニ係数は 1 (に近い値) となる。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1119_gini-coefficient.png"/>
&lt;/figure>
&lt;ul>
&lt;li>絶対的貧困: 世界銀行は生命の維持に必要な基準として1日の所得1.25ドルと定めている、絶対的貧困の指標の1つと考えられる&lt;/li>
&lt;li>相対的貧困: 所得分布の真ん中の50%と OECD が定めている
&lt;ul>
&lt;li>相対的貧困の基準に満たない人口の占める割合を &lt;strong>相対的貧困率&lt;/strong> と呼ぶ&lt;/li>
&lt;li>&lt;a href="https://www.mhlw.go.jp/toukei/saikin/hw/k-tyosa/k-tyosa19/dl/03.pdf">2019年 国民生活基礎調査の概況&lt;/a> によると、2019年の値は 15.7% になるらしい。6-7人に1人ぐらいの割合になる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="メタ認知が暴走">メタ認知が暴走&lt;/h2>
&lt;p>&lt;a href="https://kentarokuribayashi.com/journal/2021/11/18/2021%e5%b9%b411%e6%9c%8818%e6%97%a5">あんちぽさんの日記&lt;/a> に次の動画が紹介されてた。&lt;a href="https://note.com/t2y1979/n/n4713058f48ce">メタ認知で〈学ぶ力〉を高める：認知心理学が解き明かす効果的学習法&lt;/a> を読んでから、学びや書くことについてメタ認知というキーワードを意識して考えるようになっている。この動画ではメタ認知を「相対化」と説明していた。自己を相対化して、様々な文脈や状況、相手の意図なども考慮して結論が出せなくなったり、思考がまとまらなくなってしまうという。そういうメタ認知が暴走する人間を &lt;em>メタモン&lt;/em> と名付けていた。ここでいう「モン」はモンスターの短縮なのかな？なかなかおもしろい。こんな極端ではないけど、私も相手の意図や状況を深読みしてしまって静観の姿勢を取るものの、なにも考えてない人だったりすると無駄に時間を浪費してしまうこともある。他にも &lt;a href="https://ja.wikipedia.org/wiki/%E9%8A%83%E3%83%BB%E7%97%85%E5%8E%9F%E8%8F%8C%E3%83%BB%E9%89%84">銃・病原菌・鉄&lt;/a> の話題が気になって wikipedia を軽く読んだりした。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/sj7eer2tArs" allowfullscreen title="意図せずメタ認知が暴走する悲しき怪物【ミーム提案委員会2】＃71">&lt;/iframe>
&lt;/div>
&lt;h2 id="会食">会食&lt;/h2>
&lt;p>姪が大学に進学するそうでその面接に来たので一緒に晩ご飯することに。姉の勤め先の関係会社で &lt;a href="https://kobe-plaisir.jp/">神戸プレジール&lt;/a> という神戸牛ステーキのややたっかい系のレストランで食べてきた。コース料理で1万円/人で飲みものやデザートなどは別途6千円ほどだった。但馬牛や神戸牛のステーキはもちろんとてもおいしかったんだけど、もう自分はこういう料理を求めてないなというのも感じた。個室で食べてたんやけど、姉の仕事の関係者が5-6人ぐらい、入れ代わり立ち代わりにやってきて、姉は直売所のパートだったのが、いつの間にか社員になって、いつの間にかナンバー2になっているらしい。おまけでフォークリフト免許まで取っている。なんやかんやも含めて、この場所を晩ご飯に選んでいるのもあるんだろうけど、職場の周りの人にしか言っていない今日の予定を、どこかで聞きつけて挨拶にくる関係者の人たち。私が学生の頃「田舎の噂は isdn より速い」と言ったものだけど、いまは「光回線よりも速い」と言うらしい。姉がいろんな関係者に挨拶しているのをみながら、もう自分はこういう仕事もたぶんできないなと実感した。&lt;/p></content></item><item><title>今年は忘年会やる</title><link>/diary/posts/2021/1118/</link><pubDate>Thu, 18 Nov 2021 07:19:22 +0900</pubDate><guid>/diary/posts/2021/1118/</guid><description>1時に寝て3時に起きて2度寝して6時に起きた。起き上がれなくて6時半までだらだらしてから起きた。
リポジトリの改行コード指定 git のリポジトリ設定で .gitattributes という設定方法がある。ざっくり理解するには .gitattributesによる改行コードの変換設定 を読むのが早い。とりあえずこんな設定にしてみた。すでに crlf の改行コードでコミットされたファイルがあるため、それらを lf に変換しないといけない。eol=lf にすると crlf でコミットされている既存ファイルも変換してくれるみたい。おそらくチェックアウトしたときにそうなるのかな？
* text=auto eol=lf *.jar binary ここ数年は Windows マシンを開発に使っている開発者と一緒に働いたことがなかったけど、OS 混在環境だとリポジトリ設定が必要だということに気付いた。多様性は大事。
忘年会 三宮.dev＆bizpy 合同忘年会 に参加登録した。bizpy だけだと、忘年会の参加者を集めるのは厳しそうなので三ノ宮.devと共同でやる。これなら最低でも2人は確定しているのでイベントがなくなることはない。日程は参加者の希望を聞きながら水曜か金曜でやるみたい。いましか飲み会できないだろうからいいと思う。
ミクロ経済学入門の入門 第9章の公共財を読んだ。市場を考察するときに扱う財は一般論として 私的財 を想定している。私的財は次の2つの性質を満たす。
競合的: 複数の人々が同時に利用できない 排除的: 拠出に貢献した特定のメンバーしか利用できない 一方で私的財と対偶の関係にある競合的でも排除的でもない財を 公共財 と呼ぶ。例えば、国防サービスや一般道路などが相当する。侵攻してくる敵国から自国を防衛するときにすべての国民、納税していない人であっても国防の利益にあずかれる。非競合的だが、排除的である財を クラブ財 と呼ぶ。高速道路などが相当する。みんなが利用できるが、利用料金を収めないと利用できない。競合的だが非排除的な財を コモンプール財 と呼ぶ。漁場などが相当する。どの漁師が魚を獲るかは競合しているが、漁業権をもっている限り漁そのものは制限されない。
これをまとめると、財は次の4つの分類になる。
競合的 非競合的 排除的 私的財 クラブ財 非排除的 コモンプール財 公共財 公共財の自発的供給の問いとして、排除的でも競合的でもない公共財が人々の自発的な行動で十分に供給できるかを考える。自分のお金を寄付する・寄付しないの2択でマトリクスを作成する。自分は寄付せず、他人の寄付から利益を得ることを フリーライド と呼ぶ。みんながフリーライドをしようとすると公共財はまったく供給されない。A と B の2者間における利得表を表すと次のようになる。相手が寄付して、自分が寄付しないときに最大の利益となり、どちらも寄付しないよりは両者が寄付した方が利益が大きくなる。
A \ B 寄付する 寄付しない 寄付する 4, 4 2, 5 寄付しない 5, 2 3, 3 A が寄付するか・しないかの選択は、B の寄付の有無に関係なく、A は寄付しない方が寄付したよりもトクすることになる。相手がどういった選択をしても自分にとって一番トクな選択肢が同じときにその選択肢を 支配戦略 という。この話は B からみても同じになる。A も B も寄付しないがトクする状態のことを 支配戦略均衡 という。この状態が最善かと言えば、そうではなく、両者が寄付した方が両者が寄付しないよりもトクする状態になる。このように公共財の供給を個々のプレイヤーに任せていては パレート劣位 な結果となってしまう。この状態からどうやって両者が寄付する パレート優位 な状態に移行できるかを考えるのが、政府の徴税の方策と言える。</description><content>&lt;p>1時に寝て3時に起きて2度寝して6時に起きた。起き上がれなくて6時半までだらだらしてから起きた。&lt;/p>
&lt;h2 id="リポジトリの改行コード指定">リポジトリの改行コード指定&lt;/h2>
&lt;p>git のリポジトリ設定で &lt;a href="https://git-scm.com/docs/gitattributes">.gitattributes&lt;/a> という設定方法がある。ざっくり理解するには &lt;a href="https://kiririmode.hatenablog.jp/entry/20170416/1492300735">.gitattributesによる改行コードの変換設定&lt;/a> を読むのが早い。とりあえずこんな設定にしてみた。すでに crlf の改行コードでコミットされたファイルがあるため、それらを lf に変換しないといけない。&lt;code>eol=lf&lt;/code> にすると crlf でコミットされている既存ファイルも変換してくれるみたい。おそらくチェックアウトしたときにそうなるのかな？&lt;/p>
&lt;pre tabindex="0">&lt;code>* text=auto eol=lf
*.jar binary
&lt;/code>&lt;/pre>&lt;p>ここ数年は Windows マシンを開発に使っている開発者と一緒に働いたことがなかったけど、OS 混在環境だとリポジトリ設定が必要だということに気付いた。多様性は大事。&lt;/p>
&lt;h2 id="忘年会">忘年会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/231602/">三宮.dev＆bizpy 合同忘年会&lt;/a> に参加登録した。bizpy だけだと、忘年会の参加者を集めるのは厳しそうなので三ノ宮.devと共同でやる。これなら最低でも2人は確定しているのでイベントがなくなることはない。日程は参加者の希望を聞きながら水曜か金曜でやるみたい。いましか飲み会できないだろうからいいと思う。&lt;/p>
&lt;h2 id="ミクロ経済学入門の入門">ミクロ経済学入門の入門&lt;/h2>
&lt;p>第9章の公共財を読んだ。市場を考察するときに扱う財は一般論として &lt;strong>私的財&lt;/strong> を想定している。私的財は次の2つの性質を満たす。&lt;/p>
&lt;ul>
&lt;li>競合的: 複数の人々が同時に利用できない&lt;/li>
&lt;li>排除的: 拠出に貢献した特定のメンバーしか利用できない&lt;/li>
&lt;/ul>
&lt;p>一方で私的財と対偶の関係にある競合的でも排除的でもない財を &lt;strong>公共財&lt;/strong> と呼ぶ。例えば、国防サービスや一般道路などが相当する。侵攻してくる敵国から自国を防衛するときにすべての国民、納税していない人であっても国防の利益にあずかれる。非競合的だが、排除的である財を &lt;strong>クラブ財&lt;/strong> と呼ぶ。高速道路などが相当する。みんなが利用できるが、利用料金を収めないと利用できない。競合的だが非排除的な財を &lt;strong>コモンプール財&lt;/strong> と呼ぶ。漁場などが相当する。どの漁師が魚を獲るかは競合しているが、漁業権をもっている限り漁そのものは制限されない。&lt;/p>
&lt;p>これをまとめると、財は次の4つの分類になる。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">競合的&lt;/th>
&lt;th style="text-align:center">非競合的&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">排除的&lt;/td>
&lt;td style="text-align:center">私的財&lt;/td>
&lt;td style="text-align:center">クラブ財&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">非排除的&lt;/td>
&lt;td style="text-align:center">コモンプール財&lt;/td>
&lt;td style="text-align:center">公共財&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>公共財の自発的供給の問いとして、排除的でも競合的でもない公共財が人々の自発的な行動で十分に供給できるかを考える。自分のお金を寄付する・寄付しないの2択でマトリクスを作成する。自分は寄付せず、他人の寄付から利益を得ることを &lt;strong>フリーライド&lt;/strong> と呼ぶ。みんながフリーライドをしようとすると公共財はまったく供給されない。A と B の2者間における利得表を表すと次のようになる。相手が寄付して、自分が寄付しないときに最大の利益となり、どちらも寄付しないよりは両者が寄付した方が利益が大きくなる。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">A \ B&lt;/th>
&lt;th style="text-align:center">寄付する&lt;/th>
&lt;th style="text-align:center">寄付しない&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">寄付する&lt;/td>
&lt;td style="text-align:center">4, 4&lt;/td>
&lt;td style="text-align:center">2, 5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">寄付しない&lt;/td>
&lt;td style="text-align:center">5, 2&lt;/td>
&lt;td style="text-align:center">3, 3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>A が寄付するか・しないかの選択は、B の寄付の有無に関係なく、A は寄付しない方が寄付したよりもトクすることになる。相手がどういった選択をしても自分にとって一番トクな選択肢が同じときにその選択肢を &lt;strong>支配戦略&lt;/strong> という。この話は B からみても同じになる。A も B も寄付しないがトクする状態のことを &lt;strong>支配戦略均衡&lt;/strong> という。この状態が最善かと言えば、そうではなく、両者が寄付した方が両者が寄付しないよりもトクする状態になる。このように公共財の供給を個々のプレイヤーに任せていては &lt;strong>パレート劣位&lt;/strong> な結果となってしまう。この状態からどうやって両者が寄付する &lt;strong>パレート優位&lt;/strong> な状態に移行できるかを考えるのが、政府の徴税の方策と言える。&lt;/p>
&lt;p>政府が誰にいくらの税を課して、どの程度の量の公共財を適切と決めるのかは難しい問題である。放っておいて上手くいかないものの、政府に任せて上手くいくことも保証されない。このようなゲーム理論を制度設計に活用する &lt;strong>メカニズムデザイン&lt;/strong> という専門分野がある。&lt;/p></content></item><item><title>リーンキャンバスやってみた</title><link>/diary/posts/2021/1114/</link><pubDate>Sun, 14 Nov 2021 12:11:23 +0900</pubDate><guid>/diary/posts/2021/1114/</guid><description>2時に寝て8時に起きた。起きてからドラクエタクトのダイの大冒険コラボイベントをお昼前までやってた。午前中遊んでた割には今日はいろいろ作業した。ゆっくり寝たせいか、個々の作業は集中してできた。
リーンキャンバス 友だちにプロダクトの設計についてレビューしてもらう機会を調整してたらリーンキャンバス作るとよいとアドバイスをもらった。全然やったことがないので試しに自分でもやってみることにした。リーンキャンバス（Lean Canvas）を活用した企画書の書き方【テンプレート付】 を読みながら Canvanizer というツールで作成してみた。リーンキャンバスの利点の1つとしてA4サイズ1枚程度におさめるので短時間で作成できるというのがある。プロダクトの要件定義と設計はすでにできているので、リーンキャンバスは1時間も経たないうちにたたき台を作成できた。また友だちにレビューしてもらうときにフィードバックをもらいながら精度をあげていく。
データ指向アプリケーションデザイン 昨日から 9.4 分散トランザクションと合意の後半の3つの節を読んだ。第Ⅱ部、400ページを超えたので2/3ほど読み終えた。
9.4.3 耐障害性を持つ合意 9.4.4 メンバーシップと協調サービス まとめ 合意の問題は、次のように形式化される。1つ以上のノードが値を 提案（propose） し、合意アルゴリズムはそれらの値の中から1つを 決定（deside） する。この形式化においては、合意アルゴリズムは次の性質を満たさなければならない。
一様同意（uniform agreement） : 2 つのノードが異なる決定をしていないこと 整合性（integrity） : 2 回決定をしているノードがないこと 妥当性（validity） : ノードが値 v を決定したら、 v を提案しているノードがあること 終了性（termination） : クラッシュしていないすべてのノードは、最終的に何らかの値を決定すること 耐障害性を持つ合意アルゴリズムで最も広く知られているのは、Viewstamped Replication（ VSR ）、Paxos、Raft、Zab であり、こういった合意のアルゴリズムは全順序ブロードキャストを実装しており、複数回にわたって合意が行われる。全順序ブロードキャストによって耐障害性を保ちながら線形化可能でアトミックな操作を実装できる。ZooKeeper のようなツールが、アプリケーションから利用できる合意、障害検出、メンバーシップの「アウトソーシング」サービスを提供する上で、重要な役割を果たしている。分散システムにおける様々な問題に耐えうるようなアルゴリズムを独自に開発するよりははるかによいといえる。合意へと落とし込めるような問題の処理が必要で、さらに耐障害性が求められるなら ZooKeeper のようなサービスを使うとよい。
神戸駆動開発イベント 大阪駆動開発 という xr (vr/ar/mr) のコミュニティがあって、いろんな地域に拡張しているようで、その支部？の1つに神戸駆動開発ができて、そのイベントとして 【神戸】XR体験&amp;amp;交流会 に参加してきた。会場が 神戸電子専門学校 だったのでどんなところかを見に行く意図でも出かけてきた。三宮.dev の主催者も神戸電子専門学校の中の人とつながりがあるらしく、今度オフラインの勉強会をそこでしようか検討しているといった話しもあった。bizpy もコロナが落ち着いたらオフラインの勉強会をやってもいいかなとは考えているので接点を作っておいてもいいかもしれない。神戸なんて狭い地域なのでコミュニティ関係者はすぐにつながるけど、神戸でオフラインの勉強会を開くに当たって適当な場所がないというのはあちこちで聞く話しでもあるので、神戸電子専門学校がそういったコミュニティをつなぐハブ的な場になるならそれはそれでいいのかもしれない。
HoloLens 2 と Nreal Light と iphone や apple watch とレンズやミラーを組み合わせて作った手作りのデバイスなども体験させてもらった。HoloLens が思ったよりも映像がみえにくくて、ロボットを操作してロケットを発射させるコンテンツをやってみたんだけど、操作よりもコンテンツが明確にみえなくて難しかった。もしかしたら装着の仕方が悪かったのかもしれない。それに比べて Nreal Light はアイドルのライブみたいなコンテンツをみたんだけど、映像も音声もはっきりしていたので印象はよかった。</description><content>&lt;p>2時に寝て8時に起きた。起きてからドラクエタクトのダイの大冒険コラボイベントをお昼前までやってた。午前中遊んでた割には今日はいろいろ作業した。ゆっくり寝たせいか、個々の作業は集中してできた。&lt;/p>
&lt;h2 id="リーンキャンバス">リーンキャンバス&lt;/h2>
&lt;p>友だちにプロダクトの設計についてレビューしてもらう機会を調整してたらリーンキャンバス作るとよいとアドバイスをもらった。全然やったことがないので試しに自分でもやってみることにした。&lt;a href="https://monstar-lab.com/dx/solution/lean-canvas/">リーンキャンバス（Lean Canvas）を活用した企画書の書き方【テンプレート付】&lt;/a> を読みながら &lt;a href="https://canvanizer.com/">Canvanizer&lt;/a> というツールで作成してみた。リーンキャンバスの利点の1つとしてA4サイズ1枚程度におさめるので短時間で作成できるというのがある。プロダクトの要件定義と設計はすでにできているので、リーンキャンバスは1時間も経たないうちにたたき台を作成できた。また友だちにレビューしてもらうときにフィードバックをもらいながら精度をあげていく。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>昨日から 9.4 分散トランザクションと合意の後半の3つの節を読んだ。第Ⅱ部、400ページを超えたので2/3ほど読み終えた。&lt;/p>
&lt;ul>
&lt;li>9.4.3 耐障害性を持つ合意&lt;/li>
&lt;li>9.4.4 メンバーシップと協調サービス&lt;/li>
&lt;li>まとめ&lt;/li>
&lt;/ul>
&lt;p>合意の問題は、次のように形式化される。1つ以上のノードが値を &lt;strong>提案（propose）&lt;/strong> し、合意アルゴリズムはそれらの値の中から1つを &lt;strong>決定（deside）&lt;/strong> する。この形式化においては、合意アルゴリズムは次の性質を満たさなければならない。&lt;/p>
&lt;ul>
&lt;li>一様同意（uniform agreement） : 2 つのノードが異なる決定をしていないこと&lt;/li>
&lt;li>整合性（integrity） : 2 回決定をしているノードがないこと&lt;/li>
&lt;li>妥当性（validity） : ノードが値 v を決定したら、 v を提案しているノードがあること&lt;/li>
&lt;li>終了性（termination） : クラッシュしていないすべてのノードは、最終的に何らかの値を決定すること&lt;/li>
&lt;/ul>
&lt;p>耐障害性を持つ合意アルゴリズムで最も広く知られているのは、Viewstamped Replication（ VSR ）、Paxos、Raft、Zab であり、こういった合意のアルゴリズムは全順序ブロードキャストを実装しており、複数回にわたって合意が行われる。全順序ブロードキャストによって耐障害性を保ちながら線形化可能でアトミックな操作を実装できる。ZooKeeper のようなツールが、アプリケーションから利用できる合意、障害検出、メンバーシップの「アウトソーシング」サービスを提供する上で、重要な役割を果たしている。分散システムにおける様々な問題に耐えうるようなアルゴリズムを独自に開発するよりははるかによいといえる。合意へと落とし込めるような問題の処理が必要で、さらに耐障害性が求められるなら ZooKeeper のようなサービスを使うとよい。&lt;/p>
&lt;h2 id="神戸駆動開発イベント">神戸駆動開発イベント&lt;/h2>
&lt;p>&lt;a href="https://osaka-driven-dev.connpass.com/">大阪駆動開発&lt;/a> という xr (vr/ar/mr) のコミュニティがあって、いろんな地域に拡張しているようで、その支部？の1つに神戸駆動開発ができて、そのイベントとして &lt;a href="https://kobe-driven-dev.connpass.com/event/230296/">【神戸】XR体験&amp;amp;交流会&lt;/a> に参加してきた。会場が &lt;a href="https://www.kobedenshi.ac.jp/">神戸電子専門学校&lt;/a> だったのでどんなところかを見に行く意図でも出かけてきた。三宮.dev の主催者も神戸電子専門学校の中の人とつながりがあるらしく、今度オフラインの勉強会をそこでしようか検討しているといった話しもあった。bizpy もコロナが落ち着いたらオフラインの勉強会をやってもいいかなとは考えているので接点を作っておいてもいいかもしれない。神戸なんて狭い地域なのでコミュニティ関係者はすぐにつながるけど、神戸でオフラインの勉強会を開くに当たって適当な場所がないというのはあちこちで聞く話しでもあるので、神戸電子専門学校がそういったコミュニティをつなぐハブ的な場になるならそれはそれでいいのかもしれない。&lt;/p>
&lt;p>&lt;a href="https://www.microsoft.com/en-us/hololens">HoloLens 2&lt;/a> と &lt;a href="https://www.nreal.ai/light/">Nreal Light&lt;/a> と iphone や apple watch とレンズやミラーを組み合わせて作った手作りのデバイスなども体験させてもらった。HoloLens が思ったよりも映像がみえにくくて、ロボットを操作してロケットを発射させるコンテンツをやってみたんだけど、操作よりもコンテンツが明確にみえなくて難しかった。もしかしたら装着の仕方が悪かったのかもしれない。それに比べて Nreal Light はアイドルのライブみたいなコンテンツをみたんだけど、映像も音声もはっきりしていたので印象はよかった。&lt;/p>
&lt;p>適当にスタッフの人と話していて、センサーを使って現実のモノや事象を vr 空間に持ち込むと vr コンテンツを作るのは簡単かも？という話しをした。なんかセンサーを探してもいいかもしれない。そのスタッフの人はピアノを弾くのでピアノ音を取り込んで加工したりしていると話していた。&lt;/p>
&lt;h2 id="傾斜枕">傾斜枕&lt;/h2>
&lt;blockquote>
&lt;p>胃食道逆流症（英語表記Gastro Esophageal Reflux DiseaseからGERD（ガード）とも呼ばれています）は、主に胃の中の酸が食道へ逆流することにより、胸やけ（みぞおちの上の焼けるようなジリジリする感じ、しみる感じなど）や呑酸（酸っぱい液体が上がってくる感じ）などの不快な自覚症状を感じたり、食道の粘膜がただれたり（食道炎）する病気です。胸が詰まるような痛みを感じたり、のどの違和感や慢性的に咳が持続する患者さんもいます。胃酸の逆流は食後2～3時間までに起こることが多いため、食後にこれらの症状を感じたときは胃酸の逆流が起きている可能性を考える必要があります。&lt;/p>
&lt;p>(&amp;hellip;)&lt;/p>
&lt;p>現在では成人の10～20％がこの病気にかかっていると推測されています。&lt;/p>
&lt;p>&lt;a href="https://www.jsge.or.jp/guideline/disease/gerd.html">胃食道逆流症(GERD)&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>ここ1-2年、睡眠がうまくとれなくなったことと関連して、寝ていて胃酸が逆流してむせるといったことも2-3ヶ月に1回ぐらいと稀ではあるけれど、起きるということに気付いた。2年ほど前、健康診断で胃カメラを受診したときに医師から胃の入り口の弁が、普通の人は逆流しないように閉じているものが私のは開いているという話があった。そのときは特に日常生活に困ってないからいいんじゃないで流してたんだけど、加齢とともに胃食道逆流症が起こっているのかもしれないと、いくつかの事象を認識して思うようになってきた。喉の違和感も気になるようになっていた。その症状の軽減に逆流しにくいように傾斜を付けて寝るとよさそうというのをみつけて、傾斜枕を買ってみた。しばらく試してみて寝心地や胃食道逆流症がどうなるかを観察してみる。&lt;/p>
&lt;p>&lt;a href="https://www.amazon.co.jp/dp/B07VNDPD8Y?&amp;linkCode=li2&amp;tag=t2y-diary-22&amp;linkId=f2a28286ce04219213b577e23c7d45c4&amp;language=ja_JP&amp;ref_=as_li_ss_il" target="_blank">&lt;img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B07VNDPD8Y&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=t2y-diary-22&amp;language=ja_JP" >&lt;/a>&lt;img src="https://ir-jp.amazon-adsystem.com/e/ir?t=t2y-diary-22&amp;language=ja_JP&amp;l=li2&amp;o=9&amp;a=B07VNDPD8Y" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />&lt;/p></content></item><item><title>調べものだらけ</title><link>/diary/posts/2021/1105/</link><pubDate>Fri, 05 Nov 2021 09:29:52 +0900</pubDate><guid>/diary/posts/2021/1105/</guid><description>1時半に寝て6時に起きた。昨日の夜はウォーキングして (朝活あるから) すぐに寝たんで早く起きた分、朝からストレッチをしてた。今週はバタバタしていてあまりストレッチできてない。
朝活: ミクロ経済学入門の入門 [金朝ツメトギ] 2021-11-05 AM 6 金曜朝6時開催のもくもく会 で第7章の独占と寡占を読んだ。用語を次にまとめる。
プライステイカー: 生産量を増やしたり減らしたりしても価格に影響を与えられない会社 完全市場: すべての会社がプライステイカーである市場 不完全市場: 完全市場ではない市場、プライステイカーではない会社がいる 独占市場: 1つの独占企業だけが存在する市場 クルーノー寡占市場: 同じ財を生産する少数の会社の総生産量から市場の価格が決まる市場 寡占: 少数の企業がいる市場 複占: 企業が2つだけの市場 前に出てきた市場均衡の話から、供給量を下げると価格が上昇する。生産者余剰がが大きくなり、生産者は得をする。実際にあった事例として、2016年に石油輸出機構 (OPEC) が石油の減産に合意して価格が上昇した。2012年に豊作だった歳に値崩れが起きるのをおそれて、全国農業組合連合会は価格を上げるために農家に野菜の廃棄処分を要請した。
独占市場にいる会社は高い価格で高い利潤を得ることはできるが、やがて価格競争を仕掛けてくる新規参入者を招き、長期的な利益を低めてしまう懸念がある。一方で高品質な財を低い利潤で販売していると、新規参入者が現れずに長期的な利益を得られる可能性がある。一概にどちらが正しいとは言えない。こうした状況を端的に描く 展開型ゲーム を考えると、財を高値にするか安値にするかの思考実験ができるう。 ゲームツリー という図でこのゲームを表している。
A は安値を選び、B が参入しないという選択の組み合わせは、「自分がこう選択したら相手はこう選択してくる」とプレイヤーが予想して、そのうえで自分にとって最も利潤が高まる選択をする状況を表している。これを サブゲーム完全均衡 の結果と呼ぶ。また、このような推論のやり方を 逆向き帰納法 (バックワード・インダクション) と呼ぶ。サブゲーム完全均衡の結果は逆向き帰納法により求められる。
RabbitMQ の dead letter exchange の調査 昨日の続き。RabbitMQ には exchange という概念がある。私が過去に使ったメッセージキュー (Kafka, AWS SQS) にはない概念でトピックをグルーピングしたり、メッセージのルーティングを制御する仕組みになる。普通のメッセージキューではデッドレターキューと呼ばれるものが RabbitMQ だと Dead Letter Exchanges になる。ドキュメントの概要はこんな感じ。
次のイベントが発生したときに &amp;ldquo;デッドレター&amp;rdquo; とみなす。
consumer が basic.reject または requeue=false の basic.</description><content>&lt;p>1時半に寝て6時に起きた。昨日の夜はウォーキングして (朝活あるから) すぐに寝たんで早く起きた分、朝からストレッチをしてた。今週はバタバタしていてあまりストレッチできてない。&lt;/p>
&lt;h2 id="朝活-ミクロ経済学入門の入門">朝活: ミクロ経済学入門の入門&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=33vXvmnAHq0">[金朝ツメトギ] 2021-11-05 AM 6 金曜朝6時開催のもくもく会&lt;/a> で第7章の独占と寡占を読んだ。用語を次にまとめる。&lt;/p>
&lt;ul>
&lt;li>プライステイカー: 生産量を増やしたり減らしたりしても価格に影響を与えられない会社&lt;/li>
&lt;li>完全市場: すべての会社がプライステイカーである市場&lt;/li>
&lt;li>不完全市場: 完全市場ではない市場、プライステイカーではない会社がいる&lt;/li>
&lt;li>独占市場: 1つの独占企業だけが存在する市場&lt;/li>
&lt;li>クルーノー寡占市場: 同じ財を生産する少数の会社の総生産量から市場の価格が決まる市場
&lt;ul>
&lt;li>寡占: 少数の企業がいる市場
&lt;ul>
&lt;li>複占: 企業が2つだけの市場&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>前に出てきた市場均衡の話から、供給量を下げると価格が上昇する。生産者余剰がが大きくなり、生産者は得をする。実際にあった事例として、2016年に石油輸出機構 (OPEC) が石油の減産に合意して価格が上昇した。2012年に豊作だった歳に値崩れが起きるのをおそれて、全国農業組合連合会は価格を上げるために農家に野菜の廃棄処分を要請した。&lt;/p>
&lt;p>独占市場にいる会社は高い価格で高い利潤を得ることはできるが、やがて価格競争を仕掛けてくる新規参入者を招き、長期的な利益を低めてしまう懸念がある。一方で高品質な財を低い利潤で販売していると、新規参入者が現れずに長期的な利益を得られる可能性がある。一概にどちらが正しいとは言えない。こうした状況を端的に描く &lt;strong>展開型ゲーム&lt;/strong> を考えると、財を高値にするか安値にするかの思考実験ができるう。 &lt;strong>ゲームツリー&lt;/strong> という図でこのゲームを表している。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1105_game-tree.png"/>
&lt;/figure>
&lt;p>A は安値を選び、B が参入しないという選択の組み合わせは、「自分がこう選択したら相手はこう選択してくる」とプレイヤーが予想して、そのうえで自分にとって最も利潤が高まる選択をする状況を表している。これを &lt;strong>サブゲーム完全均衡&lt;/strong> の結果と呼ぶ。また、このような推論のやり方を &lt;strong>逆向き帰納法 (バックワード・インダクション)&lt;/strong> と呼ぶ。サブゲーム完全均衡の結果は逆向き帰納法により求められる。&lt;/p>
&lt;h2 id="rabbitmq-の-dead-letter-exchange-の調査">RabbitMQ の dead letter exchange の調査&lt;/h2>
&lt;p>昨日の続き。RabbitMQ には exchange という概念がある。私が過去に使ったメッセージキュー (Kafka, AWS SQS) にはない概念でトピックをグルーピングしたり、メッセージのルーティングを制御する仕組みになる。普通のメッセージキューではデッドレターキューと呼ばれるものが RabbitMQ だと &lt;a href="https://www.rabbitmq.com/dlx.html">Dead Letter Exchanges&lt;/a> になる。ドキュメントの概要はこんな感じ。&lt;/p>
&lt;blockquote>
&lt;p>次のイベントが発生したときに &amp;ldquo;デッドレター&amp;rdquo; とみなす。&lt;/p>
&lt;ul>
&lt;li>consumer が basic.reject または requeue=false の basic.nack を ack で返したとき&lt;/li>
&lt;li>メッセージの TTL の期限切れになったとき&lt;/li>
&lt;li>queue の最大長さを超えてメッセージが drop されたとき&lt;/li>
&lt;/ul>
&lt;p>注意事項として queue の有効期限が切れても queue 内のメッセージはデッドレターとならない。&lt;/p>
&lt;h4 id="設定方法">設定方法&lt;/h4>
&lt;p>デッドレター exchange (DLXs) は普通の exchange であり、普通に宣言して通常の種別をセットする。任意の queue に対して2通りの設定方法がある。&lt;/p>
&lt;ul>
&lt;li>クライアント: queue の引数を使って定義する&lt;/li>
&lt;li>サーバー: ポリシーを使って定義する&lt;/li>
&lt;/ul>
&lt;p>詳細は割愛。&lt;/p>
&lt;h4 id="ルーティング">ルーティング&lt;/h4>
&lt;p>デッドレターメッセージのルーティングは、次のどちらかで行われる。&lt;/p>
&lt;ul>
&lt;li>デッドレターの queue に routingKey が設定されていればそれを使う&lt;/li>
&lt;li>デッドレターの queue に routingKey が設定されていなければ、オリジナルのメッセージが publish されたときの routingKey を使う&lt;/li>
&lt;/ul>
&lt;p>例えば、foo という routingKey をもつ exchange にメッセージを publish して、そのメッセージがデッドレターになった場合、foo という routingKey をもつデッドレターの exchange に publish される。もしそのメッセージが x-dead-letter-routing-key を bar にセットした queue に届いた場合は、そのメッセージは bar という routingKey をもつデッドレター exchange に publish される。&lt;/p>
&lt;p>queue に特定の routingKey が設定されていなかった場合、その queue のメッセージは、すべてオリジナルの routingKey でデッドレター化されることに注意してください。これには CC および BCC ヘッダによって追加された routingKey も含む (詳細は割愛) 。&lt;/p>
&lt;p>デッドレターメッセージが循環する可能性がある。例えば、queue がデッドレター用のルーティングキーを指定せずに、デフォルトの exchange にメッセージをデッドレターした場合などに起こる。このとき同じ queue に2回届いたメッセージは no rejections in the entire cycle だった場合にドロップされる。&lt;/p>
&lt;h4 id="安全性">安全性&lt;/h4>
&lt;p>デッドレターメッセージは内部的に publisher confirm を行わずに re-publish される。クラスタ環境の rabbitmq でデッドレターキューを使ったとしても安全性は保証されない。メッセージはデッドレターキューの対象の queue に publish された後でオリジナルの queue からは削除される。このときに対象の queue が受け取れなければメッセージがなくなってしまう可能性がある。&lt;/p>
&lt;h4 id="デッドレターメッセージの副作用">デッドレターメッセージの副作用&lt;/h4>
&lt;p>デッドレターメッセージはヘッダーを変更する。&lt;/p>
&lt;ul>
&lt;li>exchange の名前がデッドレター exchange の名前に置き換わる&lt;/li>
&lt;li>routingKey がデッドレターキューの routingKey に置き換わる可能性がある&lt;/li>
&lt;li>↑ が起きると、CC ヘッダーが削除される&lt;/li>
&lt;li>Sender-selected Distribution ごとに BCC ヘッダーは削除される&lt;/li>
&lt;/ul>
&lt;p>デッドレターの処理では x-death という名前の配列を、それぞれのデッドレタリングされたメッセージのヘッダに追加する。この配列には {queue, reason} のペアで識別される各デッドレタリングイベントのエントリが含まれる。詳細は割愛。&lt;/p>
&lt;/blockquote>
&lt;h2 id="dapr-の調査">dapr の調査&lt;/h2>
&lt;p>&lt;a href="https://docs.dapr.io/">dapr&lt;/a> について調べた。dapr は分散システム (アプリケーション) の複雑さを解決することを目的としている。様々なミドルウェア (分散システム) とのやり取りを http/grpc の api 呼び出し経由にして、その詳細を隠蔽する。ミドルウェアの上位に抽象化レイヤーを設けて統合的なインターフェースを提供したり、それぞれのミドルウェアにおける設定や運用の面倒なことなどを簡略化してくれる。サイドカーパターンを採用しているので言語に依らず、アプリケーションに dapr のコードを書く必要もない。dapr cli をインストールして dapr init すると docker で dapr プロセスが動いて、それだけで dapr にリクエストできるようになる。使い始めの学習コストは低いし、デプロイも簡単だし、意図している目的もわかりやすい。マイクロソフト社がスポンサーしていてプロジェクトの運営も安定してそうだし、おもしろいツールだと思う。&lt;/p>
&lt;h2 id="k8s-の調査">k8s の調査&lt;/h2>
&lt;p>せっかくの機会なのでちゃんと勉強することにした。今日は &lt;a href="https://github.com/kubernetes/minikube">minikube&lt;/a> の &lt;a href="https://minikube.sigs.k8s.io/docs/start/">Get Started!&lt;/a> やっただけ。&lt;/p></content></item><item><title>ASUS ROG Zephyrus G15 GA503QR</title><link>/diary/posts/2021/1103/</link><pubDate>Wed, 03 Nov 2021 09:55:10 +0900</pubDate><guid>/diary/posts/2021/1103/</guid><description>1時に寝て6時に起きた。朝活があると起きれるな。
朝活: ミクロ経済学入門の入門 【三宮.dev オンライン】リモート朝活もくもく会 で第5章の市場均衡と第6章の外部性を読んだ。
まず第5章から。用語を次にまとめる。
完全市場: 誰もがプライステイカー (自分の生産量が価格に影響を与えられない) である市場 社会的余剰: 消費者余剰 (価格より多めに払ってよいと考える金額の和) と生産者余剰 (利潤の和) を足し合わせたもの 従量税: 販売する量に応じて一定の金額を納める税 例) たばこ税、酒税、揮発油税 (ガソリン) これまでの章で学んだ内容から価格は需要曲線Dと供給曲線Sが交差する点p*になる。この価格を 市場均衡価格 と呼ぶ。市場全体のよさを測るモノサシとして 社会的余剰 を使う。市場均衡価格に対して価格を上げたり下げたりしたときにできる社会的余剰の差額を 死荷重 と呼ぶ。次の図の C の面積に相当する。
図から市場均衡価格は社会的余剰を最大化させた価格だとわかる。
生産者や消費者に従量税を課すと市場にどのようなことが起きるかを考察する。納税方法として、生産者が納税する方式 (価格に税を含める) と消費者が納税する方式 (価格と税は別) があるが、どちらも社会的余剰が C の分だけ減少するグラフとなり、社会的損失が発生していると言える。余剰の視点からはどちらの方式も全く同じだが、政府が徴税するしやすさの視点だと、相対的に数の少ない生産者から納税する方が管理しやすい。
狙い撃ち課税のダメな点として酒税を例にあげている。ビールの酒税を逃れるために、メーカーは1990年代に発泡酒、2003年に第3のビールを開発した。2016年時点での350ml (1缶) あたりの酒税は、ビール77円、発泡酒47円、第3のビール28円となった。同年、政府はすべて55円へ統一していく方針を発表した。ビールへの従量税が与えた社会的損失として死荷重だけでなく、発泡酒や第3のビールのような劣化ビールの技術開発のコストがあげられる。特定の品目を狙い撃つ従量税は社会的損失を生みやすいと述べられてる。
次に第6章から。用語を次にまとめる。
負の外部性: ある生産活動が他者へマイナスの影響を与える 例) 公害や花粉症など 正の外部生: ある生産活動が市場取引を経ずにプラスの影響を与える 例) 電鉄会社が駅や路線を開通させるとその地域に経済効果をもたらすなど 限界被害: 企業の生産活動が住民に与える被害の生産量に対する総和の金額 ピグー税: 住民に補償を与える環境税 ネットワーク外部性: SNS など、サービスの価値がユーザー数に大きく既存する性質 調整ゲーム: 何を選ぶかよりも、他人と同じものを選ぶことが重要な状況 ナッシュ均衡: 自分の行動を変えると損になるので誰も行動を変えない状況 企業の生産活動が住民に被害をもたらせていた場合、その被害をピグー税を通じて企業が支払う。これを 外部性の内部化 と呼ぶ。負の外部性は社会問題となるが、対して正の外部性は社会問題とならない。
調整ゲームにおいて、一方がもう一方よりも好ましい状態を パレート優位、またその逆の状態を パレート劣位 と呼ぶ。ネットワーク外部性においては優勝劣敗が必ずしも正しいとは限らない。先行者としてユーザー数を獲得し、ナッシュ均衡の座をつかむことが勝ちにつながる。
ASUS ROG Zephyrus G15 GA503QR 今日届いたのでセットアップだけ終えた。Windows アップデートすると次々に更新が出てくる仕組みは昔と変わってなかった。4回再起動した。</description><content>&lt;p>1時に寝て6時に起きた。朝活があると起きれるな。&lt;/p>
&lt;h2 id="朝活-ミクロ経済学入門の入門">朝活: ミクロ経済学入門の入門&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/229642/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> で第5章の市場均衡と第6章の外部性を読んだ。&lt;/p>
&lt;p>まず第5章から。用語を次にまとめる。&lt;/p>
&lt;ul>
&lt;li>完全市場: 誰もがプライステイカー (自分の生産量が価格に影響を与えられない) である市場&lt;/li>
&lt;li>社会的余剰: 消費者余剰 (価格より多めに払ってよいと考える金額の和) と生産者余剰 (利潤の和) を足し合わせたもの&lt;/li>
&lt;li>従量税: 販売する量に応じて一定の金額を納める税
&lt;ul>
&lt;li>例) たばこ税、酒税、揮発油税 (ガソリン)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>これまでの章で学んだ内容から価格は需要曲線Dと供給曲線Sが交差する点p*になる。この価格を &lt;strong>市場均衡価格&lt;/strong> と呼ぶ。市場全体のよさを測るモノサシとして &lt;strong>社会的余剰&lt;/strong> を使う。市場均衡価格に対して価格を上げたり下げたりしたときにできる社会的余剰の差額を &lt;strong>死荷重&lt;/strong> と呼ぶ。次の図の C の面積に相当する。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1103_market-equilibrium.png"/>
&lt;/figure>
&lt;p>図から市場均衡価格は社会的余剰を最大化させた価格だとわかる。&lt;/p>
&lt;p>生産者や消費者に従量税を課すと市場にどのようなことが起きるかを考察する。納税方法として、生産者が納税する方式 (価格に税を含める) と消費者が納税する方式 (価格と税は別) があるが、どちらも社会的余剰が C の分だけ減少するグラフとなり、社会的損失が発生していると言える。余剰の視点からはどちらの方式も全く同じだが、政府が徴税するしやすさの視点だと、相対的に数の少ない生産者から納税する方が管理しやすい。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1103_specific-duty.png"/>
&lt;/figure>
&lt;p>狙い撃ち課税のダメな点として酒税を例にあげている。ビールの酒税を逃れるために、メーカーは1990年代に発泡酒、2003年に第3のビールを開発した。2016年時点での350ml (1缶) あたりの酒税は、ビール77円、発泡酒47円、第3のビール28円となった。同年、政府はすべて55円へ統一していく方針を発表した。ビールへの従量税が与えた社会的損失として死荷重だけでなく、発泡酒や第3のビールのような劣化ビールの技術開発のコストがあげられる。特定の品目を狙い撃つ従量税は社会的損失を生みやすいと述べられてる。&lt;/p>
&lt;p>次に第6章から。用語を次にまとめる。&lt;/p>
&lt;ul>
&lt;li>負の外部性: ある生産活動が他者へマイナスの影響を与える
&lt;ul>
&lt;li>例) 公害や花粉症など&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>正の外部生: ある生産活動が市場取引を経ずにプラスの影響を与える
&lt;ul>
&lt;li>例) 電鉄会社が駅や路線を開通させるとその地域に経済効果をもたらすなど&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>限界被害: 企業の生産活動が住民に与える被害の生産量に対する総和の金額&lt;/li>
&lt;li>ピグー税: 住民に補償を与える環境税&lt;/li>
&lt;li>ネットワーク外部性: SNS など、サービスの価値がユーザー数に大きく既存する性質&lt;/li>
&lt;li>調整ゲーム: 何を選ぶかよりも、他人と同じものを選ぶことが重要な状況&lt;/li>
&lt;li>ナッシュ均衡: 自分の行動を変えると損になるので誰も行動を変えない状況&lt;/li>
&lt;/ul>
&lt;p>企業の生産活動が住民に被害をもたらせていた場合、その被害をピグー税を通じて企業が支払う。これを &lt;strong>外部性の内部化&lt;/strong> と呼ぶ。負の外部性は社会問題となるが、対して正の外部性は社会問題とならない。&lt;/p>
&lt;p>調整ゲームにおいて、一方がもう一方よりも好ましい状態を &lt;strong>パレート優位&lt;/strong>、またその逆の状態を &lt;strong>パレート劣位&lt;/strong> と呼ぶ。ネットワーク外部性においては優勝劣敗が必ずしも正しいとは限らない。先行者としてユーザー数を獲得し、ナッシュ均衡の座をつかむことが勝ちにつながる。&lt;/p>
&lt;h2 id="asus-rog-zephyrus-g15-ga503qr">ASUS ROG Zephyrus G15 GA503QR&lt;/h2>
&lt;p>今日届いたのでセットアップだけ終えた。Windows アップデートすると次々に更新が出てくる仕組みは昔と変わってなかった。4回再起動した。&lt;/p>
&lt;p>前々から Windows マシンがほしいと思っていて、次のお仕事が決まったので思い切って購入することにした。買おうかどうしようかを迷っている心の中の動きのコストというか、検討事項としてずっと残り続けるのもあまり生産的ではないなと最近は思うようになっていた。私が Widnows マシンが必要になった背景はこれら。&lt;/p>
&lt;ul>
&lt;li>行政の電子申請・手続きはまだまだ Windows アプリが主流&lt;/li>
&lt;/ul>
&lt;p>最近は Windows アプリ版とは別に、Web 版というブラウザベースのアプリケーションが提供されつつあるが、まだまだ黎明期で一部の機能しか対応してなかったり、不具合で macos だと動きませんと障害情報が出てたり、ひどい場合だとブラウザベースなのに Linux はサポートしてませんとか言われたりする。毎年この申請は Web 版で対応したやろか？と調べて、やっぱりまだできんかったと紙ベースの申請に切り替えるときの、調べるコスト (とがっかりするコスト) がしんどくなった。&lt;/p>
&lt;ul>
&lt;li>VR 系アプリケーションのプラットフォームは Windows&lt;/li>
&lt;/ul>
&lt;p>Facebook 社が Meta 社になって、ややメタバースが盛り上がりをみせつつある。&lt;a href="https://www.oculus.com/quest-2/">Oculus Quest 2&lt;/a> を買ったものの、VR 系アプリケーションは Windows がメインターゲットらしく macos や linux は、現時点ではサポートしていないことが多い。&lt;a href="https://www.oculus.com/accessories/oculus-link/">Oclus Link&lt;/a> も Windows しかサポートしていない。せっかくヘッドマウントディスプレイを購入したので、そのデバイスをもっと活用するためにも Windows マシンがあった方がよいと考えた。&lt;/p>
&lt;ul>
&lt;li>Microsoft Teams を使いたい&lt;/li>
&lt;/ul>
&lt;p>私の周りでも &lt;a href="https://www.microsoft.com/ja-jp/microsoft-teams/group-chat-software">Microsoft Teams&lt;/a> を使うことが増えてきた。ゲストアカウントでも会議できるのでエージェントと打ち合わせするときは Teams を使ったりしていた。社内システムを MS 系のプロダクトで固めている企業は普通に Teams を使っているし、顧問さんから聞く話しでも Teams (と MS 製品とのインテグレーション) の評判はよい。チャットツールを対象としたプロダクトを作っていくにあたり、今後は Slack だけではなく Teams 対応も必須になっていく気がする。実際に私も Slack/Teams 両対応のプロダクトもみかけるようになりつつある。Microsoft Teams を Linux で使えるかどうかは調べてないのでわからないけど、Windows マシンが1台あった方が手っ取り早いと考えた。&lt;/p>
&lt;ul>
&lt;li>オフィスと自宅にパソコンを据え置きたい&lt;/li>
&lt;/ul>
&lt;p>オフィスでは普段デスクトップマシンを使いつつ、macbook をサブマシンとして使っている。自宅で作業するときは macbook を持ち帰ったりしていた。人間はどんどん怠惰になるのでこの持ち運びが面倒になってきたり、持ち帰ってないときにパソコンで作業したくなったりしたときは、オフィスに出かけるといったことをするようになってストレスにもなってた。徒歩でも15分あれば行ける場所にオフィスがあるので、タブレットやスマホでの作業効率を考えたらオフィスに行ってしまう。ラップトップを自宅とオフィスに置いておけるといいなぁとは薄々思っていた。これを機にオフィスには asus マシンを、自宅には macbook を据え置くようにしたい。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>9.4 分散トランザクションと合意の前半の2つの節を読んだ。&lt;/p>
&lt;ul>
&lt;li>9.4.1 アトミックなコミットと2相コミット（2PC）&lt;/li>
&lt;li>9.4.2 分散トランザクションの実際&lt;/li>
&lt;/ul>
&lt;p>分散トランザクションという扱っているテーマが難しいけど、書いてある内容は1つずつ追っていけば理解できるのでそこまで難しくはない。一言で分散トランザクションと言っても次の2つに大別される。&lt;/p>
&lt;ul>
&lt;li>データベース内部の分散トランザクション&lt;/li>
&lt;li>ヘテロジニアスな分散トランザクション&lt;/li>
&lt;/ul>
&lt;p>前者は特定のデータベースシステムだけで動くので相対的に最適化ができたり、うまく運用できるケースもある。後者は複数のシステムを介した汎用の仕組みになるので2相コミットのような プロトコル を使って &lt;strong>アトミックなコミット&lt;/strong> を保証しなければならない。2PC はコーディネータの障害が運用上の大きな問題となることがわかっている。ヘテロジニアスな技術間での2相コミットの標準を &lt;strong>X/Open XA（eXtended Architecture の省略）&lt;/strong> と呼ぶ。多くの RDB やメッセージブローカーでもサポートされているらしい。Java EE アプリケーションの世界だと Java Transaction API （ JTA ）で実装されているらしい。全く聞いたことがなくて、私はいままでこの技術に関わることがなかった。&lt;/p></content></item><item><title>ワイヤレス REALFORCE</title><link>/diary/posts/2021/1102/</link><pubDate>Tue, 02 Nov 2021 09:22:30 +0900</pubDate><guid>/diary/posts/2021/1102/</guid><description>3時に寝て7時に起きた。ウォーキングから帰ってきて0時にベッドに入ったものの、選挙結果の総括記事を読んだり、宇宙よりも遠い場所 をみたりしていたら3時になってしまった。全13話すべてみた。どちらかと言えばおもしろかったけど、ツィートみて期待値が高かった分、そこまで私の中に響くものはなかったかな。南極へ行く道中や南極の生活がわりと遊んでいるようにみえてあまり大変そうにみえなかった。とはいえ、実際の船上や南極でもやることなくて娯楽ないと持て余すのかなとも思えた。南極地域観測隊 って現実にあるんだなとみてた。
僕はだいたいプログラミングしてるときは既に内容を知ってるアニメを常に流してるんですが今週はまた「宇宙よりも遠い場所」を観ていました。これほどまでに13話すべて足すところも引くところもない完璧な作品は他に早々思いつかないです。
&amp;mdash; 父 (@fushiroyama) October 28, 2021 データ指向アプリケーションデザイン 9.3 順序の保証を読んだ。
データベースや分散システムにおいて順序付けは重要な基本的概念である。順序と線形化可能性、合意との間には深い関係がある。順序付けが重要なのは 因果関係 を保つのに役立つことがあげられる。
全順序 があれば任意の2つの数を比較して大小関係を必ず判断できる。たとえば自然数には全順序があると言える。線形化可能なシステムは操作に全順序がある。一方で因果律には並行という概念があり、どちらが先に行われたかが重要ではない場合に操作が並行に行われたとみなせる。したがって、因果律は全順序ではなく、 半順序 を定義すると言える。半順序とは、大小関係を比較できる場合もあるしできない場合もあることを指す。
因果律に基づく順序と線形化可能性との関係は、線形化可能性は因果関係を 暗に含む といえる。線形化可能性を持つシステムは、因果律を正しく保持する。しかし、システムを線形化可能にすればパフォーマンスや可用性が損なわれる可能性がある。特にネットワークの遅延が大きい（たとえば地理的に分散している）システムで問題になる。そのため、分散データシステムの中には線形化可能性をあきらめることでパフォーマンスを向上させたものの、扱いが難しいものもある。因果律を保持する方法は、線形化可能性が唯一というわけではなく他の方法もある。多くの場合、システムに本当に必要なのは線形化可能性ではなく因果律における一貫性だけであり、これは線形化可能性よりも効率の良い実装が可能となる。
因果律における一貫性を保持する方法として次のものがあげられている。
シーケンス番号またはタイムスタンプ ランポートタイムスタンプ（Lamport timestamp） しかし、分散システムではネットワークを介して他のノードの状態を確認しないと因果律の一貫性を確定できない。たとえシングルリーダーアプリケーションであっても、リーダーに障害が発生したときにリーダーのフェイルオーバーが必要となる。この問題は 全順序のブロードキャスト と呼ばれる。ZooKeeper や etcd のような合意サービスが全順序ブロードキャストを実装している。
詳細は省くが、ネットワークを介した分散システムで線形化可能な compare-and-set （あるいは increment-and-get ）を実装しようとすると、必然的に合意アルゴリズムに行き着く。これらと全順序ブロードキャストは等価であることが証明できる。したがって、これらの問題のいずれかを解決できれば、他方の問題の解決策に変換できるという点は重大な知見である。
REALFORCE のワイヤレスモデル ユーザーから待望されていた REALFORCE のワイヤレスモデルがとうとう発売された。
高級キーボードREALFORCEから待望のワイヤレス機「R3」が登場、見どころは？ 先週から amazon で予約販売を受け付けていたので REALFORCE 東プレ R3 キーボード 静音 ハイブリッドモデル 日本語配列 91キー ブラック R3HC12 を予約して、本日届いた。私はとくに必要ないけど、bluetooth のマルチペアリングに対応していて最大4つまで接続できる。オフィスの机はそこそこ広いけれど、本とラップトップとモニター2台置いたらスペースが埋まってしまっている。ご飯を食べるときや書類を作成するときにキーボードを立てかけたりしてスペースを確保していて不便に感じていた。
ubuntu 環境での bluetooth の設定に少し手こずった。GUI の設定マネージャー (blueman) でペアリングしようとしても失敗する。キーボードの情報は取得できるけど、ペアリングは失敗する。試しに macos でペアリングしてみたらパスキーの入力画面が表示されて、6桁の数字を入力して ENTER した後に接続するとペアリングできた。blueman だとパスキーが表示されないなと気付いてググってたら [SOLVED] Bluetooth keyboard: Unable to pair (authentication timeout) を見かけて、bluetoothctl でも設定できそうなのでやってみた。</description><content>&lt;p>3時に寝て7時に起きた。ウォーキングから帰ってきて0時にベッドに入ったものの、選挙結果の総括記事を読んだり、&lt;a href="http://yorimoi.com/story/">宇宙よりも遠い場所&lt;/a> をみたりしていたら3時になってしまった。全13話すべてみた。どちらかと言えばおもしろかったけど、ツィートみて期待値が高かった分、そこまで私の中に響くものはなかったかな。南極へ行く道中や南極の生活がわりと遊んでいるようにみえてあまり大変そうにみえなかった。とはいえ、実際の船上や南極でもやることなくて娯楽ないと持て余すのかなとも思えた。&lt;a href="https://www.nipr.ac.jp/antarctic/">南極地域観測隊&lt;/a> って現実にあるんだなとみてた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">僕はだいたいプログラミングしてるときは既に内容を知ってるアニメを常に流してるんですが今週はまた「宇宙よりも遠い場所」を観ていました。これほどまでに13話すべて足すところも引くところもない完璧な作品は他に早々思いつかないです。&lt;/p>&amp;mdash; 父 (@fushiroyama) &lt;a href="https://twitter.com/fushiroyama/status/1453610090632663048?ref_src=twsrc%5Etfw">October 28, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>9.3 順序の保証を読んだ。&lt;/p>
&lt;blockquote>
&lt;p>データベースや分散システムにおいて順序付けは重要な基本的概念である。順序と線形化可能性、合意との間には深い関係がある。順序付けが重要なのは &lt;strong>因果関係&lt;/strong> を保つのに役立つことがあげられる。&lt;/p>
&lt;p>&lt;strong>全順序&lt;/strong> があれば任意の2つの数を比較して大小関係を必ず判断できる。たとえば自然数には全順序があると言える。線形化可能なシステムは操作に全順序がある。一方で因果律には並行という概念があり、どちらが先に行われたかが重要ではない場合に操作が並行に行われたとみなせる。したがって、因果律は全順序ではなく、 &lt;strong>半順序&lt;/strong> を定義すると言える。半順序とは、大小関係を比較できる場合もあるしできない場合もあることを指す。&lt;/p>
&lt;p>因果律に基づく順序と線形化可能性との関係は、線形化可能性は因果関係を &lt;strong>暗に含む&lt;/strong> といえる。線形化可能性を持つシステムは、因果律を正しく保持する。しかし、システムを線形化可能にすればパフォーマンスや可用性が損なわれる可能性がある。特にネットワークの遅延が大きい（たとえば地理的に分散している）システムで問題になる。そのため、分散データシステムの中には線形化可能性をあきらめることでパフォーマンスを向上させたものの、扱いが難しいものもある。因果律を保持する方法は、線形化可能性が唯一というわけではなく他の方法もある。多くの場合、システムに本当に必要なのは線形化可能性ではなく因果律における一貫性だけであり、これは線形化可能性よりも効率の良い実装が可能となる。&lt;/p>
&lt;p>因果律における一貫性を保持する方法として次のものがあげられている。&lt;/p>
&lt;ul>
&lt;li>シーケンス番号またはタイムスタンプ&lt;/li>
&lt;li>ランポートタイムスタンプ（Lamport timestamp）&lt;/li>
&lt;/ul>
&lt;p>しかし、分散システムではネットワークを介して他のノードの状態を確認しないと因果律の一貫性を確定できない。たとえシングルリーダーアプリケーションであっても、リーダーに障害が発生したときにリーダーのフェイルオーバーが必要となる。この問題は &lt;strong>全順序のブロードキャスト&lt;/strong> と呼ばれる。ZooKeeper や etcd のような合意サービスが全順序ブロードキャストを実装している。&lt;/p>
&lt;p>詳細は省くが、ネットワークを介した分散システムで線形化可能な compare-and-set （あるいは increment-and-get ）を実装しようとすると、必然的に合意アルゴリズムに行き着く。これらと全順序ブロードキャストは等価であることが証明できる。したがって、これらの問題のいずれかを解決できれば、他方の問題の解決策に変換できるという点は重大な知見である。&lt;/p>
&lt;/blockquote>
&lt;h2 id="realforce-のワイヤレスモデル">REALFORCE のワイヤレスモデル&lt;/h2>
&lt;p>ユーザーから待望されていた REALFORCE のワイヤレスモデルがとうとう発売された。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://weekly.ascii.jp/elem/000/004/073/4073042/">高級キーボードREALFORCEから待望のワイヤレス機「R3」が登場、見どころは？&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>先週から amazon で予約販売を受け付けていたので &lt;a href="https://amzn.to/3EJivAF">REALFORCE 東プレ R3 キーボード 静音 ハイブリッドモデル 日本語配列 91キー ブラック R3HC12&lt;/a> を予約して、本日届いた。私はとくに必要ないけど、bluetooth のマルチペアリングに対応していて最大4つまで接続できる。オフィスの机はそこそこ広いけれど、本とラップトップとモニター2台置いたらスペースが埋まってしまっている。ご飯を食べるときや書類を作成するときにキーボードを立てかけたりしてスペースを確保していて不便に感じていた。&lt;/p>
&lt;p>ubuntu 環境での bluetooth の設定に少し手こずった。GUI の設定マネージャー (blueman) でペアリングしようとしても失敗する。キーボードの情報は取得できるけど、ペアリングは失敗する。試しに macos でペアリングしてみたらパスキーの入力画面が表示されて、6桁の数字を入力して ENTER した後に接続するとペアリングできた。blueman だとパスキーが表示されないなと気付いてググってたら &lt;a href="https://bbs.archlinux.org/viewtopic.php?id=174239">[SOLVED] Bluetooth keyboard: Unable to pair (authentication timeout)&lt;/a> を見かけて、bluetoothctl でも設定できそうなのでやってみた。&lt;/p>
&lt;pre tabindex="0">&lt;code>キーボードの情報を表示
[REALFORCE_3]# info F6:9D:A5:80:B7:1F
Device F6:9D:A5:80:B7:1F (random)
Name: REALFORCE_3
Alias: REALFORCE_3
Appearance: 0x03c1
Icon: input-keyboard
Paired: no
Trusted: yes
Blocked: no
Connected: yes
LegacyPairing: no
UUID: Generic Access Profile (00001800-0000-1000-8000-00805f9b34fb)
UUID: Generic Attribute Profile (00001801-0000-1000-8000-00805f9b34fb)
UUID: Device Information (0000180a-0000-1000-8000-00805f9b34fb)
UUID: Battery Service (0000180f-0000-1000-8000-00805f9b34fb)
UUID: Human Interface Device (00001812-0000-1000-8000-00805f9b34fb)
RSSI: -45
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>ペアリングを実行
* エージェントからパスキーが表示されて、キーボードで入力して ENTER したらペアリングに成功した
[bluetooth]# pair F6:9D:A5:80:B7:1F
Attempting to pair with F6:9D:A5:80:B7:1F
[CHG] Device F6:9D:A5:80:B7:1F Connected: yes
[agent] Passkey: 323759
[CHG] Device F6:9D:A5:80:B7:1F Paired: yes
Pairing successful
[CHG] Device F6:9D:A5:80:B7:1F Modalias: usb:v08ACp0302d0001
[CHG] Device F6:9D:A5:80:B7:1F ServicesResolved: yes
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>キーボードを信頼する
[REALFORCE_3]# trust F6:9D:A5:80:B7:1F
Changing F6:9D:A5:80:B7:1F trust succeeded
&lt;/code>&lt;/pre>&lt;h2 id="契約書の確認">契約書の確認&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1026/#選考面談">先日&lt;/a> の業務委託案件の契約書が届いたので内容を確認した。&lt;/p>
&lt;p>これまで &lt;a href="https://www.cloudsign.jp/">クラウドサイン&lt;/a> でしか契約したことがなくて、紙の契約書で契約を締結するのは初めての挑戦でもある。&lt;a href="https://www.post.japanpost.jp/service/letterpack/">レターパック&lt;/a> を使って郵送するのがお作法？といったところから調べてた。明後日から働き始める。フルリモートなので物理的な職場は変わらないけど、新しい職場は緊張するな。うまく入っていけるやろか。フルリモートの経験もだいぶたまってきたし、体調も万全だし、憂うことは何もないはず。いまの状況は純粋に私ががんばるだけだ。&lt;/p></content></item><item><title>資料作り完了</title><link>/diary/posts/2021/1101/</link><pubDate>Mon, 01 Nov 2021 11:38:17 +0900</pubDate><guid>/diary/posts/2021/1101/</guid><description>4時に寝て8時に起きた。夜に資料作りに集中していたので家に帰ってきたのが3時頃で、くつろいだりアニメみたりしてから寝た。遅くに帰ってきてもすぐに寝るわけじゃなくて、だらだらして実際に寝るまで1-2時間はかかる。こういうところ、生活が堕落していて改善していくべきなのかもしれない。良かったこととして、ウォーキングのせいか、夜はよく眠れた。
みんなの Python 勉強会の資料作り 昨日の続き。一晩寝てから最後の仕上げをした。時間を置く、とくに一度寝てから資料を洗練させると改善点があちこち出てきてより良いものになっていく気がする。午前中に主催者に連絡したものの、午後になってから思い付いたことをちょくちょく修正したりもした。オンラインの資料だと、先方に連絡した後でも微修正できるところがよい。業務の資料だとさらに2-3日かけて洗練させていくけど、勉強会の資料だからこれでいいかな。タイトルはすごく気に入っているというわけではないけど「本と学びの段階」とした。ひとまず完成したので自分のやりたいことに取り組める。
神戸市長選 神戸市は衆議院選挙とは別に市長選挙も一緒にあった。神戸市長選 によると、投票率は53.79％で439,749 (67.7%)の得票を得た現職の市長が完勝した。3回目の当選になるらしい。私が神戸に戻ってきてから初めての市長選挙だった。起業してから手続きなどで行政が身近になったことから関心をもつようになってきた。自分ごとで考えるというのか、どんなものでも身近なことは関心をもつのかもしれない。
データ指向アプリケーションデザイン 9.2 線形化可能性を読んだ。
線形化可能性 とは、データのコピーが1つしかなく、そのデータに対する操作がすべてアトミックであるかのようにシステムにみせることを指す。古くなったキャッシュやレプリカからの値ではないことを保証する、最新性の保証（recency guarantee） と言える。トランザクションの章に出てきた 直列化可能性 とはまったく異なる。直列化可能性が保証するのは、複数のトランザクションが何らかの順序で実行された場合に同じ結果になることを保証するもの。
あと「役に立たない CAP 定理」というコラムもおもしろい。CAP 定理とは次の3つはすべて成り立たず、2つを選択することを強いる。
一貫性（Consistency） 可用性（Availability） 分断耐性（Partition tolerance） CAP 定理は歴史的にデータベースのトランザクションのトレードオフについての議論の出発点として引用され、有名な定理ではあるが、分散データベースの研究者の中では1970年代から知られていたことであったらしい。そして、ネットワークを介した分散システムは、分断耐性が必須 (ネットワークが切断しないことはないから) であることから一貫性か可用性のどちらかを選択するしかない。ここで一貫性とは線形化可能なシステムを実装することだが、これはパフォーマンスのデメリットが大きい。そのため、現代の多くの分散データベースは線形化可能性を提供しないことを選択しており、結果として可用性と分断耐性を選択することになっている。したがって、CAP 定理から議論を始めることは無意味であると言う。</description><content>&lt;p>4時に寝て8時に起きた。夜に資料作りに集中していたので家に帰ってきたのが3時頃で、くつろいだりアニメみたりしてから寝た。遅くに帰ってきてもすぐに寝るわけじゃなくて、だらだらして実際に寝るまで1-2時間はかかる。こういうところ、生活が堕落していて改善していくべきなのかもしれない。良かったこととして、ウォーキングのせいか、夜はよく眠れた。&lt;/p>
&lt;h2 id="みんなの-python-勉強会の資料作り">みんなの Python 勉強会の資料作り&lt;/h2>
&lt;p>昨日の続き。一晩寝てから最後の仕上げをした。時間を置く、とくに一度寝てから資料を洗練させると改善点があちこち出てきてより良いものになっていく気がする。午前中に主催者に連絡したものの、午後になってから思い付いたことをちょくちょく修正したりもした。オンラインの資料だと、先方に連絡した後でも微修正できるところがよい。業務の資料だとさらに2-3日かけて洗練させていくけど、勉強会の資料だからこれでいいかな。タイトルはすごく気に入っているというわけではないけど「本と学びの段階」とした。ひとまず完成したので自分のやりたいことに取り組める。&lt;/p>
&lt;h2 id="神戸市長選">神戸市長選&lt;/h2>
&lt;p>神戸市は衆議院選挙とは別に市長選挙も一緒にあった。&lt;a href="https://www.nhk.or.jp/senkyo2/kobe/17581/skh50331.html">神戸市長選&lt;/a> によると、投票率は53.79％で439,749 (67.7%)の得票を得た現職の市長が完勝した。3回目の当選になるらしい。私が神戸に戻ってきてから初めての市長選挙だった。起業してから手続きなどで行政が身近になったことから関心をもつようになってきた。自分ごとで考えるというのか、どんなものでも身近なことは関心をもつのかもしれない。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>9.2 線形化可能性を読んだ。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>線形化可能性&lt;/strong> とは、データのコピーが1つしかなく、そのデータに対する操作がすべてアトミックであるかのようにシステムにみせることを指す。古くなったキャッシュやレプリカからの値ではないことを保証する、&lt;strong>最新性の保証（recency guarantee）&lt;/strong> と言える。トランザクションの章に出てきた &lt;strong>直列化可能性&lt;/strong> とはまったく異なる。直列化可能性が保証するのは、複数のトランザクションが何らかの順序で実行された場合に同じ結果になることを保証するもの。&lt;/p>
&lt;p>あと「役に立たない CAP 定理」というコラムもおもしろい。CAP 定理とは次の3つはすべて成り立たず、2つを選択することを強いる。&lt;/p>
&lt;ul>
&lt;li>一貫性（Consistency）&lt;/li>
&lt;li>可用性（Availability）&lt;/li>
&lt;li>分断耐性（Partition tolerance）&lt;/li>
&lt;/ul>
&lt;p>CAP 定理は歴史的にデータベースのトランザクションのトレードオフについての議論の出発点として引用され、有名な定理ではあるが、分散データベースの研究者の中では1970年代から知られていたことであったらしい。そして、ネットワークを介した分散システムは、分断耐性が必須 (ネットワークが切断しないことはないから) であることから一貫性か可用性のどちらかを選択するしかない。ここで一貫性とは線形化可能なシステムを実装することだが、これはパフォーマンスのデメリットが大きい。そのため、現代の多くの分散データベースは線形化可能性を提供しないことを選択しており、結果として可用性と分断耐性を選択することになっている。したがって、CAP 定理から議論を始めることは無意味であると言う。&lt;/p>
&lt;/blockquote></content></item><item><title>変哲もない日</title><link>/diary/posts/2021/1028/</link><pubDate>Thu, 28 Oct 2021 07:57:24 +0900</pubDate><guid>/diary/posts/2021/1028/</guid><description>0時に寝て6時半に起きた。久しぶりに勉強会でたくさん話したせいか、疲れて抜け殻になってた。昨日もよく眠れた。今日は調整作業が多かったので集中力を欠いてチケットの業務は進められなかった。
データ指向アプリケーションデザイン 第Ⅱ部の最後の章である9章の一貫性と合意を読み始めた。この章も内容は難しそう。9.1 まで読み終えた。時間をかけて1節ずつ読んでいく。
間違っているかもしれなくても動き続ける方が良いのか、それとも正しくあるべく停止してしまう方が良いのか？
―― Jay Kreps, “A Few Notes on Kafka and Jepsen” （ 2013 ）
冒頭の格言で kafka というキーワードが気になったので原文を探して (deepl で翻訳して) 読んでみた。一般論で考えたらこの問いの答えは停止してしまう方を選択するように私は考えてしまったが、原文の記事によると、この答えはアプリケーションに依るという。ダウンタイム=データの損失という特性のアプリケーションであれば、間違っている可能性があってもすぐに復旧して動かした方がよいという場合もあると言っている。kafka はどちらかと言えば、間違っていても動き続ける方のシステムに分類されると思う。メッセージの到達保証も At Least Once だし。
もう1点、意識しておかないといけないのはレプリケーションを行うデータベースの大半は 結果整合性（eventual consistency） であること。私は本書を読むまで、結果整合性をスケーラビリティやスループットの高い分散システムのキーバリューストアの特性だと考えていたが、RDB であってもレプリケーションはリアルタイムに行われるわけではなく、ネットワークという遅延の上限が保証されないインフラの上に構築されたものである以上、結果整合性で同期される。レプリケーションをしないデータベースシステム以外はすべて結果整合性の特性があると考えて設計や開発をする必要がある。
PMBOK ガイド第7版 プロジェクトマネジメント知識体系ガイド（PMBOKガイド）第7版＋プロジェクトマネジメント標準 を購入して届いた。たぶんいつか電子版も出ると思うけど、現時点では紙の本しかなさそう。ぱらぱらとめくりながら中身を眺めているとそんなに文字がびっしり書いてあるような本ではないので読むのはそんなに大変ではなさそうな印象を受けた。索引で知りたいキーワードを探しながらその箇所を拾い読みしたりしてた。またがっつり読み込んでまとめていきたい。
選考面談の最終決定 先日受けた 選考面談 で2社ともオファーをいただいた。感謝。自分の中では決まっていたが、顧問さんにも双方の案件の概要を話してアドバイスをもらった。その結果、私の意思と顧問さんのアドバイスも一致した。何の憂いもなく Java の開発案件の方を選択した。11月上旬から働き始める予定。3ヶ月ほど課題管理の調査・研究みたいなことをやっていたけど、いつまでもやれるほど財務に余裕がないので普通に働きながら自社のプロダクト開発も並行してやっていく。以前は2社のお仕事を引き受けて他のことをやる余裕がなくなってしまっていただけど、その失敗を教訓に今回は1社の仕事だけを専念しつつ、自社の仕事も少しずつ進めていきたい。</description><content>&lt;p>0時に寝て6時半に起きた。久しぶりに勉強会でたくさん話したせいか、疲れて抜け殻になってた。昨日もよく眠れた。今日は調整作業が多かったので集中力を欠いてチケットの業務は進められなかった。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>第Ⅱ部の最後の章である9章の一貫性と合意を読み始めた。この章も内容は難しそう。9.1 まで読み終えた。時間をかけて1節ずつ読んでいく。&lt;/p>
&lt;blockquote>
&lt;p>間違っているかもしれなくても動き続ける方が良いのか、それとも正しくあるべく停止してしまう方が良いのか？&lt;/p>
&lt;p>―― &lt;a href="https://blog.empathybox.com/post/62279088548/a-few-notes-on-kafka-and-jepsen">Jay Kreps, “A Few Notes on Kafka and Jepsen” （ 2013 ）&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>冒頭の格言で kafka というキーワードが気になったので原文を探して (deepl で翻訳して) 読んでみた。一般論で考えたらこの問いの答えは停止してしまう方を選択するように私は考えてしまったが、原文の記事によると、この答えはアプリケーションに依るという。ダウンタイム=データの損失という特性のアプリケーションであれば、間違っている可能性があってもすぐに復旧して動かした方がよいという場合もあると言っている。kafka はどちらかと言えば、間違っていても動き続ける方のシステムに分類されると思う。メッセージの到達保証も At Least Once だし。&lt;/p>
&lt;p>もう1点、意識しておかないといけないのはレプリケーションを行うデータベースの大半は &lt;strong>結果整合性（eventual consistency）&lt;/strong> であること。私は本書を読むまで、結果整合性をスケーラビリティやスループットの高い分散システムのキーバリューストアの特性だと考えていたが、RDB であってもレプリケーションはリアルタイムに行われるわけではなく、ネットワークという遅延の上限が保証されないインフラの上に構築されたものである以上、結果整合性で同期される。レプリケーションをしないデータベースシステム以外はすべて結果整合性の特性があると考えて設計や開発をする必要がある。&lt;/p>
&lt;h2 id="pmbok-ガイド第7版">PMBOK ガイド第7版&lt;/h2>
&lt;p>&lt;a href="https://www.pmi-japan.shop/shopdetail/000000000028/">プロジェクトマネジメント知識体系ガイド（PMBOKガイド）第7版＋プロジェクトマネジメント標準&lt;/a> を購入して届いた。たぶんいつか電子版も出ると思うけど、現時点では紙の本しかなさそう。ぱらぱらとめくりながら中身を眺めているとそんなに文字がびっしり書いてあるような本ではないので読むのはそんなに大変ではなさそうな印象を受けた。索引で知りたいキーワードを探しながらその箇所を拾い読みしたりしてた。またがっつり読み込んでまとめていきたい。&lt;/p>
&lt;h2 id="選考面談の最終決定">選考面談の最終決定&lt;/h2>
&lt;p>先日受けた &lt;a href="/diary/diary/posts/2021/1026/#選考面談">選考面談&lt;/a> で2社ともオファーをいただいた。感謝。自分の中では決まっていたが、顧問さんにも双方の案件の概要を話してアドバイスをもらった。その結果、私の意思と顧問さんのアドバイスも一致した。何の憂いもなく Java の開発案件の方を選択した。11月上旬から働き始める予定。3ヶ月ほど課題管理の調査・研究みたいなことをやっていたけど、いつまでもやれるほど財務に余裕がないので普通に働きながら自社のプロダクト開発も並行してやっていく。以前は2社のお仕事を引き受けて他のことをやる余裕がなくなってしまっていただけど、その失敗を教訓に今回は1社の仕事だけを専念しつつ、自社の仕事も少しずつ進めていきたい。&lt;/p></content></item><item><title>bizpy 再開</title><link>/diary/posts/2021/1027/</link><pubDate>Wed, 27 Oct 2021 08:10:21 +0900</pubDate><guid>/diary/posts/2021/1027/</guid><description>2時に寝て6時に起きた。前日の夜にウォーキングしたせいか、よく眠れた。朝活を終えてから朝ご飯を作って食べてそのままオフィスに出社した。6時起きを日課にした方が生活のリズムがよい。夕方に眠くなって1時間ほど昼寝した。
朝活: ミクロ経済学入門の入門 【三宮.dev オンライン】リモート朝活もくもく会 で第4章の供給曲線を読んだ。需要曲線の逆からの視点なので考え方は同じで図の形が異なる。用語がいくつか出てきたのでまとめる。
収穫逓減 (しゅうかくていげん): 製品をより多く生産するのにかかる経費が増大していくこと 生産活動において2倍の生産量を生み出すには2倍以上の経費がかかる 費用関数: 生産量と費用との関係をあらわす 限界費用: 追加的に1単位生産する費用 3個を生産する費用は、1個目の限界費用 + 2個目の限界費用 + 3個目の限界費用 個数が増えるごとに費用は高くなっていく 費用を図示するときは限界費用に分解した方が視覚的にわかりやすい 限界費用逓増: 生産するごとに限界費用が高まっていくこと 「逓」という漢字は「つぎつぎ」や「だんだん」という意味をもつ。
プライステイカー: 自分の生産量が価格に影響を与えられない 減産により希少価値を高め価格を吊り上げる市場操作ができない 独占企業: プライステイカーの反対。 利潤: 売上 - 経費 最適解: 利潤を最大化する生産量 あと1個追加して生産すると利益がマイナスになるところ 生産者余剰: すべての企業の利潤の和 供給曲線: すべての企業の限界費用をヨコに足し合わせた曲線 データ指向アプリケーションデザイン 昨日の続き。8.4 を読んで8章分散システムの問題を読み終えた。全体としても学びになったけれど、とくに 8.3 信頼性の低いクロックの節が全く開発・運用で意識したことがなかったので私にとっては学びになった。
分散システムにおいて発生する厄介な問題がある。
ネットワーク経由でパケットを送信しようとした場合、そのパケットはロストしたり、どれほど遅延するか分からない。同様に、レスポンスもロストしたり遅延したりするので、レスポンスを受け取れなかった場合には元々のメッセージが到達したかどうかも分からない
ノードのクロックは他のノードと大きくずれているかもしれない（できる限りの努力をして NTP をセットアップしたとしても）。クロックは急に進んだり戻ったりするかもしれず、たいていはクロックの誤差をうまく計る方法がないので、クロックに依存するのは危険
プロセスは処理中にいつどれほどの長さ一時停止するかもしれず（おそらくはstop-the-worldガベージコレクタのため）、他のノードから落ちていると見なされた後に自身に一時停止があったことを理解しないままに復活するかもしれない。
こういった 部分障害 が生じうるのが分散システムの特徴と言える。ソフトウェアが他のノードが関わる何かをしようとした場合、それは時おり失敗したり、ランダムに速度が落ちたり、まったくレスポンスが返されない（そして最終的にはタイムアウトする）といった可能性がある。分散システムでは、部分障害への耐性をソフトウェアに組み込み、システムの構成要素が一部破損していてもシステム全体としては機能し続けられるようにする。
フォールトに耐えるための最初のステップはフォールトを 検出 することだが、それさえも難しい。多くのシステムは、ノードに障害が生じていることを検出する正確な仕組みを持たないので、ほとんどの分散アルゴリズムはリモートノードが生きているかどうかを判断するのにタイムアウトに頼る。しかし、タイムアウトはネットワークの障害とノードの障害を区別できず、ネットワークの遅延変動のために間違ってノードがクラッシュしていると誤検知することもある。弱っているものの落ちてはいないノードは、きれいに落ちているノードよりもさらに扱いが難しくなる可能性がある。
フォールトが検出されたとして、システムがそれに耐えられるようにすることも簡単ではない。マシン間にはグローバルな変数も、共有メモリも、共通の情報やその他何らかの共有された状態もない。ノードは現在の時刻についてさえ合意できず、ましてやもっと重大なことに合意することなどできない。あるノードから他のノードへ情報を流せる唯一の方法は、その情報を信頼できないネットワークを通じて送ることだけである。重要な判断は単一のノードだけで安全に下すことができないので、他のノードの助けを得てクオラムが合意に至るようにするためのプロトコルが必要となる。
同じ操作をすれば決まって同じ結果を返してくれるような、単一コンピュータにおける理想化された数学的な完全さの中でソフトウェアを書くのに慣れていると、分散システムの雑然とした物理的な現実への移行はちょっとしたショックを伴う。一方、分散システムのエンジニアは、しばしば単一のコンピュータ上で解決できる問題を簡単なものだと見なすが、実際のところ今日では単一のコンピュータがこなせる仕事量はかなりのものになっている。単一のマシンでシンプルにことを済ませられるなら、概してそうする価値はある。
分散システムを利用する理由はスケーラビリティだけではない。耐障害性や低レイテンシ（地理的にユーザーの近くにデータを置けることによる）も同様に重要な目標であり、こういったことは単一ノードでは実現できない。本章ではネットワーク、クロック、プロセスの信頼性の低さが避けがたい自然の法則なのかも調べた。安全ではなく、クリティカルではないシステムの多くでは、高価な高信頼性よりも安価な低信頼性が選択される。また、信頼性の高いコンポーネントを前提としているスーパーコンピュータも取り上げました。スーパーコンピュータはその前提が故に、コンポーネントに障害が生じてしまった場合には完全に停止させて再起動することになる。これに対し、分散システムはサービスレベルでは中断することなくいつまでも動作し続けられる。これは、少なくとも理論上はすべてのフォールトやメンテナンスはノードレベルで処理できるためである。
お昼ご飯 気分でスーパー寄って買いものして家に帰り、お昼ご飯を作って食べた。前に適当に作った かぼちゃの煮物 がおいしかったので再挑戦してみた。今度は圧力鍋を使っていろいろ具材を入れてみた。過去に作っておいしかった料理のレシピを evernote に書いたりしていたけど、もういまは書いてないので気が向いたら日記に書くようにする。
材料
A 水 900cc めんつゆ 100c 醤油 適量 B かぼちゃ 1/4切れ なす 3個 にんじん 2本 玉ねぎ 1個 しめじ 1パック C 卵 2個 豆苗 せみ餃子 作り方</description><content>&lt;p>2時に寝て6時に起きた。前日の夜にウォーキングしたせいか、よく眠れた。朝活を終えてから朝ご飯を作って食べてそのままオフィスに出社した。6時起きを日課にした方が生活のリズムがよい。夕方に眠くなって1時間ほど昼寝した。&lt;/p>
&lt;h2 id="朝活-ミクロ経済学入門の入門">朝活: ミクロ経済学入門の入門&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/228969/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> で第4章の供給曲線を読んだ。需要曲線の逆からの視点なので考え方は同じで図の形が異なる。用語がいくつか出てきたのでまとめる。&lt;/p>
&lt;ul>
&lt;li>収穫逓減 (しゅうかくていげん): 製品をより多く生産するのにかかる経費が増大していくこと
&lt;ul>
&lt;li>生産活動において2倍の生産量を生み出すには2倍以上の経費がかかる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>費用関数: 生産量と費用との関係をあらわす&lt;/li>
&lt;li>限界費用: 追加的に1単位生産する費用
&lt;ul>
&lt;li>3個を生産する費用は、1個目の限界費用 + 2個目の限界費用 + 3個目の限界費用
&lt;ul>
&lt;li>個数が増えるごとに費用は高くなっていく&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>費用を図示するときは限界費用に分解した方が視覚的にわかりやすい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>限界費用逓増: 生産するごとに限界費用が高まっていくこと&lt;/li>
&lt;/ul>
&lt;p>「&lt;a href="https://dictionary.goo.ne.jp/word/kanji/%E9%80%93/">逓&lt;/a>」という漢字は「つぎつぎ」や「だんだん」という意味をもつ。&lt;/p>
&lt;ul>
&lt;li>プライステイカー: 自分の生産量が価格に影響を与えられない
&lt;ul>
&lt;li>減産により希少価値を高め価格を吊り上げる市場操作ができない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>独占企業: プライステイカーの反対。&lt;/li>
&lt;li>利潤: 売上 - 経費&lt;/li>
&lt;li>最適解: 利潤を最大化する生産量
&lt;ul>
&lt;li>あと1個追加して生産すると利益がマイナスになるところ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>生産者余剰: すべての企業の利潤の和&lt;/li>
&lt;li>供給曲線: すべての企業の限界費用をヨコに足し合わせた曲線&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="/diary/diary/img/2021/1027_supply-curve.png"/>
&lt;/figure>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>昨日の続き。8.4 を読んで8章分散システムの問題を読み終えた。全体としても学びになったけれど、とくに 8.3 信頼性の低いクロックの節が全く開発・運用で意識したことがなかったので私にとっては学びになった。&lt;/p>
&lt;blockquote>
&lt;p>分散システムにおいて発生する厄介な問題がある。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ネットワーク経由でパケットを送信しようとした場合、そのパケットはロストしたり、どれほど遅延するか分からない。同様に、レスポンスもロストしたり遅延したりするので、レスポンスを受け取れなかった場合には元々のメッセージが到達したかどうかも分からない&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ノードのクロックは他のノードと大きくずれているかもしれない（できる限りの努力をして NTP をセットアップしたとしても）。クロックは急に進んだり戻ったりするかもしれず、たいていはクロックの誤差をうまく計る方法がないので、クロックに依存するのは危険&lt;/p>
&lt;/li>
&lt;li>
&lt;p>プロセスは処理中にいつどれほどの長さ一時停止するかもしれず（おそらくはstop-the-worldガベージコレクタのため）、他のノードから落ちていると見なされた後に自身に一時停止があったことを理解しないままに復活するかもしれない。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>こういった &lt;strong>部分障害&lt;/strong> が生じうるのが分散システムの特徴と言える。ソフトウェアが他のノードが関わる何かをしようとした場合、それは時おり失敗したり、ランダムに速度が落ちたり、まったくレスポンスが返されない（そして最終的にはタイムアウトする）といった可能性がある。分散システムでは、部分障害への耐性をソフトウェアに組み込み、システムの構成要素が一部破損していてもシステム全体としては機能し続けられるようにする。&lt;/p>
&lt;p>フォールトに耐えるための最初のステップはフォールトを &lt;strong>検出&lt;/strong> することだが、それさえも難しい。多くのシステムは、ノードに障害が生じていることを検出する正確な仕組みを持たないので、ほとんどの分散アルゴリズムはリモートノードが生きているかどうかを判断するのにタイムアウトに頼る。しかし、タイムアウトはネットワークの障害とノードの障害を区別できず、ネットワークの遅延変動のために間違ってノードがクラッシュしていると誤検知することもある。弱っているものの落ちてはいないノードは、きれいに落ちているノードよりもさらに扱いが難しくなる可能性がある。&lt;/p>
&lt;p>フォールトが検出されたとして、システムがそれに耐えられるようにすることも簡単ではない。マシン間にはグローバルな変数も、共有メモリも、共通の情報やその他何らかの共有された状態もない。ノードは現在の時刻についてさえ合意できず、ましてやもっと重大なことに合意することなどできない。あるノードから他のノードへ情報を流せる唯一の方法は、その情報を信頼できないネットワークを通じて送ることだけである。重要な判断は単一のノードだけで安全に下すことができないので、他のノードの助けを得てクオラムが合意に至るようにするためのプロトコルが必要となる。&lt;/p>
&lt;p>同じ操作をすれば決まって同じ結果を返してくれるような、単一コンピュータにおける理想化された数学的な完全さの中でソフトウェアを書くのに慣れていると、分散システムの雑然とした物理的な現実への移行はちょっとしたショックを伴う。一方、分散システムのエンジニアは、しばしば単一のコンピュータ上で解決できる問題を簡単なものだと見なすが、実際のところ今日では単一のコンピュータがこなせる仕事量はかなりのものになっている。単一のマシンでシンプルにことを済ませられるなら、概してそうする価値はある。&lt;/p>
&lt;p>分散システムを利用する理由はスケーラビリティだけではない。耐障害性や低レイテンシ（地理的にユーザーの近くにデータを置けることによる）も同様に重要な目標であり、こういったことは単一ノードでは実現できない。本章ではネットワーク、クロック、プロセスの信頼性の低さが避けがたい自然の法則なのかも調べた。安全ではなく、クリティカルではないシステムの多くでは、高価な高信頼性よりも安価な低信頼性が選択される。また、信頼性の高いコンポーネントを前提としているスーパーコンピュータも取り上げました。スーパーコンピュータはその前提が故に、コンポーネントに障害が生じてしまった場合には完全に停止させて再起動することになる。これに対し、分散システムはサービスレベルでは中断することなくいつまでも動作し続けられる。これは、少なくとも理論上はすべてのフォールトやメンテナンスはノードレベルで処理できるためである。&lt;/p>
&lt;/blockquote>
&lt;h2 id="お昼ご飯">お昼ご飯&lt;/h2>
&lt;p>気分でスーパー寄って買いものして家に帰り、お昼ご飯を作って食べた。前に適当に作った &lt;a href="/diary/diary/posts/2021/1025/#お昼寝">かぼちゃの煮物&lt;/a> がおいしかったので再挑戦してみた。今度は圧力鍋を使っていろいろ具材を入れてみた。過去に作っておいしかった料理のレシピを evernote に書いたりしていたけど、もういまは書いてないので気が向いたら日記に書くようにする。&lt;/p>
&lt;p>材料&lt;/p>
&lt;ul>
&lt;li>A
&lt;ul>
&lt;li>水 900cc&lt;/li>
&lt;li>めんつゆ 100c&lt;/li>
&lt;li>醤油 適量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>B
&lt;ul>
&lt;li>かぼちゃ 1/4切れ&lt;/li>
&lt;li>なす 3個&lt;/li>
&lt;li>にんじん 2本&lt;/li>
&lt;li>玉ねぎ 1個&lt;/li>
&lt;li>しめじ 1パック&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>C
&lt;ul>
&lt;li>卵 2個&lt;/li>
&lt;li>豆苗&lt;/li>
&lt;li>せみ餃子&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>作り方&lt;/p>
&lt;ol>
&lt;li>圧力鍋に A を入れて火にかける&lt;/li>
&lt;li>B の野菜を切りながら圧力鍋に入れていく&lt;/li>
&lt;li>圧力鍋に B をすべて入れたら圧をかける (高圧30秒)&lt;/li>
&lt;li>圧が下がったら蓋をあけて C を入れる&lt;/li>
&lt;li>C に火が通るまで2分ほど煮込む&lt;/li>
&lt;/ol>
&lt;p>所感&lt;/p>
&lt;p>圧力が強過ぎたのか、かぼちゃが煮汁に溶け出してしまって原形がなくなってしまった。スープとして飲んでもおいしいけれども、水を入れ過ぎたのかもしれない。肉の代わりに餃子を使ってみた。水餃子っぽくなるので焼き餃子で油使うよりヘルシーな気持ちになっておいしい。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1027_pumpkin.jpg"/>
&lt;/figure>
&lt;h2 id="bizpy-勉強会">bizpy 勉強会&lt;/h2>
&lt;p>&lt;a href="https://bizpy.connpass.com/event/198717/">Python で Slack のインテグレーションをやってみる勉強会 #1&lt;/a> を開催した。半年以上開催してなかったので億劫になってしまっていたけど、再開できてよかった。10名ほどが参加してくれた。用意したコンテンツを話し終えたら8時半ぐらいで時間もちょうどよかった。初参加者も数人いた。slack インテグレーションの調査も兼ねてあと2-3回は集中的にやっていきたい。&lt;/p></content></item><item><title>韃靼そば茶</title><link>/diary/posts/2021/1026/</link><pubDate>Tue, 26 Oct 2021 08:48:44 +0900</pubDate><guid>/diary/posts/2021/1026/</guid><description>4時に寝て7時に起きた。やや寝坊したけど、夜中に作業してよく眠れたのでまぁいっかとしておく。昨日のかぼちゃの煮物が残っていたので19時に帰って晩ご飯食べて、ちょっと休んでからウォーキングに出た。ウォーキングの途中でオフィスに寄って一作業してからまたウォーキングして帰るという、運動と作業の一石二鳥になることを思いついた。ちょっと天才。ウォーキングの合計時間は1時間強ぐらい。
データ指向アプリケーションデザイン 8章分散システムの問題のうち、8.1, 8.2, 8.3を読んだ。
とくに 8.3 信頼性の低いクロックは私がこれまでアプリケーションを開発していて全く意識したことがなかった問題を扱っていてすごく勉強になった。おそらくミリ秒レベルでの障害調査をほとんどやったことがなかったので気にしてなかったのかもしれない。Cassandra が採用している LWW (last write wins、最後の書き込みを勝たせる) だと、短時間に連続して行われた書き込みと、本当に並行して行われた書き込みとの区別がつかないのでクロックの同期の状況によって因果律違反が発生する懸念がある。
NTP を使っていてもクロックの同期はミリ秒から秒レベルで正確ではない可能性があり、そこにプロセスの一時停止なんかも加わると容易に数秒の時間がズレてしまい、トランザクションにおける因果律違反が発生する可能性があるという話が丁寧に説明されている。実際に同じリソースに対してミリ秒レベルでトランザクションを発行するというのはあまりない状況だろうし、状態がよければあっても正常に動作する。但し、正常にトランザクションが実行されない懸念があるという理屈を知っておくのは大事なことに思えた。Google の Spanner が原子時計を導入して精度の高い時刻同期をしているというのは記事を見聞きして知っていたが、それがないとどんな問題が発生するのかが 8.3 節を読むと理解できる。
選考面談 そろそろお仕事をしないと会社の財務がやばいので選考を受けている。今日は2社の選考を受けた。1つは Go の開発案件、もう1つは Java の開発案件。どちらも業務内容はマッチングしていて勤務形態もフルリモートなのでいまの生活のまま、お仕事ができる。1社は正式にオファーが届いて、もう1社もおそらくオファーがくる想定。どちらかを選択する。転職だと面接を何回もして選考を受ける必要があるけど、業務委託だと大半が1回で決まる。昔フリーランスやってたときもそうだったかな？調整の管理コストが下がって望ましいことではある。もう私の中では承諾する方の案件は決まっているけど、念のため、1日寝かして顧問さんとも相談した後、最終決定しようと思う。
韃靼そば茶 少し前から家では 大阿蘇万能茶 を煮出して冷やして飲んでいる。村田園のサイトにはないので商品名が変わった？のかもしれない。この万能茶は、よく言えば後味すっきり、わるく言えば刺激がないと言える。おいしくないわけではない。近所のドラッグストアでノンカフェインのお茶を求めて購入した。もう少しお茶の主張がほしいなと思って、にっこくの 韃靼そば茶 を購入した。そば茶もノンカフェイン。これは水出しもできる。試しに水筒にティーパックを入れて、オフィスのウォーターサーバーで水を入れて作ってみた。時間が経つごとにそば茶の味が濃くなっていくけど、これはこれで私は好みなので問題なさそう。なるべく1日で飲みきって水筒を洗えばよさそう。
夜にうまく眠れなくなってから、夜にカフェインの入った飲みものを避けるようになった。ノンカフェインだとわかっているお茶なら安心して飲める。しばらく試してみる。</description><content>&lt;p>4時に寝て7時に起きた。やや寝坊したけど、夜中に作業してよく眠れたのでまぁいっかとしておく。昨日のかぼちゃの煮物が残っていたので19時に帰って晩ご飯食べて、ちょっと休んでからウォーキングに出た。ウォーキングの途中でオフィスに寄って一作業してからまたウォーキングして帰るという、運動と作業の一石二鳥になることを思いついた。ちょっと天才。ウォーキングの合計時間は1時間強ぐらい。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>8章分散システムの問題のうち、8.1, 8.2, 8.3を読んだ。&lt;/p>
&lt;p>とくに 8.3 信頼性の低いクロックは私がこれまでアプリケーションを開発していて全く意識したことがなかった問題を扱っていてすごく勉強になった。おそらくミリ秒レベルでの障害調査をほとんどやったことがなかったので気にしてなかったのかもしれない。Cassandra が採用している LWW (last write wins、最後の書き込みを勝たせる) だと、短時間に連続して行われた書き込みと、本当に並行して行われた書き込みとの区別がつかないのでクロックの同期の状況によって因果律違反が発生する懸念がある。&lt;/p>
&lt;p>NTP を使っていてもクロックの同期はミリ秒から秒レベルで正確ではない可能性があり、そこにプロセスの一時停止なんかも加わると容易に数秒の時間がズレてしまい、トランザクションにおける因果律違反が発生する可能性があるという話が丁寧に説明されている。実際に同じリソースに対してミリ秒レベルでトランザクションを発行するというのはあまりない状況だろうし、状態がよければあっても正常に動作する。但し、正常にトランザクションが実行されない懸念があるという理屈を知っておくのは大事なことに思えた。Google の Spanner が原子時計を導入して精度の高い時刻同期をしているというのは記事を見聞きして知っていたが、それがないとどんな問題が発生するのかが 8.3 節を読むと理解できる。&lt;/p>
&lt;h2 id="選考面談">選考面談&lt;/h2>
&lt;p>そろそろお仕事をしないと会社の財務がやばいので選考を受けている。今日は2社の選考を受けた。1つは Go の開発案件、もう1つは Java の開発案件。どちらも業務内容はマッチングしていて勤務形態もフルリモートなのでいまの生活のまま、お仕事ができる。1社は正式にオファーが届いて、もう1社もおそらくオファーがくる想定。どちらかを選択する。転職だと面接を何回もして選考を受ける必要があるけど、業務委託だと大半が1回で決まる。昔フリーランスやってたときもそうだったかな？調整の管理コストが下がって望ましいことではある。もう私の中では承諾する方の案件は決まっているけど、念のため、1日寝かして顧問さんとも相談した後、最終決定しようと思う。&lt;/p>
&lt;h2 id="韃靼そば茶">韃靼そば茶&lt;/h2>
&lt;p>少し前から家では &lt;a href="https://www.murataen.com/item/1110/">大阿蘇万能茶&lt;/a> を煮出して冷やして飲んでいる。村田園のサイトにはないので商品名が変わった？のかもしれない。この万能茶は、よく言えば後味すっきり、わるく言えば刺激がないと言える。おいしくないわけではない。近所のドラッグストアでノンカフェインのお茶を求めて購入した。もう少しお茶の主張がほしいなと思って、にっこくの &lt;a href="https://www.nikkoku.co.jp/products/homeuse/dattan/">韃靼そば茶&lt;/a> を購入した。そば茶もノンカフェイン。これは水出しもできる。試しに水筒にティーパックを入れて、オフィスのウォーターサーバーで水を入れて作ってみた。時間が経つごとにそば茶の味が濃くなっていくけど、これはこれで私は好みなので問題なさそう。なるべく1日で飲みきって水筒を洗えばよさそう。&lt;/p>
&lt;p>夜にうまく眠れなくなってから、夜にカフェインの入った飲みものを避けるようになった。ノンカフェインだとわかっているお茶なら安心して飲める。しばらく試してみる。&lt;/p></content></item><item><title>新しい生活リズムへの移行</title><link>/diary/posts/2021/1025/</link><pubDate>Mon, 25 Oct 2021 07:25:33 +0900</pubDate><guid>/diary/posts/2021/1025/</guid><description>3時に寝て6時に起きた。今日はちゃんと起き上がって朝からお茶を煮出して粗熱とって冷やしたりしてた。その後、準備してオフィスに着いたのが7時20分。いつもより1時間早く起きているのでオフィスに着くのも1時間早くなる。先週 の水曜日と金曜日だけ朝活やってみて逆に生活のリズムが乱れてよくない感じがした。今週は毎日6時に起きて朝活に参加してみるのを試す。
ミクロ経済学入門の入門 早起きしたので打ち合わせ前の隙間時間に第3章の需要曲線を読んだ。まずは用語の整理から。
上級財: 所得が増えたときに消費が増える財 下級財: 所得が増えたときに消費が減る財 一般的な傾向として、ものは消費するほど有り難みが減る。たとえば僕はコーヒー1杯目に最大4ドルまでなら払ってよいけれど、2杯目には最大2ドルまでしか払いたくない、そして3杯目には最大1ドルまでしか払いたくない、というように。
食べものとか実際にボリュームディスカウントされることが多いので食べものだとイメージしやすい。スーパーで半額になった豚カツを2枚買うときの私の気持ちはこんな感じ。定価なら1枚しか買わないのに半額なら2枚買ってもいいかと思ったりする。たまに2枚を一度に食べて気分悪くなって後悔する。たいていは晩ご飯に1枚、翌日のお昼ゴハンに1枚を分けて食べる。
余剰: 価格と消費者がお金を払ってもよい金額との差額 コーヒー1杯に400円払ってよいと考えていて、100円のコーヒーを買うなら300円が余剰といえる さらにコーヒー2杯目を50円で買ってよいと考えるなら350円が余剰と言える すべての消費者の余剰を計算したものを消費者余剰という。需要曲線からある価格 p を取るときの次のグラフにおける面積を消費者余剰と呼ぶ。グラフにすると直観的にわかりやすい。
消費者余剰に対して、売る側の利潤の合計を生産者余剰と呼ぶ。消費者余剰と生産者余剰との和を社会的余剰と呼ぶ。社会的余剰を「市場のよさ」のモノサシとして使うと談合は禁止すべしということになる。
ベルトラン価格競争 同品質で同費用の業者が価格競争をした場合、顧客は価格が安い方から商品を購入する。こうした市場をベルトラン寡占市場と呼ぶ このとき業者間の価格競争は最終的に「底辺への競争」が起こり、経費と同じ価格に近づく この状態をベルトラン均衡と呼ぶ 業者間で談合して価格を据え置けばよいが、業者の数が多くなるとこれは難しい 裏切りが発生したり、信頼関係を維持するのが難しかったりして、長期的な利益や全体の利益を追求するのが難しい ゲーム理論の話しのように読めた 価格弾力性 価格の変化によって需要がどのぐらい弾んで動くかをあらわす 弾力性が低いというと、価格が動いても需要はあまり変わらない状態をいう 弾力性が高い財は値上げすると需要が大幅に下がる 必需品は値上げしても需要が下がりにくい 課税で考えると、必需品への課税は貧しい人の生活に与えるダメージが大きい ギッフェン財 需要曲線は右下がりのカーブになるのが通常だが、経験的事実に即している そうした財を正常財と呼ぶ ごく稀に価格が上がるにつれ売れ行きが増すものがある、それをギッフェン財と呼ぶ 代替効果: ある商品が値上げしたときに別の商品に置き換えたくなる 所得効果: 生活にゆとりがなくなると、高いものは買えなくなり、安いものを買おうとする 内容はそう難しくないが、急にたくさんの用語が出てきて読み解くのに時間がかかった。
設計ドキュメントレビュー 先週から作っていた設計ドキュメントを顧問さんと一緒にレビューした。スライド40枚を2時間がっつり話してめっちゃ疲れた。話し終えて20-30分抜け殻になって軽く散歩してきた。ここ3ヶ月、調べものをしてきた内容の集大成でもあり、頭の中にしかなかった課題管理の実践知を明文化するといった取り組みの (途中) 結果でもある。品質の良し悪しで言えば、たった3ヶ月で出来たものなので大したことはない。あくまで途上における段階でしかないのだけど、私の中でも納得感は出てきたし、レビューしてもらって厳しい指摘もなかったので方向性は出てきた感じがある。このまま時間のあるときに進めていく。
Slack apps の調査 この水曜日にある勉強会の 資料作成 が完了した。Slack apps の調査を勢いよくやりたいので2週間ごとに開催することにする。ドキュメントを眺めていて次回は 新機能、アプリのホーム・ヴューを活用しよう:house_with_garden: のチュートリアルをやってみることに決めた。
お昼寝 睡眠時間が短かったせいか、朝早かったせいか、夕方に集中力がなくなったので17時に切り上げて帰って寝てた。今日は雨だったので徒歩通勤だったのもありウォーキングにもなった。途中でスーパーに寄って買いものして帰った。運動目的だと1時間ぐらい歩いても平気なのに通勤だと15分歩くだけで疲れる。同じ行動をしていても目的意識で変わってくる。18時ぐらいには家に着いてそのまま4時間ほど寝てた。その後、また起きて夜の作業に入った。起きてからお腹すいて即席でめんつゆと醤油とかぼちゃとささみと卵で煮物を作ってみたら意外とおいしかった。お腹すいているとちょっとしたものでもおいしい。気に入ったのでカバー画像にしてみた。</description><content>&lt;p>3時に寝て6時に起きた。今日はちゃんと起き上がって朝からお茶を煮出して粗熱とって冷やしたりしてた。その後、準備してオフィスに着いたのが7時20分。いつもより1時間早く起きているのでオフィスに着くのも1時間早くなる。&lt;a href="/diary/diary/posts/2021/1022/">先週&lt;/a> の水曜日と金曜日だけ朝活やってみて逆に生活のリズムが乱れてよくない感じがした。今週は毎日6時に起きて朝活に参加してみるのを試す。&lt;/p>
&lt;h2 id="ミクロ経済学入門の入門">ミクロ経済学入門の入門&lt;/h2>
&lt;p>早起きしたので打ち合わせ前の隙間時間に第3章の需要曲線を読んだ。まずは用語の整理から。&lt;/p>
&lt;ul>
&lt;li>上級財: 所得が増えたときに消費が増える財&lt;/li>
&lt;li>下級財: 所得が増えたときに消費が減る財&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>一般的な傾向として、ものは消費するほど有り難みが減る。たとえば僕はコーヒー1杯目に最大4ドルまでなら払ってよいけれど、2杯目には最大2ドルまでしか払いたくない、そして3杯目には最大1ドルまでしか払いたくない、というように。&lt;/p>
&lt;/blockquote>
&lt;p>食べものとか実際にボリュームディスカウントされることが多いので食べものだとイメージしやすい。スーパーで半額になった豚カツを2枚買うときの私の気持ちはこんな感じ。定価なら1枚しか買わないのに半額なら2枚買ってもいいかと思ったりする。たまに2枚を一度に食べて気分悪くなって後悔する。たいていは晩ご飯に1枚、翌日のお昼ゴハンに1枚を分けて食べる。&lt;/p>
&lt;ul>
&lt;li>余剰: 価格と消費者がお金を払ってもよい金額との差額
&lt;ul>
&lt;li>コーヒー1杯に400円払ってよいと考えていて、100円のコーヒーを買うなら300円が余剰といえる
&lt;ul>
&lt;li>さらにコーヒー2杯目を50円で買ってよいと考えるなら350円が余剰と言える&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>すべての消費者の余剰を計算したものを消費者余剰という。需要曲線からある価格 p を取るときの次のグラフにおける面積を消費者余剰と呼ぶ。グラフにすると直観的にわかりやすい。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1025_consumer-surplus.png"/>
&lt;/figure>
&lt;p>消費者余剰に対して、売る側の利潤の合計を生産者余剰と呼ぶ。消費者余剰と生産者余剰との和を社会的余剰と呼ぶ。社会的余剰を「市場のよさ」のモノサシとして使うと談合は禁止すべしということになる。&lt;/p>
&lt;ul>
&lt;li>ベルトラン価格競争
&lt;ul>
&lt;li>同品質で同費用の業者が価格競争をした場合、顧客は価格が安い方から商品を購入する。こうした市場をベルトラン寡占市場と呼ぶ&lt;/li>
&lt;li>このとき業者間の価格競争は最終的に「底辺への競争」が起こり、経費と同じ価格に近づく
&lt;ul>
&lt;li>この状態をベルトラン均衡と呼ぶ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>業者間で談合して価格を据え置けばよいが、業者の数が多くなるとこれは難しい
&lt;ul>
&lt;li>裏切りが発生したり、信頼関係を維持するのが難しかったりして、長期的な利益や全体の利益を追求するのが難しい
&lt;ul>
&lt;li>ゲーム理論の話しのように読めた&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>価格弾力性
&lt;ul>
&lt;li>価格の変化によって需要がどのぐらい弾んで動くかをあらわす&lt;/li>
&lt;li>弾力性が低いというと、価格が動いても需要はあまり変わらない状態をいう&lt;/li>
&lt;li>弾力性が高い財は値上げすると需要が大幅に下がる
&lt;ul>
&lt;li>必需品は値上げしても需要が下がりにくい
&lt;ul>
&lt;li>課税で考えると、必需品への課税は貧しい人の生活に与えるダメージが大きい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ギッフェン財
&lt;ul>
&lt;li>需要曲線は右下がりのカーブになるのが通常だが、経験的事実に即している
&lt;ul>
&lt;li>そうした財を正常財と呼ぶ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ごく稀に価格が上がるにつれ売れ行きが増すものがある、それをギッフェン財と呼ぶ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>代替効果: ある商品が値上げしたときに別の商品に置き換えたくなる&lt;/li>
&lt;li>所得効果: 生活にゆとりがなくなると、高いものは買えなくなり、安いものを買おうとする&lt;/li>
&lt;/ul>
&lt;p>内容はそう難しくないが、急にたくさんの用語が出てきて読み解くのに時間がかかった。&lt;/p>
&lt;h2 id="設計ドキュメントレビュー">設計ドキュメントレビュー&lt;/h2>
&lt;p>先週から作っていた設計ドキュメントを顧問さんと一緒にレビューした。スライド40枚を2時間がっつり話してめっちゃ疲れた。話し終えて20-30分抜け殻になって軽く散歩してきた。ここ3ヶ月、調べものをしてきた内容の集大成でもあり、頭の中にしかなかった課題管理の実践知を明文化するといった取り組みの (途中) 結果でもある。品質の良し悪しで言えば、たった3ヶ月で出来たものなので大したことはない。あくまで途上における段階でしかないのだけど、私の中でも納得感は出てきたし、レビューしてもらって厳しい指摘もなかったので方向性は出てきた感じがある。このまま時間のあるときに進めていく。&lt;/p>
&lt;h2 id="slack-apps-の調査">Slack apps の調査&lt;/h2>
&lt;p>この水曜日にある勉強会の &lt;a href="https://github.com/t2y/python-study/tree/master/BizPy/slack/20211027">資料作成&lt;/a> が完了した。Slack apps の調査を勢いよくやりたいので2週間ごとに開催することにする。ドキュメントを眺めていて次回は &lt;a href="https://api.slack.com/lang/ja-jp/app-home-with-modal">新機能、アプリのホーム・ヴューを活用しよう:house_with_garden:&lt;/a> のチュートリアルをやってみることに決めた。&lt;/p>
&lt;h2 id="お昼寝">お昼寝&lt;/h2>
&lt;p>睡眠時間が短かったせいか、朝早かったせいか、夕方に集中力がなくなったので17時に切り上げて帰って寝てた。今日は雨だったので徒歩通勤だったのもありウォーキングにもなった。途中でスーパーに寄って買いものして帰った。運動目的だと1時間ぐらい歩いても平気なのに通勤だと15分歩くだけで疲れる。同じ行動をしていても目的意識で変わってくる。18時ぐらいには家に着いてそのまま4時間ほど寝てた。その後、また起きて夜の作業に入った。起きてからお腹すいて即席でめんつゆと醤油とかぼちゃとささみと卵で煮物を作ってみたら意外とおいしかった。お腹すいているとちょっとしたものでもおいしい。気に入ったのでカバー画像にしてみた。&lt;/p></content></item><item><title>改正法人税法等の説明会</title><link>/diary/posts/2021/1019/</link><pubDate>Tue, 19 Oct 2021 08:52:42 +0900</pubDate><guid>/diary/posts/2021/1019/</guid><description>0-1時ぐらいに寝て7時半に起きた。よく眠れたか眠れてないかもわからないような目覚め方をして少しぼおっとしてた。朝ゆっくりしてもいいかと思いつつ準備して移動したら9時前にはオフィスにいたので普通の日とそう変わらない一日の始めだった。夜にジョギング行こうかと思ってたけど、ちょうど通り雨が降ったりやんだりしててやめた。代わりに雨やんでからオフィス行って調べてものしてた。
データ指向アプリケーションデザイン 7.3を読んで7章トランザクションを読み終えた。トランザクションの章は言葉も知らないし、あまりクリティカルなアプリケーションの開発に関わってこなかったのでそこまで意識したことがなかった。トランザクションで問題が発生する分離レベルと典型的なパターンが体系的に整理されていてすごく勉強になった。結果的にトランザクションを使わないとしても、トランザクションの要否や起きうる整合性の問題を理解しておくとデータ定義やアプリケーションの設計にも活かせる気がする。7章まで読んだ中でもっとも知らないことが多かった。約300ページなのでだいたい半分読み終えた。まだまだ先は長い。
トランザクションの開始時点でロックをかけるべきオブジェクトが存在せず、あるトランザクションでの書き込みが他のトランザクションの検索クエリの結果を変化させてしまう問題を ファントム と呼ぶ。ファントムの対策の1つとして、あらかじめそのデータを作っておき SELECT FOR UPDATE でロックを取得するやり方を 衝突の実体化 (materializing conflicts) と呼ぶらしい。グループウェアの開発をしていた頃、1つのスレッドしかトランザクションを実行できないことを保証するための切り札として、ロック用途のテーブルを設けておき、そのロックを獲得したスレッドだけ処理できるようにしていた。当時はわからなかったけど、あれは衝突の実体化という手法だったんだといま気付いた。
データベースのクラッシュや整合性に関する問題に対する信頼性を保つために、それらの問題を単純化するために、この数十年にわたって選択されてきた仕組みが トランザクション である。トランザクションは、アプリケーションが複数の読み書きを論理的な単位としてまとめる方法である。概念的には、トランザクション中のすべての読み書きは1つの操作として実行される。トランザクションは抽象化のレイヤーであり、アプリケーションはある種の並行性の問題や、ある種のハードウェアやソフトウェアの問題が存在しないかのように振る舞えるようになる。
トランザクションは全体として成功（ コミット（commit） ）もしくは失敗（ 中断（abort） 、 ロールバック（rollback） ）する。トランザクションが失敗した場合には、アプリケーションは安全にリトライできる。トランザクションは自然法則ではなく、データベースにアクセスするアプリケーションのためのプログラミングモデルをシンプルにするという目的を持って生み出された。トランザクションを利用すれば、ある種の潜在的なエラーの状況や並行性の問題はデータベースが面倒を見てくれるので、アプリケーションはそれらを気にしなくてよくなる（このことは 安全性の保証 と呼ばれる）。
トランザクションが提供する安全性の保証は ACID で示される。
原子性 (Atomicity) 原子（アトミック） はそれ以上小さな部分に分割できないものを指して使われる言葉 マルチスレッドのプログラミングにおいては、あるスレッドがアトミックな処理を実行しているというなら、それは他のスレッドからはその処理の半分だけ完了した途中の状態を見る方法が存在しないことを意味する。システムが取りえる状態は、その処理が始まる前と終わった後の状態だけであり、その中間の状態になることはない 前にメモリモデルの文脈で、あるプロセスが書き込み完了したデータが、他のプロセスからも確実に読めることをアトミックな操作と習ったことがある 原子性と並行性は関係がない エラーの際にトランザクションを中断し、そのトランザクションのすべての書き込みを破棄できることが、 ACID の原子性を決定づける特徴と言える アプリケーションがリトライしても安全であることを保証する 中断可能性（abortability） の方が原子性よりも良い言葉だったと思われる 一貫性 (Consistency) 一貫性は多くの意味で使われる とくに日本語では整合性とも訳される 非同期のレプリケーションシステムでは結果整合性の問題が発生する (5章) コンシステントハッシュ法は、リバランシングのためにいくつかのシステムで利用されているパーティショニングのアプローチ CAP 定理では、一貫性という言葉は線形化可能性の意味で使われる (9章) ACID の文脈における一貫性は、データベースが「良い状態」にあることを示すアプリケーション固有の概念を指す 同じ言葉を少なくとも4つの異なる意味で使われている。ACID における一貫性という概念は、データについて常に真でなければならない何らかの言明（ 不変性 ）があることを指す。たとえば、会計システムの場合、すべてのアカウントでまとめれば常に貸方と借方は等しくならなければならない。この一貫性の概念はアプリケーション固有の不変性の概念に依存しており、一貫性を保つようにトランザクションを適切に定義することはアプリケーションの責任となる。原子性、分離性、永続性はデータベースの特性だが、一貫性は（ ACID という考え方においては）アプリケーションの特性である。したがって、 C は実際には ACID に属していない。
分離性 (Isolation) 多くのデータベースは、同時に複数のクライアントからアクセスされる。データベース中の同じレコードにアクセスするときに並行性の問題（レース条件［ race condition ］）が生じる可能性がある。データベース中に保存されているカウンタを、2つのクライアントが同時にインクリメントすると仮定する。それぞれのクライアントは現在の値を読み取り、1を加え、新しい値を書き戻す。ACID における分離性とは、並行して実行されたトランザクションがお互いから分離されており、お互いのつま先を踏みつけあうようなことがないという意味である。実際の運用では、パフォーマンスの制約から分離レベルによって保証される分離性が変わってくる。</description><content>&lt;p>0-1時ぐらいに寝て7時半に起きた。よく眠れたか眠れてないかもわからないような目覚め方をして少しぼおっとしてた。朝ゆっくりしてもいいかと思いつつ準備して移動したら9時前にはオフィスにいたので普通の日とそう変わらない一日の始めだった。夜にジョギング行こうかと思ってたけど、ちょうど通り雨が降ったりやんだりしててやめた。代わりに雨やんでからオフィス行って調べてものしてた。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>7.3を読んで7章トランザクションを読み終えた。トランザクションの章は言葉も知らないし、あまりクリティカルなアプリケーションの開発に関わってこなかったのでそこまで意識したことがなかった。トランザクションで問題が発生する分離レベルと典型的なパターンが体系的に整理されていてすごく勉強になった。結果的にトランザクションを使わないとしても、トランザクションの要否や起きうる整合性の問題を理解しておくとデータ定義やアプリケーションの設計にも活かせる気がする。7章まで読んだ中でもっとも知らないことが多かった。約300ページなのでだいたい半分読み終えた。まだまだ先は長い。&lt;/p>
&lt;p>トランザクションの開始時点でロックをかけるべきオブジェクトが存在せず、あるトランザクションでの書き込みが他のトランザクションの検索クエリの結果を変化させてしまう問題を &lt;strong>ファントム&lt;/strong> と呼ぶ。ファントムの対策の1つとして、あらかじめそのデータを作っておき &lt;code>SELECT FOR UPDATE&lt;/code> でロックを取得するやり方を &lt;strong>衝突の実体化 (materializing conflicts)&lt;/strong> と呼ぶらしい。グループウェアの開発をしていた頃、1つのスレッドしかトランザクションを実行できないことを保証するための切り札として、ロック用途のテーブルを設けておき、そのロックを獲得したスレッドだけ処理できるようにしていた。当時はわからなかったけど、あれは衝突の実体化という手法だったんだといま気付いた。&lt;/p>
&lt;blockquote>
&lt;p>データベースのクラッシュや整合性に関する問題に対する信頼性を保つために、それらの問題を単純化するために、この数十年にわたって選択されてきた仕組みが &lt;strong>トランザクション&lt;/strong> である。トランザクションは、アプリケーションが複数の読み書きを論理的な単位としてまとめる方法である。概念的には、トランザクション中のすべての読み書きは1つの操作として実行される。トランザクションは抽象化のレイヤーであり、アプリケーションはある種の並行性の問題や、ある種のハードウェアやソフトウェアの問題が存在しないかのように振る舞えるようになる。&lt;/p>
&lt;p>トランザクションは全体として成功（ &lt;strong>コミット（commit）&lt;/strong> ）もしくは失敗（ &lt;strong>中断（abort）&lt;/strong> 、 &lt;strong>ロールバック（rollback）&lt;/strong> ）する。トランザクションが失敗した場合には、アプリケーションは安全にリトライできる。トランザクションは自然法則ではなく、データベースにアクセスするアプリケーションのためのプログラミングモデルをシンプルにするという目的を持って生み出された。トランザクションを利用すれば、ある種の潜在的なエラーの状況や並行性の問題はデータベースが面倒を見てくれるので、アプリケーションはそれらを気にしなくてよくなる（このことは &lt;strong>安全性の保証&lt;/strong> と呼ばれる）。&lt;/p>
&lt;p>トランザクションが提供する安全性の保証は &lt;strong>ACID&lt;/strong> で示される。&lt;/p>
&lt;h5 id="原子性-atomicity">原子性 (Atomicity)&lt;/h5>
&lt;ul>
&lt;li>&lt;strong>原子（アトミック）&lt;/strong> はそれ以上小さな部分に分割できないものを指して使われる言葉&lt;/li>
&lt;li>マルチスレッドのプログラミングにおいては、あるスレッドがアトミックな処理を実行しているというなら、それは他のスレッドからはその処理の半分だけ完了した途中の状態を見る方法が存在しないことを意味する。システムが取りえる状態は、その処理が始まる前と終わった後の状態だけであり、その中間の状態になることはない
&lt;ul>
&lt;li>前にメモリモデルの文脈で、あるプロセスが書き込み完了したデータが、他のプロセスからも確実に読めることをアトミックな操作と習ったことがある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>原子性と並行性は関係がない&lt;/li>
&lt;li>エラーの際にトランザクションを中断し、そのトランザクションのすべての書き込みを破棄できることが、 ACID の原子性を決定づける特徴と言える
&lt;ul>
&lt;li>アプリケーションがリトライしても安全であることを保証する&lt;/li>
&lt;li>&lt;strong>中断可能性（abortability）&lt;/strong> の方が原子性よりも良い言葉だったと思われる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="一貫性-consistency">一貫性 (Consistency)&lt;/h4>
&lt;ul>
&lt;li>一貫性は多くの意味で使われる
&lt;ul>
&lt;li>とくに日本語では整合性とも訳される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>非同期のレプリケーションシステムでは結果整合性の問題が発生する (5章)&lt;/li>
&lt;li>コンシステントハッシュ法は、リバランシングのためにいくつかのシステムで利用されているパーティショニングのアプローチ&lt;/li>
&lt;li>CAP 定理では、一貫性という言葉は線形化可能性の意味で使われる (9章)&lt;/li>
&lt;li>ACID の文脈における一貫性は、データベースが「良い状態」にあることを示すアプリケーション固有の概念を指す&lt;/li>
&lt;/ul>
&lt;p>同じ言葉を少なくとも4つの異なる意味で使われている。ACID における一貫性という概念は、データについて常に真でなければならない何らかの言明（ &lt;strong>不変性&lt;/strong> ）があることを指す。たとえば、会計システムの場合、すべてのアカウントでまとめれば常に貸方と借方は等しくならなければならない。この一貫性の概念はアプリケーション固有の不変性の概念に依存しており、一貫性を保つようにトランザクションを適切に定義することはアプリケーションの責任となる。原子性、分離性、永続性はデータベースの特性だが、一貫性は（ ACID という考え方においては）アプリケーションの特性である。したがって、 C は実際には ACID に属していない。&lt;/p>
&lt;h4 id="分離性-isolation">分離性 (Isolation)&lt;/h4>
&lt;p>多くのデータベースは、同時に複数のクライアントからアクセスされる。データベース中の同じレコードにアクセスするときに並行性の問題（レース条件［ race condition ］）が生じる可能性がある。データベース中に保存されているカウンタを、2つのクライアントが同時にインクリメントすると仮定する。それぞれのクライアントは現在の値を読み取り、1を加え、新しい値を書き戻す。ACID における分離性とは、並行して実行されたトランザクションがお互いから分離されており、お互いのつま先を踏みつけあうようなことがないという意味である。実際の運用では、パフォーマンスの制約から分離レベルによって保証される分離性が変わってくる。&lt;/p>
&lt;h4 id="永続性-durability">永続性 (Durability)&lt;/h4>
&lt;p>データベースシステムが目的とするのは、データを失う恐れなく保存できる安全な場所を提供すること。永続性は、トランザクションのコミットが成功したら、仮にハードウェアの障害やデータベースのクラッシュがあったとしても、そのトランザクションで書き込まれたすべてのデータは失われないことを約束する。&lt;/p>
&lt;h4 id="用語の整理">用語の整理&lt;/h4>
&lt;p>トランザクションはデータモデルがどういったものであるかにかかわらず、価値あるデータベースの機能と言える。並行に実行されたトランザクションがお互いに影響しあわない分離性における保証を &lt;strong>分離レベル&lt;/strong> と呼ぶ。&lt;/p>
&lt;ul>
&lt;li>read committed&lt;/li>
&lt;li>スナップショット分離（repeatable read とも呼ばれる）&lt;/li>
&lt;li>直列化可能&lt;/li>
&lt;/ul>
&lt;p>これらの分離レベルに対してトランザクションで発生する様々なレース条件がある。&lt;/p>
&lt;ul>
&lt;li>ダーティリード
&lt;ul>
&lt;li>あるクライアントが他のクライアントのまだコミットされていない書き込みを読める&lt;/li>
&lt;li>read committed 分離レベル及びそれ以上に強い分離レベルはダーティリードは生じない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ダーティライト
&lt;ul>
&lt;li>あるクライアントが他のクライアントによるまだコミットされていない書き込みの内容を上書きしてしまう&lt;/li>
&lt;li>ほぼすべてのトランザクションの実装は、ダーティライトを生じない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>読み取りスキュー（nonrepeatable read）
&lt;ul>
&lt;li>クライアントが異なる時刻にデータベースの異なる部分を見ること&lt;/li>
&lt;li>この問題の最も一般的な回避策はスナップショット分離によるもので、これはトランザクションがある時点での一貫したスナップショットから読み取りを行えるようにする&lt;/li>
&lt;li>通常、MVCC（multi-version concurrency control）を利用して実装される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>更新のロスト
&lt;ul>
&lt;li>2つのクライアントが並行して read-modify-write サイクルを実行するとき、片方が他方の書き込みをその変更内容を考慮せずに上書きしてしまい、データが失われること&lt;/li>
&lt;li>スナップショット分離レベルの実装にはこの異常を自動的に回避してくれるものもあるが、明示的なロック（ SELECT FOR UPDATE ）をしなければならない実装もある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>書き込みスキュー
&lt;ul>
&lt;li>トランザクションが何かを読み取り、その値に基づいて判断を下し、その結果をデータベースに書き込む&lt;/li>
&lt;li>この状況で、書き込みが行われた時点で判断の根拠となったプレミスが真ではなくなっている場合を指す&lt;/li>
&lt;li>直列化可能分離レベルのみがこの異常を回避できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ファントムリード
&lt;ul>
&lt;li>トランザクションが何らかの検索条件にマッチするオブジェクトを読み取り、他のクライアントはその検索結果に影響する書き込みを行う&lt;/li>
&lt;li>スナップショット分離レベルは単純なファントムリードを回避してくれるが、書き込みスキューを伴うファントムに対してはインデックス範囲ロックのような特別な対応が必要となる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>弱い分離レベルは、これらの異常のいくつかを防いでくれるが、それ以外はアプリケーション開発者に対処する必要がある（たとえば明示的なロックなど）。すべての問題に対する保護を提供してくれるのは直列化可能分離レベルのみ。直列化可能なトランザクションの実装方法は、3 種類ある。&lt;/p>
&lt;ul>
&lt;li>トランザクションを順次実行する
&lt;ul>
&lt;li>それぞれのトランザクションをきわめて高速に実行でき、加えて単一の CPU コアで十分処理できる程度にトランザクションのスループットが低いのであれば、これはシンプルで効果的な選択肢となる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ツーフェーズロック
&lt;ul>
&lt;li>数十年にわたって直列化可能分離レベルの実装において標準的な方法であった&lt;/li>
&lt;li>パフォーマンス上の特性から多くのアプリケーションがツーフェーズロックの利用は避けている&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>直列化可能スナップショット分離（SSI、serializable snapshot isolation）
&lt;ul>
&lt;li>新しいアルゴリズムであり、これまでのアプローチが持つ欠点のほとんどを回避している&lt;/li>
&lt;li>SSI は楽観的アプローチを取っており、トランザクションはブロックされることなく処理を進められる&lt;/li>
&lt;li>トランザクションはコミットの時点でチェックされ、その実行が直列化可能になっていなければ中断される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="改正法人税法等の説明会">改正法人税法等の説明会&lt;/h2>
&lt;p>&lt;a href="https://www.nk-net.co.jp/kobe/assets/files/schedule/2021/211019.pdf">改正法人税法等の説明会&lt;/a> に参加してきた。所感からまとめるとこんな感じ。&lt;/p>
&lt;ul>
&lt;li>神戸文化ホールについて
&lt;ul>
&lt;li>電源がない&lt;/li>
&lt;li>FREESPOT が提供されていてフリー wifi として利用できるが、通信品質は不安定
&lt;ul>
&lt;li>スマホでテザリングもやってみたが、電波状態がよくなくてもっと不安定&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ラップトップ向きの場所ではない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>税制を身近にするイベントとしては参加してもよい&lt;/li>
&lt;li>もらった資料をたんたんと説明するだけなのでイベントに参加することで得られる付加価値はとくにない&lt;/li>
&lt;li>気分転換や時間があれば参加すればいい、忙しかったら参加しなくてもよさそう&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.nk-net.co.jp/kobe/index.html">公益社団法人 神戸納税協会&lt;/a> という組織がある。年会費 (うちの会社だと7,800円) がいるのでいまは入らないけど、無料税務相談があるので余裕ができたら困ったときの相談相手になってもらう意図で入会してもよいかもしれない。冒頭の神戸税務署長の挨拶で法人税の申告における e-tax の利用率は 88.4% だと話してた。うちは紙で申請しているので意外とみんな e-tax 使っているんだなと自社を恥じた。だって Windows マシンないとできへんねんもん。参加したことによる学びとして書いていくとこれらかな。&lt;/p>
&lt;ul>
&lt;li>「研究開発費」は会計上の用語、「試験研究費」は税法上の用語&lt;/li>
&lt;li>DX 投資促進税制の創設&lt;/li>
&lt;/ul>
&lt;p>内容は基本知らないことなので、知らないことに触れるイベントという点では斬新ではあった。ほうほうと聞いてただけなんだけど。直接うちの会社に影響を与える税法の改正はインボイス制度ぐらいかな。&lt;/p></content></item><item><title>とくに何もない一日</title><link>/diary/posts/2021/1018/</link><pubDate>Mon, 18 Oct 2021 09:56:19 +0900</pubDate><guid>/diary/posts/2021/1018/</guid><description>いつ寝たのか覚えてないけど、スマホをみたら1時過ぎに寝て6時に起きたことになっている。だいたいいつも5-6時には一度目が覚める。そのまま起きるときもあれば起きないときもある。今日はちゃんと起き上がったのは7-8時ぐらいだった気がする。夜にジョギング行こうかとも考えていただけど、帰って先に晩ご飯食べたら疲れてそのままだらだらしてた。
エージェント面談 そろそろ次のお仕事を探す準備のために エンジニアファクトリー というサービスに登録してみた。KOBE JOB PORT で紹介されていたのをみつけた。前に Remogu さんで探していた ように、プロジェクトマネージャー案件か、リモートワークの開発者案件を探している。マネージャーだと常駐系の方が多かったり、実務経験必須だったりすることが多いため、神戸から通える範囲の案件も探してみようという意図になる。だいたいこんな内容を話してた。
職務経歴の内容から個人を特定できないよう、エージェントがブラインド化した資料を企業に公開する 単価が高い案件は東京の会社のリモートワークに多い 契約は準委任契約がほとんどである 法人として契約もできる 6ヶ月や1年といった短期開発案件も多い 求職者の情報を匿名化する背景は、企業が直接交渉するのを避けるためなのかな？求人プラットフォームごとに情報入力しないといけないのが面倒なところ。
データ指向アプリケーションデザイン 7章トランザクションのうち、7.1と7.2を読んだ。トランザクションの章は内容も難しく量も多いので2日にかけて読むことにする。昔、業務アプリケーションやグループウェアを開発していたときはトランザクションを意識してコードを書いていたけど、Web アプリケーションを開発していると、あまりクリティカルな処理を実装することが少ないせいか、トランザクションをそんな意識しなくなったなと漠然と思えた。Cassandra だとトランザクションもないし。非同期 + 結果整合性で運用できるアプリケーションであればトランザクションいらないというのはそうなのかもしれない。</description><content>&lt;p>いつ寝たのか覚えてないけど、スマホをみたら1時過ぎに寝て6時に起きたことになっている。だいたいいつも5-6時には一度目が覚める。そのまま起きるときもあれば起きないときもある。今日はちゃんと起き上がったのは7-8時ぐらいだった気がする。夜にジョギング行こうかとも考えていただけど、帰って先に晩ご飯食べたら疲れてそのままだらだらしてた。&lt;/p>
&lt;h2 id="エージェント面談">エージェント面談&lt;/h2>
&lt;p>そろそろ次のお仕事を探す準備のために &lt;a href="https://www.engineer-factory.com/">エンジニアファクトリー&lt;/a> というサービスに登録してみた。&lt;a href="https://www.city.kobe.lg.jp/life/livelihood/kobejobport/index.html">KOBE JOB PORT&lt;/a> で紹介されていたのをみつけた。&lt;a href="/diary/diary/posts/2021/0930/#カジュアル面談準備">前に Remogu さんで探していた&lt;/a> ように、プロジェクトマネージャー案件か、リモートワークの開発者案件を探している。マネージャーだと常駐系の方が多かったり、実務経験必須だったりすることが多いため、神戸から通える範囲の案件も探してみようという意図になる。だいたいこんな内容を話してた。&lt;/p>
&lt;ul>
&lt;li>職務経歴の内容から個人を特定できないよう、エージェントがブラインド化した資料を企業に公開する&lt;/li>
&lt;li>単価が高い案件は東京の会社のリモートワークに多い&lt;/li>
&lt;li>契約は準委任契約がほとんどである&lt;/li>
&lt;li>法人として契約もできる&lt;/li>
&lt;li>6ヶ月や1年といった短期開発案件も多い&lt;/li>
&lt;/ul>
&lt;p>求職者の情報を匿名化する背景は、企業が直接交渉するのを避けるためなのかな？求人プラットフォームごとに情報入力しないといけないのが面倒なところ。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>7章トランザクションのうち、7.1と7.2を読んだ。トランザクションの章は内容も難しく量も多いので2日にかけて読むことにする。昔、業務アプリケーションやグループウェアを開発していたときはトランザクションを意識してコードを書いていたけど、Web アプリケーションを開発していると、あまりクリティカルな処理を実装することが少ないせいか、トランザクションをそんな意識しなくなったなと漠然と思えた。Cassandra だとトランザクションもないし。非同期 + 結果整合性で運用できるアプリケーションであればトランザクションいらないというのはそうなのかもしれない。&lt;/p></content></item><item><title>豆苗再生</title><link>/diary/posts/2021/1017/</link><pubDate>Sun, 17 Oct 2021 13:54:30 +0900</pubDate><guid>/diary/posts/2021/1017/</guid><description>3時に寝て8時半に起きた。夜眠れなくて、野菜サラダに目玉焼きをのせて食べたり、お茶をわかしてボトルに入れ替えたりしてた。休日だと時間に余裕があるせいか、空き時間に自炊してなにか作ることが多い。
豆苗の再生栽培 朝ご飯は野菜サラダと納豆を、お昼ご飯は豚肉としめじと2回目の豆苗を炒めたものを目玉焼きでとじたものを食べた。豆苗のパッケージに食べた後の根を水に浸しておけばまた生えてくるとあったので試しにやってみた。キッチンという日当たりのよくない場所で育てたせいか、薄い緑色の苗が生えてきた。
水に浸して2日目
水に浸して6日目
今回は適当に育てた。再生栽培のコツ を読んで次はもうちょっとちゃんと育ててみよう。
データ指向アプリケーションデザイン 6章パーティショニングを読んだ。昔からパーティショニングとシャーディングの違いはなんだろう？と漠然と思っていた。パーティションの設計 を読むと、3つのパーティション分割があげられている。
水平的パーティション分割 (シャーディング) 列方向のパーティション分割 機能的パーティション分割 パーティショニングは大規模なデータセットをデータ分割するための手法または概念として広い意味をもって使われるように読める。一方でシャーディングと呼ばれるものは水平パーティショニングのことを指している。いま分散データベースで一般的に使われている仕組みがそうなのかもしれない。本書では水平・垂直のパーティショニングの定義は行われていないが、次の説明が出てくる。おそらく主に水平パーティショニングを意図しているのではないかと思う。まとめはこんな感じ。
用語の混乱
ここで パーティション と呼んでいるものは、 MongoDB 、 Elasticsearch 、 SolrCloud では シャード と呼ばれています。これは HBase では リージョン 、 Bigtable では タブレット 、Cassandra や Riak では vnode 、 Couchbase では vBucket と呼ばれています。とはいえ最も確立されている用語は パーティショニング なので、本書ではこの呼び方を使っていきます。
パーティショニングも普通に開発をしていたらデータベースの設計で必要になるので身近な概念と言える。だいたいは知っている内容ではあったけど、パーティショニングとセカンダリインデックスの仕組みとか考えたことがなかった。Cassandra ではセカンダリインデックスをうまく設計しないとパフォーマンスに影響を与えることからあまり使われない傾向にあると思う。
大規模なデータセットを小さな部分集合にデータ分割することをパーティショニングと呼ぶ。パーティショニングが必要になるのは、単一のマシンで保存や処理をするのが現実的ではないほどのデータがある場合になる。パーティショニングが目標とするのは、データやクエリの負荷を複数のマシン間で均等に分配し、ホットスポット（不均衡に高い負荷がかかるノード）が生じないようにすること。パーティショニングが均等になっておらず、一部のパーティションが他に比べて多くのデータやクエリを受け持っているような状態は スキュー（skew） と呼ばれる。そのためには、データに適したパーティショニングのスキームを選択し、クラスタへのノードの追加やクラスタからのノードの削除が生じたときにパーティション群をリバランシングする。
パーティショニングのアプローチとして主に2つがある。
キーの範囲によるパーティショニング キーはソートされ、1つのパーティションには何らかの最小値と最大値の間にあるすべてのキーが保存される キーをソートすることで、範囲に対するクエリが効率的に処理できるというメリットがある アプリケーションが頻繁にアクセスするキーがソート順の中で近接していると、ホットスポットが生じるリスクがある 通常このアプローチでは、パーティションのリバランシングはパーティションが大きくなりすぎたときにその範囲を2つに分割することによって動的に行われる ハッシュパーティショニング ハッシュ関数がそれぞれのキーに対して適用され、1つのパーティションにはハッシュの一定の範囲を保存される この方法ではキーの順序が失われるので範囲に対するクエリは非効率になるが、負荷分散より均等にしやすい ハッシュによってパーティショニングを行う場合は、事前に固定数のパーティションを作成し、各ノードに複数のパーティションを割り当てておき、ノードの追加や削除が行われた場合にはパーティションをそのままあるノードから他のノードに移動させるのが一般的となる。また、動的パーティショニングも利用できる ハイブリッドなアプローチを取ることもできる。たとえば複合キーを使い、キーの一部でパーティションを決め、他の部分でソート順を決めるといったやり方がある。Cassandra のプライマリーキーはこのアプローチを採用している。また、セカンダリインデックスもパーティショニングする方法が2つある。
ドキュメントによってパーティショニングされたインデックス（ローカルインデックス） セカンダリインデックスをプライマリキー及び値と同じパーティションに保存する 書き込みの際に更新しなければならないパーティションが1つですむ セカンダリインデックスの読み取りにはすべてのパーティションに対する スキャッタ/ギャザー が必要となる 語によってパーティショニングされたインデックス（グローバルインデックス） セカンダリインデックスはインデックスが張られた値を使って独立にパーティショニングされる セカンダリインデックスのエントリには、プライマリキーのあらゆるパーティションのレコード群が含まれる ドキュメントが書き込まれる際には、セカンダリインデックスの複数のパーティションを更新しなければならない 読み取りは単一のパーティションだけで処理できる クエリを適切なパーティションにルーティングする手法は、データベースに限った話題ではなく、サービスディスカバリ と呼ばれる一般的な問題である。有名な OSS として ZooKeeper がある。これにはシンプルなパーティションを認識するロードバランシングから、洗練された並列クエリ実行エンジンまで様々である。すべてのパーティションは、ほぼ独立に動作できるように設計されている。パーティショニングされたデータベースが複数のマシンにまでスケールできるのはそのおかげである。</description><content>&lt;p>3時に寝て8時半に起きた。夜眠れなくて、野菜サラダに目玉焼きをのせて食べたり、お茶をわかしてボトルに入れ替えたりしてた。休日だと時間に余裕があるせいか、空き時間に自炊してなにか作ることが多い。&lt;/p>
&lt;h2 id="豆苗の再生栽培">豆苗の再生栽培&lt;/h2>
&lt;p>朝ご飯は野菜サラダと納豆を、お昼ご飯は豚肉としめじと2回目の豆苗を炒めたものを目玉焼きでとじたものを食べた。豆苗のパッケージに食べた後の根を水に浸しておけばまた生えてくるとあったので試しにやってみた。キッチンという日当たりのよくない場所で育てたせいか、薄い緑色の苗が生えてきた。&lt;/p>
&lt;p>&lt;figure>&lt;img src="/diary/diary/img/2021/1017_pea-sprout1.jpg"
alt="水に浸して2日目"/>&lt;figcaption>
&lt;p>水に浸して2日目&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;figure>&lt;img src="/diary/diary/img/2021/1017_pea-sprout2.jpg"
alt="水に浸して6日目"/>&lt;figcaption>
&lt;p>水に浸して6日目&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>今回は適当に育てた。&lt;a href="https://www.murakamifarm.com/myouken/grow/technique/#where">再生栽培のコツ&lt;/a> を読んで次はもうちょっとちゃんと育ててみよう。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>6章パーティショニングを読んだ。昔からパーティショニングとシャーディングの違いはなんだろう？と漠然と思っていた。&lt;a href="https://docs.microsoft.com/ja-jp/azure/architecture/best-practices/data-partitioning#designing-partitions">パーティションの設計&lt;/a> を読むと、3つのパーティション分割があげられている。&lt;/p>
&lt;ul>
&lt;li>水平的パーティション分割 (シャーディング)&lt;/li>
&lt;li>列方向のパーティション分割&lt;/li>
&lt;li>機能的パーティション分割&lt;/li>
&lt;/ul>
&lt;p>パーティショニングは大規模なデータセットをデータ分割するための手法または概念として広い意味をもって使われるように読める。一方でシャーディングと呼ばれるものは水平パーティショニングのことを指している。いま分散データベースで一般的に使われている仕組みがそうなのかもしれない。本書では水平・垂直のパーティショニングの定義は行われていないが、次の説明が出てくる。おそらく主に水平パーティショニングを意図しているのではないかと思う。まとめはこんな感じ。&lt;/p>
&lt;blockquote>
&lt;p>用語の混乱&lt;/p>
&lt;p>ここで パーティション と呼んでいるものは、 MongoDB 、 Elasticsearch 、 SolrCloud では &lt;strong>シャード&lt;/strong> と呼ばれています。これは HBase では &lt;strong>リージョン&lt;/strong> 、 Bigtable では &lt;strong>タブレット&lt;/strong> 、Cassandra や Riak では &lt;strong>vnode&lt;/strong> 、 Couchbase では &lt;strong>vBucket&lt;/strong> と呼ばれています。とはいえ最も確立されている用語は &lt;strong>パーティショニング&lt;/strong> なので、本書ではこの呼び方を使っていきます。&lt;/p>
&lt;/blockquote>
&lt;p>パーティショニングも普通に開発をしていたらデータベースの設計で必要になるので身近な概念と言える。だいたいは知っている内容ではあったけど、パーティショニングとセカンダリインデックスの仕組みとか考えたことがなかった。Cassandra ではセカンダリインデックスをうまく設計しないとパフォーマンスに影響を与えることからあまり使われない傾向にあると思う。&lt;/p>
&lt;blockquote>
&lt;p>大規模なデータセットを小さな部分集合にデータ分割することをパーティショニングと呼ぶ。パーティショニングが必要になるのは、単一のマシンで保存や処理をするのが現実的ではないほどのデータがある場合になる。パーティショニングが目標とするのは、データやクエリの負荷を複数のマシン間で均等に分配し、&lt;strong>ホットスポット&lt;/strong>（不均衡に高い負荷がかかるノード）が生じないようにすること。パーティショニングが均等になっておらず、一部のパーティションが他に比べて多くのデータやクエリを受け持っているような状態は &lt;strong>スキュー（skew）&lt;/strong> と呼ばれる。そのためには、データに適したパーティショニングのスキームを選択し、クラスタへのノードの追加やクラスタからのノードの削除が生じたときにパーティション群をリバランシングする。&lt;/p>
&lt;p>パーティショニングのアプローチとして主に2つがある。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>キーの範囲によるパーティショニング&lt;/strong>
&lt;ul>
&lt;li>キーはソートされ、1つのパーティションには何らかの最小値と最大値の間にあるすべてのキーが保存される&lt;/li>
&lt;li>キーをソートすることで、範囲に対するクエリが効率的に処理できるというメリットがある&lt;/li>
&lt;li>アプリケーションが頻繁にアクセスするキーがソート順の中で近接していると、ホットスポットが生じるリスクがある&lt;/li>
&lt;li>通常このアプローチでは、パーティションのリバランシングはパーティションが大きくなりすぎたときにその範囲を2つに分割することによって動的に行われる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>ハッシュパーティショニング&lt;/strong>
&lt;ul>
&lt;li>ハッシュ関数がそれぞれのキーに対して適用され、1つのパーティションにはハッシュの一定の範囲を保存される&lt;/li>
&lt;li>この方法ではキーの順序が失われるので範囲に対するクエリは非効率になるが、負荷分散より均等にしやすい&lt;/li>
&lt;li>ハッシュによってパーティショニングを行う場合は、事前に固定数のパーティションを作成し、各ノードに複数のパーティションを割り当てておき、ノードの追加や削除が行われた場合にはパーティションをそのままあるノードから他のノードに移動させるのが一般的となる。また、動的パーティショニングも利用できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>ハイブリッドなアプローチを取ることもできる。たとえば複合キーを使い、キーの一部でパーティションを決め、他の部分でソート順を決めるといったやり方がある。Cassandra のプライマリーキーはこのアプローチを採用している。また、セカンダリインデックスもパーティショニングする方法が2つある。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ドキュメントによってパーティショニングされたインデックス（ローカルインデックス）&lt;/strong>
&lt;ul>
&lt;li>セカンダリインデックスをプライマリキー及び値と同じパーティションに保存する&lt;/li>
&lt;li>書き込みの際に更新しなければならないパーティションが1つですむ&lt;/li>
&lt;li>セカンダリインデックスの読み取りにはすべてのパーティションに対する &lt;strong>スキャッタ/ギャザー&lt;/strong> が必要となる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>語によってパーティショニングされたインデックス（グローバルインデックス）&lt;/strong>
&lt;ul>
&lt;li>セカンダリインデックスはインデックスが張られた値を使って独立にパーティショニングされる&lt;/li>
&lt;li>セカンダリインデックスのエントリには、プライマリキーのあらゆるパーティションのレコード群が含まれる&lt;/li>
&lt;li>ドキュメントが書き込まれる際には、セカンダリインデックスの複数のパーティションを更新しなければならない&lt;/li>
&lt;li>読み取りは単一のパーティションだけで処理できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>クエリを適切なパーティションにルーティングする手法は、データベースに限った話題ではなく、&lt;strong>サービスディスカバリ&lt;/strong> と呼ばれる一般的な問題である。有名な OSS として &lt;a href="https://zookeeper.apache.org/">ZooKeeper&lt;/a> がある。これにはシンプルなパーティションを認識するロードバランシングから、洗練された並列クエリ実行エンジンまで様々である。すべてのパーティションは、ほぼ独立に動作できるように設計されている。パーティショニングされたデータベースが複数のマシンにまでスケールできるのはそのおかげである。&lt;/p>
&lt;/blockquote></content></item><item><title>日本酒いただきもの</title><link>/diary/posts/2021/1015/</link><pubDate>Fri, 15 Oct 2021 09:39:41 +0900</pubDate><guid>/diary/posts/2021/1015/</guid><description>0時に寝て6時に起きた。だいたい夜中に2-3回は起きるのが普通になりつつあって、前日ジョギングしてたせいか腰やお尻の筋肉に張りがあったので3時頃起きてストレッチして張りの箇所を伸ばしたりしながら寝てた。午前中、いけさんから上等なお酒をいただいた。造り酒屋の一族らしい。感謝。
朝活 朝起きる目的にいいかも？と思って Webデザイントレンドのよりみち の金朝つめとぎに参加してみた。やっぱり目的があれば6時に起きれる。でも、終わってから1時間ほど寝てたので今日はプラスマイナスゼロ。前回の朝活 と同様、ミクロ経済学の入門書を読んでた。第2章の予算線と最適化を読んだ。経済学とはこういうものだという説明が腑におちた。当たるかどうかよりも考え方を理解しておく方が大事なように思えた。
ときどき経済学に対して「経済学が想定するほど実際の消費者は懸命に選択しているとは限らない」といった批判がなされることがある。でもこれまでの説明から明らかなように、その批判は勘違いにもとづくものだ。批判したいなら「経済学は、消費者がはたから見て確実に愚かな選択をしても、それを非難しない傾向が強い」というほうが適切だろう。
もう1つおもしろかったのがこの一節。
予算線と選好を用いたミクロ経済学的分析は、現金給付のよさを指摘する。ただし、制度の悪用、人々の支持、必要原理といったことを考えると、現物給付のほうが好ましいとなる。現金給付と現物給付のどちらが総合的によいのか、これらの話だけで結論づけることはできない。とはいえここで、ミクロ経済学が有用な政策分析ツールたりえること、またミクロ経済学だけで政策を論じるのは不十分ということが分かったのは十分な収穫である。
人間の活動を予測するような学問の便宜上、前提条件や制約を課している。経済という人間にとって重要な社会システムを扱う経済学への期待値が大き過ぎるがために経済学の言うことが当たった・当たってないといった議論になりがちなのかもしれないと思えた。
データ指向アプリケーションデザイン 5章レプリケーションを読んだ。200ページ超えたことで1/3を読み終えた。まだまだ先は長い。
シングルリーダーレプリケーションは一般的なものだし、Cassandra の運用をしていたのでリーダーレスレプリケーションもだいたいは知っていた。並行書き込みの問題は意識したことがなかった。そういう状況が発生するアプリケーションにおいてはとても難しい問題なことが理解できた。Cassandra で採用されている衝突解決アルゴリズムは 最後の書き込みを勝たせる（last write wins、LWW） というものであり、これで十分なように考えていたけど、不十分なケースもあることがわかった。
レプリケーションとは、ネットワークで接続された複数のマシンに同じデータのコピーを保持しておくこと。
データを地理的にユーザーの近くで保持しておく =&amp;gt; レイテンシを下げる 一部に障害があってもシステムが動作し続けられる =&amp;gt; 可用性を高める 読み取りクエリを処理するマシンをスケールアウトする =&amp;gt; スループットを高める レプリケーションはいくつかの目的で使われる。
高可用性/耐障害性 レイテンシ スケーラビリティ 対象のデータが時間が経っても変化しないのであれば、レプリケーションは容易。単にデータのコピーを各ノードに一度だけコピーすれば完了するから。レプリケーションの難しさは、すべてレプリケーションされたデータへの変更の扱いから生じる。変更をノード間でレプリケーションするのに広く使われているアルゴリズムは次の3つになる。
シングルリーダーレプリケーション クライアントはすべての書き込みを1つのノード（リーダー）に送り、リーダーはデータ変更イベントのストリームを他のレプリカ（フォロワー）に送る 読み取りは任意のレプリカから行えるが、フォロワーから読み取るデータは古い可能性がある マルチリーダーレプリケーション クライアント群は、それぞれの書き込みを複数あるリーダーノードのいずれかに送信する これらのリーダーノードはどれも書き込みを受け付ける リーダー群は、データ変更イベントのストリームをお互いに、そしてすべてのフォロワーノードに送信する リーダーレスレプリケーション クライアントは、それぞれの書き込みを複数のノードに送信し、古いデータを持つノードを修正するために読み取りを複数のノードから並列に行う データベースのレプリケーションの原理は1970年代から研究されていてそれほど変わっていない。とはいえ、分散データベースがメインストリームで利用されるようになったのは最近のこと。アプリケーション開発者の経験不足により 結果整合性 のような問題に関しては多くの誤解が生じた。いずれのレプリケーションのアプローチにもメリットとデメリットがある。シングルリーダーレプリケーションは理解しやすく、衝突解決を気にする必要がないことから、広く使われている。マルチリーダーとリーダーレスのレプリケーションは、ノードの障害、ネットワークの障害、レイテンシのスパイクがあっても頑健になる。しかし障害の理由を説明するのが難しく、一貫性についても弱い保証しか示せない。
レプリケーションは、 同期 で行うことも 非同期 で行うこともできる。どちらにするのかは、障害があったときのシステムの振る舞いに大きく影響する。非同期のレプリケーションは、システムがスムーズに動作しているときには高速に動作するが、重要なのはレプリケーションのラグが大きくなったり、サーバーに障害が生じたりしたときに何が起こるのかを理解しておくことになる。リーダーに障害が発生し、非同期に更新されていたフォロワーを新しいリーダーに昇格させたら、直前にコミットされたデータは失われてしまう可能性がある。
レプリケーションラグが生じている状況下でアプリケーションがどのように振る舞うべきなのかを決める際に役立つ一貫性モデル。
書き込み後読み取り (read-your-writes) ユーザーは、自分自身が投入したデータを常に見れる モノトニック読み取り (monotonic reads) ある時点のデータをユーザーが一度見たら、それ以前の時点のデータは見れない 一貫性のあるプレフィックス読み取り ユーザーは、たとえば質問とその質問への回答を適切な順序でといったように、適切な因果関係を保持した状態でデータを見れる マルチリーダーとリーダーレスのアプローチは本質的に並行性の問題を抱えている。複数の書き込みが並列に行われることがあるので、衝突が生じる場合がある。ある操作が他の操作よりも先に行われたのか、あるいはそれらが並行して行われたかを判断するためのアルゴリズムについて説明されている。
Slack apps の調査 Workstreams.ai を試してみた。
Results-driven task management for Slack, Microsoft Teams and Google</description><content>&lt;p>0時に寝て6時に起きた。だいたい夜中に2-3回は起きるのが普通になりつつあって、前日ジョギングしてたせいか腰やお尻の筋肉に張りがあったので3時頃起きてストレッチして張りの箇所を伸ばしたりしながら寝てた。午前中、いけさんから上等なお酒をいただいた。造り酒屋の一族らしい。感謝。&lt;/p>
&lt;h2 id="朝活">朝活&lt;/h2>
&lt;p>朝起きる目的にいいかも？と思って &lt;a href="https://www.youtube.com/channel/UC1rVx0vAg66su1WvH3X-RJg">Webデザイントレンドのよりみち&lt;/a> の金朝つめとぎに参加してみた。やっぱり目的があれば6時に起きれる。でも、終わってから1時間ほど寝てたので今日はプラスマイナスゼロ。&lt;a href="/diary/diary/posts/2021/1013/#朝活">前回の朝活&lt;/a> と同様、ミクロ経済学の入門書を読んでた。第2章の予算線と最適化を読んだ。経済学とはこういうものだという説明が腑におちた。当たるかどうかよりも考え方を理解しておく方が大事なように思えた。&lt;/p>
&lt;blockquote>
&lt;p>ときどき経済学に対して「経済学が想定するほど実際の消費者は懸命に選択しているとは限らない」といった批判がなされることがある。でもこれまでの説明から明らかなように、その批判は勘違いにもとづくものだ。批判したいなら「経済学は、消費者がはたから見て確実に愚かな選択をしても、それを非難しない傾向が強い」というほうが適切だろう。&lt;/p>
&lt;/blockquote>
&lt;p>もう1つおもしろかったのがこの一節。&lt;/p>
&lt;blockquote>
&lt;p>予算線と選好を用いたミクロ経済学的分析は、現金給付のよさを指摘する。ただし、制度の悪用、人々の支持、必要原理といったことを考えると、現物給付のほうが好ましいとなる。現金給付と現物給付のどちらが総合的によいのか、これらの話だけで結論づけることはできない。とはいえここで、ミクロ経済学が有用な政策分析ツールたりえること、またミクロ経済学だけで政策を論じるのは不十分ということが分かったのは十分な収穫である。&lt;/p>
&lt;/blockquote>
&lt;p>人間の活動を予測するような学問の便宜上、前提条件や制約を課している。経済という人間にとって重要な社会システムを扱う経済学への期待値が大き過ぎるがために経済学の言うことが当たった・当たってないといった議論になりがちなのかもしれないと思えた。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>5章レプリケーションを読んだ。200ページ超えたことで1/3を読み終えた。まだまだ先は長い。&lt;/p>
&lt;p>シングルリーダーレプリケーションは一般的なものだし、Cassandra の運用をしていたのでリーダーレスレプリケーションもだいたいは知っていた。並行書き込みの問題は意識したことがなかった。そういう状況が発生するアプリケーションにおいてはとても難しい問題なことが理解できた。Cassandra で採用されている衝突解決アルゴリズムは &lt;strong>最後の書き込みを勝たせる（last write wins、LWW）&lt;/strong> というものであり、これで十分なように考えていたけど、不十分なケースもあることがわかった。&lt;/p>
&lt;blockquote>
&lt;p>レプリケーションとは、ネットワークで接続された複数のマシンに同じデータのコピーを保持しておくこと。&lt;/p>
&lt;ul>
&lt;li>データを地理的にユーザーの近くで保持しておく =&amp;gt; レイテンシを下げる&lt;/li>
&lt;li>一部に障害があってもシステムが動作し続けられる =&amp;gt; 可用性を高める&lt;/li>
&lt;li>読み取りクエリを処理するマシンをスケールアウトする =&amp;gt; スループットを高める&lt;/li>
&lt;/ul>
&lt;p>レプリケーションはいくつかの目的で使われる。&lt;/p>
&lt;ul>
&lt;li>高可用性/耐障害性&lt;/li>
&lt;li>レイテンシ&lt;/li>
&lt;li>スケーラビリティ&lt;/li>
&lt;/ul>
&lt;p>対象のデータが時間が経っても変化しないのであれば、レプリケーションは容易。単にデータのコピーを各ノードに一度だけコピーすれば完了するから。レプリケーションの難しさは、すべてレプリケーションされたデータへの変更の扱いから生じる。変更をノード間でレプリケーションするのに広く使われているアルゴリズムは次の3つになる。&lt;/p>
&lt;ul>
&lt;li>シングルリーダーレプリケーション
&lt;ul>
&lt;li>クライアントはすべての書き込みを1つのノード（リーダー）に送り、リーダーはデータ変更イベントのストリームを他のレプリカ（フォロワー）に送る&lt;/li>
&lt;li>読み取りは任意のレプリカから行えるが、フォロワーから読み取るデータは古い可能性がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>マルチリーダーレプリケーション
&lt;ul>
&lt;li>クライアント群は、それぞれの書き込みを複数あるリーダーノードのいずれかに送信する&lt;/li>
&lt;li>これらのリーダーノードはどれも書き込みを受け付ける&lt;/li>
&lt;li>リーダー群は、データ変更イベントのストリームをお互いに、そしてすべてのフォロワーノードに送信する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>リーダーレスレプリケーション
&lt;ul>
&lt;li>クライアントは、それぞれの書き込みを複数のノードに送信し、古いデータを持つノードを修正するために読み取りを複数のノードから並列に行う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>データベースのレプリケーションの原理は1970年代から研究されていてそれほど変わっていない。とはいえ、分散データベースがメインストリームで利用されるようになったのは最近のこと。アプリケーション開発者の経験不足により &lt;strong>結果整合性&lt;/strong> のような問題に関しては多くの誤解が生じた。いずれのレプリケーションのアプローチにもメリットとデメリットがある。シングルリーダーレプリケーションは理解しやすく、衝突解決を気にする必要がないことから、広く使われている。マルチリーダーとリーダーレスのレプリケーションは、ノードの障害、ネットワークの障害、レイテンシのスパイクがあっても頑健になる。しかし障害の理由を説明するのが難しく、一貫性についても弱い保証しか示せない。&lt;/p>
&lt;p>レプリケーションは、 &lt;strong>同期&lt;/strong> で行うことも &lt;strong>非同期&lt;/strong> で行うこともできる。どちらにするのかは、障害があったときのシステムの振る舞いに大きく影響する。非同期のレプリケーションは、システムがスムーズに動作しているときには高速に動作するが、重要なのはレプリケーションのラグが大きくなったり、サーバーに障害が生じたりしたときに何が起こるのかを理解しておくことになる。リーダーに障害が発生し、非同期に更新されていたフォロワーを新しいリーダーに昇格させたら、直前にコミットされたデータは失われてしまう可能性がある。&lt;/p>
&lt;p>レプリケーションラグが生じている状況下でアプリケーションがどのように振る舞うべきなのかを決める際に役立つ一貫性モデル。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>書き込み後読み取り (read-your-writes)&lt;/strong>
&lt;ul>
&lt;li>ユーザーは、自分自身が投入したデータを常に見れる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>モノトニック読み取り (monotonic reads)&lt;/strong>
&lt;ul>
&lt;li>ある時点のデータをユーザーが一度見たら、それ以前の時点のデータは見れない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>一貫性のあるプレフィックス読み取り&lt;/strong>
&lt;ul>
&lt;li>ユーザーは、たとえば質問とその質問への回答を適切な順序でといったように、適切な因果関係を保持した状態でデータを見れる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>マルチリーダーとリーダーレスのアプローチは本質的に並行性の問題を抱えている。複数の書き込みが並列に行われることがあるので、衝突が生じる場合がある。ある操作が他の操作よりも先に行われたのか、あるいはそれらが並行して行われたかを判断するためのアルゴリズムについて説明されている。&lt;/p>
&lt;/blockquote>
&lt;h2 id="slack-apps-の調査">Slack apps の調査&lt;/h2>
&lt;p>&lt;a href="https://www.instagram.com/workstreams.ai/">Workstreams.ai&lt;/a> を試してみた。&lt;/p>
&lt;blockquote>
&lt;p>Results-driven task management for Slack, Microsoft Teams and Google&lt;/p>
&lt;/blockquote>
&lt;p>結果駆動タスクマネジメントという聞いたことない用語が書いてある。SaaS 型の Web アプリケーションとしての課題管理システムとチャットツールとの連携が密になったプロダクトにみえる。UI もよく作り込まれている。Workstreams.ai のアカウント管理は &lt;a href="https://api.slack.com/authentication/sign-in-with-slack">Sign in with Slack&lt;/a> を使っている。ドキュメントによると openid connect と oauth 2.0 の仕組みを組み合わせているのかな。認証よくわかってないので背景も勉強しないといけない。簡単にタスク作成やコメント、更新などを Slack クライアントと Web アプリケーション上で触ってみた。&lt;/p>
&lt;p>もう1つ &lt;a href="https://slack.com/app-pages/google-sheets">Google Sheets for Workflow Builder&lt;/a> というのも試してみた。ワークフロービルダーのステップに簡単に Google Sheet との連携を実装できるのでめっちゃ簡単。ワークフロービルダーは本当によくできているな。&lt;/p>
&lt;h2 id="ジョギング">ジョギング&lt;/h2>
&lt;p>今日は調子はよかったけど、お仕事の区切りがよかったので19時に終えて近所の公園にジョギングしてきた。昨日も走ってたのでやや筋肉痛が残りつつ、走り始めは筋肉がきしむ感じだったけど、走っているうちに体があたたまってきて気にならなくなった。時間帯は同じだけど、昨日より陸上部の人たちが半分ぐらい少なかった。曜日によって違うのかなぁ。&lt;/p></content></item><item><title>霖</title><link>/diary/posts/2021/1014/</link><pubDate>Thu, 14 Oct 2021 08:31:32 +0900</pubDate><guid>/diary/posts/2021/1014/</guid><description>0時過ぎに寝て7時に起きた。けれど、なんかしんどくて起き上がれなくてそのまま2度寝した。1時間ほど寝たらすぐに起きれた。あのしんどさは何だったのか。とはいえ、気付いたら8時半にはオフィスにいたので普段の仕事始めと変わらない見た目になった。お昼に体温を測っていたら37.1℃になってたので熱っぽい雰囲気。日中は特にしんどくはないんだけど。
データ指向アプリケーションデザイン 4章エンコーディングと進化を読んだ。だんだん内容が難しくなってきて読むのに時間がかかる。これで第一部のデータシステムの基礎を読了した。4章のまとめ。
データシステムの変更のしやすさ、アジリティのことを本書では 進化性 を呼んでいる。
進化性を高めるには、システムのバージョンアップが容易にできなくてはならない。このとき、サーバーサイドアプリケーションは、大抵の場合、一度にすべてのノードをのバージョンアップができないことから、 ローリングアップグレード という手法を用いる。ローリングアップグレードを可能にするには、データフォーマットやスキーマの変更に対して、新旧どちらのフォーマットも、新旧どちらのコードからも扱えないといけない。データフォーマットやスキーマの 前方/後方互換性 を維持することが進化性を高めることに大きく影響する。
メモリを共有していないプロセス間でデータを渡すとき、そのデータをバイト列へエンコードしないといけない。通常プログラムはデータを (少なくとも) 2つの異なる表現で扱う。
CPU によるアクセスや操作が効率的になるよう最適化されてメモリ内で表現される ファイルやネットワーク経由でデータをやり取りするにはバイト列にエンコードしないといけない
この表現はメモリ内のデータ構造とはまったく異なる この2つの表現の間で何らかの変換が必要になる。インメモリの表現からバイトの並びへの変換は エンコーディング (シリアライゼーション、マーシャリングとも呼ぶ) 、その逆は デコーディング (パース、デシリアライぜーション、アンマーシャリングとも呼ぶ) と呼ぶ。
データエンコーディングフォーマットと、それらの互換性に関する特性。
プログラミング言語固有のエンコーディングは1つのプログラミング言語に限定され、しばしば前方及び後方互換性を欠く JSON, XML, CSV といったテキストフォーマットは広く利用されており、その互換性は利用の方法に依存する オプションのスキーマ言語はあるが、それらは助けになることもあればむしろ障害になることもある これらのフォーマットはデータ型について多少の曖昧さがあるので、数値やバイナリ文字列などについては注意が必要 thrift, protocol buﬀers, aro といったスキーマを持つバイナリフォーマットではコンパクトで効率的なエンコーディングが可能であり、前方及び後方互換性のセマンティクスも明確に定義されている これらのスキーマは、ドキュメンテーションと静的型付き言語でのコード生成に役立つ ただし、バイナリフォーマットにはデコードしなければ人にはデータが読めないという欠点もある データフローの形態とエンコーディング。
データベースでは、データベースへの書き込みを行うプロセスがデータをエンコードし、データベースからの読み取りを行うプロセスがそのデータをデコードする RPC と REST API では、クライアントがリクエストをエンコードし、サーバーはそのリクエストをデコードしてレスポンスをエンコードする。そして最後にクライアントがレスポンスをデコードする 非同期のメッセージパッシング（メッセージブローカーあるいはアクター）では、ノードはお互いにメッセージを送信することによって通信し、送信側がメッセージをエンコードし、受信側がそのメッセージをデコードする kafka などを使ったイベント駆動アーキテクチャはこの形態になる 多少の注意を払うことで前方/後方互換性やローリングアップグレードは十分に実現可能となる。
霖 (ながめ) プロダクトの名前を考えるために万葉集を眺めてた。ふとみつけた 霖 ということばを気に入った。一文字だと「ながめ」または「ながあめ」と読む。霖雨と書くと「りんう」と読むらしい。万葉集では次の和歌で詠まれている。和歌では「長雨」と「眺め」をかけて使うのが常套句らしい。また古文でいうところの眺めはぼんやり見ながら物思いに耽るという意味になるそうだ。
4217 卯(う)の花を　腐(くた)す霖雨(ながめ)の　始水(みずはな)に　寄るこつみなす　寄らむ児(こ)もがも　大伴家持
(現代語訳) 卯の花を腐らせるほどに痛めつける長雨、この雨のせいで流れ出す大水の鼻先に寄りつく木っ端のように、私に寄り添ってくれる娘でもいてくれたらなあ
新版　万葉集　四　現代語訳付き
この季節の長雨には「卯の花腐し」という別名があります。画像は改元でも話題となった『万葉集』より「卯の花を腐す霖雨の…」という大伴家持の和歌。初夏の卯の花が枯れてしまうような長雨の表現です。詳しくは7月から始まる企画展「雨に詠えば―空模様の古典文学―」にて！ https://t.</description><content>&lt;p>0時過ぎに寝て7時に起きた。けれど、なんかしんどくて起き上がれなくてそのまま2度寝した。1時間ほど寝たらすぐに起きれた。あのしんどさは何だったのか。とはいえ、気付いたら8時半にはオフィスにいたので普段の仕事始めと変わらない見た目になった。お昼に体温を測っていたら37.1℃になってたので熱っぽい雰囲気。日中は特にしんどくはないんだけど。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>4章エンコーディングと進化を読んだ。だんだん内容が難しくなってきて読むのに時間がかかる。これで第一部のデータシステムの基礎を読了した。4章のまとめ。&lt;/p>
&lt;blockquote>
&lt;p>データシステムの変更のしやすさ、アジリティのことを本書では &lt;strong>進化性&lt;/strong> を呼んでいる。&lt;/p>
&lt;p>進化性を高めるには、システムのバージョンアップが容易にできなくてはならない。このとき、サーバーサイドアプリケーションは、大抵の場合、一度にすべてのノードをのバージョンアップができないことから、 &lt;strong>ローリングアップグレード&lt;/strong> という手法を用いる。ローリングアップグレードを可能にするには、データフォーマットやスキーマの変更に対して、新旧どちらのフォーマットも、新旧どちらのコードからも扱えないといけない。データフォーマットやスキーマの &lt;strong>前方/後方互換性&lt;/strong> を維持することが進化性を高めることに大きく影響する。&lt;/p>
&lt;p>メモリを共有していないプロセス間でデータを渡すとき、そのデータをバイト列へエンコードしないといけない。通常プログラムはデータを (少なくとも) 2つの異なる表現で扱う。&lt;/p>
&lt;ol>
&lt;li>CPU によるアクセスや操作が効率的になるよう最適化されてメモリ内で表現される&lt;/li>
&lt;li>ファイルやネットワーク経由でデータをやり取りするにはバイト列にエンコードしないといけない&lt;br>
この表現はメモリ内のデータ構造とはまったく異なる&lt;/li>
&lt;/ol>
&lt;p>この2つの表現の間で何らかの変換が必要になる。インメモリの表現からバイトの並びへの変換は &lt;strong>エンコーディング&lt;/strong> (シリアライゼーション、マーシャリングとも呼ぶ) 、その逆は &lt;strong>デコーディング&lt;/strong> (パース、デシリアライぜーション、アンマーシャリングとも呼ぶ) と呼ぶ。&lt;/p>
&lt;p>データエンコーディングフォーマットと、それらの互換性に関する特性。&lt;/p>
&lt;ul>
&lt;li>プログラミング言語固有のエンコーディングは1つのプログラミング言語に限定され、しばしば前方及び後方互換性を欠く&lt;/li>
&lt;li>JSON, XML, CSV といったテキストフォーマットは広く利用されており、その互換性は利用の方法に依存する
&lt;ul>
&lt;li>オプションのスキーマ言語はあるが、それらは助けになることもあればむしろ障害になることもある&lt;/li>
&lt;li>これらのフォーマットはデータ型について多少の曖昧さがあるので、数値やバイナリ文字列などについては注意が必要&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>thrift, protocol buﬀers, aro といったスキーマを持つバイナリフォーマットではコンパクトで効率的なエンコーディングが可能であり、前方及び後方互換性のセマンティクスも明確に定義されている
&lt;ul>
&lt;li>これらのスキーマは、ドキュメンテーションと静的型付き言語でのコード生成に役立つ&lt;/li>
&lt;li>ただし、バイナリフォーマットにはデコードしなければ人にはデータが読めないという欠点もある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>データフローの形態とエンコーディング。&lt;/p>
&lt;ul>
&lt;li>データベースでは、データベースへの書き込みを行うプロセスがデータをエンコードし、データベースからの読み取りを行うプロセスがそのデータをデコードする&lt;/li>
&lt;li>RPC と REST API では、クライアントがリクエストをエンコードし、サーバーはそのリクエストをデコードしてレスポンスをエンコードする。そして最後にクライアントがレスポンスをデコードする&lt;/li>
&lt;li>非同期のメッセージパッシング（メッセージブローカーあるいはアクター）では、ノードはお互いにメッセージを送信することによって通信し、送信側がメッセージをエンコードし、受信側がそのメッセージをデコードする
&lt;ul>
&lt;li>kafka などを使ったイベント駆動アーキテクチャはこの形態になる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>多少の注意を払うことで前方/後方互換性やローリングアップグレードは十分に実現可能となる。&lt;/p>
&lt;/blockquote>
&lt;h2 id="霖-ながめ">霖 (ながめ)&lt;/h2>
&lt;p>プロダクトの名前を考えるために万葉集を眺めてた。ふとみつけた &lt;strong>霖&lt;/strong> ということばを気に入った。一文字だと「ながめ」または「ながあめ」と読む。霖雨と書くと「りんう」と読むらしい。万葉集では次の和歌で詠まれている。和歌では「長雨」と「眺め」をかけて使うのが常套句らしい。また古文でいうところの眺めはぼんやり見ながら物思いに耽るという意味になるそうだ。&lt;/p>
&lt;blockquote>
&lt;p>4217 卯(う)の花を　腐(くた)す霖雨(ながめ)の　始水(みずはな)に　寄るこつみなす　寄らむ児(こ)もがも　大伴家持&lt;/p>
&lt;p>(現代語訳) 卯の花を腐らせるほどに痛めつける長雨、この雨のせいで流れ出す大水の鼻先に寄りつく木っ端のように、私に寄り添ってくれる娘でもいてくれたらなあ&lt;/p>
&lt;p>&lt;a href="https://www.kadokawa.co.jp/product/200803000453/">新版　万葉集　四　現代語訳付き&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">この季節の長雨には「卯の花腐し」という別名があります。画像は改元でも話題となった『万葉集』より「卯の花を腐す霖雨の…」という大伴家持の和歌。初夏の卯の花が枯れてしまうような長雨の表現です。詳しくは7月から始まる企画展「雨に詠えば―空模様の古典文学―」にて！ &lt;a href="https://t.co/ZyU1h8TyNv">https://t.co/ZyU1h8TyNv&lt;/a> &lt;a href="https://t.co/VaXKX0FGEI">pic.twitter.com/VaXKX0FGEI&lt;/a>&lt;/p>&amp;mdash; 国立公文書館 (@JPNatArchives) &lt;a href="https://twitter.com/JPNatArchives/status/1130805663444213760?ref_src=twsrc%5Etfw">May 21, 2019&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="ジョギング">ジョギング&lt;/h2>
&lt;p>あまり調子がよくなかったので19時にお仕事を終えて近所の公園にジョギングに行ってきた。ワクチンを接種してから運動を控えていたのでジョギングしたのは初めてかな。2-3日に1回ぐらいの頻度でジョギングしている。ワクチン接種した週はウォーキングに留め、次の週は実家で田んぼ仕事でバテてて、今週は初めて行ってきた。ちょっと早い時間帯だったせいか、2つの陸上部が練習していてやや人が多かった。400m級のトラックがあって陸上部の人たちが練習している。練習の邪魔にならないよう、トラックの内側を20-30分とぼとぼジョギングしている。疲れたら歩きながらなのでそんなに距離は走ってない。ジョギング終えてから30分ぐらいストレッチをした。&lt;/p></content></item><item><title>vimgrep 検索の嬉しさ</title><link>/diary/posts/2021/1013/</link><pubDate>Wed, 13 Oct 2021 09:02:46 +0900</pubDate><guid>/diary/posts/2021/1013/</guid><description>2時頃に寝て6時に起きる。普段、日記は vim で書いている。ちょっとした過去の日記の検索に vimgrep でこと足りるのが嬉しい。テキストで日記を書いていることの利点かな。夜に fin-pyコードリーディング会#4 に参加した。事前に hackmd に発表内容のメモを書いてた。いろんな発表者の視点があってコードリーディングのイベントはおもしろかった。
朝活 【三宮.dev オンライン】リモート朝活もくもく会 に参加してみた。何もなかったらだいたい7時頃に起きるのがなにか目的があると6時に起きれる。人体の不思議。せっかく起きたので 前に More Joel on Software を読んだとき に学生向けのアドバイスにあったミクロ経済学の勉強のためにその入門書を読み始めた。参加者が勉強会の常連ばかりだったので朝からわりと雑談してた。2人転職するという話で2人とも東京の会社でフルリモートワークで働くらしい。働き方が変わったなと感じる。その後、第1章の無差別曲線を読んだ。
YouTube 配信と集中力 あんちぽさんの 2021年10月9日 の日記でスライド作成の興がのらないので YouTube 配信しながらやったら集中できてよかったと書いてあったのでちょっと眺めてみた。なんかスライドの作成のやり方とか、自分と違うのかな？とか思いながらみたけど、やり方自体は普通だった。ただ集中できてよかったとあるので普段のやり方とは異なることをすることに意義があるのかな？とも思えた。試しに YouTube Live やってみようとしたら初期設定？に24時間かかるとのこと。代わりに kazam というスクリーンリコーダーの使い方を調べてた。勉強会で作業したログとかを録画しておいてなにかに使えたりするかもしれない。
データ指向アプリケーションデザイン 半日ほどかかって3章ストレージと抽出を読んだ。読みながら書いているので時間がかかる。今日はこれだけ。まとめはこんな感じ。
データベースのシステムには2つの用途があり、その特性やパフォーマンスを最適化するためにストレージエンジンやデータ構造が異なるもので運用されるようになってきた。
オンライントランザクション処理 (OLTP) 行指向、トランザクション処理 オンライン分析処理 (OLAP) 列指向、分析クエリ OLTP には2つの主要なストレージエンジンがある。
B ツリー 1970年代からあり、成熟していて且つ効率的なインデックスのデータ構造 LSM ツリー 比較的最近開発された、ディスク上でのランダムアクセスをシステム的にシーケンシャルアクセスに変換して、書き込みのスループットを高める手法。もとは Google の BigTable の論文？ OLAP の典型的なデータウェアハウスの高レベルでのアーキテクチャでは、大量の行をシーケンシャルにスキャンしなければならないクエリの場合、インデックスはあまり関係なく、データを非常にコンパクトにエンコードし、クエリがディスクから読まなければならないデータの量を最小限にとどめることが重要となる。この目標を達成するのに列指向のストレージが役立つ。
過去に Cassandra を使ったプロダクトの開発に関わっていたから B ツリーと LSM ツリーの概要は知っていて3章で書いてあることはだいたい理解できた。データウェアハウスに関しては、前にお手伝いしていた会社で普通のログを Amazon Athena で処理すると1時間とかかかって分析クエリが Parquet に変換すると数分で完了したりするのを目の当たりにしてた。分析処理で読み込むデータ量を削減する列指向の考え方は理解しておく必要がある。行指向のデータを列指向フォーマットである Parquet に変換する columnify のコードも読んだことがあったので内容のイメージはできるけど、実務経験が少ないと全体像がわかっておらず、本書を読みながら学び直ししてた。</description><content>&lt;p>2時頃に寝て6時に起きる。普段、日記は vim で書いている。ちょっとした過去の日記の検索に &lt;code>vimgrep&lt;/code> でこと足りるのが嬉しい。テキストで日記を書いていることの利点かな。夜に &lt;a href="https://fin-py.connpass.com/event/226933/">fin-pyコードリーディング会#4&lt;/a> に参加した。事前に &lt;a href="https://hackmd.io/bFBFaPbYS1Kqfc97HMlp7Q?view">hackmd&lt;/a> に発表内容のメモを書いてた。いろんな発表者の視点があってコードリーディングのイベントはおもしろかった。&lt;/p>
&lt;h2 id="朝活">朝活&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/227678/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> に参加してみた。何もなかったらだいたい7時頃に起きるのがなにか目的があると6時に起きれる。人体の不思議。せっかく起きたので &lt;a href="/diary/diary/posts/2021/0929/#joel-on-software">前に More Joel on Software を読んだとき&lt;/a> に学生向けのアドバイスにあったミクロ経済学の勉強のためにその入門書を読み始めた。参加者が勉強会の常連ばかりだったので朝からわりと雑談してた。2人転職するという話で2人とも東京の会社でフルリモートワークで働くらしい。働き方が変わったなと感じる。その後、第1章の無差別曲線を読んだ。&lt;/p>
&lt;h2 id="youtube-配信と集中力">YouTube 配信と集中力&lt;/h2>
&lt;p>あんちぽさんの &lt;a href="https://kentarokuribayashi.com/journal/2021/10/09/2021%e5%b9%b410%e6%9c%889%e6%97%a5">2021年10月9日&lt;/a> の日記でスライド作成の興がのらないので YouTube 配信しながらやったら集中できてよかったと書いてあったのでちょっと眺めてみた。なんかスライドの作成のやり方とか、自分と違うのかな？とか思いながらみたけど、やり方自体は普通だった。ただ集中できてよかったとあるので普段のやり方とは異なることをすることに意義があるのかな？とも思えた。試しに YouTube Live やってみようとしたら初期設定？に24時間かかるとのこと。代わりに &lt;a href="https://launchpad.net/kazam">kazam&lt;/a> というスクリーンリコーダーの使い方を調べてた。勉強会で作業したログとかを録画しておいてなにかに使えたりするかもしれない。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>半日ほどかかって3章ストレージと抽出を読んだ。読みながら書いているので時間がかかる。今日はこれだけ。まとめはこんな感じ。&lt;/p>
&lt;blockquote>
&lt;p>データベースのシステムには2つの用途があり、その特性やパフォーマンスを最適化するためにストレージエンジンやデータ構造が異なるもので運用されるようになってきた。&lt;/p>
&lt;ul>
&lt;li>オンライントランザクション処理 (OLTP)
&lt;ul>
&lt;li>行指向、トランザクション処理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>オンライン分析処理 (OLAP)
&lt;ul>
&lt;li>列指向、分析クエリ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>OLTP には2つの主要なストレージエンジンがある。&lt;/p>
&lt;ul>
&lt;li>B ツリー
&lt;ul>
&lt;li>1970年代からあり、成熟していて且つ効率的なインデックスのデータ構造&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>LSM ツリー
&lt;ul>
&lt;li>比較的最近開発された、ディスク上でのランダムアクセスをシステム的にシーケンシャルアクセスに変換して、書き込みのスループットを高める手法。もとは Google の BigTable の論文？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>OLAP の典型的なデータウェアハウスの高レベルでのアーキテクチャでは、大量の行をシーケンシャルにスキャンしなければならないクエリの場合、インデックスはあまり関係なく、データを非常にコンパクトにエンコードし、クエリがディスクから読まなければならないデータの量を最小限にとどめることが重要となる。この目標を達成するのに列指向のストレージが役立つ。&lt;/p>
&lt;/blockquote>
&lt;p>過去に Cassandra を使ったプロダクトの開発に関わっていたから B ツリーと LSM ツリーの概要は知っていて3章で書いてあることはだいたい理解できた。データウェアハウスに関しては、前にお手伝いしていた会社で普通のログを Amazon Athena で処理すると1時間とかかかって分析クエリが Parquet に変換すると数分で完了したりするのを目の当たりにしてた。分析処理で読み込むデータ量を削減する列指向の考え方は理解しておく必要がある。行指向のデータを列指向フォーマットである &lt;a href="https://parquet.apache.org/">Parquet&lt;/a> に変換する &lt;a href="https://github.com/reproio/columnify">columnify&lt;/a> のコードも読んだことがあったので内容のイメージはできるけど、実務経験が少ないと全体像がわかっておらず、本書を読みながら学び直ししてた。&lt;/p></content></item><item><title>やや疲れ気味</title><link>/diary/posts/2021/1012/</link><pubDate>Tue, 12 Oct 2021 12:12:34 +0900</pubDate><guid>/diary/posts/2021/1012/</guid><description>昨日は1時半に寝て7時半に起きた。なんか疲れが溜まっているのか寝不足なのか、しゃきっとしなくて15時頃にお昼ご飯食べてきて、戻ってきて2時間ほど寝てた。夕方に寝ると夜の睡眠が悪くなるかもしれない。
データ指向アプリケーションデザイン データ指向アプリケーションデザイン -信頼性、拡張性、保守性の高い分散システム設計の原理
先週末から読み始めようと思いつつ、ダラダラしていて今日から読み始めた。600ページ超と分量が多いので少しずつ読んでいく。買ったのは2019年7月なので2年越しの積ん読。前職で書籍購入の補助制度があったのでその予算消化のために買ったみたいなもの。でも買っておくといつか読むので買っておいてよかった。今日は2章まで読んだ。
「データ指向」という用語は、cpu のデータ処理がボトルネックとなり、且つそのデータ量や複雑さなどが主な課題となるアプリケーションのことをデータ指向と定義している。ソフトウェアシステムにおける3つの課題。これはすべて非機能要件になる。
信頼性 スケーラビリティ メンテンナンス性 リレーショナルデータベースと NoSQL の台頭から始まり、ドキュメントデータベースやグラフデータベースの概要やリレーショナルデータベースとの比較などが書いてある。また NoSQL 系のデータベースのクエリ言語とか、よく知らないので勉強になった。12章あるので1日1-2章ぐらいのペースで今月中に読めたらいいや。
Slack のワークフロービルダーの調査 今度、勉強会をするので調べ始めた。ワークフロービルダーは簡単に定型的な処理を作成できるけど、有料プランでしか使えないのでコミュニティなどでは使いにくい。試しにいくつかワークフローを作ってみて感触を理解した。おそらくワークフロービルダーは Slack app を作成するためのフレームワークにみえる。作成したワークフローの1つ1つが Slack app になるのではないか。
https://github.com/t2y/python-study/tree/master/BizPy/slack/20211027 Slack native? first? な課題管理システムもいくつかみつけた。非開発者に課題管理システムを使ってもらうのはかなり難しいので Slack と課題管理システムが連携すれば課題管理の方法論に新しい価値が出てくるのではないかと考え始めた。この機会に Slack app で構築されば課題管理システムも調べてみようと思う。</description><content>&lt;p>昨日は1時半に寝て7時半に起きた。なんか疲れが溜まっているのか寝不足なのか、しゃきっとしなくて15時頃にお昼ご飯食べてきて、戻ってきて2時間ほど寝てた。夕方に寝ると夜の睡眠が悪くなるかもしれない。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>&lt;a href="https://www.oreilly.co.jp/books/9784873118703/">データ指向アプリケーションデザイン -信頼性、拡張性、保守性の高い分散システム設計の原理&lt;/a>&lt;/p>
&lt;p>先週末から読み始めようと思いつつ、ダラダラしていて今日から読み始めた。600ページ超と分量が多いので少しずつ読んでいく。買ったのは2019年7月なので2年越しの積ん読。前職で書籍購入の補助制度があったのでその予算消化のために買ったみたいなもの。でも買っておくといつか読むので買っておいてよかった。今日は2章まで読んだ。&lt;/p>
&lt;p>「データ指向」という用語は、cpu のデータ処理がボトルネックとなり、且つそのデータ量や複雑さなどが主な課題となるアプリケーションのことをデータ指向と定義している。ソフトウェアシステムにおける3つの課題。これはすべて非機能要件になる。&lt;/p>
&lt;ul>
&lt;li>信頼性&lt;/li>
&lt;li>スケーラビリティ&lt;/li>
&lt;li>メンテンナンス性&lt;/li>
&lt;/ul>
&lt;p>リレーショナルデータベースと NoSQL の台頭から始まり、ドキュメントデータベースやグラフデータベースの概要やリレーショナルデータベースとの比較などが書いてある。また NoSQL 系のデータベースのクエリ言語とか、よく知らないので勉強になった。12章あるので1日1-2章ぐらいのペースで今月中に読めたらいいや。&lt;/p>
&lt;h2 id="slack-のワークフロービルダーの調査">Slack のワークフロービルダーの調査&lt;/h2>
&lt;p>今度、勉強会をするので調べ始めた。ワークフロービルダーは簡単に定型的な処理を作成できるけど、有料プランでしか使えないのでコミュニティなどでは使いにくい。試しにいくつかワークフローを作ってみて感触を理解した。おそらくワークフロービルダーは Slack app を作成するためのフレームワークにみえる。作成したワークフローの1つ1つが Slack app になるのではないか。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/python-study/tree/master/BizPy/slack/20211027">https://github.com/t2y/python-study/tree/master/BizPy/slack/20211027&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Slack native? first? な課題管理システムもいくつかみつけた。非開発者に課題管理システムを使ってもらうのはかなり難しいので Slack と課題管理システムが連携すれば課題管理の方法論に新しい価値が出てくるのではないかと考え始めた。この機会に Slack app で構築されば課題管理システムも調べてみようと思う。&lt;/p></content></item><item><title>職質された</title><link>/diary/posts/2021/1009/</link><pubDate>Sat, 09 Oct 2021 09:12:12 +0900</pubDate><guid>/diary/posts/2021/1009/</guid><description>0時に寝て6時に起きる。昨日も田んぼ仕事の疲れが残っていたのでよく眠れた。1週間で6時頃に起きる癖がついたのですぐに起きれた。
Terminal のカスタマイズ 昨日からいくつか修正をしていた。
画像のパス問題の修正 favicon の追加 タグ一覧リンクの追加 atom フィードに icon 要素の追加 (feedly では読み取れない) atom フィードに favicon を指す要素を埋め込んでみたんだけど、feedly ではダメっぽい。たまたまヒットした GitHub issue でもそういったコメントをみかけた。
https://github.com/huginn/huginn/issues/1628#issuecomment-882103625 ストレッチ 毎週土曜日はストレッチの日。田んぼ仕事のおかげで全身軽い筋肉痛になっている。ストレッチを受けると、いつものときとの違いから、股関節から右ももと腕の筋肉がすごく張っているのに気付く。田んぼのような突発的に体を動かして疲労が溜まったときにもストレッチでほぐせるのがよい。今日の開脚幅は開始前169cmで、ストレッチ後170cmかな。前より少し落ちたのは田んぼ仕事に疲れて平日にあまりストレッチが出来なかったのと筋肉痛のせいかもしれない。
Joel on Software 本当は実家に帰っているときに書き上げようと考えていたものの、田んぼ作業での疲れと実家のパソコンを使って作業する環境の悪さから書くことに集中できなくなって断念していた。集中できる環境なら3時間ほどで書けた。動機づけよりも価値観、価値観がブレないならその次は集中できる環境作りにこだわっていきたい。
https://t2y.hatenablog.jp/entry/2021/10/09/162618 職務質問 買いものして帰ろうとしてたら警察官に止められて職務質問をうけた。自転車の盗難が多いので防犯登録を調べたいとのこと。はいはいって感じで免許証を提示する。自転車は東京で購入したもので10年以上乗っている。防犯登録は警視庁になっているらしく、兵庫県警の警察官では調べられないみたい。次に車体番号も読み取って調べていたけど、よくわからなかったみたい。結局、私が本物の持ち主とその場で調べることができなくて、警察官もたぶん本物だと思いますみたいな歯切れの悪い結果で職務質問を終えた。仮にその自転車が盗難にあってもその防犯登録から私を辿ることはできないので近所の自転車屋さんで防犯登録入り直してくださいと言われた。あー、またこの件か。都道府県の防犯登録のシステムが全国で統合されていればいい話しなのに、なんで引っ越したら防犯登録をやり直さないとあかんねんと。現場の警察官に言っても仕方ないので何も言わないことにした。
プロコン たまたまタイムラインでみかけてちょっと眺めてた。動画で同じ内容をみて、ハラスメントを問題視する人と、プロダクトの新規性について言及する人がいて、感じ方は人それぞれだなぁと思いながら ハッシュタグ を眺めてた。</description><content>&lt;p>0時に寝て6時に起きる。昨日も田んぼ仕事の疲れが残っていたのでよく眠れた。1週間で6時頃に起きる癖がついたのですぐに起きれた。&lt;/p>
&lt;h2 id="terminal-のカスタマイズ">Terminal のカスタマイズ&lt;/h2>
&lt;p>昨日からいくつか修正をしていた。&lt;/p>
&lt;ul>
&lt;li>画像のパス問題の修正&lt;/li>
&lt;li>favicon の追加&lt;/li>
&lt;li>タグ一覧リンクの追加&lt;/li>
&lt;li>atom フィードに icon 要素の追加 (feedly では読み取れない)&lt;/li>
&lt;/ul>
&lt;p>atom フィードに favicon を指す要素を埋め込んでみたんだけど、feedly ではダメっぽい。たまたまヒットした GitHub issue でもそういったコメントをみかけた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/huginn/huginn/issues/1628#issuecomment-882103625">https://github.com/huginn/huginn/issues/1628#issuecomment-882103625&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>毎週土曜日はストレッチの日。田んぼ仕事のおかげで全身軽い筋肉痛になっている。ストレッチを受けると、いつものときとの違いから、股関節から右ももと腕の筋肉がすごく張っているのに気付く。田んぼのような突発的に体を動かして疲労が溜まったときにもストレッチでほぐせるのがよい。今日の開脚幅は開始前169cmで、ストレッチ後170cmかな。前より少し落ちたのは田んぼ仕事に疲れて平日にあまりストレッチが出来なかったのと筋肉痛のせいかもしれない。&lt;/p>
&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>本当は実家に帰っているときに書き上げようと考えていたものの、田んぼ作業での疲れと実家のパソコンを使って作業する環境の悪さから書くことに集中できなくなって断念していた。集中できる環境なら3時間ほどで書けた。動機づけよりも価値観、価値観がブレないならその次は集中できる環境作りにこだわっていきたい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://t2y.hatenablog.jp/entry/2021/10/09/162618">https://t2y.hatenablog.jp/entry/2021/10/09/162618&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="職務質問">職務質問&lt;/h2>
&lt;p>買いものして帰ろうとしてたら警察官に止められて職務質問をうけた。自転車の盗難が多いので防犯登録を調べたいとのこと。はいはいって感じで免許証を提示する。自転車は東京で購入したもので10年以上乗っている。防犯登録は警視庁になっているらしく、兵庫県警の警察官では調べられないみたい。次に車体番号も読み取って調べていたけど、よくわからなかったみたい。結局、私が本物の持ち主とその場で調べることができなくて、警察官もたぶん本物だと思いますみたいな歯切れの悪い結果で職務質問を終えた。仮にその自転車が盗難にあってもその防犯登録から私を辿ることはできないので近所の自転車屋さんで防犯登録入り直してくださいと言われた。あー、またこの件か。都道府県の防犯登録のシステムが全国で統合されていればいい話しなのに、なんで引っ越したら防犯登録をやり直さないとあかんねんと。現場の警察官に言っても仕方ないので何も言わないことにした。&lt;/p>
&lt;h2 id="プロコン">プロコン&lt;/h2>
&lt;p>たまたまタイムラインでみかけてちょっと眺めてた。動画で同じ内容をみて、ハラスメントを問題視する人と、プロダクトの新規性について言及する人がいて、感じ方は人それぞれだなぁと思いながら &lt;a href="https://twitter.com/search?q=%23procon32&amp;src=typed_query&amp;f=top">ハッシュタグ&lt;/a> を眺めてた。&lt;/p></content></item><item><title>草刈り</title><link>/diary/posts/2021/1004/</link><pubDate>Mon, 04 Oct 2021 04:46:32 +0900</pubDate><guid>/diary/posts/2021/1004/</guid><description>3時に寝て4時半に起きる。ほとんど寝てない。蚊がいて飛んでいるのが気になったり刺されてかゆかったりして寝るの諦めた。もう涼しくなって大丈夫かと思ってたけど、まだ蚊取り線香が必要だった。
畑の水やり 6時半から7時半まで。玉ねぎ、茄子、大根、ミニトマトなど、いろいろ野菜が植えてある。玉ねぎはいま芽が出てきたところで水をたくさんやらないといけないらしい。
Joel on Software 書評の続き。空き時間に少し書いた。実家だとオフィスより環境がよくないので集中力が下がり、その結果として効率が落ちる。本書の中でもオフィスのこだわりの章があったけど、環境が大事ということが実感できた。
田んぼの草刈り 午後から草場となった田んぼの草刈り。ある程度草を刈っておかないとトラクターの爪に巻き込むので耕すことができない。草刈機で刈り取りつつ、それを集めてきて、乾かして焼く。焼畑農業みたいなことをしないといけない。刈ったばかりの草は水分を含むのですぐには焼けない。一方で乾いた草はよく燃えるので燃え拡がってしまう。下手すると周りに燃え拡がって火事になってしまう。刈り取った草の集約や配置を調整しないといけない。日中、暑かったし、あまり寝てなかったから夕方は眠くてバテてた。</description><content>&lt;p>3時に寝て4時半に起きる。ほとんど寝てない。蚊がいて飛んでいるのが気になったり刺されてかゆかったりして寝るの諦めた。もう涼しくなって大丈夫かと思ってたけど、まだ蚊取り線香が必要だった。&lt;/p>
&lt;h2 id="畑の水やり">畑の水やり&lt;/h2>
&lt;p>6時半から7時半まで。玉ねぎ、茄子、大根、ミニトマトなど、いろいろ野菜が植えてある。玉ねぎはいま芽が出てきたところで水をたくさんやらないといけないらしい。&lt;/p>
&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>書評の続き。空き時間に少し書いた。実家だとオフィスより環境がよくないので集中力が下がり、その結果として効率が落ちる。本書の中でもオフィスのこだわりの章があったけど、環境が大事ということが実感できた。&lt;/p>
&lt;h2 id="田んぼの草刈り">田んぼの草刈り&lt;/h2>
&lt;p>午後から草場となった田んぼの草刈り。ある程度草を刈っておかないとトラクターの爪に巻き込むので耕すことができない。草刈機で刈り取りつつ、それを集めてきて、乾かして焼く。焼畑農業みたいなことをしないといけない。刈ったばかりの草は水分を含むのですぐには焼けない。一方で乾いた草はよく燃えるので燃え拡がってしまう。下手すると周りに燃え拡がって火事になってしまう。刈り取った草の集約や配置を調整しないといけない。日中、暑かったし、あまり寝てなかったから夕方は眠くてバテてた。&lt;/p></content></item><item><title>帰省</title><link>/diary/posts/2021/1003/</link><pubDate>Sun, 03 Oct 2021 11:40:58 +0900</pubDate><guid>/diary/posts/2021/1003/</guid><description>0時に寝て9時頃に起きる。今朝は寝起きが悪くてベッドでぐだぐだしてた。ダイの大冒険をみて家事をした。数日、家を空けるので冷蔵庫の中を空にして、洗いものやゴミの始末をする。11時半頃にオフィスに着く。
OMRON connect グラフは今週の平均体温の推移を示したもの。ワクチン摂取後の体温は36.5-37.0℃の間を行ったり来たりしているものの、体調はまったくしんどくないのであまり気にしてない。そもそも摂取後に体温を測り始めたので自分の平熱がどのぐらいなのかすら把握してないことに気付いた。音波通信体温計 MC-6800B　けんおんくん を使っていて OMRON connect というスマホアプリで計測した体温を記録できる。
Joel on Software 書評を書き始めた。自分が学んだところや関心をひいたところは、読みながらメモ書きで課題管理システムのチケットに書いてある。それらを見返しながら、一般向けの書評にまとめる。自分にしかわからない内容を補足したり、見返すと言及するほどではないことを取り除いたり。あとは書く根気と時間次第になるわけだが、いまは時間がたっぷりあるので比較的、時間がかかっても学びの質をあげるためになるべく書くようにしている。5時間ほどかけて1/3ぐらい書けた。まだ途中。
実家へ 16時30分の高速バスで実家へ帰る。18時前ぐらいに実家の最寄りのバス停につく。そこから車で10分ほど。片道が2,090円で、往復券だと割引で3,760円になり、420円お得になる。この距離だと大した金額ではない。東京にいたら新幹線が往復で3万円ほどで、乗り継ぎの時間を入れると移動時間も6-7時間になってしまう。東京から神戸に戻ってきた理由として実家に気軽に帰りやすいというメリットがある。
今回の帰省の目的は田んぼの一部が草場になっているので耕さないといけない。本当は9月中にやりたかったが、天候とワクチン摂取などを調整してたら10月になってしまった。自分の会社でよいのは、(他社の仕事を受けてなければ) 自分の都合で休日・平日関係なく業務の調整ができること。来週は実家の雑務: 田んぼや裁判の傍聴などをやりながら隙間に会社の仕事をする。</description><content>&lt;p>0時に寝て9時頃に起きる。今朝は寝起きが悪くてベッドでぐだぐだしてた。ダイの大冒険をみて家事をした。数日、家を空けるので冷蔵庫の中を空にして、洗いものやゴミの始末をする。11時半頃にオフィスに着く。&lt;/p>
&lt;h2 id="omron-connect">OMRON connect&lt;/h2>
&lt;p>グラフは今週の平均体温の推移を示したもの。ワクチン摂取後の体温は36.5-37.0℃の間を行ったり来たりしているものの、体調はまったくしんどくないのであまり気にしてない。そもそも摂取後に体温を測り始めたので自分の平熱がどのぐらいなのかすら把握してないことに気付いた。&lt;a href="https://www.healthcare.omron.co.jp/product/mc/mc-6800b.html">音波通信体温計 MC-6800B　けんおんくん&lt;/a> を使っていて OMRON connect というスマホアプリで計測した体温を記録できる。&lt;/p>
&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>書評を書き始めた。自分が学んだところや関心をひいたところは、読みながらメモ書きで課題管理システムのチケットに書いてある。それらを見返しながら、一般向けの書評にまとめる。自分にしかわからない内容を補足したり、見返すと言及するほどではないことを取り除いたり。あとは書く根気と時間次第になるわけだが、いまは時間がたっぷりあるので比較的、時間がかかっても学びの質をあげるためになるべく書くようにしている。5時間ほどかけて1/3ぐらい書けた。まだ途中。&lt;/p>
&lt;h2 id="実家へ">実家へ&lt;/h2>
&lt;p>16時30分の高速バスで実家へ帰る。18時前ぐらいに実家の最寄りのバス停につく。そこから車で10分ほど。片道が2,090円で、往復券だと割引で3,760円になり、420円お得になる。この距離だと大した金額ではない。東京にいたら新幹線が往復で3万円ほどで、乗り継ぎの時間を入れると移動時間も6-7時間になってしまう。東京から神戸に戻ってきた理由として実家に気軽に帰りやすいというメリットがある。&lt;/p>
&lt;p>今回の帰省の目的は田んぼの一部が草場になっているので耕さないといけない。本当は9月中にやりたかったが、天候とワクチン摂取などを調整してたら10月になってしまった。自分の会社でよいのは、(他社の仕事を受けてなければ) 自分の都合で休日・平日関係なく業務の調整ができること。来週は実家の雑務: 田んぼや裁判の傍聴などをやりながら隙間に会社の仕事をする。&lt;/p></content></item><item><title>インボイス制度への準備</title><link>/diary/posts/2021/1001/</link><pubDate>Fri, 01 Oct 2021 09:50:20 +0900</pubDate><guid>/diary/posts/2021/1001/</guid><description>夜はドラクエタクトやってて2時過ぎに寝て7時に起きた。気のせいか、日記を書くようになってから早く寝付けるようになった。まつのさんが twitter で久しぶりに Python 書いたとツィートしていて、何気なくふと Implement experimental asyncio support #101 #340 をみて、そのツールの関係者でもないのに勝手にクソリプ的なレビューコメントをした。気付いてしまったらみなかった振りするのも気持ち悪いので。
インボイス制度の準備 2023年10月1日から 消費税の軽減税率制度・適格請求書等保存方式（いわゆるインボイス制度） が開始される。開始される前に適格請求書発行事業者に登録しておく必要があり、その登録受付が今日から開始された。前に知人が教えてもらった解説動画を見返した。
ちなみにうちの会社は今期から課税事業者になるのでインボイス制度開始による益税の影響は受けない。前期の決算で消費税を算出したとき、本則課税と簡易課税なら後者の方が46%の納税金額が少なくなることがわかった。IT 業界は経費に占める人件費の割合が大きい (人件費は消費税がかからない) ので簡易課税の方が節税になるのではないかという気がする。そのため、簡易課税で申請している。一度、申請すると2年間適用され、不適用届出を出さない限りはずっと簡易課税で継続される。
国税庁の 申請手続 をみながら￼e-Tax (WEB 版) で申請した。
個人で副業を受けることを想定すると、個人でも適格請求書発行事業者に登録した方がよいのだけど、私の場合、自分の会社なので法人で仕事を受けるのと個人で仕事を受けることの違いって何だろう？とわからなくなった。法人税と個人の所得税の税率の違いの話しは一旦置いておいて、最も大きな違いは会社で仕事を受けても(直近の)給与は増えないのでその報酬を自由には使えない。個人で仕事を受けたらその報酬を自由に使えるぐらいかな？もうちょっとその違いを調べ直してから考えよう。先の youtube 動画の中で税理士さんが「免税事業者という制度をやめたらいいのに。。。」と言ってたけど、個人はどうしよう？と悩んでしまう本質は免税事業者という概念があるからというのは正しいと思う。
Terminal のカスタマイズ hugo の Shortcodes で class で任意の CSS クラスを指定できる。
{{&amp;lt; youtube id=&amp;#34;E0lOsLfj1T0&amp;#34; class=&amp;#34;video-container&amp;#34; &amp;gt;}} static/style.css をカスタムの CSS として読み込んでくれる。youtube のビデオサイズをよしなに調整するために次のスタイルを定義した。なかなか難しい。
.video-container iframe { border:0; max-width: 600px; max-height: 338px; width: 100%; height: 50vh; } Joel on Software 読み終えた。ソフトウェアの本で test of time (時の試練？) に耐えるのは相当に難しい。本書だとマネジメントや教育、ビジネスや経営に関する内容はいまでも有効でおもしろかった。また後日ブログに書評を書く。いまとなっては手放しでお勧めできる本ではないため、どういう切り口で書くかが難しい。自分にとって学びとして身につけたいと思った本はなるべく書評を書いて自分の言葉で説明できるようになっていきたい。</description><content>&lt;p>夜はドラクエタクトやってて2時過ぎに寝て7時に起きた。気のせいか、日記を書くようになってから早く寝付けるようになった。まつのさんが twitter で久しぶりに Python 書いたとツィートしていて、何気なくふと &lt;a href="https://github.com/line/line-bot-sdk-python/pull/340">Implement experimental asyncio support #101 #340&lt;/a> をみて、そのツールの関係者でもないのに勝手にクソリプ的なレビューコメントをした。気付いてしまったらみなかった振りするのも気持ち悪いので。&lt;/p>
&lt;h2 id="インボイス制度の準備">インボイス制度の準備&lt;/h2>
&lt;p>2023年10月1日から &lt;a href="https://www.nta.go.jp/taxes/shiraberu/zeimokubetsu/shohi/keigenzeiritsu/index.htm">消費税の軽減税率制度・適格請求書等保存方式（いわゆるインボイス制度）&lt;/a> が開始される。開始される前に適格請求書発行事業者に登録しておく必要があり、その登録受付が今日から開始された。前に知人が教えてもらった解説動画を見返した。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/E0lOsLfj1T0" allowfullscreen title="消費税インボイス方式対策として今からやっておくべき３つのことをお話します。【簡易課税で税負担1/2に！？】">&lt;/iframe>
&lt;/div>
&lt;p>ちなみにうちの会社は今期から課税事業者になるのでインボイス制度開始による益税の影響は受けない。前期の決算で消費税を算出したとき、本則課税と簡易課税なら後者の方が46%の納税金額が少なくなることがわかった。IT 業界は経費に占める人件費の割合が大きい (人件費は消費税がかからない) ので簡易課税の方が節税になるのではないかという気がする。そのため、簡易課税で申請している。一度、申請すると2年間適用され、不適用届出を出さない限りはずっと簡易課税で継続される。&lt;/p>
&lt;p>国税庁の &lt;a href="https://www.nta.go.jp/taxes/shiraberu/zeimokubetsu/shohi/keigenzeiritsu/invoice_shinei.htm">申請手続&lt;/a> をみながら￼e-Tax (WEB 版) で申請した。&lt;/p>
&lt;p>個人で副業を受けることを想定すると、個人でも適格請求書発行事業者に登録した方がよいのだけど、私の場合、自分の会社なので法人で仕事を受けるのと個人で仕事を受けることの違いって何だろう？とわからなくなった。法人税と個人の所得税の税率の違いの話しは一旦置いておいて、最も大きな違いは会社で仕事を受けても(直近の)給与は増えないのでその報酬を自由には使えない。個人で仕事を受けたらその報酬を自由に使えるぐらいかな？もうちょっとその違いを調べ直してから考えよう。先の youtube 動画の中で税理士さんが「免税事業者という制度をやめたらいいのに。。。」と言ってたけど、個人はどうしよう？と悩んでしまう本質は免税事業者という概念があるからというのは正しいと思う。&lt;/p>
&lt;h2 id="terminal-のカスタマイズ">Terminal のカスタマイズ&lt;/h2>
&lt;p>hugo の Shortcodes で &lt;code>class&lt;/code> で任意の CSS クラスを指定できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>{{&amp;lt; &lt;span style="color:#f92672">youtube&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;E0lOsLfj1T0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;video-container&amp;#34;&lt;/span> &amp;gt;}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>static/style.css&lt;/code> をカスタムの CSS として読み込んでくれる。youtube のビデオサイズをよしなに調整するために次のスタイルを定義した。なかなか難しい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">video-container&lt;/span> &lt;span style="color:#f92672">iframe&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">border&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">max-width&lt;/span>: &lt;span style="color:#ae81ff">600&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">max-height&lt;/span>: &lt;span style="color:#ae81ff">338&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>&lt;span style="color:#66d9ef">vh&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>読み終えた。ソフトウェアの本で test of time (時の試練？) に耐えるのは相当に難しい。本書だとマネジメントや教育、ビジネスや経営に関する内容はいまでも有効でおもしろかった。また後日ブログに書評を書く。いまとなっては手放しでお勧めできる本ではないため、どういう切り口で書くかが難しい。自分にとって学びとして身につけたいと思った本はなるべく書評を書いて自分の言葉で説明できるようになっていきたい。&lt;/p>
&lt;h2 id="カジュアル面談">カジュアル面談&lt;/h2>
&lt;p>プロジェクトマネージャーを募集している会社の CTO と面談。先方の時間が15分しかないという話しだったので事前に質問は連絡しつつ、バックエンドは Go 言語を使っているという話しだったので私が過去に書いたブログ記事やちょっと前に作った &lt;a href="https://github.com/kazamori/go-sql-executor">go-sql-executor&lt;/a> を連絡して、技術選考の参考にしてほしいと伝えた。募集要項からスクラムを採用するように読めたのでその背景を聞いたところ、外部の技術顧問が推奨しただけでとくにこだわりはないという。いまもメンバーは8人いて1週間のスプリントでスクラムっぽい運用はしているとのこと。私の言う、課題管理とイテレーション開発の概要を軽く説明しつつ、それを実践するためにプロジェクトマネージャーをやりたくて、その実践の場を探しているといった話しをした。外部の技術顧問が欠席したせいか、Go 言語の開発に関する質問はとくになかった。メンバーはすべて業務委託という話しなので寄せ集めグループのドタバタプロジェクトなんだろうなという印象を受けた。心理的安全性や一体化マネジメント法とか勉強したんで &lt;em>グループ&lt;/em> じゃなくて &lt;em>チーム&lt;/em> 開発できるマネジメントがやりたいなぁ。&lt;/p></content></item><item><title>窓のある部屋</title><link>/diary/posts/2021/0930/</link><pubDate>Thu, 30 Sep 2021 08:37:37 +0900</pubDate><guid>/diary/posts/2021/0930/</guid><description>夜は自民党総裁選の総括の記事を読んでた。政治に関心があるわけではないが、選挙後の総括にはとても関心がある。とくに負けた人がどんなことを言うのか、敗因をどう分析するのか。シンゴジラで矢口の発した 「政界は敵か味方しかいない。シンプルだ。性に合ってる」 という言葉が好き。選挙というわかりやすい勝ち負けが明確に出る仕組みは確かにシンプルだ。その後、3時まで本を読んで寝て7時ぐらいに起きた。
カジュアル面談準備 課題管理と開発方法論の体系化のため、プロジェクトマネージャーの案件を探している。Remogu というリモートワークxエンジニア専門のサイトでギグワークできないかを検討中。ある会社を提案されたのでその会社のサイトとサービス内容を調べてた。飲食業界向けに提供しているサービスを、これまではアウトソースで開発していたシステムを内製化するために開発者を募集しているようだった。いま風に言えば、DX の1つと言えるだろう。これから内製の開発チームを作っていくとのこと。言うても CTO (PMO) 以外はすべて業務委託で集めるとのこと。デメリットはチームにならず、寄せ集めの集団になってしまう懸念がある一方、メリットとして採用したものの、マッチングしなかったメンバーの契約更新しないことで入れ替えることができる。明日、その会社の人たちとカジュアル面談をして双方のマッチングをみてみる。
Joel on Software 昨日の続き。夜に読み切ろうと思っていたけど、ドラクエタクトの新しいイベントがリリースされて、それやってたら疲れて寝てしまった。あともうちょと。特定の技術に言及している内容は2000年代半ばの話しなのでいまとなっては有効ではないものや歴史書のように読めたりもする。中盤からソフトウェアビジネスやソフトウェア会社の運営などが書いてあって、マイクロ法人を始めたばかりの私にとっては興味深い。例えば、オフィスの要件は次の内容をあげている。
1人1人にちゃんとドアの付いた個室があること、絶対条件 コンセントがたくさん必要、新しいおもちゃを机の上でつなげられる データケーブルを簡単につなぎ直せる ペアプログラミングが可能であること (L字型の大きい机を用意する) 遠くのものを眺めて目を休められるよう窓を設け、ディスプレイを壁に向かって置いてはいけない オフィスはそこで時を過ごすのが快適なたまり場のような場所であるべき その上で、会社の成功は、ある部分までプログラマーが実質オフィスに暮らすようになるかどうかにかかっているので、オフィスが平均的なプログラマーの家よりも素敵な場所である必要があると述べている。実際、私は過去に働いた6社すべてで泊まり込みで働いたこともあるのでまさに暮らすように働いていた時期もあったかもしれない。机に伏して寝たり椅子を並べて寝るよりは、ソファやくつろぎスペースで寝る方が快適だった。あと、いまのオフィスの唯一の欠点は窓がないことだと1年ほど働いて、ちょうど私も実感していた。窓がないと1日の天候の移り変わりや季節の移り変わりがみえなくて気分転換ができないのだ。次にオフィスを引っ越すときは窓がある部屋を条件に加えようとまさに考えていた。
あと自分にとっての課題管理の原点をみつけた。過去に働いていた会社で、課題管理システムに顧客からの問い合わせや開発者のTODOやシステム管理のメモなど、すべての情報を入れられていた。こういった課題管理システムの使い方は次の記事に影響を受けて実践されたものだったと当時の上司に確認した。たったこれだけの話なんだけど、私にとっては原点なので宝ものを発見したかのような嬉しい気持ちになった。
Half a million bugs!</description><content>&lt;p>夜は自民党総裁選の総括の記事を読んでた。政治に関心があるわけではないが、選挙後の総括にはとても関心がある。とくに負けた人がどんなことを言うのか、敗因をどう分析するのか。シンゴジラで矢口の発した &lt;em>「政界は敵か味方しかいない。シンプルだ。性に合ってる」&lt;/em> という言葉が好き。選挙というわかりやすい勝ち負けが明確に出る仕組みは確かにシンプルだ。その後、3時まで本を読んで寝て7時ぐらいに起きた。&lt;/p>
&lt;h2 id="カジュアル面談準備">カジュアル面談準備&lt;/h2>
&lt;p>課題管理と開発方法論の体系化のため、プロジェクトマネージャーの案件を探している。&lt;a href="https://remogu.jp/">Remogu&lt;/a> というリモートワークxエンジニア専門のサイトでギグワークできないかを検討中。ある会社を提案されたのでその会社のサイトとサービス内容を調べてた。飲食業界向けに提供しているサービスを、これまではアウトソースで開発していたシステムを内製化するために開発者を募集しているようだった。いま風に言えば、DX の1つと言えるだろう。これから内製の開発チームを作っていくとのこと。言うても CTO (PMO) 以外はすべて業務委託で集めるとのこと。デメリットはチームにならず、寄せ集めの集団になってしまう懸念がある一方、メリットとして採用したものの、マッチングしなかったメンバーの契約更新しないことで入れ替えることができる。明日、その会社の人たちとカジュアル面談をして双方のマッチングをみてみる。&lt;/p>
&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>昨日の続き。夜に読み切ろうと思っていたけど、ドラクエタクトの新しいイベントがリリースされて、それやってたら疲れて寝てしまった。あともうちょと。特定の技術に言及している内容は2000年代半ばの話しなのでいまとなっては有効ではないものや歴史書のように読めたりもする。中盤からソフトウェアビジネスやソフトウェア会社の運営などが書いてあって、マイクロ法人を始めたばかりの私にとっては興味深い。例えば、オフィスの要件は次の内容をあげている。&lt;/p>
&lt;ol>
&lt;li>1人1人にちゃんとドアの付いた個室があること、絶対条件&lt;/li>
&lt;li>コンセントがたくさん必要、新しいおもちゃを机の上でつなげられる&lt;/li>
&lt;li>データケーブルを簡単につなぎ直せる&lt;/li>
&lt;li>ペアプログラミングが可能であること (L字型の大きい机を用意する)&lt;/li>
&lt;li>遠くのものを眺めて目を休められるよう窓を設け、ディスプレイを壁に向かって置いてはいけない&lt;/li>
&lt;li>オフィスはそこで時を過ごすのが快適なたまり場のような場所であるべき&lt;/li>
&lt;/ol>
&lt;p>その上で、会社の成功は、ある部分までプログラマーが実質オフィスに暮らすようになるかどうかにかかっているので、オフィスが平均的なプログラマーの家よりも素敵な場所である必要があると述べている。実際、私は過去に働いた6社すべてで泊まり込みで働いたこともあるのでまさに暮らすように働いていた時期もあったかもしれない。机に伏して寝たり椅子を並べて寝るよりは、ソファやくつろぎスペースで寝る方が快適だった。あと、いまのオフィスの唯一の欠点は窓がないことだと1年ほど働いて、ちょうど私も実感していた。窓がないと1日の天候の移り変わりや季節の移り変わりがみえなくて気分転換ができないのだ。次にオフィスを引っ越すときは窓がある部屋を条件に加えようとまさに考えていた。&lt;/p>
&lt;p>あと自分にとっての課題管理の原点をみつけた。過去に働いていた会社で、課題管理システムに顧客からの問い合わせや開発者のTODOやシステム管理のメモなど、すべての情報を入れられていた。こういった課題管理システムの使い方は次の記事に影響を受けて実践されたものだったと当時の上司に確認した。たったこれだけの話なんだけど、私にとっては原点なので宝ものを発見したかのような嬉しい気持ちになった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.joelonsoftware.com/2006/12/20/half-a-million-bugs/">Half a million bugs!&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>読書とイベント参加</title><link>/diary/posts/2021/0929/</link><pubDate>Wed, 29 Sep 2021 08:59:17 +0900</pubDate><guid>/diary/posts/2021/0929/</guid><description>0時頃に寝て8時ぐらいに起きる。やや発熱して疲れてたせいか、久しぶりに早く寝付けた。一日を通して体温は平均36.7℃なのでもう副反応は過ぎたみたい。体調もまったく悪くない。
Joel on Software 過去に働いていた会社での課題管理のやり方や開発方法論について、当時の上司と雑談したところ Joel Spolsky に由来するということを聞いた。そこで今更ながらに More Joel on Software を読むことにした。2000年代に書かれた記事の内容なのでいまとなっては古典に分類される本かもしれない。だいたい半分ぐらい読んだ。技術の詳細に言及した内容は古くなっていてあまり有用ではないものも多いけど、マネジメントや優秀なプログラマーの特性などはいまでも通用する内容に思えた。あとで私が関心をもった内容をブログでまとめることにする。
第10章コンピュータサイエンスの学生へのアドバイスで「卒業するまでにミクロ経済学を学ぶこと」という節がある。著者がミクロ経済学を推奨する理由を引用するとこれら。
ミクロ経済学はビジネスで重要な理論すべての基礎となっている。需要と供給とか、競争優位とか、NPV とか割り引きとか限界効能について知らなければ、ビジネスの仕組みが全然理解できないからだ。
マクロ経済学は、当たっているよりもはずれていることの方が多い。スキップしてよい。それ以降はただ悪くなっていく一方。
ビジネスの基礎を理解しているプログラマは、理解していないプログラマよりもビジネスにおいてずっと価値が高いからだ。
学んだことがなかったので簡単そうな ミクロ経済学入門の入門 を購入した。
読んでて気づきを得てふとツィートした。
なので、システムのコンポーネントに関しての意思決定をするとき、必ずしも上位の意思決定者の判断が正しいわけではなく、現場のメンバーに判断を委ねる状況が最適な場合もある。一方向じゃなく、双方向の情報の非対称性を解消する取り組みが大事。
&amp;mdash; Tetsuya Morimoto (@t2y) September 29, 2021 Java 17 リリースイベント 【オンライン】 JJUGナイトセミナー「Java 17 リリース記念イベント with Foojay」9/29(水) 開催 に参加した。Java の LTS はいま過渡期でややこしいことになって、8, 11, 17 になる。リリースされたばかりの Java 17 は LTS で重要なバージョンになる。Oracle Java SE Supportロードマップ から Premier Support 期限が次になる。
8: 2022年3月 11: 2023年9月 17: 2026年9月 いま 11 を使っている組織はいいが、8 を使っている組織もまだまだ多いと推測する。8 と 11 の Premier Support 期限が近いことから 8 を使っている組織は 17 に一気にバージョンアップすることが想定される。どこかのタイミングで Java 17 を前提した開発に切り替わっていくだろうと思われる。</description><content>&lt;p>0時頃に寝て8時ぐらいに起きる。やや発熱して疲れてたせいか、久しぶりに早く寝付けた。一日を通して体温は平均36.7℃なのでもう副反応は過ぎたみたい。体調もまったく悪くない。&lt;/p>
&lt;h2 id="joel-on-software">Joel on Software&lt;/h2>
&lt;p>過去に働いていた会社での課題管理のやり方や開発方法論について、当時の上司と雑談したところ &lt;a href="https://en.wikipedia.org/wiki/Joel_Spolsky">Joel Spolsky&lt;/a> に由来するということを聞いた。そこで今更ながらに &lt;a href="https://www.shoeisha.co.jp/book/detail/9784798118925">More Joel on Software&lt;/a> を読むことにした。2000年代に書かれた記事の内容なのでいまとなっては古典に分類される本かもしれない。だいたい半分ぐらい読んだ。技術の詳細に言及した内容は古くなっていてあまり有用ではないものも多いけど、マネジメントや優秀なプログラマーの特性などはいまでも通用する内容に思えた。あとで私が関心をもった内容をブログでまとめることにする。&lt;/p>
&lt;p>第10章コンピュータサイエンスの学生へのアドバイスで「卒業するまでにミクロ経済学を学ぶこと」という節がある。著者がミクロ経済学を推奨する理由を引用するとこれら。&lt;/p>
&lt;blockquote>
&lt;p>ミクロ経済学はビジネスで重要な理論すべての基礎となっている。需要と供給とか、競争優位とか、NPV とか割り引きとか限界効能について知らなければ、ビジネスの仕組みが全然理解できないからだ。&lt;/p>
&lt;p>マクロ経済学は、当たっているよりもはずれていることの方が多い。スキップしてよい。それ以降はただ悪くなっていく一方。&lt;/p>
&lt;p>ビジネスの基礎を理解しているプログラマは、理解していないプログラマよりもビジネスにおいてずっと価値が高いからだ。&lt;/p>
&lt;/blockquote>
&lt;p>学んだことがなかったので簡単そうな &lt;a href="https://www.iwanami.co.jp/book/b285381.html">ミクロ経済学入門の入門&lt;/a> を購入した。&lt;/p>
&lt;p>読んでて気づきを得てふとツィートした。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">なので、システムのコンポーネントに関しての意思決定をするとき、必ずしも上位の意思決定者の判断が正しいわけではなく、現場のメンバーに判断を委ねる状況が最適な場合もある。一方向じゃなく、双方向の情報の非対称性を解消する取り組みが大事。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1443024587944464388?ref_src=twsrc%5Etfw">September 29, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="java-17-リリースイベント">Java 17 リリースイベント&lt;/h2>
&lt;p>&lt;a href="https://jjug.doorkeeper.jp/events/127204">【オンライン】 JJUGナイトセミナー「Java 17 リリース記念イベント with Foojay」9/29(水) 開催&lt;/a> に参加した。Java の LTS はいま過渡期でややこしいことになって、8, 11, 17 になる。リリースされたばかりの Java 17 は LTS で重要なバージョンになる。&lt;a href="https://www.oracle.com/jp/java/technologies/java-se-support-roadmap.html">Oracle Java SE Supportロードマップ&lt;/a> から Premier Support 期限が次になる。&lt;/p>
&lt;ul>
&lt;li>8: 2022年3月&lt;/li>
&lt;li>11: 2023年9月&lt;/li>
&lt;li>17: 2026年9月&lt;/li>
&lt;/ul>
&lt;p>いま 11 を使っている組織はいいが、8 を使っている組織もまだまだ多いと推測する。8 と 11 の Premier Support 期限が近いことから 8 を使っている組織は 17 に一気にバージョンアップすることが想定される。どこかのタイミングで Java 17 を前提した開発に切り替わっていくだろうと思われる。&lt;/p>
&lt;p>最初の発表は Pattern Matching &amp;amp; Sealed Classes に特化した内容。これまでは instanceof と共に使う機能だった。switch 構文とパターンマッチングを組み合わせると、コードが簡潔になって &lt;a href="https://en.wikipedia.org/wiki/Cognitive_complexity">Cognitive complexity&lt;/a> を下げるという。発表者が Type Guard という呼び方をしていた。Type Guard をググると TypeScript の記事がヒットする。&lt;a href="https://openjdk.java.net/jeps/406">JEP 406: Pattern Matching for switch (Preview)&lt;/a> ではこれを &lt;em>guarded pattern&lt;/em> と呼んでいる。まだあまり一般的な用語ではないのかもしれない。あとは Sealed クラスと組み合わせた switch 構文のコード例では、すべてのパターンが網羅されていることをコンパイラが検出して &lt;em>default&lt;/em> 句が不要になるコード例も紹介されててよさそうにみえた。但し、switch 構文のパターンマッチングは preview なので実際には 17 ではまだ使われないのかもしれない。今後もさらに switch 構文とパターンマッチングの機能拡張が行われる展望らしい。&lt;/p>
&lt;p>2番目の発表は Java 17 の全体的な話し。fix した issues のツリーマップで contributor の分布を紹介していた。oracle, redhat, independent の順番に多い。oracle が過半数以上。日本だと ntt data が一番貢献してた。spring フレームワークの次期バージョンは Java 17 がベースラインになる。java のアップグレードを促す要因の1つにはなるはず。lts なのになぜ preview や incubator があるのか？openjdk 開発側は6ヶ月というリリースサイクルを守っている。lts にするか否かは開発者が決めているらしい。graalvm のリリースサイクルは java とは異なる。こちらは年3回のリリースなので次のリリースで出てくるはず？いくつか jep の内容を紹介してた。jep の概要は &lt;a href="https://qiita.com/ReiTsukikazu/items/407d61cb66fa4f562bf9">Java17の新機能をざっくり紹介&lt;/a> にまとまっている。さくらばさんがパッケージの api レベルでの変更を &lt;a href="http://www.javainthebox.com/2021/09/jepjava-17.html">JEPでは語れないJava 17&lt;/a> にまとめている。ざっと目を通して興味があるものがあればみとくぐらい。8 から 17 への移行の記事やドキュメントなども紹介されてた。移行について基本は &lt;a href="https://docs.oracle.com/en/java/javase/17/migrate/getting-started.html">Oracle JDK Migration Guide&lt;/a> を読めとのこと。8 から 17 の移行せずにその次の 23 を待つと作り直しになってしまいますよと 17 への移行を推奨してた。&lt;/p></content></item><item><title>副反応はいずこ？</title><link>/diary/posts/2021/0928/</link><pubDate>Tue, 28 Sep 2021 08:35:36 +0900</pubDate><guid>/diary/posts/2021/0928/</guid><description>2時過ぎぐらいに寝て5時前ぐらいに起きる。やや熱っぽいかなぁぐらいの印象でもう一度寝る。8時前に起きるともう平気になってた。昨日、書籍や macbook を持って帰ってきて引きこもり対策してたけど、体調が悪くないのでオフィスへ行くことにした。お昼から1時間おきに熱を測ってみたら37℃前後なので少し熱は出ていたみたい。とくにしんどくなかったので普通にお仕事してた。
水分補給 副反応対策として、ポカリスエットイオンウォーターの粉末をウォーターサーバーの水に混ぜて飲んでみる。イオンウォーターと普通の ポカリスエットとの違いは何ですか？ によると、基本的な成分は同じで低カロリーという違いがあるらしい。
日記サイト構築 diary リポジトリに push すると GitHub Actions で静的サイトをビルドして GitHub Pages で扱うための gh-pages ブランチに push される。GitHub Actions による GitHub Pages への自動デプロイ を参考にした。gh-pages ブランチにあるものが次の URL で参照される。リポジトリ名の diary がパスになるらしい。
https://t2y.github.io/diary/ まだ設定は不完全だけど、運用しながらおいおい設定を詰めていく。Hugo は会社のホームページにも使っているので慣れているのと、使い心地も気に入っているのでこのまま使い続ける。会社のサイトはたまにしか更新しないので日記を書く方が更新頻度があがって Hugo を触るインセンティブになるかもしれない。
ジャーナリングとは 読みかけで放置していた 「手で書くこと」が知性を引き出す 心を整え、思考を解き放つ新習慣「ジャーナリング」入門 を読み終えた。この日記も簡易的なジャーナリングになればよいと願っていたりする。「書くこと」への期待値を高くもって読み進めたせいか、内容が薄かったように思えた。ジャーナリングを行うテーマのワークシートが24個ついていて、ページ数を稼いでいるように感じた。日常生活であまり書いていない人には関心をそそるかもしれないけど、プログラマーは日常生活で平均以上の文字数を書いていると推測する。私にとってはあまり目新しいことはなかった。
マインドフルネス (気づき) を得るための方法論の1つとして書く瞑想=ジャーナリングを推奨している。手書きとキーボードのタイピングでは効果が異なるという研究成果はおもしろかった。手書きの方が記憶力や理解力を高める、脳波はアルファ波が出るといった研究があるという。従って、より創造的な仕事に向くかもしれない。ジャーナリングの研究によって、わかってきたことの1つは、自己や他者、社会への適応力を高めると示唆されている。ここでいう「適応力が高まる」というのは、課題や問題をどうとらえ、これからどう行動すればよいかのヒントにつながる可能性があるという意図らしい。ジャーナリングは心身の健全性にもプラスの影響をもたらされる可能性が高いといった研究も紹介されている。私の感覚的にも、書くことで課題や問題を明確化することはストレスを軽減して健康になるような気がする。
ジャーナリングをする際に大事なことは「考えない」 ということです。
書く瞑想とも言われる所以にも思える。そのままの状態を観察して気づきとするような、そういう姿勢を説いている。この内容は業務の取り組みへの応用からは離れてしまう。
前に メタ認知で〈学ぶ力〉を高める：認知心理学が解き明かす効果的学習法 の著者が タイピング思考法の開発とその有効性の検討 という研究発表をしていた。この研究は、思考過程を推測する手法として、発話思考法における問題を解決するタイピング思考法を提案し、既知の問題を解決しつつ、発想の促進効果もみられてそこそこよい結果が出たというものであった。思考過程を発話とタイピングの2つで比較している。比較項目に手書きがあると少し結果に差異が出たりしたのかなぁとか思った。
Atlassian Community Online MeetUp の参加 課題管理システムとチャットツールを連携する Halp というツールがあるらしい。うちは課題管理システムにクラウド jira を使っていて、Atlassian 社から届くメールで本イベントのことを知った。Atlassian Community Event の頭文字をとって ACE と呼ぶらしい。</description><content>&lt;p>2時過ぎぐらいに寝て5時前ぐらいに起きる。やや熱っぽいかなぁぐらいの印象でもう一度寝る。8時前に起きるともう平気になってた。昨日、書籍や macbook を持って帰ってきて引きこもり対策してたけど、体調が悪くないのでオフィスへ行くことにした。お昼から1時間おきに熱を測ってみたら37℃前後なので少し熱は出ていたみたい。とくにしんどくなかったので普通にお仕事してた。&lt;/p>
&lt;h2 id="水分補給">水分補給&lt;/h2>
&lt;p>副反応対策として、ポカリスエットイオンウォーターの粉末をウォーターサーバーの水に混ぜて飲んでみる。イオンウォーターと普通の &lt;a href="https://www.otsuka.co.jp/faq/ionwater/01.html">ポカリスエットとの違いは何ですか？&lt;/a> によると、基本的な成分は同じで低カロリーという違いがあるらしい。&lt;/p>
&lt;h2 id="日記サイト構築">日記サイト構築&lt;/h2>
&lt;p>&lt;a href="https://github.com/t2y/diary">diary&lt;/a> リポジトリに push すると GitHub Actions で静的サイトをビルドして GitHub Pages で扱うための gh-pages ブランチに push される。&lt;a href="https://qiita.com/peaceiris/items/d401f2e5724fdcb0759d">GitHub Actions による GitHub Pages への自動デプロイ&lt;/a> を参考にした。gh-pages ブランチにあるものが次の URL で参照される。リポジトリ名の &lt;code>diary&lt;/code> がパスになるらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://t2y.github.io/diary/">https://t2y.github.io/diary/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>まだ設定は不完全だけど、運用しながらおいおい設定を詰めていく。&lt;a href="https://gohugo.io/">Hugo&lt;/a> は会社のホームページにも使っているので慣れているのと、使い心地も気に入っているのでこのまま使い続ける。会社のサイトはたまにしか更新しないので日記を書く方が更新頻度があがって Hugo を触るインセンティブになるかもしれない。&lt;/p>
&lt;h2 id="ジャーナリングとは">ジャーナリングとは&lt;/h2>
&lt;p>読みかけで放置していた &lt;a href="https://bunkyosha.com/books/9784866510149">「手で書くこと」が知性を引き出す 心を整え、思考を解き放つ新習慣「ジャーナリング」入門&lt;/a> を読み終えた。この日記も簡易的なジャーナリングになればよいと願っていたりする。「書くこと」への期待値を高くもって読み進めたせいか、内容が薄かったように思えた。ジャーナリングを行うテーマのワークシートが24個ついていて、ページ数を稼いでいるように感じた。日常生活であまり書いていない人には関心をそそるかもしれないけど、プログラマーは日常生活で平均以上の文字数を書いていると推測する。私にとってはあまり目新しいことはなかった。&lt;/p>
&lt;p>マインドフルネス (気づき) を得るための方法論の1つとして書く瞑想=&lt;strong>ジャーナリング&lt;/strong>を推奨している。手書きとキーボードのタイピングでは効果が異なるという研究成果はおもしろかった。手書きの方が記憶力や理解力を高める、脳波はアルファ波が出るといった研究があるという。従って、より創造的な仕事に向くかもしれない。ジャーナリングの研究によって、わかってきたことの1つは、自己や他者、社会への適応力を高めると示唆されている。ここでいう「適応力が高まる」というのは、課題や問題をどうとらえ、これからどう行動すればよいかのヒントにつながる可能性があるという意図らしい。ジャーナリングは心身の健全性にもプラスの影響をもたらされる可能性が高いといった研究も紹介されている。私の感覚的にも、書くことで課題や問題を明確化することはストレスを軽減して健康になるような気がする。&lt;/p>
&lt;blockquote>
&lt;p>ジャーナリングをする際に大事なことは「考えない」 ということです。&lt;/p>
&lt;/blockquote>
&lt;p>書く瞑想とも言われる所以にも思える。そのままの状態を観察して気づきとするような、そういう姿勢を説いている。この内容は業務の取り組みへの応用からは離れてしまう。&lt;/p>
&lt;p>前に &lt;a href="https://note.com/t2y1979/n/n4713058f48ce">メタ認知で〈学ぶ力〉を高める：認知心理学が解き明かす効果的学習法&lt;/a> の著者が &lt;a href="https://www.jstage.jst.go.jp/article/jjet/37/Suppl./37_KJ00009957528/_article/-char/ja">タイピング思考法の開発とその有効性の検討&lt;/a> という研究発表をしていた。この研究は、思考過程を推測する手法として、発話思考法における問題を解決するタイピング思考法を提案し、既知の問題を解決しつつ、発想の促進効果もみられてそこそこよい結果が出たというものであった。思考過程を発話とタイピングの2つで比較している。比較項目に手書きがあると少し結果に差異が出たりしたのかなぁとか思った。&lt;/p>
&lt;h2 id="atlassian-community-online-meetup-の参加">Atlassian Community Online MeetUp の参加&lt;/h2>
&lt;p>課題管理システムとチャットツールを連携する &lt;a href="https://halp.com/">Halp&lt;/a> というツールがあるらしい。うちは課題管理システムにクラウド jira を使っていて、Atlassian 社から届くメールで本イベントのことを知った。Atlassian Community Event の頭文字をとって ACE と呼ぶらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://ace.atlassian.com/events/details/atlassian-tokyo-presents-48-tokyo-atlassian-community-online-meetup-dian-pu-bizinesudenohuo-yong-shi-li-halphuo-yong-tipsxin-aceridafa-biao/">#48 Tokyo Atlassian Community Online MeetUp - 店舗ビジネスでの活用事例＆Halp活用Tips＆新ACEリーダー発表&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>初めて ACE イベントに参加した。コミュニティ (ユーザー) 主体のイベントになるらしい。運営メンバーの中に前職での jira チームのリーダーが出ていてちょっとびっくりした。何度かやり取りしてお世話になった方だったのでこういうところでも活動しているんだと思ってさらに尊敬の念が深くなった。halp については、想像通り、非開発者向けに slack の操作だけで jira の課題管理システムと連携するためのサービスとしてよさそうだった。slack (halp) と jira は双方向にデータの同期ができる。いまのところ、halp の無料プランがないので試せてないけど、なにかの機会で一通り触ってみたいと思うサービスだった。&lt;/p></content></item></channel></rss>