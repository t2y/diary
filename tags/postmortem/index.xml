<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>postmortem on forest nook</title><link>/diary/tags/postmortem/</link><description>Recent content in postmortem on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Tue, 29 Nov 2022 05:35:37 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/postmortem/index.xml" rel="self" type="application/rss+xml"/><item><title>初めてのマイルストーンふりかえり</title><link>/diary/posts/2022/1129/</link><pubDate>Tue, 29 Nov 2022 05:35:37 +0900</pubDate><guid>/diary/posts/2022/1129/</guid><description>0時に寝て何度か起きつつ5時に起きた。慣れないホテルでの就寝なのに昨日はバテバテだったから割と眠れた方だと思う。
ふりかえり 1ヶ月 (厳密には4イテレーション) をマイルストーンとし、マイルストーンを終えたらふりかえりを行う。前にスクラム開発で行っていたふりかえり手法をベースにしながらやってみる。ポジティブなふりかえり向けに fun/done/learn という手法がよさそうだったので採用してみた。ツールは jamboard を使った。
ファン・ダン・ラーン(FDL)ふりかえりボード ふりかえりでFun! Done! Learn! 初めてやってみたので進め方そのものにいくつか反省があった。オフィスで大きいスクリーンに映してみんながみえるようにしながら jamboard にコメントを書き込んでいく同時作業が割と忙しかった。jamboard で付箋を書くときの操作性が微妙によくない。慣れの問題かもしれないけど、なにかあとひと押しの操作性が足りない気がする。
最初なのでやり方の例として私も付箋にコメントを書きながらやっていた。私が参加者の1人として振る舞うと進行が止まってしまって忙しくなることに気付いた。あとで付箋に対して「いいね」をつけて共有してもらうときに、私の役割が開発者としての振る舞いとファシリテーターとしての振る舞いが混ざってしまって、他の参加者がどう感じたかはわからないが、私自身がいま何をやろうとしているのか分からなくなるといった混乱をきたすことがわかった。ファシリテーターとしての私はメンバーの意見を聞いてまとめ役をしないといけない。しかし、開発者としての私が意見を発してしまうと、私の意見を私がまとめることになってしまい、その客観性を担保しているのかどうかが分からなくなってしまう。要は簡潔なまとめなのか、個人の意見なのかの見分けがつかない。ファシリテーターとして振る舞うときはメンバーとしての意見を言わない方が進行がやりやすくなることに気付いた。初めてやったときはこんなもんか。次回への反省につなげる。
やったことは、課題管理システムから自分が担当者の issue をフィルターして眺めればすぐに把握できるが、ネガティブなふりかえりの気付いたことや改善したいことを掘り返す方法がないことにも気付いた。マイルストーンが1ヶ月なのでどこかに記録しておかないと忘れてしまう。go のプログラミングにまだ慣れていないといった付箋がたくさんあったが、それ以外はもう覚えていないというのもあったと思う。忘れないための一時記録の仕組みを考えないといけないことに私自身が気付いた。</description><content>&lt;p>0時に寝て何度か起きつつ5時に起きた。慣れないホテルでの就寝なのに昨日はバテバテだったから割と眠れた方だと思う。&lt;/p>
&lt;h2 id="ふりかえり">ふりかえり&lt;/h2>
&lt;p>1ヶ月 (厳密には4イテレーション) をマイルストーンとし、マイルストーンを終えたらふりかえりを行う。前にスクラム開発で行っていたふりかえり手法をベースにしながらやってみる。ポジティブなふりかえり向けに fun/done/learn という手法がよさそうだったので採用してみた。ツールは jamboard を使った。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/yattom/items/90ac533d993d3a2d2d0f">ファン・ダン・ラーン(FDL)ふりかえりボード&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.ogis-ri.co.jp/otc/hiroba/others/ActivityPocket/FunDoneLearn.html">ふりかえりでFun! Done! Learn!&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>初めてやってみたので進め方そのものにいくつか反省があった。オフィスで大きいスクリーンに映してみんながみえるようにしながら jamboard にコメントを書き込んでいく同時作業が割と忙しかった。jamboard で付箋を書くときの操作性が微妙によくない。慣れの問題かもしれないけど、なにかあとひと押しの操作性が足りない気がする。&lt;/p>
&lt;p>最初なのでやり方の例として私も付箋にコメントを書きながらやっていた。私が参加者の1人として振る舞うと進行が止まってしまって忙しくなることに気付いた。あとで付箋に対して「いいね」をつけて共有してもらうときに、私の役割が開発者としての振る舞いとファシリテーターとしての振る舞いが混ざってしまって、他の参加者がどう感じたかはわからないが、私自身がいま何をやろうとしているのか分からなくなるといった混乱をきたすことがわかった。ファシリテーターとしての私はメンバーの意見を聞いてまとめ役をしないといけない。しかし、開発者としての私が意見を発してしまうと、私の意見を私がまとめることになってしまい、その客観性を担保しているのかどうかが分からなくなってしまう。要は簡潔なまとめなのか、個人の意見なのかの見分けがつかない。ファシリテーターとして振る舞うときはメンバーとしての意見を言わない方が進行がやりやすくなることに気付いた。初めてやったときはこんなもんか。次回への反省につなげる。&lt;/p>
&lt;p>やったことは、課題管理システムから自分が担当者の issue をフィルターして眺めればすぐに把握できるが、ネガティブなふりかえりの気付いたことや改善したいことを掘り返す方法がないことにも気付いた。マイルストーンが1ヶ月なのでどこかに記録しておかないと忘れてしまう。go のプログラミングにまだ慣れていないといった付箋がたくさんあったが、それ以外はもう覚えていないというのもあったと思う。忘れないための一時記録の仕組みを考えないといけないことに私自身が気付いた。&lt;/p></content></item><item><title>ふりかえりの目的とワークショップ</title><link>/diary/posts/2022/1119/</link><pubDate>Sat, 19 Nov 2022 09:36:31 +0900</pubDate><guid>/diary/posts/2022/1119/</guid><description>早めに帰ってきて晩ご飯を食べてからまたオフィスに戻って作業して2時に寝て7時半に起きた。
ストレッチ 今日の開脚幅は開始前153cmで、ストレッチ後155cmだった。先週よりは体力的に回復しているものの、今週も多忙で椅子に座っている時間が長かったので数値が悪くなっているのかもしれない。基本的には、お仕事が忙しい = 座っている時間が長い = 同じ姿勢の状態を維持する = 筋肉が固まったり運動不足に陥るという理屈で体調が悪化する。今週はなぜか右太ももの前あたりの張りが強かった。逆に腰や全身の負担は軽減したように感じた。開脚幅の数値はよくないものの、先週よりは復調しているような感触。実際のところはまだよくわからない。
ふりかえりとワークショップの定義からコミュニティ作りのなにか 書籍同様、タイムラインなどでみかけた記事を後で読もうと積ん読しておくときがある。次の記事もおそらく公開時期にみかけて気付いたら積ん読のまま1ヶ月が経過していたのを精読してみた。
価値発見に焦点化した振り返りワークショップの意義と、その教育学的分析 読み始めて、いくつかもの思いにふけりつつ、そこから派生して他の作業もしながら戻ってまた読み進めて、この記事を読むのに5時間かかった。そのぐらい私にとっては示唆のある読み応えのある記事だった。書いてあることのいくつかの点が他の事柄に繋がっていて、その点と線を確認しながら読み進めたので時間がかかってしまった。よくぞこの記事をブックマークしただけで流さなかったと過去の自分に感心したぐらいにはよい記事だった。ワークショップという言葉はよく聞く言葉ではないし、グループワークをする小さいセミナーのイメージを私はもっていた。教育学の分野の研究者によると次のような定義があるらしい。
ワークショップとは
講義など一方的な知識伝達のスタイルではなく、参加者が自ら参加・体験して共同で何かを学びあったり創り出したりする学びと創造のスタイル (中野民夫, 2001) コミュニティ形成 (仲間づくり) のための他者理解と合意形成のエクササイズ (練習) (仮宿俊文, 2017) ちょうど課題管理の文脈でふりかえりをどう設計しようかを考えていたときにこの記事を読んだ。ふりかえりの目的を多義的に捉えるという発想そのものが私にはなかったのでそういった目的も含め、ふりかえりを実践していければよいのではないかと、自分の中にももともと燻っていた火種を見事に言語化してくれて示唆に富む記事だと感じた。
既存の業務に対する課題や改善の洗い出し (一般的なふりかえりの目的) チームのメンバーとコラボレーションする上で他者の考え方や意見を理解するきっかけの1つにする エージェンシーは自分一人では育まれず、同僚や上司、チームや組織との関係性の中で育まれる</description><content>&lt;p>早めに帰ってきて晩ご飯を食べてからまたオフィスに戻って作業して2時に寝て7時半に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前153cmで、ストレッチ後155cmだった。先週よりは体力的に回復しているものの、今週も多忙で椅子に座っている時間が長かったので数値が悪くなっているのかもしれない。基本的には、お仕事が忙しい = 座っている時間が長い = 同じ姿勢の状態を維持する = 筋肉が固まったり運動不足に陥るという理屈で体調が悪化する。今週はなぜか右太ももの前あたりの張りが強かった。逆に腰や全身の負担は軽減したように感じた。開脚幅の数値はよくないものの、先週よりは復調しているような感触。実際のところはまだよくわからない。&lt;/p>
&lt;h2 id="ふりかえりとワークショップの定義からコミュニティ作りのなにか">ふりかえりとワークショップの定義からコミュニティ作りのなにか&lt;/h2>
&lt;p>書籍同様、タイムラインなどでみかけた記事を後で読もうと積ん読しておくときがある。次の記事もおそらく公開時期にみかけて気付いたら積ん読のまま1ヶ月が経過していたのを精読してみた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://research.sakura.ad.jp/2022/10/21/workshop/">価値発見に焦点化した振り返りワークショップの意義と、その教育学的分析&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>読み始めて、いくつかもの思いにふけりつつ、そこから派生して他の作業もしながら戻ってまた読み進めて、この記事を読むのに5時間かかった。そのぐらい私にとっては示唆のある読み応えのある記事だった。書いてあることのいくつかの点が他の事柄に繋がっていて、その点と線を確認しながら読み進めたので時間がかかってしまった。よくぞこの記事をブックマークしただけで流さなかったと過去の自分に感心したぐらいにはよい記事だった。ワークショップという言葉はよく聞く言葉ではないし、グループワークをする小さいセミナーのイメージを私はもっていた。教育学の分野の研究者によると次のような定義があるらしい。&lt;/p>
&lt;blockquote>
&lt;p>ワークショップとは&lt;/p>
&lt;ul>
&lt;li>講義など一方的な知識伝達のスタイルではなく、参加者が自ら参加・体験して共同で何かを学びあったり創り出したりする学びと創造のスタイル (中野民夫, 2001)&lt;/li>
&lt;li>コミュニティ形成 (仲間づくり) のための他者理解と合意形成のエクササイズ (練習) (仮宿俊文, 2017)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>ちょうど課題管理の文脈でふりかえりをどう設計しようかを考えていたときにこの記事を読んだ。ふりかえりの目的を多義的に捉えるという発想そのものが私にはなかったのでそういった目的も含め、ふりかえりを実践していければよいのではないかと、自分の中にももともと燻っていた火種を見事に言語化してくれて示唆に富む記事だと感じた。&lt;/p>
&lt;ul>
&lt;li>既存の業務に対する課題や改善の洗い出し (一般的なふりかえりの目的)&lt;/li>
&lt;li>チームのメンバーとコラボレーションする上で他者の考え方や意見を理解するきっかけの1つにする&lt;/li>
&lt;li>エージェンシーは自分一人では育まれず、同僚や上司、チームや組織との関係性の中で育まれる&lt;/li>
&lt;/ul></content></item><item><title>eks クラスター障害のふりかえり</title><link>/diary/posts/2022/0827/</link><pubDate>Sat, 27 Aug 2022 14:59:56 +0900</pubDate><guid>/diary/posts/2022/0827/</guid><description>ストレッチ 今日の開脚幅は開始前155cmで、ストレッチ後161cmだった。開始前の数値が悪いけど、とくに調子が悪いというわけでもなかったので計測の仕方がよくなかったか、たまたま足の開き方が悪かったかといったところだろう。昨日、高級時計と投資の話しを聞いたのでトレーナーさんとお金があったら何に使う話しが盛り上がった。トレーナーさんも庶民的な方でとくにお金があっても贅沢をしたいというものでもないらしい。私も改めてお金があったら何がしたいかを考えてみてもお金を使ってやりたいことはとくにないなというのが率直な思いでもある。私には自分がやったことのないことをやってみたいという思いしかなく、そのためにお金を使ってきた側面も多々あるけれど、お金を直接的に使って何かをやるというよりも、生活できるだけのお金があれば、その時間に自分がやったことのないことに挑戦して人生を楽しむということぐらいしかやることはないんだなと、トレーナーさんと話していて考えたりしていた。
os 雑談 午後から昨日の障害のふりかえりといくつか調査をして、夕方におがわさんに声をかけたら話し相手になってくれると返ってきた。障害のふりかえりをした後に課題管理の雑談もしていて4時間弱ぐらい話してた。私自身、反省しないといけないとは思っていたのでおがわさんはちゃんと指摘をしてくれた。この歳になると私を叱ってくれる人はいない。たまに失敗したときにおがわさんに話して然るべき指摘をしてもらえるのは本当にありがたい。
kubernetes がどうやって動いているのかを理解して運用しているのか？
コンピューターがどうやって動いているのかを理解しているのか？
私が未熟で理解できていなかったからこんな障害を見過ごしていた。システム障害が発生しても人生は終わりじゃない。反省してから次につなげる。おがわさんと話していて、os の仕組みや機能についていくつか教えてもらった。
制限対象の違い ulimit はユーザーに対する制限 /proc ファイルシステムはシステムに対する制限 /proc/sys/kernel/pid_max は kernel のデフォルト値として 32768 が設定されているが、systemd を使っていれば値を変更している場合がある 私の ubuntu マシンだと 4194304 が設定されていた コンテナ内から /sys/fs/cgroup/memory/memory.usage_in_bytes をみると、コンテナが使っているメモリ量なのか？ cgroup の使い方次第で変わる、システムの値かもしれないしコンテナの値かもしれない ゾンビプロセスに残っている情報は親プロセスが子プロセスの統計情報を取得するために必要なもの どんな子プロセスも一時的にはゾンビプロセスになる kernel の task_struct 構造体やその他の構造体、リンクしている情報などをすべて足すと1つのゾンビプロセスが10数 KiB 程度ではないか 仮に 15 KiB として 32000 個のゾンビプロセスがあると約 469 MiB のメモリ量になるのでだいたい数字があう ユーザー空間とカーネル空間の違いを理解できるようになった方がよい システムコールの fork がエラーになるのはシステムがおかしいとすぐに気付けるはず fork がエラーになる原因として考えられるのはメモリを確保できないか、pid_max に達したか、いずれにしてもエラーコードをみれば推測がつくのではないか 環境にログインできるのであれば strace を使えば障害調査に役立つ 私が普段使っていないツールなので障害のときにとっさに扱えるよう練習しておく</description><content>&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前155cmで、ストレッチ後161cmだった。開始前の数値が悪いけど、とくに調子が悪いというわけでもなかったので計測の仕方がよくなかったか、たまたま足の開き方が悪かったかといったところだろう。昨日、高級時計と投資の話しを聞いたのでトレーナーさんとお金があったら何に使う話しが盛り上がった。トレーナーさんも庶民的な方でとくにお金があっても贅沢をしたいというものでもないらしい。私も改めてお金があったら何がしたいかを考えてみてもお金を使ってやりたいことはとくにないなというのが率直な思いでもある。私には自分がやったことのないことをやってみたいという思いしかなく、そのためにお金を使ってきた側面も多々あるけれど、お金を直接的に使って何かをやるというよりも、生活できるだけのお金があれば、その時間に自分がやったことのないことに挑戦して人生を楽しむということぐらいしかやることはないんだなと、トレーナーさんと話していて考えたりしていた。&lt;/p>
&lt;h2 id="os-雑談">os 雑談&lt;/h2>
&lt;p>午後から昨日の障害のふりかえりといくつか調査をして、夕方におがわさんに声をかけたら話し相手になってくれると返ってきた。障害のふりかえりをした後に課題管理の雑談もしていて4時間弱ぐらい話してた。私自身、反省しないといけないとは思っていたのでおがわさんはちゃんと指摘をしてくれた。この歳になると私を叱ってくれる人はいない。たまに失敗したときにおがわさんに話して然るべき指摘をしてもらえるのは本当にありがたい。&lt;/p>
&lt;blockquote>
&lt;p>kubernetes がどうやって動いているのかを理解して運用しているのか？&lt;/p>
&lt;p>コンピューターがどうやって動いているのかを理解しているのか？&lt;/p>
&lt;/blockquote>
&lt;p>私が未熟で理解できていなかったからこんな障害を見過ごしていた。システム障害が発生しても人生は終わりじゃない。反省してから次につなげる。おがわさんと話していて、os の仕組みや機能についていくつか教えてもらった。&lt;/p>
&lt;ul>
&lt;li>制限対象の違い
&lt;ul>
&lt;li>ulimit はユーザーに対する制限&lt;/li>
&lt;li>/proc ファイルシステムはシステムに対する制限&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>/proc/sys/kernel/pid_max&lt;/code> は kernel のデフォルト値として 32768 が設定されているが、systemd を使っていれば値を変更している場合がある
&lt;ul>
&lt;li>私の ubuntu マシンだと 4194304 が設定されていた&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>コンテナ内から &lt;code>/sys/fs/cgroup/memory/memory.usage_in_bytes&lt;/code> をみると、コンテナが使っているメモリ量なのか？
&lt;ul>
&lt;li>cgroup の使い方次第で変わる、システムの値かもしれないしコンテナの値かもしれない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ゾンビプロセスに残っている情報は親プロセスが子プロセスの統計情報を取得するために必要なもの
&lt;ul>
&lt;li>どんな子プロセスも一時的にはゾンビプロセスになる&lt;/li>
&lt;li>kernel の task_struct 構造体やその他の構造体、リンクしている情報などをすべて足すと1つのゾンビプロセスが10数 KiB 程度ではないか
&lt;ul>
&lt;li>仮に 15 KiB として 32000 個のゾンビプロセスがあると約 469 MiB のメモリ量になるのでだいたい数字があう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ユーザー空間とカーネル空間の違いを理解できるようになった方がよい
&lt;ul>
&lt;li>システムコールの fork がエラーになるのはシステムがおかしいとすぐに気付けるはず
&lt;ul>
&lt;li>fork がエラーになる原因として考えられるのはメモリを確保できないか、pid_max に達したか、いずれにしてもエラーコードをみれば推測がつくのではないか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>環境にログインできるのであれば &lt;a href="https://strace.io/">strace&lt;/a> を使えば障害調査に役立つ
&lt;ul>
&lt;li>私が普段使っていないツールなので障害のときにとっさに扱えるよう練習しておく&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content></item></channel></rss>