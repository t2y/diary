<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quarkus on forest nook</title><link>/diary/tags/quarkus/</link><description>Recent content in Quarkus on forest nook</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Sun, 25 Sep 2022 13:14:22 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/quarkus/index.xml" rel="self" type="application/rss+xml"/><item><title>quarkus のアプリ開発が楽しくなってきた</title><link>/diary/posts/2022/0925/</link><pubDate>Sun, 25 Sep 2022 13:14:22 +0900</pubDate><guid>/diary/posts/2022/0925/</guid><description>4時に寝て8時に起きた。昨日は久しぶりに夜更しして quarkus の調べものをしてた。新しいものを学ぶのはおもしろい。
ストレッチ 今週末は本当は実家に帰る予定だったのが、台風による雨で田んぼのコンディションがよくないので断念した。日曜日の夜、田んぼ仕事を終えて筋肉痛のところにストレッチしてもらう予定は変わってしまった。今日の開脚幅は開始前155cmで、ストレッチ後160cmだった。いつもは朝測っているのが夜になるので数値はよくなかった。とはいえ、あまり規則正しく寝てないわりには体調がよい。気候が涼しいせいかな。トレーナーさんに来週はもう10月ですよと言われて9月は過ぎさるのが早いと改めて思った。
quarkus アプリケーションと認可フロー 昨日の続き。お昼前ぐらいからずっと quarkus のアプリケーション開発をしていた。なんやらかんやらで3日間ずっと bolt や quarkus のソースやドキュメントを読んでいた。徐々に理解度が増えてきて、できることも増えてきて楽しくなってきた。web 系だと di に google/guice を使うものも多いけど、エンタープライズ系だと cdi なのかなぁとか思ってた。わからんけど。以前にも cdi のドキュメントを読んで関心があった。cdi は本当によく出来ていると思う。一方で難し過ぎて、そこまでコンテキストを厳密に管理する必要があるアプリケーションもそうないのかもなぁとは思ってた。今日 quarkus でアプリケーション開発していてドキュメントを読みながらやってみたところが次になる。
CONTEXTS AND DEPENDENCY INJECTION USING THE REST CLIENT WRITING JSON REST SERVICES だいたい雰囲気は理解できてきたので backlog の Authentication &amp;amp; Authorization に書いてある oauth2 の Authorization Code Grant のフローを実装していた。access token の取得と refresh はできたのでこれを db に保存するのを明日以降にやってみる。</description><content>&lt;p>4時に寝て8時に起きた。昨日は久しぶりに夜更しして quarkus の調べものをしてた。新しいものを学ぶのはおもしろい。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週末は本当は実家に帰る予定だったのが、台風による雨で田んぼのコンディションがよくないので断念した。日曜日の夜、田んぼ仕事を終えて筋肉痛のところにストレッチしてもらう予定は変わってしまった。今日の開脚幅は開始前155cmで、ストレッチ後160cmだった。いつもは朝測っているのが夜になるので数値はよくなかった。とはいえ、あまり規則正しく寝てないわりには体調がよい。気候が涼しいせいかな。トレーナーさんに来週はもう10月ですよと言われて9月は過ぎさるのが早いと改めて思った。&lt;/p>
&lt;h2 id="quarkus-アプリケーションと認可フロー">quarkus アプリケーションと認可フロー&lt;/h2>
&lt;p>昨日の続き。お昼前ぐらいからずっと quarkus のアプリケーション開発をしていた。なんやらかんやらで3日間ずっと bolt や quarkus のソースやドキュメントを読んでいた。徐々に理解度が増えてきて、できることも増えてきて楽しくなってきた。web 系だと di に &lt;a href="https://github.com/google/guice">google/guice&lt;/a> を使うものも多いけど、エンタープライズ系だと &lt;a href="https://quarkus.io/guides/cdi">cdi&lt;/a> なのかなぁとか思ってた。わからんけど。以前にも cdi のドキュメントを読んで関心があった。cdi は本当によく出来ていると思う。一方で難し過ぎて、そこまでコンテキストを厳密に管理する必要があるアプリケーションもそうないのかもなぁとは思ってた。今日 quarkus でアプリケーション開発していてドキュメントを読みながらやってみたところが次になる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://quarkus.io/guides/cdi-reference">CONTEXTS AND DEPENDENCY INJECTION&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://quarkus.io/guides/rest-client">USING THE REST CLIENT&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://quarkus.io/guides/rest-json">WRITING JSON REST SERVICES&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>だいたい雰囲気は理解できてきたので backlog の &lt;a href="https://developer.nulab.com/docs/backlog/auth/">Authentication &amp;amp; Authorization&lt;/a> に書いてある oauth2 の &lt;em>Authorization Code Grant&lt;/em> のフローを実装していた。access token の取得と refresh はできたのでこれを db に保存するのを明日以降にやってみる。&lt;/p></content></item><item><title>quarkus のビルド環境に手間取った</title><link>/diary/posts/2022/0924/</link><pubDate>Sat, 24 Sep 2022 12:36:28 +0900</pubDate><guid>/diary/posts/2022/0924/</guid><description>1時に寝て7時に起きた。休みだとやっぱりだらだらしてしまうな。
bolt for java on quarkus 昨日の続き。スクラッチから quarkus のアプリケーションの設定を gradle で行う。quarkus の上で slack apps としてのコマンドとイベントの振る舞いだけ確認した。
https://github.com/t2y/bolt-java-sample 私は新規に開発する java アプリケーションは gradle を使うようにしている。これは java のよくないところだろうけれど、言語コミュニティが提供するパッケージマネージャやビルドツールがないから複数のツールが乱立している。maven から gradle に緩やかに移行していくのかな？と私は考えていたけれど、昔からあるライブラリのビルドツールを変更するのは労力に見合うメリットがないのか、maven も依然としてずっと使われ続けていくのかもしれない。maven と gradle の両対応という保守コストは、この先しばらく java コミュニティが抱えていく保守コストと言えるのかもしれない。quarkus はさらに独自の Quarkus CLI というビルドツールを提供している。そのため、ビルドのための設定だけで quarkus cli, maven, gradle の3つの方法があり、ドキュメントにもそれぞれの設定方法が書いてある。これを保守する方も使う方もややこしくて大変だなぁという印象を受けた。
BUILDING QUARKUS APPS WITH GRADLE をみながら次の maven cli で作った gradle プロジェクトのテンプレートをみながら build.gradle の設定をした。
$ mvn io.quarkus.platform:quarkus-maven-plugin:2.12.3.Final:create \ -DprojectGroupId=my-groupId \ -DprojectArtifactId=my-artifactId \ -Dextensions=&amp;#34;resteasy-reactive,resteasy-reactive-jackson&amp;#34; \ -DbuildTool=gradle あと私は設定ファイルを yaml で管理したいので次の拡張も追加した。gradle タスクでも定義されていて次のように実行する。
./gradlew addExtension --extensions=&amp;#34;quarkus-config-yaml&amp;#34; この cli がやっていることは基本的に dependencies に次の1行を追加するだけ。</description><content>&lt;p>1時に寝て7時に起きた。休みだとやっぱりだらだらしてしまうな。&lt;/p>
&lt;h2 id="bolt-for-java-on-quarkus">bolt for java on quarkus&lt;/h2>
&lt;p>昨日の続き。スクラッチから quarkus のアプリケーションの設定を gradle で行う。quarkus の上で slack apps としてのコマンドとイベントの振る舞いだけ確認した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/bolt-java-sample">https://github.com/t2y/bolt-java-sample&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>私は新規に開発する java アプリケーションは &lt;a href="https://gradle.org/">gradle&lt;/a> を使うようにしている。これは java のよくないところだろうけれど、言語コミュニティが提供するパッケージマネージャやビルドツールがないから複数のツールが乱立している。maven から gradle に緩やかに移行していくのかな？と私は考えていたけれど、昔からあるライブラリのビルドツールを変更するのは労力に見合うメリットがないのか、maven も依然としてずっと使われ続けていくのかもしれない。maven と gradle の両対応という保守コストは、この先しばらく java コミュニティが抱えていく保守コストと言えるのかもしれない。quarkus はさらに独自の &lt;a href="https://quarkus.io/guides/cli-tooling">Quarkus CLI&lt;/a> というビルドツールを提供している。そのため、ビルドのための設定だけで quarkus cli, maven, gradle の3つの方法があり、ドキュメントにもそれぞれの設定方法が書いてある。これを保守する方も使う方もややこしくて大変だなぁという印象を受けた。&lt;/p>
&lt;p>&lt;a href="https://quarkus.io/guides/gradle-tooling">BUILDING QUARKUS APPS WITH GRADLE&lt;/a> をみながら次の maven cli で作った gradle プロジェクトのテンプレートをみながら build.gradle の設定をした。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ mvn io.quarkus.platform:quarkus-maven-plugin:2.12.3.Final:create &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -DprojectGroupId&lt;span style="color:#f92672">=&lt;/span>my-groupId &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -DprojectArtifactId&lt;span style="color:#f92672">=&lt;/span>my-artifactId &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -Dextensions&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;resteasy-reactive,resteasy-reactive-jackson&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -DbuildTool&lt;span style="color:#f92672">=&lt;/span>gradle
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>あと私は設定ファイルを yaml で管理したいので次の拡張も追加した。gradle タスクでも定義されていて次のように実行する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./gradlew addExtension --extensions&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;quarkus-config-yaml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この cli がやっていることは基本的に dependencies に次の1行を追加するだけ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>dependencies &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation &lt;span style="color:#e6db74">&amp;#39;io.quarkus:quarkus-config-yaml&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>設定ファイルを yaml から読み込めるようになると初期設定は次のようになる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ vi app/src/main/resources/application.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>quarkus:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> http:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> port: &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> level: INFO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> category:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;com.slack.api&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> level: DEBUG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;tutorial.bolt.sample&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> level: DEBUG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> package:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: uber-jar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>開発サーバーは次のようにして起動する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ./gradlew quarkusDev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>quarkusDev enables hot deployment with background compilation, which means that when you modify your Java files or your resource files and refresh your browser these changes will automatically take effect. This works too for resource files like the configuration property file. The act of refreshing the browser triggers a scan of the workspace, and if any changes are detected the Java files are compiled, and the application is redeployed, then your request is serviced by the redeployed application. If there are any issues with compilation or deployment an error page will let you know.&lt;/p>
&lt;p>&lt;a href="https://quarkus.io/guides/gradle-tooling#dev-mode">https://quarkus.io/guides/gradle-tooling#dev-mode&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>hot deployment 機能のおかげでソースや設定ファイルを変更すると自動的に反映される。他の言語なら普通の機能かもしれないけど、java でもそういう仕組みが普通になったんだなと思って感心した。変化に付いていけない開発者のような気持ちになった。&lt;/p></content></item><item><title>slack apps 開発に着手</title><link>/diary/posts/2022/0923/</link><pubDate>Fri, 23 Sep 2022 10:17:02 +0900</pubDate><guid>/diary/posts/2022/0923/</guid><description>0時に寝て6時に起きた。あまりうまく眠れなかった。
bolt for java slack apps を開発するためのフレームワークとして bolt と呼ばれる高レベルのフレームワークが提供されている。このフレームワークは slack sdk を使って作られていて、slack apps の開発が簡単になるようにユーティリティが提供されている。The Bolt family of SDKs によると、javascript, python, java 向けに提供されている。以前 bizpy でも slack アプリ開発のチュートリアルの勉強会をしたことがある。そのときは bolot for python を使っていた。
python-study/BizPy/slack 一度触ったことがあったので bolt がどういうものかはすでに知っている。その java 版を使って slack apps を作ってみようと取り組み始めた。まずはチュートリアルを一通りやってみようと次のリポジトリでやってみた。
https://github.com/t2y/bolt-java-sample チュートリアルの内容を動かすだけならすぐできた。次に java の waf は何を使おうかを調べてた。Supported Web Frameworks によると、次の4つがある。
spring boot micronaut quarkus undertow helidon se さらに slackapi/java-slack-sdk#modules をみると、次の2つも追加されている。どちらも kotlin 向けのフレームワークらしい。
http4k ktor それぞれのフレームワークの説明を読んだり、この機に kotlin をやってみることも検討してみた。長期間の保守を前提にすると、一時的に触るだけの言語を使うのもどうかな？と思うところはあってやはり java でやることにした。spring boot はお仕事でよく使っていてどういうものかを理解しているので選択するなら他の3つのどれか。
Quarkus was created to enable Java developers to create applications for a modern, cloud-native world.</description><content>&lt;p>0時に寝て6時に起きた。あまりうまく眠れなかった。&lt;/p>
&lt;h2 id="bolt-for-java">bolt for java&lt;/h2>
&lt;p>slack apps を開発するためのフレームワークとして &lt;em>bolt&lt;/em> と呼ばれる高レベルのフレームワークが提供されている。このフレームワークは &lt;em>slack sdk&lt;/em> を使って作られていて、slack apps の開発が簡単になるようにユーティリティが提供されている。&lt;a href="https://api.slack.com/tools/bolt">The Bolt family of SDKs&lt;/a> によると、javascript, python, java 向けに提供されている。以前 bizpy でも slack アプリ開発のチュートリアルの勉強会をしたことがある。そのときは bolot for python を使っていた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/python-study/tree/master/BizPy/slack">python-study/BizPy/slack&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>一度触ったことがあったので &lt;em>bolt&lt;/em> がどういうものかはすでに知っている。その java 版を使って slack apps を作ってみようと取り組み始めた。まずはチュートリアルを一通りやってみようと次のリポジトリでやってみた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/bolt-java-sample">https://github.com/t2y/bolt-java-sample&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>チュートリアルの内容を動かすだけならすぐできた。次に java の waf は何を使おうかを調べてた。&lt;a href="https://slack.dev/java-slack-sdk/guides/supported-web-frameworks">Supported Web Frameworks&lt;/a> によると、次の4つがある。&lt;/p>
&lt;ul>
&lt;li>spring boot&lt;/li>
&lt;li>micronaut&lt;/li>
&lt;li>quarkus undertow&lt;/li>
&lt;li>helidon se&lt;/li>
&lt;/ul>
&lt;p>さらに &lt;a href="https://github.com/slackapi/java-slack-sdk#modules">slackapi/java-slack-sdk#modules&lt;/a> をみると、次の2つも追加されている。どちらも kotlin 向けのフレームワークらしい。&lt;/p>
&lt;ul>
&lt;li>http4k&lt;/li>
&lt;li>ktor&lt;/li>
&lt;/ul>
&lt;p>それぞれのフレームワークの説明を読んだり、この機に kotlin をやってみることも検討してみた。長期間の保守を前提にすると、一時的に触るだけの言語を使うのもどうかな？と思うところはあってやはり java でやることにした。spring boot はお仕事でよく使っていてどういうものかを理解しているので選択するなら他の3つのどれか。&lt;/p>
&lt;blockquote>
&lt;p>Quarkus was created to enable Java developers to create applications for a modern, cloud-native world. Quarkus is a Kubernetes-native Java framework tailored for GraalVM and HotSpot, crafted from best-of-breed Java libraries and standards. The goal is to make Java the leading platform in Kubernetes and serverless environments while offering developers a framework to address a wider range of distributed application architectures.&lt;/p>
&lt;p>&lt;a href="https://quarkus.io/about/">https://quarkus.io/about/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>いま kubernetes に好印象をもっていることもあり、この説明を読んで &lt;a href="https://quarkus.io/">quarkus&lt;/a> を選択することに決めた。そんなことをつぶやいていたら、せらさんからいくつかアドバイスをいただけた。slack について何かをつぶやくと100%返信がくる (ソースは私の経験) 。感謝。&lt;/p>
&lt;p>&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">そうですね。App クラス側は servlet やその他のライタイム含め、何にも依存していないので標準でアダプターがない場合にも自分で書けば任意の Web フレークワークで動かせます。 &lt;a href="https://twitter.com/hashtag/SlackDevJP?src=hash&amp;amp;ref_src=twsrc%5Etfw">#SlackDevJP&lt;/a>&lt;/p>&amp;mdash; Kazuhiro Sera (瀬良) (@seratch_ja) &lt;a href="https://twitter.com/seratch_ja/status/1573205191071240192?ref_src=twsrc%5Etfw">September 23, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">Quarkus いいですよ！ただ、GraalVM については少なくとも短期的にはサポート予定ありません。 &lt;a href="https://t.co/0cVGgohLez">https://t.co/0cVGgohLez&lt;/a> &lt;a href="https://twitter.com/hashtag/SlackDevJP?src=hash&amp;amp;ref_src=twsrc%5Etfw">#SlackDevJP&lt;/a>&lt;/p>&amp;mdash; Kazuhiro Sera (瀬良) (@seratch_ja) &lt;a href="https://twitter.com/seratch_ja/status/1573205502808686598?ref_src=twsrc%5Etfw">September 23, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;/p>
&lt;p>java アプリケーションを実行可能なバイナリにコンパイルする機能を &lt;a href="https://www.graalvm.org/">graalvm&lt;/a> が提供している。graalvm ではこのバイナリのことを &lt;a href="https://www.graalvm.org/22.1/reference-manual/native-image/">native image&lt;/a> と呼んでいる。quarkus は java の web アプリケーションフレームワークであり、graalvm を使って native image を作ることも考慮して設計されている。コンテナでデプロイすることを想定したフレームワークと言える。残念ながら slack sdk が使っているライブラリである gson はリフレクションを多用していて、それが graalvm とは相性が悪いだろうという話しで現時点では native image 化は難しいみたい。たしか native image でリフレクションを使うには使っている箇所を設定にすべて列挙しないといけなかった気がする。リフレクションのような動的に用いるものと静的な設定は相性が悪く、がんばれば特定のバージョンで動くものは設定できるかもしれないけど、ライブラリのようなものでバージョンアップに追随するのはしんどいという話しなのかなと思う。&lt;/p></content></item></channel></rss>