<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>medium on forest nook</title><link>/diary/tags/medium/</link><description>Recent content in medium on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Wed, 28 Sep 2022 08:20:18 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/medium/index.xml" rel="self" type="application/rss+xml"/><item><title>url エンコーディングと uri の仕様</title><link>/diary/posts/2022/0928/</link><pubDate>Wed, 28 Sep 2022 08:20:18 +0900</pubDate><guid>/diary/posts/2022/0928/</guid><description>1時に寝ようとして、寝てたか起きてたかわからない時間を過ごして7時に起きた。
WebClient と query string のエンコーディング 以前にも WebClient の基本 について少し書いた。data={&amp;quot;x&amp;quot;: 1, &amp;quot;y&amp;quot;: 2} のような json 文字列を query string でリクエストしようとしたときに少しはまったので書いておく。java 標準ライブラリの URLEncoder を使ってエンコードするとスペースが + になる。これは html の仕様として正しいが、uri の仕様としては不正になる。そのため + を %20 に置き換える必要がある。
private String encode(String data) throws UnsupportedEncodingException { // NOTE: the URI doesn&amp;#39;t allow &amp;#39;+&amp;#39; character return URLEncoder.encode(data, StandardCharsets.UTF_8).replace(&amp;#34;+&amp;#34;, &amp;#34;%20&amp;#34;); } このロジックで {&amp;quot;x&amp;quot;: 1, &amp;quot;y&amp;quot;: 2} を url エンコードすると次の文字列になる。
%7B%22x%22%3A%201%2C%20%22y%22%3A%202%7D あらかじめ url エンコーディングした文字列を渡すと、今度は WebClient が % を %25 にさらにエンコーディングしてしまう。Spring WebClient Requests with Parameters 6.</description><content>&lt;p>1時に寝ようとして、寝てたか起きてたかわからない時間を過ごして7時に起きた。&lt;/p>
&lt;h2 id="webclient-と-query-string-のエンコーディング">WebClient と query string のエンコーディング&lt;/h2>
&lt;p>以前にも &lt;a href="/diary/diary/posts/2022/0722/#spring-webflux-とプロキシ">WebClient の基本&lt;/a> について少し書いた。&lt;code>data={&amp;quot;x&amp;quot;: 1, &amp;quot;y&amp;quot;: 2}&lt;/code> のような json 文字列を query string でリクエストしようとしたときに少しはまったので書いておく。java 標準ライブラリの URLEncoder を使ってエンコードするとスペースが &lt;code>+&lt;/code> になる。これは html の仕様として正しいが、uri の仕様としては不正になる。そのため &lt;code>+&lt;/code> を &lt;code>%20&lt;/code> に置き換える必要がある。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> String &lt;span style="color:#a6e22e">encode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String data&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">throws&lt;/span> UnsupportedEncodingException &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// NOTE: the URI doesn&amp;#39;t allow &amp;#39;+&amp;#39; character
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> URLEncoder&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">encode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>data&lt;span style="color:#f92672">,&lt;/span> StandardCharsets&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">UTF_8&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">replace&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;+&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;%20&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このロジックで &lt;code>{&amp;quot;x&amp;quot;: 1, &amp;quot;y&amp;quot;: 2}&lt;/code> を url エンコードすると次の文字列になる。&lt;/p>
&lt;pre tabindex="0">&lt;code>%7B%22x%22%3A%201%2C%20%22y%22%3A%202%7D
&lt;/code>&lt;/pre>&lt;p>あらかじめ url エンコーディングした文字列を渡すと、今度は WebClient が &lt;code>%&lt;/code> を &lt;code>%25&lt;/code> にさらにエンコーディングしてしまう。&lt;a href="https://www.baeldung.com/webflux-webclient-parameters#encoding-mode">Spring WebClient Requests with Parameters 6.Encoding Mode&lt;/a> によると、次の4つのエンコーディングモードをカスタマイズできる。デフォルトは &lt;em>TEMPLATE_AND_VALUES&lt;/em> らしい。&lt;/p>
&lt;ul>
&lt;li>TEMPLATE_AND_VALUES: Pre-encode the URI template and strictly encode URI variables when expanded&lt;/li>
&lt;li>VALUES_ONLY: Do not encode the URI template, but strictly encode URI variables after expanding them into the template&lt;/li>
&lt;li>URI_COMPONENTS: Encode URI component value after expending URI variables&lt;/li>
&lt;li>NONE: No encoding will be applied&lt;/li>
&lt;/ul>
&lt;p>もとの url エンコード済みの文字列が次のようなものになってしまう。&lt;/p>
&lt;pre tabindex="0">&lt;code>%257B%2522x%2522%253A%25...
&lt;/code>&lt;/pre>&lt;p>既存の実装をあまり変えたくもなくてやや力技で実装した。局所的な変更だからまぁいっか。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>webClient&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">uri&lt;/span>&lt;span style="color:#f92672">(&lt;/span>uriBuilder &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var uriObj &lt;span style="color:#f92672">=&lt;/span> uriBuilder&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">(&lt;/span>getControllerBasePath&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">+&lt;/span> path&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">queryParams&lt;/span>&lt;span style="color:#f92672">(&lt;/span>query&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">build&lt;/span>&lt;span style="color:#f92672">(&lt;/span>pathParams&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>encodedData &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var uri &lt;span style="color:#f92672">=&lt;/span> uriObj&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">toString&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var connector &lt;span style="color:#f92672">=&lt;/span> uri&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">contains&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;?&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;amp;&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;?&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uriObj &lt;span style="color:#f92672">=&lt;/span> URI&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">format&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;%s%sdata=%s&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> uri&lt;span style="color:#f92672">,&lt;/span> connector&lt;span style="color:#f92672">,&lt;/span> encodedData&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> uriObj&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}).&lt;/span>&lt;span style="color:#a6e22e">retrieve&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="よいエラーメッセージわるいエラーメッセージ">よいエラーメッセージ、わるいエラーメッセージ&lt;/h2>
&lt;p>タイトルに惹かれてちょっと期待外れ。&lt;em>art&lt;/em> というと日本人は芸術と高度なものを期待しがちだけど、&lt;em>the art of&lt;/em> だと技術の体系といった意味合いもあるのでちょとしたノウハウを解説する技術ブログのようなものでも誤っていない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/s/user-friendly/the-art-of-the-error-message-9f878d0bff80">The Art of the Error Message&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ユーザー体験をよくするためのエラーメッセージのコツとして次の3つを提案している。&lt;/p>
&lt;ul>
&lt;li>何が起きたのか、なぜ起きたのかを説明する&lt;/li>
&lt;li>次のステップを提案する&lt;/li>
&lt;li>適切なトーンで書く&lt;/li>
&lt;/ul>
&lt;p>この3つの具体例としてどのようなものかを説明している。私にとってはそう目新しいものではないが、エラーメッセージにトーンという概念はなかったので最近の流行りなのかなと思った。&lt;/p></content></item><item><title>蓋然性という言葉がよくわからなかった</title><link>/diary/posts/2022/0912/</link><pubDate>Mon, 12 Sep 2022 08:06:42 +0900</pubDate><guid>/diary/posts/2022/0912/</guid><description>0時に寝て7時に起きた。朝からタスクの詳細をヒアリングして web api と画面を作るだけの簡単な作業。しばらく (1-2週間ぐらい？) は暇な日々が続きそう。
蓋然性 (probability) と可能性 (possibility) の違い わかりやすかった。
夏目漱石が授業で言った例では、「教壇で喋る講師が逆立ちする可能性はあるが、蓋然性はない。」というものがあります。
「判例の用いる確率の用語」～元公務員講師のコラム～
なんとなく稼ぐ 4 Passive Income Streams for a Programmer 次の4つの手法による収入を passive income (受動的な収入) と定義している。
ソフトウェアとデジタル資産を売る ブログを始める 自分の youtube チャンネルを始める フリーランスオンライン それぞれみていくと、ソフトウェアを売るというのはアプリストアに代表されるようなマーケットプレイスで販売すること。デジタル資産とは電子書籍など。ブログは medium のようなサブスクリプションを使う。youtube はコンテンツを作って広告収入を得るかな。オンラインでフリーランスとして副収入を稼ぐという方法。どれもよく知られた当たり前の手法だけど、簡潔にまとまっていてわかりやすかった。</description><content>&lt;p>0時に寝て7時に起きた。朝からタスクの詳細をヒアリングして web api と画面を作るだけの簡単な作業。しばらく (1-2週間ぐらい？) は暇な日々が続きそう。&lt;/p>
&lt;h2 id="蓋然性-probability-と可能性-possibility-の違い">蓋然性 (probability) と可能性 (possibility) の違い&lt;/h2>
&lt;p>わかりやすかった。&lt;/p>
&lt;blockquote>
&lt;p>夏目漱石が授業で言った例では、「教壇で喋る講師が逆立ちする可能性はあるが、蓋然性はない。」というものがあります。&lt;/p>
&lt;p>&lt;a href="https://komuin.umedai.jp/introduce/k20210614/">「判例の用いる確率の用語」～元公務員講師のコラム～&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="なんとなく稼ぐ">なんとなく稼ぐ&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://javascript.plainenglish.io/4-passive-income-streams-for-a-programmer-2fe593ac2df9">4 Passive Income Streams for a Programmer&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>次の4つの手法による収入を &lt;em>passive income&lt;/em> (受動的な収入) と定義している。&lt;/p>
&lt;ol>
&lt;li>ソフトウェアとデジタル資産を売る&lt;/li>
&lt;li>ブログを始める&lt;/li>
&lt;li>自分の youtube チャンネルを始める&lt;/li>
&lt;li>フリーランスオンライン&lt;/li>
&lt;/ol>
&lt;p>それぞれみていくと、ソフトウェアを売るというのはアプリストアに代表されるようなマーケットプレイスで販売すること。デジタル資産とは電子書籍など。ブログは medium のようなサブスクリプションを使う。youtube はコンテンツを作って広告収入を得るかな。オンラインでフリーランスとして副収入を稼ぐという方法。どれもよく知られた当たり前の手法だけど、簡潔にまとまっていてわかりやすかった。&lt;/p></content></item><item><title>スキルの定量化とお仕事探し</title><link>/diary/posts/2022/0911/</link><pubDate>Sun, 11 Sep 2022 15:07:06 +0900</pubDate><guid>/diary/posts/2022/0911/</guid><description>0時に寝て7時に起きた。直近は日曜日はだらだらしてたんだけど、すんなり起きれた。
お仕事探し offers さんのカジュアル面談 の雰囲気から企業に直接応募するプラットフォームの方が、私の経歴や実績の詳細を確認しやすいので面談に進みやすいのではないかとみている。そこで findy と lapras のプロフィールを作成してみた。これまで oss 活動やブログなどでアウトプットしていた資産がたくさんあるのでレベルはしょぼいにも関わらず、これらのプラットフォーム上ではそこそこよい数値がアルゴリズム的には算出される。プラットフォーム側としては転職やエンゲージメントを高めたいという意図があるから、ゴーストアカウントのようなものも含めて算出すると普通の人は高めの数字が算出されるのではないかと推測する。
やってみた / 【スキル偏差値v2の診断結果】
エンジニア向けスキル偏差値の診断結果は、Total 81.0、Python 81.0、HTML 80.0、Java 78.0でした。あなたもスキル偏差値をチェックしよう！ https://t.co/4E4ibyevz0 #findy #スキル偏差値v2
&amp;mdash; Tetsuya Morimoto (@t2y) September 11, 2022 findy さんのスキル偏差値によると、想定年収予測は1060-1160万円らしい。この数値は起業する前のサラリーマン時代の年収に近いのでそんなにずれてはいない。lapras さんの公開プロフィール によると、技術力が4.01で約170万人中668位だというのは上位 0.04% に属することになってしまう。んな、あほなという思いはある。とはいえ、自己申告の経歴をいくらでも盛れる職務経歴書よりも、客観的なアルゴリズムで評価できる指標の方が絶対値が適切かは置いておいても、相対評価において他の候補者と比較できるのを好む採用担当者もいるだろう。匿名の一般的な職務経歴書を用いる remogu さんの選考 は書類選考でばんばん落ちまくる。それに比べたら、アルゴリズムで相対的によい数値が出ているプラットフォームの方が面談に進みやすいのではないかという話し。本当にそうかどうかの仮説はこれから検証する。
google の従業員が働いていないという発言の真意 昨日たまたま medium のダイジェストでみかけた記事を読んだらおもしろかったので、なるべく余裕のある日は medium の記事を1つ読むようにしてみようかと思う。言うても deepl を使って斜め読みして大意を掴む程度なので日本語の記事を読むのとそんなに時間が取られるわけではないと思う。今日は次の記事を読んだ。
Why Google Employees Don’t Work プログラミングにおける生産性とはどういうものかを説明しつつ、google の ceo がいう生産性が十分ではないという発言の真意は、従業員が業務時間にさぼっているとか怠慢だとかいう意味ではなく、google のビジネス全体がこれまで達成してきたのと同じ業務時間では期待した成果を達成できなくなってきているのではないかと考察している。
At some point, productivity measurement becomes Schrödinger’s cat.
また著者の引用？では生産性の計測とはシュレディンガーの猫のようなものだという話題もおもしろい。どんな会社もある時点での生産性の測定はシュレディンガーの猫のようなものになる。セグメントを分割し過ぎると返ってストレスとなり、余計な混乱を招き、計測そのものが生産性を低下させる。生産性の測定はマクロレベルでやるのが理に適っていて、工場時代のマネジメントをもつ amazon は大量の人員削減をしつつも成し遂げた。google のようなワークカルチャーをもつ会社ならその気になればスマートにできるだろう。一方で google という会社はすでにリベラルな極みにある企業文化をもっているため、生産性を測るような試みは組織全体に大きな感情的ダメージを与えるだろう。その結果として amazon と同じような道を歩むのではないかと。</description><content>&lt;p>0時に寝て7時に起きた。直近は日曜日はだらだらしてたんだけど、すんなり起きれた。&lt;/p>
&lt;h2 id="お仕事探し">お仕事探し&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0909/#カジュアル面談">offers さんのカジュアル面談&lt;/a> の雰囲気から企業に直接応募するプラットフォームの方が、私の経歴や実績の詳細を確認しやすいので面談に進みやすいのではないかとみている。そこで &lt;a href="https://findy-code.io/">findy&lt;/a> と &lt;a href="https://lapras.com/person">lapras&lt;/a> のプロフィールを作成してみた。これまで oss 活動やブログなどでアウトプットしていた資産がたくさんあるのでレベルはしょぼいにも関わらず、これらのプラットフォーム上ではそこそこよい数値がアルゴリズム的には算出される。プラットフォーム側としては転職やエンゲージメントを高めたいという意図があるから、ゴーストアカウントのようなものも含めて算出すると普通の人は高めの数字が算出されるのではないかと推測する。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">やってみた / 【スキル偏差値v2の診断結果】&lt;br>&lt;br>エンジニア向けスキル偏差値の診断結果は、Total 81.0、Python 81.0、HTML 80.0、Java 78.0でした。あなたもスキル偏差値をチェックしよう！ &lt;a href="https://t.co/4E4ibyevz0">https://t.co/4E4ibyevz0&lt;/a> &lt;a href="https://twitter.com/hashtag/findy?src=hash&amp;amp;ref_src=twsrc%5Etfw">#findy&lt;/a> &lt;a href="https://twitter.com/hashtag/%E3%82%B9%E3%82%AD%E3%83%AB%E5%81%8F%E5%B7%AE%E5%80%A4v2?src=hash&amp;amp;ref_src=twsrc%5Etfw">#スキル偏差値v2&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1568809397673152512?ref_src=twsrc%5Etfw">September 11, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>findy さんのスキル偏差値によると、想定年収予測は1060-1160万円らしい。この数値は起業する前のサラリーマン時代の年収に近いのでそんなにずれてはいない。&lt;a href="https://lapras.com/public/t2y">lapras さんの公開プロフィール&lt;/a> によると、技術力が4.01で約170万人中668位だというのは上位 0.04% に属することになってしまう。んな、あほなという思いはある。とはいえ、自己申告の経歴をいくらでも盛れる職務経歴書よりも、客観的なアルゴリズムで評価できる指標の方が絶対値が適切かは置いておいても、相対評価において他の候補者と比較できるのを好む採用担当者もいるだろう。&lt;a href="/diary/diary/posts/2022/0811/##リモートワーク前提のお仕事">匿名の一般的な職務経歴書を用いる remogu さんの選考&lt;/a> は書類選考でばんばん落ちまくる。それに比べたら、アルゴリズムで相対的によい数値が出ているプラットフォームの方が面談に進みやすいのではないかという話し。本当にそうかどうかの仮説はこれから検証する。&lt;/p>
&lt;h2 id="google-の従業員が働いていないという発言の真意">google の従業員が働いていないという発言の真意&lt;/h2>
&lt;p>昨日たまたま medium のダイジェストでみかけた記事を読んだらおもしろかったので、なるべく余裕のある日は medium の記事を1つ読むようにしてみようかと思う。言うても deepl を使って斜め読みして大意を掴む程度なので日本語の記事を読むのとそんなに時間が取られるわけではないと思う。今日は次の記事を読んだ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://levelup.gitconnected.com/why-google-employees-dont-work-f6a7521a6ed6">Why Google Employees Don’t Work&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>プログラミングにおける生産性とはどういうものかを説明しつつ、google の ceo がいう生産性が十分ではないという発言の真意は、従業員が業務時間にさぼっているとか怠慢だとかいう意味ではなく、google のビジネス全体がこれまで達成してきたのと同じ業務時間では期待した成果を達成できなくなってきているのではないかと考察している。&lt;/p>
&lt;blockquote>
&lt;p>At some point, productivity measurement becomes Schrödinger’s cat.&lt;/p>
&lt;/blockquote>
&lt;p>また著者の引用？では生産性の計測とはシュレディンガーの猫のようなものだという話題もおもしろい。どんな会社もある時点での生産性の測定はシュレディンガーの猫のようなものになる。セグメントを分割し過ぎると返ってストレスとなり、余計な混乱を招き、計測そのものが生産性を低下させる。生産性の測定はマクロレベルでやるのが理に適っていて、工場時代のマネジメントをもつ amazon は大量の人員削減をしつつも成し遂げた。google のようなワークカルチャーをもつ会社ならその気になればスマートにできるだろう。一方で google という会社はすでにリベラルな極みにある企業文化をもっているため、生産性を測るような試みは組織全体に大きな感情的ダメージを与えるだろう。その結果として amazon と同じような道を歩むのではないかと。&lt;/p>
&lt;p>シュレディンガーの猫がどういう意味かもわからなくてそれも読んでた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://nazology.net/archives/107875">「シュレーディンガーの猫」って結局どういう話なの？モヤモヤする部分を解説！&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>キャリアは知識と経験の差分でわかる</title><link>/diary/posts/2022/0910/</link><pubDate>Sat, 10 Sep 2022 11:36:32 +0900</pubDate><guid>/diary/posts/2022/0910/</guid><description>23時に寝て2時に起きてその後どうしていたかあまり覚えていないが気付いたら8時だった。
ストレッチ 今日の開脚幅は開始前160cmで、ストレッチ後163cmだった。今週も全然ストレッチできなかったのになぜか数値はよくなっていた。ストレッチを受けていて調子の悪さも感じなかったので気候が過ごしやすくなってきて体調がよくなった結果として普段の生活における活動量や新陳代謝などにも影響を与えているのかもしれない。トレーナーさんからは涼しくなったのだから運動をしてくださいと言われた。ほんとその通り。
知識と経験 You’re Not a Senior Software Engineer たまたま目を通した medium のおすすめ記事に出ていて、タイトルにひかれて斜め読みしたらおもしろかったので後で deepl を使って精読した。最近は英語の記事を deepl で訳して読んでいる。まず deepl で全訳した後に文脈から訳文の意味をとれなかったり、明らかにおかしいところだけを手直しする。著作権的に機械翻訳を公開はできないため、その翻訳内容は課題管理システムのイシューで管理している。この記事だと手直し数回ぐらいで大意を読める。普段、英語の記事を日本語アカウントで紹介することはないんだけど、これは素晴らしい内容だったのでそのまま共有することにした。軽く所感も書いてあるが、課題管理システムのイシューにはさらに詳細な分析やコメントも残している。
知識とはやり方を知っていることで、経験とはやってはいけないことを知っていること。素晴らしい記事だった。 / You’re Not a Senior Software Engineer by @repsofsunshine https://t.co/3qitFOFTJp
&amp;mdash; Tetsuya Morimoto (@t2y) September 10, 2022 多くの若いチームでは課題管理の重要性を理解していない。その無理解の原因の1つとして、ものごとを検討したり判断したりした時点では正しかったことが未来のある時点で誤りになってしまう可能性を想像できないからだと私は考えている。記憶と忘却の仕組みから前日のことですら半分以上忘れてしまうので数ヶ月前の詳細など、ほとんどの人は覚えていない。にも関わらず、日々の小さい判断の積み重ねや意思決定の履歴を記録として残さないのはなぜだろうか？それはその詳細があとで重要になるかどうか、多くのケースでその発生時点ではわからないからだ。例えば、システムのアーキテクチャに関して言えば Architectural Decision Records (ADRs) というドキュメントが提唱されている。アーキテクチャのような大きなものでさえ、明示的に残さないと経緯がわからなくなるのに、もっと小さい粒度である日々の開発や運用の誤りを、一般の (普通の) 開発者がその発生時点から数ヶ月や数年経ってふりかえって見直すことができるだろうか？いやできないというのが、多くのチームやメンバーをみてきた私の所感だ。多くのメンバーは過去のある時点の見逃しや判断ミスをなかったことにしようとする。それは無意識にしろ意識的にしろ起きやすい。客観的に詳細を確認できればなかったことになってしまうのは仕方のないことでもある。
私は課題管理システムのコメントに、こういう状況からこう判断したとか、誰それと相談してこういう事情でそうしたとか、自身の感覚からとくに意味もなく決めたとか、常々なぜに相当する内容を残している。そして、あるとき過去の経緯を見返して、そのときの判断は適切だったか、過去のある時点で気付けたはずのことを見逃してなかったか、見逃していたとすればどうすればその時に気付きを得られたか、というふりかえりを日常的なチケット整理の一環として実践している。件の medium の記事にはなぜそれが重要なのかの概念を書いてあるように私には受け取れた。課題管理 + 情報共有の需要な概念の1つだと認識して寝かせておこうと思う。</description><content>&lt;p>23時に寝て2時に起きてその後どうしていたかあまり覚えていないが気付いたら8時だった。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前160cmで、ストレッチ後163cmだった。今週も全然ストレッチできなかったのになぜか数値はよくなっていた。ストレッチを受けていて調子の悪さも感じなかったので気候が過ごしやすくなってきて体調がよくなった結果として普段の生活における活動量や新陳代謝などにも影響を与えているのかもしれない。トレーナーさんからは涼しくなったのだから運動をしてくださいと言われた。ほんとその通り。&lt;/p>
&lt;h2 id="知識と経験">知識と経験&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/vanguards-of-code/youre-not-a-senior-software-engineer-9056ef9ffb96">You’re Not a Senior Software Engineer&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>たまたま目を通した medium のおすすめ記事に出ていて、タイトルにひかれて斜め読みしたらおもしろかったので後で deepl を使って精読した。最近は英語の記事を deepl で訳して読んでいる。まず deepl で全訳した後に文脈から訳文の意味をとれなかったり、明らかにおかしいところだけを手直しする。著作権的に機械翻訳を公開はできないため、その翻訳内容は課題管理システムのイシューで管理している。この記事だと手直し数回ぐらいで大意を読める。普段、英語の記事を日本語アカウントで紹介することはないんだけど、これは素晴らしい内容だったのでそのまま共有することにした。軽く所感も書いてあるが、課題管理システムのイシューにはさらに詳細な分析やコメントも残している。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">知識とはやり方を知っていることで、経験とはやってはいけないことを知っていること。素晴らしい記事だった。 / You’re Not a Senior Software Engineer by &lt;a href="https://twitter.com/repsofsunshine?ref_src=twsrc%5Etfw">@repsofsunshine&lt;/a> &lt;a href="https://t.co/3qitFOFTJp">https://t.co/3qitFOFTJp&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1568471581961388034?ref_src=twsrc%5Etfw">September 10, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>多くの若いチームでは課題管理の重要性を理解していない。その無理解の原因の1つとして、ものごとを検討したり判断したりした時点では正しかったことが未来のある時点で誤りになってしまう可能性を想像できないからだと私は考えている。記憶と忘却の仕組みから前日のことですら半分以上忘れてしまうので数ヶ月前の詳細など、ほとんどの人は覚えていない。にも関わらず、日々の小さい判断の積み重ねや意思決定の履歴を記録として残さないのはなぜだろうか？それはその詳細があとで重要になるかどうか、多くのケースでその発生時点ではわからないからだ。例えば、システムのアーキテクチャに関して言えば &lt;a href="https://adr.github.io/">Architectural Decision Records (ADRs)&lt;/a> というドキュメントが提唱されている。アーキテクチャのような大きなものでさえ、明示的に残さないと経緯がわからなくなるのに、もっと小さい粒度である日々の開発や運用の誤りを、一般の (普通の) 開発者がその発生時点から数ヶ月や数年経ってふりかえって見直すことができるだろうか？いやできないというのが、多くのチームやメンバーをみてきた私の所感だ。多くのメンバーは過去のある時点の見逃しや判断ミスをなかったことにしようとする。それは無意識にしろ意識的にしろ起きやすい。客観的に詳細を確認できればなかったことになってしまうのは仕方のないことでもある。&lt;/p>
&lt;p>私は課題管理システムのコメントに、こういう状況からこう判断したとか、誰それと相談してこういう事情でそうしたとか、自身の感覚からとくに意味もなく決めたとか、常々なぜに相当する内容を残している。そして、あるとき過去の経緯を見返して、そのときの判断は適切だったか、過去のある時点で気付けたはずのことを見逃してなかったか、見逃していたとすればどうすればその時に気付きを得られたか、というふりかえりを日常的なチケット整理の一環として実践している。件の medium の記事にはなぜそれが重要なのかの概念を書いてあるように私には受け取れた。課題管理 + 情報共有の需要な概念の1つだと認識して寝かせておこうと思う。&lt;/p></content></item></channel></rss>