<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>github on forest nook</title><link>/diary/tags/github/</link><description>Recent content in github on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Thu, 14 Jul 2022 08:14:28 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>意図がわかる設計とリファクタリング</title><link>/diary/posts/2022/0714/</link><pubDate>Thu, 14 Jul 2022 08:14:28 +0900</pubDate><guid>/diary/posts/2022/0714/</guid><description>1時に寝て7時に起きた。久しぶりに HELLSING をみてた。アレクサンド・アンデルセンの狂信者ノリが好き。
煩雑な保守 昨日から着手した s3 とやり取りするアプリケーションの保守をしている。一通り機能は実装できたが、このアプリケーションの保守を今後どうやっていけばいいのかが私からはみえない。要件が変わる度に継ぎ接ぎで拡張してきて、意図をもった設計があるわけではないようにみえる。このまま保守することはできるかもしれないが、このロジックの説明もテストも検証もすべてが難しい。私がみても難しいのだから、経験の浅い開発者がみるともっと難しいのではないかと思う。
これを直すにはまず単体テストを直さないといけない。単体テストの大半がモックベースなので実際の振る舞いと異なる可能性がある。とくに s3 とやり取りするところの検証ができない。testcontainers の localstack があるので単体テストはモックからこのモジュールを使うように代替できそう。まずはそこからやるべきだが、2-3日はかかると見込まれるのでチームで承認を得られるかどうか、ちょっと聞いてみてから考える。
Job Summary を使ってみた ちょっと前に github actions のワークフローの実行画面にサマリを出力できるようになったという記事をみた。
Supercharging GitHub Actions with Job Summaries 自動でよさげなサマリを出力してくれるわけではなく、自分でサマリを作らないといけないので面倒だなと思ってそのまま放置していた。先週末に モジュール別のビルド・デプロイのワークフロー改善 を行った。ふとワークフローの実行結果をみていて、選択したモジュール名が表示されているとわかりやすくていいなと思えた。それを出力する手段としてサマリがちょうどいいやということに気付いた。inputs などで動的に変更するパラメーターをワークフローの実行画面で確認できるといちいちログ確認する手間が省けてよいという場面が他の用途でもある気がしてきた。もっと積極的にサマリを使っていこうと思えた瞬間だった。</description><content>&lt;p>1時に寝て7時に起きた。久しぶりに &lt;a href="https://www.nbcuni.co.jp/rondorobe/anime/hellsing/">HELLSING&lt;/a> をみてた。アレクサンド・アンデルセンの狂信者ノリが好き。&lt;/p>
&lt;h2 id="煩雑な保守">煩雑な保守&lt;/h2>
&lt;p>昨日から着手した s3 とやり取りするアプリケーションの保守をしている。一通り機能は実装できたが、このアプリケーションの保守を今後どうやっていけばいいのかが私からはみえない。要件が変わる度に継ぎ接ぎで拡張してきて、意図をもった設計があるわけではないようにみえる。このまま保守することはできるかもしれないが、このロジックの説明もテストも検証もすべてが難しい。私がみても難しいのだから、経験の浅い開発者がみるともっと難しいのではないかと思う。&lt;/p>
&lt;p>これを直すにはまず単体テストを直さないといけない。単体テストの大半がモックベースなので実際の振る舞いと異なる可能性がある。とくに s3 とやり取りするところの検証ができない。&lt;a href="https://www.testcontainers.org/modules/localstack/">testcontainers の localstack&lt;/a> があるので単体テストはモックからこのモジュールを使うように代替できそう。まずはそこからやるべきだが、2-3日はかかると見込まれるのでチームで承認を得られるかどうか、ちょっと聞いてみてから考える。&lt;/p>
&lt;h2 id="job-summary-を使ってみた">Job Summary を使ってみた&lt;/h2>
&lt;p>ちょっと前に github actions のワークフローの実行画面にサマリを出力できるようになったという記事をみた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.blog/2022-05-09-supercharging-github-actions-with-job-summaries/">Supercharging GitHub Actions with Job Summaries&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>自動でよさげなサマリを出力してくれるわけではなく、自分でサマリを作らないといけないので面倒だなと思ってそのまま放置していた。先週末に &lt;a href="/diary/diary/posts/2022/0709/#github-actions-の-push-イベントワークフロー改善">モジュール別のビルド・デプロイのワークフロー改善&lt;/a> を行った。ふとワークフローの実行結果をみていて、選択したモジュール名が表示されているとわかりやすくていいなと思えた。それを出力する手段としてサマリがちょうどいいやということに気付いた。inputs などで動的に変更するパラメーターをワークフローの実行画面で確認できるといちいちログ確認する手間が省けてよいという場面が他の用途でもある気がしてきた。もっと積極的にサマリを使っていこうと思えた瞬間だった。&lt;/p></content></item><item><title>放置していたバグを直した</title><link>/diary/posts/2022/0710/</link><pubDate>Sun, 10 Jul 2022 11:51:06 +0900</pubDate><guid>/diary/posts/2022/0710/</guid><description>1時に寝て7時に起きた。寝ていて夜中に吐き気して眠れなくて上体を起こすしかなかった。たまにある 胃食道逆流症 のひどいやつ。
参議院選挙 普段は期日前投票で済ませるのだけど、今週は他のことに注意を取られていたせいか、当日行ってきた。場所が期日前と違ったので勝手がわからなかったけど、とくに混雑もしてなかったのですぐに完了できた。タイムラインを眺めると、私のタイムライン上では投票したと発言する人が増えてきたように思う。投票率が50%程度で半分ぐらいの人が投票していない状況に懸念をもつ人たちの可視化がされている。
ふと父の選挙はどうなるんだろう？と思って検索してみた。意思表示できない状態だと選挙はできないみたい。
選挙人本人が投票所に行き自らの意思で投票することが原則であることから、意思表示が困難である場合には投票することはできません。これは投票所の係員が選挙人の投票を補助する代理投票においても同様です。したがって、家族の方が本人に代わって投票することはできません。
神戸市 FAQ &amp;gt; 市政情報 &amp;gt; 選挙
70歳以上は傷病で選挙権を行使できない人たちもいるだろうから減るのかな？と、総務省の 年代別投票率 のグラフを確認してみた。直近だと、70歳以上が61.96, 60歳代が71.43、50歳代が62.96だった。60歳代と比べて減ってはいるけど、50歳代とそう変わらないのをみると、元気な人たちに選挙へ行こうと呼びかけるのは正しい気がした。
backlog-github-integration-action のバグ修正 運用してすぐにコミットメッセージ中にシングルクォートやダブルクォートが含まれると引数を正しくパースできなくてエラーになることがわかっていた。いま運用している環境の用途だと、それほど重要ではないので後回しにしているうちに面倒になって放置していた。晩ご飯を食べてからデバッグしていたら7時間ぐらいやってた。
push subcommand is failed when a commit message includes single quote or double quote #6 bash 上の文字列の扱いと action.yml の inputs の args に引数渡しするときの振る舞いの勘違いもあって、issue の見た目以上に複雑な振る舞いをしていることがわかった。github actions 上のコンテキストに依存したくなかったため、github.event.commits の json をそのまま cli パラメーターとして渡している。bash 上の json 文字列と cli パラメーターとしての扱いが煩雑になるのでこのやり方は失敗だったかもしれない。ローカルでのテストもやりにくい。私はそのことをよく理解していたはずなのに github actoins 上のアンチパターンにはまってしまった。カスタムアクションのユーザーが簡単に使えるように cli パラメーターの設定を簡単にする意図で json 渡しにしたんだけど、エスケープの振る舞いが想像以上にややこしくなって、エスケープしたいユーザーには簡単ではなくなってしまった。それでもデバッグをがんばったおかげでシングルクォートは完全に使えるように実装できた。ダブルクォートは制限付きでエラーにならなくできるが、事実上は使わないでくださいといった仕様制限にしてしまおうと思う。引用するときはダブルクォートじゃなくてシングルクォートを使ってくださいと啓蒙することに決めた。</description><content>&lt;p>1時に寝て7時に起きた。寝ていて夜中に吐き気して眠れなくて上体を起こすしかなかった。たまにある &lt;a href="/diary/diary/posts/2021/1114/#傾斜枕">胃食道逆流症&lt;/a> のひどいやつ。&lt;/p>
&lt;h2 id="参議院選挙">参議院選挙&lt;/h2>
&lt;p>普段は期日前投票で済ませるのだけど、今週は他のことに注意を取られていたせいか、当日行ってきた。場所が期日前と違ったので勝手がわからなかったけど、とくに混雑もしてなかったのですぐに完了できた。タイムラインを眺めると、私のタイムライン上では投票したと発言する人が増えてきたように思う。投票率が50%程度で半分ぐらいの人が投票していない状況に懸念をもつ人たちの可視化がされている。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0710_voted.jpg"/>
&lt;/figure>
&lt;p>ふと父の選挙はどうなるんだろう？と思って検索してみた。意思表示できない状態だと選挙はできないみたい。&lt;/p>
&lt;blockquote>
&lt;p>選挙人本人が投票所に行き自らの意思で投票することが原則であることから、意思表示が困難である場合には投票することはできません。これは投票所の係員が選挙人の投票を補助する代理投票においても同様です。したがって、家族の方が本人に代わって投票することはできません。&lt;/p>
&lt;p>&lt;a href="https://help.city.kobe.lg.jp/hc/ja/articles/4488187002767-%E6%84%8F%E6%80%9D%E8%A1%A8%E7%A4%BA%E3%81%8C%E5%9B%B0%E9%9B%A3%E3%81%AA%E9%81%B8%E6%8C%99%E4%BA%BA%E3%81%AB%E4%BB%A3%E3%82%8F%E3%81%A3%E3%81%A6-%E5%AE%B6%E6%97%8F%E3%81%8C%E6%8A%95%E7%A5%A8%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95%E3%81%AF%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%81%8B-">神戸市 FAQ &amp;gt; 市政情報 &amp;gt; 選挙&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>70歳以上は傷病で選挙権を行使できない人たちもいるだろうから減るのかな？と、総務省の &lt;a href="https://www.soumu.go.jp/senkyo/senkyo_s/news/sonota/nendaibetu/">年代別投票率&lt;/a> のグラフを確認してみた。直近だと、70歳以上が61.96, 60歳代が71.43、50歳代が62.96だった。60歳代と比べて減ってはいるけど、50歳代とそう変わらないのをみると、元気な人たちに選挙へ行こうと呼びかけるのは正しい気がした。&lt;/p>
&lt;h2 id="backlog-github-integration-action-のバグ修正">backlog-github-integration-action のバグ修正&lt;/h2>
&lt;p>運用してすぐにコミットメッセージ中にシングルクォートやダブルクォートが含まれると引数を正しくパースできなくてエラーになることがわかっていた。いま運用している環境の用途だと、それほど重要ではないので後回しにしているうちに面倒になって放置していた。晩ご飯を食べてからデバッグしていたら7時間ぐらいやってた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/backlog-github-integration-action/issues/6">push subcommand is failed when a commit message includes single quote or double quote #6&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>bash 上の文字列の扱いと action.yml の inputs の args に引数渡しするときの振る舞いの勘違いもあって、issue の見た目以上に複雑な振る舞いをしていることがわかった。github actions 上のコンテキストに依存したくなかったため、&lt;code>github.event.commits&lt;/code> の json をそのまま cli パラメーターとして渡している。bash 上の json 文字列と cli パラメーターとしての扱いが煩雑になるのでこのやり方は失敗だったかもしれない。ローカルでのテストもやりにくい。私はそのことをよく理解していたはずなのに github actoins 上のアンチパターンにはまってしまった。カスタムアクションのユーザーが簡単に使えるように cli パラメーターの設定を簡単にする意図で json 渡しにしたんだけど、エスケープの振る舞いが想像以上にややこしくなって、エスケープしたいユーザーには簡単ではなくなってしまった。それでもデバッグをがんばったおかげでシングルクォートは完全に使えるように実装できた。ダブルクォートは制限付きでエラーにならなくできるが、事実上は使わないでくださいといった仕様制限にしてしまおうと思う。引用するときはダブルクォートじゃなくてシングルクォートを使ってくださいと啓蒙することに決めた。&lt;/p></content></item><item><title>github actions の push イベントワークフロー改善</title><link>/diary/posts/2022/0709/</link><pubDate>Sat, 09 Jul 2022 09:09:46 +0900</pubDate><guid>/diary/posts/2022/0709/</guid><description>23時に寝て6時に起きた。今週はサービスインで凸凹していて疲れた。
ストレッチ 今日の開脚幅は開始前161cmで、ストレッチ後164cmだった。ちょっと数値がよくなった。一昨日の日本酒イベントで4時間ほど立ち呑みをしていた疲労で腰に張りが少しあった。それ以外はとくに問題はなくて調子がよかった。右股関節の詰まりも2-3週間前よりもよくなっている気がする。これはトレーナーさんも注意を払って詰まりを取り除くようにストレッチのメニューを組んでくれているのでその成果が徐々に出始めている気がする。以前よりも可動領域が広がってきている気がして安心感を得た。
github actions の push イベントワークフロー改善 午後からビルド・デプロイの最適化のために github actions のワークフローを改善作業をしていた。
今週はサービスインにより、本番環境への緊急リリースを何回もやっているのを傍からみていて、ビルド・デプロイが速くなればなるほど、その回数を増やせるし、修正後の検証に時間を多く割ける。あるリポジトリが7つのモジュールをまとめてビルド・デプロイしている。これはあるモジュールの微修正の反映には向かないので改善することにした。結果として最大で50%ぐらいのビルド時間の削減、モジュールに依っては、具体的には10分かかっていたものを4分台でビルドできるようにした。
ワークフロー改善のためのデバッグしている間はビルド・デプロイが出来なくなることから開発者が使っていない時間帯が望ましい。必然的にサービス休日出勤して github actions のワークフローを改善していた。デバッグと動作の検証も兼ねて午後から半日以上やっていたので休日にやったのは正解だと言えるだろう。
push イベントの github コンテキストの github.event.commits にコミット情報が入っていて、そこにコミットのリビジョンがある。例えば、次のようなオブジェクトで id がコミットのリビジョンに相当する。
[ { &amp;#34;author&amp;#34;: { &amp;#34;email&amp;#34;: &amp;#34;...&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;...&amp;#34;, &amp;#34;username&amp;#34;: &amp;#34;t2y&amp;#34; }, &amp;#34;committer&amp;#34;: { &amp;#34;email&amp;#34;: &amp;#34;...&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;...&amp;#34;, &amp;#34;username&amp;#34;: &amp;#34;t2y&amp;#34; }, &amp;#34;distinct&amp;#34;: true, &amp;#34;id&amp;#34;: &amp;#34;f8df1f77ffec9ef234e7321b2e237b663256b01c&amp;#34;, &amp;#34;message&amp;#34;: &amp;#34;コミットログのメッセージ&amp;#34;, &amp;#34;timestamp&amp;#34;: &amp;#34;2022-07-08T12:32:33+09:00&amp;#34;, &amp;#34;tree_id&amp;#34;: &amp;#34;37b066734e58779c5d2c687d40b4cc43af177cb2&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;https://github.com/OWNER/REPO/commit/f8df1f77ffec9ef234e7321b2e237b663256b01c&amp;#34; }, ... ] このリビジョンを使って github rest api からファイル情報を取得できる。
$ gh api -H &amp;#34;Accept: application/vnd.</description><content>&lt;p>23時に寝て6時に起きた。今週はサービスインで凸凹していて疲れた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前161cmで、ストレッチ後164cmだった。ちょっと数値がよくなった。一昨日の日本酒イベントで4時間ほど立ち呑みをしていた疲労で腰に張りが少しあった。それ以外はとくに問題はなくて調子がよかった。右股関節の詰まりも2-3週間前よりもよくなっている気がする。これはトレーナーさんも注意を払って詰まりを取り除くようにストレッチのメニューを組んでくれているのでその成果が徐々に出始めている気がする。以前よりも可動領域が広がってきている気がして安心感を得た。&lt;/p>
&lt;h2 id="github-actions-の-push-イベントワークフロー改善">github actions の push イベントワークフロー改善&lt;/h2>
&lt;p>午後からビルド・デプロイの最適化のために github actions のワークフローを改善作業をしていた。&lt;/p>
&lt;p>今週はサービスインにより、本番環境への緊急リリースを何回もやっているのを傍からみていて、ビルド・デプロイが速くなればなるほど、その回数を増やせるし、修正後の検証に時間を多く割ける。あるリポジトリが7つのモジュールをまとめてビルド・デプロイしている。これはあるモジュールの微修正の反映には向かないので改善することにした。結果として最大で50%ぐらいのビルド時間の削減、モジュールに依っては、具体的には10分かかっていたものを4分台でビルドできるようにした。&lt;/p>
&lt;p>ワークフロー改善のためのデバッグしている間はビルド・デプロイが出来なくなることから開発者が使っていない時間帯が望ましい。必然的にサービス休日出勤して github actions のワークフローを改善していた。デバッグと動作の検証も兼ねて午後から半日以上やっていたので休日にやったのは正解だと言えるだろう。&lt;/p>
&lt;p>push イベントの github コンテキストの &lt;code>github.event.commits&lt;/code> にコミット情報が入っていて、そこにコミットのリビジョンがある。例えば、次のようなオブジェクトで &lt;code>id&lt;/code> がコミットのリビジョンに相当する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;author&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;email&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;username&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;t2y&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;committer&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;email&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;username&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;t2y&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;distinct&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;f8df1f77ffec9ef234e7321b2e237b663256b01c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;コミットログのメッセージ&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;timestamp&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2022-07-08T12:32:33+09:00&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;tree_id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;37b066734e58779c5d2c687d40b4cc43af177cb2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://github.com/OWNER/REPO/commit/f8df1f77ffec9ef234e7321b2e237b663256b01c&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このリビジョンを使って &lt;a href="https://docs.github.com/en/rest/commits/commits#get-a-commit">github rest api&lt;/a> からファイル情報を取得できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ gh api -H &lt;span style="color:#e6db74">&amp;#34;Accept: application/vnd.github+json&amp;#34;&lt;/span> /repos/OWNER/REPO/commits/f8df1f77ffec9ef234e7321b2e237b663256b01c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>いろんなデータが返ってくるけど、ここでは変更したファイルのパスを知りたい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;sha&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;node_id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;commit&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;files&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;sha&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;filename&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;module1/path/to/src&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;sha&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;filename&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;module2/path/to/src&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この &lt;code>filename&lt;/code> のトップディレクトリがモジュール名と同じなのでここだけ取り出して、管理対象のモジュールかどうかを比較する。bash でも &lt;code>=~&lt;/code> をサブ文字列のマッチングができる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ targets&lt;span style="color:#f92672">=(&lt;/span>mymodule1 mymodule2&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#e6db74">&amp;#34; &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>targets[@]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mymodule1 mymodule2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#f92672">[[&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>targets[@]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span>~ &lt;span style="color:#e6db74">&amp;#34; mymodule1 &amp;#34;&lt;/span> &lt;span style="color:#f92672">]]&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> echo &lt;span style="color:#e6db74">&amp;#34;match&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>match
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#f92672">[[&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>targets[@]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span>~ &lt;span style="color:#e6db74">&amp;#34; mymodule2 &amp;#34;&lt;/span> &lt;span style="color:#f92672">]]&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> echo &lt;span style="color:#e6db74">&amp;#34;match&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>match
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>さらにマッチしたモジュールを &lt;a href="https://docs.github.com/en/actions/learn-github-actions/expressions">github actions の expressions&lt;/a> で制御しやすいように json の array に変換する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ jq --compact-output --null-input &lt;span style="color:#e6db74">&amp;#39;$ARGS.positional&amp;#39;&lt;/span> --args -- &lt;span style="color:#e6db74">${&lt;/span>targets[@]&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;mymodule1&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;mymodule2&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これを step の outputs として格納する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;::set-output name=modules::&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>json_array&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例えば、後続の job で実行条件としてモジュールの有無を調べたいときは expressions を使って次のように記述できる。if 文は &lt;code>${{ ... }}&lt;/code> のブラケットを省略できるようだけど、ここだけ省略すると返って混乱するかなと思って私は記述するようにしている。その方が統合性があってコードが読みやすいように私は考えている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> mymodule1-job:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>: &lt;span style="color:#e6db74">${&lt;/span>{ contains(fromJSON(needs.build.outputs.mymodule_target.modules), &lt;span style="color:#e6db74">&amp;#39;mymodule1&amp;#39;&lt;/span>) &lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> needs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ちなみに workflow レベルの env は job の if 文には使えない。outputs を使って動的な値を扱うようにしている。どうも workflow レベルの env はいろいろ問題があるみたいでなかなか issue がクローズされないのをみると取り扱い注意なのかもしれない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/actions/runner/issues/480">Workflow level env does not work properly in all fields. #480&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/actions/runner/issues/1661">workflow level env. is unrecognised on job level&amp;rsquo;s &amp;lsquo;if&amp;rsquo;-expression when calling reusable workflow #1661&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>最終的なモジュールを判別するための step は次のようなものになった。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">build&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">outputs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mymodule_target&lt;/span>: &lt;span style="color:#ae81ff">${{ steps.mymodule-target.outputs.modules }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">コミットログからビルド対象のモジュールを設定&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">mymodule-target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> declare -A modules
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> target_modules=${{ env.TARGET_MODULES }}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> revisions=$(jq --raw-output &amp;#39;.[].id&amp;#39; &amp;lt;&amp;lt;&amp;lt; &amp;#39;${{ env.COMMITS }}&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> for revision in ${revisions}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> do
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> names=$(gh api -H &amp;#34;${{ env.ACCEPT_HEADER }}&amp;#34; ${{ env.COMMITS_PATH }}/${revision} | jq --raw-output &amp;#39;.files[].filename&amp;#39; | cut -d&amp;#34;/&amp;#34; -f1 | sort -u)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> for name in $names
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> do
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> if [[ &amp;#34; ${target_modules[@]} &amp;#34; =~ &amp;#34; ${name} &amp;#34; ]]; then
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> modules[${name}]=true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> fi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> done
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> done
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> targets=$(jq --compact-output --null-input &amp;#39;$ARGS.positional&amp;#39; --args -- &amp;#34;${!modules[@]}&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;::set-output name=modules::${targets}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">TARGET_MODULES&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> (
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#39;mymodule1&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#39;mymodule2&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> )&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ACCEPT_HEADER&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Accept: application/vnd.github+json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">COMMITS_PATH&lt;/span>: &lt;span style="color:#ae81ff">/repos/${{ github.repository }}/commits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">COMMITS&lt;/span>: &lt;span style="color:#ae81ff">${{ toJSON(github.event.commits) }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>処理も理屈も簡単なんだけど、実際の運用コードはもう少しだけ複雑なものの、デバッグは github actions を実行しないといけない。ちょっとした typo のために実は2時間ほどはまっていたのは内緒。シェルの配列や連想配列を使うと、記号が多くてわかりにくい。配列の閉じブラケットを忘れていたがために EOF のエラーが発生していた。閉じブラケットのミスだけにエラーが発生しているところと実際のコードがズレていて、それに気付くのに少しずつコードを足したり消したりしてデバッグするみたいな原始的なやり方で些細な typo を気付くのに時間がかかった。&lt;/p>
&lt;pre tabindex="0">&lt;code>xxx.sh: line 47: unexpected EOF while looking for matching `&amp;#34;&amp;#39;
&lt;/code>&lt;/pre></content></item><item><title>資料作りと抜け・漏れ防止</title><link>/diary/posts/2022/0503/</link><pubDate>Tue, 03 May 2022 18:45:57 +0900</pubDate><guid>/diary/posts/2022/0503/</guid><description>marketplace への公開 pull request と push イベントに対応して基本機能は実装できたとみなし、v1 のタグ/ブランチを作成して marketplace に公開した。backlog と連携するカスタム action はすでにいくつかあるのだけど、pull request か push イベントのどちらかしか対応していなかったり、説明が日本語で書かれていて日本人向けしか対象としていないものしかない。グローバル向けの今後も要件次第で拡張可能なカスタム action はこれしかないと、ポジショントークも含めて言っておこう。ちょうどこみやさんも関心をもっているのでまた機会があれば使い方の説明とかやりますよと伝えた。まずは会社のメンバーに紹介してくれるらしい。使ってくれる人が増えると嬉しいなぁ。
https://github.com/marketplace/actions/backlog-github-integration-action リリース作業をしていてその内容について mermaid 記法を使って簡単なフローチャート図やシーケンス図も書いてみた。感覚的には plantuml で書くのと大差ないので github がサポートしているネットワーク効果を考えると、今後は mermaid を積極的に活用していくのもよいかもしれない。
打ち合わせ資料の作成 先日 第3期のふりかえり は行ったが、第4期の展望はできなかったので次回の打ち合わせのための資料を作った。今期も普通に業務委託をするだけではあるものの、今後のキャリアのために grpc の開発/運用経験を積む必要があることに気付いた。他人に話す機会があって、そのための資料を作ってみて、当たり前の抜け・漏れに自分自身で気付けるというのが思考の外在化のよいところと言える。誰かに指摘されればすぐ気付くことを自分自身で気付くのは意外と難しかったりする。特定技術を狙って案件を探すのはあまりうまくいかない。本来はビジネスがあって、それを実現するために技術を選ぶのであって、その逆ではないから。周りの友だちや知人に聞いてみるかなぁ。</description><content>&lt;h2 id="marketplace-への公開">marketplace への公開&lt;/h2>
&lt;p>pull request と push イベントに対応して基本機能は実装できたとみなし、v1 のタグ/ブランチを作成して marketplace に公開した。backlog と連携するカスタム action はすでにいくつかあるのだけど、pull request か push イベントのどちらかしか対応していなかったり、説明が日本語で書かれていて日本人向けしか対象としていないものしかない。グローバル向けの今後も要件次第で拡張可能なカスタム action はこれしかないと、ポジショントークも含めて言っておこう。ちょうどこみやさんも関心をもっているのでまた機会があれば使い方の説明とかやりますよと伝えた。まずは会社のメンバーに紹介してくれるらしい。使ってくれる人が増えると嬉しいなぁ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/marketplace/actions/backlog-github-integration-action">https://github.com/marketplace/actions/backlog-github-integration-action&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>リリース作業をしていてその内容について &lt;a href="https://github.com/mermaid-js/mermaid">mermaid&lt;/a> 記法を使って簡単なフローチャート図やシーケンス図も書いてみた。感覚的には plantuml で書くのと大差ないので github がサポートしているネットワーク効果を考えると、今後は mermaid を積極的に活用していくのもよいかもしれない。&lt;/p>
&lt;h2 id="打ち合わせ資料の作成">打ち合わせ資料の作成&lt;/h2>
&lt;p>先日 &lt;a href="/diary/diary/posts/2022/0429/#隔週の雑談">第3期のふりかえり&lt;/a> は行ったが、第4期の展望はできなかったので次回の打ち合わせのための資料を作った。今期も普通に業務委託をするだけではあるものの、今後のキャリアのために &lt;a href="https://grpc.io/">grpc&lt;/a> の開発/運用経験を積む必要があることに気付いた。他人に話す機会があって、そのための資料を作ってみて、当たり前の抜け・漏れに自分自身で気付けるというのが思考の外在化のよいところと言える。誰かに指摘されればすぐ気付くことを自分自身で気付くのは意外と難しかったりする。特定技術を狙って案件を探すのはあまりうまくいかない。本来はビジネスがあって、それを実現するために技術を選ぶのであって、その逆ではないから。周りの友だちや知人に聞いてみるかなぁ。&lt;/p></content></item><item><title>個人開発楽しい</title><link>/diary/posts/2022/0424/</link><pubDate>Sun, 24 Apr 2022 21:06:20 +0900</pubDate><guid>/diary/posts/2022/0424/</guid><description>0時に寝て7時に起きた。朝から雨降りだったのでだらだらしながら家を出たけど、オフィスに着いたのは9時頃だったと思う。午前中にコードを書いてテストして、それからお昼ご飯食べて、家に戻って、ちょっとゆっくりしてからオフィスに戻ろうと思ってたら3時間ほど寝てた。
backlog のコミット連携の反応 たまたまツィートしていたらこみやさんが関心をもってくれた。fix, close などでチケットのステータスを変えたいという要望をもらったので作ることにした。
同じ構成なのでちょっと気になる
&amp;mdash; tk0miya (@tk0miya) April 23, 2022 3時間ほどとわりとすぐに実装できた。いまのプロジェクトでは使わない機能なので当初は乗り気ではなかったけど、やっぱり使いたいという人がいると開発のモチベーションになる。
Add a feature to change the issue status with commit messages (fix, close) #3 機能拡張して、テストしたり、ドキュメント書いたりしてた。github discussions も積極的に使ってみようと思っていてちょっとした faq も書いてみた。
About Internationalization (i18n) #4 1-2週間ほど試験運用して問題なさそうだったら v1 のタグをつけて marketplace などに公開してもよいかもしれない。ブログにも書かないとな。まだまだタスクは残っている。</description><content>&lt;p>0時に寝て7時に起きた。朝から雨降りだったのでだらだらしながら家を出たけど、オフィスに着いたのは9時頃だったと思う。午前中にコードを書いてテストして、それからお昼ご飯食べて、家に戻って、ちょっとゆっくりしてからオフィスに戻ろうと思ってたら3時間ほど寝てた。&lt;/p>
&lt;h2 id="backlog-のコミット連携の反応">backlog のコミット連携の反応&lt;/h2>
&lt;p>たまたまツィートしていたらこみやさんが関心をもってくれた。fix, close などでチケットのステータスを変えたいという要望をもらったので作ることにした。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">同じ構成なのでちょっと気になる&lt;/p>&amp;mdash; tk0miya (@tk0miya) &lt;a href="https://twitter.com/tk0miya/status/1517681854539001856?ref_src=twsrc%5Etfw">April 23, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>3時間ほどとわりとすぐに実装できた。いまのプロジェクトでは使わない機能なので当初は乗り気ではなかったけど、やっぱり使いたいという人がいると開発のモチベーションになる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/backlog-github-integration-action/pull/3">Add a feature to change the issue status with commit messages (fix, close) #3&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>機能拡張して、テストしたり、ドキュメント書いたりしてた。github discussions も積極的に使ってみようと思っていてちょっとした faq も書いてみた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/backlog-github-integration-action/discussions/4">About Internationalization (i18n) #4&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>1-2週間ほど試験運用して問題なさそうだったら v1 のタグをつけて marketplace などに公開してもよいかもしれない。ブログにも書かないとな。まだまだタスクは残っている。&lt;/p></content></item><item><title>カスタム action の開発再開</title><link>/diary/posts/2022/0422/</link><pubDate>Fri, 22 Apr 2022 07:42:50 +0900</pubDate><guid>/diary/posts/2022/0422/</guid><description>22時に寝て0時に起きて3時に起きて5時半に起きた。
ワーケーションのリトライ オミクロン株の流行で延期していた開発合宿を行う。レンタカーと きのいえ の予約を6月3-5日で確定させた。3回目のワクチンを接種したばかりだし、世の中の雰囲気も with コロナへの取り組みになってきている気がする。行き先は同じなので前回作った旅のしおりをコピーしていくつか修正しながら再計画していく。Go To トラベル 再開が6月ではないかという噂もある。
backlog-github-integration-action の機能拡張 先日作った backlog-github-integration-action に push という新たなサブコマンドを追加した。コミットをリポジトリに push したときのイベントをフックしてカスタム action を実行する。インプットが github から取得できるデータになるため、GitHub Events 単位にサブコマンドを作ればトリガーと扱えるインプットデータが一致してわかりやすい機能分割になるんじゃないかと思えた。ひとまずそれでやってみる。今日のところはローカルで動かしてコミット連携ができることを確認して、いくつかテストを書いていた。また明日、結合レベルのテストをやってみる。</description><content>&lt;p>22時に寝て0時に起きて3時に起きて5時半に起きた。&lt;/p>
&lt;h2 id="ワーケーションのリトライ">ワーケーションのリトライ&lt;/h2>
&lt;p>オミクロン株の流行で延期していた開発合宿を行う。レンタカーと &lt;a href="https://kinosaki-kinoie.com/">きのいえ&lt;/a> の予約を6月3-5日で確定させた。3回目のワクチンを接種したばかりだし、世の中の雰囲気も with コロナへの取り組みになってきている気がする。行き先は同じなので前回作った旅のしおりをコピーしていくつか修正しながら再計画していく。&lt;a href="https://goto.jata-net.or.jp/">Go To トラベル&lt;/a> 再開が6月ではないかという噂もある。&lt;/p>
&lt;h2 id="backlog-github-integration-action-の機能拡張">backlog-github-integration-action の機能拡張&lt;/h2>
&lt;p>先日作った &lt;a href="/diary/diary/posts/2022/0327/">backlog-github-integration-action&lt;/a> に push という新たなサブコマンドを追加した。コミットをリポジトリに push したときのイベントをフックしてカスタム action を実行する。インプットが github から取得できるデータになるため、&lt;a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows">GitHub Events&lt;/a> 単位にサブコマンドを作ればトリガーと扱えるインプットデータが一致してわかりやすい機能分割になるんじゃないかと思えた。ひとまずそれでやってみる。今日のところはローカルで動かしてコミット連携ができることを確認して、いくつかテストを書いていた。また明日、結合レベルのテストをやってみる。&lt;/p></content></item><item><title>カスタムドメインの設定</title><link>/diary/posts/2022/0403/</link><pubDate>Sun, 03 Apr 2022 10:32:38 +0900</pubDate><guid>/diary/posts/2022/0403/</guid><description>3時に寝て7時半に起きた。前日の深夜にオフィスの掃除をしてた。シェアオフィスなので掃除機をかけると音がうるさくて周りに迷惑なので誰もいない時間帯を見計らって行う必要がある。
逆イールド 会社を経営する上で経済の状況は大きな影響を受けるので機をみて経済の勉強もしている。直近40年近くの統計では、米国債金利において、2年債の金利が10年債の金利を追い越してしまう現象が発生した場合、その1年後ぐらいに景気後退期がやってくる。この現象を 逆イールド と呼ぶ。
なぜ逆イールドが発生すると景気後退となるのか。国債とは政府の借金。金融機関、年金、個人、海外などが貸している。金利は複雑で様々な要因で決まるので一概に言えないが、大雑把にまとめると経済の力や金融政策、世のおカネの量で決まる。政策金利によって3ヶ月債や2年債は大きく影響を受ける。利上げを急ぎでやろうとしている理由は高いインフレがある。米国は約40年ぶりの高インフレとなっている。FRB は約2%のインフレを目標としているが、現状は遥かに高い水準になるので金利を上げてインフレを抑制しようとしている。FRB は次の2つの使命を負っている。
物価の安定 雇用の最大化 いま物価が急上昇しているため、このまま金融緩和を続けるとさらに物価が上昇して悪い影響を及ぼしてしまう。いまは金融緩和を縮小して利上げをしていく必要がある。しかし、利上げは景気に対して悪影響となる可能性がある。どのぐらい利上げすればよいのかは実際には誰もわからない。最悪の状況として次がある。
スタグフレーション: 高インフレのまま景気が減速する現象 スタグフレーションが発生すると経済対策や金融政策で対応しづらい非常にまずい状況となる。経済学者によっても意見が分かれるので、まだスタグフレーションが起こるとは限らない。しかし、起こる可能性があるという見方も出てきているらしい。
英語のテックブログ開設 先日作った backlog-github-integration-action の記事を書くことにした。会社のプロダクトとして作ったツールで汎用的なものや業務として保守していくものは積極的にアピールしていきたい。基本的に私は日本市場をあてにしていないのと、せっかく会社を作ったのだし、海外の会社と取り引きできるようになりたいという野望もある。プロダクトの情報発信は英語が基本で、余裕があったら日本語も書くといった優先度でやっていく。
少し前にたまたま hashnode がイケてるというのをタイムラインでみかけたのを思い出した。せっかくなので調べてみたら、どうも Custom Domain を無償、且つお手軽に設定できるのが訴求点になっているらしい。カスタムドメインを使うと、url に統合性があってカッコいいという以外にも信頼できるドメインに対して SEO が行われるため、優良な記事を書いていると自社ドメインの信頼があがっていくといったメリットがある。コストがかからないならカスタムドメインを使わない理由は何もない。そして設定したものが次になる。
https://blog.kazamori.jp/ ネームサーバーにカスタムドメインの設定をしていて間違って少しはまった。
間違った設定
cname blog hashnode.network 正しい設定
cname blog hashnode.network. 最後にドット . が必要になる。これで blog.kazamori.jp の名前解決が hashnode.network として解決される。
$ dig blog.kazamori.jp ... ;; ANSWER SECTION: blog.kazamori.jp. 198 IN CNAME hashnode.network. hashnode.network. 46 IN A 76.76.21.21 CNAME レコードを滅多に設定しないのでドットで終わらないといけない規則を忘れてた。設定後、dns の propagation に最大24時間ほどかかる。世界のどこからでもアクセスできるようになるには24時間ぐらいかかるかもしれないけど、ローカルで動作検証するなら数分で反映されてた。</description><content>&lt;p>3時に寝て7時半に起きた。前日の深夜にオフィスの掃除をしてた。シェアオフィスなので掃除機をかけると音がうるさくて周りに迷惑なので誰もいない時間帯を見計らって行う必要がある。&lt;/p>
&lt;h2 id="逆イールド">逆イールド&lt;/h2>
&lt;p>会社を経営する上で経済の状況は大きな影響を受けるので機をみて経済の勉強もしている。直近40年近くの統計では、米国債金利において、2年債の金利が10年債の金利を追い越してしまう現象が発生した場合、その1年後ぐらいに景気後退期がやってくる。この現象を &lt;strong>逆イールド&lt;/strong> と呼ぶ。&lt;/p>
&lt;p>なぜ逆イールドが発生すると景気後退となるのか。国債とは政府の借金。金融機関、年金、個人、海外などが貸している。金利は複雑で様々な要因で決まるので一概に言えないが、大雑把にまとめると経済の力や金融政策、世のおカネの量で決まる。政策金利によって3ヶ月債や2年債は大きく影響を受ける。利上げを急ぎでやろうとしている理由は高いインフレがある。米国は約40年ぶりの高インフレとなっている。FRB は約2%のインフレを目標としているが、現状は遥かに高い水準になるので金利を上げてインフレを抑制しようとしている。FRB は次の2つの使命を負っている。&lt;/p>
&lt;ul>
&lt;li>物価の安定&lt;/li>
&lt;li>雇用の最大化&lt;/li>
&lt;/ul>
&lt;p>いま物価が急上昇しているため、このまま金融緩和を続けるとさらに物価が上昇して悪い影響を及ぼしてしまう。いまは金融緩和を縮小して利上げをしていく必要がある。しかし、利上げは景気に対して悪影響となる可能性がある。どのぐらい利上げすればよいのかは実際には誰もわからない。最悪の状況として次がある。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>スタグフレーション&lt;/strong>: 高インフレのまま景気が減速する現象&lt;/li>
&lt;/ul>
&lt;p>スタグフレーションが発生すると経済対策や金融政策で対応しづらい非常にまずい状況となる。経済学者によっても意見が分かれるので、まだスタグフレーションが起こるとは限らない。しかし、起こる可能性があるという見方も出てきているらしい。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/apeDeUAXMdk" allowfullscreen title="よくわかる「逆イールド」　景気後退のシグナル（後藤達也）">&lt;/iframe>
&lt;/div>
&lt;h2 id="英語のテックブログ開設">英語のテックブログ開設&lt;/h2>
&lt;p>先日作った &lt;a href="/diary/diary/posts/2022/0327/#backlog-と-github-のインテグレーション-action">backlog-github-integration-action&lt;/a> の記事を書くことにした。会社のプロダクトとして作ったツールで汎用的なものや業務として保守していくものは積極的にアピールしていきたい。基本的に私は日本市場をあてにしていないのと、せっかく会社を作ったのだし、海外の会社と取り引きできるようになりたいという野望もある。プロダクトの情報発信は英語が基本で、余裕があったら日本語も書くといった優先度でやっていく。&lt;/p>
&lt;p>少し前にたまたま &lt;a href="https://hashnode.com/">hashnode&lt;/a> がイケてるというのをタイムラインでみかけたのを思い出した。せっかくなので調べてみたら、どうも &lt;a href="https://support.hashnode.com/docs/mapping-domain">Custom Domain&lt;/a> を無償、且つお手軽に設定できるのが訴求点になっているらしい。カスタムドメインを使うと、url に統合性があってカッコいいという以外にも信頼できるドメインに対して SEO が行われるため、優良な記事を書いていると自社ドメインの信頼があがっていくといったメリットがある。コストがかからないならカスタムドメインを使わない理由は何もない。そして設定したものが次になる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.kazamori.jp/">https://blog.kazamori.jp/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ネームサーバーにカスタムドメインの設定をしていて間違って少しはまった。&lt;/p>
&lt;p>間違った設定&lt;/p>
&lt;pre tabindex="0">&lt;code>cname blog hashnode.network
&lt;/code>&lt;/pre>&lt;p>正しい設定&lt;/p>
&lt;pre tabindex="0">&lt;code>cname blog hashnode.network.
&lt;/code>&lt;/pre>&lt;p>最後にドット &lt;code>.&lt;/code> が必要になる。これで blog.kazamori.jp の名前解決が hashnode.network として解決される。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ dig blog.kazamori.jp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;; ANSWER SECTION:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>blog.kazamori.jp. 198 IN CNAME hashnode.network.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hashnode.network. 46 IN A 76.76.21.21
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>CNAME レコードを滅多に設定しないのでドットで終わらないといけない規則を忘れてた。設定後、dns の propagation に最大24時間ほどかかる。世界のどこからでもアクセスできるようになるには24時間ぐらいかかるかもしれないけど、ローカルで動作検証するなら数分で反映されてた。&lt;/p></content></item><item><title>backlog-github-integration-action を運用し始めた</title><link>/diary/posts/2022/0328/</link><pubDate>Mon, 28 Mar 2022 17:15:41 +0900</pubDate><guid>/diary/posts/2022/0328/</guid><description>2時に寝て6時半に起きた。
backlog と github のインテグレーション action の試験運用 昨日作った backlog-github-integration-action を早速お手伝い先の github リポジトリと backlog に導入した。いま暇な時期というのもあって、誰からもクレームが出なかった。この閑散とした間隙を「乗るしかない、このビッグウェーブに」というノリで導入して運用して既成事実を作る。ses でお手伝いに行って課題管理のツールを作っているというのは頭おかしいと思うけど、周りからクレームが出る前に電光石火で運用にのせてしまう。実際に運用で使うといくつかバグがあって、いま latest の docker イメージを使ってカスタム action が動いている。バグがあったら修正して、./gradlew jib (docker push) で新しい docker イメージを gihtub packages に push して、不具合があった pr のジョブを再実行すれば再現環境でテストもできる。いくつかバグ修正をした。実際の運用のデータを使うとばらばらとバグがみつかる。運用で実際に使われていないツールはダメ、絶対。</description><content>&lt;p>2時に寝て6時半に起きた。&lt;/p>
&lt;h2 id="backlog-と-github-のインテグレーション-action-の試験運用">backlog と github のインテグレーション action の試験運用&lt;/h2>
&lt;p>昨日作った backlog-github-integration-action を早速お手伝い先の github リポジトリと backlog に導入した。いま暇な時期というのもあって、誰からもクレームが出なかった。この閑散とした間隙を「乗るしかない、このビッグウェーブに」というノリで導入して運用して既成事実を作る。ses でお手伝いに行って課題管理のツールを作っているというのは頭おかしいと思うけど、周りからクレームが出る前に電光石火で運用にのせてしまう。実際に運用で使うといくつかバグがあって、いま latest の docker イメージを使ってカスタム action が動いている。バグがあったら修正して、&lt;code>./gradlew jib&lt;/code> (docker push) で新しい docker イメージを gihtub packages に push して、不具合があった pr のジョブを再実行すれば再現環境でテストもできる。いくつかバグ修正をした。実際の運用のデータを使うとばらばらとバグがみつかる。運用で実際に使われていないツールはダメ、絶対。&lt;/p></content></item><item><title>backlog-github-integration-action を作った</title><link>/diary/posts/2022/0327/</link><pubDate>Sun, 27 Mar 2022 07:41:04 +0900</pubDate><guid>/diary/posts/2022/0327/</guid><description>0時に寝て7時に起きた。丸一日開発していた。構想1ヶ月、実装2日といったところか。
backlog と github のインテグレーション action お手伝い先が backlog を課題管理システムとして使っている。backlog は git 連携 の機能をもっているが、これは nulab 社のクラウド上に git リポジトリを構築したものと連携する機能であって、github と連携する機能ではない。そこで github と backlog と連携するためのカスタム github action を作った。
https://github.com/kazamori/backlog-github-integration-action カスタム github action を java で開発するのは普通にはやらないと思うが、いくつか理由があってお手伝い先が java しかできないというのと、nulab 社が提供している公式クライアント nulab/backlog4j が java しかないから。最初は go で実装しようと思って go のクライアントを試したんだけど、サンプルコードをかいたら一部の処理でエラーになって、そのエラーがよくわからなくてやる気がなくなってしまった。最新の rest api の仕様にそってメンテナンスされていないのかな？と思って、やっぱり公式クライアントしかないなと。他にも次のライブラリを使っている。
設定ファイル: https://github.com/lightbend/config コマンドライン解析: https://github.com/remkop/picocli github クライアント: https://github.com/hub4j/github-api これまでは commons-cli を使ってきたけど、サブコマンドの機能を提供していない。もうメンテされてないかも？サブコマンドの機能をもつ argument parser がほしくて picocli を選択した。初めて使っていて、実装してみたらわりと私の好みでよく出来ていると思う。今後は cli ライブラリとして picocli を使っていこうと思う。</description><content>&lt;p>0時に寝て7時に起きた。丸一日開発していた。構想1ヶ月、実装2日といったところか。&lt;/p>
&lt;h2 id="backlog-と-github-のインテグレーション-action">backlog と github のインテグレーション action&lt;/h2>
&lt;p>お手伝い先が &lt;a href="https://backlog.com/ja/">backlog&lt;/a> を課題管理システムとして使っている。backlog は &lt;a href="https://support-ja.backlog.com/hc/ja/sections/360005425774-Git">git 連携&lt;/a> の機能をもっているが、これは nulab 社のクラウド上に git リポジトリを構築したものと連携する機能であって、github と連携する機能ではない。そこで github と backlog と連携するためのカスタム github action を作った。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/backlog-github-integration-action">https://github.com/kazamori/backlog-github-integration-action&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>カスタム github action を java で開発するのは普通にはやらないと思うが、いくつか理由があってお手伝い先が java しかできないというのと、nulab 社が提供している公式クライアント &lt;a href="https://github.com/nulab/backlog4j">nulab/backlog4j&lt;/a> が java しかないから。最初は go で実装しようと思って go のクライアントを試したんだけど、サンプルコードをかいたら一部の処理でエラーになって、そのエラーがよくわからなくてやる気がなくなってしまった。最新の rest api の仕様にそってメンテナンスされていないのかな？と思って、やっぱり公式クライアントしかないなと。他にも次のライブラリを使っている。&lt;/p>
&lt;ul>
&lt;li>設定ファイル: &lt;a href="https://github.com/lightbend/config">https://github.com/lightbend/config&lt;/a>&lt;/li>
&lt;li>コマンドライン解析: &lt;a href="https://github.com/remkop/picocli">https://github.com/remkop/picocli&lt;/a>&lt;/li>
&lt;li>github クライアント: &lt;a href="https://github.com/hub4j/github-api">https://github.com/hub4j/github-api&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>これまでは commons-cli を使ってきたけど、サブコマンドの機能を提供していない。もうメンテされてないかも？サブコマンドの機能をもつ argument parser がほしくて picocli を選択した。初めて使っていて、実装してみたらわりと私の好みでよく出来ていると思う。今後は cli ライブラリとして picocli を使っていこうと思う。&lt;/p></content></item><item><title>カスタム github action 開発に着手</title><link>/diary/posts/2022/0325/</link><pubDate>Fri, 25 Mar 2022 18:35:34 +0900</pubDate><guid>/diary/posts/2022/0325/</guid><description>0時に寝て6時に起きた。
歯科検診 3ヶ月ごとの定期検診。本音は行くのが面倒くさいのだけど、こういう機会がないと検診に行かないので健康のためと思って通い続けている。基本的には30分強ぐらいで歯の掃除？みたいなことをやるだけ。下の歯の親知らずをまだ抜いていなくて、歯磨きでは届かないスポットがあって、そこが虫歯になりやすいのかな？3ヶ月に1回は掃除してもらえるのでたぶん役に立っているのだろう。今回は前にレントゲンをとって2年経ったので取り直ししましょうということで歯のレントゲンもとった。この歯医者さんにきてから2年経ったんだなということを実感した。よい歯医者さんだと思っているのでこれからも通うだろう。
カスタム github action 開発 前からやろうやろうと思っていて、他のことに時間を割かれてできていなかったことに着手した。久しぶりに gradle を触ったら使い方や設定方法を忘れてしまってドキュメントを読みながら再入門した。1つのアプリケーションであってもマルチプロジェクト構成がデフォルトになったみたい。これによってディレクトリの階層構造も変わっている。
Gradle のマルチプロジェクト機能を試す 今日のところは gradle 設定と main 関数と config のコードだけ書いた。java のバージョンも17を使うことにした。週末にある程度動くものを作りきれるかどうか。着手するまでが一番時間がかかので着手すればすぐにできそうな見通しはある。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="歯科検診">歯科検診&lt;/h2>
&lt;p>3ヶ月ごとの定期検診。本音は行くのが面倒くさいのだけど、こういう機会がないと検診に行かないので健康のためと思って通い続けている。基本的には30分強ぐらいで歯の掃除？みたいなことをやるだけ。下の歯の親知らずをまだ抜いていなくて、歯磨きでは届かないスポットがあって、そこが虫歯になりやすいのかな？3ヶ月に1回は掃除してもらえるのでたぶん役に立っているのだろう。今回は前にレントゲンをとって2年経ったので取り直ししましょうということで歯のレントゲンもとった。この歯医者さんにきてから2年経ったんだなということを実感した。よい歯医者さんだと思っているのでこれからも通うだろう。&lt;/p>
&lt;h2 id="カスタム-github-action-開発">カスタム github action 開発&lt;/h2>
&lt;p>前からやろうやろうと思っていて、他のことに時間を割かれてできていなかったことに着手した。久しぶりに gradle を触ったら使い方や設定方法を忘れてしまってドキュメントを読みながら再入門した。1つのアプリケーションであってもマルチプロジェクト構成がデフォルトになったみたい。これによってディレクトリの階層構造も変わっている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kazamori.jp/blogs/2020/06/30/gradle-multi-project/">Gradle のマルチプロジェクト機能を試す&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>今日のところは gradle 設定と main 関数と config のコードだけ書いた。java のバージョンも17を使うことにした。週末にある程度動くものを作りきれるかどうか。着手するまでが一番時間がかかので着手すればすぐにできそうな見通しはある。&lt;/p></content></item><item><title>github actions の課金金額</title><link>/diary/posts/2022/0321/</link><pubDate>Mon, 21 Mar 2022 11:10:59 +0900</pubDate><guid>/diary/posts/2022/0321/</guid><description>2時に寝て何度か起きてだらだらしながら10時に起きた。
gihtub-api-tools のリファクタリングとデータ分析 実際に使ってみながらリファクタリングしたり、足りない機能を追加したりした。ツールに拡張した機能が使えるかどうかの検証のため、お仕事のプライベートリポジトリのデータを使って分析をし始めて、気付いたら分析ならびに分析結果の資料まで作ってしまった。軽く半日ぐらいのお仕事をやってしまっていた。過去5ヶ月分の課金時間の合計を算出し、単体テストの実行を github actions に追加することで増える課金時間の見積もりと金額を算出した。月間でいまより3時間30分、全体の課金時間に対して20%弱程度の追加が見込まれる。それによる課金金額を算出すると 210 * $0.008 = $1.68 になる。いままで無料枠を超えないように運用してきたわけだが、こんな200円程度の金額を節約するために github actions 上でテスト実行しないといった判断がくだされていた。開発者は誰も実際の課金金額を知らなかったし、課金金額を算出するとあほらしくなった。あと github actions はめちゃくちゃ安い。</description><content>&lt;p>2時に寝て何度か起きてだらだらしながら10時に起きた。&lt;/p>
&lt;h2 id="gihtub-api-tools-のリファクタリングとデータ分析">gihtub-api-tools のリファクタリングとデータ分析&lt;/h2>
&lt;p>実際に使ってみながらリファクタリングしたり、足りない機能を追加したりした。ツールに拡張した機能が使えるかどうかの検証のため、お仕事のプライベートリポジトリのデータを使って分析をし始めて、気付いたら分析ならびに分析結果の資料まで作ってしまった。軽く半日ぐらいのお仕事をやってしまっていた。過去5ヶ月分の課金時間の合計を算出し、単体テストの実行を github actions に追加することで増える課金時間の見積もりと金額を算出した。月間でいまより3時間30分、全体の課金時間に対して20%弱程度の追加が見込まれる。それによる課金金額を算出すると 210 * $0.008 = $1.68 になる。いままで無料枠を超えないように運用してきたわけだが、こんな200円程度の金額を節約するために github actions 上でテスト実行しないといった判断がくだされていた。開発者は誰も実際の課金金額を知らなかったし、課金金額を算出するとあほらしくなった。あと github actions はめちゃくちゃ安い。&lt;/p></content></item><item><title>gihtub-api-tools の拡張</title><link>/diary/posts/2022/0320/</link><pubDate>Sun, 20 Mar 2022 12:11:13 +0900</pubDate><guid>/diary/posts/2022/0320/</guid><description>5時に寝て9時過ぎに起きた。昨日は久しぶりに夜更ししてコードを書いてた。
github actions のいろいろな時間の算出 以前作った github-api-tools を拡張して github actions の実行履歴の分析するための機能を作っている。
Add actions statistics Add gh-cli-actions command for Actions API ひとまずワークフローの実行履歴からジョブのステップの実行時間を積み上げた時間を算出してみた。いくつか API を調べているうちに課金時間は直接 API から取得できることに気付いた。この3つの時間は全然別の意味をもっていて、それぞれの時間は一致しない。
ステップ実行時間: ジョブのそれぞれのステップの実行時間の合計 課金時間: 課金対象として数えられている時間の合計 ワークフロー実行時間: アクションのワークフローの実行にかかった時間 github actions は public リポジトリに関しては課金対象ではないんやね。private リポジトリ且つ github-hosted ランナーを使っている場合のみ課金対象となるみたい。
Viewing job execution time About billing for GitHub Actions</description><content>&lt;p>5時に寝て9時過ぎに起きた。昨日は久しぶりに夜更ししてコードを書いてた。&lt;/p>
&lt;h2 id="github-actions-のいろいろな時間の算出">github actions のいろいろな時間の算出&lt;/h2>
&lt;p>以前作った github-api-tools を拡張して github actions の実行履歴の分析するための機能を作っている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/github-api-tools/issues/2">Add actions statistics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kazamori/github-api-tools/pull/4">Add gh-cli-actions command for Actions API&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ひとまずワークフローの実行履歴からジョブのステップの実行時間を積み上げた時間を算出してみた。いくつか API を調べているうちに課金時間は直接 API から取得できることに気付いた。この3つの時間は全然別の意味をもっていて、それぞれの時間は一致しない。&lt;/p>
&lt;ul>
&lt;li>ステップ実行時間: ジョブのそれぞれのステップの実行時間の合計&lt;/li>
&lt;li>課金時間: 課金対象として数えられている時間の合計&lt;/li>
&lt;li>ワークフロー実行時間: アクションのワークフローの実行にかかった時間&lt;/li>
&lt;/ul>
&lt;p>github actions は public リポジトリに関しては課金対象ではないんやね。private リポジトリ且つ github-hosted ランナーを使っている場合のみ課金対象となるみたい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.github.com/en/actions/monitoring-and-troubleshooting-workflows/viewing-job-execution-time">Viewing job execution time&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions">About billing for GitHub Actions&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>github actions の改善</title><link>/diary/posts/2022/0318/</link><pubDate>Fri, 18 Mar 2022 10:05:06 +0900</pubDate><guid>/diary/posts/2022/0318/</guid><description>0時に寝て3時に起きて6時に起きた。
失敗したジョブの再実行 せらさんのツィートをみかけて調べたら2日ほど前に失敗したジョブからの再実行の改善が行われたらしい。
GitHub Action で失敗したジョブだけ実行できる様になってる。今まで失敗しやすいものは再実行を小さくするために設定を分けたりとかしていたんだけど、そういうことをしなくてもよくなった。
&amp;mdash; Kazuhiro Sera (瀬良) (@seratch_ja) March 18, 2022 Save time with partial re-runs in GitHub Actions たまにだけど、i/o エラーみたいな内容で github actions のワークフロー実行が異常終了することがある。そんなときに途中から再実行できるといいなぁとは思っていた。これはステップ単位ではなく、ジョブ単位の実行みたいだけど、それでも途中から再実行できればワークフローの自由度や効率は上がると思う。github actions がどんどん強力になっていくのが楽しみ。あとやぎさんから教えてもらった GitHub Actions 実践入門 も購入した。ある程度触ったところで雰囲気は掴めてきたので体系的に学んでみる。</description><content>&lt;p>0時に寝て3時に起きて6時に起きた。&lt;/p>
&lt;h2 id="失敗したジョブの再実行">失敗したジョブの再実行&lt;/h2>
&lt;p>せらさんのツィートをみかけて調べたら2日ほど前に失敗したジョブからの再実行の改善が行われたらしい。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">GitHub Action で失敗したジョブだけ実行できる様になってる。今まで失敗しやすいものは再実行を小さくするために設定を分けたりとかしていたんだけど、そういうことをしなくてもよくなった。&lt;/p>&amp;mdash; Kazuhiro Sera (瀬良) (@seratch_ja) &lt;a href="https://twitter.com/seratch_ja/status/1504664461483085826?ref_src=twsrc%5Etfw">March 18, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;ul>
&lt;li>&lt;a href="https://github.blog/2022-03-16-save-time-partial-re-runs-github-actions/">Save time with partial re-runs in GitHub Actions&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>たまにだけど、i/o エラーみたいな内容で github actions のワークフロー実行が異常終了することがある。そんなときに途中から再実行できるといいなぁとは思っていた。これはステップ単位ではなく、ジョブ単位の実行みたいだけど、それでも途中から再実行できればワークフローの自由度や効率は上がると思う。github actions がどんどん強力になっていくのが楽しみ。あとやぎさんから教えてもらった &lt;a href="https://miyajan.booth.pm/items/1865906">GitHub Actions 実践入門&lt;/a> も購入した。ある程度触ったところで雰囲気は掴めてきたので体系的に学んでみる。&lt;/p></content></item><item><title>マージできると開発が楽しい</title><link>/diary/posts/2022/0317/</link><pubDate>Thu, 17 Mar 2022 06:44:18 +0900</pubDate><guid>/diary/posts/2022/0317/</guid><description>0時に寝て3時に起きて5時半に起きた。
開発のコミット/マージのルール改定 過去のスクラムのふりかえりをみていて、12月15日にレビューアが1人のため、Pull Request (以下PR) のレビューにかなり時間がかかっているという指摘をしてから3ヶ月かかって、ようやくレビュー負荷が集中していた社員からレビュープロセスの改善の機会がもたらされた。なぜレビュー負荷が1人に集中するかというと、チームの開発者は5人で、正社員1人で他4人は外部の協力会社であるため、正社員の approve なしでマージすることに躊躇するという状況だった。
大幅にレビュープロセスが緩和された。
軽微な変更は PR を作って自分でマージしてよい (所属問わず) 1人以上のレビューアによる apprve があればマージしてよい PO が最終レビューするものは PR レビューアの approve を得なくてもよい 私の作業時間の1/3は PR レビューの待ち時間だったのでこれだけで私の生産性は1.5倍になる。どんどんコミットしていけると開発していて楽しい。
オンライン飲み会 余りまくっている交際費の予算消化も兼ねて前にお手伝いしていた会社のたにがきさんと雑談した。近況を話したりもしつつ、たにがきさんは私が過去に働いていた会社の親会社で働いていて、その時期も重なっていて、その親会社の話しを主にしていた。その親会社は主力プロダクトの完全な作り直しを宣言して、1000億円ぐらい開発費を投じたものの、実際にはプロダクトの作り直しに失敗して、資金繰りが悪化して事実上の倒産をした。親会社の社長はカリスマ社長で新興宗教の教祖みたいな感じだったんだけど、会社がファンドに買収されて、取締役を退任させられて、しばらくは鳴りを潜めていたけど、最近はまた会社を作って精力的に活動しているらしい。近く OB 会のようなイベントがカリスマ社長から呼びかけられているらしく、どう考えてもリクルーティングの場なんだろうと話していた。また1年ぐらいしたら近況報告会をしてもいいかもしれない。</description><content>&lt;p>0時に寝て3時に起きて5時半に起きた。&lt;/p>
&lt;h2 id="開発のコミットマージのルール改定">開発のコミット/マージのルール改定&lt;/h2>
&lt;p>過去のスクラムのふりかえりをみていて、12月15日にレビューアが1人のため、Pull Request (以下PR) のレビューにかなり時間がかかっているという指摘をしてから3ヶ月かかって、ようやくレビュー負荷が集中していた社員からレビュープロセスの改善の機会がもたらされた。なぜレビュー負荷が1人に集中するかというと、チームの開発者は5人で、正社員1人で他4人は外部の協力会社であるため、正社員の approve なしでマージすることに躊躇するという状況だった。&lt;/p>
&lt;p>大幅にレビュープロセスが緩和された。&lt;/p>
&lt;ul>
&lt;li>軽微な変更は PR を作って自分でマージしてよい&lt;/li>
&lt;li>(所属問わず) 1人以上のレビューアによる apprve があればマージしてよい&lt;/li>
&lt;li>PO が最終レビューするものは PR レビューアの approve を得なくてもよい&lt;/li>
&lt;/ul>
&lt;p>私の作業時間の1/3は PR レビューの待ち時間だったのでこれだけで私の生産性は1.5倍になる。どんどんコミットしていけると開発していて楽しい。&lt;/p>
&lt;h2 id="オンライン飲み会">オンライン飲み会&lt;/h2>
&lt;p>余りまくっている交際費の予算消化も兼ねて前にお手伝いしていた会社のたにがきさんと雑談した。近況を話したりもしつつ、たにがきさんは私が過去に働いていた会社の親会社で働いていて、その時期も重なっていて、その親会社の話しを主にしていた。その親会社は主力プロダクトの完全な作り直しを宣言して、1000億円ぐらい開発費を投じたものの、実際にはプロダクトの作り直しに失敗して、資金繰りが悪化して事実上の倒産をした。親会社の社長はカリスマ社長で新興宗教の教祖みたいな感じだったんだけど、会社がファンドに買収されて、取締役を退任させられて、しばらくは鳴りを潜めていたけど、最近はまた会社を作って精力的に活動しているらしい。近く OB 会のようなイベントがカリスマ社長から呼びかけられているらしく、どう考えてもリクルーティングの場なんだろうと話していた。また1年ぐらいしたら近況報告会をしてもいいかもしれない。&lt;/p></content></item><item><title>平穏な一日</title><link>/diary/posts/2022/0314/</link><pubDate>Mon, 14 Mar 2022 07:54:52 +0900</pubDate><guid>/diary/posts/2022/0314/</guid><description>0時に寝て5時半に起きた。一仕事を終えて淡々と前の作業の続きのリファクタリングなどをしていた。
デプロイ改善のタスク完了報告 週末にパイプライン処理の検証やロールバック処理の実装を行った。ドキュメントも一通り書いた。チームの開発者にそれらを説明して3スプリント(3週間)に渡った改善が完了したことを報告した。チケットにすると26、そのうち私が担当したのが22なので、私がイニシアティブをとって完遂させた。github actions を始めとする、github のサービスの理解が深まってそれなりに学びがあった。自分でもいくつかカスタム action を作ってみようと思う。</description><content>&lt;p>0時に寝て5時半に起きた。一仕事を終えて淡々と前の作業の続きのリファクタリングなどをしていた。&lt;/p>
&lt;h2 id="デプロイ改善のタスク完了報告">デプロイ改善のタスク完了報告&lt;/h2>
&lt;p>週末にパイプライン処理の検証やロールバック処理の実装を行った。ドキュメントも一通り書いた。チームの開発者にそれらを説明して3スプリント(3週間)に渡った改善が完了したことを報告した。チケットにすると26、そのうち私が担当したのが22なので、私がイニシアティブをとって完遂させた。github actions を始めとする、github のサービスの理解が深まってそれなりに学びがあった。自分でもいくつかカスタム action を作ってみようと思う。&lt;/p></content></item><item><title>デプロイ改善の残作業</title><link>/diary/posts/2022/0312/</link><pubDate>Sat, 12 Mar 2022 09:49:06 +0900</pubDate><guid>/diary/posts/2022/0312/</guid><description>23時に寝て2時に起きて4時ぐらいまでだらだらして寝て6時に起きた。
ストレッチ これまで11時からストレッチを受けていたが、今週から dr.stretch さんの土日の開店時間が10時になったのにあわせる形で時間変更した。朝に予定が入っているとその時間にあわせて起きて身支度して1日が始まるので家で中途半端にだらだらしなくてよい。いつもは11時にあわせて家を出掛けるのが、10時にあわせて出掛けるようになったのでいつもより1時間早く活動できるようになった。私はなんか予定がないとだらだらしてしまって怠惰に過ごしてしまう。そういう怠ける自分の性格もわかっているので適度に予定を入れて怠けないように注意している。
今日の開脚幅は開始前163cmで、ストレッチ後165cmだった。先週とほぼ同じ。今週もお仕事が忙しくて全くできなかったので現状維持といったところ。
デプロイのパイプライン処理 github deployment から workflow dispatch に移行したおかげでせっかく deployments ベースで作ったパイプライン処理のツールを workflow dispatch 向けに移行する必要があった。言うても基本的に同じパラメーターを処理するだけなので大半は再利用できる。ツールのちょっとしたリファクタリングをやってパイプライン処理が動くかどうかの検証をして、ドキュメントを wiki にまとめた。あとはロールバックを自動化するための仕組みを作るだけ。基本的には k8s の kubectl を実行するワークフローを作るだけという想定。</description><content>&lt;p>23時に寝て2時に起きて4時ぐらいまでだらだらして寝て6時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>これまで11時からストレッチを受けていたが、今週から dr.stretch さんの土日の開店時間が10時になったのにあわせる形で時間変更した。朝に予定が入っているとその時間にあわせて起きて身支度して1日が始まるので家で中途半端にだらだらしなくてよい。いつもは11時にあわせて家を出掛けるのが、10時にあわせて出掛けるようになったのでいつもより1時間早く活動できるようになった。私はなんか予定がないとだらだらしてしまって怠惰に過ごしてしまう。そういう怠ける自分の性格もわかっているので適度に予定を入れて怠けないように注意している。&lt;/p>
&lt;p>今日の開脚幅は開始前163cmで、ストレッチ後165cmだった。先週とほぼ同じ。今週もお仕事が忙しくて全くできなかったので現状維持といったところ。&lt;/p>
&lt;h2 id="デプロイのパイプライン処理">デプロイのパイプライン処理&lt;/h2>
&lt;p>github deployment から workflow dispatch に移行したおかげでせっかく deployments ベースで作ったパイプライン処理のツールを workflow dispatch 向けに移行する必要があった。言うても基本的に同じパラメーターを処理するだけなので大半は再利用できる。ツールのちょっとしたリファクタリングをやってパイプライン処理が動くかどうかの検証をして、ドキュメントを wiki にまとめた。あとはロールバックを自動化するための仕組みを作るだけ。基本的には k8s の kubectl を実行するワークフローを作るだけという想定。&lt;/p></content></item><item><title>ばてばての木曜日</title><link>/diary/posts/2022/0310/</link><pubDate>Thu, 10 Mar 2022 07:34:32 +0900</pubDate><guid>/diary/posts/2022/0310/</guid><description>23時に寝てたぶん1回ぐらい起きて6時前に起きた。
GitHub Discussions やぎさんに GitHub Discussions というのがあると教えてもらった。軽くチュートリアルやドキュメントに目を通してみた。stackoverflow のような q&amp;amp;a ができるようなサービスなのかな？著名な oss のコミュニティでたまに盛り上がるネタとして issue がサポートセンターになってしまうという問題がある。経験が少ない開発者が自分の環境で動かなかったときに issue 登録して開発者にサポートを依頼するみたいなことになってしまうケースがある。もちろん経験が少ない開発者にとっては環境要因のエラーとそうじゃないのを見分けるのは難しいことかもしれない。一方で oss コミュニティのメンテナーのリソースも有限なことから初心者質問を回答するために多くの労力をさけないという現実もある。その issue と q&amp;amp;a のギャップを埋めるようなサービスになるのかな？と推測している。試しにいま作っているデプロイツールで discussions を有効にしたのでいろいろ触ってみる。
近況報告 約1年ぶりにやすだ先生とオンライン飲み会をした。3月にやっているので今期の経営的なふりかえりも少ししつつ大半は雑談をしていた。昨年、経営コンサルティングで交際費が少な過ぎるという指摘を受けてからオンライン飲み会や雑談会を始めたときの、身近な相談相手の1人と言える。今期は10人以上とオンライン飲み会やオフラインの雑談会をやっているし、こんな感じで知人と定期的に近況を話す仕組みを継続できればいいなとは思う。今期は交際費として30万円/年の予算を確保しているものの、現時点では83,747円しか消化していない。もう決算まで1ヶ月もないのに。なぜなのか。。。</description><content>&lt;p>23時に寝てたぶん1回ぐらい起きて6時前に起きた。&lt;/p>
&lt;h2 id="github-discussions">GitHub Discussions&lt;/h2>
&lt;p>やぎさんに &lt;a href="https://docs.github.com/en/discussions">GitHub Discussions&lt;/a> というのがあると教えてもらった。軽くチュートリアルやドキュメントに目を通してみた。stackoverflow のような q&amp;amp;a ができるようなサービスなのかな？著名な oss のコミュニティでたまに盛り上がるネタとして issue がサポートセンターになってしまうという問題がある。経験が少ない開発者が自分の環境で動かなかったときに issue 登録して開発者にサポートを依頼するみたいなことになってしまうケースがある。もちろん経験が少ない開発者にとっては環境要因のエラーとそうじゃないのを見分けるのは難しいことかもしれない。一方で oss コミュニティのメンテナーのリソースも有限なことから初心者質問を回答するために多くの労力をさけないという現実もある。その issue と q&amp;amp;a のギャップを埋めるようなサービスになるのかな？と推測している。試しにいま作っているデプロイツールで discussions を有効にしたのでいろいろ触ってみる。&lt;/p>
&lt;h2 id="近況報告">近況報告&lt;/h2>
&lt;p>約1年ぶりにやすだ先生とオンライン飲み会をした。3月にやっているので今期の経営的なふりかえりも少ししつつ大半は雑談をしていた。昨年、経営コンサルティングで交際費が少な過ぎるという指摘を受けてからオンライン飲み会や雑談会を始めたときの、身近な相談相手の1人と言える。今期は10人以上とオンライン飲み会やオフラインの雑談会をやっているし、こんな感じで知人と定期的に近況を話す仕組みを継続できればいいなとは思う。今期は交際費として30万円/年の予算を確保しているものの、現時点では83,747円しか消化していない。もう決算まで1ヶ月もないのに。なぜなのか。。。&lt;/p></content></item><item><title>デプロイ改善の成果まとめ</title><link>/diary/posts/2022/0308/</link><pubDate>Tue, 08 Mar 2022 06:24:20 +0900</pubDate><guid>/diary/posts/2022/0308/</guid><description>23時に寝て5時過ぎに起きた。何度か途中で起きたけど、久しぶりによく寝た。前日あまり寝てなかったから19時過ぎには帰ってきてだらだらしてた。
もてなしだけではもう食えない 業界研究を兼ねて もてなしだけではもう食えない -ホテル経営学の本質と実践- を読み始めた。同じ出版社の週刊ホテルレストランという雑誌の連載を書籍化したものらしい。著者は立教大学で社会人向けビジネススクールでホテルマネジメントとホテルインベストメントを教えているらしい。ビジネスの堅い話しを小説調にすれば読みやすいんじゃないかみたいな取り組みなのかな？よくわかてないけど、小説仕立てで業界研究ができるような書籍になっているらしい。第1章プロローグと第2章腐りやすい在庫を読んだ。実際の現場でこんな仕事できない人が改革チームのリーダーなんかになったりしないなと思いながら読んでた。そこは本題じゃない！コンサルティングでありそうな経営の話しが出てくるのでうちの会社の経営の勉強にもなるかもしれない。少しずつ読んでいく。
デプロイ改善の成果 水曜日がすくらむのふりかえりイベントがあるのでそれに間に合わせて簡単にまとめの資料を作った。3スプリント (3週間) もかけて抜本的に開発のワークフローからビルド/デプロイの ci/cd を見直したので開発全般に影響を与えた。
本番環境デプロイ: 実行時間を約72%の短縮 テスト環境デプロイ: 実行時間を約51%の短縮 hotfix デプロイ: 実行時間を約64%の短縮 そもそも従来のやり方では hotfix を出していないので机上の時間ではあるが 単純に github actions の実行時間だけ比較しても速くなっているのだけど、それ以上にブランチ戦略を大きく変えた。従来は3つのブランチで運用していた。
develop test main これを1つのブランチのみで運用できるように開発のワークフローを刷新した。ブランチが1つしかないので ci/cd の戦略もシンプルになって、変則的な運用 (hotfix を出したいとか) をしても、開発全体に影響を与えない。「誰か勝手にブランチを作ってデプロイして」で終わる。従来のやり方は3つのブランチが開発ワークフローと ci/cd に密接であったために本番環境のリリースするときは開発すべてが止まってしまう状態だった。週1回のリリースだったので本番リリース前の1-2日は PR のレビューやマージを止めているという運用になっていた。それは開発速度に大きな影響を与えていた。ブランチ戦略を見直したことでいつでも本番環境にデプロイできるようになって、継続的デリバリーっぽいことがやりたかったらできるよという話しをした。</description><content>&lt;p>23時に寝て5時過ぎに起きた。何度か途中で起きたけど、久しぶりによく寝た。前日あまり寝てなかったから19時過ぎには帰ってきてだらだらしてた。&lt;/p>
&lt;h2 id="もてなしだけではもう食えない">もてなしだけではもう食えない&lt;/h2>
&lt;p>業界研究を兼ねて &lt;a href="https://ec.hoteresonline.com/products/detail.php?product_id=262">もてなしだけではもう食えない -ホテル経営学の本質と実践-&lt;/a> を読み始めた。同じ出版社の週刊ホテルレストランという雑誌の連載を書籍化したものらしい。著者は立教大学で社会人向けビジネススクールでホテルマネジメントとホテルインベストメントを教えているらしい。ビジネスの堅い話しを小説調にすれば読みやすいんじゃないかみたいな取り組みなのかな？よくわかてないけど、小説仕立てで業界研究ができるような書籍になっているらしい。第1章プロローグと第2章腐りやすい在庫を読んだ。実際の現場でこんな仕事できない人が改革チームのリーダーなんかになったりしないなと思いながら読んでた。そこは本題じゃない！コンサルティングでありそうな経営の話しが出てくるのでうちの会社の経営の勉強にもなるかもしれない。少しずつ読んでいく。&lt;/p>
&lt;h2 id="デプロイ改善の成果">デプロイ改善の成果&lt;/h2>
&lt;p>水曜日がすくらむのふりかえりイベントがあるのでそれに間に合わせて簡単にまとめの資料を作った。3スプリント (3週間) もかけて抜本的に開発のワークフローからビルド/デプロイの ci/cd を見直したので開発全般に影響を与えた。&lt;/p>
&lt;ul>
&lt;li>本番環境デプロイ: 実行時間を約72%の短縮&lt;/li>
&lt;li>テスト環境デプロイ: 実行時間を約51%の短縮&lt;/li>
&lt;li>hotfix デプロイ: 実行時間を約64%の短縮
&lt;ul>
&lt;li>そもそも従来のやり方では hotfix を出していないので机上の時間ではあるが&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>単純に github actions の実行時間だけ比較しても速くなっているのだけど、それ以上にブランチ戦略を大きく変えた。従来は3つのブランチで運用していた。&lt;/p>
&lt;ul>
&lt;li>develop&lt;/li>
&lt;li>test&lt;/li>
&lt;li>main&lt;/li>
&lt;/ul>
&lt;p>これを1つのブランチのみで運用できるように開発のワークフローを刷新した。ブランチが1つしかないので ci/cd の戦略もシンプルになって、変則的な運用 (hotfix を出したいとか) をしても、開発全体に影響を与えない。「誰か勝手にブランチを作ってデプロイして」で終わる。従来のやり方は3つのブランチが開発ワークフローと ci/cd に密接であったために本番環境のリリースするときは開発すべてが止まってしまう状態だった。週1回のリリースだったので本番リリース前の1-2日は PR のレビューやマージを止めているという運用になっていた。それは開発速度に大きな影響を与えていた。ブランチ戦略を見直したことでいつでも本番環境にデプロイできるようになって、継続的デリバリーっぽいことがやりたかったらできるよという話しをした。&lt;/p></content></item><item><title>ワークフローの移行説明</title><link>/diary/posts/2022/0307/</link><pubDate>Mon, 07 Mar 2022 08:11:25 +0900</pubDate><guid>/diary/posts/2022/0307/</guid><description>3時に寝て6時半に起きた。朝起きたら github actions のリソース上限に達しているという連絡が slack に書き込まれていて週末に移行作業して1500分ぐらいは浪費しましたと事後報告した。
ワークフロー移行後の説明 週末に移行した新しい ci/cd の仕組みを開発者に説明した。開発のワークフローも大きく変わる。いくつか要望をもらいつつ、とくに混乱も誤解もなく受け入れられた。github actions の管理画面からボタンでデプロイ実行できるため、本番環境にデプロイできるユーザーは制限したいと言われて次のようなステップを追加した。
- name: デプロイユーザーを確認 if: ${{ env.DEPLOYMENT_ENV == &amp;#39;prod&amp;#39; }} run: | [[ &amp;#34;${{ contains(fromJSON(env.DEPLOYABLE_USERS), github.actor) }}&amp;#34; == &amp;#34;true&amp;#34; ]] &amp;amp;&amp;amp; exit 0 echo &amp;#34;デプロイ権限のあるユーザーではありません&amp;#34; exit 1 env: DEPLOYABLE_USERS: &amp;#39;[&amp;#34;user1&amp;#34;, &amp;#34;user2&amp;#34;, &amp;#34;app-bot&amp;#34;]&amp;#39; expressions の Functions に組み込みの関数がいくつか紹介されている。それらを組み合わせるとうまくいきそうと思って書いてみた。たしかにちょっと楽に実装はできるけど、github actions の expression とシェルの文字列との境界が、yaml のコード上では曖昧なため、真偽値などはとくにわかりにくい。例えば、次のコード。
[[ &amp;#34;${{ contains(fromJSON(env.DEPLOYABLE_USERS), github.actor) }}&amp;#34; == &amp;#34;true&amp;#34; ]] ${{ ... }} で囲まれたところは github の expression なので boolean として評価できるが、それをシェルにもってくると文字列になってしまうので文字列で比較しないといけない。普通にコードを書いていて気づきにくいので実行して振る舞いを検証しないと間違うみたいな話し。</description><content>&lt;p>3時に寝て6時半に起きた。朝起きたら github actions のリソース上限に達しているという連絡が slack に書き込まれていて週末に移行作業して1500分ぐらいは浪費しましたと事後報告した。&lt;/p>
&lt;h2 id="ワークフロー移行後の説明">ワークフロー移行後の説明&lt;/h2>
&lt;p>週末に移行した新しい ci/cd の仕組みを開発者に説明した。開発のワークフローも大きく変わる。いくつか要望をもらいつつ、とくに混乱も誤解もなく受け入れられた。github actions の管理画面からボタンでデプロイ実行できるため、本番環境にデプロイできるユーザーは制限したいと言われて次のようなステップを追加した。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">デプロイユーザーを確認&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">if&lt;/span>: &lt;span style="color:#ae81ff">${{ env.DEPLOYMENT_ENV == &amp;#39;prod&amp;#39; }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> [[ &amp;#34;${{ contains(fromJSON(env.DEPLOYABLE_USERS), github.actor) }}&amp;#34; == &amp;#34;true&amp;#34; ]] &amp;amp;&amp;amp; exit 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;デプロイ権限のあるユーザーではありません&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> exit 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">DEPLOYABLE_USERS&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;[&amp;#34;user1&amp;#34;, &amp;#34;user2&amp;#34;, &amp;#34;app-bot&amp;#34;]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>expressions の &lt;a href="https://docs.github.com/en/actions/learn-github-actions/expressions#functions">Functions&lt;/a> に組み込みの関数がいくつか紹介されている。それらを組み合わせるとうまくいきそうと思って書いてみた。たしかにちょっと楽に実装はできるけど、github actions の expression とシェルの文字列との境界が、yaml のコード上では曖昧なため、真偽値などはとくにわかりにくい。例えば、次のコード。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>{ contains(fromJSON(env.DEPLOYABLE_USERS), github.actor) &lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">}&amp;#34;&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#f92672">]]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>${{ ... }}&lt;/code> で囲まれたところは github の expression なので boolean として評価できるが、それをシェルにもってくると文字列になってしまうので文字列で比較しないといけない。普通にコードを書いていて気づきにくいので実行して振る舞いを検証しないと間違うみたいな話し。&lt;/p></content></item><item><title>もっとさいきょうのでぷろい</title><link>/diary/posts/2022/0306/</link><pubDate>Sun, 06 Mar 2022 02:58:35 +0900</pubDate><guid>/diary/posts/2022/0306/</guid><description>ぼくのかんがえたもっとさいきょうのでぷろい 昨日 ぼくのかんがえたさいきょうのでぷろい を実装したんだけど、その後、残っていた残課題に対応しているうちにもっと最強のデプロイ方法があることに気付いた。結論から言って GitHub Deployments を使う必要がなかった。GitHub Deployments で過去のリビジョンを指定したときは次のような 409 エラーが発生する。
gh: Conflict merging main into f0cff65c94c4a242efebc79c8fb1e31d58d2f592. (HTTP 409) これを回避するためにどんな手段があるかなと workflow dispatch event をみていて inputs というパラメーターがあることに気付いた。あれ？workflow dispatch ってパラメーターを受け取ることができたんだっけ？と調べたら2020年7月ぐらいからできるようになってた。
GitHub Actions: Manual triggers with workflow_dispatch GitHub Actions: Input types for manual workflows github actions の web ui とも連動していて画面からもパラメーターを渡せるようになっていた。jenkins で言うところのパラメーター付きビルドと呼ばれる機能。カスタムアクションの inputs と同じような使い勝手で利用できる。workflow dispatch がパラメーターを受け取れるなら GitHub Deployments を使うメリットって何があるっけ？と思ったら何もなかった。GitHub Deployments を使うことで無駄にリソースを浪費してパイプライン処理を複雑化させるデメリットしかなかった。inputs に渡す型に environment を指定すると、環境の制限や権限、protected branch などにも応用できるらしい。但し、この environment は public リポジトリか、github enterprise でしか高度な設定はできないみたい。GitHub Deployments 経由でリソースの作成自体はできる。</description><content>&lt;h2 id="ぼくのかんがえたもっとさいきょうのでぷろい">ぼくのかんがえたもっとさいきょうのでぷろい&lt;/h2>
&lt;p>昨日 &lt;a href="/diary/diary/posts/2022/0305/#ぼくのかんがえたさいきょうのでぷろい">ぼくのかんがえたさいきょうのでぷろい&lt;/a> を実装したんだけど、その後、残っていた残課題に対応しているうちにもっと最強のデプロイ方法があることに気付いた。結論から言って &lt;a href="https://docs.github.com/en/rest/reference/deployments">GitHub Deployments&lt;/a> を使う必要がなかった。GitHub Deployments で過去のリビジョンを指定したときは次のような 409 エラーが発生する。&lt;/p>
&lt;pre tabindex="0">&lt;code>gh: Conflict merging main into f0cff65c94c4a242efebc79c8fb1e31d58d2f592. (HTTP 409)
&lt;/code>&lt;/pre>&lt;p>これを回避するためにどんな手段があるかなと &lt;a href="https://docs.github.com/en/rest/reference/actions#create-a-workflow-dispatch-event">workflow dispatch event&lt;/a> をみていて &lt;code>inputs&lt;/code> というパラメーターがあることに気付いた。あれ？workflow dispatch ってパラメーターを受け取ることができたんだっけ？と調べたら2020年7月ぐらいからできるようになってた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/">GitHub Actions: Manual triggers with workflow_dispatch&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.blog/changelog/2021-11-10-github-actions-input-types-for-manual-workflows/">GitHub Actions: Input types for manual workflows&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>github actions の web ui とも連動していて画面からもパラメーターを渡せるようになっていた。jenkins で言うところのパラメーター付きビルドと呼ばれる機能。カスタムアクションの &lt;a href="https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#inputs">inputs&lt;/a> と同じような使い勝手で利用できる。workflow dispatch がパラメーターを受け取れるなら GitHub Deployments を使うメリットって何があるっけ？と思ったら何もなかった。GitHub Deployments を使うことで無駄にリソースを浪費してパイプライン処理を複雑化させるデメリットしかなかった。inputs に渡す型に &lt;a href="https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment">environment&lt;/a> を指定すると、環境の制限や権限、protected branch などにも応用できるらしい。但し、この environment は public リポジトリか、github enterprise でしか高度な設定はできないみたい。GitHub Deployments 経由でリソースの作成自体はできる。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/0306_workflow-dispatch.png"/>
&lt;/figure></content></item><item><title>週末は休出</title><link>/diary/posts/2022/0305/</link><pubDate>Sat, 05 Mar 2022 18:55:18 +0900</pubDate><guid>/diary/posts/2022/0305/</guid><description>2時に寝て8時頃に起きた。前日に深夜まで開発してたせいか、朝起きたら頭痛かった。
ストレッチ お仕事に集中していて今週は1回しかストレッチができなかった。今日の開脚幅は開始前164cmで、ストレッチ後165cmだった。先週と同じぐらいかな。それでも毎週予定が入っているので必ず週に1回はちゃんとしたストレッチを受けられる。もう1年以上続けているのだけど、以前より体調のよい状態をずっと継続できている。私はなにかに集中すると他のことをしばらく放置してそればっかりやってしまう傾向があるから毎週の予約があることが継続的な体調管理に大きく役立っている。太ももの後ろの筋肉と腰のストレッチの2つを楽しみにしている。デスクワークをする人は基本的にこの2つに疲労が蓄積するので疲労が溜まるのは自然と言える。その度合いがどのぐらいかでその週の疲労感や調子がよくわかる。今日は先週よりもその2つはましになっていた。
ぼくのかんがえたさいきょうのでぷろい ここ2週間ほど、ビルドとデプロイの分離のための作業をしている。具体的には GitHub Deployments と GitHub Actions を組み合わせて、新たな開発のワークフローを作るといったもの。main, test, develop と3つのブランチで開発/運用しているのを main ブランチ1つに統合し、ビルドもデプロイも最小限に留めて継続的デリバリーを目指すというもの。移行時は開発を止めてしまうのでこの土日で作業する予定だった。準備は十分にやっていたので問題なく移行を完了させた。今日は単体リポジトリのテスト環境へのデプロイができるところまでできた。あとはデプロイツールや github actions の処理を洗練させていくだけ。テンションが上がっているのでこのまま明日も休出してできるだけ品質をあげていく。</description><content>&lt;p>2時に寝て8時頃に起きた。前日に深夜まで開発してたせいか、朝起きたら頭痛かった。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>お仕事に集中していて今週は1回しかストレッチができなかった。今日の開脚幅は開始前164cmで、ストレッチ後165cmだった。先週と同じぐらいかな。それでも毎週予定が入っているので必ず週に1回はちゃんとしたストレッチを受けられる。もう1年以上続けているのだけど、以前より体調のよい状態をずっと継続できている。私はなにかに集中すると他のことをしばらく放置してそればっかりやってしまう傾向があるから毎週の予約があることが継続的な体調管理に大きく役立っている。太ももの後ろの筋肉と腰のストレッチの2つを楽しみにしている。デスクワークをする人は基本的にこの2つに疲労が蓄積するので疲労が溜まるのは自然と言える。その度合いがどのぐらいかでその週の疲労感や調子がよくわかる。今日は先週よりもその2つはましになっていた。&lt;/p>
&lt;h2 id="ぼくのかんがえたさいきょうのでぷろい">ぼくのかんがえたさいきょうのでぷろい&lt;/h2>
&lt;p>ここ2週間ほど、ビルドとデプロイの分離のための作業をしている。具体的には &lt;a href="https://docs.github.com/en/rest/reference/deployments">GitHub Deployments&lt;/a> と &lt;a href="https://docs.github.com/en/actions">GitHub Actions&lt;/a> を組み合わせて、新たな開発のワークフローを作るといったもの。main, test, develop と3つのブランチで開発/運用しているのを main ブランチ1つに統合し、ビルドもデプロイも最小限に留めて継続的デリバリーを目指すというもの。移行時は開発を止めてしまうのでこの土日で作業する予定だった。準備は十分にやっていたので問題なく移行を完了させた。今日は単体リポジトリのテスト環境へのデプロイができるところまでできた。あとはデプロイツールや github actions の処理を洗練させていくだけ。テンションが上がっているのでこのまま明日も休出してできるだけ品質をあげていく。&lt;/p></content></item><item><title>github apps を調べた</title><link>/diary/posts/2022/0301/</link><pubDate>Tue, 01 Mar 2022 07:56:36 +0900</pubDate><guid>/diary/posts/2022/0301/</guid><description>23時に寝て5時半に起きた。何度か夜中にも起きた。起きてからドラクエタクトやってた。
oauth apps と github apps いまお仕事で ci/cd の改善をやっていて、その一環としてリポジトリをまたがったパイプライン処理を検討している。 ci/cd で使うような認可の仕組みとして github には oauth apps と github apps の2種類がある。
Building OAuth Apps Building GitHub Apps 私はどちらも全く関わったことがなかったので、仕組みがイメージできる oauth apps を使えばよいのだろうと調べ始めた。しかし、一通り調べてみて会社の開発における ci/cd に使うなら github apps の方が適していることがわかった。両者がどう違うのかもドキュメントに記載されている。最初にこのドキュメントを読めば oauth apps を調査する必要はなかった。
Differences between GitHub Apps and OAuth Apps 具体的には、oauth apps は user の権限を認可する仕組みで、github apps は organization の権限を認可する仕組みと言える。github apps も oauth によるユーザー認証もできる上にアプリ自身の認証もできる。さらにアクセスできるリポジトリも制限できることから github actions などで、特定のリポジトリに対してのみアクセス可能なトークンを取得するには github apps の方が向くというわけだ。oauth でユーザーが認可するときに scope を指定するが、その scope を organization が設定できるといったところが github apps と oauth との違いにみえる。取得できる token の有効期限にもその考え方の違いが出ている。</description><content>&lt;p>23時に寝て5時半に起きた。何度か夜中にも起きた。起きてからドラクエタクトやってた。&lt;/p>
&lt;h2 id="oauth-apps-と-github-apps">oauth apps と github apps&lt;/h2>
&lt;p>いまお仕事で ci/cd の改善をやっていて、その一環としてリポジトリをまたがったパイプライン処理を検討している。
ci/cd で使うような認可の仕組みとして github には oauth apps と github apps の2種類がある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.github.com/en/developers/apps/building-oauth-apps">Building OAuth Apps&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.github.com/en/developers/apps/building-github-apps">Building GitHub Apps&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>私はどちらも全く関わったことがなかったので、仕組みがイメージできる oauth apps を使えばよいのだろうと調べ始めた。しかし、一通り調べてみて会社の開発における ci/cd に使うなら github apps の方が適していることがわかった。両者がどう違うのかもドキュメントに記載されている。最初にこのドキュメントを読めば oauth apps を調査する必要はなかった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.github.com/en/developers/apps/getting-started-with-apps/differences-between-github-apps-and-oauth-apps">Differences between GitHub Apps and OAuth Apps&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>具体的には、oauth apps は user の権限を認可する仕組みで、github apps は organization の権限を認可する仕組みと言える。github apps も oauth によるユーザー認証もできる上にアプリ自身の認証もできる。さらにアクセスできるリポジトリも制限できることから github actions などで、特定のリポジトリに対してのみアクセス可能なトークンを取得するには github apps の方が向くというわけだ。oauth でユーザーが認可するときに scope を指定するが、その scope を organization が設定できるといったところが github apps と oauth との違いにみえる。取得できる token の有効期限にもその考え方の違いが出ている。&lt;/p>
&lt;ul>
&lt;li>oauth apps
&lt;ul>
&lt;li>ユーザー/デバイス認証
&lt;ul>
&lt;li>認可コード: 15分&lt;/li>
&lt;li>アクセストークン: 無期限&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>github apps
&lt;ul>
&lt;li>installation 認証
&lt;ul>
&lt;li>認可jwt: 10分&lt;/li>
&lt;li>installation トークン: 1時間&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ユーザー/デバイス認証
&lt;ul>
&lt;li>認可コード: 15分&lt;/li>
&lt;li>アクセストークン: 8時間&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content></item><item><title>github deployments の調査</title><link>/diary/posts/2022/0226/</link><pubDate>Sat, 26 Feb 2022 13:11:13 +0900</pubDate><guid>/diary/posts/2022/0226/</guid><description>22時に寝て23時半に起きて1時に寝て6時に起きた。
ストレッチ 先週に引き続き、右太もも後ろの張り感が強い。もしかしたらここ2-3週間、長時間机に向かっていることが増えて負担がかかっているのかもしれない。2月は寒いから帰って散歩やジョギングすることもなくて余計に筋肉をほぐすこともできていない。今日の開脚幅は開始前164cmで、ストレッチ後160cmで先週と変わらないぐらいだった。調子がよくなかったのか、ストレッチ後にあまり開脚できなかった。たまにこういうときもある。
github deployments の調査 github actions を実行するにはなんらかのトリガーが必要なことから、デプロイのためのトリガーに使えそうなものはないかを Events that trigger workflows で調べていたら deployment と deployment_status というイベントがあることに気付いた。
わりと最近できた仕組みで github deployments という api 群が提供されている。一度ベーダとして出したものの、アルファレベルだったせいか、gh cli でも専用コマンドとして機能追加されていないし、github の slack インテグレーションでも一度提供した deploy サブコマンドを削除するみたいなことが発生している。まだ設計やインタフェースが使いやすいものではないから作り直すみたいな状況にみえる。とはいえ、rest api は提供されているので現状の機能のまま github actions のトリガーとして使う分には問題なさそう。
https://github.com/cli/cli/issues/921 https://github.com/integrations/slack/issues/1150 ビルドとデプロイを分離するにあたって、デプロイのためのトリガーが github 上のサービスとしてみつかったのはよかったと言える。github deployments は現状では中途半端なサービスという位置づけにみえる。
github はどこまでいってもリポジトリ単位というのがボトルネックになるからリポジトリをグルーピングする概念を他のサービスで一貫して扱えるようにならないとサードパーティに頼る場面はまだまだありそうかな。
&amp;mdash; Tetsuya Morimoto (@t2y) February 26, 2022</description><content>&lt;p>22時に寝て23時半に起きて1時に寝て6時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>先週に引き続き、右太もも後ろの張り感が強い。もしかしたらここ2-3週間、長時間机に向かっていることが増えて負担がかかっているのかもしれない。2月は寒いから帰って散歩やジョギングすることもなくて余計に筋肉をほぐすこともできていない。今日の開脚幅は開始前164cmで、ストレッチ後160cmで先週と変わらないぐらいだった。調子がよくなかったのか、ストレッチ後にあまり開脚できなかった。たまにこういうときもある。&lt;/p>
&lt;h2 id="github-deployments-の調査">github deployments の調査&lt;/h2>
&lt;p>github actions を実行するにはなんらかのトリガーが必要なことから、デプロイのためのトリガーに使えそうなものはないかを &lt;a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows">Events that trigger workflows&lt;/a> で調べていたら &lt;code>deployment&lt;/code> と &lt;code>deployment_status&lt;/code> というイベントがあることに気付いた。&lt;/p>
&lt;p>わりと最近できた仕組みで &lt;a href="https://docs.github.com/en/rest/reference/deployments">github deployments&lt;/a> という api 群が提供されている。一度ベーダとして出したものの、アルファレベルだったせいか、gh cli でも専用コマンドとして機能追加されていないし、github の slack インテグレーションでも一度提供した deploy サブコマンドを削除するみたいなことが発生している。まだ設計やインタフェースが使いやすいものではないから作り直すみたいな状況にみえる。とはいえ、rest api は提供されているので現状の機能のまま github actions のトリガーとして使う分には問題なさそう。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/cli/cli/issues/921">https://github.com/cli/cli/issues/921&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/integrations/slack/issues/1150">https://github.com/integrations/slack/issues/1150&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ビルドとデプロイを分離するにあたって、デプロイのためのトリガーが github 上のサービスとしてみつかったのはよかったと言える。github deployments は現状では中途半端なサービスという位置づけにみえる。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">github はどこまでいってもリポジトリ単位というのがボトルネックになるからリポジトリをグルーピングする概念を他のサービスで一貫して扱えるようにならないとサードパーティに頼る場面はまだまだありそうかな。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1497458295602544641?ref_src=twsrc%5Etfw">February 26, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item><item><title>docker の勉強</title><link>/diary/posts/2022/0219/</link><pubDate>Sat, 19 Feb 2022 12:56:33 +0900</pubDate><guid>/diary/posts/2022/0219/</guid><description>0時に寝て6時に起きた。
ストレッチ ここ1ヶ月ほどお仕事に集中しているのもあるけど、あまりストレッチに意識を割いていない。やるときは集中して注力するのだけど、飽きてくると怠ける性格的なところがある。とはいえ、やめずに続けているといいことがあると経験則からわかっているのでなるべく継続していきたい。今週も特別なことはなにもしていないのだけど、右足の股関節周りに張りがあってあまり調子がよくなかった。今日の開脚幅は開始前163cmで、ストレッチ後167cmで先週よりも数値が悪化している。良くなるときもあれば悪くなるときもある。毎週ストレッチを受けて計測しているとそういう気付きがあること自体、この機会は健康のために役立っているように考えている。
github packages で docker イメージを公開する docker が流行りだした頃に勤めていた会社の貸与端末が docker 禁止だったので私は docker に乗り遅れて、これまでも誰かが用意してくれたコンテナを使うだけでよかったため、最低限の docker コマンドや docker-compose の使い方しか知らなかった。ちょうどインフラの運用を見直す過程で docker コンテナの作成方法から見直すお仕事ができたのでこの機にいろいろ勉強する。いまどき当たり前なんだろうけど、docker の マルチステージビルド をやってみる。
最初に go のバイナリを選択したのは間違いだったのかもしれない。go のビルド環境を作るベースイメージの選択が難しくて、ビルドはできるけど、作成したバイナリが動かないという状況にはまった。ECSのタスク起動時に「standard_init_linux.go」関連のエラーが出た場合の対処方法 であるように、いろんな不具合がある。ベースイメージの選択やビルドに必要なライブラリがないとそういうエラーになるんだと気付くまでに時間がかかった。
最終的に次のような Dockerfile でマルチステージビルドができた。builder としてのベースイメージの選択によってやり方はいろいろ変わってくるように思える。
FROM golang:alpine as builder RUN apk add --no-cache git make gcc musl-dev WORKDIR /work COPY . . RUN go mod download RUN make build FROM alpine:latest WORKDIR / COPY --from=builder /work/bin/sql-executor . CMD [ &amp;#34;/sql-executor&amp;#34; ] Dockerfile ができたら Publishing Docker images を読みながら github actions で自動的に docker イメージを github packages に公開する設定をやってみた。リリースを作成したときに docker イメージをビルドして公開する workflow yml を作成した。ほとんどドキュメントのまま。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>ここ1ヶ月ほどお仕事に集中しているのもあるけど、あまりストレッチに意識を割いていない。やるときは集中して注力するのだけど、飽きてくると怠ける性格的なところがある。とはいえ、やめずに続けているといいことがあると経験則からわかっているのでなるべく継続していきたい。今週も特別なことはなにもしていないのだけど、右足の股関節周りに張りがあってあまり調子がよくなかった。今日の開脚幅は開始前163cmで、ストレッチ後167cmで先週よりも数値が悪化している。良くなるときもあれば悪くなるときもある。毎週ストレッチを受けて計測しているとそういう気付きがあること自体、この機会は健康のために役立っているように考えている。&lt;/p>
&lt;h2 id="github-packages-で-docker-イメージを公開する">github packages で docker イメージを公開する&lt;/h2>
&lt;p>docker が流行りだした頃に勤めていた会社の貸与端末が docker 禁止だったので私は docker に乗り遅れて、これまでも誰かが用意してくれたコンテナを使うだけでよかったため、最低限の docker コマンドや docker-compose の使い方しか知らなかった。ちょうどインフラの運用を見直す過程で docker コンテナの作成方法から見直すお仕事ができたのでこの機にいろいろ勉強する。いまどき当たり前なんだろうけど、docker の &lt;a href="https://matsuand.github.io/docs.docker.jp.onthefly/develop/develop-images/multistage-build/">マルチステージビルド&lt;/a> をやってみる。&lt;/p>
&lt;p>最初に go のバイナリを選択したのは間違いだったのかもしれない。go のビルド環境を作るベースイメージの選択が難しくて、ビルドはできるけど、作成したバイナリが動かないという状況にはまった。&lt;a href="https://dev.classmethod.jp/articles/how-to-fix-standard-init-linux-error/">ECSのタスク起動時に「standard_init_linux.go」関連のエラーが出た場合の対処方法&lt;/a> であるように、いろんな不具合がある。ベースイメージの選択やビルドに必要なライブラリがないとそういうエラーになるんだと気付くまでに時間がかかった。&lt;/p>
&lt;p>最終的に次のような &lt;a href="https://github.com/kazamori/go-sql-executor/blob/main/Dockerfile">Dockerfile&lt;/a> でマルチステージビルドができた。builder としてのベースイメージの選択によってやり方はいろいろ変わってくるように思える。&lt;/p>
&lt;pre tabindex="0">&lt;code>FROM golang:alpine as builder
RUN apk add --no-cache git make gcc musl-dev
WORKDIR /work
COPY . .
RUN go mod download
RUN make build
FROM alpine:latest
WORKDIR /
COPY --from=builder /work/bin/sql-executor .
CMD [ &amp;#34;/sql-executor&amp;#34; ]
&lt;/code>&lt;/pre>&lt;p>Dockerfile ができたら &lt;a href="https://docs.github.com/en/actions/publishing-packages/publishing-docker-images">Publishing Docker images&lt;/a> を読みながら github actions で自動的に docker イメージを github packages に公開する設定をやってみた。リリースを作成したときに docker イメージをビルドして公開する &lt;a href="https://github.com/kazamori/go-sql-executor/blob/main/.github/workflows/publish.yml">workflow yml&lt;/a> を作成した。ほとんどドキュメントのまま。&lt;/p>
&lt;p>github actions の実行結果。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/go-sql-executor/runs/5258037718?check_suite_focus=true">https://github.com/kazamori/go-sql-executor/runs/5258037718?check_suite_focus=true&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>github packages 上で公開された docker イメージ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/go-sql-executor/pkgs/container/go-sql-executor">https://github.com/kazamori/go-sql-executor/pkgs/container/go-sql-executor&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>リリースのタイミングじゃなくてコミットのタイミングでも docker イメージを生成できると思うけど、docker イメージのタグに相当するものをどう付けるかというところは工夫する必要がありそう。&lt;/p></content></item><item><title>github actions のワークフローカスタマイズ</title><link>/diary/posts/2021/1214/</link><pubDate>Tue, 14 Dec 2021 11:14:58 +0900</pubDate><guid>/diary/posts/2021/1214/</guid><description>0時に寝て6時半に起きた。
github actions の並行ビルド 1-2日でできると思ったら想定したよりややこしくて3日かかった。既存処理でかかっている時間を40-50%ほど短縮できた。1つの job で複数モジュールのビルドや docker イメージの生成、aws ecr への登録、eks の pod 更新などをしている処理を複数の job に分割する。job を分割すると、ビルド成果物を共有できなかったり、env のスコープも変わってくる。独立した job 環境で効率よく処理できるよう、ビルドキャッシュを導入したり、カスタムの composite アクションで処理を共通化したりと、あれやこれやを変更する量が増えていった。変更すること自体は問題ないけど、動作検証は github actions 上で動かさないと分からないところがあって、その検証に時間がかかる。複雑なワークフローを実装していると、github actions のかゆいところに手が届かないのにも気付けた。まだまだ circleci は企業向けに使われるのかもしれないなと思えた。
ビルドキャッシュを削除できない workflow レベルの env は参照できないフィールドがあったり job の steps で動的に更新できない workflow の再実行で途中の job から再実行できない カスタム action で run.if は使えない</description><content>&lt;p>0時に寝て6時半に起きた。&lt;/p>
&lt;h2 id="github-actions-の並行ビルド">github actions の並行ビルド&lt;/h2>
&lt;p>1-2日でできると思ったら想定したよりややこしくて3日かかった。既存処理でかかっている時間を40-50%ほど短縮できた。1つの job で複数モジュールのビルドや docker イメージの生成、aws ecr への登録、eks の pod 更新などをしている処理を複数の job に分割する。job を分割すると、ビルド成果物を共有できなかったり、env のスコープも変わってくる。独立した job 環境で効率よく処理できるよう、ビルドキャッシュを導入したり、カスタムの composite アクションで処理を共通化したりと、あれやこれやを変更する量が増えていった。変更すること自体は問題ないけど、動作検証は github actions 上で動かさないと分からないところがあって、その検証に時間がかかる。複雑なワークフローを実装していると、github actions のかゆいところに手が届かないのにも気付けた。まだまだ circleci は企業向けに使われるのかもしれないなと思えた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/actions/cache/issues/2">ビルドキャッシュを削除できない&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/actions/runner/issues/480">workflow レベルの env は参照できないフィールドがあったり&lt;/a> job の steps で動的に更新できない&lt;/li>
&lt;li>workflow の再実行で途中の job から再実行できない&lt;/li>
&lt;li>&lt;a href="https://tech.guitarrapc.com/entry/2021/08/01/194007#2-runif-%E3%81%AF%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%84-%E5%88%B6%E7%B4%84">カスタム action で run.if は使えない&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>github actions のビルドキャッシュ運用</title><link>/diary/posts/2021/1204/</link><pubDate>Sat, 04 Dec 2021 13:20:21 +0900</pubDate><guid>/diary/posts/2021/1204/</guid><description>23時に寝て5時に起きてちょっと作業してまた寝て7時に起きた。お仕事も働き始めて1ヶ月が経過して、だいぶチームの雰囲気や業務に慣れてきたところ。稼働日の18日間で作成した pr が16件。入ったときに割当てられた3つの課題から10数件の issue を派生させてちょうどすべて fix した。来週から新しい課題に取り組む。
ストレッチ 今週もお仕事に注力してたらストレッチは2日/週とあまりできなかった。ウォーキングもやってない。今日の開脚幅は開始前165cmで、ストレッチ後167cmだった。さぼってたせいか、数値が悪くなってしまった。右股関節の関節の可動域がよくないところは少しずつまがるようになってきてよくなってきている実感がある。一方で右太ももの後ろの筋が張りが大きいことに気付いた。トレーナーさんに聞くと、この筋は椅子に座っていると張りやすいという話しなので、最近はお仕事に注力して椅子に座っている時間が以前より伸びているせいだと思う。あと会議に出席している時間も増えているため、その時間は椅子に座っておかないといけないという制約も増えている。
actions/cache の exclude 設定 github actions でビルドキャッシュを扱う方法は Caching dependencies to speed up workflows に書いてあって、それは actions/cache という github actions がキャッシュ機能を提供している。ここでドキュメントにはキャッシュの除外設定については何も書かれていないが、リポジトリに含まれる examples.md には次のような説明と設定例が出てくる。
Depending on the environment, huge packages might be pre-installed in the global cache folder. With actions/cache@v2 you can now exclude unwanted packages with exclude pattern
https://github.com/actions/cache/blob/main/examples.md#c---nuget
- uses: actions/cache@v2 with: path: | ~/.nuget/packages !~/.nuget/packages/unwanted key: ${{ runner.os }}-nuget-${{ hashFiles(&amp;#39;**/packages.lock.json&amp;#39;) }} restore-keys: | ${{ runner.</description><content>&lt;p>23時に寝て5時に起きてちょっと作業してまた寝て7時に起きた。お仕事も働き始めて1ヶ月が経過して、だいぶチームの雰囲気や業務に慣れてきたところ。稼働日の18日間で作成した pr が16件。入ったときに割当てられた3つの課題から10数件の issue を派生させてちょうどすべて fix した。来週から新しい課題に取り組む。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週もお仕事に注力してたらストレッチは2日/週とあまりできなかった。ウォーキングもやってない。今日の開脚幅は開始前165cmで、ストレッチ後167cmだった。さぼってたせいか、数値が悪くなってしまった。右股関節の関節の可動域がよくないところは少しずつまがるようになってきてよくなってきている実感がある。一方で右太ももの後ろの筋が張りが大きいことに気付いた。トレーナーさんに聞くと、この筋は椅子に座っていると張りやすいという話しなので、最近はお仕事に注力して椅子に座っている時間が以前より伸びているせいだと思う。あと会議に出席している時間も増えているため、その時間は椅子に座っておかないといけないという制約も増えている。&lt;/p>
&lt;h2 id="actionscache-の-exclude-設定">actions/cache の exclude 設定&lt;/h2>
&lt;p>github actions でビルドキャッシュを扱う方法は &lt;a href="https://docs.github.com/ja/actions/advanced-guides/caching-dependencies-to-speed-up-workflows">Caching dependencies to speed up workflows&lt;/a> に書いてあって、それは &lt;a href="https://github.com/actions/cache">actions/cache&lt;/a> という github actions がキャッシュ機能を提供している。ここでドキュメントにはキャッシュの除外設定については何も書かれていないが、リポジトリに含まれる &lt;code>examples.md&lt;/code> には次のような説明と設定例が出てくる。&lt;/p>
&lt;blockquote>
&lt;p>Depending on the environment, huge packages might be pre-installed in the global cache folder. With actions/cache@v2 you can now exclude unwanted packages with &lt;a href="https://github.com/actions/toolkit/tree/main/packages/glob#exclude-patterns">exclude pattern&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/actions/cache/blob/main/examples.md#c---nuget">https://github.com/actions/cache/blob/main/examples.md#c---nuget&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/cache@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> ~/.nuget/packages
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> !~/.nuget/packages/unwanted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">${{ runner.os }}-nuget-${{ hashFiles(&amp;#39;**/packages.lock.json&amp;#39;) }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">restore-keys&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &lt;/span> &lt;span style="color:#ae81ff">${{ runner.os }}-nuget-&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>!&lt;/code> を入れるだけかと思って検証してみたらどうも意図した振る舞いにならない。実はこの設定はバグっていて実際には動かない。なぜ動かないかを追いかけてないけど、issue にも登録されている。&lt;code>path&lt;/code> の記述方法によって動いたり動かなかったりするというのが現状の振る舞いになるらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/actions/cache/issues/494">Excluded sub directory not working #494&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/actions/toolkit/issues/713">Cache - excluding files or folders with ! not working #713&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ちなみに正しい動く設定は次になる。ワイルドカードを使わないといけないらしい。ドキュメントに除外設定について書いていないのはバグってて中途半端な振る舞いをしているからかもしれない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/cache@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> ~/.nuget/packages/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> !~/.nuget/packages/unwanted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">${{ runner.os }}-nuget-${{ hashFiles(&amp;#39;**/packages.lock.json&amp;#39;) }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">restore-keys&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &lt;/span> &lt;span style="color:#ae81ff">${{ runner.os }}-nuget-&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>あとビルドキャッシュのキーにパッケージ管理のファイルのハッシュ値を取るようになっている。この背景も github actions がキャッシュをクリアする機能を提供していないからであろう。&lt;a href="https://github.com/actions/cache/issues/2">Clear cache #2&lt;/a> でも議論されているが、キャッシュをクリアできないため、同じキーにパッケージが溜まり続けるような運用は開発者にとっても github 社にとってもリソースを浪費するので好ましくない。いまは7日以上アクセスされていないキャッシュを削除する運用になっているため、なるべくフレッシュなキャッシュが生成されるような運用となるよう、ハッシュ値を取得するようなキーの運用が行われているように推測される。&lt;/p></content></item><item><title>朝から晩まで多忙な一日</title><link>/diary/posts/2021/1126/</link><pubDate>Fri, 26 Nov 2021 19:36:04 +0900</pubDate><guid>/diary/posts/2021/1126/</guid><description>0時に寝て5時に起きた。昨日 slack で質問していた内容に5時頃に返信があるのをたまたまみかけた。この時間に起きているんだと思って返信にコメントしてたら別のメンバーからもコメントが書き込まれて、早起きは三文の得みたいな感じで朝5時から slack でやり取りしてた。いま私はだいたい8時から始業している。開発チームの半分ぐらいのメンバーはそのぐらいから始業しているのが課題管理システムや git のコミットログからわかる。このチームは朝早い人たちが多いなと感心した。
朝活: アジャイル開発とスクラム 第2版 2021-11-26 AM 6 金曜朝6時開催のもくもく会 で第6章と第7章を読んだ。第2部は企業において実際にスクラムを導入していったときの四方山話が出てくる。私はあまり他社の事例に興味はないが、対談の過程で本質的に大事なことや難しいことなどがあぶり出されることもあるので、実務を通しての話題も参考になる場合があることは理解できる。大半の事例は実業務で使われているという結論がわかるだけでも十分だと思う。とくに大企業は様々な厳しい制約や要件の中で採用していると推測されるので、それだけで大きなメッセージをもつ。斜め読みでざっと読み進めながら興味のある話題があれば精読するといった程度で読んでた。
大企業あるあるな話しでスクラムイベントを通してお互いの距離感が縮まってうまくいったといった内容があった。開発者からすると距離感の遠近に関係なく、必要なら適切な相手を探し出してコミュニケーションを取るのが普通だけど、みんながみんなそうではないだろうし、(同じ会社の社員でも)よく知らない人とは話さないといった考え方をもつ人もいるだろう。ある人はこれを単純接触効果で説明していたけど、業務ではなく人間の側面からみてスクラムイベントが多いことにも意義があるのかもしれない。
ある事例でスクラムにおいてイベントがたくさんあってそれに参加することでお互いの距離感を縮めたという効果が書かれている。開発者は気になったことは何でも確認するという姿勢をとりがちだけど、関係者のみんながそうではないというのも理解できる #金朝ツメトギ
&amp;mdash; Tetsuya Morimoto (@t2y) November 25, 2021 顧問さんと雑談 隔週で打ち合わせをしている。最近はお手伝いのお仕事が忙しいので今回は雑談になってしまったが、近況としてリーンキャンバス、スクラム実践の話題などを話していた。わりと盛り上がって1時間で切り上げるつもりが1時間半に伸びてしまって、別のお仕事の時間を圧迫したけど、それはそれで意義のある雑談になったので収穫はあった。
ある組織で新規事業を行う上で AARRR (あー) モデル をすごく重視しているといった話題が出た。バケツみたいなイメージがあって、そこに現実の数字を当てはめていってプロジェクト/プロダクトの改善やふりかえりなどに活かしているという。サービスのグロースに責任をもつ人には重要な概念だという。うちのプロダクトはグロースしなくてもよいけど、なんらかのフレームワークに当てはめて抜け・漏れがないかをチェックすることにも使えるかもしれない。世の中でよく使われているフレームワークを調査しておいて損はないと思う。私はビジネスに全く疎いのでリーンキャンバスを通じて、AARRR モデルの話題になって、それがどういった用途で使われているかというお話しは興味深かった。
具体的には AARRR モデルの他に、スクラムの話題からは野中郁次郎氏のオリジナルの論文、大規模アジャイルの方法論などが盛り上がっていくつかキーワードが出た。そういった雑談の中で感性に従って気になったことを深堀りしていくとおもしろい調査や知見になったりすることを経験的に実感しつつある。今後もそういう機会や内容を大事にしていきたい。
カスタム GitHub Actions の開発 先日 調査していたものをベースに、普通にやる方法と カスタム GitHub Actions の compoiste action で実装する場合の検討資料などを作って、カスタム GitHub Actions を実装してよいといった許可をもらった。企業における唯一の懸念は (原則) public リポジトリで運用するところで、CI のような処理に社外秘は含まれないが、public そのものに審査や承認を必要とするような組織では腰が重くなるようなこともあるかもしれない。ロードマップにも private リポジトリでカスタム GitHub Actoins を動かせるようにしようという課題は作成されている。
Actions: Use actions from internal repositories #74</description><content>&lt;p>0時に寝て5時に起きた。昨日 slack で質問していた内容に5時頃に返信があるのをたまたまみかけた。この時間に起きているんだと思って返信にコメントしてたら別のメンバーからもコメントが書き込まれて、早起きは三文の得みたいな感じで朝5時から slack でやり取りしてた。いま私はだいたい8時から始業している。開発チームの半分ぐらいのメンバーはそのぐらいから始業しているのが課題管理システムや git のコミットログからわかる。このチームは朝早い人たちが多いなと感心した。&lt;/p>
&lt;h2 id="朝活-アジャイル開発とスクラム-第2版">朝活: アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=3T8CTKDFd9g">2021-11-26 AM 6 金曜朝6時開催のもくもく会&lt;/a> で第6章と第7章を読んだ。第2部は企業において実際にスクラムを導入していったときの四方山話が出てくる。私はあまり他社の事例に興味はないが、対談の過程で本質的に大事なことや難しいことなどがあぶり出されることもあるので、実務を通しての話題も参考になる場合があることは理解できる。大半の事例は実業務で使われているという結論がわかるだけでも十分だと思う。とくに大企業は様々な厳しい制約や要件の中で採用していると推測されるので、それだけで大きなメッセージをもつ。斜め読みでざっと読み進めながら興味のある話題があれば精読するといった程度で読んでた。&lt;/p>
&lt;p>大企業あるあるな話しでスクラムイベントを通してお互いの距離感が縮まってうまくいったといった内容があった。開発者からすると距離感の遠近に関係なく、必要なら適切な相手を探し出してコミュニケーションを取るのが普通だけど、みんながみんなそうではないだろうし、(同じ会社の社員でも)よく知らない人とは話さないといった考え方をもつ人もいるだろう。ある人はこれを単純接触効果で説明していたけど、業務ではなく人間の側面からみてスクラムイベントが多いことにも意義があるのかもしれない。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">ある事例でスクラムにおいてイベントがたくさんあってそれに参加することでお互いの距離感を縮めたという効果が書かれている。開発者は気になったことは何でも確認するという姿勢をとりがちだけど、関係者のみんながそうではないというのも理解できる &lt;a href="https://twitter.com/hashtag/%E9%87%91%E6%9C%9D%E3%83%84%E3%83%A1%E3%83%88%E3%82%AE?src=hash&amp;amp;ref_src=twsrc%5Etfw">#金朝ツメトギ&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1463982173212459019?ref_src=twsrc%5Etfw">November 25, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="顧問さんと雑談">顧問さんと雑談&lt;/h2>
&lt;p>隔週で打ち合わせをしている。最近はお手伝いのお仕事が忙しいので今回は雑談になってしまったが、近況としてリーンキャンバス、スクラム実践の話題などを話していた。わりと盛り上がって1時間で切り上げるつもりが1時間半に伸びてしまって、別のお仕事の時間を圧迫したけど、それはそれで意義のある雑談になったので収穫はあった。&lt;/p>
&lt;p>ある組織で新規事業を行う上で &lt;a href="https://www.innovation.co.jp/urumo/aarrr/">AARRR (あー) モデル&lt;/a> をすごく重視しているといった話題が出た。バケツみたいなイメージがあって、そこに現実の数字を当てはめていってプロジェクト/プロダクトの改善やふりかえりなどに活かしているという。サービスのグロースに責任をもつ人には重要な概念だという。うちのプロダクトはグロースしなくてもよいけど、なんらかのフレームワークに当てはめて抜け・漏れがないかをチェックすることにも使えるかもしれない。世の中でよく使われているフレームワークを調査しておいて損はないと思う。私はビジネスに全く疎いのでリーンキャンバスを通じて、AARRR モデルの話題になって、それがどういった用途で使われているかというお話しは興味深かった。&lt;/p>
&lt;p>具体的には AARRR モデルの他に、スクラムの話題からは野中郁次郎氏のオリジナルの論文、大規模アジャイルの方法論などが盛り上がっていくつかキーワードが出た。そういった雑談の中で感性に従って気になったことを深堀りしていくとおもしろい調査や知見になったりすることを経験的に実感しつつある。今後もそういう機会や内容を大事にしていきたい。&lt;/p>
&lt;h2 id="カスタム-github-actions-の開発">カスタム GitHub Actions の開発&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1116/#カスタム-github-actions-作成">先日&lt;/a> 調査していたものをベースに、普通にやる方法と カスタム GitHub Actions の compoiste action で実装する場合の検討資料などを作って、カスタム GitHub Actions を実装してよいといった許可をもらった。企業における唯一の懸念は (原則) public リポジトリで運用するところで、CI のような処理に社外秘は含まれないが、public そのものに審査や承認を必要とするような組織では腰が重くなるようなこともあるかもしれない。ロードマップにも private リポジトリでカスタム GitHub Actoins を動かせるようにしようという課題は作成されている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/github/roadmap/issues/74">Actions: Use actions from internal repositories #74&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>カスタム GitHub Actions のサンプルを作ってみた</title><link>/diary/posts/2021/1116/</link><pubDate>Tue, 16 Nov 2021 07:00:17 +0900</pubDate><guid>/diary/posts/2021/1116/</guid><description>23時半に寝て5時半に起きた。昨夜は夜にウォーキングに出掛けようと思いつつ、22時頃に1時間ほど寝てしまった。それで出掛けるのが面倒になってそのまま寝てた。早く寝た分、早く起きた。せっかく早起きしたのでドラクエタクトのデイリーミッションやって、それから起きて7時ぐらいにはオフィスに着いてたと思う。
カスタム GitHub Actions 作成 GitHub Docs の アクションの作成 をみながらサンプルを作ってみた。カスタムアクションは3つの作成方法がある。
docker コンテナを使ったアクション javascript を使ったアクション シェルスクリプトなどを使ったアクション (composite アクション) たぶんランタイムに何を使うかでアクションの作り方が異なるようにみえる。最後の composite アクションは呼び出される環境で動くことを想定しているのかな？サンプルには bash 上で動くものを紹介していた。ほとんどチュートリアルの内容そのままんだけど、動かして雰囲気を掴むために自分で composite アクションを作ってみた。単一のリポジトリに閉じたものなら通常のワークフローの設定に書けばいいけど、複数のリポジトリで同じ処理をしたい場合は composite アクションとして再利用できるようにするとよさそう。
https://github.com/t2y/gh-actions-sample</description><content>&lt;p>23時半に寝て5時半に起きた。昨夜は夜にウォーキングに出掛けようと思いつつ、22時頃に1時間ほど寝てしまった。それで出掛けるのが面倒になってそのまま寝てた。早く寝た分、早く起きた。せっかく早起きしたのでドラクエタクトのデイリーミッションやって、それから起きて7時ぐらいにはオフィスに着いてたと思う。&lt;/p>
&lt;h2 id="カスタム-github-actions-作成">カスタム GitHub Actions 作成&lt;/h2>
&lt;p>GitHub Docs の &lt;a href="https://docs.github.com/ja/actions/creating-actions">アクションの作成&lt;/a> をみながらサンプルを作ってみた。カスタムアクションは3つの作成方法がある。&lt;/p>
&lt;ul>
&lt;li>docker コンテナを使ったアクション&lt;/li>
&lt;li>javascript を使ったアクション&lt;/li>
&lt;li>シェルスクリプトなどを使ったアクション (composite アクション)&lt;/li>
&lt;/ul>
&lt;p>たぶんランタイムに何を使うかでアクションの作り方が異なるようにみえる。最後の composite アクションは呼び出される環境で動くことを想定しているのかな？サンプルには bash 上で動くものを紹介していた。ほとんどチュートリアルの内容そのままんだけど、動かして雰囲気を掴むために自分で composite アクションを作ってみた。単一のリポジトリに閉じたものなら通常のワークフローの設定に書けばいいけど、複数のリポジトリで同じ処理をしたい場合は composite アクションとして再利用できるようにするとよさそう。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/gh-actions-sample">https://github.com/t2y/gh-actions-sample&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>呑んだくれ</title><link>/diary/posts/2021/1109/</link><pubDate>Tue, 09 Nov 2021 07:19:29 +0900</pubDate><guid>/diary/posts/2021/1109/</guid><description>1時半に寝て6時に起きた。夜にウォーキングに出かけようとしたらたまたま雨が降ってきて諦めた。そしたら寝付けなかった。やっぱり歩いて疲弊すると寝付けやすいのかもしれない。ストレッチしたりしてたら寝るの遅くなった。
中間申告の納付 法人税・地方法人税の申告用紙が届いていたので内容を確認しながら e-tax で申請して pay-easy で税金の支払いを完了した。国税は一番最後に書類が届く。今年の書類が届いた日はこんな感じ。毎年記録しているから届く時期に準備していて慌てなくて済む。
法人市民税: 10月16日 法人県民税: 10月20日 法人税・地方法人税: 11月8日 国税の納付をもって中間申告をすべて終えた。中間申告は税金の先払いだからキャッシュフローが悪いと払えないみたいなことが起きる可能性がある。そうすると仮決算して支払い金額を抑えるみたいなことが必要になるんだろうな。まさに貧乏暇無し。
GitHub + Slack Integration integrations/slack の内容をみて subscribe する内容を確認した。4月頃にアップグレードしてそれまでの設定の互換性をなくして、その影響でうまく動かなかったりしてた。
github の slack 連携のときの commits:all が commits:* に変更されたみたい。4月中旬のバージョンアップ以降に作ったリポジトリか設定だと commits:all だと連携されないみたい。https://t.co/mGVUyEbgGQ
&amp;mdash; Tetsuya Morimoto (@t2y) April 30, 2021 その後、追いかけてなかったけど、いま README をみたら次の5つのイベントはデフォルトで有効になるみたい。
issues pulls commits releases deployments 必要に応じて他のイベントも追加するとよいみたい。私は次の3つかな。
reviews comments commits:* デフォルトのイベントは指定しなくてもよいけど、コピペですべて明示的に設定するならこんな感じ。
/github subscribe owner/repo issues,pulls,commits:*,releases,deployments,reviews,comments みんなの Python 勉強会 みんなのPython勉強会#75 で発表した。参加者は190人となっているけど、実際に zoom に参加していた人の最高値は110人ぐらいだったかな。190 * 0.6 = 114 なので無料イベントの参加者数は6割前後の法則に合致する。人数が増えるほどこの法則は精度が高いように思う。発表者は3人いて、私は2番目に発表して、持ち時間は30分だった。録画していたので後でアーカイブをみれるようにするみたい。私は録画否定派で録画すると参加者がオンタイムで見なくなるのと、いつでも見れるものは見ないということもあるので勉強会のレベルは録画しなくてもいいんじゃないかと考えている。もちろん大きなカンファレンスは録画があった方が参加できない人も後から興味のある発表を見返せていいとは思う。25分発表で質疑応答5分で発表の時間配分はうまくいった。あまり準備できなかった割には伝えたいことはだいたい話せたと思う。なんか質疑応答で「カザモリ社は python のお仕事を受けてくれますか？」といった質問があってちょっと驚いた。ここ数年 python をメインにしたお仕事してなくて、仕事は java, go が多いと言っているせいか、python の仕事はやってないようにみえてしまうのかもしれない。python, java, go の3つの言語のお仕事は受けますよと回答した。発表終わってから1時間ほど懇親会をした。ほとんどコミュニティの主催者と発表者で雑談してた。久しぶりに外部の勉強会でいろんな人とお話することができて楽しかった。たまには外に出かけていくことに重要性も認識できた。またネタがあったら発表したいなとは思う。</description><content>&lt;p>1時半に寝て6時に起きた。夜にウォーキングに出かけようとしたらたまたま雨が降ってきて諦めた。そしたら寝付けなかった。やっぱり歩いて疲弊すると寝付けやすいのかもしれない。ストレッチしたりしてたら寝るの遅くなった。&lt;/p>
&lt;h2 id="中間申告の納付">中間申告の納付&lt;/h2>
&lt;p>法人税・地方法人税の申告用紙が届いていたので内容を確認しながら e-tax で申請して pay-easy で税金の支払いを完了した。国税は一番最後に書類が届く。今年の書類が届いた日はこんな感じ。毎年記録しているから届く時期に準備していて慌てなくて済む。&lt;/p>
&lt;ul>
&lt;li>法人市民税: 10月16日&lt;/li>
&lt;li>法人県民税: 10月20日&lt;/li>
&lt;li>法人税・地方法人税: 11月8日&lt;/li>
&lt;/ul>
&lt;p>国税の納付をもって中間申告をすべて終えた。中間申告は税金の先払いだからキャッシュフローが悪いと払えないみたいなことが起きる可能性がある。そうすると仮決算して支払い金額を抑えるみたいなことが必要になるんだろうな。まさに貧乏暇無し。&lt;/p>
&lt;h2 id="github--slack-integration">GitHub + Slack Integration&lt;/h2>
&lt;p>&lt;a href="https://github.com/integrations/slack">integrations/slack&lt;/a> の内容をみて subscribe する内容を確認した。4月頃にアップグレードしてそれまでの設定の互換性をなくして、その影響でうまく動かなかったりしてた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">github の slack 連携のときの commits:all が commits:* に変更されたみたい。4月中旬のバージョンアップ以降に作ったリポジトリか設定だと commits:all だと連携されないみたい。&lt;a href="https://t.co/mGVUyEbgGQ">https://t.co/mGVUyEbgGQ&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1387999605959188481?ref_src=twsrc%5Etfw">April 30, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>その後、追いかけてなかったけど、いま README をみたら次の5つのイベントはデフォルトで有効になるみたい。&lt;/p>
&lt;ul>
&lt;li>issues&lt;/li>
&lt;li>pulls&lt;/li>
&lt;li>commits&lt;/li>
&lt;li>releases&lt;/li>
&lt;li>deployments&lt;/li>
&lt;/ul>
&lt;p>必要に応じて他のイベントも追加するとよいみたい。私は次の3つかな。&lt;/p>
&lt;ul>
&lt;li>reviews&lt;/li>
&lt;li>comments&lt;/li>
&lt;li>commits:*&lt;/li>
&lt;/ul>
&lt;p>デフォルトのイベントは指定しなくてもよいけど、コピペですべて明示的に設定するならこんな感じ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/github subscribe owner/repo issues,pulls,commits:*,releases,deployments,reviews,comments
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="みんなの-python-勉強会">みんなの Python 勉強会&lt;/h2>
&lt;p>&lt;a href="https://startpython.connpass.com/event/228136/">みんなのPython勉強会#75&lt;/a> で発表した。参加者は190人となっているけど、実際に zoom に参加していた人の最高値は110人ぐらいだったかな。190 * 0.6 = 114 なので無料イベントの参加者数は6割前後の法則に合致する。人数が増えるほどこの法則は精度が高いように思う。発表者は3人いて、私は2番目に発表して、持ち時間は30分だった。録画していたので後でアーカイブをみれるようにするみたい。私は録画否定派で録画すると参加者がオンタイムで見なくなるのと、いつでも見れるものは見ないということもあるので勉強会のレベルは録画しなくてもいいんじゃないかと考えている。もちろん大きなカンファレンスは録画があった方が参加できない人も後から興味のある発表を見返せていいとは思う。25分発表で質疑応答5分で発表の時間配分はうまくいった。あまり準備できなかった割には伝えたいことはだいたい話せたと思う。なんか質疑応答で「カザモリ社は python のお仕事を受けてくれますか？」といった質問があってちょっと驚いた。ここ数年 python をメインにしたお仕事してなくて、仕事は java, go が多いと言っているせいか、python の仕事はやってないようにみえてしまうのかもしれない。python, java, go の3つの言語のお仕事は受けますよと回答した。発表終わってから1時間ほど懇親会をした。ほとんどコミュニティの主催者と発表者で雑談してた。久しぶりに外部の勉強会でいろんな人とお話することができて楽しかった。たまには外に出かけていくことに重要性も認識できた。またネタがあったら発表したいなとは思う。&lt;/p>
&lt;h2 id="呑み">呑み&lt;/h2>
&lt;p>懇親会が終わったのが22時で、疲れと空腹から仲のよい焼き鳥屋さんのお店に寄って晩ご飯を食べることにした。時短が終わっているので22時からでも飲みに行ける。お店は翌2時まで営業している。22時過ぎに行ったらお客さんは誰もいなくて、野菜サラダと焼き鳥を注文してマスターと雑談してた。&lt;/p>
&lt;p>時短が終わってから景気はどうかを聞いてみると、まだまだお客さんの戻りはコロナ前とくらべてまだまだだという。0時まわってから他の飲食店で働いている人たちが店内を埋まるぐらいは来てくれていたそうだけど、まだまだ余裕がないのか全然戻ってきてないと話されていた。0時半頃に2人組で「○○さんの紹介で来ました」みたいな既に酔っ払っているお客さんが来たりして、終電終わってからこういうお客さんが来たりしていたんだなと雰囲気は理解できた。マスターも2時に閉店して5時まで開いている他の飲食店に飲みに行くと話してた。そうやってお互いにお店に飲みに行って付き合いのようなものができているんだというのが理解できた。どこかのスナック行って3万円ほど使っても、必ずそのスナックの人がお店に来てくれて3万円以上使ってくれるという。お金をまわすってそういうことなんやなとマスターの話しを聞いていて理解できた。自分のお店を2時に閉店して、5時まで飲み歩いて、それから寝てまた次の日に仕事というのは体力的にすごくしんどそうで、マスター自身もコロナ明けは体調をみながら飲み歩いているとも話されてた。結局、2時前までマスターと雑談してて、私も22時から4時間弱ほど居座ってた。久しぶりに外で飲んでハイになっていたかもしれない。&lt;/p>
&lt;p>マスターのお勧めで &lt;a href="https://www.hamadasyuzou.co.jp/daiyame_brand">だいやめ&lt;/a> という芋焼酎をお湯割りで飲んだ。香熟芋という珍し？芋を使っていて、ライチのような香りのする芋焼酎でおいしかった。お土産によさそうなので覚えておこうと思う。&lt;/p></content></item></channel></rss>