<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>react on forest nook</title><link>/diary/tags/react/</link><description>Recent content in react on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Thu, 22 Dec 2022 09:12:40 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/react/index.xml" rel="self" type="application/rss+xml"/><item><title>next.js のチュートリアルで学ぶ</title><link>/diary/posts/2022/1222/</link><pubDate>Thu, 22 Dec 2022 09:12:40 +0900</pubDate><guid>/diary/posts/2022/1222/</guid><description>2時に寝て5時に起きて7時半に起きた。疲れてからわりと眠れた方かも。いまの働き方だと木曜日がもっともストレスの低い日になっている。定例会議がない。今週やらないといけないお仕事も次の金曜日があることでまだ時間があるから安心みたいな話し。
next.js 入門 next.js のチュートリアル を一通りやってみた。2年ほど前にちょっとだけ next.js で開発していたプロジェクトのソースを読んだことがあったので雰囲気は少し覚えていた。チュートリアルは react のことを何もわからなくても next.js の機能や特徴を理解できるような構成になっていて感心した。チュートリアルから学んだことはこれら。関連ドキュメントを読みながらでも1日もあれば終わると思う。
コードは分割されてコンパイルや pre-fetch が行われる Image コンポーネントを使えば画像の最適化を自動で行う CSS Modules を使えばコンポーネントレベルのスタイルを定義できる ページ単位に pre-rendering できる 静的生成 (ssg) サーバーサイドレンダリング (ssr) pre-rendering が不要ならクライアントサイドレンダリングすればよい (csr) 動的ルーティングや bff のための api エンドポイントは動的に振る舞う デプロイは基本的に node.js を必要とする</description><content>&lt;p>2時に寝て5時に起きて7時半に起きた。疲れてからわりと眠れた方かも。いまの働き方だと木曜日がもっともストレスの低い日になっている。定例会議がない。今週やらないといけないお仕事も次の金曜日があることでまだ時間があるから安心みたいな話し。&lt;/p>
&lt;h2 id="nextjs-入門">next.js 入門&lt;/h2>
&lt;p>&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app">next.js のチュートリアル&lt;/a> を一通りやってみた。2年ほど前にちょっとだけ next.js で開発していたプロジェクトのソースを読んだことがあったので雰囲気は少し覚えていた。チュートリアルは react のことを何もわからなくても next.js の機能や特徴を理解できるような構成になっていて感心した。チュートリアルから学んだことはこれら。関連ドキュメントを読みながらでも1日もあれば終わると思う。&lt;/p>
&lt;ul>
&lt;li>コードは分割されてコンパイルや pre-fetch が行われる&lt;/li>
&lt;li>Image コンポーネントを使えば画像の最適化を自動で行う&lt;/li>
&lt;li>CSS Modules を使えばコンポーネントレベルのスタイルを定義できる&lt;/li>
&lt;li>ページ単位に pre-rendering できる
&lt;ul>
&lt;li>静的生成 (ssg)&lt;/li>
&lt;li>サーバーサイドレンダリング (ssr)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>pre-rendering が不要ならクライアントサイドレンダリングすればよい (csr)&lt;/li>
&lt;li>動的ルーティングや bff のための api エンドポイントは動的に振る舞う&lt;/li>
&lt;li>デプロイは基本的に node.js を必要とする&lt;/li>
&lt;/ul></content></item><item><title>フロントエンドの技術選定</title><link>/diary/posts/2022/1105/</link><pubDate>Sat, 05 Nov 2022 20:54:58 +0900</pubDate><guid>/diary/posts/2022/1105/</guid><description>24時に BOOK AND BED TOKYO にチェックインして雑多なことして25時過ぎには寝て8時過ぎに起きてチェックアウトした。それから新幹線に乗って神戸まで戻ってきた。東京・品川から新神戸間は、往路は EX早特21ワイド だと12,630円で、復路は自由席で14,420円だった。私の中で時間の制約はストレスやエネルギーを使う。帰りは時間に縛られたくないという思いで新幹線の駅に着いてから自由席を買うようにしている。一方で2千円近い差額も大きいので次回以降は帰りの新幹線もEX早特21ワイドで取ることにした。
フロントエンドの調査 昼過ぎに家に戻ってきて洗濯や片付けしたら疲れてまた寝てた。晩ご飯食べて21時ぐらいからオフィスで作業してた。猫みたいな生活。オフィスからお手伝い先のネットワーク接続の設定をやったりしながらフロントエンドのコードを読んでみた。これは作り直した方がよいだろうと私の中で決意して、どういった技術で作り直すかの技術選定のための調査を開始した。既存のフロントエンド開発の背景や経緯を知らないのでまだ確定ではない。提案の準備のために調査をしておく。
ここ最近 svelte の人気があるのをみかける。1年ほど前に三ノ宮.devで教えてもらってチュートリアルをやってみて、そのときは特にどうとも思わなくて、こんなやり方もあるんやな程度にみていた。その後 vue.js (nuxtjs) での開発を半年間ほど経験して、思いの外、私にとって vue.js がよいものにはみえなかった。react よりも簡単と聞いていたけど、私にとってはあまりそうは思えなかった。vue.js は vue.js なりの難しさ (学習コスト) があるように感じられた。管理画面のような小規模な用途に react や vue.js のようなリッチなライブラリ・フレームワークを使わなくてよい方法があるかを考えたときに svelte を思い出した。svelte の実際のアプリケーションのサンプルコードとして次のコードを読んでいた。
svelte realworld example vue.js の single-file components は svelte の前身である ractive.js のコンポーネント の概念に影響を受けているという。従って、svelte のコンポーネント開発は vue.js と考え方が近いものの、dom 操作は svelte のコンパイル時にコード生成するので仮想 dom は使わない。これがパフォーマンス上の大きなメリットと言われている。react や vue.js よりもずっと軽量なコンパイラ・フレームワークと言える。次のページに複数のフロントエンドの技術の流行をまとめている。svelte はこの2年ぐらいで人気が急上昇していることがわかる。
Front-end frameworks popularity (React, Vue, Angular and Svelte) また react と vue.js の現状もちゃんと把握しようと調べていて次の記事がおもしろかった。
[Twitter] React ユーザーが Vue を選ばない理由 vue.</description><content>&lt;p>24時に BOOK AND BED TOKYO にチェックインして雑多なことして25時過ぎには寝て8時過ぎに起きてチェックアウトした。それから新幹線に乗って神戸まで戻ってきた。東京・品川から新神戸間は、往路は &lt;a href="/diary/diary/posts/2022/1031/#東京出張">EX早特21ワイド&lt;/a> だと12,630円で、復路は自由席で14,420円だった。私の中で時間の制約はストレスやエネルギーを使う。帰りは時間に縛られたくないという思いで新幹線の駅に着いてから自由席を買うようにしている。一方で2千円近い差額も大きいので次回以降は帰りの新幹線もEX早特21ワイドで取ることにした。&lt;/p>
&lt;h2 id="フロントエンドの調査">フロントエンドの調査&lt;/h2>
&lt;p>昼過ぎに家に戻ってきて洗濯や片付けしたら疲れてまた寝てた。晩ご飯食べて21時ぐらいからオフィスで作業してた。猫みたいな生活。オフィスからお手伝い先のネットワーク接続の設定をやったりしながらフロントエンドのコードを読んでみた。これは作り直した方がよいだろうと私の中で決意して、どういった技術で作り直すかの技術選定のための調査を開始した。既存のフロントエンド開発の背景や経緯を知らないのでまだ確定ではない。提案の準備のために調査をしておく。&lt;/p>
&lt;p>ここ最近 &lt;a href="https://svelte.dev/">svelte&lt;/a> の人気があるのをみかける。1年ほど前に三ノ宮.devで教えてもらってチュートリアルをやってみて、そのときは特にどうとも思わなくて、こんなやり方もあるんやな程度にみていた。その後 vue.js (nuxtjs) での開発を半年間ほど経験して、思いの外、私にとって vue.js がよいものにはみえなかった。react よりも簡単と聞いていたけど、私にとってはあまりそうは思えなかった。vue.js は vue.js なりの難しさ (学習コスト) があるように感じられた。管理画面のような小規模な用途に react や vue.js のようなリッチなライブラリ・フレームワークを使わなくてよい方法があるかを考えたときに svelte を思い出した。svelte の実際のアプリケーションのサンプルコードとして次のコードを読んでいた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/sveltejs/realworld">svelte realworld example&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>vue.js の single-file components は svelte の前身である &lt;a href="https://github.com/ractivejs/component-spec">ractive.js のコンポーネント&lt;/a> の概念に影響を受けているという。従って、svelte のコンポーネント開発は vue.js と考え方が近いものの、dom 操作は svelte のコンパイル時にコード生成するので仮想 dom は使わない。これがパフォーマンス上の大きなメリットと言われている。react や vue.js よりもずっと軽量なコンパイラ・フレームワークと言える。次のページに複数のフロントエンドの技術の流行をまとめている。svelte はこの2年ぐらいで人気が急上昇していることがわかる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/tkrotoff/b1caa4c3a185629299ec234d2314e190">Front-end frameworks popularity (React, Vue, Angular and Svelte)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>また react と vue.js の現状もちゃんと把握しようと調べていて次の記事がおもしろかった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zenn.dev/sa2knight/articles/why_react_folks_dont_choose_vue">[Twitter] React ユーザーが Vue を選ばない理由&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>vue.js は vue3 で react になろうとしていて、その過程の過渡期には様々な問題を抱えているように私からはみえた。&lt;/p>
&lt;ul>
&lt;li>vue2 と vue3 は互換性がない&lt;/li>
&lt;li>vue3 移行へのエコシステムの本気度がみえない&lt;/li>
&lt;li>vue2 の開発者が本当に vue3 を求めているのか懐疑的&lt;/li>
&lt;li>シェアだけみたら vue.js よりも react の方が高い&lt;/li>
&lt;/ul></content></item></channel></rss>