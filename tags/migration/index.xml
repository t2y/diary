<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>migration on forest nook</title><link>/diary/tags/migration/</link><description>Recent content in migration on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Sun, 11 Dec 2022 10:12:21 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/migration/index.xml" rel="self" type="application/rss+xml"/><item><title>休日のオンライン学習</title><link>/diary/posts/2022/1211/</link><pubDate>Sun, 11 Dec 2022 10:12:21 +0900</pubDate><guid>/diary/posts/2022/1211/</guid><description>0時に寝て夜中に吐き気がして2回ほど起きて3時と5時に起きて8時に起きた。なかなか苦しい寝方をした。
ヤフートラベルと一休.comのシステム統合 アーカイブ公開されたらみようと思いつつ忘れてたので見返した。
雑なめも。また機をみて見返すこともあるかも。
バックエンドは完全に一休側に寄せるという大きな意志決定を2016年に行った この意志決定はフロントエンド統合にも大きな影響を与えた ふじもんさんの意志決定がよかった？ 今日の話しはマルチブランドデザインシステム統合がメイン 開発者が50-60人程度で半年ぐらいで launch できた nuxt/vuejs で開発している スタイルは tailwindcss を使っている 実は launch した後にこのシステムが必要だとわかった 開発者とデザイナー間の細かい意思疎通が困難 外部からデザインシステムに詳しい人にも来てもらっていろんな議論をした ガイドラインを言語化するところから始め、最終的にソースコードの共有ができるようになった 終わってからデザインシステムそのものは重要ではないと気付いた この過程で開発者とデザイナー間のどのように共通化するか、あるいはしないかと議論を繰り返し行ったことが重要だったと当事者がインタビューで語っていた デザインシステムの開発を通じてデザインの共通認識をもてたことがよかった 波及効果 同じソースコードから少し異なる体験の開発のノウハウができた ふるさと納税に特化した宿泊予約サイトを作った 統合は終わりではない、lauch したところが始まり 統合後にいろいろな施策をすることで課題がみえてくることがある 全国旅行支援は1つの開発で2つの体験をつくることができた Q. デザイナーと開発者はわりと仲が悪いのでは？価値観や考え方が異なるのですり合わせるのは難しいのでは？ 過去の一休でも起きていた 一休のチームはデザイナーと PM と開発者で構成されている このチームが一緒に働いていてチームでなるべく意志決定している 普段から一緒に働いていると仲が悪いということはなかった とはいえ、仕事のプロセスが異なるので課題はあった 地道に丁寧にすり合わせを行った 外部から講師を読んで中立的な立場でワークショップを何度も行った デザイナーと開発者を別の組織にしているとコミュニケーションの壁ができてしまうかもしれない go の学び直し テストの学び直し に引き続き、Gopher塾 #2 - Goらしいコードの書き方 - DAY 1 に参加した。
テストの次のプログラミングの話しだったので内容そのものは難しくはなかったけど、改めて重要な項目を選抜しているのだと考えると学びはあったと思う。参考になったことをいくつか覚えている範囲でまとめる。名前の付け方について感覚的に理解していたし、実際に私はそうしているけど、コードレビューしていて自然になっていないコードを指摘する機会も多いので一定の習熟を要するのかもしれない。いま毎週勉強会をやっていて私が講師として話している。ネタがなくなってきたり大変になったきたら準備の少ないコードリーディング会もやってみたいと思った。
google Go Style derrors.Wrap 名前に文脈を与えるという概念 相対的な名前をつける 準備の少ないコードリーディング会 お題（読むパッケージ）を決める 選んだお題に期待することを当日話す 時間を決めてみんなでそれぞれ読む（20分とか） 読みながらSlackのスレッドにメモをしていく 残りの時間で気になったところを議論する 自分が気づけなかった点を知ることができる</description><content>&lt;p>0時に寝て夜中に吐き気がして2回ほど起きて3時と5時に起きて8時に起きた。なかなか苦しい寝方をした。&lt;/p>
&lt;h2 id="ヤフートラベルと一休comのシステム統合">ヤフートラベルと一休.comのシステム統合&lt;/h2>
&lt;p>アーカイブ公開されたらみようと思いつつ忘れてたので見返した。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/JN4kGYbQMJ8" allowfullscreen title="ヤフートラベルのシステムリニューアル 一休 com とのシステム統合 -日本語版-">&lt;/iframe>
&lt;/div>
&lt;p>雑なめも。また機をみて見返すこともあるかも。&lt;/p>
&lt;ul>
&lt;li>バックエンドは完全に一休側に寄せるという大きな意志決定を2016年に行った
&lt;ul>
&lt;li>この意志決定はフロントエンド統合にも大きな影響を与えた&lt;/li>
&lt;li>ふじもんさんの意志決定がよかった？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>今日の話しはマルチブランドデザインシステム統合がメイン
&lt;ul>
&lt;li>開発者が50-60人程度で半年ぐらいで launch できた&lt;/li>
&lt;li>nuxt/vuejs で開発している&lt;/li>
&lt;li>スタイルは tailwindcss を使っている&lt;/li>
&lt;li>実は launch した後にこのシステムが必要だとわかった
&lt;ul>
&lt;li>開発者とデザイナー間の細かい意思疎通が困難&lt;/li>
&lt;li>外部からデザインシステムに詳しい人にも来てもらっていろんな議論をした&lt;/li>
&lt;li>ガイドラインを言語化するところから始め、最終的にソースコードの共有ができるようになった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>終わってからデザインシステムそのものは重要ではないと気付いた
&lt;ul>
&lt;li>この過程で開発者とデザイナー間のどのように共通化するか、あるいはしないかと議論を繰り返し行ったことが重要だったと当事者がインタビューで語っていた&lt;/li>
&lt;li>デザインシステムの開発を通じてデザインの共通認識をもてたことがよかった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>波及効果
&lt;ul>
&lt;li>同じソースコードから少し異なる体験の開発のノウハウができた&lt;/li>
&lt;li>ふるさと納税に特化した宿泊予約サイトを作った&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>統合は終わりではない、lauch したところが始まり
&lt;ul>
&lt;li>統合後にいろいろな施策をすることで課題がみえてくることがある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>全国旅行支援は1つの開発で2つの体験をつくることができた&lt;/li>
&lt;li>Q. デザイナーと開発者はわりと仲が悪いのでは？価値観や考え方が異なるのですり合わせるのは難しいのでは？
&lt;ul>
&lt;li>過去の一休でも起きていた&lt;/li>
&lt;li>一休のチームはデザイナーと PM と開発者で構成されている
&lt;ul>
&lt;li>このチームが一緒に働いていてチームでなるべく意志決定している&lt;/li>
&lt;li>普段から一緒に働いていると仲が悪いということはなかった&lt;/li>
&lt;li>とはいえ、仕事のプロセスが異なるので課題はあった
&lt;ul>
&lt;li>地道に丁寧にすり合わせを行った&lt;/li>
&lt;li>外部から講師を読んで中立的な立場でワークショップを何度も行った&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>デザイナーと開発者を別の組織にしているとコミュニケーションの壁ができてしまうかもしれない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="go-の学び直し">go の学び直し&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/1123/#go-の学び直し">テストの学び直し&lt;/a> に引き続き、&lt;a href="https://tenntenn.connpass.com/event/267564/">Gopher塾 #2 - Goらしいコードの書き方 - DAY 1&lt;/a> に参加した。&lt;/p>
&lt;p>テストの次のプログラミングの話しだったので内容そのものは難しくはなかったけど、改めて重要な項目を選抜しているのだと考えると学びはあったと思う。参考になったことをいくつか覚えている範囲でまとめる。名前の付け方について感覚的に理解していたし、実際に私はそうしているけど、コードレビューしていて自然になっていないコードを指摘する機会も多いので一定の習熟を要するのかもしれない。いま毎週勉強会をやっていて私が講師として話している。ネタがなくなってきたり大変になったきたら準備の少ないコードリーディング会もやってみたいと思った。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://google.github.io/styleguide/go/">google Go Style&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cs.opensource.google/go/x/pkgsite/+/master:internal/derrors/derrors.go;l=237">derrors.Wrap&lt;/a>&lt;/li>
&lt;li>名前に文脈を与えるという概念
&lt;ul>
&lt;li>相対的な名前をつける&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>準備の少ないコードリーディング会
&lt;ul>
&lt;li>お題（読むパッケージ）を決める&lt;/li>
&lt;li>選んだお題に期待することを当日話す&lt;/li>
&lt;li>時間を決めてみんなでそれぞれ読む（20分とか）&lt;/li>
&lt;li>読みながらSlackのスレッドにメモをしていく&lt;/li>
&lt;li>残りの時間で気になったところを議論する&lt;/li>
&lt;li>自分が気づけなかった点を知ることができる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content></item><item><title>iphone のデータ移行が簡単になってた</title><link>/diary/posts/2022/1009/</link><pubDate>Sun, 09 Oct 2022 16:20:31 +0900</pubDate><guid>/diary/posts/2022/1009/</guid><description>0時に寝て7時に起きた。オフィスで荷物を受け取る必要があったので8時にはオフィスに行って普通に作業してた。午前中は金曜日の作業で途中になってた単体テストを仕上げた。
iphone 移行 iphone 11 から 14 pro に移行した。色はディープパープルにした。本当は 11 のグリーンが気に入っていたのでグリーンしたかったけどないから仕方なく。先月の上旬ぐらいから iphone のスクリーンの一部が操作を受け付けなくなった。タッチしても反応しないといった状態になる。最初はドラクエタクトをする上であるボタンが押せない程度だったのだけど、その後も使い続けているうちにその反応しない領域が少しずつ拡大していった。文字入力のパネルなら「や」と「ら」の領域が反応しない、paypay で支払うときに8や9が入力できない、電話が掛かってきてもスワイプで着話できないとか。一部の領域が反応しなくなってから1ヶ月ぐらいで普段使いに支障がでるようになっていた。
幸いにも9月半ばにはらさんとも相談しながら 14 pro を購入する決断をしていた。9月16日に注文したものが本日届いた。注文時の予定では10月20-27日の予定になっていたのがかなり前倒しになったみたい。朝から古い端末の ios を最新の 16.0.2 にアップグレードしたり、icloud へのバックアップを取ったりしていた。私はとくに icloud のストレージ容量を契約していないので無料の5GiBしかない。それなのにバックアップは成功して、なぜだろう？と調べたら機種変更時の icloud へのバックアップは容量無制限で使えるらしい。とても助かった。
iPhone機種変時のiCloudバックアップ、容量無制限で無料に　iOS 15の新機能、その手順を解説 iphone のデータ移行は クイックスタート という仕組みが3年前から提供されていて、基本的にはこの機能を使えばとくに労力なく移行できた。もちろんアプリによっては個別の移行作業が必要になるけれど、クイックスタートのおかげで基本的には古い端末と新しい端末を並べて移行の承認のような作業をするだけで済む。クイックスタートは iphone 同士を bluetooth 接続で繋ぐ。bluetooth 通信でもデータ移行できるそうだけど、wifi に比べると速度が遅いので256GiBなら3時間ぐらいかかる見通しらしい。icloud経由にするとwifiなので速度も速く15分程度で復元処理を完了できた。私の場合、電話、line、認証系アプリといったコアな機能の移行を1時間ほどで完了できた。一昔前に比べてかなり簡単になっているように感じた。
ストレッチ 本当は田んぼに実家に帰っている予定だったので日曜日の夜からストレッチ。今日の開脚幅は開始前157cmで、ストレッチ後161cmだった。最近はまったくストレッチしないようになりつつあるのだけど、腰の張りのアンバランスさは解消されていて、トレーナーさん曰くそれはよい状態だと言えるらしい。ストレッチを受ける前から雨降りでストレッチを終えてから何をしようかふらふらとアーケードを散歩して、結局のところ、やることがなくて雨に振られながら帰ってきた。</description><content>&lt;p>0時に寝て7時に起きた。オフィスで荷物を受け取る必要があったので8時にはオフィスに行って普通に作業してた。午前中は金曜日の作業で途中になってた単体テストを仕上げた。&lt;/p>
&lt;h2 id="iphone-移行">iphone 移行&lt;/h2>
&lt;p>iphone 11 から &lt;a href="https://www.apple.com/jp/iphone-14-pro/">14 pro&lt;/a> に移行した。色はディープパープルにした。本当は 11 のグリーンが気に入っていたのでグリーンしたかったけどないから仕方なく。先月の上旬ぐらいから iphone のスクリーンの一部が操作を受け付けなくなった。タッチしても反応しないといった状態になる。最初はドラクエタクトをする上であるボタンが押せない程度だったのだけど、その後も使い続けているうちにその反応しない領域が少しずつ拡大していった。文字入力のパネルなら「や」と「ら」の領域が反応しない、paypay で支払うときに8や9が入力できない、電話が掛かってきてもスワイプで着話できないとか。一部の領域が反応しなくなってから1ヶ月ぐらいで普段使いに支障がでるようになっていた。&lt;/p>
&lt;p>幸いにも9月半ばにはらさんとも相談しながら 14 pro を購入する決断をしていた。9月16日に注文したものが本日届いた。注文時の予定では10月20-27日の予定になっていたのがかなり前倒しになったみたい。朝から古い端末の ios を最新の 16.0.2 にアップグレードしたり、icloud へのバックアップを取ったりしていた。私はとくに icloud のストレージ容量を契約していないので無料の5GiBしかない。それなのにバックアップは成功して、なぜだろう？と調べたら機種変更時の icloud へのバックアップは容量無制限で使えるらしい。とても助かった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.itmedia.co.jp/news/articles/2109/21/news113.html">iPhone機種変時のiCloudバックアップ、容量無制限で無料に　iOS 15の新機能、その手順を解説&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>iphone のデータ移行は &lt;a href="https://support.apple.com/ja-jp/HT210216">クイックスタート&lt;/a> という仕組みが3年前から提供されていて、基本的にはこの機能を使えばとくに労力なく移行できた。もちろんアプリによっては個別の移行作業が必要になるけれど、クイックスタートのおかげで基本的には古い端末と新しい端末を並べて移行の承認のような作業をするだけで済む。クイックスタートは iphone 同士を bluetooth 接続で繋ぐ。bluetooth 通信でもデータ移行できるそうだけど、wifi に比べると速度が遅いので256GiBなら3時間ぐらいかかる見通しらしい。icloud経由にするとwifiなので速度も速く15分程度で復元処理を完了できた。私の場合、電話、line、認証系アプリといったコアな機能の移行を1時間ほどで完了できた。一昔前に比べてかなり簡単になっているように感じた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>本当は田んぼに実家に帰っている予定だったので日曜日の夜からストレッチ。今日の開脚幅は開始前157cmで、ストレッチ後161cmだった。最近はまったくストレッチしないようになりつつあるのだけど、腰の張りのアンバランスさは解消されていて、トレーナーさん曰くそれはよい状態だと言えるらしい。ストレッチを受ける前から雨降りでストレッチを終えてから何をしようかふらふらとアーケードを散歩して、結局のところ、やることがなくて雨に振られながら帰ってきた。&lt;/p></content></item><item><title>たまには画面作り</title><link>/diary/posts/2022/0817/</link><pubDate>Wed, 17 Aug 2022 11:12:26 +0900</pubDate><guid>/diary/posts/2022/0817/</guid><description>1時に寝て6時に起きた。
リファクタリングとインフラ移行 ここ2週間ほどリファクタリングやらインフラ変更やらをしてきて、来週からまた新しい施設がサービスインするので区切りとしてリファクタリングは一旦終わりにする。今日がその集大成となるインフラ移行も含めた本番リリースだった。インフラ移行するときはなにかしら障害が起きる前提で待機しているものの、今日もすんなりと意図した通りに移行できて、してやったりではあるものの、モノ足りなさで拍子抜けしてしまった。また昨日から社内 wiki にも minikube の使い方、k8s cronjob の設計、バッチ処理の設計と実装についてドキュメントなどを書いていた。いままですべて私が1人で担当していたものを他メンバーでも作業できるようにドキュメント化した。近いうちにいなくなるので引き継ぎのドキュメントにもなる。
nuxt で画面作り ここ最近2種類の web api の機能を作ったのでその管理画面も2つ作る必要がある。私はフロントエンド開発の素人なので他のメンバーが作ってくれないかと声をかけてはいたけど、みんな忙しいようなので私が作ることにした。今週は nuxtjs の新規画面の開発をがんばってみようと思う。既存のソースを読む限りはそんなに複雑ではなさそう。素人が雰囲気で実装しても動くんじゃないかと思っている。ソースコードを読んでいて url 設計はめちゃくちゃだし、一覧画面にはページング機能も実装されていない。素人がソースを読んで基本的な骨子や機能が正しく実装されてないことがわかってしまうのは品質レベルとしてなにかがおかしい。圧倒的低品質と呼ぶのか、こんなことが起こってしまうのはよい開発文化がないせいなのだろうと考えている。</description><content>&lt;p>1時に寝て6時に起きた。&lt;/p>
&lt;h2 id="リファクタリングとインフラ移行">リファクタリングとインフラ移行&lt;/h2>
&lt;p>ここ2週間ほどリファクタリングやらインフラ変更やらをしてきて、来週からまた新しい施設がサービスインするので区切りとしてリファクタリングは一旦終わりにする。今日がその集大成となるインフラ移行も含めた本番リリースだった。インフラ移行するときはなにかしら障害が起きる前提で待機しているものの、今日もすんなりと意図した通りに移行できて、してやったりではあるものの、モノ足りなさで拍子抜けしてしまった。また昨日から社内 wiki にも minikube の使い方、k8s cronjob の設計、バッチ処理の設計と実装についてドキュメントなどを書いていた。いままですべて私が1人で担当していたものを他メンバーでも作業できるようにドキュメント化した。近いうちにいなくなるので引き継ぎのドキュメントにもなる。&lt;/p>
&lt;h2 id="nuxt-で画面作り">nuxt で画面作り&lt;/h2>
&lt;p>ここ最近2種類の web api の機能を作ったのでその管理画面も2つ作る必要がある。私はフロントエンド開発の素人なので他のメンバーが作ってくれないかと声をかけてはいたけど、みんな忙しいようなので私が作ることにした。今週は &lt;a href="https://nuxtjs.org/ja/">nuxtjs&lt;/a> の新規画面の開発をがんばってみようと思う。既存のソースを読む限りはそんなに複雑ではなさそう。素人が雰囲気で実装しても動くんじゃないかと思っている。ソースコードを読んでいて url 設計はめちゃくちゃだし、一覧画面にはページング機能も実装されていない。素人がソースを読んで基本的な骨子や機能が正しく実装されてないことがわかってしまうのは品質レベルとしてなにかがおかしい。圧倒的低品質と呼ぶのか、こんなことが起こってしまうのはよい開発文化がないせいなのだろうと考えている。&lt;/p></content></item><item><title>スライドデザインの作成</title><link>/diary/posts/2022/0509/</link><pubDate>Mon, 09 May 2022 12:49:34 +0900</pubDate><guid>/diary/posts/2022/0509/</guid><description>0時に寝て4時に起きて6時半に起きたつもりが、なんか3度寝して8時に起きた。
スライドマスターのデザイン作成 うちの会社のロゴは Ševarika™ というデザイナーさんに作ってもらった。言語にセルビア語とあるので旧ユーゴスラビア地域の国の出身なのかなと推測する。このご時世なので NATO 加盟国なのだろうか？とか調べてみたけど、旧ユーゴスラビア地域の国々の歴史は複雑ですぐにわかるものではなかった。閑話休題。私は会社のロゴをとても気に入っているし、ロゴを作ってもらうときの取り引きも円滑にできたのでそのデザイナーさんを信頼している。今回も2年半ぶりに連絡をとったら快くスライドマスターの作成を引き受けてくれた。4月30日に契約して、とくに急いでいないのでデザイナーの都合がついたらでという緩い依頼をしたんだけど、昨日さっそく最初の草稿が届いた。いくつか私の好みのスライドデザインのサンプルを渡したりしていたので、私の好みのスタイルは外していない。ただ私はデザインのことは何もわからないので、今回は顧問のはらさんにもレビューしてもらってご意見をもらうことにした。
ベースライン移行 先日の flyway のデータベース移行 の続き。管理しているマイクロサービスが4つあるのでそれぞれのサービスごとに設定していかないといけない。サーバーサイドって共通化できるのが大きなメリットなのに、同じサーバーサイドの仕組みを複数導入しないといけないというのはマイクロサービスのデメリットと言えばそうだし、アーキテクチャとしても正しいんやろか？という気持ちも出てくる。おそらく1つのチームが複数のマイクロサービスを開発する体制がよくない。変更作業と検証で約1日を費やした。</description><content>&lt;p>0時に寝て4時に起きて6時半に起きたつもりが、なんか3度寝して8時に起きた。&lt;/p>
&lt;h2 id="スライドマスターのデザイン作成">スライドマスターのデザイン作成&lt;/h2>
&lt;p>うちの会社のロゴは &lt;a href="https://99designs.jp/profiles/dsevarika">Ševarika™&lt;/a> というデザイナーさんに作ってもらった。言語にセルビア語とあるので旧ユーゴスラビア地域の国の出身なのかなと推測する。このご時世なので NATO 加盟国なのだろうか？とか調べてみたけど、旧ユーゴスラビア地域の国々の歴史は複雑ですぐにわかるものではなかった。閑話休題。私は会社のロゴをとても気に入っているし、ロゴを作ってもらうときの取り引きも円滑にできたのでそのデザイナーさんを信頼している。今回も2年半ぶりに連絡をとったら快くスライドマスターの作成を引き受けてくれた。4月30日に契約して、とくに急いでいないのでデザイナーの都合がついたらでという緩い依頼をしたんだけど、昨日さっそく最初の草稿が届いた。いくつか私の好みのスライドデザインのサンプルを渡したりしていたので、私の好みのスタイルは外していない。ただ私はデザインのことは何もわからないので、今回は顧問のはらさんにもレビューしてもらってご意見をもらうことにした。&lt;/p>
&lt;h2 id="ベースライン移行">ベースライン移行&lt;/h2>
&lt;p>先日の &lt;a href="/diary/diary/posts/2022/0506/#データベースの移行処理">flyway のデータベース移行&lt;/a> の続き。管理しているマイクロサービスが4つあるのでそれぞれのサービスごとに設定していかないといけない。サーバーサイドって共通化できるのが大きなメリットなのに、同じサーバーサイドの仕組みを複数導入しないといけないというのはマイクロサービスのデメリットと言えばそうだし、アーキテクチャとしても正しいんやろか？という気持ちも出てくる。おそらく1つのチームが複数のマイクロサービスを開発する体制がよくない。変更作業と検証で約1日を費やした。&lt;/p></content></item><item><title>flyway を触ってみた</title><link>/diary/posts/2022/0506/</link><pubDate>Fri, 06 May 2022 09:08:02 +0900</pubDate><guid>/diary/posts/2022/0506/</guid><description>0時に寝て4時に起きてタイムライン眺めながらだらだらして6時半に起き上がった。
データベースの移行処理 半年前から導入したいという話しは聞いていたものの、先送りになっていたライブラリに flyway がある。データベースの移行処理のためのスクリプト (sql) を管理するツールでどの移行スクリプトを実行したかを記録したり、未適用の処理を自動で適用してくれたりする。spring boot だとすぐ組み込める状態になっていて Community Plugins and Integrations: Spring Boot をみながら設定したらすぐに動いた。flyway 自体の設定も Common Application Properties を参考に spring boot の設定ファイルで行える。
例えば、こんな感じ。
spring: flyway: ￼ enabled: true ￼ schemas: public ￼ locations: classpath:db/migration ￼ baseline-version: 0 ￼ baseline-on-migrate: true 移行処理の履歴情報は flyway_schema_history テーブルに保持される。既存のテーブルが存在して flyway の履歴データがない場合 (初回起動時) に移行処理を実行するかどうかを baseline-on-migrate で決める。実行するなら baseline-version でどのバージョンをベースラインとするかも設定できる。ゼロにすることで V1 からの sql ファイルを適用してくれる。ベースラインの考え方は実際に何度かデータベースの初期状態を変えて実行しないとわかりにくいかもしれない。
Tutorial: Baseline Migrations</description><content>&lt;p>0時に寝て4時に起きてタイムライン眺めながらだらだらして6時半に起き上がった。&lt;/p>
&lt;h2 id="データベースの移行処理">データベースの移行処理&lt;/h2>
&lt;p>半年前から導入したいという話しは聞いていたものの、先送りになっていたライブラリに &lt;a href="https://flywaydb.org/">flyway&lt;/a> がある。データベースの移行処理のためのスクリプト (sql) を管理するツールでどの移行スクリプトを実行したかを記録したり、未適用の処理を自動で適用してくれたりする。spring boot だとすぐ組み込める状態になっていて &lt;a href="https://flywaydb.org/documentation/usage/plugins/springboot">Community Plugins and Integrations: Spring Boot&lt;/a> をみながら設定したらすぐに動いた。flyway 自体の設定も &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html">Common Application Properties&lt;/a> を参考に spring boot の設定ファイルで行える。&lt;/p>
&lt;p>例えば、こんな感じ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spring&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">flyway&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">￼ enabled&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">￼ schemas&lt;/span>: &lt;span style="color:#ae81ff">public&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">￼ locations&lt;/span>: &lt;span style="color:#ae81ff">classpath:db/migration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">￼ baseline-version&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">￼ baseline-on-migrate&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>移行処理の履歴情報は &lt;code>flyway_schema_history&lt;/code> テーブルに保持される。既存のテーブルが存在して flyway の履歴データがない場合 (初回起動時) に移行処理を実行するかどうかを baseline-on-migrate で決める。実行するなら baseline-version でどのバージョンをベースラインとするかも設定できる。ゼロにすることで &lt;code>V1&lt;/code> からの sql ファイルを適用してくれる。ベースラインの考え方は実際に何度かデータベースの初期状態を変えて実行しないとわかりにくいかもしれない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://flywaydb.org/documentation/tutorials/baselineMigrations">Tutorial: Baseline Migrations&lt;/a>&lt;/li>
&lt;/ul></content></item></channel></rss>