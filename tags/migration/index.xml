<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>migration on forest nook</title><link>/diary/tags/migration/</link><description>Recent content in migration on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Mon, 09 May 2022 12:49:34 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/migration/index.xml" rel="self" type="application/rss+xml"/><item><title>スライドデザインの作成</title><link>/diary/posts/2022/0509/</link><pubDate>Mon, 09 May 2022 12:49:34 +0900</pubDate><guid>/diary/posts/2022/0509/</guid><description>0時に寝て4時に起きて6時半に起きたつもりが、なんか3度寝して8時に起きた。
スライドマスターのデザイン作成 うちの会社のロゴは Ševarika™ というデザイナーさんに作ってもらった。言語にセルビア語とあるので旧ユーゴスラビア地域の国の出身なのかなと推測する。このご時世なので NATO 加盟国なのだろうか？とか調べてみたけど、旧ユーゴスラビア地域の国々の歴史は複雑ですぐにわかるものではなかった。閑話休題。私は会社のロゴをとても気に入っているし、ロゴを作ってもらうときの取り引きも円滑にできたのでそのデザイナーさんを信頼している。今回も2年半ぶりに連絡をとったら快くスライドマスターの作成を引き受けてくれた。4月30日に契約して、とくに急いでいないのでデザイナーの都合がついたらでという緩い依頼をしたんだけど、昨日さっそく最初の草稿が届いた。いくつか私の好みのスライドデザインのサンプルを渡したりしていたので、私の好みのスタイルは外していない。ただ私はデザインのことは何もわからないので、今回は顧問のはらさんにもレビューしてもらってご意見をもらうことにした。
ベースライン移行 先日の flyway のデータベース移行 の続き。管理しているマイクロサービスが4つあるのでそれぞれのサービスごとに設定していかないといけない。サーバーサイドって共通化できるのが大きなメリットなのに、同じサーバーサイドの仕組みを複数導入しないといけないというのはマイクロサービスのデメリットと言えばそうだし、アーキテクチャとしても正しいんやろか？という気持ちも出てくる。おそらく1つのチームが複数のマイクロサービスを開発する体制がよくない。変更作業と検証で約1日を費やした。</description><content>&lt;p>0時に寝て4時に起きて6時半に起きたつもりが、なんか3度寝して8時に起きた。&lt;/p>
&lt;h2 id="スライドマスターのデザイン作成">スライドマスターのデザイン作成&lt;/h2>
&lt;p>うちの会社のロゴは &lt;a href="https://99designs.jp/profiles/dsevarika">Ševarika™&lt;/a> というデザイナーさんに作ってもらった。言語にセルビア語とあるので旧ユーゴスラビア地域の国の出身なのかなと推測する。このご時世なので NATO 加盟国なのだろうか？とか調べてみたけど、旧ユーゴスラビア地域の国々の歴史は複雑ですぐにわかるものではなかった。閑話休題。私は会社のロゴをとても気に入っているし、ロゴを作ってもらうときの取り引きも円滑にできたのでそのデザイナーさんを信頼している。今回も2年半ぶりに連絡をとったら快くスライドマスターの作成を引き受けてくれた。4月30日に契約して、とくに急いでいないのでデザイナーの都合がついたらでという緩い依頼をしたんだけど、昨日さっそく最初の草稿が届いた。いくつか私の好みのスライドデザインのサンプルを渡したりしていたので、私の好みのスタイルは外していない。ただ私はデザインのことは何もわからないので、今回は顧問のはらさんにもレビューしてもらってご意見をもらうことにした。&lt;/p>
&lt;h2 id="ベースライン移行">ベースライン移行&lt;/h2>
&lt;p>先日の &lt;a href="/diary/diary/posts/2022/0506/#データベースの移行処理">flyway のデータベース移行&lt;/a> の続き。管理しているマイクロサービスが4つあるのでそれぞれのサービスごとに設定していかないといけない。サーバーサイドって共通化できるのが大きなメリットなのに、同じサーバーサイドの仕組みを複数導入しないといけないというのはマイクロサービスのデメリットと言えばそうだし、アーキテクチャとしても正しいんやろか？という気持ちも出てくる。おそらく1つのチームが複数のマイクロサービスを開発する体制がよくない。変更作業と検証で約1日を費やした。&lt;/p></content></item><item><title>flyway を触ってみた</title><link>/diary/posts/2022/0506/</link><pubDate>Fri, 06 May 2022 09:08:02 +0900</pubDate><guid>/diary/posts/2022/0506/</guid><description>0時に寝て4時に起きてタイムライン眺めながらだらだらして6時半に起き上がった。
データベースの移行処理 半年前から導入したいという話しは聞いていたものの、先送りになっていたライブラリに flyway がある。データベースの移行処理のためのスクリプト (sql) を管理するツールでどの移行スクリプトを実行したかを記録したり、未適用の処理を自動で適用してくれたりする。spring boot だとすぐ組み込める状態になっていて Community Plugins and Integrations: Spring Boot をみながら設定したらすぐに動いた。flyway 自体の設定も Common Application Properties を参考に spring boot の設定ファイルで行える。
例えば、こんな感じ。
spring: flyway: ￼ enabled: true ￼ schemas: public ￼ locations: classpath:db/migration ￼ baseline-version: 0 ￼ baseline-on-migrate: true 移行処理の履歴情報は flyway_schema_history テーブルに保持される。既存のテーブルが存在して flyway の履歴データがない場合 (初回起動時) に移行処理を実行するかどうかを baseline-on-migrate で決める。実行するなら baseline-version でどのバージョンをベースラインとするかも設定できる。ゼロにすることで V1 からの sql ファイルを適用してくれる。ベースラインの考え方は実際に何度かデータベースの初期状態を変えて実行しないとわかりにくいかもしれない。
Tutorial: Baseline Migrations</description><content>&lt;p>0時に寝て4時に起きてタイムライン眺めながらだらだらして6時半に起き上がった。&lt;/p>
&lt;h2 id="データベースの移行処理">データベースの移行処理&lt;/h2>
&lt;p>半年前から導入したいという話しは聞いていたものの、先送りになっていたライブラリに &lt;a href="https://flywaydb.org/">flyway&lt;/a> がある。データベースの移行処理のためのスクリプト (sql) を管理するツールでどの移行スクリプトを実行したかを記録したり、未適用の処理を自動で適用してくれたりする。spring boot だとすぐ組み込める状態になっていて &lt;a href="https://flywaydb.org/documentation/usage/plugins/springboot">Community Plugins and Integrations: Spring Boot&lt;/a> をみながら設定したらすぐに動いた。flyway 自体の設定も &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html">Common Application Properties&lt;/a> を参考に spring boot の設定ファイルで行える。&lt;/p>
&lt;p>例えば、こんな感じ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">spring&lt;/span>:
&lt;span style="color:#f92672">flyway&lt;/span>:
&lt;span style="color:#f92672">￼ enabled&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">￼ schemas&lt;/span>: &lt;span style="color:#ae81ff">public&lt;/span>
&lt;span style="color:#f92672">￼ locations&lt;/span>: &lt;span style="color:#ae81ff">classpath:db/migration&lt;/span>
&lt;span style="color:#f92672">￼ baseline-version&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#f92672">￼ baseline-on-migrate&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>移行処理の履歴情報は &lt;code>flyway_schema_history&lt;/code> テーブルに保持される。既存のテーブルが存在して flyway の履歴データがない場合 (初回起動時) に移行処理を実行するかどうかを baseline-on-migrate で決める。実行するなら baseline-version でどのバージョンをベースラインとするかも設定できる。ゼロにすることで &lt;code>V1&lt;/code> からの sql ファイルを適用してくれる。ベースラインの考え方は実際に何度かデータベースの初期状態を変えて実行しないとわかりにくいかもしれない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://flywaydb.org/documentation/tutorials/baselineMigrations">Tutorial: Baseline Migrations&lt;/a>&lt;/li>
&lt;/ul></content></item></channel></rss>