<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Code Reading on forest nook</title><link>/diary/tags/code-reading/</link><description>Recent content in Code Reading on forest nook</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Mon, 23 Oct 2023 08:09:29 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/code-reading/index.xml" rel="self" type="application/rss+xml"/><item><title>echo のミドルウェア関数のスタイル</title><link>/diary/posts/2023/1023/</link><pubDate>Mon, 23 Oct 2023 08:09:29 +0900</pubDate><guid>/diary/posts/2023/1023/</guid><description>1時に寝て何度か起きて6時半に起きた。起きてから軽く部屋の掃除をした。
echo のミドルウェア開発 go の api サーバーの開発に echo という定番のフレームワークを使っている。少し前にメンバーに認証の処理をミドルウェアとして実装してもらった。いま認可の仕組みもミドルウェアで実装しようと、いくつかソースコードを読んでいて、echo のフレームワークが提供しているミドルウェアの関数名や config には共通点があることに気付いた。echo middleware によると、20個ぐらいのミドルウェアが提供されている。例えば、適当にそのうちの3つほどを取り出すが XxxWithConfig という命名規則で config を受けとって echo.MiddlewareFunc を返すというインターフェースになっている。
func HTTPSRedirectWithConfig(config RedirectConfig) echo.MiddlewareFunc func LoggerWithConfig(config LoggerConfig) echo.MiddlewareFunc func BodyDumpWithConfig(config BodyDumpConfig) echo.MiddlewareFunc また config の中身をみていると、ミドルウェアの処理に必要な関数を渡すような設計になっている。複数のミドルウェアにとって共通なのは、ミドルウェアの処理を迂回する条件を実装するため middleware.Skipper という型が次のように型で定義されている。
e.Use(middleware.BasicAuthWithConfig(middleware.BasicAuthConfig{ Skipper: func (c echo.Context) bool { // Skipper defines a function to skip middleware. }, Validator: func(string, string, echo.Context) (bool, error) { // Validator is a function to validate BasicAuth credentials. // Required.</description><content>&lt;p>1時に寝て何度か起きて6時半に起きた。起きてから軽く部屋の掃除をした。&lt;/p>
&lt;h2 id="echo-のミドルウェア開発">echo のミドルウェア開発&lt;/h2>
&lt;p>go の api サーバーの開発に &lt;a href="/diary/diary/posts/2022/1122/#echo-を採用">echo&lt;/a> という定番のフレームワークを使っている。少し前にメンバーに認証の処理をミドルウェアとして実装してもらった。いま認可の仕組みもミドルウェアで実装しようと、いくつかソースコードを読んでいて、echo のフレームワークが提供しているミドルウェアの関数名や config には共通点があることに気付いた。&lt;a href="https://echo.labstack.com/docs/category/middleware">echo middleware&lt;/a> によると、20個ぐらいのミドルウェアが提供されている。例えば、適当にそのうちの3つほどを取り出すが &lt;code>XxxWithConfig&lt;/code> という命名規則で config を受けとって echo.MiddlewareFunc を返すというインターフェースになっている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">HTTPSRedirectWithConfig&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#a6e22e">RedirectConfig&lt;/span>) &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">MiddlewareFunc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">LoggerWithConfig&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#a6e22e">LoggerConfig&lt;/span>) &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">MiddlewareFunc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">BodyDumpWithConfig&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#a6e22e">BodyDumpConfig&lt;/span>) &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">MiddlewareFunc&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>また config の中身をみていると、ミドルウェアの処理に必要な関数を渡すような設計になっている。複数のミドルウェアにとって共通なのは、ミドルウェアの処理を迂回する条件を実装するため &lt;code>middleware.Skipper&lt;/code> という型が次のように型で定義されている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Use&lt;/span>(&lt;span style="color:#a6e22e">middleware&lt;/span>.&lt;span style="color:#a6e22e">BasicAuthWithConfig&lt;/span>(&lt;span style="color:#a6e22e">middleware&lt;/span>.&lt;span style="color:#a6e22e">BasicAuthConfig&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Skipper&lt;/span>: &lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Skipper defines a function to skip middleware.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Validator&lt;/span>: &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) (&lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Validator is a function to validate BasicAuth credentials.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Required.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Realm&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Restricted&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>典型的なミドルウェアは次のように実装する。最初に Skipper を呼び出して処理の有無を確認する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span>) &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">HandlerFunc&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#a6e22e">echo&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">Skipper&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">next&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO: ミドルウェア本体の処理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">next&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>認証のミドルウェアを実装してもらったときに、私がここまでみていなかったなということに気付いて、既存のミドルウェアを echo のそれと同じスタイルにあわせるようにリファクタリングした。自分でソースコードを読んでいるとコードレビューで気付かなかったことに気付くことが多い。自分がコードを書いているときと、コードレビューをしているときでなにかしら視点が違う。&lt;/p></content></item><item><title>コードリーディングの成果</title><link>/diary/posts/2023/0127/</link><pubDate>Fri, 27 Jan 2023 12:16:46 +0900</pubDate><guid>/diary/posts/2023/0127/</guid><description>22時に寝て4時に起きて1時間ほどだらだらしていて8時に起きた。生活のリズムが少しズレてきてしまっている。
最後のコードリーディング 先週からコードリーディングの勉強会をやっていて今日が最後。今日の対象のプログラムは windows サーバーで動く c++ のコードなので私はどちらも素人であまりよく分からない。上長の判断で別チームのベテランの開発者に来てもらうとよいとアドバイスを受けてお願いして来てもらった。これは本当によかった。実装されたコードだけではなく、設計を見直した方がよい視点なども指摘してもらって、もう少し時間をかけてこの windows プログラムを改修した方がよいと私は判断した。windows サーバーをクラッシュさせてしまうリスクのあるサービスにフックして実行されるコードを書いているので、windows サーバーの振る舞いや異常系処理の経験がないと潜在的にリスクのあるコードを動かしてしまう。web のアプリケーションなら多少のバグは後で直せばよいけど、os をクラッシュさせてしまうものは慎重にレビューした方がよいように思えた。次回の定例で話題にあげて課題を掘り下げようと思う。結論としてはコードリーディングしてよかったという話し。</description><content>&lt;p>22時に寝て4時に起きて1時間ほどだらだらしていて8時に起きた。生活のリズムが少しズレてきてしまっている。&lt;/p>
&lt;h2 id="最後のコードリーディング">最後のコードリーディング&lt;/h2>
&lt;p>先週からコードリーディングの勉強会をやっていて今日が最後。今日の対象のプログラムは windows サーバーで動く c++ のコードなので私はどちらも素人であまりよく分からない。上長の判断で別チームのベテランの開発者に来てもらうとよいとアドバイスを受けてお願いして来てもらった。これは本当によかった。実装されたコードだけではなく、設計を見直した方がよい視点なども指摘してもらって、もう少し時間をかけてこの windows プログラムを改修した方がよいと私は判断した。windows サーバーをクラッシュさせてしまうリスクのあるサービスにフックして実行されるコードを書いているので、windows サーバーの振る舞いや異常系処理の経験がないと潜在的にリスクのあるコードを動かしてしまう。web のアプリケーションなら多少のバグは後で直せばよいけど、os をクラッシュさせてしまうものは慎重にレビューした方がよいように思えた。次回の定例で話題にあげて課題を掘り下げようと思う。結論としてはコードリーディングしてよかったという話し。&lt;/p></content></item><item><title>今年はしばらく svelte に注目</title><link>/diary/posts/2023/0117/</link><pubDate>Tue, 17 Jan 2023 10:19:05 +0900</pubDate><guid>/diary/posts/2023/0117/</guid><description>1時に寝て7時に起きた。なんか朝うまく起きれなくなってきた。なんでだろう？
svelte アプリの開発に着手 12月の1週間分ぐらいの工数をかけて行っていた フロントエンドの技術選定 の意志決定をした、というよりはしてもらった。私は調査結果をまとめ、react を選択しても svelte を選択しても開発視点ではどちらも同じという判断を下した。あとはお手伝い先の会社にとってどちらの技術に取り組みたいかという視点しかないなと考えて CTO に最終決断を委ねた。その結果 svelte を採用することに決まった。この調査や意志決定についていずれテックブログに書きたい。私がどのぐらい開発に参加するかはまだ未定だけど、初期のリポジトリの整理ぐらいはしておこうと svelte アプリ開発に着手した。初めて関わる技術はなんにせよおもしろい。お仕事で学びがあれば個人でもなにかしら svelte アプリを作ってみたい。
java の ldap クライアント 昨日のコードリーディングの続き。いま使っているライブラリは Apache Directory LDAP API というものだけど、このライブラリの設計があまりイケてない。古い java の考え方で設計されているライブラリのような印象を受けた。他にも java の ldap クライアントはないのかな？と調べたら so でちょうど議論されていた。
Java API to query LDAP この so によると、UnboundID LDAP SDK for Java がベストアンサーになっている。また機会があれば触ってみようかなと思った。</description><content>&lt;p>1時に寝て7時に起きた。なんか朝うまく起きれなくなってきた。なんでだろう？&lt;/p>
&lt;h2 id="svelte-アプリの開発に着手">svelte アプリの開発に着手&lt;/h2>
&lt;p>12月の1週間分ぐらいの工数をかけて行っていた &lt;a href="/diary/diary/posts/2022/1214/#フロントエンドの技術選定の調査">フロントエンドの技術選定&lt;/a> の意志決定をした、というよりはしてもらった。私は調査結果をまとめ、react を選択しても svelte を選択しても開発視点ではどちらも同じという判断を下した。あとはお手伝い先の会社にとってどちらの技術に取り組みたいかという視点しかないなと考えて CTO に最終決断を委ねた。その結果 svelte を採用することに決まった。この調査や意志決定についていずれテックブログに書きたい。私がどのぐらい開発に参加するかはまだ未定だけど、初期のリポジトリの整理ぐらいはしておこうと svelte アプリ開発に着手した。初めて関わる技術はなんにせよおもしろい。お仕事で学びがあれば個人でもなにかしら svelte アプリを作ってみたい。&lt;/p>
&lt;h2 id="java-の-ldap-クライアント">java の ldap クライアント&lt;/h2>
&lt;p>昨日のコードリーディングの続き。いま使っているライブラリは &lt;a href="https://directory.apache.org/api/">Apache Directory LDAP API&lt;/a> というものだけど、このライブラリの設計があまりイケてない。古い java の考え方で設計されているライブラリのような印象を受けた。他にも java の ldap クライアントはないのかな？と調べたら so でちょうど議論されていた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/15619147/java-api-to-query-ldap">Java API to query LDAP&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>この so によると、&lt;a href="https://ldap.com/unboundid-ldap-sdk-for-java/">UnboundID LDAP SDK for Java&lt;/a> がベストアンサーになっている。また機会があれば触ってみようかなと思った。&lt;/p></content></item><item><title>今週は日銀会合に注目</title><link>/diary/posts/2023/0116/</link><pubDate>Mon, 16 Jan 2023 18:51:03 +0900</pubDate><guid>/diary/posts/2023/0116/</guid><description>2時に寝て7時半に起きた。ちょっと生活が乱れ気味。
コードリーディングの準備 tenntenn さんの コードリーディングをしよう #tennconn のやり方を参考に、コードリーディングの勉強会を行うことにした。ある4つのプログラムがあって実績もあるという話しなので基本的には既存のコードがどのように動いているのかをメンバーみんなで確認しておこうといったもの。その段取りを決めたり、日程のスケジュールを調整したり、基本的にはイベント当日にソースを読むようにして準備の負担を少なくする一方、私が一番既存のコードを知らないので事前にソースを読んでおこうとリポジトリを眺めていた。
インフレ勉強会 エンジニアのためのインフレ研究会 #2 に参加した。この火曜日・水曜日の2日間に渡って開催される日銀会合に注目が集まっているという話題があった。議論に揉めたりしなかったら正午前に会合の結果がすぐ公表されるが、政策変更があるときは発表が遅れる傾向にあって発表時間が早い・遅いでも結果を予測して為替などが動くらしい。後藤さんの記事でも同じようなことが書いてあった。これまで日銀会合なんて気にしたことはなかったけど、政策変更の可能性があるかも？と言われるとへーと思って注目してみようと思う。こういう関心をもつ機会が増えると経済を学ぶきっかけになるかもしれない。
日銀会合 発表時刻も要注目</description><content>&lt;p>2時に寝て7時半に起きた。ちょっと生活が乱れ気味。&lt;/p>
&lt;h2 id="コードリーディングの準備">コードリーディングの準備&lt;/h2>
&lt;p>tenntenn さんの &lt;a href="https://tenntenn.dev/ja/posts/2022-01-18-tennconn-codereading/">コードリーディングをしよう #tennconn&lt;/a> のやり方を参考に、コードリーディングの勉強会を行うことにした。ある4つのプログラムがあって実績もあるという話しなので基本的には既存のコードがどのように動いているのかをメンバーみんなで確認しておこうといったもの。その段取りを決めたり、日程のスケジュールを調整したり、基本的にはイベント当日にソースを読むようにして準備の負担を少なくする一方、私が一番既存のコードを知らないので事前にソースを読んでおこうとリポジトリを眺めていた。&lt;/p>
&lt;h2 id="インフレ勉強会">インフレ勉強会&lt;/h2>
&lt;p>&lt;a href="https://inflation.connpass.com/event/271462/">エンジニアのためのインフレ研究会 #2&lt;/a> に参加した。この火曜日・水曜日の2日間に渡って開催される日銀会合に注目が集まっているという話題があった。議論に揉めたりしなかったら正午前に会合の結果がすぐ公表されるが、政策変更があるときは発表が遅れる傾向にあって発表時間が早い・遅いでも結果を予測して為替などが動くらしい。後藤さんの記事でも同じようなことが書いてあった。これまで日銀会合なんて気にしたことはなかったけど、政策変更の可能性があるかも？と言われるとへーと思って注目してみようと思う。こういう関心をもつ機会が増えると経済を学ぶきっかけになるかもしれない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://note.com/goto_finance/n/nb27ed02e1754">日銀会合 発表時刻も要注目&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>BizPy 再始動</title><link>/diary/posts/2021/1011/</link><pubDate>Mon, 11 Oct 2021 08:37:53 +0900</pubDate><guid>/diary/posts/2021/1011/</guid><description>昨日は晩ご飯食べてからのんびりしていた。寝て起きての繰り返しだったので何時に寝たのかよくわからない。夜、本を読もうと思っていたのにダラダラ過ごしてしまった。朝は7時半に起きた。朝起きたら Python で Unicode 正規化 NFC/NFD の文字列を扱う がはてブでホットエントリ化してた。昨日、書評を書いたからその記事かと期待したけど、なぜか2年ほど前に書いた古い記事だった。なんかがっかり。そして、その理由は全くわからない。1日経って夜の時点ではてブが82個ついている。昔は10個もついたら嬉しかったものだけど、いまは100個ぐらいついてもなんとも思わない。
fin-pyコードリーディング会に発表準備 fin-pyコードリーディング会#4 に参加することにした。過去にオブジェクトストレージの開発に関わっていたからデータストアやストレージに関することは興味がある。たまたまツールの store.py を題材にしていたので読んでしまった。簡単にコードを読んで気になったところをイベントの hackmd に記載した。やっていることの詳細をよくわかっていないので、コードレビューみたいになってしまった。
https://hackmd.io/bFBFaPbYS1Kqfc97HMlp7Q?view BizPy のコミュニティ活動を再開 前にやってたお仕事がうまくいかなくて他のことに時間を費やす余裕がなくてお休みしてた。本当はもっと早く再開してもよかったんだけど、新しいことに挑戦しているときにあまり他のことに注意を取られたくないという考えもあって少し保留していた。新しいことへの活動も一段落して方向性や展望もみえてきたので BizPy も再開することにした。ちょうど Slack のインテグレーションを調べようと思ったところだったので弾みを付ける意図でも都合がよい。複数の意味でタイミングがよかった。また参加者が戻ってきてくれると嬉しい。
Python で Slack のインテグレーションをやってみる勉強会 #1 プロコンの続き ネットで話題になったせいか、当事者同士で話し合う場が設けられたという公式発表が行われた。
第32回高専プロコン秋田大会自由部門プレゼン審査発表順番号５の質疑応答について、発表者・質問者双方の相互理解の場を設けさせて頂きました。#procon32 pic.twitter.com/nlzujvJ7Hv
&amp;mdash; KosenProcon (@KosenProcon) October 10, 2021 これ以上、外野がとやかく言う必要はないと思うけど、一方で立場の強い人が有利になってしまうため、運営はハラスメント行為を行った審査員へ然るべき措置をすべきといった意見もみられた。一理あるかもしれないが、そこまでするほどの問題かというのは個人的に思う。タイムラインを眺めていると、ハラスメントを問題視する人は、その背景や経緯や意図はすべて横に置いておいてハラスメント的言動や態度を糾弾する。この人たちと背景も考慮して整理しようとする人たちとは全く議論が噛み合わない。ハラスメントは絶対許すまじという社会の変化や誤った人への行き過ぎたキャンセルカルチャーに私はやや圧倒される。
そう思っていると、私のタイムラインでは「まさかりを投げる」という表現そのものや行為のハラスメントの是非の議論も巻き起こっていた。あまり最近はまさかりを投げるという表現は見かけないんだけど、「マウント禁止」というのをちょくちょくみかける。ハラスメントと根っこは同じで悪気の有無に関係なく発信側が責めを負うようになったんだなと感じる。
まさかりの議論とは別に、最近勉強会で「マウント禁止」というルールもよくみかける。これもマウントされたと感じる人と、知っていることを教えようとする人との関係の難しさを感じる。多少の間違いやもっとこうした方がいいよといったアドバイスをしなくなる人も多いのでは？という気はする。
&amp;mdash; Tetsuya Morimoto (@t2y) October 11, 2021</description><content>&lt;p>昨日は晩ご飯食べてからのんびりしていた。寝て起きての繰り返しだったので何時に寝たのかよくわからない。夜、本を読もうと思っていたのにダラダラ過ごしてしまった。朝は7時半に起きた。朝起きたら &lt;a href="https://t2y.hatenablog.jp/entry/2019/06/29/150125">Python で Unicode 正規化 NFC/NFD の文字列を扱う&lt;/a> がはてブでホットエントリ化してた。昨日、書評を書いたからその記事かと期待したけど、なぜか2年ほど前に書いた古い記事だった。なんかがっかり。そして、その理由は全くわからない。1日経って夜の時点ではてブが82個ついている。昔は10個もついたら嬉しかったものだけど、いまは100個ぐらいついてもなんとも思わない。&lt;/p>
&lt;h2 id="fin-pyコードリーディング会に発表準備">fin-pyコードリーディング会に発表準備&lt;/h2>
&lt;p>&lt;a href="https://fin-py.connpass.com/event/226933/">fin-pyコードリーディング会#4&lt;/a> に参加することにした。過去にオブジェクトストレージの開発に関わっていたからデータストアやストレージに関することは興味がある。たまたまツールの &lt;code>store.py&lt;/code> を題材にしていたので読んでしまった。簡単にコードを読んで気になったところをイベントの hackmd に記載した。やっていることの詳細をよくわかっていないので、コードレビューみたいになってしまった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hackmd.io/bFBFaPbYS1Kqfc97HMlp7Q?view">https://hackmd.io/bFBFaPbYS1Kqfc97HMlp7Q?view&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="bizpy-のコミュニティ活動を再開">BizPy のコミュニティ活動を再開&lt;/h2>
&lt;p>前にやってたお仕事がうまくいかなくて他のことに時間を費やす余裕がなくてお休みしてた。本当はもっと早く再開してもよかったんだけど、新しいことに挑戦しているときにあまり他のことに注意を取られたくないという考えもあって少し保留していた。新しいことへの活動も一段落して方向性や展望もみえてきたので BizPy も再開することにした。ちょうど Slack のインテグレーションを調べようと思ったところだったので弾みを付ける意図でも都合がよい。複数の意味でタイミングがよかった。また参加者が戻ってきてくれると嬉しい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://bizpy.connpass.com/event/198717/">Python で Slack のインテグレーションをやってみる勉強会 #1&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="プロコンの続き">プロコンの続き&lt;/h2>
&lt;p>ネットで話題になったせいか、当事者同士で話し合う場が設けられたという公式発表が行われた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">第32回高専プロコン秋田大会自由部門プレゼン審査発表順番号５の質疑応答について、発表者・質問者双方の相互理解の場を設けさせて頂きました。&lt;a href="https://twitter.com/hashtag/procon32?src=hash&amp;amp;ref_src=twsrc%5Etfw">#procon32&lt;/a> &lt;a href="https://t.co/nlzujvJ7Hv">pic.twitter.com/nlzujvJ7Hv&lt;/a>&lt;/p>&amp;mdash; KosenProcon (@KosenProcon) &lt;a href="https://twitter.com/KosenProcon/status/1447192976946384901?ref_src=twsrc%5Etfw">October 10, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>これ以上、外野がとやかく言う必要はないと思うけど、一方で立場の強い人が有利になってしまうため、運営はハラスメント行為を行った審査員へ然るべき措置をすべきといった意見もみられた。一理あるかもしれないが、そこまでするほどの問題かというのは個人的に思う。タイムラインを眺めていると、ハラスメントを問題視する人は、その背景や経緯や意図はすべて横に置いておいてハラスメント的言動や態度を糾弾する。この人たちと背景も考慮して整理しようとする人たちとは全く議論が噛み合わない。ハラスメントは絶対許すまじという社会の変化や誤った人への行き過ぎたキャンセルカルチャーに私はやや圧倒される。&lt;/p>
&lt;p>そう思っていると、私のタイムラインでは「まさかりを投げる」という表現そのものや行為のハラスメントの是非の議論も巻き起こっていた。あまり最近はまさかりを投げるという表現は見かけないんだけど、「マウント禁止」というのをちょくちょくみかける。ハラスメントと根っこは同じで悪気の有無に関係なく発信側が責めを負うようになったんだなと感じる。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">まさかりの議論とは別に、最近勉強会で「マウント禁止」というルールもよくみかける。これもマウントされたと感じる人と、知っていることを教えようとする人との関係の難しさを感じる。多少の間違いやもっとこうした方がいいよといったアドバイスをしなくなる人も多いのでは？という気はする。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1447429693959860236?ref_src=twsrc%5Etfw">October 11, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item></channel></rss>