<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lean on forest nook</title><link>/diary/tags/lean/</link><description>Recent content in Lean on forest nook</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Tue, 16 Aug 2022 07:51:04 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/lean/index.xml" rel="self" type="application/rss+xml"/><item><title>リーン思考の考え方</title><link>/diary/posts/2022/0816/</link><pubDate>Tue, 16 Aug 2022 07:51:04 +0900</pubDate><guid>/diary/posts/2022/0816/</guid><description>1時に寝て6時に起きた。夜中に3回ぐらい起きたかな。夜あまり眠れない。
リーン思考を学ぶ勉強会 スクラムマスター主催の勉強会があった。スクラムマスターは折に触れてリーン思考が大事という発言をするので気にはなっていた。リーンという概念はトヨタ生産方式から触発されている。リーン思考はフロー効率の方を重視するらしい。
フロー効率: 価値を素早く提供する リソース効率: リソースが遊び無く稼働している どちらも効率の話しをしているが、なんの効率をあげるかが異なる。i/o におけるレイテンシとスループットの関係に似ている。レイテンシを上げればスループットは下がるが、スループットを上げればレイテンシは下がるという反比例の関係となる。おそらくフロー効率とリソース効率の話しがトヨタから出ているのであれば、工場の稼働率の話しとも関連があると考えられるのでお互いにトレードオフの関係が成り立つのではないかと推測する。リーン思考は小さく作って育てていくことを指していて、同義語として mvp, イテレーティブ、バーティカルスライドなどがある。スクラムは戦術であり、リーン思考を実践するのは戦略となる。リーン思考を具体的にどう実践するかは自分たちで考える必要がある。あとは用語や概念の詳細な説明が主だった。リーン思考のメリットとして次があげられていた。
早いタイミングでフィードバックを得られる 早く作るとリスクを早期発見できる 小さい状態でフィードバックをもらった方が手戻りが少なくなる 一方でリーン思考の概念はパラダイムシフトを伴うので難しいと説明されていた。難しい背景は次になる。
ウォータフォールはリソース効率を重視する考え方である 産業革命の時代に科学的管理法としてウォータフォール的な考え方が広まった 工場でのモノヅクリにはうまくいった ソフトウェア開発ではあまり適用できない また MVP（Minimum Viable Product）の意味を理解する。そして、なぜ私はEarliest Testable / Usable / Lovableを好むのか。 の考え方の例としてこの記事のスライドを引用していた。これはこれで理解できるけれど、これはプロダクトアウトの考え方であって、業務アプリケーションはまた違うのではないかと私には懸念に思えた。自分たちのプロジェクトにとってどう実践していくかが重要になるが、そういった話しはとくになかった。プロダクトオーナーからも現状とリーン思考の概念とのギャップや違和感を感じて質問していたようにみえた。
リーン思考は難しくてなかなか実践できないといった説明があったところに私は違和感を感じた。リーン思考とは無関係にそもそもプロジェクトマネジメントは難しい。現実のプロジェクトマネジメントは生きものなのでケーススタディや教科書通りの論理でできるものではないと私は考えている。現実のプロジェクトにおける、ヒト・モノ・カネ・情報の4つを考慮した上で意思決定を適切なタイミングで行うことに正解はない。歴史に if はないので重要な意思決定を下してそれがどんな結果になろうと、別の意思決定をしたときの未来を知ることはできない。うまくいかなかったときにできることはそのふりかえりだけで、リーン思考を実践できていないという考え方はやや責任転嫁しているようにも受け取れた。</description><content>&lt;p>1時に寝て6時に起きた。夜中に3回ぐらい起きたかな。夜あまり眠れない。&lt;/p>
&lt;h2 id="リーン思考を学ぶ勉強会">リーン思考を学ぶ勉強会&lt;/h2>
&lt;p>スクラムマスター主催の勉強会があった。スクラムマスターは折に触れてリーン思考が大事という発言をするので気にはなっていた。リーンという概念はトヨタ生産方式から触発されている。リーン思考はフロー効率の方を重視するらしい。&lt;/p>
&lt;ul>
&lt;li>フロー効率: 価値を素早く提供する&lt;/li>
&lt;li>リソース効率: リソースが遊び無く稼働している&lt;/li>
&lt;/ul>
&lt;p>どちらも効率の話しをしているが、なんの効率をあげるかが異なる。i/o におけるレイテンシとスループットの関係に似ている。レイテンシを上げればスループットは下がるが、スループットを上げればレイテンシは下がるという反比例の関係となる。おそらくフロー効率とリソース効率の話しがトヨタから出ているのであれば、工場の稼働率の話しとも関連があると考えられるのでお互いにトレードオフの関係が成り立つのではないかと推測する。リーン思考は小さく作って育てていくことを指していて、同義語として mvp, イテレーティブ、バーティカルスライドなどがある。スクラムは戦術であり、リーン思考を実践するのは戦略となる。リーン思考を具体的にどう実践するかは自分たちで考える必要がある。あとは用語や概念の詳細な説明が主だった。リーン思考のメリットとして次があげられていた。&lt;/p>
&lt;ul>
&lt;li>早いタイミングでフィードバックを得られる&lt;/li>
&lt;li>早く作るとリスクを早期発見できる&lt;/li>
&lt;li>小さい状態でフィードバックをもらった方が手戻りが少なくなる&lt;/li>
&lt;/ul>
&lt;p>一方でリーン思考の概念はパラダイムシフトを伴うので難しいと説明されていた。難しい背景は次になる。&lt;/p>
&lt;ul>
&lt;li>ウォータフォールはリソース効率を重視する考え方である&lt;/li>
&lt;li>産業革命の時代に科学的管理法としてウォータフォール的な考え方が広まった
&lt;ul>
&lt;li>工場でのモノヅクリにはうまくいった&lt;/li>
&lt;li>ソフトウェア開発ではあまり適用できない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>また &lt;a href="https://www.ankr.design/designtips/making-sense-of-mvp">MVP（Minimum Viable Product）の意味を理解する。そして、なぜ私はEarliest Testable / Usable / Lovableを好むのか。&lt;/a> の考え方の例としてこの記事のスライドを引用していた。これはこれで理解できるけれど、これはプロダクトアウトの考え方であって、業務アプリケーションはまた違うのではないかと私には懸念に思えた。自分たちのプロジェクトにとってどう実践していくかが重要になるが、そういった話しはとくになかった。プロダクトオーナーからも現状とリーン思考の概念とのギャップや違和感を感じて質問していたようにみえた。&lt;/p>
&lt;p>リーン思考は難しくてなかなか実践できないといった説明があったところに私は違和感を感じた。リーン思考とは無関係にそもそもプロジェクトマネジメントは難しい。現実のプロジェクトマネジメントは生きものなのでケーススタディや教科書通りの論理でできるものではないと私は考えている。現実のプロジェクトにおける、ヒト・モノ・カネ・情報の4つを考慮した上で意思決定を適切なタイミングで行うことに正解はない。歴史に if はないので重要な意思決定を下してそれがどんな結果になろうと、別の意思決定をしたときの未来を知ることはできない。うまくいかなかったときにできることはそのふりかえりだけで、リーン思考を実践できていないという考え方はやや責任転嫁しているようにも受け取れた。&lt;/p></content></item></channel></rss>