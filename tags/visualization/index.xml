<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visualization on forest nook</title><link>/diary/tags/visualization/</link><description>Recent content in Visualization on forest nook</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Thu, 07 Sep 2023 12:19:38 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/visualization/index.xml" rel="self" type="application/rss+xml"/><item><title>組織やプロジェクト横断的なメトリクスの視覚化</title><link>/diary/posts/2023/0907/</link><pubDate>Thu, 07 Sep 2023 12:19:38 +0900</pubDate><guid>/diary/posts/2023/0907/</guid><description>0時に寝て4時に起きてもう1回ぐらい起きて6時半に起きた。
もうすぐ期限がやってくる。私が担当している issue 対応はあらかた終わってメンバーに「大きいもので見落としある？」って尋ねて「ない」って返ってきたのでもうクローズに向けて調整していく感じ。今週末から月曜日と3日間お休みする (土日も含めて休むというのも変ではあるが) ので一安心。
dirsync 周りのリファクタリング ずっとレビューが放置されていた。おそらくいま go-ldap のプロジェクトで最も活発なメンテナーが夏休みだったのではないかと推測する。昨日帰ってきたようで怒涛のレビューをされていて、私が3週間前に送っていた pr もレビューしてくれた。
Refactor DirSync search process #458 概ね同意してくれて public な関数名をより適切な関数名に変えたところを、1度公開したものは互換性を維持するために deprecated のコメントをして残しておいてと言われたところだけ修正した。修正後、数時間ですぐにマージしてくれた。感謝。
go-ldap にいくつかコントリビュートした機能はうちのプロダクトのシステムに使われていて、それなりの qa テストをやった上で動いているので一定の品質は担保していると思う。直近1年間のコントリビューター を参照すると、私は2番目に貢献しているようにみえる。こういう見える化が自分のモチベーションになるならそれはそれでよいと思う。
組み込みの課題管理のプロダクトを作る上で、個人がみたいメトリクスを簡単に集計できるような機能を提供しようと考えている。それは自分が伸ばしたいスキルやプラクティスに対して、会社やプロダクトを横断的に計測できる仕組みがあるといいと私は考えている。とくにいまどきはプログラマーが転職するのは当たり前だが、転職したら前の会社でやっていたメトリクスがみれないとか、別の会社でのメトリクスと相対比較したいとか、そういうニーズはあるなと私自身が感じているからでもある。
go イベントのパネルディスカッション mercari.go #23 Go1.21 パネルディスカッション オンライン開催 に参加した。視聴者が少なかったのか、youtube のコメント欄でちょくちょくツッコミもいれたら現場で拾ってくれておもしろかった。私が関心のあった話題を3つあげてみる。
gonew の提供 For a long time now, we have heard from Go developers that getting started is often the hardest part.
Experimenting with project templates
go で新規プロジェクトを始めるときにテンプレートからプロジェクトのレイアウトを作ってくれるユーティリティとして gonew というツールが公式から提供されたらしい。知らんかった。私も新しいリポジトリ作るときに標準的なものはファイルを基本コピペしているのでこういうのできれいに作れると嬉しいかもしれない。 ￼
derrors の是非 pkgsite という pkg.</description><content>&lt;p>0時に寝て4時に起きてもう1回ぐらい起きて6時半に起きた。&lt;/p>
&lt;p>もうすぐ期限がやってくる。私が担当している issue 対応はあらかた終わってメンバーに「大きいもので見落としある？」って尋ねて「ない」って返ってきたのでもうクローズに向けて調整していく感じ。今週末から月曜日と3日間お休みする (土日も含めて休むというのも変ではあるが) ので一安心。&lt;/p>
&lt;h2 id="dirsync-周りのリファクタリング">dirsync 周りのリファクタリング&lt;/h2>
&lt;p>ずっとレビューが放置されていた。おそらくいま go-ldap のプロジェクトで最も活発なメンテナーが夏休みだったのではないかと推測する。昨日帰ってきたようで怒涛のレビューをされていて、私が3週間前に送っていた pr もレビューしてくれた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/go-ldap/ldap/pull/458">Refactor DirSync search process #458&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>概ね同意してくれて public な関数名をより適切な関数名に変えたところを、1度公開したものは互換性を維持するために deprecated のコメントをして残しておいてと言われたところだけ修正した。修正後、数時間ですぐにマージしてくれた。感謝。&lt;/p>
&lt;p>go-ldap にいくつかコントリビュートした機能はうちのプロダクトのシステムに使われていて、それなりの qa テストをやった上で動いているので一定の品質は担保していると思う。&lt;a href="https://github.com/go-ldap/ldap/graphs/contributors?from=2022-09-08&amp;to=2023-09-07&amp;type=c">直近1年間のコントリビューター&lt;/a> を参照すると、私は2番目に貢献しているようにみえる。こういう見える化が自分のモチベーションになるならそれはそれでよいと思う。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0907_contributor.png"/>
&lt;/figure>
&lt;p>組み込みの課題管理のプロダクトを作る上で、個人がみたいメトリクスを簡単に集計できるような機能を提供しようと考えている。それは自分が伸ばしたいスキルやプラクティスに対して、会社やプロダクトを横断的に計測できる仕組みがあるといいと私は考えている。とくにいまどきはプログラマーが転職するのは当たり前だが、転職したら前の会社でやっていたメトリクスがみれないとか、別の会社でのメトリクスと相対比較したいとか、そういうニーズはあるなと私自身が感じているからでもある。&lt;/p>
&lt;h2 id="go-イベントのパネルディスカッション">go イベントのパネルディスカッション&lt;/h2>
&lt;p>&lt;a href="https://mercari.connpass.com/event/294164/">mercari.go #23 Go1.21 パネルディスカッション オンライン開催&lt;/a> に参加した。視聴者が少なかったのか、youtube のコメント欄でちょくちょくツッコミもいれたら現場で拾ってくれておもしろかった。私が関心のあった話題を3つあげてみる。&lt;/p>
&lt;h3 id="gonew-の提供">gonew の提供&lt;/h3>
&lt;blockquote>
&lt;p>For a long time now, we have heard from Go developers that getting started is often the hardest part.&lt;/p>
&lt;p>&lt;a href="https://go.dev/blog/gonew">Experimenting with project templates&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>go で新規プロジェクトを始めるときにテンプレートからプロジェクトのレイアウトを作ってくれるユーティリティとして gonew というツールが公式から提供されたらしい。知らんかった。私も新しいリポジトリ作るときに標準的なものはファイルを基本コピペしているのでこういうのできれいに作れると嬉しいかもしれない。
￼&lt;/p>
&lt;h3 id="derrors-の是非">derrors の是非&lt;/h3>
&lt;p>&lt;a href="https://github.com/golang/pkgsite">pkgsite&lt;/a> という pkg.go.dev というサイトのリポジトリの internal として実装されている derrors というパッケージがある。defer を使って必ず関数がエラーを返すときに wrap するという、ユニークな発想で実装されたツール。明示的なコードを書くという go の文化とはあわない気はするけど、ユニークな使い方ではあるのでおもしろい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/golang/pkgsite/blob/master/internal/derrors/derrors.go">https://github.com/golang/pkgsite/blob/master/internal/derrors/derrors.go&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>この延長でエラーが発生したときにレポートを生成する derrors のユーティリティもあったりする。google がやっていることだから、わりと開発者間でもこれと同じものを自前で実装する開発者が増えているといった話しも聞く。&lt;/p>
&lt;h3 id="go-2-はもうリリースされない">go 2 はもうリリースされない&lt;/h3>
&lt;blockquote>
&lt;p>The answer is never. Go 2, in the sense of breaking with the past and no longer compiling old programs, is never going to happen. Go 2 in the sense of being the major revision of Go 1 we started toward in 2017 has already happened.&lt;/p>
&lt;p>&lt;a href="https://go.dev/blog/compat">Backward Compatibility, Go 1.21, and Go 2&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>これまでの go の言語処理系の開発の中で非互換な変更について「go 2 で」とプロポーザルだったり、issue の議論で先送りされてきた。最近コア開発者の Russ Cox 氏が (現時点で) go 2 はもう出ないと宣言した。go は既存のプログラムをコンパイルできない状態で新しいバージョンを出すことはしない。この背景の1つとして、誰もがジェネリクスの導入で go の互換性は崩れると思っていたものが互換性を維持して導入できたことが大きいと思う。(現時点で) go 2 はもうリリースされないらしい。&lt;/p></content></item></channel></rss>