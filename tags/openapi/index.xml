<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Openapi on</title><link>/diary/tags/openapi/</link><description>Recent content in Openapi on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 29 Jul 2024 19:06:51 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/openapi/index.xml" rel="self" type="application/rss+xml"/><item><title>api ドキュメント保守の考察</title><link>/diary/posts/2024/0729/</link><pubDate>Mon, 29 Jul 2024 19:06:51 +0900</pubDate><guid>/diary/posts/2024/0729/</guid><description>今晩から東京出張なので運動はおやすみ。縄跳びだけもっていく。
api ドキュメントを継続的に保守することへの考察 お手伝い先のプロダクトを1年半以上、継続している。web api の機能もどんどん増えてきて50は超えていると思う。api ドキュメントをビルドするために redocly cli というツールを使っている。次のスクリプトは .gitlab-ci.yml の設定だけど、このぐらいの手間で openapi.yml から1つの html ドキュメントを生成してくれる。この index.html を api サーバーに同梱している。
before_script: - node --version - npm --version - npm install @redocly/cli@latest - npx redocly --version script: - |+ npx redocly build-docs schema/openapi.yml \ --output index.html \ --theme.openapi.schemaExpansionLevel=10 \ --theme.openapi.expandResponses=all \ --theme.openapi.requiredPropsFirst=true \ --theme.openapi.jsonSampleExpandLevel=10 \ --theme.openapi.hideLoading=true \ --theme.openapi.pathInMiddlePanel=true - mkdir -p public - mv index.html public/ web api の機能数が少ないときはこれで十分だった。しかし、50を超えてくると yml で api ドキュメントを保守するのが辛くなってくる。xml/yml/json を問わず、サイズの大きいこれらのファイルを保守するのはつらい。人間の能は複数種別の情報を同時処理できるが、一定量を超えた情報量をうまく処理できない。もちろん機能別にファイル分割して管理しているのだけど、それでも openapi.</description><content>&lt;p>今晩から東京出張なので運動はおやすみ。縄跳びだけもっていく。&lt;/p>
&lt;h2 id="api-ドキュメントを継続的に保守することへの考察">api ドキュメントを継続的に保守することへの考察&lt;/h2>
&lt;p>お手伝い先のプロダクトを1年半以上、継続している。web api の機能もどんどん増えてきて50は超えていると思う。api ドキュメントをビルドするために &lt;a href="https://redocly.com/docs/cli">redocly cli&lt;/a> というツールを使っている。次のスクリプトは .gitlab-ci.yml の設定だけど、このぐらいの手間で openapi.yml から1つの html ドキュメントを生成してくれる。この index.html を api サーバーに同梱している。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">before_script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">node --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">npm --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">npm install @redocly/cli@latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">npx redocly --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - |+&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> npx redocly build-docs schema/openapi.yml \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --output index.html \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --theme.openapi.schemaExpansionLevel=10 \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --theme.openapi.expandResponses=all \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --theme.openapi.requiredPropsFirst=true \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --theme.openapi.jsonSampleExpandLevel=10 \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --theme.openapi.hideLoading=true \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --theme.openapi.pathInMiddlePanel=true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">mkdir -p public&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">mv index.html public/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>web api の機能数が少ないときはこれで十分だった。しかし、50を超えてくると yml で api ドキュメントを保守するのが辛くなってくる。xml/yml/json を問わず、サイズの大きいこれらのファイルを保守するのはつらい。人間の能は複数種別の情報を同時処理できるが、一定量を超えた情報量をうまく処理できない。もちろん機能別にファイル分割して管理しているのだけど、それでも openapi.yml のエンドポイントの定義はどんどん増えていく。それがだんだん辛くなってきたのが現状になる。&lt;/p>
&lt;p>以前 &lt;a href="/diary/diary/posts/2024/0115/#hugo-のハンズオン資料作り">静的サイトジェネレーター勉強会の手伝い&lt;/a> をしたときに &lt;a href="https://github.com/slatedocs/slate">slate&lt;/a> という markdown で記述できる api ドキュメントツールがあることを教えてもらった。これはいいなとそのとき思ったのだけど、コミット履歴などをみているともう保守モードで活発に開発されていない。oss あるある話しで継続的に開発されていないツールはすぐに廃れるのでいまから採用するには躊躇してしまう。&lt;/p>
&lt;p>&lt;a href="https://www.postman.com/">postman&lt;/a> という api プラットフォームがある。昔から api クライアントとして使う開発者も多かったのでツール自体は知っていた。この機会に私も実際に使ってみて評価した。既存の openapi.yml + redocly cli を使っているドキュメント管理と postman との比較をした。&lt;/p>
&lt;ul>
&lt;li>postman はドキュメントのバージョン管理ができる&lt;/li>
&lt;li>postman アプリを api ドキュメントのエディターとして使える
&lt;ul>
&lt;li>テキストの説明欄に markdown を記述できる&lt;/li>
&lt;li>エクスポートすると json データになる
&lt;ul>
&lt;li>ドキュメントのデータとして yml と大きな違いはないが、エディターで隠蔽されるからドキュメントの保守はやりやすくなる
&lt;ul>
&lt;li>但し、エディターは postman アプリに依存する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>postman はリクエスト CLI とレスポンスの対応関係をセットで管理できる&lt;/li>
&lt;li>ドキュメントの構造や見た目はあまり変わらない&lt;/li>
&lt;/ul>
&lt;p>postman そのものは悪くないけど、うちらのいまの開発のワークフローにすぐに適用できる状況でもない。postman の機能を有効に活用できるように開発のやり方を変えないといけない。そうしないと、ドキュメント管理だけに使うには外部サービス依存が大きくて学習コストも高くなってしまう。&lt;/p>
&lt;p>別のアプローチとして openapi.yml の編集をテキストファイルで行うのではなく、人間にとって操作しやすいエディター上で行えるようにしたものが &lt;a href="https://github.com/stoplightio/studio">stoplight studio&lt;/a> になる。ググると評判もよいし、私も実際に使ってみて機能はまさに探していたツールではある。しかし、このツールの先行きも怪しい。これまでデスクトップ版のエディターは無償で提供されていて、いまもアカウント登録すれば無償で使える。しかし、昨年あたりに SmartBear 社 (swagger を作ってた会社ね) に買収されている。おそらく &lt;a href="https://editor.swagger.io/">swagger editor&lt;/a> の移行先を探していてちょうど都合がよいのだと思う。SmartBear 社は過去の openapi 移行時のゴダゴダがあって印象がよくないし、ビジネス寄りの会社になるので将来的に stoplight studio を無償で使い続けられるかどうかにも懸念がある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://smartbear.com/news/news-releases/smartbear-to-acquire-stoplight/">SmartBear to Acquire Stoplight to Deliver Industry’s Broadest Portfolio of API Development Capabilities&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>今回は調査したどのツールにも懸念があって採用を見送ることにした。api ドキュメントを書くツールを探すのは難しい。&lt;/p>
&lt;h2 id="寝台特急">寝台特急&lt;/h2>
&lt;p>久しぶりの寝台特急。11時25分頃に乗車券を使って JR 三ノ宮駅の改札を通過しようとするとエラーになった。30日から有効とは書いてあるものの、以前は通過できていた気がしたので駅員さんに聞いたら30分前から通れるはずとの。その後11時38分には改札を通れた。これまで改札でエラーになったことがなかったのは11時30分をまわってからだったんだと初めて気付いた。運が悪いことに0時11分発の予定が32分遅延した。調子の悪いときはこんなもので段取りもうまくいかない。最終的に東京駅には15分ほど遅れになった。&lt;/p>
&lt;p>今日は普通のB寝台シングルを予約した。下側の狭い部屋でゆっくり寝ることにした。乗車後10分ほどして車掌さんが切符確認にきた。これもわかっているから扉を開けて切符も用意して待ってた。寝台特急は薄い布団しかついていないから冬はちょっと寒い。逆に夏はエアコンが効いているし薄い布団で問題ない。寝台特急は暖かい時期に乗るのがよさそうだということもわかってきた。&lt;/p></content></item><item><title>go の処理系も驚く sdk のコード生成</title><link>/diary/posts/2023/0828/</link><pubDate>Mon, 28 Aug 2023 08:05:42 +0900</pubDate><guid>/diary/posts/2023/0828/</guid><description>0時に寝て何度か起きて6時に起きた。そのまま7時過ぎまでだらだらしてた。しんどい。
msgraph-sdk-go のサイズ問題 先週 msgraph-sdk-go を使った開発 を終えてデプロイする段階になってライブラリのサイズが大きくて、コンパイル速度が遅くなったり、バイナリサイズが大きくなったりする弊害があることに気付いた。コンパイル速度は2-3倍遅くなり (3分が7-10分ぐらい)、バイナリサイズも2-3倍大きくなる (30 MiB が 100 MiB とか) 。たまたまこのリポジトリは他のツール類からも依存パッケージとして使われるものなので想定よりも影響が大きいことに気付いた。
朝からチームのメンバーとミーティングして、本来は qa に入ったこの時期にこんな変更をすべきではないが、これは放置するデメリットが大きいのでリポジトリ分割 (モジュール分割) しようと提案して了承を得た。私がやれば作業は1日もあれば完了するだろうと見積もって、見積もり通り、夕方には分割したモジュールをテスト環境にデプロイして当面の解決を得た。アプリケーションのモジュール構造をちゃんとレイヤー化して作ってあるから、今回みたいに急遽、モジュール分割が必要になってもほぼ変更する必要はなかった (たった1箇所だけ) 。
この本質的な問題は次の issue のコメントで説明されている。
Issue with the size of the API surface of the models package #129 ざっと機械翻訳してみる。
コンテキスト
この SDK は kiota を使用してメタデータから自動的に生成されます。オリジナルのメタデータは、Microsoft Graph の配下にあるすべてのサービスチーム（v1用とベータ用）によって入力された CSDL です。この CSDL は最終的に OpenAPI のフォーマットに変換されますが、これは非常に大きなものです（1k 以上のエンドポイント、1.5k のモデル &amp;hellip;）。API のサイズが大きいため、完全な API surface の SDK を手作りすることは実現不可能でしょう。
私たちは、SDK を複数のサブモジュール（ファイル用、メール用など）に &amp;ldquo;スライス&amp;rdquo; して、人々が関心のあるものだけを簡単に入手できるようにすることをしばらく考えてきました。実際、私たちは PowerShell でこれを実現しました。しかし、&amp;ldquo;グラフ&amp;rdquo; の性質（すべてのモデルは互いにある程度関連している）と構築されるアプリケーションの多様性により、スライスは誰にとっても &amp;ldquo;正しい&amp;rdquo; ものにはならない（大きすぎたり、小さすぎたり、モデルの重複につながったり&amp;hellip;）。</description><content>&lt;p>0時に寝て何度か起きて6時に起きた。そのまま7時過ぎまでだらだらしてた。しんどい。&lt;/p>
&lt;h2 id="msgraph-sdk-go-のサイズ問題">msgraph-sdk-go のサイズ問題&lt;/h2>
&lt;p>先週 &lt;a href="/diary/diary/posts/2023/0825/#msgraph-sdk-go-を使った開発">msgraph-sdk-go を使った開発&lt;/a> を終えてデプロイする段階になってライブラリのサイズが大きくて、コンパイル速度が遅くなったり、バイナリサイズが大きくなったりする弊害があることに気付いた。コンパイル速度は2-3倍遅くなり (3分が7-10分ぐらい)、バイナリサイズも2-3倍大きくなる (30 MiB が 100 MiB とか) 。たまたまこのリポジトリは他のツール類からも依存パッケージとして使われるものなので想定よりも影響が大きいことに気付いた。&lt;/p>
&lt;p>朝からチームのメンバーとミーティングして、本来は qa に入ったこの時期にこんな変更をすべきではないが、これは放置するデメリットが大きいのでリポジトリ分割 (モジュール分割) しようと提案して了承を得た。私がやれば作業は1日もあれば完了するだろうと見積もって、見積もり通り、夕方には分割したモジュールをテスト環境にデプロイして当面の解決を得た。アプリケーションのモジュール構造をちゃんとレイヤー化して作ってあるから、今回みたいに急遽、モジュール分割が必要になってもほぼ変更する必要はなかった (たった1箇所だけ) 。&lt;/p>
&lt;p>この本質的な問題は次の issue のコメントで説明されている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/microsoftgraph/msgraph-sdk-go/issues/129#issuecomment-1098028043">Issue with the size of the API surface of the models package #129&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ざっと機械翻訳してみる。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>コンテキスト&lt;/strong>&lt;/p>
&lt;p>この SDK は &lt;a href="https://github.com/microsoft/kiota">kiota&lt;/a> を使用してメタデータから自動的に生成されます。オリジナルのメタデータは、Microsoft Graph の配下にあるすべてのサービスチーム（v1用とベータ用）によって入力された CSDL です。この CSDL は最終的に OpenAPI のフォーマットに変換されますが、これは非常に大きなものです（1k 以上のエンドポイント、1.5k のモデル &amp;hellip;）。API のサイズが大きいため、完全な API surface の SDK を手作りすることは実現不可能でしょう。&lt;/p>
&lt;p>私たちは、SDK を複数のサブモジュール（ファイル用、メール用など）に &amp;ldquo;スライス&amp;rdquo; して、人々が関心のあるものだけを簡単に入手できるようにすることをしばらく考えてきました。実際、私たちは PowerShell でこれを実現しました。しかし、&amp;ldquo;グラフ&amp;rdquo; の性質（すべてのモデルは互いにある程度関連している）と構築されるアプリケーションの多様性により、スライスは誰にとっても &amp;ldquo;正しい&amp;rdquo; ものにはならない（大きすぎたり、小さすぎたり、モデルの重複につながったり&amp;hellip;）。&lt;/p>
&lt;p>そのような理由から、私たちは「完全なSDK」を提供することにしました。すべての人にとって理想的とは言えないかもしれませんが、Go開発者の中には「アプリケーションを作るためのSDKが欲しいだけ」という人もいると感じています（以下で説明する2つ目のオプションとは対照的です）。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>Go の欠点&lt;/strong>&lt;/p>
&lt;p>Go の探求を通して、いくつかの欠点に気づいた。現時点では、私たちのプロジェクトやパッケージが適切にセットアップされていないせいなのか、Go や大規模プロジェクトの制限のせいなのかはわからない：&lt;/p>
&lt;p>go build は、変更されておらず、依存関係も変更されていないサブパッケージをリビルドすることが多い。go build が直前に実行されていても、go test がリビルドすることがよくあります。なぜある種のキャッシュに頼らないのでしょうか？同じ問題が go lint にもある。&lt;br />
私には、たくさんのサブパッケージがある大きなプロジェクトをビルドするコストは、依存関係が更新されたり、キャッシュが削除されたり、コードが変更されたりしない限り、「セッションごとに一度」だけ支払われるべきだと感じます。&lt;/p>
&lt;p>私たちのプロジェクト構成／構造において、そのような状況を改善するための最適化について、自由に概説してください。また、Goコミュニティ（Goコンパイラを開発している人たちなど）と関わって、そのようなフィードバックを提供する方法があれば、喜んでそうします。私たちのプロジェクトは、その規模の大きさから、世の中にあるほとんどのGoパッケージと比べると、ちょっと変わり者だとわかっています。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>適切なサイズの SDK&lt;/strong>&lt;/p>
&lt;p>最後に、すべてのエンドポイントを備えた完全な SDK を持つことは、様々な理由からすべての人に適しているわけではないことを認識しています。私たちは新しい &amp;ldquo;適切なサイズのセルフサービスSDKエクスペリエンス&amp;rdquo; を可能にするために取り組んでいます。そこでは、APIユーザーは誰でも、この SDK と同じように見え、同じように感じる SDK を生成することができますが、完全な API サーフェスの代わりに、彼らのアプリケーションのために彼らが気にするエンドポイント/モデルのみが含まれています。
私たちは今、そのような取り組みに本当に早くから取り組んでいますが、それでもフィードバックをいただけるとうれしいです。大まかな手順はこんな感じだ：&lt;/p>
&lt;ol>
&lt;li>新しいgoプロジェクトを作成するか、既存のプロジェクトを特定する。&lt;/li>
&lt;li>kiotaの依存関係を追加するか、msgraph-sdk-go-coreを追加します（これはKiotaの依存関係をプルし、いくつか追加します）。&lt;/li>
&lt;li>グラフエクスプローラで必要なリソースを選択（左パネル、2番目のタブ、&amp;hellip;、&amp;ldquo;コレクションに追加&amp;rdquo;）。&lt;/li>
&lt;li>コレクションをプレビューをクリックし、postmanコレクションとしてエクスポートします。&lt;/li>
&lt;li>hidi を postmanコレクションと先ほど共有したOpenAPIの完全な説明文と一緒に使って、&amp;ldquo;フィルタリングされた&amp;rdquo; OpenAPI フォーマットを生成する。&lt;/li>
&lt;li>kiotaを使って、プロジェクトにMicrosoft Graph用のGoクライアントを生成する。&lt;/li>
&lt;li>APIの呼び出しを開始する。&lt;/li>
&lt;/ol>
&lt;p>この時点で、私たちはこれらのステップをすべて文書化し、効率化するために取り組んでいます（おそらくステップ4～5を圧縮しています）。このアプローチの素晴らしいところは、ステップ5から7までが、Microsoft Graphだけでなく、呼び出したいOpenAPIで記述されたAPIで動作することだ。&lt;br />
繰り返しますが、この最後の提案はまだ初期段階です。自由に試して、様々な場所でフィードバックを提供してください。&lt;/p>
&lt;p>この長い投稿で、私たちがどこに向かっているのかが明らかになり、Goコミュニティからこれらの側面すべてについてさらにフィードバックが得られると本当に助かる！&lt;/p>
&lt;/blockquote>
&lt;p>簡単に言えば、ms graph api の体系が巨大過ぎて、その定義は &lt;a href="https://raw.githubusercontent.com/microsoftgraph/msgraph-metadata/master/openapi/v1.0/openapi.yaml">openapi.yaml&lt;/a> にあるが、この定義からすべてコード生成すると巨大なモデル定義をもつ sdk が出来上がってしまったという話しである。後半に書いてあるワークアラウンドとして kiota で必要なモデルだけを選択して専用 sdk を生成すればサイズを小さくできるとある。しかし、それはそれで &lt;a href="https://developer.microsoft.com/en-us/graph/graph-explorer">graph explorer&lt;/a> で選択しないといけなかったりして面倒そうではある。次のドキュメントでもその手順について書いてある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://devblogs.microsoft.com/microsoft365dev/building-go-applications-with-the-microsoft-graph-go-sdk/#create-a-smaller-and-tailored-microsoft-graph-go-client-library">Create a smaller and tailored Microsoft Graph Go client library&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>うちの用途ではモジュール分割により、局所化したのでひとまずこの問題は大きな影響をもたないようになった。また余裕があるときにモデルを選択して専用 sdk を自動的に生成する仕組みを構築できるならそれに挑戦してもよいかもしれない。&lt;/p></content></item><item><title>openapi 勉強会</title><link>/diary/posts/2022/1216/</link><pubDate>Fri, 16 Dec 2022 11:18:04 +0900</pubDate><guid>/diary/posts/2022/1216/</guid><description>1時に寝て7時に起きた。昨日はたまたま遅くなって0時頃に帰ってきたが、最近は22時前後に帰ってくることが多い。疲労困憊。
nginx でつくるリバースプロキシ ちょっとググってみつかる記事を参考にして設定したらすぐにできた。私は tls 周りの設定に詳しくないのでこういうまとめ記事はとても助かる。インターネットって便利。
Docker with SSL and an nginx reverse proxy NGINX Docker with SSL Encryption (Self-signed) openapi 勉強会 昨日の続き。openapi についてチーム勉強会を開催した。wiki に次の目次で説明を書いてその内容を勉強会で話した。ちょうど1時間におさまって内容もわかりやすいものができたのではないかと自画自賛。毎週のチーム勉強会のネタとしてちょうどよい粒度だった。
code generator が fork した背景 スキーマ駆動開発 メリット デメリット OpenAPI スキーマからドキュメント生成 OpenAPI スキーマからコード生成 リファレンス 余談だけど、過去に働いていた会社の発表資料が slideshare から docswell というサービスに移管されてた。slideshare は広告が鬱陶しいサービスになってしまってひどいユーザー体験だからこれは適切な判断だと思う。
https://www.docswell.com/s/ydnjp/Z3YQV5-2019-11-21-120351</description><content>&lt;p>1時に寝て7時に起きた。昨日はたまたま遅くなって0時頃に帰ってきたが、最近は22時前後に帰ってくることが多い。疲労困憊。&lt;/p>
&lt;h2 id="nginx-でつくるリバースプロキシ">nginx でつくるリバースプロキシ&lt;/h2>
&lt;p>ちょっとググってみつかる記事を参考にして設定したらすぐにできた。私は tls 周りの設定に詳しくないのでこういうまとめ記事はとても助かる。インターネットって便利。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/dahlsailrunner/679e6dec5fd769f30bce90447ae80081">Docker with SSL and an nginx reverse proxy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mpolinowski.github.io/docs/DevOps/NGINX/2020-08-27--nginx-docker-ssl-certs-self-signed/2020-08-27/">NGINX Docker with SSL Encryption (Self-signed)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="openapi-勉強会">openapi 勉強会&lt;/h2>
&lt;p>昨日の続き。openapi についてチーム勉強会を開催した。wiki に次の目次で説明を書いてその内容を勉強会で話した。ちょうど1時間におさまって内容もわかりやすいものができたのではないかと自画自賛。毎週のチーム勉強会のネタとしてちょうどよい粒度だった。&lt;/p>
&lt;ul>
&lt;li>code generator が fork した背景&lt;/li>
&lt;li>スキーマ駆動開発
&lt;ul>
&lt;li>メリット&lt;/li>
&lt;li>デメリット&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>OpenAPI スキーマからドキュメント生成&lt;/li>
&lt;li>OpenAPI スキーマからコード生成&lt;/li>
&lt;li>リファレンス&lt;/li>
&lt;/ul>
&lt;p>余談だけど、過去に働いていた会社の発表資料が slideshare から docswell というサービスに移管されてた。slideshare は広告が鬱陶しいサービスになってしまってひどいユーザー体験だからこれは適切な判断だと思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.docswell.com/s/ydnjp/Z3YQV5-2019-11-21-120351">https://www.docswell.com/s/ydnjp/Z3YQV5-2019-11-21-120351&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>openapi 再び</title><link>/diary/posts/2022/1215/</link><pubDate>Thu, 15 Dec 2022 08:16:29 +0900</pubDate><guid>/diary/posts/2022/1215/</guid><description>1時に寝て何度か起きて7時に起きた。1-2時頃に吐き気がして苦しむ割に後半はなにもなかったかのように眠れることがある。
openapi-generator の調査 毎週の勉強会に向けて最新の openapi-generator を使って出力した go client のコードを読んだりしていた。openapi-generator を簡単に試すためのチュートリアルのようなものとして、過去にリポジトリに整理しておいた。このリポジトリを使うとコード生成とドキュメント生成の両方を試してスキーマがあることのメリットを体験できるようになっている。
https://github.com/kazamori/try-openapi-generator-cli chatgpt で遊ぶ 【おあそぶ会】GPT3と遊ぶ に参加した。gpt3 についてちょうさんが調べたメモにも目を通して参考になった。
20221215【おあそぶ会】GPT3と遊ぶ ちょうさんの gpt3 の説明を聞きながら chatgpt で葬送のフリーレンについてチャットしてた。今日の成果はこれかな。</description><content>&lt;p>1時に寝て何度か起きて7時に起きた。1-2時頃に吐き気がして苦しむ割に後半はなにもなかったかのように眠れることがある。&lt;/p>
&lt;h2 id="openapi-generator-の調査">openapi-generator の調査&lt;/h2>
&lt;p>毎週の勉強会に向けて最新の &lt;a href="https://github.com/OpenAPITools/openapi-generator">openapi-generator&lt;/a> を使って出力した go client のコードを読んだりしていた。openapi-generator を簡単に試すためのチュートリアルのようなものとして、過去にリポジトリに整理しておいた。このリポジトリを使うとコード生成とドキュメント生成の両方を試してスキーマがあることのメリットを体験できるようになっている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/try-openapi-generator-cli">https://github.com/kazamori/try-openapi-generator-cli&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="chatgpt-で遊ぶ">chatgpt で遊ぶ&lt;/h2>
&lt;p>&lt;a href="https://play2learn.connpass.com/event/268391/">【おあそぶ会】GPT3と遊ぶ&lt;/a> に参加した。gpt3 についてちょうさんが調べたメモにも目を通して参考になった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://peridot-balmoral-923.notion.site/20221215-GPT3-31a50d35e2b14c38a73693d1cf1d339a">20221215【おあそぶ会】GPT3と遊ぶ&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ちょうさんの gpt3 の説明を聞きながら chatgpt で葬送のフリーレンについてチャットしてた。今日の成果はこれかな。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/1215_chatgpt1.png"/>
&lt;/figure></content></item><item><title>openapi-ext-tools をまた使う日がきた</title><link>/diary/posts/2022/1210/</link><pubDate>Sat, 10 Dec 2022 12:03:13 +0900</pubDate><guid>/diary/posts/2022/1210/</guid><description>0時に寝て4時に起きて7時に起きた。わりとよく眠れた。
ストレッチ トレーナーさんと月曜日の日本対クロアチア戦の感想を話したりしていた。今日の開脚幅は開始前153cmで、ストレッチ後156cmだった。先週は疲弊と疲労で散々な数値になっていたものが復調してきつつある。今週も毎日8-22時はオフィスで缶詰め状態だった。たくさん座っている (同じ体勢でいる) 時間が増えると筋肉にはよくない。まだまだ右腰と右太もも周りの張りは強く復調にはもう少し時間がかかるようにみえる。一方で忙しさのピークを越したと思うので今週以降は少しペースダウンしながら体作りをしていく。いまお手伝いしている開発は12月にすべての集中力を費やしてもよいと考えている。残りは期間はメンバーに委譲するような体制になるとベストかもしれない。そのための体力づくりは重要。
openapi-ext-tools 再び github pages ならぬ gitlab pages がある。ふと web api のドキュメントを作るために openapi のスキーマを定義したら gitlab の ci/cd と連携できていいんじゃないかと思い付いた。スキーマがあればフロントエンドのクライアント生成や e2e テストコードの自動生成などに使えるかもしれないし。過去に作った openapi-ext-tools を oss にしておいたからいまも使える。oss 万歳。先のことはわからない。redoc を使ってちゃっちゃと実装した。
pages: only: changes: - schema/* stage: deploy image: alpine:latest before_script: - apk --no-cache add python3 nodejs npm - python --version - python -m ensurepip - pip3 --version - node --version - npm --version - npm install --global redoc-cli - redoc-cli --version - pip3 install openapi-ext-tools - pip3 freeze openapi-ext-tools | grep openapi script: - openapi-spec-cli --spec-path schema/openapi.</description><content>&lt;p>0時に寝て4時に起きて7時に起きた。わりとよく眠れた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>トレーナーさんと月曜日の日本対クロアチア戦の感想を話したりしていた。今日の開脚幅は開始前153cmで、ストレッチ後156cmだった。先週は疲弊と疲労で散々な数値になっていたものが復調してきつつある。今週も毎日8-22時はオフィスで缶詰め状態だった。たくさん座っている (同じ体勢でいる) 時間が増えると筋肉にはよくない。まだまだ右腰と右太もも周りの張りは強く復調にはもう少し時間がかかるようにみえる。一方で忙しさのピークを越したと思うので今週以降は少しペースダウンしながら体作りをしていく。いまお手伝いしている開発は12月にすべての集中力を費やしてもよいと考えている。残りは期間はメンバーに委譲するような体制になるとベストかもしれない。そのための体力づくりは重要。&lt;/p>
&lt;h2 id="openapi-ext-tools-再び">openapi-ext-tools 再び&lt;/h2>
&lt;p>github pages ならぬ &lt;a href="https://docs.gitlab.com/ee/user/project/pages/">gitlab pages&lt;/a> がある。ふと web api のドキュメントを作るために openapi のスキーマを定義したら gitlab の ci/cd と連携できていいんじゃないかと思い付いた。スキーマがあればフロントエンドのクライアント生成や e2e テストコードの自動生成などに使えるかもしれないし。過去に作った &lt;a href="https://pypi.org/project/openapi-ext-tools/">openapi-ext-tools&lt;/a> を oss にしておいたからいまも使える。oss 万歳。先のことはわからない。&lt;a href="https://github.com/Redocly/redoc">redoc&lt;/a> を使ってちゃっちゃと実装した。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">pages&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">only&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">changes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">schema/*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">stage&lt;/span>: &lt;span style="color:#ae81ff">deploy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">alpine:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">before_script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">apk --no-cache add python3 nodejs npm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">python --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">python -m ensurepip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">pip3 --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">node --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">npm --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">npm install --global redoc-cli&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">redoc-cli --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">pip3 install openapi-ext-tools&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">pip3 freeze openapi-ext-tools | grep openapi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">openapi-spec-cli --spec-path schema/openapi.yml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - |+&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> redoc-cli bundle bundled_openapi.yaml \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --output index.html \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --options.expandResponses=all \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --options.requiredPropsFirst=true \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --options.jsonSampleExpandLevel=10 \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --options.hideLoading=true \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --options.pathInMiddlePanel=true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">mkdir -p public&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">mv index.html public/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">artifacts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">paths&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">public&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>久しぶりに触ったら openapi-ext-tools が依存ライブラリの変更で動かなくなっていたので直した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/openapi-ext-tools/issues/1">cannot import name &amp;lsquo;ValidationError&amp;rsquo; from &amp;lsquo;openapi_spec_validator.exceptions&amp;rsquo; #1&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>openapi generator の設定</title><link>/diary/posts/2022/0627/</link><pubDate>Mon, 27 Jun 2022 07:39:39 +0900</pubDate><guid>/diary/posts/2022/0627/</guid><description>3時に寝て6時半に起きた。昨日は夕方に昼寝したので夜は眠れなかった。
openapi generator の x-implements 機能 外部ベンダーの api client の wrapper を実装していて、api client が扱うリクエストやレスポンスを型 (インターフェース) で抽象化できるとよさそうと思って openapi generator の設定を調べていた。maven-plugin の設定と openapi-generator の設定の2つがあるので両方のドキュメントを確認しないといけない。
https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-maven-plugin https://openapi-generator.tech/docs/generators/java/ そんなに都合よくインターフェースを指定できるような仕組みがなければ、最悪は mustache テンプレートをカスタマイズするしかないかなぁとか考えていた。テンプレートを操作すると、今後の保守コストが上がってしまうのでそのメリット・デメリットを比較して考えないといけない。諦めかけていたときに so でこの issue をみつけた。
Feature x-implements is not supported #11636 ちょうどこの5月末にリリースされたばかりの 6.0.0 に x-implements と指定すれば、任意のインターフェースを implements できる機能が追加された。これはスキーマに対する設定なのでテンプレートをカスタマイズするよりずっと保守コストは小さくて済む。
例えば、openapi schema の json で設定すると、コード生成したときにそんな風にインターフェースが付く。
&amp;#34;SomethingApiResponse&amp;#34;: { + &amp;#34;x-implements&amp;#34;: &amp;#34;com.example.app.MyResponse&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;SomethingApiResponse&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;object&amp;#34;, &amp;#34;properties&amp;#34;: { -public class SomethingApiResponse { +public class SomethingApiResponse implements com.example.app.MyResponse { あまりにも意図していた機能をみつけて嬉しくてツィートしてしまった。</description><content>&lt;p>3時に寝て6時半に起きた。昨日は夕方に昼寝したので夜は眠れなかった。&lt;/p>
&lt;h2 id="openapi-generator-の-x-implements-機能">openapi generator の x-implements 機能&lt;/h2>
&lt;p>外部ベンダーの api client の wrapper を実装していて、api client が扱うリクエストやレスポンスを型 (インターフェース) で抽象化できるとよさそうと思って openapi generator の設定を調べていた。maven-plugin の設定と openapi-generator の設定の2つがあるので両方のドキュメントを確認しないといけない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-maven-plugin">https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-maven-plugin&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://openapi-generator.tech/docs/generators/java/">https://openapi-generator.tech/docs/generators/java/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>そんなに都合よくインターフェースを指定できるような仕組みがなければ、最悪は &lt;a href="https://mustache.github.io/">mustache&lt;/a> テンプレートをカスタマイズするしかないかなぁとか考えていた。テンプレートを操作すると、今後の保守コストが上がってしまうのでそのメリット・デメリットを比較して考えないといけない。諦めかけていたときに so でこの issue をみつけた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/OpenAPITools/openapi-generator/issues/11636">Feature x-implements is not supported #11636&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ちょうどこの5月末にリリースされたばかりの 6.0.0 に &lt;code>x-implements&lt;/code> と指定すれば、任意のインターフェースを implements できる機能が追加された。これはスキーマに対する設定なのでテンプレートをカスタマイズするよりずっと保守コストは小さくて済む。&lt;/p>
&lt;p>例えば、openapi schema の json で設定すると、コード生成したときにそんな風にインターフェースが付く。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-diff" data-lang="diff">&lt;span style="display:flex;">&lt;span> &amp;#34;SomethingApiResponse&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ &amp;#34;x-implements&amp;#34;: &amp;#34;com.example.app.MyResponse&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span> &amp;#34;title&amp;#34;: &amp;#34;SomethingApiResponse&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;type&amp;#34;: &amp;#34;object&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;properties&amp;#34;: {
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-diff" data-lang="diff">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">-public class SomethingApiResponse {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+public class SomethingApiResponse implements com.example.app.MyResponse {
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>あまりにも意図していた機能をみつけて嬉しくてツィートしてしまった。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">openapi generator で生成するコードに任意の interface を指定するのはテンプレートをカスタマイズするしかないかなぁと思っていたら、最新の 6.0.0 でスキーマ定義に x-implements で指定できるようになっている。これはすごい。&lt;a href="https://t.co/bT0fQxSrGz">https://t.co/bT0fQxSrGz&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1541238905953226753?ref_src=twsrc%5Etfw">June 27, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item></channel></rss>