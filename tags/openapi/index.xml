<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>openapi on forest nook</title><link>/diary/tags/openapi/</link><description>Recent content in openapi on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Fri, 16 Dec 2022 11:18:04 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/openapi/index.xml" rel="self" type="application/rss+xml"/><item><title>openapi 勉強会</title><link>/diary/posts/2022/1216/</link><pubDate>Fri, 16 Dec 2022 11:18:04 +0900</pubDate><guid>/diary/posts/2022/1216/</guid><description>1時に寝て7時に起きた。昨日はたまたま遅くなって0時頃に帰ってきたが、最近は22時前後に帰ってくることが多い。疲労困憊。
nginx でつくるリバースプロキシ ちょっとググってみつかる記事を参考にして設定したらすぐにできた。私は tls 周りの設定に詳しくないのでこういうまとめ記事はとても助かる。インターネットって便利。
Docker with SSL and an nginx reverse proxy NGINX Docker with SSL Encryption (Self-signed) openapi 勉強会 昨日の続き。openapi についてチーム勉強会を開催した。wiki に次の目次で説明を書いてその内容を勉強会で話した。ちょうど1時間におさまって内容もわかりやすいものができたのではないかと自画自賛。毎週のチーム勉強会のネタとしてちょうどよい粒度だった。
code generator が fork した背景 スキーマ駆動開発 メリット デメリット OpenAPI スキーマからドキュメント生成 OpenAPI スキーマからコード生成 リファレンス 余談だけど、過去に働いていた会社の発表資料が slideshare から docswell というサービスに移管されてた。slideshare は広告が鬱陶しいサービスになってしまってひどいユーザー体験だからこれは適切な判断だと思う。
https://www.docswell.com/s/ydnjp/Z3YQV5-2019-11-21-120351</description><content>&lt;p>1時に寝て7時に起きた。昨日はたまたま遅くなって0時頃に帰ってきたが、最近は22時前後に帰ってくることが多い。疲労困憊。&lt;/p>
&lt;h2 id="nginx-でつくるリバースプロキシ">nginx でつくるリバースプロキシ&lt;/h2>
&lt;p>ちょっとググってみつかる記事を参考にして設定したらすぐにできた。私は tls 周りの設定に詳しくないのでこういうまとめ記事はとても助かる。インターネットって便利。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/dahlsailrunner/679e6dec5fd769f30bce90447ae80081">Docker with SSL and an nginx reverse proxy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mpolinowski.github.io/docs/DevOps/NGINX/2020-08-27--nginx-docker-ssl-certs-self-signed/2020-08-27/">NGINX Docker with SSL Encryption (Self-signed)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="openapi-勉強会">openapi 勉強会&lt;/h2>
&lt;p>昨日の続き。openapi についてチーム勉強会を開催した。wiki に次の目次で説明を書いてその内容を勉強会で話した。ちょうど1時間におさまって内容もわかりやすいものができたのではないかと自画自賛。毎週のチーム勉強会のネタとしてちょうどよい粒度だった。&lt;/p>
&lt;ul>
&lt;li>code generator が fork した背景&lt;/li>
&lt;li>スキーマ駆動開発
&lt;ul>
&lt;li>メリット&lt;/li>
&lt;li>デメリット&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>OpenAPI スキーマからドキュメント生成&lt;/li>
&lt;li>OpenAPI スキーマからコード生成&lt;/li>
&lt;li>リファレンス&lt;/li>
&lt;/ul>
&lt;p>余談だけど、過去に働いていた会社の発表資料が slideshare から docswell というサービスに移管されてた。slideshare は広告が鬱陶しいサービスになってしまってひどいユーザー体験だからこれは適切な判断だと思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.docswell.com/s/ydnjp/Z3YQV5-2019-11-21-120351">https://www.docswell.com/s/ydnjp/Z3YQV5-2019-11-21-120351&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>openapi 再び</title><link>/diary/posts/2022/1215/</link><pubDate>Thu, 15 Dec 2022 08:16:29 +0900</pubDate><guid>/diary/posts/2022/1215/</guid><description>1時に寝て何度か起きて7時に起きた。1-2時頃に吐き気がして苦しむ割に後半はなにもなかったかのように眠れることがある。
openapi-generator の調査 毎週の勉強会に向けて最新の openapi-generator を使って出力した go client のコードを読んだりしていた。openapi-generator を簡単に試すためのチュートリアルのようなものとして、過去にリポジトリに整理しておいた。このリポジトリを使うとコード生成とドキュメント生成の両方を試してスキーマがあることのメリットを体験できるようになっている。
https://github.com/kazamori/try-openapi-generator-cli chatgpt で遊ぶ 【おあそぶ会】GPT3と遊ぶ に参加した。gpt3 についてちょうさんが調べたメモにも目を通して参考になった。
20221215【おあそぶ会】GPT3と遊ぶ ちょうさんの gpt3 の説明を聞きながら chatgpt で葬送のフリーレンについてチャットしてた。今日の成果はこれかな。</description><content>&lt;p>1時に寝て何度か起きて7時に起きた。1-2時頃に吐き気がして苦しむ割に後半はなにもなかったかのように眠れることがある。&lt;/p>
&lt;h2 id="openapi-generator-の調査">openapi-generator の調査&lt;/h2>
&lt;p>毎週の勉強会に向けて最新の &lt;a href="https://github.com/OpenAPITools/openapi-generator">openapi-generator&lt;/a> を使って出力した go client のコードを読んだりしていた。openapi-generator を簡単に試すためのチュートリアルのようなものとして、過去にリポジトリに整理しておいた。このリポジトリを使うとコード生成とドキュメント生成の両方を試してスキーマがあることのメリットを体験できるようになっている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/try-openapi-generator-cli">https://github.com/kazamori/try-openapi-generator-cli&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="chatgpt-で遊ぶ">chatgpt で遊ぶ&lt;/h2>
&lt;p>&lt;a href="https://play2learn.connpass.com/event/268391/">【おあそぶ会】GPT3と遊ぶ&lt;/a> に参加した。gpt3 についてちょうさんが調べたメモにも目を通して参考になった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://peridot-balmoral-923.notion.site/20221215-GPT3-31a50d35e2b14c38a73693d1cf1d339a">20221215【おあそぶ会】GPT3と遊ぶ&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ちょうさんの gpt3 の説明を聞きながら chatgpt で葬送のフリーレンについてチャットしてた。今日の成果はこれかな。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/1215_chatgpt1.png"/>
&lt;/figure></content></item><item><title>openapi-ext-tools をまた使う日がきた</title><link>/diary/posts/2022/1210/</link><pubDate>Sat, 10 Dec 2022 12:03:13 +0900</pubDate><guid>/diary/posts/2022/1210/</guid><description>0時に寝て4時に起きて7時に起きた。わりとよく眠れた。
ストレッチ トレーナーさんと月曜日の日本対クロアチア戦の感想を話したりしていた。今日の開脚幅は開始前153cmで、ストレッチ後156cmだった。先週は疲弊と疲労で散々な数値になっていたものが復調してきつつある。今週も毎日8-22時はオフィスで缶詰め状態だった。たくさん座っている (同じ体勢でいる) 時間が増えると筋肉にはよくない。まだまだ右腰と右太もも周りの張りは強く復調にはもう少し時間がかかるようにみえる。一方で忙しさのピークを越したと思うので今週以降は少しペースダウンしながら体作りをしていく。いまお手伝いしている開発は12月にすべての集中力を費やしてもよいと考えている。残りは期間はメンバーに委譲するような体制になるとベストかもしれない。そのための体力づくりは重要。
openapi-ext-tools 再び github pages ならぬ gitlab pages がある。ふと web api のドキュメントを作るために openapi のスキーマを定義したら gitlab の ci/cd と連携できていいんじゃないかと思い付いた。スキーマがあればフロントエンドのクライアント生成や e2e テストコードの自動生成などに使えるかもしれないし。過去に作った openapi-ext-tools を oss にしておいたからいまも使える。oss 万歳。先のことはわからない。redoc を使ってちゃっちゃと実装した。
pages: only: changes: - schema/* stage: deploy image: alpine:latest before_script: - apk --no-cache add python3 nodejs npm - python --version - python -m ensurepip - pip3 --version - node --version - npm --version - npm install --global redoc-cli - redoc-cli --version - pip3 install openapi-ext-tools - pip3 freeze openapi-ext-tools | grep openapi script: - openapi-spec-cli --spec-path schema/openapi.</description><content>&lt;p>0時に寝て4時に起きて7時に起きた。わりとよく眠れた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>トレーナーさんと月曜日の日本対クロアチア戦の感想を話したりしていた。今日の開脚幅は開始前153cmで、ストレッチ後156cmだった。先週は疲弊と疲労で散々な数値になっていたものが復調してきつつある。今週も毎日8-22時はオフィスで缶詰め状態だった。たくさん座っている (同じ体勢でいる) 時間が増えると筋肉にはよくない。まだまだ右腰と右太もも周りの張りは強く復調にはもう少し時間がかかるようにみえる。一方で忙しさのピークを越したと思うので今週以降は少しペースダウンしながら体作りをしていく。いまお手伝いしている開発は12月にすべての集中力を費やしてもよいと考えている。残りは期間はメンバーに委譲するような体制になるとベストかもしれない。そのための体力づくりは重要。&lt;/p>
&lt;h2 id="openapi-ext-tools-再び">openapi-ext-tools 再び&lt;/h2>
&lt;p>github pages ならぬ &lt;a href="https://docs.gitlab.com/ee/user/project/pages/">gitlab pages&lt;/a> がある。ふと web api のドキュメントを作るために openapi のスキーマを定義したら gitlab の ci/cd と連携できていいんじゃないかと思い付いた。スキーマがあればフロントエンドのクライアント生成や e2e テストコードの自動生成などに使えるかもしれないし。過去に作った &lt;a href="https://pypi.org/project/openapi-ext-tools/">openapi-ext-tools&lt;/a> を oss にしておいたからいまも使える。oss 万歳。先のことはわからない。&lt;a href="https://github.com/Redocly/redoc">redoc&lt;/a> を使ってちゃっちゃと実装した。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">pages&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">only&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">changes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">schema/*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">stage&lt;/span>: &lt;span style="color:#ae81ff">deploy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">alpine:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">before_script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">apk --no-cache add python3 nodejs npm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">python --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">python -m ensurepip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">pip3 --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">node --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">npm --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">npm install --global redoc-cli&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">redoc-cli --version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">pip3 install openapi-ext-tools&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">pip3 freeze openapi-ext-tools | grep openapi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">openapi-spec-cli --spec-path schema/openapi.yml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - |+&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> redoc-cli bundle bundled_openapi.yaml \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --output index.html \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --options.expandResponses=all \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --options.requiredPropsFirst=true \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --options.jsonSampleExpandLevel=10 \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --options.hideLoading=true \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --options.pathInMiddlePanel=true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">mkdir -p public&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">mv index.html public/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">artifacts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">paths&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">public&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>久しぶりに触ったら openapi-ext-tools が依存ライブラリの変更で動かなくなっていたので直した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/openapi-ext-tools/issues/1">cannot import name &amp;lsquo;ValidationError&amp;rsquo; from &amp;lsquo;openapi_spec_validator.exceptions&amp;rsquo; #1&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>openapi generator の設定</title><link>/diary/posts/2022/0627/</link><pubDate>Mon, 27 Jun 2022 07:39:39 +0900</pubDate><guid>/diary/posts/2022/0627/</guid><description>3時に寝て6時半に起きた。昨日は夕方に昼寝したので夜は眠れなかった。
openapi generator の x-implements 機能 外部ベンダーの api client の wrapper を実装していて、api client が扱うリクエストやレスポンスを型 (インターフェース) で抽象化できるとよさそうと思って openapi generator の設定を調べていた。maven-plugin の設定と openapi-generator の設定の2つがあるので両方のドキュメントを確認しないといけない。
https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-maven-plugin https://openapi-generator.tech/docs/generators/java/ そんなに都合よくインターフェースを指定できるような仕組みがなければ、最悪は mustache テンプレートをカスタマイズするしかないかなぁとか考えていた。テンプレートを操作すると、今後の保守コストが上がってしまうのでそのメリット・デメリットを比較して考えないといけない。諦めかけていたときに so でこの issue をみつけた。
Feature x-implements is not supported #11636 ちょうどこの5月末にリリースされたばかりの 6.0.0 に x-implements と指定すれば、任意のインターフェースを implements できる機能が追加された。これはスキーマに対する設定なのでテンプレートをカスタマイズするよりずっと保守コストは小さくて済む。
例えば、openapi schema の json で設定すると、コード生成したときにそんな風にインターフェースが付く。
&amp;#34;SomethingApiResponse&amp;#34;: { + &amp;#34;x-implements&amp;#34;: &amp;#34;com.example.app.MyResponse&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;SomethingApiResponse&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;object&amp;#34;, &amp;#34;properties&amp;#34;: { -public class SomethingApiResponse { +public class SomethingApiResponse implements com.example.app.MyResponse { あまりにも意図していた機能をみつけて嬉しくてツィートしてしまった。</description><content>&lt;p>3時に寝て6時半に起きた。昨日は夕方に昼寝したので夜は眠れなかった。&lt;/p>
&lt;h2 id="openapi-generator-の-x-implements-機能">openapi generator の x-implements 機能&lt;/h2>
&lt;p>外部ベンダーの api client の wrapper を実装していて、api client が扱うリクエストやレスポンスを型 (インターフェース) で抽象化できるとよさそうと思って openapi generator の設定を調べていた。maven-plugin の設定と openapi-generator の設定の2つがあるので両方のドキュメントを確認しないといけない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-maven-plugin">https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-maven-plugin&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://openapi-generator.tech/docs/generators/java/">https://openapi-generator.tech/docs/generators/java/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>そんなに都合よくインターフェースを指定できるような仕組みがなければ、最悪は &lt;a href="https://mustache.github.io/">mustache&lt;/a> テンプレートをカスタマイズするしかないかなぁとか考えていた。テンプレートを操作すると、今後の保守コストが上がってしまうのでそのメリット・デメリットを比較して考えないといけない。諦めかけていたときに so でこの issue をみつけた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/OpenAPITools/openapi-generator/issues/11636">Feature x-implements is not supported #11636&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ちょうどこの5月末にリリースされたばかりの 6.0.0 に &lt;code>x-implements&lt;/code> と指定すれば、任意のインターフェースを implements できる機能が追加された。これはスキーマに対する設定なのでテンプレートをカスタマイズするよりずっと保守コストは小さくて済む。&lt;/p>
&lt;p>例えば、openapi schema の json で設定すると、コード生成したときにそんな風にインターフェースが付く。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-diff" data-lang="diff">&lt;span style="display:flex;">&lt;span> &amp;#34;SomethingApiResponse&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ &amp;#34;x-implements&amp;#34;: &amp;#34;com.example.app.MyResponse&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span> &amp;#34;title&amp;#34;: &amp;#34;SomethingApiResponse&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;type&amp;#34;: &amp;#34;object&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;properties&amp;#34;: {
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-diff" data-lang="diff">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">-public class SomethingApiResponse {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+public class SomethingApiResponse implements com.example.app.MyResponse {
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>あまりにも意図していた機能をみつけて嬉しくてツィートしてしまった。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">openapi generator で生成するコードに任意の interface を指定するのはテンプレートをカスタマイズするしかないかなぁと思っていたら、最新の 6.0.0 でスキーマ定義に x-implements で指定できるようになっている。これはすごい。&lt;a href="https://t.co/bT0fQxSrGz">https://t.co/bT0fQxSrGz&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1541238905953226753?ref_src=twsrc%5Etfw">June 27, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item></channel></rss>