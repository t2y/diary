<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on forest nook</title><link>/diary/tags/docker/</link><description>Recent content in docker on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Sun, 20 Feb 2022 09:48:18 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>2021年度の確定申告</title><link>/diary/posts/2022/0220/</link><pubDate>Sun, 20 Feb 2022 09:48:18 +0900</pubDate><guid>/diary/posts/2022/0220/</guid><description>0時に寝て6時に起きた。
確定申告 本当は9時から受け付けなんだけど、昨年早めに行ったら受け付けしてくれたので今年も8時半ぐらいから出掛けていった。家から徒歩5分のところに特設の申告会場があって、行ったらすでに100人ぐらいは並んでいた。整理券を配るために行列を誘導している係員に「書類は作成済みで提出だけです」と伝えると「どうぞ、こちらへ」と行列をショートカットして、書類の作成会場の横にある提出会場へ案内される。朝一なので誰も提出してなくてすぐに応対してくれた。書類チェックして提出完了。会場についてから提出するまでに5分。あわせて10分もあれば確定申告できる。電子申告してもよいのだけど、寄付金の領収書の電子化が面倒なのでまだ紙で申告している。寄付金の領収書が電子化されて添付できるような手軽さになったら電子申告してもよいかもしれない。
github container action の検証 jib という java アプリケーション向けの docker イメージをビルドするためのツールがある。お仕事で使い始めたので雰囲気を理解するために私もサンプルアプリケーションを jib-sample として作ってみた。簡単に設定して java アプリケーションを docker 化できるので感触はよさそう。基本的に java アプリケーションと docker は相性が悪くて、たぶん go で開発するような用途と比較するとサイズがめちゃくちゃでかい。それでも jib を使うと作成された docker イメージのサイズも自分でビルドして作るよりは小さくしてくれる。さすが google という感じ。
この jib-sample の docker イメージを使って github actions のカスタム container action を作ってみたのが gh-actions-container-sample になる。Creating a Docker container action のドキュメントには Dockerfile を使ったサンプルしか紹介されていないけど、docker イメージを直接参照して利用することもできる。
検証作業をしているときに jib-sample リポジトリの github packages が private 設定になっていることに気付かなくて少しはまった。リポジトリの visibility 設定と github packages の visibility 設定は連動していないのでそれぞれで別に管理しないといけない。
また jib で作った docker イメージはデフォルトでは manifest を作ってくれない。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="確定申告">確定申告&lt;/h2>
&lt;p>本当は9時から受け付けなんだけど、昨年早めに行ったら受け付けしてくれたので今年も8時半ぐらいから出掛けていった。家から徒歩5分のところに特設の申告会場があって、行ったらすでに100人ぐらいは並んでいた。整理券を配るために行列を誘導している係員に「書類は作成済みで提出だけです」と伝えると「どうぞ、こちらへ」と行列をショートカットして、書類の作成会場の横にある提出会場へ案内される。朝一なので誰も提出してなくてすぐに応対してくれた。書類チェックして提出完了。会場についてから提出するまでに5分。あわせて10分もあれば確定申告できる。電子申告してもよいのだけど、寄付金の領収書の電子化が面倒なのでまだ紙で申告している。寄付金の領収書が電子化されて添付できるような手軽さになったら電子申告してもよいかもしれない。&lt;/p>
&lt;h2 id="github-container-action-の検証">github container action の検証&lt;/h2>
&lt;p>&lt;a href="https://github.com/GoogleContainerTools/jib">jib&lt;/a> という java アプリケーション向けの docker イメージをビルドするためのツールがある。お仕事で使い始めたので雰囲気を理解するために私もサンプルアプリケーションを &lt;a href="https://github.com/t2y/jib-sample">jib-sample&lt;/a> として作ってみた。簡単に設定して java アプリケーションを docker 化できるので感触はよさそう。基本的に java アプリケーションと docker は相性が悪くて、たぶん go で開発するような用途と比較するとサイズがめちゃくちゃでかい。それでも jib を使うと作成された docker イメージのサイズも自分でビルドして作るよりは小さくしてくれる。さすが google という感じ。&lt;/p>
&lt;p>この jib-sample の docker イメージを使って github actions のカスタム container action を作ってみたのが &lt;a href="https://github.com/t2y/gh-actions-container-sample">gh-actions-container-sample&lt;/a> になる。&lt;a href="https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action">Creating a Docker container action&lt;/a> のドキュメントには Dockerfile を使ったサンプルしか紹介されていないけど、docker イメージを直接参照して利用することもできる。&lt;/p>
&lt;p>検証作業をしているときに jib-sample リポジトリの github packages が private 設定になっていることに気付かなくて少しはまった。リポジトリの visibility 設定と github packages の visibility 設定は連動していないのでそれぞれで別に管理しないといけない。&lt;/p>
&lt;p>また jib で作った docker イメージはデフォルトでは manifest を作ってくれない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker manifest inspect --verbose ghcr.io/t2y/jib-sample:latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>no such manifest: ghcr.io/t2y/jib-sample:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/GoogleContainerTools/jib/blob/master/docs/faq.md#how-do-i-specify-a-platform-in-the-manifest-list-or-oci-index-of-a-base-image">How do I specify a platform in the manifest list (or OCI index) of a base image?&lt;/a> のドキュメントによると、manifest に platform 情報を追加するのは incubating feature らしくて、なんか条件付きで設定すれば使えそうにもみえたんだけど、私がやってみた感じだとうまくいかなかった。また必要ならもう一度調べてみる。&lt;/p></content></item><item><title>docker の勉強</title><link>/diary/posts/2022/0219/</link><pubDate>Sat, 19 Feb 2022 12:56:33 +0900</pubDate><guid>/diary/posts/2022/0219/</guid><description>0時に寝て6時に起きた。
ストレッチ ここ1ヶ月ほどお仕事に集中しているのもあるけど、あまりストレッチに意識を割いていない。やるときは集中して注力するのだけど、飽きてくると怠ける性格的なところがある。とはいえ、やめずに続けているといいことがあると経験則からわかっているのでなるべく継続していきたい。今週も特別なことはなにもしていないのだけど、右足の股関節周りに張りがあってあまり調子がよくなかった。今日の開脚幅は開始前163cmで、ストレッチ後167cmで先週よりも数値が悪化している。良くなるときもあれば悪くなるときもある。毎週ストレッチを受けて計測しているとそういう気付きがあること自体、この機会は健康のために役立っているように考えている。
github packages で docker イメージを公開する docker が流行りだした頃に勤めていた会社の貸与端末が docker 禁止だったので私は docker に乗り遅れて、これまでも誰かが用意してくれたコンテナを使うだけでよかったため、最低限の docker コマンドや docker-compose の使い方しか知らなかった。ちょうどインフラの運用を見直す過程で docker コンテナの作成方法から見直すお仕事ができたのでこの機にいろいろ勉強する。いまどき当たり前なんだろうけど、docker の マルチステージビルド をやってみる。
最初に go のバイナリを選択したのは間違いだったのかもしれない。go のビルド環境を作るベースイメージの選択が難しくて、ビルドはできるけど、作成したバイナリが動かないという状況にはまった。ECSのタスク起動時に「standard_init_linux.go」関連のエラーが出た場合の対処方法 であるように、いろんな不具合がある。ベースイメージの選択やビルドに必要なライブラリがないとそういうエラーになるんだと気付くまでに時間がかかった。
最終的に次のような Dockerfile でマルチステージビルドができた。builder としてのベースイメージの選択によってやり方はいろいろ変わってくるように思える。
FROM golang:alpine as builder RUN apk add --no-cache git make gcc musl-dev WORKDIR /work COPY . . RUN go mod download RUN make build FROM alpine:latest WORKDIR / COPY --from=builder /work/bin/sql-executor . CMD [ &amp;#34;/sql-executor&amp;#34; ] Dockerfile ができたら Publishing Docker images を読みながら github actions で自動的に docker イメージを github packages に公開する設定をやってみた。リリースを作成したときに docker イメージをビルドして公開する workflow yml を作成した。ほとんどドキュメントのまま。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>ここ1ヶ月ほどお仕事に集中しているのもあるけど、あまりストレッチに意識を割いていない。やるときは集中して注力するのだけど、飽きてくると怠ける性格的なところがある。とはいえ、やめずに続けているといいことがあると経験則からわかっているのでなるべく継続していきたい。今週も特別なことはなにもしていないのだけど、右足の股関節周りに張りがあってあまり調子がよくなかった。今日の開脚幅は開始前163cmで、ストレッチ後167cmで先週よりも数値が悪化している。良くなるときもあれば悪くなるときもある。毎週ストレッチを受けて計測しているとそういう気付きがあること自体、この機会は健康のために役立っているように考えている。&lt;/p>
&lt;h2 id="github-packages-で-docker-イメージを公開する">github packages で docker イメージを公開する&lt;/h2>
&lt;p>docker が流行りだした頃に勤めていた会社の貸与端末が docker 禁止だったので私は docker に乗り遅れて、これまでも誰かが用意してくれたコンテナを使うだけでよかったため、最低限の docker コマンドや docker-compose の使い方しか知らなかった。ちょうどインフラの運用を見直す過程で docker コンテナの作成方法から見直すお仕事ができたのでこの機にいろいろ勉強する。いまどき当たり前なんだろうけど、docker の &lt;a href="https://matsuand.github.io/docs.docker.jp.onthefly/develop/develop-images/multistage-build/">マルチステージビルド&lt;/a> をやってみる。&lt;/p>
&lt;p>最初に go のバイナリを選択したのは間違いだったのかもしれない。go のビルド環境を作るベースイメージの選択が難しくて、ビルドはできるけど、作成したバイナリが動かないという状況にはまった。&lt;a href="https://dev.classmethod.jp/articles/how-to-fix-standard-init-linux-error/">ECSのタスク起動時に「standard_init_linux.go」関連のエラーが出た場合の対処方法&lt;/a> であるように、いろんな不具合がある。ベースイメージの選択やビルドに必要なライブラリがないとそういうエラーになるんだと気付くまでに時間がかかった。&lt;/p>
&lt;p>最終的に次のような &lt;a href="https://github.com/kazamori/go-sql-executor/blob/main/Dockerfile">Dockerfile&lt;/a> でマルチステージビルドができた。builder としてのベースイメージの選択によってやり方はいろいろ変わってくるように思える。&lt;/p>
&lt;pre tabindex="0">&lt;code>FROM golang:alpine as builder
RUN apk add --no-cache git make gcc musl-dev
WORKDIR /work
COPY . .
RUN go mod download
RUN make build
FROM alpine:latest
WORKDIR /
COPY --from=builder /work/bin/sql-executor .
CMD [ &amp;#34;/sql-executor&amp;#34; ]
&lt;/code>&lt;/pre>&lt;p>Dockerfile ができたら &lt;a href="https://docs.github.com/en/actions/publishing-packages/publishing-docker-images">Publishing Docker images&lt;/a> を読みながら github actions で自動的に docker イメージを github packages に公開する設定をやってみた。リリースを作成したときに docker イメージをビルドして公開する &lt;a href="https://github.com/kazamori/go-sql-executor/blob/main/.github/workflows/publish.yml">workflow yml&lt;/a> を作成した。ほとんどドキュメントのまま。&lt;/p>
&lt;p>github actions の実行結果。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/go-sql-executor/runs/5258037718?check_suite_focus=true">https://github.com/kazamori/go-sql-executor/runs/5258037718?check_suite_focus=true&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>github packages 上で公開された docker イメージ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/go-sql-executor/pkgs/container/go-sql-executor">https://github.com/kazamori/go-sql-executor/pkgs/container/go-sql-executor&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>リリースのタイミングじゃなくてコミットのタイミングでも docker イメージを生成できると思うけど、docker イメージのタグに相当するものをどう付けるかというところは工夫する必要がありそう。&lt;/p></content></item><item><title>mysql のデータ移行</title><link>/diary/posts/2022/0212/</link><pubDate>Sat, 12 Feb 2022 10:30:35 +0900</pubDate><guid>/diary/posts/2022/0212/</guid><description>23時に寝て2時前に起きて5時に起きて8時に起きた。あんまり眠れなくなってきた。
もくもく会 【三宮.dev】もくもく会 に参加した。もともとオフラインの予定だったけど、オミクロン株の流行でオンラインに変更された。
お仕事である開発環境の構築をしていて docker-compose を使って mysql の環境構築や共有の開発環境にある db2 に接続するために clpplus のインストール方法などを wiki にまとめてた。コンテナにある mysqldump や mysql コマンドを使ってこんな風にデータ移行もできた。
共有の開発環境からデータをエクスポート。
$ docker-compose exec -T mydb mysqldump -h $DB_HOST -C --set-gtid-purged=OFF --skip-triggers $DB &amp;gt; dump.sql ローカルの mysql にデータをインポート。
$ docker-compose exec -T mydb mysql -h localhost -u root -proot $DB &amp;lt; dump.sql コンテナにある mysqldump と mysql コマンドを使ってデータのインポートするには -T を指定すればいいみたい。そうしないと WARNING とかの文字列が sql ファイルに含まれてしまってインポートできない。https://t.co/JGeDNsWjhx
&amp;mdash; Tetsuya Morimoto (@t2y) February 12, 2022 ストレッチ いつもは11時からなんやけど、今日は17時40分からだった。カレンダーの予定を変更し忘れてて11時に行って間違えた。今週は2日間ぐらいストレッチしたかな。今日の開脚幅は開始前164cmで、ストレッチ後168cmだった。いつも時間帯が違うので数値も変わる。今日は右太ももの内転筋や内側やらがすごく張ってた。あまり調子はよくない。</description><content>&lt;p>23時に寝て2時前に起きて5時に起きて8時に起きた。あんまり眠れなくなってきた。&lt;/p>
&lt;h2 id="もくもく会">もくもく会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/235747/">【三宮.dev】もくもく会&lt;/a> に参加した。もともとオフラインの予定だったけど、オミクロン株の流行でオンラインに変更された。&lt;/p>
&lt;p>お仕事である開発環境の構築をしていて docker-compose を使って mysql の環境構築や共有の開発環境にある db2 に接続するために &lt;a href="https://www.ibm.com/docs/en/db2/10.5?topic=commands-command-line-processor-plus-clpplus">clpplus&lt;/a> のインストール方法などを wiki にまとめてた。コンテナにある mysqldump や mysql コマンドを使ってこんな風にデータ移行もできた。&lt;/p>
&lt;p>共有の開発環境からデータをエクスポート。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker-compose exec -T mydb mysqldump -h $DB_HOST -C --set-gtid-purged&lt;span style="color:#f92672">=&lt;/span>OFF --skip-triggers $DB &amp;gt; dump.sql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ローカルの mysql にデータをインポート。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker-compose exec -T mydb mysql -h localhost -u root -proot $DB &amp;lt; dump.sql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">コンテナにある mysqldump と mysql コマンドを使ってデータのインポートするには -T を指定すればいいみたい。そうしないと WARNING とかの文字列が sql ファイルに含まれてしまってインポートできない。&lt;a href="https://t.co/JGeDNsWjhx">https://t.co/JGeDNsWjhx&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1492391598612959234?ref_src=twsrc%5Etfw">February 12, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>いつもは11時からなんやけど、今日は17時40分からだった。カレンダーの予定を変更し忘れてて11時に行って間違えた。今週は2日間ぐらいストレッチしたかな。今日の開脚幅は開始前164cmで、ストレッチ後168cmだった。いつも時間帯が違うので数値も変わる。今日は右太ももの内転筋や内側やらがすごく張ってた。あまり調子はよくない。&lt;/p></content></item><item><title>docker の勉強</title><link>/diary/posts/2022/0211/</link><pubDate>Fri, 11 Feb 2022 08:43:24 +0900</pubDate><guid>/diary/posts/2022/0211/</guid><description>0時に寝て2時過ぎに起きて5時に起きて6時に起きた。珍しく3回ぐらい起きた。
docker のマルチステージビルド これまで docker を使った開発を主導してこなかったので私はあまり docker についての知識をもっていない。いま k8s クラスターで java アプリケーションの運用をしていて、リリース作業の改善には docker イメージのビルドも改善する必要性が迫られてきた。いくつかプラクティスの記事を読んでいると マルチステージビルドの利用 を推奨している記事が多い。マルチステージビルドをうまく活用することで、docker イメージサイズの削減と日々の ci やビルド時間の短縮の2つを図れるようにみえる。docker の仕組みを学ぶちょうどよい機会なので主導的な立場でこの改善に着手しようと考えている。
オフィス内覧 オフィスの引っ越し調査のために エリンサーブ に行ってきた。駅近でもなく市街でもなくちょっと辺鄙な海外沿いにあるせいか、他のレンタルオフィスと比べて全体的に広さに対する家賃は安く設定されている。案内をしてくれた代表の方が「狭い部屋で働かせたくない」といった想いを話されていたので、意図的に窮屈なスペースにならないように広めに設計されているらしい。
オープンスペースでそれぞれの席が別会社という作りは斬新な考えとも言えるし、お互いの信頼関係で成り立っているとも言える。例えば、パソコンのモニターや資料とか、近くを通ったらみえてしまうわけだし。そういったセキュリティも考慮して、一見さんのドロップインには対応していないという。利用者はお互いに面識のある一定の信頼関係を築ける人たちで構成されているらしい。なにか審査があるのかどうかわからないが、人間関係が苦手な人には向かないスペースにもみえる。私は1日のうちにテレビ会議を何度もやるのでオープンスペースだと顧客の情報を守る義務があるのと、そうじゃなくても周りにも迷惑がかかるので、1日のうちの何度も場所を変えてテレビ会議できる部屋に移動しないといけない。それがボトルネックだなと思えた。個室もいくつかみせてもらって、2人向けの窓のある個室があってよさそうにみえた。そこはテレビ会議しても問題ないとのこと。家賃も予算にあうものだった。
Dタイプ(3F)
月額利用料: 66,000円 Eタイプ(3F)
デスクは2つ 月額利用料: 76,000円 いまは他の会社が借りている状態だけど、空きが出たら教えてもらえるようにお願いして帰ってきた。</description><content>&lt;p>0時に寝て2時過ぎに起きて5時に起きて6時に起きた。珍しく3回ぐらい起きた。&lt;/p>
&lt;h2 id="docker-のマルチステージビルド">docker のマルチステージビルド&lt;/h2>
&lt;p>これまで docker を使った開発を主導してこなかったので私はあまり docker についての知識をもっていない。いま k8s クラスターで java アプリケーションの運用をしていて、リリース作業の改善には docker イメージのビルドも改善する必要性が迫られてきた。いくつかプラクティスの記事を読んでいると &lt;a href="https://matsuand.github.io/docs.docker.jp.onthefly/develop/develop-images/multistage-build/">マルチステージビルドの利用&lt;/a> を推奨している記事が多い。マルチステージビルドをうまく活用することで、docker イメージサイズの削減と日々の ci やビルド時間の短縮の2つを図れるようにみえる。docker の仕組みを学ぶちょうどよい機会なので主導的な立場でこの改善に着手しようと考えている。&lt;/p>
&lt;h2 id="オフィス内覧">オフィス内覧&lt;/h2>
&lt;p>オフィスの引っ越し調査のために &lt;a href="https://www.erinserve.com/">エリンサーブ&lt;/a> に行ってきた。駅近でもなく市街でもなくちょっと辺鄙な海外沿いにあるせいか、他のレンタルオフィスと比べて全体的に広さに対する家賃は安く設定されている。案内をしてくれた代表の方が「狭い部屋で働かせたくない」といった想いを話されていたので、意図的に窮屈なスペースにならないように広めに設計されているらしい。&lt;/p>
&lt;p>オープンスペースでそれぞれの席が別会社という作りは斬新な考えとも言えるし、お互いの信頼関係で成り立っているとも言える。例えば、パソコンのモニターや資料とか、近くを通ったらみえてしまうわけだし。そういったセキュリティも考慮して、一見さんのドロップインには対応していないという。利用者はお互いに面識のある一定の信頼関係を築ける人たちで構成されているらしい。なにか審査があるのかどうかわからないが、人間関係が苦手な人には向かないスペースにもみえる。私は1日のうちにテレビ会議を何度もやるのでオープンスペースだと顧客の情報を守る義務があるのと、そうじゃなくても周りにも迷惑がかかるので、1日のうちの何度も場所を変えてテレビ会議できる部屋に移動しないといけない。それがボトルネックだなと思えた。個室もいくつかみせてもらって、2人向けの窓のある個室があってよさそうにみえた。そこはテレビ会議しても問題ないとのこと。家賃も予算にあうものだった。&lt;/p>
&lt;p>Dタイプ(3F)&lt;/p>
&lt;ul>
&lt;li>月額利用料: 66,000円&lt;/li>
&lt;/ul>
&lt;p>Eタイプ(3F)&lt;/p>
&lt;ul>
&lt;li>デスクは2つ&lt;/li>
&lt;li>月額利用料: 76,000円&lt;/li>
&lt;/ul>
&lt;p>いまは他の会社が借りている状態だけど、空きが出たら教えてもらえるようにお願いして帰ってきた。&lt;/p></content></item></channel></rss>