<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on forest nook</title><link>/diary/tags/docker/</link><description>Recent content in docker on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Tue, 02 May 2023 19:02:31 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>飛び石のお仕事</title><link>/diary/posts/2023/0502/</link><pubDate>Tue, 02 May 2023 19:02:31 +0900</pubDate><guid>/diary/posts/2023/0502/</guid><description>0時に寝て何度か起きて7時に起きた。休んでもよかったんだけど、休む理由がないので飛び石でお仕事することにした。
docker エコシステムの調査 少し前に docker をライブラリとして使って運用ツールを作った 。その内容をテックブログに書こうと思って docker のソフトウェアスタックやアーキテクチャの背景を調べ直していた。もっとたくさんいろんな記事を読んだのだけど、次の記事とそこから辿れるものを読むとよいだろうと思う。
Docker社がエンタープライズ事業を譲渡した今、Dockerの父が思うこと The differences between Docker, containerd, CRI-O and runc Red Hat, Google Engineers Work on a Way for Kubernetes to Run Containers Without Docker コンテナに関して cri と oci という2つの標準化があることを学び、その実装として docker 社が使っているツールに関係があるのが次の3つになる。おもしろいことにすべて docker 社のリポジトリにはなく、oss として然るべき所管の organization にリポジトリがある。
https://github.com/moby/moby https://github.com/opencontainers/runc https://github.com/containerd/containerd すべて docker 社がオリジナルを作って、いまも moby は docker 社が主体となって開発を継続しているだろうけれど、コンテナの実行環境のプラットフォームは k8s に取って変わられ、cri のコンテナランタイムとしての containerd があれば moby は docker daemon や docker engine のためのツールでしかなくなっている。当初 docker と moby を分割したのは、docker を開発ツール、moby を infrastructure にするという判断の下、moby を k8s のようなプラットフォームにしたかったはずである。しかし、結果的にその標準化競争に破れ containerd があれば dockerd daemon は不要になったとも解釈できる。docker という名前はコンテナのエコシステムにおいて docker 社が提供するコマンドラインやプロダクトの総称としての名前でしかなくなってしまっていて、一世を風靡した docker というパッケージングシステムの開発元に同情してしまう感もある。いまの docker engine は docker daemon と containerd の2つの daemon を起動していて docker 社としては微妙なアーキテクチャになっているのではないかと推測する。とくに swarm なんか最早削除したいだろう。</description><content>&lt;p>0時に寝て何度か起きて7時に起きた。休んでもよかったんだけど、休む理由がないので飛び石でお仕事することにした。&lt;/p>
&lt;h2 id="docker-エコシステムの調査">docker エコシステムの調査&lt;/h2>
&lt;p>少し前に &lt;a href="/diary/diary/posts/2023/0327/">docker をライブラリとして使って運用ツールを作った&lt;/a> 。その内容をテックブログに書こうと思って docker のソフトウェアスタックやアーキテクチャの背景を調べ直していた。もっとたくさんいろんな記事を読んだのだけど、次の記事とそこから辿れるものを読むとよいだろうと思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.inductor.me/entry/2019/11/22/072353">Docker社がエンタープライズ事業を譲渡した今、Dockerの父が思うこと&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.tutorialworks.com/difference-docker-containerd-runc-crio-oci/">The differences between Docker, containerd, CRI-O and runc&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://thenewstack.io/oci-building-way-kubernetes-run-containers-without-docker/">Red Hat, Google Engineers Work on a Way for Kubernetes to Run Containers Without Docker&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>コンテナに関して cri と oci という2つの標準化があることを学び、その実装として docker 社が使っているツールに関係があるのが次の3つになる。おもしろいことにすべて docker 社のリポジトリにはなく、oss として然るべき所管の organization にリポジトリがある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/moby/moby">https://github.com/moby/moby&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/opencontainers/runc">https://github.com/opencontainers/runc&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/containerd/containerd">https://github.com/containerd/containerd&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>すべて docker 社がオリジナルを作って、いまも moby は docker 社が主体となって開発を継続しているだろうけれど、コンテナの実行環境のプラットフォームは k8s に取って変わられ、cri のコンテナランタイムとしての containerd があれば moby は docker daemon や docker engine のためのツールでしかなくなっている。当初 docker と moby を分割したのは、docker を開発ツール、moby を infrastructure にするという判断の下、moby を k8s のようなプラットフォームにしたかったはずである。しかし、結果的にその標準化競争に破れ containerd があれば dockerd daemon は不要になったとも解釈できる。docker という名前はコンテナのエコシステムにおいて docker 社が提供するコマンドラインやプロダクトの総称としての名前でしかなくなってしまっていて、一世を風靡した docker というパッケージングシステムの開発元に同情してしまう感もある。いまの docker engine は docker daemon と containerd の2つの daemon を起動していて docker 社としては微妙なアーキテクチャになっているのではないかと推測する。とくに swarm なんか最早削除したいだろう。&lt;/p>
&lt;p>こういった docker を取り巻くエコシステムやツールの背景を説明するだけでも1つの記事になりそうなことが1日調べていてわかった。&lt;/p>
&lt;h2 id="しくじり先生">しくじり先生&lt;/h2>
&lt;p>たまたま &lt;a href="https://www.tv-asahi.co.jp/shikujiri/backnumber2/0099/">竹原慎二先生「５０歳過ぎてもケンカを売られ続けてバリしんどい先生」&lt;/a> をみたらおもしろかった。ガチンコをリアルタイムでみていた世代なので竹原氏には好感をもっている。少し前に &lt;a href="https://www.nhk.or.jp/kenko/atc_731.html">【あの人の健康法】元プロボクサー・竹原慎二の膀胱（ぼうこう）がんとの闘い&lt;/a> のような、闘病生活の記事もみかけていた。病気は克服してがんばっているといるようにみえる。よかった。もう51歳なのか。&lt;/p>
&lt;p>この番組の中で若い頃に上京してボクシングジムへ通ったときに根性の定義が変わったという話しが出てくる。&lt;/p>
&lt;blockquote>
&lt;p>殴られても耐えることを根性だと思っていた。そのときに初めて殴られようが何しようが毎日辛い練習を重ねるのが根性だと気付かされた。&lt;/p>
&lt;/blockquote>
&lt;p>地元で最強だったのが、ボクシングジムのヤンキーでもない先輩にまったく太刀打ちできなかったという。そのとき1番違うのはスタミナだったらしく、竹原氏は1分で息がきれるのに相手は軽く流すといった様相だった。この先輩にボコボコにされた経験を経てそれから心を改めて真面目になったと言う。その後ボクシングと真剣に向き合い、1995年に日本人初のミドル級世界チャンピオンになる。おそらく番組の主旨的に若ものへのメッセージとして「強さ」について話されていた。&lt;/p>
&lt;blockquote>
&lt;p>「ケンカに強い」だけが「強さ」じゃない、「強さ」の意味を履き違えずに生きよう。大人になると、いろんな強さを知る。大切な人のために仕事をどれだけ頑張れるか、辛い状況でもじっと耐えることができるか。そういう強さもある。&lt;/p>
&lt;/blockquote>
&lt;p>私は誰かのために仕事をがんばったことないし、辛い状況を耐えるみたいなこともほぼやってなくて、嫌になったら仕事を辞めてて、こういう言葉にあうと自分を恥じてしまう。その後、喧嘩自慢で youtube 動画を検索していたらまさにそういうのがあった。竹原氏が「勝てるはずねぇだろ、お前らこんな茶番なことすんなよ」とぼやいていた。先の番組の中でも触れていたが、本当に真剣勝負したいと思って来ているのではなく、記念に戦ってみたいという不純な動機でやってくる人が多いらしい。たしかにそれは相手するのがしんどそう。&lt;/p>
&lt;div class="video-container">
&lt;iframe src="https://www.youtube.com/embed/O2rjpxf9W7U" allowfullscreen title="懲りない喧嘩自慢に終止符を打ってみた">&lt;/iframe>
&lt;/div></content></item><item><title>docker image のマルチプラットフォーム対応</title><link>/diary/posts/2023/0427/</link><pubDate>Thu, 27 Apr 2023 08:23:18 +0900</pubDate><guid>/diary/posts/2023/0427/</guid><description>22時に寝て0時に起きてやや吐き気で苦しんで4時に起きて7時に起きた。夜遅くに食べてないのに調子悪かった。
docker image のマルチプラットフォーム対応 やぎさんが docker buildx でマルチプラットフォームのイメージを作成する の記事を書いてて buildx プラグインがあることを知った。ちょうどいまお仕事でコンテナベースのプロダクトを開発している。まずはオンプレミス向けが対象なので amd64 でビルドしていた。今後はクラウド向けにも提供していくので arm64 ビルドもいずれ追加しないといけないと考えていた。ちょうどリリースを終えて調査時間の余裕があるのでこの機会に buildx について調べてみることにした。
Docker Engine 23.0 release notes をみると次のように書いてある。
Set Buildx and BuildKit as the default builder on Linux. moby/moby#43992 Alias docker build to docker buildx build. docker/cli#3314 The legacy builder can still be used by explicitly setting DOCKER_BUILDKIT=0. There are differences in how BuildKit and the legacy builder handle multi-stage builds. For more information, see Multi-stage builds.</description><content>&lt;p>22時に寝て0時に起きてやや吐き気で苦しんで4時に起きて7時に起きた。夜遅くに食べてないのに調子悪かった。&lt;/p>
&lt;h2 id="docker-image-のマルチプラットフォーム対応">docker image のマルチプラットフォーム対応&lt;/h2>
&lt;p>やぎさんが &lt;a href="https://blog.ayakumo.net/entry/2023/04/21/004712">docker buildx でマルチプラットフォームのイメージを作成する&lt;/a> の記事を書いてて &lt;a href="https://github.com/docker/buildx">buildx&lt;/a> プラグインがあることを知った。ちょうどいまお仕事でコンテナベースのプロダクトを開発している。まずはオンプレミス向けが対象なので amd64 でビルドしていた。今後はクラウド向けにも提供していくので arm64 ビルドもいずれ追加しないといけないと考えていた。ちょうどリリースを終えて調査時間の余裕があるのでこの機会に buildx について調べてみることにした。&lt;/p>
&lt;p>&lt;a href="https://docs.docker.com/engine/release-notes/23.0/">Docker Engine 23.0 release notes&lt;/a> をみると次のように書いてある。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>Set Buildx and BuildKit as the default builder on Linux. moby/moby#43992
&lt;ul>
&lt;li>Alias docker build to docker buildx build. docker/cli#3314&lt;/li>
&lt;li>The legacy builder can still be used by explicitly setting DOCKER_BUILDKIT=0.&lt;/li>
&lt;li>There are differences in how BuildKit and the legacy builder handle multi-stage builds. For more information, see Multi-stage builds.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>23 からデフォルトのビルダーとして buildx が使われるようになっているらしい。&lt;a href="https://github.com/docker/buildx#building-multi-platform-images">Building multi-platform images&lt;/a> を一通り読んで試してみた。&lt;/p>
&lt;p>buildx ではカスタムビルダーを定義して複数プラットフォーム向けの docker image を一緒にビルドできる。このとき個々のビルド環境を &lt;em>builder instance&lt;/em> と呼び、ビルド環境を抽象した概念として扱われている。マルチプラットフォーム対応の文脈で言えば amd64 や arm64 のビルド環境をそれぞれに作る。例えば amd64 のマシン上で arm64 のビルド環境を作るときは &lt;a href="https://www.qemu.org/">qemu&lt;/a> を使ってエミュレーションしたビルド環境を用意したりもできる。builder instance はカスタムビルダーで制御する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker buildx create --name mybuilder --platform linux/amd64,linux/arm64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker buildx ls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME/NODE DRIVER/ENDPOINT STATUS BUILDKIT PLATFORMS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mybuilder docker-container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mybuilder0 unix:///var/run/docker.sock inactive linux/amd64*, linux/arm64*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここで作ったカスタムビルダーの driver は、デフォルトビルダーの &lt;code>docker&lt;/code> ではなく、&lt;code>docker-container&lt;/code> になる。おそらく builder instance の実体であるビルド環境がコンテナ上に構築されるのだと思う。これらの builder instance を使ってビルドされる。カスタムビルダーをデフォルトで使うには次のように実行する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker buildx use mybuilder
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このカスタムビルダーを使って docker image をビルドする。カスタムビルダー側にプラットフォームの設定をもっているので &lt;code>--platform&lt;/code> は指定しなくてもよいけど、明示した方がわかりやすいだろう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker buildx build --platform linux/amd64,linux/arm64 -t myimage:latest .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ビルドの処理は進んでいたが、正常終了しなかったので途中でやめた。なにか設定の漏れがあるかもしれないが、だいたいの雰囲気はつかめた。&lt;/p>
&lt;p>ここでいま gitlab ci/cd 環境では &lt;a href="https://github.com/GoogleContainerTools/kaniko">kaniko&lt;/a> というツールを使って docker image をビルドしている。そもそも kaniko と buildx の違いもわからなくなって README を読み返すと次のようなことが書いてあった。&lt;/p>
&lt;blockquote>
&lt;p>kaniko は Docker デーモンに依存せず、Dockerfile 内の各コマンドを完全にユーザースペースで実行します。これにより、標準的な Kubernetes クラスタのように、Docker デーモンを簡単かつ安全に実行できない環境でもコンテナイメージを構築することができます。&lt;/p>
&lt;/blockquote>
&lt;p>ローカルで検証しているとしばしば忘れてしまうが、docker cli を使うには docker daemon を起動しておかないといけない。ci/cd におけるビルド環境がそもそも dokcer で動いていたりすると docker daemon を使えるかどうか (dind: docker in docker) はセキュリティ上の大きな違いになってくる。ci/cd 環境によっては docker daemon が使えないという状況はありえる。そういった環境でも docker image をビルドできるのが kaniko のメリットと言える。&lt;/p>
&lt;p>kaniko はマルチプラットフォーム対応なビルドができるのかどうか？issue でもそういった質問がいくつかみつかる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/GoogleContainerTools/kaniko/issues/786">how to build multi-arch image using kaniko #786&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/GoogleContainerTools/kaniko/issues/1746">Multi architecture build with only Kaniko #1746&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>結論から言うと、kaniko そのものはマルチプラットフォーム対応のビルド機能をもっていない。アーキテクチャごとのビルド環境があればそれぞれビルドするだけになる。しかし、マルチプラットフォーム対応の docker image というのは &lt;a href="https://docs.docker.com/engine/reference/commandline/manifest/">manifest list&lt;/a> というのを作ってコンテナレジストリに push すればよいという仕組みらしい。この manifest を作るためのツールとして &lt;a href="https://github.com/estesp/manifest-tool">manifest-tool&lt;/a> というのがある。このツールと組み合わせれば、kaniko でもマルチプラットフォーム対応の docker image をコンテナレジストリに登録できる。実際に試したわけではないので想像で書くが次のような手順だと推測する。&lt;/p>
&lt;ol>
&lt;li>kaniko でそれぞれのプラットフォームの docker image をビルドする
&lt;ol>
&lt;li>amd64 向けにビルドする =&amp;gt; latest-amd64&lt;/li>
&lt;li>arm64 向けにビルドする =&amp;gt; latest-arm64&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>ビルドされた複数プラットフォームの docker image に対して manifest-tool でコンテナレジストリに push する
&lt;ol>
&lt;li>&lt;code>latest-&lt;/code> prefix のタグをもつ docker image の manifest list を作る&lt;/li>
&lt;li>manifest list を使ってコンテナレジストリへ push する&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>ci/cd 環境でこういった手順のパイプライン処理やジョブを定義して実行すれば kaniko でもマルチプラットフォーム対応な docker image を push できると思う。&lt;/p></content></item><item><title>リリース前テストを完了</title><link>/diary/posts/2023/0419/</link><pubDate>Wed, 19 Apr 2023 08:54:28 +0900</pubDate><guid>/diary/posts/2023/0419/</guid><description>0時に寝て6時に起きた。昨日は晩ご飯の買いものに行こうと早めに帰ろうとしたら雨降りでそのまま帰って家でだらだらしてた。
リリース前テスト 来週の火曜日がリリース日になる。4月から3週間ほどかけて行ってきたテストケースを完了した。致命的な不具合もなく、テストの過程でみつかった不具合も修正済みで予定していたテストが完了となった。ここ2週間ほど、テストして issue が登録されると、私が細心の注意を払って内容を精査して、即日で fix して検証したりしていた。それもあってテストでみつけた不具合はほとんど fix した。あとはリリースのためのパッケージングやドキュメント作成、インフラ作業などへ移っていく。アプリケーションの振る舞いに影響を与えるものではないので私の中では肩の荷がおりてプレッシャーも軽減されて少し安心できた。よかった。よかった。
docker hub のプライベートリポジトリ 先日 docker hub の rate limit に引っかかったこともあり、docker hub の有償アカウントを使うことになった。team プランは5人以上必要らしいので pro アカウントで契約してもらった。有償アカウントなら無制限のプライベートリポジトリを提供できる。docker hub でリポジトリを作成していて、いまさらながらにリポジトリ名にスラッシュを含められないことに気付いた。基本的にはハイフン区切りでスラッシュの代替する名前になっていた。これまで自分で docker image を扱ってこなかったので今更ながらに気付いた。
社内のコンテナレジストリから docker hub のプライベートリポジトリへの promotion のスクリプトを書いていた。bash の連想配列を使ってコンテナレジストリのマッピングを定義してあとは pull/push するコードを書くだけ。
declare -A repos repos[&amp;#34;internal-my-repo1&amp;#34;]=&amp;#34;external/my-repo1&amp;#34; repos[&amp;#34;internal-my-repo2&amp;#34;]=&amp;#34;external/my-repo2&amp;#34; for internal in &amp;#34;${!repos[@]}&amp;#34;; do external=&amp;#34;${repos[$key]}&amp;#34; echo &amp;#34;pull from: $internal&amp;#34; echo &amp;#34;push to : $external&amp;#34; done コワーキングのオンラインイベント 月例のカフーツさんのオンラインイベントに参加した。先月の所感はここ 。promotion のスクリプトを書いていたら20分ほど遅れてから参加。今日の話題は chatgpt だった。少し前に 雑談会 したので歴史や原理的な仕組みなど、調べたことを参加者と共有しながら今後の社会の変化などを議論していた。私も関心のある内容なのでおもしろかった。いまや私は日々の開発業務にも chatgpt を使って調べものをしたりサンプルコードを書いてもらうのが普通になりつつある。そのうち ide と連携してテストコードの叩き台なども書かせるようにしてみたい。</description><content>&lt;p>0時に寝て6時に起きた。昨日は晩ご飯の買いものに行こうと早めに帰ろうとしたら雨降りでそのまま帰って家でだらだらしてた。&lt;/p>
&lt;h2 id="リリース前テスト">リリース前テスト&lt;/h2>
&lt;p>来週の火曜日がリリース日になる。4月から3週間ほどかけて行ってきたテストケースを完了した。致命的な不具合もなく、テストの過程でみつかった不具合も修正済みで予定していたテストが完了となった。ここ2週間ほど、テストして issue が登録されると、私が細心の注意を払って内容を精査して、即日で fix して検証したりしていた。それもあってテストでみつけた不具合はほとんど fix した。あとはリリースのためのパッケージングやドキュメント作成、インフラ作業などへ移っていく。アプリケーションの振る舞いに影響を与えるものではないので私の中では肩の荷がおりてプレッシャーも軽減されて少し安心できた。よかった。よかった。&lt;/p>
&lt;h2 id="docker-hub-のプライベートリポジトリ">docker hub のプライベートリポジトリ&lt;/h2>
&lt;p>先日 &lt;a href="/diary/diary/posts/2023/0407/#docker-hub-の-pull-制限">docker hub の rate limit&lt;/a> に引っかかったこともあり、docker hub の有償アカウントを使うことになった。team プランは5人以上必要らしいので pro アカウントで契約してもらった。有償アカウントなら無制限のプライベートリポジトリを提供できる。docker hub でリポジトリを作成していて、いまさらながらにリポジトリ名にスラッシュを含められないことに気付いた。基本的にはハイフン区切りでスラッシュの代替する名前になっていた。これまで自分で docker image を扱ってこなかったので今更ながらに気付いた。&lt;/p>
&lt;p>社内のコンテナレジストリから docker hub のプライベートリポジトリへの promotion のスクリプトを書いていた。bash の連想配列を使ってコンテナレジストリのマッピングを定義してあとは pull/push するコードを書くだけ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>declare -A repos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>repos&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;internal-my-repo1&amp;#34;&lt;/span>&lt;span style="color:#f92672">]=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;external/my-repo1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>repos&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;internal-my-repo2&amp;#34;&lt;/span>&lt;span style="color:#f92672">]=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;external/my-repo2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> internal in &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>!repos[@]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>; &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> external&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>repos[$key]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;pull from: &lt;/span>$internal&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;push to : &lt;/span>$external&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="コワーキングのオンラインイベント">コワーキングのオンラインイベント&lt;/h2>
&lt;p>月例のカフーツさんのオンラインイベントに参加した。&lt;a href="/diary/diary/posts/2023/0322/#コワーキングのオンラインイベント">先月の所感はここ&lt;/a> 。promotion のスクリプトを書いていたら20分ほど遅れてから参加。今日の話題は chatgpt だった。少し前に &lt;a href="/diary/diary/posts/2023/0331/#chatgpt-勉強会">雑談会&lt;/a> したので歴史や原理的な仕組みなど、調べたことを参加者と共有しながら今後の社会の変化などを議論していた。私も関心のある内容なのでおもしろかった。いまや私は日々の開発業務にも chatgpt を使って調べものをしたりサンプルコードを書いてもらうのが普通になりつつある。そのうち ide と連携してテストコードの叩き台なども書かせるようにしてみたい。&lt;/p>
&lt;p>いとうさんは chatgpt をみて、人間は働く意欲がなくなるのではないかといった懸念を表明されていた。いまのところ、ドメイン知識をもっている人がより効率よく働けるようになるツールでしかないという私の認識だが、あと3年ぐらいしたら人間を遥かに超えていって、chatgpt の出力をそのまま業務に応用する日も来るかもしれない。llm というのは次にくるもっともらしい単語を膨大な学習データから統計的に選択しているだけで、実際には内容を理解していないし、人間のように創造的な行為もできない。大雑把に言えば、インターネットの空気を読んで発言すれば人間っぽいというのはすごいことだし、便利で役に立つし、働き方も変わっていくだろうけれど、その延長上で変わる世の中が、私の人生における行動に影響を与えるほどではないと考えている。そういった話をする過程であんちぽさんの言う「価値観を育てる」という文脈が頭の中に残っていて、llm ぐらいでは揺らぎそうにはない気がしている。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">40代で大した強みもなくて不安みたいなのは共感はするけど、一方で、何歳であっても、他人との比較で生きている限り、一生不安は消えない。どんな年代であっても、自分の正しいと信じることをすればいい。もしそれがないのなら、問題の本質は年齢ではなく、価値観を育てやれてないことの方である。&lt;/p>&amp;mdash; あんちぽ🌕 (@kentaro) &lt;a href="https://twitter.com/kentaro/status/1647770907581239299?ref_src=twsrc%5Etfw">April 17, 2023&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>ただ it 業界以外にもこんなに話題が拡散しているプロダクトはそうそうないので世の中をどんどん変革していくのだろうというのは、異業種の人たちと話していても実感できた。&lt;/p></content></item><item><title>一日中リファクタリング</title><link>/diary/posts/2023/0407/</link><pubDate>Fri, 07 Apr 2023 13:16:56 +0900</pubDate><guid>/diary/posts/2023/0407/</guid><description>0時に寝て7時に起きた。昨日は夜にホテルで作業しようと思いながらテレビをみているうちに寝落ちしてた。朝から夜までずっとリファクタリングのためにコードを書いたり、コンテナ環境の設定を変更したりしていた。
mongodb のコネクションプール MongoDB Drivers の Connection Example に次のようなことが書いてある。
Reuse Your Client
We recommend that you reuse your client across sessions and operations. You can use the same Client instance to perform multiple tasks, instead of creating a new one each time. The Client type is safe for concurrent use by multiple goroutines. To learn more about how connection pools work in the driver, see the FAQ page.
mongodb drivers の client は goroutine safe なので再利用することを推奨している。内部的にはコネクションプールをもっていて mongodb とのコネクションを再利用できる。具体的にはライブラリ内部に次のようなコードがみつかる。context にセッション情報があればそれを使い、なければクライアントの sessionPool (コネクションプール) を使ってセッションを取得して mongodb にアクセスする関数の終わりで終了処理を行う。</description><content>&lt;p>0時に寝て7時に起きた。昨日は夜にホテルで作業しようと思いながらテレビをみているうちに寝落ちしてた。朝から夜までずっとリファクタリングのためにコードを書いたり、コンテナ環境の設定を変更したりしていた。&lt;/p>
&lt;h2 id="mongodb-のコネクションプール">mongodb のコネクションプール&lt;/h2>
&lt;p>MongoDB Drivers の &lt;a href="https://www.mongodb.com/docs/drivers/go/current/fundamentals/connection/#connection-example">Connection Example&lt;/a> に次のようなことが書いてある。&lt;/p>
&lt;blockquote>
&lt;p>Reuse Your Client&lt;/p>
&lt;p>We recommend that you reuse your client across sessions and operations. You can use the same Client instance to perform multiple tasks, instead of creating a new one each time. The Client type is safe for concurrent use by multiple goroutines. To learn more about how connection pools work in the driver, see the &lt;a href="https://www.mongodb.com/docs/drivers/go/current/faq/#std-label-golang-faq-connection-pool">FAQ&lt;/a> page.&lt;/p>
&lt;/blockquote>
&lt;p>mongodb drivers の client は goroutine safe なので再利用することを推奨している。内部的にはコネクションプールをもっていて mongodb とのコネクションを再利用できる。具体的にはライブラリ内部に次のようなコードがみつかる。context にセッション情報があればそれを使い、なければクライアントの sessionPool (コネクションプール) を使ってセッションを取得して mongodb にアクセスする関数の終わりで終了処理を行う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sess&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sessionFromContext&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sess&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">coll&lt;/span>.&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">sessionPool&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sess&lt;/span> = &lt;span style="color:#a6e22e">session&lt;/span>.&lt;span style="color:#a6e22e">NewImplicitClientSession&lt;/span>(&lt;span style="color:#a6e22e">coll&lt;/span>.&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">sessionPool&lt;/span>, &lt;span style="color:#a6e22e">coll&lt;/span>.&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">sess&lt;/span>.&lt;span style="color:#a6e22e">EndSession&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>既存のコードはコネクションプールのことを考慮していないコードになっていたので大きくリファクタリングして効率化した。&lt;/p>
&lt;h2 id="docker-hub-の-pull-制限">docker hub の pull 制限&lt;/h2>
&lt;p>午前中はリファクタリング、午後は docker compose 環境の変更と再構築、午後はバグ修正と一日中 docker image を取得する作業をしていた。gitlab ci/cd が動くとテストと docker image 生成の処理が動くのでその過程で関連する docker image を pull する。夕方になって gitlab ci/cd で初めて次のエラーが発生することに気付いた。前にお手伝いしていた職場でもそういう現象が起こると聞いて、docker login するコードを github actions のスクリプトに追加していたので、rate limit がかかることは知っていた。&lt;/p>
&lt;pre tabindex="0">&lt;code>You have reached your pull rate limit. You may increase the limit by authenticating and upgrading: https://www.docker.com/increase-rate-limits.
&lt;/code>&lt;/pre>&lt;p>&lt;a href="https://www.docker.com/increase-rate-limits/">Understanding Your Docker Hub Rate Limit&lt;/a> によると、6時間あたり匿名アクセスは100、
free ユーザーは200を上限としているらしい。匿名アクセスは ip アドレスでカウントしているのだろうから場合によっては会社内からのアクセスをすべてカウントされたりするかもしれない。課金するとこの上限が24時間あたり5000になる。docker hub のプライベートリポジトリを利用する意図で team プランの課金を検討していたが、docker hub のアクセス制限を緩和するために課金する必要があるかもしれない。&lt;/p></content></item><item><title>ローカルにコンテナレジストリを構築する</title><link>/diary/posts/2023/0403/</link><pubDate>Mon, 03 Apr 2023 11:34:18 +0900</pubDate><guid>/diary/posts/2023/0403/</guid><description>出張する日は寝ないで資料を作ったりバグ修正したりして始発の新幹線の中で寝てた。寝てなくて疲れているせいか、新幹線で寝るのに慣れたのか、わりと2-3時間ぐっすり新幹線で眠れるようになってきた。普通にベッドで寝ても3時間ぐらいしか眠れないので睡眠時間はあまり変わらない。
docker registry の構築 先日の調査 の続き。Deploy a registry server に書いてあることを実際にローカルで検証した。
tls の自己証明書の作成。subjectAltName という設定をするように書いてある。
$ openssl req -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key -addext &amp;#34;subjectAltName = DNS:myhost.mydomain.example.com&amp;#34; -x509 -days 365 -out certs/domain.crt basic 認証のための htpasswd の設定。htpasswd とか懐かしいなと思いながら実行した。
$ docker run --entrypoint htpasswd httpd:2 -Bbn user1 secret1 &amp;gt;&amp;gt; dot_htpasswd $ docker run --entrypoint htpasswd httpd:2 -Bbn user2 secret2 &amp;gt;&amp;gt; dot_htpasswd docker 社が提供する oss な docker registry サーバーを使って起動する。
$ mkdir /mnt/registry # docker image を永続化する場所 $ sudo docker run -d \ --restart=always \ --name registry \ -v &amp;#34;$(pwd)&amp;#34;/auth:/auth \ -e &amp;#34;REGISTRY_AUTH=htpasswd&amp;#34; \ -e &amp;#34;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&amp;#34; \ -e &amp;#34;REGISTRY_AUTH_HTPASSWD_PATH=/auth/dot_htpasswd&amp;#34; \ -v &amp;#34;$(pwd)&amp;#34;/certs:/certs \ -e &amp;#34;REGISTRY_HTTP_ADDR=0.</description><content>&lt;p>出張する日は寝ないで資料を作ったりバグ修正したりして始発の新幹線の中で寝てた。寝てなくて疲れているせいか、新幹線で寝るのに慣れたのか、わりと2-3時間ぐっすり新幹線で眠れるようになってきた。普通にベッドで寝ても3時間ぐらいしか眠れないので睡眠時間はあまり変わらない。&lt;/p>
&lt;h2 id="docker-registry-の構築">docker registry の構築&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0330/#外部向けコンテナレジストリ">先日の調査&lt;/a> の続き。&lt;a href="https://docs.docker.com/registry/deploying/">Deploy a registry server&lt;/a> に書いてあることを実際にローカルで検証した。&lt;/p>
&lt;p>tls の自己証明書の作成。subjectAltName という設定をするように書いてある。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ openssl req -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key -addext &lt;span style="color:#e6db74">&amp;#34;subjectAltName = DNS:myhost.mydomain.example.com&amp;#34;&lt;/span> -x509 -days &lt;span style="color:#ae81ff">365&lt;/span> -out certs/domain.crt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>basic 認証のための htpasswd の設定。htpasswd とか懐かしいなと思いながら実行した。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bsah" data-lang="bsah">$ docker run --entrypoint htpasswd httpd:2 -Bbn user1 secret1 &amp;gt;&amp;gt; dot_htpasswd
$ docker run --entrypoint htpasswd httpd:2 -Bbn user2 secret2 &amp;gt;&amp;gt; dot_htpasswd
&lt;/code>&lt;/pre>&lt;p>docker 社が提供する oss な docker registry サーバーを使って起動する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ mkdir /mnt/registry &lt;span style="color:#75715e"># docker image を永続化する場所&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo docker run -d &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --restart&lt;span style="color:#f92672">=&lt;/span>always &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --name registry &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>pwd&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>/auth:/auth &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;REGISTRY_AUTH=htpasswd&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;REGISTRY_AUTH_HTPASSWD_PATH=/auth/dot_htpasswd&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>pwd&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>/certs:/certs &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;REGISTRY_HTTP_ADDR=0.0.0.0:443&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -e &lt;span style="color:#e6db74">&amp;#34;REGISTRY_HTTP_TLS_KEY=/certs/domain.key&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -p 8443:443 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /mnt/registry:/var/lib/registry &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> registry:2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで basic 認証付きで https で通信できる docker registry サーバーができた。&lt;/p>
&lt;p>外部のマシンから dokcer login しようとすると次のようなエラーが発生する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker login myhost.mydomain.example.com:8443
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Username: user2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Password: ***
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Error response from daemon: Get &lt;span style="color:#e6db74">&amp;#34;https://myhost.mydomain.example.com:8443/v2/&amp;#34;&lt;/span>: x509: certificate signed by unknown authority
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://docs.docker.com/registry/insecure/">Test an insecure registry&lt;/a> によると、自己証明書を使って外部からアクセスできるようにするためには docker client 側にさっき作った domain.crt をコピーする必要がある。&lt;/p>
&lt;p>linux だとこんな設定。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cp domain.crt /etc/docker/certs.d/myhost.mydomain.example.com:8443/ca.crt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Docker Desktop for Mac を使っている場合はこんな感じ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-zsh" data-lang="zsh">&lt;span style="display:flex;">&lt;span>&amp;gt; security add-trusted-cert -d -r trustRoot -k ~/Library/Keychains/login.keychain path/to/certs/domain.crt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで外部からも docker login して任意の docker image を push/pull できるようになる。docker registry サーバーは Let’s Encrypt をサポートしているそうなので &lt;a href="https://letsencrypt.org/how-it-works/">How It Works&lt;/a> を参照して設定すればよいと書いてあった。&lt;/p>
&lt;h2 id="mdbook-の初期設定">mdbook の初期設定&lt;/h2>
&lt;p>mdbook は新しい rust のバージョンだとビルドできなかったりするので rustup を使ってローカルに rustc をインストールするのがよいかもしれない。プラグインとしては &lt;a href="https://github.com/badboy/mdbook-mermaid">mdbook-mermaid&lt;/a> を使う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ curl --proto &lt;span style="color:#e6db74">&amp;#39;=https&amp;#39;&lt;/span> --tlsv1.2 -sSf https://sh.rustup.rs | sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ~/.cargo/bin/rustc --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cargo install mdbook mdbook-mermaid
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>mdbook-mermaid の設定も簡単でドキュメントルート配下に mermaid の js ファイルを配置すると動いた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ vi book.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>preprocessor.mermaid&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>command &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;mdbook-mermaid&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>output.html&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>additional-js &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;mermaid.min.js&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;mermaid-init.js&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>コンテナレジストリをプライベートに運用する</title><link>/diary/posts/2023/0330/</link><pubDate>Thu, 30 Mar 2023 07:58:30 +0900</pubDate><guid>/diary/posts/2023/0330/</guid><description>0時に寝て7時に起きた。晩ご飯を食べきれなくて調子悪いと思っていたら夜も吐き気と胃酸で気分が悪くてあまり眠れなかった。
外部向けコンテナレジストリ いまお仕事で作っているアプリケーションは docker image としてパッケージングしている。エンドユーザーがこのアプリケーションを使うためには docker pull できるためにインターネットを経由してアクセスできる必要がある。普段はイントラネットのコンテナレジストリに push/pull して運用しているのを、外部のエンドユーザー向けにアクセスできるコンテナレジストリ (リポジトリ) を構築しないといけない。パブリックなリポジトリとして提供するのであれば、docker hub や GitHub Container registry などを無料で利用できる。しかし、プライベートなリポジトリで運用しようとするとその選択肢は狭まってしまう。おそらく他社のサービスを使うのであれば、実際の運用を考慮するといくらか費用がかかるだろう。
仮に docker image が使うストレージを5GiB、インターネットへの outbound なデータ転送を30GiB/月で見積もってみた。docker hub だと利用量によって課金されないのでその後に利用増加が前提であればよさそうにみえる。
github (従量課金)
team プラン 開発者1人: $20.25/month, $243/year aws (従量課金)
region=tokyo: $3.92/month, $47.04/year docker hub (容量無制限)
team プラン 開発者1人: $11/month, $132/year 別の選択肢として自前でコンテナレジストリを運用するという方法もある。docker registry サーバーは oss として公開されていて docker image の push/pull をするだけのサーバーならすぐに構築できる。ベーシック認証に近い v1 の認証でよければ htpasswd を使ってアカウント管理できる。
Deploy a registry server ドメインと tls の証明書と外部からアクセスできるサーバーがあれば、自前で運用するのもそう大変ではないと思う。実際にこれらの運用コストと他サービスの利用料金とを比べて選択することになるだろう。</description><content>&lt;p>0時に寝て7時に起きた。晩ご飯を食べきれなくて調子悪いと思っていたら夜も吐き気と胃酸で気分が悪くてあまり眠れなかった。&lt;/p>
&lt;h2 id="外部向けコンテナレジストリ">外部向けコンテナレジストリ&lt;/h2>
&lt;p>いまお仕事で作っているアプリケーションは docker image としてパッケージングしている。エンドユーザーがこのアプリケーションを使うためには docker pull できるためにインターネットを経由してアクセスできる必要がある。普段はイントラネットのコンテナレジストリに push/pull して運用しているのを、外部のエンドユーザー向けにアクセスできるコンテナレジストリ (リポジトリ) を構築しないといけない。パブリックなリポジトリとして提供するのであれば、&lt;a href="https://hub.docker.com/">docker hub&lt;/a> や &lt;a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry">GitHub Container registry&lt;/a> などを無料で利用できる。しかし、プライベートなリポジトリで運用しようとするとその選択肢は狭まってしまう。おそらく他社のサービスを使うのであれば、実際の運用を考慮するといくらか費用がかかるだろう。&lt;/p>
&lt;p>仮に docker image が使うストレージを5GiB、インターネットへの outbound なデータ転送を30GiB/月で見積もってみた。docker hub だと利用量によって課金されないのでその後に利用増加が前提であればよさそうにみえる。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>github (従量課金)&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/pricing">team プラン&lt;/a>&lt;/li>
&lt;li>開発者1人: $20.25/month, $243/year&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>aws (従量課金)&lt;/p>
&lt;ul>
&lt;li>region=tokyo: $3.92/month, $47.04/year&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>docker hub (容量無制限)&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.docker.com/pricing/">team プラン&lt;/a>&lt;/li>
&lt;li>開発者1人: $11/month, $132/year&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>別の選択肢として自前でコンテナレジストリを運用するという方法もある。docker registry サーバーは oss として公開されていて docker image の push/pull をするだけのサーバーならすぐに構築できる。ベーシック認証に近い v1 の認証でよければ &lt;a href="https://httpd.apache.org/docs/current/programs/htpasswd.html">htpasswd&lt;/a> を使ってアカウント管理できる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/registry/deploying/">Deploy a registry server&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ドメインと tls の証明書と外部からアクセスできるサーバーがあれば、自前で運用するのもそう大変ではないと思う。実際にこれらの運用コストと他サービスの利用料金とを比べて選択することになるだろう。&lt;/p></content></item><item><title>docker/compose のモジュールの使い方がわかってきた</title><link>/diary/posts/2023/0327/</link><pubDate>Mon, 27 Mar 2023 08:09:28 +0900</pubDate><guid>/diary/posts/2023/0327/</guid><description>0時に寝て7時に起きた。前日はバテてだらだらしていたので寝過ぎた。
案ずるよりもツールできた 先週末に docker/compose 関連のライブラリ調査 を終えて実際のツール作りをしていた。本当は日曜日に作ってしまおうと思いつつ休んでしまった。なぜか今日はメンバーが全員お休みでチームで私しか働いていなかった。年度末で有休消化しているのかな？問い合わせ対応やメンバーのサポートが不要だったので1日中、自分の開発に集中できた。そして開発に集中できた結果、一通りツールの機能の開発を終えられた。火曜日までには仕上げたいと思っていたのでぎりぎり間に合った。
最終的に testcontainers-go の compose モジュールを使うのは断念して compose cli のみ go 標準の os/exec パッケージを使ってプロセスを fork するようにした。また docker image をコンテナレジストリから取得するときに認証が必要な場合、最初の docker login すると credentials store にパスワード (またはトークン) 情報が記録される。設定情報は $HOME/.docker/config.json からも確認できる。この仕組みを使ってコンテナレジストリへのログインを自動化できる。私の環境では macbook に docker desktop をインストールしているが、普通に使っていると次のように credentials が保存されてその内容を確認できる。
$ docker-credential-desktop list | jq . { &amp;#34;https://index.docker.io/v1/&amp;#34;: &amp;#34;t2y1979&amp;#34;, &amp;#34;https://index.docker.io/v1/access-token&amp;#34;: &amp;#34;t2y1979&amp;#34;, &amp;#34;https://index.docker.io/v1/refresh-token&amp;#34;: &amp;#34;t2y1979&amp;#34; } $ echo &amp;#34;https://index.docker.io/v1/access-token&amp;#34; | docker-credential-desktop get {&amp;#34;ServerURL&amp;#34;:&amp;#34;https://index.docker.io/v1/access-token&amp;#34;,&amp;#34;Username&amp;#34;:&amp;#34;t2y1979&amp;#34;,&amp;#34;Secret&amp;#34;:&amp;#34;***&amp;#34;} これと同じことを docker のライブラリで行うには次のようにする。取得したい docker image の uri を参照すればコンテナレジストリがわかる。そこからこの cli でやっているようなことを順番にやっていけばよい。これらのユーティリティは3つのリポジトリで管理されていて、この雰囲気をみただけでもこのモジュール分割が本当に適切なんやろか？とか思ったりもする。</description><content>&lt;p>0時に寝て7時に起きた。前日はバテてだらだらしていたので寝過ぎた。&lt;/p>
&lt;h2 id="案ずるよりもツールできた">案ずるよりもツールできた&lt;/h2>
&lt;p>先週末に &lt;a href="/diary/diary/posts/2023/0324/">docker/compose 関連のライブラリ調査&lt;/a> を終えて実際のツール作りをしていた。本当は日曜日に作ってしまおうと思いつつ休んでしまった。なぜか今日はメンバーが全員お休みでチームで私しか働いていなかった。年度末で有休消化しているのかな？問い合わせ対応やメンバーのサポートが不要だったので1日中、自分の開発に集中できた。そして開発に集中できた結果、一通りツールの機能の開発を終えられた。火曜日までには仕上げたいと思っていたのでぎりぎり間に合った。&lt;/p>
&lt;p>最終的に testcontainers-go の compose モジュールを使うのは断念して compose cli のみ go 標準の &lt;a href="https://pkg.go.dev/os/exec">os/exec&lt;/a> パッケージを使ってプロセスを fork するようにした。また docker image をコンテナレジストリから取得するときに認証が必要な場合、最初の &lt;a href="https://docs.docker.com/engine/reference/commandline/login/">docker login&lt;/a> すると credentials store にパスワード (またはトークン) 情報が記録される。設定情報は &lt;code>$HOME/.docker/config.json&lt;/code> からも確認できる。この仕組みを使ってコンテナレジストリへのログインを自動化できる。私の環境では macbook に docker desktop をインストールしているが、普通に使っていると次のように credentials が保存されてその内容を確認できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker-credential-desktop list | jq .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;https://index.docker.io/v1/&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;t2y1979&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;https://index.docker.io/v1/access-token&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;t2y1979&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;https://index.docker.io/v1/refresh-token&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;t2y1979&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#e6db74">&amp;#34;https://index.docker.io/v1/access-token&amp;#34;&lt;/span> | docker-credential-desktop get
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ServerURL&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;https://index.docker.io/v1/access-token&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;Username&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;t2y1979&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;Secret&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;***&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これと同じことを docker のライブラリで行うには次のようにする。取得したい docker image の uri を参照すればコンテナレジストリがわかる。そこからこの cli でやっているようなことを順番にやっていけばよい。これらのユーティリティは3つのリポジトリで管理されていて、この雰囲気をみただけでもこのモジュール分割が本当に適切なんやろか？とか思ったりもする。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/distribution/distribution">https://github.com/distribution/distribution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/docker/cli">https://github.com/docker/cli&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/moby/moby">https://github.com/moby/moby&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">getRegistryAuthFromImage&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">imageURI&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) (&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ref&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reference&lt;/span>.&lt;span style="color:#a6e22e">ParseNormalizedNamed&lt;/span>(&lt;span style="color:#a6e22e">imageURI&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to parse image uri: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">repo&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">registry&lt;/span>.&lt;span style="color:#a6e22e">ParseRepositoryInfo&lt;/span>(&lt;span style="color:#a6e22e">ref&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to parse repository: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dcli&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">command&lt;/span>.&lt;span style="color:#a6e22e">NewDockerCli&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to create docker cli: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">auth&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">command&lt;/span>.&lt;span style="color:#a6e22e">ResolveAuthConfig&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">dcli&lt;/span>, &lt;span style="color:#a6e22e">repo&lt;/span>.&lt;span style="color:#a6e22e">Index&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">encoded&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">command&lt;/span>.&lt;span style="color:#a6e22e">EncodeAuthToBase64&lt;/span>(&lt;span style="color:#a6e22e">auth&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to encode auth: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">encoded&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>コンテナの運用ツールを作る</title><link>/diary/posts/2023/0324/</link><pubDate>Fri, 24 Mar 2023 13:31:48 +0900</pubDate><guid>/diary/posts/2023/0324/</guid><description>1時に寝て明け方に起きて7時に起きた。あまり眠れてない雰囲気がある。
docker/compose の運用 いま作っているアプリケーションは docker compose で構成している。マージ単位で gitlab ci/cd から docker image をビルドしていて、テスト環境のデプロイスクリプトで最新の docker image を取得してコンテナを再作成するようにしている。デプロイスクリプトは docker cli と docker compose cli の2つを組み合わせてシェルスクリプトで実装しているが、複数のアプリケーションやミドルウェアがあるのでそれらを統合的に扱うことはできないし、さまざまな状況を想定して動くようにもなっていない。がんばれば doccker/compose cli と jq とシェルスクリプトで細かい要件を実装することもできるけど、それをお客さんの本番環境においても使うには一定の cli 操作に慣れが必要な上、docker/compose の知識やスキルも要求してしまう。少なくとも頻繁にある運用作業として docker image の更新やコンテナの再作成が想定される。ローリングアップデートまでは実装しないけど、アプリケーションの要件にあわせた docker image の更新とコンテナの再作成 (アプリケーションの再起動) ぐらいはまとめてやってしまってよいと思う。
github.com/docker/docker は github.com/moby/moby にリダイレクトされる。docker は開発ツール、moby はインフラやライブラリという住み分けでそれぞれに関心のあることに注力するようにモジュール構成を分離している。それが2019年に行われていまもおそらくまだ途上だと思う。あと docker のモジュール群は go modules に対応していない。大きなプロジェクトが移行するのが大変なのは理解できるけれど、依存解決のような複雑なところを放置するのはまったく賛成できない。そこが不健全だと依存ライブラリの整理やモジュール分割がうまく進まない気がする。docker の client は https://github.com/moby/moby/tree/master/client に定義されていて、readme のサンプルコードにあるようにすぐに使えるようになっている。一方で compose の spec は github.com/compose-spec/compose-go で定義されていて、github.com/docker/compose はまだライブラリとして使いやすいようにはなっていない。仕様と実装が混在していて動いている状態。そういう issue もあげられている。
Using compose as library #9602 testcontainers-go というアプリケーションが compose をライブラリとして使う実装をしている。このコードをみれば compose をどう使えばよいのかはわかる。</description><content>&lt;p>1時に寝て明け方に起きて7時に起きた。あまり眠れてない雰囲気がある。&lt;/p>
&lt;h2 id="dockercompose-の運用">docker/compose の運用&lt;/h2>
&lt;p>いま作っているアプリケーションは &lt;a href="https://docs.docker.com/compose/">docker compose&lt;/a> で構成している。マージ単位で gitlab ci/cd から docker image をビルドしていて、テスト環境のデプロイスクリプトで最新の docker image を取得してコンテナを再作成するようにしている。デプロイスクリプトは docker cli と docker compose cli の2つを組み合わせてシェルスクリプトで実装しているが、複数のアプリケーションやミドルウェアがあるのでそれらを統合的に扱うことはできないし、さまざまな状況を想定して動くようにもなっていない。がんばれば doccker/compose cli と jq とシェルスクリプトで細かい要件を実装することもできるけど、それをお客さんの本番環境においても使うには一定の cli 操作に慣れが必要な上、docker/compose の知識やスキルも要求してしまう。少なくとも頻繁にある運用作業として docker image の更新やコンテナの再作成が想定される。ローリングアップデートまでは実装しないけど、アプリケーションの要件にあわせた docker image の更新とコンテナの再作成 (アプリケーションの再起動) ぐらいはまとめてやってしまってよいと思う。&lt;/p>
&lt;p>github.com/docker/docker は &lt;a href="https://github.com/moby/moby">github.com/moby/moby&lt;/a> にリダイレクトされる。docker は開発ツール、moby はインフラやライブラリという住み分けでそれぞれに関心のあることに注力するようにモジュール構成を分離している。それが2019年に行われていまもおそらくまだ途上だと思う。あと docker のモジュール群は go modules に対応していない。大きなプロジェクトが移行するのが大変なのは理解できるけれど、依存解決のような複雑なところを放置するのはまったく賛成できない。そこが不健全だと依存ライブラリの整理やモジュール分割がうまく進まない気がする。docker の client は &lt;a href="https://github.com/moby/moby/tree/master/client">https://github.com/moby/moby/tree/master/client&lt;/a> に定義されていて、readme のサンプルコードにあるようにすぐに使えるようになっている。一方で compose の spec は &lt;a href="https://github.com/compose-spec/compose-go">github.com/compose-spec/compose-go&lt;/a> で定義されていて、&lt;a href="https://github.com/docker/compose">github.com/docker/compose&lt;/a> はまだライブラリとして使いやすいようにはなっていない。仕様と実装が混在していて動いている状態。そういう issue もあげられている。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/docker/compose/issues/9602">Using compose as library #9602&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>testcontainers-go というアプリケーションが compose をライブラリとして使う実装をしている。このコードをみれば compose をどう使えばよいのかはわかる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://golang.testcontainers.org/features/docker_compose/">Using Docker Compose&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>自分で compose を実装してもよいけれど、compose の service を扱うための project やオプションの設定が煩雑なことも伺える。仕様と実装が混在しているというのはそこら変の整理ができていないようにみえるからだ。testcontainers-go も自前の client を用意して使いやすいようにしているのでそれを再利用した方が運用ツールを作るのは簡単になる。testcontainers-go の compose client 経由で compose の up/down を制御する。その他のコンテナの操作は docker client を直接使って実装する。この組み合わせで自分たちのアプリケーション向けの運用ツールを作ろうと思う。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">コンテナを操作する運用ツールを作るために docker をライブラリとして使ってツールを作っている。関連するところの docker のソースを読んでいて、感覚的にあまり洗練されていない印象をうける。依存解決も意味不明な所感。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1639233150357471233?ref_src=twsrc%5Etfw">March 24, 2023&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item><item><title>rocky linux も悪くない</title><link>/diary/posts/2023/0301/</link><pubDate>Wed, 01 Mar 2023 20:25:27 +0900</pubDate><guid>/diary/posts/2023/0301/</guid><description>2時に寝て7時に起きた。夜うまく眠れなくて夜更かしした。3月になってしまったか。2月の記憶がほとんどない。
rocky linux をベースイメージとして使う コンテナを作るときのデフォルトの os は、私の中では alpine だが、依存ライブラリの制約があって、いま作っている docker image は rockylinux をベースイメージに使う。rockylinux を docker pull した感覚は速いのでそんな大きなイメージでもない。minimal だと40数 MiB 程度のサイズ。すでに成果物として rpm パッケージがあり、その rpm が依存解決できないといけないため、rhel ベースの os をベースイメージにしないといけない。rpm パッケージに systemd の起動スクリプトなども入っているのでそのまま使えばいいかとも思ったのだけど普通には systemd は動かない。rockylinux のドキュメントにも systemd はこうやったら動くよと書いてあるものの、実際に起動してみるとエラーになる。細かくは追いかけていないけれど、cgroup v2 で未解決な問題があるらしく、cgroup v2 を使うカーネルでは systemd が動かないらしい。
Unable to run systemd in docker with ro /sys/fs/cgroup after systemd 248 host upgrade #42275 コンテナを動かすプラットフォームがハイパーバイザーも兼ねるので systemd を動かす必要性はないけれど、サードパーティの起動スクリプトを自分たちで保守するのも嫌だなという印象はあるのでもしかしたら悩ましい問題なのかもしれない。</description><content>&lt;p>2時に寝て7時に起きた。夜うまく眠れなくて夜更かしした。3月になってしまったか。2月の記憶がほとんどない。&lt;/p>
&lt;h2 id="rocky-linux-をベースイメージとして使う">rocky linux をベースイメージとして使う&lt;/h2>
&lt;p>コンテナを作るときのデフォルトの os は、私の中では &lt;a href="https://hub.docker.com/_/alpine">alpine&lt;/a> だが、依存ライブラリの制約があって、いま作っている docker image は &lt;a href="https://hub.docker.com/r/rockylinux/rockylinux">rockylinux&lt;/a> をベースイメージに使う。rockylinux を docker pull した感覚は速いのでそんな大きなイメージでもない。minimal だと40数 MiB 程度のサイズ。すでに成果物として rpm パッケージがあり、その rpm が依存解決できないといけないため、rhel ベースの os をベースイメージにしないといけない。rpm パッケージに systemd の起動スクリプトなども入っているのでそのまま使えばいいかとも思ったのだけど普通には systemd は動かない。rockylinux のドキュメントにも systemd はこうやったら動くよと書いてあるものの、実際に起動してみるとエラーになる。細かくは追いかけていないけれど、cgroup v2 で未解決な問題があるらしく、cgroup v2 を使うカーネルでは systemd が動かないらしい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/moby/moby/issues/42275">Unable to run systemd in docker with ro /sys/fs/cgroup after systemd 248 host upgrade #42275&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>コンテナを動かすプラットフォームがハイパーバイザーも兼ねるので systemd を動かす必要性はないけれど、サードパーティの起動スクリプトを自分たちで保守するのも嫌だなという印象はあるのでもしかしたら悩ましい問題なのかもしれない。&lt;/p></content></item><item><title>思い立ったらドキュメントを公開</title><link>/diary/posts/2023/0130/</link><pubDate>Mon, 30 Jan 2023 13:02:58 +0900</pubDate><guid>/diary/posts/2023/0130/</guid><description>23時に寝て2時頃に少し吐いて起きた。夜遅めに日本酒飲んでいい気分で寝たものの、もう夜に食べたらダメな体になりつつある。4時ぐらいまで起きててそれから寝て7時に起きた。
echo の静的ファイルの扱い web api のドキュメントは openapi スキーマを使って生成 している。本当はこのドキュメントを gitlab pages で公開させたいのだけど、まだそのインフラ構築ができていなくて先送りになっている。いつもローカルで gitlab ci/cd がビルドしたドキュメントをみていたのだけど、ある機能開発をするときにローカルで web api ドキュメントみるの飽きたなと思って、web api サーバーに同梱してしまえと思い立った。テスト環境の web api サーバーは常に動いているのだから、そこに web api のドキュメントが同梱されていて、なんの不都合があろうか？ (いや、なにもない) 。
次のドキュメントに echo で静的ファイルを扱う方法が書いてある。
Static Files ミドルウェアで実装されているようで簡単に静的ファイルを返せる。指定したパスのディレクトリ配下を扱えるのが Static で、指定したパスのファイルを扱うのが File になる。web api ドキュメントのようなものならキャッシュしてもいいなとは思ったものの、次の issue によると v4 ではミドルウェアで自前実装しないといけないらしい。v5 ではその仕組みが echo の機能として入るかもしれない。
TTL (Cache-Control header in response) for static files #1902 その後、gitlab ci/cd で web api サーバーのビルド後、openapi.yml からドキュメント生成をして、任意の static ディレクトリに配置するように設定した。docker のマルチステージビルドを使うと簡単にできる。バックエンドやっていて、サーバーとインフラの両方に手を入れて機能を作っていくときの、うまくできると利便性と達成感の両方を得られるのが楽しい。web api サーバーがドキュメントを提供することは、要件に含まれるわけでも、誰かに指示されたわけでもない。私が勝手にローカルでドキュメントみるの飽きたと思って、勝手に作って、勝手に動くようにしただけ。こういう開発の遊びのゆとりや権限をチームのメンバーにも与えられるようにしていきたい。開発が楽しくて悪いことはなにもないと思うんよね。</description><content>&lt;p>23時に寝て2時頃に少し吐いて起きた。夜遅めに日本酒飲んでいい気分で寝たものの、もう夜に食べたらダメな体になりつつある。4時ぐらいまで起きててそれから寝て7時に起きた。&lt;/p>
&lt;h2 id="echo-の静的ファイルの扱い">echo の静的ファイルの扱い&lt;/h2>
&lt;p>web api のドキュメントは &lt;a href="/diary/diary/posts/2022/1216/#openapi-勉強会">openapi スキーマを使って生成&lt;/a> している。本当はこのドキュメントを gitlab pages で公開させたいのだけど、まだそのインフラ構築ができていなくて先送りになっている。いつもローカルで gitlab ci/cd がビルドしたドキュメントをみていたのだけど、ある機能開発をするときにローカルで web api ドキュメントみるの飽きたなと思って、web api サーバーに同梱してしまえと思い立った。テスト環境の web api サーバーは常に動いているのだから、そこに web api のドキュメントが同梱されていて、なんの不都合があろうか？ (いや、なにもない) 。&lt;/p>
&lt;p>次のドキュメントに echo で静的ファイルを扱う方法が書いてある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://echo.labstack.com/guide/static-files/">Static Files&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ミドルウェアで実装されているようで簡単に静的ファイルを返せる。指定したパスのディレクトリ配下を扱えるのが &lt;code>Static&lt;/code> で、指定したパスのファイルを扱うのが &lt;code>File&lt;/code> になる。web api ドキュメントのようなものならキャッシュしてもいいなとは思ったものの、次の issue によると v4 ではミドルウェアで自前実装しないといけないらしい。v5 ではその仕組みが echo の機能として入るかもしれない。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/labstack/echo/issues/1902">TTL (Cache-Control header in response) for static files #1902&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>その後、gitlab ci/cd で web api サーバーのビルド後、openapi.yml からドキュメント生成をして、任意の static ディレクトリに配置するように設定した。docker のマルチステージビルドを使うと簡単にできる。バックエンドやっていて、サーバーとインフラの両方に手を入れて機能を作っていくときの、うまくできると利便性と達成感の両方を得られるのが楽しい。web api サーバーがドキュメントを提供することは、要件に含まれるわけでも、誰かに指示されたわけでもない。私が勝手にローカルでドキュメントみるの飽きたと思って、勝手に作って、勝手に動くようにしただけ。こういう開発の遊びのゆとりや権限をチームのメンバーにも与えられるようにしていきたい。開発が楽しくて悪いことはなにもないと思うんよね。&lt;/p></content></item><item><title>dind をやってみた</title><link>/diary/posts/2022/1219/</link><pubDate>Mon, 19 Dec 2022 11:28:33 +0900</pubDate><guid>/diary/posts/2022/1219/</guid><description>3時に寝て7時半に起きた。最後なのでワールドカップの決勝戦をみてた。接戦で試合もおもしろかったしよかったと思う。
gitlab ci/cd で docker in docker ミドルウェアを伴う結合テストは dockertest というツールを使って docker でミドルウェアを起動して実行している。デフォルトで作成した gitlab runner で docker を使おうとすると失敗する。これは gitlab runner が ci/cd ジョブを docker で動かすため docker in docker (これを dind と呼ぶらしい) のための設定が必要になる。大雑把に言えば gitlab runner にそのための権限を設定する必要がある。gitlab の次のドキュメントに詳細が書いてある。
Use Docker-in-Docker gitlab runner に権限を設定したら次のような job が動けば docker in docker は成功と言える。
hello-dind: stage: test image: docker:20.10.21 variables: DOCKER_HOST: tcp://docker:2375 DOCKER_TLS_CERTDIR: &amp;#34;&amp;#34; services: - docker:20.10.21-dind allow_failure: true before_script: - docker info script: - docker run hello-world あとになって気付いたことだけど、dockertest の README にも Running dockertest in Gitlab CI としていくつか tips が紹介されている。dockertest で作成したリソースからホスト名とポート番号を取得するには次のようなユーティリティを使う必要がある。</description><content>&lt;p>3時に寝て7時半に起きた。最後なのでワールドカップの決勝戦をみてた。接戦で試合もおもしろかったしよかったと思う。&lt;/p>
&lt;h2 id="gitlab-cicd-で-docker-in-docker">gitlab ci/cd で docker in docker&lt;/h2>
&lt;p>ミドルウェアを伴う結合テストは &lt;a href="https://github.com/ory/dockertest">dockertest&lt;/a> というツールを使って docker でミドルウェアを起動して実行している。デフォルトで作成した gitlab runner で docker を使おうとすると失敗する。これは gitlab runner が ci/cd ジョブを docker で動かすため docker in docker (これを &lt;em>dind&lt;/em> と呼ぶらしい) のための設定が必要になる。大雑把に言えば gitlab runner にそのための権限を設定する必要がある。gitlab の次のドキュメントに詳細が書いてある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker">Use Docker-in-Docker&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>gitlab runner に権限を設定したら次のような job が動けば docker in docker は成功と言える。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">hello-dind&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">stage&lt;/span>: &lt;span style="color:#ae81ff">test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">docker:20.10.21&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">variables&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">DOCKER_HOST&lt;/span>: &lt;span style="color:#ae81ff">tcp://docker:2375&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">DOCKER_TLS_CERTDIR&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">docker:20.10.21-dind&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">allow_failure&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">before_script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">docker info&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">docker run hello-world&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>あとになって気付いたことだけど、dockertest の README にも &lt;a href="https://github.com/ory/dockertest#running-dockertest-in-gitlab-ci">Running dockertest in Gitlab CI&lt;/a> としていくつか tips が紹介されている。dockertest で作成したリソースからホスト名とポート番号を取得するには次のようなユーティリティを使う必要がある。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">getHostPort&lt;/span>(&lt;span style="color:#a6e22e">resource&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">dockertest&lt;/span>.&lt;span style="color:#a6e22e">Resource&lt;/span>, &lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dockerURL&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;DOCKER_HOST&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">dockerURL&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">resource&lt;/span>.&lt;span style="color:#a6e22e">GetHostPort&lt;/span>(&lt;span style="color:#a6e22e">id&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">u&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">Parse&lt;/span>(&lt;span style="color:#a6e22e">dockerURL&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">Hostname&lt;/span>() &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">resource&lt;/span>.&lt;span style="color:#a6e22e">GetPort&lt;/span>(&lt;span style="color:#a6e22e">id&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>openapi 勉強会</title><link>/diary/posts/2022/1216/</link><pubDate>Fri, 16 Dec 2022 11:18:04 +0900</pubDate><guid>/diary/posts/2022/1216/</guid><description>1時に寝て7時に起きた。昨日はたまたま遅くなって0時頃に帰ってきたが、最近は22時前後に帰ってくることが多い。疲労困憊。
nginx でつくるリバースプロキシ ちょっとググってみつかる記事を参考にして設定したらすぐにできた。私は tls 周りの設定に詳しくないのでこういうまとめ記事はとても助かる。インターネットって便利。
Docker with SSL and an nginx reverse proxy NGINX Docker with SSL Encryption (Self-signed) openapi 勉強会 昨日の続き。openapi についてチーム勉強会を開催した。wiki に次の目次で説明を書いてその内容を勉強会で話した。ちょうど1時間におさまって内容もわかりやすいものができたのではないかと自画自賛。毎週のチーム勉強会のネタとしてちょうどよい粒度だった。
code generator が fork した背景 スキーマ駆動開発 メリット デメリット OpenAPI スキーマからドキュメント生成 OpenAPI スキーマからコード生成 リファレンス 余談だけど、過去に働いていた会社の発表資料が slideshare から docswell というサービスに移管されてた。slideshare は広告が鬱陶しいサービスになってしまってひどいユーザー体験だからこれは適切な判断だと思う。
https://www.docswell.com/s/ydnjp/Z3YQV5-2019-11-21-120351</description><content>&lt;p>1時に寝て7時に起きた。昨日はたまたま遅くなって0時頃に帰ってきたが、最近は22時前後に帰ってくることが多い。疲労困憊。&lt;/p>
&lt;h2 id="nginx-でつくるリバースプロキシ">nginx でつくるリバースプロキシ&lt;/h2>
&lt;p>ちょっとググってみつかる記事を参考にして設定したらすぐにできた。私は tls 周りの設定に詳しくないのでこういうまとめ記事はとても助かる。インターネットって便利。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/dahlsailrunner/679e6dec5fd769f30bce90447ae80081">Docker with SSL and an nginx reverse proxy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mpolinowski.github.io/docs/DevOps/NGINX/2020-08-27--nginx-docker-ssl-certs-self-signed/2020-08-27/">NGINX Docker with SSL Encryption (Self-signed)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="openapi-勉強会">openapi 勉強会&lt;/h2>
&lt;p>昨日の続き。openapi についてチーム勉強会を開催した。wiki に次の目次で説明を書いてその内容を勉強会で話した。ちょうど1時間におさまって内容もわかりやすいものができたのではないかと自画自賛。毎週のチーム勉強会のネタとしてちょうどよい粒度だった。&lt;/p>
&lt;ul>
&lt;li>code generator が fork した背景&lt;/li>
&lt;li>スキーマ駆動開発
&lt;ul>
&lt;li>メリット&lt;/li>
&lt;li>デメリット&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>OpenAPI スキーマからドキュメント生成&lt;/li>
&lt;li>OpenAPI スキーマからコード生成&lt;/li>
&lt;li>リファレンス&lt;/li>
&lt;/ul>
&lt;p>余談だけど、過去に働いていた会社の発表資料が slideshare から docswell というサービスに移管されてた。slideshare は広告が鬱陶しいサービスになってしまってひどいユーザー体験だからこれは適切な判断だと思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.docswell.com/s/ydnjp/Z3YQV5-2019-11-21-120351">https://www.docswell.com/s/ydnjp/Z3YQV5-2019-11-21-120351&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>docker compose に期待しない</title><link>/diary/posts/2022/1212/</link><pubDate>Mon, 12 Dec 2022 12:52:27 +0900</pubDate><guid>/diary/posts/2022/1212/</guid><description>0時に寝て5時に起きて7時に起きた。起きたら冷やしたのかお腹痛かったが、まぁまぁ眠れたと思う。
テスト環境の構築 GitLab CI/CD にだいぶ慣れてきてジョブを追加したり改善したりしながらようやくアプリケーションの docker image もコンテナレジストリに push されるようになった。それを pull してきて、テスト環境を docker compose で構築する。Use Compose in production とドキュメントでは威勢がよいが、これが全然イケてない。複数の compose.yml で項目によっては変更したいところを置き換えるといった振る舞いになっていない。例えば、ポート番号などを dev と prod で置き換えたいといった運用の要件を考える。
dev.yml services: myapp: ports: - 18080:8080 prod.yml services: myapp: ports: - 8080:8080 これを次のように指定すると、
$ docker compose -f dev.yml -f prod.yml up -d 実際のサービスは次のように振る舞う。全然あかん。
services: myapp: ports: - 18080:8080 - 8080:8080 他にもそれぞれの yml ファイルで読み込む environment file のマージなどもよくわからない振る舞いをしていて複数の compose.yml で制御するのは断念した。dry の原則に反して設定は重複するけど、それぞれの環境を個別に compose.yml として管理した方が保守コストは小さくなると私は判断した。複数の compose.yml の使い分けのデバッグを1-2日やった後に諦めてテスト環境の構築は完了した。
年金事務所の住所変更手続き 先週 法務局で法人登記の変更申請 をしていて、そのときに問題がなければ今日から登記事項証明書を取得できると案内をもらっていた。決定書が漏れていて再提出というトラブルはあったものの、最小限の損失で留めたせいか、問題なく登記事項証明書を発行できた。住所の変更だけわかればよいので履歴事項証明書ではなく現在事項証明書を発行してみた。この書類もおもしろくて1つ前の住所といまの住所の2つを確認できる。法務局へ行った帰りに年金事務所へ立ち寄って社会保険の住所変更の手続きを行った。次の3つの書類をもって窓口へ。</description><content>&lt;p>0時に寝て5時に起きて7時に起きた。起きたら冷やしたのかお腹痛かったが、まぁまぁ眠れたと思う。&lt;/p>
&lt;h2 id="テスト環境の構築">テスト環境の構築&lt;/h2>
&lt;p>&lt;a href="https://docs.gitlab.com/ee/ci/">GitLab CI/CD&lt;/a> にだいぶ慣れてきてジョブを追加したり改善したりしながらようやくアプリケーションの docker image もコンテナレジストリに push されるようになった。それを pull してきて、テスト環境を &lt;a href="https://docs.docker.com/compose/">docker compose&lt;/a> で構築する。&lt;a href="https://docs.docker.com/compose/production/">Use Compose in production&lt;/a> とドキュメントでは威勢がよいが、これが全然イケてない。複数の compose.yml で項目によっては変更したいところを置き換えるといった振る舞いになっていない。例えば、ポート番号などを dev と prod で置き換えたいといった運用の要件を考える。&lt;/p>
&lt;ul>
&lt;li>dev.yml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">myapp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">18080&lt;/span>:&lt;span style="color:#ae81ff">8080&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>prod.yml&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">myapp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">8080&lt;/span>:&lt;span style="color:#ae81ff">8080&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これを次のように指定すると、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker compose -f dev.yml -f prod.yml up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>実際のサービスは次のように振る舞う。全然あかん。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">myapp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">18080&lt;/span>:&lt;span style="color:#ae81ff">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">8080&lt;/span>:&lt;span style="color:#ae81ff">8080&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>他にもそれぞれの yml ファイルで読み込む environment file のマージなどもよくわからない振る舞いをしていて複数の compose.yml で制御するのは断念した。dry の原則に反して設定は重複するけど、それぞれの環境を個別に compose.yml として管理した方が保守コストは小さくなると私は判断した。複数の compose.yml の使い分けのデバッグを1-2日やった後に諦めてテスト環境の構築は完了した。&lt;/p>
&lt;h2 id="年金事務所の住所変更手続き">年金事務所の住所変更手続き&lt;/h2>
&lt;p>先週 &lt;a href="/diary/diary/posts/2022/1205/#法務局で法人登記の変更申請">法務局で法人登記の変更申請&lt;/a> をしていて、そのときに問題がなければ今日から登記事項証明書を取得できると案内をもらっていた。決定書が漏れていて再提出というトラブルはあったものの、最小限の損失で留めたせいか、問題なく登記事項証明書を発行できた。住所の変更だけわかればよいので履歴事項証明書ではなく現在事項証明書を発行してみた。この書類もおもしろくて1つ前の住所といまの住所の2つを確認できる。法務局へ行った帰りに年金事務所へ立ち寄って社会保険の住所変更の手続きを行った。次の3つの書類をもって窓口へ。&lt;/p>
&lt;ul>
&lt;li>登記事項証明書: 番地まで記載されている&lt;/li>
&lt;li>オフィスの一時使用契約書: ビル名はあるがこのビル名は来月に改名&lt;/li>
&lt;li>ビル名変更の証明書類: ビル名の変更のみが記載されている&lt;/li>
&lt;/ul>
&lt;p>この3つの書類で完全に指定された住所 (Fully Qualified Address: 造語) を丁寧に説明したところ担当者に納得してもらえて事なきを得た。&lt;/p></content></item><item><title>軽量のコンテナオーケストレーションツールは存在しない</title><link>/diary/posts/2022/1109/</link><pubDate>Wed, 09 Nov 2022 13:47:29 +0900</pubDate><guid>/diary/posts/2022/1109/</guid><description>0時に寝て6時に起きた。冷蔵庫に飲みものなくて不安。
docker の swarm mode 昨日から docker の swarm mode について調べていた。
オンプレにコンテナのアプリケーションをデプロイするにあたり、軽量のコンテナオーケストレーションツールはないかと調べ始めた。Kubernetes vs Docker Swarm vs Nomad - the orchestrator wars continue? を記事を読むと、軽量のオーケストレーションツールと言えるのは swarm mode か Nomad ぐらいしかない。docker に付属しているならまずはそれを調べるべきだろうと調査した。そして swarm mode の採用は見送った。現時点でこの機能が廃止されるというアナウンスはないが、あまり保守されておらず、docker 社も積極的に推進していない。近い将来、機能が廃止される可能性が高いと私は判断した。
docker のドキュメントをみながら3台の ec2 インスタンスでクラスターを構築してみて簡単であることは間違いない。コマンド2つで swarm クラスターを構築できる。一通り触ってみて数台のマシンを管理する軽量のコンテナオーケストレーションツールとしては十分だと私は思うけれど、残念ながらこのツールが求められる業務やビジネスは少ないのだろうと思う。みんな k8s に持ってかれたという感じかな。調べていて読んだ記事など。
Docker Swarm Rocks Six Tips For Running Swarm Cluster in Production Docker swarm in production - Anyone using it? hannali dao 雑談 Hannali DAO #02 に参加した。
最初は dao とは何かをみんなで雑談してた。私はお仕事しながら軽く聞いているつもりだったのが、議論に口出しして熱中してた。技術的に私が理解できないことが出てくると、私の認識が誤っていたり新しい気付きがあったりする可能性があるので、ついつい詳細を聞いてみたくなる。hannali dao でトークンをばら撒く戦略をみんなで考えていて dao の宣伝をしたら貢献の1つとみなしてトークンをもらえる。私は twitter でいくつか hannali dao のツィートをしていて、1ツィートが 300 PROG とかで、合計で 1250 PROG のトークンをもらった。PROG というのは hannali dao でのみ使えるトークンね。</description><content>&lt;p>0時に寝て6時に起きた。冷蔵庫に飲みものなくて不安。&lt;/p>
&lt;h2 id="docker-の-swarm-mode">docker の swarm mode&lt;/h2>
&lt;p>昨日から docker の &lt;a href="https://docs.docker.com/engine/swarm/">swarm mode&lt;/a> について調べていた。&lt;/p>
&lt;p>オンプレにコンテナのアプリケーションをデプロイするにあたり、軽量のコンテナオーケストレーションツールはないかと調べ始めた。&lt;a href="https://www.portainer.io/blog/orchestrator-wars-continue">Kubernetes vs Docker Swarm vs Nomad - the orchestrator wars continue?&lt;/a> を記事を読むと、軽量のオーケストレーションツールと言えるのは swarm mode か &lt;a href="https://www.nomadproject.io/">Nomad&lt;/a> ぐらいしかない。docker に付属しているならまずはそれを調べるべきだろうと調査した。そして swarm mode の採用は見送った。現時点でこの機能が廃止されるというアナウンスはないが、あまり保守されておらず、docker 社も積極的に推進していない。近い将来、機能が廃止される可能性が高いと私は判断した。&lt;/p>
&lt;p>docker のドキュメントをみながら3台の ec2 インスタンスでクラスターを構築してみて簡単であることは間違いない。コマンド2つで swarm クラスターを構築できる。一通り触ってみて数台のマシンを管理する軽量のコンテナオーケストレーションツールとしては十分だと私は思うけれど、残念ながらこのツールが求められる業務やビジネスは少ないのだろうと思う。みんな k8s に持ってかれたという感じかな。調べていて読んだ記事など。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dockerswarm.rocks/">Docker Swarm Rocks&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://levelup.gitconnected.com/six-tips-for-running-swarm-cluster-in-production-e0f2ef367694">Six Tips For Running Swarm Cluster in Production&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.reddit.com/r/docker/comments/936924/docker_swarm_in_production_anyone_using_it/">Docker swarm in production - Anyone using it?&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="hannali-dao-雑談">hannali dao 雑談&lt;/h2>
&lt;p>&lt;a href="https://hannari-python.connpass.com/event/265098/">Hannali DAO #02&lt;/a> に参加した。&lt;/p>
&lt;p>最初は dao とは何かをみんなで雑談してた。私はお仕事しながら軽く聞いているつもりだったのが、議論に口出しして熱中してた。技術的に私が理解できないことが出てくると、私の認識が誤っていたり新しい気付きがあったりする可能性があるので、ついつい詳細を聞いてみたくなる。hannali dao でトークンをばら撒く戦略をみんなで考えていて dao の宣伝をしたら貢献の1つとみなしてトークンをもらえる。私は twitter でいくつか hannali dao のツィートをしていて、1ツィートが 300 PROG とかで、合計で 1250 PROG のトークンをもらった。PROG というのは hannali dao でのみ使えるトークンね。&lt;/p>
&lt;p>その後、ウォレットに名前を付けられる &lt;a href="https://ens.domains/ja/">ENS (Ethereum Name Service)&lt;/a> というサービスがあるのを教えてもらった。ちょうどいくらか ethereum をもってたので metamask に送金して、metamask で ens の登録 (購入) をやってみた。初めて ethereum を使ってサービスの支払いをやってみた。これで私も web3 を完全に理解したよ。ens で名前を登録 (購入) するのに $22.58 、ドメイン名みたいなものでサブドメインも登録できる。サブドメインを付けるのに $2.96 かかり、その ens を metamask に紐付けるのに $7.49 がかかった。metamask に紐付けると &lt;a href="https://etherscan.io/">https://etherscan.io/&lt;/a> などで検索したときにウォレットのアドレスではなく、ens で購入した名前が表示されるようになる。トランザクションの履歴に名前が付いてそれが誰なのかが他人にもわかってしまうことがどういった影響を及ぼすのか、プライバシー云々の他に私はまだわかっていない。web3 なので購入した名前は一般公開されているものだけど、その名前は知り合いにしかまだ教えていない。暗号資産のウォレットに名前を付けることの意味や体験などをこれから経験してみる。&lt;/p></content></item><item><title>2021年度の確定申告</title><link>/diary/posts/2022/0220/</link><pubDate>Sun, 20 Feb 2022 09:48:18 +0900</pubDate><guid>/diary/posts/2022/0220/</guid><description>0時に寝て6時に起きた。
確定申告 本当は9時から受け付けなんだけど、昨年早めに行ったら受け付けしてくれたので今年も8時半ぐらいから出掛けていった。家から徒歩5分のところに特設の申告会場があって、行ったらすでに100人ぐらいは並んでいた。整理券を配るために行列を誘導している係員に「書類は作成済みで提出だけです」と伝えると「どうぞ、こちらへ」と行列をショートカットして、書類の作成会場の横にある提出会場へ案内される。朝一なので誰も提出してなくてすぐに応対してくれた。書類チェックして提出完了。会場についてから提出するまでに5分。あわせて10分もあれば確定申告できる。電子申告してもよいのだけど、寄付金の領収書の電子化が面倒なのでまだ紙で申告している。寄付金の領収書が電子化されて添付できるような手軽さになったら電子申告してもよいかもしれない。
github container action の検証 jib という java アプリケーション向けの docker イメージをビルドするためのツールがある。お仕事で使い始めたので雰囲気を理解するために私もサンプルアプリケーションを jib-sample として作ってみた。簡単に設定して java アプリケーションを docker 化できるので感触はよさそう。基本的に java アプリケーションと docker は相性が悪くて、たぶん go で開発するような用途と比較するとサイズがめちゃくちゃでかい。それでも jib を使うと作成された docker イメージのサイズも自分でビルドして作るよりは小さくしてくれる。さすが google という感じ。
この jib-sample の docker イメージを使って github actions のカスタム container action を作ってみたのが gh-actions-container-sample になる。Creating a Docker container action のドキュメントには Dockerfile を使ったサンプルしか紹介されていないけど、docker イメージを直接参照して利用することもできる。
検証作業をしているときに jib-sample リポジトリの github packages が private 設定になっていることに気付かなくて少しはまった。リポジトリの visibility 設定と github packages の visibility 設定は連動していないのでそれぞれで別に管理しないといけない。
また jib で作った docker イメージはデフォルトでは manifest を作ってくれない。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="確定申告">確定申告&lt;/h2>
&lt;p>本当は9時から受け付けなんだけど、昨年早めに行ったら受け付けしてくれたので今年も8時半ぐらいから出掛けていった。家から徒歩5分のところに特設の申告会場があって、行ったらすでに100人ぐらいは並んでいた。整理券を配るために行列を誘導している係員に「書類は作成済みで提出だけです」と伝えると「どうぞ、こちらへ」と行列をショートカットして、書類の作成会場の横にある提出会場へ案内される。朝一なので誰も提出してなくてすぐに応対してくれた。書類チェックして提出完了。会場についてから提出するまでに5分。あわせて10分もあれば確定申告できる。電子申告してもよいのだけど、寄付金の領収書の電子化が面倒なのでまだ紙で申告している。寄付金の領収書が電子化されて添付できるような手軽さになったら電子申告してもよいかもしれない。&lt;/p>
&lt;h2 id="github-container-action-の検証">github container action の検証&lt;/h2>
&lt;p>&lt;a href="https://github.com/GoogleContainerTools/jib">jib&lt;/a> という java アプリケーション向けの docker イメージをビルドするためのツールがある。お仕事で使い始めたので雰囲気を理解するために私もサンプルアプリケーションを &lt;a href="https://github.com/t2y/jib-sample">jib-sample&lt;/a> として作ってみた。簡単に設定して java アプリケーションを docker 化できるので感触はよさそう。基本的に java アプリケーションと docker は相性が悪くて、たぶん go で開発するような用途と比較するとサイズがめちゃくちゃでかい。それでも jib を使うと作成された docker イメージのサイズも自分でビルドして作るよりは小さくしてくれる。さすが google という感じ。&lt;/p>
&lt;p>この jib-sample の docker イメージを使って github actions のカスタム container action を作ってみたのが &lt;a href="https://github.com/t2y/gh-actions-container-sample">gh-actions-container-sample&lt;/a> になる。&lt;a href="https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action">Creating a Docker container action&lt;/a> のドキュメントには Dockerfile を使ったサンプルしか紹介されていないけど、docker イメージを直接参照して利用することもできる。&lt;/p>
&lt;p>検証作業をしているときに jib-sample リポジトリの github packages が private 設定になっていることに気付かなくて少しはまった。リポジトリの visibility 設定と github packages の visibility 設定は連動していないのでそれぞれで別に管理しないといけない。&lt;/p>
&lt;p>また jib で作った docker イメージはデフォルトでは manifest を作ってくれない。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker manifest inspect --verbose ghcr.io/t2y/jib-sample:latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>no such manifest: ghcr.io/t2y/jib-sample:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/GoogleContainerTools/jib/blob/master/docs/faq.md#how-do-i-specify-a-platform-in-the-manifest-list-or-oci-index-of-a-base-image">How do I specify a platform in the manifest list (or OCI index) of a base image?&lt;/a> のドキュメントによると、manifest に platform 情報を追加するのは incubating feature らしくて、なんか条件付きで設定すれば使えそうにもみえたんだけど、私がやってみた感じだとうまくいかなかった。また必要ならもう一度調べてみる。&lt;/p></content></item><item><title>docker の勉強</title><link>/diary/posts/2022/0219/</link><pubDate>Sat, 19 Feb 2022 12:56:33 +0900</pubDate><guid>/diary/posts/2022/0219/</guid><description>0時に寝て6時に起きた。
ストレッチ ここ1ヶ月ほどお仕事に集中しているのもあるけど、あまりストレッチに意識を割いていない。やるときは集中して注力するのだけど、飽きてくると怠ける性格的なところがある。とはいえ、やめずに続けているといいことがあると経験則からわかっているのでなるべく継続していきたい。今週も特別なことはなにもしていないのだけど、右足の股関節周りに張りがあってあまり調子がよくなかった。今日の開脚幅は開始前163cmで、ストレッチ後167cmで先週よりも数値が悪化している。良くなるときもあれば悪くなるときもある。毎週ストレッチを受けて計測しているとそういう気付きがあること自体、この機会は健康のために役立っているように考えている。
github packages で docker イメージを公開する docker が流行りだした頃に勤めていた会社の貸与端末が docker 禁止だったので私は docker に乗り遅れて、これまでも誰かが用意してくれたコンテナを使うだけでよかったため、最低限の docker コマンドや docker-compose の使い方しか知らなかった。ちょうどインフラの運用を見直す過程で docker コンテナの作成方法から見直すお仕事ができたのでこの機にいろいろ勉強する。いまどき当たり前なんだろうけど、docker の マルチステージビルド をやってみる。
最初に go のバイナリを選択したのは間違いだったのかもしれない。go のビルド環境を作るベースイメージの選択が難しくて、ビルドはできるけど、作成したバイナリが動かないという状況にはまった。ECSのタスク起動時に「standard_init_linux.go」関連のエラーが出た場合の対処方法 であるように、いろんな不具合がある。ベースイメージの選択やビルドに必要なライブラリがないとそういうエラーになるんだと気付くまでに時間がかかった。
最終的に次のような Dockerfile でマルチステージビルドができた。builder としてのベースイメージの選択によってやり方はいろいろ変わってくるように思える。
FROM golang:alpine as builder RUN apk add --no-cache git make gcc musl-dev WORKDIR /work COPY . . RUN go mod download RUN make build FROM alpine:latest WORKDIR / COPY --from=builder /work/bin/sql-executor . CMD [ &amp;#34;/sql-executor&amp;#34; ] Dockerfile ができたら Publishing Docker images を読みながら github actions で自動的に docker イメージを github packages に公開する設定をやってみた。リリースを作成したときに docker イメージをビルドして公開する workflow yml を作成した。ほとんどドキュメントのまま。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>ここ1ヶ月ほどお仕事に集中しているのもあるけど、あまりストレッチに意識を割いていない。やるときは集中して注力するのだけど、飽きてくると怠ける性格的なところがある。とはいえ、やめずに続けているといいことがあると経験則からわかっているのでなるべく継続していきたい。今週も特別なことはなにもしていないのだけど、右足の股関節周りに張りがあってあまり調子がよくなかった。今日の開脚幅は開始前163cmで、ストレッチ後167cmで先週よりも数値が悪化している。良くなるときもあれば悪くなるときもある。毎週ストレッチを受けて計測しているとそういう気付きがあること自体、この機会は健康のために役立っているように考えている。&lt;/p>
&lt;h2 id="github-packages-で-docker-イメージを公開する">github packages で docker イメージを公開する&lt;/h2>
&lt;p>docker が流行りだした頃に勤めていた会社の貸与端末が docker 禁止だったので私は docker に乗り遅れて、これまでも誰かが用意してくれたコンテナを使うだけでよかったため、最低限の docker コマンドや docker-compose の使い方しか知らなかった。ちょうどインフラの運用を見直す過程で docker コンテナの作成方法から見直すお仕事ができたのでこの機にいろいろ勉強する。いまどき当たり前なんだろうけど、docker の &lt;a href="https://matsuand.github.io/docs.docker.jp.onthefly/develop/develop-images/multistage-build/">マルチステージビルド&lt;/a> をやってみる。&lt;/p>
&lt;p>最初に go のバイナリを選択したのは間違いだったのかもしれない。go のビルド環境を作るベースイメージの選択が難しくて、ビルドはできるけど、作成したバイナリが動かないという状況にはまった。&lt;a href="https://dev.classmethod.jp/articles/how-to-fix-standard-init-linux-error/">ECSのタスク起動時に「standard_init_linux.go」関連のエラーが出た場合の対処方法&lt;/a> であるように、いろんな不具合がある。ベースイメージの選択やビルドに必要なライブラリがないとそういうエラーになるんだと気付くまでに時間がかかった。&lt;/p>
&lt;p>最終的に次のような &lt;a href="https://github.com/kazamori/go-sql-executor/blob/main/Dockerfile">Dockerfile&lt;/a> でマルチステージビルドができた。builder としてのベースイメージの選択によってやり方はいろいろ変わってくるように思える。&lt;/p>
&lt;pre tabindex="0">&lt;code>FROM golang:alpine as builder
RUN apk add --no-cache git make gcc musl-dev
WORKDIR /work
COPY . .
RUN go mod download
RUN make build
FROM alpine:latest
WORKDIR /
COPY --from=builder /work/bin/sql-executor .
CMD [ &amp;#34;/sql-executor&amp;#34; ]
&lt;/code>&lt;/pre>&lt;p>Dockerfile ができたら &lt;a href="https://docs.github.com/en/actions/publishing-packages/publishing-docker-images">Publishing Docker images&lt;/a> を読みながら github actions で自動的に docker イメージを github packages に公開する設定をやってみた。リリースを作成したときに docker イメージをビルドして公開する &lt;a href="https://github.com/kazamori/go-sql-executor/blob/main/.github/workflows/publish.yml">workflow yml&lt;/a> を作成した。ほとんどドキュメントのまま。&lt;/p>
&lt;p>github actions の実行結果。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/go-sql-executor/runs/5258037718?check_suite_focus=true">https://github.com/kazamori/go-sql-executor/runs/5258037718?check_suite_focus=true&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>github packages 上で公開された docker イメージ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kazamori/go-sql-executor/pkgs/container/go-sql-executor">https://github.com/kazamori/go-sql-executor/pkgs/container/go-sql-executor&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>リリースのタイミングじゃなくてコミットのタイミングでも docker イメージを生成できると思うけど、docker イメージのタグに相当するものをどう付けるかというところは工夫する必要がありそう。&lt;/p></content></item><item><title>mysql のデータ移行</title><link>/diary/posts/2022/0212/</link><pubDate>Sat, 12 Feb 2022 10:30:35 +0900</pubDate><guid>/diary/posts/2022/0212/</guid><description>23時に寝て2時前に起きて5時に起きて8時に起きた。あんまり眠れなくなってきた。
もくもく会 【三宮.dev】もくもく会 に参加した。もともとオフラインの予定だったけど、オミクロン株の流行でオンラインに変更された。
お仕事である開発環境の構築をしていて docker-compose を使って mysql の環境構築や共有の開発環境にある db2 に接続するために clpplus のインストール方法などを wiki にまとめてた。コンテナにある mysqldump や mysql コマンドを使ってこんな風にデータ移行もできた。
共有の開発環境からデータをエクスポート。
$ docker-compose exec -T mydb mysqldump -h $DB_HOST -C --set-gtid-purged=OFF --skip-triggers $DB &amp;gt; dump.sql ローカルの mysql にデータをインポート。
$ docker-compose exec -T mydb mysql -h localhost -u root -proot $DB &amp;lt; dump.sql コンテナにある mysqldump と mysql コマンドを使ってデータのインポートするには -T を指定すればいいみたい。そうしないと WARNING とかの文字列が sql ファイルに含まれてしまってインポートできない。https://t.co/JGeDNsWjhx
&amp;mdash; Tetsuya Morimoto (@t2y) February 12, 2022 ストレッチ いつもは11時からなんやけど、今日は17時40分からだった。カレンダーの予定を変更し忘れてて11時に行って間違えた。今週は2日間ぐらいストレッチしたかな。今日の開脚幅は開始前164cmで、ストレッチ後168cmだった。いつも時間帯が違うので数値も変わる。今日は右太ももの内転筋や内側やらがすごく張ってた。あまり調子はよくない。</description><content>&lt;p>23時に寝て2時前に起きて5時に起きて8時に起きた。あんまり眠れなくなってきた。&lt;/p>
&lt;h2 id="もくもく会">もくもく会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/235747/">【三宮.dev】もくもく会&lt;/a> に参加した。もともとオフラインの予定だったけど、オミクロン株の流行でオンラインに変更された。&lt;/p>
&lt;p>お仕事である開発環境の構築をしていて docker-compose を使って mysql の環境構築や共有の開発環境にある db2 に接続するために &lt;a href="https://www.ibm.com/docs/en/db2/10.5?topic=commands-command-line-processor-plus-clpplus">clpplus&lt;/a> のインストール方法などを wiki にまとめてた。コンテナにある mysqldump や mysql コマンドを使ってこんな風にデータ移行もできた。&lt;/p>
&lt;p>共有の開発環境からデータをエクスポート。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker-compose exec -T mydb mysqldump -h $DB_HOST -C --set-gtid-purged&lt;span style="color:#f92672">=&lt;/span>OFF --skip-triggers $DB &amp;gt; dump.sql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ローカルの mysql にデータをインポート。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker-compose exec -T mydb mysql -h localhost -u root -proot $DB &amp;lt; dump.sql
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">コンテナにある mysqldump と mysql コマンドを使ってデータのインポートするには -T を指定すればいいみたい。そうしないと WARNING とかの文字列が sql ファイルに含まれてしまってインポートできない。&lt;a href="https://t.co/JGeDNsWjhx">https://t.co/JGeDNsWjhx&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1492391598612959234?ref_src=twsrc%5Etfw">February 12, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>いつもは11時からなんやけど、今日は17時40分からだった。カレンダーの予定を変更し忘れてて11時に行って間違えた。今週は2日間ぐらいストレッチしたかな。今日の開脚幅は開始前164cmで、ストレッチ後168cmだった。いつも時間帯が違うので数値も変わる。今日は右太ももの内転筋や内側やらがすごく張ってた。あまり調子はよくない。&lt;/p></content></item><item><title>docker の勉強</title><link>/diary/posts/2022/0211/</link><pubDate>Fri, 11 Feb 2022 08:43:24 +0900</pubDate><guid>/diary/posts/2022/0211/</guid><description>0時に寝て2時過ぎに起きて5時に起きて6時に起きた。珍しく3回ぐらい起きた。
docker のマルチステージビルド これまで docker を使った開発を主導してこなかったので私はあまり docker についての知識をもっていない。いま k8s クラスターで java アプリケーションの運用をしていて、リリース作業の改善には docker イメージのビルドも改善する必要性が迫られてきた。いくつかプラクティスの記事を読んでいると マルチステージビルドの利用 を推奨している記事が多い。マルチステージビルドをうまく活用することで、docker イメージサイズの削減と日々の ci やビルド時間の短縮の2つを図れるようにみえる。docker の仕組みを学ぶちょうどよい機会なので主導的な立場でこの改善に着手しようと考えている。
オフィス内覧 オフィスの引っ越し調査のために エリンサーブ に行ってきた。駅近でもなく市街でもなくちょっと辺鄙な海外沿いにあるせいか、他のレンタルオフィスと比べて全体的に広さに対する家賃は安く設定されている。案内をしてくれた代表の方が「狭い部屋で働かせたくない」といった想いを話されていたので、意図的に窮屈なスペースにならないように広めに設計されているらしい。
オープンスペースでそれぞれの席が別会社という作りは斬新な考えとも言えるし、お互いの信頼関係で成り立っているとも言える。例えば、パソコンのモニターや資料とか、近くを通ったらみえてしまうわけだし。そういったセキュリティも考慮して、一見さんのドロップインには対応していないという。利用者はお互いに面識のある一定の信頼関係を築ける人たちで構成されているらしい。なにか審査があるのかどうかわからないが、人間関係が苦手な人には向かないスペースにもみえる。私は1日のうちにテレビ会議を何度もやるのでオープンスペースだと顧客の情報を守る義務があるのと、そうじゃなくても周りにも迷惑がかかるので、1日のうちの何度も場所を変えてテレビ会議できる部屋に移動しないといけない。それがボトルネックだなと思えた。個室もいくつかみせてもらって、2人向けの窓のある個室があってよさそうにみえた。そこはテレビ会議しても問題ないとのこと。家賃も予算にあうものだった。
Dタイプ(3F)
月額利用料: 66,000円 Eタイプ(3F)
デスクは2つ 月額利用料: 76,000円 いまは他の会社が借りている状態だけど、空きが出たら教えてもらえるようにお願いして帰ってきた。</description><content>&lt;p>0時に寝て2時過ぎに起きて5時に起きて6時に起きた。珍しく3回ぐらい起きた。&lt;/p>
&lt;h2 id="docker-のマルチステージビルド">docker のマルチステージビルド&lt;/h2>
&lt;p>これまで docker を使った開発を主導してこなかったので私はあまり docker についての知識をもっていない。いま k8s クラスターで java アプリケーションの運用をしていて、リリース作業の改善には docker イメージのビルドも改善する必要性が迫られてきた。いくつかプラクティスの記事を読んでいると &lt;a href="https://matsuand.github.io/docs.docker.jp.onthefly/develop/develop-images/multistage-build/">マルチステージビルドの利用&lt;/a> を推奨している記事が多い。マルチステージビルドをうまく活用することで、docker イメージサイズの削減と日々の ci やビルド時間の短縮の2つを図れるようにみえる。docker の仕組みを学ぶちょうどよい機会なので主導的な立場でこの改善に着手しようと考えている。&lt;/p>
&lt;h2 id="オフィス内覧">オフィス内覧&lt;/h2>
&lt;p>オフィスの引っ越し調査のために &lt;a href="https://www.erinserve.com/">エリンサーブ&lt;/a> に行ってきた。駅近でもなく市街でもなくちょっと辺鄙な海外沿いにあるせいか、他のレンタルオフィスと比べて全体的に広さに対する家賃は安く設定されている。案内をしてくれた代表の方が「狭い部屋で働かせたくない」といった想いを話されていたので、意図的に窮屈なスペースにならないように広めに設計されているらしい。&lt;/p>
&lt;p>オープンスペースでそれぞれの席が別会社という作りは斬新な考えとも言えるし、お互いの信頼関係で成り立っているとも言える。例えば、パソコンのモニターや資料とか、近くを通ったらみえてしまうわけだし。そういったセキュリティも考慮して、一見さんのドロップインには対応していないという。利用者はお互いに面識のある一定の信頼関係を築ける人たちで構成されているらしい。なにか審査があるのかどうかわからないが、人間関係が苦手な人には向かないスペースにもみえる。私は1日のうちにテレビ会議を何度もやるのでオープンスペースだと顧客の情報を守る義務があるのと、そうじゃなくても周りにも迷惑がかかるので、1日のうちの何度も場所を変えてテレビ会議できる部屋に移動しないといけない。それがボトルネックだなと思えた。個室もいくつかみせてもらって、2人向けの窓のある個室があってよさそうにみえた。そこはテレビ会議しても問題ないとのこと。家賃も予算にあうものだった。&lt;/p>
&lt;p>Dタイプ(3F)&lt;/p>
&lt;ul>
&lt;li>月額利用料: 66,000円&lt;/li>
&lt;/ul>
&lt;p>Eタイプ(3F)&lt;/p>
&lt;ul>
&lt;li>デスクは2つ&lt;/li>
&lt;li>月額利用料: 76,000円&lt;/li>
&lt;/ul>
&lt;p>いまは他の会社が借りている状態だけど、空きが出たら教えてもらえるようにお願いして帰ってきた。&lt;/p></content></item></channel></rss>