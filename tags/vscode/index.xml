<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vscode on</title><link>/diary/tags/vscode/</link><description>Recent content in Vscode on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 02 Jun 2022 08:51:06 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/vscode/index.xml" rel="self" type="application/rss+xml"/><item><title>draw.io で描いたインフラ構成図</title><link>/diary/posts/2022/0602/</link><pubDate>Thu, 02 Jun 2022 08:51:06 +0900</pubDate><guid>/diary/posts/2022/0602/</guid><description>0時に寝て4時に起きて7時までだらだらしてた。なんか調子悪い。
draw.io を描いてみた 先日、draw.io で aws 構成図を描く調査 をした。割り込みの作業をやっていてシステム構成図の作成を先延ばししていた。だいたいの調査は終わっていたのであとは根を詰めて描くだけ。次のサンプル構成図をみながら同じように描いていく。
AWS のアーキテクチャ図を描きたい ! でもどうすれば良いの ? 2つの環境があって、そのうちの1つを作成した。新規構築した環境でスクラッチから描いたものの、インフラリソースの構成要素が少なかったのでサンプル構成図を参考にしながらすぐに描けた。半角スペースで文字位置を調整したりすると、github 上で svg 表示したときに文字の位置がずれたりするのでそういうやり方はダメだとわかった。あと draw.io の振る舞いなのか、vscode のプラグインのせいなのかわからないけど、オブジェクトの配置の前後関係をうまく調整できなくてコピペし直したり、なにかの操作をしたタイミングでインフラリソースのアイコンが後ろに隠蔽されていたりもした。リソース間の接続のための線も自動的に繋がるときもあって便利なのだが、誤動作して変な位置にレイアウトされることもあって制御が難しい。私の感覚では、多少の利便性のために自動化されるよりも、自分で思い通りに制御出来る方を好む。draw.io の自動調整機能の制御が難しいなと思った。</description><content>&lt;p>0時に寝て4時に起きて7時までだらだらしてた。なんか調子悪い。&lt;/p>
&lt;h2 id="drawio-を描いてみた">draw.io を描いてみた&lt;/h2>
&lt;p>先日、&lt;a href="/diary/diary/posts/2022/0523/">draw.io で aws 構成図を描く調査&lt;/a> をした。割り込みの作業をやっていてシステム構成図の作成を先延ばししていた。だいたいの調査は終わっていたのであとは根を詰めて描くだけ。次のサンプル構成図をみながら同じように描いていく。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://aws.amazon.com/jp/builders-flash/202204/way-to-draw-architecture/">AWS のアーキテクチャ図を描きたい ! でもどうすれば良いの ?&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>2つの環境があって、そのうちの1つを作成した。新規構築した環境でスクラッチから描いたものの、インフラリソースの構成要素が少なかったのでサンプル構成図を参考にしながらすぐに描けた。半角スペースで文字位置を調整したりすると、github 上で svg 表示したときに文字の位置がずれたりするのでそういうやり方はダメだとわかった。あと draw.io の振る舞いなのか、vscode のプラグインのせいなのかわからないけど、オブジェクトの配置の前後関係をうまく調整できなくてコピペし直したり、なにかの操作をしたタイミングでインフラリソースのアイコンが後ろに隠蔽されていたりもした。リソース間の接続のための線も自動的に繋がるときもあって便利なのだが、誤動作して変な位置にレイアウトされることもあって制御が難しい。私の感覚では、多少の利便性のために自動化されるよりも、自分で思い通りに制御出来る方を好む。draw.io の自動調整機能の制御が難しいなと思った。&lt;/p></content></item><item><title>aws のシステム構成図に挑戦</title><link>/diary/posts/2022/0523/</link><pubDate>Mon, 23 May 2022 23:15:10 +0900</pubDate><guid>/diary/posts/2022/0523/</guid><description>0時に寝て5時半に起きた。
draw.io を触ってみた 先週末から着手している インフラのドキュメント作成 の続き。aws のシステム構成図を書こうと思ったものの、書いたことがないので次の記事を読み始めた。
AWS のアーキテクチャ図を描きたい ! でもどうすれば良いの ? そこから AWS アーキテクチャアイコン のダイアグラム作成ツールとして紹介されているツールを一通りみてみた。書いたことがないのでどのツールを使えばいいのかすらわかっていない。見た目だけ比べればどれも似たり寄ったりで何でもいいやと思えた。既存の cdk コードからインポートして自動生成できるツールもあったけど、なんか出力結果がいまいちでそれよりは手で書いた方がいいように思えた。前任者は draw.io で書いていたので、それでいいかと思って draw.io を触り始めた。前任者はリポジトリに svg ファイルのみをコミットしていた。なぜ draw.io の web サイトのリンクがないのだろう？と不思議に思いつつ、draw.io でユーザーアカウントをどうやって作るのかを調べていて気付いた。draw.io って ui ですべて作図していてサーバー側に情報をもってないみたい。だからユーザーアカウントを作る必要もなくて、ブラウザを単なる gui のインターフェースにしているだけみたい。有償プランもユーザーが管理しているストレージに対するアクセス管理機能のようなものを提供している。先入観から web ベースのツールだと思い込んでいたので新鮮な気持ちになった。
前任者は web ブラウザも使っていなくて vscode の Draw.io Integration で書いたらしい。ui 側のロジックが再利用できるなら vscode でもブラウザで書くのと同じ品質レベルの操作ができるのだろうと推測する。vscode の方がローカルで書いている実感がわくかもしれない。svg ファイルをコミットしていたのも github の rich diff を使うと svg ファイルの画像差分も表示してくれるから。当初は xml でバージョン管理しようと思っていたんだけど、差分表示ができるなら svg ファイルでもいいと思えた。今日のところは draw.io を使おうということだけ決定した。
Draw.io（diagrams.net）で作成したインフラ構成図をコードで管理する、GitHubで編集差分を確認する</description><content>&lt;p>0時に寝て5時半に起きた。&lt;/p>
&lt;h2 id="drawio-を触ってみた">draw.io を触ってみた&lt;/h2>
&lt;p>先週末から着手している &lt;a href="/diary/diary/posts/2022/0519/#インフラのドキュメント作成">インフラのドキュメント作成&lt;/a> の続き。aws のシステム構成図を書こうと思ったものの、書いたことがないので次の記事を読み始めた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://aws.amazon.com/jp/builders-flash/202204/way-to-draw-architecture/">AWS のアーキテクチャ図を描きたい ! でもどうすれば良いの ?&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>そこから &lt;a href="https://aws.amazon.com/jp/architecture/icons/">AWS アーキテクチャアイコン&lt;/a> のダイアグラム作成ツールとして紹介されているツールを一通りみてみた。書いたことがないのでどのツールを使えばいいのかすらわかっていない。見た目だけ比べればどれも似たり寄ったりで何でもいいやと思えた。既存の cdk コードからインポートして自動生成できるツールもあったけど、なんか出力結果がいまいちでそれよりは手で書いた方がいいように思えた。前任者は &lt;a href="https://drawio-app.com/">draw.io&lt;/a> で書いていたので、それでいいかと思って draw.io を触り始めた。前任者はリポジトリに svg ファイルのみをコミットしていた。なぜ draw.io の web サイトのリンクがないのだろう？と不思議に思いつつ、draw.io でユーザーアカウントをどうやって作るのかを調べていて気付いた。draw.io って ui ですべて作図していてサーバー側に情報をもってないみたい。だからユーザーアカウントを作る必要もなくて、ブラウザを単なる gui のインターフェースにしているだけみたい。有償プランもユーザーが管理しているストレージに対するアクセス管理機能のようなものを提供している。先入観から web ベースのツールだと思い込んでいたので新鮮な気持ちになった。&lt;/p>
&lt;p>前任者は web ブラウザも使っていなくて vscode の &lt;a href="https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio">Draw.io Integration&lt;/a> で書いたらしい。ui 側のロジックが再利用できるなら vscode でもブラウザで書くのと同じ品質レベルの操作ができるのだろうと推測する。vscode の方がローカルで書いている実感がわくかもしれない。svg ファイルをコミットしていたのも github の rich diff を使うと svg ファイルの画像差分も表示してくれるから。当初は xml でバージョン管理しようと思っていたんだけど、差分表示ができるなら svg ファイルでもいいと思えた。今日のところは draw.io を使おうということだけ決定した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dev.classmethod.jp/articles/create-infrastructure-diagrams-in-drawio-diactamsnet-manage-them-in-code-and-github/">Draw.io（diagrams.net）で作成したインフラ構成図をコードで管理する、GitHubで編集差分を確認する&lt;/a>&lt;/li>
&lt;/ul></content></item></channel></rss>