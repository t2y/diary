<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Meta Programming on</title><link>/diary/tags/meta-programming/</link><description>Recent content in Meta Programming on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 04 Sep 2024 09:23:47 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/meta-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>openldap スキーマと parser generator</title><link>/diary/posts/2024/0904/</link><pubDate>Wed, 04 Sep 2024 09:23:47 +0900</pubDate><guid>/diary/posts/2024/0904/</guid><description>この開発フェーズではあまり機能拡張を行わない方針としているが、できればやっておいた方がよい機能拡張の1つに openldap サーバーから ldap スキーマを取得する処理がある。ちょうどいま若いメンバーに実装してもらっている大きな機能のバリデーションにも ldap スキーマの情報があると便利そうなので私が対応することに決めた。
openldap サーバーで管理している ldap スキーマの定義は openldap サーバーの Schema Specification と rfc 4512 の2つをみると仕様がわかる。たとえば、次のように AttributeTypeDescription というスキーマの定義は Augmented Backus–Naur form (abnf) という記法で定義されている。rfc などのネットワークプロトコルの世界では abnf のフォーマットで仕様を説明することが多いらしい。
AttributeTypeDescription = &amp;#34;(&amp;#34; whsp numericoid whsp ; AttributeType identifier [ &amp;#34;NAME&amp;#34; qdescrs ] ; name used in AttributeType [ &amp;#34;DESC&amp;#34; qdstring ] ; description [ &amp;#34;OBSOLETE&amp;#34; whsp ] [ &amp;#34;SUP&amp;#34; woid ] ; derived from this other ; AttributeType [ &amp;#34;EQUALITY&amp;#34; woid ; Matching Rule name [ &amp;#34;ORDERING&amp;#34; woid ; Matching Rule name [ &amp;#34;SUBSTR&amp;#34; woid ] ; Matching Rule name [ &amp;#34;SYNTAX&amp;#34; whsp noidlen whsp ] ; Syntax OID [ &amp;#34;SINGLE-VALUE&amp;#34; whsp ] ; default multi-valued [ &amp;#34;COLLECTIVE&amp;#34; whsp ] ; default not collective [ &amp;#34;NO-USER-MODIFICATION&amp;#34; whsp ]; default user modifiable [ &amp;#34;USAGE&amp;#34; whsp AttributeUsage ]; default userApplications whsp &amp;#34;)&amp;#34; AttributeUsage = &amp;#34;userApplications&amp;#34; / &amp;#34;directoryOperation&amp;#34; / &amp;#34;distributedOperation&amp;#34; / ; DSA-shared &amp;#34;dSAOperation&amp;#34; ; DSA-specific, value depends on server openldap サーバーに対して ldap スキーマを取得する方法は How can I fetch schema information from the server?</description><content>&lt;p>この開発フェーズではあまり機能拡張を行わない方針としているが、できればやっておいた方がよい機能拡張の1つに openldap サーバーから ldap スキーマを取得する処理がある。ちょうどいま若いメンバーに実装してもらっている大きな機能のバリデーションにも ldap スキーマの情報があると便利そうなので私が対応することに決めた。&lt;/p>
&lt;p>openldap サーバーで管理している ldap スキーマの定義は openldap サーバーの &lt;a href="https://www.openldap.org/doc/admin26/schema.html">Schema Specification&lt;/a> と &lt;a href="https://www.openldap.org/doc/admin25/schema.html">rfc 4512&lt;/a> の2つをみると仕様がわかる。たとえば、次のように AttributeTypeDescription というスキーマの定義は &lt;a href="https://en.wikipedia.org/wiki/Augmented_Backus%E2%80%93Naur_form">Augmented Backus–Naur form (abnf)&lt;/a> という記法で定義されている。rfc などのネットワークプロトコルの世界では abnf のフォーマットで仕様を説明することが多いらしい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-abnf" data-lang="abnf">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">AttributeTypeDescription&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">&amp;#34;(&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">whsp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">numericoid&lt;/span> &lt;span style="color:#a6e22e">whsp&lt;/span> &lt;span style="color:#75715e">; AttributeType identifier&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ &lt;span style="color:#ae81ff">&amp;#34;NAME&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">qdescrs&lt;/span> ] &lt;span style="color:#75715e">; name used in AttributeType&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ &lt;span style="color:#ae81ff">&amp;#34;DESC&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">qdstring&lt;/span> ] &lt;span style="color:#75715e">; description&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ &lt;span style="color:#ae81ff">&amp;#34;OBSOLETE&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">whsp&lt;/span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ &lt;span style="color:#ae81ff">&amp;#34;SUP&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">woid&lt;/span> ] &lt;span style="color:#75715e">; derived from this other&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">; AttributeType&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ &lt;span style="color:#ae81ff">&amp;#34;EQUALITY&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">woid&lt;/span> &lt;span style="color:#75715e">; Matching Rule name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ &lt;span style="color:#ae81ff">&amp;#34;ORDERING&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">woid&lt;/span> &lt;span style="color:#75715e">; Matching Rule name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ &lt;span style="color:#ae81ff">&amp;#34;SUBSTR&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">woid&lt;/span> ] &lt;span style="color:#75715e">; Matching Rule name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ &lt;span style="color:#ae81ff">&amp;#34;SYNTAX&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">whsp&lt;/span> &lt;span style="color:#a6e22e">noidlen&lt;/span> &lt;span style="color:#a6e22e">whsp&lt;/span> ] &lt;span style="color:#75715e">; Syntax OID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ &lt;span style="color:#ae81ff">&amp;#34;SINGLE-VALUE&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">whsp&lt;/span> ] &lt;span style="color:#75715e">; default multi-valued&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ &lt;span style="color:#ae81ff">&amp;#34;COLLECTIVE&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">whsp&lt;/span> ] &lt;span style="color:#75715e">; default not collective&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ &lt;span style="color:#ae81ff">&amp;#34;NO-USER-MODIFICATION&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">whsp&lt;/span> ]&lt;span style="color:#75715e">; default user modifiable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [ &lt;span style="color:#ae81ff">&amp;#34;USAGE&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">whsp&lt;/span> &lt;span style="color:#a6e22e">AttributeUsage&lt;/span> ]&lt;span style="color:#75715e">; default userApplications&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">whsp&lt;/span> &lt;span style="color:#ae81ff">&amp;#34;)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">AttributeUsage&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">&amp;#34;userApplications&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">&amp;#34;directoryOperation&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">&amp;#34;distributedOperation&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#75715e">; DSA-shared&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">&amp;#34;dSAOperation&amp;#34;&lt;/span> &lt;span style="color:#75715e">; DSA-specific, value depends on server&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>openldap サーバーに対して ldap スキーマを取得する方法は &lt;a href="https://www.openldap.org/faq/data/cache/1366.html">How can I fetch schema information from the server?&lt;/a> の faq に書いてある。search base に対してサブスキーマサブエントリを返す dn を取得する。openldap サーバーの場合 ldap の root ツリーに対応するのは &lt;code>cn=Subschema&lt;/code> がデフォルトとなる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ldapsearch -H ldap://localhost -x -LLL -b dc&lt;span style="color:#f92672">=&lt;/span>example,dc&lt;span style="color:#f92672">=&lt;/span>com -s base subschemaSubentry
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dn: dc&lt;span style="color:#f92672">=&lt;/span>example,dc&lt;span style="color:#f92672">=&lt;/span>com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>subschemaSubentry: cn&lt;span style="color:#f92672">=&lt;/span>Subschema
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この dn にスキーマ情報の属性が格納されているのでそれらを取得する。このスキーマ情報は operational attributes として管理されているので &lt;code>+&lt;/code> という記号が operational attributes 属性群をまとめて取得するキーワードになっている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ldapsearch -x -LLL -b cn&lt;span style="color:#f92672">=&lt;/span>Subschema -s base &lt;span style="color:#e6db74">&amp;#39;(objectClass=subschema)&amp;#39;&lt;/span> +
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これでスキーマ情報を取得できる。先に書いた AttributeTypeDescription の実際のスキーマ情報は次のような内容になる。こういったスキーマのテキスト情報をたくさん取得できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-abnf" data-lang="abnf">&lt;span style="display:flex;">&lt;span>( &lt;span style="color:#f92672">2&lt;/span>.&lt;span style="color:#f92672">5&lt;/span>.&lt;span style="color:#f92672">4&lt;/span>.&lt;span style="color:#f92672">0&lt;/span> &lt;span style="color:#a6e22e">NAME&lt;/span> &amp;#39;&lt;span style="color:#a6e22e">objectClass&lt;/span>&amp;#39; &lt;span style="color:#a6e22e">DESC&lt;/span> &amp;#39;&lt;span style="color:#a6e22e">RFC4512&lt;/span>: &lt;span style="color:#a6e22e">object&lt;/span> &lt;span style="color:#a6e22e">classes&lt;/span> &lt;span style="color:#a6e22e">of&lt;/span> &lt;span style="color:#a6e22e">the&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span>&amp;#39; &lt;span style="color:#a6e22e">EQUALITY&lt;/span> &lt;span style="color:#a6e22e">objectIdentifierMatch&lt;/span> &lt;span style="color:#a6e22e">SYNTAX&lt;/span> &lt;span style="color:#f92672">1&lt;/span>.&lt;span style="color:#f92672">3&lt;/span>.&lt;span style="color:#f92672">6&lt;/span>.&lt;span style="color:#f92672">1&lt;/span>.&lt;span style="color:#f92672">4&lt;/span>.&lt;span style="color:#f92672">1&lt;/span>.&lt;span style="color:#f92672">1466&lt;/span>.&lt;span style="color:#f92672">115&lt;/span>.&lt;span style="color:#f92672">121&lt;/span>.&lt;span style="color:#f92672">1&lt;/span>.&lt;span style="color:#f92672">38&lt;/span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="go-の-parser-generator-調査">go の parser generator 調査&lt;/h2>
&lt;p>この手のものは abnf から parser をコード生成するのが一般的なやり方かな？と、まずは go で使えそうな parser generator について調べてみた。意外と go 製の parser generator はみつからなかった。私が発見できたのは次の3つぐらい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pkg.go.dev/golang.org/x/tools/cmd/goyacc">golang.org/x/tools/cmd/goyacc&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/goccmack/gocc">goccmack/gocc&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/antlr4-go/antlr">antlr4-go/antlr&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>最後の antlr は java 製のツールだけれども、go のソースコードを出力できるので go 実装の parser をコード生成できるという意図で対象としている。goyacc は abnf の文法を yacc に変換しないといけない。&lt;a href="https://github.com/yinyin/go-ldap-schema-parser/blob/master/parser.y">yacc で実装した ldap スキーマの parser&lt;/a> を公開しているのもみかけたが、yacc は違うなと思って除外した。antlr も abnf から専用の文法に変換しないといけないから不採用にした。&lt;/p>
&lt;p>それで消去法的に bnf (ebnf) を扱える gocc で parser をコード生成できないかを調査してみた。しかし、半日ほど bnf を書いて実際にコード生成してみて不採用とした。ebnf の options 記法として &lt;code>[...]&lt;/code> に gocc が対応していないようにみえた。この記法がないと ldap スキーマの文法定義が煩雑になる。&lt;a href="https://github.com/goccmack/gocc/issues/21#issuecomment-216398402">issue のコメント&lt;/a> をみると、lexer は対応したが、parser は対応していないといったコメントがある。コード生成しようとするとエラーになるので未対応なのかもしれない。bnf でこの options 記法相当のものを自分で文法定義すると、1つ2つなら簡単に変換できるが、数個の組み合わせがあると途端に文法の複雑さが大きくなるように思える。abnf から bnf に変換する過程で文法が複雑になってしまうとその後の保守ができなくなる懸念が生じるので断念した。&lt;/p>
&lt;p>今回の gocc の採用は却下したが、軽く触ってみて gocc 自体の感触はよかった。シンプルな bnf で表現できるものであれば機会があれば採用してもよいと思える。&lt;a href="https://github.com/goccmack/gocc/tree/master/example">gocc example&lt;/a> をみればわかるが、bnf を書きながら単体テストのコードを実行して動作検証を小さく簡潔にできる。これは parser のコード生成の開発サイクルは速くできそうに感じた。こういう小さく単体で動くツールは好み。&lt;/p>
&lt;p>最終的な結論としては parser generator は使わず、自前で parser を実装することを決めた。&lt;/p></content></item><item><title>scim 調査に着手</title><link>/diary/posts/2023/0627/</link><pubDate>Tue, 27 Jun 2023 07:33:15 +0900</pubDate><guid>/diary/posts/2023/0627/</guid><description>22時に寝て24時に起きて4時に起きて6時に起きた。実家だとやることないので寝るのも早くなる。早く起きているので始業も7時半ぐらいになる。早起きは三文の徳。
リモートワークのタグを新設 神戸のオフィスに行かなかった日は day off というタグを付けている。名前の通り、お休みしたということを表す。この定義に従うと、実家に帰ってリモートワークをしたときもお休みになってしまうため、それを区別するように remote work というタグを作った。
scim 調査 id 連携の文脈で System for Cross-domain Identity Management (頭文字をとって SCIM、すきーむと呼ばれている) という標準がある。基本的には rest api とスキーマを扱うように仕様が決められていて、それに準拠したサービス間で id 連携を標準化する狙いがある。id 連携と同じ用途を表す用語として id プロビジョニングという用語もあるが、多くのクラウドサービスでは id プロビジョニングのために scim 対応していたりする。
たまたまサイボウズさんが okta と scim 連携に対応しているプレスリリースをみかけた。
サイボウズの「cybozu.com」がプロビジョニング自動化実現のため、「Okta Integration Network」とのSCIM連携に対応 その延長で調査していたところ、go の scim ツールを提供していることに気付いた。しかもこれを作っているのが Maki さん。これはソースを読んでおこうと思った次第。Maki さんはメルカリに所属していたと思うのでこれは副業でやっているのかな？
github.com/cybozu-go/scim github.com/cybozu-go/scim-server scim-server は scim ライブラリを実際に使うときの参照実装としてアプリケーションの開発者に開発の雰囲気を伝えるための実装になっている。これ自体をプロダクトのサーバーとして使うわけではない。sqlite を使ってユーザー／グループの crud な操作と検索機能を提供している。
scim ライブラリのソースコードも軽くざっと読んでみた。github.com/lestrrat-go/sketch という go でスキーマを記述してコード生成する Maki さん製のツールがある。これを起点に scim のプロトコルやリソースの仕様にしたがって go のコードでスキーマを定義し、リソースに関する go のコードと scim スキーマを自動生成している。sketch というツールに関連して他にも Maki 製のメタプログラミングライブラリを多用していて、scim の標準化されている部分のエンドポイントやリソースのインターフェース部分をすべてコード生成している。</description><content>&lt;p>22時に寝て24時に起きて4時に起きて6時に起きた。実家だとやることないので寝るのも早くなる。早く起きているので始業も7時半ぐらいになる。早起きは三文の徳。&lt;/p>
&lt;h2 id="リモートワークのタグを新設">リモートワークのタグを新設&lt;/h2>
&lt;p>神戸のオフィスに行かなかった日は &lt;a href="/diary/diary/tags/day-off/">day off&lt;/a> というタグを付けている。名前の通り、お休みしたということを表す。この定義に従うと、実家に帰ってリモートワークをしたときもお休みになってしまうため、それを区別するように &lt;a href="/diary/diary/tags/remote-work/">remote work&lt;/a> というタグを作った。&lt;/p>
&lt;h2 id="scim-調査">scim 調査&lt;/h2>
&lt;p>id 連携の文脈で &lt;a href="https://en.wikipedia.org/wiki/System_for_Cross-domain_Identity_Management">System for Cross-domain Identity Management&lt;/a>
(頭文字をとって SCIM、すきーむと呼ばれている) という標準がある。基本的には rest api とスキーマを扱うように仕様が決められていて、それに準拠したサービス間で id 連携を標準化する狙いがある。id 連携と同じ用途を表す用語として id プロビジョニングという用語もあるが、多くのクラウドサービスでは id プロビジョニングのために scim 対応していたりする。&lt;/p>
&lt;p>たまたまサイボウズさんが okta と scim 連携に対応しているプレスリリースをみかけた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.okta.com/jp/press-room/press-releases/okta-cybozu-scim/">サイボウズの「cybozu.com」がプロビジョニング自動化実現のため、「Okta Integration Network」とのSCIM連携に対応&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>その延長で調査していたところ、go の scim ツールを提供していることに気付いた。しかもこれを作っているのが &lt;a href="https://lestrrat.github.io/">Maki&lt;/a> さん。これはソースを読んでおこうと思った次第。Maki さんはメルカリに所属していたと思うのでこれは副業でやっているのかな？&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/cybozu-go/scim">github.com/cybozu-go/scim&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/cybozu-go/scim-server">github.com/cybozu-go/scim-server&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>scim-server は scim ライブラリを実際に使うときの参照実装としてアプリケーションの開発者に開発の雰囲気を伝えるための実装になっている。これ自体をプロダクトのサーバーとして使うわけではない。sqlite を使ってユーザー／グループの crud な操作と検索機能を提供している。&lt;/p>
&lt;p>scim ライブラリのソースコードも軽くざっと読んでみた。&lt;a href="https://github.com/lestrrat-go/sketch">github.com/lestrrat-go/sketch&lt;/a> という go でスキーマを記述してコード生成する Maki さん製のツールがある。これを起点に scim のプロトコルやリソースの仕様にしたがって go のコードでスキーマを定義し、リソースに関する go のコードと scim スキーマを自動生成している。sketch というツールに関連して他にも Maki 製のメタプログラミングライブラリを多用していて、scim の標準化されている部分のエンドポイントやリソースのインターフェース部分をすべてコード生成している。&lt;/p>
&lt;p>go generate やコード生成の実際の応用例として非常に参考になる。このライブラリは scim のプロトコル仕様に関する開発者と、そのエンドポイントの実際の処理 (バックエンド) の開発者を明確に分離するという開発体制を期待している。scim に関するところは Maki さんが独りでコード生成を多用してオープンなプロトコル仕様の開発を担当し、そのバックエンドをサイボウズさんの開発者が実装するという分業体制を想定しているようにみえる。&lt;/p>
&lt;p>scim 対応のアプリケーション開発のプロトコル部分を外部に委譲するといった設計になっているが、scim が十分に安定していてプロトコルの仕様が変わらないのであれば理に適っているとも考えられる。バックエンドの開発者はいくらか sketch の学習コストを強いることになる。そのため、アプリケーションはその学習コストを支払ってもコード生成のメリットが上回るだけの規模や特性を要求する。おそらく scim はそれだけの価値があると判断されたのだと推測する。&lt;/p>
&lt;p>私はメタプログラミングが好きな方なのでこういうやり方もあるんだなと設計の参考になった。またコード生成の要件があったときにソースを参考にしようと思う。&lt;/p></content></item></channel></rss>