<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mock on</title><link>/diary/tags/mock/</link><description>Recent content in Mock on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 17 Feb 2022 07:41:24 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/mock/index.xml" rel="self" type="application/rss+xml"/><item><title>Mockito を触ってみた</title><link>/diary/posts/2022/0217/</link><pubDate>Thu, 17 Feb 2022 07:41:24 +0900</pubDate><guid>/diary/posts/2022/0217/</guid><description>0時に寝て4時に起きて6時に起きた。6時過ぎに slack でインフラ担当者から作業の報告があってその対応してた。
Mockito のモック作成 Spring 5 WebClient のテストコードを書いてみた。Mockito というモックライブラリを使っているのをみかけたのでそれを使うことにした。当初は WebClient そのもののモックを用意して、どんなメソッドを呼び出しても Null オブジェクトのように無視すればいいんじゃないかと思ってたんだけど、Mockito はそういう用途に使うものではなく、それぞれのメソッドごとにモックを返すような設定ができる。次のような WebClient のメソッドチェーンでリクエストするようなモックを考える。
var response = this.client .get() .uri(uriBuilder -&amp;gt; uriBuilder .path(path) .queryParam(&amp;#34;param&amp;#34;, param) .build()) .retrieve() .bodyToMono(MyResponse.class) .block(); 他にもっとよいやり方があるかもしれないけど、私がよくわかってなくてこんなやり方しかできなかった。最終的には block() を呼び出したときに任意のレスポンスを取得できればよいのだけど、メソッド単位にモックを呼び出していかないと型チェックやら実行時エラーやらで意図したようにテストできなかった。これだけをみたらメソッドチェーンのモック作りは面倒にみえる。Mockito がどうやってこれを実現しているのかわからないけど、すごい仕組みだなとは思った。
@MockBean WebClient client; @Mock WebClient.RequestHeadersUriSpec requestHeadersUriSpec; @Mock WebClient.RequestHeadersSpec requestHeadersSpec; @Mock WebClient.ResponseSpec responseSpec; @Mock Mono&amp;lt;MyResponse&amp;gt; mono; private void mockWebClientMethodChain(MyResponse response) { Mockito.when(client.get()).thenReturn(requestHeadersUriSpec); Mockito.when(requestHeadersUriSpec.uri((Function&amp;lt;UriBuilder, URI&amp;gt;) Mockito.any())).thenReturn(requestHeadersSpec); Mockito.when(requestHeadersSpec.retrieve()).thenReturn(responseSpec); Mockito.when(responseSpec.bodyToMono(MyResponse.class)).thenReturn(mono); Mockito.when(mono.block()).thenReturn(response); }</description><content>&lt;p>0時に寝て4時に起きて6時に起きた。6時過ぎに slack でインフラ担当者から作業の報告があってその対応してた。&lt;/p>
&lt;h2 id="mockito-のモック作成">Mockito のモック作成&lt;/h2>
&lt;p>&lt;a href="https://www.baeldung.com/spring-5-webclient">Spring 5 WebClient&lt;/a> のテストコードを書いてみた。&lt;a href="https://site.mockito.org/">Mockito&lt;/a> というモックライブラリを使っているのをみかけたのでそれを使うことにした。当初は WebClient そのもののモックを用意して、どんなメソッドを呼び出しても Null オブジェクトのように無視すればいいんじゃないかと思ってたんだけど、Mockito はそういう用途に使うものではなく、それぞれのメソッドごとにモックを返すような設定ができる。次のような WebClient のメソッドチェーンでリクエストするようなモックを考える。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> response &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">get&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">uri&lt;/span>(uriBuilder &lt;span style="color:#f92672">-&amp;gt;&lt;/span> uriBuilder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">path&lt;/span>(path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">queryParam&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;param&amp;#34;&lt;/span>, param)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">build&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">retrieve&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">bodyToMono&lt;/span>(MyResponse.&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">block&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>他にもっとよいやり方があるかもしれないけど、私がよくわかってなくてこんなやり方しかできなかった。最終的には &lt;code>block()&lt;/code> を呼び出したときに任意のレスポンスを取得できればよいのだけど、メソッド単位にモックを呼び出していかないと型チェックやら実行時エラーやらで意図したようにテストできなかった。これだけをみたらメソッドチェーンのモック作りは面倒にみえる。Mockito がどうやってこれを実現しているのかわからないけど、すごい仕組みだなとは思った。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@MockBean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebClient client;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Mock&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebClient.&lt;span style="color:#a6e22e">RequestHeadersUriSpec&lt;/span> requestHeadersUriSpec;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Mock&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebClient.&lt;span style="color:#a6e22e">RequestHeadersSpec&lt;/span> requestHeadersSpec;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Mock&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebClient.&lt;span style="color:#a6e22e">ResponseSpec&lt;/span> responseSpec;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Mock&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Mono&lt;span style="color:#f92672">&amp;lt;&lt;/span>MyResponse&lt;span style="color:#f92672">&amp;gt;&lt;/span> mono;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">mockWebClientMethodChain&lt;/span>(MyResponse response) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Mockito.&lt;span style="color:#a6e22e">when&lt;/span>(client.&lt;span style="color:#a6e22e">get&lt;/span>()).&lt;span style="color:#a6e22e">thenReturn&lt;/span>(requestHeadersUriSpec);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Mockito.&lt;span style="color:#a6e22e">when&lt;/span>(requestHeadersUriSpec.&lt;span style="color:#a6e22e">uri&lt;/span>((Function&lt;span style="color:#f92672">&amp;lt;&lt;/span>UriBuilder, URI&lt;span style="color:#f92672">&amp;gt;&lt;/span>) Mockito.&lt;span style="color:#a6e22e">any&lt;/span>())).&lt;span style="color:#a6e22e">thenReturn&lt;/span>(requestHeadersSpec);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Mockito.&lt;span style="color:#a6e22e">when&lt;/span>(requestHeadersSpec.&lt;span style="color:#a6e22e">retrieve&lt;/span>()).&lt;span style="color:#a6e22e">thenReturn&lt;/span>(responseSpec);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Mockito.&lt;span style="color:#a6e22e">when&lt;/span>(responseSpec.&lt;span style="color:#a6e22e">bodyToMono&lt;/span>(MyResponse.&lt;span style="color:#a6e22e">class&lt;/span>)).&lt;span style="color:#a6e22e">thenReturn&lt;/span>(mono);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Mockito.&lt;span style="color:#a6e22e">when&lt;/span>(mono.&lt;span style="color:#a6e22e">block&lt;/span>()).&lt;span style="color:#a6e22e">thenReturn&lt;/span>(response);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item></channel></rss>