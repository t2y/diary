<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>game on forest nook</title><link>/diary/tags/game/</link><description>Recent content in game on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Thu, 23 Nov 2023 00:51:07 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/game/index.xml" rel="self" type="application/rss+xml"/><item><title>なにも手につかない休日</title><link>/diary/posts/2023/1123/</link><pubDate>Thu, 23 Nov 2023 00:51:07 +0900</pubDate><guid>/diary/posts/2023/1123/</guid><description>1時までオフィスで作業して3時に寝てやや吐き気で起きて9時前に起きた。夕方から「翔んで埼玉」の1作目をみた。想像した雰囲気とはちょっと違っていた。私が関東圏に関心がないからそれほど親近感はなかった。
呪術廻戦のスマホゲーム コロナ禍明けから広告系の会社の株価が落ちている。サイバーの23年9月期、純利益78%減「ウマ娘」失速 にあるように、サイバーエージェントはとくにウマ娘のヒットが落ち着きあるようで、さらに株価が落ちていた。直近の高値2,441円から 半値八掛け二割引 で算出すると781円になる。
2441 * 0.5 * 0.8 * 0.8 ≠ 781 円
1年ぐらい前からサイバーエージェントの株価もたまたま観測していた。この計算式はだいたい1/3ぐらいと覚えていたので800円台が底値かなと目安にみていて、いま計算し直したら781円だった。そろそろ底値付近かなと少しずつ買っていた。直近の約定日の時系列の推移が次になる。
日付 始値 高値 安値 終値 出来高 調整後終値 2023-07-27 959 970 900.4 923.8 33,373,800 923.8 2023-09-08 900 901.9 851.7 854.8 26,553,700 854.8 2023-09-22 790.6 812.1 787.4 802.7 8,628,700 802.7 2023-10-20 782 785.3 775 777.9 3,993,600 777.9 2023-10-27 768.7 774.7 758.2 773.2 5,453,700 773.2 2023-11-10 815.6 815.6 792.4 810.7 6,552,700 810.7 2023-11-16 847 850.3 824.2 831.</description><content>&lt;p>1時までオフィスで作業して3時に寝てやや吐き気で起きて9時前に起きた。夕方から「翔んで埼玉」の1作目をみた。想像した雰囲気とはちょっと違っていた。私が関東圏に関心がないからそれほど親近感はなかった。&lt;/p>
&lt;h2 id="呪術廻戦のスマホゲーム">呪術廻戦のスマホゲーム&lt;/h2>
&lt;p>コロナ禍明けから広告系の会社の株価が落ちている。&lt;a href="https://www.nikkei.com/article/DGXZQOUC319TX0R31C23A0000000/">サイバーの23年9月期、純利益78%減「ウマ娘」失速&lt;/a> にあるように、サイバーエージェントはとくにウマ娘のヒットが落ち着きあるようで、さらに株価が落ちていた。直近の高値2,441円から &lt;a href="https://www.nomura.co.jp/terms/japan/ha/a01849.html">半値八掛け二割引&lt;/a> で算出すると781円になる。&lt;/p>
&lt;blockquote>
&lt;p>2441 * 0.5 * 0.8 * 0.8 ≠ 781 円&lt;/p>
&lt;/blockquote>
&lt;p>1年ぐらい前からサイバーエージェントの株価もたまたま観測していた。この計算式はだいたい1/3ぐらいと覚えていたので800円台が底値かなと目安にみていて、いま計算し直したら781円だった。そろそろ底値付近かなと少しずつ買っていた。直近の約定日の時系列の推移が次になる。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">日付&lt;/th>
&lt;th style="text-align:right">始値&lt;/th>
&lt;th style="text-align:right">高値&lt;/th>
&lt;th style="text-align:right">安値&lt;/th>
&lt;th style="text-align:right">終値&lt;/th>
&lt;th style="text-align:right">出来高&lt;/th>
&lt;th style="text-align:right">調整後終値&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">2023-07-27&lt;/td>
&lt;td style="text-align:right">959&lt;/td>
&lt;td style="text-align:right">970&lt;/td>
&lt;td style="text-align:right">900.4&lt;/td>
&lt;td style="text-align:right">923.8&lt;/td>
&lt;td style="text-align:right">33,373,800&lt;/td>
&lt;td style="text-align:right">923.8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">2023-09-08&lt;/td>
&lt;td style="text-align:right">900&lt;/td>
&lt;td style="text-align:right">901.9&lt;/td>
&lt;td style="text-align:right">851.7&lt;/td>
&lt;td style="text-align:right">854.8&lt;/td>
&lt;td style="text-align:right">26,553,700&lt;/td>
&lt;td style="text-align:right">854.8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">2023-09-22&lt;/td>
&lt;td style="text-align:right">790.6&lt;/td>
&lt;td style="text-align:right">812.1&lt;/td>
&lt;td style="text-align:right">787.4&lt;/td>
&lt;td style="text-align:right">802.7&lt;/td>
&lt;td style="text-align:right">8,628,700&lt;/td>
&lt;td style="text-align:right">802.7&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">2023-10-20&lt;/td>
&lt;td style="text-align:right">782&lt;/td>
&lt;td style="text-align:right">785.3&lt;/td>
&lt;td style="text-align:right">775&lt;/td>
&lt;td style="text-align:right">777.9&lt;/td>
&lt;td style="text-align:right">3,993,600&lt;/td>
&lt;td style="text-align:right">777.9&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">2023-10-27&lt;/td>
&lt;td style="text-align:right">768.7&lt;/td>
&lt;td style="text-align:right">774.7&lt;/td>
&lt;td style="text-align:right">758.2&lt;/td>
&lt;td style="text-align:right">773.2&lt;/td>
&lt;td style="text-align:right">5,453,700&lt;/td>
&lt;td style="text-align:right">773.2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">2023-11-10&lt;/td>
&lt;td style="text-align:right">815.6&lt;/td>
&lt;td style="text-align:right">815.6&lt;/td>
&lt;td style="text-align:right">792.4&lt;/td>
&lt;td style="text-align:right">810.7&lt;/td>
&lt;td style="text-align:right">6,552,700&lt;/td>
&lt;td style="text-align:right">810.7&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">2023-11-16&lt;/td>
&lt;td style="text-align:right">847&lt;/td>
&lt;td style="text-align:right">850.3&lt;/td>
&lt;td style="text-align:right">824.2&lt;/td>
&lt;td style="text-align:right">831.9&lt;/td>
&lt;td style="text-align:right">6,180,300&lt;/td>
&lt;td style="text-align:right">831.9&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">2023-11-17&lt;/td>
&lt;td style="text-align:right">831.9&lt;/td>
&lt;td style="text-align:right">833.9&lt;/td>
&lt;td style="text-align:right">817.3&lt;/td>
&lt;td style="text-align:right">819.6&lt;/td>
&lt;td style="text-align:right">5,098,200&lt;/td>
&lt;td style="text-align:right">819.6&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>ここ2-3日で気付いたら評価益が増えているなと気付いて調べたら &lt;a href="https://jujutsuphanpara.jp/">呪術廻戦 ファントムパレード&lt;/a> というサイバーエージェントのグループ企業がゲームをリリースしてランキングが1位になっているらしい。一応チェックするかと思って、午前中はこのゲームをダウンロードして2-3時間やってみた。現時点ではソーシャル要素はほとんどなく、原作に忠実なキャラクターゲームという構成になっている。ストーリーのムービーはアニメの台詞をそのままをゲームの映像にあわせて流しているようなもの。私は原作をみたことがあるからスキップするけど、知らない人たちはこれをみながらストーリーを進めていくのだろうか。&lt;/p>
&lt;p>全体として原作ファンならそこそこ楽しめると思う。五条悟が最強で領域展開しない限り攻撃が当たらない、しかし最強なので7ターンしたら戦闘離脱 (戦闘不能) するという設定になっている。ある程度、強い敵と連続的に戦闘しないといけないときは途中離脱してしまうのでそれでゲームバランスを調整している。最初のガチャだけ引き直しが出来て、自分の好きなキャラが出るまでやり直せる。それで五条悟が出るまで粘った。20回ぐらい引き直しした。&lt;/p>
&lt;p>戦闘シーンもよく出来ているし、ムービーや声優さんの台詞もあり、大きな欠点のない普通のゲームといった印象。原因はわからないが、タップの操作を受け付けなくなるときがちらほらある。通信でブロックしているのか、イベントを処理できていないのか。プレイヤーだけでなく、アイテムやスキルにレベルを上げる要素があって、完凸を目指すような人は2-3年はやり続けるのかもしれない。ガチャで取得した五条悟の必殺技は術式反転「赫」になる。半年後のガチャでは虚式「茈」も実装されるのだろうと推測がつく。たしかに茈の戦闘シーンをみてみたい。出足からランキング1位でアクティブユーザーが多いなら予算もついて今後もゲームのコンテンツがパワーアップしていく可能性は高い。大ヒットしないまでも、普通のヒット作になって2-3年は続くのではないかと思えた。一方で私のような、ゲームも呪術廻戦の漫画 (アニメ) もにわかファンには、レベルをずっと上げ続けないといけないゲームはしんどいので、課金しないならそのうちに離脱してしまうと思う。時間がないから継続できない。&lt;/p>
&lt;p>たまたまなのか、トレンド転換としてもよいタイミングなので順張りしながら様子をみてみようと思う。&lt;/p></content></item><item><title>戦略シミュレーションと特性</title><link>/diary/posts/2022/0813/</link><pubDate>Sat, 13 Aug 2022 11:56:29 +0900</pubDate><guid>/diary/posts/2022/0813/</guid><description>ストレッチ 今日の開脚幅は開始前158cmで、ストレッチ後161cmだった。先週よりやや数字が悪くなった。それでも先週はストレッチを受けていても体全体のだるさのようなものを感じていたのが、今回はちゃんと筋を伸ばしている感覚があって先週の体調の悪さはなくなったように思える。右股関節周りの詰まりに加えて、右前ももの張りがいつもより大きかった気がする。毎週ストレッチを受けていると物理的な体調の良し悪しもわかるのがよい。
わざと負ける理由 一昨日からリアルタイム対戦 にはまっている。数をこなしていてわかってきたことがたくさんある。戦略シミュレーションゲームはやればやるほど学びがある。
パーティーの特性によって相性のよい対戦相手とそうじゃないのがある リアルタイム対戦のマッチングは選択できないのでマッチングしないと相手がわからない 相性の悪い相手だとマッチング時点で辞退する (負けを認める) 相手もいる こっちの戦略に呼び込むための布石がいる 3つぐらい戦略を用意して最終的にどの戦略に呼び込むかを相手の動きをみながら考えないといけない キャラを動かす制限時間が15秒なのでわりと忙しい こちらの布石にはめて最終的に勝てると達成感がある 中盤まで負けていて向こうに勝ったと思わせて逆転できるとなお嬉しい ダークドレアム は奇数ターン (1, 3, 5, 7 &amp;hellip;) ごとに攻撃力・守備力・すばやさ・かしこさが1段階上がるバフがかかる ダークドレアムはすばやさが低いので徐々にすばやさが上がっていって先制できるようになると最後の1手違いで勝つ状況が出来上がる ダークドレアムで5ターンまで戦闘を継続できれば勝率が高い すばやさの高いパーティーには何もできないから勝てない 高すばやさ (且つ、高火力または状態異常) パーティーには絶対に勝てない リアルタイム対戦でダークドレアムがあまり使われていない理由だと思う 初手前にパーティーの半分ぐらいがやられている 相手の攻撃が届かない初期配置がないので絶対に防げない 状態異常攻撃の主体パーティーは対戦していておもしろくない 混乱・麻痺・眠り・魅了といった状態異常になると2ターン何もできない 状態異常攻撃 + 高すばやさのキャラの攻撃を防ぐ方法はない 創造神マデサゴーラ が出てきたら高い確率で勝てない パーティー編成のウェイト制限がうまく調整されている 高ランク (ステータス高い) のキャラばかりを編成できないようにウェイト制限がある これにより、パーティー編成が4人か5人かにわかれる 低ランク (ステータス低い) のキャラはウェイトも低いので5人目には入れやすい たたかいのベホイム が使える ホイミスライム が活躍したりする 本題のわざと負ける理由だが、わかってきた。リアルタイム対戦のマッチングは同じランク内で行われる。上位のランクになればなるほど、対戦相手も強くなる (強くなければ上位のランクに上がれない) 。一定量のポイントを獲得するとランクアップしていけるが、負けるとポイントが下がるペナルティがつく。一定のランクで勝ち負けを繰り返すとそのランクに留まり続けるということができる。私も自分の限界までランクアップしてみて気付いたのは周りも強いので限界に到達すると勝ったり負けたりを繰り返す。ここで別のルールで勝った回数に応じてコインが支払われるボーナスがある。強い人が低いランクで勝ち数を稼ぐのは限界に近いランクで勝ったり負けたりを繰り返すよりもはるかに効率がよい。それはリアルタイム対戦のマッチングに時間制限があるからなおさらそうなる。実力が均衡した相手と時間をたくさん使って2勝3敗を繰り返すよりも、わざと負けながら弱い相手に勝ち続ける5勝?敗を繰り返す方が絶対数としての勝ち数を稼ぐには効率がよい。おそらく負けたときのペナルティがあるランクからわざと負ける人が現れ始めていると思う。なるほどなぁ。</description><content>&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前158cmで、ストレッチ後161cmだった。先週よりやや数字が悪くなった。それでも先週はストレッチを受けていても体全体のだるさのようなものを感じていたのが、今回はちゃんと筋を伸ばしている感覚があって先週の体調の悪さはなくなったように思える。右股関節周りの詰まりに加えて、右前ももの張りがいつもより大きかった気がする。毎週ストレッチを受けていると物理的な体調の良し悪しもわかるのがよい。&lt;/p>
&lt;h2 id="わざと負ける理由">わざと負ける理由&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/0812/#ドラクエタクトのリアルタイム対戦">一昨日からリアルタイム対戦&lt;/a> にはまっている。数をこなしていてわかってきたことがたくさんある。戦略シミュレーションゲームはやればやるほど学びがある。&lt;/p>
&lt;ul>
&lt;li>パーティーの特性によって相性のよい対戦相手とそうじゃないのがある
&lt;ul>
&lt;li>リアルタイム対戦のマッチングは選択できないのでマッチングしないと相手がわからない&lt;/li>
&lt;li>相性の悪い相手だとマッチング時点で辞退する (負けを認める) 相手もいる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>こっちの戦略に呼び込むための布石がいる
&lt;ul>
&lt;li>3つぐらい戦略を用意して最終的にどの戦略に呼び込むかを相手の動きをみながら考えないといけない&lt;/li>
&lt;li>キャラを動かす制限時間が15秒なのでわりと忙しい&lt;/li>
&lt;li>こちらの布石にはめて最終的に勝てると達成感がある
&lt;ul>
&lt;li>中盤まで負けていて向こうに勝ったと思わせて逆転できるとなお嬉しい&lt;/li>
&lt;li>&lt;a href="https://game8.jp/dqtact/395606">ダークドレアム&lt;/a> は奇数ターン (1, 3, 5, 7 &amp;hellip;) ごとに攻撃力・守備力・すばやさ・かしこさが1段階上がるバフがかかる
&lt;ul>
&lt;li>ダークドレアムはすばやさが低いので徐々にすばやさが上がっていって先制できるようになると最後の1手違いで勝つ状況が出来上がる&lt;/li>
&lt;li>ダークドレアムで5ターンまで戦闘を継続できれば勝率が高い&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>すばやさの高いパーティーには何もできないから勝てない
&lt;ul>
&lt;li>高すばやさ (且つ、高火力または状態異常) パーティーには絶対に勝てない
&lt;ul>
&lt;li>リアルタイム対戦でダークドレアムがあまり使われていない理由だと思う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>初手前にパーティーの半分ぐらいがやられている&lt;/li>
&lt;li>相手の攻撃が届かない初期配置がないので絶対に防げない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>状態異常攻撃の主体パーティーは対戦していておもしろくない
&lt;ul>
&lt;li>混乱・麻痺・眠り・魅了といった状態異常になると2ターン何もできない&lt;/li>
&lt;li>状態異常攻撃 + 高すばやさのキャラの攻撃を防ぐ方法はない
&lt;ul>
&lt;li>&lt;a href="https://game8.jp/dqtact/455291">創造神マデサゴーラ&lt;/a> が出てきたら高い確率で勝てない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>パーティー編成のウェイト制限がうまく調整されている
&lt;ul>
&lt;li>高ランク (ステータス高い) のキャラばかりを編成できないようにウェイト制限がある&lt;/li>
&lt;li>これにより、パーティー編成が4人か5人かにわかれる&lt;/li>
&lt;li>低ランク (ステータス低い) のキャラはウェイトも低いので5人目には入れやすい
&lt;ul>
&lt;li>&lt;a href="https://game8.jp/dqtact/390466">たたかいのベホイム&lt;/a> が使える &lt;a href="https://game8.jp/dqtact/344037">ホイミスライム&lt;/a> が活躍したりする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>本題のわざと負ける理由だが、わかってきた。リアルタイム対戦のマッチングは同じランク内で行われる。上位のランクになればなるほど、対戦相手も強くなる (強くなければ上位のランクに上がれない) 。一定量のポイントを獲得するとランクアップしていけるが、負けるとポイントが下がるペナルティがつく。一定のランクで勝ち負けを繰り返すとそのランクに留まり続けるということができる。私も自分の限界までランクアップしてみて気付いたのは周りも強いので限界に到達すると勝ったり負けたりを繰り返す。ここで別のルールで勝った回数に応じてコインが支払われるボーナスがある。強い人が低いランクで勝ち数を稼ぐのは限界に近いランクで勝ったり負けたりを繰り返すよりもはるかに効率がよい。それはリアルタイム対戦のマッチングに時間制限があるからなおさらそうなる。実力が均衡した相手と時間をたくさん使って2勝3敗を繰り返すよりも、わざと負けながら弱い相手に勝ち続ける5勝?敗を繰り返す方が絶対数としての勝ち数を稼ぐには効率がよい。おそらく負けたときのペナルティがあるランクからわざと負ける人が現れ始めていると思う。なるほどなぁ。&lt;/p></content></item><item><title>dto に対するリフレクションの是非</title><link>/diary/posts/2022/0812/</link><pubDate>Fri, 12 Aug 2022 08:12:19 +0900</pubDate><guid>/diary/posts/2022/0812/</guid><description>1時に寝て7時に起きた。
ドラクエタクトのリアルタイム対戦 もう2年間もずっとゲームし続けている。最近 リアルタイム対戦 モードがリリースされた。全然やる気なかったんやけど、リアルタイム対戦で得たコインでもらえるアイテムが魅力的なのでやることにした。そして、実際にアルタイム対戦をやってみるとはまる。運営の手の平でゲームさせられている。
人間が相手で狡猾な戦略で負けると悔しい 人間が相手の戦略の方が創意工夫があって学びになる 実際にやり始めるとおもしろくなってきてずっとやってしまう できる時間を制限しているというのもうまいやり方だなと思っている。朝・昼・晩の7-9時、12-14時、19-22時に制限している。そこまでしてリアルタイムに人間同士をマッチングしてゲームさせる必要があるのか？という素朴な疑問に私は辿りつくが、おそらくゲーム開発者からみたらそうじゃない大事なユーザー体験があるのだろうと推測する。あと不思議なことが1つ。マッチングしていると、たまにわざと負けてくれる人がマッチングされる。チームのメンバーが1人で向こうが先行なら戦いを辞退 (こちらの勝ちになる) するし、こちらが先行でもすぐにやっつけられる。ちゃんと統計をとってないけど、20回に1回ぐらいの頻度でわざと負けてくれる人とマッチングする。あの人たちは一体どういう理由でわざと負けているんだろう？
リフレクションのユーティリティを作った いまお手伝いで開発している api サーバーは外界と内部のデータの境界を明確にわけていて、外向けのオブジェクト定義と内部向けのオブジェクト定義が異なる。ほとんど同じデータであっても dto を介して値を受け渡ししないといけない。そうすると、次のような dto と他のオブジェクトとの値渡しのための処理が型ごとにあちこちに実装されている。
private MyRecord toMyRecord(MyDataInput in) { var record = new MyRecord(); record.id = in.id record.name = in.name; record.someId1 = in.someId1; record.someId2 = in.someId2; record.someId3 = in.someId3; record.sortOrder = in.sortOrder; record.createUser = in.createUser; record.updateUser = in.updateUser; ... } メンバー数が20-30ぐらいあると、たまに値のセット忘れがあったり、あとから追加したメンバーの保守ができてないとか、たまにトラブルが起きる。これ自体は間違っているわけじゃなくて境界を明確にわけるメリットもあるのでプログラミングの煩雑さとトレードオフと言える。
最近、私が管理系の web api のエンドポイントを作る機会が多いせいか、dto と外部向けのオブジェクトを明確にわける必要のない要件もあったりする。試しにリフレクションを使って同名のフィールド間の値の受け渡しは自動でやってみたらどんな感じかな？と思って作ってみた。
public class ReflectionUtil { private ReflectionUtil() { throw new AssertionError(&amp;#34;ReflectionUtil is a utility class&amp;#34;); } private static &amp;lt;T&amp;gt; Field getField(Class&amp;lt;T&amp;gt; klass, String fieldName) { try { return klass.</description><content>&lt;p>1時に寝て7時に起きた。&lt;/p>
&lt;h2 id="ドラクエタクトのリアルタイム対戦">ドラクエタクトのリアルタイム対戦&lt;/h2>
&lt;p>もう2年間もずっとゲームし続けている。最近 &lt;a href="https://game8.jp/dqtact/462546">リアルタイム対戦&lt;/a> モードがリリースされた。全然やる気なかったんやけど、リアルタイム対戦で得たコインでもらえるアイテムが魅力的なのでやることにした。そして、実際にアルタイム対戦をやってみるとはまる。運営の手の平でゲームさせられている。&lt;/p>
&lt;ul>
&lt;li>人間が相手で狡猾な戦略で負けると悔しい&lt;/li>
&lt;li>人間が相手の戦略の方が創意工夫があって学びになる&lt;/li>
&lt;li>実際にやり始めるとおもしろくなってきてずっとやってしまう&lt;/li>
&lt;/ul>
&lt;p>できる時間を制限しているというのもうまいやり方だなと思っている。朝・昼・晩の7-9時、12-14時、19-22時に制限している。そこまでしてリアルタイムに人間同士をマッチングしてゲームさせる必要があるのか？という素朴な疑問に私は辿りつくが、おそらくゲーム開発者からみたらそうじゃない大事なユーザー体験があるのだろうと推測する。あと不思議なことが1つ。マッチングしていると、たまにわざと負けてくれる人がマッチングされる。チームのメンバーが1人で向こうが先行なら戦いを辞退 (こちらの勝ちになる) するし、こちらが先行でもすぐにやっつけられる。ちゃんと統計をとってないけど、20回に1回ぐらいの頻度でわざと負けてくれる人とマッチングする。あの人たちは一体どういう理由でわざと負けているんだろう？&lt;/p>
&lt;h2 id="リフレクションのユーティリティを作った">リフレクションのユーティリティを作った&lt;/h2>
&lt;p>いまお手伝いで開発している api サーバーは外界と内部のデータの境界を明確にわけていて、外向けのオブジェクト定義と内部向けのオブジェクト定義が異なる。ほとんど同じデータであっても dto を介して値を受け渡ししないといけない。そうすると、次のような dto と他のオブジェクトとの値渡しのための処理が型ごとにあちこちに実装されている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> MyRecord &lt;span style="color:#a6e22e">toMyRecord&lt;/span>&lt;span style="color:#f92672">(&lt;/span>MyDataInput in&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var record &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> MyRecord&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> record&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> record&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> record&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">someId1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">someId1&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> record&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">someId2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">someId2&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> record&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">someId3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">someId3&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> record&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">sortOrder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">sortOrder&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> record&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">createUser&lt;/span> &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">createUser&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> record&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">updateUser&lt;/span> &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">updateUser&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>メンバー数が20-30ぐらいあると、たまに値のセット忘れがあったり、あとから追加したメンバーの保守ができてないとか、たまにトラブルが起きる。これ自体は間違っているわけじゃなくて境界を明確にわけるメリットもあるのでプログラミングの煩雑さとトレードオフと言える。&lt;/p>
&lt;p>最近、私が管理系の web api のエンドポイントを作る機会が多いせいか、dto と外部向けのオブジェクトを明確にわける必要のない要件もあったりする。試しにリフレクションを使って同名のフィールド間の値の受け渡しは自動でやってみたらどんな感じかな？と思って作ってみた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ReflectionUtil&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">ReflectionUtil&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> AssertionError&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ReflectionUtil is a utility class&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> Field &lt;span style="color:#a6e22e">getField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Class&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> klass&lt;span style="color:#f92672">,&lt;/span> String fieldName&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> klass&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getDeclaredField&lt;/span>&lt;span style="color:#f92672">(&lt;/span>fieldName&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>NoSuchFieldException e&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>T1&lt;span style="color:#f92672">,&lt;/span> T2&lt;span style="color:#f92672">&amp;gt;&lt;/span> T2 &lt;span style="color:#a6e22e">mapFieldValues&lt;/span>&lt;span style="color:#f92672">(&lt;/span>T1 fromInstance&lt;span style="color:#f92672">,&lt;/span> T2 toInstance&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var fromClass &lt;span style="color:#f92672">=&lt;/span> fromInstance&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getClass&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>var toField &lt;span style="color:#f92672">:&lt;/span> toInstance&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getClass&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">getDeclaredFields&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> toField&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> var fromField &lt;span style="color:#f92672">=&lt;/span> getField&lt;span style="color:#f92672">(&lt;/span>fromClass&lt;span style="color:#f92672">,&lt;/span> toField&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>fromField &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fromField&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setAccessible&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> toField&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>toInstance&lt;span style="color:#f92672">,&lt;/span> fromField&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>fromInstance&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">catch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>IllegalAccessException e&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> RuntimeException&lt;span style="color:#f92672">(&lt;/span>e&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> toInstance&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これを使うと、先のコードがこれだけで済む。煩わしい値の受け渡しだけのコードを削減できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>var record &lt;span style="color:#f92672">=&lt;/span> ReflectionUtil&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">mapFieldValues&lt;/span>&lt;span style="color:#f92672">(&lt;/span>in&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> MyRecord&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>こんなことやると、セキュリティ的によくないとか反論されるかな？と思いながら pr を出してみたら思いの外、好評だったのでちょっと使ってみようと思う。&lt;/p></content></item></channel></rss>