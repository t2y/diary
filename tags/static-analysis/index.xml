<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Static Analysis on forest nook</title><link>/diary/tags/static-analysis/</link><description>Recent content in Static Analysis on forest nook</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Sat, 04 Feb 2023 12:35:28 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/static-analysis/index.xml" rel="self" type="application/rss+xml"/><item><title>go の学び直し 静的解析編</title><link>/diary/posts/2023/0204/</link><pubDate>Sat, 04 Feb 2023 12:35:28 +0900</pubDate><guid>/diary/posts/2023/0204/</guid><description>23時に寝て2時に起きて5時ぐらいにも起きて7時に起きた。昨日は podcast 収録でたくさん話して疲れてしまってそのまま帰ってすぐ寝た。すぐ起きるんだけど。
ストレッチ 今日の開脚幅は開始前157cmで、ストレッチ後159cmだった。朝出かける前に開脚のストレッチしたら数値よくなるかな？と思ってやってみたらいつもより少しよくなった。ストレッチはいつも通りとも言えるし、腰の張りがまだまだ残っていることも確認できた。疲労が溜まっているんよな。毎週ストレッチしているからこの程度の疲労で済んでいるとも思える。お正月に実家から戻ってきてから1月の東京出張と35日は終えた。来週はまた2月の東京出張とその週末に49日がある。ここまで体力がもてばその次の法要は初盆なので少し空く。体力的に第4四半期の山場と言えるかもしれない。ただがんばる。
go の学び直し Gopher塾 #3 - 静的解析を使ったGoの開発ツール制作 入門編 - DAY 1 に参加した。
過去にも Python とマクロ、インポートフックと抽象構文木 や Java のアノテーションプロセッサを試す など、メタプログラミングのアプローチやコード生成などを実務で使ってきたので静的解析にも関心がある。講義内容の詳細は書かないけど、静的解析のような難しい話題に対して4時間という短い時間でとてもよい講義になっていたと思う。go の静的解析の要点や提供されているツールなどを一通り学ぶことができた。もちろん、実用するには試行錯誤や習熟を必要とするけど、取っ掛かりとして十分な内容に思えた。
skeleton というツールを使って静的解析のための analyzer プロジェクトのひな形を作る。
$ go install github.com/gostaticanalysis/skeleton/v2@latest $ skeleton myanalyzer $ tree myanalyzer myanalyzer ├── cmd │ └── myanalyzer │ └── main.go ├── go.mod ├── myanalyzer.go ├── myanalyzer_test.go └── testdata └── src └── a ├── a.go └── go.mod 意図的にテストが落ちるようになっていてすぐ動作確認できる。
$ go mod tidy $ go test --- FAIL: TestAnalyzer (0.</description><content>&lt;p>23時に寝て2時に起きて5時ぐらいにも起きて7時に起きた。昨日は podcast 収録でたくさん話して疲れてしまってそのまま帰ってすぐ寝た。すぐ起きるんだけど。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今日の開脚幅は開始前157cmで、ストレッチ後159cmだった。朝出かける前に開脚のストレッチしたら数値よくなるかな？と思ってやってみたらいつもより少しよくなった。ストレッチはいつも通りとも言えるし、腰の張りがまだまだ残っていることも確認できた。疲労が溜まっているんよな。毎週ストレッチしているからこの程度の疲労で済んでいるとも思える。お正月に実家から戻ってきてから1月の東京出張と35日は終えた。来週はまた2月の東京出張とその週末に49日がある。ここまで体力がもてばその次の法要は初盆なので少し空く。体力的に第4四半期の山場と言えるかもしれない。ただがんばる。&lt;/p>
&lt;h2 id="go-の学び直し">go の学び直し&lt;/h2>
&lt;p>&lt;a href="https://tenntenn.connpass.com/event/271533/">Gopher塾 #3 - 静的解析を使ったGoの開発ツール制作 入門編 - DAY 1&lt;/a> に参加した。&lt;/p>
&lt;p>過去にも &lt;a href="https://t2y.hatenablog.jp/entry/2015/03/11/025123">Python とマクロ、インポートフックと抽象構文木&lt;/a> や &lt;a href="https://kazamori.jp/blogs/2020/07/12/java-annotation-processor/">Java のアノテーションプロセッサを試す&lt;/a> など、メタプログラミングのアプローチやコード生成などを実務で使ってきたので静的解析にも関心がある。講義内容の詳細は書かないけど、静的解析のような難しい話題に対して4時間という短い時間でとてもよい講義になっていたと思う。go の静的解析の要点や提供されているツールなどを一通り学ぶことができた。もちろん、実用するには試行錯誤や習熟を必要とするけど、取っ掛かりとして十分な内容に思えた。&lt;/p>
&lt;p>&lt;a href="https://github.com/gostaticanalysis/skeleton">skeleton&lt;/a> というツールを使って静的解析のための analyzer プロジェクトのひな形を作る。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go install github.com/gostaticanalysis/skeleton/v2@latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ skeleton myanalyzer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ tree myanalyzer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myanalyzer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── cmd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── myanalyzer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── main.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── go.mod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── myanalyzer.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── myanalyzer_test.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── testdata
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── a.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── go.mod
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>意図的にテストが落ちるようになっていてすぐ動作確認できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go mod tidy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ go test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--- FAIL: TestAnalyzer &lt;span style="color:#f92672">(&lt;/span>0.05s&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> analysistest.go:448: a/a.go:5:6: diagnostic &lt;span style="color:#e6db74">&amp;#34;identifier is gopher&amp;#34;&lt;/span> does not match pattern &lt;span style="color:#e6db74">&amp;#34;pattern&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> analysistest.go:512: a/a.go:5: no diagnostic was reported matching &lt;span style="color:#e6db74">&amp;#34;pattern&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FAIL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exit status &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FAIL myanalyzer 0.349s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>いろいろ説明を端折るけど、試しに FuncDecl の ast ノードに対して関数の行数をカウントする処理を実装してみた。&lt;a href="https://pkg.go.dev/golang.org/x/tools/go/analysis#hdr-Pass">analysis パッケージの Pass&lt;/a> を使うと便利なユーティリティが提供されていて、静的解析をするときに面倒な処理をショートカットできて簡単に実装できることが理解できた。ここで作った analyzer は go vet で実行できるそうなのでプロジェクトの独自ルールを analyzer で実装して ci でチェックするといった運用もできる。応用範囲は広そう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ast&lt;/span>.&lt;span style="color:#a6e22e">FuncDecl&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Pos&lt;/span>(), &lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">End&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">start&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pass&lt;/span>.&lt;span style="color:#a6e22e">Fset&lt;/span>.&lt;span style="color:#a6e22e">Position&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">Pos&lt;/span>()).&lt;span style="color:#a6e22e">Line&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">end&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pass&lt;/span>.&lt;span style="color:#a6e22e">Fset&lt;/span>.&lt;span style="color:#a6e22e">Position&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>.&lt;span style="color:#a6e22e">End&lt;/span>()).&lt;span style="color:#a6e22e">Line&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;the number of lines:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">end&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">start&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item></channel></rss>