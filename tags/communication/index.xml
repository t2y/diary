<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>communication on forest nook</title><link>/diary/tags/communication/</link><description>Recent content in communication on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Tue, 21 Nov 2023 08:51:59 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/communication/index.xml" rel="self" type="application/rss+xml"/><item><title>テックブログの書き始め</title><link>/diary/posts/2023/1121/</link><pubDate>Tue, 21 Nov 2023 08:51:59 +0900</pubDate><guid>/diary/posts/2023/1121/</guid><description>昨日は夜にいろいろ作業して、1時に寝て4時に起きて7時に起きた。
テックブログ執筆 先週から調査している内容 についてテックブログを書き始めた。マネジメントや実装をしていると筆が進まなくて書き始めるのが随分と遅くなってしまった。学校の試験前に、試験勉強やらずに部屋の掃除をやってしまったりするような感覚。午前中は昨日 go-ldap に送った pr がまとめてマージされた。その修正を取り込んだライブラリのバージョンで関連するところのコードをリファクタリングしていた。それでもようやく書き始めた。書き始めたら一気に 2/3 は書けた。本当は晩ご飯を食べた後にレビューできるところまで書いてしまおうと思っていたが、そこまで体力 (集中力) が続かなかった。なんとなく張り合いがなくて適当なところで妥協してしまう。
試行錯誤から学ぶ開発スタイル たまたまみかけた記事でひどい内容の記事をみた。一読しただけでもやもやしていたのを知人と議論していて言語化できるようになったので書いてみる。
エンジニアが仕様案を手戻りさせるアンチパターンはもう終わりにしよう もっと前段にエンジニアが議論に参加する、なんなら議論をリードするくらいのことをしていく必要があるでしょう。
こういうマネージャー (PO) 多いし、意見そのものは一理あるんだけど、これをエンジニアがイニシアティブとってやっていたらマネージャーいらないでしょ？ということを自覚していない。もっと言うと、PO という責任のある立場の人が大変という理由で責任放棄しているようにみえてしまう。(翻訳) ビッグテックのプロジェクトマネジメントとスクラム不在の謎 という記事では実際にテックリードまたはエンジニアがプロジェクトのイニシアティブを取っていると書かれている。もしそうするなら、まず自身のスキル不足や未熟さを受け入れないといけない。
マネージャー (PO) にとって大きな役割は意思決定であって、仕様案や計画において技術的なところがわからないのであれば、エンジニアに委譲したり相談して事前にいくらでも調整できるはずだし、その調整作業そのものがマネージャーの仕事の1つと言える。それをマネージャーがやるからエンジニアは実開発の設計や実装に集中できる。結果的に生産性も上がる。この文章から伺えることはリファインメントや計画に臨んだときにダメ出しされて手戻りすることを手戻り、大変、効率が悪いとネガティブに捉えている。逆に言えば、最初から完璧に仕様案を作れるはずだと思い込んでいるふしがある。
そして、誰もが知っていることだが、最初から完璧な仕様案や計画など作れるはずがなく、不確実性を許容しながらスクラムやアジャイル開発といった開発方法論の取り組みで調整していくというのが、モダンな開発のやり方である。その試行錯誤や手戻りは無駄なことではなく、チームやプロジェクトが学ぶべきことの1つだという考えがこの文章からは受け取れない。そして、自分が仕様案を適切に作れなかったのを自分のスキル不足だと認めず、チームのエンジニアが議論に参加していないからだと責任転嫁している。それはマネージャーが技術的に大事なことを理解できていなかったとふりかえり、計画を修正したり、次に計画するとき同じようなことが起こらないよう、努めていくというのがスクラム的なプロジェクトの進め方になるはずだ。手戻りはアンチパターンではなく、学びの過程や必要な試行錯誤であると認めて受け入れるところから始めるべき。</description><content>&lt;p>昨日は夜にいろいろ作業して、1時に寝て4時に起きて7時に起きた。&lt;/p>
&lt;h2 id="テックブログ執筆">テックブログ執筆&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/1117/">先週から調査している内容&lt;/a> についてテックブログを書き始めた。マネジメントや実装をしていると筆が進まなくて書き始めるのが随分と遅くなってしまった。学校の試験前に、試験勉強やらずに部屋の掃除をやってしまったりするような感覚。午前中は昨日 go-ldap に送った pr がまとめてマージされた。その修正を取り込んだライブラリのバージョンで関連するところのコードをリファクタリングしていた。それでもようやく書き始めた。書き始めたら一気に 2/3 は書けた。本当は晩ご飯を食べた後にレビューできるところまで書いてしまおうと思っていたが、そこまで体力 (集中力) が続かなかった。なんとなく張り合いがなくて適当なところで妥協してしまう。&lt;/p>
&lt;h2 id="試行錯誤から学ぶ開発スタイル">試行錯誤から学ぶ開発スタイル&lt;/h2>
&lt;p>たまたまみかけた記事でひどい内容の記事をみた。一読しただけでもやもやしていたのを知人と議論していて言語化できるようになったので書いてみる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://yigarashi.hatenablog.com/entry/2023/11/20/093000">エンジニアが仕様案を手戻りさせるアンチパターンはもう終わりにしよう&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>もっと前段にエンジニアが議論に参加する、なんなら議論をリードするくらいのことをしていく必要があるでしょう。&lt;/p>
&lt;/blockquote>
&lt;p>こういうマネージャー (PO) 多いし、意見そのものは一理あるんだけど、これをエンジニアがイニシアティブとってやっていたらマネージャーいらないでしょ？ということを自覚していない。もっと言うと、PO という責任のある立場の人が大変という理由で責任放棄しているようにみえてしまう。&lt;a href="https://t2y.hatenablog.jp/entry/2023/09/03/011023">(翻訳) ビッグテックのプロジェクトマネジメントとスクラム不在の謎&lt;/a> という記事では実際にテックリードまたはエンジニアがプロジェクトのイニシアティブを取っていると書かれている。もしそうするなら、まず自身のスキル不足や未熟さを受け入れないといけない。&lt;/p>
&lt;p>マネージャー (PO) にとって大きな役割は意思決定であって、仕様案や計画において技術的なところがわからないのであれば、エンジニアに委譲したり相談して事前にいくらでも調整できるはずだし、その調整作業そのものがマネージャーの仕事の1つと言える。それをマネージャーがやるからエンジニアは実開発の設計や実装に集中できる。結果的に生産性も上がる。この文章から伺えることはリファインメントや計画に臨んだときにダメ出しされて手戻りすることを手戻り、大変、効率が悪いとネガティブに捉えている。逆に言えば、最初から完璧に仕様案を作れるはずだと思い込んでいるふしがある。&lt;/p>
&lt;p>そして、誰もが知っていることだが、最初から完璧な仕様案や計画など作れるはずがなく、不確実性を許容しながらスクラムやアジャイル開発といった開発方法論の取り組みで調整していくというのが、モダンな開発のやり方である。その試行錯誤や手戻りは無駄なことではなく、チームやプロジェクトが学ぶべきことの1つだという考えがこの文章からは受け取れない。そして、自分が仕様案を適切に作れなかったのを自分のスキル不足だと認めず、チームのエンジニアが議論に参加していないからだと責任転嫁している。それはマネージャーが技術的に大事なことを理解できていなかったとふりかえり、計画を修正したり、次に計画するとき同じようなことが起こらないよう、努めていくというのがスクラム的なプロジェクトの進め方になるはずだ。手戻りはアンチパターンではなく、学びの過程や必要な試行錯誤であると認めて受け入れるところから始めるべき。&lt;/p></content></item><item><title>考えないという傷のある現場</title><link>/diary/posts/2023/1106/</link><pubDate>Mon, 06 Nov 2023 08:32:47 +0900</pubDate><guid>/diary/posts/2023/1106/</guid><description>2時に寝て7時半に起きた。昨日からよく寝た。また心機一転。
ldap エントリーの crud api 先週から ldap クライアントや そのプール を実装して結合テストも一通り書いていた。今日はそれらを使った crud な web api を一通り実装した。クライアント実装もテストもしっかり出来ているので後は時間の問題で1つずつ確認しながらコードを書いていくだけだった。こういう作業になると、まとまった時間があればすぐに終わる。他のメンバーのコードレビューをみたり、設計の話しをしたり、他に意識を取られてあまり自分の作業に集中できなかった。
言葉が通じないもどかしさ 先週「参考にして」と指示したものが「全コピー」で驚いてしまった。私がいくつか指摘したらすぐに削除し始めてさらに落胆した。自分の頭で考えて作業していないようにみえる。
開発というお仕事は自分で考えて、コードの1つ1つに明確な意図や根拠をもって書くものだ。もちろん、情報不足や設計に自信がもてなくて一時的に曖昧な実装にするときもあるけれど、それは懸念事項として把握しておくことで将来対応すればよい。基本的に追加するコードにはすべて意味がある。
他人が分からなくても自分が理解できているのなら、自分の考えを説明し、それが論理的であったり筋が通っていれば、私は自分の考えと違っていても構わない。説明できないコードを追加して、ツッコミを受けてなにも説明できない状況をみているのは本当に悲しい。
山田ズーニーさんの著書に書いてあった「考えないという傷」を思い出した。
「働きたくない」というあなたへ ７</description><content>&lt;p>2時に寝て7時半に起きた。昨日からよく寝た。また心機一転。&lt;/p>
&lt;h2 id="ldap-エントリーの-crud-api">ldap エントリーの crud api&lt;/h2>
&lt;p>先週から ldap クライアントや &lt;a href="/diary/diary/posts/2023/1102/#コネクションを共有しないプール">そのプール&lt;/a> を実装して結合テストも一通り書いていた。今日はそれらを使った crud な web api を一通り実装した。クライアント実装もテストもしっかり出来ているので後は時間の問題で1つずつ確認しながらコードを書いていくだけだった。こういう作業になると、まとまった時間があればすぐに終わる。他のメンバーのコードレビューをみたり、設計の話しをしたり、他に意識を取られてあまり自分の作業に集中できなかった。&lt;/p>
&lt;h2 id="言葉が通じないもどかしさ">言葉が通じないもどかしさ&lt;/h2>
&lt;p>先週「参考にして」と指示したものが「全コピー」で驚いてしまった。私がいくつか指摘したらすぐに削除し始めてさらに落胆した。自分の頭で考えて作業していないようにみえる。&lt;/p>
&lt;p>開発というお仕事は自分で考えて、コードの1つ1つに明確な意図や根拠をもって書くものだ。もちろん、情報不足や設計に自信がもてなくて一時的に曖昧な実装にするときもあるけれど、それは懸念事項として把握しておくことで将来対応すればよい。基本的に追加するコードにはすべて意味がある。&lt;/p>
&lt;p>他人が分からなくても自分が理解できているのなら、自分の考えを説明し、それが論理的であったり筋が通っていれば、私は自分の考えと違っていても構わない。説明できないコードを追加して、ツッコミを受けてなにも説明できない状況をみているのは本当に悲しい。&lt;/p>
&lt;p>山田ズーニーさんの著書に書いてあった「考えないという傷」を思い出した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.1101.com/essay/2010-03-17.html">「働きたくない」というあなたへ ７&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>論理の通じない人たち</title><link>/diary/posts/2023/1102/</link><pubDate>Thu, 02 Nov 2023 12:59:43 +0900</pubDate><guid>/diary/posts/2023/1102/</guid><description>23時に寝て何度か起きて8時に起きた。ホテルの部屋が暗いと朝になった気がしなくて2度寝したら寝坊した。
組織の対応と sns の議論 先日の sns 騒ぎ の続き。公式からの声明も出たので軽くまとめておく。
PyCon APAC 2023におけるNOCコンテンツに関するご指摘について 簡潔な文章に事実の記述、責任の所在、関係者への配慮が含まれていて十分な内容にみえる。法律なども関係するため、弁護士チェックが必要なことを考慮すると、こんな短期間で組織の見解を出せたことは運営側の体制を鑑みることができる。それが適正かどうかは人によって判断は異なるかもしれないが、私はコミュニティ運営というボランティア主体の組織であれば十分なものだと思えた。その後のネット上の議論も、ちゃんと終えてはいないが、様々な見解で議論は進んでいるようにみえる。
今回みていて感じたことの1つに、コミュニケーションが成り立たない人が世の中にはたくさんいるということ。議論の前提や論理の出発点が異なる人たちは、一定の論理を含む全体や大局を理解できず、細部や詳細のところだけを拠り所に自身の論理を組み立てる。意見の差異があることはなんら問題はないが、論理が通じないのは議論の余地すらないようにみえた。そういう人たちを会話するときは前提条件を同じにしたり、思想の背景を共有したり、もっと時間をかけて丁寧にすり合わせていく作業が必要になる。そして sns のような、流れが速い不特定多数の議論はそういった丁寧な作業にまったく向いていない。だから sns で議論することは時間の無駄である。
コネクションを共有しないプール go の非同期処理であまり使われることはないが、semaphore が準公式ライブラリとして提供されている。私はセマフォを気に入っていてたまに使う。
ldap プロトコルではコネクションの確立とログインに相当する bind の操作が分かれている。コネクションを確立したまま、ログアウトに相当する処理ができればプールを設けることでコネクションの再利用ができる。
The LDAP Unbind Operation しかし、このドキュメントの説明によると、unbind という操作は用意されているものの、ログアウトに相当する機能ではなく、クローズする前に通知するといった用途だと書いてある。unbind のリクエストをした後にはクローズするしかないといったものになる。それを踏まえて、プールはセマフォで同時接続数のみを制御するのでよいのではないかと思う。そんなワーカープールを実装してみた。
type ClientPool struct { config *config.LDAP sem *semaphore.Weighted } func (p *ClientPool) Get( ctx context.Context, ) (*LDAPClient, error) { if !p.sem.TryAcquire(1) { return nil, fmt.Errorf(&amp;#34;failed to acquire, wait and get later&amp;#34;) } client := NewLDAPClient(p.config) if err := client.</description><content>&lt;p>23時に寝て何度か起きて8時に起きた。ホテルの部屋が暗いと朝になった気がしなくて2度寝したら寝坊した。&lt;/p>
&lt;h2 id="組織の対応と-sns-の議論">組織の対応と sns の議論&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/1030/">先日の sns 騒ぎ&lt;/a> の続き。公式からの声明も出たので軽くまとめておく。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pyconjp.blogspot.com/2023/11/pyconapac2023-statement.html">PyCon APAC 2023におけるNOCコンテンツに関するご指摘について&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>簡潔な文章に事実の記述、責任の所在、関係者への配慮が含まれていて十分な内容にみえる。法律なども関係するため、弁護士チェックが必要なことを考慮すると、こんな短期間で組織の見解を出せたことは運営側の体制を鑑みることができる。それが適正かどうかは人によって判断は異なるかもしれないが、私はコミュニティ運営というボランティア主体の組織であれば十分なものだと思えた。その後のネット上の議論も、ちゃんと終えてはいないが、様々な見解で議論は進んでいるようにみえる。&lt;/p>
&lt;p>今回みていて感じたことの1つに、コミュニケーションが成り立たない人が世の中にはたくさんいるということ。議論の前提や論理の出発点が異なる人たちは、一定の論理を含む全体や大局を理解できず、細部や詳細のところだけを拠り所に自身の論理を組み立てる。意見の差異があることはなんら問題はないが、論理が通じないのは議論の余地すらないようにみえた。そういう人たちを会話するときは前提条件を同じにしたり、思想の背景を共有したり、もっと時間をかけて丁寧にすり合わせていく作業が必要になる。そして sns のような、流れが速い不特定多数の議論はそういった丁寧な作業にまったく向いていない。だから sns で議論することは時間の無駄である。&lt;/p>
&lt;h2 id="コネクションを共有しないプール">コネクションを共有しないプール&lt;/h2>
&lt;p>go の非同期処理であまり使われることはないが、&lt;a href="https://pkg.go.dev/golang.org/x/sync/semaphore">semaphore&lt;/a> が準公式ライブラリとして提供されている。私はセマフォを気に入っていてたまに使う。&lt;/p>
&lt;p>ldap プロトコルではコネクションの確立とログインに相当する bind の操作が分かれている。コネクションを確立したまま、ログアウトに相当する処理ができればプールを設けることでコネクションの再利用ができる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://ldap.com/the-ldap-unbind-operation/">The LDAP Unbind Operation&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>しかし、このドキュメントの説明によると、unbind という操作は用意されているものの、ログアウトに相当する機能ではなく、クローズする前に通知するといった用途だと書いてある。unbind のリクエストをした後にはクローズするしかないといったものになる。それを踏まえて、プールはセマフォで同時接続数のみを制御するのでよいのではないかと思う。そんなワーカープールを実装してみた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ClientPool&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">LDAP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sem&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">semaphore&lt;/span>.&lt;span style="color:#a6e22e">Weighted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ClientPool&lt;/span>) &lt;span style="color:#a6e22e">Get&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">LDAPClient&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">sem&lt;/span>.&lt;span style="color:#a6e22e">TryAcquire&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to acquire, wait and get later&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">NewLDAPClient&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Connect&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">sem&lt;/span>.&lt;span style="color:#a6e22e">Release&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to connect: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ClientPool&lt;/span>) &lt;span style="color:#a6e22e">GetAuthenticated&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">LDAPClient&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">client&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to get: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dn&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">BindDN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">passwd&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">BindPasswd&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Bind&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">dn&lt;/span>, &lt;span style="color:#a6e22e">passwd&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">sem&lt;/span>.&lt;span style="color:#a6e22e">Release&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;failed to bind: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ClientPool&lt;/span>) &lt;span style="color:#a6e22e">Close&lt;/span>(&lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">LDAPClient&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">sem&lt;/span>.&lt;span style="color:#a6e22e">Release&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewClientPool&lt;/span>(&lt;span style="color:#a6e22e">cfg&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">LDAP&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ClientPool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">ClientPool&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">config&lt;/span>: &lt;span style="color:#a6e22e">cfg&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sem&lt;/span>: &lt;span style="color:#a6e22e">semaphore&lt;/span>.&lt;span style="color:#a6e22e">NewWeighted&lt;/span>(&lt;span style="color:#a6e22e">cfg&lt;/span>.&lt;span style="color:#a6e22e">ClientPoolSize&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>sns の百害</title><link>/diary/posts/2023/1030/</link><pubDate>Mon, 30 Oct 2023 12:29:09 +0900</pubDate><guid>/diary/posts/2023/1030/</guid><description>1時過ぎに寝て4時に起きて7時に起きて8時に起きた。夜更ししてネットをみてて寝坊した。先週に引き続き、いくつかリファクタリングしつつ、午後からはコードレビューして、それが終わったからまたコードを書いてた。
正義の追及 もう何年も前から twitter はやめようと考えながら、なんかだらだら続けてきていた。イーロンマスクが買収して、課金しないと機能がなくなったり、利用者も減ったりしていて、私もよいタイミングだと twitter をやめることにした。本当はアカウントをアーカイブモードのように凍結できればよいが、それは故人向けにしか提供していないみたいなのでアカウントを削除するといったことはしていない。というのは、削除すると一定期間を経て他人が同じ id でアカウントを作れるそうなので、なんとなくそれは嫌だなと思ってアカウントだけは残している。
たまたまあるイベントで、運営側の不手際で参加者のプライバシー侵害になるかもしれないといったトラブルが起きたらしい。起きてしまったものは仕方ないが、その不手際に気付いた人が sns (x) で大げさに拡散して、衆知の知るところになって、実被害や問題の大小とは関係なく、そういった不手際があったことがことさら悪いことかのように、また運営の対応も悪かったかのように、(おそらく) 実被害もないのに大きな問題であるかのように喧伝されてしまった。少なくとも運営が対応して以降は被害が出ないことから、それ以上の言及については本人の承認欲求でやっているようにしかみえなかった。醜かった。
SNSで晒すのはトラブル解決の手段としては最悪で全面戦争宣言に等しいという認識 https://t.co/Xrp7zu1ocJ
&amp;mdash; yukito ohira | SaaS開発のプロ (@yohira_dev) October 30, 2023 昔からインターネット上でのトラブルというのはあったけれど、sns は数の暴力が強過ぎるように数年間から感じるようになった。とくに正義の力が強過ぎる。一見それはよいことのように思えるが、正義が現実や事実ではない場面もあるかもしれない。今回もなんらかの実被害や迷惑を被ったという話しはいまのところ1つも見聞きしていない。それに対して、自分たちの主張が正しいからと言って、運営を強く非難するような多くの人からの言動というのはやり過ぎにみえた。sns 上での流布の速度が速過ぎるせいで組織の対応は追いつかない。私は組織の人たちをよく知っているので、待っていれば然るべき謝罪や声明が出ることを信頼できる。この信頼がない人たちにとって、いま起こっている炎上に対して組織が即時で対応しないと、組織の怠慢や隠蔽を疑う声がちらほら上がっていた。sns の速さに人間が慣れてしまったのだろう。信頼がない人にとっては悪意のある組織かもしれないと疑って予防的に慎重にコメントするのも仕方ないのかもしれない。しかし、それが問題をより分かりにくく複雑にしてしまう遠因にもなっているように思えた。</description><content>&lt;p>1時過ぎに寝て4時に起きて7時に起きて8時に起きた。夜更ししてネットをみてて寝坊した。先週に引き続き、いくつかリファクタリングしつつ、午後からはコードレビューして、それが終わったからまたコードを書いてた。&lt;/p>
&lt;h2 id="正義の追及">正義の追及&lt;/h2>
&lt;p>もう何年も前から twitter はやめようと考えながら、なんかだらだら続けてきていた。イーロンマスクが買収して、課金しないと機能がなくなったり、利用者も減ったりしていて、私もよいタイミングだと twitter をやめることにした。本当はアカウントをアーカイブモードのように凍結できればよいが、それは故人向けにしか提供していないみたいなのでアカウントを削除するといったことはしていない。というのは、削除すると一定期間を経て他人が同じ id でアカウントを作れるそうなので、なんとなくそれは嫌だなと思ってアカウントだけは残している。&lt;/p>
&lt;p>たまたまあるイベントで、運営側の不手際で参加者のプライバシー侵害になるかもしれないといったトラブルが起きたらしい。起きてしまったものは仕方ないが、その不手際に気付いた人が sns (x) で大げさに拡散して、衆知の知るところになって、実被害や問題の大小とは関係なく、そういった不手際があったことがことさら悪いことかのように、また運営の対応も悪かったかのように、(おそらく) 実被害もないのに大きな問題であるかのように喧伝されてしまった。少なくとも運営が対応して以降は被害が出ないことから、それ以上の言及については本人の承認欲求でやっているようにしかみえなかった。醜かった。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">SNSで晒すのはトラブル解決の手段としては最悪で全面戦争宣言に等しいという認識 &lt;a href="https://t.co/Xrp7zu1ocJ">https://t.co/Xrp7zu1ocJ&lt;/a>&lt;/p>&amp;mdash; yukito ohira | SaaS開発のプロ (@yohira_dev) &lt;a href="https://twitter.com/yohira_dev/status/1718828976418979981?ref_src=twsrc%5Etfw">October 30, 2023&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>昔からインターネット上でのトラブルというのはあったけれど、sns は数の暴力が強過ぎるように数年間から感じるようになった。とくに正義の力が強過ぎる。一見それはよいことのように思えるが、正義が現実や事実ではない場面もあるかもしれない。今回もなんらかの実被害や迷惑を被ったという話しはいまのところ1つも見聞きしていない。それに対して、自分たちの主張が正しいからと言って、運営を強く非難するような多くの人からの言動というのはやり過ぎにみえた。sns 上での流布の速度が速過ぎるせいで組織の対応は追いつかない。私は組織の人たちをよく知っているので、待っていれば然るべき謝罪や声明が出ることを信頼できる。この信頼がない人たちにとって、いま起こっている炎上に対して組織が即時で対応しないと、組織の怠慢や隠蔽を疑う声がちらほら上がっていた。sns の速さに人間が慣れてしまったのだろう。信頼がない人にとっては悪意のある組織かもしれないと疑って予防的に慎重にコメントするのも仕方ないのかもしれない。しかし、それが問題をより分かりにくく複雑にしてしまう遠因にもなっているように思えた。&lt;/p></content></item><item><title>ふりかえり + チーム勉強会</title><link>/diary/posts/2023/1005/</link><pubDate>Thu, 05 Oct 2023 08:26:09 +0900</pubDate><guid>/diary/posts/2023/1005/</guid><description>22時から寝始めて何度か起きて7時に起きた。久しぶりにどっしりくるような夢をみたけれど、もう内容を覚えていない。
ふりかえりを兼ねたチーム勉強会 新しい開発に着手して初めてのチーム勉強会を行った。前の開発とチーム勉強会の運用を大きく変更した。ざっくり次が要項になる。
前開発の postmortem 運用がうまくいかなかったので代替としてやってみる 開発システム全体の機能が増えてきて、メンバーそれぞれがやっていることもバラバラになりつつある 普段やっていることを他メンバーへ情報共有する機会とする そのときのマイルストーンでやっていることをふりかえりする機会とする 開発システムについて知りたいところや設計の議論などをしてもよい メンバーが全員揃っていれば、どんな質問をしても誰かが知っているはず そのマイルストーンでやったことを基本として他メンバーへ共有する 内容は基本的になんでもよい、あまり準備せずに話せる内容でよい 特定の issue の内容でも、マージリクエストの解説でも、機能や振る舞いの考察など 知識やノウハウを他メンバーに共用する上で wiki やブログの記事などにしてもよい 書くところがなかったらテックブログに書けばよい 勉強会のために調査する時間が必要であれば、その調査時間も仕事の一環とする 勉強会の準備も考慮して開発のスケジュールを各自で調整する 業務で実装したことや調査したことを共有する機会にもなる まだ合流前だけど、メンバーが新規に1人増える。2週間に1回の定例のみだと、新しいメンバーが既存のメンバーに追いつくための情報が足りないだろうと思って質問しやすい機会を設けようと考えていた。雑談時間とか、設計会議とか、そういう呼び方をしてもよいのだけど、私にとって違和感なく一番しっくりきて柔軟性も高いのが「チーム勉強会」になる。ふりかえりと情報共有と学びの場の3つを兼ね、チームビルディングにも応用しようという、まさに天才の所業ではないかw まだ始めたばかりだから言うだけ言っておく。また開発が終わったときに良し悪しのふりかえりはする。
今日のところは最初だったので前マイルストーンでやった issue をメンバーそれぞれ1つずつ内容を説明して共有した。私も mongodb の初期化ツールのマージリクエストが出来たばかりだったのでその背景や意図、工夫したところなどを紹介した。他のメンバーも背景やソースコードを紹介しながらみんなでわいわいできた。第1回目にしては活気があって情報共有という目的も果たせたし、よい感じの取り組みにみえた。このままうまく運用にのせていく。</description><content>&lt;p>22時から寝始めて何度か起きて7時に起きた。久しぶりにどっしりくるような夢をみたけれど、もう内容を覚えていない。&lt;/p>
&lt;h2 id="ふりかえりを兼ねたチーム勉強会">ふりかえりを兼ねたチーム勉強会&lt;/h2>
&lt;p>新しい開発に着手して初めてのチーム勉強会を行った。前の開発とチーム勉強会の運用を大きく変更した。ざっくり次が要項になる。&lt;/p>
&lt;ul>
&lt;li>前開発の postmortem 運用がうまくいかなかったので代替としてやってみる&lt;/li>
&lt;li>開発システム全体の機能が増えてきて、メンバーそれぞれがやっていることもバラバラになりつつある
&lt;ul>
&lt;li>普段やっていることを他メンバーへ情報共有する機会とする&lt;/li>
&lt;li>そのときのマイルストーンでやっていることをふりかえりする機会とする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>開発システムについて知りたいところや設計の議論などをしてもよい
&lt;ul>
&lt;li>メンバーが全員揃っていれば、どんな質問をしても誰かが知っているはず&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>そのマイルストーンでやったことを基本として他メンバーへ共有する
&lt;ul>
&lt;li>内容は基本的になんでもよい、あまり準備せずに話せる内容でよい
&lt;ul>
&lt;li>特定の issue の内容でも、マージリクエストの解説でも、機能や振る舞いの考察など&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>知識やノウハウを他メンバーに共用する上で wiki やブログの記事などにしてもよい
&lt;ul>
&lt;li>書くところがなかったらテックブログに書けばよい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>勉強会のために調査する時間が必要であれば、その調査時間も仕事の一環とする
&lt;ul>
&lt;li>勉強会の準備も考慮して開発のスケジュールを各自で調整する&lt;/li>
&lt;li>業務で実装したことや調査したことを共有する機会にもなる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>まだ合流前だけど、メンバーが新規に1人増える。2週間に1回の定例のみだと、新しいメンバーが既存のメンバーに追いつくための情報が足りないだろうと思って質問しやすい機会を設けようと考えていた。雑談時間とか、設計会議とか、そういう呼び方をしてもよいのだけど、私にとって違和感なく一番しっくりきて柔軟性も高いのが「チーム勉強会」になる。ふりかえりと情報共有と学びの場の3つを兼ね、チームビルディングにも応用しようという、まさに天才の所業ではないかw まだ始めたばかりだから言うだけ言っておく。また開発が終わったときに良し悪しのふりかえりはする。&lt;/p>
&lt;p>今日のところは最初だったので前マイルストーンでやった issue をメンバーそれぞれ1つずつ内容を説明して共有した。私も mongodb の初期化ツールのマージリクエストが出来たばかりだったのでその背景や意図、工夫したところなどを紹介した。他のメンバーも背景やソースコードを紹介しながらみんなでわいわいできた。第1回目にしては活気があって情報共有という目的も果たせたし、よい感じの取り組みにみえた。このままうまく運用にのせていく。&lt;/p></content></item><item><title>コワーキングとコミュニティ</title><link>/diary/posts/2023/0930/</link><pubDate>Sat, 30 Sep 2023 13:21:53 +0900</pubDate><guid>/diary/posts/2023/0930/</guid><description>0時に寝て3時、5時ぐらいに起きて7時に起きた。
ストレッチ 先週に比べれば、出張を終えてのんびり過ごしていたのもあってかなりよくなっている気はした。足の張りはどこも目立つほどではなく、左の太もも後ろの筋肉の張りが強かったぐらいで復調している感じはした。腰もそれほど自覚症状はなかったものの、トレーナーさんからみると硬めだったという話しもあり、たしかに部位によってはきついところもちらほらあって、腰はまだまだ復調していないことがわかった。今日の開脚幅は開始前155cmで、ストレッチ後158cmだった。暑さも和らいで時間も出来てきたので少し運動してもよいかもしれない。
コワーキングとコミュニティ 2014年11月に発刊された Coworking Magazine の創刊号がある。昨年ぐらいまでは amazon に在庫があって購入できたが、いまみたら在庫がなくなったようだ。2014年に出版して2022年まで在庫が残っていたという雑誌ではあるが、内容はとてもよいものだと私は思う。2014年頃、コワーキングという新しい働き方のスタイルが日本に輸入され、広まっていったときのそのときの雰囲気や価値観を本書から読み取ることができる。多くのコワーカーたちがコメントしていたり、インタビュー記事もあったりして、コワーキングの価値やコミュニティの良さを語っている。こうやって出版という形で残しておくことで、その歴史の過程を学ぶ機会にもなることが本書から伺える。
私はコワーキングのような価値観や働き方を2016年頃から知ることになり、私もコワーキングスペースで作業したりするようになった。しかし、当時はワークスペースとして利用しているだけでそれはコワーキングと呼べるものではなかった。本書を読んでいて、ある人はコワーカーとはコミュニケーションを取る人たち、またはコミュニティに参加する人たちを指すのだと話していた。コミュニティ参加しなければ、コミュニティの恩恵を受けることが難しく、その状態をコワーキングとは呼べないようだ。2022年6月に カフーツさんを訪問 して、いとうさんとコミュニティについて話してみて、私の知っている IT 業界のコミュニティの在り方とコワーキングにおけるコミュニティには通じるところがあって、それ以来、コミュニティを学ぶことや課題管理のヒントになると考えて、いとうさんの主催しているオフライン／オンラインイベントにも参加するようになった。
コワーキングの価値はコミュニティやコラボレーションにある。作業場としてのワークスペースではない。コラボレーションと言うと、企業間の業務提携だったり、新商品企画を共同でやるとか、そういう大きなものをイメージしてしまうが、コワーキングにおけるコラボレーションとはそんな大きな話しではない。ただ一緒に作業しながら、軽く雑談したり、なにかのテーマで話し合ったり、その場に一緒にいることで生まれるコミュニケーション全般を指す。共通の話題や課題に対して一緒に考えたりする行為で構わない。もっと小さいものだと気付けるようになった。
それは私がマイクロ法人を経営して1人で黙々とずっと仕事をしていても、この延長上に新しい価値を築けるような気がしないというのを実感した後だった。リモートワークと相談相手 にも書いたが、会社に勤めていると自然と同僚とコラボレーションしている。マイクロ法人には同僚がいないのでコラボレーションによる気付きや刺激を受けることができない。コワーキングは1人会社やフルリモートワークのような、同僚が身近にいない人たちへコラボレーションの価値を提供しているということを、身に染みてわかるようになった。
IT 業界では Open Source Software の歴史をみると、古くは1950/1960年代の Unix に端を発し、1990年代の Linux の公開、1998年の Netscape 社の Mozilla Firefox のソースコード公開などの大きなエポックメイキングを経て、社会運動としての OSS 文化や OSS コミュニティが発展してきた。その歴史の過程で日本では2010年前後から IT 勉強会という、主に Web 業界の様々なバックボーンをもつプログラマーが技術情報を共有するようになった。OSS の技術はみんなで共有するものという価値観があるが、それはこういった IT 勉強会によって草の根的に広まっていったと思われる。私もそんな IT 勉強会に参加して技術を研鑽してきたプログラマーの1人なのでまさに生き証人でもある。それはまさにコワーキングの人たちが言う、コミュニティのそれとまったく同じである。IT 技術という共通の話題で困っていることを共有したり、不具合を改善したり、新しいプロダクトを開発したりしていた。製造業の人たちには驚かれたが、web 業界はコンテンツを公開して広告費で儲けるビジネスモデルであることから、自社の技術情報やノウハウをすべて公開してしまう。ビジネス上では競合他社であっても、別会社の開発者とも仲良くなって技術情報を共有している。それが業界全体のレベルの底上げをしてきた。いまもその文化は変わっていない。
次にくる流れとして、IT 業界のプログラマーはどんどん独立していくと私は考えている。いまもフリーランスになる人は増えつつあると思う。スキルも経験もない若い人が安易にフリーランスになることはお奨めしないが、20年も働いてきたベテランはどんどんフリーランスになって、組織の枠に収まらない活躍をしていけばよいと思う。マイクロ法人を経営することのハードルも歴史上、もっとも低くなっていると私は思う。私が経営できているのだから普通のプログラマーでも経営できる。しかし、1人で働いていると、私が陥ったような「行き詰まり」を覚えるようになるかもしれない。コワーキングやコミュニティはそれを防ぐきっかけになるのではないか？と思うようになってきた。この「行き詰まり」に名前を付けたい。私が感じたのは次のようなことになる。
自身が成長しているように思えない 日々の生活で気付きや刺激がなくなる 新しいことに挑戦する気概がなくなる 自分の状態が自分で判断できない 誰に何を相談していいか分からない もしかしたら会社に勤めているときも同じような状況になっているときもあったかもしれないが、会社に所属していると、仕事はいくらでも上から降ってくるし、仮にぼーっと何もしなくても給料は毎月もらえる。この先どうやって生きていくのか？という、生命としての根源的な問いから目を背けてしまうような錯覚がある。なんの後ろ盾もないマイクロ法人やフリーランスになることでこういった根源的な問いから目を背けられなくなる。私の場合、そのことに2年目で気付けるようになった。今後のビジネスにおいても、直接的ではなく間接的にコミュニティというのはキーワードだと考えている。コミュニティへの理解を深めるためにもコワーキングには今後も注目していきたい。</description><content>&lt;p>0時に寝て3時、5時ぐらいに起きて7時に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>先週に比べれば、出張を終えてのんびり過ごしていたのもあってかなりよくなっている気はした。足の張りはどこも目立つほどではなく、左の太もも後ろの筋肉の張りが強かったぐらいで復調している感じはした。腰もそれほど自覚症状はなかったものの、トレーナーさんからみると硬めだったという話しもあり、たしかに部位によってはきついところもちらほらあって、腰はまだまだ復調していないことがわかった。今日の開脚幅は開始前155cmで、ストレッチ後158cmだった。暑さも和らいで時間も出来てきたので少し運動してもよいかもしれない。&lt;/p>
&lt;h2 id="コワーキングとコミュニティ">コワーキングとコミュニティ&lt;/h2>
&lt;p>2014年11月に発刊された &lt;a href="http://coworkingmagazine.net/">Coworking Magazine&lt;/a> の創刊号がある。昨年ぐらいまでは amazon に在庫があって購入できたが、いまみたら在庫がなくなったようだ。2014年に出版して2022年まで在庫が残っていたという雑誌ではあるが、内容はとてもよいものだと私は思う。2014年頃、コワーキングという新しい働き方のスタイルが日本に輸入され、広まっていったときのそのときの雰囲気や価値観を本書から読み取ることができる。多くのコワーカーたちがコメントしていたり、インタビュー記事もあったりして、コワーキングの価値やコミュニティの良さを語っている。こうやって出版という形で残しておくことで、その歴史の過程を学ぶ機会にもなることが本書から伺える。&lt;/p>
&lt;p>私はコワーキングのような価値観や働き方を2016年頃から知ることになり、私もコワーキングスペースで作業したりするようになった。しかし、当時はワークスペースとして利用しているだけでそれはコワーキングと呼べるものではなかった。本書を読んでいて、ある人はコワーカーとはコミュニケーションを取る人たち、またはコミュニティに参加する人たちを指すのだと話していた。コミュニティ参加しなければ、コミュニティの恩恵を受けることが難しく、その状態をコワーキングとは呼べないようだ。2022年6月に &lt;a href="/diary/diary/posts/2022/0618/#カフーツさん訪問">カフーツさんを訪問&lt;/a> して、いとうさんとコミュニティについて話してみて、私の知っている IT 業界のコミュニティの在り方とコワーキングにおけるコミュニティには通じるところがあって、それ以来、コミュニティを学ぶことや課題管理のヒントになると考えて、いとうさんの主催しているオフライン／オンラインイベントにも参加するようになった。&lt;/p>
&lt;p>コワーキングの価値はコミュニティやコラボレーションにある。作業場としてのワークスペースではない。コラボレーションと言うと、企業間の業務提携だったり、新商品企画を共同でやるとか、そういう大きなものをイメージしてしまうが、コワーキングにおけるコラボレーションとはそんな大きな話しではない。ただ一緒に作業しながら、軽く雑談したり、なにかのテーマで話し合ったり、その場に一緒にいることで生まれるコミュニケーション全般を指す。共通の話題や課題に対して一緒に考えたりする行為で構わない。もっと小さいものだと気付けるようになった。&lt;/p>
&lt;p>それは私がマイクロ法人を経営して1人で黙々とずっと仕事をしていても、この延長上に新しい価値を築けるような気がしないというのを実感した後だった。&lt;a href="https://note.com/t2y1979/n/n84deed5fd934">リモートワークと相談相手&lt;/a> にも書いたが、会社に勤めていると自然と同僚とコラボレーションしている。マイクロ法人には同僚がいないのでコラボレーションによる気付きや刺激を受けることができない。コワーキングは1人会社やフルリモートワークのような、同僚が身近にいない人たちへコラボレーションの価値を提供しているということを、身に染みてわかるようになった。&lt;/p>
&lt;p>IT 業界では &lt;a href="https://en.wikipedia.org/wiki/Open-source_software">Open Source Software&lt;/a> の歴史をみると、古くは1950/1960年代の Unix に端を発し、1990年代の Linux の公開、1998年の Netscape 社の &lt;a href="https://en.wikipedia.org/wiki/Firefox">Mozilla Firefox&lt;/a> のソースコード公開などの大きなエポックメイキングを経て、社会運動としての OSS 文化や OSS コミュニティが発展してきた。その歴史の過程で日本では2010年前後から IT 勉強会という、主に Web 業界の様々なバックボーンをもつプログラマーが技術情報を共有するようになった。OSS の技術はみんなで共有するものという価値観があるが、それはこういった IT 勉強会によって草の根的に広まっていったと思われる。私もそんな IT 勉強会に参加して技術を研鑽してきたプログラマーの1人なのでまさに生き証人でもある。それはまさにコワーキングの人たちが言う、コミュニティのそれとまったく同じである。IT 技術という共通の話題で困っていることを共有したり、不具合を改善したり、新しいプロダクトを開発したりしていた。製造業の人たちには驚かれたが、web 業界はコンテンツを公開して広告費で儲けるビジネスモデルであることから、自社の技術情報やノウハウをすべて公開してしまう。ビジネス上では競合他社であっても、別会社の開発者とも仲良くなって技術情報を共有している。それが業界全体のレベルの底上げをしてきた。いまもその文化は変わっていない。&lt;/p>
&lt;p>次にくる流れとして、IT 業界のプログラマーはどんどん独立していくと私は考えている。いまもフリーランスになる人は増えつつあると思う。スキルも経験もない若い人が安易にフリーランスになることはお奨めしないが、20年も働いてきたベテランはどんどんフリーランスになって、組織の枠に収まらない活躍をしていけばよいと思う。マイクロ法人を経営することのハードルも歴史上、もっとも低くなっていると私は思う。私が経営できているのだから普通のプログラマーでも経営できる。しかし、1人で働いていると、私が陥ったような「行き詰まり」を覚えるようになるかもしれない。コワーキングやコミュニティはそれを防ぐきっかけになるのではないか？と思うようになってきた。この「行き詰まり」に名前を付けたい。私が感じたのは次のようなことになる。&lt;/p>
&lt;ul>
&lt;li>自身が成長しているように思えない&lt;/li>
&lt;li>日々の生活で気付きや刺激がなくなる&lt;/li>
&lt;li>新しいことに挑戦する気概がなくなる&lt;/li>
&lt;li>自分の状態が自分で判断できない&lt;/li>
&lt;li>誰に何を相談していいか分からない&lt;/li>
&lt;/ul>
&lt;p>もしかしたら会社に勤めているときも同じような状況になっているときもあったかもしれないが、会社に所属していると、仕事はいくらでも上から降ってくるし、仮にぼーっと何もしなくても給料は毎月もらえる。この先どうやって生きていくのか？という、生命としての根源的な問いから目を背けてしまうような錯覚がある。なんの後ろ盾もないマイクロ法人やフリーランスになることでこういった根源的な問いから目を背けられなくなる。私の場合、そのことに2年目で気付けるようになった。今後のビジネスにおいても、直接的ではなく間接的にコミュニティというのはキーワードだと考えている。コミュニティへの理解を深めるためにもコワーキングには今後も注目していきたい。&lt;/p></content></item><item><title>プロジェクト管理のドキュメントや資料の更新</title><link>/diary/posts/2023/0926/</link><pubDate>Tue, 26 Sep 2023 14:48:54 +0900</pubDate><guid>/diary/posts/2023/0926/</guid><description>23時に寝て何度か起きて7時に起きた。
開発方法論／開発ガイドの更新 前回の改訂 から約4ヶ月ぶりに開発方法論と開発ガイドを改訂した。
開発方法論: プロダクトで採用している開発方法論の概念をまとめる 開発ガイド: 開発方法論を具体的に実践する方法についてまとめる 近いうち、チームに新規メンバーが入る。今回の開発を経て新たにわかったことや変わったところなどを更新するつもりで全体を読み直してみたが、大きく変わったところはなく小さいアップデートに留まった。開発方法論に 情報共有とコミュニケーションのレベル というタイトルで5段階のレベルについての考え方を追記した。この内容は私もまだ完全に言語化できているわけではない。「聞かなくてもわかる」という価値観の存在をまったく疑っていないが、その背景にあるコミュニケーションの在り方や人間関係や組織での運用についてまだ曖昧なところが多い。それも含めて考えるよい機会だと思ってうちのチームに向けた内容に整理し直してまとめてみた。もう2-3回ぐらいこのテーマで話しをしたりすると、より言語化できてもっとよいものができそうな気配は感じている。
fun/done/learn のカスタマイズ 昨年からふりかえりの手法として fun/done/learn という手法を採用している。2週間のイテレーションが終わったときに毎回このフレームワークを使って、やったことをメンバーに共有するといった用途のために使っている。大きな開発のふりかえりを行ったときにマイルストーンごとの fun/done/learn の個数の変化などもふりかえってはいるが、そこの統計値がなにかに役に立つようには、いまのところ、うちのチームでは思えない。
今回のふりかえりをしているときにメンバーから done はいらないのではないか？という意見が出た。この手法の発明者のオリジナルの記事 ファン・ダン・ラーン(FDL)ふりかえりボード と読むと、done = deliver だし、done しなかったことも含めてのふりかえりを実践していたことが伺える。うちらはやったことをふりかえるためのフレームワークとして活用しているため、done がデフォルトでプラス fun/learn が付くといった運用になっていた。その通りだなと納得して done に置き換わる、うちらの開発の運用にあうカテゴリを考えてみて give を採用した。ゴロがよいように fun/give/learn と呼ぶ。
give とは、このマイルストーンでやったことを形式知として、他のメンバーに共有可能な状態にしたという意図を表す。wiki を書いたりするのもよいし、テックブログを書くのもよい。暗黙知を形式知に変えるには少し手間暇がかかるのでちょうどよいカテゴリに思える。3つのカテゴリに属するときにもっとも価値が高いような運用にも向いている。そのためのボードも作って、これを jamboard の背景に設定してふりかえりをしている。何ヶ月か運用してみて、うまくいきそうだったら fun/done/learn の亜種としてどうだろう？といった提案のテックブログを書いてみたい。</description><content>&lt;p>23時に寝て何度か起きて7時に起きた。&lt;/p>
&lt;h2 id="開発方法論開発ガイドの更新">開発方法論／開発ガイドの更新&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0524/#開発方法論／開発ガイドの更新">前回の改訂&lt;/a> から約4ヶ月ぶりに開発方法論と開発ガイドを改訂した。&lt;/p>
&lt;ul>
&lt;li>開発方法論: プロダクトで採用している開発方法論の概念をまとめる&lt;/li>
&lt;li>開発ガイド: 開発方法論を具体的に実践する方法についてまとめる&lt;/li>
&lt;/ul>
&lt;p>近いうち、チームに新規メンバーが入る。今回の開発を経て新たにわかったことや変わったところなどを更新するつもりで全体を読み直してみたが、大きく変わったところはなく小さいアップデートに留まった。開発方法論に &lt;a href="/diary/diary/posts/2022/0107/#情報共有とコミュニケーションコスト">情報共有とコミュニケーションのレベル&lt;/a> というタイトルで5段階のレベルについての考え方を追記した。この内容は私もまだ完全に言語化できているわけではない。「聞かなくてもわかる」という価値観の存在をまったく疑っていないが、その背景にあるコミュニケーションの在り方や人間関係や組織での運用についてまだ曖昧なところが多い。それも含めて考えるよい機会だと思ってうちのチームに向けた内容に整理し直してまとめてみた。もう2-3回ぐらいこのテーマで話しをしたりすると、より言語化できてもっとよいものができそうな気配は感じている。&lt;/p>
&lt;h2 id="fundonelearn-のカスタマイズ">fun/done/learn のカスタマイズ&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2022/1129/#ふりかえり">昨年からふりかえりの手法として fun/done/learn&lt;/a> という手法を採用している。2週間のイテレーションが終わったときに毎回このフレームワークを使って、やったことをメンバーに共有するといった用途のために使っている。大きな開発のふりかえりを行ったときにマイルストーンごとの fun/done/learn の個数の変化などもふりかえってはいるが、そこの統計値がなにかに役に立つようには、いまのところ、うちのチームでは思えない。&lt;/p>
&lt;p>今回のふりかえりをしているときにメンバーから done はいらないのではないか？という意見が出た。この手法の発明者のオリジナルの記事 &lt;a href="https://qiita.com/yattom/items/90ac533d993d3a2d2d0f">ファン・ダン・ラーン(FDL)ふりかえりボード&lt;/a> と読むと、done = deliver だし、done しなかったことも含めてのふりかえりを実践していたことが伺える。うちらはやったことをふりかえるためのフレームワークとして活用しているため、done がデフォルトでプラス fun/learn が付くといった運用になっていた。その通りだなと納得して done に置き換わる、うちらの開発の運用にあうカテゴリを考えてみて give を採用した。ゴロがよいように fun/give/learn と呼ぶ。&lt;/p>
&lt;p>give とは、このマイルストーンでやったことを形式知として、他のメンバーに共有可能な状態にしたという意図を表す。wiki を書いたりするのもよいし、テックブログを書くのもよい。暗黙知を形式知に変えるには少し手間暇がかかるのでちょうどよいカテゴリに思える。3つのカテゴリに属するときにもっとも価値が高いような運用にも向いている。そのためのボードも作って、これを jamboard の背景に設定してふりかえりをしている。何ヶ月か運用してみて、うまくいきそうだったら fun/done/learn の亜種としてどうだろう？といった提案のテックブログを書いてみたい。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0927_fun-give-learn.png"/>
&lt;/figure></content></item><item><title>最後は人のチカラがモノを言う</title><link>/diary/posts/2023/0720/</link><pubDate>Thu, 20 Jul 2023 19:57:17 +0900</pubDate><guid>/diary/posts/2023/0720/</guid><description>2時半に寝て寝たのかどうかよく分からないながら5時頃に寝落ちして7時半に起きた。
差分比較のための機能 id 連携で運用のための非機能要件の1つとして更新された内容を確認できるようにしたい。非機能要件だから私が作るかと思ってあたためておいた issue に着手した。wikipedia によると差分という言葉には次の2つの用語があるのをみつけた。
Delta update Data differencing 数学やコンピューターの用語的には delta (ギリシャ語で変化を表す) という言葉を使う。os のパッケージングシステムで一部のパッケージをアップデートするようなことをデルタアップデートと呼ぶ。一方でコンピューターサイエンスにおいて2つのデータセット間の差分については diff という用語を使う。データの差分においては diff でよいのではないかと思う。そういった用語の定義から始めた。mongodb のコレクションのデータ定義をしたり、結合テストを書いて動かしてみたり、インフラのレイヤーから開発に着手した。
上司道 企業家として生き様と、人として求められること 第92回上司道 企業家として生き様と、人として求められること に参加した。なんとなくタイトルに惹かれた。上司道 に参加するのは3回目。
講師の牛島さんは昨日が誕生日だったらしく90歳だという。90歳になって zoom でオンライン勉強会の講師を務めるというのを、私はまったく想像できないけど、コンサルタントの第一線で活躍されてきた方の貫禄があった。もともとどういう主旨の勉強会だったのかよく分かっていないけれど、内容はビジネスの自己啓発セミナーに近いものになった。牛島さんが90年も生きてきて大事だと思える内容には普遍性や汎用性があるのだと思う。いくつか共感できる考え方もあった。
これからは頭の良い人 (IQ が高い) よりも心が豊かな人 (EQ が高い) の方が大事で組織に貢献する 一番大切なのは幸せであること 楽しく生きる (働く) 過去に働いた会社でも頭がよくて何でもよく理解しているのにプロジェクトにあまり貢献しない人がいることに気付いた。さぼっているわけでもない。その違いを「心が豊かな人 (EQ が高い) 人」という言葉でいくつか説明できるのではないかと思えた。新規プロジェクトのような、常に変化して、正解もわからないまま進める業務において、論理や頭のよさだけでうまくいくことはなくなってきつつあるのではないか。なんのためにそのプロジェクトをやるのか、自分はなぜここで働いているのか、といった問いに答えをもっている人は普通の社員とは行動が異なる。自身の価値観や展望と比較して、現状の課題や改善に気付くのでプロジェクトを前向きに進めていける。頭のよい人は「あれが問題」「これが問題」と問題を指摘してエスカレーションするだけで自らが課題をどう解決するかの答えをもっていない。そんなことを考えながらこの話しを聞いていた。
次の2つは最近の私の人生観や働き方と重なるところがある。私はもう無理してがんばったりしないし、自分が嫌なお仕事も一切しないように決めている。一般的にいう「働きたくない」という生き方を目指している。もちろん実際には働いているわけだけど、それはなるべく働く時間を、遊んでいる時間に置き換えられないかと模索している。その過程で辛いことやしんどいことも避けようと考えている。
なぜそれができるかというのも、20代30代と約20年働いてきて自身の価値観を育ててきたからだと捉えている。私はなにが楽しくて、なにが辛くて、なにをやりたくないか。これは人それぞれに違う。私には私にしかない価値観をもっている。それがわかってきたから、いま自分の会社を経営していて、毎日がとても楽しいし、自分の価値観にあわないことはすべて断るという判断基準も明確になっている。そんな勝手気ままでやっていけるの？という懸念を抱く人も多いと思う。ダメかもしれない。仮にやっていけなかったとしても、いまの自分は幸せで楽しいのだからそれでいいんじゃないかと思う。無理をしていまがしんどくても将来がよくなる保証なんてどこにもない。
牛島さんはマザーテレサとインドで実際に会って10日間ほど一緒に過ごしてその体験がその後の人生を大きく変えたように話されていた。マザーテレサに「社員を大事にしていますか？」と聞かれたときに「しています。」と答え、その後に「社員全員の名前を覚えていますか？」と聞かれたという。当時の牛島さんの会社の社員は300人以上いて全員は覚えていなかった。それで「愛情の反対は無関心なのですよ。」とマザーテレサに指摘されて大きな衝撃を受けたという。その後、帰国してから300人以上の社員全員の名前を覚え、日々の業務で社員の行動などに気を配ってすべての社員に声をかけたりするようになったという。このエピソードもなかなか私には効く話しで、私は他人にかなりのレベルで関心がない。もし自分の会社で社員を雇うことになったら待遇がどうとか以前に、その人そのものに関心をもつという姿勢を覚えておこうと思う。</description><content>&lt;p>2時半に寝て寝たのかどうかよく分からないながら5時頃に寝落ちして7時半に起きた。&lt;/p>
&lt;h2 id="差分比較のための機能">差分比較のための機能&lt;/h2>
&lt;p>id 連携で運用のための非機能要件の1つとして更新された内容を確認できるようにしたい。非機能要件だから私が作るかと思ってあたためておいた issue に着手した。wikipedia によると差分という言葉には次の2つの用語があるのをみつけた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Delta_update">Delta update&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Data_differencing">Data differencing&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>数学やコンピューターの用語的には delta (ギリシャ語で変化を表す) という言葉を使う。os のパッケージングシステムで一部のパッケージをアップデートするようなことをデルタアップデートと呼ぶ。一方でコンピューターサイエンスにおいて2つのデータセット間の差分については diff という用語を使う。データの差分においては diff でよいのではないかと思う。そういった用語の定義から始めた。mongodb のコレクションのデータ定義をしたり、結合テストを書いて動かしてみたり、インフラのレイヤーから開発に着手した。&lt;/p>
&lt;h2 id="上司道-企業家として生き様と人として求められること">上司道 企業家として生き様と、人として求められること&lt;/h2>
&lt;p>&lt;a href="https://www.facebook.com/events/1287346985493718?ref=newsfeed">第92回上司道 企業家として生き様と、人として求められること&lt;/a> に参加した。なんとなくタイトルに惹かれた。&lt;a href="/diary/diary/posts/2023/0228/#上司道-野村監督から学ぶリーダーの器のつくり方">上司道&lt;/a> に参加するのは3回目。&lt;/p>
&lt;p>講師の牛島さんは昨日が誕生日だったらしく90歳だという。90歳になって zoom でオンライン勉強会の講師を務めるというのを、私はまったく想像できないけど、コンサルタントの第一線で活躍されてきた方の貫禄があった。もともとどういう主旨の勉強会だったのかよく分かっていないけれど、内容はビジネスの自己啓発セミナーに近いものになった。牛島さんが90年も生きてきて大事だと思える内容には普遍性や汎用性があるのだと思う。いくつか共感できる考え方もあった。&lt;/p>
&lt;ul>
&lt;li>これからは頭の良い人 (IQ が高い) よりも心が豊かな人 (EQ が高い) の方が大事で組織に貢献する&lt;/li>
&lt;li>一番大切なのは幸せであること&lt;/li>
&lt;li>楽しく生きる (働く)&lt;/li>
&lt;/ul>
&lt;p>過去に働いた会社でも頭がよくて何でもよく理解しているのにプロジェクトにあまり貢献しない人がいることに気付いた。さぼっているわけでもない。その違いを「心が豊かな人 (EQ が高い) 人」という言葉でいくつか説明できるのではないかと思えた。新規プロジェクトのような、常に変化して、正解もわからないまま進める業務において、論理や頭のよさだけでうまくいくことはなくなってきつつあるのではないか。なんのためにそのプロジェクトをやるのか、自分はなぜここで働いているのか、といった問いに答えをもっている人は普通の社員とは行動が異なる。自身の価値観や展望と比較して、現状の課題や改善に気付くのでプロジェクトを前向きに進めていける。頭のよい人は「あれが問題」「これが問題」と問題を指摘してエスカレーションするだけで自らが課題をどう解決するかの答えをもっていない。そんなことを考えながらこの話しを聞いていた。&lt;/p>
&lt;p>次の2つは最近の私の人生観や働き方と重なるところがある。私はもう無理してがんばったりしないし、自分が嫌なお仕事も一切しないように決めている。一般的にいう「働きたくない」という生き方を目指している。もちろん実際には働いているわけだけど、それはなるべく働く時間を、遊んでいる時間に置き換えられないかと模索している。その過程で辛いことやしんどいことも避けようと考えている。&lt;/p>
&lt;p>なぜそれができるかというのも、20代30代と約20年働いてきて自身の価値観を育ててきたからだと捉えている。私はなにが楽しくて、なにが辛くて、なにをやりたくないか。これは人それぞれに違う。私には私にしかない価値観をもっている。それがわかってきたから、いま自分の会社を経営していて、毎日がとても楽しいし、自分の価値観にあわないことはすべて断るという判断基準も明確になっている。そんな勝手気ままでやっていけるの？という懸念を抱く人も多いと思う。ダメかもしれない。仮にやっていけなかったとしても、いまの自分は幸せで楽しいのだからそれでいいんじゃないかと思う。無理をしていまがしんどくても将来がよくなる保証なんてどこにもない。&lt;/p>
&lt;p>牛島さんはマザーテレサとインドで実際に会って10日間ほど一緒に過ごしてその体験がその後の人生を大きく変えたように話されていた。マザーテレサに「社員を大事にしていますか？」と聞かれたときに「しています。」と答え、その後に「社員全員の名前を覚えていますか？」と聞かれたという。当時の牛島さんの会社の社員は300人以上いて全員は覚えていなかった。それで「愛情の反対は無関心なのですよ。」とマザーテレサに指摘されて大きな衝撃を受けたという。その後、帰国してから300人以上の社員全員の名前を覚え、日々の業務で社員の行動などに気を配ってすべての社員に声をかけたりするようになったという。このエピソードもなかなか私には効く話しで、私は他人にかなりのレベルで関心がない。もし自分の会社で社員を雇うことになったら待遇がどうとか以前に、その人そのものに関心をもつという姿勢を覚えておこうと思う。&lt;/p></content></item><item><title>雑談について雑談した</title><link>/diary/posts/2023/0715/</link><pubDate>Sat, 15 Jul 2023 17:38:29 +0900</pubDate><guid>/diary/posts/2023/0715/</guid><description>1時に寝て何度か起きて7時に起きた。昨日は遅くまで調べものをしていたわりには達成感がなくていまいちな金曜日になった。
ストレッチ 東京出張から戻ってきたときはあまり体調がよくないことが多い。今日は右足全般の張りが強かった。すねの外側、太ももの後ろ、股関節の関節部位、あちこち硬いなと思えた。今日の開脚幅は開始前154cmで、ストレッチ後158cmだった。数値もよくはなかった。なんとなくだけど、あと何年かしたら右足が動かなくなるんじゃないかとすら思えるようになってきた。いまストレッチしているのはその寿命を伸ばす行為だと考えている。なにもしていないのに体調が悪くなるというのがこれからどんどん増えてくるのだと推測する。悪いことばかりでもなく、先週まで辛かった首の痛みは気付いたら治っていた。
日本ナレッジ・マネジメント学会に加入申請を出した 先日の課題管理の雑談 のときに 日本ナレッジ・マネジメント学会 という学会があることを教えていただいた。学術的なところでナレッジマネジメント (知識経営) についてどのようなことが研究されていて (あるいはされていなくて)、どういう知見が溜まっているのかを知りたかったのでちょうどうちの会社にとってよい機会だと思える。
さっそく web のフォームから加入申請を送って、法人会員になるのは申請書を郵送する必要があるとのことでその事務手続きも終えた。法人会員は10万円/年の費用がかかる。学会などの年会費は「諸会費」という勘定科目使い、不課税となる。まぁこのぐらいの金額ならよいだろうと即断即決で決めた。
雑談の雑談 毎月お手伝い先の会社に出張して経営陣とサポート部門トップを含めたトップ3に プロジェクトの進捗報告 をしている。
プロジェクトの初期の頃は情報共有を密にしたり親睦を深める意図から (言うても月1回だけれども) 毎月行くことには意味はあった。しかし、うちのチームはフルリモートで開発が進む体制になっており、私が物理的にオフィスに出向かなくてもプロジェクトの開発にはほとんど影響を与えない。ではなぜ出張しているのかの意義はプロジェクトの進捗報告をオフライン会議でやっていることの方が大きいのではないかと思うようになってきた。早いときは20分ほどで報告は終わるし、普通にやっても30分もあったら報告内容は終わる。そこから参加者でその時々の雑談が始まる。会議のうち報告と雑談の時間が半々ぐらいといったときもある。
この雑談の機会を作る大義名分として、私が出張して進捗報告の会議があるから「出しになっている」のではないか？という仮説を思いついた。その場では「プロジェクトには直接関係ないのだけど、、、」という話題もちょくちょく出る。会社の業務には誰の責任でも担当でもない宙ぶらりんになる業務も発生する。チームならそれはマネージャーがすべて巻き取るわけだが、部署単位になると浮いたままになることもある。そういう話題がこの会議の中ではちょくちょくあがってくる。
建前上の会議を「出しにして」話す機会のない人たちが雑談するという、別の価値を提供している会議もあるんじゃないかと、顧問のはらさんと雑談していたところ、次の記事を紹介された。
なぜ雑談が重要か 私も前日にざっと読んでこれはひどい記事だなと思ってスルーしていた。意外とこの記事の是非について盛り上がった。私がこの記事をひどいと思うのは次の点になる。
目的と手段をベン図 (集合を扱う表現) で表すという奇妙さ 会議では重要な情報を得られず雑談でこそ得られるという極端な物言い そういうケースがあることは同意するが、大半は会議で重要な情報を得られているはずだ 会議と雑談を別の空間や時間で行う対立軸のように書いているところ 会議の中で雑談して、会議内の雑談で発見があったのならそれは会議で得られたのと同じこと (上述した事例が正にそう) 雑談は会議を補うものであって会議を置き換えるものではない 会議で重要な情報を得られないなんてことは一般の業務においてあり得ない 試しにこの記事の著者が書いた本のファンである友だちにも意見を聞いてみたところ、次のようなコメントが返ってきた。
目的と手段を同じ座標の集合にするのは無理がある 手段を「目的の役に立つもの」と独自定義を置き換えることへの懸念と分かりにくさ 本とブログとのギャップに驚いている。どちらかが本人でどちらかがゴーストライターなのか、とさえ思ってしまう 前半の大事な前提が受け入れられないからその続きの内容も入ってこないといったコメントをその友だちからもらった。そんな話しをしていると、はらさんが javascript と java を混同して話す人はなにを話しても聞く気にならないと解釈すれば理解できると共感していた。それぐらい冒頭の目的と手段について書かれた内容はわかりにくいと言える。
著者が言いたいことは、本質的な課題は最初からわかりにくいもので顧客自身も気付いていないことが多い。いくつか調査したりヒアリングしたり、その結果を分析したりしながら徐々にわかってきたりすることがある。イシューからはじめよ ではそのことを「解くべき問題 = 課題を見極める」と表現している。私はそれを課題管理で解決しようとしているが、著者は雑談で解決しようというアプローチの違いについて書いてあるものだと意図は理解できる。しかし、記事の内容は分かりにくいので支持しないというのが私の立場である。</description><content>&lt;p>1時に寝て何度か起きて7時に起きた。昨日は遅くまで調べものをしていたわりには達成感がなくていまいちな金曜日になった。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>東京出張から戻ってきたときはあまり体調がよくないことが多い。今日は右足全般の張りが強かった。すねの外側、太ももの後ろ、股関節の関節部位、あちこち硬いなと思えた。今日の開脚幅は開始前154cmで、ストレッチ後158cmだった。数値もよくはなかった。なんとなくだけど、あと何年かしたら右足が動かなくなるんじゃないかとすら思えるようになってきた。いまストレッチしているのはその寿命を伸ばす行為だと考えている。なにもしていないのに体調が悪くなるというのがこれからどんどん増えてくるのだと推測する。悪いことばかりでもなく、先週まで辛かった首の痛みは気付いたら治っていた。&lt;/p>
&lt;h2 id="日本ナレッジマネジメント学会に加入申請を出した">日本ナレッジ・マネジメント学会に加入申請を出した&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0711/#コパイロツトさんと雑談">先日の課題管理の雑談&lt;/a> のときに &lt;a href="https://kmsj.org/">日本ナレッジ・マネジメント学会&lt;/a> という学会があることを教えていただいた。学術的なところでナレッジマネジメント (知識経営) についてどのようなことが研究されていて (あるいはされていなくて)、どういう知見が溜まっているのかを知りたかったのでちょうどうちの会社にとってよい機会だと思える。&lt;/p>
&lt;p>さっそく web のフォームから加入申請を送って、法人会員になるのは申請書を郵送する必要があるとのことでその事務手続きも終えた。法人会員は10万円/年の費用がかかる。学会などの年会費は「諸会費」という勘定科目使い、不課税となる。まぁこのぐらいの金額ならよいだろうと即断即決で決めた。&lt;/p>
&lt;h2 id="雑談の雑談">雑談の雑談&lt;/h2>
&lt;p>毎月お手伝い先の会社に出張して経営陣とサポート部門トップを含めたトップ3に &lt;a href="/diary/diary/posts/2023/0712/">プロジェクトの進捗報告&lt;/a> をしている。&lt;/p>
&lt;p>プロジェクトの初期の頃は情報共有を密にしたり親睦を深める意図から (言うても月1回だけれども) 毎月行くことには意味はあった。しかし、うちのチームはフルリモートで開発が進む体制になっており、私が物理的にオフィスに出向かなくてもプロジェクトの開発にはほとんど影響を与えない。ではなぜ出張しているのかの意義はプロジェクトの進捗報告をオフライン会議でやっていることの方が大きいのではないかと思うようになってきた。早いときは20分ほどで報告は終わるし、普通にやっても30分もあったら報告内容は終わる。そこから参加者でその時々の雑談が始まる。会議のうち報告と雑談の時間が半々ぐらいといったときもある。&lt;/p>
&lt;p>この雑談の機会を作る大義名分として、私が出張して進捗報告の会議があるから「出しになっている」のではないか？という仮説を思いついた。その場では「プロジェクトには直接関係ないのだけど、、、」という話題もちょくちょく出る。会社の業務には誰の責任でも担当でもない宙ぶらりんになる業務も発生する。チームならそれはマネージャーがすべて巻き取るわけだが、部署単位になると浮いたままになることもある。そういう話題がこの会議の中ではちょくちょくあがってくる。&lt;/p>
&lt;p>建前上の会議を「出しにして」話す機会のない人たちが雑談するという、別の価値を提供している会議もあるんじゃないかと、顧問のはらさんと雑談していたところ、次の記事を紹介された。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://tech.stmn.co.jp/entry/2023/07/14/115639">なぜ雑談が重要か&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>私も前日にざっと読んでこれはひどい記事だなと思ってスルーしていた。意外とこの記事の是非について盛り上がった。私がこの記事をひどいと思うのは次の点になる。&lt;/p>
&lt;ul>
&lt;li>目的と手段をベン図 (集合を扱う表現) で表すという奇妙さ&lt;/li>
&lt;li>会議では重要な情報を得られず雑談でこそ得られるという極端な物言い
&lt;ul>
&lt;li>そういうケースがあることは同意するが、大半は会議で重要な情報を得られているはずだ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>会議と雑談を別の空間や時間で行う対立軸のように書いているところ
&lt;ul>
&lt;li>会議の中で雑談して、会議内の雑談で発見があったのならそれは会議で得られたのと同じこと (上述した事例が正にそう)&lt;/li>
&lt;li>雑談は会議を補うものであって会議を置き換えるものではない
&lt;ul>
&lt;li>会議で重要な情報を得られないなんてことは一般の業務においてあり得ない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>試しにこの記事の著者が書いた本のファンである友だちにも意見を聞いてみたところ、次のようなコメントが返ってきた。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>目的と手段を同じ座標の集合にするのは無理がある&lt;/li>
&lt;li>手段を「目的の役に立つもの」と独自定義を置き換えることへの懸念と分かりにくさ&lt;/li>
&lt;li>本とブログとのギャップに驚いている。どちらかが本人でどちらかがゴーストライターなのか、とさえ思ってしまう&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>前半の大事な前提が受け入れられないからその続きの内容も入ってこないといったコメントをその友だちからもらった。そんな話しをしていると、はらさんが javascript と java を混同して話す人はなにを話しても聞く気にならないと解釈すれば理解できると共感していた。それぐらい冒頭の目的と手段について書かれた内容はわかりにくいと言える。&lt;/p>
&lt;p>著者が言いたいことは、本質的な課題は最初からわかりにくいもので顧客自身も気付いていないことが多い。いくつか調査したりヒアリングしたり、その結果を分析したりしながら徐々にわかってきたりすることがある。&lt;a href="http://www.eijipress.co.jp/book/book.php?epcode=2085">イシューからはじめよ&lt;/a> ではそのことを「解くべき問題 = 課題を見極める」と表現している。私はそれを課題管理で解決しようとしているが、著者は雑談で解決しようというアプローチの違いについて書いてあるものだと意図は理解できる。しかし、記事の内容は分かりにくいので支持しないというのが私の立場である。&lt;/p></content></item><item><title>定例会議とそのプラクティス</title><link>/diary/posts/2023/0711/</link><pubDate>Tue, 11 Jul 2023 09:11:19 +0900</pubDate><guid>/diary/posts/2023/0711/</guid><description>22時に寝て1時半に起きて3時半に起きた。それからお風呂入って準備して始発の新幹線に乗った。いつもは夜通し起きているけど、今日は夜に雑談会があるので寝ておくことにした。
新しいやり方で1ヶ月が経過した定例会議 一ヶ月前の定例会議 は変更したばかりで手探りな状況ではあったが、今回は3つのマイルストーンをこなし、チームメンバーも新しいやり方に慣れてきたと言える。いまのところ、開発の情報共有でメンバーが困っているようにはみえない。しかし、タイムボックスの始めと終わりが生産性が上がるといったマイルストーンを短くした成果もあまりみえない。可もなく不可もなくといったところかな。悪いわけではない。
一方で6月末に私が休暇をとったり社員旅行があったりしてその分の業務時間が3日ほど少なかったことが最も大きく影響したと言うべきかもしれない。私は終わってみれば2週間で1つの issue しか fix していなくて、これまでは10以上 fix しているので、今回のマイルストーンの成果がいまいちにみえるのは私が最も働いていないといった方が正しい。いろいろ手掛けてはいるのだけど、調整のタイミングが悪くて fix しなかったという状況がある。それも含めて次の1ヶ月をピークにもっていく開発のメリハリではある。これまでの1ヶ月の進捗をみてメンバーにも3ヶ月でいま想定している機能開発を終わらせるよと共有した。
私が作業するなら余裕でこなせる作業量だけど、実際に作業するのは私じゃなくてメンバーが担当する。今後もメンバーの進捗を注視しながらサポートしていくことになる。他人の進捗をコミットするのはなかなか難しいという思いを抱きながらサポートしていく。
コパイロツトさんと雑談 準備を経て 19時半から南青山のオフィスで雑談してきた。いろいろ準備していったが、モニターが大き過ぎて画面共有しても文字がよくみえなかったり macbook の操作がやりにくかったりして資料はほとんど使わずに雑談してきた。コパイロツトさんはプロジェクトマネジメントそのものをやっているわけではなく、プロジェクトリーダーの意思決定を支援するための取り組みをしているというユニークな業務を提供している。スクラムで例えると、スクラムマスターよりも代理プロダクトオーナー (Proxy Product Owner) に近いという。
How to Succeed as a Proxy Product Owner 定例会議をうまくやればプロジェクトがうまくいくという信念のもと SuperGoodMeetings を提供している。ツールを正しく使ってもらえると意図した通りにうまくいくのだが、問題はツールをそもそも使ってくれないユーザーやチームをどう導くかというところで苦労されているように思えた。これは課題管理システムを使ってくれないという私の問題意識とも通じる。ツールを使いこなすには文章を書くことが重要で、文章を書けない人たちが一定数いるという事実を受け入れて、どのような取り組みをしていくか？これも課題管理と共通の問題であるように思える。課題管理の話しをして背景や意図が通じる人は少ないだけに、その価値観を共有できるというのは稀な機会であった。また 日本ナレッジ・マネジメント学会 という学会があることを教えていただいた。後日加入してみようと思う。
19時半から21時ぐらいまでオフィスで雑談して、その後23時半ぐらいまで飲みに行ってきた。楽しかった。</description><content>&lt;p>22時に寝て1時半に起きて3時半に起きた。それからお風呂入って準備して始発の新幹線に乗った。いつもは夜通し起きているけど、今日は夜に雑談会があるので寝ておくことにした。&lt;/p>
&lt;h2 id="新しいやり方で1ヶ月が経過した定例会議">新しいやり方で1ヶ月が経過した定例会議&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0613/#新しい定例会議の初日">一ヶ月前の定例会議&lt;/a> は変更したばかりで手探りな状況ではあったが、今回は3つのマイルストーンをこなし、チームメンバーも新しいやり方に慣れてきたと言える。いまのところ、開発の情報共有でメンバーが困っているようにはみえない。しかし、タイムボックスの始めと終わりが生産性が上がるといったマイルストーンを短くした成果もあまりみえない。可もなく不可もなくといったところかな。悪いわけではない。&lt;/p>
&lt;p>一方で6月末に私が休暇をとったり社員旅行があったりしてその分の業務時間が3日ほど少なかったことが最も大きく影響したと言うべきかもしれない。私は終わってみれば2週間で1つの issue しか fix していなくて、これまでは10以上 fix しているので、今回のマイルストーンの成果がいまいちにみえるのは私が最も働いていないといった方が正しい。いろいろ手掛けてはいるのだけど、調整のタイミングが悪くて fix しなかったという状況がある。それも含めて次の1ヶ月をピークにもっていく開発のメリハリではある。これまでの1ヶ月の進捗をみてメンバーにも3ヶ月でいま想定している機能開発を終わらせるよと共有した。&lt;/p>
&lt;p>私が作業するなら余裕でこなせる作業量だけど、実際に作業するのは私じゃなくてメンバーが担当する。今後もメンバーの進捗を注視しながらサポートしていくことになる。他人の進捗をコミットするのはなかなか難しいという思いを抱きながらサポートしていく。&lt;/p>
&lt;h2 id="コパイロツトさんと雑談">コパイロツトさんと雑談&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0709/#課題管理の雑談会へ向けての準備">準備を経て&lt;/a> 19時半から南青山のオフィスで雑談してきた。いろいろ準備していったが、モニターが大き過ぎて画面共有しても文字がよくみえなかったり macbook の操作がやりにくかったりして資料はほとんど使わずに雑談してきた。コパイロツトさんはプロジェクトマネジメントそのものをやっているわけではなく、プロジェクトリーダーの意思決定を支援するための取り組みをしているというユニークな業務を提供している。スクラムで例えると、スクラムマスターよりも代理プロダクトオーナー (Proxy Product Owner) に近いという。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/serious-scrum/how-to-succeed-as-a-proxy-product-owner-364c655d20b8">How to Succeed as a Proxy Product Owner&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>定例会議をうまくやればプロジェクトがうまくいくという信念のもと &lt;a href="https://supergoodmeetings.com/">SuperGoodMeetings&lt;/a> を提供している。ツールを正しく使ってもらえると意図した通りにうまくいくのだが、問題はツールをそもそも使ってくれないユーザーやチームをどう導くかというところで苦労されているように思えた。これは課題管理システムを使ってくれないという私の問題意識とも通じる。ツールを使いこなすには文章を書くことが重要で、文章を書けない人たちが一定数いるという事実を受け入れて、どのような取り組みをしていくか？これも課題管理と共通の問題であるように思える。課題管理の話しをして背景や意図が通じる人は少ないだけに、その価値観を共有できるというのは稀な機会であった。また &lt;a href="https://kmsj.org/">日本ナレッジ・マネジメント学会&lt;/a> という学会があることを教えていただいた。後日加入してみようと思う。&lt;/p>
&lt;p>19時半から21時ぐらいまでオフィスで雑談して、その後23時半ぐらいまで飲みに行ってきた。楽しかった。&lt;/p></content></item><item><title>ldap プロトコルの persistent search</title><link>/diary/posts/2023/0704/</link><pubDate>Tue, 04 Jul 2023 08:11:43 +0900</pubDate><guid>/diary/posts/2023/0704/</guid><description>0時に寝て5時に起きて6時半に起きた。朝から大鼓方を調べたりしていた。
persistent search あれこれ ldap プロトコルの文脈でクライアントがサーバーに接続して、エントリーの更新を検出して更新があったエントリーのみを取得することを persistent search (永続検索) と呼ぶ。メッセージキューで言うところの pubsub の consumer に相当する機能。フィルター条件に合致したエントリーのみを取得するという側面では検索と言える。
ietf のワーキンググループに次のような仕様がある。
Persistent Search: A Simple LDAP Change Notification Mechanism go-ldap で過去に Add Persistent search control + PersistentSearch() #80 で実装を追加しようとしたのもあったので調べてみた。しかし、この機能に openldap は対応していないようだ。
以前から調べている openldap の syncrepl も persistent search を実現する機能の1つと言える。ldap に詳しくないと用語と機能と実装の切り分けができなくて困惑する。syncrepl はもともとレプリケーションのための仕組みではあるが、pubsub の consumer としても使える。そういうときに syncrepl を使って &amp;ldquo;persistent search&amp;rdquo; を行うと言ったりする。このときに先の ietf に提案されている persistent search とはまったく関係ない。だから混乱する。
lopenldap サーバー同士で syncrepl の provider の機能は次の overlay モジュールによって提供される。逆に syncrepl の consumer の機能は openldap の組み込みの機能で提供される。なんらかの歴史的経緯があるのだろう。</description><content>&lt;p>0時に寝て5時に起きて6時半に起きた。朝から大鼓方を調べたりしていた。&lt;/p>
&lt;h2 id="persistent-search-あれこれ">persistent search あれこれ&lt;/h2>
&lt;p>ldap プロトコルの文脈でクライアントがサーバーに接続して、エントリーの更新を検出して更新があったエントリーのみを取得することを persistent search (永続検索) と呼ぶ。メッセージキューで言うところの pubsub の consumer に相当する機能。フィルター条件に合致したエントリーのみを取得するという側面では検索と言える。&lt;/p>
&lt;p>ietf のワーキンググループに次のような仕様がある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.ietf.org/proceedings/50/I-D/ldapext-psearch-03.txt">Persistent Search: A Simple LDAP Change Notification Mechanism&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>go-ldap で過去に &lt;a href="https://github.com/go-ldap/ldap/pull/80">Add Persistent search control + PersistentSearch() #80&lt;/a> で実装を追加しようとしたのもあったので調べてみた。しかし、この機能に openldap は対応していないようだ。&lt;/p>
&lt;p>以前から調べている &lt;a href="/diary/diary/posts/2023/0317/">openldap の syncrepl&lt;/a> も persistent search を実現する機能の1つと言える。ldap に詳しくないと用語と機能と実装の切り分けができなくて困惑する。syncrepl はもともとレプリケーションのための仕組みではあるが、pubsub の consumer としても使える。そういうときに syncrepl を使って &lt;em>&amp;ldquo;persistent search&amp;rdquo;&lt;/em> を行うと言ったりする。このときに先の ietf に提案されている persistent search とはまったく関係ない。だから混乱する。&lt;/p>
&lt;p>lopenldap サーバー同士で syncrepl の provider の機能は次の overlay モジュールによって提供される。逆に syncrepl の consumer の機能は openldap の組み込みの機能で提供される。なんらかの歴史的経緯があるのだろう。&lt;/p>
&lt;pre tabindex="0">&lt;code>overlay syncprov
&lt;/code>&lt;/pre>&lt;p>ldapsearch コマンドで persistent search (syncrepl consumer) を実行するには次のようにする。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ldapsearch -x -H &lt;span style="color:#e6db74">&amp;#34;ldap://localhost:389&amp;#34;&lt;/span> -b &lt;span style="color:#e6db74">&amp;#34;dc=example,dc=com&amp;#34;&lt;/span> -D &lt;span style="color:#e6db74">&amp;#34;cn=Manager,dc=example,dc=com&amp;#34;&lt;/span> -w &lt;span style="color:#e6db74">&amp;#34;secret&amp;#34;&lt;/span> -E &lt;span style="color:#e6db74">&amp;#39;!sync=rp&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ldap プロトコルの文脈で persistent search を行うといった場合、クライアントから pubsub で言うところの consumer を用意するといった意味だけで、その実装や通信方法はいくつか実現方法があるということを学んだ。&lt;/p>
&lt;h2 id="サイトデザイン最終レビュー">サイトデザイン最終レビュー&lt;/h2>
&lt;p>19時からデザイナーさんとはらさんと打ち合わせ。少し前に用意してくれた &lt;a href="/diary/diary/posts/2023/0619/#サイトデザインのサンプルページ">サイトデザインのサンプルページ&lt;/a> の最終レビューを行った。全体としては気に入っているので概ね ok なのだけど、詳細の気になったところやデザインの機微のようなところをはらさんと一緒にデザイナーさんとやり取りして共有した。&lt;/p>
&lt;p>デザインだけをみてこちらで想定していたことも、デザイナーさんの意見や視点を伺ってみると発見があっておもしろかった。逆に言えば、デザインだけでデザイナーさんの意図を伝えるのはとても難しいということもわかった。背景の説明を受けると論理的だったり合理性があったりするものの、なにも情報がない状態でそのことに気付くのは難しい。これはコードリーディングにおいても同じで、作者に意図の説明を受けながらソースコードを読むと簡単に理解できたりする。そして、デザイナーさんもうちらの意見から考え方を見直すこともあった。ウェブデザインのようなものを1人で完全に気付きを得るのは難しそうだ。&lt;/p>
&lt;p>はらさんにレビューに入ってもらっていてとても助かる。私は ui/ux については素人なので、要件やレビューする視点の重要なところにツッコミを入れてくれるので気付くことも多い。私がコードレビューで設計やプログラミングについて指摘しているのも、別の人の視点からみるとこういうみえ方をするんだろうなと思いながら聞いていた。「餅は餅屋」とはよく言った言葉だ。自分がよくわからない分野のお仕事を依頼もしくは話すときは、自分たちの立場でそういった外部の専門家を雇うことの重要性も同時に理解できた。私は課題管理の専門家としてそういうポジションを作っていきたい。&lt;/p></content></item><item><title>トイレにうんこ</title><link>/diary/posts/2023/0623/</link><pubDate>Fri, 23 Jun 2023 21:55:59 +0900</pubDate><guid>/diary/posts/2023/0623/</guid><description>0時に寝て4時に起きてドラクエタクトやりながらだらだらしているうちに少し寝て7時に起きた。
トイレにうんこを詰まらせた いや。正確にはトイレが詰まってうんこを浮かべた。朝トイレへ行ったら洋式トイレにトイレットペーパーが漂っていた。前に使った人が流していないのかな？と考えて気持ち悪いのですぐ流した。これまでも過去にそういうことがたまにあった。あとから考えると、誰かのいたずらでなにかしらトイレに詰まるものがトイレットペーパーの下に隠されていた可能性もある。この時点で次に水が流れるかどうかのチェックをするべきと洞察できていなかった。
それから、うんこして流したらトイレが詰まったようで流れない。微妙に便器から水が溢れてきた。ぎりぎり溢れ返ることにはならなかったのでトイレの床にうんこが散乱する最悪の状況にはならなかった。しかし、トイレにうんこがぷかぷか浮かんでいる状態になった。べつに私が悪いわけではないと思うのだけど、トイレにうんこが浮かんでいる状態にしてしまったことにとても罪悪感を感じた。
幸い朝8時からシェアオフィスにいるのは私ぐらいで、多くの利用者は10時前後にならないと出社してこない。いまトイレに誰かが入ってきて犯人扱いされることはなさそう。なんか行き当たりで人を殺めてしまった殺人犯みたいな心境になった。運営会社のサポートは9時から。1階へ降りていって掃除のおばちゃんに尋ねてみたけど、うんこが浮かんだトイレの階は自分たちの管轄じゃないと断られてしまった。(´・ω・｀) 仕方なく、時間を待って9時ぴったりにサポートに電話して聞いてみる。サポートにも断られたらどうしよう？不安と緊張が走る。サポートのお姉さんは (当然ではあると思うけれども) 全然平気ですよーと快く応じてくれて安心した。まぁ、電話しているお姉さんが対応するわけじゃないしね。
電話で一報を終えて、その後、トイレ業者さんが来るまで自分のうんこを浮かべておいていいのかどうか、すごく悩んだ。かといってうんこを取り出す勇気もなく結果的にそのまま放置した。人間がしょぼい。40年以上も生きてきて自分のうんこの処理もできないのかと思うと本当に情けなくなった。「入るな、危険」ぐらいの張り紙しといてもよかった。本当の犯人だったらここでとんでもないトリックを思いついて実行するところだけど、一報したことでそこまでの切羽詰まった状況でもなくなっていた。もし警察がやってきてもサポートのお姉さんが犯人じゃないと証言してくれるだろう。
9時から打ち合わせがあって、1時間半後、恐る恐るトイレを見に行ったらすでに詰まりは解消していてうんこもなくなっていた。平和な日常が戻ってきてよかった。
平安時代とか、都はうんこまみれだったという記事を昔読んだのを思い出した。
ドキッ！　死体だらけの平安京！　ポロリもあるよ！　―命の重さの日本史― 隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。
サイトデザインのサンプルページレビュー 課題管理の雑談会の資料のレビュー 最初の30分でサイトデザインをみながら、はらさんのレビューの視点や背景を教えてもらっていくつか気付きを得た。後半は来月の雑談会へ向けて、課題管理の資料のレビューを始めて、いつもは1時間で打ち合わせを終えるのだけれど、つい課題管理の話しでテンションあがって話し過ぎてしまって30分オーバーした。打ち合わせのような時間を決めている会議で議論に熱くなるのはよくない。失敗したなーと反省した。
パスワードの表現 go でパスワードを扱うときに平文をハッシュ化して保持するためのユーザー定義の構造体を作りたい。構造体にハッシュ化した値をもつとしても、プログラマーが誤って任意の値を設定できないように制御したい。ここで go はオブジェクト指向言語ではないのでコンストラクタという概念がない。私が知っているもっともシンプルな方法は interface と private な構造体を組み合わせてコンストラクタに近いものを実装する。コードレビューしていてメンバーにパスワードがハッシュ化されていることを保証する仕組みをお題として指摘してみた。
今日のところは解決できなくて月曜日に持ち越しになった。私の想定する模範解答は次のようなものだけど、ちゃんと自分で考えて実装できるかなぁ。
type Password interface { Authenticate(s string) error Get() []byte String() string } type passwd struct { hashed []byte } func (p *passwd) Authenticate(s string) error { return bcrypt.CompareHashAndPassword(p.hashed, []byte(s)) } func (p *passwd) Get() []byte { return p.hashed } func (p *passwd) String() string { return string(p.</description><content>&lt;p>0時に寝て4時に起きてドラクエタクトやりながらだらだらしているうちに少し寝て7時に起きた。&lt;/p>
&lt;h2 id="トイレにうんこを詰まらせた">トイレにうんこを詰まらせた&lt;/h2>
&lt;p>いや。正確にはトイレが詰まってうんこを浮かべた。朝トイレへ行ったら洋式トイレにトイレットペーパーが漂っていた。前に使った人が流していないのかな？と考えて気持ち悪いのですぐ流した。これまでも過去にそういうことがたまにあった。あとから考えると、誰かのいたずらでなにかしらトイレに詰まるものがトイレットペーパーの下に隠されていた可能性もある。この時点で次に水が流れるかどうかのチェックをするべきと洞察できていなかった。&lt;/p>
&lt;p>それから、うんこして流したらトイレが詰まったようで流れない。微妙に便器から水が溢れてきた。ぎりぎり溢れ返ることにはならなかったのでトイレの床にうんこが散乱する最悪の状況にはならなかった。しかし、トイレにうんこがぷかぷか浮かんでいる状態になった。べつに私が悪いわけではないと思うのだけど、トイレにうんこが浮かんでいる状態にしてしまったことにとても罪悪感を感じた。&lt;/p>
&lt;p>幸い朝8時からシェアオフィスにいるのは私ぐらいで、多くの利用者は10時前後にならないと出社してこない。いまトイレに誰かが入ってきて犯人扱いされることはなさそう。なんか行き当たりで人を殺めてしまった殺人犯みたいな心境になった。運営会社のサポートは9時から。1階へ降りていって掃除のおばちゃんに尋ねてみたけど、うんこが浮かんだトイレの階は自分たちの管轄じゃないと断られてしまった。(´・ω・｀) 仕方なく、時間を待って9時ぴったりにサポートに電話して聞いてみる。サポートにも断られたらどうしよう？不安と緊張が走る。サポートのお姉さんは (当然ではあると思うけれども) 全然平気ですよーと快く応じてくれて安心した。まぁ、電話しているお姉さんが対応するわけじゃないしね。&lt;/p>
&lt;p>電話で一報を終えて、その後、トイレ業者さんが来るまで自分のうんこを浮かべておいていいのかどうか、すごく悩んだ。かといってうんこを取り出す勇気もなく結果的にそのまま放置した。人間がしょぼい。40年以上も生きてきて自分のうんこの処理もできないのかと思うと本当に情けなくなった。「入るな、危険」ぐらいの張り紙しといてもよかった。本当の犯人だったらここでとんでもないトリックを思いついて実行するところだけど、一報したことでそこまでの切羽詰まった状況でもなくなっていた。もし警察がやってきてもサポートのお姉さんが犯人じゃないと証言してくれるだろう。&lt;/p>
&lt;p>9時から打ち合わせがあって、1時間半後、恐る恐るトイレを見に行ったらすでに詰まりは解消していてうんこもなくなっていた。平和な日常が戻ってきてよかった。&lt;/p>
&lt;p>平安時代とか、都はうんこまみれだったという記事を昔読んだのを思い出した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://locust0138.hatenablog.com/entry/2019/10/18/233617">ドキッ！　死体だらけの平安京！　ポロリもあるよ！　―命の重さの日本史―&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="/diary/diary/posts/2023/0619/#サイトデザインのサンプルページ">サイトデザインのサンプルページレビュー&lt;/a>&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2023/0617/#課題管理の雑談会へ向けての準備">課題管理の雑談会の資料のレビュー&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>最初の30分でサイトデザインをみながら、はらさんのレビューの視点や背景を教えてもらっていくつか気付きを得た。後半は来月の雑談会へ向けて、課題管理の資料のレビューを始めて、いつもは1時間で打ち合わせを終えるのだけれど、つい課題管理の話しでテンションあがって話し過ぎてしまって30分オーバーした。打ち合わせのような時間を決めている会議で議論に熱くなるのはよくない。失敗したなーと反省した。&lt;/p>
&lt;h2 id="パスワードの表現">パスワードの表現&lt;/h2>
&lt;p>go でパスワードを扱うときに平文をハッシュ化して保持するためのユーザー定義の構造体を作りたい。構造体にハッシュ化した値をもつとしても、プログラマーが誤って任意の値を設定できないように制御したい。ここで go はオブジェクト指向言語ではないのでコンストラクタという概念がない。私が知っているもっともシンプルな方法は interface と private な構造体を組み合わせてコンストラクタに近いものを実装する。コードレビューしていてメンバーにパスワードがハッシュ化されていることを保証する仕組みをお題として指摘してみた。&lt;/p>
&lt;p>今日のところは解決できなくて月曜日に持ち越しになった。私の想定する模範解答は次のようなものだけど、ちゃんと自分で考えて実装できるかなぁ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Password&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Authenticate&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Get&lt;/span>() []&lt;span style="color:#66d9ef">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">String&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">passwd&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hashed&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">passwd&lt;/span>) &lt;span style="color:#a6e22e">Authenticate&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">bcrypt&lt;/span>.&lt;span style="color:#a6e22e">CompareHashAndPassword&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">hashed&lt;/span>, []byte(&lt;span style="color:#a6e22e">s&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">passwd&lt;/span>) &lt;span style="color:#a6e22e">Get&lt;/span>() []&lt;span style="color:#66d9ef">byte&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">hashed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">passwd&lt;/span>) &lt;span style="color:#a6e22e">String&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> string(&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">hashed&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewPassword&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">Password&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">h&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bcrypt&lt;/span>.&lt;span style="color:#a6e22e">GenerateFromPassword&lt;/span>([]byte(&lt;span style="color:#a6e22e">s&lt;/span>), &lt;span style="color:#a6e22e">bcrypt&lt;/span>.&lt;span style="color:#a6e22e">DefaultCost&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">passwd&lt;/span>{&lt;span style="color:#a6e22e">hashed&lt;/span>: &lt;span style="color:#a6e22e">h&lt;/span>}, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>ぼくのかんがえたさいきょうの定例会議</title><link>/diary/posts/2023/0607/</link><pubDate>Wed, 07 Jun 2023 18:48:14 +0900</pubDate><guid>/diary/posts/2023/0607/</guid><description>1時に寝て何度か起きて8時に起きた。昨日ブログを書き終えてほっとしたのか、珍しく寝坊した。
課題管理の定例会議の進め方 5月31日から 新しい開発がスタート していてイテレーションを2週間に、そして定例会議も同様に隔週とした。その狙いは先日の日記に書いてあるが、これまで毎週やっていた定例会議の進め方はあわないので新規に会議の進め方を刷新した。これまでふりかえりと定例会議を別にやっていたのを1つにした。またふりかえりの会議のときに、ふりかえり作業そのものもやっていたのを、定例までに事前にメンバーがそれぞれやってきて、結果を定例のときに共有しようというやり方に改めた。ネガティブなふりかえりは発生時点で課題管理システムに登録してフィルター可能というのがアピールポイント。いまチームのメンバーが3人なのでこれでも会議は1時間でおさまる見積もり。メンバーが増えたらふりかえりと定例は別の時間にわけてやるかな？会議時間が長くなるとダレるので1つの会議は1時間以内で締めるというのは徹底したい。
現マイルストーンのふりかえり (目安時間: 25分) fun/done/learn を使ったポジティブなふりかえり で共有 ネガティブなふりかえりは課題管理システムに Postmortem ラベルを付与して issue 登録したものを共有 次マイルストーンでやることの確認 (目安時間: 25分) 課題管理システムにある次マイルストーンでフィルターした issue を共有 issue になっていないもので聞きたいことや分からないことを聞く (目安時間: 10分) メンバーが自由に意見を表明 雑談 (余り時間) メンバーが自由に雑談 事前準備を済ましてから、スクラムでいうところの、レトロスペクティブとプランニングを同時にやるといったもの。実践としてうまくいくかどうか、今回の開発で試してみる。</description><content>&lt;p>1時に寝て何度か起きて8時に起きた。昨日ブログを書き終えてほっとしたのか、珍しく寝坊した。&lt;/p>
&lt;h2 id="課題管理の定例会議の進め方">課題管理の定例会議の進め方&lt;/h2>
&lt;p>5月31日から &lt;a href="/diary/diary/posts/2023/0530/#落ち穂拾いの終了">新しい開発がスタート&lt;/a> していてイテレーションを2週間に、そして定例会議も同様に隔週とした。その狙いは先日の日記に書いてあるが、これまで毎週やっていた定例会議の進め方はあわないので新規に会議の進め方を刷新した。これまでふりかえりと定例会議を別にやっていたのを1つにした。またふりかえりの会議のときに、ふりかえり作業そのものもやっていたのを、定例までに事前にメンバーがそれぞれやってきて、結果を定例のときに共有しようというやり方に改めた。ネガティブなふりかえりは発生時点で課題管理システムに登録してフィルター可能というのがアピールポイント。いまチームのメンバーが3人なのでこれでも会議は1時間でおさまる見積もり。メンバーが増えたらふりかえりと定例は別の時間にわけてやるかな？会議時間が長くなるとダレるので1つの会議は1時間以内で締めるというのは徹底したい。&lt;/p>
&lt;ol>
&lt;li>現マイルストーンのふりかえり (目安時間: 25分)
&lt;ol>
&lt;li>&lt;a href="/diary/diary/posts/2022/1129/">fun/done/learn を使ったポジティブなふりかえり&lt;/a> で共有&lt;/li>
&lt;li>ネガティブなふりかえりは課題管理システムに &lt;code>Postmortem&lt;/code> ラベルを付与して issue 登録したものを共有&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>次マイルストーンでやることの確認 (目安時間: 25分)
&lt;ol>
&lt;li>課題管理システムにある次マイルストーンでフィルターした issue を共有&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>issue になっていないもので聞きたいことや分からないことを聞く (目安時間: 10分)
&lt;ol>
&lt;li>メンバーが自由に意見を表明&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>雑談 (余り時間)
&lt;ol>
&lt;li>メンバーが自由に雑談&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>事前準備を済ましてから、スクラムでいうところの、レトロスペクティブとプランニングを同時にやるといったもの。実践としてうまくいくかどうか、今回の開発で試してみる。&lt;/p></content></item><item><title>わかりにくさと能動的</title><link>/diary/posts/2023/0601/</link><pubDate>Thu, 01 Jun 2023 08:34:31 +0900</pubDate><guid>/diary/posts/2023/0601/</guid><description>22時に寝て何度か起きて7時に起きた。たまには早く寝てみた。
チャンネルを用いた ldap 検索の api うちらの要件に足りない機能が go-ldap にある。私が機能拡張についての issue を作ったときにある開発者が先にこの機能が必要だとコメントしてくれた。もともと draft pr で実装されたコードがあったのでそれをベースに検証したら普通に動いた。あとは go のエンジニアリングとして開発者が使いやすいように、私の経験からのアレンジを加えて pr とした。テストも実装した。なにか問題があればレビューで指摘さえしてくれれば私がすぐ修正してマージできるはずと考えている。はてさて、どうなることやら。
Add search with channels with context #440 能―650年続いた仕掛けとは― 能―650年続いた仕掛けとは― を読んでいる続き。世阿弥の紹介をしている第五章に感化された。
第四章 能にはこんな仕掛けが隠されていた 能はシテ (主役) の役柄や内容で5種類にわけられる。
初番目物 神: 神様が登場して颯爽 (さっそう) と舞う 二番目物 男: 修羅物とも呼ばれ、武将が修羅道に落ちた苦しみを描く 三番目物 女: 鬘物 (かずらもの) とも呼ばれ、優雅な美しいものが多い 四番目物 狂: 雑能とも呼ばれ、他の4つに分類されないもの 五番目物 鬼: 切能 (きりのう) とも呼ばれ、鬼や妖怪、精霊、霊獣などがシテになる さらにこの5つの分類に入らない翁という演目もある。翁を最初に置き、この順番に上演しながら、能と能の間に狂言を演じ、最後に祝言の短い能を演じるのがかつての正式な上演だったらしい。これだけ演じると朝から晩までかかってしまうので忙しい現代ではなかなかみれなくなってしまっているという。
ひと昔前は結婚式で仲人さんや親戚が謡を謡っていたという。たしかに古風な結婚式ではそうだったような、、、と私もうっすらとそういう記憶があるような気もする。
能の身体的な特徴の1つに摺り足がある。摺り足には重い二本の刀を腰に差して腰痛にならないという効能があるらしい。ほんとかな？
世阿弥が能の構造は序破急にせよと書いている。序はワキの登場、破はシテが登場して話をして去る、急は再びシテが姿を変えて登場するといった構造になる。水戸黄門や暴れん坊将軍のような時代劇の最後の展開が急に相当する。水戸黄門で例えると次になる。
序: 現状把握と善人の窮状 破: 善人が騙される／襲われる 急: 印籠を出す そして、この後に書いてあることが個人的におもしろかった。水戸黄門は番組開始時点では印籠を出すようなシーンはなくて、当初は助さん角さんが敵をたたき斬っていただけだったという。そもそも印籠を出したぐらいで本物の水戸黄門かどうか分かるわけもなく悪人がひれ伏すはずがないw あるときから印籠を出すという急を作って、序破急が安定したことで人気が出て長寿番組となったと書いてある。ほんとかな？
第五章 世阿弥はこんなにすごかった 能の大成に大きな影響を及ぼした世阿弥についていろいろ書いてある。
夢幻能 という能のジャンルを完成させた。念が残る、思いが残っているといった残念を昇華させる物語の構造になっている。世阿弥は特に敗者の無念をみせる舞台構造を作ることに成功したという。もともと日本人は死者を尊ぶ習慣があったことも要因としてあげている。</description><content>&lt;p>22時に寝て何度か起きて7時に起きた。たまには早く寝てみた。&lt;/p>
&lt;h2 id="チャンネルを用いた-ldap-検索の-api">チャンネルを用いた ldap 検索の api&lt;/h2>
&lt;p>うちらの要件に足りない機能が go-ldap にある。私が機能拡張についての issue を作ったときにある開発者が先にこの機能が必要だとコメントしてくれた。もともと draft pr で実装されたコードがあったのでそれをベースに検証したら普通に動いた。あとは go のエンジニアリングとして開発者が使いやすいように、私の経験からのアレンジを加えて pr とした。テストも実装した。なにか問題があればレビューで指摘さえしてくれれば私がすぐ修正してマージできるはずと考えている。はてさて、どうなることやら。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/go-ldap/ldap/pull/440">Add search with channels with context #440&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="能650年続いた仕掛けとは">能―650年続いた仕掛けとは―&lt;/h2>
&lt;p>&lt;a href="https://www.shinchosha.co.jp/book/610732/">能―650年続いた仕掛けとは―&lt;/a> を読んでいる続き。世阿弥の紹介をしている第五章に感化された。&lt;/p>
&lt;h3 id="第四章-能にはこんな仕掛けが隠されていた">第四章 能にはこんな仕掛けが隠されていた&lt;/h3>
&lt;p>能はシテ (主役) の役柄や内容で5種類にわけられる。&lt;/p>
&lt;ol>
&lt;li>初番目物 神: 神様が登場して颯爽 (さっそう) と舞う&lt;/li>
&lt;li>二番目物 男: 修羅物とも呼ばれ、武将が修羅道に落ちた苦しみを描く&lt;/li>
&lt;li>三番目物 女: 鬘物 (かずらもの) とも呼ばれ、優雅な美しいものが多い&lt;/li>
&lt;li>四番目物 狂: 雑能とも呼ばれ、他の4つに分類されないもの&lt;/li>
&lt;li>五番目物 鬼: 切能 (きりのう) とも呼ばれ、鬼や妖怪、精霊、霊獣などがシテになる&lt;/li>
&lt;/ol>
&lt;p>さらにこの5つの分類に入らない翁という演目もある。翁を最初に置き、この順番に上演しながら、能と能の間に狂言を演じ、最後に祝言の短い能を演じるのがかつての正式な上演だったらしい。これだけ演じると朝から晩までかかってしまうので忙しい現代ではなかなかみれなくなってしまっているという。&lt;/p>
&lt;p>ひと昔前は結婚式で仲人さんや親戚が謡を謡っていたという。たしかに古風な結婚式ではそうだったような、、、と私もうっすらとそういう記憶があるような気もする。&lt;/p>
&lt;p>能の身体的な特徴の1つに摺り足がある。摺り足には重い二本の刀を腰に差して腰痛にならないという効能があるらしい。ほんとかな？&lt;/p>
&lt;p>世阿弥が能の構造は序破急にせよと書いている。序はワキの登場、破はシテが登場して話をして去る、急は再びシテが姿を変えて登場するといった構造になる。水戸黄門や暴れん坊将軍のような時代劇の最後の展開が急に相当する。水戸黄門で例えると次になる。&lt;/p>
&lt;ul>
&lt;li>序: 現状把握と善人の窮状&lt;/li>
&lt;li>破: 善人が騙される／襲われる&lt;/li>
&lt;li>急: 印籠を出す&lt;/li>
&lt;/ul>
&lt;p>そして、この後に書いてあることが個人的におもしろかった。水戸黄門は番組開始時点では印籠を出すようなシーンはなくて、当初は助さん角さんが敵をたたき斬っていただけだったという。そもそも印籠を出したぐらいで本物の水戸黄門かどうか分かるわけもなく悪人がひれ伏すはずがないw あるときから印籠を出すという急を作って、序破急が安定したことで人気が出て長寿番組となったと書いてある。ほんとかな？&lt;/p>
&lt;h3 id="第五章-世阿弥はこんなにすごかった">第五章 世阿弥はこんなにすごかった&lt;/h3>
&lt;p>能の大成に大きな影響を及ぼした世阿弥についていろいろ書いてある。&lt;/p>
&lt;p>&lt;a href="https://db2.the-noh.com/jdic/2010/02/post_172.html">夢幻能&lt;/a> という能のジャンルを完成させた。念が残る、思いが残っているといった残念を昇華させる物語の構造になっている。世阿弥は特に敗者の無念をみせる舞台構造を作ることに成功したという。もともと日本人は死者を尊ぶ習慣があったことも要因としてあげている。&lt;/p>
&lt;p>世阿弥は世襲で継いでいくという家元制度を作った。これは後世に必ず継ぐシステムを作ったと言える。現代まで能が継続されている背景の1つに家元制度はたしかにあげられると私も思う。しかし、現代では基本的人権 (職業選択の自由) に反することから家元制度の批判もあるようだ。著者はこの仕組みを称賛しているが、私は現代の感覚からすると個人の自由を制限して成り立っている古い制度のように感じてあまり著者の意見に同意できなかった。&lt;/p>
&lt;blockquote>
&lt;p>陰陽の和するところの境を成就とは知るべし&lt;/p>
&lt;/blockquote>
&lt;p>昼や晴れた日には観客の気分が盛り上がり過ぎているので控え目に演じなさい。曇りや雨の日には逆に観客の気持ちが萎えているので派手目に演じなさいといったことを言っている。要は客の状態を見て演じ方を変えなさいと言っている。これは言うは易し、行うは難しだという。能ではこれを楽器の構造から音の力で解決していると説明がある。&lt;/p>
&lt;blockquote>
&lt;p>時に用ゆるをもて花と知るべし&lt;/p>
&lt;/blockquote>
&lt;p>ともすれば絶対的な善し悪しがあるように思い込み、そのようなものを追求しがちであるが、実際はそのようなものはない。あるのは時との関係性だけだという。易経の時中も引用している。いまがどのような「時」であるかを知り、それがもっとも適合した時期であるか、行動できるか、それこそが「花」であるという。&lt;/p>
&lt;blockquote>
&lt;p>花と面白きと珍しきと、これ三つは同じ心なり&lt;/p>
&lt;/blockquote>
&lt;p>現代の言葉とはちょっと意味が異なる。&lt;/p>
&lt;ul>
&lt;li>面白き: 目の前がパッと明るくなること&lt;/li>
&lt;li>珍しき (愛ず): 愛らしいこと、まったく普通のことに感嘆を抱かせる工夫など&lt;/li>
&lt;li>花: 秘すれば花、秘密にすることで偉大な働きをすること&lt;/li>
&lt;/ul>
&lt;p>能では、演者はあまり観客に働きかけない。よくわからないことで、逆に観る人が能動的になり、見えないものが見え、聞こえない音が聞こえるようになる。これも秘することによって咲く花だという。師匠が弟子に教えないというのも、簡単なことでも秘することで、弟子が散々苦しみ抜いた上でその助言の価値に気付くこともあるという。&lt;/p>
&lt;p>「老後の初心」という考え方。どの歳になっても初心はあるが、歳をとって体力が劣っていくからこそやることも変えていく。第一章にも出てきた能における「初心」という言葉の概念は本当におもしろい。能では体が動かなくなっていくのだから「しないというやり方も方法としてありえる」と考える。演じないことで演じる、歳を取ったときの表現方法がある。高齢な能楽師でしか演じられない境地があるから能楽師は歳を取ることを楽しみにする。この考え方はいまの時代にとてもあうように私は思えた。&lt;/p></content></item><item><title>落ち穂を拾い集めて課題管理を促す</title><link>/diary/posts/2023/0530/</link><pubDate>Tue, 30 May 2023 08:42:38 +0900</pubDate><guid>/diary/posts/2023/0530/</guid><description>2時に寝て何度か起きて7時に起きた。能の本を読みながら寝落ちした。
落ち穂拾いの終了 4月末にリリースしてその後 GW に入って、5月は「落ち穂拾い」として 開発全体のふりかえり をやったり、次の開発の要件を整理 したりしていた。ドッグフードテスト の導入もまだ作業中ではあるが、社内のシステム管理者にも協力していただいて進めている。私の作業でも十分な余裕をもって次の準備につなげることができたので開発の区切りで1ヶ月ぐらい準備期間があることはよいように思える。経営者はもっと働かせたがるかもしれないが。
これまでの開発は定例会議も 1on1 も毎週行ってきたが、次の開発ではこれらの会議を隔週にしてみる。口頭による同期コミュニケーションのコストを減らし、より開発そのものに時間を割いて注力できるようにする。もしかしたら、これによって私も開発に参加する時間を作りやすくなるかもしれない。もう1つ 必要なときに必要な人とすぐに話す (会議の日まで待たない) という狙いがある。毎週会議があると、すぐ聞けばよいことを次の会議まで待ってしまうということがある。私もある。私ですら待つときがあるのだからおそらくメンバーにもそうしてしまうことがあると推測する。会議の頻度を下げることでこの待ち時間を削減して即時問い合わせ、即時解決するといったコミュニケーションに移行していきたいという狙いがある。開発者の自律性を高めるためにはこういった取り組みも必要だと思える。もっと言えば、毎週会議しないと情報共有できないというのは開発者を子ども扱いして堕落させるのではないかと考える。実際に意図したようにうまくいくかどうかはやってみてから考える。
うちの開発メンバーは半年前より見違えて課題管理に習熟したので次の開発がどうなるかが本当に楽しみだ。</description><content>&lt;p>2時に寝て何度か起きて7時に起きた。能の本を読みながら寝落ちした。&lt;/p>
&lt;h2 id="落ち穂拾いの終了">落ち穂拾いの終了&lt;/h2>
&lt;p>4月末にリリースしてその後 GW に入って、5月は「落ち穂拾い」として &lt;a href="/diary/diary/posts/2023/0516/#半年間の開発のふりかえり">開発全体のふりかえり&lt;/a> をやったり、&lt;a href="/diary/diary/posts/2023/0518/#開発課題の打ち合わせ">次の開発の要件を整理&lt;/a> したりしていた。&lt;a href="/diary/diary/posts/2023/0526/#ドッグフードテストと運用談義">ドッグフードテスト&lt;/a> の導入もまだ作業中ではあるが、社内のシステム管理者にも協力していただいて進めている。私の作業でも十分な余裕をもって次の準備につなげることができたので開発の区切りで1ヶ月ぐらい準備期間があることはよいように思える。経営者はもっと働かせたがるかもしれないが。&lt;/p>
&lt;p>これまでの開発は定例会議も 1on1 も毎週行ってきたが、次の開発ではこれらの会議を隔週にしてみる。口頭による同期コミュニケーションのコストを減らし、より開発そのものに時間を割いて注力できるようにする。もしかしたら、これによって私も開発に参加する時間を作りやすくなるかもしれない。もう1つ &lt;strong>必要なときに必要な人とすぐに話す (会議の日まで待たない)&lt;/strong> という狙いがある。毎週会議があると、すぐ聞けばよいことを次の会議まで待ってしまうということがある。私もある。私ですら待つときがあるのだからおそらくメンバーにもそうしてしまうことがあると推測する。会議の頻度を下げることでこの待ち時間を削減して即時問い合わせ、即時解決するといったコミュニケーションに移行していきたいという狙いがある。開発者の自律性を高めるためにはこういった取り組みも必要だと思える。もっと言えば、毎週会議しないと情報共有できないというのは開発者を子ども扱いして堕落させるのではないかと考える。実際に意図したようにうまくいくかどうかはやってみてから考える。&lt;/p>
&lt;p>うちの開発メンバーは半年前より見違えて課題管理に習熟したので次の開発がどうなるかが本当に楽しみだ。&lt;/p></content></item><item><title>バランスチェアを購入した</title><link>/diary/posts/2023/0505/</link><pubDate>Fri, 05 May 2023 11:54:30 +0900</pubDate><guid>/diary/posts/2023/0505/</guid><description>0時に寝て何度か起きて6時半に起きた。余裕のある生活を送っていると朝もすんなり起きれる。たぶん普段働き過ぎなんやな。今日は朝もお昼もご飯食べてないが、とくに気にならなくて余裕があるとお腹も空かないことに気付いた。
ジモティーで椅子の受け取り 以前コワーキングのオンラインイベントで ジモティーが熱い と聞いてから ジモティー にアカウント登録して、たまに眺めたりしていた。実家のオフィスで使う椅子をジモティーで探そうと思って検索していた。いくつか候補をみつけて最も近所で受け渡しが簡単そうだったのがバランスチェアだった。実家で使おうと思って購入を決めた。ジモティーで売買をやり取りするのは初めてだったので勝手がわからないものの、出品者とメッセージをやり取りして翌日には受け取りの待ち合わせをすることで話しが付いた。振り込みとか発送とかそういう概念がなくて、直接会って現物交換するときに現金で支払うという、なんというか、昔ながらの個人間取り引きになる。一周まわって新しい。
出品者が10年以上前に購入してブランドロゴがいまとは違うため、類似品と正規品との判断がつかないということで明言はしていないものの、おそらく VARIER MULTI ではないかと思われる。椅子じゃなくても10年以上使うとなにかしら劣化や変色などがみられると思う。もちろんこの椅子も新品と比較すればいくらかはそうだろうけど、10年以上使ってきたという歴史に対して色褪せない質感を醸しているのでおそらくはもともとの素材や構造が優れているのだと思う。
出品者の人もよい人で待ち合わせして受け取り／支払いの体験もよかった。一周まわって新しいと書いたのは、人と人のコミュニケーションの原点のようなものがある。ヤフオクやメルカリだとシステムとのやり取りだけで完結するので相対的にそういったものを思い出した。戻ってきて早速使ってみる。見た目の質感の良さの通り、座った感じの、フィットするのにまったくブレない剛性感もしっくりきて気に入った。当初は実家で使おうと思っていたものの、すごく気に入ったので現オフィスでセカンドチェアとして使うことに方針変更した。
姿勢もよくなりそうだし、背もたれがないので作業に集中したいときのルーチンにもよさそうに思う。
しくじり先生 前回の青春編 をみておもしろかったので続編の 竹原慎二先生「５０歳過ぎてもケンカを売られ続けてバリしんどい先生」完結編 をみた。ガチンコ時代の裏話などもあって懐かしくておもしろかった。またガチンコ時代の教え子でプロボクサーからは引退したものの、いまも仲良くしているメンバーもいて、そういうのもいろんな人の縁で社会がまわっているなにかを感じられてよい演出だったと思う。竹原氏は見た目怖いし、実際に強いし、無礼に対する態度も威圧的なものの、意外？と精神的には普通の人とあまり変わらない雰囲気だった。格闘技が強いかどうかよりも、精神を鍛えることの難しさや大事さが伺えた。見た目の強さよりも内面の強さというか、若い頃はあまりそういうことがわからない気がする。多くの人がある程度社会で揉まれていくうちになんとなく理解していくのではないかと思う。</description><content>&lt;p>0時に寝て何度か起きて6時半に起きた。余裕のある生活を送っていると朝もすんなり起きれる。たぶん普段働き過ぎなんやな。今日は朝もお昼もご飯食べてないが、とくに気にならなくて余裕があるとお腹も空かないことに気付いた。&lt;/p>
&lt;h2 id="ジモティーで椅子の受け取り">ジモティーで椅子の受け取り&lt;/h2>
&lt;p>以前コワーキングのオンラインイベントで &lt;a href="/diary/diary/posts/2023/0118/#コワーキングのオンラインイベント">ジモティーが熱い&lt;/a> と聞いてから &lt;a href="https://jmty.jp/">ジモティー&lt;/a> にアカウント登録して、たまに眺めたりしていた。実家のオフィスで使う椅子をジモティーで探そうと思って検索していた。いくつか候補をみつけて最も近所で受け渡しが簡単そうだったのがバランスチェアだった。実家で使おうと思って購入を決めた。ジモティーで売買をやり取りするのは初めてだったので勝手がわからないものの、出品者とメッセージをやり取りして翌日には受け取りの待ち合わせをすることで話しが付いた。振り込みとか発送とかそういう概念がなくて、直接会って現物交換するときに現金で支払うという、なんというか、昔ながらの個人間取り引きになる。一周まわって新しい。&lt;/p>
&lt;p>出品者が10年以上前に購入してブランドロゴがいまとは違うため、類似品と正規品との判断がつかないということで明言はしていないものの、おそらく &lt;a href="https://www.varierfurniture.com/en/multi/1700101191110">VARIER MULTI&lt;/a> ではないかと思われる。椅子じゃなくても10年以上使うとなにかしら劣化や変色などがみられると思う。もちろんこの椅子も新品と比較すればいくらかはそうだろうけど、10年以上使ってきたという歴史に対して色褪せない質感を醸しているのでおそらくはもともとの素材や構造が優れているのだと思う。&lt;/p>
&lt;p>出品者の人もよい人で待ち合わせして受け取り／支払いの体験もよかった。一周まわって新しいと書いたのは、人と人のコミュニケーションの原点のようなものがある。ヤフオクやメルカリだとシステムとのやり取りだけで完結するので相対的にそういったものを思い出した。戻ってきて早速使ってみる。見た目の質感の良さの通り、座った感じの、フィットするのにまったくブレない剛性感もしっくりきて気に入った。当初は実家で使おうと思っていたものの、すごく気に入ったので現オフィスでセカンドチェアとして使うことに方針変更した。&lt;/p>
&lt;p>姿勢もよくなりそうだし、背もたれがないので作業に集中したいときのルーチンにもよさそうに思う。&lt;/p>
&lt;h2 id="しくじり先生">しくじり先生&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0502/#しくじり先生">前回の青春編&lt;/a> をみておもしろかったので続編の &lt;a href="https://www.tv-asahi.co.jp/shikujiri/backnumber2/0100/">竹原慎二先生「５０歳過ぎてもケンカを売られ続けてバリしんどい先生」完結編&lt;/a> をみた。ガチンコ時代の裏話などもあって懐かしくておもしろかった。またガチンコ時代の教え子でプロボクサーからは引退したものの、いまも仲良くしているメンバーもいて、そういうのもいろんな人の縁で社会がまわっているなにかを感じられてよい演出だったと思う。竹原氏は見た目怖いし、実際に強いし、無礼に対する態度も威圧的なものの、意外？と精神的には普通の人とあまり変わらない雰囲気だった。格闘技が強いかどうかよりも、精神を鍛えることの難しさや大事さが伺えた。見た目の強さよりも内面の強さというか、若い頃はあまりそういうことがわからない気がする。多くの人がある程度社会で揉まれていくうちになんとなく理解していくのではないかと思う。&lt;/p></content></item><item><title>法人決算の続き</title><link>/diary/posts/2023/0504/</link><pubDate>Thu, 04 May 2023 08:24:43 +0900</pubDate><guid>/diary/posts/2023/0504/</guid><description>0時に寝て何度か起きて6時過ぎに起きた。休日は朝だらだらしてオフィスへ行くのが9-10時ぐらいになることが多いのだけど、今日は普通に8時過ぎに行けた。
法人決算 朝から法人決算の続き。昨日たまたま消費税の計算をして、祝日やのに e-tax 稼働しているんやと思いながら申告した。これまで休日や祝日は稼働していなかった気がするので時代の変化にあわせてシステムはなるべく24時間稼働するように少しずつ変わってきている。今日も法人決算の続きをやっていて、課税所得を確認して、カテゴリ的には3つに分類される法人3税と呼ばれる税金を算出した。具体的には6つの税金を算出しないといけない。
法人税 (=&amp;gt; 国税 =&amp;gt; e-tax) 法人税 地方法人税 法人住民税 (=&amp;gt; 地方税 =&amp;gt; eltax) 法人県民税 法人市民税 法人事業税 (=&amp;gt; 地方税 =&amp;gt; eltax) 法人事業税 特別法人事業税 過去の法人決算の経験からまず法人住民税と法人事業税を確定させてから法人決算の申告をすべきだというプラクティスがある。というのは、法人住民税と法人事業税の数値になんらかの誤りがあると法人決算で提出する別表の数字も修正しないといけないため、先に地方税を確定させた方が手戻りを少なくできる可能性が高い。電子申請するとそれぞれの書類の数値のバリデーションが機能するので手計算や手入力で誤りがあったときに発見できる可能性がある。これは電子申請をするメリットの1つでもある。
地方税を管轄するのが eltax で国税を管轄するのが e-tax で別システムになる。いまとなっては、事前にチェックしておけばよかったなと思うところだが、あとの祭り。e-tax は5月3-4日が稼働していて5-7日が休止している。eltax は5月3-5日が休止していて6-7日が稼働しているというスケジュールになっていた。双方のシステムが稼働していれば今日中に終えられたものが、なんともちぐはぐなスケジュールで申告を完了させるのは来週以降に持ち越すことになる。また来年やるときはこのそれぞれのシステムの稼働スケジュールを事前にチェックして法人決算の作業日程を決めるように法人決算の issue に書き込んでおいた。来年はもっとうまくやる。
e-tax e-Taxの利用可能時間 eltax 令和5年度の休日運用日 今日のところは法人3税の税金を算出し終えて、それらと関係ない別表の大半を作成した。基本的には決算の試算表から数値を転記したり、特例措置の申請のための書類を作ったりでなにも難しくない。
iijmio と iphone で作るモバイル wifi ルーター 今年に入ってから 実家のオフィス化 の準備を着々と進めている。晩年は足が不自由だった祖父が生活できるよう、倉庫の一部を改築して車椅子でも生活できるような部屋になっていて、ある種の離れのようなスペースになっている。祖父が他界してからは誰も使っていない。トイレもお風呂もキッチンもついていて広さで言えば14畳ぐらいある。これまで使いにくかった理由は2つあってエアコンとインターネットがなかった。この前、母にお願いしてエアコンを購入してもらい、つい先日、設置が完了したらしい。
インターネットの回線をひくことも検討していたが、どうやら5000円/月ぐらいかかることがわかってきた。母はインターネットを必要としていないので月1回ぐらいしか使わないのに5000円も支払うのはもったいないなと一旦ストップしていた。スマートフォンのテザリングでお仕事できないわけではないから当初はそれでもいいかと考えていた。私の個人のスマホとインターネット回線は iijmio を使っていて iij さん好きなので同じように pocket wifi 的なものはないのかな？と調べたら正にそういう記事をみつけた。
格安！IIJmioでポケットWiFiを作る！料金・手順・注意点まとめ よくよく考えたらデータ専用の sim を購入したらあとはモバイル wifi ルーターだけあればよいことに気付いて、それって iphone でできるやんということに気付いて、過去に使っていた古い iphone 11 を再利用できることに気付いた。さらにいまは esim という物理 sim を必要としないソフトウェアベースの sim もあるようで月額の料金も esim の方が安い。 音声通話なしのデータ専用プランで税込で次の金額になる。さらに使わなかったらデータ量は翌月以降に繰越できる。プランによって繰越できる期間が異なる。例えば2GiBなら翌月末まで繰越できる。繰越という概念はたまにしか使わない私の用途にぴったりでひとまず2GiBプランを選択してお試し運用してみることにした。</description><content>&lt;p>0時に寝て何度か起きて6時過ぎに起きた。休日は朝だらだらしてオフィスへ行くのが9-10時ぐらいになることが多いのだけど、今日は普通に8時過ぎに行けた。&lt;/p>
&lt;h2 id="法人決算">法人決算&lt;/h2>
&lt;p>朝から法人決算の続き。昨日たまたま消費税の計算をして、祝日やのに e-tax 稼働しているんやと思いながら申告した。これまで休日や祝日は稼働していなかった気がするので時代の変化にあわせてシステムはなるべく24時間稼働するように少しずつ変わってきている。今日も法人決算の続きをやっていて、課税所得を確認して、カテゴリ的には3つに分類される法人3税と呼ばれる税金を算出した。具体的には6つの税金を算出しないといけない。&lt;/p>
&lt;ul>
&lt;li>法人税 (=&amp;gt; 国税 =&amp;gt; e-tax)
&lt;ul>
&lt;li>法人税&lt;/li>
&lt;li>地方法人税&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>法人住民税 (=&amp;gt; 地方税 =&amp;gt; eltax)
&lt;ul>
&lt;li>法人県民税&lt;/li>
&lt;li>法人市民税&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>法人事業税 (=&amp;gt; 地方税 =&amp;gt; eltax)
&lt;ul>
&lt;li>法人事業税&lt;/li>
&lt;li>特別法人事業税&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>過去の法人決算の経験からまず法人住民税と法人事業税を確定させてから法人決算の申告をすべきだというプラクティスがある。というのは、法人住民税と法人事業税の数値になんらかの誤りがあると法人決算で提出する別表の数字も修正しないといけないため、先に地方税を確定させた方が手戻りを少なくできる可能性が高い。電子申請するとそれぞれの書類の数値のバリデーションが機能するので手計算や手入力で誤りがあったときに発見できる可能性がある。これは電子申請をするメリットの1つでもある。&lt;/p>
&lt;p>地方税を管轄するのが &lt;a href="https://www.eltax.lta.go.jp/">eltax&lt;/a> で国税を管轄するのが &lt;a href="https://www.e-tax.nta.go.jp/">e-tax&lt;/a> で別システムになる。いまとなっては、事前にチェックしておけばよかったなと思うところだが、あとの祭り。e-tax は5月3-4日が稼働していて5-7日が休止している。eltax は5月3-5日が休止していて6-7日が稼働しているというスケジュールになっていた。双方のシステムが稼働していれば今日中に終えられたものが、なんともちぐはぐなスケジュールで申告を完了させるのは来週以降に持ち越すことになる。また来年やるときはこのそれぞれのシステムの稼働スケジュールを事前にチェックして法人決算の作業日程を決めるように法人決算の issue に書き込んでおいた。来年はもっとうまくやる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.e-tax.nta.go.jp/info_center/index.htm">e-tax e-Taxの利用可能時間&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.eltax.lta.go.jp/news/07638">eltax 令和5年度の休日運用日&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>今日のところは法人3税の税金を算出し終えて、それらと関係ない別表の大半を作成した。基本的には決算の試算表から数値を転記したり、特例措置の申請のための書類を作ったりでなにも難しくない。&lt;/p>
&lt;h2 id="iijmio-と-iphone-で作るモバイル-wifi-ルーター">iijmio と iphone で作るモバイル wifi ルーター&lt;/h2>
&lt;p>今年に入ってから &lt;a href="/diary/diary/posts/2023/0321/#実家の出張所オフィスの準備">実家のオフィス化&lt;/a> の準備を着々と進めている。晩年は足が不自由だった祖父が生活できるよう、倉庫の一部を改築して車椅子でも生活できるような部屋になっていて、ある種の離れのようなスペースになっている。祖父が他界してからは誰も使っていない。トイレもお風呂もキッチンもついていて広さで言えば14畳ぐらいある。これまで使いにくかった理由は2つあってエアコンとインターネットがなかった。この前、母にお願いしてエアコンを購入してもらい、つい先日、設置が完了したらしい。&lt;/p>
&lt;p>インターネットの回線をひくことも検討していたが、どうやら5000円/月ぐらいかかることがわかってきた。母はインターネットを必要としていないので月1回ぐらいしか使わないのに5000円も支払うのはもったいないなと一旦ストップしていた。スマートフォンのテザリングでお仕事できないわけではないから当初はそれでもいいかと考えていた。私の個人のスマホとインターネット回線は &lt;a href="https://www.iijmio.jp/">iijmio&lt;/a> を使っていて iij さん好きなので同じように pocket wifi 的なものはないのかな？と調べたら正にそういう記事をみつけた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mobile.inest-inc.co.jp/iijmio-pocket-wifi/">格安！IIJmioでポケットWiFiを作る！料金・手順・注意点まとめ&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>よくよく考えたらデータ専用の sim を購入したらあとはモバイル wifi ルーターだけあればよいことに気付いて、それって iphone でできるやんということに気付いて、過去に使っていた古い iphone 11 を再利用できることに気付いた。さらにいまは &lt;a href="https://www.iijmio.jp/gigaplan/esim/">esim&lt;/a> という物理 sim を必要としないソフトウェアベースの sim もあるようで月額の料金も esim の方が安い。
音声通話なしのデータ専用プランで税込で次の金額になる。さらに使わなかったらデータ量は翌月以降に繰越できる。プランによって繰越できる期間が異なる。例えば2GiBなら翌月末まで繰越できる。繰越という概念はたまにしか使わない私の用途にぴったりでひとまず2GiBプランを選択してお試し運用してみることにした。&lt;/p>
&lt;ul>
&lt;li>1GiB: 165円/月&lt;/li>
&lt;li>2GiB: 440円/月&lt;/li>
&lt;li>5GiB: 660円/月&lt;/li>
&lt;li>10GiB: 1,100円/月&lt;/li>
&lt;li>20GiB: 1,650円/月&lt;/li>
&lt;/ul>
&lt;p>esim というソフトウェアベースのものだと、申し込みして5分後に設定できましたというメールが届き、すぐにアクティベートして iphone 11 に esim の設定をしたら10分後にはインターネットに接続できるようになった。その後 apn の設定を行ってテザリングもできるようになって、30分後には iphone 11 をモバイル wifi ルーターとして macbook からインターネットにアクセスできるかの疎通確認を終えた。&lt;/p>
&lt;p>つまりソフトウェアベースで業務を行うことのワークフローの効率が半端なく高い。これが物理 sim なら数人の人手と待ち時間がかかることは容易に想像できる。物理的にしかできなかったことをソフトウェアベースにしてワークフローを洗練化させることの強力さを実感した。常々、私が課題管理の文脈でコミュニケーションコストを減らせれば生産性が上がると開発者に啓蒙していることと同じで自分がやろうとしていることの概念を追体験するような経験となった。ワークフローの効率を極端に落とすのは人間である。&lt;/p></content></item><item><title>リリース前日</title><link>/diary/posts/2023/0424/</link><pubDate>Mon, 24 Apr 2023 08:30:02 +0900</pubDate><guid>/diary/posts/2023/0424/</guid><description>22時頃から寝て何度か起きて7時に起きた。久しぶりに夢をみた気がする。オフィスに着いた頃にはもう覚えていないけど。
リリース前日 プロダクトの開発、テスト、パッケージングとすべて完了していてドキュメントや社外に提供するためのインフラの仕組みの作業を行っている。これはリリースまでに出来ていなくてもプロダクトが動かないわけではないのでリリース後もしばらくは継続する。今日は運用ツールのちょっとしたリファクタリングをしたり、コードレビューをしたり、windows インストーラーの調査をしたりと、なんやらかんやらで忙しかった。
示唆を与えなければならない ここ1ヶ月ほど私がクリティカルパスの作業を担ってきたのでメンバーの作業を落ち着いてみる余裕がなかった。たまたまというか、私がクリティカルパスから脱したことでメンバーのレビューやアドバイスを行うときの余裕も戻ってきた。CSK の新人研修で習うことに社是と経営理念とサービス精神という言葉がある。
サービス精神
お得意様にあくまでも満足していただく技術を提供しなければならない 技術は高度で専門的でなければならない 仕事は正確に、かつ迅速・効率的に行なわなければならない 常に、お得意様の利益を考え、示唆を与えなければならない 新人研修ではこれらを暗唱して暗記させられる。20年以上経ったいまでも覚えている。もともと私の考え方にあっていたのか、それとも新人の頃に刷り込まれたのか、その両方なのか。いま見返すと私の課題管理の考え方とこのサービス精神には共通しているところもある。その上で最後の 「示唆を与えなければならない」 という言葉を、今日メンバーとやり取りしているときにふと思い出した。
アドバイスをしていると、なぜこの懸念を考えずに作業を継続してしまったのだろうか？と思う機会がちょくちょくある。そのときに質問してその背景を尋ねたり、効率や保守のための考え方を教えたりする。ふと私が指摘しなかったらそういった効率や品質の低い結果のまま進んだのだろうと推測される。当たり前の話しだが、意識的にしろ無意識にしろ、個人では気付けなかったフィードバックや示唆を与えてくれる人がいなかったら個人の能力では限界がある。気付きがないところに学びも改善もないから成長もしない。いまお手伝いしている会社はこれまで個人でやってきた働き方を、チームで協調して働くように変えていきたいという話しから始まった。私自身、どちらかと言えば個人主義の働き方をしてきた方でチームでの働き方をちゃんと教えられるか、当初はあまり自信がなかった。半年やってきて、チームで働く上で必要なことはメンバーのアウトプットに対して質問するだけでよかったんやと理解できるようになってきた。個人の視点しかない働き方と他者の視点から常にツッコミが入る働き方はまったく異なる。うちのメンバーをみていて、まだまだ道半ばではあるが、それまでの状況と私が啓蒙している課題管理は、おそらく根本的に働き方を変えてしまっていることにようやく私の理解が追いついてきた。</description><content>&lt;p>22時頃から寝て何度か起きて7時に起きた。久しぶりに夢をみた気がする。オフィスに着いた頃にはもう覚えていないけど。&lt;/p>
&lt;h2 id="リリース前日">リリース前日&lt;/h2>
&lt;p>プロダクトの開発、テスト、パッケージングとすべて完了していてドキュメントや社外に提供するためのインフラの仕組みの作業を行っている。これはリリースまでに出来ていなくてもプロダクトが動かないわけではないのでリリース後もしばらくは継続する。今日は運用ツールのちょっとしたリファクタリングをしたり、コードレビューをしたり、windows インストーラーの調査をしたりと、なんやらかんやらで忙しかった。&lt;/p>
&lt;h2 id="示唆を与えなければならない">示唆を与えなければならない&lt;/h2>
&lt;p>ここ1ヶ月ほど私がクリティカルパスの作業を担ってきたのでメンバーの作業を落ち着いてみる余裕がなかった。たまたまというか、私がクリティカルパスから脱したことでメンバーのレビューやアドバイスを行うときの余裕も戻ってきた。&lt;a href="https://ja.wikipedia.org/wiki/CSK_(%E4%BC%81%E6%A5%AD)">CSK&lt;/a> の新人研修で習うことに社是と経営理念とサービス精神という言葉がある。&lt;/p>
&lt;blockquote>
&lt;p>サービス精神&lt;/p>
&lt;ul>
&lt;li>お得意様にあくまでも満足していただく技術を提供しなければならない&lt;/li>
&lt;li>技術は高度で専門的でなければならない&lt;/li>
&lt;li>仕事は正確に、かつ迅速・効率的に行なわなければならない&lt;/li>
&lt;li>常に、お得意様の利益を考え、示唆を与えなければならない&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>新人研修ではこれらを暗唱して暗記させられる。20年以上経ったいまでも覚えている。もともと私の考え方にあっていたのか、それとも新人の頃に刷り込まれたのか、その両方なのか。いま見返すと私の課題管理の考え方とこのサービス精神には共通しているところもある。その上で最後の &lt;strong>「示唆を与えなければならない」&lt;/strong> という言葉を、今日メンバーとやり取りしているときにふと思い出した。&lt;/p>
&lt;p>アドバイスをしていると、なぜこの懸念を考えずに作業を継続してしまったのだろうか？と思う機会がちょくちょくある。そのときに質問してその背景を尋ねたり、効率や保守のための考え方を教えたりする。ふと私が指摘しなかったらそういった効率や品質の低い結果のまま進んだのだろうと推測される。当たり前の話しだが、意識的にしろ無意識にしろ、個人では気付けなかったフィードバックや示唆を与えてくれる人がいなかったら個人の能力では限界がある。気付きがないところに学びも改善もないから成長もしない。いまお手伝いしている会社はこれまで個人でやってきた働き方を、チームで協調して働くように変えていきたいという話しから始まった。私自身、どちらかと言えば個人主義の働き方をしてきた方でチームでの働き方をちゃんと教えられるか、当初はあまり自信がなかった。半年やってきて、チームで働く上で必要なことはメンバーのアウトプットに対して質問するだけでよかったんやと理解できるようになってきた。個人の視点しかない働き方と他者の視点から常にツッコミが入る働き方はまったく異なる。うちのメンバーをみていて、まだまだ道半ばではあるが、それまでの状況と私が啓蒙している課題管理は、おそらく根本的に働き方を変えてしまっていることにようやく私の理解が追いついてきた。&lt;/p></content></item><item><title>リリース後の展望</title><link>/diary/posts/2023/0406/</link><pubDate>Thu, 06 Apr 2023 08:28:32 +0900</pubDate><guid>/diary/posts/2023/0406/</guid><description>0時に寝て7時半に起きた。そろそろ出張バテしてきた。
プロジェクトの進捗報告 出張したときの月例報告の5回目。前回の進捗報告はこちら 。私のマネジメントの不手際で1ヶ月延期 (元の計画通り) して、未だに開発は完了していないものの、今月末にリリースできる見通しでプロジェクトを進めている。おそらくあと1-2回は私が休出するのだろう。これからメンバーにはできる限りの QA テストを3週間に渡って行ってもらう。
チームが fix した3月の issue 数は47、そのうちの34を、enhance ラベルが付いたものは12でそのうちの9を私が担当した。クリティカルパスになりそうなものは、一旦はメンバーにアサインするものの、進捗をみて遅れていれば私が issue を引き取って対応している。先月から引き続き、やばそうな芽が出てきたら私が本気出して対応する。見た目上のスケジュールには影響を与えないようにしている。先月の反省で早めに引き取ることにしたのでずるずる後ろへ延びることはない。このやり方をすると、私がボトルネックになりかねないが、私の工数は調整次第でメンバーよりも大きくできるのでいまのところ問題ない。リリースまで1ヶ月を切った中で取り得る手段は限られてくる。
2月から ハドルと雑談 の試験運用をしていた。ほぼ毎日午前中は私が slack のハドルに在籍 (オフィスアワーに近い取り組み) するようにして、メンバーから雑談する機会は増えるかどうかを試していた。約2ヶ月やって結果は次の通りとなった。
対象日数: 34日 雑談人数: 10人 雑談時間: 5.75時間 3日に1日ぐらい軽く雑談するといった結果になった。おそらく私がハドルにいなかったら話す機会はなかったのでこの価値をどう見積もるかは人によって分かれると思う。うちのチームはリモートワークが中心なので雑談する機会があるほど望ましい。それほど強く提案するわけではないが、slack のハドル活用をもっと展開してもよいのではないかと経営者に推奨した。
聞いた話では着任前にこのプロダクト開発は2年近く迷走していたらしい。それによって要件は整理されていたと言える。私がこの半年でリリース (予定) できる状態にしたのを評価してもらえているようにはみえる。余談だが、自分のスキルを社会の役に立てられるのがいまは嬉しい。前職では、誰でもできる簡単なお仕事しかできず、開発もあまりつまらなかった。いまは自分がよいと思うものを一定の裁量で判断し、さらにマネージャー経験も積めて、今回のお仕事は私の中でも達成感は高い方でもある。
あとは今後の開発の話し、販売戦略の話しなどもしていた。4月末で初期開発の区切りもつく。今後は毎月1週間も出張しなくてよいのではないかという話しもして、5月は会議を2-3日に集中してやったらいいんじゃないかということになった。出張はそろそろ疲れてきたのと、私がオフィスにいてもメンバーは半分以上リモートワークなのでオフィスに来る意義があまりない。うちのチームはリモートワークで開発に支障が出ない仕組みを構築できているとは思う。</description><content>&lt;p>0時に寝て7時半に起きた。そろそろ出張バテしてきた。&lt;/p>
&lt;h2 id="プロジェクトの進捗報告">プロジェクトの進捗報告&lt;/h2>
&lt;p>出張したときの月例報告の5回目。&lt;a href="/diary/diary/posts/2023/0309/">前回の進捗報告はこちら&lt;/a> 。私のマネジメントの不手際で1ヶ月延期 (元の計画通り) して、未だに開発は完了していないものの、今月末にリリースできる見通しでプロジェクトを進めている。おそらくあと1-2回は私が休出するのだろう。これからメンバーにはできる限りの QA テストを3週間に渡って行ってもらう。&lt;/p>
&lt;p>チームが fix した3月の issue 数は47、そのうちの34を、enhance ラベルが付いたものは12でそのうちの9を私が担当した。クリティカルパスになりそうなものは、一旦はメンバーにアサインするものの、進捗をみて遅れていれば私が issue を引き取って対応している。先月から引き続き、やばそうな芽が出てきたら私が本気出して対応する。見た目上のスケジュールには影響を与えないようにしている。先月の反省で早めに引き取ることにしたのでずるずる後ろへ延びることはない。このやり方をすると、私がボトルネックになりかねないが、私の工数は調整次第でメンバーよりも大きくできるのでいまのところ問題ない。リリースまで1ヶ月を切った中で取り得る手段は限られてくる。&lt;/p>
&lt;p>2月から &lt;a href="/diary/diary/posts/2023/0202/#ハドルと雑談">ハドルと雑談&lt;/a> の試験運用をしていた。ほぼ毎日午前中は私が slack のハドルに在籍 (オフィスアワーに近い取り組み) するようにして、メンバーから雑談する機会は増えるかどうかを試していた。約2ヶ月やって結果は次の通りとなった。&lt;/p>
&lt;ul>
&lt;li>対象日数: 34日&lt;/li>
&lt;li>雑談人数: 10人&lt;/li>
&lt;li>雑談時間: 5.75時間&lt;/li>
&lt;/ul>
&lt;p>3日に1日ぐらい軽く雑談するといった結果になった。おそらく私がハドルにいなかったら話す機会はなかったのでこの価値をどう見積もるかは人によって分かれると思う。うちのチームはリモートワークが中心なので雑談する機会があるほど望ましい。それほど強く提案するわけではないが、slack のハドル活用をもっと展開してもよいのではないかと経営者に推奨した。&lt;/p>
&lt;p>聞いた話では着任前にこのプロダクト開発は2年近く迷走していたらしい。それによって要件は整理されていたと言える。私がこの半年でリリース (予定) できる状態にしたのを評価してもらえているようにはみえる。余談だが、自分のスキルを社会の役に立てられるのがいまは嬉しい。前職では、誰でもできる簡単なお仕事しかできず、開発もあまりつまらなかった。いまは自分がよいと思うものを一定の裁量で判断し、さらにマネージャー経験も積めて、今回のお仕事は私の中でも達成感は高い方でもある。&lt;/p>
&lt;p>あとは今後の開発の話し、販売戦略の話しなどもしていた。4月末で初期開発の区切りもつく。今後は毎月1週間も出張しなくてよいのではないかという話しもして、5月は会議を2-3日に集中してやったらいいんじゃないかということになった。出張はそろそろ疲れてきたのと、私がオフィスにいてもメンバーは半分以上リモートワークなのでオフィスに来る意義があまりない。うちのチームはリモートワークで開発に支障が出ない仕組みを構築できているとは思う。&lt;/p></content></item><item><title>昔の上長の背中を追う</title><link>/diary/posts/2023/0310/</link><pubDate>Fri, 10 Mar 2023 08:40:34 +0900</pubDate><guid>/diary/posts/2023/0310/</guid><description>2時に寝て7時半に起きた。昨日もWBCをみてから晩ご飯を食べて軽く作業してそのまま寝た。
伴奏 ここ2-3日若いメンバーの開発をサポートしている。
「◯◯ができません」
私が5分ほどでググってできそうなドキュメントや so をみつけてリンクを貼る。
「できました。」
みたいなやり取りを何度かした。大して難しくない処理を実装できないのは公式ドキュメントをちゃんと読んでいないのと、インターネットの検索方法を習得していないように私からはみえる。一度、定例会議のときに google の言語設定を英語にした方がよい。日本のキュレーションサイトの記事の品質は低いからと伝えたが、まだそれを実践しているようにはみえない。いまや英語は deepl で翻訳すれば大半を斜め読みできる。私も deepl で読んでいると教えたりしているのだけど、日本語の記事しか検索していないから未知のことをできないとなってしまう。
チャットで困っていることや問題点を整理したり、どういう視点で調べていくかをやり取りしながら本人が理解して作業できるようにサポートしている。私がやれば10分で終わるようなことを2時間ぐらいかけてチャットしている。それで昼間は自分のお仕事をやらずチャットの話し相手を務めている。誰もが最初は初心者なのでそういう時期はある。以前は質問すらできていなかったところを、あれができないとか、これがわからないとか質問できるようになったというのは成長したと受け取れる。わからないことを説明してもらうことで、私も相手のことを理解できて適切な指示や指導ができる。その過程でプログラミングの理解度も測れるので issue をアサインするときの参考にもなる。
曖昧なことをチャットで聞くのは効率が悪いから、口頭であれこれ質問してくれるようになるのがこの次のステップかな。以前と比べて質問してくれるようになったので信頼関係は少しずつ構築できてきつつあるのかもしれない。
昔の自分といまの自分 既存のある java のコードを読んでいて、私の中ではワーストから数えた方が早いほどのひどいコードをみている。java の言語仕様もプログラミングもどちらもよくわかっていない人がキュレーションサイトにあるような記事を読んで動くように作ったようなツールにみえる。アリエルを辞めてからいくつかの会社で働いてきて java のコードも読み書きしてきた。これまでの経験からその職場での java のコードは品質が高かったし、私もその影響で java の設計やアーキテクチャにも関心をもつようになった。私は未熟なので人並み程度のプログラミングしかできないが、そのスキルを底上げしてもらったのはその職場での3年間の java 開発といえる。私にとっての普通が当時の開発体験やチームの同僚になったことでそれ以降に出会った開発者の大半はスキルが低いようにみえてしまう。そして、その後に私がどんなプロダクトを開発しても決して当時の先輩方に敵うことはないと慢心することもない。だからプロダクトの開発を終えて、組織の方向性にあわなければすぐに辞めることもできた。
いま私がメンバーに教えていることも、メンバーからみたら少し厳しくみえるかもしれない。私にとって先人のような偉大な開発者に自分もなれるんやろか？とか思いながらマネジメントをしていたりする。今週はとくに18時にホテル戻って2-3時間寝て22時頃から2-3時間コードを書いたりしていた。当時の上長もよくそうやって開発していた。当時の私はよく働いたが、そんな私からみてもその上長もよく働いていた。そして上長の生産性は私よりも数倍高かった。お互いに課題管理システム上にいることはわかっていたし、夜中の1時頃にチケット上でやり取りすることもあった。私もいま当時の上長と同じようなことをやっているなと感慨に浸りながら夜中にコードを書いていた。うちのチームのメンバーは誰も夜中に開発していないことだけが当時とは違うことにも気付いた。</description><content>&lt;p>2時に寝て7時半に起きた。昨日もWBCをみてから晩ご飯を食べて軽く作業してそのまま寝た。&lt;/p>
&lt;h2 id="伴奏">伴奏&lt;/h2>
&lt;p>ここ2-3日若いメンバーの開発をサポートしている。&lt;/p>
&lt;blockquote>
&lt;p>「◯◯ができません」&lt;/p>
&lt;p>私が5分ほどでググってできそうなドキュメントや so をみつけてリンクを貼る。&lt;/p>
&lt;p>「できました。」&lt;/p>
&lt;/blockquote>
&lt;p>みたいなやり取りを何度かした。大して難しくない処理を実装できないのは公式ドキュメントをちゃんと読んでいないのと、インターネットの検索方法を習得していないように私からはみえる。一度、定例会議のときに google の言語設定を英語にした方がよい。日本のキュレーションサイトの記事の品質は低いからと伝えたが、まだそれを実践しているようにはみえない。いまや英語は deepl で翻訳すれば大半を斜め読みできる。私も deepl で読んでいると教えたりしているのだけど、日本語の記事しか検索していないから未知のことをできないとなってしまう。&lt;/p>
&lt;p>チャットで困っていることや問題点を整理したり、どういう視点で調べていくかをやり取りしながら本人が理解して作業できるようにサポートしている。私がやれば10分で終わるようなことを2時間ぐらいかけてチャットしている。それで昼間は自分のお仕事をやらずチャットの話し相手を務めている。誰もが最初は初心者なのでそういう時期はある。以前は質問すらできていなかったところを、あれができないとか、これがわからないとか質問できるようになったというのは成長したと受け取れる。わからないことを説明してもらうことで、私も相手のことを理解できて適切な指示や指導ができる。その過程でプログラミングの理解度も測れるので issue をアサインするときの参考にもなる。&lt;/p>
&lt;p>曖昧なことをチャットで聞くのは効率が悪いから、口頭であれこれ質問してくれるようになるのがこの次のステップかな。以前と比べて質問してくれるようになったので信頼関係は少しずつ構築できてきつつあるのかもしれない。&lt;/p>
&lt;h2 id="昔の自分といまの自分">昔の自分といまの自分&lt;/h2>
&lt;p>既存のある java のコードを読んでいて、私の中ではワーストから数えた方が早いほどのひどいコードをみている。java の言語仕様もプログラミングもどちらもよくわかっていない人がキュレーションサイトにあるような記事を読んで動くように作ったようなツールにみえる。アリエルを辞めてからいくつかの会社で働いてきて java のコードも読み書きしてきた。これまでの経験からその職場での java のコードは品質が高かったし、私もその影響で java の設計やアーキテクチャにも関心をもつようになった。私は未熟なので人並み程度のプログラミングしかできないが、そのスキルを底上げしてもらったのはその職場での3年間の java 開発といえる。私にとっての普通が当時の開発体験やチームの同僚になったことでそれ以降に出会った開発者の大半はスキルが低いようにみえてしまう。そして、その後に私がどんなプロダクトを開発しても決して当時の先輩方に敵うことはないと慢心することもない。だからプロダクトの開発を終えて、組織の方向性にあわなければすぐに辞めることもできた。&lt;/p>
&lt;p>いま私がメンバーに教えていることも、メンバーからみたら少し厳しくみえるかもしれない。私にとって先人のような偉大な開発者に自分もなれるんやろか？とか思いながらマネジメントをしていたりする。今週はとくに18時にホテル戻って2-3時間寝て22時頃から2-3時間コードを書いたりしていた。当時の上長もよくそうやって開発していた。当時の私はよく働いたが、そんな私からみてもその上長もよく働いていた。そして上長の生産性は私よりも数倍高かった。お互いに課題管理システム上にいることはわかっていたし、夜中の1時頃にチケット上でやり取りすることもあった。私もいま当時の上長と同じようなことをやっているなと感慨に浸りながら夜中にコードを書いていた。うちのチームのメンバーは誰も夜中に開発していないことだけが当時とは違うことにも気付いた。&lt;/p></content></item><item><title>リリース延期の危機</title><link>/diary/posts/2023/0309/</link><pubDate>Thu, 09 Mar 2023 08:38:31 +0900</pubDate><guid>/diary/posts/2023/0309/</guid><description>1時に寝て7時に起きた。いつも通り夕方にホテルに戻って2時間ほど寝て起きたらテレビで WBS をやっていてそのままみてた。そしたら晩ご飯食べるタイミングも作業するタイミングも逃して日記を書いたり雑多なことをしていた。
プロジェクトの進捗報告 出張したときの月例報告の4回目。前回の進捗報告はこちら 。1月にリリース前倒しを提案して颯爽と1ヶ月前倒しをしたのにその翌月に現時点ではまだリリース可能かどうかを判断できないといったことを報告した。まったく情けない。サーバーサイドとフロントエンドの開発はすでに完了しているのに。しかし、もともとこのプロジェクトの開発対象に入っていなかったもので、ほぼ完成していると聞いていたモジュール群の半分が機能不足や低品質で作り直すことになった。残りの半分もそのままでは動かない。
経験の浅いメンバーに1ヶ月以上の時間を与えて作り直してもらうようにお願いしていたが、うまく進捗せず時間だけが過ぎていって、結果的に2月の半ばから私が引き取って大半の機能を開発している。結果的にそのメンバーにお願いしていた開発の8割を私が2週間でほとんど実装した。2月の中旬から私がずっと休祝日に開発のお仕事をしていたのはこの開発遅れを補填するためだった。チームが fix した2月の issue 数が57でそのうちの30を、enhance ラベルが付いたものは28でそのうちの13を私が担当した。今月の半分の開発を私が代替わりして帳尻を無理やりあわせた。もはや遊撃のレベルではなく、私が本気出して全部作っておきましたみたいなことをした。
本当はメンバーに開発経験をつけてもらうために私がいるので私が主担当で開発するのはよくない。とはいえ、このままいくと2ヶ月ほど開発遅延する、しかもこのプロジェクトの中核でもない機能のために、それも悔しいし、うちの会社の信頼にも関わるのでズルしてしまいましたと経営陣へ正直に報告した。自分がやるよりも他人に教える方がずっと難しい。先方からは咎めるものではなかったし、私が開発して帳尻をあわせるのを止めるものでもないという承認は得た。
難しい開発課題を経験の浅いメンバーに担当させてしまった私のマネジメントの誤りであることは、チームのふりかえりでも、経営者への報告でも伝えている。なにが起ころうとプロジェクトの責任はマネージャーの私にあることは理解している。その遅れはマネージャーが責任をもって対応するのだとメンバーが学ぶ機会にもなったんじゃないかという意見も出た。私も過去にそういう上長をみて思うところはあったのでそれはそうかもしれない。なぜ1ヶ月以上も時間を与えているのに芋づる式にスケジュールが遅延するのか。その要因もメンバーの行動や進捗をみていて理解できた。第一に経験が浅いために開発の見通しや見積もりを立てられない。例えば課題が3つあるとして、1つしかみえていないから「できそうです」と言っていても、1つ終えた後にまた1つありましたと報告があり、その1つを終えてもまだもう1つありましたと報告が来る。一定の経験があれば作業を開始する前に3つあることを整理して、その上で納期にあわせて3つを対処する。納期いっぱい使って1つだけやろうとするところの意識の差は大きい。第二に期日までに実装できる一定のスキルをもっていないとコードレビューが1週間とか続いてしまう。そういった開発者にクリティカルパスとなる issue を担当させてはいけないように思えた。
ある issue がクリティカルパスになってしまった時点で、私かスキルのあるメンバーのどちらかへ引き継ぐように2月中旬に調整していればいまの状況は変わったのではないだろうか。その判断が2週間遅れたことに今回は気付けた。結果論ではあるが、厳しい判断をもう少し早めに下さないといけなかった。</description><content>&lt;p>1時に寝て7時に起きた。いつも通り夕方にホテルに戻って2時間ほど寝て起きたらテレビで WBS をやっていてそのままみてた。そしたら晩ご飯食べるタイミングも作業するタイミングも逃して日記を書いたり雑多なことをしていた。&lt;/p>
&lt;h2 id="プロジェクトの進捗報告">プロジェクトの進捗報告&lt;/h2>
&lt;p>出張したときの月例報告の4回目。&lt;a href="/diary/diary/posts/2023/0209/">前回の進捗報告はこちら&lt;/a> 。1月にリリース前倒しを提案して颯爽と1ヶ月前倒しをしたのにその翌月に現時点ではまだリリース可能かどうかを判断できないといったことを報告した。まったく情けない。サーバーサイドとフロントエンドの開発はすでに完了しているのに。しかし、もともとこのプロジェクトの開発対象に入っていなかったもので、ほぼ完成していると聞いていたモジュール群の半分が機能不足や低品質で作り直すことになった。残りの半分もそのままでは動かない。&lt;/p>
&lt;p>経験の浅いメンバーに1ヶ月以上の時間を与えて作り直してもらうようにお願いしていたが、うまく進捗せず時間だけが過ぎていって、結果的に2月の半ばから私が引き取って大半の機能を開発している。結果的にそのメンバーにお願いしていた開発の8割を私が2週間でほとんど実装した。2月の中旬から私がずっと休祝日に開発のお仕事をしていたのはこの開発遅れを補填するためだった。チームが fix した2月の issue 数が57でそのうちの30を、enhance ラベルが付いたものは28でそのうちの13を私が担当した。今月の半分の開発を私が代替わりして帳尻を無理やりあわせた。もはや遊撃のレベルではなく、私が本気出して全部作っておきましたみたいなことをした。&lt;/p>
&lt;p>本当はメンバーに開発経験をつけてもらうために私がいるので私が主担当で開発するのはよくない。とはいえ、このままいくと2ヶ月ほど開発遅延する、しかもこのプロジェクトの中核でもない機能のために、それも悔しいし、うちの会社の信頼にも関わるのでズルしてしまいましたと経営陣へ正直に報告した。自分がやるよりも他人に教える方がずっと難しい。先方からは咎めるものではなかったし、私が開発して帳尻をあわせるのを止めるものでもないという承認は得た。&lt;/p>
&lt;p>難しい開発課題を経験の浅いメンバーに担当させてしまった私のマネジメントの誤りであることは、チームのふりかえりでも、経営者への報告でも伝えている。なにが起ころうとプロジェクトの責任はマネージャーの私にあることは理解している。その遅れはマネージャーが責任をもって対応するのだとメンバーが学ぶ機会にもなったんじゃないかという意見も出た。私も過去にそういう上長をみて思うところはあったのでそれはそうかもしれない。なぜ1ヶ月以上も時間を与えているのに芋づる式にスケジュールが遅延するのか。その要因もメンバーの行動や進捗をみていて理解できた。第一に経験が浅いために開発の見通しや見積もりを立てられない。例えば課題が3つあるとして、1つしかみえていないから「できそうです」と言っていても、1つ終えた後にまた1つありましたと報告があり、その1つを終えてもまだもう1つありましたと報告が来る。一定の経験があれば作業を開始する前に3つあることを整理して、その上で納期にあわせて3つを対処する。納期いっぱい使って1つだけやろうとするところの意識の差は大きい。第二に期日までに実装できる一定のスキルをもっていないとコードレビューが1週間とか続いてしまう。そういった開発者にクリティカルパスとなる issue を担当させてはいけないように思えた。&lt;/p>
&lt;p>ある issue がクリティカルパスになってしまった時点で、私かスキルのあるメンバーのどちらかへ引き継ぐように2月中旬に調整していればいまの状況は変わったのではないだろうか。その判断が2週間遅れたことに今回は気付けた。結果論ではあるが、厳しい判断をもう少し早めに下さないといけなかった。&lt;/p></content></item><item><title>余裕がなさ過ぎる</title><link>/diary/posts/2023/0217/</link><pubDate>Fri, 17 Feb 2023 09:12:06 +0900</pubDate><guid>/diary/posts/2023/0217/</guid><description>1時に寝て7時に起きた。タスクが溜まり過ぎてそろそろ辛くなってきているところ。この余裕の無さはよくないことなので、自分のダメさ加減というか、大いに反省しないといけない。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。いつもは打ち合わせの議題を2-3日前には共有するようにしている。だいたい水曜日前後に議題のリファレンスをはらさんに共有して金曜日の朝に話している。しかし、今週はリファクタリングに集中し過ぎていて前日の寝る前になって議題を共有していないことに気付いた。そして朝起きてから急ぎで議題を考えて共有していた。これはとてもよくない。準備ができていないので今日の議題は主に近況の話しをしていた。
プロジェクトマネジメントの話し データ指向アプリケーションデザインのイベントの所感 Gopher塾イベントの所感 ハドルの雑談 先日から 午前中はハドルに滞在 するようにしている。今週は木曜日にチーム外から勉強会についての相談が、今日はメンバーから気分転換に雑談にやってきてくれた。おそらく私がハドルにいなかったらゼロだったコミュニケーションの機会が、1週間に1-2回でもあることに私は嬉しく思ってしまう。フルリモートワークにおける、オフラインのような気軽な雑談の機会を提供する施策の1つとして意味なくハドルに入るのは悪くない気がしている。そのときにコミュニケーションを強制させるような押し付けが発生しないよう、運用ルールを徹底することが大事に思える。いまは相手がハドルに入ってくると 1on1 のような雰囲気になってしまうのでその次の挑戦としてはハドルに入っていても話さなくてよいといった運用ルールを設ければよいのではないかと思う。例えば、午前中はとりあえずハドルに入って気分が向いたときだけ話しかけるみたいな、ゆるいコミュニケーションの場になればいいなと思う。
ハドル雑談の運用ルールのアイディア
ハドルに入らなくても業務上の支障は一切おきない ハドルにいる人には、用事があってもなくても、話しかけてよい ハドルに入っていても話さず聞いているだけでもよい 業務に集中していて忙しいときは話しかけられても後回しにしてもよい (ハドルから退出した方がわかりやすいかもしれない) go の generics 勉強会 ちょうど先週からあちこち直したり、mongodb のクライアント周りをリファクタリングしたりしている。その過程で generics を使ってコードの共通化もしたりしている。私自身 generics で意図した通りにコンパイルできなくてはまってしまった事例もあるのでそういった失敗コードも共有した。go の generics はコードに対して静的な領域しか適用されず、コード中における動的な値の型は generics とは直行した概念だというところに初学者ははまるのではないかと思う。私がはまった。参加者におそらく1度はまるからはまったときに私が話していたことを思い出してとコードの解説をしていた。
今日は type constraint でできることと動的な値との関係を混同して generics でできないことを一生懸命やろうとしてた。interface に変換して型パラメーターに type assertion すればコンパイルは通る。2時間ほどはまってた。。。https://t.co/vmk6CfVTl8
&amp;mdash; Tetsuya Morimoto (@t2y) February 16, 2023 余裕があったらスライドにまとめて後で資料として再利用できるようにしたかったものの、私の作業に余裕がなさ過ぎて次のリファレンスから引用しながら解説するといった勉強会になった。ただ私が読んでよいと思った他者のスライドやブログの記事のみを紹介している。それはそれで参考にはなるので勉強会の意図としては問題なかったんじゃないかとは思う。
The Generic Dilemma Tutorial: Getting started with generics Go 1.18集中連載 ジェネリクス Go1.18最新情報 Understanding generics in Go 1.18 golang 1.18+ generics: The Good, The Bad, The Ugly.</description><content>&lt;p>1時に寝て7時に起きた。タスクが溜まり過ぎてそろそろ辛くなってきているところ。この余裕の無さはよくないことなので、自分のダメさ加減というか、大いに反省しないといけない。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。いつもは打ち合わせの議題を2-3日前には共有するようにしている。だいたい水曜日前後に議題のリファレンスをはらさんに共有して金曜日の朝に話している。しかし、今週はリファクタリングに集中し過ぎていて前日の寝る前になって議題を共有していないことに気付いた。そして朝起きてから急ぎで議題を考えて共有していた。これはとてもよくない。準備ができていないので今日の議題は主に近況の話しをしていた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="/diary/diary/posts/2023/0209/#プロジェクトの進捗報告">プロジェクトマネジメントの話し&lt;/a>&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2023/0215/#データ指向アプリケーションデザインの紹介イベント">データ指向アプリケーションデザインのイベントの所感&lt;/a>&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2023/0204/">Gopher塾イベントの所感&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="ハドルの雑談">ハドルの雑談&lt;/h2>
&lt;p>先日から &lt;a href="/diary/diary/posts/2023/0202/">午前中はハドルに滞在&lt;/a> するようにしている。今週は木曜日にチーム外から勉強会についての相談が、今日はメンバーから気分転換に雑談にやってきてくれた。おそらく私がハドルにいなかったらゼロだったコミュニケーションの機会が、1週間に1-2回でもあることに私は嬉しく思ってしまう。フルリモートワークにおける、オフラインのような気軽な雑談の機会を提供する施策の1つとして意味なくハドルに入るのは悪くない気がしている。そのときにコミュニケーションを強制させるような押し付けが発生しないよう、運用ルールを徹底することが大事に思える。いまは相手がハドルに入ってくると 1on1 のような雰囲気になってしまうのでその次の挑戦としてはハドルに入っていても話さなくてよいといった運用ルールを設ければよいのではないかと思う。例えば、午前中はとりあえずハドルに入って気分が向いたときだけ話しかけるみたいな、ゆるいコミュニケーションの場になればいいなと思う。&lt;/p>
&lt;p>ハドル雑談の運用ルールのアイディア&lt;/p>
&lt;ul>
&lt;li>ハドルに入らなくても業務上の支障は一切おきない&lt;/li>
&lt;li>ハドルにいる人には、用事があってもなくても、話しかけてよい&lt;/li>
&lt;li>ハドルに入っていても話さず聞いているだけでもよい&lt;/li>
&lt;li>業務に集中していて忙しいときは話しかけられても後回しにしてもよい (ハドルから退出した方がわかりやすいかもしれない)&lt;/li>
&lt;/ul>
&lt;h2 id="go-の-generics-勉強会">go の generics 勉強会&lt;/h2>
&lt;p>ちょうど先週からあちこち直したり、mongodb のクライアント周りをリファクタリングしたりしている。その過程で generics を使ってコードの共通化もしたりしている。私自身 generics で意図した通りにコンパイルできなくてはまってしまった事例もあるのでそういった失敗コードも共有した。go の generics はコードに対して静的な領域しか適用されず、コード中における動的な値の型は generics とは直行した概念だというところに初学者ははまるのではないかと思う。私がはまった。参加者におそらく1度はまるからはまったときに私が話していたことを思い出してとコードの解説をしていた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">今日は type constraint でできることと動的な値との関係を混同して generics でできないことを一生懸命やろうとしてた。interface に変換して型パラメーターに type assertion すればコンパイルは通る。2時間ほどはまってた。。。&lt;a href="https://t.co/vmk6CfVTl8">https://t.co/vmk6CfVTl8&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1626177820362940421?ref_src=twsrc%5Etfw">February 16, 2023&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>余裕があったらスライドにまとめて後で資料として再利用できるようにしたかったものの、私の作業に余裕がなさ過ぎて次のリファレンスから引用しながら解説するといった勉強会になった。ただ私が読んでよいと思った他者のスライドやブログの記事のみを紹介している。それはそれで参考にはなるので勉強会の意図としては問題なかったんじゃないかとは思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://research.swtch.com/generic">The Generic Dilemma&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://go.dev/doc/tutorial/generics">Tutorial: Getting started with generics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://future-architect.github.io/articles/20220209a/">Go 1.18集中連載 ジェネリクス&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.google.com/presentation/d/1Dj7Rs5K1HkVogbX9vuxcja-uJ5tIqxkFwPG-W31vP0E/edit#slide=id.p">Go1.18最新情報&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.logrocket.com/understanding-generics-go-1-18/">Understanding generics in Go 1.18&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://itnext.io/golang-1-18-generics-the-good-the-bad-the-ugly-5e9fa2520e76">golang 1.18+ generics: The Good, The Bad, The Ugly.&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>リリースの前倒し</title><link>/diary/posts/2023/0209/</link><pubDate>Thu, 09 Feb 2023 08:10:53 +0900</pubDate><guid>/diary/posts/2023/0209/</guid><description>23時に寝て何度か起きて5時半に起きた。
プロジェクトの進捗報告 出張したときの月例報告の3回目。前回の進捗報告はこちら 。1月はバックエンド開発を完了させてフロントエンド開発に着手した。当初は6ヶ月の開発期間を設けていたものの、1ヶ月前倒しの5ヶ月でフェーズ1の開発を完了させる見通しを報告した。管理画面も機能的にはすでに一通り実装できている。これから2月は使いやすさの ui を改善していくところや品質をあげるためのリファクタリングを行い、3月は運用レベルのテストをしてバグ修正を行う。ソースコードの品質も私がチェックしているので、どういう修正が必要かも予測できていて、十分に余裕のあるスケジュールだと私は考えている。油断も慢心もなく、いまできるだけの知識とスキルをつぎ込んで品質の高いプロダクトに仕上げるのに努める。
先月に宣言した通り、フェーズ1の開発はもう私の中では終わっていて次のフェーズ2への準備や計画をこれから考えていく。業務的に区切りがよいのでフェーズ1で契約終了する可能性もあったけれど、4月以降も開発のマネジメントをしてほしいとのこと。フェーズ1の開発と並行して、余裕をみてフェーズ2以降の計画も立てていく。フェーズ2以降に予定している、少なくともあと2つの機能開発に私は責任をもとうと契約の有無に関係なくもともと考えていた。それらを実装すれば大半のお客さんのニーズにあうプロダクトになるはずなのでそれ以降の開発は引き継いでいいかなと思う。言うても野心的に言えば3ヶ月強といったところか。チームも成長しているので3ヶ月前よりは開発速度が上がっている。
さらにいま私が担当しているプロジェクトとは別に、他にもやってほしいお仕事があるらしい。もしかしたらそれも含めて来季の半期以上のお手伝いになるのかもしれない。しばらく次のお仕事探しはしなくてよい状況にある。3月のリリースを終えたら会社の事例紹介を書きたい。今回は会社として初めてのプロジェクトマネジメントの実績になる。周りにも喧伝していきたい。
出張晩ご飯 たまたま1月末に課題管理についてチャットで議論していたら盛り上がったのでこみやさんと晩ご飯に行ってきた。ざっくばらんに近況やチームのマネジメントについて話してきて楽しかった。19時半過ぎから始めて23時過ぎまで飲んでた。帰路の途中で新宿駅構内で人身事故が発生して、電車が止まってしまい、復旧に1時間ぐらいかかるというのでタクシーで帰った。タクシー料金も region pay で「ただいま東京プラス」のクーポンが使えたので金銭的に損はしなかった。
こみやさんのチームの話しからは、対話重視のスクラムのイベントが si におけるメンバーの教育にもうまくいっているように聞こえた。メンバー間で質問し合うのを促していて、質問者と回答者の双方の理解度をあげることを狙いとしている。質問が現状をふりかえるよいきっかけになっているとのこと。
あとメンバーに自律的に勉強会をしてもらうにはどうしたらいいかという話題も盛り上がった。私もいま毎週勉強会をやっていて、これはよい開発文化を作る上で大事だと思っているものの、いずれメンバーが自律的にやるようになってほしい。いまは私がお手本をみせるという意図もあって勉強会の運営をやっているのだけど、それをどうやってメンバーもできるように巻き込んでいくかを考えている。こみやさんや私が勉強会をやると、一定の水準で運営してしまうから、それがメンバーにとって逆に気後れさせてしまわないかという視点も話したりしていた。勉強会は準備に工数がかかると発表者が大変になって続かなくなるので、毎週やろうと思ったら準備に工数をかけないという仕掛けは重要になる。もしくは情報共有やコミュニケーションの場としての勉強会を考えるならもっと身近な内容を話す場になってもよいのでは？という考え方もある。例えば、最近の時事ネタで関心をもったニュースや技術などを取り上げて雑談するのでもかまわない。
いずれにしても、うちらがやれと指示してしまうと、業務命令として業務だからやっているだけになってしまい、よい開発文化を作るという、結果的に業務に大きな価値をもたらすなにかとは違うものになってしまうのがこの問題の難しいところ。開発をよりよくしたい。技術を深めたい。品質をあげたい。なにかしら開発そのものに対して関心をもって自律的にそういう活動をする開発者を増やしていく。言葉にすればたったこれだけのこと。しかし、このことを教えるのは相当に難しい。まだ私がマネージャーとして働く時間はあるのでこれからも挑戦していきたい。</description><content>&lt;p>23時に寝て何度か起きて5時半に起きた。&lt;/p>
&lt;h2 id="プロジェクトの進捗報告">プロジェクトの進捗報告&lt;/h2>
&lt;p>出張したときの月例報告の3回目。&lt;a href="/diary/diary/posts/2023/0112/">前回の進捗報告はこちら&lt;/a> 。1月はバックエンド開発を完了させてフロントエンド開発に着手した。当初は6ヶ月の開発期間を設けていたものの、1ヶ月前倒しの5ヶ月でフェーズ1の開発を完了させる見通しを報告した。管理画面も機能的にはすでに一通り実装できている。これから2月は使いやすさの ui を改善していくところや品質をあげるためのリファクタリングを行い、3月は運用レベルのテストをしてバグ修正を行う。ソースコードの品質も私がチェックしているので、どういう修正が必要かも予測できていて、十分に余裕のあるスケジュールだと私は考えている。油断も慢心もなく、いまできるだけの知識とスキルをつぎ込んで品質の高いプロダクトに仕上げるのに努める。&lt;/p>
&lt;p>先月に宣言した通り、フェーズ1の開発はもう私の中では終わっていて次のフェーズ2への準備や計画をこれから考えていく。業務的に区切りがよいのでフェーズ1で契約終了する可能性もあったけれど、4月以降も開発のマネジメントをしてほしいとのこと。フェーズ1の開発と並行して、余裕をみてフェーズ2以降の計画も立てていく。フェーズ2以降に予定している、少なくともあと2つの機能開発に私は責任をもとうと契約の有無に関係なくもともと考えていた。それらを実装すれば大半のお客さんのニーズにあうプロダクトになるはずなのでそれ以降の開発は引き継いでいいかなと思う。言うても野心的に言えば3ヶ月強といったところか。チームも成長しているので3ヶ月前よりは開発速度が上がっている。&lt;/p>
&lt;p>さらにいま私が担当しているプロジェクトとは別に、他にもやってほしいお仕事があるらしい。もしかしたらそれも含めて来季の半期以上のお手伝いになるのかもしれない。しばらく次のお仕事探しはしなくてよい状況にある。3月のリリースを終えたら会社の事例紹介を書きたい。今回は会社として初めてのプロジェクトマネジメントの実績になる。周りにも喧伝していきたい。&lt;/p>
&lt;h2 id="出張晩ご飯">出張晩ご飯&lt;/h2>
&lt;p>たまたま1月末に課題管理についてチャットで議論していたら盛り上がったのでこみやさんと晩ご飯に行ってきた。ざっくばらんに近況やチームのマネジメントについて話してきて楽しかった。19時半過ぎから始めて23時過ぎまで飲んでた。帰路の途中で新宿駅構内で人身事故が発生して、電車が止まってしまい、復旧に1時間ぐらいかかるというのでタクシーで帰った。タクシー料金も region pay で「ただいま東京プラス」のクーポンが使えたので金銭的に損はしなかった。&lt;/p>
&lt;p>こみやさんのチームの話しからは、対話重視のスクラムのイベントが si におけるメンバーの教育にもうまくいっているように聞こえた。メンバー間で質問し合うのを促していて、質問者と回答者の双方の理解度をあげることを狙いとしている。質問が現状をふりかえるよいきっかけになっているとのこと。&lt;/p>
&lt;p>あとメンバーに自律的に勉強会をしてもらうにはどうしたらいいかという話題も盛り上がった。私もいま毎週勉強会をやっていて、これはよい開発文化を作る上で大事だと思っているものの、いずれメンバーが自律的にやるようになってほしい。いまは私がお手本をみせるという意図もあって勉強会の運営をやっているのだけど、それをどうやってメンバーもできるように巻き込んでいくかを考えている。こみやさんや私が勉強会をやると、一定の水準で運営してしまうから、それがメンバーにとって逆に気後れさせてしまわないかという視点も話したりしていた。勉強会は準備に工数がかかると発表者が大変になって続かなくなるので、毎週やろうと思ったら準備に工数をかけないという仕掛けは重要になる。もしくは情報共有やコミュニケーションの場としての勉強会を考えるならもっと身近な内容を話す場になってもよいのでは？という考え方もある。例えば、最近の時事ネタで関心をもったニュースや技術などを取り上げて雑談するのでもかまわない。&lt;/p>
&lt;p>いずれにしても、うちらがやれと指示してしまうと、業務命令として業務だからやっているだけになってしまい、よい開発文化を作るという、結果的に業務に大きな価値をもたらすなにかとは違うものになってしまうのがこの問題の難しいところ。開発をよりよくしたい。技術を深めたい。品質をあげたい。なにかしら開発そのものに対して関心をもって自律的にそういう活動をする開発者を増やしていく。言葉にすればたったこれだけのこと。しかし、このことを教えるのは相当に難しい。まだ私がマネージャーとして働く時間はあるのでこれからも挑戦していきたい。&lt;/p></content></item><item><title>1週間を管理しようとしない</title><link>/diary/posts/2023/0207/</link><pubDate>Tue, 07 Feb 2023 08:34:05 +0900</pubDate><guid>/diary/posts/2023/0207/</guid><description>1時に寝て5時に起きた。ホテルのテレビを付けっぱなしで寝たら朝のニュースで起きた。なんとなくニュースをみながら7時ぐらいまでのんびりしてた。
1週間のイテレーションはナンセンス？ 毎月行っているマイルストーンのふりかえり。今回で3回目なのでメンバーもだいぶ慣れてきた。11, 12, 1月と3ヶ月に渡って課題管理をメンバーに実践してもらいながら開発してきた。当初、開発のイテレーションを1週間で行うか、2週間で行うかの話し合いで短い方がいいんじゃないかとなり、あまり深く考えずに1週間のイテレーションで開発をまわしてきた。しかし、いまとなってはこれは開発のイテレーションとは違うものになっている。
最初の1ヶ月はメンバーにとって慣れないワークフローだから、1週間のイテレーションでこの issue をやる・やらないといった厳密な取り決めはしなかった。その後、徐々に慣れてきたのを見越して、定例会議のときに issue 一覧をみながら、メンバーに2-3個ぐらいの issue をアサインしたり、issue の優先順位付けを明確にしたりしてきた。必ず issue を完了させるという強い制約を課していないものの、だいたい毎週アサインしたものをメンバーは対応してくれていたので、マネージャーとしての私の視点からもとくに問題はないようにみえた。要はうまくまわっているのでそれ以上の管理をしなくてもいい状態だったと言える。
一方で、本来の課題管理のイテレーションとは異なる開発のワークフローになっていて、それがよいことなのかどうか、私自身にも明確な答えがなかった。それでメンバーに尋ねてみた。いまの1週間単位のイテレーション (開発のワークフロー) をどう思いますか？
メンバーからは、1週間の作業内容を厳密に決めなくてもいいんじゃないかという意見が出た。それは私の考えとも一致していたものの、開発のイテレーションを2週間に伸ばすことについて話しているときに、そうしたとしても、定例会議は毎週やりたいという意見が出た。要件確認や仕様共有のために重要だという。通常、イテレーションの成果共有のために定例会議とイテレーションの長さは一致している。仮にイテレーションを2週間にしたら定例会議は2週間に1回となる。しかし、メンバーの視点からはイテレーションを1週間にするか2週間にするかについて関心はないものの、毎週の定例会議で行っている情報共有は重要だという認識があった。
ここで開発のイテレーションと定例会議の頻度は別にあわせなくてもいいんじゃないかと考えるきっかけを私は得られた。スクラムもスプリントと会議体の頻度はセットになっているのでこの発想はなかった。ちなみにアリエル時代は1つのイテレーションが3ヶ月で定例会議もなかった。そして、うちのチームは1ヶ月のマイルストーンに対してふりかえりをセットにしている。これはもはやイテレーション開発の文脈でいえば、実質うちのチームはマイルストーンと呼んでいる1ヶ月が1つのイテレーションになっていて、1つのイテレーション内に4回の定例会議があるというイテレーション開発のワークフローになっていることに気付いた。課題管理の考え方やワークフローがもっと洗練されていくと、毎週の定例会議をやらなくてもよいようになっていくのが私の経験から自明である。しかし、うちの開発は私も含めて8割以上がフルリモートワークなので、メンバー全員の顔を合わせる機会を作るという観点から毎週の定例会議は大事な場にもなっている。
実際の開発のマネジメントをしてみると、私自身、分かっていなかったことや新たな発見があって、まだまだ自分自身も修行の身であることを実感する。ここでの結論としてわかったことは次の通りで、ロードマップにおける最初のフェーズが完了する3月末までは現状のワークフローを継続してみることに決めた。
開発のイテレーションとして1週間は短過ぎて管理対象としてあわない 開発のイテレーションと定例会議の頻度をあわせなくてもよい フルリモートワークの場合、メンバー全員を集める目的は情報共有だけではない</description><content>&lt;p>1時に寝て5時に起きた。ホテルのテレビを付けっぱなしで寝たら朝のニュースで起きた。なんとなくニュースをみながら7時ぐらいまでのんびりしてた。&lt;/p>
&lt;h2 id="1週間のイテレーションはナンセンス">1週間のイテレーションはナンセンス？&lt;/h2>
&lt;p>毎月行っているマイルストーンのふりかえり。今回で3回目なのでメンバーもだいぶ慣れてきた。11, 12, 1月と3ヶ月に渡って課題管理をメンバーに実践してもらいながら開発してきた。当初、開発のイテレーションを1週間で行うか、2週間で行うかの話し合いで短い方がいいんじゃないかとなり、あまり深く考えずに1週間のイテレーションで開発をまわしてきた。しかし、いまとなってはこれは開発のイテレーションとは違うものになっている。&lt;/p>
&lt;p>最初の1ヶ月はメンバーにとって慣れないワークフローだから、1週間のイテレーションでこの issue をやる・やらないといった厳密な取り決めはしなかった。その後、徐々に慣れてきたのを見越して、定例会議のときに issue 一覧をみながら、メンバーに2-3個ぐらいの issue をアサインしたり、issue の優先順位付けを明確にしたりしてきた。必ず issue を完了させるという強い制約を課していないものの、だいたい毎週アサインしたものをメンバーは対応してくれていたので、マネージャーとしての私の視点からもとくに問題はないようにみえた。要はうまくまわっているのでそれ以上の管理をしなくてもいい状態だったと言える。&lt;/p>
&lt;p>一方で、本来の課題管理のイテレーションとは異なる開発のワークフローになっていて、それがよいことなのかどうか、私自身にも明確な答えがなかった。それでメンバーに尋ねてみた。いまの1週間単位のイテレーション (開発のワークフロー) をどう思いますか？&lt;/p>
&lt;p>メンバーからは、1週間の作業内容を厳密に決めなくてもいいんじゃないかという意見が出た。それは私の考えとも一致していたものの、開発のイテレーションを2週間に伸ばすことについて話しているときに、そうしたとしても、定例会議は毎週やりたいという意見が出た。要件確認や仕様共有のために重要だという。通常、イテレーションの成果共有のために定例会議とイテレーションの長さは一致している。仮にイテレーションを2週間にしたら定例会議は2週間に1回となる。しかし、メンバーの視点からはイテレーションを1週間にするか2週間にするかについて関心はないものの、毎週の定例会議で行っている情報共有は重要だという認識があった。&lt;/p>
&lt;p>ここで開発のイテレーションと定例会議の頻度は別にあわせなくてもいいんじゃないかと考えるきっかけを私は得られた。スクラムもスプリントと会議体の頻度はセットになっているのでこの発想はなかった。ちなみにアリエル時代は1つのイテレーションが3ヶ月で定例会議もなかった。そして、うちのチームは1ヶ月のマイルストーンに対してふりかえりをセットにしている。これはもはやイテレーション開発の文脈でいえば、実質うちのチームはマイルストーンと呼んでいる1ヶ月が1つのイテレーションになっていて、1つのイテレーション内に4回の定例会議があるというイテレーション開発のワークフローになっていることに気付いた。課題管理の考え方やワークフローがもっと洗練されていくと、毎週の定例会議をやらなくてもよいようになっていくのが私の経験から自明である。しかし、うちの開発は私も含めて8割以上がフルリモートワークなので、メンバー全員の顔を合わせる機会を作るという観点から毎週の定例会議は大事な場にもなっている。&lt;/p>
&lt;p>実際の開発のマネジメントをしてみると、私自身、分かっていなかったことや新たな発見があって、まだまだ自分自身も修行の身であることを実感する。ここでの結論としてわかったことは次の通りで、ロードマップにおける最初のフェーズが完了する3月末までは現状のワークフローを継続してみることに決めた。&lt;/p>
&lt;ul>
&lt;li>開発のイテレーションとして1週間は短過ぎて管理対象としてあわない&lt;/li>
&lt;li>開発のイテレーションと定例会議の頻度をあわせなくてもよい&lt;/li>
&lt;li>フルリモートワークの場合、メンバー全員を集める目的は情報共有だけではない&lt;/li>
&lt;/ul></content></item><item><title>雑談の多い日</title><link>/diary/posts/2023/0203/</link><pubDate>Fri, 03 Feb 2023 18:53:13 +0900</pubDate><guid>/diary/posts/2023/0203/</guid><description>0時に寝て4時に起きて6時に起きた。本当はもっと早く起きて勉強会の資料作りやろうと思っていたけど、疲れと寒さでうまく起きれない。高速バスよりはずっと楽だけど、それでも土日に実家帰ってくると疲れが溜まる。次の週の週末になると蓄積度が違う。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。
フロントエンドの技術選定のふりかえり プロジェクトマネジメントの話し ハドルと雑談の話し 年末にはらさん主催の忘年会に参加した。参加者は10人前後いたと思う。そのときにはらさんが「会社でオンライン飲み会やっても盛り上がらない？」といった話題があった。その意見には私も同意でおそらく参加者が5人以上いるとオンライン飲み会は盛り上がらない。オンライン飲み会の難しさは1つの部屋だとせいぜい3-4人ぐらいでないと話せない。1つの部屋に10人とかいると、実質話しているのは3人ぐらいで残りのメンバーは聞いているだけになる。それが盛り上がらない要因だと思う。オフラインの飲み会なら、例えば4人テーブルに3グループに分かれて、それぞれのグループが3つの会話が成立するから盛り上がる。そして、隣の会話が薄く聞こえたり、ちょっと休むときに隣のグループの会話に混じったりもできる。これと同じことをオンラインでもチャンネルを分けてやればよいというのは理屈の上で正しい。しかし、オンラインで能動的に別のチャンネルに入り直すのは複数の意味で障壁が高い。まずツールの操作が分かりにくいし、幹事が仕切るわけでもないので運用ルールも曖昧。仮に幹事がいても仕切れるのは1つのチャンネルだけで、他のチャンネルが意図した運用をしているかどうか、チャンネルを出たり入ったりしないと監視するのが難しい。オフラインの飲み会に近い状態にするのは、オンラインミーティングツール側で自動的にうまいこと配慮しないといけないのではないかといった話を、はらさんとしていた。
はんなりPodcast はんなりプログラミング のコミュニティが はんなりPodcast（仮） を始めたらしい。私もちょくちょくはんなりさんのイベントに参加するので運営の方々とも懇意にさせていただいている。たまたまゲストで呼んでいただいた。感謝。内容はまた公開されてから書くので今日は収録の雰囲気だけ書いておく。かいせんさんとおがわさんとは、オンライン上でもよくやり取りしているので気軽に話すことができた。逆に私が調子に乗り過ぎて内容とは逸脱したことや自分の話したいことをわーっと話し過ぎてしまったのではないかという反省もあとになって思う。いま1人で働いているからこうやって自分の話しを聞いてくれる機会というのは貴重でそれはそれで楽しかった。ついつい自分の話しばかりし過ぎないように注意しないといけない。</description><content>&lt;p>0時に寝て4時に起きて6時に起きた。本当はもっと早く起きて勉強会の資料作りやろうと思っていたけど、疲れと寒さでうまく起きれない。高速バスよりはずっと楽だけど、それでも土日に実家帰ってくると疲れが溜まる。次の週の週末になると蓄積度が違う。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="/diary/diary/posts/2023/0201/#テックブログのレビュー／公開">フロントエンドの技術選定&lt;/a>のふりかえり&lt;/li>
&lt;li>プロジェクトマネジメントの話し&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2023/0202/#ハドルと雑談">ハドルと雑談&lt;/a>の話し&lt;/li>
&lt;/ul>
&lt;p>年末にはらさん主催の忘年会に参加した。参加者は10人前後いたと思う。そのときにはらさんが「会社でオンライン飲み会やっても盛り上がらない？」といった話題があった。その意見には私も同意でおそらく参加者が5人以上いるとオンライン飲み会は盛り上がらない。オンライン飲み会の難しさは1つの部屋だとせいぜい3-4人ぐらいでないと話せない。1つの部屋に10人とかいると、実質話しているのは3人ぐらいで残りのメンバーは聞いているだけになる。それが盛り上がらない要因だと思う。オフラインの飲み会なら、例えば4人テーブルに3グループに分かれて、それぞれのグループが3つの会話が成立するから盛り上がる。そして、隣の会話が薄く聞こえたり、ちょっと休むときに隣のグループの会話に混じったりもできる。これと同じことをオンラインでもチャンネルを分けてやればよいというのは理屈の上で正しい。しかし、オンラインで能動的に別のチャンネルに入り直すのは複数の意味で障壁が高い。まずツールの操作が分かりにくいし、幹事が仕切るわけでもないので運用ルールも曖昧。仮に幹事がいても仕切れるのは1つのチャンネルだけで、他のチャンネルが意図した運用をしているかどうか、チャンネルを出たり入ったりしないと監視するのが難しい。オフラインの飲み会に近い状態にするのは、オンラインミーティングツール側で自動的にうまいこと配慮しないといけないのではないかといった話を、はらさんとしていた。&lt;/p>
&lt;h2 id="はんなりpodcast">はんなりPodcast&lt;/h2>
&lt;p>&lt;a href="https://hannari-python.connpass.com/">はんなりプログラミング&lt;/a> のコミュニティが &lt;a href="https://note.com/hannari_group/n/n219af97b2ddf">はんなりPodcast（仮）&lt;/a> を始めたらしい。私もちょくちょくはんなりさんのイベントに参加するので運営の方々とも懇意にさせていただいている。たまたまゲストで呼んでいただいた。感謝。内容はまた公開されてから書くので今日は収録の雰囲気だけ書いておく。かいせんさんとおがわさんとは、オンライン上でもよくやり取りしているので気軽に話すことができた。逆に私が調子に乗り過ぎて内容とは逸脱したことや自分の話したいことをわーっと話し過ぎてしまったのではないかという反省もあとになって思う。いま1人で働いているからこうやって自分の話しを聞いてくれる機会というのは貴重でそれはそれで楽しかった。ついつい自分の話しばかりし過ぎないように注意しないといけない。&lt;/p></content></item><item><title>オフィスアワー的なハドル</title><link>/diary/posts/2023/0202/</link><pubDate>Thu, 02 Feb 2023 08:19:18 +0900</pubDate><guid>/diary/posts/2023/0202/</guid><description>2時に寝て7時に起きた。お仕事は時間かけた割に成果でなくて、遅くに帰ってきて晩ご飯食べてダンまちみたら寝るのも遅くなった。
ハドルと雑談 今日から午前中はハドルミーティングに滞在するようにして、メンバーが気軽に雑談しやすい雰囲気を作ってみる。大学で言うところのオフィスアワー。初日だったせいか、どんなものかとお試しでチーム外の開発者が来てくれたりもした。メンバーの1人もお昼前にとくに用ないけど試しに来てみましたと軽く雑談した。ハドル中じゃなかったけど、別のメンバーも午後にコードレビューの詳細について聞きたいといったメッセージが届いてハドルをした。リモートワークしていても気軽に話しかけていいんやでと表明することで、いくらか話しかけるのをためらう心理的障壁が下がったことは確認できた。普通に誰でも考えて起きること。あとはこれを一定期間、1ヶ月とか2ヶ月とか続けてみてどのぐらいの雑談ができるかを記録して、効果がありそうなら次のアクションを考える。とくに用事もないけど、暇だから気分転換に雑談に来ましたというのが高頻度で起これば心理的安全性にとってもよいことじゃないかな。私が逆の立場なら、用事もないのに会社の人に話しかけるのは仲のよい同僚しかいなかったと思う。他のメンバーも気軽にハドルに滞在するようになれば、物理的にオフィスに出社しなくても雑談しやすい雰囲気は作れるかもしれない。</description><content>&lt;p>2時に寝て7時に起きた。お仕事は時間かけた割に成果でなくて、遅くに帰ってきて晩ご飯食べてダンまちみたら寝るのも遅くなった。&lt;/p>
&lt;h2 id="ハドルと雑談">ハドルと雑談&lt;/h2>
&lt;p>今日から午前中はハドルミーティングに滞在するようにして、メンバーが気軽に雑談しやすい雰囲気を作ってみる。大学で言うところのオフィスアワー。初日だったせいか、どんなものかとお試しでチーム外の開発者が来てくれたりもした。メンバーの1人もお昼前にとくに用ないけど試しに来てみましたと軽く雑談した。ハドル中じゃなかったけど、別のメンバーも午後にコードレビューの詳細について聞きたいといったメッセージが届いてハドルをした。リモートワークしていても気軽に話しかけていいんやでと表明することで、いくらか話しかけるのをためらう心理的障壁が下がったことは確認できた。普通に誰でも考えて起きること。あとはこれを一定期間、1ヶ月とか2ヶ月とか続けてみてどのぐらいの雑談ができるかを記録して、効果がありそうなら次のアクションを考える。とくに用事もないけど、暇だから気分転換に雑談に来ましたというのが高頻度で起これば心理的安全性にとってもよいことじゃないかな。私が逆の立場なら、用事もないのに会社の人に話しかけるのは仲のよい同僚しかいなかったと思う。他のメンバーも気軽にハドルに滞在するようになれば、物理的にオフィスに出社しなくても雑談しやすい雰囲気は作れるかもしれない。&lt;/p></content></item><item><title>合間の遊撃</title><link>/diary/posts/2023/0131/</link><pubDate>Tue, 31 Jan 2023 13:01:15 +0900</pubDate><guid>/diary/posts/2023/0131/</guid><description>0時に寝て4時に起きて7時に起きた。晩ご飯に餃子の中身とニラと卵を炒めたものを食べてわりとよく眠れた。
遊撃の開発 ちょっと前に自分が 遊撃としての役割 を担っているのではないかと書いた。ある機能開発で javascript を用いてカスタムスクリプト を実行できるようにしたい。スポット的に私の手が空いていて手伝ってと言われたので実装している。開発していると集中しているから時間が経つのが早い。あとコードレビューのときよりもしっかりコードを読み込んだり、振る舞いをシミュレーションしたりするから、コードレビューのときに気付かなかったことや見逃したことにもい気付く。そして、それもついでにリファクタリングしていく。チームのメンバーに、過去に書いたコードをどんどん書き直すのはよいことだというのを、遊撃しながら教えていければいいなとも思う。課題管理システムの issue に調べたことや設計の素案のようなコメントをしていると、メンバーもコメントしてくれたりして、考え方や検証したことをどんどんテキストにして書いていく、言語化していくことの良さも、遊撃の中から学んでくれたりすると嬉しい。開発しながら、メンバーの教育や指導をどう進めるのがいいかな？とかも考えながら働いているのがマネージャーにやっているなという自己満足にもなっていたりする。だいぶマネージャーとしても自分自身にも慣れてきたんじゃないかと思う。</description><content>&lt;p>0時に寝て4時に起きて7時に起きた。晩ご飯に餃子の中身とニラと卵を炒めたものを食べてわりとよく眠れた。&lt;/p>
&lt;h2 id="遊撃の開発">遊撃の開発&lt;/h2>
&lt;p>ちょっと前に自分が &lt;a href="/diary/diary/posts/2023/0120/#隔週の雑談">遊撃としての役割&lt;/a> を担っているのではないかと書いた。ある機能開発で &lt;a href="/diary/diary/posts/2023/0126/">javascript を用いてカスタムスクリプト&lt;/a> を実行できるようにしたい。スポット的に私の手が空いていて手伝ってと言われたので実装している。開発していると集中しているから時間が経つのが早い。あとコードレビューのときよりもしっかりコードを読み込んだり、振る舞いをシミュレーションしたりするから、コードレビューのときに気付かなかったことや見逃したことにもい気付く。そして、それもついでにリファクタリングしていく。チームのメンバーに、過去に書いたコードをどんどん書き直すのはよいことだというのを、遊撃しながら教えていければいいなとも思う。課題管理システムの issue に調べたことや設計の素案のようなコメントをしていると、メンバーもコメントしてくれたりして、考え方や検証したことをどんどんテキストにして書いていく、言語化していくことの良さも、遊撃の中から学んでくれたりすると嬉しい。開発しながら、メンバーの教育や指導をどう進めるのがいいかな？とかも考えながら働いているのがマネージャーにやっているなという自己満足にもなっていたりする。だいぶマネージャーとしても自分自身にも慣れてきたんじゃないかと思う。&lt;/p></content></item><item><title>今日は打ち合わせの多い日だった</title><link>/diary/posts/2023/0120/</link><pubDate>Fri, 20 Jan 2023 08:34:26 +0900</pubDate><guid>/diary/posts/2023/0120/</guid><description>1時に寝て2時、3時、6時と起きて7時に起きた。久しぶりに胃酸が逆流して気分悪かった。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。sveltekit アプリで使う ui フレームワークの相談をして、昨日の課題管理の雑談内容 からさらに考察を深めた。私の中では知っていたことだったはずなのに、いつの間にか、そのことを軽視してしまっていることを再認識したような発見だった。
コミュ障の私にとってはペアワークという概念がすっぽり抜けていたことは昨日書いた通りだが、それでもいまマネージャーとしてそれなりにコードレビューやインフラタスクに時間を割いている。プロジェクトマネジメントだけをやっているわけではない。それは自分が遊撃として開発者のメンバーを手伝っていることに相当するなと気付いて、そう言えば、過去に五月雨式にだらだらと遅れるようなプロジェクトでは、他のメンバーのタスクが遅れることを横からみているだけしかやってなかったような気がした。もし私が自分のタスクを投げ出して遅れている課題に介入したらどうなっただろうか？と思考実験するだけの余地はあった。
もう1つ。盛り上がった話しにおっさんはエモい話しをしにくいと私が考えていると伝えた。なぜなら、私の経験則ではエモい話しをするおっさんは総じてスキルをもっていなかった。具体的な知識やプラクティスを話すときはエモい話にならないからだ。その発言に対して、はらさんからはこんなコメントが返ってきた。おっさんもスキルはあるのだけど、そのスキルが時代にあわなくなって古くなってしまった。現場の技術とあわないスキルは、現場の人間からみるとスキルがない人と同じである。少し前に40歳の壁という本を読んだが、そのノリで言うと、40歳になるとスキルが現場に通じなくなる。
いまマネージャーをしていて気付かないうちに遊撃というポジションをこなしているのではないかと思うようになってきた。原則として実務をやらず、プロジェクトマネジメントをしている。とはいえ、コードレビューには2-3日／週ぐらいの工数を割いてきた。
&amp;mdash; Tetsuya Morimoto (@t2y) January 21, 2023 sveltekit アプリのデプロイ 昨日の続き。Building your app によると、sveltekit のビルドは vite と adapter の2段階で行われる。gitlab ci/cd で node.js 向けにビルドして、それを docker イメージに同梱して、コンテナレジストリに登録する。あとはテスト環境で構築している docker compose に組み込むだけ。今日中にできたらいいなと思って、ぎりぎりだったけど、テスト環境で node.js 上にデプロイしたアプリと疎通できるところまでできた。ssr を介して web api サーバーと疎通できるところまで整備した。ここから先はメンバーに管理画面を作っていってもらう。メンバーの開発着手前にデプロイが一通りできているという気持ちよさ。
起業相談 過去に働いていた会社の、私と同い年の元同僚が起業するというので相談にのることに。私が会社を作ってなんとかやっているのをみて関心が出てきたという。いきなり会社を辞めると不安だから副業から始めて、本業の収入を上回るようになったから個人事業主から法人化しようと考えているらしい。実際に会社を辞めるかどうかはまだこれから検討するのかな？本業をやりながら最大4つか5つの副業をまわしてたというから驚き。そんなこと物理的に可能なの？と思ったら開発は人を雇ってマネジメントだけやったりしていたらしい。おそらく4人ぐらい開発者を雇っているという雰囲気だったけど、それでも本業をやりながら4つもマネジメントをするのは相当に大変だと思う。十分にその同僚の能力を認めているつもりだったけれど、それ以上の忍耐や集中力をもっていて、もしかしたら過小評価していたのかもしれない。1つの会社内でも3つ以上プロジェクトを兼任して成果を出しているマネージャーなんか私は見たことない。それを本業と副業と寄せ集めの開発者で実現しているのは類稀な能力だと思う。本人も睡眠時間削って働いてやり過ぎたとは言っていたが。法人登記、税金、節税、働き方とか、ざっくばらんに私が起業してやってきた3年間のお話しをした。なにかしら役に立って活躍されるといいな。</description><content>&lt;p>1時に寝て2時、3時、6時と起きて7時に起きた。久しぶりに胃酸が逆流して気分悪かった。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。sveltekit アプリで使う ui フレームワークの相談をして、&lt;a href="/diary/diary/posts/2023/0119/#課題管理の雑談">昨日の課題管理の雑談内容&lt;/a> からさらに考察を深めた。私の中では知っていたことだったはずなのに、いつの間にか、そのことを軽視してしまっていることを再認識したような発見だった。&lt;/p>
&lt;p>コミュ障の私にとってはペアワークという概念がすっぽり抜けていたことは昨日書いた通りだが、それでもいまマネージャーとしてそれなりにコードレビューやインフラタスクに時間を割いている。プロジェクトマネジメントだけをやっているわけではない。それは自分が遊撃として開発者のメンバーを手伝っていることに相当するなと気付いて、そう言えば、過去に五月雨式にだらだらと遅れるようなプロジェクトでは、他のメンバーのタスクが遅れることを横からみているだけしかやってなかったような気がした。もし私が自分のタスクを投げ出して遅れている課題に介入したらどうなっただろうか？と思考実験するだけの余地はあった。&lt;/p>
&lt;p>もう1つ。盛り上がった話しにおっさんはエモい話しをしにくいと私が考えていると伝えた。なぜなら、私の経験則ではエモい話しをするおっさんは総じてスキルをもっていなかった。具体的な知識やプラクティスを話すときはエモい話にならないからだ。その発言に対して、はらさんからはこんなコメントが返ってきた。おっさんもスキルはあるのだけど、そのスキルが時代にあわなくなって古くなってしまった。現場の技術とあわないスキルは、現場の人間からみるとスキルがない人と同じである。少し前に40歳の壁という本を読んだが、そのノリで言うと、40歳になるとスキルが現場に通じなくなる。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">いまマネージャーをしていて気付かないうちに遊撃というポジションをこなしているのではないかと思うようになってきた。原則として実務をやらず、プロジェクトマネジメントをしている。とはいえ、コードレビューには2-3日／週ぐらいの工数を割いてきた。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1616767644002291712?ref_src=twsrc%5Etfw">January 21, 2023&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="sveltekit-アプリのデプロイ">sveltekit アプリのデプロイ&lt;/h2>
&lt;p>昨日の続き。&lt;a href="https://kit.svelte.dev/docs/building-your-app">Building your app&lt;/a> によると、sveltekit のビルドは vite と adapter の2段階で行われる。gitlab ci/cd で node.js 向けにビルドして、それを docker イメージに同梱して、コンテナレジストリに登録する。あとはテスト環境で構築している docker compose に組み込むだけ。今日中にできたらいいなと思って、ぎりぎりだったけど、テスト環境で node.js 上にデプロイしたアプリと疎通できるところまでできた。ssr を介して web api サーバーと疎通できるところまで整備した。ここから先はメンバーに管理画面を作っていってもらう。メンバーの開発着手前にデプロイが一通りできているという気持ちよさ。&lt;/p>
&lt;h2 id="起業相談">起業相談&lt;/h2>
&lt;p>過去に働いていた会社の、私と同い年の元同僚が起業するというので相談にのることに。私が会社を作ってなんとかやっているのをみて関心が出てきたという。いきなり会社を辞めると不安だから副業から始めて、本業の収入を上回るようになったから個人事業主から法人化しようと考えているらしい。実際に会社を辞めるかどうかはまだこれから検討するのかな？本業をやりながら最大4つか5つの副業をまわしてたというから驚き。そんなこと物理的に可能なの？と思ったら開発は人を雇ってマネジメントだけやったりしていたらしい。おそらく4人ぐらい開発者を雇っているという雰囲気だったけど、それでも本業をやりながら4つもマネジメントをするのは相当に大変だと思う。十分にその同僚の能力を認めているつもりだったけれど、それ以上の忍耐や集中力をもっていて、もしかしたら過小評価していたのかもしれない。1つの会社内でも3つ以上プロジェクトを兼任して成果を出しているマネージャーなんか私は見たことない。それを本業と副業と寄せ集めの開発者で実現しているのは類稀な能力だと思う。本人も睡眠時間削って働いてやり過ぎたとは言っていたが。法人登記、税金、節税、働き方とか、ざっくばらんに私が起業してやってきた3年間のお話しをした。なにかしら役に立って活躍されるといいな。&lt;/p></content></item><item><title>日本酒を嗜む</title><link>/diary/posts/2022/1225/</link><pubDate>Sun, 25 Dec 2022 10:46:57 +0900</pubDate><guid>/diary/posts/2022/1225/</guid><description>22時から寝て2時に起きて5時に起きて7時に起きた。久しぶりに吐き気もなくよく眠れた。
雑多な整理 本当はやりかけて途中の svelte 入門をしようとオフィスに来たものの、課題管理システムの整理や週明け2日間のお仕事の準備などをやっていた。あと毎年そうなんだけど、うちの会社は交際費として年間で30万円の予算を計上している。現時点で7万円しか使っていない。放っておくと私は交際費を使わない。交際費を使わないというのは情報収集を疎かにしていると同義である。これから3ヶ月かけて交際費を使いつつオンラインで雑談してくれる人を探していく。この調整作業そのものにも時間と意識をとられる。人とやり取りして予定を調整する作業だけは効率化できない。過去に話したことのある人が徐々に増えていくと、また毎年のアレやりましょうと言えるのでコミュニケーションコストは下がっていく。一方で新しい人とも話していかないと視野が狭くなっていくのでバランスをとっていく必要がある。
忘年会のお酒選び カフーツさんの忘年会 へ参加するときにもっていく飲みものを探してきた。ビールは用意してあるということなので灘五郷の日本酒をもっていくことにした。以前 灘五郷酒所 へ行ったときに飲んだ琥泉というお酒がおいしかったからそれを購入しようと調べていたら、同じ 泉酒造 では仙介という有名なお酒もある。実は2019年に近所の公園で灘の酒フェスティバルをやっていてそのときに仙介を飲んでおいしかったと記憶に残っていた。仙介は山田錦を100%使っていて琥泉が国産米となっていてこの素材の差が主な価格差 (720mlで2,050円と1,500円) になっていると推測される。イベントにもっていくならブランディング的に上等な方がよいかなと考えて仙介を忘年会に、琥泉を実家へもって帰ることにした。それぞれ次のお酒を購入した。どちらも生酒を選んだ。
琥泉 純米吟醸おりがらみ無濾過生酒原酒 仙介 純米大吟醸無濾過生酒原酒 おりがらみ とは、にごり酒の一種とみなすこともできるそうで「おり」と呼ばれる、米のかけらや酵母などの細かな固形物を少し残した日本酒を言うらしい。それによる風味の違いを楽しむといったものにみえる。たまたま灘五郷酒所で飲んだのがおりがらみだったので同じものを選択してみた。
初夏に 開発合宿 (ワーケーション) へ行く前のレンタカー運転リハーサル で 白鶴酒造資料館 へ行ったときにお土産に Hakutsuru Blanc を購入した。そのときにいくらか飲んでその後ずっと冷蔵庫に残っていたお酒を飲み終えた。灘五郷を学ぶよい機会だと思うのでこれから飲んだ灘五郷の酒造のお酒を課題管理してそれぞれの特徴や所感を溜めていこうと思う。
エピック名は BE KOBE にした。なんかうまくはまった。</description><content>&lt;p>22時から寝て2時に起きて5時に起きて7時に起きた。久しぶりに吐き気もなくよく眠れた。&lt;/p>
&lt;h2 id="雑多な整理">雑多な整理&lt;/h2>
&lt;p>本当はやりかけて途中の svelte 入門をしようとオフィスに来たものの、課題管理システムの整理や週明け2日間のお仕事の準備などをやっていた。あと毎年そうなんだけど、うちの会社は交際費として年間で30万円の予算を計上している。現時点で7万円しか使っていない。放っておくと私は交際費を使わない。交際費を使わないというのは情報収集を疎かにしていると同義である。これから3ヶ月かけて交際費を使いつつオンラインで雑談してくれる人を探していく。この調整作業そのものにも時間と意識をとられる。人とやり取りして予定を調整する作業だけは効率化できない。過去に話したことのある人が徐々に増えていくと、また毎年のアレやりましょうと言えるのでコミュニケーションコストは下がっていく。一方で新しい人とも話していかないと視野が狭くなっていくのでバランスをとっていく必要がある。&lt;/p>
&lt;h2 id="忘年会のお酒選び">忘年会のお酒選び&lt;/h2>
&lt;p>&lt;a href="https://fb.me/e/47tgUIW7N">カフーツさんの忘年会&lt;/a> へ参加するときにもっていく飲みものを探してきた。ビールは用意してあるということなので灘五郷の日本酒をもっていくことにした。以前 &lt;a href="/diary/diary/posts/2022/0707/#灘五郷酒所イベント">灘五郷酒所&lt;/a> へ行ったときに飲んだ琥泉というお酒がおいしかったからそれを購入しようと調べていたら、同じ &lt;a href="https://izumisyuzou.co.jp/">泉酒造&lt;/a> では仙介という有名なお酒もある。実は2019年に近所の公園で灘の酒フェスティバルをやっていてそのときに仙介を飲んでおいしかったと記憶に残っていた。仙介は山田錦を100%使っていて琥泉が国産米となっていてこの素材の差が主な価格差 (720mlで2,050円と1,500円) になっていると推測される。イベントにもっていくならブランディング的に上等な方がよいかなと考えて仙介を忘年会に、琥泉を実家へもって帰ることにした。それぞれ次のお酒を購入した。どちらも生酒を選んだ。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://izumisyuzou.co.jp/publics/index/66/">琥泉 純米吟醸おりがらみ無濾過生酒原酒&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://izumisyuzou.co.jp/publics/index/46/">仙介 純米大吟醸無濾過生酒原酒&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://tanoshiiosake.jp/10049">おりがらみ&lt;/a> とは、にごり酒の一種とみなすこともできるそうで「おり」と呼ばれる、米のかけらや酵母などの細かな固形物を少し残した日本酒を言うらしい。それによる風味の違いを楽しむといったものにみえる。たまたま灘五郷酒所で飲んだのがおりがらみだったので同じものを選択してみた。&lt;/p>
&lt;p>初夏に &lt;a href="/diary/diary/posts/2022/0529/#レンタカーで運転の練習">開発合宿 (ワーケーション) へ行く前のレンタカー運転リハーサル&lt;/a> で &lt;a href="https://www.hakutsuru.co.jp/community/shiryo/">白鶴酒造資料館&lt;/a> へ行ったときにお土産に &lt;a href="https://www.hakutsuru.co.jp/blanc/">Hakutsuru Blanc&lt;/a> を購入した。そのときにいくらか飲んでその後ずっと冷蔵庫に残っていたお酒を飲み終えた。灘五郷を学ぶよい機会だと思うのでこれから飲んだ灘五郷の酒造のお酒を課題管理してそれぞれの特徴や所感を溜めていこうと思う。&lt;/p>
&lt;p>エピック名は &lt;a href="https://bekobe.jp/">BE KOBE&lt;/a> にした。なんかうまくはまった。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2022/1225_bekobe.png"/>
&lt;/figure></content></item><item><title>課題管理の話題で発散</title><link>/diary/posts/2022/1221/</link><pubDate>Wed, 21 Dec 2022 08:10:53 +0900</pubDate><guid>/diary/posts/2022/1221/</guid><description>0時に寝て何度か起きて7時に起きた。だいぶ眠れるようになってきた。
コワーキングのオンラインイベント 月例のカフーツさんのオンラインイベントに参加した。先月の所感はここ 。来年やりたいことというテーマだった。来年の抱負というほど堅苦しいわけではないが、それぞれの参加者別にやりたいことをわーっと話すようなイベントだった。私は課題管理について軽く話し始めたらいとうさんが深堀りしてくれて、参加者からも共感を得られてそれなりに盛り上がった。自分が参加したイベントの録画を見返すことを私は滅多にしないのだけど、今回は話した内容を整理するために見返した。
課題管理という分野の体系化、ならびにプラクティスの整備をしたい ざっくり話した内容はこんな感じ。
課題管理を追求していくにはメンバーに強制・指示できるだけの権限が必要となる
ボトムアップで課題管理を実践するのは難しい 課題管理の実践のために人の運用を変えないといけない場面が出てくる 私は it 業界のプロダクト開発における課題管理のノウハウしかない
複数の組織・チームで働く過程で課題管理ができていない、または課題管理システムを使いこなせていない開発者やチームがたくさんあることを知ったのが背景になる 本質的には、課題管理自体は業界・業種を問わない分野だと思うので広く応用できるプラクティスとして体系化したい
課題管理とは、ハウツー本を読んだり、ツールを導入すれば解決する類のものではない
それぞれの目的のためにメンバーが日々の業務において運用していく必要がある メンバー全員が運用しなかったら効果もその度合いに応じて減っていく 権限が必要というのは、やらない人に対してある程度はやってもらう必要があるから 課題管理をうまくやろうとすると、組織論や組織の文化、マネジメントの分野とも密接に紐づく
課題管理と密接な分野の1つに情報共有がある
情報の一元管理は組織において重要なのに疎かになっている組織やチームは多い 一元管理できると情報共有のためのコミュニケーションコストを削減できる このためには組織レベルで使うツールや情報共有のやり方を統一しないといけない 自分の好きなツールを使って自由に情報共有するといったものをいくらか制限する必要がある 課題管理において重要なことの1つに文章を書けない人たちが一定数いることを受け入れないといけない
情報共有の文脈で言えば、テキスト化は検索できるという大きなメリットをもたらす 一定数の文章を書けない人たちをどう対応するかは難しい課題の1つ 文章を書くための練習をすればよいのではないか 新人やキャリアの浅いメンバーには有効となる 文章を書かなくても情報共有できる手段と組み合わせるとよいのではないか it 業界ではスクラム開発という開発方法論が流行っている 大雑把に言えば、対話を重視して会議をたくさん設けることで情報共有を密にする開発方法論と言える 文章を書けない人であっても話せない人はほぼいない 対話を促されれば話すことで情報共有できる デメリットとしてはコミュニケーションコストがとても高い このコミュニケーションコストは開発における生産性とトレードオフになる 課題管理において重要なことのもう1つに文章を読めない人たちも一定数いる
日本人の1/3は日本語が読めない？PIAAC (国際成人力調査) の調査結果 文章を書いてメンバーに読んでおいてと伝えても1/3は理解できていない可能性を示唆している 情報共有において文章を書いても伝わっていない可能性を考慮して対策する必要がある 仮に情報共有できていない状態でメンバー「わからない」と言えることはすごく重要になる
この文脈で心理的安全性が重要になる 「わからない」と声をあげてくれることで文章や伝え方を改善していける可能性がある 実は一昔前と比べて、いまの方がメンバー間の情報共有を疎遠にしている背景がある
いまは情報共有にクラウドサービスを使う組織が増えている 基本的にクラウドサービスはユーザー単位/従量制で課金される あまりサービスを使わないユーザーアカウントを減らすことでコストダウンできるインセンティブが働く 情報共有という視点からコストダウンしてはいけないコストを削ってしまっている 例) 課題管理システムのアカウントは開発者しかもっていないとか 中小規模の会社ほどクラウドサービスを多用するのでこの傾向がある 昔はオンプレで社内システムを管理していたため、システムのユーザーを減らすインセンティブはなかった 要否に関わらず、社員は全員アカウントをもっていることが当たり前だった 念のため、クラウドサービスのアカウントをメンバー全員がもつことは目的ではない アカウントをもった上でそのメンバーがそのサービスを使うように運用を変えていく必要がある システム投資とメンバーの運用を変える取り組みがセットでないとうまくいかない コワーキングスペースは課題が持ち込まれるところではある
課題管理のプラクティスが応用できるなら使いたい 課題をどう整理して、優先順位を付け、情報共有していくかは難しい 様々なメンバー、様々なツール、様々な課題を同じツールで一元管理することは非常に難しい どうやって情報の一元管理をするかはコワーキングスペースの運営において難しい課題でもある 複数のサービスを連携するサービスなどを使って一元管理する方法もある 海外ではコワーキングスペース向けの sns も含めたプラットフォームサービスなども出始めている 日本ではまだまだあまりシステム化されておらず、導入もされていないのではないか コワーキングの分野では女性がとても活躍しているように、いとうさんから見えている</description><content>&lt;p>0時に寝て何度か起きて7時に起きた。だいぶ眠れるようになってきた。&lt;/p>
&lt;h2 id="コワーキングのオンラインイベント">コワーキングのオンラインイベント&lt;/h2>
&lt;p>月例のカフーツさんのオンラインイベントに参加した。&lt;a href="/diary/diary/posts/2022/1116/#コワーキングのオンラインイベント">先月の所感はここ&lt;/a> 。来年やりたいことというテーマだった。来年の抱負というほど堅苦しいわけではないが、それぞれの参加者別にやりたいことをわーっと話すようなイベントだった。私は課題管理について軽く話し始めたらいとうさんが深堀りしてくれて、参加者からも共感を得られてそれなりに盛り上がった。自分が参加したイベントの録画を見返すことを私は滅多にしないのだけど、今回は話した内容を整理するために見返した。&lt;/p>
&lt;h3 id="課題管理という分野の体系化ならびにプラクティスの整備をしたい">課題管理という分野の体系化、ならびにプラクティスの整備をしたい&lt;/h3>
&lt;p>ざっくり話した内容はこんな感じ。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>課題管理を追求していくにはメンバーに強制・指示できるだけの権限が必要となる&lt;/p>
&lt;ul>
&lt;li>ボトムアップで課題管理を実践するのは難しい&lt;/li>
&lt;li>課題管理の実践のために人の運用を変えないといけない場面が出てくる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>私は it 業界のプロダクト開発における課題管理のノウハウしかない&lt;/p>
&lt;ul>
&lt;li>複数の組織・チームで働く過程で課題管理ができていない、または課題管理システムを使いこなせていない開発者やチームがたくさんあることを知ったのが背景になる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>本質的には、課題管理自体は業界・業種を問わない分野だと思うので広く応用できるプラクティスとして体系化したい&lt;/p>
&lt;/li>
&lt;li>
&lt;p>課題管理とは、ハウツー本を読んだり、ツールを導入すれば解決する類のものではない&lt;/p>
&lt;ul>
&lt;li>それぞれの目的のためにメンバーが日々の業務において運用していく必要がある&lt;/li>
&lt;li>メンバー全員が運用しなかったら効果もその度合いに応じて減っていく
&lt;ul>
&lt;li>権限が必要というのは、やらない人に対してある程度はやってもらう必要があるから&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>課題管理をうまくやろうとすると、組織論や組織の文化、マネジメントの分野とも密接に紐づく&lt;/p>
&lt;/li>
&lt;li>
&lt;p>課題管理と密接な分野の1つに情報共有がある&lt;/p>
&lt;ul>
&lt;li>情報の一元管理は組織において重要なのに疎かになっている組織やチームは多い
&lt;ul>
&lt;li>一元管理できると情報共有のためのコミュニケーションコストを削減できる&lt;/li>
&lt;li>このためには組織レベルで使うツールや情報共有のやり方を統一しないといけない
&lt;ul>
&lt;li>自分の好きなツールを使って自由に情報共有するといったものをいくらか制限する必要がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>課題管理において重要なことの1つに文章を書けない人たちが一定数いることを受け入れないといけない&lt;/p>
&lt;ul>
&lt;li>情報共有の文脈で言えば、テキスト化は検索できるという大きなメリットをもたらす&lt;/li>
&lt;li>一定数の文章を書けない人たちをどう対応するかは難しい課題の1つ
&lt;ul>
&lt;li>文章を書くための練習をすればよいのではないか
&lt;ul>
&lt;li>新人やキャリアの浅いメンバーには有効となる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文章を書かなくても情報共有できる手段と組み合わせるとよいのではないか
&lt;ul>
&lt;li>it 業界ではスクラム開発という開発方法論が流行っている
&lt;ul>
&lt;li>大雑把に言えば、対話を重視して会議をたくさん設けることで情報共有を密にする開発方法論と言える
&lt;ul>
&lt;li>文章を書けない人であっても話せない人はほぼいない&lt;/li>
&lt;li>対話を促されれば話すことで情報共有できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>デメリットとしてはコミュニケーションコストがとても高い
&lt;ul>
&lt;li>このコミュニケーションコストは開発における生産性とトレードオフになる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>課題管理において重要なことのもう1つに文章を読めない人たちも一定数いる&lt;/p>
&lt;ul>
&lt;li>日本人の1/3は日本語が読めない？&lt;a href="https://research.lightworks.co.jp/piaac">PIAAC (国際成人力調査) の調査結果&lt;/a>&lt;/li>
&lt;li>文章を書いてメンバーに読んでおいてと伝えても1/3は理解できていない可能性を示唆している
&lt;ul>
&lt;li>情報共有において文章を書いても伝わっていない可能性を考慮して対策する必要がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>仮に情報共有できていない状態でメンバー「わからない」と言えることはすごく重要になる&lt;/p>
&lt;ul>
&lt;li>この文脈で心理的安全性が重要になる&lt;/li>
&lt;li>「わからない」と声をあげてくれることで文章や伝え方を改善していける可能性がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>実は一昔前と比べて、いまの方がメンバー間の情報共有を疎遠にしている背景がある&lt;/p>
&lt;ul>
&lt;li>いまは情報共有にクラウドサービスを使う組織が増えている
&lt;ul>
&lt;li>基本的にクラウドサービスはユーザー単位/従量制で課金される
&lt;ul>
&lt;li>あまりサービスを使わないユーザーアカウントを減らすことでコストダウンできるインセンティブが働く
&lt;ul>
&lt;li>情報共有という視点からコストダウンしてはいけないコストを削ってしまっている
&lt;ul>
&lt;li>例) 課題管理システムのアカウントは開発者しかもっていないとか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>中小規模の会社ほどクラウドサービスを多用するのでこの傾向がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>昔はオンプレで社内システムを管理していたため、システムのユーザーを減らすインセンティブはなかった
&lt;ul>
&lt;li>要否に関わらず、社員は全員アカウントをもっていることが当たり前だった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>念のため、クラウドサービスのアカウントをメンバー全員がもつことは目的ではない
&lt;ul>
&lt;li>アカウントをもった上でそのメンバーがそのサービスを使うように運用を変えていく必要がある&lt;/li>
&lt;li>システム投資とメンバーの運用を変える取り組みがセットでないとうまくいかない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>コワーキングスペースは課題が持ち込まれるところではある&lt;/p>
&lt;ul>
&lt;li>課題管理のプラクティスが応用できるなら使いたい&lt;/li>
&lt;li>課題をどう整理して、優先順位を付け、情報共有していくかは難しい&lt;/li>
&lt;li>様々なメンバー、様々なツール、様々な課題を同じツールで一元管理することは非常に難しい
&lt;ul>
&lt;li>どうやって情報の一元管理をするかはコワーキングスペースの運営において難しい課題でもある
&lt;ul>
&lt;li>複数のサービスを連携するサービスなどを使って一元管理する方法もある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>海外ではコワーキングスペース向けの sns も含めたプラットフォームサービスなども出始めている
&lt;ul>
&lt;li>日本ではまだまだあまりシステム化されておらず、導入もされていないのではないか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>コワーキングの分野では女性がとても活躍しているように、いとうさんから見えている&lt;/p>
&lt;ul>
&lt;li>今後もこの分野を盛り上げていくのは女性ではないか？
&lt;ul>
&lt;li>男性は変なプライドが邪魔して行動力を抑制してしまうところがあるのではないか&lt;/li>
&lt;li>女性は損得勘定から行動力を発揮しているのではないか
&lt;ul>
&lt;li>男性の方が感情的な動機でコワーキングをしているようにみえる？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>コワーキングに課題管理の理論やシステム化はあってよいのではないかと、いとうさんはみている&lt;/p>
&lt;/li>
&lt;/ul></content></item><item><title>1年間に渡ったお手伝いの最終日</title><link>/diary/posts/2022/1028/</link><pubDate>Fri, 28 Oct 2022 08:14:44 +0900</pubDate><guid>/diary/posts/2022/1028/</guid><description>2時に寝て7時に起きた。昨日は23時ぐらいまで送別会やっててまた寝るのが遅くなった。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。
オフィス引っ越し計画 の共有 SECI モデルのワークショップ の共有 昨日の送別会で、システムはいくらでも社員を監視して効率や最適化を要求できるけれど、そんな働き方は嫌だろうし、幸せじゃないだろうと私が話した。それに対して次のような反論がきた。
そんなことはなく誰か (何か) に管理されたいと考える人間の方が多数派だ
私はまったく同意しないのだけど、はらさんにも聞いてみた。リスクの多寡や有無ではないかと。リスクを取りたくない≒管理されたいと考える人が多いのではないかと答えてくれた。上司の言うことさえ聞いていれば自分は何も責任を負わなくてよいと考える人たちが一定数いることは私も理解できるが、そんな卑屈な人たちが多数派になるのかな？とやはり懐疑的に思えた。
プロジェクトの最終日 スプリントレビュー、送別会、今日のデイリースクラムと、今週は「最後なんで」の挨拶を3回ぐらいした。毎回話すことを用意しているわけでもなかったので即興で話すわけだけど、こういうところを私はもう少し準備してちゃんとした方がよいのかもしれないと反省もした。自己肯定感のセミナー でも書いたが、私は他人との比較をやめてから自分の尺度でしか生きていない。このプロジェクトで私が為したことはもちろん私の全力ではあるが、私がもてるスキルや知識のすべてを提供できたわけではない。それは組織の壁、業務の壁、伝えるスキルの稚拙さなど、様々な要因がある。一切の他責はなく、いまの成果物はすべて私の実力を反映しているものだけれども、その成果に自分自身では満足していない。10段階で言えば3ぐらいの成果だろう。自分では低い評価を下しているにも関わらず、他人からの賞賛を受け入れるのは難しい。辞めるときなので社交辞令もある。それも考慮して感謝の言葉をもらうときに、自分はそんな感謝を伝えられることをしていないというギャップに違和感を覚える。これは何を為しても満足できない、私が抱えている心の闇かもしれない。
それはともかくプロジェクトメンバーが オンライン寄せ書き にメッセージを書いて送ってくれた。オンラインの寄せ書きは無料だけど1年経つと削除されてしまう。メンバーが私のためにわざわざ時間をとって書いてくれた寄せ書きが消えてしまうというのはみんなに申し訳ない気持ちになって、プリントしてお届けを購入 (2,948円) することにした。情に訴えるビジネスモデルは抗いがたい。せっかくなので内容を秘匿して会社の宣伝にも使うかなぁ。
葬送のフリーレン で勇者ヒンメルは依頼人とあっさり別れるといったエピソードが出てくる。
旅をしてる以上また会うことだってあるだろう、また会った時恥ずかしいからね。
依頼人から報酬を受け取って貸し借りなし。それでお終い。この感覚は私にもあって、いまの時代、一緒に働いた同僚と離れても転職やなにかの縁でまた一緒に働くことは多々ある。あまり仰々しくしたくないと私も思う。送る側も良かれと思って気遣いしてくれている。それもわかるのでこういう価値観を伝えるのはなかなか難しい。</description><content>&lt;p>2時に寝て7時に起きた。昨日は23時ぐらいまで送別会やっててまた寝るのが遅くなった。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="/diary/diary/posts/2022/1025/#オフィスの引っ越し計画">オフィス引っ越し計画&lt;/a> の共有&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2022/1005/#SECI-モデルのワークショップ">SECI モデルのワークショップ&lt;/a> の共有&lt;/li>
&lt;/ul>
&lt;p>昨日の送別会で、システムはいくらでも社員を監視して効率や最適化を要求できるけれど、そんな働き方は嫌だろうし、幸せじゃないだろうと私が話した。それに対して次のような反論がきた。&lt;/p>
&lt;blockquote>
&lt;p>そんなことはなく誰か (何か) に管理されたいと考える人間の方が多数派だ&lt;/p>
&lt;/blockquote>
&lt;p>私はまったく同意しないのだけど、はらさんにも聞いてみた。リスクの多寡や有無ではないかと。リスクを取りたくない≒管理されたいと考える人が多いのではないかと答えてくれた。上司の言うことさえ聞いていれば自分は何も責任を負わなくてよいと考える人たちが一定数いることは私も理解できるが、そんな卑屈な人たちが多数派になるのかな？とやはり懐疑的に思えた。&lt;/p>
&lt;h2 id="プロジェクトの最終日">プロジェクトの最終日&lt;/h2>
&lt;p>スプリントレビュー、送別会、今日のデイリースクラムと、今週は「最後なんで」の挨拶を3回ぐらいした。毎回話すことを用意しているわけでもなかったので即興で話すわけだけど、こういうところを私はもう少し準備してちゃんとした方がよいのかもしれないと反省もした。&lt;a href="/diary/diary/posts/2022/1019/#上司道-リーダーはレジリエンスを高める自己肯定感を学ぼう">自己肯定感のセミナー&lt;/a> でも書いたが、私は他人との比較をやめてから自分の尺度でしか生きていない。このプロジェクトで私が為したことはもちろん私の全力ではあるが、私がもてるスキルや知識のすべてを提供できたわけではない。それは組織の壁、業務の壁、伝えるスキルの稚拙さなど、様々な要因がある。一切の他責はなく、いまの成果物はすべて私の実力を反映しているものだけれども、その成果に自分自身では満足していない。10段階で言えば3ぐらいの成果だろう。自分では低い評価を下しているにも関わらず、他人からの賞賛を受け入れるのは難しい。辞めるときなので社交辞令もある。それも考慮して感謝の言葉をもらうときに、自分はそんな感謝を伝えられることをしていないというギャップに違和感を覚える。これは何を為しても満足できない、私が抱えている心の闇かもしれない。&lt;/p>
&lt;p>それはともかくプロジェクトメンバーが &lt;a href="https://www.yosetti.com/">オンライン寄せ書き&lt;/a> にメッセージを書いて送ってくれた。オンラインの寄せ書きは無料だけど1年経つと削除されてしまう。メンバーが私のためにわざわざ時間をとって書いてくれた寄せ書きが消えてしまうというのはみんなに申し訳ない気持ちになって、プリントしてお届けを購入 (2,948円) することにした。情に訴えるビジネスモデルは抗いがたい。せっかくなので内容を秘匿して会社の宣伝にも使うかなぁ。&lt;/p>
&lt;p>&lt;a href="/diary/diary/posts/2022/0917/#葬送のフリーレン">葬送のフリーレン&lt;/a> で勇者ヒンメルは依頼人とあっさり別れるといったエピソードが出てくる。&lt;/p>
&lt;blockquote>
&lt;p>旅をしてる以上また会うことだってあるだろう、また会った時恥ずかしいからね。&lt;/p>
&lt;/blockquote>
&lt;p>依頼人から報酬を受け取って貸し借りなし。それでお終い。この感覚は私にもあって、いまの時代、一緒に働いた同僚と離れても転職やなにかの縁でまた一緒に働くことは多々ある。あまり仰々しくしたくないと私も思う。送る側も良かれと思って気遣いしてくれている。それもわかるのでこういう価値観を伝えるのはなかなか難しい。&lt;/p></content></item><item><title>ふりかえりとむきなおり</title><link>/diary/posts/2022/0802/</link><pubDate>Tue, 02 Aug 2022 08:49:17 +0900</pubDate><guid>/diary/posts/2022/0802/</guid><description>23時に寝て何度か起きながら7時に起きた。なんか体調が悪い。
ふりかえりとむきなおり 毎週火曜日はふりかえりの日。今週もスプリントゴールは未達に終わったわけだけど、未達が普通で稀に達成できるのが常態化しつつある。悪く言えば ゾンビスクラム 状態と言えるのかもしれない。サービスインのゴタゴタも解消したので PO からもツッコミがあってスプリントゴール達成できない問題が再燃した。私からみたらこんなところか。
スプリント初期は前スプリントの残タスクをやるのが常態化している メンバーにやる気と実力がない コミュニケーションコストが高くてオーバーヘッドが大きい (スクラムイベント、確認や待ち時間など) フルタイムで働いていないメンバーがいる (ちょくちょくメンバーも休暇をとる) スプリントが1週間と短過ぎる その議論をしている中でスクラムマスターが むきなおり をしようといった結論になった。私は用語を知らなかったので調べてみた。
この3点を満たしながら、事業をふりかえって、行きたい方向へとむきなおることが今回の合宿の狙いでした。ただふりかえるだけではなく、あるべき姿との差から、今後の方向性を決めることを、特に「むきなおり」と名前付けしています。ふりかえり、むきなおる。今回の合宿はギルドワークスの今後の方針と向き合うための機会としました。
事業をふりかえって、行きたい方向へむきなおる
ふりかえりの結果から方向性を変えることを呼ぶらしい。私はまったく理解できていないのだけど、普通のふりかえりをして改善するときは何と呼ぶのだろうか。ただの言葉遊びじゃない？という気もする。また後日、そのためのイベントをするそうなのでそのときに理解を深めてみる。</description><content>&lt;p>23時に寝て何度か起きながら7時に起きた。なんか体調が悪い。&lt;/p>
&lt;h2 id="ふりかえりとむきなおり">ふりかえりとむきなおり&lt;/h2>
&lt;p>毎週火曜日はふりかえりの日。今週もスプリントゴールは未達に終わったわけだけど、未達が普通で稀に達成できるのが常態化しつつある。悪く言えば &lt;a href="/diary/diary/posts/2022/0708/#ゾンビスクラム">ゾンビスクラム&lt;/a> 状態と言えるのかもしれない。サービスインのゴタゴタも解消したので PO からもツッコミがあってスプリントゴール達成できない問題が再燃した。私からみたらこんなところか。&lt;/p>
&lt;ul>
&lt;li>スプリント初期は前スプリントの残タスクをやるのが常態化している&lt;/li>
&lt;li>メンバーにやる気と実力がない&lt;/li>
&lt;li>コミュニケーションコストが高くてオーバーヘッドが大きい (スクラムイベント、確認や待ち時間など)&lt;/li>
&lt;li>フルタイムで働いていないメンバーがいる (ちょくちょくメンバーも休暇をとる)&lt;/li>
&lt;li>スプリントが1週間と短過ぎる&lt;/li>
&lt;/ul>
&lt;p>その議論をしている中でスクラムマスターが &lt;strong>むきなおり&lt;/strong> をしようといった結論になった。私は用語を知らなかったので調べてみた。&lt;/p>
&lt;blockquote>
&lt;p>この3点を満たしながら、事業をふりかえって、行きたい方向へとむきなおることが今回の合宿の狙いでした。ただふりかえるだけではなく、あるべき姿との差から、今後の方向性を決めることを、特に「むきなおり」と名前付けしています。ふりかえり、むきなおる。今回の合宿はギルドワークスの今後の方針と向き合うための機会としました。&lt;/p>
&lt;p>&lt;a href="https://devtab.jp/entry/internal/18">事業をふりかえって、行きたい方向へむきなおる&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>ふりかえりの結果から方向性を変えることを呼ぶらしい。私はまったく理解できていないのだけど、普通のふりかえりをして改善するときは何と呼ぶのだろうか。ただの言葉遊びじゃない？という気もする。また後日、そのためのイベントをするそうなのでそのときに理解を深めてみる。&lt;/p></content></item><item><title>設計談義は楽しい</title><link>/diary/posts/2022/0615/</link><pubDate>Wed, 15 Jun 2022 10:58:36 +0900</pubDate><guid>/diary/posts/2022/0615/</guid><description>0時に寝て4時半に起きてだらだらして2度寝して8時に起きた。
jjug のセッションの紹介 jjug の公式アカウントがランダムにセッションのページを紹介している。私のセッションのリンクが今日ツィートされた。この日記を書いている時点で3つの「いいね」が付いている (1つは私なので除く) 。大して人気の出るような内容ではないし、なにかを期待しているわけでもないけど、誰からも関心を持たれなかったらそれはそれで発表者として寂しいなという気持ちもあって、ついつい見てしまった。ほんの2-3人でもいいから当日は発表を聴いてくれると嬉しい。そして、その流れで質問をしてくれればと考えている。もし当日、誰も聴いてくれなかったらスタッフの人が質問してくれるんやろか？
JJUG CCC 2022 Spring 6月19日開催
[Track C] 10:25- #jjug_ccc_c#jjug_ccc
Java で作るカスタム GitHub Actionshttps://t.co/cwpuR7dPmJ
&amp;mdash; JJUG (@JJUG) June 15, 2022 ブログ記事のレビュー 朝一で昨日書いた記事を読み返しながら推敲した。やっぱり一晩寝ると、文章の粗が目立ってみえて細かい表現をあちこち直していた。その後に身近な人たちに記事のレビューをお願いして、概ね問題なさそうなので会社ブログの担当者にもレビュー依頼した。その返事はまだ返ってきていない。
設計ミーティング 先週から始めた 設計ミーティング の2回目。時間は2時間も抑えられていて話題がなければ解散するといったやり方。今日もなんだかんだで2時間丸々話していた。うちらの開発チームは開発者で共有すべき開発情報や設計の考え方などの情報共有が不足しているんだなと、多くの時間を割いても話題が尽きないことからも実感した。私は設計を練るのが好きなのでそれ自体も楽しい。スクラムイベントで会議の時間が多い上にこのミーティングは追加で実務の時間を奪うという懸念が大いにある。しかし、2-3ヶ月やったらアプリケーションの設計や品質に何かしらよい影響を与えそうな雰囲気はしている。代わりに他のスクラムイベントを削ることはできないだろうか。</description><content>&lt;p>0時に寝て4時半に起きてだらだらして2度寝して8時に起きた。&lt;/p>
&lt;h2 id="jjug-のセッションの紹介">jjug のセッションの紹介&lt;/h2>
&lt;p>jjug の公式アカウントがランダムにセッションのページを紹介している。私のセッションのリンクが今日ツィートされた。この日記を書いている時点で3つの「いいね」が付いている (1つは私なので除く) 。大して人気の出るような内容ではないし、なにかを期待しているわけでもないけど、誰からも関心を持たれなかったらそれはそれで発表者として寂しいなという気持ちもあって、ついつい見てしまった。ほんの2-3人でもいいから当日は発表を聴いてくれると嬉しい。そして、その流れで質問をしてくれればと考えている。もし当日、誰も聴いてくれなかったらスタッフの人が質問してくれるんやろか？&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">JJUG CCC 2022 Spring 6月19日開催&lt;br>[Track C] 10:25- &lt;a href="https://twitter.com/hashtag/jjug_ccc_c?src=hash&amp;amp;ref_src=twsrc%5Etfw">#jjug_ccc_c&lt;/a>&lt;a href="https://twitter.com/hashtag/jjug_ccc?src=hash&amp;amp;ref_src=twsrc%5Etfw">#jjug_ccc&lt;/a>&lt;br>Java で作るカスタム GitHub Actions&lt;a href="https://t.co/cwpuR7dPmJ">https://t.co/cwpuR7dPmJ&lt;/a>&lt;/p>&amp;mdash; JJUG (@JJUG) &lt;a href="https://twitter.com/JJUG/status/1536868086938099715?ref_src=twsrc%5Etfw">June 15, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="ブログ記事のレビュー">ブログ記事のレビュー&lt;/h2>
&lt;p>朝一で昨日書いた記事を読み返しながら推敲した。やっぱり一晩寝ると、文章の粗が目立ってみえて細かい表現をあちこち直していた。その後に身近な人たちに記事のレビューをお願いして、概ね問題なさそうなので会社ブログの担当者にもレビュー依頼した。その返事はまだ返ってきていない。&lt;/p>
&lt;h2 id="設計ミーティング">設計ミーティング&lt;/h2>
&lt;p>先週から始めた &lt;a href="/diary/diary/posts/2022/0608/#開発チームで設計の話し">設計ミーティング&lt;/a> の2回目。時間は2時間も抑えられていて話題がなければ解散するといったやり方。今日もなんだかんだで2時間丸々話していた。うちらの開発チームは開発者で共有すべき開発情報や設計の考え方などの情報共有が不足しているんだなと、多くの時間を割いても話題が尽きないことからも実感した。私は設計を練るのが好きなのでそれ自体も楽しい。スクラムイベントで会議の時間が多い上にこのミーティングは追加で実務の時間を奪うという懸念が大いにある。しかし、2-3ヶ月やったらアプリケーションの設計や品質に何かしらよい影響を与えそうな雰囲気はしている。代わりに他のスクラムイベントを削ることはできないだろうか。&lt;/p></content></item><item><title>主作用による副作用</title><link>/diary/posts/2022/0225/</link><pubDate>Fri, 25 Feb 2022 10:52:21 +0900</pubDate><guid>/diary/posts/2022/0225/</guid><description>0時に寝て4時半に起きた。6時から金朝ツメトギを聞きながら途中で寝てしまって7時過ぎに起きた。
コミュニケーションについての記事を書く 以前 コミュニケーションコストに考えたこと をベースに、3ヶ月フィードバック の一節としてお手伝い先の社内 wiki に書いた。コミュニケーション一般の話なので私の考えを伝えられるよう、社外秘の部分を削除してブログにまとめておくことにした。ちょっと書き始めたところ、また週末にでも時間があるときに少しずつ推敲したり、洗練させて自身の考えを整理していく。現状でも悪い内容ではないけれど、まだしっくり来ていないところもあって、そのもやもやも見直していきたい。
課題管理の特性 課題管理システムにチケットを作成すると fix しない限り、そのチケットは永遠に残り続ける。未着手の状態でずっと放置することもできるが、それは対応を先送りしているだけで完了するわけでもない。チケットの対応方法として wontfix という選択肢が非常に重要になる。問題があることはわかっていたとしても様々な理由で対応しないという判断はありえる。誰がどういう理由でその判断を下したかという背景や意図さえわかれば、仮に将来的にその問題が看過できない状態になったとしても、過去の判断から新たな対応方法を検討したり、その判断の是非をふりかえることができる。これはチケットを作らずに見てみぬふりをして将来同じことが起きるのとは全く異なる知見が積み重なるので非常に重要な意思決定であると私は考えている。
閑話休題。話しがズレた。ここで fix せずにずっと放置するメンバーもいたりする。様々な理由で課題管理に非協力的な姿勢をとるメンバーがいる。少なからずいる。そういう人を放置すると、真面目に課題管理をやっている人たちが腐ってしまうので、課題管理の専門家を自称する私としては看過できない状況と言える。最初のうちは非協力的なメンバーにお願いしてやってもらうわけだけど、やってくれない人はずっとやってくれない。それを言い続けるのも嫌になるので別の対応方法が求められる。私の経験則では若い人に非協力的なメンバーはほぼいない。いまの若い人は優秀なので上司や先輩のやり方をみて勝手にやる人もいるし、ちゃんと教えれば教えた通りにやってくれる。非協力的なメンバーは往々にしてそれなりの経験をもっている中堅以上の社会人に多い。実はお仕事をさぼっていてあまり作業していないとか、課題管理に馴染みがなければ、それまでの自分の仕事のやり方をアンラーニングできないという人もいるかもしれない。理由はともかく、お願いしてもやってくれない人のチケットが課題管理プロセスの中で浮いてみえてくる。他のメンバーが腐る前に対応しないといけない。私の経験則ではこれはすごく難しい問題であるし、非協力的なメンバーそれぞれの理由にあわせて対応する必要があるので工数もかかる。
課題管理をしたくないというメンバーの中には何らかの理由で自律的に働きたくないという人もいる。課題管理というプロセスにおいては、そういった人たちをあぶり出してしまうため、状況によってはとても難しい人間関係の問題へと発展してしまう。</description><content>&lt;p>0時に寝て4時半に起きた。6時から金朝ツメトギを聞きながら途中で寝てしまって7時過ぎに起きた。&lt;/p>
&lt;h2 id="コミュニケーションについての記事を書く">コミュニケーションについての記事を書く&lt;/h2>
&lt;p>以前 &lt;a href="/diary/diary/posts/2022/0107/#情報共有とコミュニケーションコスト">コミュニケーションコストに考えたこと&lt;/a> をベースに、&lt;a href="/diary/diary/posts/2022/0130/#3ヶ月フィードバック完了">3ヶ月フィードバック&lt;/a> の一節としてお手伝い先の社内 wiki に書いた。コミュニケーション一般の話なので私の考えを伝えられるよう、社外秘の部分を削除してブログにまとめておくことにした。ちょっと書き始めたところ、また週末にでも時間があるときに少しずつ推敲したり、洗練させて自身の考えを整理していく。現状でも悪い内容ではないけれど、まだしっくり来ていないところもあって、そのもやもやも見直していきたい。&lt;/p>
&lt;h2 id="課題管理の特性">課題管理の特性&lt;/h2>
&lt;p>課題管理システムにチケットを作成すると fix しない限り、そのチケットは永遠に残り続ける。未着手の状態でずっと放置することもできるが、それは対応を先送りしているだけで完了するわけでもない。チケットの対応方法として &lt;strong>wontfix&lt;/strong> という選択肢が非常に重要になる。問題があることはわかっていたとしても様々な理由で対応しないという判断はありえる。誰がどういう理由でその判断を下したかという背景や意図さえわかれば、仮に将来的にその問題が看過できない状態になったとしても、過去の判断から新たな対応方法を検討したり、その判断の是非をふりかえることができる。これはチケットを作らずに見てみぬふりをして将来同じことが起きるのとは全く異なる知見が積み重なるので非常に重要な意思決定であると私は考えている。&lt;/p>
&lt;p>閑話休題。話しがズレた。ここで fix せずにずっと放置するメンバーもいたりする。様々な理由で課題管理に非協力的な姿勢をとるメンバーがいる。少なからずいる。そういう人を放置すると、真面目に課題管理をやっている人たちが腐ってしまうので、課題管理の専門家を自称する私としては看過できない状況と言える。最初のうちは非協力的なメンバーにお願いしてやってもらうわけだけど、やってくれない人はずっとやってくれない。それを言い続けるのも嫌になるので別の対応方法が求められる。私の経験則では若い人に非協力的なメンバーはほぼいない。いまの若い人は優秀なので上司や先輩のやり方をみて勝手にやる人もいるし、ちゃんと教えれば教えた通りにやってくれる。非協力的なメンバーは往々にしてそれなりの経験をもっている中堅以上の社会人に多い。実はお仕事をさぼっていてあまり作業していないとか、課題管理に馴染みがなければ、それまでの自分の仕事のやり方をアンラーニングできないという人もいるかもしれない。理由はともかく、お願いしてもやってくれない人のチケットが課題管理プロセスの中で浮いてみえてくる。他のメンバーが腐る前に対応しないといけない。私の経験則ではこれはすごく難しい問題であるし、非協力的なメンバーそれぞれの理由にあわせて対応する必要があるので工数もかかる。&lt;/p>
&lt;p>課題管理をしたくないというメンバーの中には何らかの理由で自律的に働きたくないという人もいる。課題管理というプロセスにおいては、そういった人たちをあぶり出してしまうため、状況によってはとても難しい人間関係の問題へと発展してしまう。&lt;/p></content></item><item><title>祝日の勤怠</title><link>/diary/posts/2022/0221/</link><pubDate>Mon, 21 Feb 2022 08:36:31 +0900</pubDate><guid>/diary/posts/2022/0221/</guid><description>1時に寝て6時半に起きた。昨日は夕方に一旦帰ってきて仮眠したらまた作業しようと思っていたけど、なんかバテてそのままだらだらしてた。
カレンダー共有と祝日 お手伝い先の社員さんと開発メンバーとのお休みがあわない問題が気になるようになってきた。というのは、お手伝い先は基本的に祝日は営業日として扱われている。おそらくは祝日に働いたら手当がつくのか、代休を別の日にとっているようにみえる。祝日に働かずに休む社員もいる。祝日に休むという表現もおかしいが。業務委託の開発メンバーは原則として祝日は休んで普通の日に働く。ここで社員さんが祝日に働いて普通の日に代休をとると、休みが異なるのでコミュニケーションコストが高くなる。お互いが働いている時間が減ることでその時間に対する価値が高くなってしまうという話し。国が違わない限り、あまりそういう状況は発生しないので、休日をあわせることの重要性を再認識した。
さらに働き始めた頃から気になっている カレンダー共有の問題 がある。休みが異なる可能性が高いのにメンバーのカレンダーはばらばらなので、お休みするという報告をもらっていても日が経つと忘れてしまっていて、slack でメンションをしてしまう場合がある。金曜日に月曜日はお休みすると聞いていたけど、月曜日になったら忘れてたみたいな。お休みしている社員さんに普通にメンションして、普通にやり取りしていて、あとでお休みだったと気付いて申し訳なく思った。カレンダーを確認してお休みだとわかっていれば slack でメンションはしなかった。</description><content>&lt;p>1時に寝て6時半に起きた。昨日は夕方に一旦帰ってきて仮眠したらまた作業しようと思っていたけど、なんかバテてそのままだらだらしてた。&lt;/p>
&lt;h2 id="カレンダー共有と祝日">カレンダー共有と祝日&lt;/h2>
&lt;p>お手伝い先の社員さんと開発メンバーとのお休みがあわない問題が気になるようになってきた。というのは、お手伝い先は基本的に祝日は営業日として扱われている。おそらくは祝日に働いたら手当がつくのか、代休を別の日にとっているようにみえる。祝日に働かずに休む社員もいる。祝日に休むという表現もおかしいが。業務委託の開発メンバーは原則として祝日は休んで普通の日に働く。ここで社員さんが祝日に働いて普通の日に代休をとると、休みが異なるのでコミュニケーションコストが高くなる。お互いが働いている時間が減ることでその時間に対する価値が高くなってしまうという話し。国が違わない限り、あまりそういう状況は発生しないので、休日をあわせることの重要性を再認識した。&lt;/p>
&lt;p>さらに働き始めた頃から気になっている &lt;a href="/diary/diary/posts/2022/0105/#ふりかえり">カレンダー共有の問題&lt;/a> がある。休みが異なる可能性が高いのにメンバーのカレンダーはばらばらなので、お休みするという報告をもらっていても日が経つと忘れてしまっていて、slack でメンションをしてしまう場合がある。金曜日に月曜日はお休みすると聞いていたけど、月曜日になったら忘れてたみたいな。お休みしている社員さんに普通にメンションして、普通にやり取りしていて、あとでお休みだったと気付いて申し訳なく思った。カレンダーを確認してお休みだとわかっていれば slack でメンションはしなかった。&lt;/p></content></item><item><title>雑談の効果</title><link>/diary/posts/2022/0124/</link><pubDate>Mon, 24 Jan 2022 21:12:54 +0900</pubDate><guid>/diary/posts/2022/0124/</guid><description>4時に寝て7時半に起きた。休日にだらだら過ごしてたので生活のリズムが狂ってしまった。
開発者同士の雑談 リリース作業前の検証のときにそれぞれの開発者が対応した課題の検証をやりながらハドルで雑談するのが定例になってきた。オンラインミーティングをするときに打ち合わせのリソースを作成する必要がないので、ハドルぐらい手軽にオンラインで繋げられれば雑談もしやすいということが少し理解できてきた。slack アプリは常に開いているので打ち合わせのために特定のアプリ(ブラウザで特定のページ)を開くという作業がないだけで心理的な障壁が下がる気がする。チャットツールに音声通話の機能がつくのは大きなメリットがあるなと、zoom や google meet と比較して思うようになってきた。定例会議やイベントなどは zoom や google meet でかまわない。だけど、「いまからリリースやるからみんな集まって」みたいなノリはハドルの方が集めやすいし、参加しやすい。フルリモートワークはオフィスと同じような雑談がやりにくいという課題の、技術的な課題はハドルが少しずつ解決していきそうな未来があるのかもしれない。
いままでのほほんと雑談していただけだったが、こういう機会にどんな会話をしているか、その会話からどういった情報共有が行われているか、会話することで人間関係や心理的安全性に影響を与えるかなど、雑談の意義や効果に注意を向けながらやってみるとなにかしら発見があるような気もしてきた。</description><content>&lt;p>4時に寝て7時半に起きた。休日にだらだら過ごしてたので生活のリズムが狂ってしまった。&lt;/p>
&lt;h2 id="開発者同士の雑談">開発者同士の雑談&lt;/h2>
&lt;p>リリース作業前の検証のときにそれぞれの開発者が対応した課題の検証をやりながらハドルで雑談するのが定例になってきた。オンラインミーティングをするときに打ち合わせのリソースを作成する必要がないので、ハドルぐらい手軽にオンラインで繋げられれば雑談もしやすいということが少し理解できてきた。slack アプリは常に開いているので打ち合わせのために特定のアプリ(ブラウザで特定のページ)を開くという作業がないだけで心理的な障壁が下がる気がする。チャットツールに音声通話の機能がつくのは大きなメリットがあるなと、zoom や google meet と比較して思うようになってきた。定例会議やイベントなどは zoom や google meet でかまわない。だけど、「いまからリリースやるからみんな集まって」みたいなノリはハドルの方が集めやすいし、参加しやすい。フルリモートワークはオフィスと同じような雑談がやりにくいという課題の、技術的な課題はハドルが少しずつ解決していきそうな未来があるのかもしれない。&lt;/p>
&lt;p>いままでのほほんと雑談していただけだったが、こういう機会にどんな会話をしているか、その会話からどういった情報共有が行われているか、会話することで人間関係や心理的安全性に影響を与えるかなど、雑談の意義や効果に注意を向けながらやってみるとなにかしら発見があるような気もしてきた。&lt;/p></content></item><item><title>「聞かなくてもわかる」という価値観</title><link>/diary/posts/2022/0107/</link><pubDate>Fri, 07 Jan 2022 08:10:05 +0900</pubDate><guid>/diary/posts/2022/0107/</guid><description>0時に寝て3時に起きた。4時までドラクエタクトしたりもしてたけど、夕方に PoC のデモ打ち合わせがあるのになにも準備できてなくて不安で起きて5時からお仕事してた。久しぶりに早起きしたせいか、打ち合わせ終えたら眠いからすぐに帰って、夜はオンライン飲み会しつつくつろいでいた。
情報共有とコミュニケーションコスト 課題管理システムのことを考えていてふと思いついたことを書き出す。私からみると、多くの人たちは「聞かなくてもわかる」という価値を過小評価しがちである。というのは、その価値を定量化するのは難しいので評価されにくい。そうすると、評価されないことはやらないといった合理的な働き方をすればそうなるのは理解できる。しかし、私はその価値を理解しているので軽く考察してみる。
聞けない 聞けばわかる 聞いてもわからない 聞かないとわからない 聞かなくてもわかる 情報共有の過程でパッと思いつくことを段階ごとに書いてみた。1に近い方が容易で5に近い方が難しいという難易度を表しているとも言えるし、組織の情報共有のレベルを表しているとも言える。少し言葉を補うと次のように解釈してもよいだろう。
(メンターが気難しくて/メンターに無能だと思われたくなくて) 聞けない (メンターに余裕があって) 聞けばわかる (メンターのスキル不足で/担当者が退職してて) 聞いてもわからない (背景が文書化されていなくて) 聞かないとわからない (課題管理システムを検索すれば) 聞かなくてもわかる 昔は1のような状況を発生させる人もちょくちょく職場にいた気がするけど、いまは淘汰されてあまりみかけない。多くの組織は3か4ぐらいのレベルだろう。5まで達している組織は少ない。課題管理システムについて議論していると、たまに「知っている人に聞けばいいじゃない？」という意見があがる。この質問をしている時点で目指している働き方のレベルや生産性が大きく異なっていることがわかる。というのは、他人に聞くというのはコミュニケーションコストが非常に高い。これは他人に聞くなと言っているわけではない。他人に聞かないといけないことを減らすことで生産性を上げるという話しをしているだけだ。他者へ同じ情報を伝えるのに1時間の打ち合わせが済むのか、3時間の打ち合わせを要するのかという比較をしている。当然、打ち合わせ時間を減らしても伝えられる情報量が同じであれば打ち合わせ時間は少ない方が望ましい。そういう話しをしている。
5のレベルに達していれば、例えば、いまのシステムの仕様はなぜこのようになっているのか？変更するとしたら影響範囲はどのぐらいか？どういったモジュールに注意して改修すればいいか。もちろん前任者やリーダーに聞けばわかるだろう。聞くために打ち合わせの予定を調整するかもしれない。するとリーダーは忙しくて時間を調整できるのは来週になるという。もし課題管理システムにそういった情報が残っていれば、来週まで待つ必要がなくなる。理想的にはリーダーとの打ち合わせも必要なくなる。リーダーは他に重要な業務に時間を割ける。これが「聞かなくてもわかる」という価値である。
昔はなんらかの理由で1の状態にあった組織において、職場の風通しがよくなると、コミュニケーションコストを軽視しがちになる。職場の風通しがよいことは重要だが、打ち合わせや会議ばかりするようになると、キーパーソンの時間を湯水のように使う。キーパーソンはすぐに会議だらけになって物理的に実務ができなくなって、結果的に生産性や品質が下がる。ここで重要なのは権限委譲だが、この話しは長くなるのでここで筆をおく。</description><content>&lt;p>0時に寝て3時に起きた。4時までドラクエタクトしたりもしてたけど、夕方に PoC のデモ打ち合わせがあるのになにも準備できてなくて不安で起きて5時からお仕事してた。久しぶりに早起きしたせいか、打ち合わせ終えたら眠いからすぐに帰って、夜はオンライン飲み会しつつくつろいでいた。&lt;/p>
&lt;h2 id="情報共有とコミュニケーションコスト">情報共有とコミュニケーションコスト&lt;/h2>
&lt;p>課題管理システムのことを考えていてふと思いついたことを書き出す。私からみると、多くの人たちは「聞かなくてもわかる」という価値を過小評価しがちである。というのは、その価値を定量化するのは難しいので評価されにくい。そうすると、評価されないことはやらないといった合理的な働き方をすればそうなるのは理解できる。しかし、私はその価値を理解しているので軽く考察してみる。&lt;/p>
&lt;ol>
&lt;li>聞けない&lt;/li>
&lt;li>聞けばわかる&lt;/li>
&lt;li>聞いてもわからない&lt;/li>
&lt;li>聞かないとわからない&lt;/li>
&lt;li>聞かなくてもわかる&lt;/li>
&lt;/ol>
&lt;p>情報共有の過程でパッと思いつくことを段階ごとに書いてみた。1に近い方が容易で5に近い方が難しいという難易度を表しているとも言えるし、組織の情報共有のレベルを表しているとも言える。少し言葉を補うと次のように解釈してもよいだろう。&lt;/p>
&lt;ol>
&lt;li>(メンターが気難しくて/メンターに無能だと思われたくなくて) 聞けない&lt;/li>
&lt;li>(メンターに余裕があって) 聞けばわかる&lt;/li>
&lt;li>(メンターのスキル不足で/担当者が退職してて) 聞いてもわからない&lt;/li>
&lt;li>(背景が文書化されていなくて) 聞かないとわからない&lt;/li>
&lt;li>(課題管理システムを検索すれば) 聞かなくてもわかる&lt;/li>
&lt;/ol>
&lt;p>昔は1のような状況を発生させる人もちょくちょく職場にいた気がするけど、いまは淘汰されてあまりみかけない。多くの組織は3か4ぐらいのレベルだろう。5まで達している組織は少ない。課題管理システムについて議論していると、たまに「知っている人に聞けばいいじゃない？」という意見があがる。この質問をしている時点で目指している働き方のレベルや生産性が大きく異なっていることがわかる。というのは、他人に聞くというのはコミュニケーションコストが非常に高い。これは他人に聞くなと言っているわけではない。他人に聞かないといけないことを減らすことで生産性を上げるという話しをしているだけだ。他者へ同じ情報を伝えるのに1時間の打ち合わせが済むのか、3時間の打ち合わせを要するのかという比較をしている。当然、打ち合わせ時間を減らしても伝えられる情報量が同じであれば打ち合わせ時間は少ない方が望ましい。そういう話しをしている。&lt;/p>
&lt;p>5のレベルに達していれば、例えば、いまのシステムの仕様はなぜこのようになっているのか？変更するとしたら影響範囲はどのぐらいか？どういったモジュールに注意して改修すればいいか。もちろん前任者やリーダーに聞けばわかるだろう。聞くために打ち合わせの予定を調整するかもしれない。するとリーダーは忙しくて時間を調整できるのは来週になるという。もし課題管理システムにそういった情報が残っていれば、来週まで待つ必要がなくなる。理想的にはリーダーとの打ち合わせも必要なくなる。リーダーは他に重要な業務に時間を割ける。これが「聞かなくてもわかる」という価値である。&lt;/p>
&lt;p>昔はなんらかの理由で1の状態にあった組織において、職場の風通しがよくなると、コミュニケーションコストを軽視しがちになる。職場の風通しがよいことは重要だが、打ち合わせや会議ばかりするようになると、キーパーソンの時間を湯水のように使う。キーパーソンはすぐに会議だらけになって物理的に実務ができなくなって、結果的に生産性や品質が下がる。ここで重要なのは権限委譲だが、この話しは長くなるのでここで筆をおく。&lt;/p></content></item></channel></rss>