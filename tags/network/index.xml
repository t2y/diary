<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>network on forest nook</title><link>/diary/tags/network/</link><description>Recent content in network on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Fri, 15 Dec 2023 08:34:04 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/network/index.xml" rel="self" type="application/rss+xml"/><item><title>おいしい 🦀 を食べに行く</title><link>/diary/posts/2023/1215/</link><pubDate>Fri, 15 Dec 2023 08:34:04 +0900</pubDate><guid>/diary/posts/2023/1215/</guid><description>22時頃に寝てしまって1時に起きて5時に起きて6時過ぎに起きた。とくになにもしていないのにバテている気がする。今週はずっと mongodb のレプリカセットの調査やインフラの移行作業などをやっていたせいか、普段よりもエネルギーを消費しているのかもしれない。朝から疲労困憊でオフィスへ向かった。
docker のコンテナネットワークの調査 docker のコンテナネットワークから解決できる名前がなになのか、よくわかってなくて、その調査のためにサンプルの compose サービスを作った。
https://github.com/t2y/docker-compose-sample myimage から nginx のコンテナの名前解決がどうなるかを試してみる。
c67a5ca94a77:/app# dig +short 00c719491558 192.168.240.3 c67a5ca94a77:/app# dig +short mynginx 192.168.240.3 c67a5ca94a77:/app# dig +short nginx 192.168.240.3 c67a5ca94a77:/app# dig +short yournginx 192.168.240.3 基本的にはサービス名、コンテナ名 (container_name)、コンテナー ID、ホスト名 (hostname) はすべて名前解決できる。hostname があるときはそのコンテナの /etc/hosts にその名前が追加され、ないときはコンテナ ID が追加されていた。
yourcontainer:/app# cat /etc/hosts 127.0.0.1 localhost ... 172.18.0.3 yourcontainer 冬の開発合宿の準備 日程を決めたのが5月末 で、うちの会社のワークスペースに slack のチャンネルを開設したのが10月。現時点で7人の参加者がいる。もうこのメンバーでいいかなと考えている。今回はコミュニティのワーケーションイベントというより、自社の開発合宿という体をとっている。スポンサーとしていくらか会社からお金も出す。その理由の1つは slack チャンネルにログを残したいという意図がある。コミュニティの slack だとフリープランになるので3ヶ月以上過去のログがみえなくなってしまう。それを解消するには自社の有料プランの slack チャンネルに置いておくのがもっともログを制御できて嬉しい。
城崎温泉では11月から 🦀 が解禁となって、今年は冬に行くので 🦀 を食べるというのも目的の1つ。チャンネルで盛り上げようと、たまに城崎温泉の記事を貼り付けたりしていた。そろそろ、メンバーと顔合わせの情報共有の打ち合わせをしようと思って調整さんを作った。他の人たちは、わざわざうちの slack のワークスペースにゲスト参加しているから、あまり無理強いをせずに情報共有できるようにしておきたい。たった1つの、ほとんどやり取りしないチャンネルのために slack のワークスペースをオープンしておかないといけないという用途はなかなか面倒だ。私が逆の立場でもそう思う。どうにか普段使っているワークスペースから、必要なときだけ連携できるような仕組みがないだろうか？</description><content>&lt;p>22時頃に寝てしまって1時に起きて5時に起きて6時過ぎに起きた。とくになにもしていないのにバテている気がする。今週はずっと mongodb のレプリカセットの調査やインフラの移行作業などをやっていたせいか、普段よりもエネルギーを消費しているのかもしれない。朝から疲労困憊でオフィスへ向かった。&lt;/p>
&lt;h2 id="docker-のコンテナネットワークの調査">docker のコンテナネットワークの調査&lt;/h2>
&lt;p>docker のコンテナネットワークから解決できる名前がなになのか、よくわかってなくて、その調査のためにサンプルの compose サービスを作った。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/t2y/docker-compose-sample">https://github.com/t2y/docker-compose-sample&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>myimage から nginx のコンテナの名前解決がどうなるかを試してみる。&lt;/p>
&lt;pre tabindex="0">&lt;code>c67a5ca94a77:/app# dig +short 00c719491558
192.168.240.3
c67a5ca94a77:/app# dig +short mynginx
192.168.240.3
c67a5ca94a77:/app# dig +short nginx
192.168.240.3
c67a5ca94a77:/app# dig +short yournginx
192.168.240.3
&lt;/code>&lt;/pre>&lt;p>基本的にはサービス名、コンテナ名 (container_name)、コンテナー ID、ホスト名 (hostname) はすべて名前解決できる。hostname があるときはそのコンテナの /etc/hosts にその名前が追加され、ないときはコンテナ ID が追加されていた。&lt;/p>
&lt;pre tabindex="0">&lt;code>yourcontainer:/app# cat /etc/hosts
127.0.0.1 localhost
...
172.18.0.3 yourcontainer
&lt;/code>&lt;/pre>&lt;h2 id="冬の開発合宿の準備">冬の開発合宿の準備&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0526/#開発合宿の日程確定">日程を決めたのが5月末&lt;/a> で、うちの会社のワークスペースに slack のチャンネルを開設したのが10月。現時点で7人の参加者がいる。もうこのメンバーでいいかなと考えている。今回はコミュニティのワーケーションイベントというより、自社の開発合宿という体をとっている。スポンサーとしていくらか会社からお金も出す。その理由の1つは slack チャンネルにログを残したいという意図がある。コミュニティの slack だとフリープランになるので3ヶ月以上過去のログがみえなくなってしまう。それを解消するには自社の有料プランの slack チャンネルに置いておくのがもっともログを制御できて嬉しい。&lt;/p>
&lt;p>城崎温泉では11月から 🦀 が解禁となって、今年は冬に行くので 🦀 を食べるというのも目的の1つ。チャンネルで盛り上げようと、たまに城崎温泉の記事を貼り付けたりしていた。そろそろ、メンバーと顔合わせの情報共有の打ち合わせをしようと思って調整さんを作った。他の人たちは、わざわざうちの slack のワークスペースにゲスト参加しているから、あまり無理強いをせずに情報共有できるようにしておきたい。たった1つの、ほとんどやり取りしないチャンネルのために slack のワークスペースをオープンしておかないといけないという用途はなかなか面倒だ。私が逆の立場でもそう思う。どうにか普段使っているワークスペースから、必要なときだけ連携できるような仕組みがないだろうか？&lt;/p>
&lt;p>年末・年始の情報共有の打ち合わせへ向けて旅のしおりも準備していく。日々の業務に忙殺されて後回しにしがちなので自分を追い込むためにも予定を入れた。&lt;/p></content></item><item><title>標準ライブラリに XOAUTH2 の実装がない</title><link>/diary/posts/2023/1013/</link><pubDate>Fri, 13 Oct 2023 08:31:00 +0900</pubDate><guid>/diary/posts/2023/1013/</guid><description>0時に寝て3時に起きて5時ぐらいまでネットで遊んでて6時半に起きた。昨日の夜に洗濯しようと思って忘れていたので朝から洗濯した。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。
税理士さんとの打ち合わせのふりかえり 昔お手伝いした会社の開発体制の話 新しいチーム勉強会 の導入 3人の税理士さんと打ち合わせしてみて最終的に顧問契約をお願いする方を決めた。話してみてやり取りした雰囲気だと、その税理士さんもスキルやこちらの要件対応については全く問題なさそうに思えた。あとは報酬とうちの会社の規模などを考慮して選択した。
昔お手伝いした会社で2年経ってちょっと相談にのってほしいという打ち合わせをした。私がいた2年前と開発体制はまったく変わってなくて、未だにテックリードがほぼ1人で開発している状況らしい。私が辞めてから以降も何人かは開発者が入っては辞めを繰り返しているのだと推測する。私も2度とその開発者と一緒に働きたくないと思うぐらいには信頼してなくて、開発者が引く手あまたな世の中の状況において、人間として信頼されないリーダーって致命的なんだなということを改めて実感した。おそらくテックリードを追放しない限り、あの開発体制 (と言ってもほぼ独り開発) は何も変わらないのだろうと思う。
oauth 2.0 で認証して google の smtp サーバーを使う 昨日の続き 。
リフレッシュトークンを使って取得したアクセストークンで smtp の AUTH コマンドで XOAUTH2 で認証すればよい。仕様は次のドキュメントに書いてある。
Home &amp;gt; Google Workspace &amp;gt; Gmail &amp;gt; Guides &amp;gt; OAuth 2.0 Mechanism RFC 7628 - A Set of Simple Authentication and Security Layer (SASL) Mechanisms for OAuth 日本語訳 なぜか go の標準ライブラリの net/smtp には Plain と CRAM-MD5 の2つしか実装されていない。AUTH コマンドの実装は smtp.Auth インターフェースで定義されている。
type Auth interface { Start(server *ServerInfo) (proto string, toServer []byte, err error) Next(fromServer []byte, more bool) (toServer []byte, err error) } 正常系の雑な実装だとこんな感じ。</description><content>&lt;p>0時に寝て3時に起きて5時ぐらいまでネットで遊んでて6時半に起きた。昨日の夜に洗濯しようと思って忘れていたので朝から洗濯した。&lt;/p>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。今日の議題はこれら。&lt;/p>
&lt;ul>
&lt;li>税理士さんとの打ち合わせのふりかえり&lt;/li>
&lt;li>昔お手伝いした会社の開発体制の話&lt;/li>
&lt;li>&lt;a href="/diary/diary/posts/2023/1005/">新しいチーム勉強会&lt;/a> の導入&lt;/li>
&lt;/ul>
&lt;p>3人の税理士さんと打ち合わせしてみて最終的に顧問契約をお願いする方を決めた。話してみてやり取りした雰囲気だと、その税理士さんもスキルやこちらの要件対応については全く問題なさそうに思えた。あとは報酬とうちの会社の規模などを考慮して選択した。&lt;/p>
&lt;p>昔お手伝いした会社で2年経ってちょっと相談にのってほしいという打ち合わせをした。私がいた2年前と開発体制はまったく変わってなくて、未だにテックリードがほぼ1人で開発している状況らしい。私が辞めてから以降も何人かは開発者が入っては辞めを繰り返しているのだと推測する。私も2度とその開発者と一緒に働きたくないと思うぐらいには信頼してなくて、開発者が引く手あまたな世の中の状況において、人間として信頼されないリーダーって致命的なんだなということを改めて実感した。おそらくテックリードを追放しない限り、あの開発体制 (と言ってもほぼ独り開発) は何も変わらないのだろうと思う。&lt;/p>
&lt;h2 id="oauth-20-で認証して-google-の-smtp-サーバーを使う">oauth 2.0 で認証して google の smtp サーバーを使う&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/1012/">昨日の続き&lt;/a> 。&lt;/p>
&lt;p>リフレッシュトークンを使って取得したアクセストークンで smtp の AUTH コマンドで XOAUTH2 で認証すればよい。仕様は次のドキュメントに書いてある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developers.google.com/gmail/imap/xoauth2-protocol">Home &amp;gt; Google Workspace &amp;gt; Gmail &amp;gt; Guides &amp;gt; OAuth 2.0 Mechanism&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tex2e.github.io/rfc-translater/html/rfc7628.html">RFC 7628 - A Set of Simple Authentication and Security Layer (SASL) Mechanisms for OAuth 日本語訳&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>なぜか go の標準ライブラリの net/smtp には Plain と CRAM-MD5 の2つしか実装されていない。AUTH コマンドの実装は smtp.Auth インターフェースで定義されている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Auth&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Start&lt;/span>(&lt;span style="color:#a6e22e">server&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ServerInfo&lt;/span>) (&lt;span style="color:#a6e22e">proto&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">toServer&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Next&lt;/span>(&lt;span style="color:#a6e22e">fromServer&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">more&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) (&lt;span style="color:#a6e22e">toServer&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>正常系の雑な実装だとこんな感じ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">oauth2&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tokenType&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">accessToken&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">o&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">oauth2&lt;/span>) &lt;span style="color:#a6e22e">Start&lt;/span>(&lt;span style="color:#a6e22e">server&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">smtp&lt;/span>.&lt;span style="color:#a6e22e">ServerInfo&lt;/span>) (&lt;span style="color:#66d9ef">string&lt;/span>, []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">server&lt;/span>.&lt;span style="color:#a6e22e">TLS&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;need tls&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">resp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []byte(&lt;span style="color:#e6db74">&amp;#34;user=&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\001auth=&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">tokenType&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">accessToken&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\001\001&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;XOAUTH2&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">o&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">oauth2&lt;/span>) &lt;span style="color:#a6e22e">Next&lt;/span>(&lt;span style="color:#a6e22e">fromServer&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">more&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) ([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">more&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;unexpected server challenge&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ググるとサンプルコードを実装している人たちがちらほらいるので、そのうち標準ライブラリに誰か実装してくれると思う。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jacobalberty/smtpoauth2">https://github.com/jacobalberty/smtpoauth2&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>go 本体に pr を送るチャンスでもあるけど、&lt;a href="https://go.dev/doc/contribute">Contribution Guide&lt;/a> を少し眺めて大変そうと思って、いまそこまでのモチベーションないなって感じ。&lt;/p></content></item><item><title>xoauth2 という smtp の認証</title><link>/diary/posts/2023/1012/</link><pubDate>Thu, 12 Oct 2023 08:19:48 +0900</pubDate><guid>/diary/posts/2023/1012/</guid><description>0時に寝て何度か起きて6時に起きた。昨日、凡人が天才に挑むという状況で、キングダムの 蒙驁 将軍が廉頗に挑むみたいな状況を思い出して見返していた。史実では蒙驁が魏を攻めて東郡を置いたというのは事実だが、廉頗と戦ったという記録はなく、おそらくは蒙驁と廉頗に因縁があって雪辱戦としたというのはキングダムの創作だろうと推測される。
oauth 2.0 で認証して google の smtp サーバーを使う google さんの smtp.gmail.com の smtp サーバーを使ってメールを送信したい。
Turning off less secure app access to G Suite accounts Beginning September 30, 2024: third-party apps that use only a password to access Google Accounts and Google Sync will no longer be supported 2019年にパスワード認証は廃止するので oauth 2.0 へ移行してくださいといった、最初のアナウンスが行われて、もうできないかと思ったら2024年9月30日に完全廃止するのかな？まだパスワード認証は動くかもしれない。一方で oauth 2.0 へ移行しないといけないのでその調査をメンバーにしてもらっていた。結局、途中からは私も本気になって調べていた。
oauth 2.0 で認証してアクセストークンとリフレッシュトークンを取得するためのサンプルコードとして OAuth2DotPyRunThrough が用意されている。このトークンを取得するときに callback の url にユーザーが明示的にアクセスして同意する必要がある。ここで得たアクセストークンは1時間で有効期限がきれる。しかし、リフレッシュトークンはユーザーが revoke しない限りは永続的に使えるそうで、このリフレッシュトークンを使って必要なときにアクセストークンを取得するというのが google さんの oauth 2.</description><content>&lt;p>0時に寝て何度か起きて6時に起きた。昨日、凡人が天才に挑むという状況で、キングダムの &lt;a href="https://dic.pixiv.net/a/%E8%92%99%E9%A9%81">蒙驁&lt;/a> 将軍が廉頗に挑むみたいな状況を思い出して見返していた。史実では蒙驁が魏を攻めて東郡を置いたというのは事実だが、廉頗と戦ったという記録はなく、おそらくは蒙驁と廉頗に因縁があって雪辱戦としたというのはキングダムの創作だろうと推測される。&lt;/p>
&lt;h2 id="oauth-20-で認証して-google-の-smtp-サーバーを使う">oauth 2.0 で認証して google の smtp サーバーを使う&lt;/h2>
&lt;p>google さんの smtp.gmail.com の smtp サーバーを使ってメールを送信したい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://workspaceupdates.googleblog.com/2019/12/less-secure-apps-oauth-google-username-password-incorrect.html">Turning off less secure app access to G Suite accounts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://workspaceupdates.googleblog.com/2023/09/winding-down-google-sync-and-less-secure-apps-support.html">Beginning September 30, 2024: third-party apps that use only a password to access Google Accounts and Google Sync will no longer be supported&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>2019年にパスワード認証は廃止するので oauth 2.0 へ移行してくださいといった、最初のアナウンスが行われて、もうできないかと思ったら2024年9月30日に完全廃止するのかな？まだパスワード認証は動くかもしれない。一方で oauth 2.0 へ移行しないといけないのでその調査をメンバーにしてもらっていた。結局、途中からは私も本気になって調べていた。&lt;/p>
&lt;p>oauth 2.0 で認証してアクセストークンとリフレッシュトークンを取得するためのサンプルコードとして &lt;a href="https://github.com/google/gmail-oauth2-tools/wiki/OAuth2DotPyRunThrough">OAuth2DotPyRunThrough&lt;/a> が用意されている。このトークンを取得するときに callback の url にユーザーが明示的にアクセスして同意する必要がある。ここで得たアクセストークンは1時間で有効期限がきれる。しかし、リフレッシュトークンはユーザーが revoke しない限りは永続的に使えるそうで、このリフレッシュトークンを使って必要なときにアクセストークンを取得するというのが google さんの oauth 2.0 のアプリケーションの運用になるみたい。つまりリフレッシュトークンをアプリケーション側で管理することでアクセストークンは何度でも取得できる。&lt;/p>
&lt;p>&lt;a href="https://developers.google.com/gmail/imap/xoauth2-protocol">OAuth 2.0 Mechanism&lt;/a> によると、取得したアクセストークンを使って &lt;code>XOAUTH2&lt;/code> という smtp の認証方式で認証すれば smtp サーバーに対して smtp でメールを送信できる。gmail 以外でメールをやり取りする機会がなくなって数年たつ。smtp の仕組みとか、まったく忘れてしまって関心もない。たったこれだけなんだけど、右往左往してあちこち調べることになった。ややこしいのは google のクラウド api 経由でメールを送ることもできて、そのやり方と混同するとまったく違う方向に行ってしまう。そこだけ注意。&lt;/p></content></item><item><title>週明けから疲労困憊</title><link>/diary/posts/2023/0814/</link><pubDate>Mon, 14 Aug 2023 07:54:56 +0900</pubDate><guid>/diary/posts/2023/0814/</guid><description>4時に寝て7時に起きた。遅くまでコードを書いていたわけではないけど、眠れなかったのとお腹空いて夜にもぐもぐ夜食を食べていたせいかもしれない。たいてい月曜日は元気いっぱいなのに今日はバテバテだった。
wifi 復旧 金曜日からコワーキングスペースの wifi が不通 になっていた。午前中に業者がフロアの機器室の扉 (施錠されている) を開けて作業していた。週末に復旧できなかったのはシンプルに業者との保守契約に休日対応オプションが入っていなかったのかもしれない。運悪く連休に発生したために約3日間停止していた wifi が11時過ぎにようやく復旧した。フロアにまったく人影がなくて、みんなお盆休みなのかもしれない。
エージェントアプリケーション開発 昨日の続き 。朝からマージリクエストを作ってメンバーにレビューしてもらう。1000行程度の diff になったのでレビューするのも大変。基本的なロジックは問題なかったけれど、メンバーがしっかりレビューしてくれたおかげで細かいところをみていくと、いくつか修正点があった。感謝。レビューを終えて、マージして、テスト環境にデプロイして、一通り動いていることは確認した。ここからは運用レベルの検証に入っていく。週末も昨日もあまり寝てないのもあって、台風がきているし、今日はここで休むことにした。疲れたー。</description><content>&lt;p>4時に寝て7時に起きた。遅くまでコードを書いていたわけではないけど、眠れなかったのとお腹空いて夜にもぐもぐ夜食を食べていたせいかもしれない。たいてい月曜日は元気いっぱいなのに今日はバテバテだった。&lt;/p>
&lt;h2 id="wifi-復旧">wifi 復旧&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0812/#オフィスの-wifi-不通">金曜日からコワーキングスペースの wifi が不通&lt;/a> になっていた。午前中に業者がフロアの機器室の扉 (施錠されている) を開けて作業していた。週末に復旧できなかったのはシンプルに業者との保守契約に休日対応オプションが入っていなかったのかもしれない。運悪く連休に発生したために約3日間停止していた wifi が11時過ぎにようやく復旧した。フロアにまったく人影がなくて、みんなお盆休みなのかもしれない。&lt;/p>
&lt;h2 id="エージェントアプリケーション開発">エージェントアプリケーション開発&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0813/#エージェントアプリケーション開発">昨日の続き&lt;/a> 。朝からマージリクエストを作ってメンバーにレビューしてもらう。1000行程度の diff になったのでレビューするのも大変。基本的なロジックは問題なかったけれど、メンバーがしっかりレビューしてくれたおかげで細かいところをみていくと、いくつか修正点があった。感謝。レビューを終えて、マージして、テスト環境にデプロイして、一通り動いていることは確認した。ここからは運用レベルの検証に入っていく。週末も昨日もあまり寝てないのもあって、台風がきているし、今日はここで休むことにした。疲れたー。&lt;/p></content></item><item><title>go-ldap の syncrepl 機能のレビュー対応</title><link>/diary/posts/2023/0805/</link><pubDate>Sat, 05 Aug 2023 11:38:14 +0900</pubDate><guid>/diary/posts/2023/0805/</guid><description>1時に寝て何度か起きて7時に起きた。今週もよく働いたからバテバテ。
ストレッチ これまでも慢性的に右足全般は悪かったのだけれども、今日は左足の張りがある (痛い) ところと右足の張りがある (痛い) ところが全然違うことに気付いた。トレーナーさんによるとさらに今日はいつもより上半身の腕も硬かったという話しだった。これから1ヶ月か、1ヶ月半ほどは開発の佳境で忙しくなる (座っている時間が長くなる) ので体調がよくなることはないと思う。今日の開脚幅は開始前155cmで、ストレッチ後158cmだった。普段通りなのでこの調子なら問題ない。
syncrepl のレビュー対応 先日のレビュー対応 の修正。通信プロトコルの処理を実装するには想定したパケット (byte 列) をデコードしないといけない。そのために誤っているとすぐに panic する。開発しているときは既存の処理の振る舞いと競合してあちこちで panic してデバッグが容易ではなかった。そこで既存処理とは分割して先ずは実装した。その後、プロトコルの仕様と対応するパケットを理解してしまえば、どこを直せばよいか把握できているので既存の処理と共存させることはとくに難しくなかった。私の先入観であちこち変更しないといけないのでは？と思い込んでしまっていたのをレビューアの指摘で気付くことができた。感謝。
Add syncrepl (rfc-4533) consumer (persistent search) #447 これでレビュー対応を終えた。pr を送ってから2週間放置されていた。そこでレビューしてくれないかとお願いしたら2人のメンテナーがすぐにレビューしてくれた。これは 非同期検索 でのやり取りを経て私の信頼があがっていたためと思われる。この機能はお仕事の開発にも使う。ちょうどいま開発の佳境に際して花を添えるよいタイミングと言える。
進捗報告の資料作り 気付いたら来週は出張の週になる。月例報告のための資料を作っていないことに今日気付いて慌てて資料を作った。いまは開発の佳境の時期なので、開発方法論に新しいことを試しているわけでもないし、この1ヶ月のやったことの進捗を報告するだけ。内容は固まっていて資料を作るのはそんなに大変ではない。理想的なスケジュールだと9月上旬で開発完了を目指していたが、それは無理そうだと判断した。その次のイテレーションで完了できるように目指す。さらに追加でバッファのイテレーションももう1つある (と私が勝手に思っている) 。2つイテレーションを伸ばすと開発は1ヶ月の遅延となる。このぐらいのブレは私の中では許容範囲だけれども、一般の会社だと認められるのかどうか、開発マネジメントの機微によって分かれるのかもしれない。</description><content>&lt;p>1時に寝て何度か起きて7時に起きた。今週もよく働いたからバテバテ。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>これまでも慢性的に右足全般は悪かったのだけれども、今日は左足の張りがある (痛い) ところと右足の張りがある (痛い) ところが全然違うことに気付いた。トレーナーさんによるとさらに今日はいつもより上半身の腕も硬かったという話しだった。これから1ヶ月か、1ヶ月半ほどは開発の佳境で忙しくなる (座っている時間が長くなる) ので体調がよくなることはないと思う。今日の開脚幅は開始前155cmで、ストレッチ後158cmだった。普段通りなのでこの調子なら問題ない。&lt;/p>
&lt;h2 id="syncrepl-のレビュー対応">syncrepl のレビュー対応&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0804/#syncrepl-機能の-pr-の続き">先日のレビュー対応&lt;/a> の修正。通信プロトコルの処理を実装するには想定したパケット (byte 列) をデコードしないといけない。そのために誤っているとすぐに panic する。開発しているときは既存の処理の振る舞いと競合してあちこちで panic してデバッグが容易ではなかった。そこで既存処理とは分割して先ずは実装した。その後、プロトコルの仕様と対応するパケットを理解してしまえば、どこを直せばよいか把握できているので既存の処理と共存させることはとくに難しくなかった。私の先入観であちこち変更しないといけないのでは？と思い込んでしまっていたのをレビューアの指摘で気付くことができた。感謝。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/go-ldap/ldap/pull/447">Add syncrepl (rfc-4533) consumer (persistent search) #447&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>これでレビュー対応を終えた。pr を送ってから2週間放置されていた。そこでレビューしてくれないかとお願いしたら2人のメンテナーがすぐにレビューしてくれた。これは &lt;a href="/diary/diary/posts/2023/0703/#非同期の-ldap-検索の-api">非同期検索&lt;/a> でのやり取りを経て私の信頼があがっていたためと思われる。この機能はお仕事の開発にも使う。ちょうどいま開発の佳境に際して花を添えるよいタイミングと言える。&lt;/p>
&lt;h2 id="進捗報告の資料作り">進捗報告の資料作り&lt;/h2>
&lt;p>気付いたら来週は出張の週になる。月例報告のための資料を作っていないことに今日気付いて慌てて資料を作った。いまは開発の佳境の時期なので、開発方法論に新しいことを試しているわけでもないし、この1ヶ月のやったことの進捗を報告するだけ。内容は固まっていて資料を作るのはそんなに大変ではない。理想的なスケジュールだと9月上旬で開発完了を目指していたが、それは無理そうだと判断した。その次のイテレーションで完了できるように目指す。さらに追加でバッファのイテレーションももう1つある (と私が勝手に思っている) 。2つイテレーションを伸ばすと開発は1ヶ月の遅延となる。このぐらいのブレは私の中では許容範囲だけれども、一般の会社だと認められるのかどうか、開発マネジメントの機微によって分かれるのかもしれない。&lt;/p></content></item><item><title>なにもしないうちに一週間が過ぎた</title><link>/diary/posts/2023/0721/</link><pubDate>Fri, 21 Jul 2023 15:43:34 +0900</pubDate><guid>/diary/posts/2023/0721/</guid><description>2時に寝て何度か起きて6時に起きた。今週はゼロ時前後までオフィスで作業していることが多かったのであまり寝ていないが、月曜日にお休みをとった効果は抜群でほとんど疲労感はない。たまに休むことも大事なのかもしれない。
温湿度計 先日 暑さ対策委員会 を立ち上げて、まずは計測からだとエンペックスの温湿度計を購入したものが今日届いたので計測してみた。
11時頃は32℃、12時を超えると30℃過ぎぐらいに落ち着いた。夜になると28℃ぐらいまで下がった。ちなみにエアコンの温度設定は23℃となっている。午前中が一番暑いことに気付く。その理由は日当たりのよい部屋なので午前中は陽が窓から差し込むために窓付近があたためられるのだと推測する。幸いなのは湿度が40-50%と低いためにサーキュレーターで風を浴びているとなんとか暑さをしのげるところ。これで湿度が高い日はもうバテてお仕事とかできるんやろか？という気もする。
フロアの窓より遠いもっとも内側の区画は26℃になっている。エアコン設定の基本が25℃なので妥当な数値だし、普通に涼しい。私が感覚的に暑い、暑いと言っていたのが、私の感覚の問題ではなく、運営会社にクレームしても理解を得られるのではないかと思う。また週末か来週あたりに電話して相談してみようと思う。もしかしたらなにかしら対策を検討していてくれているかもしれない。
iijmio ギガプランの変更 先月の実家リモートワーク で普通にお仕事すると1GiB/日ぐらいは使うことに気付いた。2GiB プランだと全然足りないことに気付いたので 5GiB プランに変更した。これなら月に1週間ほど帰ってもお仕事できそう。
データeSIM ギガプラン 2ギガ 440円 5ギガ 660円</description><content>&lt;p>2時に寝て何度か起きて6時に起きた。今週はゼロ時前後までオフィスで作業していることが多かったのであまり寝ていないが、月曜日にお休みをとった効果は抜群でほとんど疲労感はない。たまに休むことも大事なのかもしれない。&lt;/p>
&lt;h2 id="温湿度計">温湿度計&lt;/h2>
&lt;p>先日 &lt;a href="/diary/diary/posts/2023/0716/">暑さ対策委員会&lt;/a> を立ち上げて、まずは計測からだとエンペックスの温湿度計を購入したものが今日届いたので計測してみた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0721_meter.jpg"/>
&lt;/figure>
&lt;p>11時頃は32℃、12時を超えると30℃過ぎぐらいに落ち着いた。夜になると28℃ぐらいまで下がった。ちなみにエアコンの温度設定は23℃となっている。午前中が一番暑いことに気付く。その理由は日当たりのよい部屋なので午前中は陽が窓から差し込むために窓付近があたためられるのだと推測する。幸いなのは湿度が40-50%と低いためにサーキュレーターで風を浴びているとなんとか暑さをしのげるところ。これで湿度が高い日はもうバテてお仕事とかできるんやろか？という気もする。&lt;/p>
&lt;p>フロアの窓より遠いもっとも内側の区画は26℃になっている。エアコン設定の基本が25℃なので妥当な数値だし、普通に涼しい。私が感覚的に暑い、暑いと言っていたのが、私の感覚の問題ではなく、運営会社にクレームしても理解を得られるのではないかと思う。また週末か来週あたりに電話して相談してみようと思う。もしかしたらなにかしら対策を検討していてくれているかもしれない。&lt;/p>
&lt;h2 id="iijmio-ギガプランの変更">iijmio ギガプランの変更&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0626/#実家の離れスペースで働いてみた">先月の実家リモートワーク&lt;/a> で普通にお仕事すると1GiB/日ぐらいは使うことに気付いた。2GiB プランだと全然足りないことに気付いたので 5GiB プランに変更した。これなら月に1週間ほど帰ってもお仕事できそう。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.iijmio.jp/gigaplan/">データeSIM ギガプラン&lt;/a>
&lt;ul>
&lt;li>2ギガ 440円&lt;/li>
&lt;li>5ギガ 660円&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content></item><item><title>go-ldap の syncrepl 対応</title><link>/diary/posts/2023/0719/</link><pubDate>Wed, 19 Jul 2023 08:10:41 +0900</pubDate><guid>/diary/posts/2023/0719/</guid><description>2時に寝て2回ぐらい起きて6時半に起きた。お休みとったからいろいろ余裕がないけれど、体力だけはある。
syncrepl 機能の実装 go-ldap の非同期検索 の続き。persistent search という用語 も理解して、満を持して openldap の syncrepl 対応に臨んでいた。syncrepl を用いた persistent search というのは、簡単に言えばメッセージキューで言うところの pubsub のコンシューマーに相当する。その通信のテストやデバッグをしているときに非同期検索のバグもみつけた。余計なことをして返って複雑なバグを混入したなと反省しながら修正の pr を送った。
Fix a deadlock issue using search asynchronously #446 go-ldap の ldap 通信の処理や設計を理解するのに2日、rfc-4533 を読みながら Control に関するプロトコル実装に1日、テストやデバッグ、その他の調査や設計に2日ぐらい、次の pr を作るのに1週間 (平日5日) ほどは工数を割いた。
Add syncrepl (rfc-4533) consumer (persistent search) #447 ローカル環境で単体レベルの動作は問題ないと思う。あとは私が知らない ldap プロトコルの振る舞いや単体レベルで検証できていない通信、実際の運用レベルの syncrepl の状態やエラーなどに耐えられるかどうかといったところだと思う。おそらく rfc を読みながらプロトコルの一部を私が実装したのは初めてかもしれない。もうサーバーサイドやバックエンドの領域で (スキルの多寡はあれども) 私が作れないものはそうないだろうという自信をもっている。実際に rfc で提案されたプロトコルを実装して、テストして、ちゃんと動いて、そういう日々がすごく楽しくて嬉しかった。根拠のなかった自信を確認できた。またレビューに時間かかるかな？マージのためのやり取りや修正に2週間から1ヶ月ぐらいを見込む。</description><content>&lt;p>2時に寝て2回ぐらい起きて6時半に起きた。お休みとったからいろいろ余裕がないけれど、体力だけはある。&lt;/p>
&lt;h2 id="syncrepl-機能の実装">syncrepl 機能の実装&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0703/#非同期の-ldap-検索の-api">go-ldap の非同期検索&lt;/a> の続き。&lt;a href="/diary/diary/posts/2023/0704/">persistent search という用語&lt;/a> も理解して、満を持して openldap の &lt;a href="https://www.openldap.org/doc/admin25/replication.html">syncrepl&lt;/a> 対応に臨んでいた。syncrepl を用いた persistent search というのは、簡単に言えばメッセージキューで言うところの pubsub のコンシューマーに相当する。その通信のテストやデバッグをしているときに非同期検索のバグもみつけた。余計なことをして返って複雑なバグを混入したなと反省しながら修正の pr を送った。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/go-ldap/ldap/pull/446">Fix a deadlock issue using search asynchronously #446&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>go-ldap の ldap 通信の処理や設計を理解するのに2日、&lt;a href="https://datatracker.ietf.org/doc/html/rfc4533">rfc-4533&lt;/a> を読みながら Control に関するプロトコル実装に1日、テストやデバッグ、その他の調査や設計に2日ぐらい、次の pr を作るのに1週間 (平日5日) ほどは工数を割いた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/go-ldap/ldap/pull/447">Add syncrepl (rfc-4533) consumer (persistent search) #447&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ローカル環境で単体レベルの動作は問題ないと思う。あとは私が知らない ldap プロトコルの振る舞いや単体レベルで検証できていない通信、実際の運用レベルの syncrepl の状態やエラーなどに耐えられるかどうかといったところだと思う。おそらく rfc を読みながらプロトコルの一部を私が実装したのは初めてかもしれない。もうサーバーサイドやバックエンドの領域で (スキルの多寡はあれども) 私が作れないものはそうないだろうという自信をもっている。実際に rfc で提案されたプロトコルを実装して、テストして、ちゃんと動いて、そういう日々がすごく楽しくて嬉しかった。根拠のなかった自信を確認できた。またレビューに時間かかるかな？マージのためのやり取りや修正に2週間から1ヶ月ぐらいを見込む。&lt;/p></content></item><item><title>実家での初めてのリモートワーク</title><link>/diary/posts/2023/0626/</link><pubDate>Mon, 26 Jun 2023 10:03:51 +0900</pubDate><guid>/diary/posts/2023/0626/</guid><description>23時に寝て2時に起きて4時に起きて6時に起きた。親が4時頃から作業し始めるからそのぐらいからだらだら起きている。その影響で8時前からお仕事を始めた。
パスワードの表現の答え合わせ 先週末に課題としていた パスワードの表現 になかなか苦労したようで半日ぐらいかかった。私が答えを言うのではなく、本人が自分で考えて、自分で調べて実装できるまで粘り強く待っていた。概ね、私の模範解答に近いものを実装してきて、コードレビューで少し手直しはあったものの、go でコンストラクタに近いものを実装する方法を学んだと思う。
実家の離れスペースで働いてみた 今朝は軽く雨が降っていて、それ以降もずっと曇っていた。天気がどんよりしていたのもあり、エアコンは除湿に設定してソファで働いてみた。数年前から淡路島に帰ってきてリモートワークをしたことは何度かあったが、すべてマクドナルドへ行って電源を借りて作業していた。実家で丸1日リモートワークで働いたのは今回が初めてだと思う。どんな施設でもインターネットとエアコンさえあれば働けるということを改めて実感した。実家なのでお昼になったらおかんがお昼ご飯だと呼びに来る。食べるものも考えなくてよい。
iphone で作った wifi ルーター の 2GiB プランで契約している。普通に macbook でリポジトリを操作したり、課題管理を使ったり、ブラウザで調べものしたり、slack でやり取りしたりしていたら約9時間で 987 MiB の通信量となった。いまやネットワークの通信量を意識することはないと思うが、普通にお仕事したらいまの時代1日 1GiB ぐらい使うもんなんやと気付いた。
iijmio の管理画面で日次の通信量を当日分も含めて確認できる。
1週間とか、実家でリモートワークするなら 2GiB プランだと全然足りない。機をみて 5/10 GiB 程度のプランに変更するとよさそう。これでコワーキングスペースにして複数人が使う想定なら光回線をひかないとネットワークが厳しいということも理解できた。光回線をひくと安くても5,000円/月は固定費がかかってくるので維持費の問題は悩ましいことも分かってきた。</description><content>&lt;p>23時に寝て2時に起きて4時に起きて6時に起きた。親が4時頃から作業し始めるからそのぐらいからだらだら起きている。その影響で8時前からお仕事を始めた。&lt;/p>
&lt;h2 id="パスワードの表現の答え合わせ">パスワードの表現の答え合わせ&lt;/h2>
&lt;p>先週末に課題としていた &lt;a href="/diary/diary/posts/2023/0623/#パスワードの表現">パスワードの表現&lt;/a> になかなか苦労したようで半日ぐらいかかった。私が答えを言うのではなく、本人が自分で考えて、自分で調べて実装できるまで粘り強く待っていた。概ね、私の模範解答に近いものを実装してきて、コードレビューで少し手直しはあったものの、go でコンストラクタに近いものを実装する方法を学んだと思う。&lt;/p>
&lt;h2 id="実家の離れスペースで働いてみた">実家の離れスペースで働いてみた&lt;/h2>
&lt;p>今朝は軽く雨が降っていて、それ以降もずっと曇っていた。天気がどんよりしていたのもあり、エアコンは除湿に設定してソファで働いてみた。数年前から淡路島に帰ってきてリモートワークをしたことは何度かあったが、すべてマクドナルドへ行って電源を借りて作業していた。実家で丸1日リモートワークで働いたのは今回が初めてだと思う。どんな施設でもインターネットとエアコンさえあれば働けるということを改めて実感した。実家なのでお昼になったらおかんがお昼ご飯だと呼びに来る。食べるものも考えなくてよい。&lt;/p>
&lt;p>&lt;a href="/diary/diary/posts/2023/0504/#iijmio-と-iphone-で作るモバイル-wifi-ルーター">iphone で作った wifi ルーター&lt;/a> の 2GiB プランで契約している。普通に macbook でリポジトリを操作したり、課題管理を使ったり、ブラウザで調べものしたり、slack でやり取りしたりしていたら約9時間で 987 MiB の通信量となった。いまやネットワークの通信量を意識することはないと思うが、普通にお仕事したらいまの時代1日 1GiB ぐらい使うもんなんやと気付いた。&lt;/p>
&lt;p>iijmio の管理画面で日次の通信量を当日分も含めて確認できる。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2023/0626_usage.png"/>
&lt;/figure>
&lt;p>1週間とか、実家でリモートワークするなら 2GiB プランだと全然足りない。機をみて 5/10 GiB 程度のプランに変更するとよさそう。これでコワーキングスペースにして複数人が使う想定なら光回線をひかないとネットワークが厳しいということも理解できた。光回線をひくと安くても5,000円/月は固定費がかかってくるので維持費の問題は悩ましいことも分かってきた。&lt;/p></content></item><item><title>法人決算の続き</title><link>/diary/posts/2023/0504/</link><pubDate>Thu, 04 May 2023 08:24:43 +0900</pubDate><guid>/diary/posts/2023/0504/</guid><description>0時に寝て何度か起きて6時過ぎに起きた。休日は朝だらだらしてオフィスへ行くのが9-10時ぐらいになることが多いのだけど、今日は普通に8時過ぎに行けた。
法人決算 朝から法人決算の続き。昨日たまたま消費税の計算をして、祝日やのに e-tax 稼働しているんやと思いながら申告した。これまで休日や祝日は稼働していなかった気がするので時代の変化にあわせてシステムはなるべく24時間稼働するように少しずつ変わってきている。今日も法人決算の続きをやっていて、課税所得を確認して、カテゴリ的には3つに分類される法人3税と呼ばれる税金を算出した。具体的には6つの税金を算出しないといけない。
法人税 (=&amp;gt; 国税 =&amp;gt; e-tax) 法人税 地方法人税 法人住民税 (=&amp;gt; 地方税 =&amp;gt; eltax) 法人県民税 法人市民税 法人事業税 (=&amp;gt; 地方税 =&amp;gt; eltax) 法人事業税 特別法人事業税 過去の法人決算の経験からまず法人住民税と法人事業税を確定させてから法人決算の申告をすべきだというプラクティスがある。というのは、法人住民税と法人事業税の数値になんらかの誤りがあると法人決算で提出する別表の数字も修正しないといけないため、先に地方税を確定させた方が手戻りを少なくできる可能性が高い。電子申請するとそれぞれの書類の数値のバリデーションが機能するので手計算や手入力で誤りがあったときに発見できる可能性がある。これは電子申請をするメリットの1つでもある。
地方税を管轄するのが eltax で国税を管轄するのが e-tax で別システムになる。いまとなっては、事前にチェックしておけばよかったなと思うところだが、あとの祭り。e-tax は5月3-4日が稼働していて5-7日が休止している。eltax は5月3-5日が休止していて6-7日が稼働しているというスケジュールになっていた。双方のシステムが稼働していれば今日中に終えられたものが、なんともちぐはぐなスケジュールで申告を完了させるのは来週以降に持ち越すことになる。また来年やるときはこのそれぞれのシステムの稼働スケジュールを事前にチェックして法人決算の作業日程を決めるように法人決算の issue に書き込んでおいた。来年はもっとうまくやる。
e-tax e-Taxの利用可能時間 eltax 令和5年度の休日運用日 今日のところは法人3税の税金を算出し終えて、それらと関係ない別表の大半を作成した。基本的には決算の試算表から数値を転記したり、特例措置の申請のための書類を作ったりでなにも難しくない。
iijmio と iphone で作るモバイル wifi ルーター 今年に入ってから 実家のオフィス化 の準備を着々と進めている。晩年は足が不自由だった祖父が生活できるよう、倉庫の一部を改築して車椅子でも生活できるような部屋になっていて、ある種の離れのようなスペースになっている。祖父が他界してからは誰も使っていない。トイレもお風呂もキッチンもついていて広さで言えば14畳ぐらいある。これまで使いにくかった理由は2つあってエアコンとインターネットがなかった。この前、母にお願いしてエアコンを購入してもらい、つい先日、設置が完了したらしい。
インターネットの回線をひくことも検討していたが、どうやら5000円/月ぐらいかかることがわかってきた。母はインターネットを必要としていないので月1回ぐらいしか使わないのに5000円も支払うのはもったいないなと一旦ストップしていた。スマートフォンのテザリングでお仕事できないわけではないから当初はそれでもいいかと考えていた。私の個人のスマホとインターネット回線は iijmio を使っていて iij さん好きなので同じように pocket wifi 的なものはないのかな？と調べたら正にそういう記事をみつけた。
格安！IIJmioでポケットWiFiを作る！料金・手順・注意点まとめ よくよく考えたらデータ専用の sim を購入したらあとはモバイル wifi ルーターだけあればよいことに気付いて、それって iphone でできるやんということに気付いて、過去に使っていた古い iphone 11 を再利用できることに気付いた。さらにいまは esim という物理 sim を必要としないソフトウェアベースの sim もあるようで月額の料金も esim の方が安い。 音声通話なしのデータ専用プランで税込で次の金額になる。さらに使わなかったらデータ量は翌月以降に繰越できる。プランによって繰越できる期間が異なる。例えば2GiBなら翌月末まで繰越できる。繰越という概念はたまにしか使わない私の用途にぴったりでひとまず2GiBプランを選択してお試し運用してみることにした。</description><content>&lt;p>0時に寝て何度か起きて6時過ぎに起きた。休日は朝だらだらしてオフィスへ行くのが9-10時ぐらいになることが多いのだけど、今日は普通に8時過ぎに行けた。&lt;/p>
&lt;h2 id="法人決算">法人決算&lt;/h2>
&lt;p>朝から法人決算の続き。昨日たまたま消費税の計算をして、祝日やのに e-tax 稼働しているんやと思いながら申告した。これまで休日や祝日は稼働していなかった気がするので時代の変化にあわせてシステムはなるべく24時間稼働するように少しずつ変わってきている。今日も法人決算の続きをやっていて、課税所得を確認して、カテゴリ的には3つに分類される法人3税と呼ばれる税金を算出した。具体的には6つの税金を算出しないといけない。&lt;/p>
&lt;ul>
&lt;li>法人税 (=&amp;gt; 国税 =&amp;gt; e-tax)
&lt;ul>
&lt;li>法人税&lt;/li>
&lt;li>地方法人税&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>法人住民税 (=&amp;gt; 地方税 =&amp;gt; eltax)
&lt;ul>
&lt;li>法人県民税&lt;/li>
&lt;li>法人市民税&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>法人事業税 (=&amp;gt; 地方税 =&amp;gt; eltax)
&lt;ul>
&lt;li>法人事業税&lt;/li>
&lt;li>特別法人事業税&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>過去の法人決算の経験からまず法人住民税と法人事業税を確定させてから法人決算の申告をすべきだというプラクティスがある。というのは、法人住民税と法人事業税の数値になんらかの誤りがあると法人決算で提出する別表の数字も修正しないといけないため、先に地方税を確定させた方が手戻りを少なくできる可能性が高い。電子申請するとそれぞれの書類の数値のバリデーションが機能するので手計算や手入力で誤りがあったときに発見できる可能性がある。これは電子申請をするメリットの1つでもある。&lt;/p>
&lt;p>地方税を管轄するのが &lt;a href="https://www.eltax.lta.go.jp/">eltax&lt;/a> で国税を管轄するのが &lt;a href="https://www.e-tax.nta.go.jp/">e-tax&lt;/a> で別システムになる。いまとなっては、事前にチェックしておけばよかったなと思うところだが、あとの祭り。e-tax は5月3-4日が稼働していて5-7日が休止している。eltax は5月3-5日が休止していて6-7日が稼働しているというスケジュールになっていた。双方のシステムが稼働していれば今日中に終えられたものが、なんともちぐはぐなスケジュールで申告を完了させるのは来週以降に持ち越すことになる。また来年やるときはこのそれぞれのシステムの稼働スケジュールを事前にチェックして法人決算の作業日程を決めるように法人決算の issue に書き込んでおいた。来年はもっとうまくやる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.e-tax.nta.go.jp/info_center/index.htm">e-tax e-Taxの利用可能時間&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.eltax.lta.go.jp/news/07638">eltax 令和5年度の休日運用日&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>今日のところは法人3税の税金を算出し終えて、それらと関係ない別表の大半を作成した。基本的には決算の試算表から数値を転記したり、特例措置の申請のための書類を作ったりでなにも難しくない。&lt;/p>
&lt;h2 id="iijmio-と-iphone-で作るモバイル-wifi-ルーター">iijmio と iphone で作るモバイル wifi ルーター&lt;/h2>
&lt;p>今年に入ってから &lt;a href="/diary/diary/posts/2023/0321/#実家の出張所オフィスの準備">実家のオフィス化&lt;/a> の準備を着々と進めている。晩年は足が不自由だった祖父が生活できるよう、倉庫の一部を改築して車椅子でも生活できるような部屋になっていて、ある種の離れのようなスペースになっている。祖父が他界してからは誰も使っていない。トイレもお風呂もキッチンもついていて広さで言えば14畳ぐらいある。これまで使いにくかった理由は2つあってエアコンとインターネットがなかった。この前、母にお願いしてエアコンを購入してもらい、つい先日、設置が完了したらしい。&lt;/p>
&lt;p>インターネットの回線をひくことも検討していたが、どうやら5000円/月ぐらいかかることがわかってきた。母はインターネットを必要としていないので月1回ぐらいしか使わないのに5000円も支払うのはもったいないなと一旦ストップしていた。スマートフォンのテザリングでお仕事できないわけではないから当初はそれでもいいかと考えていた。私の個人のスマホとインターネット回線は &lt;a href="https://www.iijmio.jp/">iijmio&lt;/a> を使っていて iij さん好きなので同じように pocket wifi 的なものはないのかな？と調べたら正にそういう記事をみつけた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mobile.inest-inc.co.jp/iijmio-pocket-wifi/">格安！IIJmioでポケットWiFiを作る！料金・手順・注意点まとめ&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>よくよく考えたらデータ専用の sim を購入したらあとはモバイル wifi ルーターだけあればよいことに気付いて、それって iphone でできるやんということに気付いて、過去に使っていた古い iphone 11 を再利用できることに気付いた。さらにいまは &lt;a href="https://www.iijmio.jp/gigaplan/esim/">esim&lt;/a> という物理 sim を必要としないソフトウェアベースの sim もあるようで月額の料金も esim の方が安い。
音声通話なしのデータ専用プランで税込で次の金額になる。さらに使わなかったらデータ量は翌月以降に繰越できる。プランによって繰越できる期間が異なる。例えば2GiBなら翌月末まで繰越できる。繰越という概念はたまにしか使わない私の用途にぴったりでひとまず2GiBプランを選択してお試し運用してみることにした。&lt;/p>
&lt;ul>
&lt;li>1GiB: 165円/月&lt;/li>
&lt;li>2GiB: 440円/月&lt;/li>
&lt;li>5GiB: 660円/月&lt;/li>
&lt;li>10GiB: 1,100円/月&lt;/li>
&lt;li>20GiB: 1,650円/月&lt;/li>
&lt;/ul>
&lt;p>esim というソフトウェアベースのものだと、申し込みして5分後に設定できましたというメールが届き、すぐにアクティベートして iphone 11 に esim の設定をしたら10分後にはインターネットに接続できるようになった。その後 apn の設定を行ってテザリングもできるようになって、30分後には iphone 11 をモバイル wifi ルーターとして macbook からインターネットにアクセスできるかの疎通確認を終えた。&lt;/p>
&lt;p>つまりソフトウェアベースで業務を行うことのワークフローの効率が半端なく高い。これが物理 sim なら数人の人手と待ち時間がかかることは容易に想像できる。物理的にしかできなかったことをソフトウェアベースにしてワークフローを洗練化させることの強力さを実感した。常々、私が課題管理の文脈でコミュニケーションコストを減らせれば生産性が上がると開発者に啓蒙していることと同じで自分がやろうとしていることの概念を追体験するような経験となった。ワークフローの効率を極端に落とすのは人間である。&lt;/p></content></item><item><title>go 1.20.1 を使い始めた</title><link>/diary/posts/2023/0227/</link><pubDate>Mon, 27 Feb 2023 08:17:22 +0900</pubDate><guid>/diary/posts/2023/0227/</guid><description>0時に寝て何度か起きて7時半に起きた。あまりうまく眠れなかった。
go 1.20.1 へのアップグレード リファクタリングの区切りがついたらやろうと思っていて遅れた。すでに 1.20.1 がリリースされている。先日 Go 1.20 リリースパーティ に参加して、いろいろ聞いていると改善されているところや新しい機能を試してみたいものがいくつかみつかった。単純にアップグレードするだけでも最大でビルド時間が10%短縮される可能性がある。1.18 と 1.19 で generics 対応でビルド時間が遅くなっていたのが 1.17 相当に改善されたらしい。やっぱり generics はコンパイラを複雑にするものなのでコンパイル時間が長くなる傾向があるんやなと話しを聞いていて思ったりもした。ついでに依存ライブラリなどのバージョンアップもまとめてやった。単体テストと結合テストが普通には揃ってきたのでバージョンアップなども安心して実行できる。
rocky linux のネットワーク設定 テスト環境に使っている rocky linux の ip アドレスを変更する必要があったので調べてみた。ちゃんとした公式のガイドが出てきてすごいなと感心した。
Network Configuration - Rocky Linux 9 ip アドレスを確認するコマンドが ifconfig から ip に変わっていたり、ネットワーク設定のためのツールも私が知っているものとは全然変わってしまっている。
$ ip addr Network Manager のサービスで設定されているようでそのための設定ファイルは次の場所に保存されていた。
/etc/NetworkManager/system-connections/my-device.nmconnection これを書き換えるツールとして nmtui という tui ツールと nmcli という cli ツールの2つがある。tui とか懐かしいなとか思いながら操作していた。ssh 経由で設定していたので cli でいきなり設定を反映するよりも tui で設定ファイルを書き換えて os を再起動するのがよいだろうと考えてやってみた。ドキュメントに書いてある通りに操作したら意図した ip アドレスを設定して変更できた。</description><content>&lt;p>0時に寝て何度か起きて7時半に起きた。あまりうまく眠れなかった。&lt;/p>
&lt;h2 id="go-1201-へのアップグレード">go 1.20.1 へのアップグレード&lt;/h2>
&lt;p>リファクタリングの区切りがついたらやろうと思っていて遅れた。すでに 1.20.1 がリリースされている。先日 &lt;a href="https://gocon.connpass.com/event/273096/">Go 1.20 リリースパーティ&lt;/a> に参加して、いろいろ聞いていると改善されているところや新しい機能を試してみたいものがいくつかみつかった。単純にアップグレードするだけでも最大でビルド時間が10%短縮される可能性がある。1.18 と 1.19 で generics 対応でビルド時間が遅くなっていたのが 1.17 相当に改善されたらしい。やっぱり generics はコンパイラを複雑にするものなのでコンパイル時間が長くなる傾向があるんやなと話しを聞いていて思ったりもした。ついでに依存ライブラリなどのバージョンアップもまとめてやった。単体テストと結合テストが普通には揃ってきたのでバージョンアップなども安心して実行できる。&lt;/p>
&lt;iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/b76374a32d394b66afdfea89da855927?slide=1" title="What's new in Go 1.20?" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 600px; height: auto; aspect-ratio: 560 / 314;" data-ratio="1.78343949044586">&lt;/iframe>
&lt;h2 id="rocky-linux-のネットワーク設定">rocky linux のネットワーク設定&lt;/h2>
&lt;p>テスト環境に使っている rocky linux の ip アドレスを変更する必要があったので調べてみた。ちゃんとした公式のガイドが出てきてすごいなと感心した。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.rockylinux.org/guides/network/basic_network_configuration/">Network Configuration - Rocky Linux 9&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ip アドレスを確認するコマンドが ifconfig から ip に変わっていたり、ネットワーク設定のためのツールも私が知っているものとは全然変わってしまっている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ip addr
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Network Manager のサービスで設定されているようでそのための設定ファイルは次の場所に保存されていた。&lt;/p>
&lt;pre tabindex="0">&lt;code>/etc/NetworkManager/system-connections/my-device.nmconnection
&lt;/code>&lt;/pre>&lt;p>これを書き換えるツールとして nmtui という tui ツールと nmcli という cli ツールの2つがある。tui とか懐かしいなとか思いながら操作していた。ssh 経由で設定していたので cli でいきなり設定を反映するよりも tui で設定ファイルを書き換えて os を再起動するのがよいだろうと考えてやってみた。ドキュメントに書いてある通りに操作したら意図した ip アドレスを設定して変更できた。&lt;/p></content></item></channel></rss>