<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rpm on forest nook</title><link>/diary/tags/rpm/</link><description>Recent content in Rpm on forest nook</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Thu, 20 Apr 2023 09:44:23 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/rpm/index.xml" rel="self" type="application/rss+xml"/><item><title>git コマンドでアーカイブ</title><link>/diary/posts/2023/0420/</link><pubDate>Thu, 20 Apr 2023 09:44:23 +0900</pubDate><guid>/diary/posts/2023/0420/</guid><description>2時に寝て7時に起きた。昨日も遅かったので0時ぐらいに晩ご飯を食べてうまく眠れなかった。体調が悪かったので今日は早めにお仕事を終えて帰って寝てた。
rpm パッケージングのためのアーカイブ プロダクトは docker compose を使ってデプロイするので docker-compose.yml と関連する設定などのサンプルファイルをパッケージングして rpm として提供する。ビルドは必要なく、初期は数ファイルだったので rpm の SOURCES ディレクトリに直接配置して個別に SourceXx と指定してパッケージングしていた。設定のサンプルファイルが増えてくると1つずつ指定するのが面倒になってきてアーカイブすることにした。rpm を作るための Makefile で次のように git コマンドからアーカイブを作ることができる。このやり方のメリットの1つは git でアーカイブすることでリポジトリにコミットされているものだけが使われるため、対象ディレクトリに中間ファイルなどが散らかっていても無視してくれて都合がよい。
VERSION = 1.0.0 SRC_PREFIX = my-product-$(VERSION) SRC_ARCHIVE = $(SRC_PREFIX).tar.bz2 SOURCES/$(SRC_ARCHIVE): git -C ../my-src archive HEAD --prefix $(SRC_PREFIX)/ -o $(SRC_ARCHIVE) mv ../my-src/$(SRC_ARCHIVE) $@ make したときに my-product-1.0.0.tar.bz のようなアーカイブが rpm パッケージングするときの SOURCES 配下に置かれる。そして rpm の spec ファイルでこのアーカイブを Source0 として指定して %prep で %setup マクロを呼び出すと展開される。
Source0: my-product-%{version}.tar.bz2 ... %prep %setup たったこれだけで spec ファイルの Source 管理をシンプルにできて保守コストが下がるのでうまいやり方だなと学びになった。</description><content>&lt;p>2時に寝て7時に起きた。昨日も遅かったので0時ぐらいに晩ご飯を食べてうまく眠れなかった。体調が悪かったので今日は早めにお仕事を終えて帰って寝てた。&lt;/p>
&lt;h2 id="rpm-パッケージングのためのアーカイブ">rpm パッケージングのためのアーカイブ&lt;/h2>
&lt;p>プロダクトは docker compose を使ってデプロイするので docker-compose.yml と関連する設定などのサンプルファイルをパッケージングして rpm として提供する。ビルドは必要なく、初期は数ファイルだったので rpm の SOURCES ディレクトリに直接配置して個別に SourceXx と指定してパッケージングしていた。設定のサンプルファイルが増えてくると1つずつ指定するのが面倒になってきてアーカイブすることにした。rpm を作るための Makefile で次のように git コマンドからアーカイブを作ることができる。このやり方のメリットの1つは git でアーカイブすることでリポジトリにコミットされているものだけが使われるため、対象ディレクトリに中間ファイルなどが散らかっていても無視してくれて都合がよい。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>VERSION &lt;span style="color:#f92672">=&lt;/span> 1.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SRC_PREFIX &lt;span style="color:#f92672">=&lt;/span> my-product-&lt;span style="color:#66d9ef">$(&lt;/span>VERSION&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SRC_ARCHIVE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>SRC_PREFIX&lt;span style="color:#66d9ef">)&lt;/span>.tar.bz2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">SOURCES/$(SRC_ARCHIVE)&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git -C ../my-src archive HEAD --prefix &lt;span style="color:#66d9ef">$(&lt;/span>SRC_PREFIX&lt;span style="color:#66d9ef">)&lt;/span>/ -o &lt;span style="color:#66d9ef">$(&lt;/span>SRC_ARCHIVE&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mv ../my-src/&lt;span style="color:#66d9ef">$(&lt;/span>SRC_ARCHIVE&lt;span style="color:#66d9ef">)&lt;/span> $@
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>make したときに my-product-1.0.0.tar.bz のようなアーカイブが rpm パッケージングするときの SOURCES 配下に置かれる。そして rpm の spec ファイルでこのアーカイブを &lt;code>Source0&lt;/code> として指定して %prep で %setup マクロを呼び出すと展開される。&lt;/p>
&lt;pre tabindex="0">&lt;code>Source0: my-product-%{version}.tar.bz2
...
%prep
%setup
&lt;/code>&lt;/pre>&lt;p>たったこれだけで spec ファイルの Source 管理をシンプルにできて保守コストが下がるのでうまいやり方だなと学びになった。&lt;/p></content></item><item><title>rpm のパッケージングを作り直す</title><link>/diary/posts/2023/0413/</link><pubDate>Thu, 13 Apr 2023 09:30:07 +0900</pubDate><guid>/diary/posts/2023/0413/</guid><description>1時に寝て何度か起きてあまり眠れなかった。昨日は遅くに帰ってきて晩ご飯を遅くに食べたので寝ていて吐き気がしてうまく眠れなかった。寝る前に食べることはできないみたい。
rpm パッケージング再び ビルドができるようになったモジュール を rpm でパッケージングする。rpm でのビルドもできる状態で渡してもらえたので私が開発したモジュールを追加してパッケージングを修正する。rpm のパッケージングを行うのも5年ぶりといったところ。コンテナに慣れてしまって rpm を使うことはもうないと思っていたけれど、まだまだ現役であることを実感する。spec ファイルは普通に読めるので既存の設定や、他の rpm パッケージの spec ファイルの記述などもみながら、自分のモジュールで必要な設定を追加していく。久しぶりだったわりには順調に作業が進捗して2-3時間もやっていて追加の修正をして、実際にインストールして動作確認もできた。
rpm のマクロを確認する。
$ rpm --eval &amp;#34;%{_libdir}&amp;#34; /usr/lib64 あるサーバーサービスを systemd 経由で実行させる。内部的に環境変数を使っている。systemd の EnvironmentFile で環境変数を設定したファイルへのパスを指定できる。例えば、次のように EnvironmentFile にパスを設定する。
[Service] Type=simple EnvironmentFile=/opt/path/to/my.env ExecStart=/opt/path/to/bin/my-service KillMode=process StartLimitBurst=2 Restart=on-abnormal User=ldap Group=ldap この環境変数にはパスワードのような機密情報も含むので rpm の %files で root 権限でのみ読めるようにアクセス制限を設定する。systemd 自体は root 権限で動くので環境変数の設定は root が行って my-service は ldap のユーザー／グループ権限で動く。
%attr(600,root,root) %config(noreplace) %{_sysconfdir}/path/to/my.env もう rpm なんか古の技術で自分で作ることなんか今後はないやろと思っていた。5年ぶりぐらいに、いま rpm でパッケージングしていて、spec ファイルを普通に読めるので簡単なパッケージングぐらいはすぐできる。なんでもやっといたら役に立つもんやと思ったりもする。
&amp;mdash; Tetsuya Morimoto (@t2y) April 13, 2023</description><content>&lt;p>1時に寝て何度か起きてあまり眠れなかった。昨日は遅くに帰ってきて晩ご飯を遅くに食べたので寝ていて吐き気がしてうまく眠れなかった。寝る前に食べることはできないみたい。&lt;/p>
&lt;h2 id="rpm-パッケージング再び">rpm パッケージング再び&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2023/0411/#ビルド問題の解決">ビルドができるようになったモジュール&lt;/a> を rpm でパッケージングする。rpm でのビルドもできる状態で渡してもらえたので私が開発したモジュールを追加してパッケージングを修正する。rpm のパッケージングを行うのも5年ぶりといったところ。コンテナに慣れてしまって rpm を使うことはもうないと思っていたけれど、まだまだ現役であることを実感する。spec ファイルは普通に読めるので既存の設定や、他の rpm パッケージの spec ファイルの記述などもみながら、自分のモジュールで必要な設定を追加していく。久しぶりだったわりには順調に作業が進捗して2-3時間もやっていて追加の修正をして、実際にインストールして動作確認もできた。&lt;/p>
&lt;p>rpm のマクロを確認する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ rpm --eval &lt;span style="color:#e6db74">&amp;#34;%{_libdir}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/lib64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>あるサーバーサービスを systemd 経由で実行させる。内部的に環境変数を使っている。systemd の EnvironmentFile で環境変数を設定したファイルへのパスを指定できる。例えば、次のように EnvironmentFile にパスを設定する。&lt;/p>
&lt;pre tabindex="0">&lt;code>[Service]
Type=simple
EnvironmentFile=/opt/path/to/my.env
ExecStart=/opt/path/to/bin/my-service
KillMode=process
StartLimitBurst=2
Restart=on-abnormal
User=ldap
Group=ldap
&lt;/code>&lt;/pre>&lt;p>この環境変数にはパスワードのような機密情報も含むので rpm の %files で root 権限でのみ読めるようにアクセス制限を設定する。systemd 自体は root 権限で動くので環境変数の設定は root が行って my-service は ldap のユーザー／グループ権限で動く。&lt;/p>
&lt;pre tabindex="0">&lt;code>%attr(600,root,root) %config(noreplace) %{_sysconfdir}/path/to/my.env
&lt;/code>&lt;/pre>&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">もう rpm なんか古の技術で自分で作ることなんか今後はないやろと思っていた。5年ぶりぐらいに、いま rpm でパッケージングしていて、spec ファイルを普通に読めるので簡単なパッケージングぐらいはすぐできる。なんでもやっといたら役に立つもんやと思ったりもする。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1646540939740213248?ref_src=twsrc%5Etfw">April 13, 2023&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item></channel></rss>