<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>bizpy on forest nook</title><link>/diary/tags/bizpy/</link><description>Recent content in bizpy on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Wed, 27 Oct 2021 08:10:21 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/bizpy/index.xml" rel="self" type="application/rss+xml"/><item><title>bizpy 再開</title><link>/diary/posts/2021/1027/</link><pubDate>Wed, 27 Oct 2021 08:10:21 +0900</pubDate><guid>/diary/posts/2021/1027/</guid><description>2時に寝て6時に起きた。前日の夜にウォーキングしたせいか、よく眠れた。朝活を終えてから朝ご飯を作って食べてそのままオフィスに出社した。6時起きを日課にした方が生活のリズムがよい。夕方に眠くなって1時間ほど昼寝した。
朝活: ミクロ経済学入門の入門 【三宮.dev オンライン】リモート朝活もくもく会 で第4章の供給曲線を読んだ。需要曲線の逆からの視点なので考え方は同じで図の形が異なる。用語がいくつか出てきたのでまとめる。
収穫逓減 (しゅうかくていげん): 製品をより多く生産するのにかかる経費が増大していくこと 生産活動において2倍の生産量を生み出すには2倍以上の経費がかかる 費用関数: 生産量と費用との関係をあらわす 限界費用: 追加的に1単位生産する費用 3個を生産する費用は、1個目の限界費用 + 2個目の限界費用 + 3個目の限界費用 個数が増えるごとに費用は高くなっていく 費用を図示するときは限界費用に分解した方が視覚的にわかりやすい 限界費用逓増: 生産するごとに限界費用が高まっていくこと 「逓」という漢字は「つぎつぎ」や「だんだん」という意味をもつ。
プライステイカー: 自分の生産量が価格に影響を与えられない 減産により希少価値を高め価格を吊り上げる市場操作ができない 独占企業: プライステイカーの反対。 利潤: 売上 - 経費 最適解: 利潤を最大化する生産量 あと1個追加して生産すると利益がマイナスになるところ 生産者余剰: すべての企業の利潤の和 供給曲線: すべての企業の限界費用をヨコに足し合わせた曲線 データ指向アプリケーションデザイン 昨日の続き。8.4 を読んで8章分散システムの問題を読み終えた。全体としても学びになったけれど、とくに 8.3 信頼性の低いクロックの節が全く開発・運用で意識したことがなかったので私にとっては学びになった。
分散システムにおいて発生する厄介な問題がある。
ネットワーク経由でパケットを送信しようとした場合、そのパケットはロストしたり、どれほど遅延するか分からない。同様に、レスポンスもロストしたり遅延したりするので、レスポンスを受け取れなかった場合には元々のメッセージが到達したかどうかも分からない</description><content>&lt;p>2時に寝て6時に起きた。前日の夜にウォーキングしたせいか、よく眠れた。朝活を終えてから朝ご飯を作って食べてそのままオフィスに出社した。6時起きを日課にした方が生活のリズムがよい。夕方に眠くなって1時間ほど昼寝した。&lt;/p>
&lt;h2 id="朝活-ミクロ経済学入門の入門">朝活: ミクロ経済学入門の入門&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/228969/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> で第4章の供給曲線を読んだ。需要曲線の逆からの視点なので考え方は同じで図の形が異なる。用語がいくつか出てきたのでまとめる。&lt;/p>
&lt;ul>
&lt;li>収穫逓減 (しゅうかくていげん): 製品をより多く生産するのにかかる経費が増大していくこと
&lt;ul>
&lt;li>生産活動において2倍の生産量を生み出すには2倍以上の経費がかかる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>費用関数: 生産量と費用との関係をあらわす&lt;/li>
&lt;li>限界費用: 追加的に1単位生産する費用
&lt;ul>
&lt;li>3個を生産する費用は、1個目の限界費用 + 2個目の限界費用 + 3個目の限界費用
&lt;ul>
&lt;li>個数が増えるごとに費用は高くなっていく&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>費用を図示するときは限界費用に分解した方が視覚的にわかりやすい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>限界費用逓増: 生産するごとに限界費用が高まっていくこと&lt;/li>
&lt;/ul>
&lt;p>「&lt;a href="https://dictionary.goo.ne.jp/word/kanji/%E9%80%93/">逓&lt;/a>」という漢字は「つぎつぎ」や「だんだん」という意味をもつ。&lt;/p>
&lt;ul>
&lt;li>プライステイカー: 自分の生産量が価格に影響を与えられない
&lt;ul>
&lt;li>減産により希少価値を高め価格を吊り上げる市場操作ができない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>独占企業: プライステイカーの反対。&lt;/li>
&lt;li>利潤: 売上 - 経費&lt;/li>
&lt;li>最適解: 利潤を最大化する生産量
&lt;ul>
&lt;li>あと1個追加して生産すると利益がマイナスになるところ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>生産者余剰: すべての企業の利潤の和&lt;/li>
&lt;li>供給曲線: すべての企業の限界費用をヨコに足し合わせた曲線&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="/diary/diary/img/2021/1027_supply-curve.png"/>
&lt;/figure>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>昨日の続き。8.4 を読んで8章分散システムの問題を読み終えた。全体としても学びになったけれど、とくに 8.3 信頼性の低いクロックの節が全く開発・運用で意識したことがなかったので私にとっては学びになった。&lt;/p>
&lt;blockquote>
&lt;p>分散システムにおいて発生する厄介な問題がある。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ネットワーク経由でパケットを送信しようとした場合、そのパケットはロストしたり、どれほど遅延するか分からない。同様に、レスポンスもロストしたり遅延したりするので、レスポンスを受け取れなかった場合には元々のメッセージが到達したかどうかも分からない&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ノードのクロックは他のノードと大きくずれているかもしれない（できる限りの努力をして NTP をセットアップしたとしても）。クロックは急に進んだり戻ったりするかもしれず、たいていはクロックの誤差をうまく計る方法がないので、クロックに依存するのは危険&lt;/p>
&lt;/li>
&lt;li>
&lt;p>プロセスは処理中にいつどれほどの長さ一時停止するかもしれず（おそらくはstop-the-worldガベージコレクタのため）、他のノードから落ちていると見なされた後に自身に一時停止があったことを理解しないままに復活するかもしれない。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>こういった &lt;strong>部分障害&lt;/strong> が生じうるのが分散システムの特徴と言える。ソフトウェアが他のノードが関わる何かをしようとした場合、それは時おり失敗したり、ランダムに速度が落ちたり、まったくレスポンスが返されない（そして最終的にはタイムアウトする）といった可能性がある。分散システムでは、部分障害への耐性をソフトウェアに組み込み、システムの構成要素が一部破損していてもシステム全体としては機能し続けられるようにする。&lt;/p>
&lt;p>フォールトに耐えるための最初のステップはフォールトを &lt;strong>検出&lt;/strong> することだが、それさえも難しい。多くのシステムは、ノードに障害が生じていることを検出する正確な仕組みを持たないので、ほとんどの分散アルゴリズムはリモートノードが生きているかどうかを判断するのにタイムアウトに頼る。しかし、タイムアウトはネットワークの障害とノードの障害を区別できず、ネットワークの遅延変動のために間違ってノードがクラッシュしていると誤検知することもある。弱っているものの落ちてはいないノードは、きれいに落ちているノードよりもさらに扱いが難しくなる可能性がある。&lt;/p>
&lt;p>フォールトが検出されたとして、システムがそれに耐えられるようにすることも簡単ではない。マシン間にはグローバルな変数も、共有メモリも、共通の情報やその他何らかの共有された状態もない。ノードは現在の時刻についてさえ合意できず、ましてやもっと重大なことに合意することなどできない。あるノードから他のノードへ情報を流せる唯一の方法は、その情報を信頼できないネットワークを通じて送ることだけである。重要な判断は単一のノードだけで安全に下すことができないので、他のノードの助けを得てクオラムが合意に至るようにするためのプロトコルが必要となる。&lt;/p>
&lt;p>同じ操作をすれば決まって同じ結果を返してくれるような、単一コンピュータにおける理想化された数学的な完全さの中でソフトウェアを書くのに慣れていると、分散システムの雑然とした物理的な現実への移行はちょっとしたショックを伴う。一方、分散システムのエンジニアは、しばしば単一のコンピュータ上で解決できる問題を簡単なものだと見なすが、実際のところ今日では単一のコンピュータがこなせる仕事量はかなりのものになっている。単一のマシンでシンプルにことを済ませられるなら、概してそうする価値はある。&lt;/p>
&lt;p>分散システムを利用する理由はスケーラビリティだけではない。耐障害性や低レイテンシ（地理的にユーザーの近くにデータを置けることによる）も同様に重要な目標であり、こういったことは単一ノードでは実現できない。本章ではネットワーク、クロック、プロセスの信頼性の低さが避けがたい自然の法則なのかも調べた。安全ではなく、クリティカルではないシステムの多くでは、高価な高信頼性よりも安価な低信頼性が選択される。また、信頼性の高いコンポーネントを前提としているスーパーコンピュータも取り上げました。スーパーコンピュータはその前提が故に、コンポーネントに障害が生じてしまった場合には完全に停止させて再起動することになる。これに対し、分散システムはサービスレベルでは中断することなくいつまでも動作し続けられる。これは、少なくとも理論上はすべてのフォールトやメンテナンスはノードレベルで処理できるためである。&lt;/p>
&lt;/blockquote>
&lt;h2 id="お昼ご飯">お昼ご飯&lt;/h2>
&lt;p>気分でスーパー寄って買いものして家に帰り、お昼ご飯を作って食べた。前に適当に作った &lt;a href="/diary/diary/posts/2021/1025/#お昼寝">かぼちゃの煮物&lt;/a> がおいしかったので再挑戦してみた。今度は圧力鍋を使っていろいろ具材を入れてみた。過去に作っておいしかった料理のレシピを evernote に書いたりしていたけど、もういまは書いてないので気が向いたら日記に書くようにする。&lt;/p>
&lt;p>材料&lt;/p>
&lt;ul>
&lt;li>A
&lt;ul>
&lt;li>水 900cc&lt;/li>
&lt;li>めんつゆ 100c&lt;/li>
&lt;li>醤油 適量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>B
&lt;ul>
&lt;li>かぼちゃ 1/4切れ&lt;/li>
&lt;li>なす 3個&lt;/li>
&lt;li>にんじん 2本&lt;/li>
&lt;li>玉ねぎ 1個&lt;/li>
&lt;li>しめじ 1パック&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>C
&lt;ul>
&lt;li>卵 2個&lt;/li>
&lt;li>豆苗&lt;/li>
&lt;li>せみ餃子&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>作り方&lt;/p>
&lt;ol>
&lt;li>圧力鍋に A を入れて火にかける&lt;/li>
&lt;li>B の野菜を切りながら圧力鍋に入れていく&lt;/li>
&lt;li>圧力鍋に B をすべて入れたら圧をかける (高圧30秒)&lt;/li>
&lt;li>圧が下がったら蓋をあけて C を入れる&lt;/li>
&lt;li>C に火が通るまで2分ほど煮込む&lt;/li>
&lt;/ol>
&lt;p>所感&lt;/p>
&lt;p>圧力が強過ぎたのか、かぼちゃが煮汁に溶け出してしまって原形がなくなってしまった。スープとして飲んでもおいしいけれども、水を入れ過ぎたのかもしれない。肉の代わりに餃子を使ってみた。水餃子っぽくなるので焼き餃子で油使うよりヘルシーな気持ちになっておいしい。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1027_pumpkin.jpg"/>
&lt;/figure>
&lt;h2 id="bizpy-勉強会">bizpy 勉強会&lt;/h2>
&lt;p>&lt;a href="https://bizpy.connpass.com/event/198717/">Python で Slack のインテグレーションをやってみる勉強会 #1&lt;/a> を開催した。半年以上開催してなかったので億劫になってしまっていたけど、再開できてよかった。10名ほどが参加してくれた。用意したコンテンツを話し終えたら8時半ぐらいで時間もちょうどよかった。初参加者も数人いた。slack インテグレーションの調査も兼ねてあと2-3回は集中的にやっていきたい。&lt;/p></content></item><item><title>BizPy 再始動</title><link>/diary/posts/2021/1011/</link><pubDate>Mon, 11 Oct 2021 08:37:53 +0900</pubDate><guid>/diary/posts/2021/1011/</guid><description>昨日は晩ご飯食べてからのんびりしていた。寝て起きての繰り返しだったので何時に寝たのかよくわからない。夜、本を読もうと思っていたのにダラダラ過ごしてしまった。朝は7時半に起きた。朝起きたら Python で Unicode 正規化 NFC/NFD の文字列を扱う がはてブでホットエントリ化してた。昨日、書評を書いたからその記事かと期待したけど、なぜか2年ほど前に書いた古い記事だった。なんかがっかり。そして、その理由は全くわからない。1日経って夜の時点ではてブが82個ついている。昔は10個もついたら嬉しかったものだけど、いまは100個ぐらいついてもなんとも思わない。
fin-pyコードリーディング会に発表準備 fin-pyコードリーディング会#4 に参加することにした。過去にオブジェクトストレージの開発に関わっていたからデータストアやストレージに関することは興味がある。たまたまツールの store.py を題材にしていたので読んでしまった。簡単にコードを読んで気になったところをイベントの hackmd に記載した。やっていることの詳細をよくわかっていないので、コードレビューみたいになってしまった。
https://hackmd.io/bFBFaPbYS1Kqfc97HMlp7Q?view BizPy のコミュニティ活動を再開 前にやってたお仕事がうまくいかなくて他のことに時間を費やす余裕がなくてお休みしてた。本当はもっと早く再開してもよかったんだけど、新しいことに挑戦しているときにあまり他のことに注意を取られたくないという考えもあって少し保留していた。新しいことへの活動も一段落して方向性や展望もみえてきたので BizPy も再開することにした。ちょうど Slack のインテグレーションを調べようと思ったところだったので弾みを付ける意図でも都合がよい。複数の意味でタイミングがよかった。また参加者が戻ってきてくれると嬉しい。
Python で Slack のインテグレーションをやってみる勉強会 #1 プロコンの続き ネットで話題になったせいか、当事者同士で話し合う場が設けられたという公式発表が行われた。
第32回高専プロコン秋田大会自由部門プレゼン審査発表順番号５の質疑応答について、発表者・質問者双方の相互理解の場を設けさせて頂きました。#procon32 pic.twitter.com/nlzujvJ7Hv
&amp;mdash; KosenProcon (@KosenProcon) October 10, 2021 これ以上、外野がとやかく言う必要はないと思うけど、一方で立場の強い人が有利になってしまうため、運営はハラスメント行為を行った審査員へ然るべき措置をすべきといった意見もみられた。一理あるかもしれないが、そこまでするほどの問題かというのは個人的に思う。タイムラインを眺めていると、ハラスメントを問題視する人は、その背景や経緯や意図はすべて横に置いておいてハラスメント的言動や態度を糾弾する。この人たちと背景も考慮して整理しようとする人たちとは全く議論が噛み合わない。ハラスメントは絶対許すまじという社会の変化や誤った人への行き過ぎたキャンセルカルチャーに私はやや圧倒される。
そう思っていると、私のタイムラインでは「まさかりを投げる」という表現そのものや行為のハラスメントの是非の議論も巻き起こっていた。あまり最近はまさかりを投げるという表現は見かけないんだけど、「マウント禁止」というのをちょくちょくみかける。ハラスメントと根っこは同じで悪気の有無に関係なく発信側が責めを負うようになったんだなと感じる。
まさかりの議論とは別に、最近勉強会で「マウント禁止」というルールもよくみかける。これもマウントされたと感じる人と、知っていることを教えようとする人との関係の難しさを感じる。多少の間違いやもっとこうした方がいいよといったアドバイスをしなくなる人も多いのでは？という気はする。
&amp;mdash; Tetsuya Morimoto (@t2y) October 11, 2021</description><content>&lt;p>昨日は晩ご飯食べてからのんびりしていた。寝て起きての繰り返しだったので何時に寝たのかよくわからない。夜、本を読もうと思っていたのにダラダラ過ごしてしまった。朝は7時半に起きた。朝起きたら &lt;a href="https://t2y.hatenablog.jp/entry/2019/06/29/150125">Python で Unicode 正規化 NFC/NFD の文字列を扱う&lt;/a> がはてブでホットエントリ化してた。昨日、書評を書いたからその記事かと期待したけど、なぜか2年ほど前に書いた古い記事だった。なんかがっかり。そして、その理由は全くわからない。1日経って夜の時点ではてブが82個ついている。昔は10個もついたら嬉しかったものだけど、いまは100個ぐらいついてもなんとも思わない。&lt;/p>
&lt;h2 id="fin-pyコードリーディング会に発表準備">fin-pyコードリーディング会に発表準備&lt;/h2>
&lt;p>&lt;a href="https://fin-py.connpass.com/event/226933/">fin-pyコードリーディング会#4&lt;/a> に参加することにした。過去にオブジェクトストレージの開発に関わっていたからデータストアやストレージに関することは興味がある。たまたまツールの &lt;code>store.py&lt;/code> を題材にしていたので読んでしまった。簡単にコードを読んで気になったところをイベントの hackmd に記載した。やっていることの詳細をよくわかっていないので、コードレビューみたいになってしまった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hackmd.io/bFBFaPbYS1Kqfc97HMlp7Q?view">https://hackmd.io/bFBFaPbYS1Kqfc97HMlp7Q?view&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="bizpy-のコミュニティ活動を再開">BizPy のコミュニティ活動を再開&lt;/h2>
&lt;p>前にやってたお仕事がうまくいかなくて他のことに時間を費やす余裕がなくてお休みしてた。本当はもっと早く再開してもよかったんだけど、新しいことに挑戦しているときにあまり他のことに注意を取られたくないという考えもあって少し保留していた。新しいことへの活動も一段落して方向性や展望もみえてきたので BizPy も再開することにした。ちょうど Slack のインテグレーションを調べようと思ったところだったので弾みを付ける意図でも都合がよい。複数の意味でタイミングがよかった。また参加者が戻ってきてくれると嬉しい。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://bizpy.connpass.com/event/198717/">Python で Slack のインテグレーションをやってみる勉強会 #1&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="プロコンの続き">プロコンの続き&lt;/h2>
&lt;p>ネットで話題になったせいか、当事者同士で話し合う場が設けられたという公式発表が行われた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">第32回高専プロコン秋田大会自由部門プレゼン審査発表順番号５の質疑応答について、発表者・質問者双方の相互理解の場を設けさせて頂きました。&lt;a href="https://twitter.com/hashtag/procon32?src=hash&amp;amp;ref_src=twsrc%5Etfw">#procon32&lt;/a> &lt;a href="https://t.co/nlzujvJ7Hv">pic.twitter.com/nlzujvJ7Hv&lt;/a>&lt;/p>&amp;mdash; KosenProcon (@KosenProcon) &lt;a href="https://twitter.com/KosenProcon/status/1447192976946384901?ref_src=twsrc%5Etfw">October 10, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>これ以上、外野がとやかく言う必要はないと思うけど、一方で立場の強い人が有利になってしまうため、運営はハラスメント行為を行った審査員へ然るべき措置をすべきといった意見もみられた。一理あるかもしれないが、そこまでするほどの問題かというのは個人的に思う。タイムラインを眺めていると、ハラスメントを問題視する人は、その背景や経緯や意図はすべて横に置いておいてハラスメント的言動や態度を糾弾する。この人たちと背景も考慮して整理しようとする人たちとは全く議論が噛み合わない。ハラスメントは絶対許すまじという社会の変化や誤った人への行き過ぎたキャンセルカルチャーに私はやや圧倒される。&lt;/p>
&lt;p>そう思っていると、私のタイムラインでは「まさかりを投げる」という表現そのものや行為のハラスメントの是非の議論も巻き起こっていた。あまり最近はまさかりを投げるという表現は見かけないんだけど、「マウント禁止」というのをちょくちょくみかける。ハラスメントと根っこは同じで悪気の有無に関係なく発信側が責めを負うようになったんだなと感じる。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">まさかりの議論とは別に、最近勉強会で「マウント禁止」というルールもよくみかける。これもマウントされたと感じる人と、知っていることを教えようとする人との関係の難しさを感じる。多少の間違いやもっとこうした方がいいよといったアドバイスをしなくなる人も多いのでは？という気はする。&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1447429693959860236?ref_src=twsrc%5Etfw">October 11, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item></channel></rss>