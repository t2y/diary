<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>event on forest nook</title><link>/diary/tags/event/</link><description>Recent content in event on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Wed, 02 Mar 2022 13:28:44 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/event/index.xml" rel="self" type="application/rss+xml"/><item><title>シェルスクリプトも進化する</title><link>/diary/posts/2022/0302/</link><pubDate>Wed, 02 Mar 2022 13:28:44 +0900</pubDate><guid>/diary/posts/2022/0302/</guid><description>23時に寝て2時に起きて6時に起きた。
シェルスクリプト再考 久しぶりにシュルスクリプトを書いていて、ユーティリティ関数をうまいこと実装できないかを調べていたら nameref という仕組みが bash 4.3 以降で使えるらしい。私の bash 環境は 5.0.17 なので、bash 5 以上という制約にしてしまってもよいだろうと思う。例えば、こんなことができる。シェルスクリプトで split を実装するの面倒よね。
function split() { local -n arr=&amp;#34;$1&amp;#34; local values=&amp;#34;$2&amp;#34; local sep=&amp;#34;${3:-,}&amp;#34; IFS=&amp;#34;${sep}&amp;#34; read -a arr &amp;lt;&amp;lt;&amp;lt; $(echo &amp;#34;$values&amp;#34; | tr -d &amp;#39;[:space:]&amp;#39;) } function test() { split mylist &amp;#34;a, b, c&amp;#34; echo &amp;#34;&amp;#39;${mylist[0]}&amp;#39;&amp;#34; echo &amp;#34;&amp;#39;${mylist[1]}&amp;#39;&amp;#34; echo &amp;#34;&amp;#39;${mylist[2]}&amp;#39;&amp;#34; } 実行結果。ちょっと感動した。
$ test &amp;#39;a&amp;#39; &amp;#39;b&amp;#39; &amp;#39;c&amp;#39; How to return an array in bash without using globals? 3.</description><content>&lt;p>23時に寝て2時に起きて6時に起きた。&lt;/p>
&lt;h2 id="シェルスクリプト再考">シェルスクリプト再考&lt;/h2>
&lt;p>久しぶりにシュルスクリプトを書いていて、ユーティリティ関数をうまいこと実装できないかを調べていたら &lt;strong>nameref&lt;/strong> という仕組みが bash 4.3 以降で使えるらしい。私の bash 環境は 5.0.17 なので、bash 5 以上という制約にしてしまってもよいだろうと思う。例えば、こんなことができる。シェルスクリプトで split を実装するの面倒よね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#66d9ef">function&lt;/span> split&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
local -n arr&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local values&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$2&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>3&lt;span style="color:#66d9ef">:-&lt;/span>,&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
IFS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>sep&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
read -a arr &lt;span style="color:#f92672">&amp;lt;&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$values&lt;span style="color:#e6db74">&amp;#34;&lt;/span> | tr -d &lt;span style="color:#e6db74">&amp;#39;[:space:]&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> test&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
split mylist &lt;span style="color:#e6db74">&amp;#34;a, b, c&amp;#34;&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;&amp;#39;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>mylist[0]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#34;&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;&amp;#39;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>mylist[1]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#34;&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;&amp;#39;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>mylist[2]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#34;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>実行結果。ちょっと感動した。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ test
&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;b&amp;#39;&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;c&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/10582763/how-to-return-an-array-in-bash-without-using-globals">How to return an array in bash without using globals?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameters.html">3.4 Shell Parameters&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="bizpy-勉強会">bizpy 勉強会&lt;/h2>
&lt;p>&lt;a href="https://bizpy.connpass.com/event/239471/">Python で機械学習の前処理をやってみる勉強会&lt;/a> を開催した。今回も講師をわたなべさんにお願いした。私が余裕なくて全くなにもできていない。運営が2人いるとすごく助かる。今回は機械学習の前処理に着目して pandas や scikit-learn を使って実際にどういったプログラミングをするかを解説してもらった。&lt;a href="https://colab.research.google.com/">Colab&lt;/a> を使ってデモするのがいまどきのやり方なのかな？私は全く触ったことがないけど、そういうやり方の違いも含めて関心をもてた。Colab 上で普通に git コマンドも使えるのでリポジトリのクローンなんかもできる。次回は私もなにかしら発表をしたいなとは思う。いまのお仕事が一段落ついたら。&lt;/p></content></item><item><title>mysql のデータ移行</title><link>/diary/posts/2022/0212/</link><pubDate>Sat, 12 Feb 2022 10:30:35 +0900</pubDate><guid>/diary/posts/2022/0212/</guid><description>23時に寝て2時前に起きて5時に起きて8時に起きた。あんまり眠れなくなってきた。
もくもく会 【三宮.dev】もくもく会 に参加した。もともとオフラインの予定だったけど、オミクロン株の流行でオンラインに変更された。
お仕事である開発環境の構築をしていて docker-compose を使って mysql の環境構築や共有の開発環境にある db2 に接続するために clpplus のインストール方法などを wiki にまとめてた。コンテナにある mysqldump や mysql コマンドを使ってこんな風にデータ移行もできた。
共有の開発環境からデータをエクスポート。
$ docker-compose exec -T mydb mysqldump -h $DB_HOST -C --set-gtid-purged=OFF --skip-triggers $DB &amp;gt; dump.sql ローカルの mysql にデータをインポート。
$ docker-compose exec -T mydb mysql -h localhost -u root -proot $DB &amp;lt; dump.sql コンテナにある mysqldump と mysql コマンドを使ってデータのインポートするには -T を指定すればいいみたい。そうしないと WARNING とかの文字列が sql ファイルに含まれてしまってインポートできない。https://t.co/JGeDNsWjhx
&amp;mdash; Tetsuya Morimoto (@t2y) February 12, 2022 ストレッチ いつもは11時からなんやけど、今日は17時40分からだった。カレンダーの予定を変更し忘れてて11時に行って間違えた。今週は2日間ぐらいストレッチしたかな。今日の開脚幅は開始前164cmで、ストレッチ後168cmだった。いつも時間帯が違うので数値も変わる。今日は右太ももの内転筋や内側やらがすごく張ってた。あまり調子はよくない。</description><content>&lt;p>23時に寝て2時前に起きて5時に起きて8時に起きた。あんまり眠れなくなってきた。&lt;/p>
&lt;h2 id="もくもく会">もくもく会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/235747/">【三宮.dev】もくもく会&lt;/a> に参加した。もともとオフラインの予定だったけど、オミクロン株の流行でオンラインに変更された。&lt;/p>
&lt;p>お仕事である開発環境の構築をしていて docker-compose を使って mysql の環境構築や共有の開発環境にある db2 に接続するために &lt;a href="https://www.ibm.com/docs/en/db2/10.5?topic=commands-command-line-processor-plus-clpplus">clpplus&lt;/a> のインストール方法などを wiki にまとめてた。コンテナにある mysqldump や mysql コマンドを使ってこんな風にデータ移行もできた。&lt;/p>
&lt;p>共有の開発環境からデータをエクスポート。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker-compose exec -T mydb mysqldump -h $DB_HOST -C --set-gtid-purged&lt;span style="color:#f92672">=&lt;/span>OFF --skip-triggers $DB &amp;gt; dump.sql
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ローカルの mysql にデータをインポート。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker-compose exec -T mydb mysql -h localhost -u root -proot $DB &amp;lt; dump.sql
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">コンテナにある mysqldump と mysql コマンドを使ってデータのインポートするには -T を指定すればいいみたい。そうしないと WARNING とかの文字列が sql ファイルに含まれてしまってインポートできない。&lt;a href="https://t.co/JGeDNsWjhx">https://t.co/JGeDNsWjhx&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1492391598612959234?ref_src=twsrc%5Etfw">February 12, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>いつもは11時からなんやけど、今日は17時40分からだった。カレンダーの予定を変更し忘れてて11時に行って間違えた。今週は2日間ぐらいストレッチしたかな。今日の開脚幅は開始前164cmで、ストレッチ後168cmだった。いつも時間帯が違うので数値も変わる。今日は右太ももの内転筋や内側やらがすごく張ってた。あまり調子はよくない。&lt;/p></content></item><item><title>レビュー待ちのストレス</title><link>/diary/posts/2022/0126/</link><pubDate>Wed, 26 Jan 2022 08:23:50 +0900</pubDate><guid>/diary/posts/2022/0126/</guid><description>0時に寝て6時に起きた。6時半頃に動くバッチ処理がエラーになって朝から原因を調べてた。
ユニットバイアスとツァイガルニク効果 いまのお仕事は火曜日にリリースして水曜日にプランニングしているため、1週間のうちの火曜日と水曜日がだらけがちになっている。火曜日に作成したリリースしない開発途中の PR が保留され、水曜日もプランニングやその後の調整にだらけていると PR が滞留しやすいからだ。昨日と今日で作成した PR が7つレビュー待ちで溜まっていて、他の作業を並行して進めるやる気をなくしてしまった。ここでなぜ作業を中断していると、自分の中でストレスが溜まったり、他の作業のやる気が削がれるのかを考えてみた。私が知っている認知心理学の知見からだと次の2つになる。
ユニットバイアス 量や大きさに関係なく、やり終えることに満足を感じる チケットやタスクを小さく分割することで小さな課題に集中して作業できる ツァイガルニク効果 途中で挫折したり中断してしまったことの方がよく記憶に残る 心理的リアクタンスが高いほどこの効果が発生しやすくなる 他人から行動を制限される反発して自分のやりたい欲求が高まる レビュー待ちが多いと中断している課題のことが気になって集中力を削がれる 普通の開発者は1日3-5個ぐらいのチケットを fix するんじゃないかと思うけど、レビューが止まっているせいでそれが阻害されてストレスを感じる。しかも、レビューが有意義であれば待つ価値もあるが、レビューのほとんどがノーコメントで approve されるだけだと待ち時間だけが積み上がる。
普通のプログラマの普通の設計 タイムラインでたまたまみかけて 普通のプログラマの普通の設計 に参加した。設計の話しはコンテキストやコードがないと抽象的過ぎてふわふわして勉強会で扱うには難しいテーマだけど、その懸念通り、ふわふわした内容だったと思う。おもしろくなかったわけではなく、発表者それぞれの考え方や大事にしている価値観などを知ることで多様性を認めるというか、他人のやり方を受け入れることにもつながるのかなとは思えた。
コードのない設計の話しは言葉から連想される概念が広過ぎてあまりよくわからない。現実の設計でも言葉でやり取りして同意していたのにコードは全然違うみたいなことはたまに発生する。だから言葉で設計のやり取りするよりも、2-3日でプロトタイプを実装できるならコードを先にみせてもらった方がよいとすら私は考えているところがある。あと一度設計をやったら終わりと考える開発者も多い。設計とは運用してからのフィードバックを受けてさらに改善していくことも含まれる。だから開発を継続している限り、設計したということはなくてずっと設計しているという考え方が正しい。matz もコードとは設計であると話していたと思う。</description><content>&lt;p>0時に寝て6時に起きた。6時半頃に動くバッチ処理がエラーになって朝から原因を調べてた。&lt;/p>
&lt;h2 id="ユニットバイアスとツァイガルニク効果">ユニットバイアスとツァイガルニク効果&lt;/h2>
&lt;p>いまのお仕事は火曜日にリリースして水曜日にプランニングしているため、1週間のうちの火曜日と水曜日がだらけがちになっている。火曜日に作成したリリースしない開発途中の PR が保留され、水曜日もプランニングやその後の調整にだらけていると PR が滞留しやすいからだ。昨日と今日で作成した PR が7つレビュー待ちで溜まっていて、他の作業を並行して進めるやる気をなくしてしまった。ここでなぜ作業を中断していると、自分の中でストレスが溜まったり、他の作業のやる気が削がれるのかを考えてみた。私が知っている認知心理学の知見からだと次の2つになる。&lt;/p>
&lt;ul>
&lt;li>ユニットバイアス
&lt;ul>
&lt;li>量や大きさに関係なく、やり終えることに満足を感じる&lt;/li>
&lt;li>チケットやタスクを小さく分割することで小さな課題に集中して作業できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ツァイガルニク効果
&lt;ul>
&lt;li>途中で挫折したり中断してしまったことの方がよく記憶に残る&lt;/li>
&lt;li>心理的リアクタンスが高いほどこの効果が発生しやすくなる
&lt;ul>
&lt;li>他人から行動を制限される反発して自分のやりたい欲求が高まる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>レビュー待ちが多いと中断している課題のことが気になって集中力を削がれる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>普通の開発者は1日3-5個ぐらいのチケットを fix するんじゃないかと思うけど、レビューが止まっているせいでそれが阻害されてストレスを感じる。しかも、レビューが有意義であれば待つ価値もあるが、レビューのほとんどがノーコメントで approve されるだけだと待ち時間だけが積み上がる。&lt;/p>
&lt;h2 id="普通のプログラマの普通の設計">普通のプログラマの普通の設計&lt;/h2>
&lt;p>タイムラインでたまたまみかけて &lt;a href="https://modeling-how-to-learn.connpass.com/event/231669/">普通のプログラマの普通の設計&lt;/a> に参加した。設計の話しはコンテキストやコードがないと抽象的過ぎてふわふわして勉強会で扱うには難しいテーマだけど、その懸念通り、ふわふわした内容だったと思う。おもしろくなかったわけではなく、発表者それぞれの考え方や大事にしている価値観などを知ることで多様性を認めるというか、他人のやり方を受け入れることにもつながるのかなとは思えた。&lt;/p>
&lt;p>コードのない設計の話しは言葉から連想される概念が広過ぎてあまりよくわからない。現実の設計でも言葉でやり取りして同意していたのにコードは全然違うみたいなことはたまに発生する。だから言葉で設計のやり取りするよりも、2-3日でプロトタイプを実装できるならコードを先にみせてもらった方がよいとすら私は考えているところがある。あと一度設計をやったら終わりと考える開発者も多い。設計とは運用してからのフィードバックを受けてさらに改善していくことも含まれる。だから開発を継続している限り、設計したということはなくてずっと設計しているという考え方が正しい。matz もコードとは設計であると話していたと思う。&lt;/p></content></item><item><title>仕事納め</title><link>/diary/posts/2021/1227/</link><pubDate>Mon, 27 Dec 2021 08:04:38 +0900</pubDate><guid>/diary/posts/2021/1227/</guid><description>0時に寝て6時に起きた。今日は仕事納めだー。
ミステリと言う勿れ 10巻 読んだのは昨日の夜なんだけど、ミステリと言う勿れの10巻 の電子版があることにたまたま気付いて購入した。そして、読みふけった。第9巻から発生した事件の続きで第10巻で進展して犯人が判明して解決した。もうね。ちょっとこの巻はすごかった。この漫画に出てくる犯人は普通の人間の常識や感覚からちょっとズレた変な人が犯人みたいなところはあった。今回はさらにそれが斜め上にズレて何一つ犯人が語る理屈や動機を理解できなくて、犯人が分かってから解決編をやっている途中でこの漫画の著者はまともな精神状態でこの漫画を描いているの？と著者の健康を心配をしてしまうぐらい、犯人の人間像に私は理解ができなかった。もちろん娯楽作品としては十分におもしろいのだけど、私にとっては理屈がわからんというのは苦痛でもあるのでわかるために読み直そうと思ってしまうので何回か読み直すことになると思う。
仕事納め 対外的には今日が仕事納め。内部的には28-29日は自社のお仕事をして30日に実家に帰るかどうか、まだ決めてない。天気次第でもいいかな。去年はうまくいかなくて31日までお仕事していたことを思うと今年は27日で締められて余裕があるように感じる。ちょうど帰省したおかださんがうちのオフィスまで訪ねて来てくれた。去年はコロナ禍で帰省されなかったので2年ぶり。オフィスの会議室を使ったことなくて、お試しも含めて軽く課題管理のビジネスアイディアについて共有した。とくに反応はなかったけれど、ちゃんと準備もしていないので気軽に雑談した。その後、近くの焼き鳥屋さんとワインバーで飲んでた。ある意味、納会の代わりにもなった。近況、昔話、技術動向、最近読んだ本などの話しをした。1人だったらほぼ100%納会はやらないので最終日に飲み会があって納会のような気分にはなった。今後は仕事納めの日に飲み会を入れるようにしていこうと思った。</description><content>&lt;p>0時に寝て6時に起きた。今日は仕事納めだー。&lt;/p>
&lt;h2 id="ミステリと言う勿れ-10巻">ミステリと言う勿れ 10巻&lt;/h2>
&lt;p>読んだのは昨日の夜なんだけど、&lt;a href="https://www.shogakukan.co.jp/books/09871497">ミステリと言う勿れの10巻&lt;/a> の電子版があることにたまたま気付いて購入した。そして、読みふけった。第9巻から発生した事件の続きで第10巻で進展して犯人が判明して解決した。もうね。ちょっとこの巻はすごかった。この漫画に出てくる犯人は普通の人間の常識や感覚からちょっとズレた変な人が犯人みたいなところはあった。今回はさらにそれが斜め上にズレて何一つ犯人が語る理屈や動機を理解できなくて、犯人が分かってから解決編をやっている途中でこの漫画の著者はまともな精神状態でこの漫画を描いているの？と著者の健康を心配をしてしまうぐらい、犯人の人間像に私は理解ができなかった。もちろん娯楽作品としては十分におもしろいのだけど、私にとっては理屈がわからんというのは苦痛でもあるのでわかるために読み直そうと思ってしまうので何回か読み直すことになると思う。&lt;/p>
&lt;h2 id="仕事納め">仕事納め&lt;/h2>
&lt;p>対外的には今日が仕事納め。内部的には28-29日は自社のお仕事をして30日に実家に帰るかどうか、まだ決めてない。天気次第でもいいかな。去年はうまくいかなくて31日までお仕事していたことを思うと今年は27日で締められて余裕があるように感じる。ちょうど帰省したおかださんがうちのオフィスまで訪ねて来てくれた。去年はコロナ禍で帰省されなかったので2年ぶり。オフィスの会議室を使ったことなくて、お試しも含めて軽く課題管理のビジネスアイディアについて共有した。とくに反応はなかったけれど、ちゃんと準備もしていないので気軽に雑談した。その後、近くの焼き鳥屋さんとワインバーで飲んでた。ある意味、納会の代わりにもなった。近況、昔話、技術動向、最近読んだ本などの話しをした。1人だったらほぼ100%納会はやらないので最終日に飲み会があって納会のような気分にはなった。今後は仕事納めの日に飲み会を入れるようにしていこうと思った。&lt;/p></content></item><item><title>traceparent の生成</title><link>/diary/posts/2021/1216/</link><pubDate>Thu, 16 Dec 2021 08:22:54 +0900</pubDate><guid>/diary/posts/2021/1216/</guid><description>1時半に寝て7時半に起きた。ちょっと疲れてて寝坊した。
W3C Trace Context の traceparent ヘッダーの生成 前にお仕事で dapr の分散トレーシングを検証している ことについて書いた。
dapr の分散トレーシングは W3C Trace Context に準拠していて、dapr 経由のリクエストは自動的にこの情報が付与されるが、そうじゃないリクエストもトレーシングできるようにするためには http ヘッダーの traceparent をセットしないといけない。試しにサーバー側に traceparent を生成するのはどうやるのかを調べてみた。Implementations of Trace Context にある java ライブラリを調べていて、Jaeger クライアントは OpenTelemetry に移行したと書いてあって、OpenTracing と OpenCensus は OpenTelemetry に統合されたと書いてあって、どうやら OpenTelemetry を使うのがよさそうだとわかった。
やりたいことは traceparent を生成したいだけだが、OpenTelemetry の Manual Instrumentation を読んでも直接的なやり方は書いてなくて、open-telemetry/opentelemetry-java のテストコードなどもみながら実装した。細かいところの仕様をまだ理解できていないけど、ひとまずこれで生成できたので検証はできると思う。
public class W3cContextUtil { private static final String TRACE_PARENT_VERSION = &amp;#34;00&amp;#34;; private static final OpenTelemetrySdk openTelemetry = OpenTelemetrySdk.builder() .setTracerProvider(SdkTracerProvider.builder().build()) .setPropagators(ContextPropagators.create(W3CTraceContextPropagator.getInstance())) .buildAndRegisterGlobal(); private static final Tracer tracer = openTelemetry.</description><content>&lt;p>1時半に寝て7時半に起きた。ちょっと疲れてて寝坊した。&lt;/p>
&lt;h2 id="w3c-trace-context-の-traceparent-ヘッダーの生成">W3C Trace Context の traceparent ヘッダーの生成&lt;/h2>
&lt;p>前にお仕事で &lt;a href="/diary/diary/posts/2021/1209/#dapr-の分散トレーシングと-w3c-trace-context">dapr の分散トレーシングを検証している&lt;/a> ことについて書いた。&lt;/p>
&lt;p>dapr の分散トレーシングは &lt;a href="https://www.w3.org/TR/trace-context/">W3C Trace Context&lt;/a> に準拠していて、dapr 経由のリクエストは自動的にこの情報が付与されるが、そうじゃないリクエストもトレーシングできるようにするためには http ヘッダーの &lt;code>traceparent&lt;/code> をセットしないといけない。試しにサーバー側に &lt;code>traceparent&lt;/code> を生成するのはどうやるのかを調べてみた。&lt;a href="https://github.com/w3c/trace-context/blob/main/implementations.md">Implementations of Trace Context&lt;/a> にある java ライブラリを調べていて、Jaeger クライアントは OpenTelemetry に移行したと書いてあって、OpenTracing と OpenCensus は OpenTelemetry に統合されたと書いてあって、どうやら OpenTelemetry を使うのがよさそうだとわかった。&lt;/p>
&lt;p>やりたいことは &lt;code>traceparent&lt;/code> を生成したいだけだが、OpenTelemetry の &lt;a href="https://opentelemetry.io/docs/instrumentation/java/manual_instrumentation/">Manual Instrumentation&lt;/a> を読んでも直接的なやり方は書いてなくて、&lt;a href="https://github.com/open-telemetry/opentelemetry-java">open-telemetry/opentelemetry-java&lt;/a> のテストコードなどもみながら実装した。細かいところの仕様をまだ理解できていないけど、ひとまずこれで生成できたので検証はできると思う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">W3cContextUtil&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String TRACE_PARENT_VERSION &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;00&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> OpenTelemetrySdk openTelemetry &lt;span style="color:#f92672">=&lt;/span> OpenTelemetrySdk&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setTracerProvider&lt;/span>&lt;span style="color:#f92672">(&lt;/span>SdkTracerProvider&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">build&lt;/span>&lt;span style="color:#f92672">())&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setPropagators&lt;/span>&lt;span style="color:#f92672">(&lt;/span>ContextPropagators&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>&lt;span style="color:#f92672">(&lt;/span>W3CTraceContextPropagator&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getInstance&lt;/span>&lt;span style="color:#f92672">()))&lt;/span>
&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">buildAndRegisterGlobal&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> Tracer tracer &lt;span style="color:#f92672">=&lt;/span> openTelemetry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getTracer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;my-tracer&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;1.0.0&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> String &lt;span style="color:#a6e22e">generateTraceParent&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
Span span &lt;span style="color:#f92672">=&lt;/span> tracer&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">spanBuilder&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;parent&amp;#34;&lt;/span>&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">startSpan&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
SpanContext sc &lt;span style="color:#f92672">=&lt;/span> span&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getSpanContext&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> String&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">format&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;%s-%s-%s-%s&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>
TRACE_PARENT_VERSION&lt;span style="color:#f92672">,&lt;/span>
sc&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getTraceId&lt;/span>&lt;span style="color:#f92672">(),&lt;/span>
sc&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getSpanId&lt;/span>&lt;span style="color:#f92672">(),&lt;/span>
sc&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getTraceFlags&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">asHex&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">finally&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
span&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">end&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="大阪python-もくもく会">大阪Python もくもく会&lt;/h2>
&lt;p>&lt;a href="https://osakapython.connpass.com/event/233460/">大阪Python もくもく会 #66&lt;/a> にオンライン参加した。コロナ禍前に大阪へ通勤していた頃はオフライン勉強会に何回か参加したことがある。主催者のやぎさんは一度 bizpy に参加してくれたこともある。11月からオフライン勉強会を再開したとのこと。久しぶりに参加してやぎさんと話していたら &lt;a href="https://neos.com/">neosvr&lt;/a> にも関心をもっているとのこと。私も少し前に oculus quest 2 を購入して触ってみた程度なのでメタバース関連で一緒に勉強会をしてもよいかもしれない。もくもく会では「アジャイル開発とスクラム 第2版」を読んでいて昨日の日記の記事がまさにその成果物。せっかくなので成果発表でこの本の紹介などをした。&lt;/p></content></item><item><title>ワーケーションの思いつき</title><link>/diary/posts/2021/1210/</link><pubDate>Fri, 10 Dec 2021 08:43:04 +0900</pubDate><guid>/diary/posts/2021/1210/</guid><description>0時に寝て6時に起きた。
朝活: アジャイル開発とスクラム 第2版 金朝ツメトギ 2021-12-10 AM 6 金曜朝6時開催のもくもく会 に参加した。今回はてらださんも来られていた。第9章を読んだ。KDDI さんの事例紹介で2013年から取り組みしているらしい。フラクタルスプリント を実際の業務で実践している稀な事例としておもしろかった。1週間のスプリントの中に1日のスプリントが4回あるといったフラクタル構造のスプリント。また金曜日は「仕事をしない日」としてレトロスペクティブと OST (オープンスペーステクノロジー、自由な発表と議論の時間) に割当てている。20%ルールに近いものと言えるかもしれないが、自己研鑽のための時間をスプリントの中に組み込むという、組織の理解があってこそできる取り組みを実践していてすごいなと感心した。
隔週の雑談 顧問のはらさんと隔週の打ち合わせ。スクラムの話題として だいくしーのスクラム Bar #1 や Scrum Masters Night! Online 〜第10夜〜 に参加してやり取りした内容や考察したことなどをいろいろ話してた。そのうちの話題の1つに、スクラムマスターの役割とは何だろうかがある。スクラムマスターはプロダクトをよくすることに責任をもち、メンバーが働きやすいように支えるような役割である。ここまでは共通認識として、その範囲がどこまでかは人によって意見が異なるように思えた。あくまでプロダクトやチームの範囲内で行動するスクラムマスターと、スクラムを組織全体に広めたり、人事・評価制度や経営にも参加していくスクラムマスターがある。スクラムマスターは社外の人間でもできるという考え方があるが、必然的に後者の役割も担うなら社内の人間に限定される。後者の役割は越権行為ではないか、いやいや、チームのために働いたメンバーの評価が下がってしまえば現場でよりよいプロダクト開発はできないから大事ではないかという意見も出た。便宜上、前者を (普通の) スクラムマスター、後者を「意識の高い」スクラムマスターと呼ぶ。私の考えでは、意識の高いスクラムマスターの言わんとしていることはわかるが、それをやりたいなら部長や役員などになってから職責とともに改善すべきであり、スクラムマスターという組織におけるラインではない人が経営に口出ししたりすることによる、組織の歪みはまた別の問題を引き起こすのではないかとも思えた。私も経営をやっていて経営側の視点でみるとやはりおかしい。
その後にワーケーションについて相談した。城崎温泉にある きのいえ でワーケーションをやってみようかと考えている。参加のお誘いややり方についていくつか相談しながら前向きに検討しようということになった。
忘年会 【初参加大歓迎】三宮.dev＆bizpy 合同忘年会 に参加してきた。忘年会の前に運営に入ってもらった、わたなべさんと軽く bizpy の運営について話してきた。1月はわたなべさんに機械学習の勉強会をやってもらう。私は昨年も三宮.devの忘年会に出てた。昨年は3人だったのが今年は4人になった。名物の大きなポークカツレツ。4人とも勉強会の常連みたいな人たちなのでお酒を飲みながらわいわいやって、コロナ禍になる前のコミュニティの勉強会の飲み会を思い出したりしてた。ワーケーションの話をしたら2人は興味を示してくれて、メンバーが4人集まったので開発合宿の企画をしてみることに決めた。</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="朝活-アジャイル開発とスクラム-第2版">朝活: アジャイル開発とスクラム 第2版&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=MbpX1LF1fto">金朝ツメトギ 2021-12-10 AM 6 金曜朝6時開催のもくもく会&lt;/a> に参加した。今回はてらださんも来られていた。第9章を読んだ。KDDI さんの事例紹介で2013年から取り組みしているらしい。&lt;a href="/diary/diary/posts/2021/1029/#フラクタルスプリント">フラクタルスプリント&lt;/a> を実際の業務で実践している稀な事例としておもしろかった。1週間のスプリントの中に1日のスプリントが4回あるといったフラクタル構造のスプリント。また金曜日は「仕事をしない日」としてレトロスペクティブと OST (オープンスペーステクノロジー、自由な発表と議論の時間) に割当てている。20%ルールに近いものと言えるかもしれないが、自己研鑽のための時間をスプリントの中に組み込むという、組織の理解があってこそできる取り組みを実践していてすごいなと感心した。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1210-weekly-sprint.png"/>
&lt;/figure>
&lt;h2 id="隔週の雑談">隔週の雑談&lt;/h2>
&lt;p>顧問のはらさんと隔週の打ち合わせ。スクラムの話題として &lt;a href="https://chatwork.connpass.com/event/231183/">だいくしーのスクラム Bar #1&lt;/a> や &lt;a href="https://smn.connpass.com/event/226002/">Scrum Masters Night! Online 〜第10夜〜&lt;/a> に参加してやり取りした内容や考察したことなどをいろいろ話してた。そのうちの話題の1つに、スクラムマスターの役割とは何だろうかがある。スクラムマスターはプロダクトをよくすることに責任をもち、メンバーが働きやすいように支えるような役割である。ここまでは共通認識として、その範囲がどこまでかは人によって意見が異なるように思えた。あくまでプロダクトやチームの範囲内で行動するスクラムマスターと、スクラムを組織全体に広めたり、人事・評価制度や経営にも参加していくスクラムマスターがある。スクラムマスターは社外の人間でもできるという考え方があるが、必然的に後者の役割も担うなら社内の人間に限定される。後者の役割は越権行為ではないか、いやいや、チームのために働いたメンバーの評価が下がってしまえば現場でよりよいプロダクト開発はできないから大事ではないかという意見も出た。便宜上、前者を (普通の) スクラムマスター、後者を「意識の高い」スクラムマスターと呼ぶ。私の考えでは、意識の高いスクラムマスターの言わんとしていることはわかるが、それをやりたいなら部長や役員などになってから職責とともに改善すべきであり、スクラムマスターという組織におけるラインではない人が経営に口出ししたりすることによる、組織の歪みはまた別の問題を引き起こすのではないかとも思えた。私も経営をやっていて経営側の視点でみるとやはりおかしい。&lt;/p>
&lt;p>その後にワーケーションについて相談した。城崎温泉にある &lt;a href="https://kinosaki-kinoie.com/">きのいえ&lt;/a> でワーケーションをやってみようかと考えている。参加のお誘いややり方についていくつか相談しながら前向きに検討しようということになった。&lt;/p>
&lt;h2 id="忘年会">忘年会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/231602/">【初参加大歓迎】三宮.dev＆bizpy 合同忘年会&lt;/a> に参加してきた。忘年会の前に運営に入ってもらった、わたなべさんと軽く bizpy の運営について話してきた。1月はわたなべさんに機械学習の勉強会をやってもらう。私は昨年も三宮.devの忘年会に出てた。昨年は3人だったのが今年は4人になった。名物の大きなポークカツレツ。4人とも勉強会の常連みたいな人たちなのでお酒を飲みながらわいわいやって、コロナ禍になる前のコミュニティの勉強会の飲み会を思い出したりしてた。ワーケーションの話をしたら2人は興味を示してくれて、メンバーが4人集まったので開発合宿の企画をしてみることに決めた。&lt;/p>
&lt;figure>&lt;img src="/diary/diary/img/2021/1210-katsu.jpg"/>
&lt;/figure></content></item><item><title>辞めるときの余裕</title><link>/diary/posts/2021/1129/</link><pubDate>Mon, 29 Nov 2021 07:53:08 +0900</pubDate><guid>/diary/posts/2021/1129/</guid><description>2時半に寝て6時半に起きた。なぜか眠れなくて鬼滅の刃をみてた。本当は夜に bizpy の資料作りをしようと思っていたけど、前日にあまり寝てなかったせいかバテてそのまま寝てしまった。
お仕事の辞め方 たまたまお手伝いしているところである開発メンバーが今月いっぱいで辞めますという連絡があった。その方は今日お休みだったので明日で辞めますみたいな急な連絡となった。もちろん上司や関係者には前々から話しは伝わっていて、引き止めや調整をしていたのだろうけど、チームとして働くにおいてメンバーはショックを受けるというか驚くというのが普通の感覚だろう。私も少なからず組織を退職してきた。私の場合、有給休暇が余っていたので辞めると言い出すのは実際に辞める3ヶ月ぐらい前で、有給消化が1ヶ月、引き継ぎに1ヶ月、引き止めや調整に2週間、2週間ぐらいはバッファみたいな感じで辞めてきた気がする。組織の規模によるけど、大きい組織は順番に引き止めの打ち合わせがくるので時間がかかる。組織にもよるけど、私の場合は3-4ぐらい、上長、課長、部長、その上の偉い人みたいな感じか。少なくともメンバーが退職を知ってから1ヶ月以内に辞めるということはない。私は過程の記録が課題管理システムに残っているし、ドキュメントも普段からそこそこ書く方なので辞めるときにドタバタすることはほぼない。ドキュメントなくても課題管理システムにやったことはすべて残ってますからと説明できる。上長からも引き継ぎに困るという心配をされたこともない。
辞め方というのはその人の信義を表すように私は思っていて、どういう背景や事情があるにしろ、ひどい辞め方をするのは本人にとって百害あって一利なしだと思う。余裕のない辞め方というのはあまり推奨しない。
忘年会 【初参加大歓迎】三宮.dev＆bizpy 合同忘年会 の日程を12月10日に決定した。オミクロン株の不安などが出てきたところだけど、水際対策をがんばっているのでまだ大丈夫かなといましかできない飲み会をこのまま行うことにする。言うても参加してくれるメンバーは限定的なのでいつも人たちで労をねぎらうみたいな飲み会になりそう。</description><content>&lt;p>2時半に寝て6時半に起きた。なぜか眠れなくて鬼滅の刃をみてた。本当は夜に bizpy の資料作りをしようと思っていたけど、前日にあまり寝てなかったせいかバテてそのまま寝てしまった。&lt;/p>
&lt;h2 id="お仕事の辞め方">お仕事の辞め方&lt;/h2>
&lt;p>たまたまお手伝いしているところである開発メンバーが今月いっぱいで辞めますという連絡があった。その方は今日お休みだったので明日で辞めますみたいな急な連絡となった。もちろん上司や関係者には前々から話しは伝わっていて、引き止めや調整をしていたのだろうけど、チームとして働くにおいてメンバーはショックを受けるというか驚くというのが普通の感覚だろう。私も少なからず組織を退職してきた。私の場合、有給休暇が余っていたので辞めると言い出すのは実際に辞める3ヶ月ぐらい前で、有給消化が1ヶ月、引き継ぎに1ヶ月、引き止めや調整に2週間、2週間ぐらいはバッファみたいな感じで辞めてきた気がする。組織の規模によるけど、大きい組織は順番に引き止めの打ち合わせがくるので時間がかかる。組織にもよるけど、私の場合は3-4ぐらい、上長、課長、部長、その上の偉い人みたいな感じか。少なくともメンバーが退職を知ってから1ヶ月以内に辞めるということはない。私は過程の記録が課題管理システムに残っているし、ドキュメントも普段からそこそこ書く方なので辞めるときにドタバタすることはほぼない。ドキュメントなくても課題管理システムにやったことはすべて残ってますからと説明できる。上長からも引き継ぎに困るという心配をされたこともない。&lt;/p>
&lt;p>辞め方というのはその人の信義を表すように私は思っていて、どういう背景や事情があるにしろ、ひどい辞め方をするのは本人にとって百害あって一利なしだと思う。余裕のない辞め方というのはあまり推奨しない。&lt;/p>
&lt;h2 id="忘年会">忘年会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/231602/">【初参加大歓迎】三宮.dev＆bizpy 合同忘年会&lt;/a> の日程を12月10日に決定した。オミクロン株の不安などが出てきたところだけど、水際対策をがんばっているのでまだ大丈夫かなといましかできない飲み会をこのまま行うことにする。言うても参加してくれるメンバーは限定的なのでいつも人たちで労をねぎらうみたいな飲み会になりそう。&lt;/p></content></item><item><title>まる一日喋り続けた日</title><link>/diary/posts/2021/1127/</link><pubDate>Sat, 27 Nov 2021 10:04:09 +0900</pubDate><guid>/diary/posts/2021/1127/</guid><description>0時に寝て6時半に起きた。
ストレッチ 先週に引き続き、今週もお仕事でバテてストレッチは2日/週とあまりできなかった。ウォーキングもほとんどできなかった。とはいえ、先週の土日に観光案内でいつもよりかなり歩いたのでその休息と考えればそれほど悲観的にならなくてもよいかもしれない。ウォーキングしなかった背景は寒くなってきて21時頃に帰ってきて、また外に出掛けるのが億劫になってしまった。お仕事を早めに切り上げて早めに帰って来た方がよいかもしれない。
今日の開脚幅は開始前168cmで、ストレッチ後170.5cmだった。また170cmを超えるようになったのでよいサイクルに入ってきた。2週間に渡った中殿筋の張りはおさまった気がする。代わりに腰の筋肉に張りがあって、トレーナーさんも念入りにそこをストレッチしてくれた。生活していると、そのときどきで調子の悪い箇所は移動していて、ストレッチするとそのことに気付くので体調管理を意識する意図でもストレッチは役に立っている。
もくもく会 【三宮.dev】もくもく会 に参加した。今回はオフラインのもくもく会だった。私は bizpy の勉強会の資料作成の準備をしていた。ここ数回は主催者と私の2人だけしかオフラインに来ないといったことが多かったのだけど、今回は8人も参加していて、その8人中5人が勉強会コミュニティに主催者だったりしてちょっとおもしろかった。
コミュニティの主催者は、コミュニティ運営の苦労がわかるから他のコミュニティのよき参加者になり得る。私は 三宮.dev の運営には関わっていないが、コミュニティを盛り上げることに寄与する振る舞いはしていて、それは自分のコミュニティでもこういったやり取りが増えるといいなという願望を他のコミュニティで参加者としてやっていたりする。今回のオフラインの参加者が多かったのも、他の勉強会コミュニティでもオフラインでやりたいよねと思う人たちが集ったのではないかとか考えたりしていた。
ぷち飲み会 終わってからわたなべさんと立ち飲みに行ってきた。最近あまり行ってない はんなりPythonの会 の勉強会で (オンラインで) なんどか話したことがある方で、ずっと京都に住んでいると思っていた方がめっちゃご近所さんだった。わたなべさんは私より1つ学年が上で、世代における価値観に共感するところは多く、自身もマイクロ法人を営んでいた。研究者としてキャリアを積み重ねてこられて昨年、独立したようだ。はんなりPythonの会の運営にも最近入ったそうで、ついでというわけではないが、話していて気が合うなと思ったので bizpy の運営に入ってくれません？と尋ねたら快く了承してくれた。
bizpy の最大の懸念は運営が私1人で、私がお仕事で忙しくなったら休業してしまうという問題があった。なかなか勉強会のコミュニティの運営をできそうなメンバー (スキル、価値観、時間的余裕) をみつけるのは難しいので了承してくれてとても嬉しかった。わたなべさんは博士で研究者のキャリアをもっていて、いまは機械学習などに取り組んでいるのかな？私のキャリアとは全く重なりがないのでお互いに学ぶところがあってよい関係を築けるのではないかと思う。ビジネスパーソン向け機械学習入門みたいな勉強会をしてもよいと思う。
リーンキャンバスレビュー (後半) 前回 の続き。残りの半分を進めるのかなと考えていたけど、前回のおさらいから始めて、私の意図するプロダクトの価値やサービスの特徴の話しをしていたら、このサービスはすぐに顧客に価値が伝わるものでもなければ、急成長するようなビジネスでもないということが伝わって、リーンキャンバスをやる意味はあまりないねという話しで後半戦をやらずに終わったw。どうも新規事業=急成長やスケールするビジネスという考えでリーンキャンバスを持ち出したところがあって、私は最初からそんなことは一言も言ってないし、私が作った資料にもそういった懸念や展望は書いてあったんだけど、リーンキャンバスを通して話しているうちにその意図を理解してもらえたといった様子だった。
そういう意味でリーンキャンバスは急成長やスケールするビジネスを取り扱うときに投資家や顧客にわかりやすく訴求するためのフレームワークと言えるのかもしれない。仮にビジネスがうまくいったとしても、合同会社は投資を受けるのが難しいのでそのときは株式会社を別途作ってやるのかなぁみたいな、取らぬ狸の皮算用みたいな話も知った。</description><content>&lt;p>0時に寝て6時半に起きた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>先週に引き続き、今週もお仕事でバテてストレッチは2日/週とあまりできなかった。ウォーキングもほとんどできなかった。とはいえ、先週の土日に観光案内でいつもよりかなり歩いたのでその休息と考えればそれほど悲観的にならなくてもよいかもしれない。ウォーキングしなかった背景は寒くなってきて21時頃に帰ってきて、また外に出掛けるのが億劫になってしまった。お仕事を早めに切り上げて早めに帰って来た方がよいかもしれない。&lt;/p>
&lt;p>今日の開脚幅は開始前168cmで、ストレッチ後170.5cmだった。また170cmを超えるようになったのでよいサイクルに入ってきた。2週間に渡った中殿筋の張りはおさまった気がする。代わりに腰の筋肉に張りがあって、トレーナーさんも念入りにそこをストレッチしてくれた。生活していると、そのときどきで調子の悪い箇所は移動していて、ストレッチするとそのことに気付くので体調管理を意識する意図でもストレッチは役に立っている。&lt;/p>
&lt;h2 id="もくもく会">もくもく会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/229761/">【三宮.dev】もくもく会&lt;/a> に参加した。今回はオフラインのもくもく会だった。私は bizpy の勉強会の資料作成の準備をしていた。ここ数回は主催者と私の2人だけしかオフラインに来ないといったことが多かったのだけど、今回は8人も参加していて、その8人中5人が勉強会コミュニティに主催者だったりしてちょっとおもしろかった。&lt;/p>
&lt;p>コミュニティの主催者は、コミュニティ運営の苦労がわかるから他のコミュニティのよき参加者になり得る。私は 三宮.dev の運営には関わっていないが、コミュニティを盛り上げることに寄与する振る舞いはしていて、それは自分のコミュニティでもこういったやり取りが増えるといいなという願望を他のコミュニティで参加者としてやっていたりする。今回のオフラインの参加者が多かったのも、他の勉強会コミュニティでもオフラインでやりたいよねと思う人たちが集ったのではないかとか考えたりしていた。&lt;/p>
&lt;h2 id="ぷち飲み会">ぷち飲み会&lt;/h2>
&lt;p>終わってからわたなべさんと立ち飲みに行ってきた。最近あまり行ってない &lt;a href="https://hannari-python.connpass.com/">はんなりPythonの会&lt;/a> の勉強会で (オンラインで) なんどか話したことがある方で、ずっと京都に住んでいると思っていた方がめっちゃご近所さんだった。わたなべさんは私より1つ学年が上で、世代における価値観に共感するところは多く、自身もマイクロ法人を営んでいた。研究者としてキャリアを積み重ねてこられて昨年、独立したようだ。はんなりPythonの会の運営にも最近入ったそうで、ついでというわけではないが、話していて気が合うなと思ったので bizpy の運営に入ってくれません？と尋ねたら快く了承してくれた。&lt;/p>
&lt;p>bizpy の最大の懸念は運営が私1人で、私がお仕事で忙しくなったら休業してしまうという問題があった。なかなか勉強会のコミュニティの運営をできそうなメンバー (スキル、価値観、時間的余裕) をみつけるのは難しいので了承してくれてとても嬉しかった。わたなべさんは博士で研究者のキャリアをもっていて、いまは機械学習などに取り組んでいるのかな？私のキャリアとは全く重なりがないのでお互いに学ぶところがあってよい関係を築けるのではないかと思う。ビジネスパーソン向け機械学習入門みたいな勉強会をしてもよいと思う。&lt;/p>
&lt;h2 id="リーンキャンバスレビュー-後半">リーンキャンバスレビュー (後半)&lt;/h2>
&lt;p>&lt;a href="/diary/diary/posts/2021/1122/#リーンキャンバスレビュー-前半">前回&lt;/a> の続き。残りの半分を進めるのかなと考えていたけど、前回のおさらいから始めて、私の意図するプロダクトの価値やサービスの特徴の話しをしていたら、このサービスはすぐに顧客に価値が伝わるものでもなければ、急成長するようなビジネスでもないということが伝わって、リーンキャンバスをやる意味はあまりないねという話しで後半戦をやらずに終わったw。どうも新規事業=急成長やスケールするビジネスという考えでリーンキャンバスを持ち出したところがあって、私は最初からそんなことは一言も言ってないし、私が作った資料にもそういった懸念や展望は書いてあったんだけど、リーンキャンバスを通して話しているうちにその意図を理解してもらえたといった様子だった。&lt;/p>
&lt;p>そういう意味でリーンキャンバスは急成長やスケールするビジネスを取り扱うときに投資家や顧客にわかりやすく訴求するためのフレームワークと言えるのかもしれない。仮にビジネスがうまくいったとしても、合同会社は投資を受けるのが難しいのでそのときは株式会社を別途作ってやるのかなぁみたいな、取らぬ狸の皮算用みたいな話も知った。&lt;/p></content></item><item><title>今年は忘年会やる</title><link>/diary/posts/2021/1118/</link><pubDate>Thu, 18 Nov 2021 07:19:22 +0900</pubDate><guid>/diary/posts/2021/1118/</guid><description>1時に寝て3時に起きて2度寝して6時に起きた。起き上がれなくて6時半までだらだらしてから起きた。
リポジトリの改行コード指定 git のリポジトリ設定で .gitattributes という設定方法がある。ざっくり理解するには .gitattributesによる改行コードの変換設定 を読むのが早い。とりあえずこんな設定にしてみた。すでに crlf の改行コードでコミットされたファイルがあるため、それらを lf に変換しないといけない。eol=lf にすると crlf でコミットされている既存ファイルも変換してくれるみたい。おそらくチェックアウトしたときにそうなるのかな？
* text=auto eol=lf *.jar binary ここ数年は Windows マシンを開発に使っている開発者と一緒に働いたことがなかったけど、OS 混在環境だとリポジトリ設定が必要だということに気付いた。多様性は大事。
忘年会 三宮.dev＆bizpy 合同忘年会 に参加登録した。bizpy だけだと、忘年会の参加者を集めるのは厳しそうなので三ノ宮.devと共同でやる。これなら最低でも2人は確定しているのでイベントがなくなることはない。日程は参加者の希望を聞きながら水曜か金曜でやるみたい。いましか飲み会できないだろうからいいと思う。
ミクロ経済学入門の入門 第9章の公共財を読んだ。市場を考察するときに扱う財は一般論として 私的財 を想定している。私的財は次の2つの性質を満たす。
競合的: 複数の人々が同時に利用できない 排除的: 拠出に貢献した特定のメンバーしか利用できない 一方で私的財と対偶の関係にある競合的でも排除的でもない財を 公共財 と呼ぶ。例えば、国防サービスや一般道路などが相当する。侵攻してくる敵国から自国を防衛するときにすべての国民、納税していない人であっても国防の利益にあずかれる。非競合的だが、排除的である財を クラブ財 と呼ぶ。高速道路などが相当する。みんなが利用できるが、利用料金を収めないと利用できない。競合的だが非排除的な財を コモンプール財 と呼ぶ。漁場などが相当する。どの漁師が魚を獲るかは競合しているが、漁業権をもっている限り漁そのものは制限されない。
これをまとめると、財は次の4つの分類になる。
競合的 非競合的 排除的 私的財 クラブ財 非排除的 コモンプール財 公共財 公共財の自発的供給の問いとして、排除的でも競合的でもない公共財が人々の自発的な行動で十分に供給できるかを考える。自分のお金を寄付する・寄付しないの2択でマトリクスを作成する。自分は寄付せず、他人の寄付から利益を得ることを フリーライド と呼ぶ。みんながフリーライドをしようとすると公共財はまったく供給されない。A と B の2者間における利得表を表すと次のようになる。相手が寄付して、自分が寄付しないときに最大の利益となり、どちらも寄付しないよりは両者が寄付した方が利益が大きくなる。</description><content>&lt;p>1時に寝て3時に起きて2度寝して6時に起きた。起き上がれなくて6時半までだらだらしてから起きた。&lt;/p>
&lt;h2 id="リポジトリの改行コード指定">リポジトリの改行コード指定&lt;/h2>
&lt;p>git のリポジトリ設定で &lt;a href="https://git-scm.com/docs/gitattributes">.gitattributes&lt;/a> という設定方法がある。ざっくり理解するには &lt;a href="https://kiririmode.hatenablog.jp/entry/20170416/1492300735">.gitattributesによる改行コードの変換設定&lt;/a> を読むのが早い。とりあえずこんな設定にしてみた。すでに crlf の改行コードでコミットされたファイルがあるため、それらを lf に変換しないといけない。&lt;code>eol=lf&lt;/code> にすると crlf でコミットされている既存ファイルも変換してくれるみたい。おそらくチェックアウトしたときにそうなるのかな？&lt;/p>
&lt;pre tabindex="0">&lt;code>* text=auto eol=lf
*.jar binary
&lt;/code>&lt;/pre>&lt;p>ここ数年は Windows マシンを開発に使っている開発者と一緒に働いたことがなかったけど、OS 混在環境だとリポジトリ設定が必要だということに気付いた。多様性は大事。&lt;/p>
&lt;h2 id="忘年会">忘年会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/231602/">三宮.dev＆bizpy 合同忘年会&lt;/a> に参加登録した。bizpy だけだと、忘年会の参加者を集めるのは厳しそうなので三ノ宮.devと共同でやる。これなら最低でも2人は確定しているのでイベントがなくなることはない。日程は参加者の希望を聞きながら水曜か金曜でやるみたい。いましか飲み会できないだろうからいいと思う。&lt;/p>
&lt;h2 id="ミクロ経済学入門の入門">ミクロ経済学入門の入門&lt;/h2>
&lt;p>第9章の公共財を読んだ。市場を考察するときに扱う財は一般論として &lt;strong>私的財&lt;/strong> を想定している。私的財は次の2つの性質を満たす。&lt;/p>
&lt;ul>
&lt;li>競合的: 複数の人々が同時に利用できない&lt;/li>
&lt;li>排除的: 拠出に貢献した特定のメンバーしか利用できない&lt;/li>
&lt;/ul>
&lt;p>一方で私的財と対偶の関係にある競合的でも排除的でもない財を &lt;strong>公共財&lt;/strong> と呼ぶ。例えば、国防サービスや一般道路などが相当する。侵攻してくる敵国から自国を防衛するときにすべての国民、納税していない人であっても国防の利益にあずかれる。非競合的だが、排除的である財を &lt;strong>クラブ財&lt;/strong> と呼ぶ。高速道路などが相当する。みんなが利用できるが、利用料金を収めないと利用できない。競合的だが非排除的な財を &lt;strong>コモンプール財&lt;/strong> と呼ぶ。漁場などが相当する。どの漁師が魚を獲るかは競合しているが、漁業権をもっている限り漁そのものは制限されない。&lt;/p>
&lt;p>これをまとめると、財は次の4つの分類になる。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">競合的&lt;/th>
&lt;th style="text-align:center">非競合的&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">排除的&lt;/td>
&lt;td style="text-align:center">私的財&lt;/td>
&lt;td style="text-align:center">クラブ財&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">非排除的&lt;/td>
&lt;td style="text-align:center">コモンプール財&lt;/td>
&lt;td style="text-align:center">公共財&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>公共財の自発的供給の問いとして、排除的でも競合的でもない公共財が人々の自発的な行動で十分に供給できるかを考える。自分のお金を寄付する・寄付しないの2択でマトリクスを作成する。自分は寄付せず、他人の寄付から利益を得ることを &lt;strong>フリーライド&lt;/strong> と呼ぶ。みんながフリーライドをしようとすると公共財はまったく供給されない。A と B の2者間における利得表を表すと次のようになる。相手が寄付して、自分が寄付しないときに最大の利益となり、どちらも寄付しないよりは両者が寄付した方が利益が大きくなる。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">A \ B&lt;/th>
&lt;th style="text-align:center">寄付する&lt;/th>
&lt;th style="text-align:center">寄付しない&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">寄付する&lt;/td>
&lt;td style="text-align:center">4, 4&lt;/td>
&lt;td style="text-align:center">2, 5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">寄付しない&lt;/td>
&lt;td style="text-align:center">5, 2&lt;/td>
&lt;td style="text-align:center">3, 3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>A が寄付するか・しないかの選択は、B の寄付の有無に関係なく、A は寄付しない方が寄付したよりもトクすることになる。相手がどういった選択をしても自分にとって一番トクな選択肢が同じときにその選択肢を &lt;strong>支配戦略&lt;/strong> という。この話は B からみても同じになる。A も B も寄付しないがトクする状態のことを &lt;strong>支配戦略均衡&lt;/strong> という。この状態が最善かと言えば、そうではなく、両者が寄付した方が両者が寄付しないよりもトクする状態になる。このように公共財の供給を個々のプレイヤーに任せていては &lt;strong>パレート劣位&lt;/strong> な結果となってしまう。この状態からどうやって両者が寄付する &lt;strong>パレート優位&lt;/strong> な状態に移行できるかを考えるのが、政府の徴税の方策と言える。&lt;/p>
&lt;p>政府が誰にいくらの税を課して、どの程度の量の公共財を適切と決めるのかは難しい問題である。放っておいて上手くいかないものの、政府に任せて上手くいくことも保証されない。このようなゲーム理論を制度設計に活用する &lt;strong>メカニズムデザイン&lt;/strong> という専門分野がある。&lt;/p></content></item><item><title>Testcontainers を触ってみた</title><link>/diary/posts/2021/1117/</link><pubDate>Wed, 17 Nov 2021 08:12:12 +0900</pubDate><guid>/diary/posts/2021/1117/</guid><description>23時頃に寝て3時に起きて、そこから寝たり起きたりしながら6時に半に起きた。怖い夢をみて眠れなくなって中途半端に寝てた。
朝活: 雑談 【三宮.dev オンライン】リモート朝活もくもく会 に参加した。寝坊、、、というよりは起きてたけど、イベントを忘れていて6時45分ぐらいから参加して主催者しかいなかったのでそのまま7時半まで雑談してた。始めが悪いとだらだらしてしまう。気をつけねば。
三宮.dev の主催者や参加者の常連さんたちとはだいぶ身近に話すにようになってきた。コミュニティって人間関係だと思っていて、話したり顔をあわせたりする回数が増えるに従って身近な知人になっていって、それ自体が価値の1つだったりすると思う。いま忘年会の企画を三宮.dev でも行っているが、bizpy と合同でやっていいんじゃないかと考えている。
Testcontainers DB を使ったユニットテストのために Testcontainers Postgres Module を使ってみた。docker hub からイメージを取得して JUnit のテストプロセスの中からアクセスできるようにするためのライブラリになる。コンテナの扱いをテストコードから管理したいときなどに便利。ちょっと調べて簡単に設定できたのでまた時間のあるときに会社のブログに記事を書こうと思う。</description><content>&lt;p>23時頃に寝て3時に起きて、そこから寝たり起きたりしながら6時に半に起きた。怖い夢をみて眠れなくなって中途半端に寝てた。&lt;/p>
&lt;h2 id="朝活-雑談">朝活: 雑談&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/231078/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> に参加した。寝坊、、、というよりは起きてたけど、イベントを忘れていて6時45分ぐらいから参加して主催者しかいなかったのでそのまま7時半まで雑談してた。始めが悪いとだらだらしてしまう。気をつけねば。&lt;/p>
&lt;p>三宮.dev の主催者や参加者の常連さんたちとはだいぶ身近に話すにようになってきた。コミュニティって人間関係だと思っていて、話したり顔をあわせたりする回数が増えるに従って身近な知人になっていって、それ自体が価値の1つだったりすると思う。いま忘年会の企画を三宮.dev でも行っているが、bizpy と合同でやっていいんじゃないかと考えている。&lt;/p>
&lt;h2 id="testcontainers">Testcontainers&lt;/h2>
&lt;p>DB を使ったユニットテストのために &lt;a href="https://www.testcontainers.org/modules/databases/postgres/">Testcontainers Postgres Module&lt;/a> を使ってみた。docker hub からイメージを取得して JUnit のテストプロセスの中からアクセスできるようにするためのライブラリになる。コンテナの扱いをテストコードから管理したいときなどに便利。ちょっと調べて簡単に設定できたのでまた時間のあるときに会社のブログに記事を書こうと思う。&lt;/p></content></item><item><title>寝てた</title><link>/diary/posts/2021/1113/</link><pubDate>Sat, 13 Nov 2021 11:28:58 +0900</pubDate><guid>/diary/posts/2021/1113/</guid><description>1時に寝て8時に起きた。もっと早く目覚めてはいたけど、休日なんでゆっくりするかとのんびりしてた。本を読んで眠くなってきたので夕方から帰って寝てた。
ストレッチ 今週は勉強会の発表や週の真ん中で飲みにいってバテてしまってウォーキングは4日ぐらいしかできてなかった。前の週よりはあまり運動ができていない。前週からの右足太もも後ろの筋が張りはまだ少し残っているものの、ちょっとよくなった気がする。今日の開脚幅は開始前168cmで、ストレッチ後169cmだった。前週よりは数値がよくなって、また170cmの大台にのりそうな雰囲気になってきた。
中殿筋 (ちゅうでんきん) という、お尻の横の筋肉があまりよくなくて、ここが悪いと腰痛の原因になるらしい。歩いたり走ったりするときにも使う筋肉だという。中殿筋のストレッチとトレーニング のようなストレッチはいまもやっているけど、トレーニングはやってなかったのでまたやってみようと思う。
勉強会兼もくもく会 【三宮.dev オンライン】ついに出たぜNuxt3！Nuxt.js LT大会 に参加した。LT 発表する人が少なかったのでもくもく会になって本を読んでた。70歳の参加者の方がいて web 開発をするのに vue.js と react.js のどちらを選べばいいか？といった話題で盛り上がりつつ、その方の背景などを聞いていた。技術の話しは通じたのである程度、開発の素養もあってちゃんと勉強している人にみえた。私と同じマイクロ法人をやっているようで、自分のビジネスのアプリケーションを自分で開発するといったスタンスで取り組まれていて、70歳になってもやっている姿勢に敬意をもてた。</description><content>&lt;p>1時に寝て8時に起きた。もっと早く目覚めてはいたけど、休日なんでゆっくりするかとのんびりしてた。本を読んで眠くなってきたので夕方から帰って寝てた。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週は勉強会の発表や週の真ん中で飲みにいってバテてしまってウォーキングは4日ぐらいしかできてなかった。前の週よりはあまり運動ができていない。前週からの右足太もも後ろの筋が張りはまだ少し残っているものの、ちょっとよくなった気がする。今日の開脚幅は開始前168cmで、ストレッチ後169cmだった。前週よりは数値がよくなって、また170cmの大台にのりそうな雰囲気になってきた。&lt;/p>
&lt;p>中殿筋 (ちゅうでんきん) という、お尻の横の筋肉があまりよくなくて、ここが悪いと腰痛の原因になるらしい。歩いたり走ったりするときにも使う筋肉だという。&lt;a href="https://kaiseihp.jp/news/id_14953">中殿筋のストレッチとトレーニング&lt;/a> のようなストレッチはいまもやっているけど、トレーニングはやってなかったのでまたやってみようと思う。&lt;/p>
&lt;h2 id="勉強会兼もくもく会">勉強会兼もくもく会&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/227757/">【三宮.dev オンライン】ついに出たぜNuxt3！Nuxt.js LT大会&lt;/a> に参加した。LT 発表する人が少なかったのでもくもく会になって本を読んでた。70歳の参加者の方がいて web 開発をするのに vue.js と react.js のどちらを選べばいいか？といった話題で盛り上がりつつ、その方の背景などを聞いていた。技術の話しは通じたのである程度、開発の素養もあってちゃんと勉強している人にみえた。私と同じマイクロ法人をやっているようで、自分のビジネスのアプリケーションを自分で開発するといったスタンスで取り組まれていて、70歳になってもやっている姿勢に敬意をもてた。&lt;/p></content></item><item><title>呑んだくれ</title><link>/diary/posts/2021/1109/</link><pubDate>Tue, 09 Nov 2021 07:19:29 +0900</pubDate><guid>/diary/posts/2021/1109/</guid><description>1時半に寝て6時に起きた。夜にウォーキングに出かけようとしたらたまたま雨が降ってきて諦めた。そしたら寝付けなかった。やっぱり歩いて疲弊すると寝付けやすいのかもしれない。ストレッチしたりしてたら寝るの遅くなった。
中間申告の納付 法人税・地方法人税の申告用紙が届いていたので内容を確認しながら e-tax で申請して pay-easy で税金の支払いを完了した。国税は一番最後に書類が届く。今年の書類が届いた日はこんな感じ。毎年記録しているから届く時期に準備していて慌てなくて済む。
法人市民税: 10月16日 法人県民税: 10月20日 法人税・地方法人税: 11月8日 国税の納付をもって中間申告をすべて終えた。中間申告は税金の先払いだからキャッシュフローが悪いと払えないみたいなことが起きる可能性がある。そうすると仮決算して支払い金額を抑えるみたいなことが必要になるんだろうな。まさに貧乏暇無し。
GitHub + Slack Integration integrations/slack の内容をみて subscribe する内容を確認した。4月頃にアップグレードしてそれまでの設定の互換性をなくして、その影響でうまく動かなかったりしてた。
github の slack 連携のときの commits:all が commits:* に変更されたみたい。4月中旬のバージョンアップ以降に作ったリポジトリか設定だと commits:all だと連携されないみたい。https://t.co/mGVUyEbgGQ
&amp;mdash; Tetsuya Morimoto (@t2y) April 30, 2021 その後、追いかけてなかったけど、いま README をみたら次の5つのイベントはデフォルトで有効になるみたい。
issues pulls commits releases deployments 必要に応じて他のイベントも追加するとよいみたい。私は次の3つかな。
reviews comments commits:* デフォルトのイベントは指定しなくてもよいけど、コピペですべて明示的に設定するならこんな感じ。
/github subscribe owner/repo issues,pulls,commits:*,releases,deployments,reviews,comments みんなの Python 勉強会 みんなのPython勉強会#75 で発表した。参加者は190人となっているけど、実際に zoom に参加していた人の最高値は110人ぐらいだったかな。190 * 0.</description><content>&lt;p>1時半に寝て6時に起きた。夜にウォーキングに出かけようとしたらたまたま雨が降ってきて諦めた。そしたら寝付けなかった。やっぱり歩いて疲弊すると寝付けやすいのかもしれない。ストレッチしたりしてたら寝るの遅くなった。&lt;/p>
&lt;h2 id="中間申告の納付">中間申告の納付&lt;/h2>
&lt;p>法人税・地方法人税の申告用紙が届いていたので内容を確認しながら e-tax で申請して pay-easy で税金の支払いを完了した。国税は一番最後に書類が届く。今年の書類が届いた日はこんな感じ。毎年記録しているから届く時期に準備していて慌てなくて済む。&lt;/p>
&lt;ul>
&lt;li>法人市民税: 10月16日&lt;/li>
&lt;li>法人県民税: 10月20日&lt;/li>
&lt;li>法人税・地方法人税: 11月8日&lt;/li>
&lt;/ul>
&lt;p>国税の納付をもって中間申告をすべて終えた。中間申告は税金の先払いだからキャッシュフローが悪いと払えないみたいなことが起きる可能性がある。そうすると仮決算して支払い金額を抑えるみたいなことが必要になるんだろうな。まさに貧乏暇無し。&lt;/p>
&lt;h2 id="github--slack-integration">GitHub + Slack Integration&lt;/h2>
&lt;p>&lt;a href="https://github.com/integrations/slack">integrations/slack&lt;/a> の内容をみて subscribe する内容を確認した。4月頃にアップグレードしてそれまでの設定の互換性をなくして、その影響でうまく動かなかったりしてた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">github の slack 連携のときの commits:all が commits:* に変更されたみたい。4月中旬のバージョンアップ以降に作ったリポジトリか設定だと commits:all だと連携されないみたい。&lt;a href="https://t.co/mGVUyEbgGQ">https://t.co/mGVUyEbgGQ&lt;/a>&lt;/p>&amp;mdash; Tetsuya Morimoto (@t2y) &lt;a href="https://twitter.com/t2y/status/1387999605959188481?ref_src=twsrc%5Etfw">April 30, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>その後、追いかけてなかったけど、いま README をみたら次の5つのイベントはデフォルトで有効になるみたい。&lt;/p>
&lt;ul>
&lt;li>issues&lt;/li>
&lt;li>pulls&lt;/li>
&lt;li>commits&lt;/li>
&lt;li>releases&lt;/li>
&lt;li>deployments&lt;/li>
&lt;/ul>
&lt;p>必要に応じて他のイベントも追加するとよいみたい。私は次の3つかな。&lt;/p>
&lt;ul>
&lt;li>reviews&lt;/li>
&lt;li>comments&lt;/li>
&lt;li>commits:*&lt;/li>
&lt;/ul>
&lt;p>デフォルトのイベントは指定しなくてもよいけど、コピペですべて明示的に設定するならこんな感じ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">/github subscribe owner/repo issues,pulls,commits:*,releases,deployments,reviews,comments
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="みんなの-python-勉強会">みんなの Python 勉強会&lt;/h2>
&lt;p>&lt;a href="https://startpython.connpass.com/event/228136/">みんなのPython勉強会#75&lt;/a> で発表した。参加者は190人となっているけど、実際に zoom に参加していた人の最高値は110人ぐらいだったかな。190 * 0.6 = 114 なので無料イベントの参加者数は6割前後の法則に合致する。人数が増えるほどこの法則は精度が高いように思う。発表者は3人いて、私は2番目に発表して、持ち時間は30分だった。録画していたので後でアーカイブをみれるようにするみたい。私は録画否定派で録画すると参加者がオンタイムで見なくなるのと、いつでも見れるものは見ないということもあるので勉強会のレベルは録画しなくてもいいんじゃないかと考えている。もちろん大きなカンファレンスは録画があった方が参加できない人も後から興味のある発表を見返せていいとは思う。25分発表で質疑応答5分で発表の時間配分はうまくいった。あまり準備できなかった割には伝えたいことはだいたい話せたと思う。なんか質疑応答で「カザモリ社は python のお仕事を受けてくれますか？」といった質問があってちょっと驚いた。ここ数年 python をメインにしたお仕事してなくて、仕事は java, go が多いと言っているせいか、python の仕事はやってないようにみえてしまうのかもしれない。python, java, go の3つの言語のお仕事は受けますよと回答した。発表終わってから1時間ほど懇親会をした。ほとんどコミュニティの主催者と発表者で雑談してた。久しぶりに外部の勉強会でいろんな人とお話することができて楽しかった。たまには外に出かけていくことに重要性も認識できた。またネタがあったら発表したいなとは思う。&lt;/p>
&lt;h2 id="呑み">呑み&lt;/h2>
&lt;p>懇親会が終わったのが22時で、疲れと空腹から仲のよい焼き鳥屋さんのお店に寄って晩ご飯を食べることにした。時短が終わっているので22時からでも飲みに行ける。お店は翌2時まで営業している。22時過ぎに行ったらお客さんは誰もいなくて、野菜サラダと焼き鳥を注文してマスターと雑談してた。&lt;/p>
&lt;p>時短が終わってから景気はどうかを聞いてみると、まだまだお客さんの戻りはコロナ前とくらべてまだまだだという。0時まわってから他の飲食店で働いている人たちが店内を埋まるぐらいは来てくれていたそうだけど、まだまだ余裕がないのか全然戻ってきてないと話されていた。0時半頃に2人組で「○○さんの紹介で来ました」みたいな既に酔っ払っているお客さんが来たりして、終電終わってからこういうお客さんが来たりしていたんだなと雰囲気は理解できた。マスターも2時に閉店して5時まで開いている他の飲食店に飲みに行くと話してた。そうやってお互いにお店に飲みに行って付き合いのようなものができているんだというのが理解できた。どこかのスナック行って3万円ほど使っても、必ずそのスナックの人がお店に来てくれて3万円以上使ってくれるという。お金をまわすってそういうことなんやなとマスターの話しを聞いていて理解できた。自分のお店を2時に閉店して、5時まで飲み歩いて、それから寝てまた次の日に仕事というのは体力的にすごくしんどそうで、マスター自身もコロナ明けは体調をみながら飲み歩いているとも話されてた。結局、2時前までマスターと雑談してて、私も22時から4時間弱ほど居座ってた。久しぶりに外で飲んでハイになっていたかもしれない。&lt;/p>
&lt;p>マスターのお勧めで &lt;a href="https://www.hamadasyuzou.co.jp/daiyame_brand">だいやめ&lt;/a> という芋焼酎をお湯割りで飲んだ。香熟芋という珍し？芋を使っていて、ライチのような香りのする芋焼酎でおいしかった。お土産によさそうなので覚えておこうと思う。&lt;/p></content></item><item><title>普通の休日</title><link>/diary/posts/2021/1106/</link><pubDate>Sat, 06 Nov 2021 12:52:56 +0900</pubDate><guid>/diary/posts/2021/1106/</guid><description>0時に寝て5時半に起きたが、休日だからゆっくりするかと思って二度寝して8時に起きた。知人のタイムラインで紹介されていていい言葉だなと思ったので書いておく。日記があるとこういう流れていくちょっとしたことを書く場所にもなるな。コミュニティ活動の本質はこれなんじゃないかという気もする。
自分にまったく利益をもたらさない人間を、どう扱うかでその人がどんな人間かがはっきりわかる
サミュエル・ジョンソン
ストレッチ 今週もジョギングの代わりにウォーキングをしてた。ジョギングやると筋肉痛や疲労から他の日を休みがちになるけど、ウォーキングならジョギングよりは継続しやすい。今週は4-5日ほど歩いた。ただストレッチはさぼってて2日しかできなかった。ウォーキングのせいかわからないけど、右足太もも後ろの筋が張るようになった。ストレッチを始めてから日々の運動や生活の変化と関節や筋肉の張りが変化するのも意識するようにもなってきた。今日の開脚幅は開始前167.5cmで、ストレッチ後168cmだった。前週よりは数値がよくなっているのでこんなもんかもしれない。
神戸のコワーキングスペースの半歩先の未来を考える たまたまタイムラインでみかけたので 神戸のコワーキングスペースの半歩先の未来を考える を視聴していた。私はシェアオフィスとコワーキングスペースが併設された場所で働いているのでテーマには関心がある。途中からだけど、13時半から15時までみていた。
第一部はコワーキングスペースの運営者が登壇して、どちらかというそれぞれの運営者がやっていることの、宣伝的な要素が強かったように思う。ある運営者が起業家を育てるのは大学生からでは遅くて、保育園から起業家教育をしているという話題があった。そこで何を教えているかというと、子どもの頃から徹底的に自己肯定感を高めるための教育をしているらしい。たまたま 自己肯定感が高い人の4大特徴が明らかに！ の記事をみたら、自己肯定感が高い人は他人も肯定するという内容がある。たしかに日本/日本人の同調圧力は異質なものを拒む傾向があると考えると、自己肯定感の高低がそういった文化の背景にも現れているのかもしれないと思えた。
第二部はコワーキングスペースの利用者として、二地域居住シェアハウスプロジェクトの研究/実践をしている佐藤さんと、メディアアートをされている 浅井宣通 さんが登壇していた。佐藤さんが冒頭でコワーキングスペースにはびっくりするほどすごい人がいるみたいな話しをした後で、浅井さんが登場するといった流れが偶然できてて、ほんとだ、これはすごいとなったw 浅井さんはメディアアートを言葉で説明しても伝わりにくいので動画でみてもらうようにしていると話されていた。私もみてこれはすごい人だとすぐに理解できた。私が興味をもつ作品だと 攻殻機動隊 新劇場版Virtual Reality Diver の Creative Director も務められたらしい。企業やイベントの PR のための映像で浅井さんが手伝っている作品はいくつもあるそうだ。
浅井さんは東京を脱出したいという想いがずっとあって、コロナでリモートワークが普通になり、奥さんの実家の須磨に引っ越してきたらしい。ただ自身は神戸にはほとんど知り合いがいない状態でコワーキングスペースを利用しているうちに、人を紹介してもらって人脈を形成することができたという。東京は大半が地方から出てきた人たちの集まりなので必然として孤立しており、競争関係になってしまうという。神戸の人たちは地元で育ってそのつながりが強いという違いを感じているらしい。地元の人なので協力の関係を築きやすい。コワーキングスペースがその触媒になっていると話されていた。人がつながるには、場所や触媒が必要でコミュニティマネージャーもそういった役割を担っていて大事だという。
多様性は大事だが、多様性だけでも人のつながりができない。同じ分野だとライバル関係になってしまったりする。そこで対話の深さが重要だと話されていた。同じ分野であってもお互いが対話を通して理解を深めると、共通項があったり、細かい得意分野が違ったりもする。デザイナー同士がかぶってしまうと、よく競争の関係になってしまうし、全然違う人と話しても話が噛みあわなくて仕事で苦労することもあったという話があった。それで対話の深さが大事ということに気付いたといった話だった。もう1点、おもしろかった話が地元の人は土地への感情として、この場所・土地が好きだという共通項があるので協力の関係を築きやすいのではないかと。東京は多くの人が生まれ育った土地ではないのでそういった感情は抱きにくいが、神戸っ子という言葉があるように神戸の人たちにはそういった土地に根ざした愛着があり、それを媒介につながるのも美しいといったことを話されていた。
第三部はコワーキングスペースを支える人たちとして、カフーツ の伊藤さん、ANCHOR KOBE の立ち上げ に関わった神戸市のイノベーション専門官の松山さん、fixU というサービスを提供している山岡さんが登壇していた。
私がもっとも興味深かったのは伊藤さんの話しだったのでそれをまとめておく。コワーキングスペースはただ作業する場所ではなく、課題を解決したい人がいて、それを手伝いたいという人がつながることで価値が生まれるという。長い間、コワーキングスペースに関わってきたことから経験が積み重なってわかってきたことがあると話されていた。「コミュニティはどうやって作るんですか？」という質問に答えるのは難しいものの、その取っ掛かりとして、まず課題をみえる化するのが大事だという話しをされていた。イベントなどで課題を表明して、多くの人たちに知ってもらうことで、その課題の解決に興味をもつ人たちが集まってきて、それが協調となり、コミュニティへとつながっていくという。Facebook 社が Meta 社に社名変更して、Microsoft もそれに追従し、メタバースの話題が盛り上がっている。ビッグワードに流されるつもりはないが、コロナによりオンラインでできることの幅が広いことを、仕事はオンラインでよいと多くの人たちは気付いた。じゃあ人と人との関わりがどんな価値をもつのか、コロナが落ち着いてくる時期 (この先1-2年) でそういう方法論も新たに出てくるんじゃないかとも話されていた。
Slack apps の調査 次回の bizpy 勉強会向けに 新機能、アプリのホーム・ヴューを活用しよう🏡 を読んで実際に bolt-python やってみた。UI の設定は JSON で記述できるようになっていて、Block Kit Builder でぽちぽちやるとどんな JSON を書けばよいかのサンプルのペイロードを確認できる。これらの UI に対して操作すると、プログラミングの用語で言えば、すべてイベントが発生してリクエストが届くような仕組みになっている。bolt のコード上ではそれぞれ event と action と view という名前が付いたイベントを扱うことで任意のモーダル画面を表示したり、そのフォームのユーザー入力を取得したりできる。一通りサンプルコードはできた。あとは簡単に資料をまとめるだけ。</description><content>&lt;p>0時に寝て5時半に起きたが、休日だからゆっくりするかと思って二度寝して8時に起きた。知人のタイムラインで紹介されていていい言葉だなと思ったので書いておく。日記があるとこういう流れていくちょっとしたことを書く場所にもなるな。コミュニティ活動の本質はこれなんじゃないかという気もする。&lt;/p>
&lt;blockquote>
&lt;p>自分にまったく利益をもたらさない人間を、どう扱うかでその人がどんな人間かがはっきりわかる&lt;/p>
&lt;p>&lt;a href="https://ja.wikipedia.org/wiki/%E3%82%B5%E3%83%9F%E3%83%A5%E3%82%A8%E3%83%AB%E3%83%BB%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%BD%E3%83%B3">サミュエル・ジョンソン&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週もジョギングの代わりにウォーキングをしてた。ジョギングやると筋肉痛や疲労から他の日を休みがちになるけど、ウォーキングならジョギングよりは継続しやすい。今週は4-5日ほど歩いた。ただストレッチはさぼってて2日しかできなかった。ウォーキングのせいかわからないけど、右足太もも後ろの筋が張るようになった。ストレッチを始めてから日々の運動や生活の変化と関節や筋肉の張りが変化するのも意識するようにもなってきた。今日の開脚幅は開始前167.5cmで、ストレッチ後168cmだった。前週よりは数値がよくなっているのでこんなもんかもしれない。&lt;/p>
&lt;h2 id="神戸のコワーキングスペースの半歩先の未来を考える">神戸のコワーキングスペースの半歩先の未来を考える&lt;/h2>
&lt;p>たまたまタイムラインでみかけたので &lt;a href="https://2021.078kobe.jp/events/16089/">神戸のコワーキングスペースの半歩先の未来を考える&lt;/a> を視聴していた。私はシェアオフィスとコワーキングスペースが併設された場所で働いているのでテーマには関心がある。途中からだけど、13時半から15時までみていた。&lt;/p>
&lt;p>第一部はコワーキングスペースの運営者が登壇して、どちらかというそれぞれの運営者がやっていることの、宣伝的な要素が強かったように思う。ある運営者が起業家を育てるのは大学生からでは遅くて、保育園から起業家教育をしているという話題があった。そこで何を教えているかというと、子どもの頃から徹底的に自己肯定感を高めるための教育をしているらしい。たまたま &lt;a href="https://studyhacker.net/self-esteem-high">自己肯定感が高い人の4大特徴が明らかに！&lt;/a> の記事をみたら、自己肯定感が高い人は他人も肯定するという内容がある。たしかに日本/日本人の同調圧力は異質なものを拒む傾向があると考えると、自己肯定感の高低がそういった文化の背景にも現れているのかもしれないと思えた。&lt;/p>
&lt;p>第二部はコワーキングスペースの利用者として、二地域居住シェアハウスプロジェクトの研究/実践をしている佐藤さんと、メディアアートをされている &lt;a href="https://www.nobumichiasai.com/">浅井宣通&lt;/a> さんが登壇していた。佐藤さんが冒頭でコワーキングスペースにはびっくりするほどすごい人がいるみたいな話しをした後で、浅井さんが登場するといった流れが偶然できてて、ほんとだ、これはすごいとなったw 浅井さんはメディアアートを言葉で説明しても伝わりにくいので動画でみてもらうようにしていると話されていた。私もみてこれはすごい人だとすぐに理解できた。私が興味をもつ作品だと &lt;a href="http://www.sign.site/koukaku_vr/">攻殻機動隊 新劇場版Virtual Reality Diver&lt;/a> の Creative Director も務められたらしい。企業やイベントの PR のための映像で浅井さんが手伝っている作品はいくつもあるそうだ。&lt;/p>
&lt;p>浅井さんは東京を脱出したいという想いがずっとあって、コロナでリモートワークが普通になり、奥さんの実家の須磨に引っ越してきたらしい。ただ自身は神戸にはほとんど知り合いがいない状態でコワーキングスペースを利用しているうちに、人を紹介してもらって人脈を形成することができたという。東京は大半が地方から出てきた人たちの集まりなので必然として孤立しており、競争関係になってしまうという。神戸の人たちは地元で育ってそのつながりが強いという違いを感じているらしい。地元の人なので協力の関係を築きやすい。コワーキングスペースがその触媒になっていると話されていた。人がつながるには、場所や触媒が必要でコミュニティマネージャーもそういった役割を担っていて大事だという。&lt;/p>
&lt;p>多様性は大事だが、多様性だけでも人のつながりができない。同じ分野だとライバル関係になってしまったりする。そこで対話の深さが重要だと話されていた。同じ分野であってもお互いが対話を通して理解を深めると、共通項があったり、細かい得意分野が違ったりもする。デザイナー同士がかぶってしまうと、よく競争の関係になってしまうし、全然違う人と話しても話が噛みあわなくて仕事で苦労することもあったという話があった。それで対話の深さが大事ということに気付いたといった話だった。もう1点、おもしろかった話が地元の人は土地への感情として、この場所・土地が好きだという共通項があるので協力の関係を築きやすいのではないかと。東京は多くの人が生まれ育った土地ではないのでそういった感情は抱きにくいが、神戸っ子という言葉があるように神戸の人たちにはそういった土地に根ざした愛着があり、それを媒介につながるのも美しいといったことを話されていた。&lt;/p>
&lt;p>第三部はコワーキングスペースを支える人たちとして、&lt;a href="http://cahootz.jp/">カフーツ&lt;/a> の伊藤さん、&lt;a href="https://jocr.jp/sunday/repo/1656/">ANCHOR KOBE の立ち上げ&lt;/a> に関わった神戸市のイノベーション専門官の松山さん、&lt;a href="https://fixu.jp/">fixU&lt;/a> というサービスを提供している山岡さんが登壇していた。&lt;/p>
&lt;p>私がもっとも興味深かったのは伊藤さんの話しだったのでそれをまとめておく。コワーキングスペースはただ作業する場所ではなく、課題を解決したい人がいて、それを手伝いたいという人がつながることで価値が生まれるという。長い間、コワーキングスペースに関わってきたことから経験が積み重なってわかってきたことがあると話されていた。「コミュニティはどうやって作るんですか？」という質問に答えるのは難しいものの、その取っ掛かりとして、まず課題をみえる化するのが大事だという話しをされていた。イベントなどで課題を表明して、多くの人たちに知ってもらうことで、その課題の解決に興味をもつ人たちが集まってきて、それが協調となり、コミュニティへとつながっていくという。Facebook 社が Meta 社に社名変更して、Microsoft もそれに追従し、メタバースの話題が盛り上がっている。ビッグワードに流されるつもりはないが、コロナによりオンラインでできることの幅が広いことを、仕事はオンラインでよいと多くの人たちは気付いた。じゃあ人と人との関わりがどんな価値をもつのか、コロナが落ち着いてくる時期 (この先1-2年) でそういう方法論も新たに出てくるんじゃないかとも話されていた。&lt;/p>
&lt;h2 id="slack-apps-の調査">Slack apps の調査&lt;/h2>
&lt;p>次回の bizpy 勉強会向けに &lt;a href="https://api.slack.com/lang/ja-jp/app-home-with-modal">新機能、アプリのホーム・ヴューを活用しよう🏡&lt;/a> を読んで実際に &lt;a href="https://github.com/slackapi/bolt-python">bolt-python&lt;/a> やってみた。UI の設定は JSON で記述できるようになっていて、&lt;a href="https://app.slack.com/block-kit-builder/">Block Kit Builder&lt;/a> でぽちぽちやるとどんな JSON を書けばよいかのサンプルのペイロードを確認できる。これらの UI に対して操作すると、プログラミングの用語で言えば、すべてイベントが発生してリクエストが届くような仕組みになっている。bolt のコード上ではそれぞれ &lt;code>event&lt;/code> と &lt;code>action&lt;/code> と &lt;code>view&lt;/code> という名前が付いたイベントを扱うことで任意のモーダル画面を表示したり、そのフォームのユーザー入力を取得したりできる。一通りサンプルコードはできた。あとは簡単に資料をまとめるだけ。&lt;/p></content></item><item><title>フラクタルスプリントの調査</title><link>/diary/posts/2021/1029/</link><pubDate>Fri, 29 Oct 2021 01:40:10 +0900</pubDate><guid>/diary/posts/2021/1029/</guid><description>2時から Connect 2021 のイベントをみてた。3時過ぎぐらいには眠くて耐えられなくなってそのまま寝落ちしたら7時に起きた。本当は6時から金朝ツメトギの朝活の日だったのに寝坊して参加できなかった。なんか疲れて家に帰って13時から17時まで寝てた。生活のリズムを崩すと大きく集中力がなくなる。その後、またオフィスに行って作業してた。
Connect 2021 マーク・ザッカーバーグの基調講演を聞いていると、機械学習の次のテックの波はメタバースなのかなぁとか思ったりもしたけど、あとで メタバースはディストピアの悪夢です。より良い現実の構築に焦点を当てましょう。 を読んでいて、やっぱり違うよなぁとも思った。自分がメタバースの世界で活動したり、アプリケーション開発をやってないから他人の意見に引っ張らられる。いずれにしても自分でちょっとやってみて、メタバースとの今後の付き合い方を考えないといけないということだけは理解した。今日の時点ではこのツィートがおもしろかった。
pic.twitter.com/4UHSycJ9HR
&amp;mdash; seya (@sekikazu01) October 29, 2021 みんなの Python 勉強会 あべさんから依頼がきて みんなのPython勉強会#75 で発表することになった。いつだったか忘れたけど、コロナ禍になる前だったと思うけど、いつか発表してほしいみたいな話しをしたりしながら機会がなくていまに至るというのもあって、内容があうならいっかという感じで引き受けた。20-30分程度でできるPyとエキPy第3版の話しを半々ずつみたいな内容でやるつもり。週末に内容を詰めて資料を作るつもり。Python は普段使いのツールとして使っているものの、お仕事で Go や Java で開発するようになってからあまり深く関わらないようになってしまった。ずっと Python コミュニティの勉強会に行ってたから、いまでも Python の人とみられるのは仕方ないかなとも思う。
フラクタルスプリント ある記事で フラクタルスプリント というキーワードをみかけて、なんのことか分からなかったので調べてみた。47機関というチームが実践しているスクラムをベースにした開発方法論と言えるのかな？次の発表動画をみて雰囲気は理解できた。
15分スプリントの具体的な進め方について動画で話した #15min_sprint フラクタルスプリントのやり方はこんな感じ。
基本はスクラムのイベントをそれぞれのスプリントで行う スプリントの中にスプリントを含めるという入れ子構造をとる 1ヶ月 → 1週間 → 1日 → 1時間 → 15分の入れ子 それぞれのスプリントの20%程度の時間は自由時間にしてバッファをとる 例えば、1時間のスプリントに含むのは 15分 x 3 のスプリントと残り時間は自由なスプリントの時間にする 15分スプリントは10分タスクを1つだけやるスプリントと言える 残りの5分をスクラムイベントにあてる 極端にイテレーション期間の短いスプリントをすることで、通常のスクラムの開発方法論になかったイノベーションが起きるのではないか？といったところを狙いに47機関さんが業務で実践的にやっているプラクティスと言えるみたい。実際にやってみてうまくいったことなどを話しているので、ある種の学習コストを要求するものの、よいところもあるようには思える。おそらくは意図的に悪いところを話してなかったようには思える。例えば、それぞれのスプリントのイベントにおけるオーバーヘッドは大きくなるので作業時間が減るとか、10分タスクですべてチケット化すると、チケット数が増えるので必然的に過程の記録はチケットに残ってないはず。スプリントバックログを付箋の代わりに使うだけというのはスクラム開発一般の話ではあるけど、このやり方では開発者が何をやっているかを書く場所としてチケットは適切な場所ではなくなる。代わりに wiki にまとめるとは話してた。wiki だとフロー情報を監視するのが難しくなるが、その分、短いスプリントでのイベント (プランニング、レビュー、レトロスペクティブ) が頻繁にあるのでそれをフロー情報の監視の代替として機能するようにみえる。いわば強制で。</description><content>&lt;p>2時から &lt;a href="https://www.facebookconnect.com/ja-jp/">Connect 2021&lt;/a> のイベントをみてた。3時過ぎぐらいには眠くて耐えられなくなってそのまま寝落ちしたら7時に起きた。本当は6時から金朝ツメトギの朝活の日だったのに寝坊して参加できなかった。なんか疲れて家に帰って13時から17時まで寝てた。生活のリズムを崩すと大きく集中力がなくなる。その後、またオフィスに行って作業してた。&lt;/p>
&lt;h2 id="connect-2021">Connect 2021&lt;/h2>
&lt;p>マーク・ザッカーバーグの基調講演を聞いていると、機械学習の次のテックの波はメタバースなのかなぁとか思ったりもしたけど、あとで &lt;a href="https://nianticlabs.com/blog/real-world-metaverse/">メタバースはディストピアの悪夢です。より良い現実の構築に焦点を当てましょう。&lt;/a> を読んでいて、やっぱり違うよなぁとも思った。自分がメタバースの世界で活動したり、アプリケーション開発をやってないから他人の意見に引っ張らられる。いずれにしても自分でちょっとやってみて、メタバースとの今後の付き合い方を考えないといけないということだけは理解した。今日の時点ではこのツィートがおもしろかった。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="und" dir="ltr">&lt;a href="https://t.co/4UHSycJ9HR">pic.twitter.com/4UHSycJ9HR&lt;/a>&lt;/p>&amp;mdash; seya (@sekikazu01) &lt;a href="https://twitter.com/sekikazu01/status/1453963389420531714?ref_src=twsrc%5Etfw">October 29, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="みんなの-python-勉強会">みんなの Python 勉強会&lt;/h2>
&lt;p>あべさんから依頼がきて &lt;a href="https://startpython.connpass.com/event/228136/">みんなのPython勉強会#75&lt;/a> で発表することになった。いつだったか忘れたけど、コロナ禍になる前だったと思うけど、いつか発表してほしいみたいな話しをしたりしながら機会がなくていまに至るというのもあって、内容があうならいっかという感じで引き受けた。20-30分程度でできるPyとエキPy第3版の話しを半々ずつみたいな内容でやるつもり。週末に内容を詰めて資料を作るつもり。Python は普段使いのツールとして使っているものの、お仕事で Go や Java で開発するようになってからあまり深く関わらないようになってしまった。ずっと Python コミュニティの勉強会に行ってたから、いまでも Python の人とみられるのは仕方ないかなとも思う。&lt;/p>
&lt;h2 id="フラクタルスプリント">フラクタルスプリント&lt;/h2>
&lt;p>ある記事で &lt;strong>フラクタルスプリント&lt;/strong> というキーワードをみかけて、なんのことか分からなかったので調べてみた。47機関というチームが実践しているスクラムをベースにした開発方法論と言えるのかな？次の発表動画をみて雰囲気は理解できた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kyon-mm.hatenablog.com/entry/2020/10/18/171650">15分スプリントの具体的な進め方について動画で話した #15min_sprint&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>フラクタルスプリントのやり方はこんな感じ。&lt;/p>
&lt;ul>
&lt;li>基本はスクラムのイベントをそれぞれのスプリントで行う&lt;/li>
&lt;li>スプリントの中にスプリントを含めるという入れ子構造をとる
&lt;ul>
&lt;li>1ヶ月 → 1週間 → 1日 → 1時間 → 15分の入れ子&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>それぞれのスプリントの20%程度の時間は自由時間にしてバッファをとる
&lt;ul>
&lt;li>例えば、1時間のスプリントに含むのは 15分 x 3 のスプリントと残り時間は自由なスプリントの時間にする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>15分スプリントは10分タスクを1つだけやるスプリントと言える
&lt;ul>
&lt;li>残りの5分をスクラムイベントにあてる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>極端にイテレーション期間の短いスプリントをすることで、通常のスクラムの開発方法論になかったイノベーションが起きるのではないか？といったところを狙いに47機関さんが業務で実践的にやっているプラクティスと言えるみたい。実際にやってみてうまくいったことなどを話しているので、ある種の学習コストを要求するものの、よいところもあるようには思える。おそらくは意図的に悪いところを話してなかったようには思える。例えば、それぞれのスプリントのイベントにおけるオーバーヘッドは大きくなるので作業時間が減るとか、10分タスクですべてチケット化すると、チケット数が増えるので必然的に過程の記録はチケットに残ってないはず。スプリントバックログを付箋の代わりに使うだけというのはスクラム開発一般の話ではあるけど、このやり方では開発者が何をやっているかを書く場所としてチケットは適切な場所ではなくなる。代わりに wiki にまとめるとは話してた。wiki だとフロー情報を監視するのが難しくなるが、その分、短いスプリントでのイベント (プランニング、レビュー、レトロスペクティブ) が頻繁にあるのでそれをフロー情報の監視の代替として機能するようにみえる。いわば強制で。&lt;/p>
&lt;p>15分スプリントと聞いて先入観でイメージするよりも、合理的なところも理解できたのでチームの学習コストとスプリントイベントのオーバーヘッドを受け入れるなら悪くない開発方法論かもしれない。良い・悪いといった是非ではなく、47機関さんが大事にしているチームの価値観や文化、そしてチームをよくするための実践的な方法論と一緒に理解することでこの開発方法論は活きてくる。開発方法論だけをみてあれこれ言うのは適切ではないとも思えた。自分たちの業務や働き方にあった開発方法論を開発チームはずっと考え続けていくべきだと私は考えていて、47機関というチームはフラクタルスプリントという手法を編み出して、それ自体が素晴らしいなと思えた。&lt;/p></content></item><item><title>vimgrep 検索の嬉しさ</title><link>/diary/posts/2021/1013/</link><pubDate>Wed, 13 Oct 2021 09:02:46 +0900</pubDate><guid>/diary/posts/2021/1013/</guid><description>2時頃に寝て6時に起きる。普段、日記は vim で書いている。ちょっとした過去の日記の検索に vimgrep でこと足りるのが嬉しい。テキストで日記を書いていることの利点かな。夜に fin-pyコードリーディング会#4 に参加した。事前に hackmd に発表内容のメモを書いてた。いろんな発表者の視点があってコードリーディングのイベントはおもしろかった。
朝活 【三宮.dev オンライン】リモート朝活もくもく会 に参加してみた。何もなかったらだいたい7時頃に起きるのがなにか目的があると6時に起きれる。人体の不思議。せっかく起きたので 前に More Joel on Software を読んだとき に学生向けのアドバイスにあったミクロ経済学の勉強のためにその入門書を読み始めた。参加者が勉強会の常連ばかりだったので朝からわりと雑談してた。2人転職するという話で2人とも東京の会社でフルリモートワークで働くらしい。働き方が変わったなと感じる。その後、第1章の無差別曲線を読んだ。
YouTube 配信と集中力 あんちぽさんの 2021年10月9日 の日記でスライド作成の興がのらないので YouTube 配信しながらやったら集中できてよかったと書いてあったのでちょっと眺めてみた。なんかスライドの作成のやり方とか、自分と違うのかな？とか思いながらみたけど、やり方自体は普通だった。ただ集中できてよかったとあるので普段のやり方とは異なることをすることに意義があるのかな？とも思えた。試しに YouTube Live やってみようとしたら初期設定？に24時間かかるとのこと。代わりに kazam というスクリーンリコーダーの使い方を調べてた。勉強会で作業したログとかを録画しておいてなにかに使えたりするかもしれない。
データ指向アプリケーションデザイン 半日ほどかかって3章ストレージと抽出を読んだ。読みながら書いているので時間がかかる。今日はこれだけ。まとめはこんな感じ。
データベースのシステムには2つの用途があり、その特性やパフォーマンスを最適化するためにストレージエンジンやデータ構造が異なるもので運用されるようになってきた。
オンライントランザクション処理 (OLTP) 行指向、トランザクション処理 オンライン分析処理 (OLAP) 列指向、分析クエリ OLTP には2つの主要なストレージエンジンがある。
B ツリー 1970年代からあり、成熟していて且つ効率的なインデックスのデータ構造 LSM ツリー 比較的最近開発された、ディスク上でのランダムアクセスをシステム的にシーケンシャルアクセスに変換して、書き込みのスループットを高める手法。もとは Google の BigTable の論文？ OLAP の典型的なデータウェアハウスの高レベルでのアーキテクチャでは、大量の行をシーケンシャルにスキャンしなければならないクエリの場合、インデックスはあまり関係なく、データを非常にコンパクトにエンコードし、クエリがディスクから読まなければならないデータの量を最小限にとどめることが重要となる。この目標を達成するのに列指向のストレージが役立つ。</description><content>&lt;p>2時頃に寝て6時に起きる。普段、日記は vim で書いている。ちょっとした過去の日記の検索に &lt;code>vimgrep&lt;/code> でこと足りるのが嬉しい。テキストで日記を書いていることの利点かな。夜に &lt;a href="https://fin-py.connpass.com/event/226933/">fin-pyコードリーディング会#4&lt;/a> に参加した。事前に &lt;a href="https://hackmd.io/bFBFaPbYS1Kqfc97HMlp7Q?view">hackmd&lt;/a> に発表内容のメモを書いてた。いろんな発表者の視点があってコードリーディングのイベントはおもしろかった。&lt;/p>
&lt;h2 id="朝活">朝活&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/227678/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> に参加してみた。何もなかったらだいたい7時頃に起きるのがなにか目的があると6時に起きれる。人体の不思議。せっかく起きたので &lt;a href="/diary/diary/posts/2021/0929/#joel-on-software">前に More Joel on Software を読んだとき&lt;/a> に学生向けのアドバイスにあったミクロ経済学の勉強のためにその入門書を読み始めた。参加者が勉強会の常連ばかりだったので朝からわりと雑談してた。2人転職するという話で2人とも東京の会社でフルリモートワークで働くらしい。働き方が変わったなと感じる。その後、第1章の無差別曲線を読んだ。&lt;/p>
&lt;h2 id="youtube-配信と集中力">YouTube 配信と集中力&lt;/h2>
&lt;p>あんちぽさんの &lt;a href="https://kentarokuribayashi.com/journal/2021/10/09/2021%e5%b9%b410%e6%9c%889%e6%97%a5">2021年10月9日&lt;/a> の日記でスライド作成の興がのらないので YouTube 配信しながらやったら集中できてよかったと書いてあったのでちょっと眺めてみた。なんかスライドの作成のやり方とか、自分と違うのかな？とか思いながらみたけど、やり方自体は普通だった。ただ集中できてよかったとあるので普段のやり方とは異なることをすることに意義があるのかな？とも思えた。試しに YouTube Live やってみようとしたら初期設定？に24時間かかるとのこと。代わりに &lt;a href="https://launchpad.net/kazam">kazam&lt;/a> というスクリーンリコーダーの使い方を調べてた。勉強会で作業したログとかを録画しておいてなにかに使えたりするかもしれない。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>半日ほどかかって3章ストレージと抽出を読んだ。読みながら書いているので時間がかかる。今日はこれだけ。まとめはこんな感じ。&lt;/p>
&lt;blockquote>
&lt;p>データベースのシステムには2つの用途があり、その特性やパフォーマンスを最適化するためにストレージエンジンやデータ構造が異なるもので運用されるようになってきた。&lt;/p>
&lt;ul>
&lt;li>オンライントランザクション処理 (OLTP)
&lt;ul>
&lt;li>行指向、トランザクション処理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>オンライン分析処理 (OLAP)
&lt;ul>
&lt;li>列指向、分析クエリ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>OLTP には2つの主要なストレージエンジンがある。&lt;/p>
&lt;ul>
&lt;li>B ツリー
&lt;ul>
&lt;li>1970年代からあり、成熟していて且つ効率的なインデックスのデータ構造&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>LSM ツリー
&lt;ul>
&lt;li>比較的最近開発された、ディスク上でのランダムアクセスをシステム的にシーケンシャルアクセスに変換して、書き込みのスループットを高める手法。もとは Google の BigTable の論文？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>OLAP の典型的なデータウェアハウスの高レベルでのアーキテクチャでは、大量の行をシーケンシャルにスキャンしなければならないクエリの場合、インデックスはあまり関係なく、データを非常にコンパクトにエンコードし、クエリがディスクから読まなければならないデータの量を最小限にとどめることが重要となる。この目標を達成するのに列指向のストレージが役立つ。&lt;/p>
&lt;/blockquote>
&lt;p>過去に Cassandra を使ったプロダクトの開発に関わっていたから B ツリーと LSM ツリーの概要は知っていて3章で書いてあることはだいたい理解できた。データウェアハウスに関しては、前にお手伝いしていた会社で普通のログを Amazon Athena で処理すると1時間とかかかって分析クエリが Parquet に変換すると数分で完了したりするのを目の当たりにしてた。分析処理で読み込むデータ量を削減する列指向の考え方は理解しておく必要がある。行指向のデータを列指向フォーマットである &lt;a href="https://parquet.apache.org/">Parquet&lt;/a> に変換する &lt;a href="https://github.com/reproio/columnify">columnify&lt;/a> のコードも読んだことがあったので内容のイメージはできるけど、実務経験が少ないと全体像がわかっておらず、本書を読みながら学び直ししてた。&lt;/p></content></item></channel></rss>