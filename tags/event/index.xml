<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>event on forest nook</title><link>/diary/tags/event/</link><description>Recent content in event on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Fri, 29 Oct 2021 01:40:10 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/event/index.xml" rel="self" type="application/rss+xml"/><item><title>フラクタルスプリントの調査</title><link>/diary/posts/2021/1029/</link><pubDate>Fri, 29 Oct 2021 01:40:10 +0900</pubDate><guid>/diary/posts/2021/1029/</guid><description>2時から Connect 2021 のイベントをみてた。3時過ぎぐらいには眠くて耐えられなくなってそのまま寝落ちしたら7時に起きた。本当は6時から金朝ツメトギの朝活の日だったのに寝坊して参加できなかった。なんか疲れて家に帰って13時から17時まで寝てた。生活のリズムを崩すと大きく集中力がなくなる。その後、またオフィスに行って作業してた。
Connect 2021 マーク・ザッカーバーグの基調講演を聞いていると、機械学習の次のテックの波はメタバースなのかなぁとか思ったりもしたけど、あとで メタバースはディストピアの悪夢です。より良い現実の構築に焦点を当てましょう。 を読んでいて、やっぱり違うよなぁとも思った。自分がメタバースの世界で活動したり、アプリケーション開発をやってないから他人の意見に引っ張らられる。いずれにしても自分でちょっとやってみて、メタバースとの今後の付き合い方を考えないといけないということだけは理解した。今日の時点ではこのツィートがおもしろかった。
pic.twitter.com/4UHSycJ9HR
&amp;mdash; フロントエンド大好きseyaさん (@sekikazu01) October 29, 2021 みんなの Python 勉強会 あべさんから依頼がきて みんなのPython勉強会#75 で発表することになった。いつだったか忘れたけど、コロナ禍になる前だったと思うけど、いつか発表してほしいみたいな話しをしたりしながら機会がなくていまに至るというのもあって、内容があうならいっかという感じで引き受けた。20-30分程度でできるPyとエキPy第3版の話しを半々ずつみたいな内容でやるつもり。週末に内容を詰めて資料を作るつもり。Python は普段使いのツールとして使っているものの、お仕事で Go や Java で開発するようになってからあまり深く関わらないようになってしまった。ずっと Python コミュニティの勉強会に行ってたから、いまでも Python の人とみられるのは仕方ないかなとも思う。
フラクタルスプリント ある記事で フラクタルスプリント というキーワードをみかけて、なんのことか分からなかったので調べてみた。47機関というチームが実践しているスクラムをベースにした開発方法論と言えるのかな？次の発表動画をみて雰囲気は理解できた。
15分スプリントの具体的な進め方について動画で話した #15min_sprint フラクタルスプリントのやり方はこんな感じ。
基本はスクラムのイベントをそれぞれのスプリントで行う スプリントの中にスプリントを含めるという入れ子構造をとる 1ヶ月 → 1週間 → 1日 → 1時間 → 15分の入れ子 それぞれのスプリントの20%程度の時間は自由時間にしてバッファをとる 例えば、1時間のスプリントに含むのは 15分 x 3 のスプリントと残り時間は自由なスプリントの時間にする 15分スプリントは10分タスクを1つだけやるスプリントと言える 残りの5分をスクラムイベントにあてる 極端にイテレーション期間の短いスプリントをすることで、通常のスクラムの開発方法論になかったイノベーションが起きるのではないか？といったところを狙いに47機関さんが業務で実践的にやっているプラクティスと言えるみたい。実際にやってみてうまくいったことなどを話しているので、ある種の学習コストを要求するものの、よいところもあるようには思える。おそらくは意図的に悪いところを話してなかったようには思える。例えば、それぞれのスプリントのイベントにおけるオーバーヘッドは大きくなるので作業時間が減るとか、10分タスクですべてチケット化すると、チケット数が増えるので必然的に過程の記録はチケットに残ってないはず。スプリントバックログを付箋の代わりに使うだけというのはスクラム開発一般の話ではあるけど、このやり方では開発者が何をやっているかを書く場所としてチケットは適切な場所ではなくなる。代わりに wiki にまとめるとは話してた。wiki だとフロー情報を監視するのが難しくなるが、その分、短いスプリントでのイベント (プランニング、レビュー、レトロスペクティブ) が頻繁にあるのでそれをフロー情報の監視の代替として機能するようにみえる。いわば強制で。</description><content>&lt;p>2時から &lt;a href="https://www.facebookconnect.com/ja-jp/">Connect 2021&lt;/a> のイベントをみてた。3時過ぎぐらいには眠くて耐えられなくなってそのまま寝落ちしたら7時に起きた。本当は6時から金朝ツメトギの朝活の日だったのに寝坊して参加できなかった。なんか疲れて家に帰って13時から17時まで寝てた。生活のリズムを崩すと大きく集中力がなくなる。その後、またオフィスに行って作業してた。&lt;/p>
&lt;h2 id="connect-2021">Connect 2021&lt;/h2>
&lt;p>マーク・ザッカーバーグの基調講演を聞いていると、機械学習の次のテックの波はメタバースなのかなぁとか思ったりもしたけど、あとで &lt;a href="https://nianticlabs.com/blog/real-world-metaverse/">メタバースはディストピアの悪夢です。より良い現実の構築に焦点を当てましょう。&lt;/a> を読んでいて、やっぱり違うよなぁとも思った。自分がメタバースの世界で活動したり、アプリケーション開発をやってないから他人の意見に引っ張らられる。いずれにしても自分でちょっとやってみて、メタバースとの今後の付き合い方を考えないといけないということだけは理解した。今日の時点ではこのツィートがおもしろかった。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="und" dir="ltr">&lt;a href="https://t.co/4UHSycJ9HR">pic.twitter.com/4UHSycJ9HR&lt;/a>&lt;/p>&amp;mdash; フロントエンド大好きseyaさん (@sekikazu01) &lt;a href="https://twitter.com/sekikazu01/status/1453963389420531714?ref_src=twsrc%5Etfw">October 29, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="みんなの-python-勉強会">みんなの Python 勉強会&lt;/h2>
&lt;p>あべさんから依頼がきて &lt;a href="https://startpython.connpass.com/event/228136/">みんなのPython勉強会#75&lt;/a> で発表することになった。いつだったか忘れたけど、コロナ禍になる前だったと思うけど、いつか発表してほしいみたいな話しをしたりしながら機会がなくていまに至るというのもあって、内容があうならいっかという感じで引き受けた。20-30分程度でできるPyとエキPy第3版の話しを半々ずつみたいな内容でやるつもり。週末に内容を詰めて資料を作るつもり。Python は普段使いのツールとして使っているものの、お仕事で Go や Java で開発するようになってからあまり深く関わらないようになってしまった。ずっと Python コミュニティの勉強会に行ってたから、いまでも Python の人とみられるのは仕方ないかなとも思う。&lt;/p>
&lt;h2 id="フラクタルスプリント">フラクタルスプリント&lt;/h2>
&lt;p>ある記事で &lt;strong>フラクタルスプリント&lt;/strong> というキーワードをみかけて、なんのことか分からなかったので調べてみた。47機関というチームが実践しているスクラムをベースにした開発方法論と言えるのかな？次の発表動画をみて雰囲気は理解できた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kyon-mm.hatenablog.com/entry/2020/10/18/171650">15分スプリントの具体的な進め方について動画で話した #15min_sprint&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>フラクタルスプリントのやり方はこんな感じ。&lt;/p>
&lt;ul>
&lt;li>基本はスクラムのイベントをそれぞれのスプリントで行う&lt;/li>
&lt;li>スプリントの中にスプリントを含めるという入れ子構造をとる
&lt;ul>
&lt;li>1ヶ月 → 1週間 → 1日 → 1時間 → 15分の入れ子&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>それぞれのスプリントの20%程度の時間は自由時間にしてバッファをとる
&lt;ul>
&lt;li>例えば、1時間のスプリントに含むのは 15分 x 3 のスプリントと残り時間は自由なスプリントの時間にする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>15分スプリントは10分タスクを1つだけやるスプリントと言える
&lt;ul>
&lt;li>残りの5分をスクラムイベントにあてる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>極端にイテレーション期間の短いスプリントをすることで、通常のスクラムの開発方法論になかったイノベーションが起きるのではないか？といったところを狙いに47機関さんが業務で実践的にやっているプラクティスと言えるみたい。実際にやってみてうまくいったことなどを話しているので、ある種の学習コストを要求するものの、よいところもあるようには思える。おそらくは意図的に悪いところを話してなかったようには思える。例えば、それぞれのスプリントのイベントにおけるオーバーヘッドは大きくなるので作業時間が減るとか、10分タスクですべてチケット化すると、チケット数が増えるので必然的に過程の記録はチケットに残ってないはず。スプリントバックログを付箋の代わりに使うだけというのはスクラム開発一般の話ではあるけど、このやり方では開発者が何をやっているかを書く場所としてチケットは適切な場所ではなくなる。代わりに wiki にまとめるとは話してた。wiki だとフロー情報を監視するのが難しくなるが、その分、短いスプリントでのイベント (プランニング、レビュー、レトロスペクティブ) が頻繁にあるのでそれをフロー情報の監視の代替として機能するようにみえる。いわば強制で。&lt;/p>
&lt;p>15分スプリントと聞いて先入観でイメージするよりも、合理的なところも理解できたのでチームの学習コストとスプリントイベントのオーバーヘッドを受け入れるなら悪くない開発方法論かもしれない。良い・悪いといった是非ではなく、47機関さんが大事にしているチームの価値観や文化、そしてチームをよくするための実践的な方法論と一緒に理解することでこの開発方法論は活きてくる。開発方法論だけをみてあれこれ言うのは適切ではないとも思えた。自分たちの業務や働き方にあった開発方法論を開発チームはずっと考え続けていくべきだと私は考えていて、47機関というチームはフラクタルスプリントという手法を編み出して、それ自体が素晴らしいなと思えた。&lt;/p></content></item><item><title>vimgrep 検索の嬉しさ</title><link>/diary/posts/2021/1013/</link><pubDate>Wed, 13 Oct 2021 09:02:46 +0900</pubDate><guid>/diary/posts/2021/1013/</guid><description>2時頃に寝て6時に起きる。普段、日記は vim で書いている。ちょっとした過去の日記の検索に vimgrep でこと足りるのが嬉しい。テキストで日記を書いていることの利点かな。夜に fin-pyコードリーディング会#4 に参加した。事前に hackmd に発表内容のメモを書いてた。いろんな発表者の視点があってコードリーディングのイベントはおもしろかった。
朝活 【三宮.dev オンライン】リモート朝活もくもく会 に参加してみた。何もなかったらだいたい7時頃に起きるのがなにか目的があると6時に起きれる。人体の不思議。せっかく起きたので 前に More Joel on Software を読んだとき に学生向けのアドバイスにあったミクロ経済学の勉強のためにその入門書を読み始めた。参加者が勉強会の常連ばかりだったので朝からわりと雑談してた。2人転職するという話で2人とも東京の会社でフルリモートワークで働くらしい。働き方が変わったなと感じる。その後、第1章の無差別曲線を読んだ。
YouTube 配信と集中力 あんちぽさんの 2021年10月9日 の日記でスライド作成の興がのらないので YouTube 配信しながらやったら集中できてよかったと書いてあったのでちょっと眺めてみた。なんかスライドの作成のやり方とか、自分と違うのかな？とか思いながらみたけど、やり方自体は普通だった。ただ集中できてよかったとあるので普段のやり方とは異なることをすることに意義があるのかな？とも思えた。試しに YouTube Live やってみようとしたら初期設定？に24時間かかるとのこと。代わりに kazam というスクリーンリコーダーの使い方を調べてた。勉強会で作業したログとかを録画しておいてなにかに使えたりするかもしれない。
データ指向アプリケーションデザイン 半日ほどかかって3章ストレージと抽出を読んだ。読みながら書いているので時間がかかる。今日はこれだけ。まとめはこんな感じ。
データベースのシステムには2つの用途があり、その特性やパフォーマンスを最適化するためにストレージエンジンやデータ構造が異なるもので運用されるようになってきた。
オンライントランザクション処理 (OLTP) 行指向、トランザクション処理 オンライン分析処理 (OLAP) 列指向、分析クエリ OLTP には2つの主要なストレージエンジンがある。
B ツリー 1970年代からあり、成熟していて且つ効率的なインデックスのデータ構造 LSM ツリー 比較的最近開発された、ディスク上でのランダムアクセスをシステム的にシーケンシャルアクセスに変換して、書き込みのスループットを高める手法。もとは Google の BigTable の論文？ OLAP の典型的なデータウェアハウスの高レベルでのアーキテクチャでは、大量の行をシーケンシャルにスキャンしなければならないクエリの場合、インデックスはあまり関係なく、データを非常にコンパクトにエンコードし、クエリがディスクから読まなければならないデータの量を最小限にとどめることが重要となる。この目標を達成するのに列指向のストレージが役立つ。</description><content>&lt;p>2時頃に寝て6時に起きる。普段、日記は vim で書いている。ちょっとした過去の日記の検索に &lt;code>vimgrep&lt;/code> でこと足りるのが嬉しい。テキストで日記を書いていることの利点かな。夜に &lt;a href="https://fin-py.connpass.com/event/226933/">fin-pyコードリーディング会#4&lt;/a> に参加した。事前に &lt;a href="https://hackmd.io/bFBFaPbYS1Kqfc97HMlp7Q?view">hackmd&lt;/a> に発表内容のメモを書いてた。いろんな発表者の視点があってコードリーディングのイベントはおもしろかった。&lt;/p>
&lt;h2 id="朝活">朝活&lt;/h2>
&lt;p>&lt;a href="https://kobe-sannomiya-dev.connpass.com/event/227678/">【三宮.dev オンライン】リモート朝活もくもく会&lt;/a> に参加してみた。何もなかったらだいたい7時頃に起きるのがなにか目的があると6時に起きれる。人体の不思議。せっかく起きたので &lt;a href="/diary/diary/posts/2021/0929/#joel-on-software">前に More Joel on Software を読んだとき&lt;/a> に学生向けのアドバイスにあったミクロ経済学の勉強のためにその入門書を読み始めた。参加者が勉強会の常連ばかりだったので朝からわりと雑談してた。2人転職するという話で2人とも東京の会社でフルリモートワークで働くらしい。働き方が変わったなと感じる。その後、第1章の無差別曲線を読んだ。&lt;/p>
&lt;h2 id="youtube-配信と集中力">YouTube 配信と集中力&lt;/h2>
&lt;p>あんちぽさんの &lt;a href="https://kentarokuribayashi.com/journal/2021/10/09/2021%e5%b9%b410%e6%9c%889%e6%97%a5">2021年10月9日&lt;/a> の日記でスライド作成の興がのらないので YouTube 配信しながらやったら集中できてよかったと書いてあったのでちょっと眺めてみた。なんかスライドの作成のやり方とか、自分と違うのかな？とか思いながらみたけど、やり方自体は普通だった。ただ集中できてよかったとあるので普段のやり方とは異なることをすることに意義があるのかな？とも思えた。試しに YouTube Live やってみようとしたら初期設定？に24時間かかるとのこと。代わりに &lt;a href="https://launchpad.net/kazam">kazam&lt;/a> というスクリーンリコーダーの使い方を調べてた。勉強会で作業したログとかを録画しておいてなにかに使えたりするかもしれない。&lt;/p>
&lt;h2 id="データ指向アプリケーションデザイン">データ指向アプリケーションデザイン&lt;/h2>
&lt;p>半日ほどかかって3章ストレージと抽出を読んだ。読みながら書いているので時間がかかる。今日はこれだけ。まとめはこんな感じ。&lt;/p>
&lt;blockquote>
&lt;p>データベースのシステムには2つの用途があり、その特性やパフォーマンスを最適化するためにストレージエンジンやデータ構造が異なるもので運用されるようになってきた。&lt;/p>
&lt;ul>
&lt;li>オンライントランザクション処理 (OLTP)
&lt;ul>
&lt;li>行指向、トランザクション処理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>オンライン分析処理 (OLAP)
&lt;ul>
&lt;li>列指向、分析クエリ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>OLTP には2つの主要なストレージエンジンがある。&lt;/p>
&lt;ul>
&lt;li>B ツリー
&lt;ul>
&lt;li>1970年代からあり、成熟していて且つ効率的なインデックスのデータ構造&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>LSM ツリー
&lt;ul>
&lt;li>比較的最近開発された、ディスク上でのランダムアクセスをシステム的にシーケンシャルアクセスに変換して、書き込みのスループットを高める手法。もとは Google の BigTable の論文？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>OLAP の典型的なデータウェアハウスの高レベルでのアーキテクチャでは、大量の行をシーケンシャルにスキャンしなければならないクエリの場合、インデックスはあまり関係なく、データを非常にコンパクトにエンコードし、クエリがディスクから読まなければならないデータの量を最小限にとどめることが重要となる。この目標を達成するのに列指向のストレージが役立つ。&lt;/p>
&lt;/blockquote>
&lt;p>過去に Cassandra を使ったプロダクトの開発に関わっていたから B ツリーと LSM ツリーの概要は知っていて3章で書いてあることはだいたい理解できた。データウェアハウスに関しては、前にお手伝いしていた会社で普通のログを Amazon Athena で処理すると1時間とかかかって分析クエリが Parquet に変換すると数分で完了したりするのを目の当たりにしてた。分析処理で読み込むデータ量を削減する列指向の考え方は理解しておく必要がある。行指向のデータを列指向フォーマットである &lt;a href="https://parquet.apache.org/">Parquet&lt;/a> に変換する &lt;a href="https://github.com/reproio/columnify">columnify&lt;/a> のコードも読んだことがあったので内容のイメージはできるけど、実務経験が少ないと全体像がわかっておらず、本書を読みながら学び直ししてた。&lt;/p></content></item></channel></rss>