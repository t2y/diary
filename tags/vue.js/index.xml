<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vue.js on forest nook</title><link>/diary/tags/vue.js/</link><description>Recent content in vue.js on forest nook</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>© 2021 Tetsuya Morimoto</copyright><lastBuildDate>Wed, 24 Aug 2022 07:58:08 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/vue.js/index.xml" rel="self" type="application/rss+xml"/><item><title>vuejs の template 調査</title><link>/diary/posts/2022/0824/</link><pubDate>Wed, 24 Aug 2022 07:58:08 +0900</pubDate><guid>/diary/posts/2022/0824/</guid><description>0時に寝て6時に起きた。
連日のサービスイン作業 引き続きサービスインの運用対応は大変そうでちゃんと検証していない修正を慌ててマージしようとしているからテスト環境まで壊れてて関係ない開発にも影響が出ていた。今日も別の施設のサービスインだったらしくて、ある機能がないとそのサービスインの切り替え作業ができないという話しだったそうで、当日に慌てて pr を作ってマージしてた。うちはぬるま湯チームだから厳しいふりかえりもしないのだろうけど、先週からわかっていた必要な機能を実装してなくて、週末は残業も休出もしてなくて、今日になって慌てて修正してマージしてた。昔と比べてがんばっててできないのではなくて、がんばってないからできないという開発になったなという印象。
vuejs の template と expression あるフォームのコンポーネントを作ろうと思って interface を定義していてデフォルト値をテンプレート側に指定できるといいんじゃないかと考えた。というのは typescript の interface のメンバーは値を保持できないから。例えば、次のようなコードで :cols=&amp;quot;item.col ?? 2&amp;quot; のように表現できたら嬉しいように思う。
&amp;lt;v-row dense v-for=&amp;#34;item in conditions&amp;#34; :key=&amp;#34;item.label&amp;#34;&amp;gt; &amp;lt;v-col :cols=&amp;#34;item.col ?? 2&amp;#34;&amp;gt; {{ element }} &amp;lt;/v-col&amp;gt; &amp;lt;/v-row&amp;gt; 余談だけど、?? は null 合体演算子という名前は知っていたけど、これを英語で何と呼ぶのか知らなかった。Nullish coalescing operator と言う。ググってみると vuejs の issue でもそこそこ議論されていて vue3 からサポートするとしながら、根強い要望があるのか？ vue2 でも 2.7 でサポートしたらしい。こういうモダンな javascript の expression を ESNext syntax と呼んだりするみたい。それすらも知らなかった。
Optional chaining in templates does not seem to work #11088 たまたまうちで使っているのは vue 2.</description><content>&lt;p>0時に寝て6時に起きた。&lt;/p>
&lt;h2 id="連日のサービスイン作業">連日のサービスイン作業&lt;/h2>
&lt;p>引き続きサービスインの運用対応は大変そうでちゃんと検証していない修正を慌ててマージしようとしているからテスト環境まで壊れてて関係ない開発にも影響が出ていた。今日も別の施設のサービスインだったらしくて、ある機能がないとそのサービスインの切り替え作業ができないという話しだったそうで、当日に慌てて pr を作ってマージしてた。うちはぬるま湯チームだから厳しいふりかえりもしないのだろうけど、先週からわかっていた必要な機能を実装してなくて、週末は残業も休出もしてなくて、今日になって慌てて修正してマージしてた。昔と比べてがんばっててできないのではなくて、がんばってないからできないという開発になったなという印象。&lt;/p>
&lt;h2 id="vuejs-の-template-と-expression">vuejs の template と expression&lt;/h2>
&lt;p>あるフォームのコンポーネントを作ろうと思って interface を定義していてデフォルト値をテンプレート側に指定できるといいんじゃないかと考えた。というのは typescript の interface のメンバーは値を保持できないから。例えば、次のようなコードで &lt;code>:cols=&amp;quot;item.col ?? 2&amp;quot;&lt;/code> のように表現できたら嬉しいように思う。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;v-row&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">dense&lt;/span> &lt;span style="color:#a6e22e">v-for=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;item in conditions&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">:key=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;item.label&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;v-col&lt;/span> &lt;span style="color:#a6e22e">:cols=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;item.col ?? 2&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ element }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/v-col&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/v-row&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>余談だけど、&lt;code>??&lt;/code> は null 合体演算子という名前は知っていたけど、これを英語で何と呼ぶのか知らなかった。&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator">Nullish coalescing operator&lt;/a> と言う。ググってみると vuejs の issue でもそこそこ議論されていて vue3 からサポートするとしながら、根強い要望があるのか？ vue2 でも 2.7 でサポートしたらしい。こういうモダンな javascript の expression を ESNext syntax と呼んだりするみたい。それすらも知らなかった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vuejs/vue/issues/11088">Optional chaining in templates does not seem to work #11088&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>たまたまうちで使っているのは vue 2.6.14 なので vue 2.7 で動くのかどうか検証できないけど、いま使っている nuxtjs2 との依存関係があるのでそれ次第で vue 2.7 にアップグレードの可否が決まるらしい。全然フロントエンドの開発がわからないので、こういう基本的なところで引っかかると背景を調べるのに時間がかかる。&lt;/p></content></item><item><title>vuetify のイベントリスナーの調査</title><link>/diary/posts/2022/0823/</link><pubDate>Tue, 23 Aug 2022 17:12:13 +0900</pubDate><guid>/diary/posts/2022/0823/</guid><description>4時に寝て7時に起きた。日曜日にたくさん寝たせいか、昨日は眠れなかった。サービスインの運用対応はまだまだドタバタしていてデータの不整合に苦しんでいるみたい。大変そうだけど、なにもやることない。
vuetify の v-data-table のページング処理 昨日から vuetify のページング処理を調査している。コンポーネント的には2種類ある。
v-pagination: 汎用のページングコンポーネント v-data-table: data table のコンポーネント (ページング機能がある) 既存のアプリケーションは nuxtjs で実装されているので vuetify や vue.js のサンプルコードをそのまま動かせるわけではない。丸1日、試行錯誤していてビューと値の束縛、イベントの伝搬などの振る舞いをだいたい理解できた。宣言的なフレームワークなので振る舞いを理解できれば開発量は少なく済む。但し、理解するまで振る舞いを理解するのに設定を試行錯誤で試して動かすのでデバッグは時間がかかる。一覧画面で使っている v-data-table のページング処理対応から始める。Server-side paginate and sort を参考にしながら v-data-table に加えた主な変更はこれら。
&amp;lt;v-data-table ... :server-items-length=&amp;#34;serverItemsLength&amp;#34; :disable-pagination=&amp;#34;disablePagination&amp;#34; :hide-default-footer=&amp;#34;hideDefaultFooter&amp;#34; :options.sync=&amp;#34;options&amp;#34; :footer-props=&amp;#34;{ itemsPerPageOptions: [10, 20, 50, 100], }&amp;#34; v-bind=&amp;#34;$attrs&amp;#34; v-on=&amp;#34;$listeners&amp;#34; &amp;gt; v-data-table をラップするコンポーネントでは次のようにイベントリスナーを登録する。
&amp;lt;my-nice-component ... ￼ :server-items-length=&amp;#34;serverItemsLength&amp;#34; ￼ :disable-pagination=&amp;#34;false&amp;#34; ￼ :hide-default-footer=&amp;#34;false&amp;#34; @update:options=&amp;#34;dataOptionsHandler&amp;#34; &amp;gt; async dataOptionsHandler(options: DataOptions) { const page = options.page ?? 1; const limit = options.</description><content>&lt;p>4時に寝て7時に起きた。日曜日にたくさん寝たせいか、昨日は眠れなかった。サービスインの運用対応はまだまだドタバタしていてデータの不整合に苦しんでいるみたい。大変そうだけど、なにもやることない。&lt;/p>
&lt;h2 id="vuetify-の-v-data-table-のページング処理">vuetify の v-data-table のページング処理&lt;/h2>
&lt;p>昨日から vuetify のページング処理を調査している。コンポーネント的には2種類ある。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vuetifyjs.com/en/api/v-pagination/">v-pagination&lt;/a>: 汎用のページングコンポーネント&lt;/li>
&lt;li>&lt;a href="https://vuetifyjs.com/en/api/v-data-table/">v-data-table&lt;/a>: data table のコンポーネント (ページング機能がある)&lt;/li>
&lt;/ul>
&lt;p>既存のアプリケーションは nuxtjs で実装されているので vuetify や vue.js のサンプルコードをそのまま動かせるわけではない。丸1日、試行錯誤していてビューと値の束縛、イベントの伝搬などの振る舞いをだいたい理解できた。宣言的なフレームワークなので振る舞いを理解できれば開発量は少なく済む。但し、理解するまで振る舞いを理解するのに設定を試行錯誤で試して動かすのでデバッグは時間がかかる。一覧画面で使っている v-data-table のページング処理対応から始める。&lt;a href="https://vuetifyjs.com/en/components/data-tables/#server-side-paginate-and-sort">Server-side paginate and sort&lt;/a> を参考にしながら v-data-table に加えた主な変更はこれら。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">v&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">data&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">table&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#a6e22e">server&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">items&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;serverItemsLength&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#a6e22e">disable&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">pagination&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;disablePagination&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#a6e22e">hide&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">default&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">footer&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hideDefaultFooter&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#a6e22e">options.sync&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">options&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#a6e22e">footer&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">props&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> itemsPerPageOptions: [10, 20, 50, 100],
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">v&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">bind&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;$attrs&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">v&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">on&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;$listeners&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>v-data-table をラップするコンポーネントでは次のようにイベントリスナーを登録する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">my&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">nice&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">component&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">￼&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#a6e22e">server&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">items&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;serverItemsLength&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">￼&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#a6e22e">disable&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">pagination&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">￼&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#a6e22e">hide&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">default&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">footer&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">update&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>&lt;span style="color:#a6e22e">options&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;dataOptionsHandler&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#a6e22e">dataOptionsHandler&lt;/span>(&lt;span style="color:#a6e22e">options&lt;/span>: &lt;span style="color:#66d9ef">DataOptions&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">page&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">page&lt;/span> &lt;span style="color:#f92672">??&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">limit&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">itemsPerPage&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">offset&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">limit&lt;/span> &lt;span style="color:#f92672">*&lt;/span> (&lt;span style="color:#a6e22e">page&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// limit/offset を使った web api リクエスト
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://v2.vuejs.org/v2/api/#vm-listeners">vm.$listeners&lt;/a> によると &lt;code>v-on=&amp;quot;$listeners&amp;quot;&lt;/code> のように書くと、ラップしているコンポーネントのイベントリスナーをよしなに伝搬してくれるみたい。これはこれで便利だけど、イベントリスナーの定義がどこにもでてこないのでコード検索ができなくなる。最近の宣言的なフレームワークの流行りと言えばそうだけど、知ってないとなんで動くのかわからないコードにはなる。&lt;/p></content></item><item><title>たまには画面作り</title><link>/diary/posts/2022/0817/</link><pubDate>Wed, 17 Aug 2022 11:12:26 +0900</pubDate><guid>/diary/posts/2022/0817/</guid><description>1時に寝て6時に起きた。
リファクタリングとインフラ移行 ここ2週間ほどリファクタリングやらインフラ変更やらをしてきて、来週からまた新しい施設がサービスインするので区切りとしてリファクタリングは一旦終わりにする。今日がその集大成となるインフラ移行も含めた本番リリースだった。インフラ移行するときはなにかしら障害が起きる前提で待機しているものの、今日もすんなりと意図した通りに移行できて、してやったりではあるものの、モノ足りなさで拍子抜けしてしまった。また昨日から社内 wiki にも minikube の使い方、k8s cronjob の設計、バッチ処理の設計と実装についてドキュメントなどを書いていた。いままですべて私が1人で担当していたものを他メンバーでも作業できるようにドキュメント化した。近いうちにいなくなるので引き継ぎのドキュメントにもなる。
nuxt で画面作り ここ最近2種類の web api の機能を作ったのでその管理画面も2つ作る必要がある。私はフロントエンド開発の素人なので他のメンバーが作ってくれないかと声をかけてはいたけど、みんな忙しいようなので私が作ることにした。今週は nuxtjs の新規画面の開発をがんばってみようと思う。既存のソースを読む限りはそんなに複雑ではなさそう。素人が雰囲気で実装しても動くんじゃないかと思っている。ソースコードを読んでいて url 設計はめちゃくちゃだし、一覧画面にはページング機能も実装されていない。素人がソースを読んで基本的な骨子や機能が正しく実装されてないことがわかってしまうのは品質レベルとしてなにかがおかしい。圧倒的低品質と呼ぶのか、こんなことが起こってしまうのはよい開発文化がないせいなのだろうと考えている。</description><content>&lt;p>1時に寝て6時に起きた。&lt;/p>
&lt;h2 id="リファクタリングとインフラ移行">リファクタリングとインフラ移行&lt;/h2>
&lt;p>ここ2週間ほどリファクタリングやらインフラ変更やらをしてきて、来週からまた新しい施設がサービスインするので区切りとしてリファクタリングは一旦終わりにする。今日がその集大成となるインフラ移行も含めた本番リリースだった。インフラ移行するときはなにかしら障害が起きる前提で待機しているものの、今日もすんなりと意図した通りに移行できて、してやったりではあるものの、モノ足りなさで拍子抜けしてしまった。また昨日から社内 wiki にも minikube の使い方、k8s cronjob の設計、バッチ処理の設計と実装についてドキュメントなどを書いていた。いままですべて私が1人で担当していたものを他メンバーでも作業できるようにドキュメント化した。近いうちにいなくなるので引き継ぎのドキュメントにもなる。&lt;/p>
&lt;h2 id="nuxt-で画面作り">nuxt で画面作り&lt;/h2>
&lt;p>ここ最近2種類の web api の機能を作ったのでその管理画面も2つ作る必要がある。私はフロントエンド開発の素人なので他のメンバーが作ってくれないかと声をかけてはいたけど、みんな忙しいようなので私が作ることにした。今週は &lt;a href="https://nuxtjs.org/ja/">nuxtjs&lt;/a> の新規画面の開発をがんばってみようと思う。既存のソースを読む限りはそんなに複雑ではなさそう。素人が雰囲気で実装しても動くんじゃないかと思っている。ソースコードを読んでいて url 設計はめちゃくちゃだし、一覧画面にはページング機能も実装されていない。素人がソースを読んで基本的な骨子や機能が正しく実装されてないことがわかってしまうのは品質レベルとしてなにかがおかしい。圧倒的低品質と呼ぶのか、こんなことが起こってしまうのはよい開発文化がないせいなのだろうと考えている。&lt;/p></content></item><item><title>暇つぶしのフロントエンド開発</title><link>/diary/posts/2022/0330/</link><pubDate>Wed, 30 Mar 2022 07:18:47 +0900</pubDate><guid>/diary/posts/2022/0330/</guid><description>0時に寝て4時に起きた。起きてから sns のタイムラインを眺めてぼーっとしてた。
フロントエンド開発 先週からタスクがなくて (社員さんが多忙で今スプリントのタスク洗い出しができていない) だらだらしていて、来週から引き取ろうと思っている cdk 周りのインフラ構築の調査を事前に始めようかと考えていた。そういう話を社員さんにしたらフロントエンドの開発を手伝ってほしいと言われた。
種々雑多なフロントエンドの ui に関する改善要望が十数個あがっていて対応できないのでちょっとでもやってほしいという依頼。少し前に 初めてフロントエンド開発 に着手して、4つほど PR を送ってマージされた。にも関わらず、社員さんに「開発環境の作り方わかりますか？」と質問を受けた。ちょっときょとんとして「前に PR をいくつか送りましたが、なにか他にやらないといけないことがありますか？」と質問に質問で返した。社員さんもテンパっているのか、過去に私がフロントエンドの PR を出していたことを認識してなかったみたい。vue.js も nuxt も全くわからないので開発スタイルも以前のまま。
全然わからない。俺たちは雰囲気で開発している。
5つほど ui 改善のチケットを fix した。難しいことはわからないので私でもできそうな簡単なものから選択して直していった。そしたら、翌日のデイリースクラムで業務の人たちからすごい勢いで直してくれてるみたいにめっちゃ感謝された。もともと社員さんが他のタスクに忙しくていまできないって業務の人たちに前日断っていたタスク群を、いま手持ちのタスクが何もないので暇を持て余してますという私が fix しているんだから、世の中、訳がわからない。私は普段バックエンド開発している人間だから業務の人たちに感謝されることはおろか、やっていることさえ理解されない方なんだけど、たまに ui とか改善すると感謝されて嬉しいという気持ちは他の開発者よりも強いかもしれない。</description><content>&lt;p>0時に寝て4時に起きた。起きてから sns のタイムラインを眺めてぼーっとしてた。&lt;/p>
&lt;h2 id="フロントエンド開発">フロントエンド開発&lt;/h2>
&lt;p>先週からタスクがなくて (社員さんが多忙で今スプリントのタスク洗い出しができていない) だらだらしていて、来週から引き取ろうと思っている cdk 周りのインフラ構築の調査を事前に始めようかと考えていた。そういう話を社員さんにしたらフロントエンドの開発を手伝ってほしいと言われた。&lt;/p>
&lt;p>種々雑多なフロントエンドの ui に関する改善要望が十数個あがっていて対応できないのでちょっとでもやってほしいという依頼。少し前に &lt;a href="/diary/diary/posts/2022/0315/##フロントエンド開発">初めてフロントエンド開発&lt;/a> に着手して、4つほど PR を送ってマージされた。にも関わらず、社員さんに「開発環境の作り方わかりますか？」と質問を受けた。ちょっときょとんとして「前に PR をいくつか送りましたが、なにか他にやらないといけないことがありますか？」と質問に質問で返した。社員さんもテンパっているのか、過去に私がフロントエンドの PR を出していたことを認識してなかったみたい。vue.js も nuxt も全くわからないので開発スタイルも以前のまま。&lt;/p>
&lt;blockquote>
&lt;p>全然わからない。俺たちは雰囲気で開発している。&lt;/p>
&lt;/blockquote>
&lt;p>5つほど ui 改善のチケットを fix した。難しいことはわからないので私でもできそうな簡単なものから選択して直していった。そしたら、翌日のデイリースクラムで業務の人たちからすごい勢いで直してくれてるみたいにめっちゃ感謝された。もともと社員さんが他のタスクに忙しくていまできないって業務の人たちに前日断っていたタスク群を、いま手持ちのタスクが何もないので暇を持て余してますという私が fix しているんだから、世の中、訳がわからない。私は普段バックエンド開発している人間だから業務の人たちに感謝されることはおろか、やっていることさえ理解されない方なんだけど、たまに ui とか改善すると感謝されて嬉しいという気持ちは他の開発者よりも強いかもしれない。&lt;/p></content></item><item><title>フロントエンド開発着手</title><link>/diary/posts/2022/0315/</link><pubDate>Tue, 15 Mar 2022 07:25:53 +0900</pubDate><guid>/diary/posts/2022/0315/</guid><description>0時に寝て3時に起きて6時に起きた。やっぱり起きてからドラクエタクトしてた。
フロントエンド開発 デプロイ改善が完了したので新しいタスクに取り組み始めた。もともとこの開発チームはバックエンドもフロントエンドも全部やるというチームなので、やりかけ中のタスクのフロントエンド側の変更に着手して、既存の画面に新規項目を追加するといった作業をやってみた。フロントエンドは vue.js + nuxt で開発している。ビルドに30秒ぐらいかかる。ちょっと遅い。宣言型 ui のよいところかもしれないけど、vue.js も nuxt もまったく触ったことないけど、ripgrep で検索してちょちょっとコピペしたらそれっぽく動いた。これはまさにあれだ。
全然わからない。俺たちは雰囲気で開発している。
動いたらラッキーみたいな感じで PR を作って、たまたまレビューも通って、テスト環境で動いたんでラッキーだった。</description><content>&lt;p>0時に寝て3時に起きて6時に起きた。やっぱり起きてからドラクエタクトしてた。&lt;/p>
&lt;h2 id="フロントエンド開発">フロントエンド開発&lt;/h2>
&lt;p>デプロイ改善が完了したので新しいタスクに取り組み始めた。もともとこの開発チームはバックエンドもフロントエンドも全部やるというチームなので、やりかけ中のタスクのフロントエンド側の変更に着手して、既存の画面に新規項目を追加するといった作業をやってみた。フロントエンドは vue.js + nuxt で開発している。ビルドに30秒ぐらいかかる。ちょっと遅い。宣言型 ui のよいところかもしれないけど、vue.js も nuxt もまったく触ったことないけど、ripgrep で検索してちょちょっとコピペしたらそれっぽく動いた。これはまさにあれだ。&lt;/p>
&lt;blockquote>
&lt;p>全然わからない。俺たちは雰囲気で開発している。&lt;/p>
&lt;/blockquote>
&lt;p>動いたらラッキーみたいな感じで PR を作って、たまたまレビューも通って、テスト環境で動いたんでラッキーだった。&lt;/p></content></item></channel></rss>