<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Backlog on</title><link>/diary/tags/backlog/</link><description>Recent content in Backlog on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 25 Sep 2022 13:14:22 +0900</lastBuildDate><atom:icon>/diary/favicon.ico</atom:icon><icon>/diary/favicon.ico</icon><atom:link href="/diary/tags/backlog/index.xml" rel="self" type="application/rss+xml"/><item><title>quarkus のアプリ開発が楽しくなってきた</title><link>/diary/posts/2022/0925/</link><pubDate>Sun, 25 Sep 2022 13:14:22 +0900</pubDate><guid>/diary/posts/2022/0925/</guid><description>4時に寝て8時に起きた。昨日は久しぶりに夜更しして quarkus の調べものをしてた。新しいものを学ぶのはおもしろい。
ストレッチ 今週末は本当は実家に帰る予定だったのが、台風による雨で田んぼのコンディションがよくないので断念した。日曜日の夜、田んぼ仕事を終えて筋肉痛のところにストレッチしてもらう予定は変わってしまった。今日の開脚幅は開始前155cmで、ストレッチ後160cmだった。いつもは朝測っているのが夜になるので数値はよくなかった。とはいえ、あまり規則正しく寝てないわりには体調がよい。気候が涼しいせいかな。トレーナーさんに来週はもう10月ですよと言われて9月は過ぎさるのが早いと改めて思った。
quarkus アプリケーションと認可フロー 昨日の続き。お昼前ぐらいからずっと quarkus のアプリケーション開発をしていた。なんやらかんやらで3日間ずっと bolt や quarkus のソースやドキュメントを読んでいた。徐々に理解度が増えてきて、できることも増えてきて楽しくなってきた。web 系だと di に google/guice を使うものも多いけど、エンタープライズ系だと cdi なのかなぁとか思ってた。わからんけど。以前にも cdi のドキュメントを読んで関心があった。cdi は本当によく出来ていると思う。一方で難し過ぎて、そこまでコンテキストを厳密に管理する必要があるアプリケーションもそうないのかもなぁとは思ってた。今日 quarkus でアプリケーション開発していてドキュメントを読みながらやってみたところが次になる。
CONTEXTS AND DEPENDENCY INJECTION USING THE REST CLIENT WRITING JSON REST SERVICES だいたい雰囲気は理解できてきたので backlog の Authentication &amp;amp; Authorization に書いてある oauth2 の Authorization Code Grant のフローを実装していた。access token の取得と refresh はできたのでこれを db に保存するのを明日以降にやってみる。</description><content>&lt;p>4時に寝て8時に起きた。昨日は久しぶりに夜更しして quarkus の調べものをしてた。新しいものを学ぶのはおもしろい。&lt;/p>
&lt;h2 id="ストレッチ">ストレッチ&lt;/h2>
&lt;p>今週末は本当は実家に帰る予定だったのが、台風による雨で田んぼのコンディションがよくないので断念した。日曜日の夜、田んぼ仕事を終えて筋肉痛のところにストレッチしてもらう予定は変わってしまった。今日の開脚幅は開始前155cmで、ストレッチ後160cmだった。いつもは朝測っているのが夜になるので数値はよくなかった。とはいえ、あまり規則正しく寝てないわりには体調がよい。気候が涼しいせいかな。トレーナーさんに来週はもう10月ですよと言われて9月は過ぎさるのが早いと改めて思った。&lt;/p>
&lt;h2 id="quarkus-アプリケーションと認可フロー">quarkus アプリケーションと認可フロー&lt;/h2>
&lt;p>昨日の続き。お昼前ぐらいからずっと quarkus のアプリケーション開発をしていた。なんやらかんやらで3日間ずっと bolt や quarkus のソースやドキュメントを読んでいた。徐々に理解度が増えてきて、できることも増えてきて楽しくなってきた。web 系だと di に &lt;a href="https://github.com/google/guice">google/guice&lt;/a> を使うものも多いけど、エンタープライズ系だと &lt;a href="https://quarkus.io/guides/cdi">cdi&lt;/a> なのかなぁとか思ってた。わからんけど。以前にも cdi のドキュメントを読んで関心があった。cdi は本当によく出来ていると思う。一方で難し過ぎて、そこまでコンテキストを厳密に管理する必要があるアプリケーションもそうないのかもなぁとは思ってた。今日 quarkus でアプリケーション開発していてドキュメントを読みながらやってみたところが次になる。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://quarkus.io/guides/cdi-reference">CONTEXTS AND DEPENDENCY INJECTION&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://quarkus.io/guides/rest-client">USING THE REST CLIENT&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://quarkus.io/guides/rest-json">WRITING JSON REST SERVICES&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>だいたい雰囲気は理解できてきたので backlog の &lt;a href="https://developer.nulab.com/docs/backlog/auth/">Authentication &amp;amp; Authorization&lt;/a> に書いてある oauth2 の &lt;em>Authorization Code Grant&lt;/em> のフローを実装していた。access token の取得と refresh はできたのでこれを db に保存するのを明日以降にやってみる。&lt;/p></content></item></channel></rss>